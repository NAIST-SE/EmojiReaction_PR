miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,187,2016-01-13T10:34:52Z,2016-01-13T15:13:48Z,2016-01-14T17:39:04Z,MERGED,True,4,3,2,https://github.com/vvsvic,Remove some bugs in DeletePCPPeer and DeletePCPMap,1,[],https://github.com/miniupnp/miniupnp/pull/187,https://github.com/vvsvic,1,https://github.com/miniupnp/miniupnp/pull/187,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,187,2016-01-13T10:34:52Z,2016-01-13T15:13:48Z,2016-01-14T17:39:04Z,MERGED,True,4,3,2,https://github.com/vvsvic,Remove some bugs in DeletePCPPeer and DeletePCPMap,1,[],https://github.com/miniupnp/miniupnp/pull/187,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/187#issuecomment-171250842,,could you give some more details about your fixes ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,187,2016-01-13T10:34:52Z,2016-01-13T15:13:48Z,2016-01-14T17:39:04Z,MERGED,True,4,3,2,https://github.com/vvsvic,Remove some bugs in DeletePCPPeer and DeletePCPMap,1,[],https://github.com/miniupnp/miniupnp/pull/187,https://github.com/vvsvic,3,https://github.com/miniupnp/miniupnp/pull/187#issuecomment-171258359,,"pcpserver.c

get_peer_rule_by_index and  get_redirect_rule_by_index return 0 if successful
char iaddr2[16] is too small for IPv6 address.

iptpinhole.c

you will get error message every minute without removal of broken pinhole after pinhole expiration",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,201,2016-07-23T08:09:09Z,2016-08-16T09:50:05Z,2017-02-03T16:07:12Z,MERGED,True,5,1,2,https://github.com/y0n3t4n1,A few fixes for miniupnpd on DragonFly BSD,3,[],https://github.com/miniupnp/miniupnp/pull/201,https://github.com/y0n3t4n1,1,https://github.com/miniupnp/miniupnp/pull/201,"fix a few build issues
when built with ENABLE_IPV6, miniupnpd didn't respond to requests made to its IPv4 addresses.","fix a few build issues
when built with ENABLE_IPV6, miniupnpd didn't respond to requests made to its IPv4 addresses.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,201,2016-07-23T08:09:09Z,2016-08-16T09:50:05Z,2017-02-03T16:07:12Z,MERGED,True,5,1,2,https://github.com/y0n3t4n1,A few fixes for miniupnpd on DragonFly BSD,3,[],https://github.com/miniupnp/miniupnp/pull/201,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/201#issuecomment-236281328,"fix a few build issues
when built with ENABLE_IPV6, miniupnpd didn't respond to requests made to its IPv4 addresses.","your PR is interesting, unfortunately I'm away, I cannot merge as fast as I wish",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,202,2016-07-23T10:38:06Z,2018-02-26T19:08:48Z,2018-02-26T21:34:03Z,CLOSED,False,105,106,13,https://github.com/irwir,Fix for a number of issues found during static code analysis:,6,[],https://github.com/miniupnp/miniupnp/pull/202,https://github.com/irwir,1,https://github.com/miniupnp/miniupnp/pull/202,"mismatching types;
unused header files;
unused variables;
unused assigned values;
free() needs no check for null pointer

This relates to the miniupnpc library only.","mismatching types;
unused header files;
unused variables;
unused assigned values;
free() needs no check for null pointer

This relates to the miniupnpc library only.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,202,2016-07-23T10:38:06Z,2018-02-26T19:08:48Z,2018-02-26T21:34:03Z,CLOSED,False,105,106,13,https://github.com/irwir,Fix for a number of issues found during static code analysis:,6,[],https://github.com/miniupnp/miniupnp/pull/202,https://github.com/irwir,2,https://github.com/miniupnp/miniupnp/pull/202#issuecomment-237033925,"mismatching types;
unused header files;
unused variables;
unused assigned values;
free() needs no check for null pointer

This relates to the miniupnpc library only.","Thanks, y0n3t4n1
Obviously, there is no need to cast to character pointer.
That is odd, I vaguely remember seeing something about pointers to void. Possibly I copy-pasted that from one of my previous versions without proper examination.
But idea to move type cast to macro definition cannot be used, because there are functions returning the same error code as signed value.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,202,2016-07-23T10:38:06Z,2018-02-26T19:08:48Z,2018-02-26T21:34:03Z,CLOSED,False,105,106,13,https://github.com/irwir,Fix for a number of issues found during static code analysis:,6,[],https://github.com/miniupnp/miniupnp/pull/202,https://github.com/iphydf,3,https://github.com/miniupnp/miniupnp/pull/202#issuecomment-368658480,"mismatching types;
unused header files;
unused variables;
unused assigned values;
free() needs no check for null pointer

This relates to the miniupnpc library only.",@irwir which tool did you use for static analysis?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,205,2016-07-29T11:36:04Z,2016-08-16T09:18:54Z,2016-08-16T09:18:54Z,CLOSED,False,3,0,1,https://github.com/ffontaine,Set _GNU_SOURCE in asyncsendto.c,1,[],https://github.com/miniupnp/miniupnp/pull/205,https://github.com/ffontaine,1,https://github.com/miniupnp/miniupnp/pull/205,"Add #define on _GNU_SOURCE at the very beginning of asyncsendto.c file
as this file uses in6_pktinfo which is protected by __USE_GNU in
libc/inet/netinet/in.h. Currently, this flag is set by the Makefile in
CFLAGS however CFLAGS could be overwritten by the build system.
Signed-off-by: Fabrice Fontaine fabrice.fontaine@orange.com","Add #define on _GNU_SOURCE at the very beginning of asyncsendto.c file
as this file uses in6_pktinfo which is protected by __USE_GNU in
libc/inet/netinet/in.h. Currently, this flag is set by the Makefile in
CFLAGS however CFLAGS could be overwritten by the build system.
Signed-off-by: Fabrice Fontaine fabrice.fontaine@orange.com",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,205,2016-07-29T11:36:04Z,2016-08-16T09:18:54Z,2016-08-16T09:18:54Z,CLOSED,False,3,0,1,https://github.com/ffontaine,Set _GNU_SOURCE in asyncsendto.c,1,[],https://github.com/miniupnp/miniupnp/pull/205,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/205#issuecomment-240049805,"Add #define on _GNU_SOURCE at the very beginning of asyncsendto.c file
as this file uses in6_pktinfo which is protected by __USE_GNU in
libc/inet/netinet/in.h. Currently, this flag is set by the Makefile in
CFLAGS however CFLAGS could be overwritten by the build system.
Signed-off-by: Fabrice Fontaine fabrice.fontaine@orange.com",_GNU_SOURCE is set in Makefile (both minissdpd/Makefile and miniupnpd/Makefile.linux),True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,206,2016-07-31T03:39:17Z,2016-08-01T07:49:39Z,2016-08-01T07:50:12Z,MERGED,True,5,4,2,https://github.com/Chocobo1,Fix appveyor builds,2,[],https://github.com/miniupnp/miniupnp/pull/206,https://github.com/Chocobo1,1,https://github.com/miniupnp/miniupnp/pull/206,I removed the single quotes if you don't mind.,I removed the single quotes if you don't mind.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,207,2016-08-25T22:16:23Z,2016-09-05T11:24:55Z,2016-09-05T11:24:55Z,MERGED,True,2,2,1,https://github.com/KingDuckZ,Fix cmake file so project can be used as a subproject,1,[],https://github.com/miniupnp/miniupnp/pull/207,https://github.com/KingDuckZ,1,https://github.com/miniupnp/miniupnp/pull/207,"I imported miniupnp as a git submodule in my cmake project and I was getting build errors. CMAKE_SOURCE_DIR always returns the path to the top-level cmake project, which is my project in this case (adding miniupnpc with add_subdirectory). CMAKE_CURRENT_SOURCE_DIR points to the intended directory instead. The same is true for CMAKE_BINARY_DIR/CMAKE_CURRENT_BINARY_DIR.","I imported miniupnp as a git submodule in my cmake project and I was getting build errors. CMAKE_SOURCE_DIR always returns the path to the top-level cmake project, which is my project in this case (adding miniupnpc with add_subdirectory). CMAKE_CURRENT_SOURCE_DIR points to the intended directory instead. The same is true for CMAKE_BINARY_DIR/CMAKE_CURRENT_BINARY_DIR.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,208,2016-08-29T07:47:41Z,2016-10-07T08:58:07Z,2016-10-07T08:58:07Z,CLOSED,False,0,0,0,https://github.com/ztecxb,Update testasync.c,2,[],https://github.com/miniupnp/miniupnp/pull/208,https://github.com/ztecxb,1,https://github.com/miniupnp/miniupnp/pull/208,test can write or not,test can write or not,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,208,2016-08-29T07:47:41Z,2016-10-07T08:58:07Z,2016-10-07T08:58:07Z,CLOSED,False,0,0,0,https://github.com/ztecxb,Update testasync.c,2,[],https://github.com/miniupnp/miniupnp/pull/208,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/208#issuecomment-243245404,test can write or not,what are you trying to update ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,209,2016-09-03T07:37:22Z,2016-09-05T11:19:28Z,2016-09-05T11:19:28Z,MERGED,True,11,1,2,https://github.com/erde74,add NetBSD support,1,[],https://github.com/miniupnp/miniupnp/pull/209,https://github.com/erde74,1,https://github.com/miniupnp/miniupnp/pull/209,"adjusted makefile to make packaging easy (pkgsrc)
compile fix for NetBSD","adjusted makefile to make packaging easy (pkgsrc)
compile fix for NetBSD",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,211,2016-09-22T19:57:32Z,2016-10-07T08:54:56Z,2016-10-07T08:54:56Z,CLOSED,False,24,15,1,https://github.com/yanngarras,miniupnpc : exit status according to upnp status,1,[],https://github.com/miniupnp/miniupnp/pull/211,https://github.com/yanngarras,1,https://github.com/miniupnp/miniupnp/pull/211,"Aims to fix issue 210.
The goal is that miniupnp exit status gives information on error or success during operation.
Now it will 0 if everything went fine, and other int if error occurred.","Aims to fix issue 210.
The goal is that miniupnp exit status gives information on error or success during operation.
Now it will 0 if everything went fine, and other int if error occurred.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,211,2016-09-22T19:57:32Z,2016-10-07T08:54:56Z,2016-10-07T08:54:56Z,CLOSED,False,24,15,1,https://github.com/yanngarras,miniupnpc : exit status according to upnp status,1,[],https://github.com/miniupnp/miniupnp/pull/211,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/211#issuecomment-249012327,"Aims to fix issue 210.
The goal is that miniupnp exit status gives information on error or success during operation.
Now it will 0 if everything went fine, and other int if error occurred.",oops I changed the code before seeing this PR,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,211,2016-09-22T19:57:32Z,2016-10-07T08:54:56Z,2016-10-07T08:54:56Z,CLOSED,False,24,15,1,https://github.com/yanngarras,miniupnpc : exit status according to upnp status,1,[],https://github.com/miniupnp/miniupnp/pull/211,https://github.com/yanngarras,3,https://github.com/miniupnp/miniupnp/pull/211#issuecomment-249012962,"Aims to fix issue 210.
The goal is that miniupnp exit status gives information on error or success during operation.
Now it will 0 if everything went fine, and other int if error occurred.","no problem. Could you return a code in RemoveRedirect
and RemoveRedirectRange too please ?
Thanks
2016-09-22 22:03 GMT+02:00 Thomas BERNARD notifications@github.com:

oops I changed the code before seeing this PR
—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
#211 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/AGbwmC4tKssSpmqrOkTvdaIfG1CXrchcks5qst74gaJpZM4KETEt
.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,212,2016-09-23T15:24:28Z,2016-10-07T08:54:21Z,2016-10-07T08:54:21Z,MERGED,True,26,12,1,https://github.com/yanngarras,RemoveRedirect() now return an error code,1,[],https://github.com/miniupnp/miniupnp/pull/212,https://github.com/yanngarras,1,https://github.com/miniupnp/miniupnp/pull/212,fixes #210,fixes #210,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,213,2016-10-06T12:21:27Z,2016-10-07T08:54:21Z,2016-10-09T16:01:30Z,MERGED,True,1,1,1,https://github.com/ifarbod,2015 => 2016,1,[],https://github.com/miniupnp/miniupnp/pull/213,https://github.com/ifarbod,1,https://github.com/miniupnp/miniupnp/pull/213,Simply updated copyright notice.,Simply updated copyright notice.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,215,2016-10-11T19:14:38Z,2016-10-11T19:59:24Z,2016-10-11T19:59:24Z,MERGED,True,22,18,1,https://github.com/sylvainpelissier,Add python 3 compatibility to IGD test,1,[],https://github.com/miniupnp/miniupnp/pull/215,https://github.com/sylvainpelissier,1,https://github.com/miniupnp/miniupnp/pull/215,Add python 3 compatibility to IGD test.,Add python 3 compatibility to IGD test.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,219,2016-11-11T14:54:02Z,2019-04-08T07:43:01Z,2019-04-08T07:43:01Z,CLOSED,False,4,0,1,https://github.com/noloader,Add select CFLAGS to LDFLAGS,1,"['miniupnpc', 'linux']",https://github.com/miniupnp/miniupnp/pull/219,https://github.com/noloader,1,https://github.com/miniupnp/miniupnp/pull/219,"This will allow users to add OpenMP and Sanitizer flags, and make the flags available to the compiler driver during link. The compiler driver will then add the correct libraries, and avoid errors like:
$ CFLAGS=""-fsanitize=address"" make/bin/sh updateminiupnpcstrings.sh
Detected OS [Ubuntu] version [16.04]
MiniUPnPc version [2.0]
setting OS_STRING macro value to Ubuntu/16.04 in miniupnpcstrings.h.
setting MINIUPNPC_VERSION_STRING macro value to 2.0 in miniupnpcstrings.h.
cc -fPIC -fsanitize=address -Wall -W -Wstrict-prototypes -fno-common -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNPC_GET_SRC_ADDR -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600   -c -o miniwget.o miniwget.c
...

cc -fPIC -fsanitize=address -Wall -W -Wstrict-prototypes -fno-common -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNPC_GET_SRC_ADDR -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600   -c -o upnpc.o upnpc.c
cc  -o upnpc-static upnpc.o libminiupnpc.a  
upnpc.o: In function `protofix':
upnpc.c:(.text+0x67): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0xab): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x102): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x1ab): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x1ef): undefined reference to `__asan_report_load1'
upnpc.o:upnpc.c:(.text+0x246): more undefined references to `__asan_report_load1' follow
upnpc.o: In function `is_int':
upnpc.c:(.text+0x2da): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x312): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x35a): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x3a9): undefined reference to `__asan_report_load1'
upnpc.o: In function `DisplayInfos':
upnpc.c:(.text+0x3f0): undefined reference to `__asan_option_detect_stack_use_after_return'
upnpc.c:(.text+0x402): undefined reference to `__asan_stack_malloc_4'
upnpc.c:(.text+0x517): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x594): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x68c): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x87a): undefined reference to `__asan_report_load8'
upnpc.o: In function `GetConnectionStatus':
upnpc.c:(.text+0xa83): undefined reference to `__asan_report_load8'
upnpc.o:upnpc.c:(.text+0xac9): more undefined references to `__asan_report_load8' follow
upnpc.o: In function `ListRedirections':
upnpc.c:(.text+0xbd1): undefined reference to `__asan_option_detect_stack_use_after_return'
upnpc.c:(.text+0xbe3): undefined reference to `__asan_stack_malloc_4'
upnpc.c:(.text+0xd85): undefined reference to `__asan_report_load8'
upnpc.o: In function `NewListRedirections':
upnpc.c:(.text+0x101f): undefined reference to `__asan_option_detect_stack_use_after_return'
upnpc.c:(.text+0x1031): undefined reference to `__asan_stack_malloc_1'
upnpc.c:(.text+0x10e4): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x1176): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x11db): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x122b): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x12a3): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x132b): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x13b1): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x1416): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x1466): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x14de): undefined reference to `__asan_report_load8'
...","This will allow users to add OpenMP and Sanitizer flags, and make the flags available to the compiler driver during link. The compiler driver will then add the correct libraries, and avoid errors like:
$ CFLAGS=""-fsanitize=address"" make/bin/sh updateminiupnpcstrings.sh
Detected OS [Ubuntu] version [16.04]
MiniUPnPc version [2.0]
setting OS_STRING macro value to Ubuntu/16.04 in miniupnpcstrings.h.
setting MINIUPNPC_VERSION_STRING macro value to 2.0 in miniupnpcstrings.h.
cc -fPIC -fsanitize=address -Wall -W -Wstrict-prototypes -fno-common -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNPC_GET_SRC_ADDR -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600   -c -o miniwget.o miniwget.c
...

cc -fPIC -fsanitize=address -Wall -W -Wstrict-prototypes -fno-common -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNPC_GET_SRC_ADDR -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600   -c -o upnpc.o upnpc.c
cc  -o upnpc-static upnpc.o libminiupnpc.a  
upnpc.o: In function `protofix':
upnpc.c:(.text+0x67): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0xab): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x102): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x1ab): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x1ef): undefined reference to `__asan_report_load1'
upnpc.o:upnpc.c:(.text+0x246): more undefined references to `__asan_report_load1' follow
upnpc.o: In function `is_int':
upnpc.c:(.text+0x2da): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x312): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x35a): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x3a9): undefined reference to `__asan_report_load1'
upnpc.o: In function `DisplayInfos':
upnpc.c:(.text+0x3f0): undefined reference to `__asan_option_detect_stack_use_after_return'
upnpc.c:(.text+0x402): undefined reference to `__asan_stack_malloc_4'
upnpc.c:(.text+0x517): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x594): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x68c): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x87a): undefined reference to `__asan_report_load8'
upnpc.o: In function `GetConnectionStatus':
upnpc.c:(.text+0xa83): undefined reference to `__asan_report_load8'
upnpc.o:upnpc.c:(.text+0xac9): more undefined references to `__asan_report_load8' follow
upnpc.o: In function `ListRedirections':
upnpc.c:(.text+0xbd1): undefined reference to `__asan_option_detect_stack_use_after_return'
upnpc.c:(.text+0xbe3): undefined reference to `__asan_stack_malloc_4'
upnpc.c:(.text+0xd85): undefined reference to `__asan_report_load8'
upnpc.o: In function `NewListRedirections':
upnpc.c:(.text+0x101f): undefined reference to `__asan_option_detect_stack_use_after_return'
upnpc.c:(.text+0x1031): undefined reference to `__asan_stack_malloc_1'
upnpc.c:(.text+0x10e4): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x1176): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x11db): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x122b): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x12a3): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x132b): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x13b1): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x1416): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x1466): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x14de): undefined reference to `__asan_report_load8'
...",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,219,2016-11-11T14:54:02Z,2019-04-08T07:43:01Z,2019-04-08T07:43:01Z,CLOSED,False,4,0,1,https://github.com/noloader,Add select CFLAGS to LDFLAGS,1,"['miniupnpc', 'linux']",https://github.com/miniupnp/miniupnp/pull/219,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/219#issuecomment-259975019,"This will allow users to add OpenMP and Sanitizer flags, and make the flags available to the compiler driver during link. The compiler driver will then add the correct libraries, and avoid errors like:
$ CFLAGS=""-fsanitize=address"" make/bin/sh updateminiupnpcstrings.sh
Detected OS [Ubuntu] version [16.04]
MiniUPnPc version [2.0]
setting OS_STRING macro value to Ubuntu/16.04 in miniupnpcstrings.h.
setting MINIUPNPC_VERSION_STRING macro value to 2.0 in miniupnpcstrings.h.
cc -fPIC -fsanitize=address -Wall -W -Wstrict-prototypes -fno-common -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNPC_GET_SRC_ADDR -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600   -c -o miniwget.o miniwget.c
...

cc -fPIC -fsanitize=address -Wall -W -Wstrict-prototypes -fno-common -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNPC_GET_SRC_ADDR -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600   -c -o upnpc.o upnpc.c
cc  -o upnpc-static upnpc.o libminiupnpc.a  
upnpc.o: In function `protofix':
upnpc.c:(.text+0x67): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0xab): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x102): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x1ab): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x1ef): undefined reference to `__asan_report_load1'
upnpc.o:upnpc.c:(.text+0x246): more undefined references to `__asan_report_load1' follow
upnpc.o: In function `is_int':
upnpc.c:(.text+0x2da): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x312): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x35a): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x3a9): undefined reference to `__asan_report_load1'
upnpc.o: In function `DisplayInfos':
upnpc.c:(.text+0x3f0): undefined reference to `__asan_option_detect_stack_use_after_return'
upnpc.c:(.text+0x402): undefined reference to `__asan_stack_malloc_4'
upnpc.c:(.text+0x517): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x594): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x68c): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x87a): undefined reference to `__asan_report_load8'
upnpc.o: In function `GetConnectionStatus':
upnpc.c:(.text+0xa83): undefined reference to `__asan_report_load8'
upnpc.o:upnpc.c:(.text+0xac9): more undefined references to `__asan_report_load8' follow
upnpc.o: In function `ListRedirections':
upnpc.c:(.text+0xbd1): undefined reference to `__asan_option_detect_stack_use_after_return'
upnpc.c:(.text+0xbe3): undefined reference to `__asan_stack_malloc_4'
upnpc.c:(.text+0xd85): undefined reference to `__asan_report_load8'
upnpc.o: In function `NewListRedirections':
upnpc.c:(.text+0x101f): undefined reference to `__asan_option_detect_stack_use_after_return'
upnpc.c:(.text+0x1031): undefined reference to `__asan_stack_malloc_1'
upnpc.c:(.text+0x10e4): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x1176): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x11db): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x122b): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x12a3): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x132b): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x13b1): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x1416): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x1466): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x14de): undefined reference to `__asan_report_load8'
...","why don't you just
make CFLAGS=""-fsanitize=address"" LDFLAGS=""-fsanitize=address"" CC=gcc
or whatever flag you need for your own usage ?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,219,2016-11-11T14:54:02Z,2019-04-08T07:43:01Z,2019-04-08T07:43:01Z,CLOSED,False,4,0,1,https://github.com/noloader,Add select CFLAGS to LDFLAGS,1,"['miniupnpc', 'linux']",https://github.com/miniupnp/miniupnp/pull/219,https://github.com/noloader,3,https://github.com/miniupnp/miniupnp/pull/219#issuecomment-260101865,"This will allow users to add OpenMP and Sanitizer flags, and make the flags available to the compiler driver during link. The compiler driver will then add the correct libraries, and avoid errors like:
$ CFLAGS=""-fsanitize=address"" make/bin/sh updateminiupnpcstrings.sh
Detected OS [Ubuntu] version [16.04]
MiniUPnPc version [2.0]
setting OS_STRING macro value to Ubuntu/16.04 in miniupnpcstrings.h.
setting MINIUPNPC_VERSION_STRING macro value to 2.0 in miniupnpcstrings.h.
cc -fPIC -fsanitize=address -Wall -W -Wstrict-prototypes -fno-common -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNPC_GET_SRC_ADDR -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600   -c -o miniwget.o miniwget.c
...

cc -fPIC -fsanitize=address -Wall -W -Wstrict-prototypes -fno-common -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNPC_GET_SRC_ADDR -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600   -c -o upnpc.o upnpc.c
cc  -o upnpc-static upnpc.o libminiupnpc.a  
upnpc.o: In function `protofix':
upnpc.c:(.text+0x67): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0xab): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x102): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x1ab): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x1ef): undefined reference to `__asan_report_load1'
upnpc.o:upnpc.c:(.text+0x246): more undefined references to `__asan_report_load1' follow
upnpc.o: In function `is_int':
upnpc.c:(.text+0x2da): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x312): undefined reference to `__asan_report_load1'
upnpc.c:(.text+0x35a): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x3a9): undefined reference to `__asan_report_load1'
upnpc.o: In function `DisplayInfos':
upnpc.c:(.text+0x3f0): undefined reference to `__asan_option_detect_stack_use_after_return'
upnpc.c:(.text+0x402): undefined reference to `__asan_stack_malloc_4'
upnpc.c:(.text+0x517): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x594): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x68c): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x87a): undefined reference to `__asan_report_load8'
upnpc.o: In function `GetConnectionStatus':
upnpc.c:(.text+0xa83): undefined reference to `__asan_report_load8'
upnpc.o:upnpc.c:(.text+0xac9): more undefined references to `__asan_report_load8' follow
upnpc.o: In function `ListRedirections':
upnpc.c:(.text+0xbd1): undefined reference to `__asan_option_detect_stack_use_after_return'
upnpc.c:(.text+0xbe3): undefined reference to `__asan_stack_malloc_4'
upnpc.c:(.text+0xd85): undefined reference to `__asan_report_load8'
upnpc.o: In function `NewListRedirections':
upnpc.c:(.text+0x101f): undefined reference to `__asan_option_detect_stack_use_after_return'
upnpc.c:(.text+0x1031): undefined reference to `__asan_stack_malloc_1'
upnpc.c:(.text+0x10e4): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x1176): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x11db): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x122b): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x12a3): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x132b): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x13b1): undefined reference to `__asan_report_load8'
upnpc.c:(.text+0x1416): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x1466): undefined reference to `__asan_report_load2'
upnpc.c:(.text+0x14de): undefined reference to `__asan_report_load8'
...","why don't you just
make CFLAGS=""-fsanitize=address"" LDFLAGS=""-fsanitize=address""

Sorry I missed this earlier.
There are three reasons. First, the compiler driver is supposed to take care of the detail. Second, the folks who build the sanitizers tell people to use CFLAGS or CXXFLAGS, and avoid messing with linker flags and libraries. Third, its not readily apparent from the error message that LDFLAGS=""-fsanitize=address"" is the solution.
The third issue is specially problematic because its so disconnected from the source of the issue. When I first encountered it, I turned to apt and yum to install the missing libraries. Then I opened the Makefile looking for places where ld was being directly invoked without the flag. Finally I learned the linking was occurring trough the compiler driver, but the compiler driver was not using the necessary flags.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,234,2017-02-15T06:05:50Z,2017-02-15T22:59:55Z,2017-02-15T22:59:55Z,MERGED,True,3,1,1,https://github.com/cameronjphillips,AddPortMapping() now returns an error code,1,[],https://github.com/miniupnp/miniupnp/pull/234,https://github.com/cameronjphillips,1,https://github.com/miniupnp/miniupnp/pull/234,AddPortMapping() now returns -2 on failure.,AddPortMapping() now returns -2 on failure.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,237,2017-04-13T19:09:27Z,2017-04-13T20:09:43Z,2017-04-13T20:09:43Z,MERGED,True,4,0,1,https://github.com/lamby,Please make the build reproducible,1,[],https://github.com/miniupnp/miniupnp/pull/237,https://github.com/lamby,1,https://github.com/miniupnp/miniupnp/pull/237,"Whilst working on the Reproducible Builds effort [0], we noticed that
miniupnpd could not be built reproducibly due to embedded timestamps.
[0] https://reproducible-builds.org/
Signed-off-by: Chris Lamb chris@chris-lamb.co.uk","Whilst working on the Reproducible Builds effort [0], we noticed that
miniupnpd could not be built reproducibly due to embedded timestamps.
[0] https://reproducible-builds.org/
Signed-off-by: Chris Lamb chris@chris-lamb.co.uk",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,243,2017-06-11T10:53:54Z,2017-06-12T07:27:27Z,2017-06-12T07:27:27Z,MERGED,True,7,0,4,https://github.com/devnexen,Mainly adding fd_set related header missing,1,[],https://github.com/miniupnp/miniupnp/pull/243,https://github.com/devnexen,1,https://github.com/miniupnp/miniupnp/pull/243,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,243,2017-06-11T10:53:54Z,2017-06-12T07:27:27Z,2017-06-12T07:27:27Z,MERGED,True,7,0,4,https://github.com/devnexen,Mainly adding fd_set related header missing,1,[],https://github.com/miniupnp/miniupnp/pull/243,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/243#issuecomment-307693841,,on which building setup is that needed ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,243,2017-06-11T10:53:54Z,2017-06-12T07:27:27Z,2017-06-12T07:27:27Z,MERGED,True,7,0,4,https://github.com/devnexen,Mainly adding fd_set related header missing,1,[],https://github.com/miniupnp/miniupnp/pull/243,https://github.com/devnexen,3,https://github.com/miniupnp/miniupnp/pull/243#issuecomment-307695488,,Tried to compile on openbsd,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,244,2017-06-12T11:27:24Z,2017-06-12T12:14:45Z,2017-06-12T12:14:45Z,MERGED,True,1,1,1,https://github.com/seanlis,Fix issue in CMakeLists.txt.,1,[],https://github.com/miniupnp/miniupnp/pull/244,https://github.com/seanlis,1,https://github.com/miniupnp/miniupnp/pull/244,"CMAKE_COMPILER_IS_GNUC should be CMAKE_COMPILER_IS_GNUCC.
There is no variable named CMAKE_COMPILER_IS_GNUC, so the statements under if would never run.","CMAKE_COMPILER_IS_GNUC should be CMAKE_COMPILER_IS_GNUCC.
There is no variable named CMAKE_COMPILER_IS_GNUC, so the statements under if would never run.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,245,2017-07-05T18:43:16Z,2017-07-05T21:50:37Z,2017-07-05T21:50:37Z,MERGED,True,5,1,1,https://github.com/edrikk,Adding Tomato ifdef for netfilter chain to check,1,[],https://github.com/miniupnp/miniupnp/pull/245,https://github.com/edrikk,1,https://github.com/miniupnp/miniupnp/pull/245,"To allow for ""drop-in"" upgrades of Miniupnp within Tomato firmware, submitting this change back upstream.
Original source:  https://bitbucket.org/kille72/tomato-arm-kille72/commits/b9d9e4b0ed761c6cdddd1227676b08bce2934481?at=shibby-arm
Have used ifdef for clarity of why the ""new"" entry is there (i.e. Tomato)","To allow for ""drop-in"" upgrades of Miniupnp within Tomato firmware, submitting this change back upstream.
Original source:  https://bitbucket.org/kille72/tomato-arm-kille72/commits/b9d9e4b0ed761c6cdddd1227676b08bce2934481?at=shibby-arm
Have used ifdef for clarity of why the ""new"" entry is there (i.e. Tomato)",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,246,2017-07-18T11:09:16Z,2017-07-19T18:17:58Z,2017-07-19T18:17:58Z,MERGED,True,16,12,2,https://github.com/niamster,miniupnpc:py: build libminiupnpc.a,2,[],https://github.com/miniupnp/miniupnp/pull/246,https://github.com/niamster,1,https://github.com/miniupnp/miniupnp/pull/246,This allows to build the module directly via pip.,This allows to build the module directly via pip.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,247,2017-07-24T08:57:19Z,2017-07-24T20:35:51Z,2017-07-24T20:35:51Z,MERGED,True,4,4,1,https://github.com/zying16,fix error of wrong matched parentheses in miniupnpc-libevent.c,1,[],https://github.com/miniupnp/miniupnp/pull/247,https://github.com/zying16,1,https://github.com/miniupnp/miniupnp/pull/247,"There is a small error in miniupnpc-libevent.c: wrong matched parentheses in function ""set multicast TTL"" line 744","There is a small error in miniupnpc-libevent.c: wrong matched parentheses in function ""set multicast TTL"" line 744",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,249,2017-08-06T14:35:58Z,2017-08-07T09:01:01Z,2017-08-07T09:01:01Z,MERGED,True,2,1,1,https://github.com/dkerr64,Add source IP and port to syslog for upnp_event_send() error.,1,[],https://github.com/miniupnp/miniupnp/pull/249,https://github.com/dkerr64,1,https://github.com/miniupnp/miniupnp/pull/249,Adds the IP and port of requesting host when a send error is logged to syslog so that it is possible to identify the application causing the problem.  Copied the syntax used for Connect() errors in same file.,Adds the IP and port of requesting host when a send error is logged to syslog so that it is possible to identify the application causing the problem.  Copied the syntax used for Connect() errors in same file.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,251,2017-08-08T18:03:43Z,2017-08-08T18:07:11Z,2017-08-08T18:07:12Z,MERGED,True,2,0,1,https://github.com/niamster,py: include version file in the package file,1,[],https://github.com/miniupnp/miniupnp/pull/251,https://github.com/niamster,1,https://github.com/miniupnp/miniupnp/pull/251,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,256,2017-08-25T14:09:33Z,2017-09-03T14:46:10Z,2017-09-03T14:46:10Z,MERGED,True,4,2,1,https://github.com/niamster,cli:py: do not ship binaries in sdist,1,[],https://github.com/miniupnp/miniupnp/pull/256,https://github.com/niamster,1,https://github.com/miniupnp/miniupnp/pull/256,#252,#252,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,258,2017-09-16T03:58:23Z,2017-09-18T17:27:35Z,2017-09-18T17:27:55Z,CLOSED,False,1,1,1,https://github.com/raspopov,Fixed incompatible types (from 'int *' to 'const char *') warning,1,[],https://github.com/miniupnp/miniupnp/pull/258,https://github.com/raspopov,1,https://github.com/miniupnp/miniupnp/pull/258,VC++ 2015: miniupnpc\minissdpc.c(619): warning C4133: 'function': incompatible types - from 'int *' to 'const char *',VC++ 2015: miniupnpc\minissdpc.c(619): warning C4133: 'function': incompatible types - from 'int *' to 'const char *',True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,258,2017-09-16T03:58:23Z,2017-09-18T17:27:35Z,2017-09-18T17:27:55Z,CLOSED,False,1,1,1,https://github.com/raspopov,Fixed incompatible types (from 'int *' to 'const char *') warning,1,[],https://github.com/miniupnp/miniupnp/pull/258,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/258#issuecomment-330212773,VC++ 2015: miniupnpc\minissdpc.c(619): warning C4133: 'function': incompatible types - from 'int *' to 'const char *',"Isn't it a Windows only patch ?
 int
     setsockopt(int s, int level, int optname, const void *optval,
         socklen_t optlen);",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,258,2017-09-16T03:58:23Z,2017-09-18T17:27:35Z,2017-09-18T17:27:55Z,CLOSED,False,1,1,1,https://github.com/raspopov,Fixed incompatible types (from 'int *' to 'const char *') warning,1,[],https://github.com/miniupnp/miniupnp/pull/258,https://github.com/raspopov,3,https://github.com/miniupnp/miniupnp/pull/258#issuecomment-330291801,VC++ 2015: miniupnpc\minissdpc.c(619): warning C4133: 'function': incompatible types - from 'int *' to 'const char *',"Oh, you are right! Need to add ""#ifdef _WIN32"" around just like at next line below.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,259,2017-09-18T17:27:22Z,2017-09-29T09:16:50Z,2017-09-29T09:16:50Z,MERGED,True,5,0,1,https://github.com/raspopov,Fixed incompatible types (from 'int *' to 'const char *') warning #2,1,[],https://github.com/miniupnp/miniupnp/pull/259,https://github.com/raspopov,1,https://github.com/miniupnp/miniupnp/pull/259,https://msdn.microsoft.com/en-us/library/windows/desktop/ms738574(v=vs.85).aspx,https://msdn.microsoft.com/en-us/library/windows/desktop/ms738574(v=vs.85).aspx,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,261,2017-09-28T22:18:51Z,2017-09-29T09:13:38Z,2017-09-29T09:13:39Z,MERGED,True,1,1,1,https://github.com/deekue,"Update external-ip.sh, only output on success",1,[],https://github.com/miniupnp/miniupnp/pull/261,https://github.com/deekue,1,https://github.com/miniupnp/miniupnp/pull/261,"change sed pattern to only match when GetExternalIPAaddress succeeds and output nothing if it fails
$ upnpc -s | grep ExternalIPAddress | sed 's/[^0-9\.]//g'
.3
$ upnpc -s | grep ExternalIPAddress 
GetExternalIPAddress failed. (errorcode=-3)
$ upnpc -s | sed -n -e 's/^ExternalIPAddress = \([0-9.]*\)$/\1/p'
$","change sed pattern to only match when GetExternalIPAaddress succeeds and output nothing if it fails
$ upnpc -s | grep ExternalIPAddress | sed 's/[^0-9\.]//g'
.3
$ upnpc -s | grep ExternalIPAddress 
GetExternalIPAddress failed. (errorcode=-3)
$ upnpc -s | sed -n -e 's/^ExternalIPAddress = \([0-9.]*\)$/\1/p'
$",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,275,2018-01-09T01:34:48Z,2018-01-15T15:51:08Z,2018-01-16T00:46:30Z,CLOSED,False,37,37,27,https://github.com/yangfl,fix typo,1,[],https://github.com/miniupnp/miniupnp/pull/275,https://github.com/yangfl,1,https://github.com/miniupnp/miniupnp/pull/275,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,275,2018-01-09T01:34:48Z,2018-01-15T15:51:08Z,2018-01-16T00:46:30Z,CLOSED,False,37,37,27,https://github.com/yangfl,fix typo,1,[],https://github.com/miniupnp/miniupnp/pull/275,https://github.com/yangfl,2,https://github.com/miniupnp/miniupnp/pull/275#issuecomment-357719640,,OK,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,279,2018-02-02T17:48:16Z,2018-02-03T15:51:11Z,2018-02-03T15:51:11Z,MERGED,True,88,80,9,https://github.com/yangfl,Makefile: Use crosscompile target as OS,5,[],https://github.com/miniupnp/miniupnp/pull/279,https://github.com/yangfl,1,https://github.com/miniupnp/miniupnp/pull/279,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,279,2018-02-02T17:48:16Z,2018-02-03T15:51:11Z,2018-02-03T15:51:11Z,MERGED,True,88,80,9,https://github.com/yangfl,Makefile: Use crosscompile target as OS,5,[],https://github.com/miniupnp/miniupnp/pull/279,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/279#issuecomment-362680372,,hum I dont understand why the travis-ci build failed,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,282,2018-02-20T06:20:37Z,2018-02-22T13:05:22Z,2018-02-22T13:05:22Z,MERGED,True,65,0,6,https://github.com/nyetwurk,Allow runtime override of igd to v1 for people running binaries with v2 enabled,1,[],https://github.com/miniupnp/miniupnp/pull/282,https://github.com/nyetwurk,1,https://github.com/miniupnp/miniupnp/pull/282,"Towards #277
Hopefully this allows people running distros that blindly enable v2 to override it at run time.
tested with windows 10 and windows 7 upnp clients","Towards #277
Hopefully this allows people running distros that blindly enable v2 to override it at run time.
tested with windows 10 and windows 7 upnp clients",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,282,2018-02-20T06:20:37Z,2018-02-22T13:05:22Z,2018-02-22T13:05:22Z,MERGED,True,65,0,6,https://github.com/nyetwurk,Allow runtime override of igd to v1 for people running binaries with v2 enabled,1,[],https://github.com/miniupnp/miniupnp/pull/282,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/282#issuecomment-367671521,"Towards #277
Hopefully this allows people running distros that blindly enable v2 to override it at run time.
tested with windows 10 and windows 7 upnp clients",see 80779ff,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,286,2018-02-23T15:39:27Z,2018-04-06T09:14:57Z,2019-03-09T09:54:28Z,MERGED,True,196,159,14,https://github.com/yangfl,miniupnpd: Add chain name and external interface options for netfilter scripts,1,[],https://github.com/miniupnp/miniupnp/pull/286,https://github.com/yangfl,1,https://github.com/miniupnp/miniupnp/pull/286,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,289,2018-03-08T11:47:03Z,2018-03-08T13:24:15Z,2018-03-08T15:53:32Z,CLOSED,False,203,190,16,https://github.com/irwir,Windows 64-bit compatibility (Visual C++).,4,[],https://github.com/miniupnp/miniupnp/pull/289,https://github.com/irwir,1,https://github.com/miniupnp/miniupnp/pull/289,"In Windows 64-bit builds SOCKET is a UINT_PTR (unisgned long long), not  an int.  To keep most of the library code unchanged, a small header file socketdef.h was added.
Optionally this header could be included into project/make files.

Other changes
2. Removed unused header files (fine in Visual Studio, but to be verified in other compilers/OSes).
3. Removed zeroing of local pointers after free() when the pointer is never used again, and that creates warnings in code analyzers.
4. Added some type casts to remove compiler warnings.
$. Fixed differences between parameter names in descriptions and definitions
6. Changed field order in structure UPNPDev (improves memory alignment)
7. Removed always true/false condition checks, and checks for null pointer before caling free().","In Windows 64-bit builds SOCKET is a UINT_PTR (unisgned long long), not  an int.  To keep most of the library code unchanged, a small header file socketdef.h was added.
Optionally this header could be included into project/make files.

Other changes
2. Removed unused header files (fine in Visual Studio, but to be verified in other compilers/OSes).
3. Removed zeroing of local pointers after free() when the pointer is never used again, and that creates warnings in code analyzers.
4. Added some type casts to remove compiler warnings.
$. Fixed differences between parameter names in descriptions and definitions
6. Changed field order in structure UPNPDev (improves memory alignment)
7. Removed always true/false condition checks, and checks for null pointer before caling free().",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,289,2018-03-08T11:47:03Z,2018-03-08T13:24:15Z,2018-03-08T15:53:32Z,CLOSED,False,203,190,16,https://github.com/irwir,Windows 64-bit compatibility (Visual C++).,4,[],https://github.com/miniupnp/miniupnp/pull/289,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/289#issuecomment-371466313,"In Windows 64-bit builds SOCKET is a UINT_PTR (unisgned long long), not  an int.  To keep most of the library code unchanged, a small header file socketdef.h was added.
Optionally this header could be included into project/make files.

Other changes
2. Removed unused header files (fine in Visual Studio, but to be verified in other compilers/OSes).
3. Removed zeroing of local pointers after free() when the pointer is never used again, and that creates warnings in code analyzers.
4. Added some type casts to remove compiler warnings.
$. Fixed differences between parameter names in descriptions and definitions
6. Changed field order in structure UPNPDev (improves memory alignment)
7. Removed always true/false condition checks, and checks for null pointer before caling free().",it fails to build everywhere...,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,289,2018-03-08T11:47:03Z,2018-03-08T13:24:15Z,2018-03-08T15:53:32Z,CLOSED,False,203,190,16,https://github.com/irwir,Windows 64-bit compatibility (Visual C++).,4,[],https://github.com/miniupnp/miniupnp/pull/289,https://github.com/irwir,3,https://github.com/miniupnp/miniupnp/pull/289#issuecomment-371467053,"In Windows 64-bit builds SOCKET is a UINT_PTR (unisgned long long), not  an int.  To keep most of the library code unchanged, a small header file socketdef.h was added.
Optionally this header could be included into project/make files.

Other changes
2. Removed unused header files (fine in Visual Studio, but to be verified in other compilers/OSes).
3. Removed zeroing of local pointers after free() when the pointer is never used again, and that creates warnings in code analyzers.
4. Added some type casts to remove compiler warnings.
$. Fixed differences between parameter names in descriptions and definitions
6. Changed field order in structure UPNPDev (improves memory alignment)
7. Removed always true/false condition checks, and checks for null pointer before caling free().","Sorry, it was tested in VS only. I will try to fix errors.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,289,2018-03-08T11:47:03Z,2018-03-08T13:24:15Z,2018-03-08T15:53:32Z,CLOSED,False,203,190,16,https://github.com/irwir,Windows 64-bit compatibility (Visual C++).,4,[],https://github.com/miniupnp/miniupnp/pull/289,https://github.com/irwir,4,https://github.com/miniupnp/miniupnp/pull/289#issuecomment-371481627,"In Windows 64-bit builds SOCKET is a UINT_PTR (unisgned long long), not  an int.  To keep most of the library code unchanged, a small header file socketdef.h was added.
Optionally this header could be included into project/make files.

Other changes
2. Removed unused header files (fine in Visual Studio, but to be verified in other compilers/OSes).
3. Removed zeroing of local pointers after free() when the pointer is never used again, and that creates warnings in code analyzers.
4. Added some type casts to remove compiler warnings.
$. Fixed differences between parameter names in descriptions and definitions
6. Changed field order in structure UPNPDev (improves memory alignment)
7. Removed always true/false condition checks, and checks for null pointer before caling free().","There wa a very old pull request https://github.com/miniupnp/miniupnp/pull/202url created after applying static analysis to the code, and it was left without attention.
Later there were other changes made (related to 64-bit), and that old request became a mess, because your code had changed too.
So I closed it, and created this one with somewhat better ideas.
Do I need it to be splitted back to 2 commits and 2 pull requests?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,289,2018-03-08T11:47:03Z,2018-03-08T13:24:15Z,2018-03-08T15:53:32Z,CLOSED,False,203,190,16,https://github.com/irwir,Windows 64-bit compatibility (Visual C++).,4,[],https://github.com/miniupnp/miniupnp/pull/289,https://github.com/miniupnp,5,https://github.com/miniupnp/miniupnp/pull/289#issuecomment-371485311,"In Windows 64-bit builds SOCKET is a UINT_PTR (unisgned long long), not  an int.  To keep most of the library code unchanged, a small header file socketdef.h was added.
Optionally this header could be included into project/make files.

Other changes
2. Removed unused header files (fine in Visual Studio, but to be verified in other compilers/OSes).
3. Removed zeroing of local pointers after free() when the pointer is never used again, and that creates warnings in code analyzers.
4. Added some type casts to remove compiler warnings.
$. Fixed differences between parameter names in descriptions and definitions
6. Changed field order in structure UPNPDev (improves memory alignment)
7. Removed always true/false condition checks, and checks for null pointer before caling free().","I think some changes from #202 where cherry picked :)
Indeed that a good thing if you could split your changes to several commits / PR
If you don't have the time, I can do some of them.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,289,2018-03-08T11:47:03Z,2018-03-08T13:24:15Z,2018-03-08T15:53:32Z,CLOSED,False,203,190,16,https://github.com/irwir,Windows 64-bit compatibility (Visual C++).,4,[],https://github.com/miniupnp/miniupnp/pull/289,https://github.com/irwir,6,https://github.com/miniupnp/miniupnp/pull/289#issuecomment-371525003,"In Windows 64-bit builds SOCKET is a UINT_PTR (unisgned long long), not  an int.  To keep most of the library code unchanged, a small header file socketdef.h was added.
Optionally this header could be included into project/make files.

Other changes
2. Removed unused header files (fine in Visual Studio, but to be verified in other compilers/OSes).
3. Removed zeroing of local pointers after free() when the pointer is never used again, and that creates warnings in code analyzers.
4. Added some type casts to remove compiler warnings.
$. Fixed differences between parameter names in descriptions and definitions
6. Changed field order in structure UPNPDev (improves memory alignment)
7. Removed always true/false condition checks, and checks for null pointer before caling free().","I think some changes from #202 where cherry picked :)

I did not notice that something was picked.

If you don't have the time, I can do some of them.

Unfortunately, not that much time. Besides, the winsock changes, though trivial, were made on top of my older changes, so there is no code ready for separate commits.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,296,2018-04-27T14:42:51Z,2018-05-07T09:24:23Z,2018-05-07T09:24:23Z,MERGED,True,92,87,1,https://github.com/btolfa,Modernize and cleanup CMakeLists.txt,1,['miniupnpc'],https://github.com/miniupnp/miniupnp/pull/296,https://github.com/btolfa,1,https://github.com/miniupnp/miniupnp/pull/296,"Effective Modern CMake

Set the minimum required version for CMake to 3.5
Added UPNPC_BUILD_SAMPLE option for building sample client application (upnpc.c)
Added interface target library miniupnpc-private for common settings like compile definitions, flags and include directories. It helps to keep global scope clean.
https://cmake.org/cmake/help/v3.11/manual/cmake-buildsystem.7.html#interface-libraries
Replaced -fPIC compile option with POSITION_INDEPENDENT_CODE target property
https://cmake.org/cmake/help/v3.11/prop_tgt/POSITION_INDEPENDENT_CODE.html#prop_tgt:POSITION_INDEPENDENT_CODE
Set usage requirements for libminiupnpc-* targets for more convenient usage through add_subdirectory() (as cmake subproject)
https://cmake.org/cmake/help/v3.11/manual/cmake-buildsystem.7.html#build-specification-and-usage-requirements
Removed old and outdated code from CMakeLists.txt","Effective Modern CMake

Set the minimum required version for CMake to 3.5
Added UPNPC_BUILD_SAMPLE option for building sample client application (upnpc.c)
Added interface target library miniupnpc-private for common settings like compile definitions, flags and include directories. It helps to keep global scope clean.
https://cmake.org/cmake/help/v3.11/manual/cmake-buildsystem.7.html#interface-libraries
Replaced -fPIC compile option with POSITION_INDEPENDENT_CODE target property
https://cmake.org/cmake/help/v3.11/prop_tgt/POSITION_INDEPENDENT_CODE.html#prop_tgt:POSITION_INDEPENDENT_CODE
Set usage requirements for libminiupnpc-* targets for more convenient usage through add_subdirectory() (as cmake subproject)
https://cmake.org/cmake/help/v3.11/manual/cmake-buildsystem.7.html#build-specification-and-usage-requirements
Removed old and outdated code from CMakeLists.txt",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,296,2018-04-27T14:42:51Z,2018-05-07T09:24:23Z,2018-05-07T09:24:23Z,MERGED,True,92,87,1,https://github.com/btolfa,Modernize and cleanup CMakeLists.txt,1,['miniupnpc'],https://github.com/miniupnp/miniupnp/pull/296,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/296#issuecomment-385332319,"Effective Modern CMake

Set the minimum required version for CMake to 3.5
Added UPNPC_BUILD_SAMPLE option for building sample client application (upnpc.c)
Added interface target library miniupnpc-private for common settings like compile definitions, flags and include directories. It helps to keep global scope clean.
https://cmake.org/cmake/help/v3.11/manual/cmake-buildsystem.7.html#interface-libraries
Replaced -fPIC compile option with POSITION_INDEPENDENT_CODE target property
https://cmake.org/cmake/help/v3.11/prop_tgt/POSITION_INDEPENDENT_CODE.html#prop_tgt:POSITION_INDEPENDENT_CODE
Set usage requirements for libminiupnpc-* targets for more convenient usage through add_subdirectory() (as cmake subproject)
https://cmake.org/cmake/help/v3.11/manual/cmake-buildsystem.7.html#build-specification-and-usage-requirements
Removed old and outdated code from CMakeLists.txt",isn't it possible to support older versions of CMake without too much modifications ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,296,2018-04-27T14:42:51Z,2018-05-07T09:24:23Z,2018-05-07T09:24:23Z,MERGED,True,92,87,1,https://github.com/btolfa,Modernize and cleanup CMakeLists.txt,1,['miniupnpc'],https://github.com/miniupnp/miniupnp/pull/296,https://github.com/anonimal,3,https://github.com/miniupnp/miniupnp/pull/296#issuecomment-385569662,"Effective Modern CMake

Set the minimum required version for CMake to 3.5
Added UPNPC_BUILD_SAMPLE option for building sample client application (upnpc.c)
Added interface target library miniupnpc-private for common settings like compile definitions, flags and include directories. It helps to keep global scope clean.
https://cmake.org/cmake/help/v3.11/manual/cmake-buildsystem.7.html#interface-libraries
Replaced -fPIC compile option with POSITION_INDEPENDENT_CODE target property
https://cmake.org/cmake/help/v3.11/prop_tgt/POSITION_INDEPENDENT_CODE.html#prop_tgt:POSITION_INDEPENDENT_CODE
Set usage requirements for libminiupnpc-* targets for more convenient usage through add_subdirectory() (as cmake subproject)
https://cmake.org/cmake/help/v3.11/manual/cmake-buildsystem.7.html#build-specification-and-usage-requirements
Removed old and outdated code from CMakeLists.txt","isn't it possible to support older versions of CMake without too much modifications ?

Is there a target version that miniupnp is aiming to support? Most commonly used systems these days (I haven't confirmed with amiga or solaris) use 3.5 minimum.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,296,2018-04-27T14:42:51Z,2018-05-07T09:24:23Z,2018-05-07T09:24:23Z,MERGED,True,92,87,1,https://github.com/btolfa,Modernize and cleanup CMakeLists.txt,1,['miniupnpc'],https://github.com/miniupnp/miniupnp/pull/296,https://github.com/miniupnp,4,https://github.com/miniupnp/miniupnp/pull/296#issuecomment-385631141,"Effective Modern CMake

Set the minimum required version for CMake to 3.5
Added UPNPC_BUILD_SAMPLE option for building sample client application (upnpc.c)
Added interface target library miniupnpc-private for common settings like compile definitions, flags and include directories. It helps to keep global scope clean.
https://cmake.org/cmake/help/v3.11/manual/cmake-buildsystem.7.html#interface-libraries
Replaced -fPIC compile option with POSITION_INDEPENDENT_CODE target property
https://cmake.org/cmake/help/v3.11/prop_tgt/POSITION_INDEPENDENT_CODE.html#prop_tgt:POSITION_INDEPENDENT_CODE
Set usage requirements for libminiupnpc-* targets for more convenient usage through add_subdirectory() (as cmake subproject)
https://cmake.org/cmake/help/v3.11/manual/cmake-buildsystem.7.html#build-specification-and-usage-requirements
Removed old and outdated code from CMakeLists.txt","@anonimal I have an old debian jessie with 3.0.2...
I was wondering which features you use requires 3.5",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,303,2018-05-08T14:02:48Z,2018-05-08T19:19:48Z,2018-05-08T19:19:48Z,MERGED,True,23,10,4,https://github.com/yangfl,Fix OS detection for Debian kFreeBSD,1,[],https://github.com/miniupnp/miniupnp/pull/303,https://github.com/yangfl,1,https://github.com/miniupnp/miniupnp/pull/303,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,304,2018-05-09T11:07:56Z,2018-05-09T12:41:03Z,2018-05-09T12:41:04Z,MERGED,True,6,2,1,https://github.com/btolfa,Fix msvc miniupnpc shared library build,2,[],https://github.com/miniupnp/miniupnp/pull/304,https://github.com/btolfa,1,https://github.com/miniupnp/miniupnp/pull/304,"Fix #270
Both libminiupnpc-static and libminiupnpc-shared targets generated miniupnpc.lib file. As a result, the lib file for a shared library was overwritten with lib file for a static library.
Now libminiupnpc-static target creates libminiupnpc.lib file whereas libminiupnpc-shared target creates miniupnpc.lib and miniupnpc.dll files on Windows.","Fix #270
Both libminiupnpc-static and libminiupnpc-shared targets generated miniupnpc.lib file. As a result, the lib file for a shared library was overwritten with lib file for a static library.
Now libminiupnpc-static target creates libminiupnpc.lib file whereas libminiupnpc-shared target creates miniupnpc.lib and miniupnpc.dll files on Windows.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,307,2018-05-19T12:05:04Z,2018-07-06T11:40:48Z,2018-09-17T13:12:32Z,MERGED,True,785,4,24,https://github.com/pali,miniupnpd: Learn public IP address and detect NAT via STUN protocol,7,[],https://github.com/miniupnp/miniupnp/pull/307,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/307,"Normally port forwarding works only in case miniupnpd have public IP address and it is not running on network hidden behind NAT.
There is one exception: when miniupnpd host has private IP address with unrestricted NAT 1:1 -- i.e. it private IP address has 1:1 mapping with some public IP address and all incoming packets to public IP address are NAT-ed to private IP address without any filtering or dropping. In some countries this is common behavior of ISPs how to provide public external IP address.
This pull request implements STUN client protocol for learning external IP address and NAT type via external STUN server. This feature is disabled by default and user can enable it via config options ext_perform_stun, ext_stun_host and ext_stun_port.
When sending STUN binding requests we need to enable incoming UDP traffic to selected ports as responses to sent packets comes from different IP addresses/ports as to which were sent. This is how STUN protocol is working and tests if NAT allows and passes inbound connections.
When miniupnpd detects that IP address on external interface was changed (either by watching for notifications or when user instruct upnpnd via SIGUSR1 signal), then miniupnpd perform STUN requests again to learn new external IP address and NAT type. All this happens only in case config option ext_perform_stun is enabled (disabled by default).
In case miniupnpd detects that is behind restrictive NAT (all types expects above NAT 1:1) or upstream router does some filtering of incoming packets which leads to dropping packets on forwarded ports, then miniupnpd rejects all port forwarding requests from UPnP IGD/PCP clients (as port forwarding in this case does not work).
Also when clients ask for public IP address then miniupnpd checks that it really knows external public IP address. And if not, then it correctly send error message instead of sending incorrect internal / private IP address.
See also discussion: #298","Normally port forwarding works only in case miniupnpd have public IP address and it is not running on network hidden behind NAT.
There is one exception: when miniupnpd host has private IP address with unrestricted NAT 1:1 -- i.e. it private IP address has 1:1 mapping with some public IP address and all incoming packets to public IP address are NAT-ed to private IP address without any filtering or dropping. In some countries this is common behavior of ISPs how to provide public external IP address.
This pull request implements STUN client protocol for learning external IP address and NAT type via external STUN server. This feature is disabled by default and user can enable it via config options ext_perform_stun, ext_stun_host and ext_stun_port.
When sending STUN binding requests we need to enable incoming UDP traffic to selected ports as responses to sent packets comes from different IP addresses/ports as to which were sent. This is how STUN protocol is working and tests if NAT allows and passes inbound connections.
When miniupnpd detects that IP address on external interface was changed (either by watching for notifications or when user instruct upnpnd via SIGUSR1 signal), then miniupnpd perform STUN requests again to learn new external IP address and NAT type. All this happens only in case config option ext_perform_stun is enabled (disabled by default).
In case miniupnpd detects that is behind restrictive NAT (all types expects above NAT 1:1) or upstream router does some filtering of incoming packets which leads to dropping packets on forwarded ports, then miniupnpd rejects all port forwarding requests from UPnP IGD/PCP clients (as port forwarding in this case does not work).
Also when clients ask for public IP address then miniupnpd checks that it really knows external public IP address. And if not, then it correctly send error message instead of sending incorrect internal / private IP address.
See also discussion: #298",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,307,2018-05-19T12:05:04Z,2018-07-06T11:40:48Z,2018-09-17T13:12:32Z,MERGED,True,785,4,24,https://github.com/pali,miniupnpd: Learn public IP address and detect NAT via STUN protocol,7,[],https://github.com/miniupnp/miniupnp/pull/307,https://github.com/pali,2,https://github.com/miniupnp/miniupnp/pull/307#issuecomment-403015378,"Normally port forwarding works only in case miniupnpd have public IP address and it is not running on network hidden behind NAT.
There is one exception: when miniupnpd host has private IP address with unrestricted NAT 1:1 -- i.e. it private IP address has 1:1 mapping with some public IP address and all incoming packets to public IP address are NAT-ed to private IP address without any filtering or dropping. In some countries this is common behavior of ISPs how to provide public external IP address.
This pull request implements STUN client protocol for learning external IP address and NAT type via external STUN server. This feature is disabled by default and user can enable it via config options ext_perform_stun, ext_stun_host and ext_stun_port.
When sending STUN binding requests we need to enable incoming UDP traffic to selected ports as responses to sent packets comes from different IP addresses/ports as to which were sent. This is how STUN protocol is working and tests if NAT allows and passes inbound connections.
When miniupnpd detects that IP address on external interface was changed (either by watching for notifications or when user instruct upnpnd via SIGUSR1 signal), then miniupnpd perform STUN requests again to learn new external IP address and NAT type. All this happens only in case config option ext_perform_stun is enabled (disabled by default).
In case miniupnpd detects that is behind restrictive NAT (all types expects above NAT 1:1) or upstream router does some filtering of incoming packets which leads to dropping packets on forwarded ports, then miniupnpd rejects all port forwarding requests from UPnP IGD/PCP clients (as port forwarding in this case does not work).
Also when clients ask for public IP address then miniupnpd checks that it really knows external public IP address. And if not, then it correctly send error message instead of sending incorrect internal / private IP address.
See also discussion: #298",Thanks for review! I created a new pull request #314 for your -o option change 8bc6d6f,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,307,2018-05-19T12:05:04Z,2018-07-06T11:40:48Z,2018-09-17T13:12:32Z,MERGED,True,785,4,24,https://github.com/pali,miniupnpd: Learn public IP address and detect NAT via STUN protocol,7,[],https://github.com/miniupnp/miniupnp/pull/307,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/307#issuecomment-403021740,"Normally port forwarding works only in case miniupnpd have public IP address and it is not running on network hidden behind NAT.
There is one exception: when miniupnpd host has private IP address with unrestricted NAT 1:1 -- i.e. it private IP address has 1:1 mapping with some public IP address and all incoming packets to public IP address are NAT-ed to private IP address without any filtering or dropping. In some countries this is common behavior of ISPs how to provide public external IP address.
This pull request implements STUN client protocol for learning external IP address and NAT type via external STUN server. This feature is disabled by default and user can enable it via config options ext_perform_stun, ext_stun_host and ext_stun_port.
When sending STUN binding requests we need to enable incoming UDP traffic to selected ports as responses to sent packets comes from different IP addresses/ports as to which were sent. This is how STUN protocol is working and tests if NAT allows and passes inbound connections.
When miniupnpd detects that IP address on external interface was changed (either by watching for notifications or when user instruct upnpnd via SIGUSR1 signal), then miniupnpd perform STUN requests again to learn new external IP address and NAT type. All this happens only in case config option ext_perform_stun is enabled (disabled by default).
In case miniupnpd detects that is behind restrictive NAT (all types expects above NAT 1:1) or upstream router does some filtering of incoming packets which leads to dropping packets on forwarded ports, then miniupnpd rejects all port forwarding requests from UPnP IGD/PCP clients (as port forwarding in this case does not work).
Also when clients ask for public IP address then miniupnpd checks that it really knows external public IP address. And if not, then it correctly send error message instead of sending incorrect internal / private IP address.
See also discussion: #298",@pali: can you answer the question about random()%255;,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,307,2018-05-19T12:05:04Z,2018-07-06T11:40:48Z,2018-09-17T13:12:32Z,MERGED,True,785,4,24,https://github.com/pali,miniupnpd: Learn public IP address and detect NAT via STUN protocol,7,[],https://github.com/miniupnp/miniupnp/pull/307,https://github.com/pali,4,https://github.com/miniupnp/miniupnp/pull/307#issuecomment-403024659,"Normally port forwarding works only in case miniupnpd have public IP address and it is not running on network hidden behind NAT.
There is one exception: when miniupnpd host has private IP address with unrestricted NAT 1:1 -- i.e. it private IP address has 1:1 mapping with some public IP address and all incoming packets to public IP address are NAT-ed to private IP address without any filtering or dropping. In some countries this is common behavior of ISPs how to provide public external IP address.
This pull request implements STUN client protocol for learning external IP address and NAT type via external STUN server. This feature is disabled by default and user can enable it via config options ext_perform_stun, ext_stun_host and ext_stun_port.
When sending STUN binding requests we need to enable incoming UDP traffic to selected ports as responses to sent packets comes from different IP addresses/ports as to which were sent. This is how STUN protocol is working and tests if NAT allows and passes inbound connections.
When miniupnpd detects that IP address on external interface was changed (either by watching for notifications or when user instruct upnpnd via SIGUSR1 signal), then miniupnpd perform STUN requests again to learn new external IP address and NAT type. All this happens only in case config option ext_perform_stun is enabled (disabled by default).
In case miniupnpd detects that is behind restrictive NAT (all types expects above NAT 1:1) or upstream router does some filtering of incoming packets which leads to dropping packets on forwarded ports, then miniupnpd rejects all port forwarding requests from UPnP IGD/PCP clients (as port forwarding in this case does not work).
Also when clients ask for public IP address then miniupnpd checks that it really knows external public IP address. And if not, then it correctly send error message instead of sending incorrect internal / private IP address.
See also discussion: #298","Which question? (I do not see any there)
random()%255 is used only in generate_transaction_id function. And it is because https://tools.ietf.org/html/rfc5389#section-3 describe it as: Both types of transactions include a transaction ID, which is a randomly selected 96-bit number.
Hm.. probably it should be random()%256 to generate number 0..0xFF.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,307,2018-05-19T12:05:04Z,2018-07-06T11:40:48Z,2018-09-17T13:12:32Z,MERGED,True,785,4,24,https://github.com/pali,miniupnpd: Learn public IP address and detect NAT via STUN protocol,7,[],https://github.com/miniupnp/miniupnp/pull/307,https://github.com/miniupnp,5,https://github.com/miniupnp/miniupnp/pull/307#issuecomment-403025071,"Normally port forwarding works only in case miniupnpd have public IP address and it is not running on network hidden behind NAT.
There is one exception: when miniupnpd host has private IP address with unrestricted NAT 1:1 -- i.e. it private IP address has 1:1 mapping with some public IP address and all incoming packets to public IP address are NAT-ed to private IP address without any filtering or dropping. In some countries this is common behavior of ISPs how to provide public external IP address.
This pull request implements STUN client protocol for learning external IP address and NAT type via external STUN server. This feature is disabled by default and user can enable it via config options ext_perform_stun, ext_stun_host and ext_stun_port.
When sending STUN binding requests we need to enable incoming UDP traffic to selected ports as responses to sent packets comes from different IP addresses/ports as to which were sent. This is how STUN protocol is working and tests if NAT allows and passes inbound connections.
When miniupnpd detects that IP address on external interface was changed (either by watching for notifications or when user instruct upnpnd via SIGUSR1 signal), then miniupnpd perform STUN requests again to learn new external IP address and NAT type. All this happens only in case config option ext_perform_stun is enabled (disabled by default).
In case miniupnpd detects that is behind restrictive NAT (all types expects above NAT 1:1) or upstream router does some filtering of incoming packets which leads to dropping packets on forwarded ports, then miniupnpd rejects all port forwarding requests from UPnP IGD/PCP clients (as port forwarding in this case does not work).
Also when clients ask for public IP address then miniupnpd checks that it really knows external public IP address. And if not, then it correctly send error message instead of sending incorrect internal / private IP address.
See also discussion: #298","sorry it looks like I needed to ""submit"" the review comments..",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,307,2018-05-19T12:05:04Z,2018-07-06T11:40:48Z,2018-09-17T13:12:32Z,MERGED,True,785,4,24,https://github.com/pali,miniupnpd: Learn public IP address and detect NAT via STUN protocol,7,[],https://github.com/miniupnp/miniupnp/pull/307,https://github.com/alexus-m,6,https://github.com/miniupnp/miniupnp/pull/307#issuecomment-422005827,"Normally port forwarding works only in case miniupnpd have public IP address and it is not running on network hidden behind NAT.
There is one exception: when miniupnpd host has private IP address with unrestricted NAT 1:1 -- i.e. it private IP address has 1:1 mapping with some public IP address and all incoming packets to public IP address are NAT-ed to private IP address without any filtering or dropping. In some countries this is common behavior of ISPs how to provide public external IP address.
This pull request implements STUN client protocol for learning external IP address and NAT type via external STUN server. This feature is disabled by default and user can enable it via config options ext_perform_stun, ext_stun_host and ext_stun_port.
When sending STUN binding requests we need to enable incoming UDP traffic to selected ports as responses to sent packets comes from different IP addresses/ports as to which were sent. This is how STUN protocol is working and tests if NAT allows and passes inbound connections.
When miniupnpd detects that IP address on external interface was changed (either by watching for notifications or when user instruct upnpnd via SIGUSR1 signal), then miniupnpd perform STUN requests again to learn new external IP address and NAT type. All this happens only in case config option ext_perform_stun is enabled (disabled by default).
In case miniupnpd detects that is behind restrictive NAT (all types expects above NAT 1:1) or upstream router does some filtering of incoming packets which leads to dropping packets on forwarded ports, then miniupnpd rejects all port forwarding requests from UPnP IGD/PCP clients (as port forwarding in this case does not work).
Also when clients ask for public IP address then miniupnpd checks that it really knows external public IP address. And if not, then it correctly send error message instead of sending incorrect internal / private IP address.
See also discussion: #298","@pali:

When sending STUN binding requests we need to enable incoming UDP traffic to selected ports as responses to sent packets comes from different IP addresses/ports as to which were sent. This is how STUN protocol is working and tests if NAT allows and passes inbound connections.

What is a list of IP-addresses and UDP-ports expected for Binding Responses?
(Sorry I'm not able to extract it from code)
Let me explain an outcome of my test scenario:
I'm OpenWRT user with installed miniupnpd v2.1.20180706-1.
I've configured stun.onesuite.com:3478 as a STUN server.
In order to get a positive answer
""daemon.info miniupnpd[26312]: STUN: ext interface pppoe-wan has now public IP address 178.45.123.456: Port forwarding is now enabled""
I need to configure firewall with
config rule
option target 'ACCEPT'
option src 'wan'
option proto 'udp'
option name 'STUN response'
option src_ip '64.77.226.37 64.77.226.17'
option src_port '3478 3479'
Otherwise I get:
daemon.warn miniupnpd[26182]: STUN: ext interface pppoe-wan with IP address 178.45.123.456 is now behind restrictive NAT with public IP address 178.45.123.456: Port forwarding is now impossible",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,307,2018-05-19T12:05:04Z,2018-07-06T11:40:48Z,2018-09-17T13:12:32Z,MERGED,True,785,4,24,https://github.com/pali,miniupnpd: Learn public IP address and detect NAT via STUN protocol,7,[],https://github.com/miniupnp/miniupnp/pull/307,https://github.com/pali,7,https://github.com/miniupnp/miniupnp/pull/307#issuecomment-422009908,"Normally port forwarding works only in case miniupnpd have public IP address and it is not running on network hidden behind NAT.
There is one exception: when miniupnpd host has private IP address with unrestricted NAT 1:1 -- i.e. it private IP address has 1:1 mapping with some public IP address and all incoming packets to public IP address are NAT-ed to private IP address without any filtering or dropping. In some countries this is common behavior of ISPs how to provide public external IP address.
This pull request implements STUN client protocol for learning external IP address and NAT type via external STUN server. This feature is disabled by default and user can enable it via config options ext_perform_stun, ext_stun_host and ext_stun_port.
When sending STUN binding requests we need to enable incoming UDP traffic to selected ports as responses to sent packets comes from different IP addresses/ports as to which were sent. This is how STUN protocol is working and tests if NAT allows and passes inbound connections.
When miniupnpd detects that IP address on external interface was changed (either by watching for notifications or when user instruct upnpnd via SIGUSR1 signal), then miniupnpd perform STUN requests again to learn new external IP address and NAT type. All this happens only in case config option ext_perform_stun is enabled (disabled by default).
In case miniupnpd detects that is behind restrictive NAT (all types expects above NAT 1:1) or upstream router does some filtering of incoming packets which leads to dropping packets on forwarded ports, then miniupnpd rejects all port forwarding requests from UPnP IGD/PCP clients (as port forwarding in this case does not work).
Also when clients ask for public IP address then miniupnpd checks that it really knows external public IP address. And if not, then it correctly send error message instead of sending incorrect internal / private IP address.
See also discussion: #298","What is a list of IP-addresses and UDP-ports expected for Binding Responses?

Target address and port of Binding response is same as source address/port of Binding request.
Source IP address of binding request is IP address of local interface based on routing tables. Source port is random. Destination address and destination port is configured by ext_stun_host and ext_stun_port.
Upnpd automatically allow communitation to the source port of binding request (and therefore target port of binding response). After stun processing is done, ports are removed from allowed list. Look for add_filter_rule2 and delete_filter_rule function calls in miniupnpd/upnpstun.c file for details.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,311,2018-06-19T08:57:06Z,2018-07-06T09:38:38Z,2018-07-06T19:43:08Z,CLOSED,False,61,73,9,https://github.com/irwir,A bunch of small changes,1,[],https://github.com/miniupnp/miniupnp/pull/311,https://github.com/irwir,1,https://github.com/miniupnp/miniupnp/pull/311,"That is what was left after merging changes for 64-bit Windows (you did a good job then).
This PR is supposed to decrease the number of warnings and slightly improve code style.
General considerations.

Assignments of NULL to local variable after free() were disliked by static analysers.
The reason was: assigned value was never used.
Also compilers might optimize it away.
Therefore these assignment add very little to code safety, and could be dropped.
If you still would like to keep it, a simple macro might be used to eliminate these assignments in Release configurations.
Use of the same parameter names in function declaration and definition should improve coding style.
Enforced type consistency eliminates warnings (and prevents errors).

Additional comments.
connecthostport.c
Missed replacement: -1 should have been INVALID_SOCKET.
ai_addrlen field is declared as size_t in MS VC, but parameter is int (truncation warning fix).
minisoap.c
Declaration and initialization in one line.
minissdpc.c
Prefix dw stands for DWORD, which is defined as unsigned long; and the correct format should be %lu, not %ld
minissdpc.h
Parameter names changed to match function's definitions.
miniupnpc.c
strlen() returns value of size_t type in MS VC. Hence the change from int l, n; to size_t
In UPNP_GetValidIGD checks were removed because some conditions should be always true.
Quick explanation:
devlist is not empty (line 581), therefore ndev is at least 1 in line 591
desc cannot be NULL after lines 594-595
miniwget.c
The first i<n condition was already verified in the loop header.
Change int l; to size_t ;l because of pointer arithmetics and sizeof.
minixml.h
Parentheses around macros and its parameters as a standard safety measure (static analysis).
upnpcommands.c
The constant UPNPCOMMAND_HTTP_ERROR is defined as signed, but it had to be used both as signed and unsigned (type mismatch warning fix).","That is what was left after merging changes for 64-bit Windows (you did a good job then).
This PR is supposed to decrease the number of warnings and slightly improve code style.
General considerations.

Assignments of NULL to local variable after free() were disliked by static analysers.
The reason was: assigned value was never used.
Also compilers might optimize it away.
Therefore these assignment add very little to code safety, and could be dropped.
If you still would like to keep it, a simple macro might be used to eliminate these assignments in Release configurations.
Use of the same parameter names in function declaration and definition should improve coding style.
Enforced type consistency eliminates warnings (and prevents errors).

Additional comments.
connecthostport.c
Missed replacement: -1 should have been INVALID_SOCKET.
ai_addrlen field is declared as size_t in MS VC, but parameter is int (truncation warning fix).
minisoap.c
Declaration and initialization in one line.
minissdpc.c
Prefix dw stands for DWORD, which is defined as unsigned long; and the correct format should be %lu, not %ld
minissdpc.h
Parameter names changed to match function's definitions.
miniupnpc.c
strlen() returns value of size_t type in MS VC. Hence the change from int l, n; to size_t
In UPNP_GetValidIGD checks were removed because some conditions should be always true.
Quick explanation:
devlist is not empty (line 581), therefore ndev is at least 1 in line 591
desc cannot be NULL after lines 594-595
miniwget.c
The first i<n condition was already verified in the loop header.
Change int l; to size_t ;l because of pointer arithmetics and sizeof.
minixml.h
Parentheses around macros and its parameters as a standard safety measure (static analysis).
upnpcommands.c
The constant UPNPCOMMAND_HTTP_ERROR is defined as signed, but it had to be used both as signed and unsigned (type mismatch warning fix).",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,312,2018-07-01T22:03:03Z,2018-07-15T13:34:10Z,2018-07-15T13:34:10Z,MERGED,True,269,153,4,https://github.com/Lochnair,miniupnpd: support newer libnftnl versions,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/312,https://github.com/Lochnair,1,https://github.com/miniupnp/miniupnp/pull/312,"Trying my hand at getting nftables support up to speed.
In libnftnl versions >=1.0.7 a lot of aliases and compat were removed breaking miniupnpd's nftables support completely. I've fixed all the errors caused by this I'm aware of. Not sure if there's some warnings too that should be fixed.
What's currently missing is writing the update_portmapping and update_portmapping_desc_timestamp functions for the nftables backend as done for others in bdac007. Though I doubt I've got the code-fu to do that.","Trying my hand at getting nftables support up to speed.
In libnftnl versions >=1.0.7 a lot of aliases and compat were removed breaking miniupnpd's nftables support completely. I've fixed all the errors caused by this I'm aware of. Not sure if there's some warnings too that should be fixed.
What's currently missing is writing the update_portmapping and update_portmapping_desc_timestamp functions for the nftables backend as done for others in bdac007. Though I doubt I've got the code-fu to do that.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,312,2018-07-01T22:03:03Z,2018-07-15T13:34:10Z,2018-07-15T13:34:10Z,MERGED,True,269,153,4,https://github.com/Lochnair,miniupnpd: support newer libnftnl versions,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/312,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/312#issuecomment-405018026,"Trying my hand at getting nftables support up to speed.
In libnftnl versions >=1.0.7 a lot of aliases and compat were removed breaking miniupnpd's nftables support completely. I've fixed all the errors caused by this I'm aware of. Not sure if there's some warnings too that should be fixed.
What's currently missing is writing the update_portmapping and update_portmapping_desc_timestamp functions for the nftables backend as done for others in bdac007. Though I doubt I've got the code-fu to do that.",I need to add linux nft build to travis-ci to be able to check that everything is ok,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,312,2018-07-01T22:03:03Z,2018-07-15T13:34:10Z,2018-07-15T13:34:10Z,MERGED,True,269,153,4,https://github.com/Lochnair,miniupnpd: support newer libnftnl versions,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/312,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/312#issuecomment-405022132,"Trying my hand at getting nftables support up to speed.
In libnftnl versions >=1.0.7 a lot of aliases and compat were removed breaking miniupnpd's nftables support completely. I've fixed all the errors caused by this I'm aware of. Not sure if there's some warnings too that should be fixed.
What's currently missing is writing the update_portmapping and update_portmapping_desc_timestamp functions for the nftables backend as done for others in bdac007. Though I doubt I've got the code-fu to do that.",@Lochnair does it still build with older libnftnl ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,312,2018-07-01T22:03:03Z,2018-07-15T13:34:10Z,2018-07-15T13:34:10Z,MERGED,True,269,153,4,https://github.com/Lochnair,miniupnpd: support newer libnftnl versions,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/312,https://github.com/Lochnair,4,https://github.com/miniupnp/miniupnp/pull/312#issuecomment-405029734,"Trying my hand at getting nftables support up to speed.
In libnftnl versions >=1.0.7 a lot of aliases and compat were removed breaking miniupnpd's nftables support completely. I've fixed all the errors caused by this I'm aware of. Not sure if there's some warnings too that should be fixed.
What's currently missing is writing the update_portmapping and update_portmapping_desc_timestamp functions for the nftables backend as done for others in bdac007. Though I doubt I've got the code-fu to do that.","@miniupnp Just tried compiling against libnftnl 1.0.5 on Alpine 3.3, which gets me as far as on newer versions. The new functions were introduced in 1.0.4, so anyone using >= 1.0.4 should be fine, which includes every distro I've checked so far.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,312,2018-07-01T22:03:03Z,2018-07-15T13:34:10Z,2018-07-15T13:34:10Z,MERGED,True,269,153,4,https://github.com/Lochnair,miniupnpd: support newer libnftnl versions,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/312,https://github.com/Lochnair,5,https://github.com/miniupnp/miniupnp/pull/312#issuecomment-405040764,"Trying my hand at getting nftables support up to speed.
In libnftnl versions >=1.0.7 a lot of aliases and compat were removed breaking miniupnpd's nftables support completely. I've fixed all the errors caused by this I'm aware of. Not sure if there's some warnings too that should be fixed.
What's currently missing is writing the update_portmapping and update_portmapping_desc_timestamp functions for the nftables backend as done for others in bdac007. Though I doubt I've got the code-fu to do that.","I've tried to write the update_portmapping and update_portmapping_desc_timestamp functions for nft in second commit.  It compiles in both my Arch environment and on the Alpine 3.3 container, but I haven't had the chance to actually test if it runs properly yet.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,312,2018-07-01T22:03:03Z,2018-07-15T13:34:10Z,2018-07-15T13:34:10Z,MERGED,True,269,153,4,https://github.com/Lochnair,miniupnpd: support newer libnftnl versions,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/312,https://github.com/miniupnp,6,https://github.com/miniupnp/miniupnp/pull/312#issuecomment-405083970,"Trying my hand at getting nftables support up to speed.
In libnftnl versions >=1.0.7 a lot of aliases and compat were removed breaking miniupnpd's nftables support completely. I've fixed all the errors caused by this I'm aware of. Not sure if there's some warnings too that should be fixed.
What's currently missing is writing the update_portmapping and update_portmapping_desc_timestamp functions for the nftables backend as done for others in bdac007. Though I doubt I've got the code-fu to do that.","travis-ci is not launching builds on the project...
https://travis-ci.org/miniupnp/miniupnp",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,312,2018-07-01T22:03:03Z,2018-07-15T13:34:10Z,2018-07-15T13:34:10Z,MERGED,True,269,153,4,https://github.com/Lochnair,miniupnpd: support newer libnftnl versions,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/312,https://github.com/miniupnp,7,https://github.com/miniupnp/miniupnp/pull/312#issuecomment-405084056,"Trying my hand at getting nftables support up to speed.
In libnftnl versions >=1.0.7 a lot of aliases and compat were removed breaking miniupnpd's nftables support completely. I've fixed all the errors caused by this I'm aware of. Not sure if there's some warnings too that should be fixed.
What's currently missing is writing the update_portmapping and update_portmapping_desc_timestamp functions for the nftables backend as done for others in bdac007. Though I doubt I've got the code-fu to do that.",And I have merged but it doesn't appears here...,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,312,2018-07-01T22:03:03Z,2018-07-15T13:34:10Z,2018-07-15T13:34:10Z,MERGED,True,269,153,4,https://github.com/Lochnair,miniupnpd: support newer libnftnl versions,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/312,https://github.com/miniupnp,8,https://github.com/miniupnp/miniupnp/pull/312#issuecomment-405089070,"Trying my hand at getting nftables support up to speed.
In libnftnl versions >=1.0.7 a lot of aliases and compat were removed breaking miniupnpd's nftables support completely. I've fixed all the errors caused by this I'm aware of. Not sure if there's some warnings too that should be fixed.
What's currently missing is writing the update_portmapping and update_portmapping_desc_timestamp functions for the nftables backend as done for others in bdac007. Though I doubt I've got the code-fu to do that.","I have set up a clone of this github project on framagit.org
https://framagit.org/miniupnp/miniupnp/-/jobs/183109
upnpstun.o: In function `perform_stun':
/builds/miniupnp/miniupnp/miniupnpd/upnpstun.c:363: undefined reference to `delete_filter_rule'
collect2: error: ld returned 1 exit status",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,314,2018-07-06T12:08:24Z,2018-07-06T12:38:38Z,2018-07-06T12:38:38Z,MERGED,True,7,1,1,https://github.com/pali,miniupnpd: Allow to specify also port number in -o STUN: option,1,[],https://github.com/miniupnp/miniupnp/pull/314,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/314,"Also update help for -o STUN: option, it can take stun hostname too.","Also update help for -o STUN: option, it can take stun hostname too.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,315,2018-07-06T13:05:00Z,2018-07-14T11:45:10Z,2018-07-14T11:45:10Z,MERGED,True,27,0,1,https://github.com/pali,miniupnpc: Add information about iptables settings into README,1,[],https://github.com/miniupnp/miniupnp/pull/315,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/315,"Configuring iptables firewall for UPnP clients to not be too relax is not easy. This is because netfilter's conntrack module cannot track unicast UDP responses for UDP packets sent to multicast address. Most users either turn firewall off or accept any incoming UDP packets to have UPnP clients working.
But with introduction of ipset into Linux kernel >= 2.6.39 it is possible to have iptables set to fully restrictive mode (-P DROP) and allow UPnP clients working.
I think that it can be useful for miniupnp users, therefore I'm creating this pull request with iptables match rules for miniupnp project. Feel free to move it or drop if you think it is not useful at all.
Detailed description is available on:
https://serverfault.com/a/911286
https://unix.stackexchange.com/a/444804","Configuring iptables firewall for UPnP clients to not be too relax is not easy. This is because netfilter's conntrack module cannot track unicast UDP responses for UDP packets sent to multicast address. Most users either turn firewall off or accept any incoming UDP packets to have UPnP clients working.
But with introduction of ipset into Linux kernel >= 2.6.39 it is possible to have iptables set to fully restrictive mode (-P DROP) and allow UPnP clients working.
I think that it can be useful for miniupnp users, therefore I'm creating this pull request with iptables match rules for miniupnp project. Feel free to move it or drop if you think it is not useful at all.
Detailed description is available on:
https://serverfault.com/a/911286
https://unix.stackexchange.com/a/444804",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,316,2018-07-06T19:49:23Z,2018-07-14T11:39:03Z,2018-07-14T11:39:03Z,MERGED,True,7,25,4,https://github.com/irwir,Move common definition to miniupnpc_socketdef.h,1,[],https://github.com/miniupnp/miniupnp/pull/316,https://github.com/irwir,1,https://github.com/miniupnp/miniupnp/pull/316,Obvious simplification.,Obvious simplification.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,320,2018-08-05T12:24:48Z,2018-08-12T08:32:56Z,2019-02-08T14:39:23Z,MERGED,True,2,2,1,https://github.com/irwir,Fix conditions for Windows versions below Vista,1,[],https://github.com/miniupnp/miniupnp/pull/320,https://github.com/irwir,1,https://github.com/miniupnp/miniupnp/pull/320,,,True,{'THUMBS_UP': ['https://github.com/past-due']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,326,2018-09-06T15:46:05Z,2018-09-07T15:18:22Z,2018-09-07T15:18:23Z,MERGED,True,23,0,2,https://github.com/pali,Fix compilation with nftables,1,[],https://github.com/miniupnp/miniupnp/pull/326,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/326,Fixes #324,Fixes #324,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,328,2018-09-21T13:24:26Z,2018-10-31T15:34:43Z,2018-10-31T15:34:43Z,MERGED,True,74,50,1,https://github.com/Faless,Replace GetBestRoute and GetIpAddrTable with UWP-compatible API,1,[],https://github.com/miniupnp/miniupnp/pull/328,https://github.com/Faless,1,https://github.com/miniupnp/miniupnp/pull/328,"Everything should still work with Windows XP as minimum version.
Those API are, according to Microsoft docs, compatible with XP.
This is in relation to #238 and godotengine/godot#22044 godotengine/godot#20672 .
Replaces GetBestRoute with GetBestInterfaceEX .
Replaces GetIpAddrTable with GetAdaptersAddresses.
I know you mentioned that UWP has it's own API for UPNP, but many software, like Godot Engine, uses this library due to its great platform support, and I felt it was a pity that we had to make an UWP specific implementation of that.
Let me know what you think, I hope this helps :)","Everything should still work with Windows XP as minimum version.
Those API are, according to Microsoft docs, compatible with XP.
This is in relation to #238 and godotengine/godot#22044 godotengine/godot#20672 .
Replaces GetBestRoute with GetBestInterfaceEX .
Replaces GetIpAddrTable with GetAdaptersAddresses.
I know you mentioned that UWP has it's own API for UPNP, but many software, like Godot Engine, uses this library due to its great platform support, and I felt it was a pity that we had to make an UWP specific implementation of that.
Let me know what you think, I hope this helps :)",True,"{'THUMBS_UP': ['https://github.com/past-due', 'https://github.com/akien-mga']}"
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,331,2018-10-20T03:04:13Z,2018-10-20T06:56:12Z,2018-10-22T00:17:31Z,MERGED,True,4,4,2,https://github.com/Brett208,Update renamed file in MSVC Project,1,[],https://github.com/miniupnp/miniupnp/pull/331,https://github.com/Brett208,1,https://github.com/miniupnp/miniupnp/pull/331,"declspec.h was renamed to miniupnpc_declspec.h but the MSVC file reference was not updated.
Thanks,
Brett","declspec.h was renamed to miniupnpc_declspec.h but the MSVC file reference was not updated.
Thanks,
Brett",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,335,2018-11-18T01:45:52Z,2019-02-11T15:10:02Z,2019-02-11T15:10:02Z,CLOSED,False,19,14,3,https://github.com/hammadrauf,"Imported to MSVC 2017 on Windows 10, fixed some issues related to Ada…",4,[],https://github.com/miniupnp/miniupnp/pull/335,https://github.com/hammadrauf,1,https://github.com/miniupnp/miniupnp/pull/335,"…pter Multicast Address.
Imported to MSVC 2017 on Windows 10, fixed some issues related to Adapter Multicast Address.
Compiled and ran succesfully with Hitron CGN3ACSMR (Rogers.com) Router on Windows 10.
Thanks.","…pter Multicast Address.
Imported to MSVC 2017 on Windows 10, fixed some issues related to Adapter Multicast Address.
Compiled and ran succesfully with Hitron CGN3ACSMR (Rogers.com) Router on Windows 10.
Thanks.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,335,2018-11-18T01:45:52Z,2019-02-11T15:10:02Z,2019-02-11T15:10:02Z,CLOSED,False,19,14,3,https://github.com/hammadrauf,"Imported to MSVC 2017 on Windows 10, fixed some issues related to Ada…",4,[],https://github.com/miniupnp/miniupnp/pull/335,https://github.com/Memnarch,2,https://github.com/miniupnp/miniupnp/pull/335#issuecomment-444410559,"…pter Multicast Address.
Imported to MSVC 2017 on Windows 10, fixed some issues related to Adapter Multicast Address.
Compiled and ran succesfully with Hitron CGN3ACSMR (Rogers.com) Router on Windows 10.
Thanks.","OH WAIT.....  did you have issues with multicasts not working when SSDP-Discovery service is enabled?
My issue:
#265
Have to try if this fixes it o.O",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,335,2018-11-18T01:45:52Z,2019-02-11T15:10:02Z,2019-02-11T15:10:02Z,CLOSED,False,19,14,3,https://github.com/hammadrauf,"Imported to MSVC 2017 on Windows 10, fixed some issues related to Ada…",4,[],https://github.com/miniupnp/miniupnp/pull/335,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/335#issuecomment-462362211,"…pter Multicast Address.
Imported to MSVC 2017 on Windows 10, fixed some issues related to Adapter Multicast Address.
Compiled and ran succesfully with Hitron CGN3ACSMR (Rogers.com) Router on Windows 10.
Thanks.",commit 3e32ea0 fixes the problem,True,{'THUMBS_UP': ['https://github.com/Memnarch']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,337,2018-12-06T07:09:50Z,2018-12-06T08:10:37Z,2018-12-06T08:10:37Z,MERGED,True,1,1,1,https://github.com/smestdagh,avoid off-by-one buffer overread,1,[],https://github.com/miniupnp/miniupnp/pull/337,https://github.com/smestdagh,1,https://github.com/miniupnp/miniupnp/pull/337,similar to commit 9fcc0a7,similar to commit 9fcc0a7,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,338,2018-12-17T19:41:21Z,2018-12-18T19:18:30Z,2018-12-18T19:18:30Z,MERGED,True,1,1,1,https://github.com/smestdagh,avoid off-by-one buffer overread,1,[],https://github.com/miniupnp/miniupnp/pull/338,https://github.com/smestdagh,1,https://github.com/miniupnp/miniupnp/pull/338,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,341,2019-01-05T20:44:05Z,2019-01-07T08:35:37Z,2019-01-07T08:35:37Z,MERGED,True,9,9,4,https://github.com/cgutman,Ensure SSDP reply headers are not partial matches,1,[],https://github.com/miniupnp/miniupnp/pull/341,https://github.com/cgutman,1,https://github.com/miniupnp/miniupnp/pull/341,"I stumbled upon this when reading through the SSDP reply parsing code. I don't know if any real world devices send SSDP reply headers that start with st, location, or usn without being an exact match, but it seems good to handle that possibility correctly nonetheless.","I stumbled upon this when reading through the SSDP reply parsing code. I don't know if any real world devices send SSDP reply headers that start with st, location, or usn without being an exact match, but it seems good to handle that possibility correctly nonetheless.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,345,2019-01-18T08:27:59Z,2019-02-04T18:39:59Z,2019-02-04T18:39:59Z,MERGED,True,8,8,1,https://github.com/sorz,miniupnpd: Install nftables scripts,1,[],https://github.com/miniupnp/miniupnp/pull/345,https://github.com/sorz,1,https://github.com/miniupnp/miniupnp/pull/345,"When build with nft, copy nft scripts rather than iptables scripts.","When build with nft, copy nft scripts rather than iptables scripts.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,347,2019-02-04T15:29:48Z,2019-02-04T18:36:28Z,2019-02-04T18:36:28Z,MERGED,True,3,0,1,https://github.com/srmish-vdoo,miniupnpd: add secure compilation flags for Linux,1,[],https://github.com/miniupnp/miniupnp/pull/347,https://github.com/srmish-vdoo,1,https://github.com/miniupnp/miniupnp/pull/347,"Add basic security compilation flags for miniupnpd Linux compilation, to mitigate memory corruption and other attacks
This is useful when using old compilers, cross-compilers or even just non-x86 compilers, as those are not configured to add these flags by default
I believe the same flags should work as-is for the BSD makefile as well, but I haven't tested it","Add basic security compilation flags for miniupnpd Linux compilation, to mitigate memory corruption and other attacks
This is useful when using old compilers, cross-compilers or even just non-x86 compilers, as those are not configured to add these flags by default
I believe the same flags should work as-is for the BSD makefile as well, but I haven't tested it",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,348,2019-02-06T17:40:11Z,2019-02-12T14:47:41Z,2019-02-12T14:47:41Z,MERGED,True,503,0,7,https://github.com/alkino,minissdpc: add a libuv client,1,[],https://github.com/miniupnp/miniupnp/pull/348,https://github.com/alkino,1,https://github.com/miniupnp/miniupnp/pull/348,"Here is a quick&dirty but working implementation of the minissdp client with libuv to have an asynchronous client.
What do you think about it? Mergeable? Useful?","Here is a quick&dirty but working implementation of the minissdp client with libuv to have an asynchronous client.
What do you think about it? Mergeable? Useful?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,348,2019-02-06T17:40:11Z,2019-02-12T14:47:41Z,2019-02-12T14:47:41Z,MERGED,True,503,0,7,https://github.com/alkino,minissdpc: add a libuv client,1,[],https://github.com/miniupnp/miniupnp/pull/348,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/348#issuecomment-461116873,"Here is a quick&dirty but working implementation of the minissdp client with libuv to have an asynchronous client.
What do you think about it? Mergeable? Useful?",please add a README file in the directory to explain,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,348,2019-02-06T17:40:11Z,2019-02-12T14:47:41Z,2019-02-12T14:47:41Z,MERGED,True,503,0,7,https://github.com/alkino,minissdpc: add a libuv client,1,[],https://github.com/miniupnp/miniupnp/pull/348,https://github.com/alkino,3,https://github.com/miniupnp/miniupnp/pull/348#issuecomment-461203836,"Here is a quick&dirty but working implementation of the minissdp client with libuv to have an asynchronous client.
What do you think about it? Mergeable? Useful?",Do you mean I should put it in a single directory near libevent?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,348,2019-02-06T17:40:11Z,2019-02-12T14:47:41Z,2019-02-12T14:47:41Z,MERGED,True,503,0,7,https://github.com/alkino,minissdpc: add a libuv client,1,[],https://github.com/miniupnp/miniupnp/pull/348,https://github.com/miniupnp,4,https://github.com/miniupnp/miniupnp/pull/348#issuecomment-461214206,"Here is a quick&dirty but working implementation of the minissdp client with libuv to have an asynchronous client.
What do you think about it? Mergeable? Useful?","Do you mean I should put it in a single directory near libevent?

Well you just add two files without explaining anything.
How to use them ? why ?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,348,2019-02-06T17:40:11Z,2019-02-12T14:47:41Z,2019-02-12T14:47:41Z,MERGED,True,503,0,7,https://github.com/alkino,minissdpc: add a libuv client,1,[],https://github.com/miniupnp/miniupnp/pull/348,https://github.com/alkino,5,https://github.com/miniupnp/miniupnp/pull/348#issuecomment-461421106,"Here is a quick&dirty but working implementation of the minissdp client with libuv to have an asynchronous client.
What do you think about it? Mergeable? Useful?",Here is an update in a separated dir with a README and an example usage file.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,352,2019-03-06T07:36:54Z,2019-03-09T09:29:31Z,2019-03-09T09:29:31Z,MERGED,True,3,1,1,https://github.com/cgutman,Fix connect() socket error trace on Windows,1,[],https://github.com/miniupnp/miniupnp/pull/352,https://github.com/cgutman,1,https://github.com/miniupnp/miniupnp/pull/352,"Calling closesocket() will result in Winsock internally calling WSASetLastError(0), which wipes out the original error from the connect() call that we're trying to print with PRINT_SOCKET_ERROR(""connect"").
This results in stderr output like the following when connection errors occur while searching for devices:
Socket error: connect, 0
Socket error: connect, 0
Socket error: connect, 0

With some slight changes to the loop, we can avoid this situation and get the proper error codes:
Socket error: connect, 10060
Socket error: connect, 10060
Socket error: connect, 10060","Calling closesocket() will result in Winsock internally calling WSASetLastError(0), which wipes out the original error from the connect() call that we're trying to print with PRINT_SOCKET_ERROR(""connect"").
This results in stderr output like the following when connection errors occur while searching for devices:
Socket error: connect, 0
Socket error: connect, 0
Socket error: connect, 0

With some slight changes to the loop, we can avoid this situation and get the proper error codes:
Socket error: connect, 10060
Socket error: connect, 10060
Socket error: connect, 10060",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,353,2019-03-07T22:12:04Z,2019-03-07T22:37:26Z,2019-03-07T22:37:26Z,MERGED,True,9,8,1,https://github.com/rosorio,Update portinuse code to reflect changes made in FreeBSD 12.0,1,[],https://github.com/miniupnp/miniupnp/pull/353,https://github.com/rosorio,1,https://github.com/miniupnp/miniupnp/pull/353,"Structures xtcpcb and xinpcb returned by the kernel
hide now part of its members after r315662. The fix
was inspired by changes made in usr.bin/systat/netstat.c
tool.","Structures xtcpcb and xinpcb returned by the kernel
hide now part of its members after r315662. The fix
was inspired by changes made in usr.bin/systat/netstat.c
tool.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,362,2019-04-09T07:57:04Z,2019-05-08T13:47:35Z,2019-05-08T13:47:35Z,CLOSED,False,42,50,3,https://github.com/irwir,Fix issues from static analysis and simplify.,1,[],https://github.com/miniupnp/miniupnp/pull/362,https://github.com/irwir,1,https://github.com/miniupnp/miniupnp/pull/362,"minissdpc.c

warnings for redeclared variable p in lines 524 and 530 (hides the previous declaration)
there is no reason to use platform-specific heap; standard C library functions malloc/free are fine
part of condition always true in line 572 - (dwRetVal == ERROR_BUFFER_OVERFLOW)

miniupnp.c

condition always true in line 348 for WIN32 - (devlist == NULL)
memcmp might access memory beyond the end of string in lines 429 and 462

upnpcommands.c

restrict scope of variable p","minissdpc.c

warnings for redeclared variable p in lines 524 and 530 (hides the previous declaration)
there is no reason to use platform-specific heap; standard C library functions malloc/free are fine
part of condition always true in line 572 - (dwRetVal == ERROR_BUFFER_OVERFLOW)

miniupnp.c

condition always true in line 348 for WIN32 - (devlist == NULL)
memcmp might access memory beyond the end of string in lines 429 and 462

upnpcommands.c

restrict scope of variable p",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,362,2019-04-09T07:57:04Z,2019-05-08T13:47:35Z,2019-05-08T13:47:35Z,CLOSED,False,42,50,3,https://github.com/irwir,Fix issues from static analysis and simplify.,1,[],https://github.com/miniupnp/miniupnp/pull/362,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/362#issuecomment-481663880,"minissdpc.c

warnings for redeclared variable p in lines 524 and 530 (hides the previous declaration)
there is no reason to use platform-specific heap; standard C library functions malloc/free are fine
part of condition always true in line 572 - (dwRetVal == ERROR_BUFFER_OVERFLOW)

miniupnp.c

condition always true in line 348 for WIN32 - (devlist == NULL)
memcmp might access memory beyond the end of string in lines 429 and 462

upnpcommands.c

restrict scope of variable p",thank you for the report. I don't think I will merge as-is,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,362,2019-04-09T07:57:04Z,2019-05-08T13:47:35Z,2019-05-08T13:47:35Z,CLOSED,False,42,50,3,https://github.com/irwir,Fix issues from static analysis and simplify.,1,[],https://github.com/miniupnp/miniupnp/pull/362,https://github.com/irwir,3,https://github.com/miniupnp/miniupnp/pull/362#issuecomment-482022419,"minissdpc.c

warnings for redeclared variable p in lines 524 and 530 (hides the previous declaration)
there is no reason to use platform-specific heap; standard C library functions malloc/free are fine
part of condition always true in line 572 - (dwRetVal == ERROR_BUFFER_OVERFLOW)

miniupnp.c

condition always true in line 348 for WIN32 - (devlist == NULL)
memcmp might access memory beyond the end of string in lines 429 and 462

upnpcommands.c

restrict scope of variable p",Changed code according to the latest commit.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,364,2019-04-17T14:28:54Z,2019-04-17T14:34:10Z,2019-04-17T14:43:49Z,MERGED,True,28,21,1,https://github.com/past-due,[CMake] Add UPNPC_NO_INSTALL option,1,[],https://github.com/miniupnp/miniupnp/pull/364,https://github.com/past-due,1,https://github.com/miniupnp/miniupnp/pull/364,"In some cases (such as using the library via add_subdirectory in CMake), it may be desirable to disable installation.","In some cases (such as using the library via add_subdirectory in CMake), it may be desirable to disable installation.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,366,2019-04-21T20:17:59Z,2019-04-23T11:33:19Z,2019-12-07T13:56:57Z,CLOSED,False,5,0,1,https://github.com/neheb,CMake: Add listdevices,1,[],https://github.com/miniupnp/miniupnp/pull/366,https://github.com/neheb,1,https://github.com/miniupnp/miniupnp/pull/366,Matches the Makefile,Matches the Makefile,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,366,2019-04-21T20:17:59Z,2019-04-23T11:33:19Z,2019-12-07T13:56:57Z,CLOSED,False,5,0,1,https://github.com/neheb,CMake: Add listdevices,1,[],https://github.com/miniupnp/miniupnp/pull/366,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/366#issuecomment-485765246,Matches the Makefile,"merged.
82b117e",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,366,2019-04-21T20:17:59Z,2019-04-23T11:33:19Z,2019-12-07T13:56:57Z,CLOSED,False,5,0,1,https://github.com/neheb,CMake: Add listdevices,1,[],https://github.com/miniupnp/miniupnp/pull/366,https://github.com/prissi,3,https://github.com/miniupnp/miniupnp/pull/366#issuecomment-562853349,Matches the Makefile,"But now Cmake adds listdevices to the lib, where it overlays the main program's ""_main"" . It certainly does not belong into the general list of sources, it is just needed for building listdevices. So this patch breaks linking the resulting a static library libminiupnpc.a for any program.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,367,2019-04-25T16:42:52Z,2019-04-26T06:42:59Z,2019-04-26T06:47:02Z,MERGED,True,35,8,3,https://github.com/NathanRichard,Fixing the Upnpc delivery process for windows targets,4,"['miniupnpc', 'windows']",https://github.com/miniupnp/miniupnp/pull/367,https://github.com/NathanRichard,1,https://github.com/miniupnp/miniupnp/pull/367,"Changes
I reworked the Appveyor build process and introduced the following changes :

The python module is built for Python 2.7 (as before), Python 3.5 and Python 3.7. Adding support for new python versions should be relatively easy.
The python module is distributed both as a raw egg file (which existed previously but was buried in a zip file with other non-required binary files), and a wheel file (which seems to be the recommended distribution method for python modules now).

Remarks

I only tested the .egg and .whl files for Python 3.7 under Windows 7 32 bits, which is the environment I was interested in. The other builds completed without errors but may require further validation.
One of the main fixes that allowed the Python 3 versions to build was to remove the --compiler directive given to setuptool : it then naturally used the MSVC compiler to build the module as it is the default compiler for modern python versions and it seems mingw32 does not play well with these versions. However I think the C part of the project was not affected and is still built using mingw32. So this means the MVSC-built python module is linking against the mingw-built upnpc libraries. I am actually surprised its works so well in practice (we may have to thank the strong C-ABI for that), but I am not whether it is by chance or it is a guaranty of the standard. Comments and insights are very welcome on that aspect.
References to mingw are all over the project, in comments, config files etc. I did not touch those, but it would probably be worth checking if all these references are still valid since we now also use MSVC.","Changes
I reworked the Appveyor build process and introduced the following changes :

The python module is built for Python 2.7 (as before), Python 3.5 and Python 3.7. Adding support for new python versions should be relatively easy.
The python module is distributed both as a raw egg file (which existed previously but was buried in a zip file with other non-required binary files), and a wheel file (which seems to be the recommended distribution method for python modules now).

Remarks

I only tested the .egg and .whl files for Python 3.7 under Windows 7 32 bits, which is the environment I was interested in. The other builds completed without errors but may require further validation.
One of the main fixes that allowed the Python 3 versions to build was to remove the --compiler directive given to setuptool : it then naturally used the MSVC compiler to build the module as it is the default compiler for modern python versions and it seems mingw32 does not play well with these versions. However I think the C part of the project was not affected and is still built using mingw32. So this means the MVSC-built python module is linking against the mingw-built upnpc libraries. I am actually surprised its works so well in practice (we may have to thank the strong C-ABI for that), but I am not whether it is by chance or it is a guaranty of the standard. Comments and insights are very welcome on that aspect.
References to mingw are all over the project, in comments, config files etc. I did not touch those, but it would probably be worth checking if all these references are still valid since we now also use MSVC.",True,{'THUMBS_UP': ['https://github.com/miniupnp']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,367,2019-04-25T16:42:52Z,2019-04-26T06:42:59Z,2019-04-26T06:47:02Z,MERGED,True,35,8,3,https://github.com/NathanRichard,Fixing the Upnpc delivery process for windows targets,4,"['miniupnpc', 'windows']",https://github.com/miniupnp/miniupnp/pull/367,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/367#issuecomment-486941833,"Changes
I reworked the Appveyor build process and introduced the following changes :

The python module is built for Python 2.7 (as before), Python 3.5 and Python 3.7. Adding support for new python versions should be relatively easy.
The python module is distributed both as a raw egg file (which existed previously but was buried in a zip file with other non-required binary files), and a wheel file (which seems to be the recommended distribution method for python modules now).

Remarks

I only tested the .egg and .whl files for Python 3.7 under Windows 7 32 bits, which is the environment I was interested in. The other builds completed without errors but may require further validation.
One of the main fixes that allowed the Python 3 versions to build was to remove the --compiler directive given to setuptool : it then naturally used the MSVC compiler to build the module as it is the default compiler for modern python versions and it seems mingw32 does not play well with these versions. However I think the C part of the project was not affected and is still built using mingw32. So this means the MVSC-built python module is linking against the mingw-built upnpc libraries. I am actually surprised its works so well in practice (we may have to thank the strong C-ABI for that), but I am not whether it is by chance or it is a guaranty of the standard. Comments and insights are very welcome on that aspect.
References to mingw are all over the project, in comments, config files etc. I did not touch those, but it would probably be worth checking if all these references are still valid since we now also use MSVC.","using mingw or MSVC should produce compatible code.
The only difference would be in library dependencies
We could add a nmake makefile for building with ""cl""
or use the MSVC project files : https://github.com/miniupnp/miniupnp/tree/master/miniupnpc/msvc",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,367,2019-04-25T16:42:52Z,2019-04-26T06:42:59Z,2019-04-26T06:47:02Z,MERGED,True,35,8,3,https://github.com/NathanRichard,Fixing the Upnpc delivery process for windows targets,4,"['miniupnpc', 'windows']",https://github.com/miniupnp/miniupnp/pull/367,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/367#issuecomment-486946005,"Changes
I reworked the Appveyor build process and introduced the following changes :

The python module is built for Python 2.7 (as before), Python 3.5 and Python 3.7. Adding support for new python versions should be relatively easy.
The python module is distributed both as a raw egg file (which existed previously but was buried in a zip file with other non-required binary files), and a wheel file (which seems to be the recommended distribution method for python modules now).

Remarks

I only tested the .egg and .whl files for Python 3.7 under Windows 7 32 bits, which is the environment I was interested in. The other builds completed without errors but may require further validation.
One of the main fixes that allowed the Python 3 versions to build was to remove the --compiler directive given to setuptool : it then naturally used the MSVC compiler to build the module as it is the default compiler for modern python versions and it seems mingw32 does not play well with these versions. However I think the C part of the project was not affected and is still built using mingw32. So this means the MVSC-built python module is linking against the mingw-built upnpc libraries. I am actually surprised its works so well in practice (we may have to thank the strong C-ABI for that), but I am not whether it is by chance or it is a guaranty of the standard. Comments and insights are very welcome on that aspect.
References to mingw are all over the project, in comments, config files etc. I did not touch those, but it would probably be worth checking if all these references are still valid since we now also use MSVC.",we could also modify setupmingw32.py (or create a new setupwin32.py) to drop dependency on libminiupnpc.a and add all *.c,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,368,2019-05-02T09:54:56Z,2019-05-02T11:10:35Z,2019-05-02T11:10:35Z,MERGED,True,25,13,2,https://github.com/themiron,miniupnpd: fix ssdp notify on unrelated interfaces,1,[],https://github.com/miniupnp/miniupnp/pull/368,https://github.com/themiron,1,https://github.com/miniupnp/miniupnp/pull/368,"If several different interfaces share same ipv4 address on different subnets (i.e. eth0 192.168.1.1/24 + eth1 192.168.1.1/16), miniupnpd may pick any one of them, possibly wrong one w/o respecting exact
listening_ip interface.
syslog will contain something similar to:
miniupnpd: sendto(udp_notify=6, 192.168.1.1): No such device
miniupnpd: sendto(udp_notify=6, 192.168.1.1): No such device
miniupnpd: try_sendto(sock=6, len=464, dest=239.255.255.250:1900): sendto: No such device
miniupnpd: try_sendto(sock=6, len=464, dest=239.255.255.250:1900): sendto: No such device
miniupnpd: try_sendto failed to send 11 packets
Fix that with specifying exact outgoing mcast interface for  notify socket with help of IP_MULTICAST_IF/mreqn struct.
Since OpenAndConfSSDPNotifySocket() now takes lan_addr_s struct, OpenAndConfSSDPNotifySocketIPv6() was similary changed for api consistency.","If several different interfaces share same ipv4 address on different subnets (i.e. eth0 192.168.1.1/24 + eth1 192.168.1.1/16), miniupnpd may pick any one of them, possibly wrong one w/o respecting exact
listening_ip interface.
syslog will contain something similar to:
miniupnpd: sendto(udp_notify=6, 192.168.1.1): No such device
miniupnpd: sendto(udp_notify=6, 192.168.1.1): No such device
miniupnpd: try_sendto(sock=6, len=464, dest=239.255.255.250:1900): sendto: No such device
miniupnpd: try_sendto(sock=6, len=464, dest=239.255.255.250:1900): sendto: No such device
miniupnpd: try_sendto failed to send 11 packets
Fix that with specifying exact outgoing mcast interface for  notify socket with help of IP_MULTICAST_IF/mreqn struct.
Since OpenAndConfSSDPNotifySocket() now takes lan_addr_s struct, OpenAndConfSSDPNotifySocketIPv6() was similary changed for api consistency.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,368,2019-05-02T09:54:56Z,2019-05-02T11:10:35Z,2019-05-02T11:10:35Z,MERGED,True,25,13,2,https://github.com/themiron,miniupnpd: fix ssdp notify on unrelated interfaces,1,[],https://github.com/miniupnp/miniupnp/pull/368,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/368#issuecomment-488620752,"If several different interfaces share same ipv4 address on different subnets (i.e. eth0 192.168.1.1/24 + eth1 192.168.1.1/16), miniupnpd may pick any one of them, possibly wrong one w/o respecting exact
listening_ip interface.
syslog will contain something similar to:
miniupnpd: sendto(udp_notify=6, 192.168.1.1): No such device
miniupnpd: sendto(udp_notify=6, 192.168.1.1): No such device
miniupnpd: try_sendto(sock=6, len=464, dest=239.255.255.250:1900): sendto: No such device
miniupnpd: try_sendto(sock=6, len=464, dest=239.255.255.250:1900): sendto: No such device
miniupnpd: try_sendto failed to send 11 packets
Fix that with specifying exact outgoing mcast interface for  notify socket with help of IP_MULTICAST_IF/mreqn struct.
Since OpenAndConfSSDPNotifySocket() now takes lan_addr_s struct, OpenAndConfSSDPNotifySocketIPv6() was similary changed for api consistency.","by the way there is something I don' understand :

eth0 192.168.1.1/24 + eth1 192.168.0.0/16

they are not the same ipv4 address...",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,368,2019-05-02T09:54:56Z,2019-05-02T11:10:35Z,2019-05-02T11:10:35Z,MERGED,True,25,13,2,https://github.com/themiron,miniupnpd: fix ssdp notify on unrelated interfaces,1,[],https://github.com/miniupnp/miniupnp/pull/368,https://github.com/themiron,3,https://github.com/miniupnp/miniupnp/pull/368#issuecomment-488621201,"If several different interfaces share same ipv4 address on different subnets (i.e. eth0 192.168.1.1/24 + eth1 192.168.1.1/16), miniupnpd may pick any one of them, possibly wrong one w/o respecting exact
listening_ip interface.
syslog will contain something similar to:
miniupnpd: sendto(udp_notify=6, 192.168.1.1): No such device
miniupnpd: sendto(udp_notify=6, 192.168.1.1): No such device
miniupnpd: try_sendto(sock=6, len=464, dest=239.255.255.250:1900): sendto: No such device
miniupnpd: try_sendto(sock=6, len=464, dest=239.255.255.250:1900): sendto: No such device
miniupnpd: try_sendto failed to send 11 packets
Fix that with specifying exact outgoing mcast interface for  notify socket with help of IP_MULTICAST_IF/mreqn struct.
Since OpenAndConfSSDPNotifySocket() now takes lan_addr_s struct, OpenAndConfSSDPNotifySocketIPv6() was similary changed for api consistency.","by the way there is something I don' understand :

eth0 192.168.1.1/24 + eth1 192.168.0.0/16

they are not the same ipv4 address...

yes, should be eth0 192.168.1.1/24 + eth1 192.168.1.1/16.
I'll update description.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,368,2019-05-02T09:54:56Z,2019-05-02T11:10:35Z,2019-05-02T11:10:35Z,MERGED,True,25,13,2,https://github.com/themiron,miniupnpd: fix ssdp notify on unrelated interfaces,1,[],https://github.com/miniupnp/miniupnp/pull/368,https://github.com/miniupnp,4,https://github.com/miniupnp/miniupnp/pull/368#issuecomment-488622597,"If several different interfaces share same ipv4 address on different subnets (i.e. eth0 192.168.1.1/24 + eth1 192.168.1.1/16), miniupnpd may pick any one of them, possibly wrong one w/o respecting exact
listening_ip interface.
syslog will contain something similar to:
miniupnpd: sendto(udp_notify=6, 192.168.1.1): No such device
miniupnpd: sendto(udp_notify=6, 192.168.1.1): No such device
miniupnpd: try_sendto(sock=6, len=464, dest=239.255.255.250:1900): sendto: No such device
miniupnpd: try_sendto(sock=6, len=464, dest=239.255.255.250:1900): sendto: No such device
miniupnpd: try_sendto failed to send 11 packets
Fix that with specifying exact outgoing mcast interface for  notify socket with help of IP_MULTICAST_IF/mreqn struct.
Since OpenAndConfSSDPNotifySocket() now takes lan_addr_s struct, OpenAndConfSSDPNotifySocketIPv6() was similary changed for api consistency.",you may also update Changelog.txt :),True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,368,2019-05-02T09:54:56Z,2019-05-02T11:10:35Z,2019-05-02T11:10:35Z,MERGED,True,25,13,2,https://github.com/themiron,miniupnpd: fix ssdp notify on unrelated interfaces,1,[],https://github.com/miniupnp/miniupnp/pull/368,https://github.com/themiron,5,https://github.com/miniupnp/miniupnp/pull/368#issuecomment-488629356,"If several different interfaces share same ipv4 address on different subnets (i.e. eth0 192.168.1.1/24 + eth1 192.168.1.1/16), miniupnpd may pick any one of them, possibly wrong one w/o respecting exact
listening_ip interface.
syslog will contain something similar to:
miniupnpd: sendto(udp_notify=6, 192.168.1.1): No such device
miniupnpd: sendto(udp_notify=6, 192.168.1.1): No such device
miniupnpd: try_sendto(sock=6, len=464, dest=239.255.255.250:1900): sendto: No such device
miniupnpd: try_sendto(sock=6, len=464, dest=239.255.255.250:1900): sendto: No such device
miniupnpd: try_sendto failed to send 11 packets
Fix that with specifying exact outgoing mcast interface for  notify socket with help of IP_MULTICAST_IF/mreqn struct.
Since OpenAndConfSSDPNotifySocket() now takes lan_addr_s struct, OpenAndConfSSDPNotifySocketIPv6() was similary changed for api consistency.","you may also update Changelog.txt :)

here we go, description is also fixed",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,369,2019-05-03T12:38:28Z,2019-05-03T14:00:31Z,2019-05-03T14:00:31Z,MERGED,True,4,0,1,https://github.com/stefantalpalaru,strupnperror(): add 2 more error codes,1,[],https://github.com/miniupnp/miniupnp/pull/369,https://github.com/stefantalpalaru,1,https://github.com/miniupnp/miniupnp/pull/369,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,369,2019-05-03T12:38:28Z,2019-05-03T14:00:31Z,2019-05-03T14:00:31Z,MERGED,True,4,0,1,https://github.com/stefantalpalaru,strupnperror(): add 2 more error codes,1,[],https://github.com/miniupnp/miniupnp/pull/369,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/369#issuecomment-489104915,,thank you !,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,371,2019-05-20T09:35:55Z,2019-05-20T19:08:44Z,2019-05-20T19:08:44Z,MERGED,True,12,5,1,https://github.com/NathanRichard,Added the leaseDuration parameter to the addportmapping python binding.,1,[],https://github.com/miniupnp/miniupnp/pull/371,https://github.com/NathanRichard,1,https://github.com/miniupnp/miniupnp/pull/371,"This parameter was already present in the C API but not exposed to the
python module.
For backward compatibility, leaseDuration was made optional with a
default value of 0 (unlimited duration).","This parameter was already present in the C API but not exposed to the
python module.
For backward compatibility, leaseDuration was made optional with a
default value of 0 (unlimited duration).",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,378,2019-06-03T10:37:02Z,2019-06-13T19:55:10Z,2019-06-13T19:55:10Z,CLOSED,False,27,23,4,https://github.com/svenauhagen,This commit fixes IPv4 and adds IPv6 pinhole to nftables,10,[],https://github.com/miniupnp/miniupnp/pull/378,https://github.com/svenauhagen,1,https://github.com/miniupnp/miniupnp/pull/378,"Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven","Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven",True,{'THUMBS_UP': ['https://github.com/miniupnp']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,378,2019-06-03T10:37:02Z,2019-06-13T19:55:10Z,2019-06-13T19:55:10Z,CLOSED,False,27,23,4,https://github.com/svenauhagen,This commit fixes IPv4 and adds IPv6 pinhole to nftables,10,[],https://github.com/miniupnp/miniupnp/pull/378,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/378#issuecomment-498835899,"Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven",@svenauhagen would it be possible to check build with travis ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,378,2019-06-03T10:37:02Z,2019-06-13T19:55:10Z,2019-06-13T19:55:10Z,CLOSED,False,27,23,4,https://github.com/svenauhagen,This commit fixes IPv4 and adds IPv6 pinhole to nftables,10,[],https://github.com/miniupnp/miniupnp/pull/378,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/378#issuecomment-498840080,"Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven",with which linux version has this been tested ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,378,2019-06-03T10:37:02Z,2019-06-13T19:55:10Z,2019-06-13T19:55:10Z,CLOSED,False,27,23,4,https://github.com/svenauhagen,This commit fixes IPv4 and adds IPv6 pinhole to nftables,10,[],https://github.com/miniupnp/miniupnp/pull/378,https://github.com/svenauhagen,4,https://github.com/miniupnp/miniupnp/pull/378#issuecomment-498939813,"Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven","@miniupnp
I can also try and break up the commit in smaller chunks if it makes the review easier.
I do not have a travis active on my account, is there one on the miniupnp branch?
I am using Jenkins internally.
I have tested and compiled it with Debian Stretch and a Backports Kernel and nftables.
nftables needs to be fairly new for this to work.
It should work out of the box on a newer system like Debian Buster or a recent Ubuntu Version.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,378,2019-06-03T10:37:02Z,2019-06-13T19:55:10Z,2019-06-13T19:55:10Z,CLOSED,False,27,23,4,https://github.com/svenauhagen,This commit fixes IPv4 and adds IPv6 pinhole to nftables,10,[],https://github.com/miniupnp/miniupnp/pull/378,https://github.com/miniupnp,5,https://github.com/miniupnp/miniupnp/pull/378#issuecomment-499176868,"Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven","you can easily activate travis-ci for your github repositories.
if a recent version of nftables is needed, I would prefer some #if to allow building on old or new nftables.
There is the same thing with PF or iptables in miniupnpd
aslo please rebase on my master :)",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,378,2019-06-03T10:37:02Z,2019-06-13T19:55:10Z,2019-06-13T19:55:10Z,CLOSED,False,27,23,4,https://github.com/svenauhagen,This commit fixes IPv4 and adds IPv6 pinhole to nftables,10,[],https://github.com/miniupnp/miniupnp/pull/378,https://github.com/svenauhagen,6,https://github.com/miniupnp/miniupnp/pull/378#issuecomment-501128284,"Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven","Hi,
alright, I rebased the PR and fixed some indentation problems.
I enabled travis on my account and just started the build.
Regarding the version that was just so that you need a Kernel that actually supports enough of nftables to run the code.
There is no difference inside the committed code regarding the different nftable versions.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,378,2019-06-03T10:37:02Z,2019-06-13T19:55:10Z,2019-06-13T19:55:10Z,CLOSED,False,27,23,4,https://github.com/svenauhagen,This commit fixes IPv4 and adds IPv6 pinhole to nftables,10,[],https://github.com/miniupnp/miniupnp/pull/378,https://github.com/miniupnp,7,https://github.com/miniupnp/miniupnp/pull/378#issuecomment-501430733,"Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven","what is that problem ?
netfilter_nft/nftnlrdr.c: In function ‘delete_filter_rule’:
netfilter_nft/nftnlrdr.c:221:2: warning: assignment from incompatible pointer type [-Wincompatible-pointer-types]
  LIST_FOREACH(p, &head_filter, entry) {
  ^",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,378,2019-06-03T10:37:02Z,2019-06-13T19:55:10Z,2019-06-13T19:55:10Z,CLOSED,False,27,23,4,https://github.com/svenauhagen,This commit fixes IPv4 and adds IPv6 pinhole to nftables,10,[],https://github.com/miniupnp/miniupnp/pull/378,https://github.com/miniupnp,8,https://github.com/miniupnp/miniupnp/pull/378#issuecomment-501431630,"Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven","by the way, I don't see any rebase, just a merge...",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,378,2019-06-03T10:37:02Z,2019-06-13T19:55:10Z,2019-06-13T19:55:10Z,CLOSED,False,27,23,4,https://github.com/svenauhagen,This commit fixes IPv4 and adds IPv6 pinhole to nftables,10,[],https://github.com/miniupnp/miniupnp/pull/378,https://github.com/miniupnp,9,https://github.com/miniupnp/miniupnp/pull/378#issuecomment-501459984,"Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven",I rebased myself...,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,378,2019-06-03T10:37:02Z,2019-06-13T19:55:10Z,2019-06-13T19:55:10Z,CLOSED,False,27,23,4,https://github.com/svenauhagen,This commit fixes IPv4 and adds IPv6 pinhole to nftables,10,[],https://github.com/miniupnp/miniupnp/pull/378,https://github.com/svenauhagen,10,https://github.com/miniupnp/miniupnp/pull/378#issuecomment-501554358,"Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven","sorry about that I did a merge not a rebase.
I found the cause of the compiler warnings.
It was the typedef struct definition.
The warnings were in the code from the beginning so that was nothing I introduced.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,378,2019-06-03T10:37:02Z,2019-06-13T19:55:10Z,2019-06-13T19:55:10Z,CLOSED,False,27,23,4,https://github.com/svenauhagen,This commit fixes IPv4 and adds IPv6 pinhole to nftables,10,[],https://github.com/miniupnp/miniupnp/pull/378,https://github.com/miniupnp,11,https://github.com/miniupnp/miniupnp/pull/378#issuecomment-501846892,"Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven","Le 13/06/2019 à 07:30, sven a écrit :

 sorry about that I did a merge not a rebase.
 I found the cause of the compiler warnings.
 It was the typedef struct definition.
 The warnings were in the code from the beginning so that was nothing I
 introduced.


Thank you for the fix !",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,378,2019-06-03T10:37:02Z,2019-06-13T19:55:10Z,2019-06-13T19:55:10Z,CLOSED,False,27,23,4,https://github.com/svenauhagen,This commit fixes IPv4 and adds IPv6 pinhole to nftables,10,[],https://github.com/miniupnp/miniupnp/pull/378,https://github.com/miniupnp,12,https://github.com/miniupnp/miniupnp/pull/378#issuecomment-501855395,"Hi,
this commit makes nftables usable and adds IPv6 pinhole support.
Best
Sven",I rebased myself,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,381,2019-06-25T07:46:21Z,2019-06-25T21:12:08Z,2019-06-26T04:59:27Z,MERGED,True,39,32,7,https://github.com/svenauhagen,NFTables fixes and scripts,1,[],https://github.com/miniupnp/miniupnp/pull/381,https://github.com/svenauhagen,1,https://github.com/miniupnp/miniupnp/pull/381,"This commit fixes the list detection and uses the inet chain for ipv4.
The scripts got reworked as well and a display script was added.","This commit fixes the list detection and uses the inet chain for ipv4.
The scripts got reworked as well and a display script was added.",True,{'THUMBS_UP': ['https://github.com/rtorrentuser']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,381,2019-06-25T07:46:21Z,2019-06-25T21:12:08Z,2019-06-26T04:59:27Z,MERGED,True,39,32,7,https://github.com/svenauhagen,NFTables fixes and scripts,1,[],https://github.com/miniupnp/miniupnp/pull/381,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/381#issuecomment-505624902,"This commit fixes the list detection and uses the inet chain for ipv4.
The scripts got reworked as well and a display script was added.",fixes #380,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,382,2019-06-28T09:07:34Z,2019-06-30T20:28:13Z,2019-06-30T20:28:13Z,MERGED,True,48,15,1,https://github.com/svenauhagen,nftables pinhole fixes,1,[],https://github.com/miniupnp/miniupnp/pull/382,https://github.com/svenauhagen,1,https://github.com/miniupnp/miniupnp/pull/382,"This PR fixes some issues with nftables pinholes.
It adds some extra checks for empty source addresses, fixes ports and the update pinhole function had a logical error where the uid was changed.","This PR fixes some issues with nftables pinholes.
It adds some extra checks for empty source addresses, fixes ports and the update pinhole function had a logical error where the uid was changed.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,384,2019-06-30T19:08:34Z,2019-06-30T19:20:22Z,2019-06-30T19:20:23Z,MERGED,True,2,2,1,https://github.com/svenauhagen,nftables: This commits fixes an error setting the NFT Chain in DNAT instead of …,1,[],https://github.com/miniupnp/miniupnp/pull/384,https://github.com/svenauhagen,1,https://github.com/miniupnp/miniupnp/pull/384,"…Filter.
I added the INET chain to Dnat instead of filter.
This fixes #383","…Filter.
I added the INET chain to Dnat instead of filter.
This fixes #383",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,388,2019-07-13T10:48:05Z,2019-07-29T22:18:28Z,2019-07-29T22:18:28Z,MERGED,True,13,10,1,https://github.com/jlayec,manage the [remote host] parameter in upnpc,1,[],https://github.com/miniupnp/miniupnp/pull/388,https://github.com/jlayec,1,https://github.com/miniupnp/miniupnp/pull/388,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,390,2019-07-29T17:21:17Z,2019-07-29T22:10:39Z,2019-07-29T22:10:39Z,MERGED,True,1,1,1,https://github.com/psibi,Fix error code for 708,1,[],https://github.com/miniupnp/miniupnp/pull/390,https://github.com/psibi,1,https://github.com/miniupnp/miniupnp/pull/390,"According to the specification
http://upnp.org/specs/gw/UPnP-gw-WANIPConnection-v2-Service.pdf, the
708 error code corresponds to InvalidLayer2Address. Also
WildcardNotPermittedInSrcIP is for 715 which is already properly mapped.","According to the specification
http://upnp.org/specs/gw/UPnP-gw-WANIPConnection-v2-Service.pdf, the
708 error code corresponds to InvalidLayer2Address. Also
WildcardNotPermittedInSrcIP is for 715 which is already properly mapped.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,390,2019-07-29T17:21:17Z,2019-07-29T22:10:39Z,2019-07-29T22:10:39Z,MERGED,True,1,1,1,https://github.com/psibi,Fix error code for 708,1,[],https://github.com/miniupnp/miniupnp/pull/390,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/390#issuecomment-516180335,"According to the specification
http://upnp.org/specs/gw/UPnP-gw-WANIPConnection-v2-Service.pdf, the
708 error code corresponds to InvalidLayer2Address. Also
WildcardNotPermittedInSrcIP is for 715 which is already properly mapped.",thank you for spotting this !,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,395,2019-09-01T04:12:44Z,2019-09-01T22:20:27Z,2019-09-01T22:20:27Z,MERGED,True,60,44,2,https://github.com/paul-chambers,Rework nft_removeall.sh to preserve other nftables structures,2,[],https://github.com/miniupnp/miniupnp/pull/395,https://github.com/paul-chambers,1,https://github.com/miniupnp/miniupnp/pull/395,Rework nft_removeall.sh to preserve nftables structures that miniupnpd didn't add. Important for firewalld and sshguard co-existance.,Rework nft_removeall.sh to preserve nftables structures that miniupnpd didn't add. Important for firewalld and sshguard co-existance.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,395,2019-09-01T04:12:44Z,2019-09-01T22:20:27Z,2019-09-01T22:20:27Z,MERGED,True,60,44,2,https://github.com/paul-chambers,Rework nft_removeall.sh to preserve other nftables structures,2,[],https://github.com/miniupnp/miniupnp/pull/395,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/395#issuecomment-526955473,Rework nft_removeall.sh to preserve nftables structures that miniupnpd didn't add. Important for firewalld and sshguard co-existance.,"Thanks.
Has it been tested ? (I'm not able to test myself)",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,395,2019-09-01T04:12:44Z,2019-09-01T22:20:27Z,2019-09-01T22:20:27Z,MERGED,True,60,44,2,https://github.com/paul-chambers,Rework nft_removeall.sh to preserve other nftables structures,2,[],https://github.com/miniupnp/miniupnp/pull/395,https://github.com/paul-chambers,3,https://github.com/miniupnp/miniupnp/pull/395#issuecomment-526958079,Rework nft_removeall.sh to preserve nftables structures that miniupnpd didn't add. Important for firewalld and sshguard co-existance.,"Yes, on my firewall machine (running Debian Buster). I'm using firewalld with the nftable backend, and was running into problems when I started and stopped miniupnpd. With these changes, firewalld is surviving intact across miniupnpd restarts.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,399,2019-09-18T01:29:45Z,2019-09-19T00:06:03Z,2019-09-19T00:06:03Z,CLOSED,False,2532,18,3,https://github.com/paul-chambers,"add 'dox' target to Makefile.linux_nft, update uuid in destination, not source",2,[],https://github.com/miniupnp/miniupnp/pull/399,https://github.com/paul-chambers,1,https://github.com/miniupnp/miniupnp/pull/399,"Add 'dox' make target for nftables, which generates docs from source using doxygen.
Also: on install, modify the uuid in the installed copy of miniupnpd.conf, not the pristine local copy that is under revision control.","Add 'dox' make target for nftables, which generates docs from source using doxygen.
Also: on install, modify the uuid in the installed copy of miniupnpd.conf, not the pristine local copy that is under revision control.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,400,2019-09-19T16:56:09Z,2019-09-24T10:09:54Z,2019-09-24T21:21:12Z,CLOSED,False,2770,25,7,https://github.com/paul-chambers,"Add 'dox' target in nft makefile, add USE_IPTABLES/USE_NFTABLES to genconfig.sh",5,[],https://github.com/miniupnp/miniupnp/pull/400,https://github.com/paul-chambers,1,https://github.com/miniupnp/miniupnp/pull/400,"Add a target 'dox' to Makefile.linux_nft to generate doxygen documentation. Also update the UUID update to apply to the installed copy of miniupnpd.conf, not the pristine original.
Distinguish between iptables and nftables in genconfig.sh, defining either USE_IPTABLES or USE_NFTABLES as appropriate, in addition to the existing USE_NETFILTER define.","Add a target 'dox' to Makefile.linux_nft to generate doxygen documentation. Also update the UUID update to apply to the installed copy of miniupnpd.conf, not the pristine original.
Distinguish between iptables and nftables in genconfig.sh, defining either USE_IPTABLES or USE_NFTABLES as appropriate, in addition to the existing USE_NETFILTER define.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,400,2019-09-19T16:56:09Z,2019-09-24T10:09:54Z,2019-09-24T21:21:12Z,CLOSED,False,2770,25,7,https://github.com/paul-chambers,"Add 'dox' target in nft makefile, add USE_IPTABLES/USE_NFTABLES to genconfig.sh",5,[],https://github.com/miniupnp/miniupnp/pull/400,https://github.com/paul-chambers,2,https://github.com/miniupnp/miniupnp/pull/400#issuecomment-533401534,"Add a target 'dox' to Makefile.linux_nft to generate doxygen documentation. Also update the UUID update to apply to the installed copy of miniupnpd.conf, not the pristine original.
Distinguish between iptables and nftables in genconfig.sh, defining either USE_IPTABLES or USE_NFTABLES as appropriate, in addition to the existing USE_NETFILTER define.","Build issue seems to be Travis having trouble with apt-get, Not an issue with these changes.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,400,2019-09-19T16:56:09Z,2019-09-24T10:09:54Z,2019-09-24T21:21:12Z,CLOSED,False,2770,25,7,https://github.com/paul-chambers,"Add 'dox' target in nft makefile, add USE_IPTABLES/USE_NFTABLES to genconfig.sh",5,[],https://github.com/miniupnp/miniupnp/pull/400,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/400#issuecomment-534484432,"Add a target 'dox' to Makefile.linux_nft to generate doxygen documentation. Also update the UUID update to apply to the installed copy of miniupnpd.conf, not the pristine original.
Distinguish between iptables and nftables in genconfig.sh, defining either USE_IPTABLES or USE_NFTABLES as appropriate, in addition to the existing USE_NETFILTER define.","I don't understand why there is a merge in your Pull request...
I'm going to rebase",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,400,2019-09-19T16:56:09Z,2019-09-24T10:09:54Z,2019-09-24T21:21:12Z,CLOSED,False,2770,25,7,https://github.com/paul-chambers,"Add 'dox' target in nft makefile, add USE_IPTABLES/USE_NFTABLES to genconfig.sh",5,[],https://github.com/miniupnp/miniupnp/pull/400,https://github.com/miniupnp,4,https://github.com/miniupnp/miniupnp/pull/400#issuecomment-534490282,"Add a target 'dox' to Makefile.linux_nft to generate doxygen documentation. Also update the UUID update to apply to the installed copy of miniupnpd.conf, not the pristine original.
Distinguish between iptables and nftables in genconfig.sh, defining either USE_IPTABLES or USE_NFTABLES as appropriate, in addition to the existing USE_NETFILTER define.","I have merged by hand your changes :

make dox
USE_IPTABLES/USE_NFTABLES

open a new Pull request for other changes.
(first answer to my questions about nftnlrdr_misc.c )",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,402,2019-09-26T06:09:35Z,2019-09-28T03:37:17Z,2019-09-28T03:37:17Z,CLOSED,False,115,90,2,https://github.com/paul-chambers,Add missing break statements in switch statements,6,[],https://github.com/miniupnp/miniupnp/pull/402,https://github.com/paul-chambers,1,https://github.com/miniupnp/miniupnp/pull/402,Also promote some code repeated in all cases outside the switch statement.,Also promote some code repeated in all cases outside the switch statement.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,403,2019-09-28T04:07:49Z,2019-09-30T21:26:45Z,2019-09-30T21:26:45Z,MERGED,True,54,41,5,https://github.com/paul-chambers,Update case statements to fix compiler 'fall through' warnings,4,[],https://github.com/miniupnp/miniupnp/pull/403,https://github.com/paul-chambers,1,https://github.com/miniupnp/miniupnp/pull/403,"A couple seem intentional (linux/ifacewatcher.c). Most look like they were unintentionally omitted (netfilter_nft/nftnlrdr_misc.c).
Resubmitted without unintended indentation changes included in previous pull request.","A couple seem intentional (linux/ifacewatcher.c). Most look like they were unintentionally omitted (netfilter_nft/nftnlrdr_misc.c).
Resubmitted without unintended indentation changes included in previous pull request.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,403,2019-09-28T04:07:49Z,2019-09-30T21:26:45Z,2019-09-30T21:26:45Z,MERGED,True,54,41,5,https://github.com/paul-chambers,Update case statements to fix compiler 'fall through' warnings,4,[],https://github.com/miniupnp/miniupnp/pull/403,https://github.com/paul-chambers,2,https://github.com/miniupnp/miniupnp/pull/403#issuecomment-536250781,"A couple seem intentional (linux/ifacewatcher.c). Most look like they were unintentionally omitted (netfilter_nft/nftnlrdr_misc.c).
Resubmitted without unintended indentation changes included in previous pull request.","--firewall= and Makefile tweaks are to make it easier to compile the iptables version after making changes that should only affect nftables. I can't easily test the iptables version, but at least I can check it compiles without warnings.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,403,2019-09-28T04:07:49Z,2019-09-30T21:26:45Z,2019-09-30T21:26:45Z,MERGED,True,54,41,5,https://github.com/paul-chambers,Update case statements to fix compiler 'fall through' warnings,4,[],https://github.com/miniupnp/miniupnp/pull/403,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/403#issuecomment-536760080,"A couple seem intentional (linux/ifacewatcher.c). Most look like they were unintentionally omitted (netfilter_nft/nftnlrdr_misc.c).
Resubmitted without unintended indentation changes included in previous pull request.",thanks !,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,404,2019-10-01T08:34:28Z,2019-10-02T21:52:03Z,2019-10-03T02:53:23Z,CLOSED,False,586,277,12,https://github.com/paul-chambers,Significant updates to nftables support,11,"['linux', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/404,https://github.com/paul-chambers,1,https://github.com/miniupnp/miniupnp/pull/404,"Branch with significant changes that updates nftables support in miniupnpd to work with current versions of libnftnl (and nftables underneath). Also includes some maintainability and readability improvements.
Also tested independently by @4np. I believe this fixes issue #397","Branch with significant changes that updates nftables support in miniupnpd to work with current versions of libnftnl (and nftables underneath). Also includes some maintainability and readability improvements.
Also tested independently by @4np. I believe this fixes issue #397",True,"{'THUMBS_UP': ['https://github.com/4np', 'https://github.com/miniupnp']}"
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,404,2019-10-01T08:34:28Z,2019-10-02T21:52:03Z,2019-10-03T02:53:23Z,CLOSED,False,586,277,12,https://github.com/paul-chambers,Significant updates to nftables support,11,"['linux', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/404,https://github.com/paul-chambers,2,https://github.com/miniupnp/miniupnp/pull/404#issuecomment-536938227,"Branch with significant changes that updates nftables support in miniupnpd to work with current versions of libnftnl (and nftables underneath). Also includes some maintainability and readability improvements.
Also tested independently by @4np. I believe this fixes issue #397",CI build appears to be failing because config.h isn't being regenerated with USE_NFTABLES set. Builds without error for me.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,404,2019-10-01T08:34:28Z,2019-10-02T21:52:03Z,2019-10-03T02:53:23Z,CLOSED,False,586,277,12,https://github.com/paul-chambers,Significant updates to nftables support,11,"['linux', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/404,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/404#issuecomment-537258837,"Branch with significant changes that updates nftables support in miniupnpd to work with current versions of libnftnl (and nftables underneath). Also includes some maintainability and readability improvements.
Also tested independently by @4np. I believe this fixes issue #397","CI build appears to be failing because config.h isn't being regenerated with USE_NFTABLES set. Builds without error for me.

that's fixed ;)",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,404,2019-10-01T08:34:28Z,2019-10-02T21:52:03Z,2019-10-03T02:53:23Z,CLOSED,False,586,277,12,https://github.com/paul-chambers,Significant updates to nftables support,11,"['linux', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/404,https://github.com/paul-chambers,4,https://github.com/miniupnp/miniupnp/pull/404#issuecomment-537673094,"Branch with significant changes that updates nftables support in miniupnpd to work with current versions of libnftnl (and nftables underneath). Also includes some maintainability and readability improvements.
Also tested independently by @4np. I believe this fixes issue #397","Thanks for the Travis fix. I think I've resolved everything.
I caught another bug in the original code. The 'description' is stored in USERDATA, a sized blob. Thus you can't just use strdup() to copy it as if it's a null-terminated string, must use strndup().",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,404,2019-10-01T08:34:28Z,2019-10-02T21:52:03Z,2019-10-03T02:53:23Z,CLOSED,False,586,277,12,https://github.com/paul-chambers,Significant updates to nftables support,11,"['linux', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/404,https://github.com/miniupnp,5,https://github.com/miniupnp/miniupnp/pull/404#issuecomment-537697409,"Branch with significant changes that updates nftables support in miniupnpd to work with current versions of libnftnl (and nftables underneath). Also includes some maintainability and readability improvements.
Also tested independently by @4np. I believe this fixes issue #397",merged manually,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,406,2019-10-04T16:27:31Z,2019-10-04T16:49:04Z,2019-10-04T16:49:04Z,CLOSED,False,188,168,6,https://github.com/paul-chambers,Nftables,6,[],https://github.com/miniupnp/miniupnp/pull/406,https://github.com/paul-chambers,1,https://github.com/miniupnp/miniupnp/pull/406,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,407,2019-10-05T07:09:34Z,2019-10-06T20:16:48Z,2019-10-07T18:42:34Z,CLOSED,False,198,403,6,https://github.com/paul-chambers,nft: Open a persistent connection to mnl/netlink socket at init_redirect(),4,[],https://github.com/miniupnp/miniupnp/pull/407,https://github.com/paul-chambers,1,https://github.com/miniupnp/miniupnp/pull/407,"Preparation for dropping elevated privileges after the initialization phase for the nftables implementation on Linux. See #405
Move the 8k allocation on the stack for debug-printing rules in debug builds into a separate function. This keeps the stack layout consistent between debug and non-debug builds, making it easier to diagnose some classes of bugs, e.g. stack corruptions, alignment problems, etc.","Preparation for dropping elevated privileges after the initialization phase for the nftables implementation on Linux. See #405
Move the 8k allocation on the stack for debug-printing rules in debug builds into a separate function. This keeps the stack layout consistent between debug and non-debug builds, making it easier to diagnose some classes of bugs, e.g. stack corruptions, alignment problems, etc.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,407,2019-10-05T07:09:34Z,2019-10-06T20:16:48Z,2019-10-07T18:42:34Z,CLOSED,False,198,403,6,https://github.com/paul-chambers,nft: Open a persistent connection to mnl/netlink socket at init_redirect(),4,[],https://github.com/miniupnp/miniupnp/pull/407,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/407#issuecomment-538667887,"Preparation for dropping elevated privileges after the initialization phase for the nftables implementation on Linux. See #405
Move the 8k allocation on the stack for debug-printing rules in debug builds into a separate function. This keeps the stack layout consistent between debug and non-debug builds, making it easier to diagnose some classes of bugs, e.g. stack corruptions, alignment problems, etc.",thanks !,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,407,2019-10-05T07:09:34Z,2019-10-06T20:16:48Z,2019-10-07T18:42:34Z,CLOSED,False,198,403,6,https://github.com/paul-chambers,nft: Open a persistent connection to mnl/netlink socket at init_redirect(),4,[],https://github.com/miniupnp/miniupnp/pull/407,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/407#issuecomment-538668081,"Preparation for dropping elevated privileges after the initialization phase for the nftables implementation on Linux. See #405
Move the 8k allocation on the stack for debug-printing rules in debug builds into a separate function. This keeps the stack layout consistent between debug and non-debug builds, making it easier to diagnose some classes of bugs, e.g. stack corruptions, alignment problems, etc.","thank you for investing time in miniupnpd.
I'm quite busy theses days and I don't have much time to setup a router with nftables to fix and test the nftables backend",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,407,2019-10-05T07:09:34Z,2019-10-06T20:16:48Z,2019-10-07T18:42:34Z,CLOSED,False,198,403,6,https://github.com/paul-chambers,nft: Open a persistent connection to mnl/netlink socket at init_redirect(),4,[],https://github.com/miniupnp/miniupnp/pull/407,https://github.com/paul-chambers,4,https://github.com/miniupnp/miniupnp/pull/407#issuecomment-538723409,"Preparation for dropping elevated privileges after the initialization phase for the nftables implementation on Linux. See #405
Move the 8k allocation on the stack for debug-printing rules in debug builds into a separate function. This keeps the stack layout consistent between debug and non-debug builds, making it easier to diagnose some classes of bugs, e.g. stack corruptions, alignment problems, etc.","Thanks for creating miniupnp in the first place. I've been using it for years, seems only fair to contribute back when the chance presented itself :)
Perhaps once I've proven myself, I can help out more. I'd love to help separate the single repo into per-project repos for example ( #152 ). My OCD again :)
The nftables implementation could be made simpler. Not sure if the caches are really necessary, the nfnml library provides iterators that could serve the same purposes, and I'm not sure the performance gain is worth the major increase in complexity. The rule_t private structure to mirror the opaque struct nftnl_rule has to be (re)populated by multiple API calls anyhow.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,407,2019-10-05T07:09:34Z,2019-10-06T20:16:48Z,2019-10-07T18:42:34Z,CLOSED,False,198,403,6,https://github.com/paul-chambers,nft: Open a persistent connection to mnl/netlink socket at init_redirect(),4,[],https://github.com/miniupnp/miniupnp/pull/407,https://github.com/paul-chambers,5,https://github.com/miniupnp/miniupnp/pull/407#issuecomment-538723810,"Preparation for dropping elevated privileges after the initialization phase for the nftables implementation on Linux. See #405
Move the 8k allocation on the stack for debug-printing rules in debug builds into a separate function. This keeps the stack layout consistent between debug and non-debug builds, making it easier to diagnose some classes of bugs, e.g. stack corruptions, alignment problems, etc.",Hmm... I'm confused by the conflicts. They don't actually look like conflicts to me.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,407,2019-10-05T07:09:34Z,2019-10-06T20:16:48Z,2019-10-07T18:42:34Z,CLOSED,False,198,403,6,https://github.com/paul-chambers,nft: Open a persistent connection to mnl/netlink socket at init_redirect(),4,[],https://github.com/miniupnp/miniupnp/pull/407,https://github.com/miniupnp,6,https://github.com/miniupnp/miniupnp/pull/407#issuecomment-538779402,"Preparation for dropping elevated privileges after the initialization phase for the nftables implementation on Linux. See #405
Move the 8k allocation on the stack for debug-printing rules in debug builds into a separate function. This keeps the stack layout consistent between debug and non-debug builds, making it easier to diagnose some classes of bugs, e.g. stack corruptions, alignment problems, etc.","I will fix the conflicts
I have the bad habit of rewriting the history ;)",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,407,2019-10-05T07:09:34Z,2019-10-06T20:16:48Z,2019-10-07T18:42:34Z,CLOSED,False,198,403,6,https://github.com/paul-chambers,nft: Open a persistent connection to mnl/netlink socket at init_redirect(),4,[],https://github.com/miniupnp/miniupnp/pull/407,https://github.com/miniupnp,7,https://github.com/miniupnp/miniupnp/pull/407#issuecomment-538783829,"Preparation for dropping elevated privileges after the initialization phase for the nftables implementation on Linux. See #405
Move the 8k allocation on the stack for debug-printing rules in debug builds into a separate function. This keeps the stack layout consistent between debug and non-debug builds, making it easier to diagnose some classes of bugs, e.g. stack corruptions, alignment problems, etc.","OK. I merged myself.
@paul-chambers I think you need to have a look at nftpinhole.c
please build with --igd2 and --ipv6 options",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,407,2019-10-05T07:09:34Z,2019-10-06T20:16:48Z,2019-10-07T18:42:34Z,CLOSED,False,198,403,6,https://github.com/paul-chambers,nft: Open a persistent connection to mnl/netlink socket at init_redirect(),4,[],https://github.com/miniupnp/miniupnp/pull/407,https://github.com/paul-chambers,8,https://github.com/miniupnp/miniupnp/pull/407#issuecomment-538803271,"Preparation for dropping elevated privileges after the initialization phase for the nftables implementation on Linux. See #405
Move the 8k allocation on the stack for debug-printing rules in debug builds into a separate function. This keeps the stack layout consistent between debug and non-debug builds, making it easier to diagnose some classes of bugs, e.g. stack corruptions, alignment problems, etc.","Thank you for cleaning up after me - sorry about that. The dangers of coding when tired. I'll get travis installed too.
Would it make sense to make those two options configurable by .conf, rather than at compile time?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,407,2019-10-05T07:09:34Z,2019-10-06T20:16:48Z,2019-10-07T18:42:34Z,CLOSED,False,198,403,6,https://github.com/paul-chambers,nft: Open a persistent connection to mnl/netlink socket at init_redirect(),4,[],https://github.com/miniupnp/miniupnp/pull/407,https://github.com/miniupnp,9,https://github.com/miniupnp/miniupnp/pull/407#issuecomment-539149729,"Preparation for dropping elevated privileges after the initialization phase for the nftables implementation on Linux. See #405
Move the 8k allocation on the stack for debug-printing rules in debug builds into a separate function. This keeps the stack layout consistent between debug and non-debug builds, making it easier to diagnose some classes of bugs, e.g. stack corruptions, alignment problems, etc.",There is no reason to build theses features for them being disabled.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,409,2019-10-27T05:28:34Z,2020-05-20T19:41:57Z,2020-05-20T19:41:57Z,CLOSED,False,1095,1003,6,https://github.com/paul-chambers,Refactor miniupnpd.c,13,[],https://github.com/miniupnp/miniupnp/pull/409,https://github.com/paul-chambers,1,https://github.com/miniupnp/miniupnp/pull/409,"Refactor of miniupnpd.c as a separate pull request, as requested.
The diff is a little 'noisy' with some systematic renaming/moving of some variables, sorry.
Switching from naked syslog() calls to wrapping them in macros enables the message to include the file & line number of the occurrence to be included in the massage. Also supports logging the backtrace if desired (I have this working for gcc, but will make a separate pull request for it later).","Refactor of miniupnpd.c as a separate pull request, as requested.
The diff is a little 'noisy' with some systematic renaming/moving of some variables, sorry.
Switching from naked syslog() calls to wrapping them in macros enables the message to include the file & line number of the occurrence to be included in the massage. Also supports logging the backtrace if desired (I have this working for gcc, but will make a separate pull request for it later).",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,410,2019-11-01T15:24:36Z,2019-12-13T09:59:34Z,2019-12-13T09:59:34Z,MERGED,True,11,0,1,https://github.com/kraj,Add OpenEmbedded cross compile case,1,[],https://github.com/miniupnp/miniupnp/pull/410,https://github.com/kraj,1,https://github.com/miniupnp/miniupnp/pull/410,"Upstream-Status: Pending
Signed-off-by: Khem Raj raj.khem@gmail.com","Upstream-Status: Pending
Signed-off-by: Khem Raj raj.khem@gmail.com",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,420,2020-02-17T04:27:13Z,2020-02-20T08:03:59Z,2020-02-20T13:14:44Z,MERGED,True,12,2,3,https://github.com/CodeforEvolution,Add Haiku Support,1,[],https://github.com/miniupnp/miniupnp/pull/420,https://github.com/CodeforEvolution,1,https://github.com/miniupnp/miniupnp/pull/420,"These changes shouldn't conflict with anything, and I don't expect the rename of atoui to atoui2 to affect other systems. (On Haiku, atoui was already defined in stdlib)","These changes shouldn't conflict with anything, and I don't expect the rename of atoui to atoui2 to affect other systems. (On Haiku, atoui was already defined in stdlib)",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,420,2020-02-17T04:27:13Z,2020-02-20T08:03:59Z,2020-02-20T13:14:44Z,MERGED,True,12,2,3,https://github.com/CodeforEvolution,Add Haiku Support,1,[],https://github.com/miniupnp/miniupnp/pull/420,https://github.com/CodeforEvolution,2,https://github.com/miniupnp/miniupnp/pull/420#issuecomment-588500477,"These changes shouldn't conflict with anything, and I don't expect the rename of atoui to atoui2 to affect other systems. (On Haiku, atoui was already defined in stdlib)","Alright, those changes are all functional and the tests work too! Also, @miniupnp, do you think you may increment the version on miniupnp soon? Your last release (2.1) was in 2018, I was just curious.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,420,2020-02-17T04:27:13Z,2020-02-20T08:03:59Z,2020-02-20T13:14:44Z,MERGED,True,12,2,3,https://github.com/CodeforEvolution,Add Haiku Support,1,[],https://github.com/miniupnp/miniupnp/pull/420,https://github.com/CodeforEvolution,3,https://github.com/miniupnp/miniupnp/pull/420#issuecomment-589016519,"These changes shouldn't conflict with anything, and I don't expect the rename of atoui to atoui2 to affect other systems. (On Haiku, atoui was already defined in stdlib)",Thank you!,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,423,2020-03-05T13:50:40Z,2020-03-05T21:21:06Z,2020-03-05T21:21:06Z,MERGED,True,2,2,2,https://github.com/jjangjong,Correct typo,1,[],https://github.com/miniupnp/miniupnp/pull/423,https://github.com/jjangjong,1,https://github.com/miniupnp/miniupnp/pull/423,It seems LDFLAFGS is a typo.,It seems LDFLAFGS is a typo.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,423,2020-03-05T13:50:40Z,2020-03-05T21:21:06Z,2020-03-05T21:21:06Z,MERGED,True,2,2,2,https://github.com/jjangjong,Correct typo,1,[],https://github.com/miniupnp/miniupnp/pull/423,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/423#issuecomment-595453443,It seems LDFLAFGS is a typo.,thanks !,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,424,2020-03-21T09:41:09Z,2020-03-21T21:55:04Z,2020-03-21T21:55:04Z,MERGED,True,60,1,2,https://github.com/NSBlink,fix build for macos,1,[],https://github.com/miniupnp/miniupnp/pull/424,https://github.com/NSBlink,1,https://github.com/miniupnp/miniupnp/pull/424,v4 in pfvar.h is changed to v4addr after xnu 4570.1.46,v4 in pfvar.h is changed to v4addr after xnu 4570.1.46,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,424,2020-03-21T09:41:09Z,2020-03-21T21:55:04Z,2020-03-21T21:55:04Z,MERGED,True,60,1,2,https://github.com/NSBlink,fix build for macos,1,[],https://github.com/miniupnp/miniupnp/pull/424,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/424#issuecomment-602110127,v4 in pfvar.h is changed to v4addr after xnu 4570.1.46,"@NSBlink thank you.
I'd never thought that someone was using miniupnpd on macOS ;)",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,425,2020-03-21T18:51:57Z,2020-04-06T10:03:29Z,2020-04-06T10:03:29Z,MERGED,True,1,1,1,https://github.com/iworkist,"fix: TypeError: a bytes-like object is required, not 'str'",1,[],https://github.com/miniupnp/miniupnp/pull/425,https://github.com/iworkist,1,https://github.com/miniupnp/miniupnp/pull/425,"fix: TypeError: a bytes-like object is required, not 'str'
*write function's parameter type is bytes.","fix: TypeError: a bytes-like object is required, not 'str'
*write function's parameter type is bytes.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,425,2020-03-21T18:51:57Z,2020-04-06T10:03:29Z,2020-04-06T10:03:29Z,MERGED,True,1,1,1,https://github.com/iworkist,"fix: TypeError: a bytes-like object is required, not 'str'",1,[],https://github.com/miniupnp/miniupnp/pull/425,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/425#issuecomment-602109382,"fix: TypeError: a bytes-like object is required, not 'str'
*write function's parameter type is bytes.",I'm no python expert. Is that different between python2 and python3 ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,425,2020-03-21T18:51:57Z,2020-04-06T10:03:29Z,2020-04-06T10:03:29Z,MERGED,True,1,1,1,https://github.com/iworkist,"fix: TypeError: a bytes-like object is required, not 'str'",1,[],https://github.com/miniupnp/miniupnp/pull/425,https://github.com/iworkist,3,https://github.com/miniupnp/miniupnp/pull/425#issuecomment-602143245,"fix: TypeError: a bytes-like object is required, not 'str'
*write function's parameter type is bytes.","I'm no python expert. Is that different between python2 and python3 ?

yes. (I'm not python expert too. but I found the reason.)
so, this commit would work in both python 2 and 3.
please check this.
https://docs.python.org/3.0/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit
Python 3.0 uses the concepts of text and (binary) data instead of Unicode strings and 8-bit strings. All text is Unicode; however encoded Unicode is represented as binary data. The type used to hold text is str, the type used to hold data is bytes. The biggest difference with the 2.x situation is that any attempt to mix text and data in Python 3.0 raises TypeError, whereas if you were to mix Unicode and 8-bit strings in Python 2.x, it would work if the 8-bit string happened to contain only 7-bit (ASCII) bytes, but you would get UnicodeDecodeError if it contained non-ASCII values. This value-specific behavior has caused numerous sad faces over the years.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,430,2020-03-28T03:09:36Z,2020-03-28T03:19:11Z,2020-03-28T03:19:11Z,CLOSED,False,41,33,1,https://github.com/yangfl,Makefile.linux: also search xtables,1,[],https://github.com/miniupnp/miniupnp/pull/430,https://github.com/yangfl,1,https://github.com/miniupnp/miniupnp/pull/430,"libiptc has been splited into xtables, lip4tc and lip6tc.
Ref: https://bugs.debian.org/946150","libiptc has been splited into xtables, lip4tc and lip6tc.
Ref: https://bugs.debian.org/946150",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,434,2020-04-02T16:42:32Z,2020-04-06T10:05:57Z,2020-04-06T10:05:57Z,MERGED,True,25,34,3,https://github.com/pali,Fix and simplify Makefile.mingw for miniupnpc,3,[],https://github.com/miniupnp/miniupnp/pull/434,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/434,"Ensure that all executables would have .exe Windows extension
Do not use dll subdirectory, so makefile would be slash agnostic
Define common targets to simplify makefile
Export required functions for listdevices executable

Fixes: #428","Ensure that all executables would have .exe Windows extension
Do not use dll subdirectory, so makefile would be slash agnostic
Define common targets to simplify makefile
Export required functions for listdevices executable

Fixes: #428",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,438,2020-04-20T04:22:06Z,2020-04-20T21:37:36Z,2020-04-20T21:37:36Z,MERGED,True,100,1,1,https://github.com/ptpt52,miniupnpd: typo fix and update snat rules,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/438,https://github.com/ptpt52,1,https://github.com/miniupnp/miniupnp/pull/438,"In delete_redirect_and_filter_rules() found a typo error
in update_portmapping() we have to update snat rules
and it is reasonable to ignore the failure if no snat rule found","In delete_redirect_and_filter_rules() found a typo error
in update_portmapping() we have to update snat rules
and it is reasonable to ignore the failure if no snat rule found",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,438,2020-04-20T04:22:06Z,2020-04-20T21:37:36Z,2020-04-20T21:37:36Z,MERGED,True,100,1,1,https://github.com/ptpt52,miniupnpd: typo fix and update snat rules,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/438,https://github.com/ptpt52,2,https://github.com/miniupnp/miniupnp/pull/438#issuecomment-616597458,"In delete_redirect_and_filter_rules() found a typo error
in update_portmapping() we have to update snat rules
and it is reasonable to ignore the failure if no snat rule found",ping @miniupnp,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,438,2020-04-20T04:22:06Z,2020-04-20T21:37:36Z,2020-04-20T21:37:36Z,MERGED,True,100,1,1,https://github.com/ptpt52,miniupnpd: typo fix and update snat rules,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/438,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/438#issuecomment-616666944,"In delete_redirect_and_filter_rules() found a typo error
in update_portmapping() we have to update snat rules
and it is reasonable to ignore the failure if no snat rule found","ping @miniupnp
let me a few hours to look at it !",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,439,2020-04-20T23:45:25Z,2020-04-21T16:38:40Z,2020-04-21T16:38:40Z,MERGED,True,7,11,1,https://github.com/ptpt52,miniupnpd: set SNAT to support bidirectional mapping,1,[],https://github.com/miniupnp/miniupnp/pull/439,https://github.com/ptpt52,1,https://github.com/miniupnp/miniupnp/pull/439,"we cannot expect that iport == eport on all the case in firewall.
detail here #413","we cannot expect that iport == eport on all the case in firewall.
detail here #413",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,441,2020-05-02T14:57:36Z,2020-05-06T23:07:14Z,2020-05-10T12:35:26Z,MERGED,True,364,457,22,https://github.com/miniupnp,update build,15,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/441,https://github.com/miniupnp,1,https://github.com/miniupnp/miniupnp/pull/441,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,442,2020-05-06T22:49:30Z,2020-05-10T13:22:11Z,2020-05-10T13:32:34Z,MERGED,True,18,8,1,https://github.com/miniupnp,Appveyor python 64b,4,[],https://github.com/miniupnp/miniupnp/pull/442,https://github.com/miniupnp,1,https://github.com/miniupnp/miniupnp/pull/442,fixes #159,fixes #159,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,443,2020-05-06T23:10:54Z,2020-05-10T18:02:34Z,2020-05-10T18:03:07Z,MERGED,True,85,12,10,https://github.com/miniupnp,Capabilities,7,[],https://github.com/miniupnp/miniupnp/pull/443,https://github.com/miniupnp,1,https://github.com/miniupnp/miniupnp/pull/443,"support linux capabilities (libcap or libcap-ng)
fixes #405","support linux capabilities (libcap or libcap-ng)
fixes #405",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,446,2020-05-08T14:42:54Z,2020-05-10T13:21:06Z,2020-05-10T13:21:06Z,MERGED,True,33,6,1,https://github.com/pali,STUN changes,5,[],https://github.com/miniupnp/miniupnp/pull/446,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/446,"This pull request fixes STUN debug/testing application and improve logging.
I tested this change with following STUN servers and it parsed all received fields:
stun.stunprotocol.org
stun.sipgate.net
stun.ekiga.net
stun.xten.com
stun.onesuite.com","This pull request fixes STUN debug/testing application and improve logging.
I tested this change with following STUN servers and it parsed all received fields:
stun.stunprotocol.org
stun.sipgate.net
stun.ekiga.net
stun.xten.com
stun.onesuite.com",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,446,2020-05-08T14:42:54Z,2020-05-10T13:21:06Z,2020-05-10T13:21:06Z,MERGED,True,33,6,1,https://github.com/pali,STUN changes,5,[],https://github.com/miniupnp/miniupnp/pull/446,https://github.com/pali,2,https://github.com/miniupnp/miniupnp/pull/446#issuecomment-626313449,"This pull request fixes STUN debug/testing application and improve logging.
I tested this change with following STUN servers and it parsed all received fields:
stun.stunprotocol.org
stun.sipgate.net
stun.ekiga.net
stun.xten.com
stun.onesuite.com","http://man7.org/linux/man-pages/man3/openlog.3.html

LOG_CONS - Write directly to the system console if there is an error while sending to the system logger.

So if application can connect to system logger it does not print message to console. And this is happening on my machine. All syslog() calls were put only into syslog and not to the stdout or console.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,446,2020-05-08T14:42:54Z,2020-05-10T13:21:06Z,2020-05-10T13:21:06Z,MERGED,True,33,6,1,https://github.com/pali,STUN changes,5,[],https://github.com/miniupnp/miniupnp/pull/446,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/446#issuecomment-626319908,"This pull request fixes STUN debug/testing application and improve logging.
I tested this change with following STUN servers and it parsed all received fields:
stun.stunprotocol.org
stun.sipgate.net
stun.ekiga.net
stun.xten.com
stun.onesuite.com",you are right ! it is LOG_PERROR which make it print to stderr,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,455,2020-05-21T00:26:38Z,2020-06-06T17:40:11Z,2021-05-22T21:46:25Z,MERGED,True,300,19,5,https://github.com/miniupnp,pf nat rules,4,"['miniupnpd', 'pf', 'BSD']",https://github.com/miniupnp/miniupnp/pull/455,https://github.com/miniupnp,1,https://github.com/miniupnp/miniupnp/pull/455,"still to be done :

error checking
removal of nat rule","still to be done :

error checking
removal of nat rule",True,"{'HEART': ['https://github.com/gingerbreadassassin', 'https://github.com/bsd-source'], 'THUMBS_UP': ['https://github.com/bsd-source']}"
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,455,2020-05-21T00:26:38Z,2020-06-06T17:40:11Z,2021-05-22T21:46:25Z,MERGED,True,300,19,5,https://github.com/miniupnp,pf nat rules,4,"['miniupnpd', 'pf', 'BSD']",https://github.com/miniupnp/miniupnp/pull/455,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/455#issuecomment-632505813,"still to be done :

error checking
removal of nat rule",see https://redmine.pfsense.org/issues/7727,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,455,2020-05-21T00:26:38Z,2020-06-06T17:40:11Z,2021-05-22T21:46:25Z,MERGED,True,300,19,5,https://github.com/miniupnp,pf nat rules,4,"['miniupnpd', 'pf', 'BSD']",https://github.com/miniupnp/miniupnp/pull/455,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/455#issuecomment-632506842,"still to be done :

error checking
removal of nat rule","nat quick on ep0 inet proto udp from 192.168.1.125 port = 1234 to any keep state label ""test description"" -> 42.42.42.42 port 12123

rdr pass quick on ep0 inet proto udp from any to any port = 12123 keep state label ""test description"" -> 192.168.1.125 port 1234",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,455,2020-05-21T00:26:38Z,2020-06-06T17:40:11Z,2021-05-22T21:46:25Z,MERGED,True,300,19,5,https://github.com/miniupnp,pf nat rules,4,"['miniupnpd', 'pf', 'BSD']",https://github.com/miniupnp/miniupnp/pull/455,https://github.com/jim-p,4,https://github.com/miniupnp/miniupnp/pull/455#issuecomment-637094206,"still to be done :

error checking
removal of nat rule","Copying my note here from the pfSense Redmine issue:
I don't have two identical consoles with identical online games to test, but just testing with a UPnP client I see the extra NAT rules for UDP and they appear to be correct, though I see two rules instead of the one I'd expect, but the labels are different:
miniupnpd rules/nat contents:
nat log quick on igb2 inet proto udp from 192.0.2.87 port = 62322 to any keep state label ""NAT-PMP 62322 udp"" rtable 0 -> 192.xxx.xxx.111 port 62322
nat log quick on igb2 inet proto udp from 192.0.2.87 port = 62322 to any keep state label ""192.0.2.87:62322"" rtable 0 -> 192.xxx.xxx.111 port 62322
rdr log quick on igb2 inet proto tcp from any to any port = 62322 keep state label ""192.0.2.87:62322"" rtable 0 -> 192.0.2.87 port 62322
rdr log quick on igb2 inet proto udp from any to any port = 62322 keep state label ""192.0.2.87:62322"" rtable 0 -> 192.0.2.87 port 62322
pass in log quick on igb2 inet proto tcp from any to 192.0.2.87 port = 62322 flags S/SA keep state label ""192.0.2.87:62322"" rtable 0
pass in log quick on igb2 inet proto udp from any to 192.0.2.87 port = 62322 flags S/SA keep state label ""192.0.2.87:62322"" rtable 0

The client opened both a TCP and UDP forward for the same port, and as expected only the UDP one was reflected in the outbound NAT rule. Not sure where the second one came from but since it's labeled NAT-PMP it's different from all the others.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,455,2020-05-21T00:26:38Z,2020-06-06T17:40:11Z,2021-05-22T21:46:25Z,MERGED,True,300,19,5,https://github.com/miniupnp,pf nat rules,4,"['miniupnpd', 'pf', 'BSD']",https://github.com/miniupnp/miniupnp/pull/455,https://github.com/miniupnp,5,https://github.com/miniupnp/miniupnp/pull/455#issuecomment-637122202,"still to be done :

error checking
removal of nat rule",@jim-p that is strange.. could you test again after disabling NAT-PMP ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,455,2020-05-21T00:26:38Z,2020-06-06T17:40:11Z,2021-05-22T21:46:25Z,MERGED,True,300,19,5,https://github.com/miniupnp,pf nat rules,4,"['miniupnpd', 'pf', 'BSD']",https://github.com/miniupnp/miniupnp/pull/455,https://github.com/jim-p,6,https://github.com/miniupnp/miniupnp/pull/455#issuecomment-638183643,"still to be done :

error checking
removal of nat rule","@jim-p that is strange.. could you test again after disabling NAT-PMP ?

With NAT-PMP disabled, I only see one of the outbound NAT (nat) rules.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,455,2020-05-21T00:26:38Z,2020-06-06T17:40:11Z,2021-05-22T21:46:25Z,MERGED,True,300,19,5,https://github.com/miniupnp,pf nat rules,4,"['miniupnpd', 'pf', 'BSD']",https://github.com/miniupnp/miniupnp/pull/455,https://github.com/miniupnp,7,https://github.com/miniupnp/miniupnp/pull/455#issuecomment-638459867,"still to be done :

error checking
removal of nat rule","it looks OK, but then there is an issue with NAT-PMP",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,455,2020-05-21T00:26:38Z,2020-06-06T17:40:11Z,2021-05-22T21:46:25Z,MERGED,True,300,19,5,https://github.com/miniupnp,pf nat rules,4,"['miniupnpd', 'pf', 'BSD']",https://github.com/miniupnp/miniupnp/pull/455,https://github.com/miniupnp,8,https://github.com/miniupnp/miniupnp/pull/455#issuecomment-640094431,"still to be done :

error checking
removal of nat rule","I'm going to merge, I'll fix if I have feedback",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,455,2020-05-21T00:26:38Z,2020-06-06T17:40:11Z,2021-05-22T21:46:25Z,MERGED,True,300,19,5,https://github.com/miniupnp,pf nat rules,4,"['miniupnpd', 'pf', 'BSD']",https://github.com/miniupnp/miniupnp/pull/455,https://github.com/bsd-source,9,https://github.com/miniupnp/miniupnp/pull/455#issuecomment-703059756,"still to be done :

error checking
removal of nat rule","I would like to provide the information you need to help make this work properly. I've established a minimal basic pfSense 2.5.0 snapshot setup strictly using IPv4. I'm using miniupnpd 2.2.0-RC1 on pfSense. There are 2 Xbox consoles and a Laptop connected to my LAN network and nothing else.
cable modem (dhcp dynamic WAN address) --> pfSense (10.200.200.1) --> wireless access point (10.200.200.2)
Xbox One: Static IP 10.200.200.101
Xbox One: Static IP 10.200.200.102
Laptop: Static IP 10.200.200.103
I tested this and I'm able to obtain open NAT for Xbox Live on both consoles. But it's required that I setup outbound static-ports for both Xbox's otherwise I don't get an open NAT for Xbox Live on either console.
I need to know the exact tcpdump command you want me to use on pfSense so that I can capture the information you need or any other information you want me to collect so I can provide it to you. That way you can look at the information using wireshark or another program determine what is going on. I know this has been a sore subject since you've had some rude interactions with a select individual. Hopefully you can find the motivation to ignore the past and look forward to helping get miniupnpd working properly with FreeBSD based firewalls.
Please let me know. And that you for a great project.
bsd-source",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,455,2020-05-21T00:26:38Z,2020-06-06T17:40:11Z,2021-05-22T21:46:25Z,MERGED,True,300,19,5,https://github.com/miniupnp,pf nat rules,4,"['miniupnpd', 'pf', 'BSD']",https://github.com/miniupnp/miniupnp/pull/455,https://github.com/miniupnp,10,https://github.com/miniupnp/miniupnp/pull/455#issuecomment-703873338,"still to be done :

error checking
removal of nat rule","@bsd-source
could you be more explicit on what you need to setup manually for both XBOXs to report open NAT ?
please provide dump of pf rules (pfctl -s rules / pfctl -s nat)
and also the output of upnpc -l run from the laptop",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,455,2020-05-21T00:26:38Z,2020-06-06T17:40:11Z,2021-05-22T21:46:25Z,MERGED,True,300,19,5,https://github.com/miniupnp,pf nat rules,4,"['miniupnpd', 'pf', 'BSD']",https://github.com/miniupnp/miniupnp/pull/455,https://github.com/bsd-source,11,https://github.com/miniupnp/miniupnp/pull/455#issuecomment-705239178,"still to be done :

error checking
removal of nat rule","could you be more explicit on what you need to setup manually for both XBOXs to report open NAT ?



pfsense - create static dhcpd reservervation for Xbox 1 (10.200.200.101) and Xbox 2 (10.200.200.102).


pfsense - create one outbound NAT rule with static-ports for IP 10.200.200.101 and one for 10.200.200.102.


pfsense - enable miniupnpd and create 2 miniupnpd permission rules:
allow 0-65535 10.200.200.101/32 0-65535
allow 0-65535 10.200.200.102/32 0-65535


Xboxes - setup Xbox 1 with static IP address 10.200.200.101. set Xbox 2 with static IP address 10.200.200.101.


Xboxes - setup Xbox 1 with alternate static port 56450. set Xbox 2 with alternate static port 53063. (Note: In 2017 Microsoft made it possible on Xboxes to create and alternate port from the original default port).


The above settings will allow both my Xboxes to have open NAT for Xbox LIve services. Although, having an open NAT for Xbox Live services doesn't have anything to do with having and open NAT for gaming.

please provide dump of pf rules (pfctl -s rules / pfctl -s nat)
and also the output of upnpc -l run from the laptop

I'm going to email you a zip file containing the following:

pfctl -s rules output
pfctl -s nat ouput
pfSsh.php playback pfanchordrill output
upnpc -l output
miniupnpd debug mode output
miniupnpd.conf file
my exported pfsense configuration file
2 images showing both of my Xbox settings

The information I'm sending is without static-ports set in pfsense and then with static-ports set in pfsense. I tested both ways and provided the all the above information for both tests. I don't want to provide the informatoin here as I would need to redact too much information.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,455,2020-05-21T00:26:38Z,2020-06-06T17:40:11Z,2021-05-22T21:46:25Z,MERGED,True,300,19,5,https://github.com/miniupnp,pf nat rules,4,"['miniupnpd', 'pf', 'BSD']",https://github.com/miniupnp/miniupnp/pull/455,https://github.com/rchenzheng,12,https://github.com/miniupnp/miniupnp/pull/455#issuecomment-846467358,"still to be done :

error checking
removal of nat rule","could you be more explicit on what you need to setup manually for both XBOXs to report open NAT ?



pfsense - create static dhcpd reservervation for Xbox 1 (10.200.200.101) and Xbox 2 (10.200.200.102).


pfsense - create one outbound NAT rule with static-ports for IP 10.200.200.101 and one for 10.200.200.102.


pfsense - enable miniupnpd and create 2 miniupnpd permission rules:
    allow 0-65535 10.200.200.101/32 0-65535

    allow 0-65535 10.200.200.102/32 0-65535



Xboxes - setup Xbox 1 with static IP address 10.200.200.101. set Xbox 2 with static IP address 10.200.200.101.


Xboxes - setup Xbox 1 with alternate static port 56450. set Xbox 2 with alternate static port 53063. (Note: In 2017 Microsoft made it possible on Xboxes to create and alternate port from the original default port).


The above settings will allow both my Xboxes to have open NAT for Xbox LIve services. Although, having an open NAT for Xbox Live services doesn't have anything to do with having and open NAT for gaming.

please provide dump of pf rules (pfctl -s rules / pfctl -s nat)


and also the output of upnpc -l run from the laptop

I'm going to email you a zip file containing the following:


pfctl -s rules output


pfctl -s nat ouput


pfSsh.php playback pfanchordrill output


upnpc -l output


miniupnpd debug mode output


miniupnpd.conf file


my exported pfsense configuration file


2 images showing both of my Xbox settings


The information I'm sending is without static-ports set in pfsense and then with static-ports set in pfsense. I tested both ways and provided the all the above information for both tests. I don't want to provide the informatoin here as I would need to redact too much information.

I tried this but in PC, still moderate NAT",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,469,2020-06-02T08:09:29Z,2020-06-02T22:31:39Z,2020-06-03T22:05:17Z,MERGED,True,35,37,3,https://github.com/miniupnp,fixes in netfilter_nft,2,[],https://github.com/miniupnp/miniupnp/pull/469,https://github.com/miniupnp,1,https://github.com/miniupnp/miniupnp/pull/469,fixes #462,fixes #462,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,472,2020-06-05T20:41:59Z,2020-06-06T17:35:35Z,2020-06-06T20:48:41Z,MERGED,True,17,1,2,https://github.com/miniupnp,miniupnpd: fix processing of v4 M-SEARCH received on v6 socket,1,[],https://github.com/miniupnp/miniupnp/pull/472,https://github.com/miniupnp,1,https://github.com/miniupnp/miniupnp/pull/472,"So we don't answer with the v6 LOCATION to v4 clients anymore !
should fix #467
see #461","So we don't answer with the v6 LOCATION to v4 clients anymore !
should fix #467
see #461",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,472,2020-06-05T20:41:59Z,2020-06-06T17:35:35Z,2020-06-06T20:48:41Z,MERGED,True,17,1,2,https://github.com/miniupnp,miniupnpd: fix processing of v4 M-SEARCH received on v6 socket,1,[],https://github.com/miniupnp/miniupnp/pull/472,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/472#issuecomment-639805054,"So we don't answer with the v6 LOCATION to v4 clients anymore !
should fix #467
see #461",@emojifreak  could you test this branch with ipv6 enabled everywhere ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,472,2020-06-05T20:41:59Z,2020-06-06T17:35:35Z,2020-06-06T20:48:41Z,MERGED,True,17,1,2,https://github.com/miniupnp,miniupnpd: fix processing of v4 M-SEARCH received on v6 socket,1,[],https://github.com/miniupnp/miniupnp/pull/472,https://github.com/emojifreak,3,https://github.com/miniupnp/miniupnp/pull/472#issuecomment-640007068,"So we don't answer with the v6 LOCATION to v4 clients anymore !
should fix #467
see #461","I used miniupnpd and upnpc-static from -DMINIUPNPD_GIT_REF=\""issue-467-0af141d\"". I used secure_mode=yes and --ipv6. All network interfaces  have both v4 and v6 addresses in every machine in my network. upnpc-static -a IPv4address port1 port2 TCP worked fine even with -m 2400:4050:2ba1:ac00:228:f8ff:fe4a:37bf, but I had the following issue. I wonder if it is expected or not
$  ./upnpc-static -A  2400:4050:2ba1:ac00:99:f0ae:8600:2c00 65218  2400:4050:2ba1:ac00:228:f8ff:fe4a:37bf 65218 TCP 1800
upnpc : miniupnpc library test client, version 2.1.
 (c) 2005-2020 Thomas Bernard.
Go to http://miniupnp.free.fr/ or https://miniupnp.tuxfamily.org/
for more information.
List of UPNP devices found on the network :
 desc: http://192.168.1.2:43081/rootDesc.xml
 st: urn:schemas-upnp-org:device:InternetGatewayDevice:1

Found valid IGD : http://192.168.1.2:43081/ctl/IPConn
Local LAN ip address : 192.168.1.75
AddPinhole([2400:4050:2ba1:ac00:99:f0ae:8600:2c00]:65218 -> [2400:4050:2ba1:ac00:228:f8ff:fe4a:37bf]:65218) failed with code 606 (Action not authorized)

$  ./upnpc-static -6 -A  2400:4050:2ba1:ac00:99:f0ae:8600:2c00 65218  2400:4050:2ba1:ac00:228:f8ff:fe4a:37bf 65218 TCP 1800
upnpc : miniupnpc library test client, version 2.1.
 (c) 2005-2020 Thomas Bernard.
Go to http://miniupnp.free.fr/ or https://miniupnp.tuxfamily.org/
for more information.
List of UPNP devices found on the network :
 desc: http://[2400:4050:2ba1:ac00:99:f0ae:8600:2c00]:43081/rootDesc.xml
 st: urn:schemas-upnp-org:device:InternetGatewayDevice:1

Found valid IGD : http://[2400:4050:2ba1:ac00:99:f0ae:8600:2c00]:43081/ctl/IPConn
Local LAN ip address : 2400:4050:2ba1:ac00:228:f8ff:fe4a:37bf
AddPinhole: ([2400:4050:2ba1:ac00:99:f0ae:8600:2c00]:65218 -> [2400:4050:2ba1:ac00:228:f8ff:fe4a:37bf]:65218) / Pinhole ID = 1
$",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,472,2020-06-05T20:41:59Z,2020-06-06T17:35:35Z,2020-06-06T20:48:41Z,MERGED,True,17,1,2,https://github.com/miniupnp,miniupnpd: fix processing of v4 M-SEARCH received on v6 socket,1,[],https://github.com/miniupnp/miniupnp/pull/472,https://github.com/miniupnp,4,https://github.com/miniupnp/miniupnp/pull/472#issuecomment-640093656,"So we don't answer with the v6 LOCATION to v4 clients anymore !
should fix #467
see #461","it looks like everything is OK now.
it is expected that you may not be allowed to call AddPinhole from another IP. use explicitly the -6 option the use the IPv6",True,{'THUMBS_UP': ['https://github.com/emojifreak']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,473,2020-06-06T20:07:35Z,2020-09-01T22:01:28Z,2020-09-24T08:15:44Z,MERGED,True,80,22,5,https://github.com/miniupnp,minissdpd improvements ,4,['minissdpd'],https://github.com/miniupnp/miniupnp/pull/473,https://github.com/miniupnp,1,https://github.com/miniupnp/miniupnp/pull/473,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,473,2020-06-06T20:07:35Z,2020-09-01T22:01:28Z,2020-09-24T08:15:44Z,MERGED,True,80,22,5,https://github.com/miniupnp,minissdpd improvements ,4,['minissdpd'],https://github.com/miniupnp/miniupnp/pull/473,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/473#issuecomment-640113872,,@hobbieman could you test if your issue is fixed with this branch ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,473,2020-06-06T20:07:35Z,2020-09-01T22:01:28Z,2020-09-24T08:15:44Z,MERGED,True,80,22,5,https://github.com/miniupnp,minissdpd improvements ,4,['minissdpd'],https://github.com/miniupnp/miniupnp/pull/473,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/473#issuecomment-640405812,,"@emojifreak hello could you test this branch of minissdpd ?
You'll need to ""patch"" config.h to enable the ""no background, no pid file"" build",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,473,2020-06-06T20:07:35Z,2020-09-01T22:01:28Z,2020-09-24T08:15:44Z,MERGED,True,80,22,5,https://github.com/miniupnp,minissdpd improvements ,4,['minissdpd'],https://github.com/miniupnp/miniupnp/pull/473,https://github.com/emojifreak,4,https://github.com/miniupnp/miniupnp/pull/473#issuecomment-640496687,,"@emojifreak hello could you test this branch of minissdpd ?
You'll need to ""patch"" config.h to enable the ""no background, no pid file"" build

I have run the branch  issue-464 for past two hours, and I have not seen #414 nor #470.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,473,2020-06-06T20:07:35Z,2020-09-01T22:01:28Z,2020-09-24T08:15:44Z,MERGED,True,80,22,5,https://github.com/miniupnp,minissdpd improvements ,4,['minissdpd'],https://github.com/miniupnp/miniupnp/pull/473,https://github.com/emojifreak,5,https://github.com/miniupnp/miniupnp/pull/473#issuecomment-640503239,,"Sorry, I forgot adding -6, and with -6 I still see ssdpDiscover: sendto: Cannot assign requested address.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,473,2020-06-06T20:07:35Z,2020-09-01T22:01:28Z,2020-09-24T08:15:44Z,MERGED,True,80,22,5,https://github.com/miniupnp,minissdpd improvements ,4,['minissdpd'],https://github.com/miniupnp/miniupnp/pull/473,https://github.com/emojifreak,6,https://github.com/miniupnp/miniupnp/pull/473#issuecomment-640522062,,"With -6, I have also seen Jun 08 19:35:13 router1 minissdpd[23975]: setsockopt(udp, IPV6_JOIN_GROUP)(FF02::C, myve1): Address already in use. @miniupnp",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,473,2020-06-06T20:07:35Z,2020-09-01T22:01:28Z,2020-09-24T08:15:44Z,MERGED,True,80,22,5,https://github.com/miniupnp,minissdpd improvements ,4,['minissdpd'],https://github.com/miniupnp/miniupnp/pull/473,https://github.com/miniupnp,7,https://github.com/miniupnp/miniupnp/pull/473#issuecomment-640540066,,"With -6, I have also seen Jun 08 19:35:13 router1 minissdpd[23975]: setsockopt(udp, IPV6_JOIN_GROUP)(FF02::C, myve1): Address already in use. @miniupnp

the interface myve1 probably doesn't support IPv6 multicast",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,473,2020-06-06T20:07:35Z,2020-09-01T22:01:28Z,2020-09-24T08:15:44Z,MERGED,True,80,22,5,https://github.com/miniupnp,minissdpd improvements ,4,['minissdpd'],https://github.com/miniupnp/miniupnp/pull/473,https://github.com/hobbieman,8,https://github.com/miniupnp/miniupnp/pull/473#issuecomment-673584455,,"Hi. Sorry I had not checked on this thread.  I can test #473 as requested, but I need instructions on exactly how to get an executable that includes that fix.  I assume I have to do a pull of the code and compile it locally.  So, I just need help figuring out how to pull the code that includes #473",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,473,2020-06-06T20:07:35Z,2020-09-01T22:01:28Z,2020-09-24T08:15:44Z,MERGED,True,80,22,5,https://github.com/miniupnp,minissdpd improvements ,4,['minissdpd'],https://github.com/miniupnp/miniupnp/pull/473,https://github.com/bsd-source,9,https://github.com/miniupnp/miniupnp/pull/473#issuecomment-674470069,,hobbieman create a fork of the miniupnp repository. make your code changes and commit the changes it to your own forked repository. you can git pull the information or download the source code as zip file.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,473,2020-06-06T20:07:35Z,2020-09-01T22:01:28Z,2020-09-24T08:15:44Z,MERGED,True,80,22,5,https://github.com/miniupnp,minissdpd improvements ,4,['minissdpd'],https://github.com/miniupnp/miniupnp/pull/473,https://github.com/miniupnp,10,https://github.com/miniupnp/miniupnp/pull/473#issuecomment-678651969,,"Hi. Sorry I had not checked on this thread. I can test #473 as requested, but I need instructions on exactly how to get an executable that includes that fix. I assume I have to do a pull of the code and compile it locally. So, I just need help figuring out how to pull the code that includes #473

$ git clone https://github.com/miniupnp/miniupnp.git
$ cd miniupnp
$ git checkout issue-464

(you have to checkout the branch issue-464 )",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,473,2020-06-06T20:07:35Z,2020-09-01T22:01:28Z,2020-09-24T08:15:44Z,MERGED,True,80,22,5,https://github.com/miniupnp,minissdpd improvements ,4,['minissdpd'],https://github.com/miniupnp/miniupnp/pull/473,https://github.com/hobbieman,11,https://github.com/miniupnp/miniupnp/pull/473#issuecomment-683959693,,"@miniupnp : Thanks for the detailed instructions!  Indeed I had not checked out the correct branch of code.
I have done that now, compiled and tested and can confirm that minissdpd behaves correctly when the ""-i"" option is passed.  Specifically, it only sends the SSDP SEARCH on the given interface and it recognizes all the NOTIFY responses from the devices.  Thanks!",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,475,2020-06-07T18:13:54Z,2020-06-11T12:53:39Z,2020-06-20T15:04:03Z,MERGED,True,311,249,4,https://github.com/miniupnp,improve netfilter_nft code,13,[],https://github.com/miniupnp/miniupnp/pull/475,https://github.com/miniupnp,1,https://github.com/miniupnp/miniupnp/pull/475,should fix #474,should fix #474,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,475,2020-06-07T18:13:54Z,2020-06-11T12:53:39Z,2020-06-20T15:04:03Z,MERGED,True,311,249,4,https://github.com/miniupnp,improve netfilter_nft code,13,[],https://github.com/miniupnp/miniupnp/pull/475,https://github.com/emojifreak,2,https://github.com/miniupnp/miniupnp/pull/475#issuecomment-640418510,should fix #474,"Thank you. I did not observe #474 with the branch issue-474. LSAN error remains as below:
Jun 08 16:18:34 router1 miniupnpd[22922]: shutting down MiniUPnPd
Jun 08 16:18:34 router1 systemd[1]: Stopping UPnP Internet Gateway Device Daemon...
Jun 08 16:18:34 router1 miniupnpd[22922]: =================================================================
Jun 08 16:18:34 router1 miniupnpd[22922]: ==22922==ERROR: LeakSanitizer: detected memory leaks
Jun 08 16:18:34 router1 miniupnpd[22922]: Direct leak of 32 byte(s) in 2 object(s) allocated from:
Jun 08 16:18:34 router1 miniupnpd[22922]:     #0 0x562f2163d0e2 in calloc (/usr/sbin/miniupnpd+0xf80e2)
Jun 08 16:18:34 router1 miniupnpd[22922]:     #1 0x7ff802c57c62 in nftnl_expr_iter_create (/lib/x86_64-linux-gnu/libnftnl.so.11+0x10c62)
Jun 08 16:18:34 router1 miniupnpd[22922]:     #2 0x7ff802c418ac in mnl_cb_run (/lib/x86_64-linux-gnu/libmnl.so.0+0x28ac)
Jun 08 16:18:34 router1 miniupnpd[22922]: SUMMARY: AddressSanitizer: 32 byte(s) leaked in 2 allocation(s).

When miniupnpd is compiled, I observe the following warnings by clang-10:
clang-10 -g -fstandalone-debug -ffp-model=strict -fvisibility=hidden -fsanitize=address,undefined,cfi -fno-common -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-address-use-after-scope -flto -fsanitize-recover=all -c -Os -fno-strict-aliasing -fno-common -fstack-protector -fPIE -D_FORTIFY_SOURCE=2 -Wall -Wextra -Wstrict-prototypes -Wdeclaration-after-statement  -D_GNU_SOURCE -I. -DMINIUPNPD_GIT_REF=\""issue-474-5f66d18\"" netfilter_nft/nftpinhole.c -o nftpinhole.o
netfilter_nft/nftpinhole.c:214:7: warning: unused variable 'iaddr'
      [-Wunused-variable]
        char iaddr[INET6_ADDRSTRLEN];
             ^
1 warning generated.

clang-10 -g -fstandalone-debug -ffp-model=strict -fvisibility=hidden -fsanitize=address,undefined,cfi -fno-common -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize-address-use-after-scope -flto -fsanitize-recover=all -c -Os -fno-strict-aliasing -fno-common -fstack-protector -fPIE -D_FORTIFY_SOURCE=2 -Wall -Wextra -Wstrict-prototypes -Wdeclaration-after-statement  -D_GNU_SOURCE -I. -DMINIUPNPD_GIT_REF=\""issue-474-5f66d18\"" netfilter_nft/nftnlrdr_misc.c -o nftnlrdr_misc.o
netfilter_nft/nftnlrdr_misc.c:685:2: warning: 'nftnl_rule_set' is deprecated
      [-Wdeprecated-declarations]
        nftnl_rule_set(rule, NFTNL_RULE_TABLE, table);
        ^
/usr/include/libnftnl/rule.h:38:90: note: 'nftnl_rule_set' has been explicitly
      marked deprecated here
  ...nftnl_rule *r, uint16_t attr, const void *data) __attribute__((deprecat...
                                                                    ^
netfilter_nft/nftnlrdr_misc.c:686:2: warning: 'nftnl_rule_set' is deprecated
      [-Wdeprecated-declarations]
        nftnl_rule_set(rule, NFTNL_RULE_CHAIN, chain);
        ^
/usr/include/libnftnl/rule.h:38:90: note: 'nftnl_rule_set' has been explicitly
      marked deprecated here
  ...nftnl_rule *r, uint16_t attr, const void *data) __attribute__((deprecat...
                                                                    ^
netfilter_nft/nftnlrdr_misc.c:861:2: warning: 'nftnl_rule_set' is deprecated
      [-Wdeprecated-declarations]
        nftnl_rule_set(r, NFTNL_RULE_TABLE, nft_table);
        ^
/usr/include/libnftnl/rule.h:38:90: note: 'nftnl_rule_set' has been explicitly
      marked deprecated here
  ...nftnl_rule *r, uint16_t attr, const void *data) __attribute__((deprecat...
                                                                    ^
netfilter_nft/nftnlrdr_misc.c:862:2: warning: 'nftnl_rule_set' is deprecated
      [-Wdeprecated-declarations]
        nftnl_rule_set(r, NFTNL_RULE_CHAIN, nft_postrouting_chain);
        ^
/usr/include/libnftnl/rule.h:38:90: note: 'nftnl_rule_set' has been explicitly
      marked deprecated here
  ...nftnl_rule *r, uint16_t attr, const void *data) __attribute__((deprecat...
                                                                    ^
netfilter_nft/nftnlrdr_misc.c:939:2: warning: 'nftnl_rule_set' is deprecated
      [-Wdeprecated-declarations]
        nftnl_rule_set(r, NFTNL_RULE_TABLE, nft_table);
        ^
/usr/include/libnftnl/rule.h:38:90: note: 'nftnl_rule_set' has been explicitly
      marked deprecated here
  ...nftnl_rule *r, uint16_t attr, const void *data) __attribute__((deprecat...
                                                                    ^
netfilter_nft/nftnlrdr_misc.c:940:2: warning: 'nftnl_rule_set' is deprecated
      [-Wdeprecated-declarations]
        nftnl_rule_set(r, NFTNL_RULE_CHAIN, nft_prerouting_chain);
        ^
/usr/include/libnftnl/rule.h:38:90: note: 'nftnl_rule_set' has been explicitly
      marked deprecated here
  ...nftnl_rule *r, uint16_t attr, const void *data) __attribute__((deprecat...
                                                                    ^
netfilter_nft/nftnlrdr_misc.c:1084:2: warning: 'nftnl_rule_set' is deprecated
      [-Wdeprecated-declarations]
        nftnl_rule_set(r, NFTNL_RULE_TABLE, nft_table);
        ^
/usr/include/libnftnl/rule.h:38:90: note: 'nftnl_rule_set' has been explicitly
      marked deprecated here
  ...nftnl_rule *r, uint16_t attr, const void *data) __attribute__((deprecat...
                                                                    ^
netfilter_nft/nftnlrdr_misc.c:1085:2: warning: 'nftnl_rule_set' is deprecated
      [-Wdeprecated-declarations]
        nftnl_rule_set(r, NFTNL_RULE_CHAIN, nft_forward_chain);
        ^
/usr/include/libnftnl/rule.h:38:90: note: 'nftnl_rule_set' has been explicitly
      marked deprecated here
  ...nftnl_rule *r, uint16_t attr, const void *data) __attribute__((deprecat...
                                                                    ^
netfilter_nft/nftnlrdr_misc.c:1142:2: warning: 'nftnl_rule_set' is deprecated
      [-Wdeprecated-declarations]
        nftnl_rule_set(r, NFTNL_RULE_TABLE, rule->table);
        ^
/usr/include/libnftnl/rule.h:38:90: note: 'nftnl_rule_set' has been explicitly
      marked deprecated here
  ...nftnl_rule *r, uint16_t attr, const void *data) __attribute__((deprecat...
                                                                    ^
netfilter_nft/nftnlrdr_misc.c:1143:2: warning: 'nftnl_rule_set' is deprecated
      [-Wdeprecated-declarations]
        nftnl_rule_set(r, NFTNL_RULE_CHAIN, rule->chain);
        ^
/usr/include/libnftnl/rule.h:38:90: note: 'nftnl_rule_set' has been explicitly
      marked deprecated here
  ...nftnl_rule *r, uint16_t attr, const void *data) __attribute__((deprecat...
                                                                    ^
netfilter_nft/nftnlrdr_misc.c:1267:3: warning: 'nftnl_chain_set' is deprecated
      [-Wdeprecated-declarations]
                nftnl_chain_set(chain, NFTNL_CHAIN_TABLE, table);
                ^
/usr/include/libnftnl/chain.h:42:93: note: 'nftnl_chain_set' has been
      explicitly marked deprecated here
  ...*t, uint16_t attr, const void *data) __attribute__((deprecated));
                                                         ^
netfilter_nft/nftnlrdr_misc.c:1268:3: warning: 'nftnl_chain_set' is deprecated
      [-Wdeprecated-declarations]
                nftnl_chain_set(chain, NFTNL_CHAIN_NAME, name);
                ^
/usr/include/libnftnl/chain.h:42:93: note: 'nftnl_chain_set' has been
      explicitly marked deprecated here
  ...*t, uint16_t attr, const void *data) __attribute__((deprecated));
                                                         ^
12 warnings generated.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,475,2020-06-07T18:13:54Z,2020-06-11T12:53:39Z,2020-06-20T15:04:03Z,MERGED,True,311,249,4,https://github.com/miniupnp,improve netfilter_nft code,13,[],https://github.com/miniupnp/miniupnp/pull/475,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/475#issuecomment-641888167,should fix #474,@emojifreak could you check if the memory leak is fixed by 92ec4d0 ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,475,2020-06-07T18:13:54Z,2020-06-11T12:53:39Z,2020-06-20T15:04:03Z,MERGED,True,311,249,4,https://github.com/miniupnp,improve netfilter_nft code,13,[],https://github.com/miniupnp/miniupnp/pull/475,https://github.com/miniupnp,4,https://github.com/miniupnp/miniupnp/pull/475#issuecomment-641896051,should fix #474,@emojifreak the deprecations should also be fixed with 86b6aad,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,475,2020-06-07T18:13:54Z,2020-06-11T12:53:39Z,2020-06-20T15:04:03Z,MERGED,True,311,249,4,https://github.com/miniupnp,improve netfilter_nft code,13,[],https://github.com/miniupnp/miniupnp/pull/475,https://github.com/emojifreak,5,https://github.com/miniupnp/miniupnp/pull/475#issuecomment-642343856,should fix #474,"@miniupnp  Yes, the two issues have been fixed. I have not seen the deprecated function errors nor LSAN errors with -DMINIUPNPD_GIT_REF=\""issue-474-86b6aad\""",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,478,2020-06-10T17:40:02Z,2020-06-10T22:00:03Z,2020-06-10T22:00:04Z,MERGED,True,4,5,1,https://github.com/rbgarga,Fix manpage installation on BSD,1,[],https://github.com/miniupnp/miniupnp/pull/478,https://github.com/rbgarga,1,https://github.com/miniupnp/miniupnp/pull/478,"Respect MANPREFIX when it's set, when not, use PREFIX","Respect MANPREFIX when it's set, when not, use PREFIX",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,479,2020-06-10T17:40:43Z,2020-06-10T19:09:58Z,2020-06-10T19:09:58Z,CLOSED,False,1,1,1,https://github.com/rbgarga,Use LDFLAGS env var,1,[],https://github.com/miniupnp/miniupnp/pull/479,https://github.com/rbgarga,1,https://github.com/miniupnp/miniupnp/pull/479,"When setting LIBS variable, add LDFLAGS content to it.  It's being used on FreeBSD ports for a long time now","When setting LIBS variable, add LDFLAGS content to it.  It's being used on FreeBSD ports for a long time now",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,479,2020-06-10T17:40:43Z,2020-06-10T19:09:58Z,2020-06-10T19:09:58Z,CLOSED,False,1,1,1,https://github.com/rbgarga,Use LDFLAGS env var,1,[],https://github.com/miniupnp/miniupnp/pull/479,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/479#issuecomment-642170067,"When setting LIBS variable, add LDFLAGS content to it.  It's being used on FreeBSD ports for a long time now","what's the point ?
LDFLAGS is already used there :
miniupnpd: $(ALLOBJS)
        $(CC) $(LDFLAGS) -o $@ $(ALLOBJS) $(LIBS)",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,479,2020-06-10T17:40:43Z,2020-06-10T19:09:58Z,2020-06-10T19:09:58Z,CLOSED,False,1,1,1,https://github.com/rbgarga,Use LDFLAGS env var,1,[],https://github.com/miniupnp/miniupnp/pull/479,https://github.com/rbgarga,3,https://github.com/miniupnp/miniupnp/pull/479#issuecomment-642202204,"When setting LIBS variable, add LDFLAGS content to it.  It's being used on FreeBSD ports for a long time now","You are right, I was comparing with a different version of this file. Closing it",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,484,2020-07-12T11:51:22Z,2020-07-12T17:18:16Z,2020-07-12T17:18:16Z,MERGED,True,1,1,1,https://github.com/pali,getifaddr.c: Fix mask for RFC7534 Direct Delegation AS112 Service,1,[],https://github.com/miniupnp/miniupnp/pull/484,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/484,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,485,2020-07-18T00:31:51Z,2020-09-24T08:14:49Z,2020-09-24T08:14:49Z,MERGED,True,46,15,1,https://github.com/pali,Fix check for reserved IP addresses in miniupnpc,1,[],https://github.com/miniupnp/miniupnp/pull/485,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/485,"Check for 0.0.0.0, 192.168., 10. and 172. is not enough. Nowadays routers
behind NAT are getting IP address from shared CG-NAT space 100.64.0.0/10.
This patch adjust miniupnpc to check for all reserved IPv4 addresses.","Check for 0.0.0.0, 192.168., 10. and 172. is not enough. Nowadays routers
behind NAT are getting IP address from shared CG-NAT space 100.64.0.0/10.
This patch adjust miniupnpc to check for all reserved IPv4 addresses.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,485,2020-07-18T00:31:51Z,2020-09-24T08:14:49Z,2020-09-24T08:14:49Z,MERGED,True,46,15,1,https://github.com/pali,Fix check for reserved IP addresses in miniupnpc,1,[],https://github.com/miniupnp/miniupnp/pull/485,https://github.com/pali,2,https://github.com/miniupnp/miniupnp/pull/485#issuecomment-678749339,"Check for 0.0.0.0, 192.168., 10. and 172. is not enough. Nowadays routers
behind NAT are getting IP address from shared CG-NAT space 100.64.0.0/10.
This patch adjust miniupnpc to check for all reserved IPv4 addresses.",@miniupnp: Could you please review this pull request?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,486,2020-07-21T21:46:39Z,2021-02-26T14:41:11Z,2021-02-26T14:49:52Z,MERGED,True,6,1,1,https://github.com/hrydgard,Fix Windows UWP build.,1,"['miniupnpc', 'windows']",https://github.com/miniupnp/miniupnp/pull/486,https://github.com/hrydgard,1,https://github.com/miniupnp/miniupnp/pull/486,"Horrifying hack to get it linking on Windows UWP.
Seems the declaration of in6addr_any exists in Windows UWP headers but not the definition so it fails to link. So I substitute with an equivalent definition.","Horrifying hack to get it linking on Windows UWP.
Seems the declaration of in6addr_any exists in Windows UWP headers but not the definition so it fails to link. So I substitute with an equivalent definition.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,486,2020-07-21T21:46:39Z,2021-02-26T14:41:11Z,2021-02-26T14:49:52Z,MERGED,True,6,1,1,https://github.com/hrydgard,Fix Windows UWP build.,1,"['miniupnpc', 'windows']",https://github.com/miniupnp/miniupnp/pull/486,https://github.com/hrydgard,2,https://github.com/miniupnp/miniupnp/pull/486#issuecomment-722004315,"Horrifying hack to get it linking on Windows UWP.
Seems the declaration of in6addr_any exists in Windows UWP headers but not the definition so it fails to link. So I substitute with an equivalent definition.","Issue remains, just tested with the very latest MSVC version. Horribleness aside, it should at least be quite safe.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,486,2020-07-21T21:46:39Z,2021-02-26T14:41:11Z,2021-02-26T14:49:52Z,MERGED,True,6,1,1,https://github.com/hrydgard,Fix Windows UWP build.,1,"['miniupnpc', 'windows']",https://github.com/miniupnp/miniupnp/pull/486,https://github.com/hrydgard,3,https://github.com/miniupnp/miniupnp/pull/486#issuecomment-740475455,"Horrifying hack to get it linking on Windows UWP.
Seems the declaration of in6addr_any exists in Windows UWP headers but not the definition so it fails to link. So I substitute with an equivalent definition.",Can we get this in?,True,{'THUMBS_UP': ['https://github.com/past-due']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,491,2020-10-02T20:33:58Z,2020-10-05T20:01:28Z,2020-10-05T20:01:53Z,MERGED,True,31,7,7,https://github.com/pali,miniupnpc: Fix usage of Windows _snprintf() function,2,"['miniupnpc', 'windows']",https://github.com/miniupnp/miniupnp/pull/491,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/491,"_snprintf() differs from snprintf() in:

on overflow it returns -1 instead of required buffer size
on overflow it does not fill nul byte
does not accept NULL/0 as a buffer

Microsoft implemented snprintf() in Visual Studio 2015 as part of UCRT.
Mingw32 contains snprintf() implementation only when __USE_MINGW_ANSI_STDIO
is defined.
Mingw-w64 versions prior to 8.0.0. contain snprintf() implementation when
__USE_MINGW_ANSI_STDIO or _UCRT is defined. Since version 8.0.0 it is
always supported.
Mingw-w64 defines both MINGW32 and __MINGW64_VERSION_MAJOR macros.
Mingw32 defines only MINGW32.
_scprintf() just count number of bytes needed for formatting string, so it
is basically return value of snprintf().
This change updates miniupnpc code to use snprintf() when is provided by
compiler/runtime to avoid usage _snprintf().
And also this changes updates miniupnpc emulation of snprintf() by
_snprintf() and _scprintf() functions to avoid buffer overflows.
For inspiration full emulation of snprintf() by _snprintf() is available in
mingw-w64 stdio library:
https://sourceforge.net/p/mingw-w64/mingw-w64/ci/master/tree/mingw-w64-crt/stdio/snprintf.c","_snprintf() differs from snprintf() in:

on overflow it returns -1 instead of required buffer size
on overflow it does not fill nul byte
does not accept NULL/0 as a buffer

Microsoft implemented snprintf() in Visual Studio 2015 as part of UCRT.
Mingw32 contains snprintf() implementation only when __USE_MINGW_ANSI_STDIO
is defined.
Mingw-w64 versions prior to 8.0.0. contain snprintf() implementation when
__USE_MINGW_ANSI_STDIO or _UCRT is defined. Since version 8.0.0 it is
always supported.
Mingw-w64 defines both MINGW32 and __MINGW64_VERSION_MAJOR macros.
Mingw32 defines only MINGW32.
_scprintf() just count number of bytes needed for formatting string, so it
is basically return value of snprintf().
This change updates miniupnpc code to use snprintf() when is provided by
compiler/runtime to avoid usage _snprintf().
And also this changes updates miniupnpc emulation of snprintf() by
_snprintf() and _scprintf() functions to avoid buffer overflows.
For inspiration full emulation of snprintf() by _snprintf() is available in
mingw-w64 stdio library:
https://sourceforge.net/p/mingw-w64/mingw-w64/ci/master/tree/mingw-w64-crt/stdio/snprintf.c",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,492,2020-10-05T20:07:40Z,2020-10-05T21:11:27Z,2020-10-05T21:11:27Z,MERGED,True,13,3,1,https://github.com/pali,"miniupnpc: By default skip invalid, disconnected and non-IGD devices",1,[],https://github.com/miniupnp/miniupnp/pull/492,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/492,Allow to use such IGD devices by new -i option.,Allow to use such IGD devices by new -i option.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,492,2020-10-05T20:07:40Z,2020-10-05T21:11:27Z,2020-10-05T21:11:27Z,MERGED,True,13,3,1,https://github.com/pali,"miniupnpc: By default skip invalid, disconnected and non-IGD devices",1,[],https://github.com/miniupnp/miniupnp/pull/492,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/492#issuecomment-703869513,Allow to use such IGD devices by new -i option.,845dc46,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,492,2020-10-05T20:07:40Z,2020-10-05T21:11:27Z,2020-10-05T21:11:27Z,MERGED,True,13,3,1,https://github.com/pali,"miniupnpc: By default skip invalid, disconnected and non-IGD devices",1,[],https://github.com/miniupnp/miniupnp/pull/492,https://github.com/pali,3,https://github.com/miniupnp/miniupnp/pull/492#issuecomment-703890281,Allow to use such IGD devices by new -i option.,Thank you! I updated PR,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,494,2020-10-18T18:33:26Z,2020-11-04T22:40:53Z,2020-11-04T22:40:53Z,MERGED,True,77,30,7,https://github.com/pali,Fix snprintf emulation for Windows,1,['miniupnpc'],https://github.com/miniupnp/miniupnp/pull/494,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/494,"Move it into separate win32_snprintf.h file to de-duplicate its
implementation from all miniupnp source files.


Do not use this emulation with mingw32 SDK when __NO_ISOCEXT is not
defined as in this case mingw32 provides working snprintf function.


Fix detection for mingw-w64 variants, when __NO_ISOCEXT is defined or
when older version without UCRT is used.


Add check if _scprintf function is available. In case it is not available
just returns length of filled buffer to prevent buffer overflow.","Move it into separate win32_snprintf.h file to de-duplicate its
implementation from all miniupnp source files.


Do not use this emulation with mingw32 SDK when __NO_ISOCEXT is not
defined as in this case mingw32 provides working snprintf function.


Fix detection for mingw-w64 variants, when __NO_ISOCEXT is defined or
when older version without UCRT is used.


Add check if _scprintf function is available. In case it is not available
just returns length of filled buffer to prevent buffer overflow.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,497,2020-10-30T21:15:54Z,2020-10-30T22:36:02Z,2020-11-02T08:52:55Z,MERGED,True,22,6,3,https://github.com/miniupnp,fix portinuse.c for OpenBSD 5.5+,1,[],https://github.com/miniupnp/miniupnp/pull/497,https://github.com/miniupnp,1,https://github.com/miniupnp/miniupnp/pull/497,"all CIRCLEQ have been replaced by TAILQ
fixes #496","all CIRCLEQ have been replaced by TAILQ
fixes #496",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,499,2020-11-04T23:07:40Z,2020-11-04T23:15:23Z,2021-03-18T15:54:04Z,MERGED,True,37,9,3,https://github.com/pali,Fix compilation with i586-mingw32msvc-gcc compiler,3,[],https://github.com/miniupnp/miniupnp/pull/499,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/499,Add also i586-mingw32msvc-gcc cross-compile builds to Travis CI.,Add also i586-mingw32msvc-gcc cross-compile builds to Travis CI.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,499,2020-11-04T23:07:40Z,2020-11-04T23:15:23Z,2021-03-18T15:54:04Z,MERGED,True,37,9,3,https://github.com/pali,Fix compilation with i586-mingw32msvc-gcc compiler,3,[],https://github.com/miniupnp/miniupnp/pull/499,https://github.com/pali,2,https://github.com/miniupnp/miniupnp/pull/499#issuecomment-722023803,Add also i586-mingw32msvc-gcc cross-compile builds to Travis CI.,Hm... seems that build on Travis was not started...,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,499,2020-11-04T23:07:40Z,2020-11-04T23:15:23Z,2021-03-18T15:54:04Z,MERGED,True,37,9,3,https://github.com/pali,Fix compilation with i586-mingw32msvc-gcc compiler,3,[],https://github.com/miniupnp/miniupnp/pull/499,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/499#issuecomment-722025716,Add also i586-mingw32msvc-gcc cross-compile builds to Travis CI.,"By the way, I'm trying to add github workflows/Actions now",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,499,2020-11-04T23:07:40Z,2020-11-04T23:15:23Z,2021-03-18T15:54:04Z,MERGED,True,37,9,3,https://github.com/pali,Fix compilation with i586-mingw32msvc-gcc compiler,3,[],https://github.com/miniupnp/miniupnp/pull/499,https://github.com/pali,4,https://github.com/miniupnp/miniupnp/pull/499#issuecomment-722026193,Add also i586-mingw32msvc-gcc cross-compile builds to Travis CI.,So you have disabled Travis?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,499,2020-11-04T23:07:40Z,2020-11-04T23:15:23Z,2021-03-18T15:54:04Z,MERGED,True,37,9,3,https://github.com/pali,Fix compilation with i586-mingw32msvc-gcc compiler,3,[],https://github.com/miniupnp/miniupnp/pull/499,https://github.com/miniupnp,5,https://github.com/miniupnp/miniupnp/pull/499#issuecomment-722029848,Add also i586-mingw32msvc-gcc cross-compile builds to Travis CI.,"I guess travis is disabled automatically, because I have done nothing on travis configuration",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,499,2020-11-04T23:07:40Z,2020-11-04T23:15:23Z,2021-03-18T15:54:04Z,MERGED,True,37,9,3,https://github.com/pali,Fix compilation with i586-mingw32msvc-gcc compiler,3,[],https://github.com/miniupnp/miniupnp/pull/499,https://github.com/Faless,6,https://github.com/miniupnp/miniupnp/pull/499#issuecomment-802041142,Add also i586-mingw32msvc-gcc cross-compile builds to Travis CI.,"This breaks UWP compatibility since GetBestInterface is only available for desktop apps:
GetBestInterfaceEx
GetBestInterface",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,506,2020-11-22T19:48:35Z,2020-11-23T17:29:40Z,2020-11-23T17:29:40Z,MERGED,True,1,1,1,https://github.com/reddwarf69,cmake: update version,1,[],https://github.com/miniupnp/miniupnp/pull/506,https://github.com/reddwarf69,1,https://github.com/miniupnp/miniupnp/pull/506,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,506,2020-11-22T19:48:35Z,2020-11-23T17:29:40Z,2020-11-23T17:29:40Z,MERGED,True,1,1,1,https://github.com/reddwarf69,cmake: update version,1,[],https://github.com/miniupnp/miniupnp/pull/506,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/506#issuecomment-732014535,,why ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,506,2020-11-22T19:48:35Z,2020-11-23T17:29:40Z,2020-11-23T17:29:40Z,MERGED,True,1,1,1,https://github.com/reddwarf69,cmake: update version,1,[],https://github.com/miniupnp/miniupnp/pull/506,https://github.com/reddwarf69,3,https://github.com/miniupnp/miniupnp/pull/506#issuecomment-732026090,,For no practical difference. Simply because... isn't the current version 2.2?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,506,2020-11-22T19:48:35Z,2020-11-23T17:29:40Z,2020-11-23T17:29:40Z,MERGED,True,1,1,1,https://github.com/reddwarf69,cmake: update version,1,[],https://github.com/miniupnp/miniupnp/pull/506,https://github.com/miniupnp,4,https://github.com/miniupnp/miniupnp/pull/506#issuecomment-732309032,,"nevermind, I was mixing things with the CMake version... :( indeed it should be updated ! thanks",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,507,2020-11-22T19:55:04Z,2020-11-23T17:30:28Z,2020-11-23T17:30:29Z,MERGED,True,1,1,1,https://github.com/reddwarf69,"miniupnpc.pc: remove ""miniupnpc"" from includedir",1,[],https://github.com/miniupnp/miniupnp/pull/507,https://github.com/reddwarf69,1,https://github.com/miniupnp/miniupnp/pull/507,"I guess it's expected people do #include <miniupnpc/upnpcommands.h> not #include <upnpcommands.h>, right?","I guess it's expected people do #include <miniupnpc/upnpcommands.h> not #include <upnpcommands.h>, right?",True,{'THUMBS_UP': ['https://github.com/miniupnp']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,508,2020-11-24T16:48:29Z,2020-11-27T18:08:51Z,2020-11-27T18:08:52Z,MERGED,True,0,2,1,https://github.com/reddwarf69,cmake: remove wrong target_include_directories(),1,[],https://github.com/miniupnp/miniupnp/pull/508,https://github.com/reddwarf69,1,https://github.com/miniupnp/miniupnp/pull/508,"As it is it adds this to my compilation: -I<source_dir>/../<source_dir>. So, for example, -I/home/me/miniupnp/miniupnpc/../home/me/miniupnp/miniupnpc.
I guess this was intended to be ${CMAKE_CURRENT_SOURCE_DIR}/... Which would be slightly better, but:

I guess it's there so the sources can do #include <miniupnpc/miniupnpc.h>. But they don't, they do #include ""miniupnpc.h"".
Even if the sources did #include <miniupnpc/miniupnpc.h> it would depend on the source directory being named miniupnpc, which would be fragile.

The standard CMake style would be to move
    miniupnpc.h
    miniwget.h
    upnpcommands.h
    igd_desc_parse.h
    upnpreplyparse.h
    upnperrors.h
    upnpdev.h
    miniupnpctypes.h
    portlistingparse.h
    miniupnpc_declspec.h

from the root to an include/miniupnpc directory. Then you would have target_include_directories(libminiupnpc-static INTERFACE include). I can do this if there is an interest, but it would break the other build systems. Unless there is a plan to make cmake the build system, getting rid of the Makefiles and MSVC project files (which CMake can generate), deleting the lines is as good a fix as any.","As it is it adds this to my compilation: -I<source_dir>/../<source_dir>. So, for example, -I/home/me/miniupnp/miniupnpc/../home/me/miniupnp/miniupnpc.
I guess this was intended to be ${CMAKE_CURRENT_SOURCE_DIR}/... Which would be slightly better, but:

I guess it's there so the sources can do #include <miniupnpc/miniupnpc.h>. But they don't, they do #include ""miniupnpc.h"".
Even if the sources did #include <miniupnpc/miniupnpc.h> it would depend on the source directory being named miniupnpc, which would be fragile.

The standard CMake style would be to move
    miniupnpc.h
    miniwget.h
    upnpcommands.h
    igd_desc_parse.h
    upnpreplyparse.h
    upnperrors.h
    upnpdev.h
    miniupnpctypes.h
    portlistingparse.h
    miniupnpc_declspec.h

from the root to an include/miniupnpc directory. Then you would have target_include_directories(libminiupnpc-static INTERFACE include). I can do this if there is an interest, but it would break the other build systems. Unless there is a plan to make cmake the build system, getting rid of the Makefiles and MSVC project files (which CMake can generate), deleting the lines is as good a fix as any.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,509,2020-11-24T20:23:24Z,2020-11-27T18:02:11Z,2020-11-27T18:02:11Z,MERGED,True,8,6,1,https://github.com/reddwarf69,cmake: use GNUInstallDirs,1,[],https://github.com/miniupnp/miniupnp/pull/509,https://github.com/reddwarf69,1,https://github.com/miniupnp/miniupnp/pull/509,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,510,2020-11-25T13:13:33Z,2020-11-28T10:11:37Z,2020-11-28T10:11:37Z,MERGED,True,35,1,2,https://github.com/reddwarf69,Install cmake config file,1,[],https://github.com/miniupnp/miniupnp/pull/510,https://github.com/reddwarf69,1,https://github.com/miniupnp/miniupnp/pull/510,"I have included all the commits here because there would be merge conflicts otherwise.
CMake usually only builds shared or static, not both. So there isn't really a standard way, but I went for the miniupnpc::miniupnpc alias library which alias the static or shared library based on a MINIUPNPC_USE_STATIC_LIBS variable. The use of XXX_USE_STATIC_LIBS exists on some of the FindXXX modules that come with cmake.","I have included all the commits here because there would be merge conflicts otherwise.
CMake usually only builds shared or static, not both. So there isn't really a standard way, but I went for the miniupnpc::miniupnpc alias library which alias the static or shared library based on a MINIUPNPC_USE_STATIC_LIBS variable. The use of XXX_USE_STATIC_LIBS exists on some of the FindXXX modules that come with cmake.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,510,2020-11-25T13:13:33Z,2020-11-28T10:11:37Z,2020-11-28T10:11:37Z,MERGED,True,35,1,2,https://github.com/reddwarf69,Install cmake config file,1,[],https://github.com/miniupnp/miniupnp/pull/510,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/510#issuecomment-734940900,"I have included all the commits here because there would be merge conflicts otherwise.
CMake usually only builds shared or static, not both. So there isn't really a standard way, but I went for the miniupnpc::miniupnpc alias library which alias the static or shared library based on a MINIUPNPC_USE_STATIC_LIBS variable. The use of XXX_USE_STATIC_LIBS exists on some of the FindXXX modules that come with cmake.",could you rebase on master ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,510,2020-11-25T13:13:33Z,2020-11-28T10:11:37Z,2020-11-28T10:11:37Z,MERGED,True,35,1,2,https://github.com/reddwarf69,Install cmake config file,1,[],https://github.com/miniupnp/miniupnp/pull/510,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/510#issuecomment-735210108,"I have included all the commits here because there would be merge conflicts otherwise.
CMake usually only builds shared or static, not both. So there isn't really a standard way, but I went for the miniupnpc::miniupnpc alias library which alias the static or shared library based on a MINIUPNPC_USE_STATIC_LIBS variable. The use of XXX_USE_STATIC_LIBS exists on some of the FindXXX modules that come with cmake.",thanks !,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/ptpt52,1,https://github.com/miniupnp/miniupnp/pull/511,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT","add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT",True,"{'HEART': ['https://github.com/Neustradamus', 'https://github.com/sky96111', 'https://github.com/bigppwong']}"
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/pali,2,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-737561628,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT","Function addr_is_reserved checks if address is external public or not and based on it construct reply for GetExternalIPAddress UPnP XML function. So this patch breaks GetExternalIPAddress function and it returns nonsense/incorrect reply.
Have you tested this change? I'm guess that not because miniupnpc at the first stage checks that GetExternalIPAddress returns correct value which results that miniupnpc would be confused or not work.
And even that port forwarding obviously does not work behind NAT (with small exception when full cone NAT 1:1 is used).
I do not know what @miniupnp thinks about it, but this patch does not make sense at all.",True,"{'THUMBS_DOWN': ['https://github.com/cmheia'], 'THUMBS_UP': ['https://github.com/sky96111']}"
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/pali,3,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-785496449,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT",@miniupnp: maybe you should comment this pull request...,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/miniupnp,4,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-786686177,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT",addr_is_reserved() behavior should not be changed.,True,"{'THUMBS_UP': ['https://github.com/pali', 'https://github.com/grumpybozo'], 'CONFUSED': ['https://github.com/sky96111', 'https://github.com/jerry-ch-issue', 'https://github.com/bigppwong']}"
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/pali,5,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-806487512,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT","Any updates in this pull request? Based on my above comments, I do not think that pull request should be merged... so it can be closed?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/ptpt52,6,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-806963087,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT",so there is no possible to add DNAT rule if router has no public ip? this seems not true in real world,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/pali,7,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-808905273,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT","See my comment, it is working fine if you are behind Full Cone NAT 1:1. Just you need to supply public IP address which is required by UPnP protocol. It can be done either automatically by reading it from wan interface or by discovery via stun code when ext_perform_stun=yes is set or manually by command line argument -o or by config option ext_ip.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/pali,8,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-827548121,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT",@miniupnp I think you should close this pull request. People now started reporting bugs against this patch (like this) as openwrt already expressed that do not maintain this custom patch. It looks like that openwrt has misconfigured iptables/routing (like can be seen in this patch and links from it) which caused issues in miniupnpd and they are trying to hack them by patch like this one.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/pali,9,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-855213498,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT",Patch in this pull request is causing more issues (e.g. openwrt/packages#15258 or #546 openwrt/packages#14031 (comment)) and OpenWRT now decided to disable this option by default due to lot of bug reports openwrt/packages#15759,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/ptpt52,10,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-872940892,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT","close this.

addr_is_reserved() behavior should not be changed.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/sky96111,11,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-891711911,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT","addr_is_reserved() behavior should not be changed.

@miniupnp  Double NAT are quite common in China. Because optical modem provided by ISP are defaulted with router function and can not be disabled by us. Though we can config DMZ or port forwarding to expose the second router to the public net, miniupnpd can only get Intranet IP and return ""addr_is_reserved"".",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/choyri,12,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-914840086,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT","Especially for China Mobile, the IP obtained by household PPPoE is all private address. 😞  so sad",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/sky96111,13,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-914960697,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT","Especially for China Mobile, the IP obtained by household PPPoE is all private address.  so sad

In that case, UPnP still cannot work enen if miniUPnP allow this behaviour. Or you will need to ask ISP to forward your port, but actually it is impossible.
This change only breaks double NAT. For those who can only get a private address from ISP... This breaks nothing.
如果你的光猫也只能从运营商得到一个内网IP，即使这个软件不限制，你的UPnP是不成功的。
那个commit对中国用户有影响，但影响的用户是：光猫拨号能获得外网IP，在光猫上通过端口转发或DMZ把二级路由暴露在了公网上，但是二级路由只能获得光猫分配的内网IP导致miniUPnP拒绝了UPnP。
如果打电话给运营商也不提供公网IP，那换联通电信吧。",True,{'HEART': ['https://github.com/choyri']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/miniupnp,14,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-915400049,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT","If you only have a Private address, you have not a routable address so using UPnP IGD is pointless.
I hope you still have a routable IPv6 address.",True,{'HEART': ['https://github.com/choyri']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/pali,15,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-920948281,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT","Obviously if you have only private IPv4 address from CGNAT then UPnP IGD services for port forwarding (like miniupnpd) will never work. To make it work you have to run miniupnpd on that CGNAT machine.
So if you do not have publicly routable IPv4 address then ask for block of routable IPv6 addresses.
But note that IPv4 multi-NAT setup with miniupnpd in cascade (when on every IPv4 CG/NAT router is running miniunpd) is not supported yet by miniupnpd yet, there is open feature request for it #299",True,"{'HEART': ['https://github.com/choyri', 'https://github.com/sky96111']}"
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/Neustradamus,16,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-921237648,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT","There is a new patch from @ptpt52:

openwrt/packages#16011 (comment)

It replaces the old OpenWrt patch: 301-ext_ip_reserved_ignore.patch.
Tested by @openips!",True,{'THUMBS_UP': ['https://github.com/openips']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,511,2020-11-25T23:52:11Z,2021-07-02T11:53:50Z,2021-09-16T23:00:08Z,CLOSED,False,20,0,8,https://github.com/ptpt52,options: ext_ip_reserved_ignore support,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/511,https://github.com/openips,17,https://github.com/miniupnp/miniupnp/pull/511#issuecomment-921318776,"add an option to ignore even if ext_ip is reserved
this make the port forwarding force to work when the router is behind NAT","if you use miniupnpd as router with more than one isp like me , you can get private ip and public ip at same time.
so miniupnpd work with the public ip and not work with the private ip is necessary.
the new patch let miniupnpd can work in this situation and tested by me.
great work and thanks a lot",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,512,2020-11-28T10:54:02Z,2020-11-30T01:00:12Z,2020-11-30T06:31:54Z,MERGED,True,48,0,4,https://github.com/StanleySweet,Add RC file for miniunpnpc,1,[],https://github.com/miniupnp/miniupnp/pull/512,https://github.com/StanleySweet,1,https://github.com/miniupnp/miniupnp/pull/512,"Currently the dll info of the library is empty on windows

With this patch","Currently the dll info of the library is empty on windows

With this patch",True,{'THUMBS_UP': ['https://github.com/miniupnp']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,512,2020-11-28T10:54:02Z,2020-11-30T01:00:12Z,2020-11-30T06:31:54Z,MERGED,True,48,0,4,https://github.com/StanleySweet,Add RC file for miniunpnpc,1,[],https://github.com/miniupnp/miniupnp/pull/512,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/512#issuecomment-735478203,"Currently the dll info of the library is empty on windows

With this patch",I'll think I will modify it so it keeps in sync with the VERSION file,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,512,2020-11-28T10:54:02Z,2020-11-30T01:00:12Z,2020-11-30T06:31:54Z,MERGED,True,48,0,4,https://github.com/StanleySweet,Add RC file for miniunpnpc,1,[],https://github.com/miniupnp/miniupnp/pull/512,https://github.com/StanleySweet,3,https://github.com/miniupnp/miniupnp/pull/512#issuecomment-735580513,"Currently the dll info of the library is empty on windows

With this patch","Thanks :)
0 A.D. on Windows now has an up to date mini unpnp :)",True,{'HEART': ['https://github.com/miniupnp']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,513,2020-12-09T18:26:12Z,2020-12-09T23:03:40Z,2020-12-09T23:03:40Z,MERGED,True,6,6,3,https://github.com/timgates42,"docs: fix simple typo, decription -> description",1,[],https://github.com/miniupnp/miniupnp/pull/513,https://github.com/timgates42,1,https://github.com/miniupnp/miniupnp/pull/513,"There is a small typo in miniupnpd/commonrdr.h, miniupnpd/ipf/ipfrdr.c, miniupnpd/pf/obsdrdr.c.
Should read description rather than decription.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","There is a small typo in miniupnpd/commonrdr.h, miniupnpd/ipf/ipfrdr.c, miniupnpd/pf/obsdrdr.c.
Should read description rather than decription.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,514,2020-12-12T00:22:21Z,2020-12-13T16:11:17Z,2020-12-13T16:11:17Z,MERGED,True,4,4,1,https://github.com/pali,Fix syntax error in Travis YAML file,2,[],https://github.com/miniupnp/miniupnp/pull/514,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/514,"Travis YAML file cannot be currently parsed and therefore Travis was not started, see:
https://travis-ci.org/github/miniupnp/miniupnp/requests","Travis YAML file cannot be currently parsed and therefore Travis was not started, see:
https://travis-ci.org/github/miniupnp/miniupnp/requests",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,514,2020-12-12T00:22:21Z,2020-12-13T16:11:17Z,2020-12-13T16:11:17Z,MERGED,True,4,4,1,https://github.com/pali,Fix syntax error in Travis YAML file,2,[],https://github.com/miniupnp/miniupnp/pull/514,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/514#issuecomment-743734203,"Travis YAML file cannot be currently parsed and therefore Travis was not started, see:
https://travis-ci.org/github/miniupnp/miniupnp/requests",it fails ;),True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,514,2020-12-12T00:22:21Z,2020-12-13T16:11:17Z,2020-12-13T16:11:17Z,MERGED,True,4,4,1,https://github.com/pali,Fix syntax error in Travis YAML file,2,[],https://github.com/miniupnp/miniupnp/pull/514,https://github.com/pali,3,https://github.com/miniupnp/miniupnp/pull/514#issuecomment-743750184,"Travis YAML file cannot be currently parsed and therefore Travis was not started, see:
https://travis-ci.org/github/miniupnp/miniupnp/requests",It should be fixed right now after second commit.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,514,2020-12-12T00:22:21Z,2020-12-13T16:11:17Z,2020-12-13T16:11:17Z,MERGED,True,4,4,1,https://github.com/pali,Fix syntax error in Travis YAML file,2,[],https://github.com/miniupnp/miniupnp/pull/514,https://github.com/pali,4,https://github.com/miniupnp/miniupnp/pull/514#issuecomment-744001220,"Travis YAML file cannot be currently parsed and therefore Travis was not started, see:
https://travis-ci.org/github/miniupnp/miniupnp/requests",now it passes :-),True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,516,2020-12-29T04:17:29Z,2021-05-11T22:10:16Z,2021-05-11T22:10:16Z,MERGED,True,21,6,1,https://github.com/past-due,Fallback for earlier Apple platforms that lack clock_gettime,1,"['miniupnpc', 'macOS']",https://github.com/miniupnp/miniupnp/pull/516,https://github.com/past-due,1,https://github.com/miniupnp/miniupnp/pull/516,"clock_gettime is only available on macOS >= 10.12, iOS >= 10.0 (etc).
Support compiling with a MACOSX_DEPLOYMENT_TARGET < 10.12 by using __builtin_available to detect when running on an earlier system, and fall-back to gettimeofday when clock_gettime is not available.","clock_gettime is only available on macOS >= 10.12, iOS >= 10.0 (etc).
Support compiling with a MACOSX_DEPLOYMENT_TARGET < 10.12 by using __builtin_available to detect when running on an earlier system, and fall-back to gettimeofday when clock_gettime is not available.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,516,2020-12-29T04:17:29Z,2021-05-11T22:10:16Z,2021-05-11T22:10:16Z,MERGED,True,21,6,1,https://github.com/past-due,Fallback for earlier Apple platforms that lack clock_gettime,1,"['miniupnpc', 'macOS']",https://github.com/miniupnp/miniupnp/pull/516,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/516#issuecomment-752170142,"clock_gettime is only available on macOS >= 10.12, iOS >= 10.0 (etc).
Support compiling with a MACOSX_DEPLOYMENT_TARGET < 10.12 by using __builtin_available to detect when running on an earlier system, and fall-back to gettimeofday when clock_gettime is not available.",shouldn't mach_absolute_time() be used instead ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,516,2020-12-29T04:17:29Z,2021-05-11T22:10:16Z,2021-05-11T22:10:16Z,MERGED,True,21,6,1,https://github.com/past-due,Fallback for earlier Apple platforms that lack clock_gettime,1,"['miniupnpc', 'macOS']",https://github.com/miniupnp/miniupnp/pull/516,https://github.com/past-due,3,https://github.com/miniupnp/miniupnp/pull/516#issuecomment-752212996,"clock_gettime is only available on macOS >= 10.12, iOS >= 10.0 (etc).
Support compiling with a MACOSX_DEPLOYMENT_TARGET < 10.12 by using __builtin_available to detect when running on an earlier system, and fall-back to gettimeofday when clock_gettime is not available.","shouldn't mach_absolute_time() be used instead ?

I hadn't had a chance to dig into where all upnp_gettimeofday was used (and how).
Assuming the constraint is not an issue (see below), it's a reasonable option and has been available since macOS 10.0:

mach_absolute_time
Returns current value of a clock that increments monotonically in tick units (starting at an arbitrary point), this clock does not increment while the system is asleep.

A few references that might be helpful: https://developer.apple.com/library/archive/qa/qa1398/_index.html",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,516,2020-12-29T04:17:29Z,2021-05-11T22:10:16Z,2021-05-11T22:10:16Z,MERGED,True,21,6,1,https://github.com/past-due,Fallback for earlier Apple platforms that lack clock_gettime,1,"['miniupnpc', 'macOS']",https://github.com/miniupnp/miniupnp/pull/516,https://github.com/past-due,4,https://github.com/miniupnp/miniupnp/pull/516#issuecomment-776944385,"clock_gettime is only available on macOS >= 10.12, iOS >= 10.0 (etc).
Support compiling with a MACOSX_DEPLOYMENT_TARGET < 10.12 by using __builtin_available to detect when running on an earlier system, and fall-back to gettimeofday when clock_gettime is not available.",@miniupnp: This updated PR now handles the non-clang compatibility case you described. (Please see my comments above for my rationale.) Were there additional changes you wanted to get this merged?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,517,2020-12-30T10:43:47Z,2021-01-12T00:12:56Z,2021-01-12T00:12:56Z,MERGED,True,26,7,3,https://github.com/pali,Extend description from STUN output and add check for lan address,2,[],https://github.com/miniupnp/miniupnp/pull/517,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/517,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,518,2020-12-31T19:41:20Z,2021-01-04T00:18:28Z,2021-01-04T00:23:22Z,MERGED,True,31,11,2,https://github.com/pali,miniupnpc: Fix usage of IP_MULTICAST_IF with struct ip_mreqn,3,[],https://github.com/miniupnp/miniupnp/pull/518,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/518,"When struct ip_mreqn is passed to IP_MULTICAST_IF setsockopt option it is
always required to set also ipv4 source address. Otherwise Linux kernel
will choose default system multicast ipv4 address which does not have to
belong to chosen interface specified in struct ip_mreqn.
Therefore on system with more multicast interfaces and more ipv4 addresses,
it may happen that interface chosen by upnpc -m option would use ipv4
address which does not belong to this interface.
This change is fixing above issue and ensure that if interface is chosen by
upnpc -m option then source address which belongs to this interface would
be used.
Without this change upnpc -m eth1 can send multicast traffic over interface
eth1 but with source ipv4 address of interface eth0, which obviously would
be rejected by upnp gateway.","When struct ip_mreqn is passed to IP_MULTICAST_IF setsockopt option it is
always required to set also ipv4 source address. Otherwise Linux kernel
will choose default system multicast ipv4 address which does not have to
belong to chosen interface specified in struct ip_mreqn.
Therefore on system with more multicast interfaces and more ipv4 addresses,
it may happen that interface chosen by upnpc -m option would use ipv4
address which does not belong to this interface.
This change is fixing above issue and ensure that if interface is chosen by
upnpc -m option then source address which belongs to this interface would
be used.
Without this change upnpc -m eth1 can send multicast traffic over interface
eth1 but with source ipv4 address of interface eth0, which obviously would
be rejected by upnp gateway.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,520,2021-01-08T12:55:04Z,2021-01-15T19:00:03Z,2021-01-15T19:00:04Z,CLOSED,False,39,11,1,https://github.com/sanderjo,"submit_to_minissdpd: module, hardening, RC plus Message ",7,[],https://github.com/miniupnp/miniupnp/pull/520,https://github.com/sanderjo,1,https://github.com/miniupnp/miniupnp/pull/520,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,520,2021-01-08T12:55:04Z,2021-01-15T19:00:03Z,2021-01-15T19:00:04Z,CLOSED,False,39,11,1,https://github.com/sanderjo,"submit_to_minissdpd: module, hardening, RC plus Message ",7,[],https://github.com/miniupnp/miniupnp/pull/520,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/520#issuecomment-761124165,,I cherry-picked and modified.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,526,2021-01-27T12:16:58Z,2021-02-02T08:49:47Z,2021-02-02T11:30:49Z,MERGED,True,10,2,4,https://github.com/pali,miniupnpc: Fix compile warnings,4,['miniupnpc'],https://github.com/miniupnp/miniupnp/pull/526,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/526,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,526,2021-01-27T12:16:58Z,2021-02-02T08:49:47Z,2021-02-02T11:30:49Z,MERGED,True,10,2,4,https://github.com/pali,miniupnpc: Fix compile warnings,4,['miniupnpc'],https://github.com/miniupnp/miniupnp/pull/526,https://github.com/pali,2,https://github.com/miniupnp/miniupnp/pull/526#issuecomment-771571696,,"Thank you for review & merge!
Now when in git master branch are compile fixes for Visual Studio, fixes for upnpc -m and updated hints/error messages from stun checks, what about releasing a new minor version?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,530,2021-02-24T21:38:08Z,2021-02-26T14:27:53Z,2021-02-26T14:42:21Z,CLOSED,False,2,2,1,https://github.com/albertmichaelj,Fix incorrect addition of jump rule to PREROUTING mangle chain,1,"['miniupnpd', 'netfilter', 'linux']",https://github.com/miniupnp/miniupnp/pull/530,https://github.com/albertmichaelj,1,https://github.com/miniupnp/miniupnp/pull/530,"In the current iptables init script, the mangle table has a rule added to jump to the MINIUPNPD chain in the mangle table added to PREROUTING. However, if you look at iptables_removeall.sh, it tries to remove the rule from the FORWARD chain instead (see the line here. This changes the init script to add the jump rule to the FORWARD chain instead of the PREROUTING chain.
When this is not done, the mangle table is not properly reset on calling the iptables_removeall.sh script. Specifically the rule jumping to MINIUPNPD and the MINIUPNPD chain itself remain (though rules are correctly flushed). Additionally, there is an error message in the logs as follows:
REDACTED iptables_removeall.sh[1850]: iptables: No chain/target/match by that name.
REDACTED iptables_removeall.sh[1851]: iptables: Too many links.

To be frank, I am not certain that the intended chain to add the jump rule to is the FORWARD chain. The mistake might be in iptables_removeall.sh in trying to remove the rule from the FORWARD chain. However, to the best I can understand, the mangle table is used to adjust the DSCP of incoming packets (though to be clear, I don't understand when and why this is done in the UPnP protocol), and by looking at other examples online, it seems like the FORWARD chain on the mangle table is the most common place to adjust DSCP values. Additionally, the git blame for the line in iptables_removeall.sh shows that the FORWARD chain was used first (iptables_removeall.sh was edited nine years ago to add the removal rule, while iptables_init.sh was added two years ago). All of this leads me to believe that the correct chain is the FORWARD chain.","In the current iptables init script, the mangle table has a rule added to jump to the MINIUPNPD chain in the mangle table added to PREROUTING. However, if you look at iptables_removeall.sh, it tries to remove the rule from the FORWARD chain instead (see the line here. This changes the init script to add the jump rule to the FORWARD chain instead of the PREROUTING chain.
When this is not done, the mangle table is not properly reset on calling the iptables_removeall.sh script. Specifically the rule jumping to MINIUPNPD and the MINIUPNPD chain itself remain (though rules are correctly flushed). Additionally, there is an error message in the logs as follows:
REDACTED iptables_removeall.sh[1850]: iptables: No chain/target/match by that name.
REDACTED iptables_removeall.sh[1851]: iptables: Too many links.

To be frank, I am not certain that the intended chain to add the jump rule to is the FORWARD chain. The mistake might be in iptables_removeall.sh in trying to remove the rule from the FORWARD chain. However, to the best I can understand, the mangle table is used to adjust the DSCP of incoming packets (though to be clear, I don't understand when and why this is done in the UPnP protocol), and by looking at other examples online, it seems like the FORWARD chain on the mangle table is the most common place to adjust DSCP values. Additionally, the git blame for the line in iptables_removeall.sh shows that the FORWARD chain was used first (iptables_removeall.sh was edited nine years ago to add the removal rule, while iptables_init.sh was added two years ago). All of this leads me to believe that the correct chain is the FORWARD chain.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,530,2021-02-24T21:38:08Z,2021-02-26T14:27:53Z,2021-02-26T14:42:21Z,CLOSED,False,2,2,1,https://github.com/albertmichaelj,Fix incorrect addition of jump rule to PREROUTING mangle chain,1,"['miniupnpd', 'netfilter', 'linux']",https://github.com/miniupnp/miniupnp/pull/530,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/530#issuecomment-786668440,"In the current iptables init script, the mangle table has a rule added to jump to the MINIUPNPD chain in the mangle table added to PREROUTING. However, if you look at iptables_removeall.sh, it tries to remove the rule from the FORWARD chain instead (see the line here. This changes the init script to add the jump rule to the FORWARD chain instead of the PREROUTING chain.
When this is not done, the mangle table is not properly reset on calling the iptables_removeall.sh script. Specifically the rule jumping to MINIUPNPD and the MINIUPNPD chain itself remain (though rules are correctly flushed). Additionally, there is an error message in the logs as follows:
REDACTED iptables_removeall.sh[1850]: iptables: No chain/target/match by that name.
REDACTED iptables_removeall.sh[1851]: iptables: Too many links.

To be frank, I am not certain that the intended chain to add the jump rule to is the FORWARD chain. The mistake might be in iptables_removeall.sh in trying to remove the rule from the FORWARD chain. However, to the best I can understand, the mangle table is used to adjust the DSCP of incoming packets (though to be clear, I don't understand when and why this is done in the UPnP protocol), and by looking at other examples online, it seems like the FORWARD chain on the mangle table is the most common place to adjust DSCP values. Additionally, the git blame for the line in iptables_removeall.sh shows that the FORWARD chain was used first (iptables_removeall.sh was edited nine years ago to add the removal rule, while iptables_init.sh was added two years ago). All of this leads me to believe that the correct chain is the FORWARD chain.","DSCP is used for PCP protocol, not UPnP.
support was added in 9e1ffd5
diff --git a/miniupnpd/netfilter/iptables_init.sh b/miniupnpd/netfilter/iptables_init.sh
index d3510dc..0b064c9 100755
--- a/miniupnpd/netfilter/iptables_init.sh
+++ b/miniupnpd/netfilter/iptables_init.sh
@@ -13,8 +13,15 @@ $IPTABLES -t nat -N MINIUPNPD
 #$IPTABLES -t nat -A PREROUTING -d $EXTIP -i $EXTIF -j MINIUPNPD
 $IPTABLES -t nat -A PREROUTING -i $EXTIF -j MINIUPNPD
 
+#adding the MINIUPNPD chain for mangle
+$IPTABLES -t mangle -N MINIUPNPD
+$IPTABLES -t mangle -A PREROUTING -i $EXTIF -j MINIUPNPD
+
 #adding the MINIUPNPD chain for filter
 $IPTABLES -t filter -N MINIUPNPD
 #adding the rule to MINIUPNPD
 $IPTABLES -t filter -A FORWARD -i $EXTIF ! -o $EXTIF -j MINIUPNPD
 
+#adding the MINIUPNPD chain for nat
+$IPTABLES -t nat -N MINIUPNPD-PCP-PEER
+$IPTABLES -t nat -A POSTROUTING -o $EXTIF -j MINIUPNPD-PCP-PEER",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,530,2021-02-24T21:38:08Z,2021-02-26T14:27:53Z,2021-02-26T14:42:21Z,CLOSED,False,2,2,1,https://github.com/albertmichaelj,Fix incorrect addition of jump rule to PREROUTING mangle chain,1,"['miniupnpd', 'netfilter', 'linux']",https://github.com/miniupnp/miniupnp/pull/530,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/530#issuecomment-786669935,"In the current iptables init script, the mangle table has a rule added to jump to the MINIUPNPD chain in the mangle table added to PREROUTING. However, if you look at iptables_removeall.sh, it tries to remove the rule from the FORWARD chain instead (see the line here. This changes the init script to add the jump rule to the FORWARD chain instead of the PREROUTING chain.
When this is not done, the mangle table is not properly reset on calling the iptables_removeall.sh script. Specifically the rule jumping to MINIUPNPD and the MINIUPNPD chain itself remain (though rules are correctly flushed). Additionally, there is an error message in the logs as follows:
REDACTED iptables_removeall.sh[1850]: iptables: No chain/target/match by that name.
REDACTED iptables_removeall.sh[1851]: iptables: Too many links.

To be frank, I am not certain that the intended chain to add the jump rule to is the FORWARD chain. The mistake might be in iptables_removeall.sh in trying to remove the rule from the FORWARD chain. However, to the best I can understand, the mangle table is used to adjust the DSCP of incoming packets (though to be clear, I don't understand when and why this is done in the UPnP protocol), and by looking at other examples online, it seems like the FORWARD chain on the mangle table is the most common place to adjust DSCP values. Additionally, the git blame for the line in iptables_removeall.sh shows that the FORWARD chain was used first (iptables_removeall.sh was edited nine years ago to add the removal rule, while iptables_init.sh was added two years ago). All of this leads me to believe that the correct chain is the FORWARD chain.","somehow, the error was introduced in iptables_removeall.sh in 82ec7bc",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,530,2021-02-24T21:38:08Z,2021-02-26T14:27:53Z,2021-02-26T14:42:21Z,CLOSED,False,2,2,1,https://github.com/albertmichaelj,Fix incorrect addition of jump rule to PREROUTING mangle chain,1,"['miniupnpd', 'netfilter', 'linux']",https://github.com/miniupnp/miniupnp/pull/530,https://github.com/miniupnp,4,https://github.com/miniupnp/miniupnp/pull/530#issuecomment-786679747,"In the current iptables init script, the mangle table has a rule added to jump to the MINIUPNPD chain in the mangle table added to PREROUTING. However, if you look at iptables_removeall.sh, it tries to remove the rule from the FORWARD chain instead (see the line here. This changes the init script to add the jump rule to the FORWARD chain instead of the PREROUTING chain.
When this is not done, the mangle table is not properly reset on calling the iptables_removeall.sh script. Specifically the rule jumping to MINIUPNPD and the MINIUPNPD chain itself remain (though rules are correctly flushed). Additionally, there is an error message in the logs as follows:
REDACTED iptables_removeall.sh[1850]: iptables: No chain/target/match by that name.
REDACTED iptables_removeall.sh[1851]: iptables: Too many links.

To be frank, I am not certain that the intended chain to add the jump rule to is the FORWARD chain. The mistake might be in iptables_removeall.sh in trying to remove the rule from the FORWARD chain. However, to the best I can understand, the mangle table is used to adjust the DSCP of incoming packets (though to be clear, I don't understand when and why this is done in the UPnP protocol), and by looking at other examples online, it seems like the FORWARD chain on the mangle table is the most common place to adjust DSCP values. Additionally, the git blame for the line in iptables_removeall.sh shows that the FORWARD chain was used first (iptables_removeall.sh was edited nine years ago to add the removal rule, while iptables_init.sh was added two years ago). All of this leads me to believe that the correct chain is the FORWARD chain.","using PREROUTING was intended. Unless there is a good reason to change, I keep it that was ;)
I have fixed iptables_removeall.sh with 9239cf2",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,530,2021-02-24T21:38:08Z,2021-02-26T14:27:53Z,2021-02-26T14:42:21Z,CLOSED,False,2,2,1,https://github.com/albertmichaelj,Fix incorrect addition of jump rule to PREROUTING mangle chain,1,"['miniupnpd', 'netfilter', 'linux']",https://github.com/miniupnp/miniupnp/pull/530,https://github.com/albertmichaelj,5,https://github.com/miniupnp/miniupnp/pull/530#issuecomment-786688525,"In the current iptables init script, the mangle table has a rule added to jump to the MINIUPNPD chain in the mangle table added to PREROUTING. However, if you look at iptables_removeall.sh, it tries to remove the rule from the FORWARD chain instead (see the line here. This changes the init script to add the jump rule to the FORWARD chain instead of the PREROUTING chain.
When this is not done, the mangle table is not properly reset on calling the iptables_removeall.sh script. Specifically the rule jumping to MINIUPNPD and the MINIUPNPD chain itself remain (though rules are correctly flushed). Additionally, there is an error message in the logs as follows:
REDACTED iptables_removeall.sh[1850]: iptables: No chain/target/match by that name.
REDACTED iptables_removeall.sh[1851]: iptables: Too many links.

To be frank, I am not certain that the intended chain to add the jump rule to is the FORWARD chain. The mistake might be in iptables_removeall.sh in trying to remove the rule from the FORWARD chain. However, to the best I can understand, the mangle table is used to adjust the DSCP of incoming packets (though to be clear, I don't understand when and why this is done in the UPnP protocol), and by looking at other examples online, it seems like the FORWARD chain on the mangle table is the most common place to adjust DSCP values. Additionally, the git blame for the line in iptables_removeall.sh shows that the FORWARD chain was used first (iptables_removeall.sh was edited nine years ago to add the removal rule, while iptables_init.sh was added two years ago). All of this leads me to believe that the correct chain is the FORWARD chain.","All this looks good to me! Like I said, I didn't know on which side the error was, so I'm happy to keep it at PREROUTING. Thanks for your work on this very useful piece of software!",True,{'HEART': ['https://github.com/miniupnp']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,533,2021-03-18T15:28:35Z,,2021-08-17T12:39:36Z,OPEN,False,210,12,7,https://github.com/yangfl,miniupnpd: Add option to match rules with regex,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/533,https://github.com/yangfl,1,https://github.com/miniupnp/miniupnp/pull/533,"Some reports that a certain app is abusing UPnP for exploiting upload
bandwidth. This commit adds support to restrict UPnP rules to a regex.
By matching requester's description string against rule's regex, this
will make some obstacles for that app.","Some reports that a certain app is abusing UPnP for exploiting upload
bandwidth. This commit adds support to restrict UPnP rules to a regex.
By matching requester's description string against rule's regex, this
will make some obstacles for that app.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,533,2021-03-18T15:28:35Z,,2021-08-17T12:39:36Z,OPEN,False,210,12,7,https://github.com/yangfl,miniupnpd: Add option to match rules with regex,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/533,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/533#issuecomment-802656339,"Some reports that a certain app is abusing UPnP for exploiting upload
bandwidth. This commit adds support to restrict UPnP rules to a regex.
By matching requester's description string against rule's regex, this
will make some obstacles for that app.","Interesting.
@yangfl  can you link to the reference of the problem ?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,533,2021-03-18T15:28:35Z,,2021-08-17T12:39:36Z,OPEN,False,210,12,7,https://github.com/yangfl,miniupnpd: Add option to match rules with regex,2,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/533,https://github.com/yangfl,3,https://github.com/miniupnp/miniupnp/pull/533#issuecomment-802663573,"Some reports that a certain app is abusing UPnP for exploiting upload
bandwidth. This commit adds support to restrict UPnP rules to a regex.
By matching requester's description string against rule's regex, this
will make some obstacles for that app.",https://t.me/LeanSaidWTF/198,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,534,2021-03-18T16:32:48Z,2021-03-19T08:50:41Z,2021-03-19T08:50:41Z,MERGED,True,13,3,2,https://github.com/Faless,Fix UWP builds after mingw changes,2,['miniupnpc'],https://github.com/miniupnp/miniupnp/pull/534,https://github.com/Faless,1,https://github.com/miniupnp/miniupnp/pull/534,"Since #499, GetBestInterface is used instead of GetBestInterfaceEx for compatibility with old mingw verisons (and because IPv6 is indeed not needed), but microsoft decided for no apparent reason beside pure lobbying not to include the IPv4-only version GetBestInterface in the UWP libraries.
This PR reintroduces the use of GetBestInterfaceEx while trying to keep compatibility with old mingw by checking the _WIN32_WINNT, which I've also switched to use the well known code instead of _WIN32_WINNT_VISTA which might not be defined.","Since #499, GetBestInterface is used instead of GetBestInterfaceEx for compatibility with old mingw verisons (and because IPv6 is indeed not needed), but microsoft decided for no apparent reason beside pure lobbying not to include the IPv4-only version GetBestInterface in the UWP libraries.
This PR reintroduces the use of GetBestInterfaceEx while trying to keep compatibility with old mingw by checking the _WIN32_WINNT, which I've also switched to use the well known code instead of _WIN32_WINNT_VISTA which might not be defined.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,537,2021-03-28T15:36:53Z,2021-03-31T07:44:14Z,2021-03-31T07:44:32Z,MERGED,True,3,4,2,https://github.com/pali,IGD v2.0: Unknown ExternalIPAddress is represented as empty string,2,[],https://github.com/miniupnp/miniupnp/pull/537,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/537,"IGD v2.0 specification for WANIPConnection:2 says:
When the external IP address could not be retrieved by the gateway (for
example, because the interface is down or because there was a failure in
the last connection setup attempt), then the ExternalIPAddress MUST be
equal to the empty string.","IGD v2.0 specification for WANIPConnection:2 says:
When the external IP address could not be retrieved by the gateway (for
example, because the interface is down or because there was a failure in
the last connection setup attempt), then the ExternalIPAddress MUST be
equal to the empty string.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,537,2021-03-28T15:36:53Z,2021-03-31T07:44:14Z,2021-03-31T07:44:32Z,MERGED,True,3,4,2,https://github.com/pali,IGD v2.0: Unknown ExternalIPAddress is represented as empty string,2,[],https://github.com/miniupnp/miniupnp/pull/537,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/537#issuecomment-810852318,"IGD v2.0 specification for WANIPConnection:2 says:
When the external IP address could not be retrieved by the gateway (for
example, because the interface is down or because there was a failure in
the last connection setup attempt), then the ExternalIPAddress MUST be
equal to the empty string.",@pali thanks !,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,541,2021-04-21T23:36:48Z,2021-05-11T22:15:55Z,2021-05-11T22:15:55Z,CLOSED,False,4,0,1,https://github.com/seaeagle1,Add SO_REUSEPORT option for SSDP,1,[],https://github.com/miniupnp/miniupnp/pull/541,https://github.com/seaeagle1,1,https://github.com/miniupnp/miniupnp/pull/541,"Setting this flag allows multiple SSDP listeners, which matches the one-to-many architecture of multicasts.","Setting this flag allows multiple SSDP listeners, which matches the one-to-many architecture of multicasts.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,547,2021-05-21T19:13:19Z,2021-05-22T21:31:22Z,2021-05-22T21:31:22Z,CLOSED,False,3,3,2,https://github.com/kpcyrd,Reproducible Builds: Do not embed build system kernel version in binary,1,[],https://github.com/miniupnp/miniupnp/pull/547,https://github.com/kpcyrd,1,https://github.com/miniupnp/miniupnp/pull/547,"Our Reproducible Builds system at Arch Linux has flagged reproducible builds issues in software using miniupnp. Embedding the kernel version in the binary is causing reproducible builds issues:
│ │ │ -User-Agent: Linux/5.7.9-arch1-1, UPnP/1.1, MiniUPnPc/2.0
│ │ │ +User-Agent: Linux/5.11.16-arch1-1, UPnP/1.1, MiniUPnPc/2.0

If you insist on using the kernel version I'd recommend to run uname at runtime because that's likely the value you're actually interested in.
Related to transmission/transmission#1696","Our Reproducible Builds system at Arch Linux has flagged reproducible builds issues in software using miniupnp. Embedding the kernel version in the binary is causing reproducible builds issues:
│ │ │ -User-Agent: Linux/5.7.9-arch1-1, UPnP/1.1, MiniUPnPc/2.0
│ │ │ +User-Agent: Linux/5.11.16-arch1-1, UPnP/1.1, MiniUPnPc/2.0

If you insist on using the kernel version I'd recommend to run uname at runtime because that's likely the value you're actually interested in.
Related to transmission/transmission#1696",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,548,2021-05-21T21:12:03Z,2021-05-21T22:09:28Z,2021-05-21T22:09:28Z,MERGED,True,0,1,1,https://github.com/past-due,[CMake] Only include listdevices.c as part of the listdevices executable,1,[],https://github.com/miniupnp/miniupnp/pull/548,https://github.com/past-due,1,https://github.com/miniupnp/miniupnp/pull/548,"Currently, listdevices.c is included in MINIUPNPC_SOURCES, and thus it is included / built as part of the libminiupnpc-static & libminiupnpc-shared library targets.
This can cause issues with certain build systems / targets. (I.e. Potentially overriding main for an executable that links to libminiupnpc-static, depending on a number of factors.)
@miniupnp","Currently, listdevices.c is included in MINIUPNPC_SOURCES, and thus it is included / built as part of the libminiupnpc-static & libminiupnpc-shared library targets.
This can cause issues with certain build systems / targets. (I.e. Potentially overriding main for an executable that links to libminiupnpc-static, depending on a number of factors.)
@miniupnp",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,552,2021-06-17T07:13:03Z,2021-06-17T07:25:41Z,2021-07-29T06:42:39Z,MERGED,True,1,1,1,https://github.com/fanquake,Fix `__STDC_VERSION__` check in upnpdev.h,1,[],https://github.com/miniupnp/miniupnp/pull/552,https://github.com/fanquake,1,https://github.com/miniupnp/miniupnp/pull/552,"Note that __STDC_VERSION__ version checks are currently performed 3 different ways in this codebase. Not sure if you want to consolidate how they are done? The other two being:

  
    
      miniupnp/miniupnpc/miniupnpctypes.h
    
    
         Line 10
      in
      7783ac1
    
  
  
    

        
          
           #if (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) 
        
    
  



  
    
      miniupnp/miniupnpd/netfilter_nft/nftnlrdr_misc.c
    
    
         Line 52
      in
      2254e89
    
  
  
    

        
          
           #if defined(DEBUG) && (__STDC_VERSION__ >= 199901L) && (__GNUC__ >= 3)","Note that __STDC_VERSION__ version checks are currently performed 3 different ways in this codebase. Not sure if you want to consolidate how they are done? The other two being:

  
    
      miniupnp/miniupnpc/miniupnpctypes.h
    
    
         Line 10
      in
      7783ac1
    
  
  
    

        
          
           #if (defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) 
        
    
  



  
    
      miniupnp/miniupnpd/netfilter_nft/nftnlrdr_misc.c
    
    
         Line 52
      in
      2254e89
    
  
  
    

        
          
           #if defined(DEBUG) && (__STDC_VERSION__ >= 199901L) && (__GNUC__ >= 3)",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,553,2021-07-15T08:34:29Z,2021-08-21T07:52:06Z,2021-08-21T07:52:06Z,MERGED,True,2,0,1,https://github.com/ncopa,miniupnpd: don't check for glibc version with musl,1,[],https://github.com/miniupnp/miniupnp/pull/553,https://github.com/ncopa,1,https://github.com/miniupnp/miniupnp/pull/553,"Test that ldd is from GLIBC before exctracting the GLIBC_VERSION. This
is not needed with musl libc.","Test that ldd is from GLIBC before exctracting the GLIBC_VERSION. This
is not needed with musl libc.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,554,2021-07-15T10:26:18Z,2021-08-06T17:09:47Z,2021-08-06T17:09:47Z,MERGED,True,4,0,1,https://github.com/ncopa,miniupnpd: improve error message for bad config,1,[],https://github.com/miniupnp/miniupnp/pull/554,https://github.com/ncopa,1,https://github.com/miniupnp/miniupnp/pull/554,"Improve error message so users don't need read the source to figure out
why miniupnpd refuses to start even if the usage is correct.","Improve error message so users don't need read the source to figure out
why miniupnpd refuses to start even if the usage is correct.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,555,2021-07-19T20:39:59Z,2021-10-17T08:42:35Z,2021-10-17T11:38:29Z,MERGED,True,2,2,1,https://github.com/SpaceIm,CMake: fix cross-build to iOS/tvOS/watchOS,1,[],https://github.com/miniupnp/miniupnp/pull/555,https://github.com/SpaceIm,1,https://github.com/miniupnp/miniupnp/pull/555,"Cross-compilation of miniupnpc to iOS/tvOS/watchOS fails:
Compilation errors
[5/16] Building C object source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o
FAILED: source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNP_STATICLIB -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -Isource_subfolder/miniupnpc -O3 -DNDEBUG  -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.2.sdk -miphoneos-version-min=12.0 -fPIC -MD -MT source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o -MF source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o.d -o source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o -c source_subfolder/miniupnpc/minissdpc.c
source_subfolder/miniupnpc/minissdpc.c:690:35: error: use of undeclared identifier 'IP_MULTICAST_TTL'
                if(setsockopt(sudp, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl)) < 0)
                                                ^
source_subfolder/miniupnpc/minissdpc.c:733:20: error: use of undeclared identifier 'INADDR_NONE'
                                mc_if.s_addr = INADDR_NONE;
                                               ^
source_subfolder/miniupnpc/minissdpc.c:736:23: error: use of undeclared identifier 'INADDR_NONE'
                        if(mc_if.s_addr != INADDR_NONE)
                                           ^
source_subfolder/miniupnpc/minissdpc.c:739:37: error: use of undeclared identifier 'IP_MULTICAST_IF'
                                if(setsockopt(sudp, IPPROTO_IP, IP_MULTICAST_IF, (const char *)&mc_if, sizeof(mc_if)) < 0)
                                                                ^
source_subfolder/miniupnpc/minissdpc.c:749:18: error: variable has incomplete type 'struct ifreq'
                                struct ifreq ifr;
                                             ^
source_subfolder/miniupnpc/minissdpc.c:749:12: note: forward declaration of 'struct ifreq'
                                struct ifreq ifr;
                                       ^
source_subfolder/miniupnpc/minissdpc.c:751:40: error: use of undeclared identifier 'IFNAMSIZ'
                                strncpy(ifr.ifr_name, multicastif, IFNAMSIZ);
                                                                   ^
source_subfolder/miniupnpc/minissdpc.c:752:18: error: use of undeclared identifier 'IFNAMSIZ'
                                ifr.ifr_name[IFNAMSIZ-1] = '\0';
                                             ^
source_subfolder/miniupnpc/minissdpc.c:753:20: error: invalid application of 'sizeof' to an incomplete type 'struct ifreq'
                                if(ioctl(sudp, SIOCGIFADDR, &ifr, &ifrlen) < 0)
                                               ^~~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.2.sdk/usr/include/sys/sockio.h:94:25: note: expanded from macro 'SIOCGIFADDR'
#define SIOCGIFADDR     _IOWR('i', 33, struct ifreq)    /* get ifnet address */
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.2.sdk/usr/include/sys/ioccom.h:97:53: note: expanded from macro '_IOWR'
#define _IOWR(g, n, t)    _IOC(IOC_INOUT,       (g), (n), sizeof(t))
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.2.sdk/usr/include/sys/ioccom.h:92:13: note: expanded from macro '_IOC'
        (inout | ((len & IOCPARM_MASK) << 16) | ((group) << 8) | (num))
                   ^~~
source_subfolder/miniupnpc/minissdpc.c:749:12: note: forward declaration of 'struct ifreq'
                                struct ifreq ifr;
                                       ^
source_subfolder/miniupnpc/minissdpc.c:775:37: error: use of undeclared identifier 'IP_MULTICAST_IF'
                                if(setsockopt(sudp, IPPROTO_IP, IP_MULTICAST_IF, (const char *)&mc_if, sizeof(mc_if)) < 0)
                                                                ^
9 errors generated.
[15/16] Building C object source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/miniwget.c.o
ninja: build stopped: subcommand failed.


CMAKE_SYSTEM_NAME is not Darwin for these hosts. I could repeat CMAKE_SYSTEM_NAME for all these OS, but APPLE variable avoids boilerplate.","Cross-compilation of miniupnpc to iOS/tvOS/watchOS fails:
Compilation errors
[5/16] Building C object source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o
FAILED: source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNP_STATICLIB -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -Isource_subfolder/miniupnpc -O3 -DNDEBUG  -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.2.sdk -miphoneos-version-min=12.0 -fPIC -MD -MT source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o -MF source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o.d -o source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o -c source_subfolder/miniupnpc/minissdpc.c
source_subfolder/miniupnpc/minissdpc.c:690:35: error: use of undeclared identifier 'IP_MULTICAST_TTL'
                if(setsockopt(sudp, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl)) < 0)
                                                ^
source_subfolder/miniupnpc/minissdpc.c:733:20: error: use of undeclared identifier 'INADDR_NONE'
                                mc_if.s_addr = INADDR_NONE;
                                               ^
source_subfolder/miniupnpc/minissdpc.c:736:23: error: use of undeclared identifier 'INADDR_NONE'
                        if(mc_if.s_addr != INADDR_NONE)
                                           ^
source_subfolder/miniupnpc/minissdpc.c:739:37: error: use of undeclared identifier 'IP_MULTICAST_IF'
                                if(setsockopt(sudp, IPPROTO_IP, IP_MULTICAST_IF, (const char *)&mc_if, sizeof(mc_if)) < 0)
                                                                ^
source_subfolder/miniupnpc/minissdpc.c:749:18: error: variable has incomplete type 'struct ifreq'
                                struct ifreq ifr;
                                             ^
source_subfolder/miniupnpc/minissdpc.c:749:12: note: forward declaration of 'struct ifreq'
                                struct ifreq ifr;
                                       ^
source_subfolder/miniupnpc/minissdpc.c:751:40: error: use of undeclared identifier 'IFNAMSIZ'
                                strncpy(ifr.ifr_name, multicastif, IFNAMSIZ);
                                                                   ^
source_subfolder/miniupnpc/minissdpc.c:752:18: error: use of undeclared identifier 'IFNAMSIZ'
                                ifr.ifr_name[IFNAMSIZ-1] = '\0';
                                             ^
source_subfolder/miniupnpc/minissdpc.c:753:20: error: invalid application of 'sizeof' to an incomplete type 'struct ifreq'
                                if(ioctl(sudp, SIOCGIFADDR, &ifr, &ifrlen) < 0)
                                               ^~~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.2.sdk/usr/include/sys/sockio.h:94:25: note: expanded from macro 'SIOCGIFADDR'
#define SIOCGIFADDR     _IOWR('i', 33, struct ifreq)    /* get ifnet address */
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.2.sdk/usr/include/sys/ioccom.h:97:53: note: expanded from macro '_IOWR'
#define _IOWR(g, n, t)    _IOC(IOC_INOUT,       (g), (n), sizeof(t))
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.2.sdk/usr/include/sys/ioccom.h:92:13: note: expanded from macro '_IOC'
        (inout | ((len & IOCPARM_MASK) << 16) | ((group) << 8) | (num))
                   ^~~
source_subfolder/miniupnpc/minissdpc.c:749:12: note: forward declaration of 'struct ifreq'
                                struct ifreq ifr;
                                       ^
source_subfolder/miniupnpc/minissdpc.c:775:37: error: use of undeclared identifier 'IP_MULTICAST_IF'
                                if(setsockopt(sudp, IPPROTO_IP, IP_MULTICAST_IF, (const char *)&mc_if, sizeof(mc_if)) < 0)
                                                                ^
9 errors generated.
[15/16] Building C object source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/miniwget.c.o
ninja: build stopped: subcommand failed.


CMAKE_SYSTEM_NAME is not Darwin for these hosts. I could repeat CMAKE_SYSTEM_NAME for all these OS, but APPLE variable avoids boilerplate.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,555,2021-07-19T20:39:59Z,2021-10-17T08:42:35Z,2021-10-17T11:38:29Z,MERGED,True,2,2,1,https://github.com/SpaceIm,CMake: fix cross-build to iOS/tvOS/watchOS,1,[],https://github.com/miniupnp/miniupnp/pull/555,https://github.com/scribam,2,https://github.com/miniupnp/miniupnp/pull/555#issuecomment-944918050,"Cross-compilation of miniupnpc to iOS/tvOS/watchOS fails:
Compilation errors
[5/16] Building C object source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o
FAILED: source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -DMINIUPNPC_SET_SOCKET_TIMEOUT -DMINIUPNP_STATICLIB -D_BSD_SOURCE -D_DEFAULT_SOURCE -D_XOPEN_SOURCE=600 -Isource_subfolder/miniupnpc -O3 -DNDEBUG  -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.2.sdk -miphoneos-version-min=12.0 -fPIC -MD -MT source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o -MF source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o.d -o source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/minissdpc.c.o -c source_subfolder/miniupnpc/minissdpc.c
source_subfolder/miniupnpc/minissdpc.c:690:35: error: use of undeclared identifier 'IP_MULTICAST_TTL'
                if(setsockopt(sudp, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, sizeof(ttl)) < 0)
                                                ^
source_subfolder/miniupnpc/minissdpc.c:733:20: error: use of undeclared identifier 'INADDR_NONE'
                                mc_if.s_addr = INADDR_NONE;
                                               ^
source_subfolder/miniupnpc/minissdpc.c:736:23: error: use of undeclared identifier 'INADDR_NONE'
                        if(mc_if.s_addr != INADDR_NONE)
                                           ^
source_subfolder/miniupnpc/minissdpc.c:739:37: error: use of undeclared identifier 'IP_MULTICAST_IF'
                                if(setsockopt(sudp, IPPROTO_IP, IP_MULTICAST_IF, (const char *)&mc_if, sizeof(mc_if)) < 0)
                                                                ^
source_subfolder/miniupnpc/minissdpc.c:749:18: error: variable has incomplete type 'struct ifreq'
                                struct ifreq ifr;
                                             ^
source_subfolder/miniupnpc/minissdpc.c:749:12: note: forward declaration of 'struct ifreq'
                                struct ifreq ifr;
                                       ^
source_subfolder/miniupnpc/minissdpc.c:751:40: error: use of undeclared identifier 'IFNAMSIZ'
                                strncpy(ifr.ifr_name, multicastif, IFNAMSIZ);
                                                                   ^
source_subfolder/miniupnpc/minissdpc.c:752:18: error: use of undeclared identifier 'IFNAMSIZ'
                                ifr.ifr_name[IFNAMSIZ-1] = '\0';
                                             ^
source_subfolder/miniupnpc/minissdpc.c:753:20: error: invalid application of 'sizeof' to an incomplete type 'struct ifreq'
                                if(ioctl(sudp, SIOCGIFADDR, &ifr, &ifrlen) < 0)
                                               ^~~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.2.sdk/usr/include/sys/sockio.h:94:25: note: expanded from macro 'SIOCGIFADDR'
#define SIOCGIFADDR     _IOWR('i', 33, struct ifreq)    /* get ifnet address */
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.2.sdk/usr/include/sys/ioccom.h:97:53: note: expanded from macro '_IOWR'
#define _IOWR(g, n, t)    _IOC(IOC_INOUT,       (g), (n), sizeof(t))
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS14.2.sdk/usr/include/sys/ioccom.h:92:13: note: expanded from macro '_IOC'
        (inout | ((len & IOCPARM_MASK) << 16) | ((group) << 8) | (num))
                   ^~~
source_subfolder/miniupnpc/minissdpc.c:749:12: note: forward declaration of 'struct ifreq'
                                struct ifreq ifr;
                                       ^
source_subfolder/miniupnpc/minissdpc.c:775:37: error: use of undeclared identifier 'IP_MULTICAST_IF'
                                if(setsockopt(sudp, IPPROTO_IP, IP_MULTICAST_IF, (const char *)&mc_if, sizeof(mc_if)) < 0)
                                                                ^
9 errors generated.
[15/16] Building C object source_subfolder/miniupnpc/CMakeFiles/libminiupnpc-static.dir/miniwget.c.o
ninja: build stopped: subcommand failed.


CMAKE_SYSTEM_NAME is not Darwin for these hosts. I could repeat CMAKE_SYSTEM_NAME for all these OS, but APPLE variable avoids boilerplate.",I have the same compilation errors and can confirm these changes fix them.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,557,2021-08-06T14:35:22Z,2021-08-11T12:49:20Z,2021-08-11T12:49:20Z,MERGED,True,1,0,1,https://github.com/pali,miniupnpd: Disable port forwarding when upstream interface is down,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/557,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/557,"Obviously port forwarding cannot work when upstream interface is down. So
correctly report status code for port forwarding requests to clients in
this case.","Obviously port forwarding cannot work when upstream interface is down. So
correctly report status code for port forwarding requests to clients in
this case.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,557,2021-08-06T14:35:22Z,2021-08-11T12:49:20Z,2021-08-11T12:49:20Z,MERGED,True,1,0,1,https://github.com/pali,miniupnpd: Disable port forwarding when upstream interface is down,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/557,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/557#issuecomment-896785661,"Obviously port forwarding cannot work when upstream interface is down. So
correctly report status code for port forwarding requests to clients in
this case.",I think it is missing some code to enable again when network is up again,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,557,2021-08-06T14:35:22Z,2021-08-11T12:49:20Z,2021-08-11T12:49:20Z,MERGED,True,1,0,1,https://github.com/pali,miniupnpd: Disable port forwarding when upstream interface is down,1,['miniupnpd'],https://github.com/miniupnp/miniupnp/pull/557,https://github.com/pali,3,https://github.com/miniupnp/miniupnp/pull/557#issuecomment-896789925,"Obviously port forwarding cannot work when upstream interface is down. So
correctly report status code for port forwarding requests to clients in
this case.","Reenabling is already implemented in this block:

  
    
      miniupnp/miniupnpd/miniupnpd.c
    
    
        Lines 2524 to 2535
      in
      7ee554d
    
  
  
    

        
          
           if (getifaddr(ext_if_name, if_addr, INET_ADDRSTRLEN, &addr, NULL) == 0) { 
        

        
          
           	int reserved = addr_is_reserved(&addr); 
        

        
          
           	if (disable_port_forwarding && !reserved) { 
        

        
          
           		syslog(LOG_INFO, ""Public IP address %s on ext interface %s: Port forwarding is enabled"", if_addr, ext_if_name); 
        

        
          
           	} else if (!disable_port_forwarding && reserved) { 
        

        
          
           		syslog(LOG_INFO, ""Reserved / private IP address %s on ext interface %s: Port forwarding is impossible"", if_addr, ext_if_name); 
        

        
          
           		syslog(LOG_INFO, ""You are probably behind NAT, enable option ext_perform_stun=yes to detect public IP address""); 
        

        
          
           		syslog(LOG_INFO, ""Or use ext_ip= / -o option to declare public IP address""); 
        

        
          
           		syslog(LOG_INFO, ""Public IP address is required by UPnP/PCP/PMP protocols and clients do not work without it""); 
        

        
          
           	} 
        

        
          
           	disable_port_forwarding = reserved; 
        

        
          
           }",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,558,2021-08-06T15:46:05Z,2021-08-06T17:04:16Z,2021-08-07T12:33:28Z,MERGED,True,59,2,3,https://github.com/pali,Extend GitHub workflows for Windows,3,[],https://github.com/miniupnp/miniupnp/pull/558,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/558,Add support for i586-mingw32msvc and x86_64-w64-mingw32 cross-compilers into Github CI like it was in old Travis CI.,Add support for i586-mingw32msvc and x86_64-w64-mingw32 cross-compilers into Github CI like it was in old Travis CI.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,559,2021-08-13T05:59:53Z,2021-09-28T21:47:21Z,2021-10-17T08:45:55Z,MERGED,True,329,313,61,https://github.com/miniupnp,Include dir,10,[],https://github.com/miniupnp/miniupnp/pull/559,https://github.com/miniupnp,1,https://github.com/miniupnp/miniupnp/pull/559,fixes #540,fixes #540,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,560,2021-08-17T00:50:20Z,2021-08-19T08:08:08Z,2021-08-19T08:08:08Z,MERGED,True,1,1,1,https://github.com/stefantalpalaru,miniupnpc: don't assume '.' is in the Windows PATH,1,[],https://github.com/miniupnp/miniupnp/pull/560,https://github.com/stefantalpalaru,1,https://github.com/miniupnp/miniupnp/pull/560,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,561,2021-08-17T08:15:27Z,2021-08-18T10:36:21Z,2021-08-18T10:36:21Z,MERGED,True,580,5,7,https://github.com/svenauhagen,IPv6 pinholes lease file,1,[],https://github.com/miniupnp/miniupnp/pull/561,https://github.com/svenauhagen,1,https://github.com/miniupnp/miniupnp/pull/561,"This patch adds a lease file for IPv6 pinholes.
The leases are maintained and readded when miniupnpd restarts.
Currently all IPv6 leases are lost on restart.
There is an open request for #18
Please let me know if there should be any changes.
Best
Sven","This patch adds a lease file for IPv6 pinholes.
The leases are maintained and readded when miniupnpd restarts.
Currently all IPv6 leases are lost on restart.
There is an open request for #18
Please let me know if there should be any changes.
Best
Sven",True,{'HEART': ['https://github.com/Neustradamus']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,561,2021-08-17T08:15:27Z,2021-08-18T10:36:21Z,2021-08-18T10:36:21Z,MERGED,True,580,5,7,https://github.com/svenauhagen,IPv6 pinholes lease file,1,[],https://github.com/miniupnp/miniupnp/pull/561,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/561#issuecomment-900944926,"This patch adds a lease file for IPv6 pinholes.
The leases are maintained and readded when miniupnpd restarts.
Currently all IPv6 leases are lost on restart.
There is an open request for #18
Please let me know if there should be any changes.
Best
Sven",I guess it is missing a few #ifdef ENABLE_IPV6,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,561,2021-08-17T08:15:27Z,2021-08-18T10:36:21Z,2021-08-18T10:36:21Z,MERGED,True,580,5,7,https://github.com/svenauhagen,IPv6 pinholes lease file,1,[],https://github.com/miniupnp/miniupnp/pull/561,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/561#issuecomment-900945741,"This patch adds a lease file for IPv6 pinholes.
The leases are maintained and readded when miniupnpd restarts.
Currently all IPv6 leases are lost on restart.
There is an open request for #18
Please let me know if there should be any changes.
Best
Sven","I guess it is missing a few #ifdef ENABLE_IPV6

or #ifdef ENABLE_UPNPPINHOLE",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,561,2021-08-17T08:15:27Z,2021-08-18T10:36:21Z,2021-08-18T10:36:21Z,MERGED,True,580,5,7,https://github.com/svenauhagen,IPv6 pinholes lease file,1,[],https://github.com/miniupnp/miniupnp/pull/561,https://github.com/svenauhagen,4,https://github.com/miniupnp/miniupnp/pull/561#issuecomment-900952769,"This patch adds a lease file for IPv6 pinholes.
The leases are maintained and readded when miniupnpd restarts.
Currently all IPv6 leases are lost on restart.
There is an open request for #18
Please let me know if there should be any changes.
Best
Sven","Hi, I used #ifdef ENABLE_UPNPPINHOLE in most of the places.
The entire file upnppinhole.c is wrapped in ENABLE_UPNPPINHOLE.
I only left it out in the globavars and options files.
Do you think it it better to add it there as well?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,561,2021-08-17T08:15:27Z,2021-08-18T10:36:21Z,2021-08-18T10:36:21Z,MERGED,True,580,5,7,https://github.com/svenauhagen,IPv6 pinholes lease file,1,[],https://github.com/miniupnp/miniupnp/pull/561,https://github.com/miniupnp,5,https://github.com/miniupnp/miniupnp/pull/561#issuecomment-900954215,"This patch adds a lease file for IPv6 pinholes.
The leases are maintained and readded when miniupnpd restarts.
Currently all IPv6 leases are lost on restart.
There is an open request for #18
Please let me know if there should be any changes.
Best
Sven","Hi, I used #ifdef ENABLE_UPNPPINHOLE in most of the places.
The entire file upnppinhole.c is wrapped in ENABLE_UPNPPINHOLE.
I only left it out in the globavars and options files.
Do you think it it better to add it there as well?

yes.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,561,2021-08-17T08:15:27Z,2021-08-18T10:36:21Z,2021-08-18T10:36:21Z,MERGED,True,580,5,7,https://github.com/svenauhagen,IPv6 pinholes lease file,1,[],https://github.com/miniupnp/miniupnp/pull/561,https://github.com/svenauhagen,6,https://github.com/miniupnp/miniupnp/pull/561#issuecomment-900989369,"This patch adds a lease file for IPv6 pinholes.
The leases are maintained and readded when miniupnpd restarts.
Currently all IPv6 leases are lost on restart.
There is an open request for #18
Please let me know if there should be any changes.
Best
Sven",I updated the commit and wrapped everything in a #ifdef ENABLE_UPNPPINHOLE,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,562,2021-08-18T15:43:59Z,2021-11-17T11:36:19Z,2021-11-17T11:36:19Z,MERGED,True,49,88,7,https://github.com/svenauhagen,NFTables use inet nat chain,1,"['miniupnpd', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/562,https://github.com/svenauhagen,1,https://github.com/miniupnp/miniupnp/pull/562,"NFTables supports inet in the nat chain as well.
Use it instead of IPv4 chain so it is consistent with the filter chain.
This also removes the need for two separate tables to manage.
This is the linked to #422 and the first commit to fix it.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de","NFTables supports inet in the nat chain as well.
Use it instead of IPv4 chain so it is consistent with the filter chain.
This also removes the need for two separate tables to manage.
This is the linked to #422 and the first commit to fix it.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,562,2021-08-18T15:43:59Z,2021-11-17T11:36:19Z,2021-11-17T11:36:19Z,MERGED,True,49,88,7,https://github.com/svenauhagen,NFTables use inet nat chain,1,"['miniupnpd', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/562,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/562#issuecomment-901700616,"NFTables supports inet in the nat chain as well.
Use it instead of IPv4 chain so it is consistent with the filter chain.
This also removes the need for two separate tables to manage.
This is the linked to #422 and the first commit to fix it.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de","@svenauhagen thank you for the work. I supposed it is well tested.
I guess I should release another 2.2.X version with minor fixes before merging this.
by the way, signaling this is linked to #422",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,562,2021-08-18T15:43:59Z,2021-11-17T11:36:19Z,2021-11-17T11:36:19Z,MERGED,True,49,88,7,https://github.com/svenauhagen,NFTables use inet nat chain,1,"['miniupnpd', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/562,https://github.com/svenauhagen,3,https://github.com/miniupnp/miniupnp/pull/562#issuecomment-901703264,"NFTables supports inet in the nat chain as well.
Use it instead of IPv4 chain so it is consistent with the filter chain.
This also removes the need for two separate tables to manage.
This is the linked to #422 and the first commit to fix it.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de","@miniupnp I ran miniupnpd with that patch for the past year and I tested it again the last days on the master branch to make sure it works.
I have two more PRs coming based on this one to fix #422 .
I split them up so it is easier to see what has changed.",True,{'THUMBS_UP': ['https://github.com/miniupnp']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,562,2021-08-18T15:43:59Z,2021-11-17T11:36:19Z,2021-11-17T11:36:19Z,MERGED,True,49,88,7,https://github.com/svenauhagen,NFTables use inet nat chain,1,"['miniupnpd', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/562,https://github.com/miniupnp,4,https://github.com/miniupnp/miniupnp/pull/562#issuecomment-970721110,"NFTables supports inet in the nat chain as well.
Use it instead of IPv4 chain so it is consistent with the filter chain.
This also removes the need for two separate tables to manage.
This is the linked to #422 and the first commit to fix it.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de",@svenauhagen so I merge this one and you have more coming ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,562,2021-08-18T15:43:59Z,2021-11-17T11:36:19Z,2021-11-17T11:36:19Z,MERGED,True,49,88,7,https://github.com/svenauhagen,NFTables use inet nat chain,1,"['miniupnpd', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/562,https://github.com/svenauhagen,5,https://github.com/miniupnp/miniupnp/pull/562#issuecomment-971208812,"NFTables supports inet in the nat chain as well.
Use it instead of IPv4 chain so it is consistent with the filter chain.
This also removes the need for two separate tables to manage.
This is the linked to #422 and the first commit to fix it.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de","@miniupnp yes, I have two more coming:
https://github.com/svenauhagen/miniupnp/commits/feature/nftablesnatname
and
https://github.com/svenauhagen/miniupnp/commits/feature/nftablesinit
I can create the next PR when you merged this one.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,563,2021-08-22T07:58:38Z,2021-08-22T21:14:11Z,2021-08-22T21:14:11Z,MERGED,True,2,1,1,https://github.com/mgorny,Fix testgetifaddr.sh for less common network environments,2,[],https://github.com/miniupnp/miniupnp/pull/563,https://github.com/mgorny,1,https://github.com/miniupnp/miniupnp/pull/563,"Fixes testgetifaddr.sh test failures in two situations:

when there is no default route.
when the tested interface has more than one IP address.","Fixes testgetifaddr.sh test failures in two situations:

when there is no default route.
when the tested interface has more than one IP address.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,564,2021-08-31T19:59:53Z,2021-09-01T14:44:32Z,2021-09-01T14:44:32Z,MERGED,True,17,7,1,https://github.com/pali,miniupnpd: Add some missing checks when update_ext_ip_addr_from_stun() or getifaddr() fails,1,[],https://github.com/miniupnp/miniupnp/pull/564,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/564,"There is missing corner case check when these functions return failure.
Network in this case does not work, so disable port forwarding to prevent
returning incorrect response about port forwarding state.
Also explicitly set disable_port_forwarding to 0 on success to make code
more readable.","There is missing corner case check when these functions return failure.
Network in this case does not work, so disable port forwarding to prevent
returning incorrect response about port forwarding state.
Also explicitly set disable_port_forwarding to 0 on success to make code
more readable.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,1,https://github.com/miniupnp/miniupnp/pull/565,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,2,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-910540256,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","@miniupnp Please look at this change and tell me what do you think about it. If you like it or not... I'm just trying to add some ""selftest"" which checks that miniupnpd could work with actual configuration on running machine.
In any case, some more testing needs to be done...",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-910871951,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","you know I don't like system() calls ;)
wouldn't it be preferable to provide a testing program ?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,4,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-910882737,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","That system() is in #ifdef TEST_LINUX_DEBUG_APP. Meaning this is just test/debug part of code which I used for testing this test code :)
If you do not like that part behind #ifdef TEST_LINUX_DEBUG_APP (where is system() call) then it can be fully removed. I just let it there as somebody in future could be interesting in extending this code and testing could be useful.
And anyway, this #ifdef TEST_LINUX_DEBUG_APP is testing program.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/miniupnp,5,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-917414174,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","@pali by the way what exactly does the test ?  just check that add_filter_rule2() does its job ?
As the packets are not coming from a remote host, I'm not sure that is really useful",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,6,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-917415644,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","Yes, it checks that add_filter_rule2() works. As written in above description it eliminates issues when iptables is incorrectly configured to never call rules added by miniupnpd.
And second test which is does: when wan interface ip address does not match ext_ip= option (situation for NAT 1:1 or DMZ or other similar fancy setup with address translation) then test that external ip address can really forward packets to (internal) interface ip address -- and so it is not CGNAT or any other non-full-cone NAT which basically do not forward packets to miniupnpd machine.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,7,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-922247546,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.",So in setup when ext_ip is specified this test checks that this ext_ip option is valid. It prevents situation when in ext_ip option is a typo and by mistake incorrect external ip address was specified (which means that miniupnpd cannot work).,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/ptpt52,8,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-930494998,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","You have made things too complicated. Even in a double nat environment, miniupnpd should only do a simple thing, which is to do port redirect directly, regardless of whether it is public ip or not, whether it is 1:1 nat or what.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/ptpt52,9,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-930497308,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","You should look at how huawei router handles these situations, or other router manufacturers, tplink or Cisco, they do not use miniupnpd implementations, they are just simple tasks.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,10,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-930503921,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","See explanation in the first post. These checks are here to prevent problems when users start miniupnpd with incorrect parameters or configuration file and then complain that miniupnpd does not work. These checks and output from them will help to debug future issues (to both users and also people who resolving reported issues).
If other manufactures have software with less checks, it does not mean that also miniupnpd should do same thing and do not provide more checks and detailed output for debugging.
And in any case, miniupnpd has to know public ip address, so some more work is needed and simple stuff is not enough.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/ptpt52,11,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-930504294,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","what about this top:
client--RouterA(miniupnpd)---RouterB(full cone NAT)---internet
how does the miniupnpd should work?

if client request port mapping?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,12,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-930506314,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","what about this top: client--RouterA(miniupnpd)---RouterB(full cone NAT)---internet
how does the miniupnpd should work?

if client request port mapping?


EDIT: sorry, my original answer was wrong. In full cone NAT setup port forwarding is possible. I wrongly read NAT type. Full cone NAT is 1:1 when upstream router forward all traffic to downstream router, just changes destination IP address in every IP packet.
So if IGD UPnP software is aware of full cone NAT then it should normally process port mapping request.
miniupnpd is now aware of this kind of setup if you enable perform stun option or if you provide directly external ip address. This pull request add another check that miniupnpd correctly works in this full cone NAT setup.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/ptpt52,13,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-930555322,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","what about this top: client--RouterA(miniupnpd)---RouterB(full cone NAT)---internet
how does the miniupnpd should work?

if client request port mapping?


EDIT: sorry, my original answer was wrong. In full cone NAT setup port forwarding is possible. I wrongly read NAT type. Full cone NAT is 1:1 when upstream router forward all traffic to downstream router, just changes destination IP address in every IP packet.
So if IGD UPnP software is aware of full cone NAT then it should normally process port mapping request.
miniupnpd is now aware of this kind of setup if you enable perform stun option or if you provide directly external ip address. This pull request add another check that miniupnpd correctly works in this full cone NAT setup.

ok.
I notice some issue in stun check.
some full-cone-nat router do 1:1 map, but use random external port
say:
externel_random_wan_port--->lan_port

it is not symmetric NAT but the code in miniupnpd
515         for (i = 0; i < 4; ++i) {
516                 if (!(have_mapped_addr & (1 << i)))
517                         continue;
518                 if (ntohs(mapped_addrs[i].sin_port) != local_ports[i] || memcmp(&mapped_addrs[i].sin_addr, ext_addr, sizeof(*ext_addr)) != 0) {
519                         /* External IP address or port was changed,
520                          * therefore symmetric NAT is active */
521                         syslog(LOG_NOTICE, ""%s: #%d external address or port changed"",
522                                ""perform_stun"", i);
523                         *restrictive_nat = 1;
524                 }
525         }

just check port changed and simple assume it is symmetric NAT but it is not.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,14,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-930564671,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","some full-cone-nat router do 1:1 map, but use random external port

Then this is not full-cone nat 1:1 setup if it changes any port in packet. And in this case obviously UPnP IGD software cannot work.
If this kind of nat is not symmetric, but has some other name (sorry, I do not know correct terminology for other fancy setups), you could update comment. But in any case, it would not work.
Whole UPnP IGD software on router is designed only for normal peer to peer setup when no traffic is changed. Support for NAT 1:1 was added into miniupnpd just because it is possible to reconstruct what this NAT is doing and so making router behind NAT 1:1 to behave like if there is no NAT at all.
Anyway, this is off-topic for this pull request.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,15,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-939275027,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.",@miniupnp: any opinion?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/miniupnp,16,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-939311204,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","I'm still not convinced the proposed test are neither 100% correct nor really useful.
Firewall should not block the traffic coming from the WAN to the LAN and to the LAN to the WAN, but if you open a port mapping, there is no obligation that it should be open if coming from the LAN.
In my opinion, the only way to perform a correct test would be from the WAN.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,17,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-939442618,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","I understand your concerns. I will try to explain one of the used setups by internet games with server setup (when one of the player acted as server) where port forwarding is important role.
When e.g. 2 players are behind one public IPv4 address with IGD UPnP and other 2 players are on different part of Internet behind another public IPv4 address. One of these 4 players is chosen as server, ask IGD UPnP to forward required port and then all remaining 3 players access his server via IGD UPnP's public IPv4 address and port. So one client (which is on the same segment, behind same IPv4 address) target its packets from lan interface to miniupnpd's router IPv4 public address, and other two clients (which are on different part of Internet) access miniupnpd's router IPv4 public address from Internet wan. This setup was (or maybe still is) commonly used.
When translating this usage to those fancy setups with double NATs where NATs are 1:1 full-cone, then packets from local network targeting forwarded public IPv4 address and port must be sent from miniupnpd's router to upstream router which is doing that 1:1 full-cone NAT (because miniupnpd does not see public IPv4 address on wan interface). Upstream router then does that full-cone NATpacket mangling and send mangled packet back to the miniupnpd's router, which based on its UPnP forwarding table, route packet to the correct lan client.
One of checks in this pull request verify that above setup with those fancy double NATs are working correctly.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,18,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1032896373,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","Hello @pali I am quite interested in this pull request, as I am behind a Double NAT (full cone upstream), I debugged with the pfsense folks over here: https://forum.netgate.com/topic/154153/test-request-upnp-fix-for-multiple-consoles-playing-the-same-game-static-port-outbound-nat/116?_=1644324180096. Turns out the ""out of box"" config for filter.inc needed two extra lines. That got it using the miniupnp rules (they were not matched previously), but the double nat was waiting for me behind that problem.
It would all work flawlessly if miniupnp would write a NAT rule like this:
nat log quick on igb0 inet proto udp from 192.168.7.2 port = 3074 to any keep state label ""DemonwarePortMapping"" rtable 0 -> 10.4.2.34 port 3074
Instead of this:
nat log quick on igb0 inet proto udp from 192.168.7.2 port = 3074 to any keep state label ""DemonwarePortMapping"" rtable 0 -> 75.43.56.3 port 3074
Where 10.4.2.34 is the WAN interface IP and the 75.43.56.3 is the ext_ip.
If I use the ext_ip option, it uses the public IP in the NAT rule, which will never work. The upstream NAT device can't send traffic back, and probably tosses the packet because the source IP is invalid. If I use the STUN option, it errors out and tells me NATing is impossible, which I know isn't the case. I can make manual rules which do work, but that is not a long term fix.
I am happy to help test!
I am running pfsense 2.5.2 and miniupnpd 2.2.1.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,19,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1032940267,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","@encryptyd This pull request should help people behind double-nat or other similar setups to identify possible issues if something is incorrectly configured (as I explained in above comments).
Fixing configuration of fw rules for these network setups can be a next step after this... I see that double-nat or other network fancy setups are more and more common and people ask for it.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,20,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1032944205,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","Thanks @pali
I think one of the most helpful things would be a configuration option to allow private IP addresses on the WAN interface.
I saw that it was discussed in other posts, but seemed like it was never added. Where did that discussion end up?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,21,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1032948017,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","Full-cone NAT 1:1 setup on upstream router with private IP address on WAN interface on local router is already possible, just enable ext_perform_stun=yes option. But it requires that both local and upstream router is configured correctly. Code in this PR can help to avoid common misconfigurations.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,22,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1032952362,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","Interesting. There may be an issue with the way that check is performed?
If I enable the stun option, it says forwarding is not possible in the debug messages. I know that it is possible, because if I add the same exact rules manually (no upnp), it works flawlessly.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,23,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1032958207,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","So, apply this change and look at detailed debug error message what is wrong.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,24,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1032989010,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","It shows this (I masked out some of the address):
Feb  8 14:32:44 firewall miniupnpd[16443]: STUN: Performing with host=stun.stunprotocol.org and port=3478 ...
Feb  8 14:32:44 firewall miniupnpd[16443]: resolve_stun_host: stun.stunprotocol.org:3478 => 18.191.223.12:3478
Feb  8 14:32:44 firewall miniupnpd[16443]: perform_stun: local ports 35975 47849 46602 30491
Feb  8 14:32:44 firewall miniupnpd[16443]: wait_for_stun_responses: waiting 3 secs and 0 usecs
Feb  8 14:32:44 firewall miniupnpd[16443]: wait_for_stun_responses: received responses: 1
Feb  8 14:32:44 firewall miniupnpd[16443]: wait_for_stun_responses: waiting 3 secs and 0 usecs
Feb  8 14:32:47 firewall miniupnpd[16443]: wait_for_stun_responses: select(): no more responses
Feb  8 14:32:47 firewall miniupnpd[16443]: wait_for_stun_responses: waiting 3 secs and 0 usecs
Feb  8 14:32:51 firewall miniupnpd[16443]: wait_for_stun_responses: select(): no more responses
Feb  8 14:32:51 firewall miniupnpd[16443]: wait_for_stun_responses: waiting 3 secs and 0 usecs
Feb  8 14:32:54 firewall miniupnpd[16443]: wait_for_stun_responses: select(): no more responses
Feb  8 14:32:54 firewall miniupnpd[16443]: parse_stun_response: Type 0x0101, Length 48, Magic Cookie 2112a442
Feb  8 14:32:54 firewall miniupnpd[16443]: parse_stun_response: MAPPED-ADDRESS 65.93.X.X:35975
Feb  8 14:32:54 firewall miniupnpd[16443]: parse_stun_response: RESPONSE-ORIGIN 18.191.223.12:3478
Feb  8 14:32:54 firewall miniupnpd[16443]: parse_stun_response: OTHER-ADDRESS 18.219.110.18:3479
Feb  8 14:32:54 firewall miniupnpd[16443]: parse_stun_response: XOR-MAPPED-ADDRESS 65.93.X.X:35975
Feb  8 14:32:54 firewall miniupnpd[16443]: perform_stun: 1 response out of 4 received
Feb  8 14:32:54 firewall miniupnpd[16443]: STUN: ext interface igb0 with IP address 10.0.3.60 is now behind restrictive NAT with public IP address 65.93.X.X: Port forwarding is now impossible
If there truly is something I can ask my ISP to change, that may be possible. I have a direct channel to their admins.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,25,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1032994228,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","This is not output from the code from this pull request as it prints more information what is wrong... Anyway, this discussion starting to be too off-topic for this pull request, so probably move to separate issue.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,26,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1032996670,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","No problem I can move it. In regards to this specific pull request, is there a way I can test it directly? I would need instructions on how to put that new version on my firewall (pfsense 2.5.2).",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,27,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1033003563,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","Compile it from sources, there is Makefile for every system. If you do not know how, read instructions for your pfsense system (Sorry I do not know this system).",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,28,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1033130448,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","I've checkout out your PR, and unfortunately cannot get it to compile in FreeBSD 12.2. I would appreciate any suggestions.
The main branch compiles ok, but when I check out your code, I get the following errors:
./upnpforwardcheck.c:50:21: error: variable has incomplete type 'struct sockaddr_in'
struct sockaddr_in sockaddr;
^
./upnpforwardcheck.c:50:9: note: forward declaration of 'struct sockaddr_in'
struct sockaddr_in sockaddr;
^
./upnpforwardcheck.c:52:44: error: use of undeclared identifier 'IPPROTO_UDP'
*receive_fd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
^
./upnpforwardcheck.c:59:42: error: use of undeclared identifier 'SO_BINDTODEVICE'
if (setsockopt(*receive_fd, SOL_SOCKET, SO_BINDTODEVICE, if_name, strlen(if_name)) != 0) {
^
./upnpforwardcheck.c:68:22: warning: implicit declaration of function 'htons' is invalid in C99 [-Wimplicit-function-declaration]
sockaddr.sin_port = htons(0);
^
./upnpforwardcheck.c:85:18: warning: implicit declaration of function 'ntohs' is invalid in C99 [-Wimplicit-function-declaration]
*receive_port = ntohs(sockaddr.sin_port);
^
./upnpforwardcheck.c:87:41: error: use of undeclared identifier 'IPPROTO_UDP'
*send_fd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
^
./upnpforwardcheck.c:95:39: error: use of undeclared identifier 'SO_BINDTODEVICE'
if (setsockopt(*send_fd, SOL_SOCKET, SO_BINDTODEVICE, if_name, strlen(if_name)) != 0) {
^
./upnpforwardcheck.c:181:79: error: use of undeclared identifier 'IPPROTO_UDP'
if (add_filter_rule2(if_name, NULL, if_addr_str, receive_port, receive_port, IPPROTO_UDP, ""forwarding check"") < 0) {
^
./upnpforwardcheck.c:203:44: error: use of undeclared identifier 'IPPROTO_UDP'
delete_filter_rule(if_name, receive_port, IPPROTO_UDP);
^
2 warnings and 7 errors generated.
*** Error code 1",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,29,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1033135188,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","Ok, this needs to be fixed... Could you try to apply following change?
diff --git a/miniupnpd/upnpforwardcheck.c b/miniupnpd/upnpforwardcheck.c
index 48652cc89dd7..a7796d6247ad 100644
--- a/miniupnpd/upnpforwardcheck.c
+++ b/miniupnpd/upnpforwardcheck.c
@@ -8,6 +8,8 @@
 #include <sys/select.h>
 #include <sys/types.h>
 #include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
 #include <unistd.h>
 #include <netdb.h>
 #include <stdlib.h>",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,30,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1033149894,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","That certainly helped. Now down to just 2 compile errors:
cc -I. -DMINIUPNPD_GIT_REF=""pali/master-d454ea1"" -O2 -pipe -Wall -W -Wstrict-prototypes -fno-common -c -o upnpforwardcheck.o ./upnpforwardcheck.c
./upnpforwardcheck.c:61:42: error: use of undeclared identifier 'SO_BINDTODEVICE'
if (setsockopt(*receive_fd, SOL_SOCKET, SO_BINDTODEVICE, if_name, strlen(if_name)) != 0) {
^
./upnpforwardcheck.c:97:39: error: use of undeclared identifier 'SO_BINDTODEVICE'
if (setsockopt(*send_fd, SOL_SOCKET, SO_BINDTODEVICE, if_name, strlen(if_name)) != 0) {
^
2 errors generated.
*** Error code 1",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,31,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1033171723,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","Ok, here is fix for second part:
diff --git a/miniupnpd/upnpforwardcheck.c b/miniupnpd/upnpforwardcheck.c
index 48652cc89dd7..5e98966e79ff 100644
--- a/miniupnpd/upnpforwardcheck.c
+++ b/miniupnpd/upnpforwardcheck.c
@@ -56,11 +58,13 @@ static int create_sockets(const char *if_name, struct in_addr *send_addr, struct
 		return -1;
 	}
 
+#ifdef SO_BINDTODEVICE
 	if (setsockopt(*receive_fd, SOL_SOCKET, SO_BINDTODEVICE, if_name, strlen(if_name)) != 0) {
 		syslog(LOG_ERR, ""%s: setsockopt(SOL_SOCKET, SO_BINDTODEVICE, %s): %m"",
 		       ""create_sockets"", if_name);
 		return -1;
 	}
+#endif
 
 	memset(&sockaddr, 0, sizeof(sockaddr));
 	sockaddr.sin_family = AF_INET;
@@ -92,6 +96,7 @@ static int create_sockets(const char *if_name, struct in_addr *send_addr, struct
 		close(*receive_fd);
 	}
 
+#ifdef SO_BINDTODEVICE
 	if (setsockopt(*send_fd, SOL_SOCKET, SO_BINDTODEVICE, if_name, strlen(if_name)) != 0) {
 		syslog(LOG_ERR, ""%s: setsockopt(SOL_SOCKET, SO_BINDTODEVICE, %s): %m"",
 		       ""create_sockets"", if_name);
@@ -99,6 +104,7 @@ static int create_sockets(const char *if_name, struct in_addr *send_addr, struct
 		close(*send_fd);
 		return -1;
 	}
+#endif
 
 	memset(&sockaddr, 0, sizeof(sockaddr));
 	sockaddr.sin_family = AF_INET;",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,32,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1033175730,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","Almost there, thanks for helping. Looks like a linking issue now.
cc -O2 -pipe -Wall -W -Wstrict-prototypes -fno-common  -o miniupnpd miniupnpd.o upnphttp.o upnpdescgen.o upnpsoap.o  upnpredirect.o getifaddr.o daemonize.o upnpglobalvars.o  options.o upnppermissions.o minissdp.o natpmp.o pcpserver.o  pcplearndscp.o  upnpevents.o upnputils.o getconnstatus.o  upnpstun.o upnpforwardcheck.o  upnppinhole.o asyncsendto.o portinuse.o upnpreplyparse.o minixml.o getifstats.o ifacewatcher.o getroute.o ipfrdr.o -lkvm -lssl -lcrypto
ld: error: undefined symbol: delete_redirect_and_filter_rules



referenced by upnpredirect.c
upnpredirect.o:(_upnp_delete_redir)
referenced by upnpredirect.c
upnpredirect.o:(upnp_delete_redirection)
referenced by upnpredirect.c
upnpredirect.o:(get_upnp_rules_state_list)
referenced by upnpredirect.c
upnpredirect.o:(remove_unused_rules)



ld: error: undefined symbol: get_redirect_rule_count



referenced by upnpredirect.c
upnpredirect.o:(upnp_get_portmapping_number_of_entries)
cc: error: linker command failed with exit code 1 (use -v to see invocation)
*** Error code 1",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,33,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1033177827,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","This is linker error. Are you building it correctly? Probably you need to use Makefile.bsd.
EDIT: Also check that you selected --firewall=pf (I guess this is what you are using).",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,34,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1033180611,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","Yes, I was using the BSD makefile, but didn't notice it was using the ipf firewall, not pf. Changed that, and it has completed successfully.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,35,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1033186682,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","This is what it now shows in the log:
Feb  8 19:05:14 firewall miniupnpd[98465]: STUN: ext interface igb0 with private IP address 10.0.3.60 is now behind restrictive or symmetric NAT with public IP address 65.93.X.X which does not support port forwarding
Feb  8 19:05:14 firewall miniupnpd[98465]: NAT on upstream router blocks incoming connections set by miniupnpd
Feb  8 19:05:14 firewall miniupnpd[98465]: Turn off NAT on upstream router or change it to full-cone NAT 1:1 type
Feb  8 19:05:14 firewall miniupnpd[98465]: Port forwarding is now disabled",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,36,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1033189496,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","So now you see it... If igb0 is connected directly to ISP, you would have to ask your ISP to give you one exclusive IPv4 address (either directly or via full-cone NAT 1:1) and disable filtering on that address... Some of traffic is filtered on upstream igb0 network.",True,{'THUMBS_UP': ['https://github.com/Jon8RFC']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,37,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1033257033,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","I appreciate your help on this.
I will see if My ISP can change things on their end.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,38,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1033731214,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","I included above BSD compile fixes into git branch for this pull request.
@miniupnp Did you have a time to look my other comments / explanation about this PR? Due to big increase of usage of Double-NAT or DMZ setups, I think it really makes sense to add some tests and diagnostic help output to users...",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,39,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1034154514,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","I have one additional question @pali
I was hoping to test more of the version I compiled from your pull request using the ext_ip option.
This option allows miniupnpd to at least accept nat requests from clients in my netowrk setup, and it adds the rules into PF using the miniupnpd version that shipped with PFSense 2.5.2/FreeBSD 12.2/Miniupnpd 2.2.1).
When using the version I compiled from either your PR, or the master, neither will accept client port adds. I see this in the debug logs:
ioctl(dev, DIOCGETRULES, ...): Operation not supported by device
I attempted to create an account on the miniupnpd forum, but it seems their email activation is broken and I can't post there.
Any idea what might cause that error? I did some searching and found some very very old posts about it, but nothing current.
I'd appreciate any assistance/theories you can provide.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,40,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1034161832,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.",I have not touched anything related to ioctl/DIOCGETRULES and this looks like something bsd/pfsense specific about which I have absolutely no idea. For sure it is not related to those changes.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,41,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1035327891,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","@pali
I've checked with my ISP and they have verified on their end the following 3 things:

All new incoming traffic for my public IP is routed to my private WAN IP – unfiltered
Source & destination UDP and TCP ports are preserved during the IP NAT both inbound and outbound (only the IP address changes)
All outbound traffic is unfiltered

With that in mind, why would the STUN check fail? Is miniupnpd trying to add rules to the upstream router?",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/pali,42,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1035334107,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","Is miniupnpd trying to add rules to the upstream router?

No.

With that in mind, why would the STUN check fail?

In this case it looks like if firewall on box where is running miniupnpd is incorrectly configured and rules added by miniupnpd by runtime are ignored (or have lower priority). Try to completely disable any firewall or filtering on your local box where you are running miniupnpd.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,43,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1035494724,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.","@pali, thank you. That was the issue in getting STUN to finally work. I have to allow inbound traffic to the firewall IP.
I now see this in the log:
Feb 10 15:37:20 firewall miniupnpd[71397]: STUN: Performing with host=stun.stunprotocol.org and port=3478 ...
Feb 10 15:37:20 firewall miniupnpd[71397]: STUN: ext interface igb0 with IP address 10.0.3.60 is now behind unrestricted NAT 1:1 with public IP address 65.93.X.X: Port forwarding is now enabled
It is now finally adding nat rules as well, as follows:
miniupnpd rules/nat contents:
nat log quick on igb0 inet proto udp from 192.168.8.2 port = 3074 to any keep state label ""DemonwarePortMapping"" rtable 0 -> 65.93.X.X port 3074
rdr pass log quick on igb0 inet proto udp from any to any port = 3074 keep state label ""DemonwarePortMapping"" rtable 0 -> 192.168.8.2 port 3074
However these NAT rules are incorrect, but that isn't a problem with your code.
It should be:
nat log quick on igb0 inet proto udp from 192.168.8.2 port = 3074 to any keep state label ""DemonwarePortMapping"" rtable 0 -> 10.0.3.60 port 3074
rdr pass log quick on igb0 inet proto udp from any to any port = 3074 keep state label ""DemonwarePortMapping"" rtable 0 -> 192.168.8.2 port 3074
Without the WAN IP in the NAT, the traffic is invalid to the upstream router.
This is what goes on the wire:
15:30:43.699582 rule 734/0(match): pass in on lagg0.8: 192.168.8.2.3074 > 185.34.107.128.3074: UDP, length 3
15:30:43.699614 rule 114/0(match): pass out on igb0: 65.93.x.x.3074 > 185.34.107.128.3074: UDP, length 3
Packets leaving my firewall cannot have a source address which is anything other than my private IP. I'll have to start a new issue thread.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,565,2021-09-01T18:16:33Z,,2022-02-10T21:04:41Z,OPEN,False,413,6,8,https://github.com/pali,miniupnpd: Add check that port forwarding is not blocked by local or upstream router firewall,1,[],https://github.com/miniupnp/miniupnp/pull/565,https://github.com/encryptyd,44,https://github.com/miniupnp/miniupnp/pull/565#issuecomment-1035515001,"People reported more issues to miniupnpd which resulted to not be issue in
miniupnpd but rather issues in miniupnpd configuration files or issues in
misconfigured local firewalls or issues on upstream routers.
E.g. users put incorrect interface in ext_ifname= option, or swapped lan
and wan interfaces, or configured iptables to never run miniupnpd chains,
or did not enable NAT 1:1 correctly on upstream router to forward traffic
to miniupnpd local router in double NAT network setups.
All these issues caused that miniupnpd though that everything is working
fine (it responded to user requests that port forwarding is configured and
is running) but in reality network traffic was not forwarded at all.
To prevent these issues to happen add checks that miniupnpd can correctly
insert UDP forwarding rule into firewall and test that miniupnpd can
receive UDP packet on unblocked UDP port. For double NAT setups and similar
network topologies (where DMZ or NAT 1:1 is used) this checks that upstream
router is correctly configured, opened for port forwarding and does not
block incoming traffic.
But such check does not verify that port forwarding would be possible in
any case (e.g. it does not check anything with TCP) and there are lot of
other ways how to misconfigure network setup either on local miniupnpd
router or on upstream router. But at least eliminates some of mentioned
common errors.
Better diagnostic test can be performed by ext_perform_stun=yes option.",I opened #598.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,566,2021-09-17T19:23:27Z,2021-09-28T20:47:51Z,2021-09-28T20:47:51Z,CLOSED,False,1,0,1,https://github.com/robmcl4,Correct potential double-free in delete_redirect_and_filter_rules,1,[],https://github.com/miniupnp/miniupnp/pull/566,https://github.com/robmcl4,1,https://github.com/miniupnp/miniupnp/pull/566,"In miniupnpd/netfilter/iptcrdr.c, a potential double-free exists if delete_rule_and_commit fails.
Notice that delete_rule_and_commit always frees the iptc handle its given.
Then, because of short-circuit evaluation, the iptc_init(..) that follows may not execute:
// abbreviated
if(h)
{
    r = delete_rule_and_commit(index, h, miniupnpd_nat_chain, ""delete_redirect_rule"");
}
//                            ---+
//                               v
if((r == 0) && (h = iptc_init(""filter"")))
{
   // ...
}
if (h)
  iptc_free(h);
This may happen if, for example, iptc_commit(h) fails in delete_rule_and_commit(*). I'm not currently aware of a way to make this happen, but it should be handled properly nevertheless.","In miniupnpd/netfilter/iptcrdr.c, a potential double-free exists if delete_rule_and_commit fails.
Notice that delete_rule_and_commit always frees the iptc handle its given.
Then, because of short-circuit evaluation, the iptc_init(..) that follows may not execute:
// abbreviated
if(h)
{
    r = delete_rule_and_commit(index, h, miniupnpd_nat_chain, ""delete_redirect_rule"");
}
//                            ---+
//                               v
if((r == 0) && (h = iptc_init(""filter"")))
{
   // ...
}
if (h)
  iptc_free(h);
This may happen if, for example, iptc_commit(h) fails in delete_rule_and_commit(*). I'm not currently aware of a way to make this happen, but it should be handled properly nevertheless.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,568,2021-09-29T06:30:38Z,2021-09-29T23:04:56Z,2021-09-29T23:04:56Z,MERGED,True,5,5,1,https://github.com/mgorny,Makefile: fix install rules to account for $(BUILD),1,['miniupnpc'],https://github.com/miniupnp/miniupnp/pull/568,https://github.com/mgorny,1,https://github.com/miniupnp/miniupnp/pull/568,"Fix missing references to $(BUILD) in the install rules, as well
as incorrect shared library symlink name.  Otherwise, the 'install'
phase fails either being unable to find files:
make: *** No rule to make target 'miniupnpc.pc', needed by 'install'.  Stop.

or trying to create the symlink in the wrong subdirectory:
ln: failed to create symbolic link '/tmp/z/usr/lib/build/libminiupnpc.so': No such file or directory","Fix missing references to $(BUILD) in the install rules, as well
as incorrect shared library symlink name.  Otherwise, the 'install'
phase fails either being unable to find files:
make: *** No rule to make target 'miniupnpc.pc', needed by 'install'.  Stop.

or trying to create the symlink in the wrong subdirectory:
ln: failed to create symbolic link '/tmp/z/usr/lib/build/libminiupnpc.so': No such file or directory",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,568,2021-09-29T06:30:38Z,2021-09-29T23:04:56Z,2021-09-29T23:04:56Z,MERGED,True,5,5,1,https://github.com/mgorny,Makefile: fix install rules to account for $(BUILD),1,['miniupnpc'],https://github.com/miniupnp/miniupnp/pull/568,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/568#issuecomment-930608413,"Fix missing references to $(BUILD) in the install rules, as well
as incorrect shared library symlink name.  Otherwise, the 'install'
phase fails either being unable to find files:
make: *** No rule to make target 'miniupnpc.pc', needed by 'install'.  Stop.

or trying to create the symlink in the wrong subdirectory:
ln: failed to create symbolic link '/tmp/z/usr/lib/build/libminiupnpc.so': No such file or directory",@mgorny thank you !,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,569,2021-09-30T14:05:22Z,2021-09-30T21:08:39Z,2021-09-30T21:08:39Z,MERGED,True,10,10,1,https://github.com/heitbaum,miniupnpc/CMakeLists.txt: fix install for headers,1,['miniupnpc'],https://github.com/miniupnp/miniupnp/pull/569,https://github.com/heitbaum,1,https://github.com/miniupnp/miniupnp/pull/569,"Install target fails as include files have moved
""build/miniupnpc-2.2.3/miniupnpc.h"":
  No such file or directory.
FAILED: CMakeFiles/install.util 
cd build/miniupnpc-2.2.3/.x86_64-libreelec-linux-gnu && toolchain/bin/cmake -P cmake_install.cmake
ninja: build stopped: subcommand failed.","Install target fails as include files have moved
""build/miniupnpc-2.2.3/miniupnpc.h"":
  No such file or directory.
FAILED: CMakeFiles/install.util 
cd build/miniupnpc-2.2.3/.x86_64-libreelec-linux-gnu && toolchain/bin/cmake -P cmake_install.cmake
ninja: build stopped: subcommand failed.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,569,2021-09-30T14:05:22Z,2021-09-30T21:08:39Z,2021-09-30T21:08:39Z,MERGED,True,10,10,1,https://github.com/heitbaum,miniupnpc/CMakeLists.txt: fix install for headers,1,['miniupnpc'],https://github.com/miniupnp/miniupnp/pull/569,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/569#issuecomment-931662768,"Install target fails as include files have moved
""build/miniupnpc-2.2.3/miniupnpc.h"":
  No such file or directory.
FAILED: CMakeFiles/install.util 
cd build/miniupnpc-2.2.3/.x86_64-libreelec-linux-gnu && toolchain/bin/cmake -P cmake_install.cmake
ninja: build stopped: subcommand failed.",thank you,True,{'THUMBS_UP': ['https://github.com/heitbaum']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,573,2021-10-12T13:24:16Z,,2021-11-04T22:42:59Z,OPEN,False,48,5,2,https://github.com/mrx23dot,deploys to pypi automatically,2,"['miniupnpc', 'python']",https://github.com/miniupnp/miniupnp/pull/573,https://github.com/mrx23dot,1,https://github.com/miniupnp/miniupnp/pull/573,"In appveyor added a last step to deploy to pypi automatically.
It uses my credentials, if you want future proofing

registers on pypi,
send me your username, I will grant you permission
override credentials in yml, generate secure password in appveyor/account/encrypt","In appveyor added a last step to deploy to pypi automatically.
It uses my credentials, if you want future proofing

registers on pypi,
send me your username, I will grant you permission
override credentials in yml, generate secure password in appveyor/account/encrypt",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,573,2021-10-12T13:24:16Z,,2021-11-04T22:42:59Z,OPEN,False,48,5,2,https://github.com/mrx23dot,deploys to pypi automatically,2,"['miniupnpc', 'python']",https://github.com/miniupnp/miniupnp/pull/573,https://github.com/mrx23dot,2,https://github.com/miniupnp/miniupnp/pull/573#issuecomment-941011506,"In appveyor added a last step to deploy to pypi automatically.
It uses my credentials, if you want future proofing

registers on pypi,
send me your username, I will grant you permission
override credentials in yml, generate secure password in appveyor/account/encrypt",solves #570,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,573,2021-10-12T13:24:16Z,,2021-11-04T22:42:59Z,OPEN,False,48,5,2,https://github.com/mrx23dot,deploys to pypi automatically,2,"['miniupnpc', 'python']",https://github.com/miniupnp/miniupnp/pull/573,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/573#issuecomment-950122769,"In appveyor added a last step to deploy to pypi automatically.
It uses my credentials, if you want future proofing

registers on pypi,
send me your username, I will grant you permission
override credentials in yml, generate secure password in appveyor/account/encrypt",@mrx23dot I registered : https://pypi.org/user/miniupnp/,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,573,2021-10-12T13:24:16Z,,2021-11-04T22:42:59Z,OPEN,False,48,5,2,https://github.com/mrx23dot,deploys to pypi automatically,2,"['miniupnpc', 'python']",https://github.com/miniupnp/miniupnp/pull/573,https://github.com/mrx23dot,4,https://github.com/miniupnp/miniupnp/pull/573#issuecomment-950290457,"In appveyor added a last step to deploy to pypi automatically.
It uses my credentials, if you want future proofing

registers on pypi,
send me your username, I will grant you permission
override credentials in yml, generate secure password in appveyor/account/encrypt",You need to verify your email before I can add rights.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,573,2021-10-12T13:24:16Z,,2021-11-04T22:42:59Z,OPEN,False,48,5,2,https://github.com/mrx23dot,deploys to pypi automatically,2,"['miniupnpc', 'python']",https://github.com/miniupnp/miniupnp/pull/573,https://github.com/miniupnp,5,https://github.com/miniupnp/miniupnp/pull/573#issuecomment-951392396,"In appveyor added a last step to deploy to pypi automatically.
It uses my credentials, if you want future proofing

registers on pypi,
send me your username, I will grant you permission
override credentials in yml, generate secure password in appveyor/account/encrypt","You need to verify your email before I can add rights.

I never receive the confirmation email :(",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,573,2021-10-12T13:24:16Z,,2021-11-04T22:42:59Z,OPEN,False,48,5,2,https://github.com/mrx23dot,deploys to pypi automatically,2,"['miniupnpc', 'python']",https://github.com/miniupnp/miniupnp/pull/573,https://github.com/mrx23dot,6,https://github.com/miniupnp/miniupnp/pull/573#issuecomment-951710251,"In appveyor added a last step to deploy to pypi automatically.
It uses my credentials, if you want future proofing

registers on pypi,
send me your username, I will grant you permission
override credentials in yml, generate secure password in appveyor/account/encrypt","Check spam/trash of course, request another email from the site, microsoft emails can fail, use gmail, or contact admins.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,573,2021-10-12T13:24:16Z,,2021-11-04T22:42:59Z,OPEN,False,48,5,2,https://github.com/mrx23dot,deploys to pypi automatically,2,"['miniupnpc', 'python']",https://github.com/miniupnp/miniupnp/pull/573,https://github.com/miniupnp,7,https://github.com/miniupnp/miniupnp/pull/573#issuecomment-961487827,"In appveyor added a last step to deploy to pypi automatically.
It uses my credentials, if you want future proofing

registers on pypi,
send me your username, I will grant you permission
override credentials in yml, generate secure password in appveyor/account/encrypt",@mrx23dot I finally confirmed my main email,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,579,2021-11-07T18:27:16Z,2021-11-09T17:45:18Z,2021-11-09T21:39:39Z,MERGED,True,8,9,2,https://github.com/stintel,Openwrt fixes,2,[],https://github.com/miniupnp/miniupnp/pull/579,https://github.com/stintel,1,https://github.com/miniupnp/miniupnp/pull/579,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,581,2021-11-17T11:49:38Z,2021-11-27T23:17:13Z,2021-11-28T06:49:04Z,CLOSED,False,31,8,7,https://github.com/svenauhagen,NFTables make tables name configurable,1,[],https://github.com/miniupnp/miniupnp/pull/581,https://github.com/svenauhagen,1,https://github.com/miniupnp/miniupnp/pull/581,"Right now the table names are hardcoded and do not integrate with an overall
firewall strategy.
NFTables has restrictions on how packets are evaluated against chains.
For example if multiple forward chains are evaluated with different prioity,
all packets that pass the first one will be reevaluated again in the second chain.
To have an overall firewall concept with miniupnpd it is necessary to use existing
tables and hence to configure them in miniupnpd.
This is the second of three PRs and it is build upon #562.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de","Right now the table names are hardcoded and do not integrate with an overall
firewall strategy.
NFTables has restrictions on how packets are evaluated against chains.
For example if multiple forward chains are evaluated with different prioity,
all packets that pass the first one will be reevaluated again in the second chain.
To have an overall firewall concept with miniupnpd it is necessary to use existing
tables and hence to configure them in miniupnpd.
This is the second of three PRs and it is build upon #562.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,581,2021-11-17T11:49:38Z,2021-11-27T23:17:13Z,2021-11-28T06:49:04Z,CLOSED,False,31,8,7,https://github.com/svenauhagen,NFTables make tables name configurable,1,[],https://github.com/miniupnp/miniupnp/pull/581,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/581#issuecomment-979800904,"Right now the table names are hardcoded and do not integrate with an overall
firewall strategy.
NFTables has restrictions on how packets are evaluated against chains.
For example if multiple forward chains are evaluated with different prioity,
all packets that pass the first one will be reevaluated again in the second chain.
To have an overall firewall concept with miniupnpd it is necessary to use existing
tables and hence to configure them in miniupnpd.
This is the second of three PRs and it is build upon #562.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de",I have to make sure documentation is up to date,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,581,2021-11-17T11:49:38Z,2021-11-27T23:17:13Z,2021-11-28T06:49:04Z,CLOSED,False,31,8,7,https://github.com/svenauhagen,NFTables make tables name configurable,1,[],https://github.com/miniupnp/miniupnp/pull/581,https://github.com/miniupnp,3,https://github.com/miniupnp/miniupnp/pull/581#issuecomment-980804574,"Right now the table names are hardcoded and do not integrate with an overall
firewall strategy.
NFTables has restrictions on how packets are evaluated against chains.
For example if multiple forward chains are evaluated with different prioity,
all packets that pass the first one will be reevaluated again in the second chain.
To have an overall firewall concept with miniupnpd it is necessary to use existing
tables and hence to configure them in miniupnpd.
This is the second of three PRs and it is build upon #562.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de","I rebased.
see 0b3f3e4 and d4849fa",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,581,2021-11-17T11:49:38Z,2021-11-27T23:17:13Z,2021-11-28T06:49:04Z,CLOSED,False,31,8,7,https://github.com/svenauhagen,NFTables make tables name configurable,1,[],https://github.com/miniupnp/miniupnp/pull/581,https://github.com/svenauhagen,4,https://github.com/miniupnp/miniupnp/pull/581#issuecomment-980849835,"Right now the table names are hardcoded and do not integrate with an overall
firewall strategy.
NFTables has restrictions on how packets are evaluated against chains.
For example if multiple forward chains are evaluated with different prioity,
all packets that pass the first one will be reevaluated again in the second chain.
To have an overall firewall concept with miniupnpd it is necessary to use existing
tables and hence to configure them in miniupnpd.
This is the second of three PRs and it is build upon #562.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de","Thank you, next PR is coming as well",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,584,2021-11-28T07:12:02Z,2021-12-01T23:06:29Z,2021-12-01T23:06:30Z,MERGED,True,199,90,10,https://github.com/svenauhagen,NFTables use scripts to create tables and chains,1,[],https://github.com/miniupnp/miniupnp/pull/584,https://github.com/svenauhagen,1,https://github.com/miniupnp/miniupnp/pull/584,"To hardcode table and chain creation and deletion makes it impossible
for existing firewall infrastructures to integrate miniupnpd.
NFTables will either reevaluate packets through miniupnpd or
it will delete existing tables when there are already custom chains in it.
This commit will use the scripts to create the tables and chains, to make nftables
work the same way as iptables does.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de","To hardcode table and chain creation and deletion makes it impossible
for existing firewall infrastructures to integrate miniupnpd.
NFTables will either reevaluate packets through miniupnpd or
it will delete existing tables when there are already custom chains in it.
This commit will use the scripts to create the tables and chains, to make nftables
work the same way as iptables does.
Signed-off-by: Sven Auhagen sven.auhagen@voleatech.de",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,586,2022-01-01T23:57:25Z,2022-01-22T18:30:10Z,2022-01-22T18:30:10Z,MERGED,True,18,18,9,https://github.com/f1sherman,A few nftables fixes,3,"['miniupnpd', 'linux', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/586,https://github.com/f1sherman,1,https://github.com/miniupnp/miniupnp/pull/586,"Hello! I was looking through the nftables-related code to try to understand how it works and decided to make a few small improvements. Would love your feedback!

Spelling fix: routeing --> routing
Fix typo where we're incorrectly checking for $TABLE instead of $NAT_TABLE in nft_removeall.sh
Split NAT and TABLE everywhere for consistency","Hello! I was looking through the nftables-related code to try to understand how it works and decided to make a few small improvements. Would love your feedback!

Spelling fix: routeing --> routing
Fix typo where we're incorrectly checking for $TABLE instead of $NAT_TABLE in nft_removeall.sh
Split NAT and TABLE everywhere for consistency",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,586,2022-01-01T23:57:25Z,2022-01-22T18:30:10Z,2022-01-22T18:30:10Z,MERGED,True,18,18,9,https://github.com/f1sherman,A few nftables fixes,3,"['miniupnpd', 'linux', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/586,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/586#issuecomment-1019309634,"Hello! I was looking through the nftables-related code to try to understand how it works and decided to make a few small improvements. Would love your feedback!

Spelling fix: routeing --> routing
Fix typo where we're incorrectly checking for $TABLE instead of $NAT_TABLE in nft_removeall.sh
Split NAT and TABLE everywhere for consistency",@svenauhagen is that OK ? :),True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,586,2022-01-01T23:57:25Z,2022-01-22T18:30:10Z,2022-01-22T18:30:10Z,MERGED,True,18,18,9,https://github.com/f1sherman,A few nftables fixes,3,"['miniupnpd', 'linux', 'netfilter_nftables']",https://github.com/miniupnp/miniupnp/pull/586,https://github.com/svenauhagen,3,https://github.com/miniupnp/miniupnp/pull/586#issuecomment-1019328258,"Hello! I was looking through the nftables-related code to try to understand how it works and decided to make a few small improvements. Would love your feedback!

Spelling fix: routeing --> routing
Fix typo where we're incorrectly checking for $TABLE instead of $NAT_TABLE in nft_removeall.sh
Split NAT and TABLE everywhere for consistency",looks good to me :) thanks,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,587,2022-01-03T02:05:38Z,2022-01-22T16:55:34Z,2022-01-25T07:42:51Z,MERGED,True,21,0,1,https://github.com/fanquake,mingw: add minimal pkg-config support,1,"['miniupnpc', 'windows']",https://github.com/miniupnp/miniupnp/pull/587,https://github.com/fanquake,1,https://github.com/miniupnp/miniupnp/pull/587,Adds support for generating a miniupnpc.pc file to Makefile.mingw. Essentially the same as is done in the other Makefile.,Adds support for generating a miniupnpc.pc file to Makefile.mingw. Essentially the same as is done in the other Makefile.,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,588,2022-01-03T02:10:01Z,2022-01-03T08:17:24Z,2022-01-03T08:40:16Z,MERGED,True,1,1,1,https://github.com/fanquake,doc: add windres to mingw *nix build command,1,[],https://github.com/miniupnp/miniupnp/pull/588,https://github.com/fanquake,1,https://github.com/miniupnp/miniupnp/pull/588,,,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,589,2022-01-04T18:37:43Z,2022-01-22T17:01:25Z,2022-01-22T17:08:20Z,MERGED,True,1,1,1,https://github.com/scribam,miniupnpc/cmake: add _WINSOCK_DEPRECATED_NO_WARNINGS definition,1,"['miniupnpc', 'windows']",https://github.com/miniupnp/miniupnp/pull/589,https://github.com/scribam,1,https://github.com/miniupnp/miniupnp/pull/589,"As with _CRT_SECURE_NO_WARNINGS, this change hides some warnings:
[...]\miniupnp\miniupnpc\src\addr_is_reserved.c(60): warning C4996: 'inet_addr': Use inet_pton() or InetPton() instead or define _WINSOCK_DEPRECATED_NO_WARNINGS to disable deprecated API warnings
[...]\miniupnp\miniupnpc\src\minissdpc.c(603): warning C4996: 'inet_addr': Use inet_pton() or InetPton() instead or define _WINSOCK_DEPRECATED_NO_WARNINGS to disable deprecated API warnings
[...]\miniupnp\miniupnpc\src\minissdpc.c(753): warning C4996: 'inet_addr': Use inet_pton() or InetPton() instead or define _WINSOCK_DEPRECATED_NO_WARNINGS to disable deprecated API warnings","As with _CRT_SECURE_NO_WARNINGS, this change hides some warnings:
[...]\miniupnp\miniupnpc\src\addr_is_reserved.c(60): warning C4996: 'inet_addr': Use inet_pton() or InetPton() instead or define _WINSOCK_DEPRECATED_NO_WARNINGS to disable deprecated API warnings
[...]\miniupnp\miniupnpc\src\minissdpc.c(603): warning C4996: 'inet_addr': Use inet_pton() or InetPton() instead or define _WINSOCK_DEPRECATED_NO_WARNINGS to disable deprecated API warnings
[...]\miniupnp\miniupnpc\src\minissdpc.c(753): warning C4996: 'inet_addr': Use inet_pton() or InetPton() instead or define _WINSOCK_DEPRECATED_NO_WARNINGS to disable deprecated API warnings",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,591,2022-01-22T23:56:30Z,,2022-05-01T23:35:33Z,OPEN,False,28,1,3,https://github.com/miniupnp,miniupnpc/CMakeLists.txt: generate and install miniupnpc.pc,3,[],https://github.com/miniupnp/miniupnp/pull/591,https://github.com/miniupnp,1,https://github.com/miniupnp/miniupnp/pull/591,fixes #574,fixes #574,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,591,2022-01-22T23:56:30Z,,2022-05-01T23:35:33Z,OPEN,False,28,1,3,https://github.com/miniupnp,miniupnpc/CMakeLists.txt: generate and install miniupnpc.pc,3,[],https://github.com/miniupnp/miniupnp/pull/591,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/591#issuecomment-1019379724,fixes #574,@kloczek can you check if it is OK regarding the miniupnpc.pc file ?,True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,591,2022-01-22T23:56:30Z,,2022-05-01T23:35:33Z,OPEN,False,28,1,3,https://github.com/miniupnp,miniupnpc/CMakeLists.txt: generate and install miniupnpc.pc,3,[],https://github.com/miniupnp/miniupnp/pull/591,https://github.com/barracuda156,3,https://github.com/miniupnp/miniupnp/pull/591#issuecomment-1077660665,fixes #574,"There is still a problem with a missing header, and install fails: #574 (comment)",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,591,2022-01-22T23:56:30Z,,2022-05-01T23:35:33Z,OPEN,False,28,1,3,https://github.com/miniupnp,miniupnpc/CMakeLists.txt: generate and install miniupnpc.pc,3,[],https://github.com/miniupnp/miniupnp/pull/591,https://github.com/Biswa96,4,https://github.com/miniupnp/miniupnp/pull/591#issuecomment-1086015859,fixes #574,"The Description, URL and Version fields are empty in generated pkgconfig file. Those need to be added in project() function in main CMakeLists.txt file. Also, those quotes are not required generally.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,592,2022-01-24T00:03:19Z,2022-02-19T20:45:29Z,2022-02-19T20:45:29Z,CLOSED,False,99,89,12,https://github.com/stokito,Refine License,3,[],https://github.com/miniupnp/miniupnp/pull/592,https://github.com/stokito,1,https://github.com/miniupnp/miniupnp/pull/592,"The same as for miniupnp/libnatpmp#23
But I also renamed LICENSE to LICENSE.txt so Windows users can easily open it.","The same as for miniupnp/libnatpmp#23
But I also renamed LICENSE to LICENSE.txt so Windows users can easily open it.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,592,2022-01-24T00:03:19Z,2022-02-19T20:45:29Z,2022-02-19T20:45:29Z,CLOSED,False,99,89,12,https://github.com/stokito,Refine License,3,[],https://github.com/miniupnp/miniupnp/pull/592,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/592#issuecomment-1046067765,"The same as for miniupnp/libnatpmp#23
But I also renamed LICENSE to LICENSE.txt so Windows users can easily open it.","I don't care much about windows Users, and I must say there is no windows users for miniupnpd or minissdpd",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,595,2022-01-27T09:32:03Z,2022-02-19T17:26:45Z,2022-02-19T20:44:54Z,MERGED,True,8,6,3,https://github.com/stokito,minixml.c sync sources,1,[],https://github.com/miniupnp/miniupnp/pull/595,https://github.com/stokito,1,https://github.com/miniupnp/miniupnp/pull/595,"In the commit a0573e2
was fixed a buffer overflow in the minixml.c but it wasn't copied to upnpc-async.
To make comparison simpler the header was also synced from miniupnpc-libevent/minixml.c
Also please note that there is other files that were copied between projects but now differs:

minissdpd/upnputils.c
miniupnpc-async/upnputils.c
miniupnpd/upnputils.c

It's possible that a bug fixed in one place wasn't copied to another.","In the commit a0573e2
was fixed a buffer overflow in the minixml.c but it wasn't copied to upnpc-async.
To make comparison simpler the header was also synced from miniupnpc-libevent/minixml.c
Also please note that there is other files that were copied between projects but now differs:

minissdpd/upnputils.c
miniupnpc-async/upnputils.c
miniupnpd/upnputils.c

It's possible that a bug fixed in one place wasn't copied to another.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,599,2022-02-16T17:15:53Z,2022-02-19T17:50:39Z,2022-02-19T17:50:39Z,MERGED,True,26,8,2,https://github.com/jow-,Expose `USE_GETIFADDRS` and tweak `getifaddr()` behaviour,2,[],https://github.com/miniupnp/miniupnp/pull/599,https://github.com/jow-,1,https://github.com/miniupnp/miniupnp/pull/599,"This PR contains two commits for your consideration:

The first commit introduces a new --getifaddrs flag in the configure script and enables getifaddrs() usage by default for OpenWrt
The second commit adjusts the getifaddrs() based implementation of getifaddr() to prefer non-reserved IPv4 addresses over reserved ones","This PR contains two commits for your consideration:

The first commit introduces a new --getifaddrs flag in the configure script and enables getifaddrs() usage by default for OpenWrt
The second commit adjusts the getifaddrs() based implementation of getifaddr() to prefer non-reserved IPv4 addresses over reserved ones",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,602,2022-03-21T17:38:21Z,2022-03-21T23:20:29Z,2022-03-21T23:20:29Z,MERGED,True,5,2,1,https://github.com/zah,Fix the build on NixOS,1,[],https://github.com/miniupnp/miniupnp/pull/602,https://github.com/zah,1,https://github.com/miniupnp/miniupnp/pull/602,"On NixOS, the lsb_release command returns strings such as ""NixOS""
and ""22.04"" (with the quotes included). This leads to compilation
problems because the updateminiupnpcstrings.sh scripts ends up
creating a C file with the following content:
The fix is to simply strip the quotes from the lsb_release output.","On NixOS, the lsb_release command returns strings such as ""NixOS""
and ""22.04"" (with the quotes included). This leads to compilation
problems because the updateminiupnpcstrings.sh scripts ends up
creating a C file with the following content:
The fix is to simply strip the quotes from the lsb_release output.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,604,2022-04-01T15:12:05Z,2022-04-20T22:26:42Z,2022-04-21T02:34:53Z,MERGED,True,1,1,1,https://github.com/Biswa96,cmake: Fix static library name in mingw,1,[],https://github.com/miniupnp/miniupnp/pull/604,https://github.com/Biswa96,1,https://github.com/miniupnp/miniupnp/pull/604,"This corrects the static library name to libminiupnpc.a.
Otherwise 'lib' is prepended twice, like liblibminiupnpc.a.","This corrects the static library name to libminiupnpc.a.
Otherwise 'lib' is prepended twice, like liblibminiupnpc.a.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,607,2022-04-18T21:33:26Z,2022-04-20T22:22:00Z,2022-04-20T22:22:00Z,CLOSED,False,3,1,1,https://github.com/Teemperor,Fix uninitialized read in update_portmapping,1,[],https://github.com/miniupnp/miniupnp/pull/607,https://github.com/Teemperor,1,https://github.com/miniupnp/miniupnp/pull/607,"None of the called functions seemed to use rhost aside from add_filter_rule2
which tries to read the uninitialized data in the buffer via:
if (rhost != NULL && strcmp(rhost, """") != 0 && strcmp(rhost, ""*"") != 0) {
  rhost_addr = inet_addr(rhost);
}

This randomly tries to parse the uninitialized memory in rhost.","None of the called functions seemed to use rhost aside from add_filter_rule2
which tries to read the uninitialized data in the buffer via:
if (rhost != NULL && strcmp(rhost, """") != 0 && strcmp(rhost, ""*"") != 0) {
  rhost_addr = inet_addr(rhost);
}

This randomly tries to parse the uninitialized memory in rhost.",True,{}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,607,2022-04-18T21:33:26Z,2022-04-20T22:22:00Z,2022-04-20T22:22:00Z,CLOSED,False,3,1,1,https://github.com/Teemperor,Fix uninitialized read in update_portmapping,1,[],https://github.com/miniupnp/miniupnp/pull/607,https://github.com/miniupnp,2,https://github.com/miniupnp/miniupnp/pull/607#issuecomment-1104513149,"None of the called functions seemed to use rhost aside from add_filter_rule2
which tries to read the uninitialized data in the buffer via:
if (rhost != NULL && strcmp(rhost, """") != 0 && strcmp(rhost, ""*"") != 0) {
  rhost_addr = inet_addr(rhost);
}

This randomly tries to parse the uninitialized memory in rhost.","thanks for the report. I think it is better to properly initialize iaddr_str and rhost, so it is possible use it someday.",True,{'HEART': ['https://github.com/Teemperor']}
miniupnp/miniupnp,https://github.com/miniupnp/miniupnp,608,2022-04-26T19:11:09Z,2022-05-06T07:18:23Z,2022-05-06T07:18:23Z,MERGED,True,5,5,3,https://github.com/zer-far,Fix capitalisation of GitHub,2,[],https://github.com/miniupnp/miniupnp/pull/608,https://github.com/zer-far,1,https://github.com/miniupnp/miniupnp/pull/608,"I have changed ""Github"" and ""github"" to ""GitHub"".","I have changed ""Github"" and ""github"" to ""GitHub"".",True,{}
