ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,187,2016-03-04T16:27:27Z,2016-03-04T16:31:22Z,2016-03-04T16:32:53Z,MERGED,True,8,1,2,https://github.com/AlessandroA,Add halt function to only halt with no msg,1,[],https://github.com/ARMmbed/uvisor/pull/187,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/187,@meriac,@meriac,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,189,2016-03-14T09:44:32Z,2016-03-17T15:22:35Z,2016-03-17T15:23:05Z,MERGED,True,279,588,46,https://github.com/AlessandroA,Swap uvisor and uvisor lib,12,[],https://github.com/ARMmbed/uvisor/pull/189,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/189,"With this PR ARMmbed/uvisor-lib is not a submodule of ARMmbed/uvisor any more.
See ARMmbed/uvisor-lib#39 for the related changes in uvisor-lib.
What changed:

Not just the uVisor binary, but the whole uVisor library is now pre-compiled. The exported uVisor is now a static library.
All APIs + exported header files have been placed in the top-level api folder.

Note: Libraries are released in the api/lib folder. It has not been pushed yet, as it will be done when the PR is merged.
@meriac @Patater","With this PR ARMmbed/uvisor-lib is not a submodule of ARMmbed/uvisor any more.
See ARMmbed/uvisor-lib#39 for the related changes in uvisor-lib.
What changed:

Not just the uVisor binary, but the whole uVisor library is now pre-compiled. The exported uVisor is now a static library.
All APIs + exported header files have been placed in the top-level api folder.

Note: Libraries are released in the api/lib folder. It has not been pushed yet, as it will be done when the PR is merged.
@meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,189,2016-03-14T09:44:32Z,2016-03-17T15:22:35Z,2016-03-17T15:23:05Z,MERGED,True,279,588,46,https://github.com/AlessandroA,Swap uvisor and uvisor lib,12,[],https://github.com/ARMmbed/uvisor/pull/189,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/189#issuecomment-197336262,"With this PR ARMmbed/uvisor-lib is not a submodule of ARMmbed/uvisor any more.
See ARMmbed/uvisor-lib#39 for the related changes in uvisor-lib.
What changed:

Not just the uVisor binary, but the whole uVisor library is now pre-compiled. The exported uVisor is now a static library.
All APIs + exported header files have been placed in the top-level api folder.

Note: Libraries are released in the api/lib folder. It has not been pushed yet, as it will be done when the PR is merged.
@meriac @Patater","Removed commit that moved platform inside core/

@meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,189,2016-03-14T09:44:32Z,2016-03-17T15:22:35Z,2016-03-17T15:23:05Z,MERGED,True,279,588,46,https://github.com/AlessandroA,Swap uvisor and uvisor lib,12,[],https://github.com/ARMmbed/uvisor/pull/189,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/189#issuecomment-197344297,"With this PR ARMmbed/uvisor-lib is not a submodule of ARMmbed/uvisor any more.
See ARMmbed/uvisor-lib#39 for the related changes in uvisor-lib.
What changed:

Not just the uVisor binary, but the whole uVisor library is now pre-compiled. The exported uVisor is now a static library.
All APIs + exported header files have been placed in the top-level api folder.

Note: Libraries are released in the api/lib folder. It has not been pushed yet, as it will be done when the PR is merged.
@meriac @Patater",Added a commit that removes the vIRQ_SetVectorX API. This commit is related to ARMmbed/uvisor-lib#41,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,189,2016-03-14T09:44:32Z,2016-03-17T15:22:35Z,2016-03-17T15:23:05Z,MERGED,True,279,588,46,https://github.com/AlessandroA,Swap uvisor and uvisor lib,12,[],https://github.com/ARMmbed/uvisor/pull/189,https://github.com/meriac,4,https://github.com/ARMmbed/uvisor/pull/189#issuecomment-197625572,"With this PR ARMmbed/uvisor-lib is not a submodule of ARMmbed/uvisor any more.
See ARMmbed/uvisor-lib#39 for the related changes in uvisor-lib.
What changed:

Not just the uVisor binary, but the whole uVisor library is now pre-compiled. The exported uVisor is now a static library.
All APIs + exported header files have been placed in the top-level api folder.

Note: Libraries are released in the api/lib folder. It has not been pushed yet, as it will be done when the PR is merged.
@meriac @Patater",@AlessandroA Please move b7fb61b out and submit independently. I want to discuss that separately. Please add a note on setvectorx to the commit notes. The rest LGTM.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,189,2016-03-14T09:44:32Z,2016-03-17T15:22:35Z,2016-03-17T15:23:05Z,MERGED,True,279,588,46,https://github.com/AlessandroA,Swap uvisor and uvisor lib,12,[],https://github.com/ARMmbed/uvisor/pull/189,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/189#issuecomment-197927747,"With this PR ARMmbed/uvisor-lib is not a submodule of ARMmbed/uvisor any more.
See ARMmbed/uvisor-lib#39 for the related changes in uvisor-lib.
What changed:

Not just the uVisor binary, but the whole uVisor library is now pre-compiled. The exported uVisor is now a static library.
All APIs + exported header files have been placed in the top-level api folder.

Note: Libraries are released in the api/lib folder. It has not been pushed yet, as it will be done when the PR is merged.
@meriac @Patater",@meriac Removed commit about g_nvic_prio_bits.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,190,2016-03-14T13:45:53Z,2016-03-14T17:55:36Z,2016-03-18T10:36:46Z,MERGED,True,37,10,4,https://github.com/AlessandroA,Fix check on flash boundary,3,[],https://github.com/ARMmbed/uvisor/pull/190,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/190,"We need to distinguish checks on the physical and the public flash,
respectively.
@meriac @Patater","We need to distinguish checks on the physical and the public flash,
respectively.
@meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,190,2016-03-14T13:45:53Z,2016-03-14T17:55:36Z,2016-03-18T10:36:46Z,MERGED,True,37,10,4,https://github.com/AlessandroA,Fix check on flash boundary,3,[],https://github.com/ARMmbed/uvisor/pull/190,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/190#issuecomment-196381898,"We need to distinguish checks on the physical and the public flash,
respectively.
@meriac @Patater",Added check on driver == NULL and *(driver + i) == NULL,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,190,2016-03-14T13:45:53Z,2016-03-14T17:55:36Z,2016-03-18T10:36:46Z,MERGED,True,37,10,4,https://github.com/AlessandroA,Fix check on flash boundary,3,[],https://github.com/ARMmbed/uvisor/pull/190,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/190#issuecomment-196387416,"We need to distinguish checks on the physical and the public flash,
respectively.
@meriac @Patater",Added commit that checks both start and end address of box_namespace.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,191,2016-03-14T13:54:55Z,2016-03-14T18:27:29Z,2016-03-18T10:36:47Z,MERGED,True,10,4,1,https://github.com/AlessandroA,Check for uninitialized debug box,1,[],https://github.com/ARMmbed/uvisor/pull/191,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/191,"If a debug box does not exist or it has not been initialized yet, an
error leads to a halt without de-privileging to the debug box, which
would trigger a chain of unpredictable faults (the debug box driver
contains uninitialized data).
Fixes: #188 (""uVisor attempts to use NULL g_debug_box.driver"")
@meriac @Patater","If a debug box does not exist or it has not been initialized yet, an
error leads to a halt without de-privileging to the debug box, which
would trigger a chain of unpredictable faults (the debug box driver
contains uninitialized data).
Fixes: #188 (""uVisor attempts to use NULL g_debug_box.driver"")
@meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,192,2016-03-14T18:19:31Z,2016-03-14T18:22:27Z,2016-03-18T10:36:39Z,MERGED,True,2,2,1,https://github.com/AlessandroA,Fix error message in debug.c,1,[],https://github.com/ARMmbed/uvisor/pull/192,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/192,@meriac Didn't manage to get this into the previous PR. Derives from these comments.,@meriac Didn't manage to get this into the previous PR. Derives from these comments.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,193,2016-03-15T14:11:14Z,2016-03-15T16:45:47Z,2016-03-18T10:36:37Z,MERGED,True,11,3,1,https://github.com/AlessandroA,Restore priority bits in NVIC register,1,[],https://github.com/ARMmbed/uvisor/pull/193,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/193,"The register was modified to check the number of implemented priority
bits but its original value was not restored.
@meriac
@Patater","The register was modified to check the number of implemented priority
bits but its original value was not restored.
@meriac
@Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,193,2016-03-15T14:11:14Z,2016-03-15T16:45:47Z,2016-03-18T10:36:37Z,MERGED,True,11,3,1,https://github.com/AlessandroA,Restore priority bits in NVIC register,1,[],https://github.com/ARMmbed/uvisor/pull/193,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/193#issuecomment-196856291,"The register was modified to check the number of implemented priority
bits but its original value was not restored.
@meriac
@Patater",What bad things happen if the original value isn't restored?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,193,2016-03-15T14:11:14Z,2016-03-15T16:45:47Z,2016-03-18T10:36:37Z,MERGED,True,11,3,1,https://github.com/AlessandroA,Restore priority bits in NVIC register,1,[],https://github.com/ARMmbed/uvisor/pull/193,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/193#issuecomment-196866717,"The register was modified to check the number of implemented priority
bits but its original value was not restored.
@meriac
@Patater","The IRQn slot that corresponds to that register would find its default priority messed up. This is not a real issue as we are/will be setting all IRQs to a default known state, but I think it's not good practice to modify a system register to detect a hardware feature and then leave it modified.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,193,2016-03-15T14:11:14Z,2016-03-15T16:45:47Z,2016-03-18T10:36:37Z,MERGED,True,11,3,1,https://github.com/AlessandroA,Restore priority bits in NVIC register,1,[],https://github.com/ARMmbed/uvisor/pull/193,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/193#issuecomment-196868458,"The register was modified to check the number of implemented priority
bits but its original value was not restored.
@meriac
@Patater","Since we are setting all IRQs to a default known state, then this isn't necessary to do here. The code was probably written with that fact in mind.
However, in the uVisor disabled case, do we still reset all IRQs to a default known state?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,193,2016-03-15T14:11:14Z,2016-03-15T16:45:47Z,2016-03-18T10:36:37Z,MERGED,True,11,3,1,https://github.com/AlessandroA,Restore priority bits in NVIC register,1,[],https://github.com/ARMmbed/uvisor/pull/193,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/193#issuecomment-196870976,"The register was modified to check the number of implemented priority
bits but its original value was not restored.
@meriac
@Patater","No we don't (disabled case). In that instance the code really should go there.
When uVisor is enabled, this is not critical — in fact, it is not a problem at all. It's just a matter of style/good practice. @meriac ? If you agree with @Patater I'm happy to close this one (no merge).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,193,2016-03-15T14:11:14Z,2016-03-15T16:45:47Z,2016-03-18T10:36:37Z,MERGED,True,11,3,1,https://github.com/AlessandroA,Restore priority bits in NVIC register,1,[],https://github.com/ARMmbed/uvisor/pull/193,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/193#issuecomment-196910310,"The register was modified to check the number of implemented priority
bits but its original value was not restored.
@meriac
@Patater","If this is not performance critical code, I'm fine with leaving the restoration of the old value here, even though we initialize it soon after. Assumptions can and do change. Unwritten assumptions make things even worse. We'll have less brittle code if we do the restoration here.
Imagine if you copy pasted this code to some uVisor disabled initialization code... You'd have to realize what assumptions this code was written under and think if those assumptions were still valid, and then modify the code to meet the requirements of the code's new home.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,194,2016-03-15T17:06:12Z,2016-03-15T18:46:55Z,2016-03-15T18:46:55Z,MERGED,True,25,21,1,https://github.com/meriac,Avoid dependency on RNR-initialisation,4,[],https://github.com/ARMmbed/uvisor/pull/194,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/194,"In case the RNR register is initialised to a region outside of the supported region count the core behaviour is undefined by the architecture. To avoid that we specifically enforce region number zero.
@AlessandroA @Patater","In case the RNR register is initialised to a region outside of the supported region count the core behaviour is undefined by the architecture. To avoid that we specifically enforce region number zero.
@AlessandroA @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,194,2016-03-15T17:06:12Z,2016-03-15T18:46:55Z,2016-03-15T18:46:55Z,MERGED,True,25,21,1,https://github.com/meriac,Avoid dependency on RNR-initialisation,4,[],https://github.com/ARMmbed/uvisor/pull/194,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/194#issuecomment-196934119,"In case the RNR register is initialised to a region outside of the supported region count the core behaviour is undefined by the architecture. To avoid that we specifically enforce region number zero.
@AlessandroA @Patater","If there is a GitHub issue this fixes, mention the issue in the commit message.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,194,2016-03-15T17:06:12Z,2016-03-15T18:46:55Z,2016-03-15T18:46:55Z,MERGED,True,25,21,1,https://github.com/meriac,Avoid dependency on RNR-initialisation,4,[],https://github.com/ARMmbed/uvisor/pull/194,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/194#issuecomment-196945957,"In case the RNR register is initialised to a region outside of the supported region count the core behaviour is undefined by the architecture. To avoid that we specifically enforce region number zero.
@AlessandroA @Patater",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,194,2016-03-15T17:06:12Z,2016-03-15T18:46:55Z,2016-03-15T18:46:55Z,MERGED,True,25,21,1,https://github.com/meriac,Avoid dependency on RNR-initialisation,4,[],https://github.com/ARMmbed/uvisor/pull/194,https://github.com/meriac,4,https://github.com/ARMmbed/uvisor/pull/194#issuecomment-196959223,"In case the RNR register is initialised to a region outside of the supported region count the core behaviour is undefined by the architecture. To avoid that we specifically enforce region number zero.
@AlessandroA @Patater","@AlessandroA @Patater  simplified patch

removed new MPU_RBAR macro, so <<-whitespace-fix is not necessary any more
split into separate functional patches",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,194,2016-03-15T17:06:12Z,2016-03-15T18:46:55Z,2016-03-15T18:46:55Z,MERGED,True,25,21,1,https://github.com/meriac,Avoid dependency on RNR-initialisation,4,[],https://github.com/ARMmbed/uvisor/pull/194,https://github.com/Patater,5,https://github.com/ARMmbed/uvisor/pull/194#issuecomment-196962595,"In case the RNR register is initialised to a region outside of the supported region count the core behaviour is undefined by the architecture. To avoid that we specifically enforce region number zero.
@AlessandroA @Patater",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,194,2016-03-15T17:06:12Z,2016-03-15T18:46:55Z,2016-03-15T18:46:55Z,MERGED,True,25,21,1,https://github.com/meriac,Avoid dependency on RNR-initialisation,4,[],https://github.com/ARMmbed/uvisor/pull/194,https://github.com/AlessandroA,6,https://github.com/ARMmbed/uvisor/pull/194#issuecomment-196963424,"In case the RNR register is initialised to a region outside of the supported region count the core behaviour is undefined by the architecture. To avoid that we specifically enforce region number zero.
@AlessandroA @Patater","Added a comment. Other than that, LGTM.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,194,2016-03-15T17:06:12Z,2016-03-15T18:46:55Z,2016-03-15T18:46:55Z,MERGED,True,25,21,1,https://github.com/meriac,Avoid dependency on RNR-initialisation,4,[],https://github.com/ARMmbed/uvisor/pull/194,https://github.com/meriac,7,https://github.com/ARMmbed/uvisor/pull/194#issuecomment-196968664,"In case the RNR register is initialised to a region outside of the supported region count the core behaviour is undefined by the architecture. To avoid that we specifically enforce region number zero.
@AlessandroA @Patater","@AlessandroA added braces to both HALT_ERROR, please merge if you're happy with it.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,194,2016-03-15T17:06:12Z,2016-03-15T18:46:55Z,2016-03-15T18:46:55Z,MERGED,True,25,21,1,https://github.com/meriac,Avoid dependency on RNR-initialisation,4,[],https://github.com/ARMmbed/uvisor/pull/194,https://github.com/AlessandroA,8,https://github.com/ARMmbed/uvisor/pull/194#issuecomment-196969395,"In case the RNR register is initialised to a region outside of the supported region count the core behaviour is undefined by the architecture. To avoid that we specifically enforce region number zero.
@AlessandroA @Patater",Thanks! LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,195,2016-03-17T15:36:51Z,2016-03-18T09:13:32Z,2016-03-18T10:36:30Z,MERGED,True,16,1,1,https://github.com/AlessandroA,Implement g_nvic_prio_bits for UVISOR_DISABLED,1,[],https://github.com/ARMmbed/uvisor/pull/195,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/195,"When __uvisor_mode is UVISOR_DISABLED the NVIC APIs are used instead of
the vIRQ ones. Now that those APIs are pre-compiled into a library, the
NVIC APIs use the uVisor built-in definitions from cmsis/core_generic.h.
In that file __NVIC_PRIO_BITS is re-defined as a global variable which
is evaluated at start-up. This behaviour has now been mirrored to the
case of disabled uVisor.
@meriac @Patater
Note: This was previously in a previous PR.","When __uvisor_mode is UVISOR_DISABLED the NVIC APIs are used instead of
the vIRQ ones. Now that those APIs are pre-compiled into a library, the
NVIC APIs use the uVisor built-in definitions from cmsis/core_generic.h.
In that file __NVIC_PRIO_BITS is re-defined as a global variable which
is evaluated at start-up. This behaviour has now been mirrored to the
case of disabled uVisor.
@meriac @Patater
Note: This was previously in a previous PR.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,195,2016-03-17T15:36:51Z,2016-03-18T09:13:32Z,2016-03-18T10:36:30Z,MERGED,True,16,1,1,https://github.com/AlessandroA,Implement g_nvic_prio_bits for UVISOR_DISABLED,1,[],https://github.com/ARMmbed/uvisor/pull/195,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/195#issuecomment-197969461,"When __uvisor_mode is UVISOR_DISABLED the NVIC APIs are used instead of
the vIRQ ones. Now that those APIs are pre-compiled into a library, the
NVIC APIs use the uVisor built-in definitions from cmsis/core_generic.h.
In that file __NVIC_PRIO_BITS is re-defined as a global variable which
is evaluated at start-up. This behaviour has now been mirrored to the
case of disabled uVisor.
@meriac @Patater
Note: This was previously in a previous PR.",@meriac @Patater Commit message updated. The added part (Warning: ...) will be added to a GH issue.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,197,2016-03-18T10:48:13Z,2016-03-18T17:19:56Z,2016-03-18T17:19:56Z,MERGED,True,8,0,16,https://github.com/AlessandroA,Add libraries for all configurations in api/lib,1,[],https://github.com/ARMmbed/uvisor/pull/197,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/197,@meriac @Patater,@meriac @Patater,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,197,2016-03-18T10:48:13Z,2016-03-18T17:19:56Z,2016-03-18T17:19:56Z,MERGED,True,8,0,16,https://github.com/AlessandroA,Add libraries for all configurations in api/lib,1,[],https://github.com/ARMmbed/uvisor/pull/197,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/197#issuecomment-198305358,@meriac @Patater,"I ddin't check the binaries, but the versions look good to me.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,197,2016-03-18T10:48:13Z,2016-03-18T17:19:56Z,2016-03-18T17:19:56Z,MERGED,True,8,0,16,https://github.com/AlessandroA,Add libraries for all configurations in api/lib,1,[],https://github.com/ARMmbed/uvisor/pull/197,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/197#issuecomment-198320840,@meriac @Patater,😄,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,198,2016-03-24T13:15:24Z,2016-03-30T15:46:15Z,2016-03-30T15:46:15Z,MERGED,True,5,4,1,https://github.com/nchong,Fix out-by-one error in vmpu_region_bits,1,[],https://github.com/ARMmbed/uvisor/pull/198,https://github.com/nchong,1,https://github.com/ARMmbed/uvisor/pull/198,"This function should compute ceil(log2(size)); the number of bits needed to
address a region of 'size' bytes. If size < 32 then this should be 5 bits
(since the minimum supported region size in v7M is 32 bytes). The function was
incorrect for this case (returning 6 bits) because it rounded-up after the
minimum size check.
The fix has been checked exhaustively by CBMC.","This function should compute ceil(log2(size)); the number of bits needed to
address a region of 'size' bytes. If size < 32 then this should be 5 bits
(since the minimum supported region size in v7M is 32 bytes). The function was
incorrect for this case (returning 6 bits) because it rounded-up after the
minimum size check.
The fix has been checked exhaustively by CBMC.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,198,2016-03-24T13:15:24Z,2016-03-30T15:46:15Z,2016-03-30T15:46:15Z,MERGED,True,5,4,1,https://github.com/nchong,Fix out-by-one error in vmpu_region_bits,1,[],https://github.com/ARMmbed/uvisor/pull/198,https://github.com/ciarmcom,2,https://github.com/ARMmbed/uvisor/pull/198#issuecomment-200825998,"This function should compute ceil(log2(size)); the number of bits needed to
address a region of 'size' bytes. If size < 32 then this should be 5 bits
(since the minimum supported region size in v7M is 32 bytes). The function was
incorrect for this case (returning 6 bits) because it rounded-up after the
minimum size check.
The fix has been checked exhaustively by CBMC.","Automatic CI verification build not done, please verify manually.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,199,2016-04-01T11:03:08Z,2016-04-01T14:20:13Z,2016-04-01T15:37:16Z,MERGED,True,8,0,1,https://github.com/AlessandroA,Fix debug disabled,1,[],https://github.com/ARMmbed/uvisor/pull/199,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/199,"This ensures that applications can run in debug mode with uVisor
disabled. Semihosting is still a requirement for applications that run
with uVisor enabled.
@meriac @Patater","This ensures that applications can run in debug mode with uVisor
disabled. Semihosting is still a requirement for applications that run
with uVisor enabled.
@meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,199,2016-04-01T11:03:08Z,2016-04-01T14:20:13Z,2016-04-01T15:37:16Z,MERGED,True,8,0,1,https://github.com/AlessandroA,Fix debug disabled,1,[],https://github.com/ARMmbed/uvisor/pull/199,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/199#issuecomment-204349948,"This ensures that applications can run in debug mode with uVisor
disabled. Semihosting is still a requirement for applications that run
with uVisor enabled.
@meriac @Patater",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,199,2016-04-01T11:03:08Z,2016-04-01T14:20:13Z,2016-04-01T15:37:16Z,MERGED,True,8,0,1,https://github.com/AlessandroA,Fix debug disabled,1,[],https://github.com/ARMmbed/uvisor/pull/199,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/199#issuecomment-204395044,"This ensures that applications can run in debug mode with uVisor
disabled. Semihosting is still a requirement for applications that run
with uVisor enabled.
@meriac @Patater",@meriac @Patater Updated after offline conversation. Now main_entry returns immediately if the magic is wrong or uVisor is disabled. The magic is still checked in the vMPU sanity checks.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,199,2016-04-01T11:03:08Z,2016-04-01T14:20:13Z,2016-04-01T15:37:16Z,MERGED,True,8,0,1,https://github.com/AlessandroA,Fix debug disabled,1,[],https://github.com/ARMmbed/uvisor/pull/199,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/199#issuecomment-204395713,"This ensures that applications can run in debug mode with uVisor
disabled. Semihosting is still a requirement for applications that run
with uVisor enabled.
@meriac @Patater",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,199,2016-04-01T11:03:08Z,2016-04-01T14:20:13Z,2016-04-01T15:37:16Z,MERGED,True,8,0,1,https://github.com/AlessandroA,Fix debug disabled,1,[],https://github.com/ARMmbed/uvisor/pull/199,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/199#issuecomment-204396784,"This ensures that applications can run in debug mode with uVisor
disabled. Semihosting is still a requirement for applications that run
with uVisor enabled.
@meriac @Patater",Thanks! Fixed.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,200,2016-04-04T14:37:44Z,2016-04-04T15:32:13Z,2016-05-22T20:25:35Z,MERGED,True,261,11,5,https://github.com/AlessandroA,Simplify uvisor lib,2,[],https://github.com/ARMmbed/uvisor/pull/200,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/200,"This PR ensures that internally uVisor does not rely on any yotta-specific symbol. Instead, it is the job of the host-OS glue layer (uvisor-lib) to define the relevant symbols based on OS-specific information.
Currently the only 2 symbols that are used for this are:

UVISOR_PRESENT.
ARCH_MPU_${ARCH_MPU}.

Example:
In mbed OS the symbol UVISOR_PRESENT is mapped to YOTTA_CFG_UVISOR_PRESENT. The symbol ARCH_MPU_* depends on the target, which can be inferred using TARGET_LIKE_* from the config symbols.
See the related PR to check how this is implemented in uvisor-lib.
@meriac @Patater @niklas-arm","This PR ensures that internally uVisor does not rely on any yotta-specific symbol. Instead, it is the job of the host-OS glue layer (uvisor-lib) to define the relevant symbols based on OS-specific information.
Currently the only 2 symbols that are used for this are:

UVISOR_PRESENT.
ARCH_MPU_${ARCH_MPU}.

Example:
In mbed OS the symbol UVISOR_PRESENT is mapped to YOTTA_CFG_UVISOR_PRESENT. The symbol ARCH_MPU_* depends on the target, which can be inferred using TARGET_LIKE_* from the config symbols.
See the related PR to check how this is implemented in uvisor-lib.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,200,2016-04-04T14:37:44Z,2016-04-04T15:32:13Z,2016-05-22T20:25:35Z,MERGED,True,261,11,5,https://github.com/AlessandroA,Simplify uvisor lib,2,[],https://github.com/ARMmbed/uvisor/pull/200,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/200#issuecomment-205327969,"This PR ensures that internally uVisor does not rely on any yotta-specific symbol. Instead, it is the job of the host-OS glue layer (uvisor-lib) to define the relevant symbols based on OS-specific information.
Currently the only 2 symbols that are used for this are:

UVISOR_PRESENT.
ARCH_MPU_${ARCH_MPU}.

Example:
In mbed OS the symbol UVISOR_PRESENT is mapped to YOTTA_CFG_UVISOR_PRESENT. The symbol ARCH_MPU_* depends on the target, which can be inferred using TARGET_LIKE_* from the config symbols.
See the related PR to check how this is implemented in uvisor-lib.
@meriac @Patater @niklas-arm",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,201,2016-04-04T16:20:43Z,2016-04-04T16:22:44Z,2016-05-22T20:25:37Z,MERGED,True,1,1,1,https://github.com/AlessandroA,Remove timestamps and UUIDs from archive files,1,[],https://github.com/ARMmbed/uvisor/pull/201,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/201,"This was preventing reproducibility since archives were always different
from build to build.
@meriac @niklas-arm @Patater","This was preventing reproducibility since archives were always different
from build to build.
@meriac @niklas-arm @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,202,2016-04-04T18:38:36Z,2016-04-04T19:53:41Z,2016-05-22T20:25:39Z,MERGED,True,4,2,2,https://github.com/AlessandroA,"Declare uvisor_disabled_{s,g}et_vector weak",1,[],https://github.com/ARMmbed/uvisor/pull/202,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/202,"This will allow an host OS to override the functions implementation to
use a different IRQ handling approach when uVisor is disabled.
@meriac @niklas-arm @Patater","This will allow an host OS to override the functions implementation to
use a different IRQ handling approach when uVisor is disabled.
@meriac @niklas-arm @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,203,2016-04-05T16:35:35Z,2016-04-05T18:21:47Z,2016-05-22T20:25:41Z,MERGED,True,1,1,1,https://github.com/AlessandroA,Fix -DUVISOR_PRESENT=1 definition for consistency,1,[],https://github.com/ARMmbed/uvisor/pull/203,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/203,"The symbol is expected to be defined AND set to 1 explicitly by
uvisor-lib. It should behave the same for uvisor-core itself, although
in this case it was not critical.
@meriac @Patater @niklas-arm","The symbol is expected to be defined AND set to 1 explicitly by
uvisor-lib. It should behave the same for uvisor-core itself, although
in this case it was not critical.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,204,2016-04-13T10:09:16Z,2016-05-11T10:55:59Z,2016-05-11T10:55:59Z,CLOSED,False,372,3,13,https://github.com/niklas-arm,[wip] Add page allocator to uVisor core,9,[],https://github.com/ARMmbed/uvisor/pull/204,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/204,"This adds a page allocator to uVisor core with a max. of 64 pages.
Page size is defaulted to 16kB, this may need to be adapted, depending on the application type (how do we do that?).
Areas for review:

correct validation of inputs,
a change to the config wrapper!
this is missing any actual protection code for securing pages against access from boxes!

cc @AlessandroA @meriac @Patater","This adds a page allocator to uVisor core with a max. of 64 pages.
Page size is defaulted to 16kB, this may need to be adapted, depending on the application type (how do we do that?).
Areas for review:

correct validation of inputs,
a change to the config wrapper!
this is missing any actual protection code for securing pages against access from boxes!

cc @AlessandroA @meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,208,2016-04-29T15:08:23Z,2016-05-04T15:41:11Z,2016-05-04T15:41:11Z,MERGED,True,8,3,2,https://github.com/niklas-arm,Updates unsupported target code.,2,[],https://github.com/ARMmbed/uvisor/pull/208,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/208,"Code will be copied into uvisor-lib, see https://github.com/ARMmbed/uvisor-mbed-lib/pull/6.
cc @Patater @meriac @AlessandroA","Code will be copied into uvisor-lib, see https://github.com/ARMmbed/uvisor-mbed-lib/pull/6.
cc @Patater @meriac @AlessandroA",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,208,2016-04-29T15:08:23Z,2016-05-04T15:41:11Z,2016-05-04T15:41:11Z,MERGED,True,8,3,2,https://github.com/niklas-arm,Updates unsupported target code.,2,[],https://github.com/ARMmbed/uvisor/pull/208,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/208#issuecomment-216906092,"Code will be copied into uvisor-lib, see https://github.com/ARMmbed/uvisor-mbed-lib/pull/6.
cc @Patater @meriac @AlessandroA",+1,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,209,2016-05-03T02:28:03Z,2016-05-06T05:14:16Z,2016-05-06T05:14:16Z,CLOSED,False,222,0,6,https://github.com/ccli8,Support Nuvoton NUC472 and M451,1,[],https://github.com/ARMmbed/uvisor/pull/209,https://github.com/ccli8,1,https://github.com/ARMmbed/uvisor/pull/209,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,210,2016-05-04T17:14:02Z,2016-05-06T14:22:38Z,2016-05-06T14:22:38Z,CLOSED,False,30,16,3,https://github.com/c1728p9,Add support for IAR,1,[],https://github.com/ARMmbed/uvisor/pull/210,https://github.com/c1728p9,1,https://github.com/ARMmbed/uvisor/pull/210,"Add IAR compiler intrinsics, implement vmpu_bits for IAR and update
the macro ADDRESS_WRITE to be compatible with IAR.","Add IAR compiler intrinsics, implement vmpu_bits for IAR and update
the macro ADDRESS_WRITE to be compatible with IAR.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,210,2016-05-04T17:14:02Z,2016-05-06T14:22:38Z,2016-05-06T14:22:38Z,CLOSED,False,30,16,3,https://github.com/c1728p9,Add support for IAR,1,[],https://github.com/ARMmbed/uvisor/pull/210,https://github.com/c1728p9,2,https://github.com/ARMmbed/uvisor/pull/210#issuecomment-216935890,"Add IAR compiler intrinsics, implement vmpu_bits for IAR and update
the macro ADDRESS_WRITE to be compatible with IAR.","Taken from here:
https://github.com/ARMmbed/uvisor-mbed-lib/pull/5",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,210,2016-05-04T17:14:02Z,2016-05-06T14:22:38Z,2016-05-06T14:22:38Z,CLOSED,False,30,16,3,https://github.com/c1728p9,Add support for IAR,1,[],https://github.com/ARMmbed/uvisor/pull/210,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/210#issuecomment-217112849,"Add IAR compiler intrinsics, implement vmpu_bits for IAR and update
the macro ADDRESS_WRITE to be compatible with IAR.","👍
@meriac  ?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,210,2016-05-04T17:14:02Z,2016-05-06T14:22:38Z,2016-05-06T14:22:38Z,CLOSED,False,30,16,3,https://github.com/c1728p9,Add support for IAR,1,[],https://github.com/ARMmbed/uvisor/pull/210,https://github.com/meriac,4,https://github.com/ARMmbed/uvisor/pull/210#issuecomment-217453349,"Add IAR compiler intrinsics, implement vmpu_bits for IAR and update
the macro ADDRESS_WRITE to be compatible with IAR.",@c1728p9 : closed in favour of #211,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,211,2016-05-05T16:19:21Z,2016-05-06T14:39:21Z,2016-05-22T20:25:47Z,MERGED,True,114,102,9,https://github.com/AlessandroA,Fix compiler attributes and functions for IAR and unsupported targets,6,[],https://github.com/ARMmbed/uvisor/pull/211,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/211,"This PR is a modification of this previously filed PR by @c1728p9 .
It introduces the following changes:

ADDRESS_WRITE is now a static inline function.
Compiler attributes have been split into core-only and shared.

UVISOR_FORCEINLINE is now conditionally defined based on the toolchain.


vmpu_bits is only defined with UVISOR_PRESENT=1.

@meriac @Patater @niklas-arm @c1728p9
@c1728p9 Please it would help if you could test this on IAR as we don't have access to it yet.","This PR is a modification of this previously filed PR by @c1728p9 .
It introduces the following changes:

ADDRESS_WRITE is now a static inline function.
Compiler attributes have been split into core-only and shared.

UVISOR_FORCEINLINE is now conditionally defined based on the toolchain.


vmpu_bits is only defined with UVISOR_PRESENT=1.

@meriac @Patater @niklas-arm @c1728p9
@c1728p9 Please it would help if you could test this on IAR as we don't have access to it yet.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,211,2016-05-05T16:19:21Z,2016-05-06T14:39:21Z,2016-05-22T20:25:47Z,MERGED,True,114,102,9,https://github.com/AlessandroA,Fix compiler attributes and functions for IAR and unsupported targets,6,[],https://github.com/ARMmbed/uvisor/pull/211,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/211#issuecomment-217201942,"This PR is a modification of this previously filed PR by @c1728p9 .
It introduces the following changes:

ADDRESS_WRITE is now a static inline function.
Compiler attributes have been split into core-only and shared.

UVISOR_FORCEINLINE is now conditionally defined based on the toolchain.


vmpu_bits is only defined with UVISOR_PRESENT=1.

@meriac @Patater @niklas-arm @c1728p9
@c1728p9 Please it would help if you could test this on IAR as we don't have access to it yet.",LGTM. Nothing I commented about would be a blocker.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,211,2016-05-05T16:19:21Z,2016-05-06T14:39:21Z,2016-05-22T20:25:47Z,MERGED,True,114,102,9,https://github.com/AlessandroA,Fix compiler attributes and functions for IAR and unsupported targets,6,[],https://github.com/ARMmbed/uvisor/pull/211,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/211#issuecomment-217389670,"This PR is a modification of this previously filed PR by @c1728p9 .
It introduces the following changes:

ADDRESS_WRITE is now a static inline function.
Compiler attributes have been split into core-only and shared.

UVISOR_FORCEINLINE is now conditionally defined based on the toolchain.


vmpu_bits is only defined with UVISOR_PRESENT=1.

@meriac @Patater @niklas-arm @c1728p9
@c1728p9 Please it would help if you could test this on IAR as we don't have access to it yet.","Removed cast to int.
Added volatile keyword where missing.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,211,2016-05-05T16:19:21Z,2016-05-06T14:39:21Z,2016-05-22T20:25:47Z,MERGED,True,114,102,9,https://github.com/AlessandroA,Fix compiler attributes and functions for IAR and unsupported targets,6,[],https://github.com/ARMmbed/uvisor/pull/211,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/211#issuecomment-217396869,"This PR is a modification of this previously filed PR by @c1728p9 .
It introduces the following changes:

ADDRESS_WRITE is now a static inline function.
Compiler attributes have been split into core-only and shared.

UVISOR_FORCEINLINE is now conditionally defined based on the toolchain.


vmpu_bits is only defined with UVISOR_PRESENT=1.

@meriac @Patater @niklas-arm @c1728p9
@c1728p9 Please it would help if you could test this on IAR as we don't have access to it yet.",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,211,2016-05-05T16:19:21Z,2016-05-06T14:39:21Z,2016-05-22T20:25:47Z,MERGED,True,114,102,9,https://github.com/AlessandroA,Fix compiler attributes and functions for IAR and unsupported targets,6,[],https://github.com/ARMmbed/uvisor/pull/211,https://github.com/c1728p9,5,https://github.com/ARMmbed/uvisor/pull/211#issuecomment-219251197,"This PR is a modification of this previously filed PR by @c1728p9 .
It introduces the following changes:

ADDRESS_WRITE is now a static inline function.
Compiler attributes have been split into core-only and shared.

UVISOR_FORCEINLINE is now conditionally defined based on the toolchain.


vmpu_bits is only defined with UVISOR_PRESENT=1.

@meriac @Patater @niklas-arm @c1728p9
@c1728p9 Please it would help if you could test this on IAR as we don't have access to it yet.","I gave the latest uvisor-mbed-lib a try, and I'm still getting errors.  I think this patch missed a bit from the one it was based on.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,212,2016-05-06T05:29:33Z,2016-05-06T14:42:24Z,2016-05-06T14:42:24Z,MERGED,True,222,0,6,https://github.com/ccli8,Support Nuvoton NUC472 and M451,1,[],https://github.com/ARMmbed/uvisor/pull/212,https://github.com/ccli8,1,https://github.com/ARMmbed/uvisor/pull/212,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,213,2016-05-09T16:12:07Z,2016-05-25T09:10:20Z,2016-05-25T09:10:20Z,CLOSED,False,219,7,11,https://github.com/Patater,RFC: Add RTOS integration mechanisms (export table and privileged IRQ handlers),2,[],https://github.com/ARMmbed/uvisor/pull/213,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/213,@meriac @AlessandroA @niklas-arm,@meriac @AlessandroA @niklas-arm,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,213,2016-05-09T16:12:07Z,2016-05-25T09:10:20Z,2016-05-25T09:10:20Z,CLOSED,False,219,7,11,https://github.com/Patater,RFC: Add RTOS integration mechanisms (export table and privileged IRQ handlers),2,[],https://github.com/ARMmbed/uvisor/pull/213,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/213#issuecomment-218428291,@meriac @AlessandroA @niklas-arm,Updated to call default handlers if no privileged handlers are registered,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,213,2016-05-09T16:12:07Z,2016-05-25T09:10:20Z,2016-05-25T09:10:20Z,CLOSED,False,219,7,11,https://github.com/Patater,RFC: Add RTOS integration mechanisms (export table and privileged IRQ handlers),2,[],https://github.com/ARMmbed/uvisor/pull/213,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/213#issuecomment-218780715,@meriac @AlessandroA @niklas-arm,"This should not be merged yet as process_switch is currently not switching:

uvisor_ctx
g_active_box",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,213,2016-05-09T16:12:07Z,2016-05-25T09:10:20Z,2016-05-25T09:10:20Z,CLOSED,False,219,7,11,https://github.com/Patater,RFC: Add RTOS integration mechanisms (export table and privileged IRQ handlers),2,[],https://github.com/ARMmbed/uvisor/pull/213,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/213#issuecomment-221506847,@meriac @AlessandroA @niklas-arm,"Commits updated with @AlessandroA feedback.
Don't merge to master, as documentation is not yet ready. Instead, merge to dev.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,213,2016-05-09T16:12:07Z,2016-05-25T09:10:20Z,2016-05-25T09:10:20Z,CLOSED,False,219,7,11,https://github.com/Patater,RFC: Add RTOS integration mechanisms (export table and privileged IRQ handlers),2,[],https://github.com/ARMmbed/uvisor/pull/213,https://github.com/Patater,5,https://github.com/ARMmbed/uvisor/pull/213#issuecomment-221516730,@meriac @AlessandroA @niklas-arm,Closing in favor of #224,True,{'THUMBS_UP': ['https://github.com/AlessandroA']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,214,2016-05-11T10:55:45Z,2016-05-27T15:54:58Z,2016-05-27T15:54:58Z,CLOSED,False,512,31,22,https://github.com/niklas-arm,Add tier-1 page allocator,13,[],https://github.com/ARMmbed/uvisor/pull/214,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/214,"This adds a page allocator to uVisor core with a max. of 64 pages.
Page size is defaulted to 16kB, this may need to be adapted, depending on the application type (how do we do that?).
Areas for review:

correct validation of inputs,
a change to the config wrapper!
this is missing any actual protection code for securing pages against access from boxes!

cc @AlessandroA @meriac @Patater","This adds a page allocator to uVisor core with a max. of 64 pages.
Page size is defaulted to 16kB, this may need to be adapted, depending on the application type (how do we do that?).
Areas for review:

correct validation of inputs,
a change to the config wrapper!
this is missing any actual protection code for securing pages against access from boxes!

cc @AlessandroA @meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,214,2016-05-11T10:55:45Z,2016-05-27T15:54:58Z,2016-05-27T15:54:58Z,CLOSED,False,512,31,22,https://github.com/niklas-arm,Add tier-1 page allocator,13,[],https://github.com/ARMmbed/uvisor/pull/214,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/214#issuecomment-218429306,"This adds a page allocator to uVisor core with a max. of 64 pages.
Page size is defaulted to 16kB, this may need to be adapted, depending on the application type (how do we do that?).
Areas for review:

correct validation of inputs,
a change to the config wrapper!
this is missing any actual protection code for securing pages against access from boxes!

cc @AlessandroA @meriac @Patater","The ""Change %p to 0x%08x because tiny printf is too tiny"" commit should get applied as a fixup, so it looks like you used 0x%08x instead of %p from original implementation. Otherwise, it adds unnecessary noise to the commit history.",True,{'THUMBS_UP': ['https://github.com/niklas-arm']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,214,2016-05-11T10:55:45Z,2016-05-27T15:54:58Z,2016-05-27T15:54:58Z,CLOSED,False,512,31,22,https://github.com/niklas-arm,Add tier-1 page allocator,13,[],https://github.com/ARMmbed/uvisor/pull/214,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/214#issuecomment-218442938,"This adds a page allocator to uVisor core with a max. of 64 pages.
Page size is defaulted to 16kB, this may need to be adapted, depending on the application type (how do we do that?).
Areas for review:

correct validation of inputs,
a change to the config wrapper!
this is missing any actual protection code for securing pages against access from boxes!

cc @AlessandroA @meriac @Patater","Is page_* a good prefix for the page allocator? Some function names look ambiguous, like page_init(). What about page_heap_* / page_allocator_* ? Shouldn't make the name too much longer. Bonus one: pager_* 😛",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,214,2016-05-11T10:55:45Z,2016-05-27T15:54:58Z,2016-05-27T15:54:58Z,CLOSED,False,512,31,22,https://github.com/niklas-arm,Add tier-1 page allocator,13,[],https://github.com/ARMmbed/uvisor/pull/214,https://github.com/niklas-arm,4,https://github.com/ARMmbed/uvisor/pull/214#issuecomment-218456553,"This adds a page allocator to uVisor core with a max. of 64 pages.
Page size is defaulted to 16kB, this may need to be adapted, depending on the application type (how do we do that?).
Areas for review:

correct validation of inputs,
a change to the config wrapper!
this is missing any actual protection code for securing pages against access from boxes!

cc @AlessandroA @meriac @Patater","Hm, the user facing API is uvisor_page_malloc and uvisor_page_free, which I think is reasonably named.
I'd be ok with renaming the internal API to page_allocator_{init, malloc, free} though.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,214,2016-05-11T10:55:45Z,2016-05-27T15:54:58Z,2016-05-27T15:54:58Z,CLOSED,False,512,31,22,https://github.com/niklas-arm,Add tier-1 page allocator,13,[],https://github.com/ARMmbed/uvisor/pull/214,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/214#issuecomment-219386637,"This adds a page allocator to uVisor core with a max. of 64 pages.
Page size is defaulted to 16kB, this may need to be adapted, depending on the application type (how do we do that?).
Areas for review:

correct validation of inputs,
a change to the config wrapper!
this is missing any actual protection code for securing pages against access from boxes!

cc @AlessandroA @meriac @Patater","Before the final review, please consider the following style guidelines:

All comments capitalized.
All comments punctuated if they are a full English sentence.
1TBS:

K&R braces, plus:
Even 1-line-scopes have braces.


One statement per line (so if (condition) { do_this(); } is not allowed).
Always put a space after a cast ((this_type) var_name).
Always enforce the new style even if modifying a file that has wrong style. If it doesn't take too long, we usually create an additional commit to update the style of the modified file as a whole.
80 col max for comments, 120 col max for code.
Plus, pretty much everything which is here.

@Patater please comment if something is missing from the list. Also, we should make this an internal doc.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,214,2016-05-11T10:55:45Z,2016-05-27T15:54:58Z,2016-05-27T15:54:58Z,CLOSED,False,512,31,22,https://github.com/niklas-arm,Add tier-1 page allocator,13,[],https://github.com/ARMmbed/uvisor/pull/214,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/214#issuecomment-219388877,"This adds a page allocator to uVisor core with a max. of 64 pages.
Page size is defaulted to 16kB, this may need to be adapted, depending on the application type (how do we do that?).
Areas for review:

correct validation of inputs,
a change to the config wrapper!
this is missing any actual protection code for securing pages against access from boxes!

cc @AlessandroA @meriac @Patater","I would recommend we use the doc you linked to instead of making an internal doc. If something is missing from that doc, we can add to it.
Your list is likely not complete, but it'd be hard to make a complete one. For example, what is our style in this case: const char *const string, or maybe const char * const string. Maybe we ought to do const char * string instead of const char *string for consistency with the const pointer case, but that breaks with general K&R style. I don't think we've decided on this.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,214,2016-05-11T10:55:45Z,2016-05-27T15:54:58Z,2016-05-27T15:54:58Z,CLOSED,False,512,31,22,https://github.com/niklas-arm,Add tier-1 page allocator,13,[],https://github.com/ARMmbed/uvisor/pull/214,https://github.com/AlessandroA,7,https://github.com/ARMmbed/uvisor/pull/214#issuecomment-219397505,"This adds a page allocator to uVisor core with a max. of 64 pages.
Page size is defaulted to 16kB, this may need to be adapted, depending on the application type (how do we do that?).
Areas for review:

correct validation of inputs,
a change to the config wrapper!
this is missing any actual protection code for securing pages against access from boxes!

cc @AlessandroA @meriac @Patater","Yes, sorry I should have been more specific. The list above is the one that applies specifically to this PR from what I have seen. The link is the real complete list.
And yes, we also have additions, which I would like to capture somewhere. For example, we should have const char * a_string, not const char *a_string. And in addition to this, we should use the read-from-right-to-left approach:
int volatile * volatile this_pointer;
which reads to ""this_pointer is a volatile pointer to a volatile int"".",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,214,2016-05-11T10:55:45Z,2016-05-27T15:54:58Z,2016-05-27T15:54:58Z,CLOSED,False,512,31,22,https://github.com/niklas-arm,Add tier-1 page allocator,13,[],https://github.com/ARMmbed/uvisor/pull/214,https://github.com/niklas-arm,8,https://github.com/ARMmbed/uvisor/pull/214#issuecomment-222183938,"This adds a page allocator to uVisor core with a max. of 64 pages.
Page size is defaulted to 16kB, this may need to be adapted, depending on the application type (how do we do that?).
Areas for review:

correct validation of inputs,
a change to the config wrapper!
this is missing any actual protection code for securing pages against access from boxes!

cc @AlessandroA @meriac @Patater",Closed in favor of #227.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,215,2016-05-12T11:28:06Z,2017-01-17T09:35:39Z,2017-01-17T09:35:39Z,CLOSED,False,35,18,5,https://github.com/Patater,WIP: Add OS private BSS,2,[],https://github.com/ARMmbed/uvisor/pull/215,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/215,"@meriac @AlessandroA @niklas-arm
This goes along with an mbed-os change to the linker script. Here is what the uvisor.bss section of the K64F linker script could look like.
    /* Ensure that the uVisor .bss is the first section in the public SRAM. */                                                                                                                                                                                                                                                
    .uvisor.bss (NOLOAD):                                                                                                                                                                                                                                                                                                     
    {                                                                                                                                                                                                                                                                                                                         
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_start = .;                                                                                                                                                                                                                                                                                               

        /* uVisor main .bss (protected) */                                                                                                                                                                                                                                                                                    
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_main_start = .;                                                                                                                                                                                                                                                                                          
        KEEP(*(.keep.uvisor.bss.main))                                                                                                                                                                                                                                                                                        
        __uvisor_bss_main_end = .;                                                                                                                                                                                                                                                                                            

+        /* OS private BSS (protected) */                                                                                                                                                                                                                                                                                      
+       __uvisor_os_priv_start = .;                                                                                                                                                                                                                                                                                           
+        *(.bss.os_priv)                                                                                                                                                                                                                                                                                                       
+        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
+        __uvisor_os_priv_end = .;                                                                                                                                                                                                                                                                                             
+                                                                                                                                                                                                                                                                                                                              
        /* Secure boxes .bss (protected) */                                                                                                                                                                                                                                                                                   
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_boxes_start = .;                                                                                                                                                                                                                                                                                         
        KEEP(*(.keep.uvisor.bss.boxes))                                                                                                                                                                                                                                                                                       
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_boxes_end = .;                                                                                                                                                                                                                                                                                           

        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_end = .;                                                                                                                                                                                                                                                                                                 
    } > RAM","@meriac @AlessandroA @niklas-arm
This goes along with an mbed-os change to the linker script. Here is what the uvisor.bss section of the K64F linker script could look like.
    /* Ensure that the uVisor .bss is the first section in the public SRAM. */                                                                                                                                                                                                                                                
    .uvisor.bss (NOLOAD):                                                                                                                                                                                                                                                                                                     
    {                                                                                                                                                                                                                                                                                                                         
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_start = .;                                                                                                                                                                                                                                                                                               

        /* uVisor main .bss (protected) */                                                                                                                                                                                                                                                                                    
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_main_start = .;                                                                                                                                                                                                                                                                                          
        KEEP(*(.keep.uvisor.bss.main))                                                                                                                                                                                                                                                                                        
        __uvisor_bss_main_end = .;                                                                                                                                                                                                                                                                                            

+        /* OS private BSS (protected) */                                                                                                                                                                                                                                                                                      
+       __uvisor_os_priv_start = .;                                                                                                                                                                                                                                                                                           
+        *(.bss.os_priv)                                                                                                                                                                                                                                                                                                       
+        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
+        __uvisor_os_priv_end = .;                                                                                                                                                                                                                                                                                             
+                                                                                                                                                                                                                                                                                                                              
        /* Secure boxes .bss (protected) */                                                                                                                                                                                                                                                                                   
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_boxes_start = .;                                                                                                                                                                                                                                                                                         
        KEEP(*(.keep.uvisor.bss.boxes))                                                                                                                                                                                                                                                                                       
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_boxes_end = .;                                                                                                                                                                                                                                                                                           

        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_end = .;                                                                                                                                                                                                                                                                                                 
    } > RAM",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,215,2016-05-12T11:28:06Z,2017-01-17T09:35:39Z,2017-01-17T09:35:39Z,CLOSED,False,35,18,5,https://github.com/Patater,WIP: Add OS private BSS,2,[],https://github.com/ARMmbed/uvisor/pull/215,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/215#issuecomment-218737032,"@meriac @AlessandroA @niklas-arm
This goes along with an mbed-os change to the linker script. Here is what the uvisor.bss section of the K64F linker script could look like.
    /* Ensure that the uVisor .bss is the first section in the public SRAM. */                                                                                                                                                                                                                                                
    .uvisor.bss (NOLOAD):                                                                                                                                                                                                                                                                                                     
    {                                                                                                                                                                                                                                                                                                                         
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_start = .;                                                                                                                                                                                                                                                                                               

        /* uVisor main .bss (protected) */                                                                                                                                                                                                                                                                                    
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_main_start = .;                                                                                                                                                                                                                                                                                          
        KEEP(*(.keep.uvisor.bss.main))                                                                                                                                                                                                                                                                                        
        __uvisor_bss_main_end = .;                                                                                                                                                                                                                                                                                            

+        /* OS private BSS (protected) */                                                                                                                                                                                                                                                                                      
+       __uvisor_os_priv_start = .;                                                                                                                                                                                                                                                                                           
+        *(.bss.os_priv)                                                                                                                                                                                                                                                                                                       
+        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
+        __uvisor_os_priv_end = .;                                                                                                                                                                                                                                                                                             
+                                                                                                                                                                                                                                                                                                                              
        /* Secure boxes .bss (protected) */                                                                                                                                                                                                                                                                                   
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_boxes_start = .;                                                                                                                                                                                                                                                                                         
        KEEP(*(.keep.uvisor.bss.boxes))                                                                                                                                                                                                                                                                                       
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_boxes_end = .;                                                                                                                                                                                                                                                                                           

        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_end = .;                                                                                                                                                                                                                                                                                                 
    } > RAM","Could you add a description to the commit? This is technically introducing a new important feature, because it allows an operating system to hold private data when running in privileged mode.
This will all be captured by a documentation extension that explains the privileged features exported by uVisor.",True,{'THUMBS_UP': ['https://github.com/Patater']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,215,2016-05-12T11:28:06Z,2017-01-17T09:35:39Z,2017-01-17T09:35:39Z,CLOSED,False,35,18,5,https://github.com/Patater,WIP: Add OS private BSS,2,[],https://github.com/ARMmbed/uvisor/pull/215,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/215#issuecomment-218743763,"@meriac @AlessandroA @niklas-arm
This goes along with an mbed-os change to the linker script. Here is what the uvisor.bss section of the K64F linker script could look like.
    /* Ensure that the uVisor .bss is the first section in the public SRAM. */                                                                                                                                                                                                                                                
    .uvisor.bss (NOLOAD):                                                                                                                                                                                                                                                                                                     
    {                                                                                                                                                                                                                                                                                                                         
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_start = .;                                                                                                                                                                                                                                                                                               

        /* uVisor main .bss (protected) */                                                                                                                                                                                                                                                                                    
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_main_start = .;                                                                                                                                                                                                                                                                                          
        KEEP(*(.keep.uvisor.bss.main))                                                                                                                                                                                                                                                                                        
        __uvisor_bss_main_end = .;                                                                                                                                                                                                                                                                                            

+        /* OS private BSS (protected) */                                                                                                                                                                                                                                                                                      
+       __uvisor_os_priv_start = .;                                                                                                                                                                                                                                                                                           
+        *(.bss.os_priv)                                                                                                                                                                                                                                                                                                       
+        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
+        __uvisor_os_priv_end = .;                                                                                                                                                                                                                                                                                             
+                                                                                                                                                                                                                                                                                                                              
        /* Secure boxes .bss (protected) */                                                                                                                                                                                                                                                                                   
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_boxes_start = .;                                                                                                                                                                                                                                                                                         
        KEEP(*(.keep.uvisor.bss.boxes))                                                                                                                                                                                                                                                                                       
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_boxes_end = .;                                                                                                                                                                                                                                                                                           

        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_end = .;                                                                                                                                                                                                                                                                                                 
    } > RAM",Updated to address Alessandro comments,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,215,2016-05-12T11:28:06Z,2017-01-17T09:35:39Z,2017-01-17T09:35:39Z,CLOSED,False,35,18,5,https://github.com/Patater,WIP: Add OS private BSS,2,[],https://github.com/ARMmbed/uvisor/pull/215,https://github.com/mazimkhan,4,https://github.com/ARMmbed/uvisor/pull/215#issuecomment-245599870,"@meriac @AlessandroA @niklas-arm
This goes along with an mbed-os change to the linker script. Here is what the uvisor.bss section of the K64F linker script could look like.
    /* Ensure that the uVisor .bss is the first section in the public SRAM. */                                                                                                                                                                                                                                                
    .uvisor.bss (NOLOAD):                                                                                                                                                                                                                                                                                                     
    {                                                                                                                                                                                                                                                                                                                         
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_start = .;                                                                                                                                                                                                                                                                                               

        /* uVisor main .bss (protected) */                                                                                                                                                                                                                                                                                    
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_main_start = .;                                                                                                                                                                                                                                                                                          
        KEEP(*(.keep.uvisor.bss.main))                                                                                                                                                                                                                                                                                        
        __uvisor_bss_main_end = .;                                                                                                                                                                                                                                                                                            

+        /* OS private BSS (protected) */                                                                                                                                                                                                                                                                                      
+       __uvisor_os_priv_start = .;                                                                                                                                                                                                                                                                                           
+        *(.bss.os_priv)                                                                                                                                                                                                                                                                                                       
+        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
+        __uvisor_os_priv_end = .;                                                                                                                                                                                                                                                                                             
+                                                                                                                                                                                                                                                                                                                              
        /* Secure boxes .bss (protected) */                                                                                                                                                                                                                                                                                   
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_boxes_start = .;                                                                                                                                                                                                                                                                                         
        KEEP(*(.keep.uvisor.bss.boxes))                                                                                                                                                                                                                                                                                       
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_boxes_end = .;                                                                                                                                                                                                                                                                                           

        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_end = .;                                                                                                                                                                                                                                                                                                 
    } > RAM",retest,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,215,2016-05-12T11:28:06Z,2017-01-17T09:35:39Z,2017-01-17T09:35:39Z,CLOSED,False,35,18,5,https://github.com/Patater,WIP: Add OS private BSS,2,[],https://github.com/ARMmbed/uvisor/pull/215,https://github.com/Patater,5,https://github.com/ARMmbed/uvisor/pull/215#issuecomment-273065823,"@meriac @AlessandroA @niklas-arm
This goes along with an mbed-os change to the linker script. Here is what the uvisor.bss section of the K64F linker script could look like.
    /* Ensure that the uVisor .bss is the first section in the public SRAM. */                                                                                                                                                                                                                                                
    .uvisor.bss (NOLOAD):                                                                                                                                                                                                                                                                                                     
    {                                                                                                                                                                                                                                                                                                                         
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_start = .;                                                                                                                                                                                                                                                                                               

        /* uVisor main .bss (protected) */                                                                                                                                                                                                                                                                                    
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_main_start = .;                                                                                                                                                                                                                                                                                          
        KEEP(*(.keep.uvisor.bss.main))                                                                                                                                                                                                                                                                                        
        __uvisor_bss_main_end = .;                                                                                                                                                                                                                                                                                            

+        /* OS private BSS (protected) */                                                                                                                                                                                                                                                                                      
+       __uvisor_os_priv_start = .;                                                                                                                                                                                                                                                                                           
+        *(.bss.os_priv)                                                                                                                                                                                                                                                                                                       
+        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
+        __uvisor_os_priv_end = .;                                                                                                                                                                                                                                                                                             
+                                                                                                                                                                                                                                                                                                                              
        /* Secure boxes .bss (protected) */                                                                                                                                                                                                                                                                                   
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_boxes_start = .;                                                                                                                                                                                                                                                                                         
        KEEP(*(.keep.uvisor.bss.boxes))                                                                                                                                                                                                                                                                                       
        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_boxes_end = .;                                                                                                                                                                                                                                                                                           

        . = ALIGN(32);                                                                                                                                                                                                                                                                                                        
        __uvisor_bss_end = .;                                                                                                                                                                                                                                                                                                 
    } > RAM",Closing PR. We'll take a different approach to solving this problem.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,216,2016-05-16T12:07:35Z,2016-05-16T12:49:43Z,2016-05-22T20:33:39Z,MERGED,True,11,7,2,https://github.com/AlessandroA,Fix IAR again,2,[],https://github.com/ARMmbed/uvisor/pull/216,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/216,"Fixes:

Attributes not re-defined for IAR.
Wrong volatile cast previously introduced (see commit description).

@meriac @Patater @niklas-arm  @c1728p9","Fixes:

Attributes not re-defined for IAR.
Wrong volatile cast previously introduced (see commit description).

@meriac @Patater @niklas-arm  @c1728p9",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,216,2016-05-16T12:07:35Z,2016-05-16T12:49:43Z,2016-05-22T20:33:39Z,MERGED,True,11,7,2,https://github.com/AlessandroA,Fix IAR again,2,[],https://github.com/ARMmbed/uvisor/pull/216,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/216#issuecomment-219419043,"Fixes:

Attributes not re-defined for IAR.
Wrong volatile cast previously introduced (see commit description).

@meriac @Patater @niklas-arm  @c1728p9",@c1728p9 Please get back to me if the build is still failing!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,216,2016-05-16T12:07:35Z,2016-05-16T12:49:43Z,2016-05-22T20:33:39Z,MERGED,True,11,7,2,https://github.com/AlessandroA,Fix IAR again,2,[],https://github.com/ARMmbed/uvisor/pull/216,https://github.com/c1728p9,3,https://github.com/ARMmbed/uvisor/pull/216#issuecomment-219524172,"Fixes:

Attributes not re-defined for IAR.
Wrong volatile cast previously introduced (see commit description).

@meriac @Patater @niklas-arm  @c1728p9","Hi @AlessandroA, thanks for the quick update.  Could you push this to uvisor-mbed-lib as well?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,217,2016-05-16T12:19:01Z,2016-05-16T12:48:34Z,2016-05-22T20:33:38Z,MERGED,True,25,18,6,https://github.com/AlessandroA,Fix markdown syntax in all docs,1,[],https://github.com/ARMmbed/uvisor/pull/217,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/217,"In particular:

Add newline before and after every code snippet, bullet points list,
and table.
No newlines between points of the same list, unless you want more
widely-spaced lists.
All items in a numbered lists are numbered as 1. Numbering happens
automatically in the rendered document.
All items in lists are capitalized.

This fixes a bug in the rendering of uVisor docs at docs.mbed.com.
@meriac @Patater @niklas-arm","In particular:

Add newline before and after every code snippet, bullet points list,
and table.
No newlines between points of the same list, unless you want more
widely-spaced lists.
All items in a numbered lists are numbered as 1. Numbering happens
automatically in the rendered document.
All items in lists are capitalized.

This fixes a bug in the rendering of uVisor docs at docs.mbed.com.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,218,2016-05-22T20:43:18Z,2016-05-23T13:02:24Z,2016-05-23T13:02:24Z,CLOSED,False,1033,644,31,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/218,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/218,"This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
There is a commit that deletes the secure gateway after the refactoring. This is to allow to re-introduce it in case it was needed in the future.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater","This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
There is a commit that deletes the secure gateway after the refactoring. This is to allow to re-introduce it in case it was needed in the future.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,218,2016-05-22T20:43:18Z,2016-05-23T13:02:24Z,2016-05-23T13:02:24Z,CLOSED,False,1033,644,31,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/218,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/218#issuecomment-220855214,"This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
There is a commit that deletes the secure gateway after the refactoring. This is to allow to re-introduce it in case it was needed in the future.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater",The new files have extensive comments and doxygen documentation. The reason is that we regard this code as highly critical and comments will help clarifying expectations and assumptions for each function (also useful for verification — @nchong),True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,218,2016-05-22T20:43:18Z,2016-05-23T13:02:24Z,2016-05-23T13:02:24Z,CLOSED,False,1033,644,31,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/218,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/218#issuecomment-220924207,"This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
There is a commit that deletes the secure gateway after the refactoring. This is to allow to re-introduce it in case it was needed in the future.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater",Addressed comments by @Patater. Thanks for reviewing!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,218,2016-05-22T20:43:18Z,2016-05-23T13:02:24Z,2016-05-23T13:02:24Z,CLOSED,False,1033,644,31,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/218,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/218#issuecomment-220941949,"This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
There is a commit that deletes the secure gateway after the refactoring. This is to allow to re-introduce it in case it was needed in the future.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater",Tested on ARMmbed/uvisor-helloworld (with yotta).,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,218,2016-05-22T20:43:18Z,2016-05-23T13:02:24Z,2016-05-23T13:02:24Z,CLOSED,False,1033,644,31,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/218,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/218#issuecomment-220973760,"This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
There is a commit that deletes the secure gateway after the refactoring. This is to allow to re-introduce it in case it was needed in the future.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater","Closing in favor of #220, which is targeted at the dev branch.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,219,2016-05-23T07:31:20Z,2016-05-23T13:05:22Z,2016-05-23T13:05:22Z,CLOSED,False,112,2,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,1,[],https://github.com/ARMmbed/uvisor/pull/219,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/219,"The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,219,2016-05-23T07:31:20Z,2016-05-23T13:05:22Z,2016-05-23T13:05:22Z,CLOSED,False,112,2,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,1,[],https://github.com/ARMmbed/uvisor/pull/219,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/219#issuecomment-220906728,"The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","Notes:

Currently under test, not all cases tested.
Please review first the API names and programmer's model.

@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,219,2016-05-23T07:31:20Z,2016-05-23T13:05:22Z,2016-05-23T13:05:22Z,CLOSED,False,112,2,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,1,[],https://github.com/ARMmbed/uvisor/pull/219,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/219#issuecomment-220930625,"The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","WRT this comment it is probably worth noting that the new APIs do not preclude a user from enabling a single IRQ between a vIRQ_DisableAll() and the consecutive vIRQ_EnableAll() call.
For example:
...
vIRQ_DisableAll();

/* Do some stuff. */

vIRQ_EnableIRQ(IRQ_42); /* This will be enabled. */

/* Do some other stuff. */

vIRQ_EnableAll();
...
The example above will not fail, but the user will have mistakenly enabled an individual IRQ. If we agree that this is still OK, I will add a comment on this to the API doc.
The classic __disable_irq() intrinsic will not allow this, as it does not change the NVIC state, it literally disables the whole NVIC module, like in this other example:
...
__disable_irq();

/* Do some stuff. */

vIRQ_EnableIRQ(IRQ_42); /* This will not be enabled! */

/* Do some other stuff. */

__enable_irq();
...
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,219,2016-05-23T07:31:20Z,2016-05-23T13:05:22Z,2016-05-23T13:05:22Z,CLOSED,False,112,2,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,1,[],https://github.com/ARMmbed/uvisor/pull/219,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/219#issuecomment-220974420,"The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","Closing in favor of #221, which targets the dev branch.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,220,2016-05-23T13:01:44Z,2016-05-27T07:01:02Z,2016-06-27T13:35:45Z,MERGED,True,1077,644,32,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/220,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/220,"This PR replaces #218. Please refer to it for previous comments.
This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
The secure gateway has also been ported, but it will be removed by a later commit.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater","This PR replaces #218. Please refer to it for previous comments.
This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
The secure gateway has also been ported, but it will be removed by a later commit.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,220,2016-05-23T13:01:44Z,2016-05-27T07:01:02Z,2016-06-27T13:35:45Z,MERGED,True,1077,644,32,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/220,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/220#issuecomment-220973882,"This PR replaces #218. Please refer to it for previous comments.
This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
The secure gateway has also been ported, but it will be removed by a later commit.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater","Tested on ARMmbed/uvisor-helloworld (with yotta).
All tests passing (uvisor-lib tests).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,220,2016-05-23T13:01:44Z,2016-05-27T07:01:02Z,2016-06-27T13:35:45Z,MERGED,True,1077,644,32,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/220,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/220#issuecomment-221268689,"This PR replaces #218. Please refer to it for previous comments.
This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
The secure gateway has also been ported, but it will be removed by a later commit.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater","Note: From the PR it looks like b9770b2 comes after 37c1c0c but the real history shows the opposite, following @Patater's comment.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,220,2016-05-23T13:01:44Z,2016-05-27T07:01:02Z,2016-06-27T13:35:45Z,MERGED,True,1077,644,32,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/220,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/220#issuecomment-221571348,"This PR replaces #218. Please refer to it for previous comments.
This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
The secure gateway has also been ported, but it will be removed by a later commit.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater","Update: The context switch-out function now throws an error if it's called to perform an unbound context switch (like thread context switching on RTOS). This is because in thread switching you only switch from A to B, there is no going back. If from B you want to go back to A it's just another context switch.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,220,2016-05-23T13:01:44Z,2016-05-27T07:01:02Z,2016-06-27T13:35:45Z,MERGED,True,1077,644,32,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/220,https://github.com/meriac,5,https://github.com/ARMmbed/uvisor/pull/220#issuecomment-221800468,"This PR replaces #218. Please refer to it for previous comments.
This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
The secure gateway has also been ported, but it will be removed by a later commit.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater","@AlessandroA @Patater LGTM - but we need to remove the secure gateway code in a subsequent request in favour of the upcoming RPC.
Removing it before we have the RPC is appropriate as the CGW creates the wrong impression that it functions within a threaded environment.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,220,2016-05-23T13:01:44Z,2016-05-27T07:01:02Z,2016-06-27T13:35:45Z,MERGED,True,1077,644,32,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/220,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/220#issuecomment-221802037,"This PR replaces #218. Please refer to it for previous comments.
This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
The secure gateway has also been ported, but it will be removed by a later commit.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater","Style: Make header file inclusion consistent

Please comment what exactly is being done in the commit message. Be explicit about the style you are enforcing in the commit message.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,220,2016-05-23T13:01:44Z,2016-05-27T07:01:02Z,2016-06-27T13:35:45Z,MERGED,True,1077,644,32,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/220,https://github.com/AlessandroA,7,https://github.com/ARMmbed/uvisor/pull/220#issuecomment-221808792,"This PR replaces #218. Please refer to it for previous comments.
This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
The secure gateway has also been ported, but it will be removed by a later commit.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater","Addressed @meriac's comments.
Addressed new @Patater's comments.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,220,2016-05-23T13:01:44Z,2016-05-27T07:01:02Z,2016-06-27T13:35:45Z,MERGED,True,1077,644,32,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/220,https://github.com/Patater,8,https://github.com/ARMmbed/uvisor/pull/220#issuecomment-221810550,"This PR replaces #218. Please refer to it for previous comments.
This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
The secure gateway has also been ported, but it will be removed by a later commit.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater","LTGM
Thanks new @AlessandroA",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,220,2016-05-23T13:01:44Z,2016-05-27T07:01:02Z,2016-06-27T13:35:45Z,MERGED,True,1077,644,32,https://github.com/AlessandroA,Context switches unification,5,[],https://github.com/ARMmbed/uvisor/pull/220,https://github.com/AlessandroA,9,https://github.com/ARMmbed/uvisor/pull/220#issuecomment-221937065,"This PR replaces #218. Please refer to it for previous comments.
This PR introduces a more consistent/unified model for state-keeping and context switching in uVisor.
The main new files to review are context.{c,h}. They provide APIs to switch context and keep state internally. Only the current stack pointers and the currently active box are exposed to the rest of the code.
Now context switches are distinguished between function-bound (secure gateways, IRQs) and unbound (thread context switching). The main difference is that unbound context switches do not tamper with stacks.
Notes:

Currently untested — Just up for general review.
The secure gateway has also been ported, but it will be removed by a later commit.
The debug box de-privileging hasn't been ported yet.
@niklas-arm These new APIs should be put together to ""build"" the thread switching function. I think in the end it will look very similar to what you have now with the old format.

@meriac @niklas-arm @Patater",Rebased on dev.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/221,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-220974191,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","Notes:

Currently under test, not all cases tested.
Please review first the API names and programmer's model.

@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-220974334,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","WRT this comment it is probably worth noting that the new APIs do not preclude a user from enabling a single IRQ between a vIRQ_DisableAll() and the consecutive vIRQ_EnableAll() call.
For example:
...
vIRQ_DisableAll();

/* Do some stuff. */

vIRQ_EnableIRQ(IRQ_42); /* This will be enabled. */

/* Do some other stuff. */

vIRQ_EnableAll();
...
The example above will not fail, but the user will have mistakenly enabled an individual IRQ. If we agree that this is still OK, I will add a comment on this to the API doc.
The classic __disable_irq() intrinsic will not allow this, as it does not change the NVIC state, it literally disables the whole NVIC module, like in this other example:
...
__disable_irq();

/* Do some stuff. */

vIRQ_EnableIRQ(IRQ_42); /* This will not be enabled! */

/* Do some other stuff. */

__enable_irq();
...
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-220982089,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm",This new API isn't going to be backwards compatible if one can re-enable individual interrupts. That makes it a deal breaker.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-220990858,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","@meriac suggested a change that I think makes it backwards-compatible and still provides the expected feature. If you enable a single IRQ while in a disable-all block, the was_enabled flag gets set. When the re-enable-all function gets executed we re-enable all the original IRQ plus those that were added in the meantime.
An additional feature that Milosch suggested, which I'm adding now, is to add a counter that increments at every disable-all and decrements at every re-enable-all. In this way:

Disable/Re-enable-all functions must always go in pair.
A pair in a nested function does not invalidate the callee pair.

Example:
vIRQ_DisableAll();           /* counter++ */

some_function_that_disables_and_re_enables_irqs(); /* counter++, then counter-- */

vIRQ_EnableAll();            /* counter--; now counter is back to 0 */",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-220993507,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","Adding the counter and forcing disables and re-enables to happen in pairs will also break backwards compatibility.
Turning was_enabled into a counter might be interesting (at least for debugging purposes), though, when we have funny interrupts going on during the interrupt enabling or disabling SVCs. This would help make sure we are balanced in our use of was_enabled, not accidentally enabling or disabling something.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/AlessandroA,7,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-221000427,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","We can't completely avoid breaking backwards-compatibility because this is anyway a new API. It is a virtualized disable-all function, which by definition generates different behaviors from what users expect from __disable_irq(). I think it's just important that the programmer's flow isn't affected that much.
In the __disable_irq case enabling a single IRQ does enable it immediately, but prevents it from being served (the NVIC module is turned off). Milosch's proposal would look similar, but we have to fake it (the NVIC_EnableIRQ for a new IRQ is only called at the time of vIRQ_EnableAll(), because otherwise it would be served).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/Patater,8,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-221002003,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","We can do as good of a job as we can in making the behavior match, especially if the default implementation of the virtual functions falls back to __disable_irq and the like. Adding new requirements over those that __disable_irq requires is counter to an effort to make the behavior match as much as possible.
I recommend we follow Milosch's first suggestion, but not force the enables and disables to come in pairs unless we also force that in the default implementation of the virtual functions.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/AlessandroA,9,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-221003626,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","Well we do not enforce it but if you never re-enable IRQs after you disable them you are out of luck (but that's expected, I guess?).
BTW, I pushed a new version with these suggestions. I'm writing tests for it.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/Patater,10,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-221003940,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","I was thinking of code where multiple disables had been called, all undone with a single enable call. We'd break such code if we enforced that each disable needed a corresponding enable (reference counting).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/AlessandroA,11,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-221003964,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","Don't merge yet. Remaining:

Update API comments with info on counters and nested disable-all calls.
(waiting for tests outcome).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/AlessandroA,12,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-221004180,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","@meriac what do you think about Jaeden comment?

I was thinking of code where multiple disables had been called, all undone with a single enable call. We'd break such code if we enforced that each disable needed a corresponding enable (reference counting).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/meriac,13,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-221183510,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","@Patater @AlessandroA I don't believe its a common pattern to have unpaired Enable/Disable IRQ calls - i've never seen it.
I had another thought though - we would need to suppress thread switching within a process group to make Disable/Enable IRQ work as expected. The fact that threading still goes on after Disable_IRQ defeats a common use: half-baked thread synchronization.
Probably the pragmatic solution is to explain to people that they shall not use it for inter-thread synchronization. In that case Enable/Disable makes more sense to be nested to work across threads.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,221,2016-05-23T13:03:59Z,2016-05-26T07:54:49Z,2016-05-26T08:09:39Z,MERGED,True,188,5,7,https://github.com/AlessandroA,Disable all IRQs: Added virtualised APIs,2,[],https://github.com/ARMmbed/uvisor/pull/221,https://github.com/AlessandroA,14,https://github.com/ARMmbed/uvisor/pull/221#issuecomment-221314694,"This PR replaces #219. Please refer to it for previous comments.
The new APIs allow a user to disable all IRQs for the currently active
box. Interrupts belonging to other boxes are never affected by this
call.
Box 0 interrupts are treated as other boxes' IRQs.
@meriac @Patater @niklas-arm","Added better doxygen comments to explain how the API works.

@meriac Are these APIs missing any feature? If we assume ftm that RTOS uses SysTick only, scheduling is not affected by them.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,222,2016-05-23T14:00:55Z,2016-05-25T08:57:19Z,2016-06-21T12:19:12Z,MERGED,True,4,4,2,https://github.com/AlessandroA,Fix 2 ARMv7-M sanity check bugs,2,[],https://github.com/ARMmbed/uvisor/pull/222,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/222,"Two bugs fixed:

Wrong sanity check for MPU alignment bits in ARMv7-M. Fixes #207.
Wrong offset in flash/SRAM address check when the memory origin is different from 0x0.

@meriac @niklas-arm @Patater","Two bugs fixed:

Wrong sanity check for MPU alignment bits in ARMv7-M. Fixes #207.
Wrong offset in flash/SRAM address check when the memory origin is different from 0x0.

@meriac @niklas-arm @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,222,2016-05-23T14:00:55Z,2016-05-25T08:57:19Z,2016-06-21T12:19:12Z,MERGED,True,4,4,2,https://github.com/AlessandroA,Fix 2 ARMv7-M sanity check bugs,2,[],https://github.com/ARMmbed/uvisor/pull/222,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/222#issuecomment-221515502,"Two bugs fixed:

Wrong sanity check for MPU alignment bits in ARMv7-M. Fixes #207.
Wrong offset in flash/SRAM address check when the memory origin is different from 0x0.

@meriac @niklas-arm @Patater",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,223,2016-05-24T16:25:32Z,2016-05-27T13:18:53Z,2016-05-27T13:31:55Z,CLOSED,False,1543,37,33,https://github.com/Patater,RFC: Export table allocator,23,[],https://github.com/ARMmbed/uvisor/pull/223,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/223,"Not ready for mergin' yet. This PR includes both the supported and unsupported support for malloc. It also includes the export table additions for thread notifications.
@AlessandroA @meriac @niklas-arm","Not ready for mergin' yet. This PR includes both the supported and unsupported support for malloc. It also includes the export table additions for thread notifications.
@AlessandroA @meriac @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,223,2016-05-24T16:25:32Z,2016-05-27T13:18:53Z,2016-05-27T13:31:55Z,CLOSED,False,1543,37,33,https://github.com/Patater,RFC: Export table allocator,23,[],https://github.com/ARMmbed/uvisor/pull/223,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/223#issuecomment-222143905,"Not ready for mergin' yet. This PR includes both the supported and unsupported support for malloc. It also includes the export table additions for thread notifications.
@AlessandroA @meriac @niklas-arm",Moving to new PR targeting dev branch,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,223,2016-05-24T16:25:32Z,2016-05-27T13:18:53Z,2016-05-27T13:31:55Z,CLOSED,False,1543,37,33,https://github.com/Patater,RFC: Export table allocator,23,[],https://github.com/ARMmbed/uvisor/pull/223,https://github.com/niklas-arm,3,https://github.com/ARMmbed/uvisor/pull/223#issuecomment-222146951,"Not ready for mergin' yet. This PR includes both the supported and unsupported support for malloc. It also includes the export table additions for thread notifications.
@AlessandroA @meriac @niklas-arm",See #227 for page-allocator.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,224,2016-05-25T09:10:01Z,2016-05-27T10:32:08Z,2016-05-27T10:32:08Z,MERGED,True,338,24,18,https://github.com/Patater,Add RTOS integration mechanisms (export table and privileged IRQ handlers),3,[],https://github.com/ARMmbed/uvisor/pull/224,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/224,"This is for the dev branch.
Previous comments are on this old PR #213
This is an example of how the UVISOR_SET_PRIV_SYS_IRQ_HOOKS could be used.
/* Create ACLs for main box. */                                                                                                                                                                                                                                                                                               
MAIN_ACL(g_main_acl);                                                                                                                                                                                                                                                                                                         

/* Register privleged system IRQ hooks. */                                                                                                                                                                                                                                                                                    
extern ""C"" void SVC_Handler(void);                                                                                                                                                                                                                                                                                            
extern ""C"" void PendSV_Handler(void);                                                                                                                                                                                                                                                                                         
extern ""C"" void SysTick_Handler(void);                                                                                                                                                                                                                                                                                        

static const UvisorPrivSystemIRQHooks priv_sys_irq_hooks = {                                                                                                                                                                                                                                                                  
    .priv_svc_0 = SVC_Handler,                                                                                                                                                                                                                                                                                                
    .priv_pendsv = PendSV_Handler,                                                                                                                                                                                                                                                                                            
    .priv_systick = SysTick_Handler,                                                                                                                                                                                                                                                                                          
};                                                                                                                                                                                                                                                                                                                            
UVISOR_SET_PRIV_SYS_IRQ_HOOKS(&priv_sys_irq_hooks);                                                                                                                                                                                                                                                                           

/* Enable uVisor. */                                                                                                                                                                                                                                                                                                          
UVISOR_SET_MODE_ACL(UVISOR_ENABLED, g_main_acl);
@meriac @AlessandroA @niklas-arm","This is for the dev branch.
Previous comments are on this old PR #213
This is an example of how the UVISOR_SET_PRIV_SYS_IRQ_HOOKS could be used.
/* Create ACLs for main box. */                                                                                                                                                                                                                                                                                               
MAIN_ACL(g_main_acl);                                                                                                                                                                                                                                                                                                         

/* Register privleged system IRQ hooks. */                                                                                                                                                                                                                                                                                    
extern ""C"" void SVC_Handler(void);                                                                                                                                                                                                                                                                                            
extern ""C"" void PendSV_Handler(void);                                                                                                                                                                                                                                                                                         
extern ""C"" void SysTick_Handler(void);                                                                                                                                                                                                                                                                                        

static const UvisorPrivSystemIRQHooks priv_sys_irq_hooks = {                                                                                                                                                                                                                                                                  
    .priv_svc_0 = SVC_Handler,                                                                                                                                                                                                                                                                                                
    .priv_pendsv = PendSV_Handler,                                                                                                                                                                                                                                                                                            
    .priv_systick = SysTick_Handler,                                                                                                                                                                                                                                                                                          
};                                                                                                                                                                                                                                                                                                                            
UVISOR_SET_PRIV_SYS_IRQ_HOOKS(&priv_sys_irq_hooks);                                                                                                                                                                                                                                                                           

/* Enable uVisor. */                                                                                                                                                                                                                                                                                                          
UVISOR_SET_MODE_ACL(UVISOR_ENABLED, g_main_acl);
@meriac @AlessandroA @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,224,2016-05-25T09:10:01Z,2016-05-27T10:32:08Z,2016-05-27T10:32:08Z,MERGED,True,338,24,18,https://github.com/Patater,Add RTOS integration mechanisms (export table and privileged IRQ handlers),3,[],https://github.com/ARMmbed/uvisor/pull/224,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/224#issuecomment-221519763,"This is for the dev branch.
Previous comments are on this old PR #213
This is an example of how the UVISOR_SET_PRIV_SYS_IRQ_HOOKS could be used.
/* Create ACLs for main box. */                                                                                                                                                                                                                                                                                               
MAIN_ACL(g_main_acl);                                                                                                                                                                                                                                                                                                         

/* Register privleged system IRQ hooks. */                                                                                                                                                                                                                                                                                    
extern ""C"" void SVC_Handler(void);                                                                                                                                                                                                                                                                                            
extern ""C"" void PendSV_Handler(void);                                                                                                                                                                                                                                                                                         
extern ""C"" void SysTick_Handler(void);                                                                                                                                                                                                                                                                                        

static const UvisorPrivSystemIRQHooks priv_sys_irq_hooks = {                                                                                                                                                                                                                                                                  
    .priv_svc_0 = SVC_Handler,                                                                                                                                                                                                                                                                                                
    .priv_pendsv = PendSV_Handler,                                                                                                                                                                                                                                                                                            
    .priv_systick = SysTick_Handler,                                                                                                                                                                                                                                                                                          
};                                                                                                                                                                                                                                                                                                                            
UVISOR_SET_PRIV_SYS_IRQ_HOOKS(&priv_sys_irq_hooks);                                                                                                                                                                                                                                                                           

/* Enable uVisor. */                                                                                                                                                                                                                                                                                                          
UVISOR_SET_MODE_ACL(UVISOR_ENABLED, g_main_acl);
@meriac @AlessandroA @niklas-arm",LGTM. @meriac ?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,224,2016-05-25T09:10:01Z,2016-05-27T10:32:08Z,2016-05-27T10:32:08Z,MERGED,True,338,24,18,https://github.com/Patater,Add RTOS integration mechanisms (export table and privileged IRQ handlers),3,[],https://github.com/ARMmbed/uvisor/pull/224,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/224#issuecomment-221909676,"This is for the dev branch.
Previous comments are on this old PR #213
This is an example of how the UVISOR_SET_PRIV_SYS_IRQ_HOOKS could be used.
/* Create ACLs for main box. */                                                                                                                                                                                                                                                                                               
MAIN_ACL(g_main_acl);                                                                                                                                                                                                                                                                                                         

/* Register privleged system IRQ hooks. */                                                                                                                                                                                                                                                                                    
extern ""C"" void SVC_Handler(void);                                                                                                                                                                                                                                                                                            
extern ""C"" void PendSV_Handler(void);                                                                                                                                                                                                                                                                                         
extern ""C"" void SysTick_Handler(void);                                                                                                                                                                                                                                                                                        

static const UvisorPrivSystemIRQHooks priv_sys_irq_hooks = {                                                                                                                                                                                                                                                                  
    .priv_svc_0 = SVC_Handler,                                                                                                                                                                                                                                                                                                
    .priv_pendsv = PendSV_Handler,                                                                                                                                                                                                                                                                                            
    .priv_systick = SysTick_Handler,                                                                                                                                                                                                                                                                                          
};                                                                                                                                                                                                                                                                                                                            
UVISOR_SET_PRIV_SYS_IRQ_HOOKS(&priv_sys_irq_hooks);                                                                                                                                                                                                                                                                           

/* Enable uVisor. */                                                                                                                                                                                                                                                                                                          
UVISOR_SET_MODE_ACL(UVISOR_ENABLED, g_main_acl);
@meriac @AlessandroA @niklas-arm","I'm no longer making any modifications to vmpu_exports, but I did the work for the style fixing. We might as well bring the style fixes in now, since the work is done.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,224,2016-05-25T09:10:01Z,2016-05-27T10:32:08Z,2016-05-27T10:32:08Z,MERGED,True,338,24,18,https://github.com/Patater,Add RTOS integration mechanisms (export table and privileged IRQ handlers),3,[],https://github.com/ARMmbed/uvisor/pull/224,https://github.com/niklas-arm,4,https://github.com/ARMmbed/uvisor/pull/224#issuecomment-221922891,"This is for the dev branch.
Previous comments are on this old PR #213
This is an example of how the UVISOR_SET_PRIV_SYS_IRQ_HOOKS could be used.
/* Create ACLs for main box. */                                                                                                                                                                                                                                                                                               
MAIN_ACL(g_main_acl);                                                                                                                                                                                                                                                                                                         

/* Register privleged system IRQ hooks. */                                                                                                                                                                                                                                                                                    
extern ""C"" void SVC_Handler(void);                                                                                                                                                                                                                                                                                            
extern ""C"" void PendSV_Handler(void);                                                                                                                                                                                                                                                                                         
extern ""C"" void SysTick_Handler(void);                                                                                                                                                                                                                                                                                        

static const UvisorPrivSystemIRQHooks priv_sys_irq_hooks = {                                                                                                                                                                                                                                                                  
    .priv_svc_0 = SVC_Handler,                                                                                                                                                                                                                                                                                                
    .priv_pendsv = PendSV_Handler,                                                                                                                                                                                                                                                                                            
    .priv_systick = SysTick_Handler,                                                                                                                                                                                                                                                                                          
};                                                                                                                                                                                                                                                                                                                            
UVISOR_SET_PRIV_SYS_IRQ_HOOKS(&priv_sys_irq_hooks);                                                                                                                                                                                                                                                                           

/* Enable uVisor. */                                                                                                                                                                                                                                                                                                          
UVISOR_SET_MODE_ACL(UVISOR_ENABLED, g_main_acl);
@meriac @AlessandroA @niklas-arm",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,224,2016-05-25T09:10:01Z,2016-05-27T10:32:08Z,2016-05-27T10:32:08Z,MERGED,True,338,24,18,https://github.com/Patater,Add RTOS integration mechanisms (export table and privileged IRQ handlers),3,[],https://github.com/ARMmbed/uvisor/pull/224,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/224#issuecomment-221924578,"This is for the dev branch.
Previous comments are on this old PR #213
This is an example of how the UVISOR_SET_PRIV_SYS_IRQ_HOOKS could be used.
/* Create ACLs for main box. */                                                                                                                                                                                                                                                                                               
MAIN_ACL(g_main_acl);                                                                                                                                                                                                                                                                                                         

/* Register privleged system IRQ hooks. */                                                                                                                                                                                                                                                                                    
extern ""C"" void SVC_Handler(void);                                                                                                                                                                                                                                                                                            
extern ""C"" void PendSV_Handler(void);                                                                                                                                                                                                                                                                                         
extern ""C"" void SysTick_Handler(void);                                                                                                                                                                                                                                                                                        

static const UvisorPrivSystemIRQHooks priv_sys_irq_hooks = {                                                                                                                                                                                                                                                                  
    .priv_svc_0 = SVC_Handler,                                                                                                                                                                                                                                                                                                
    .priv_pendsv = PendSV_Handler,                                                                                                                                                                                                                                                                                            
    .priv_systick = SysTick_Handler,                                                                                                                                                                                                                                                                                          
};                                                                                                                                                                                                                                                                                                                            
UVISOR_SET_PRIV_SYS_IRQ_HOOKS(&priv_sys_irq_hooks);                                                                                                                                                                                                                                                                           

/* Enable uVisor. */                                                                                                                                                                                                                                                                                                          
UVISOR_SET_MODE_ACL(UVISOR_ENABLED, g_main_acl);
@meriac @AlessandroA @niklas-arm",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,224,2016-05-25T09:10:01Z,2016-05-27T10:32:08Z,2016-05-27T10:32:08Z,MERGED,True,338,24,18,https://github.com/Patater,Add RTOS integration mechanisms (export table and privileged IRQ handlers),3,[],https://github.com/ARMmbed/uvisor/pull/224,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/224#issuecomment-221924599,"This is for the dev branch.
Previous comments are on this old PR #213
This is an example of how the UVISOR_SET_PRIV_SYS_IRQ_HOOKS could be used.
/* Create ACLs for main box. */                                                                                                                                                                                                                                                                                               
MAIN_ACL(g_main_acl);                                                                                                                                                                                                                                                                                                         

/* Register privleged system IRQ hooks. */                                                                                                                                                                                                                                                                                    
extern ""C"" void SVC_Handler(void);                                                                                                                                                                                                                                                                                            
extern ""C"" void PendSV_Handler(void);                                                                                                                                                                                                                                                                                         
extern ""C"" void SysTick_Handler(void);                                                                                                                                                                                                                                                                                        

static const UvisorPrivSystemIRQHooks priv_sys_irq_hooks = {                                                                                                                                                                                                                                                                  
    .priv_svc_0 = SVC_Handler,                                                                                                                                                                                                                                                                                                
    .priv_pendsv = PendSV_Handler,                                                                                                                                                                                                                                                                                            
    .priv_systick = SysTick_Handler,                                                                                                                                                                                                                                                                                          
};                                                                                                                                                                                                                                                                                                                            
UVISOR_SET_PRIV_SYS_IRQ_HOOKS(&priv_sys_irq_hooks);                                                                                                                                                                                                                                                                           

/* Enable uVisor. */                                                                                                                                                                                                                                                                                                          
UVISOR_SET_MODE_ACL(UVISOR_ENABLED, g_main_acl);
@meriac @AlessandroA @niklas-arm","After discussion with @AlessandroA, made the sanity check functions for verifying the privileged system IRQ hooks into one function. As a result of this, the code is a bit more difficult to maintain and read (more duplication, trickier to make sure everything matches), but hopefully is easier to do a security audit on.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,225,2016-05-26T10:25:54Z,2016-05-26T17:08:44Z,2016-09-20T13:41:56Z,MERGED,True,38,31,1,https://github.com/AlessandroA,"vIRQ_{Dis,En}ableAll: Fix bug of never-enabled IRQs",1,[],https://github.com/ARMmbed/uvisor/pull/225,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/225,"When nesting multiple pairs of disable-all/enable-all function calls,
the last call to vIRQ_EnableAll() was not re-enabling all interrupts.
This was due to the fact that if multiple vIRQ_DisableAll() were called,
the wrong state was_enabled = false was set, even if the IRQ was
previously enabled.
Upon restoring the state, those IRQs were not re-enabled.
IRQs that were enabled during the critical section were correctly
enabled, because their state was unaffected.
This also improves performance because in the previous implementation
IRQs were always iterated over even if the counter was more than 0,
which is useless.
Fixes:

bcf5fbe ""Disable all IRQs: Added virtualised APIs"".

This bug was captured by the new unit tests.
@meriac @Patater @niklas-arm","When nesting multiple pairs of disable-all/enable-all function calls,
the last call to vIRQ_EnableAll() was not re-enabling all interrupts.
This was due to the fact that if multiple vIRQ_DisableAll() were called,
the wrong state was_enabled = false was set, even if the IRQ was
previously enabled.
Upon restoring the state, those IRQs were not re-enabled.
IRQs that were enabled during the critical section were correctly
enabled, because their state was unaffected.
This also improves performance because in the previous implementation
IRQs were always iterated over even if the counter was more than 0,
which is useless.
Fixes:

bcf5fbe ""Disable all IRQs: Added virtualised APIs"".

This bug was captured by the new unit tests.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,225,2016-05-26T10:25:54Z,2016-05-26T17:08:44Z,2016-09-20T13:41:56Z,MERGED,True,38,31,1,https://github.com/AlessandroA,"vIRQ_{Dis,En}ableAll: Fix bug of never-enabled IRQs",1,[],https://github.com/ARMmbed/uvisor/pull/225,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/225#issuecomment-221838555,"When nesting multiple pairs of disable-all/enable-all function calls,
the last call to vIRQ_EnableAll() was not re-enabling all interrupts.
This was due to the fact that if multiple vIRQ_DisableAll() were called,
the wrong state was_enabled = false was set, even if the IRQ was
previously enabled.
Upon restoring the state, those IRQs were not re-enabled.
IRQs that were enabled during the critical section were correctly
enabled, because their state was unaffected.
This also improves performance because in the previous implementation
IRQs were always iterated over even if the counter was more than 0,
which is useless.
Fixes:

bcf5fbe ""Disable all IRQs: Added virtualised APIs"".

This bug was captured by the new unit tests.
@meriac @Patater @niklas-arm","Before we move this feature into master, we should should apply this commit as a fixup to the original in the dev branch.",True,{'THUMBS_UP': ['https://github.com/AlessandroA']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,225,2016-05-26T10:25:54Z,2016-05-26T17:08:44Z,2016-09-20T13:41:56Z,MERGED,True,38,31,1,https://github.com/AlessandroA,"vIRQ_{Dis,En}ableAll: Fix bug of never-enabled IRQs",1,[],https://github.com/ARMmbed/uvisor/pull/225,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/225#issuecomment-221852333,"When nesting multiple pairs of disable-all/enable-all function calls,
the last call to vIRQ_EnableAll() was not re-enabling all interrupts.
This was due to the fact that if multiple vIRQ_DisableAll() were called,
the wrong state was_enabled = false was set, even if the IRQ was
previously enabled.
Upon restoring the state, those IRQs were not re-enabled.
IRQs that were enabled during the critical section were correctly
enabled, because their state was unaffected.
This also improves performance because in the previous implementation
IRQs were always iterated over even if the counter was more than 0,
which is useless.
Fixes:

bcf5fbe ""Disable all IRQs: Added virtualised APIs"".

This bug was captured by the new unit tests.
@meriac @Patater @niklas-arm",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,226,2016-05-27T07:28:39Z,2016-05-27T12:36:57Z,2016-06-27T13:35:44Z,MERGED,True,18,424,9,https://github.com/AlessandroA,Remove the secure gateway feature,2,[],https://github.com/ARMmbed/uvisor/pull/226,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/226,"With an RTOS secure gateways are not possible any more and will be
replaced by a different mechanism.
This commit can be re-used in the future to re-introduce the secure
gateway feature.
@meriac @Patater @niklas-arm","With an RTOS secure gateways are not possible any more and will be
replaced by a different mechanism.
This commit can be re-used in the future to re-introduce the secure
gateway feature.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,226,2016-05-27T07:28:39Z,2016-05-27T12:36:57Z,2016-06-27T13:35:44Z,MERGED,True,18,424,9,https://github.com/AlessandroA,Remove the secure gateway feature,2,[],https://github.com/ARMmbed/uvisor/pull/226,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/226#issuecomment-222101771,"With an RTOS secure gateways are not possible any more and will be
replaced by a different mechanism.
This commit can be re-used in the future to re-introduce the secure
gateway feature.
@meriac @Patater @niklas-arm",@meriac Changed the register gateway magic into 0xF7F3A89E. The opcode 0xF7FxAxxx is guaranteed to trigger an undefined instruction on ARMv7-M. The x elements are ignored and hence have been set randomly.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,226,2016-05-27T07:28:39Z,2016-05-27T12:36:57Z,2016-06-27T13:35:44Z,MERGED,True,18,424,9,https://github.com/AlessandroA,Remove the secure gateway feature,2,[],https://github.com/ARMmbed/uvisor/pull/226,https://github.com/meriac,3,https://github.com/ARMmbed/uvisor/pull/226#issuecomment-222118542,"With an RTOS secure gateways are not possible any more and will be
replaced by a different mechanism.
This commit can be re-used in the future to re-introduce the secure
gateway feature.
@meriac @Patater @niklas-arm","@AlessandroA : Can you please gate that definition by an ifdef for cortex_m || thumb2 - and throw an error if that code is compiled for another platform. Have you verified that you use the correct endianness by compiling the magic and attempting to disassemble the magic ?
Can you also duplicate your comments of your reasoning behind that magic into the code?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,226,2016-05-27T07:28:39Z,2016-05-27T12:36:57Z,2016-06-27T13:35:44Z,MERGED,True,18,424,9,https://github.com/AlessandroA,Remove the secure gateway feature,2,[],https://github.com/ARMmbed/uvisor/pull/226,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/226#issuecomment-222132218,"With an RTOS secure gateways are not possible any more and will be
replaced by a different mechanism.
This commit can be re-used in the future to re-introduce the secure
gateway feature.
@meriac @Patater @niklas-arm","Added the comments.
Added the check on Thumb-2.

This is how it looks like:
000070a8 <app_start>:
    ...
    70b2:   df83      svc 131
    70b4:   e009      b.n 70ca <skip_args18>
    70b6:   f7f3a89e  ;<UNDEFINED> instruction: 0xf7f3a89e
    70ba:   12345678  eorsne r5, r4, #120, 12                        ; other metadata
    70be:   2000027c  andcs r0, r0, ip, ror r2                       ; other metadata
    ...
@meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,227,2016-05-27T13:31:18Z,2016-06-03T16:35:27Z,2016-06-03T16:44:42Z,MERGED,True,585,4,16,https://github.com/niklas-arm,1. Add tier-1 page allocator,3,[],https://github.com/ARMmbed/uvisor/pull/227,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/227,"This adds the page allocator algorithm, initialization code and SVC calls.
This is part of larger changes, but I'd prefer to review these parts separately when possible.
@Patater @AlessandroA @meriac","This adds the page allocator algorithm, initialization code and SVC calls.
This is part of larger changes, but I'd prefer to review these parts separately when possible.
@Patater @AlessandroA @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,227,2016-05-27T13:31:18Z,2016-06-03T16:35:27Z,2016-06-03T16:44:42Z,MERGED,True,585,4,16,https://github.com/niklas-arm,1. Add tier-1 page allocator,3,[],https://github.com/ARMmbed/uvisor/pull/227,https://github.com/niklas-arm,2,https://github.com/ARMmbed/uvisor/pull/227#issuecomment-222147624,"This adds the page allocator algorithm, initialization code and SVC calls.
This is part of larger changes, but I'd prefer to review these parts separately when possible.
@Patater @AlessandroA @meriac","Note, that the page heap has to be added to the target linkerscript for the uvisor-header to link correctly.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,227,2016-05-27T13:31:18Z,2016-06-03T16:35:27Z,2016-06-03T16:44:42Z,MERGED,True,585,4,16,https://github.com/niklas-arm,1. Add tier-1 page allocator,3,[],https://github.com/ARMmbed/uvisor/pull/227,https://github.com/niklas-arm,3,https://github.com/ARMmbed/uvisor/pull/227#issuecomment-222928630,"This adds the page allocator algorithm, initialization code and SVC calls.
This is part of larger changes, but I'd prefer to review these parts separately when possible.
@Patater @AlessandroA @meriac","I added pointer range checks for all input pointers passed to the page allocator init function.
Also added vmpu_is_region_size_valid and vmpu_round_up_region functions to make the page size and page alignment specialized on the MPU implementation.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,227,2016-05-27T13:31:18Z,2016-06-03T16:35:27Z,2016-06-03T16:44:42Z,MERGED,True,585,4,16,https://github.com/niklas-arm,1. Add tier-1 page allocator,3,[],https://github.com/ARMmbed/uvisor/pull/227,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/227#issuecomment-223550386,"This adds the page allocator algorithm, initialization code and SVC calls.
This is part of larger changes, but I'd prefer to review these parts separately when possible.
@Patater @AlessandroA @meriac","Some commit organization things

Remove period from end of Add is_region_valid and round_up_region to vmpu..
Squash Add page allocator exports with Add page allocator SVC calls for API and Add page allocator implementation. It's a three-way squash. All commits provide implementation of the page allocator API.
Squash Add page heap start and end address to config into Initialize page heap with start and end address. It's implementation detail for initializing the page heap.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,227,2016-05-27T13:31:18Z,2016-06-03T16:35:27Z,2016-06-03T16:44:42Z,MERGED,True,585,4,16,https://github.com/niklas-arm,1. Add tier-1 page allocator,3,[],https://github.com/ARMmbed/uvisor/pull/227,https://github.com/niklas-arm,5,https://github.com/ARMmbed/uvisor/pull/227#issuecomment-223593700,"This adds the page allocator algorithm, initialization code and SVC calls.
This is part of larger changes, but I'd prefer to review these parts separately when possible.
@Patater @AlessandroA @meriac",Addressed review and squashed commits.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,228,2016-05-31T09:26:18Z,2016-05-31T09:58:46Z,2016-05-31T09:58:46Z,MERGED,True,144,69,4,https://github.com/AlessandroA,Move vmpu_unpriv_access.h to the API folder,5,[],https://github.com/ARMmbed/uvisor/pull/228,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/228,"Needed for #227.
@niklas-arm @meriac @Patater","Needed for #227.
@niklas-arm @meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,228,2016-05-31T09:26:18Z,2016-05-31T09:58:46Z,2016-05-31T09:58:46Z,MERGED,True,144,69,4,https://github.com/AlessandroA,Move vmpu_unpriv_access.h to the API folder,5,[],https://github.com/ARMmbed/uvisor/pull/228,https://github.com/niklas-arm,2,https://github.com/ARMmbed/uvisor/pull/228#issuecomment-222639857,"Needed for #227.
@niklas-arm @meriac @Patater",Is the GCC inline asm a problem for ARMCC or IARCC?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,228,2016-05-31T09:26:18Z,2016-05-31T09:58:46Z,2016-05-31T09:58:46Z,MERGED,True,144,69,4,https://github.com/AlessandroA,Move vmpu_unpriv_access.h to the API folder,5,[],https://github.com/ARMmbed/uvisor/pull/228,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/228#issuecomment-222641423,"Needed for #227.
@niklas-arm @meriac @Patater",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,228,2016-05-31T09:26:18Z,2016-05-31T09:58:46Z,2016-05-31T09:58:46Z,MERGED,True,144,69,4,https://github.com/AlessandroA,Move vmpu_unpriv_access.h to the API folder,5,[],https://github.com/ARMmbed/uvisor/pull/228,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/228#issuecomment-222641650,"Needed for #227.
@niklas-arm @meriac @Patater",@niklas-arm Good point. Intrinsics should be the best option here. @meriac I found this which implies the right opcode is used for the right pointer. I'll change the explicit asm inline into intrinsics.,True,{'THUMBS_UP': ['https://github.com/Patater']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,229,2016-05-31T13:36:11Z,2016-05-31T13:36:35Z,2016-05-31T13:36:36Z,CLOSED,False,2100,829,53,https://github.com/niklas-arm,Add box index structure and initialize it,39,[],https://github.com/ARMmbed/uvisor/pull/229,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/229,"This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac","This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,229,2016-05-31T13:36:11Z,2016-05-31T13:36:35Z,2016-05-31T13:36:36Z,CLOSED,False,2100,829,53,https://github.com/niklas-arm,Add box index structure and initialize it,39,[],https://github.com/ARMmbed/uvisor/pull/229,https://github.com/niklas-arm,2,https://github.com/ARMmbed/uvisor/pull/229#issuecomment-222690169,"This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac",Argh. Wrong branch.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,230,2016-05-31T13:37:03Z,2016-06-07T11:12:43Z,2016-06-07T11:32:28Z,MERGED,True,183,65,13,https://github.com/niklas-arm,2. Add box index structure and initialize it,4,[],https://github.com/ARMmbed/uvisor/pull/230,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/230,"This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac","This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,230,2016-05-31T13:37:03Z,2016-06-07T11:12:43Z,2016-06-07T11:32:28Z,MERGED,True,183,65,13,https://github.com/niklas-arm,2. Add box index structure and initialize it,4,[],https://github.com/ARMmbed/uvisor/pull/230,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/230#issuecomment-223601862,"This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac","Git commit organization: consider squashing the following into one ""Use box index for box context"" feature commit. It should make the code easier to review and understand, since all the interactions for implementing this feature are in one coherent commit.

Initialize box index in vmpu_load_boxes
Initialize box context ptr explicitly in uvisor
Add box index size to uvisor header
Access uvisor_ctx correctly through box index",True,{'THUMBS_UP': ['https://github.com/niklas-arm']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,230,2016-05-31T13:37:03Z,2016-06-07T11:12:43Z,2016-06-07T11:32:28Z,MERGED,True,183,65,13,https://github.com/niklas-arm,2. Add box index structure and initialize it,4,[],https://github.com/ARMmbed/uvisor/pull/230,https://github.com/niklas-arm,3,https://github.com/ARMmbed/uvisor/pull/230#issuecomment-223982769,"This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac","Addressed review by @AlessandroA and @Patater.
Note the box index size moved from uvisor-input.S to box config.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,230,2016-05-31T13:37:03Z,2016-06-07T11:12:43Z,2016-06-07T11:32:28Z,MERGED,True,183,65,13,https://github.com/niklas-arm,2. Add box index structure and initialize it,4,[],https://github.com/ARMmbed/uvisor/pull/230,https://github.com/niklas-arm,4,https://github.com/ARMmbed/uvisor/pull/230#issuecomment-223984630,"This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac",cc @meriac: Final review comments?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,230,2016-05-31T13:37:03Z,2016-06-07T11:12:43Z,2016-06-07T11:32:28Z,MERGED,True,183,65,13,https://github.com/niklas-arm,2. Add box index structure and initialize it,4,[],https://github.com/ARMmbed/uvisor/pull/230,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/230#issuecomment-223992545,"This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,230,2016-05-31T13:37:03Z,2016-06-07T11:12:43Z,2016-06-07T11:32:28Z,MERGED,True,183,65,13,https://github.com/niklas-arm,2. Add box index structure and initialize it,4,[],https://github.com/ARMmbed/uvisor/pull/230,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/230#issuecomment-224216124,"This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac","Was there another commit aside from the ones I listed to squash? It looks like they all got squashed together, instead of just mostly.
It's not 100% cut and dry, but these commits could stand on their own and are better off not being squashed.

Rename context_size to bss_size
Add heap start and end address to uvisor header
Add declaration of heap size of box config
Add box index structure

The PR description here should be the in body of the commit message. The old commit message titles aren't important to have in a list in the new squashed commit. You can still include that information if you want, but include the information as prose explaining the implementation of the feature.
Prefer to include the following information in commit messages.

The motivation for the commit (Why is it important?)
The overall design approach
Significant implementation details
Testing results",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,230,2016-05-31T13:37:03Z,2016-06-07T11:12:43Z,2016-06-07T11:32:28Z,MERGED,True,183,65,13,https://github.com/niklas-arm,2. Add box index structure and initialize it,4,[],https://github.com/ARMmbed/uvisor/pull/230,https://github.com/Patater,7,https://github.com/ARMmbed/uvisor/pull/230#issuecomment-224216281,"This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac","Other than some small code style issues and the lack of a decent commit message, this looks fine to me.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,230,2016-05-31T13:37:03Z,2016-06-07T11:12:43Z,2016-06-07T11:32:28Z,MERGED,True,183,65,13,https://github.com/niklas-arm,2. Add box index structure and initialize it,4,[],https://github.com/ARMmbed/uvisor/pull/230,https://github.com/niklas-arm,8,https://github.com/ARMmbed/uvisor/pull/230#issuecomment-224237568,"This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac","@Patater I misunderstood your first squash comment, I've restructured the commits as you proposed and it looks much better now.",True,{'THUMBS_UP': ['https://github.com/Patater']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,230,2016-05-31T13:37:03Z,2016-06-07T11:12:43Z,2016-06-07T11:32:28Z,MERGED,True,183,65,13,https://github.com/niklas-arm,2. Add box index structure and initialize it,4,[],https://github.com/ARMmbed/uvisor/pull/230,https://github.com/AlessandroA,9,https://github.com/ARMmbed/uvisor/pull/230#issuecomment-224238577,"This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac","@niklas-arm Could you add a note in the commit message of Add box index structure and initialize it. to clarify that the vmpu_box_index_init() function runs privileged for now (and also add the text See #236.). Please also remove the dot from the commit title 😄
BTW the new commit structure is very nice, thanks a lot!",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,230,2016-05-31T13:37:03Z,2016-06-07T11:12:43Z,2016-06-07T11:32:28Z,MERGED,True,183,65,13,https://github.com/niklas-arm,2. Add box index structure and initialize it,4,[],https://github.com/ARMmbed/uvisor/pull/230,https://github.com/AlessandroA,10,https://github.com/ARMmbed/uvisor/pull/230#issuecomment-224241287,"This introduces a box index in box bss memory, augmenting the concept of the ctx pointer with additional information such the box config, heaps, box id.
uVisor initializes the box index and allows for the user to declare additional reserved box index space by overwriting the __uvisor_box_index_size constant.
Note: This builds directly on top of #227, but does not directly depend on it.
cc @Patater @AlessandroA @meriac","Thanks! LGTM 👍
@meriac ?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,231,2016-05-31T13:41:08Z,2016-06-07T16:19:11Z,2016-06-07T16:33:11Z,MERGED,True,576,3,6,https://github.com/niklas-arm,3. Add tier-2 allocator and initialization,4,[],https://github.com/ARMmbed/uvisor/pull/231,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/231,"This adds the required glue code for connecting the tier-2 with the tier-1 allocator incl. initialization of heaps on first allocation.
Also adds mutex protection to process heap via extended box index.
Note: This builds directly on top of #230 and depends on it!
cc @Patater @AlessandroA @meriac","This adds the required glue code for connecting the tier-2 with the tier-1 allocator incl. initialization of heaps on first allocation.
Also adds mutex protection to process heap via extended box index.
Note: This builds directly on top of #230 and depends on it!
cc @Patater @AlessandroA @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,231,2016-05-31T13:41:08Z,2016-06-07T16:19:11Z,2016-06-07T16:33:11Z,MERGED,True,576,3,6,https://github.com/niklas-arm,3. Add tier-2 allocator and initialization,4,[],https://github.com/ARMmbed/uvisor/pull/231,https://github.com/niklas-arm,2,https://github.com/ARMmbed/uvisor/pull/231#issuecomment-224266620,"This adds the required glue code for connecting the tier-2 with the tier-1 allocator incl. initialization of heaps on first allocation.
Also adds mutex protection to process heap via extended box index.
Note: This builds directly on top of #230 and depends on it!
cc @Patater @AlessandroA @meriac",Addressed all comments by @Patater and @AlessandroA .,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,231,2016-05-31T13:41:08Z,2016-06-07T16:19:11Z,2016-06-07T16:33:11Z,MERGED,True,576,3,6,https://github.com/niklas-arm,3. Add tier-2 allocator and initialization,4,[],https://github.com/ARMmbed/uvisor/pull/231,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/231#issuecomment-224269312,"This adds the required glue code for connecting the tier-2 with the tier-1 allocator incl. initialization of heaps on first allocation.
Also adds mutex protection to process heap via extended box index.
Note: This builds directly on top of #230 and depends on it!
cc @Patater @AlessandroA @meriac",LGTM.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,231,2016-05-31T13:41:08Z,2016-06-07T16:19:11Z,2016-06-07T16:33:11Z,MERGED,True,576,3,6,https://github.com/niklas-arm,3. Add tier-2 allocator and initialization,4,[],https://github.com/ARMmbed/uvisor/pull/231,https://github.com/niklas-arm,4,https://github.com/ARMmbed/uvisor/pull/231#issuecomment-224271298,"This adds the required glue code for connecting the tier-2 with the tier-1 allocator incl. initialization of heaps on first allocation.
Also adds mutex protection to process heap via extended box index.
Note: This builds directly on top of #230 and depends on it!
cc @Patater @AlessandroA @meriac",cc @meriac,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,231,2016-05-31T13:41:08Z,2016-06-07T16:19:11Z,2016-06-07T16:33:11Z,MERGED,True,576,3,6,https://github.com/niklas-arm,3. Add tier-2 allocator and initialization,4,[],https://github.com/ARMmbed/uvisor/pull/231,https://github.com/niklas-arm,5,https://github.com/ARMmbed/uvisor/pull/231#issuecomment-224332077,"This adds the required glue code for connecting the tier-2 with the tier-1 allocator incl. initialization of heaps on first allocation.
Also adds mutex protection to process heap via extended box index.
Note: This builds directly on top of #230 and depends on it!
cc @Patater @AlessandroA @meriac","Renamed a lot of files and functions to distinguish between code running with uvisor priviledges and ""user-mode"" code. uvisor_ -> secure_.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,231,2016-05-31T13:41:08Z,2016-06-07T16:19:11Z,2016-06-07T16:33:11Z,MERGED,True,576,3,6,https://github.com/niklas-arm,3. Add tier-2 allocator and initialization,4,[],https://github.com/ARMmbed/uvisor/pull/231,https://github.com/AlessandroA,6,https://github.com/ARMmbed/uvisor/pull/231#issuecomment-224332319,"This adds the required glue code for connecting the tier-2 with the tier-1 allocator incl. initialization of heaps on first allocation.
Also adds mutex protection to process heap via extended box index.
Note: This builds directly on top of #230 and depends on it!
cc @Patater @AlessandroA @meriac",Nice! :+1,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,232,2016-05-31T13:45:27Z,2016-06-08T12:33:20Z,2016-06-08T12:35:53Z,MERGED,True,188,0,3,https://github.com/niklas-arm,4. Add initialization of box index and page allocator for unsupported targets,2,[],https://github.com/ARMmbed/uvisor/pull/232,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/232,"This adds initialization for unsupported targets, where the page heap is placed inside the main heap, while leaving the main heap intact, which means this is compatible with existing CMSIS linker scripts.
Note: This builds on #231 and depends on it!
Actual diff:

Move unsupported.c into rtx/src folder.
Add uvisor_malloc_init for unsupported targets

cc @Patater @AlessandroA @meriac","This adds initialization for unsupported targets, where the page heap is placed inside the main heap, while leaving the main heap intact, which means this is compatible with existing CMSIS linker scripts.
Note: This builds on #231 and depends on it!
Actual diff:

Move unsupported.c into rtx/src folder.
Add uvisor_malloc_init for unsupported targets

cc @Patater @AlessandroA @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,232,2016-05-31T13:45:27Z,2016-06-08T12:33:20Z,2016-06-08T12:35:53Z,MERGED,True,188,0,3,https://github.com/niklas-arm,4. Add initialization of box index and page allocator for unsupported targets,2,[],https://github.com/ARMmbed/uvisor/pull/232,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/232#issuecomment-223948554,"This adds initialization for unsupported targets, where the page heap is placed inside the main heap, while leaving the main heap intact, which means this is compatible with existing CMSIS linker scripts.
Note: This builds on #231 and depends on it!
Actual diff:

Move unsupported.c into rtx/src folder.
Add uvisor_malloc_init for unsupported targets

cc @Patater @AlessandroA @meriac","Move unsupported.c into rtx/src folder

What motivates this move? I would expect only RTX-specific files in the rtx/src folder, and I don't see any changes to the file in this PR that would cause unsupported.c to become RTX-specific",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,232,2016-05-31T13:45:27Z,2016-06-08T12:33:20Z,2016-06-08T12:35:53Z,MERGED,True,188,0,3,https://github.com/niklas-arm,4. Add initialization of box index and page allocator for unsupported targets,2,[],https://github.com/ARMmbed/uvisor/pull/232,https://github.com/niklas-arm,3,https://github.com/ARMmbed/uvisor/pull/232#issuecomment-224279457,"This adds initialization for unsupported targets, where the page heap is placed inside the main heap, while leaving the main heap intact, which means this is compatible with existing CMSIS linker scripts.
Note: This builds on #231 and depends on it!
Actual diff:

Move unsupported.c into rtx/src folder.
Add uvisor_malloc_init for unsupported targets

cc @Patater @AlessandroA @meriac","What motivates this move?

Mostly to get it out of the src folder, since it is not compiled by uVisor and not part of the compiled uVisor archive.
It's not part of RTX either, so I understand that it doesn't really fit there either, but it's still the better choice to move it.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,232,2016-05-31T13:45:27Z,2016-06-08T12:33:20Z,2016-06-08T12:35:53Z,MERGED,True,188,0,3,https://github.com/niklas-arm,4. Add initialization of box index and page allocator for unsupported targets,2,[],https://github.com/ARMmbed/uvisor/pull/232,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/232#issuecomment-224284029,"This adds initialization for unsupported targets, where the page heap is placed inside the main heap, while leaving the main heap intact, which means this is compatible with existing CMSIS linker scripts.
Note: This builds on #231 and depends on it!
Actual diff:

Move unsupported.c into rtx/src folder.
Add uvisor_malloc_init for unsupported targets

cc @Patater @AlessandroA @meriac","Given that reasoning, I would prefer leaving it where it is. rtx folder should be just for rtx-specific things. When we add another operating system, we'll still want this unsupported.c file, but we won't want it from the rtx folder. Also, the file is already being excluded from the .a file properly; moving it to rtx to get it out of the .a isn't reason enough to move it out.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,232,2016-05-31T13:45:27Z,2016-06-08T12:33:20Z,2016-06-08T12:35:53Z,MERGED,True,188,0,3,https://github.com/niklas-arm,4. Add initialization of box index and page allocator for unsupported targets,2,[],https://github.com/ARMmbed/uvisor/pull/232,https://github.com/niklas-arm,5,https://github.com/ARMmbed/uvisor/pull/232#issuecomment-224286474,"This adds initialization for unsupported targets, where the page heap is placed inside the main heap, while leaving the main heap intact, which means this is compatible with existing CMSIS linker scripts.
Note: This builds on #231 and depends on it!
Actual diff:

Move unsupported.c into rtx/src folder.
Add uvisor_malloc_init for unsupported targets

cc @Patater @AlessandroA @meriac","The file is already being excluded from the .a file properly.

But it's still confusing and is mental overhead. It's not consistent from a build system PoV either, there are special rules to exclude it in the uVisor Makefile and special rules to include it in uVisor-Lib Makefile.
It feels very forced to leave it there.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,232,2016-05-31T13:45:27Z,2016-06-08T12:33:20Z,2016-06-08T12:35:53Z,MERGED,True,188,0,3,https://github.com/niklas-arm,4. Add initialization of box index and page allocator for unsupported targets,2,[],https://github.com/ARMmbed/uvisor/pull/232,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/232#issuecomment-224291473,"This adds initialization for unsupported targets, where the page heap is placed inside the main heap, while leaving the main heap intact, which means this is compatible with existing CMSIS linker scripts.
Note: This builds on #231 and depends on it!
Actual diff:

Move unsupported.c into rtx/src folder.
Add uvisor_malloc_init for unsupported targets

cc @Patater @AlessandroA @meriac","I agree, but it's not important to fix it in this PR. File an issue to make a folder for unsupported that could be shared between multiple OSes and is excluded from the .a.",True,"{'THUMBS_UP': ['https://github.com/niklas-arm', 'https://github.com/Patater']}"
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,232,2016-05-31T13:45:27Z,2016-06-08T12:33:20Z,2016-06-08T12:35:53Z,MERGED,True,188,0,3,https://github.com/niklas-arm,4. Add initialization of box index and page allocator for unsupported targets,2,[],https://github.com/ARMmbed/uvisor/pull/232,https://github.com/meriac,7,https://github.com/ARMmbed/uvisor/pull/232#issuecomment-224358614,"This adds initialization for unsupported targets, where the page heap is placed inside the main heap, while leaving the main heap intact, which means this is compatible with existing CMSIS linker scripts.
Note: This builds on #231 and depends on it!
Actual diff:

Move unsupported.c into rtx/src folder.
Add uvisor_malloc_init for unsupported targets

cc @Patater @AlessandroA @meriac","@AlessandroA @niklas-arm @Patater : page_allocator.c could have a conditional .h include depending on whether the .c is compiled in a uvisor context or in unsupported. The unsupported header file does not need to be included in the supported tree and vice versa. Potentially the header file name can be identical for bot supported and unsupported (""page_allocator_config.h"") and have different content for supported/unsupported.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,232,2016-05-31T13:45:27Z,2016-06-08T12:33:20Z,2016-06-08T12:35:53Z,MERGED,True,188,0,3,https://github.com/niklas-arm,4. Add initialization of box index and page allocator for unsupported targets,2,[],https://github.com/ARMmbed/uvisor/pull/232,https://github.com/AlessandroA,8,https://github.com/ARMmbed/uvisor/pull/232#issuecomment-224546862,"This adds initialization for unsupported targets, where the page heap is placed inside the main heap, while leaving the main heap intact, which means this is compatible with existing CMSIS linker scripts.
Note: This builds on #231 and depends on it!
Actual diff:

Move unsupported.c into rtx/src folder.
Add uvisor_malloc_init for unsupported targets

cc @Patater @AlessandroA @meriac",LGTM.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,232,2016-05-31T13:45:27Z,2016-06-08T12:33:20Z,2016-06-08T12:35:53Z,MERGED,True,188,0,3,https://github.com/niklas-arm,4. Add initialization of box index and page allocator for unsupported targets,2,[],https://github.com/ARMmbed/uvisor/pull/232,https://github.com/AlessandroA,9,https://github.com/ARMmbed/uvisor/pull/232#issuecomment-224546877,"This adds initialization for unsupported targets, where the page heap is placed inside the main heap, while leaving the main heap intact, which means this is compatible with existing CMSIS linker scripts.
Note: This builds on #231 and depends on it!
Actual diff:

Move unsupported.c into rtx/src folder.
Add uvisor_malloc_init for unsupported targets

cc @Patater @AlessandroA @meriac",cc @meriac,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,232,2016-05-31T13:45:27Z,2016-06-08T12:33:20Z,2016-06-08T12:35:53Z,MERGED,True,188,0,3,https://github.com/niklas-arm,4. Add initialization of box index and page allocator for unsupported targets,2,[],https://github.com/ARMmbed/uvisor/pull/232,https://github.com/meriac,10,https://github.com/ARMmbed/uvisor/pull/232#issuecomment-224568222,"This adds initialization for unsupported targets, where the page heap is placed inside the main heap, while leaving the main heap intact, which means this is compatible with existing CMSIS linker scripts.
Note: This builds on #231 and depends on it!
Actual diff:

Move unsupported.c into rtx/src folder.
Add uvisor_malloc_init for unsupported targets

cc @Patater @AlessandroA @meriac",@niklas-arm unsupported.c lives in {mbedmicro/mbed}/uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,232,2016-05-31T13:45:27Z,2016-06-08T12:33:20Z,2016-06-08T12:35:53Z,MERGED,True,188,0,3,https://github.com/niklas-arm,4. Add initialization of box index and page allocator for unsupported targets,2,[],https://github.com/ARMmbed/uvisor/pull/232,https://github.com/Patater,11,https://github.com/ARMmbed/uvisor/pull/232#issuecomment-224574205,"This adds initialization for unsupported targets, where the page heap is placed inside the main heap, while leaving the main heap intact, which means this is compatible with existing CMSIS linker scripts.
Note: This builds on #231 and depends on it!
Actual diff:

Move unsupported.c into rtx/src folder.
Add uvisor_malloc_init for unsupported targets

cc @Patater @AlessandroA @meriac","Other than period at end of commit message, LGTM, now that we've dropped the rtx folder moving commit.",True,{'CONFUSED': ['https://github.com/niklas-arm']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,233,2016-06-01T12:56:48Z,2016-06-08T22:20:46Z,2016-06-08T22:20:46Z,MERGED,True,559,187,16,https://github.com/AlessandroA,Register level gateway,8,[],https://github.com/ARMmbed/uvisor/pull/233,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/233,"This PR introduces the Register Gateway implementation.

Added the issue #241 to track the runtime OR operation on the gateway function pointer independently of this pull request.

Done so far:

Remove uvisor_{read,write} APIs restrictions (see #90) by using  a struct instead of SVCall metadata.
All operations implemented.
Added APIs for common bit manipulations.
All operations tested.

Please concentrate on the last 2 commits.
@meriac @Patater @niklas-arm","This PR introduces the Register Gateway implementation.

Added the issue #241 to track the runtime OR operation on the gateway function pointer independently of this pull request.

Done so far:

Remove uvisor_{read,write} APIs restrictions (see #90) by using  a struct instead of SVCall metadata.
All operations implemented.
Added APIs for common bit manipulations.
All operations tested.

Please concentrate on the last 2 commits.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,233,2016-06-01T12:56:48Z,2016-06-08T22:20:46Z,2016-06-08T22:20:46Z,MERGED,True,559,187,16,https://github.com/AlessandroA,Register level gateway,8,[],https://github.com/ARMmbed/uvisor/pull/233,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/233#issuecomment-223344658,"This PR introduces the Register Gateway implementation.

Added the issue #241 to track the runtime OR operation on the gateway function pointer independently of this pull request.

Done so far:

Remove uvisor_{read,write} APIs restrictions (see #90) by using  a struct instead of SVCall metadata.
All operations implemented.
Added APIs for common bit manipulations.
All operations tested.

Please concentrate on the last 2 commits.
@meriac @Patater @niklas-arm","@meriac @Patater @niklas-arm

Addressed comments from first round of review.
Added implementation of all operations.
Added APIs for common bit manipulations.

Remaining:

Writing tests for all operations.

Note: A linker script update is required.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,233,2016-06-01T12:56:48Z,2016-06-08T22:20:46Z,2016-06-08T22:20:46Z,MERGED,True,559,187,16,https://github.com/AlessandroA,Register level gateway,8,[],https://github.com/ARMmbed/uvisor/pull/233,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/233#issuecomment-223365104,"This PR introduces the Register Gateway implementation.

Added the issue #241 to track the runtime OR operation on the gateway function pointer independently of this pull request.

Done so far:

Remove uvisor_{read,write} APIs restrictions (see #90) by using  a struct instead of SVCall metadata.
All operations implemented.
Added APIs for common bit manipulations.
All operations tested.

Please concentrate on the last 2 commits.
@meriac @Patater @niklas-arm",Addressed second round of review by @Patater,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,233,2016-06-01T12:56:48Z,2016-06-08T22:20:46Z,2016-06-08T22:20:46Z,MERGED,True,559,187,16,https://github.com/AlessandroA,Register level gateway,8,[],https://github.com/ARMmbed/uvisor/pull/233,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/233#issuecomment-223547459,"This PR introduces the Register Gateway implementation.

Added the issue #241 to track the runtime OR operation on the gateway function pointer independently of this pull request.

Done so far:

Remove uvisor_{read,write} APIs restrictions (see #90) by using  a struct instead of SVCall metadata.
All operations implemented.
Added APIs for common bit manipulations.
All operations tested.

Please concentrate on the last 2 commits.
@meriac @Patater @niklas-arm",Addressed third round of review by @Patater and @niklas-arm.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,233,2016-06-01T12:56:48Z,2016-06-08T22:20:46Z,2016-06-08T22:20:46Z,MERGED,True,559,187,16,https://github.com/AlessandroA,Register level gateway,8,[],https://github.com/ARMmbed/uvisor/pull/233,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/233#issuecomment-223961124,"This PR introduces the Register Gateway implementation.

Added the issue #241 to track the runtime OR operation on the gateway function pointer independently of this pull request.

Done so far:

Remove uvisor_{read,write} APIs restrictions (see #90) by using  a struct instead of SVCall metadata.
All operations implemented.
Added APIs for common bit manipulations.
All operations tested.

Please concentrate on the last 2 commits.
@meriac @Patater @niklas-arm","Rebased after #227 has been merged.

Note: The commit list is shown out-of-order by GH, but the actual branch commit order is correct.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,233,2016-06-01T12:56:48Z,2016-06-08T22:20:46Z,2016-06-08T22:20:46Z,MERGED,True,559,187,16,https://github.com/AlessandroA,Register level gateway,8,[],https://github.com/ARMmbed/uvisor/pull/233,https://github.com/AlessandroA,6,https://github.com/ARMmbed/uvisor/pull/233#issuecomment-224578495,"This PR introduces the Register Gateway implementation.

Added the issue #241 to track the runtime OR operation on the gateway function pointer independently of this pull request.

Done so far:

Remove uvisor_{read,write} APIs restrictions (see #90) by using  a struct instead of SVCall metadata.
All operations implemented.
Added APIs for common bit manipulations.
All operations tested.

Please concentrate on the last 2 commits.
@meriac @Patater @niklas-arm",Added the issue #241 to track the runtime OR operation on the gateway function pointer.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,233,2016-06-01T12:56:48Z,2016-06-08T22:20:46Z,2016-06-08T22:20:46Z,MERGED,True,559,187,16,https://github.com/AlessandroA,Register level gateway,8,[],https://github.com/ARMmbed/uvisor/pull/233,https://github.com/AlessandroA,7,https://github.com/ARMmbed/uvisor/pull/233#issuecomment-224677436,"This PR introduces the Register Gateway implementation.

Added the issue #241 to track the runtime OR operation on the gateway function pointer independently of this pull request.

Done so far:

Remove uvisor_{read,write} APIs restrictions (see #90) by using  a struct instead of SVCall metadata.
All operations implemented.
Added APIs for common bit manipulations.
All operations tested.

Please concentrate on the last 2 commits.
@meriac @Patater @niklas-arm",Addressed latest comments from @meriac. Now register_gateway_check() returns a status code. It's the caller that halts the system with a PERMISSION_DENIED error.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,234,2016-06-02T12:01:41Z,2016-06-02T12:10:25Z,2016-06-02T12:10:27Z,MERGED,True,4,5,3,https://github.com/AlessandroA,Revert vmpu_unpriv_access.h move,2,[],https://github.com/ARMmbed/uvisor/pull/234,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/234,@niklas-arm @Patater @meriac,@niklas-arm @Patater @meriac,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,234,2016-06-02T12:01:41Z,2016-06-02T12:10:25Z,2016-06-02T12:10:27Z,MERGED,True,4,5,3,https://github.com/AlessandroA,Revert vmpu_unpriv_access.h move,2,[],https://github.com/ARMmbed/uvisor/pull/234,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/234#issuecomment-223271532,@niklas-arm @Patater @meriac,LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,234,2016-06-02T12:01:41Z,2016-06-02T12:10:25Z,2016-06-02T12:10:27Z,MERGED,True,4,5,3,https://github.com/AlessandroA,Revert vmpu_unpriv_access.h move,2,[],https://github.com/ARMmbed/uvisor/pull/234,https://github.com/niklas-arm,3,https://github.com/ARMmbed/uvisor/pull/234#issuecomment-223271629,@niklas-arm @Patater @meriac,👍,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,237,2016-06-07T12:07:06Z,2016-06-08T16:26:35Z,2016-06-08T16:26:35Z,CLOSED,False,346,0,8,https://github.com/niklas-arm,[wip] Add unsupported osEvents table,4,[],https://github.com/ARMmbed/uvisor/pull/237,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/237,"This is a prototype implementation that works, but does not have the clear interface towards what we want the osEvent table to look like and how its registered.
This PR exists to stimulate some discussion.
cc @Patater @AlessandroA @meriac","This is a prototype implementation that works, but does not have the clear interface towards what we want the osEvent table to look like and how its registered.
This PR exists to stimulate some discussion.
cc @Patater @AlessandroA @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,244,2016-06-08T17:16:37Z,2016-06-08T17:29:29Z,2016-06-08T17:29:29Z,MERGED,True,1,1,1,https://github.com/Patater,FIXUP: Add page allocator for unsupported targets,1,[],https://github.com/ARMmbed/uvisor/pull/244,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/244,"XXX We need to apply this as a fixup to the following commit before
integrating from dev to master.
Fixes: 1fdafa6 (""Add page allocator for unsupported targets"")","XXX We need to apply this as a fixup to the following commit before
integrating from dev to master.
Fixes: 1fdafa6 (""Add page allocator for unsupported targets"")",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,245,2016-06-09T08:29:22Z,2016-06-09T08:29:30Z,2016-06-09T08:29:30Z,CLOSED,False,3476,951,63,https://github.com/niklas-arm,Add osEvents notifications for unsupported,51,[],https://github.com/ARMmbed/uvisor/pull/245,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/245,"This adds the osEvents notification and allocator switching code to uVisor for the unsupported case.
cc @meriac @AlessandroA @Patater","This adds the osEvents notification and allocator switching code to uVisor for the unsupported case.
cc @meriac @AlessandroA @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,246,2016-06-09T08:30:10Z,2016-06-09T08:30:35Z,2016-06-09T08:30:35Z,CLOSED,False,1346,21,22,https://github.com/niklas-arm,Add osEvents notifications for unsupported,12,[],https://github.com/ARMmbed/uvisor/pull/246,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/246,"This adds the osEvents notification and allocator switching code to uVisor for the unsupported case.
cc @meriac @AlessandroA @Patater","This adds the osEvents notification and allocator switching code to uVisor for the unsupported case.
cc @meriac @AlessandroA @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,247,2016-06-09T08:31:55Z,2016-06-09T08:41:34Z,2016-06-09T08:41:34Z,MERGED,True,88,0,3,https://github.com/niklas-arm,Add osEvents notifications for unsupported,1,[],https://github.com/ARMmbed/uvisor/pull/247,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/247,"This adds the osEvents notification and allocator switching code to uVisor for the unsupported case.
cc @meriac @AlessandroA @Patater","This adds the osEvents notification and allocator switching code to uVisor for the unsupported case.
cc @meriac @AlessandroA @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,247,2016-06-09T08:31:55Z,2016-06-09T08:41:34Z,2016-06-09T08:41:34Z,MERGED,True,88,0,3,https://github.com/niklas-arm,Add osEvents notifications for unsupported,1,[],https://github.com/ARMmbed/uvisor/pull/247,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/247#issuecomment-224833890,"This adds the osEvents notification and allocator switching code to uVisor for the unsupported case.
cc @meriac @AlessandroA @Patater","I don't like that the CMSIS file is duplicated, but I don't have any better ideas for now. We are duplicating the ""core"" files from CMSIS already. Maybe we can fix both duplication problems at the same time, but later.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,248,2016-06-09T10:35:46Z,2016-06-09T20:26:57Z,2016-06-27T13:36:11Z,MERGED,True,1,4,1,https://github.com/AlessandroA,Kinetis: Fix the SRAM_OFFSET configuration parameter,1,[],https://github.com/ARMmbed/uvisor/pull/248,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/248,"A previous FIXME in the code was referring to a mismatch between the
mbed 3.0 linker script configuration (0x200) and the original offset as
set by the official Freescale/NXP linker scripts.
Now that mbed features 0x400 again, we can remove the FIXME message and
use that value.
@meriac @Patater @niklas-arm","A previous FIXME in the code was referring to a mismatch between the
mbed 3.0 linker script configuration (0x200) and the original offset as
set by the official Freescale/NXP linker scripts.
Now that mbed features 0x400 again, we can remove the FIXME message and
use that value.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,248,2016-06-09T10:35:46Z,2016-06-09T20:26:57Z,2016-06-27T13:36:11Z,MERGED,True,1,4,1,https://github.com/AlessandroA,Kinetis: Fix the SRAM_OFFSET configuration parameter,1,[],https://github.com/ARMmbed/uvisor/pull/248,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/248#issuecomment-224858858,"A previous FIXME in the code was referring to a mismatch between the
mbed 3.0 linker script configuration (0x200) and the original offset as
set by the official Freescale/NXP linker scripts.
Now that mbed features 0x400 again, we can remove the FIXME message and
use that value.
@meriac @Patater @niklas-arm","Marked as ""don't merge yet"". I want to test all modifications (here, and in mbed) before merging.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,248,2016-06-09T10:35:46Z,2016-06-09T20:26:57Z,2016-06-27T13:36:11Z,MERGED,True,1,4,1,https://github.com/AlessandroA,Kinetis: Fix the SRAM_OFFSET configuration parameter,1,[],https://github.com/ARMmbed/uvisor/pull/248,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/248#issuecomment-224925841,"A previous FIXME in the code was referring to a mismatch between the
mbed 3.0 linker script configuration (0x200) and the original offset as
set by the official Freescale/NXP linker scripts.
Now that mbed features 0x400 again, we can remove the FIXME message and
use that value.
@meriac @Patater @niklas-arm","Tested, it can now be merged.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,248,2016-06-09T10:35:46Z,2016-06-09T20:26:57Z,2016-06-27T13:36:11Z,MERGED,True,1,4,1,https://github.com/AlessandroA,Kinetis: Fix the SRAM_OFFSET configuration parameter,1,[],https://github.com/ARMmbed/uvisor/pull/248,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/248#issuecomment-224925870,"A previous FIXME in the code was referring to a mismatch between the
mbed 3.0 linker script configuration (0x200) and the original offset as
set by the official Freescale/NXP linker scripts.
Now that mbed features 0x400 again, we can remove the FIXME message and
use that value.
@meriac @Patater @niklas-arm",@meriac,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,248,2016-06-09T10:35:46Z,2016-06-09T20:26:57Z,2016-06-27T13:36:11Z,MERGED,True,1,4,1,https://github.com/AlessandroA,Kinetis: Fix the SRAM_OFFSET configuration parameter,1,[],https://github.com/ARMmbed/uvisor/pull/248,https://github.com/Patater,5,https://github.com/ARMmbed/uvisor/pull/248#issuecomment-224931484,"A previous FIXME in the code was referring to a mismatch between the
mbed 3.0 linker script configuration (0x200) and the original offset as
set by the official Freescale/NXP linker scripts.
Now that mbed features 0x400 again, we can remove the FIXME message and
use that value.
@meriac @Patater @niklas-arm",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,249,2016-06-09T14:06:52Z,2016-06-09T14:09:50Z,2016-06-09T14:09:50Z,MERGED,True,14,13,1,https://github.com/niklas-arm,Only include export headers if required.,1,[],https://github.com/ARMmbed/uvisor/pull/249,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/249,"The page allocator header files only work on GCC.
See related #[insert] in mbedmicro.","The page allocator header files only work on GCC.
See related #[insert] in mbedmicro.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,250,2016-06-09T15:09:26Z,2016-06-09T20:26:43Z,2016-06-09T20:26:43Z,MERGED,True,0,2,2,https://github.com/AlessandroA,Remove deprecated assertions on bss_size == 0,1,[],https://github.com/ARMmbed/uvisor/pull/250,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/250,"The assertions were used in the vmpu_acl_stack() functions (Kinetis and
ARM MPUs) to check that box 0 has no context.
Now the concept of context has been extended to a more general BSS, and
the BSS for a box (including box 0) has always a size greater than 0.
@meriac @Patater @niklas-arm","The assertions were used in the vmpu_acl_stack() functions (Kinetis and
ARM MPUs) to check that box 0 has no context.
Now the concept of context has been extended to a more general BSS, and
the BSS for a box (including box 0) has always a size greater than 0.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,250,2016-06-09T15:09:26Z,2016-06-09T20:26:43Z,2016-06-09T20:26:43Z,MERGED,True,0,2,2,https://github.com/AlessandroA,Remove deprecated assertions on bss_size == 0,1,[],https://github.com/ARMmbed/uvisor/pull/250,https://github.com/niklas-arm,2,https://github.com/ARMmbed/uvisor/pull/250#issuecomment-224933933,"The assertions were used in the vmpu_acl_stack() functions (Kinetis and
ARM MPUs) to check that box 0 has no context.
Now the concept of context has been extended to a more general BSS, and
the BSS for a box (including box 0) has always a size greater than 0.
@meriac @Patater @niklas-arm",Do we want to add an assert(bss != 0) like here?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,250,2016-06-09T15:09:26Z,2016-06-09T20:26:43Z,2016-06-09T20:26:43Z,MERGED,True,0,2,2,https://github.com/AlessandroA,Remove deprecated assertions on bss_size == 0,1,[],https://github.com/ARMmbed/uvisor/pull/250,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/250#issuecomment-224935981,"The assertions were used in the vmpu_acl_stack() functions (Kinetis and
ARM MPUs) to check that box 0 has no context.
Now the concept of context has been extended to a more general BSS, and
the BSS for a box (including box 0) has always a size greater than 0.
@meriac @Patater @niklas-arm","I did not put it there because anyway we already check (somewhere else) that the bss_size contains enough space for (at least) a UvisorBoxIndex. The original check was here because it was a way to prove that box 0 wasn't misconfigured, but now it's more complicated than just a check.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,251,2016-06-10T12:48:31Z,2016-06-20T15:06:03Z,2016-06-20T15:06:03Z,CLOSED,False,2640,662,51,https://github.com/Patater,WIP Box Mains,44,[],https://github.com/ARMmbed/uvisor/pull/251,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/251,"Don't merge. Commits are ugly. Code is not final.
Up for review if anybody wants an early peek
@AlessandroA @meriac @niklas-arm","Don't merge. Commits are ugly. Code is not final.
Up for review if anybody wants an early peek
@AlessandroA @meriac @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,251,2016-06-10T12:48:31Z,2016-06-20T15:06:03Z,2016-06-20T15:06:03Z,CLOSED,False,2640,662,51,https://github.com/Patater,WIP Box Mains,44,[],https://github.com/ARMmbed/uvisor/pull/251,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/251#issuecomment-227170073,"Don't merge. Commits are ugly. Code is not final.
Up for review if anybody wants an early peek
@AlessandroA @meriac @niklas-arm",Closed in favor of #262,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,252,2016-06-10T15:13:25Z,2016-06-10T15:41:40Z,2016-06-10T15:41:49Z,MERGED,True,110,51,3,https://github.com/AlessandroA,Register gateway: Improve the API generality,1,[],https://github.com/ARMmbed/uvisor/pull/252,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/252,"With the new API:

A gateway can be marked as shared. If so, there is no check on the
current box being the same as the gateway owner.
The value for a write operation can be runtime-defined.
The gateway performs 8-, 16-, 32-bit operations, depending on the size
of the value pointed by the address field of the gateway.

@meriac @Patater @niklas-arm
Note:
The new API looks like this:
uint16_t value = uvisor_read(my_box, &PERIPH->REG, UVISOR_RGW_OP_READ, true, 0xFFFFFFFF);
The true means that the gateway is shared. This is how generally we will set all gateways in the legacy code (SDKs, OSs, etc.) for shared boxes to use their low-level APIs.","With the new API:

A gateway can be marked as shared. If so, there is no check on the
current box being the same as the gateway owner.
The value for a write operation can be runtime-defined.
The gateway performs 8-, 16-, 32-bit operations, depending on the size
of the value pointed by the address field of the gateway.

@meriac @Patater @niklas-arm
Note:
The new API looks like this:
uint16_t value = uvisor_read(my_box, &PERIPH->REG, UVISOR_RGW_OP_READ, true, 0xFFFFFFFF);
The true means that the gateway is shared. This is how generally we will set all gateways in the legacy code (SDKs, OSs, etc.) for shared boxes to use their low-level APIs.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,252,2016-06-10T15:13:25Z,2016-06-10T15:41:40Z,2016-06-10T15:41:49Z,MERGED,True,110,51,3,https://github.com/AlessandroA,Register gateway: Improve the API generality,1,[],https://github.com/ARMmbed/uvisor/pull/252,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/252#issuecomment-225218241,"With the new API:

A gateway can be marked as shared. If so, there is no check on the
current box being the same as the gateway owner.
The value for a write operation can be runtime-defined.
The gateway performs 8-, 16-, 32-bit operations, depending on the size
of the value pointed by the address field of the gateway.

@meriac @Patater @niklas-arm
Note:
The new API looks like this:
uint16_t value = uvisor_read(my_box, &PERIPH->REG, UVISOR_RGW_OP_READ, true, 0xFFFFFFFF);
The true means that the gateway is shared. This is how generally we will set all gateways in the legacy code (SDKs, OSs, etc.) for shared boxes to use their low-level APIs.",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,253,2016-06-10T16:39:25Z,2016-06-13T09:38:30Z,2016-06-13T09:38:30Z,MERGED,True,43,19,2,https://github.com/AlessandroA,Register gateway: Provide macros for the shared bit,1,[],https://github.com/ARMmbed/uvisor/pull/253,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/253,"@meriac @Patater @niklas-arm
The API would now look like this:
uint16_t val = uvisor_read(my_box, UVISOR_RGW_EXCLUSIVE, address, UVISOR_RGW_OP_READ, 0xFFFFFFFFUL);","@meriac @Patater @niklas-arm
The API would now look like this:
uint16_t val = uvisor_read(my_box, UVISOR_RGW_EXCLUSIVE, address, UVISOR_RGW_OP_READ, 0xFFFFFFFFUL);",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,253,2016-06-10T16:39:25Z,2016-06-13T09:38:30Z,2016-06-13T09:38:30Z,MERGED,True,43,19,2,https://github.com/AlessandroA,Register gateway: Provide macros for the shared bit,1,[],https://github.com/ARMmbed/uvisor/pull/253,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/253#issuecomment-225233410,"@meriac @Patater @niklas-arm
The API would now look like this:
uint16_t val = uvisor_read(my_box, UVISOR_RGW_EXCLUSIVE, address, UVISOR_RGW_OP_READ, 0xFFFFFFFFUL);",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,253,2016-06-10T16:39:25Z,2016-06-13T09:38:30Z,2016-06-13T09:38:30Z,MERGED,True,43,19,2,https://github.com/AlessandroA,Register gateway: Provide macros for the shared bit,1,[],https://github.com/ARMmbed/uvisor/pull/253,https://github.com/niklas-arm,3,https://github.com/ARMmbed/uvisor/pull/253#issuecomment-225527108,"@meriac @Patater @niklas-arm
The API would now look like this:
uint16_t val = uvisor_read(my_box, UVISOR_RGW_EXCLUSIVE, address, UVISOR_RGW_OP_READ, 0xFFFFFFFFUL);",👍  for moving the shared bit forward.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,253,2016-06-10T16:39:25Z,2016-06-13T09:38:30Z,2016-06-13T09:38:30Z,MERGED,True,43,19,2,https://github.com/AlessandroA,Register gateway: Provide macros for the shared bit,1,[],https://github.com/ARMmbed/uvisor/pull/253,https://github.com/niklas-arm,4,https://github.com/ARMmbed/uvisor/pull/253#issuecomment-225527234,"@meriac @Patater @niklas-arm
The API would now look like this:
uint16_t val = uvisor_read(my_box, UVISOR_RGW_EXCLUSIVE, address, UVISOR_RGW_OP_READ, 0xFFFFFFFFUL);","Apart from bool usage, LTGM.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,253,2016-06-10T16:39:25Z,2016-06-13T09:38:30Z,2016-06-13T09:38:30Z,MERGED,True,43,19,2,https://github.com/AlessandroA,Register gateway: Provide macros for the shared bit,1,[],https://github.com/ARMmbed/uvisor/pull/253,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/253#issuecomment-225528357,"@meriac @Patater @niklas-arm
The API would now look like this:
uint16_t val = uvisor_read(my_box, UVISOR_RGW_EXCLUSIVE, address, UVISOR_RGW_OP_READ, 0xFFFFFFFFUL);",Addressed @niklas-arm's comments.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,254,2016-06-13T17:49:38Z,2016-06-13T20:52:24Z,2016-06-13T20:52:24Z,MERGED,True,151,89,1,https://github.com/AlessandroA,docs: Update the porting guide to the new mbed OS,1,[],https://github.com/ARMmbed/uvisor/pull/254,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/254,@iriark01 @meriac,@iriark01 @meriac,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,255,2016-06-13T17:54:12Z,2016-06-13T17:59:20Z,2016-06-13T17:59:20Z,MERGED,True,58,0,2,https://github.com/niklas-arm,Add CMSIS headers for virtual NVIC and Vector Table,1,[],https://github.com/ARMmbed/uvisor/pull/255,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/255,cc @meriac @AlessandroA @Patater,cc @meriac @AlessandroA @Patater,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,256,2016-06-14T11:34:13Z,2016-06-14T13:00:30Z,2016-06-14T13:00:30Z,MERGED,True,1,1,1,https://github.com/Patater,fixup! export-table: Add export table,1,[],https://github.com/ARMmbed/uvisor/pull/256,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/256,"The original implementation of the export table had a bug where, only in
release builds, the export table was optimized out by the compiler. Make
the export table non-static so that the compiler will not optimize out the
export table in release builds.
Fixes: 7408972 (""export-table: Add export table"")
@meriac @AlessandroA @niklas-arm","The original implementation of the export table had a bug where, only in
release builds, the export table was optimized out by the compiler. Make
the export table non-static so that the compiler will not optimize out the
export table in release builds.
Fixes: 7408972 (""export-table: Add export table"")
@meriac @AlessandroA @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,256,2016-06-14T11:34:13Z,2016-06-14T13:00:30Z,2016-06-14T13:00:30Z,MERGED,True,1,1,1,https://github.com/Patater,fixup! export-table: Add export table,1,[],https://github.com/ARMmbed/uvisor/pull/256,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/256#issuecomment-225855050,"The original implementation of the export table had a bug where, only in
release builds, the export table was optimized out by the compiler. Make
the export table non-static so that the compiler will not optimize out the
export table in release builds.
Fixes: 7408972 (""export-table: Add export table"")
@meriac @AlessandroA @niklas-arm","Do we want to keep the fixup! tag in the commit message? Other than that, LGTM.
Tested with K64F_SECURE and the CMSIS-DAP firmware.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,256,2016-06-14T11:34:13Z,2016-06-14T13:00:30Z,2016-06-14T13:00:30Z,MERGED,True,1,1,1,https://github.com/Patater,fixup! export-table: Add export table,1,[],https://github.com/ARMmbed/uvisor/pull/256,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/256#issuecomment-225858873,"The original implementation of the export table had a bug where, only in
release builds, the export table was optimized out by the compiler. Make
the export table non-static so that the compiler will not optimize out the
export table in release builds.
Fixes: 7408972 (""export-table: Add export table"")
@meriac @AlessandroA @niklas-arm","This is targeted at the dev branch and fixes a bug introduced only to the dev branch, so it makes sense to leave the fixup for now, and apply the fixup before merging from dev to master.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,257,2016-06-14T22:02:53Z,2016-06-14T22:33:35Z,2016-06-14T22:33:35Z,MERGED,True,141,17,1,https://github.com/AlessandroA,docs: Add new sections to porting guide,1,[],https://github.com/ARMmbed/uvisor/pull/257,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/257,"New sections/additions:

Heap and page allocator linker sections.
Targets definition.
UVISOR_SUPPORTED and FEATURE_UVISOR symbols.

Plus:

Minor edits on style and consistency.
A couple of clarifications to address feedback from users of the guide.

@iriark01 @meriac","New sections/additions:

Heap and page allocator linker sections.
Targets definition.
UVISOR_SUPPORTED and FEATURE_UVISOR symbols.

Plus:

Minor edits on style and consistency.
A couple of clarifications to address feedback from users of the guide.

@iriark01 @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,258,2016-06-15T13:43:10Z,2016-06-15T22:07:17Z,2016-06-15T22:07:17Z,CLOSED,False,108,1,3,https://github.com/salkinium,Add thread event implementations for osEvents,2,"[""don't merge yet""]",https://github.com/ARMmbed/uvisor/pull/258,https://github.com/salkinium,1,https://github.com/ARMmbed/uvisor/pull/258,"Required to get correct allocator switching in supported mode.
Note: I had to increase the flash size, so I cherry-picked Jaedens commit directly.
This PR will be closed in favour of #259
cc @AlessandroA @meriac @Patater","Required to get correct allocator switching in supported mode.
Note: I had to increase the flash size, so I cherry-picked Jaedens commit directly.
This PR will be closed in favour of #259
cc @AlessandroA @meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,258,2016-06-15T13:43:10Z,2016-06-15T22:07:17Z,2016-06-15T22:07:17Z,CLOSED,False,108,1,3,https://github.com/salkinium,Add thread event implementations for osEvents,2,"[""don't merge yet""]",https://github.com/ARMmbed/uvisor/pull/258,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/258#issuecomment-226195894,"Required to get correct allocator switching in supported mode.
Note: I had to increase the flash size, so I cherry-picked Jaedens commit directly.
This PR will be closed in favour of #259
cc @AlessandroA @meriac @Patater",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,258,2016-06-15T13:43:10Z,2016-06-15T22:07:17Z,2016-06-15T22:07:17Z,CLOSED,False,108,1,3,https://github.com/salkinium,Add thread event implementations for osEvents,2,"[""don't merge yet""]",https://github.com/ARMmbed/uvisor/pull/258,https://github.com/meriac,3,https://github.com/ARMmbed/uvisor/pull/258#issuecomment-226334606,"Required to get correct allocator switching in supported mode.
Note: I had to increase the flash size, so I cherry-picked Jaedens commit directly.
This PR will be closed in favour of #259
cc @AlessandroA @meriac @Patater",Closed in favour of #260,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,259,2016-06-15T16:20:27Z,2016-06-15T21:20:07Z,2016-06-27T13:35:16Z,MERGED,True,432,2,15,https://github.com/AlessandroA,Unstable: Support for secure boxes initializations and events,6,[],https://github.com/ARMmbed/uvisor/pull/259,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/259,"This PR is against the unstable branch.
This PR introduces the following:

uVisor-core box main initializations, by @AlessandroA.
uVisor-lib box main initializations, by @Patater.
uVisor thread notifications for CMSIS RTOS, by @niklas-arm.

This branch allows an application built with mbed OS and CMSIS RTOS to work with uVisor enabled and multiple secure boxes. It is not ready for the dev branch yet, though.
@meriac @Patater @niklas-arm","This PR is against the unstable branch.
This PR introduces the following:

uVisor-core box main initializations, by @AlessandroA.
uVisor-lib box main initializations, by @Patater.
uVisor thread notifications for CMSIS RTOS, by @niklas-arm.

This branch allows an application built with mbed OS and CMSIS RTOS to work with uVisor enabled and multiple secure boxes. It is not ready for the dev branch yet, though.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,260,2016-06-15T22:05:50Z,2016-06-27T13:31:15Z,2016-06-27T13:31:39Z,CLOSED,False,0,0,0,https://github.com/meriac,Add uVisor box main feature,0,[],https://github.com/ARMmbed/uvisor/pull/260,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/260,Please note the comments in #258,Please note the comments in #258,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,260,2016-06-15T22:05:50Z,2016-06-27T13:31:15Z,2016-06-27T13:31:39Z,CLOSED,False,0,0,0,https://github.com/meriac,Add uVisor box main feature,0,[],https://github.com/ARMmbed/uvisor/pull/260,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/260#issuecomment-228745893,Please note the comments in #258,Superseded by #262,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,262,2016-06-20T14:55:52Z,2016-06-27T12:29:37Z,2016-06-27T12:29:37Z,MERGED,True,479,7,13,https://github.com/Patater,Switch allocators for uVisor supported; Add uVisor box main feature,8,[],https://github.com/ARMmbed/uvisor/pull/262,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/262,"I've cleaned up the commits we have in unstable.
These PRs were similar to this one, but not as clean or as far along in implementing previous feedback.
#260
#258
The following is an excerpt from the example-uvisor-threaded-blinky application, illustrating the use of the new box main feature. For the complete working example, see https://github.com/Patater/example-uvisor-threaded-blinky
static void led1_main(const void *);

UVISOR_BOX_NAMESPACE(NULL);
UVISOR_BOX_HEAPSIZE(8192);
UVISOR_BOX_MAIN(led1_main, osPriorityNormal, UVISOR_BOX_STACK_SIZE);
UVISOR_BOX_CONFIG(box_led1, acl, UVISOR_BOX_STACK_SIZE, box_context);
After this lands in the uVisor dev branch, meriac/mbed-os needs to commit the results of a fresh run of the importer script. Then, ARMmbed/mbed-os-example-uvisor-thread#2 needs to be updated to point to this new version of meriac/mbed-os.
@AlessandroA @meriac @niklas-arm","I've cleaned up the commits we have in unstable.
These PRs were similar to this one, but not as clean or as far along in implementing previous feedback.
#260
#258
The following is an excerpt from the example-uvisor-threaded-blinky application, illustrating the use of the new box main feature. For the complete working example, see https://github.com/Patater/example-uvisor-threaded-blinky
static void led1_main(const void *);

UVISOR_BOX_NAMESPACE(NULL);
UVISOR_BOX_HEAPSIZE(8192);
UVISOR_BOX_MAIN(led1_main, osPriorityNormal, UVISOR_BOX_STACK_SIZE);
UVISOR_BOX_CONFIG(box_led1, acl, UVISOR_BOX_STACK_SIZE, box_context);
After this lands in the uVisor dev branch, meriac/mbed-os needs to commit the results of a fresh run of the importer script. Then, ARMmbed/mbed-os-example-uvisor-thread#2 needs to be updated to point to this new version of meriac/mbed-os.
@AlessandroA @meriac @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,262,2016-06-20T14:55:52Z,2016-06-27T12:29:37Z,2016-06-27T12:29:37Z,MERGED,True,479,7,13,https://github.com/Patater,Switch allocators for uVisor supported; Add uVisor box main feature,8,[],https://github.com/ARMmbed/uvisor/pull/262,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/262#issuecomment-228350969,"I've cleaned up the commits we have in unstable.
These PRs were similar to this one, but not as clean or as far along in implementing previous feedback.
#260
#258
The following is an excerpt from the example-uvisor-threaded-blinky application, illustrating the use of the new box main feature. For the complete working example, see https://github.com/Patater/example-uvisor-threaded-blinky
static void led1_main(const void *);

UVISOR_BOX_NAMESPACE(NULL);
UVISOR_BOX_HEAPSIZE(8192);
UVISOR_BOX_MAIN(led1_main, osPriorityNormal, UVISOR_BOX_STACK_SIZE);
UVISOR_BOX_CONFIG(box_led1, acl, UVISOR_BOX_STACK_SIZE, box_context);
After this lands in the uVisor dev branch, meriac/mbed-os needs to commit the results of a fresh run of the importer script. Then, ARMmbed/mbed-os-example-uvisor-thread#2 needs to be updated to point to this new version of meriac/mbed-os.
@AlessandroA @meriac @niklas-arm","LGTM.
@meriac Ready for review. Note: This PR is against dev!",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,262,2016-06-20T14:55:52Z,2016-06-27T12:29:37Z,2016-06-27T12:29:37Z,MERGED,True,479,7,13,https://github.com/Patater,Switch allocators for uVisor supported; Add uVisor box main feature,8,[],https://github.com/ARMmbed/uvisor/pull/262,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/262#issuecomment-228695822,"I've cleaned up the commits we have in unstable.
These PRs were similar to this one, but not as clean or as far along in implementing previous feedback.
#260
#258
The following is an excerpt from the example-uvisor-threaded-blinky application, illustrating the use of the new box main feature. For the complete working example, see https://github.com/Patater/example-uvisor-threaded-blinky
static void led1_main(const void *);

UVISOR_BOX_NAMESPACE(NULL);
UVISOR_BOX_HEAPSIZE(8192);
UVISOR_BOX_MAIN(led1_main, osPriorityNormal, UVISOR_BOX_STACK_SIZE);
UVISOR_BOX_CONFIG(box_led1, acl, UVISOR_BOX_STACK_SIZE, box_context);
After this lands in the uVisor dev branch, meriac/mbed-os needs to commit the results of a fresh run of the importer script. Then, ARMmbed/mbed-os-example-uvisor-thread#2 needs to be updated to point to this new version of meriac/mbed-os.
@AlessandroA @meriac @niklas-arm","We now have two SVCs for box-init. One to initiate the recursion, and one for the recursion.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,263,2016-06-20T15:15:21Z,2016-06-24T13:37:30Z,2016-06-27T13:35:10Z,MERGED,True,218,191,7,https://github.com/AlessandroA,Fix the SRAM BSS section sanity checks,7,[],https://github.com/ARMmbed/uvisor/pull/263,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/263,"There were 2 issues with the vMPU sanity checks for the SRAM relocation:

The configuration table symbols for the BSS main start/end were used
as-is, while in fact those symbols are rounded to 32 bytes in the
linker script. Because of alignment, the size given to the BSS main
section might be more than what we asked for, UVISOR_SRAM_LENGTH.
The start of the uVisor BSS section was checked using an MPU driver-specifc macro.
Instead, we know that the physical address will always be rounded to 32 bits (see linker script).
Note: In the ARM v7-M driver the actual start address for
the MPU region that covers the uVisor SRAM is SRAM_ORIGIN anyway,
regardless of the offset. This change only affects the sanity checks!

@meriac @Patater @niklas-arm","There were 2 issues with the vMPU sanity checks for the SRAM relocation:

The configuration table symbols for the BSS main start/end were used
as-is, while in fact those symbols are rounded to 32 bytes in the
linker script. Because of alignment, the size given to the BSS main
section might be more than what we asked for, UVISOR_SRAM_LENGTH.
The start of the uVisor BSS section was checked using an MPU driver-specifc macro.
Instead, we know that the physical address will always be rounded to 32 bits (see linker script).
Note: In the ARM v7-M driver the actual start address for
the MPU region that covers the uVisor SRAM is SRAM_ORIGIN anyway,
regardless of the offset. This change only affects the sanity checks!

@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,263,2016-06-20T15:15:21Z,2016-06-24T13:37:30Z,2016-06-27T13:35:10Z,MERGED,True,218,191,7,https://github.com/AlessandroA,Fix the SRAM BSS section sanity checks,7,[],https://github.com/ARMmbed/uvisor/pull/263,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/263#issuecomment-227423012,"There were 2 issues with the vMPU sanity checks for the SRAM relocation:

The configuration table symbols for the BSS main start/end were used
as-is, while in fact those symbols are rounded to 32 bytes in the
linker script. Because of alignment, the size given to the BSS main
section might be more than what we asked for, UVISOR_SRAM_LENGTH.
The start of the uVisor BSS section was checked using an MPU driver-specifc macro.
Instead, we know that the physical address will always be rounded to 32 bits (see linker script).
Note: In the ARM v7-M driver the actual start address for
the MPU region that covers the uVisor SRAM is SRAM_ORIGIN anyway,
regardless of the offset. This change only affects the sanity checks!

@meriac @Patater @niklas-arm",Addressed @Patater's comments.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,263,2016-06-20T15:15:21Z,2016-06-24T13:37:30Z,2016-06-27T13:35:10Z,MERGED,True,218,191,7,https://github.com/AlessandroA,Fix the SRAM BSS section sanity checks,7,[],https://github.com/ARMmbed/uvisor/pull/263,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/263#issuecomment-228107025,"There were 2 issues with the vMPU sanity checks for the SRAM relocation:

The configuration table symbols for the BSS main start/end were used
as-is, while in fact those symbols are rounded to 32 bytes in the
linker script. Because of alignment, the size given to the BSS main
section might be more than what we asked for, UVISOR_SRAM_LENGTH.
The start of the uVisor BSS section was checked using an MPU driver-specifc macro.
Instead, we know that the physical address will always be rounded to 32 bits (see linker script).
Note: In the ARM v7-M driver the actual start address for
the MPU region that covers the uVisor SRAM is SRAM_ORIGIN anyway,
regardless of the offset. This change only affects the sanity checks!

@meriac @Patater @niklas-arm","@meriac Ready for review. Note: This PR contains commits from #266, which has already been merged into unstable. This PR is against dev!
@Patater Any further comments?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,263,2016-06-20T15:15:21Z,2016-06-24T13:37:30Z,2016-06-27T13:35:10Z,MERGED,True,218,191,7,https://github.com/AlessandroA,Fix the SRAM BSS section sanity checks,7,[],https://github.com/ARMmbed/uvisor/pull/263,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/263#issuecomment-228314558,"There were 2 issues with the vMPU sanity checks for the SRAM relocation:

The configuration table symbols for the BSS main start/end were used
as-is, while in fact those symbols are rounded to 32 bytes in the
linker script. Because of alignment, the size given to the BSS main
section might be more than what we asked for, UVISOR_SRAM_LENGTH.
The start of the uVisor BSS section was checked using an MPU driver-specifc macro.
Instead, we know that the physical address will always be rounded to 32 bits (see linker script).
Note: In the ARM v7-M driver the actual start address for
the MPU region that covers the uVisor SRAM is SRAM_ORIGIN anyway,
regardless of the offset. This change only affects the sanity checks!

@meriac @Patater @niklas-arm","LGTM, other than the comment typo.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,263,2016-06-20T15:15:21Z,2016-06-24T13:37:30Z,2016-06-27T13:35:10Z,MERGED,True,218,191,7,https://github.com/AlessandroA,Fix the SRAM BSS section sanity checks,7,[],https://github.com/ARMmbed/uvisor/pull/263,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/263#issuecomment-228345474,"There were 2 issues with the vMPU sanity checks for the SRAM relocation:

The configuration table symbols for the BSS main start/end were used
as-is, while in fact those symbols are rounded to 32 bytes in the
linker script. Because of alignment, the size given to the BSS main
section might be more than what we asked for, UVISOR_SRAM_LENGTH.
The start of the uVisor BSS section was checked using an MPU driver-specifc macro.
Instead, we know that the physical address will always be rounded to 32 bits (see linker script).
Note: In the ARM v7-M driver the actual start address for
the MPU region that covers the uVisor SRAM is SRAM_ORIGIN anyway,
regardless of the offset. This change only affects the sanity checks!

@meriac @Patater @niklas-arm","Addressed latest comments from @Patater.

@meriac Ready for review (last 3 commits).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,264,2016-06-20T16:21:53Z,2016-06-21T22:31:59Z,2016-06-27T13:35:14Z,MERGED,True,7,7,1,https://github.com/AlessandroA,Swap the revision and variant fields of CPUID,2,[],https://github.com/ARMmbed/uvisor/pull/264,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/264,"When verifying the core version against the minimum requirements, the
variant and revision fields in the CPUID register where swapped.
If a core version if r2p0, then the variant is r2, the revision is p0.
Reported and fixed by @fvincenzo.
@meriac @Patater @niklas-arm","When verifying the core version against the minimum requirements, the
variant and revision fields in the CPUID register where swapped.
If a core version if r2p0, then the variant is r2, the revision is p0.
Reported and fixed by @fvincenzo.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,264,2016-06-20T16:21:53Z,2016-06-21T22:31:59Z,2016-06-27T13:35:14Z,MERGED,True,7,7,1,https://github.com/AlessandroA,Swap the revision and variant fields of CPUID,2,[],https://github.com/ARMmbed/uvisor/pull/264,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/264#issuecomment-227397294,"When verifying the core version against the minimum requirements, the
variant and revision fields in the CPUID register where swapped.
If a core version if r2p0, then the variant is r2, the revision is p0.
Reported and fixed by @fvincenzo.
@meriac @Patater @niklas-arm","LGTM
Note that REVISTION is not the correct spelling, but this commit is following best practices in not fixing two separate concerns at once.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,264,2016-06-20T16:21:53Z,2016-06-21T22:31:59Z,2016-06-27T13:35:14Z,MERGED,True,7,7,1,https://github.com/AlessandroA,Swap the revision and variant fields of CPUID,2,[],https://github.com/ARMmbed/uvisor/pull/264,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/264#issuecomment-227422934,"When verifying the core version against the minimum requirements, the
variant and revision fields in the CPUID register where swapped.
If a core version if r2p0, then the variant is r2, the revision is p0.
Reported and fixed by @fvincenzo.
@meriac @Patater @niklas-arm",@Patater Added commit to fix the typo.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,264,2016-06-20T16:21:53Z,2016-06-21T22:31:59Z,2016-06-27T13:35:14Z,MERGED,True,7,7,1,https://github.com/AlessandroA,Swap the revision and variant fields of CPUID,2,[],https://github.com/ARMmbed/uvisor/pull/264,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/264#issuecomment-227428224,"When verifying the core version against the minimum requirements, the
variant and revision fields in the CPUID register where swapped.
If a core version if r2p0, then the variant is r2, the revision is p0.
Reported and fixed by @fvincenzo.
@meriac @Patater @niklas-arm",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,265,2016-06-23T09:44:59Z,2016-06-28T12:12:42Z,2016-06-28T12:12:42Z,MERGED,True,89,35,1,https://github.com/AlessandroA,Build artifacts end up in separate folders,2,[],https://github.com/ARMmbed/uvisor/pull/265,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/265,"This PR makes sure that build artifacts end up in separate folders from the source files paths.
We have 2 classes of build artifacts:

For the uVisor core build. Artifacts now end up in $(CONFIGURATION)/$(BUILD_MODE)/core/.
For the uVisor APIs build. Artifacts now end up in $(CONFIGURATION)/$(BUILD_MODE)/api/.

The source files in the core and api folders can still have the same name, without generating collisions (an example is benchmark.c in both api/src/ and core/system/src/).
As a bonus, the core and APIs builds are now separated, so in the future one can be changed without affecting the other.
@meriac @Patater @niklas-arm","This PR makes sure that build artifacts end up in separate folders from the source files paths.
We have 2 classes of build artifacts:

For the uVisor core build. Artifacts now end up in $(CONFIGURATION)/$(BUILD_MODE)/core/.
For the uVisor APIs build. Artifacts now end up in $(CONFIGURATION)/$(BUILD_MODE)/api/.

The source files in the core and api folders can still have the same name, without generating collisions (an example is benchmark.c in both api/src/ and core/system/src/).
As a bonus, the core and APIs builds are now separated, so in the future one can be changed without affecting the other.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,265,2016-06-23T09:44:59Z,2016-06-28T12:12:42Z,2016-06-28T12:12:42Z,MERGED,True,89,35,1,https://github.com/AlessandroA,Build artifacts end up in separate folders,2,[],https://github.com/ARMmbed/uvisor/pull/265,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/265#issuecomment-228013592,"This PR makes sure that build artifacts end up in separate folders from the source files paths.
We have 2 classes of build artifacts:

For the uVisor core build. Artifacts now end up in $(CONFIGURATION)/$(BUILD_MODE)/core/.
For the uVisor APIs build. Artifacts now end up in $(CONFIGURATION)/$(BUILD_MODE)/api/.

The source files in the core and api folders can still have the same name, without generating collisions (an example is benchmark.c in both api/src/ and core/system/src/).
As a bonus, the core and APIs builds are now separated, so in the future one can be changed without affecting the other.
@meriac @Patater @niklas-arm","It appears that some non-comment changes made it into your ""Makefile: Improve comments"" commit on accident. (release was renamed to api_release)
Prefer separate commits.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,265,2016-06-23T09:44:59Z,2016-06-28T12:12:42Z,2016-06-28T12:12:42Z,MERGED,True,89,35,1,https://github.com/AlessandroA,Build artifacts end up in separate folders,2,[],https://github.com/ARMmbed/uvisor/pull/265,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/265#issuecomment-228016303,"This PR makes sure that build artifacts end up in separate folders from the source files paths.
We have 2 classes of build artifacts:

For the uVisor core build. Artifacts now end up in $(CONFIGURATION)/$(BUILD_MODE)/core/.
For the uVisor APIs build. Artifacts now end up in $(CONFIGURATION)/$(BUILD_MODE)/api/.

The source files in the core and api folders can still have the same name, without generating collisions (an example is benchmark.c in both api/src/ and core/system/src/).
As a bonus, the core and APIs builds are now separated, so in the future one can be changed without affecting the other.
@meriac @Patater @niklas-arm","You mean this one? It's just a renaming made for clarity, doesn't really change functionality. If you want I can move it to the next commit.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,265,2016-06-23T09:44:59Z,2016-06-28T12:12:42Z,2016-06-28T12:12:42Z,MERGED,True,89,35,1,https://github.com/AlessandroA,Build artifacts end up in separate folders,2,[],https://github.com/ARMmbed/uvisor/pull/265,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/265#issuecomment-228034590,"This PR makes sure that build artifacts end up in separate folders from the source files paths.
We have 2 classes of build artifacts:

For the uVisor core build. Artifacts now end up in $(CONFIGURATION)/$(BUILD_MODE)/core/.
For the uVisor APIs build. Artifacts now end up in $(CONFIGURATION)/$(BUILD_MODE)/api/.

The source files in the core and api folders can still have the same name, without generating collisions (an example is benchmark.c in both api/src/ and core/system/src/).
As a bonus, the core and APIs builds are now separated, so in the future one can be changed without affecting the other.
@meriac @Patater @niklas-arm","It wouldn't belong in the next commit, either. I suppose if you renamed your first commit to ""Makefile: Improve clarity"", then it'd be okay. But, it still sort of hides the change from make release to make api_release, which is best happening all in its own commit; being separate makes the change obvious.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,266,2016-06-23T13:42:46Z,2016-06-23T14:01:42Z,2016-06-27T13:35:10Z,MERGED,True,72,41,6,https://github.com/AlessandroA,Fix issues with the ARMv7-M SRAM use and protection,3,[],https://github.com/ARMmbed/uvisor/pull/266,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/266,"The UVISOR_SRAM_LENGTH was ambiguously used to refer to both the
protected and the used SRAM space in uVisor, which lead to some
unexpected behaviours (misalignment errors with the ARMv7-M MPU when
SRAM_OFFSET is non-zero).
This commit clarifies the use of the symbol, by splitting it into 2:

UVISOR_SRAM_LENGTH_PROTECTED is the size of the MPU region that
uVisor protects in SRAM. This region goes from SRAM_ORIGIN to
SRAM_ORIGIN + UVISOR_SRAM_LENGTH_PROTECTED. This means that if
uVisor is placed at an offset in SRAM (SRAM_OFFSET != 0), then the
space SRAM_ORIGIN to SRAM_ORIGIN + SRAM_OFFSET will be
inaccessible to the user code. This is expected, as that range is only
used for the vector table relocation, but it will be clarified anyway
in the porting guide.
UVISOR_SRAM_LENGTH_USED is the SRAM space that will be effectively
used by uVisor. The host linker script will reserve this space, and
the uVisor will verify it at runtime.

Some additional minor changes make sure that there is consistency in the
naming convention:

UVISOR_FLASH_LENGTH has been renamed to UVISOR_FLASH_LENGTH_MAX,
meaning that the size is only an upper bound on the actual uVisor
flash size.
The uVisor linker script has been updated to use these symbols
consistently.
Comments have been added to clarify the symbols meaning.

@meriac @Patater @niklas-arm","The UVISOR_SRAM_LENGTH was ambiguously used to refer to both the
protected and the used SRAM space in uVisor, which lead to some
unexpected behaviours (misalignment errors with the ARMv7-M MPU when
SRAM_OFFSET is non-zero).
This commit clarifies the use of the symbol, by splitting it into 2:

UVISOR_SRAM_LENGTH_PROTECTED is the size of the MPU region that
uVisor protects in SRAM. This region goes from SRAM_ORIGIN to
SRAM_ORIGIN + UVISOR_SRAM_LENGTH_PROTECTED. This means that if
uVisor is placed at an offset in SRAM (SRAM_OFFSET != 0), then the
space SRAM_ORIGIN to SRAM_ORIGIN + SRAM_OFFSET will be
inaccessible to the user code. This is expected, as that range is only
used for the vector table relocation, but it will be clarified anyway
in the porting guide.
UVISOR_SRAM_LENGTH_USED is the SRAM space that will be effectively
used by uVisor. The host linker script will reserve this space, and
the uVisor will verify it at runtime.

Some additional minor changes make sure that there is consistency in the
naming convention:

UVISOR_FLASH_LENGTH has been renamed to UVISOR_FLASH_LENGTH_MAX,
meaning that the size is only an upper bound on the actual uVisor
flash size.
The uVisor linker script has been updated to use these symbols
consistently.
Comments have been added to clarify the symbols meaning.

@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,267,2016-06-23T15:52:41Z,2016-06-27T22:22:34Z,2016-06-27T22:22:34Z,MERGED,True,393,85,11,https://github.com/niklas-arm,Add page heap MPU recovery for K64F,10,[],https://github.com/ARMmbed/uvisor/pull/267,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/267,"This disables access to the page heap and adds on round robin scheduling for access to pages on MPU fault recovery.
cc @meriac @AlessandroA @Patater","This disables access to the page heap and adds on round robin scheduling for access to pages on MPU fault recovery.
cc @meriac @AlessandroA @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,267,2016-06-23T15:52:41Z,2016-06-27T22:22:34Z,2016-06-27T22:22:34Z,MERGED,True,393,85,11,https://github.com/niklas-arm,Add page heap MPU recovery for K64F,10,[],https://github.com/ARMmbed/uvisor/pull/267,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/267#issuecomment-228790522,"This disables access to the page heap and adds on round robin scheduling for access to pages on MPU fault recovery.
cc @meriac @AlessandroA @Patater",Remove periods from the ends of the first line of commit messages.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,267,2016-06-23T15:52:41Z,2016-06-27T22:22:34Z,2016-06-27T22:22:34Z,MERGED,True,393,85,11,https://github.com/niklas-arm,Add page heap MPU recovery for K64F,10,[],https://github.com/ARMmbed/uvisor/pull/267,https://github.com/niklas-arm,3,https://github.com/ARMmbed/uvisor/pull/267#issuecomment-228791017,"This disables access to the page heap and adds on round robin scheduling for access to pages on MPU fault recovery.
cc @meriac @AlessandroA @Patater","Done, I really need a pre-commit hook for this.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,267,2016-06-23T15:52:41Z,2016-06-27T22:22:34Z,2016-06-27T22:22:34Z,MERGED,True,393,85,11,https://github.com/niklas-arm,Add page heap MPU recovery for K64F,10,[],https://github.com/ARMmbed/uvisor/pull/267,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/267#issuecomment-228791400,"This disables access to the page heap and adds on round robin scheduling for access to pages on MPU fault recovery.
cc @meriac @AlessandroA @Patater","LGTM, other than one little style thing",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,269,2016-06-27T23:16:58Z,2016-06-27T23:17:33Z,2016-06-27T23:17:34Z,CLOSED,False,393,85,11,https://github.com/meriac,Feature/secure page heap,10,[],https://github.com/ARMmbed/uvisor/pull/269,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/269,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,270,2016-06-28T10:32:12Z,2016-06-28T12:21:10Z,2016-06-28T12:21:10Z,MERGED,True,9,3,1,https://github.com/niklas-arm,fixup! Add all active pages to MPU regions on switch,1,[],https://github.com/ARMmbed/uvisor/pull/270,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/270,"When switching back to box 0, it's pages also should also be enabled in the switch.
The current code causes a bus fault, which is then recovered just fine, but it is less efficient.
cc @AlessandroA @Patater @meriac","When switching back to box 0, it's pages also should also be enabled in the switch.
The current code causes a bus fault, which is then recovered just fine, but it is less efficient.
cc @AlessandroA @Patater @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,271,2016-06-28T12:36:48Z,2016-06-28T15:02:16Z,2016-06-28T15:02:16Z,MERGED,True,2,1,1,https://github.com/Patater,fixup! Add tier-2 allocator init and wrapper functions,1,[],https://github.com/ARMmbed/uvisor/pull/271,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/271,"Previously, we weren't acquiring the memory mutex if the box_heap was
the active heap. This allowed multiple threads to clobber each other's
memories when the active heap was the box_heap.
@meriac @AlessandroA @niklas-arm","Previously, we weren't acquiring the memory mutex if the box_heap was
the active heap. This allowed multiple threads to clobber each other's
memories when the active heap was the box_heap.
@meriac @AlessandroA @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,271,2016-06-28T12:36:48Z,2016-06-28T15:02:16Z,2016-06-28T15:02:16Z,MERGED,True,2,1,1,https://github.com/Patater,fixup! Add tier-2 allocator init and wrapper functions,1,[],https://github.com/ARMmbed/uvisor/pull/271,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/271#issuecomment-229039300,"Previously, we weren't acquiring the memory mutex if the box_heap was
the active heap. This allowed multiple threads to clobber each other's
memories when the active heap was the box_heap.
@meriac @AlessandroA @niklas-arm",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,271,2016-06-28T12:36:48Z,2016-06-28T15:02:16Z,2016-06-28T15:02:16Z,MERGED,True,2,1,1,https://github.com/Patater,fixup! Add tier-2 allocator init and wrapper functions,1,[],https://github.com/ARMmbed/uvisor/pull/271,https://github.com/niklas-arm,3,https://github.com/ARMmbed/uvisor/pull/271#issuecomment-229046094,"Previously, we weren't acquiring the memory mutex if the box_heap was
the active heap. This allowed multiple threads to clobber each other's
memories when the active heap was the box_heap.
@meriac @AlessandroA @niklas-arm",👍,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,272,2016-06-29T10:24:45Z,2016-07-04T09:37:07Z,2016-07-04T09:37:07Z,MERGED,True,413,0,1,https://github.com/AlessandroA,Docs: Add the quick-start guide,1,[],https://github.com/ARMmbed/uvisor/pull/272,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/272,"This new document is a step-by-step guide to:

Enable uVisor on an existing app.
Add a secure box to the app, and:

Protect static and dynamic memories.
Gain exclusive ownership of peripherals and interrupts.



All the snippets in the guide have been tested with the latest mbed version (using the CLI tools).
Missing:

Instructions on setting an API entry point (using RPC semantics).

@meriac @Patater @niklas-arm","This new document is a step-by-step guide to:

Enable uVisor on an existing app.
Add a secure box to the app, and:

Protect static and dynamic memories.
Gain exclusive ownership of peripherals and interrupts.



All the snippets in the guide have been tested with the latest mbed version (using the CLI tools).
Missing:

Instructions on setting an API entry point (using RPC semantics).

@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,272,2016-06-29T10:24:45Z,2016-07-04T09:37:07Z,2016-07-04T09:37:07Z,MERGED,True,413,0,1,https://github.com/AlessandroA,Docs: Add the quick-start guide,1,[],https://github.com/ARMmbed/uvisor/pull/272,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/272#issuecomment-229319663,"This new document is a step-by-step guide to:

Enable uVisor on an existing app.
Add a secure box to the app, and:

Protect static and dynamic memories.
Gain exclusive ownership of peripherals and interrupts.



All the snippets in the guide have been tested with the latest mbed version (using the CLI tools).
Missing:

Instructions on setting an API entry point (using RPC semantics).

@meriac @Patater @niklas-arm","Note to reviewers:
Use this link to review rendered markdown https://github.com/AlessandroA/uvisor/blob/add_quickstart_guide/docs/QUICKSTART.md",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,272,2016-06-29T10:24:45Z,2016-07-04T09:37:07Z,2016-07-04T09:37:07Z,MERGED,True,413,0,1,https://github.com/AlessandroA,Docs: Add the quick-start guide,1,[],https://github.com/ARMmbed/uvisor/pull/272,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/272#issuecomment-229336641,"This new document is a step-by-step guide to:

Enable uVisor on an existing app.
Add a secure box to the app, and:

Protect static and dynamic memories.
Gain exclusive ownership of peripherals and interrupts.



All the snippets in the guide have been tested with the latest mbed version (using the CLI tools).
Missing:

Instructions on setting an API entry point (using RPC semantics).

@meriac @Patater @niklas-arm","Very nice work. The guide is quite readable and has a good narrative; it doesn't jump around too much. I could follow along pretty easily.
Most of my comments (especially for re-ordering things) are recommendations to improve clarity and technical accuracy (without compromising the ease of understanding, as technically accurate documents often do).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,272,2016-06-29T10:24:45Z,2016-07-04T09:37:07Z,2016-07-04T09:37:07Z,MERGED,True,413,0,1,https://github.com/AlessandroA,Docs: Add the quick-start guide,1,[],https://github.com/ARMmbed/uvisor/pull/272,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/272#issuecomment-229619900,"This new document is a step-by-step guide to:

Enable uVisor on an existing app.
Add a secure box to the app, and:

Protect static and dynamic memories.
Gain exclusive ownership of peripherals and interrupts.



All the snippets in the guide have been tested with the latest mbed version (using the CLI tools).
Missing:

Instructions on setting an API entry point (using RPC semantics).

@meriac @Patater @niklas-arm","All comments from @Patater should now be addressed. The following are still an open question:

uVisor vs. The uVisor.
main box vs. legacy box.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,273,2016-06-29T15:21:37Z,2016-07-06T08:19:50Z,2016-07-06T08:19:50Z,MERGED,True,74,26,4,https://github.com/niklas-arm,Use bitmaps to map page ownership to box id.,1,[],https://github.com/ARMmbed/uvisor/pull/273,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/273,"This changes the page owner table to a page owner bitmap. This allows
to query the ownership of a page in O(1), rather than linear search, and
makes it possible to OR together box 0 and active box page bitmap to get
the active pages in O(1).
This is a preparation for porting the page allocator protection to the ARMv7-M MPU.
By storing the ownership information in a bitmap, it makes using the MPU subregions much easier (literally just masking the right 8 bits).
This has been tested on K64F without any failures.
cc @meriac @AlessandroA @Patater","This changes the page owner table to a page owner bitmap. This allows
to query the ownership of a page in O(1), rather than linear search, and
makes it possible to OR together box 0 and active box page bitmap to get
the active pages in O(1).
This is a preparation for porting the page allocator protection to the ARMv7-M MPU.
By storing the ownership information in a bitmap, it makes using the MPU subregions much easier (literally just masking the right 8 bits).
This has been tested on K64F without any failures.
cc @meriac @AlessandroA @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,274,2016-06-30T10:11:09Z,2016-06-30T12:58:02Z,2016-06-30T12:58:02Z,MERGED,True,86,5,2,https://github.com/AlessandroA,K64F vMPU: Use the MPU fault address,1,[],https://github.com/ARMmbed/uvisor/pull/274,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/274,"When recovering from an MPU fault on K64F, we were using the bus fault
syndrome register. This register does not contain a valid address when
the bus fault is imprecise.
On the other hand, the syndrome register for the MPU module always
contains a valid register when an MPU fault occur.
This commit introduces 2 inline APIs to fetch and clear the fault
status for a given slave port, and uses them to recover from a potential
MPU fault.
This fixes a bug found in release builds of our blinky example, where
some faults were imprecise.
@meriac @niklas-arm @Patater","When recovering from an MPU fault on K64F, we were using the bus fault
syndrome register. This register does not contain a valid address when
the bus fault is imprecise.
On the other hand, the syndrome register for the MPU module always
contains a valid register when an MPU fault occur.
This commit introduces 2 inline APIs to fetch and clear the fault
status for a given slave port, and uses them to recover from a potential
MPU fault.
This fixes a bug found in release builds of our blinky example, where
some faults were imprecise.
@meriac @niklas-arm @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,274,2016-06-30T10:11:09Z,2016-06-30T12:58:02Z,2016-06-30T12:58:02Z,MERGED,True,86,5,2,https://github.com/AlessandroA,K64F vMPU: Use the MPU fault address,1,[],https://github.com/ARMmbed/uvisor/pull/274,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/274#issuecomment-229622949,"When recovering from an MPU fault on K64F, we were using the bus fault
syndrome register. This register does not contain a valid address when
the bus fault is imprecise.
On the other hand, the syndrome register for the MPU module always
contains a valid register when an MPU fault occur.
This commit introduces 2 inline APIs to fetch and clear the fault
status for a given slave port, and uses them to recover from a potential
MPU fault.
This fixes a bug found in release builds of our blinky example, where
some faults were imprecise.
@meriac @niklas-arm @Patater",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,274,2016-06-30T10:11:09Z,2016-06-30T12:58:02Z,2016-06-30T12:58:02Z,MERGED,True,86,5,2,https://github.com/AlessandroA,K64F vMPU: Use the MPU fault address,1,[],https://github.com/ARMmbed/uvisor/pull/274,https://github.com/niklas-arm,3,https://github.com/ARMmbed/uvisor/pull/274#issuecomment-229624988,"When recovering from an MPU fault on K64F, we were using the bus fault
syndrome register. This register does not contain a valid address when
the bus fault is imprecise.
On the other hand, the syndrome register for the MPU module always
contains a valid register when an MPU fault occur.
This commit introduces 2 inline APIs to fetch and clear the fault
status for a given slave port, and uses them to recover from a potential
MPU fault.
This fixes a bug found in release builds of our blinky example, where
some faults were imprecise.
@meriac @niklas-arm @Patater",👍,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,275,2016-06-30T11:03:35Z,2016-07-04T09:38:03Z,2016-07-04T09:38:03Z,MERGED,True,513,0,1,https://github.com/AlessandroA,Docs: Add the API documentation,1,[],https://github.com/ARMmbed/uvisor/pull/275,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/275,"Note: This file is only a copy from what was originally in
ARMmbed/uvisor-lib.
Only the ""Secure gateway"" section has been removed, as deprecated. Other
sections still need polishing or minor updates: They have not been modified yet (not high priority now).","Note: This file is only a copy from what was originally in
ARMmbed/uvisor-lib.
Only the ""Secure gateway"" section has been removed, as deprecated. Other
sections still need polishing or minor updates: They have not been modified yet (not high priority now).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,276,2016-07-05T12:16:28Z,2016-07-06T08:22:47Z,2016-07-06T08:22:48Z,MERGED,True,15,16,1,https://github.com/AlessandroA,Docs: Fix inconsistencies in the porting guide,1,[],https://github.com/ARMmbed/uvisor/pull/276,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/276,"Add missing steps (run in debug mode, add the ACLs for your platform).
Remove bugs in the linker script template.

@meriac","Add missing steps (run in debug mode, add the ACLs for your platform).
Remove bugs in the linker script template.

@meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,277,2016-07-05T16:25:11Z,2016-07-06T08:24:34Z,2016-07-06T08:24:34Z,MERGED,True,39,34,1,https://github.com/AlessandroA,Docs: Update the developing locally guide,1,[],https://github.com/ARMmbed/uvisor/pull/277,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/277,"The guide now features the new mbed OS commands.
@meriac","The guide now features the new mbed OS commands.
@meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,278,2016-07-05T16:33:57Z,2016-07-11T11:00:08Z,2016-07-11T11:00:09Z,MERGED,True,26,3,2,https://github.com/AlessandroA,ARMv7-M MPU: Use subregions to blacklist the uVisor memories,2,[],https://github.com/ARMmbed/uvisor/pull/278,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/278,"When uVisor shares its memories with the host OS we need to first open a region (1) for the whole SRAM and then close a region (2) for the uVisor.
Issue: If the uVisor SRAM sections are located at an offset in SRAM (due to VTOR relocation), then the .uvisor.bss section is not aligned any more to a valid MPU boundary.
Solution: This PR ensures that region (2) is padded to a valid MPU subregion boundary. The change requires a linker script addition that has been documented in the porting guide. The side effect is that we also waste less memory now by using subregions instead of whole regions.
Note: This code might be soon superseded by the work @niklas-arm is doing to improve the page allocator protection. I would still like to include this fix as it applies to other existing targets (cc @fvincenzo) and because it fixes an existing bug.
@meriac @Patater @niklas-arm","When uVisor shares its memories with the host OS we need to first open a region (1) for the whole SRAM and then close a region (2) for the uVisor.
Issue: If the uVisor SRAM sections are located at an offset in SRAM (due to VTOR relocation), then the .uvisor.bss section is not aligned any more to a valid MPU boundary.
Solution: This PR ensures that region (2) is padded to a valid MPU subregion boundary. The change requires a linker script addition that has been documented in the porting guide. The side effect is that we also waste less memory now by using subregions instead of whole regions.
Note: This code might be soon superseded by the work @niklas-arm is doing to improve the page allocator protection. I would still like to include this fix as it applies to other existing targets (cc @fvincenzo) and because it fixes an existing bug.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,279,2016-07-05T16:55:34Z,2016-07-05T16:55:44Z,2016-07-05T16:55:44Z,CLOSED,False,5112,1322,77,https://github.com/niklas-arm,Require explicit declaration of page heap sizes,85,[],https://github.com/ARMmbed/uvisor/pull/279,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/279,"This removes the global UVISOR_PAGE_SIZE define and instead introduces
the uvisor_get_page_size() getter function to retrieve the page size
for the tier-2 allocator.
The user is now required to declare the minimum page size by explicitly
stating the required page size and the minimum number of pages in the
heap. This allows applications to specify their requirements, which can
then be checked by linker which raises an error if not enough memory
for the page heap is available.
Note: This fixes a bug where the __uvisor_page_size was not declared as weak and there could not be changed.
cc @meriac @AlessandroA @Patater","This removes the global UVISOR_PAGE_SIZE define and instead introduces
the uvisor_get_page_size() getter function to retrieve the page size
for the tier-2 allocator.
The user is now required to declare the minimum page size by explicitly
stating the required page size and the minimum number of pages in the
heap. This allows applications to specify their requirements, which can
then be checked by linker which raises an error if not enough memory
for the page heap is available.
Note: This fixes a bug where the __uvisor_page_size was not declared as weak and there could not be changed.
cc @meriac @AlessandroA @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,280,2016-07-05T16:56:11Z,2016-07-07T15:43:02Z,2016-07-07T15:43:02Z,MERGED,True,26,29,6,https://github.com/niklas-arm,Require explicit declaration of page heap sizes,1,[],https://github.com/ARMmbed/uvisor/pull/280,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/280,"This removes the global UVISOR_PAGE_SIZE define and instead introduces
the uvisor_get_page_size() getter function to retrieve the page size
for the tier-2 allocator.
The user is now required to declare the minimum page size by explicitly
stating the required page size and the minimum number of pages in the
heap. This allows applications to specify their requirements, which can
then be checked by linker which raises an error if not enough memory
for the page heap is available.
Note: This fixes a bug where the __uvisor_page_size was not declared weak and there could not be changed.
cc @meriac @AlessandroA @Patater","This removes the global UVISOR_PAGE_SIZE define and instead introduces
the uvisor_get_page_size() getter function to retrieve the page size
for the tier-2 allocator.
The user is now required to declare the minimum page size by explicitly
stating the required page size and the minimum number of pages in the
heap. This allows applications to specify their requirements, which can
then be checked by linker which raises an error if not enough memory
for the page heap is available.
Note: This fixes a bug where the __uvisor_page_size was not declared weak and there could not be changed.
cc @meriac @AlessandroA @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,281,2016-07-06T16:27:27Z,2016-07-07T15:42:15Z,2016-07-07T15:42:15Z,MERGED,True,3,0,1,https://github.com/AlessandroA,ARMv7-M MPU: Halt on a non-recoverable fault,1,[],https://github.com/ARMmbed/uvisor/pull/281,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/281,"Faults were being returned from in the ARMv7-M vMPU module, which led
to very ambiguous debug sessions.
@meriac @Patater @niklas-arm","Faults were being returned from in the ARMv7-M vMPU module, which led
to very ambiguous debug sessions.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,281,2016-07-06T16:27:27Z,2016-07-07T15:42:15Z,2016-07-07T15:42:15Z,MERGED,True,3,0,1,https://github.com/AlessandroA,ARMv7-M MPU: Halt on a non-recoverable fault,1,[],https://github.com/ARMmbed/uvisor/pull/281,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/281#issuecomment-231015383,"Faults were being returned from in the ARMv7-M vMPU module, which led
to very ambiguous debug sessions.
@meriac @Patater @niklas-arm",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,282,2016-07-08T08:32:17Z,2016-07-08T09:13:50Z,2016-07-08T09:13:50Z,MERGED,True,5,1,1,https://github.com/AlessandroA,ARMv7-M MPU: Fix the disablement of an MPU region,1,[],https://github.com/ARMmbed/uvisor/pull/282,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/282,"When an enabled MPU region needs to be disabled, the first thing to do
is turn it off.
If any other region descriptor (address, access attributes) is changed
before disablement, the behaviour of the system might be compromised.
A common example is the following:

Given this originally enabled region:

Start: 0x42000000
Size:  0x2000000
Attributes: XN, S r/w, U r/w


If you now disable it with the following procedure:

/* 1 */ MPU->RBAR = mpu_slot | MPU_RBAR_VALID_Msk;
/* 2 */ MPU->RASR = 0;

You will have the following ""temporary"" MPU configuration:

*** Before line 1 ***
Start: 0x42000000
Size:  0x2000000
Attributes: XN, S r/w, U r/w

*** After line 1 ***
Start: 0x0                         !!! Caused by the write to RBAR
Size:  0x2000000
Attributes: XN, S r/w, U r/w

*** After line 2 ***
---> MemManage fault, caused by the code being in the range
     (0x0, 0x2000000) with attribute XN.


Solution: Use the pattern ""select, disable, erase"":
MPU->RNR = mpu_slot;
MPU->RASR = 0;
MPU->RBAR = 0;
In this way the MPU region is selected (no change to the region itself),
disabled, and then cleared to zero.
@meriac @niklas-arm @Patater
@niklas-arm Please keep this fix in mind in your work to unify the MPU interface.","When an enabled MPU region needs to be disabled, the first thing to do
is turn it off.
If any other region descriptor (address, access attributes) is changed
before disablement, the behaviour of the system might be compromised.
A common example is the following:

Given this originally enabled region:

Start: 0x42000000
Size:  0x2000000
Attributes: XN, S r/w, U r/w


If you now disable it with the following procedure:

/* 1 */ MPU->RBAR = mpu_slot | MPU_RBAR_VALID_Msk;
/* 2 */ MPU->RASR = 0;

You will have the following ""temporary"" MPU configuration:

*** Before line 1 ***
Start: 0x42000000
Size:  0x2000000
Attributes: XN, S r/w, U r/w

*** After line 1 ***
Start: 0x0                         !!! Caused by the write to RBAR
Size:  0x2000000
Attributes: XN, S r/w, U r/w

*** After line 2 ***
---> MemManage fault, caused by the code being in the range
     (0x0, 0x2000000) with attribute XN.


Solution: Use the pattern ""select, disable, erase"":
MPU->RNR = mpu_slot;
MPU->RASR = 0;
MPU->RBAR = 0;
In this way the MPU region is selected (no change to the region itself),
disabled, and then cleared to zero.
@meriac @niklas-arm @Patater
@niklas-arm Please keep this fix in mind in your work to unify the MPU interface.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,282,2016-07-08T08:32:17Z,2016-07-08T09:13:50Z,2016-07-08T09:13:50Z,MERGED,True,5,1,1,https://github.com/AlessandroA,ARMv7-M MPU: Fix the disablement of an MPU region,1,[],https://github.com/ARMmbed/uvisor/pull/282,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/282#issuecomment-231312935,"When an enabled MPU region needs to be disabled, the first thing to do
is turn it off.
If any other region descriptor (address, access attributes) is changed
before disablement, the behaviour of the system might be compromised.
A common example is the following:

Given this originally enabled region:

Start: 0x42000000
Size:  0x2000000
Attributes: XN, S r/w, U r/w


If you now disable it with the following procedure:

/* 1 */ MPU->RBAR = mpu_slot | MPU_RBAR_VALID_Msk;
/* 2 */ MPU->RASR = 0;

You will have the following ""temporary"" MPU configuration:

*** Before line 1 ***
Start: 0x42000000
Size:  0x2000000
Attributes: XN, S r/w, U r/w

*** After line 1 ***
Start: 0x0                         !!! Caused by the write to RBAR
Size:  0x2000000
Attributes: XN, S r/w, U r/w

*** After line 2 ***
---> MemManage fault, caused by the code being in the range
     (0x0, 0x2000000) with attribute XN.


Solution: Use the pattern ""select, disable, erase"":
MPU->RNR = mpu_slot;
MPU->RASR = 0;
MPU->RBAR = 0;
In this way the MPU region is selected (no change to the region itself),
disabled, and then cleared to zero.
@meriac @niklas-arm @Patater
@niklas-arm Please keep this fix in mind in your work to unify the MPU interface.",@meriac Updated,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,283,2016-07-12T13:24:04Z,2016-07-27T09:09:52Z,2016-07-27T09:09:52Z,MERGED,True,95,0,1,https://github.com/Patater,Add initial clang-format file,1,[],https://github.com/ARMmbed/uvisor/pull/283,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/283,"This file attempts to describe our coding standard in a way that
clang-format understands. It isn't perfect yet, but it is a nice
starting point.
See http://clang.llvm.org/docs/ClangFormat.html for usage
instructions, including how to integrate clang-format with your favorite
text editor.
@AlessandroA @niklas-arm @meriac","This file attempts to describe our coding standard in a way that
clang-format understands. It isn't perfect yet, but it is a nice
starting point.
See http://clang.llvm.org/docs/ClangFormat.html for usage
instructions, including how to integrate clang-format with your favorite
text editor.
@AlessandroA @niklas-arm @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,283,2016-07-12T13:24:04Z,2016-07-27T09:09:52Z,2016-07-27T09:09:52Z,MERGED,True,95,0,1,https://github.com/Patater,Add initial clang-format file,1,[],https://github.com/ARMmbed/uvisor/pull/283,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/283#issuecomment-232054955,"This file attempts to describe our coding standard in a way that
clang-format understands. It isn't perfect yet, but it is a nice
starting point.
See http://clang.llvm.org/docs/ClangFormat.html for usage
instructions, including how to integrate clang-format with your favorite
text editor.
@AlessandroA @niklas-arm @meriac","Thanks! I think it's a great start, I've been using it lately. Could you add here (in the PR description and in the commit description) a one-line how-to to use it on a particular file/set of files?
When the file is mature enough we can think of ways to hook it in the contribution process or in the build process.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,283,2016-07-12T13:24:04Z,2016-07-27T09:09:52Z,2016-07-27T09:09:52Z,MERGED,True,95,0,1,https://github.com/Patater,Add initial clang-format file,1,[],https://github.com/ARMmbed/uvisor/pull/283,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/283#issuecomment-232055787,"This file attempts to describe our coding standard in a way that
clang-format understands. It isn't perfect yet, but it is a nice
starting point.
See http://clang.llvm.org/docs/ClangFormat.html for usage
instructions, including how to integrate clang-format with your favorite
text editor.
@AlessandroA @niklas-arm @meriac",Updated commit description to point to clang-format documentation,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,283,2016-07-12T13:24:04Z,2016-07-27T09:09:52Z,2016-07-27T09:09:52Z,MERGED,True,95,0,1,https://github.com/Patater,Add initial clang-format file,1,[],https://github.com/ARMmbed/uvisor/pull/283,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/283#issuecomment-232056305,"This file attempts to describe our coding standard in a way that
clang-format understands. It isn't perfect yet, but it is a nice
starting point.
See http://clang.llvm.org/docs/ClangFormat.html for usage
instructions, including how to integrate clang-format with your favorite
text editor.
@AlessandroA @niklas-arm @meriac","I've been using clang-format with my text editor to, from time to time, auto-format highlighted blocks of code.
I wouldn't recommend forcing all code to conform to this clang-format style (for instance, by blocking git commits that violate this style). The style file is not mature enough.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,283,2016-07-12T13:24:04Z,2016-07-27T09:09:52Z,2016-07-27T09:09:52Z,MERGED,True,95,0,1,https://github.com/Patater,Add initial clang-format file,1,[],https://github.com/ARMmbed/uvisor/pull/283,https://github.com/meriac,5,https://github.com/ARMmbed/uvisor/pull/283#issuecomment-235002832,"This file attempts to describe our coding standard in a way that
clang-format understands. It isn't perfect yet, but it is a nice
starting point.
See http://clang.llvm.org/docs/ClangFormat.html for usage
instructions, including how to integrate clang-format with your favorite
text editor.
@AlessandroA @niklas-arm @meriac",@Patater : please rebase,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,283,2016-07-12T13:24:04Z,2016-07-27T09:09:52Z,2016-07-27T09:09:52Z,MERGED,True,95,0,1,https://github.com/Patater,Add initial clang-format file,1,[],https://github.com/ARMmbed/uvisor/pull/283,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/283#issuecomment-235006134,"This file attempts to describe our coding standard in a way that
clang-format understands. It isn't perfect yet, but it is a nice
starting point.
See http://clang.llvm.org/docs/ClangFormat.html for usage
instructions, including how to integrate clang-format with your favorite
text editor.
@AlessandroA @niklas-arm @meriac",@meriac: Rebased,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,284,2016-07-12T14:27:13Z,2016-07-18T15:38:56Z,2016-07-18T15:38:57Z,MERGED,True,18,12,1,https://github.com/AlessandroA,Fix 2 ARMv7-M vMPU bugs,3,[],https://github.com/ARMmbed/uvisor/pull/284,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/284,"This PR fixes 2 bugs:

The box 0 ACLs (which are shared by default) were never used when handling a fault coming from g_active_box != 0.
The stack ACL for g_active_box !=0 was overwritten in the round-robin ACL application, which turns out to be a bug in a special case.

You can read more about the bugs and their fixes in the related commit messages.
@meriac @Patater @niklas-arm","This PR fixes 2 bugs:

The box 0 ACLs (which are shared by default) were never used when handling a fault coming from g_active_box != 0.
The stack ACL for g_active_box !=0 was overwritten in the round-robin ACL application, which turns out to be a bug in a special case.

You can read more about the bugs and their fixes in the related commit messages.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,284,2016-07-12T14:27:13Z,2016-07-18T15:38:56Z,2016-07-18T15:38:57Z,MERGED,True,18,12,1,https://github.com/AlessandroA,Fix 2 ARMv7-M vMPU bugs,3,[],https://github.com/ARMmbed/uvisor/pull/284,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/284#issuecomment-232070024,"This PR fixes 2 bugs:

The box 0 ACLs (which are shared by default) were never used when handling a fault coming from g_active_box != 0.
The stack ACL for g_active_box !=0 was overwritten in the round-robin ACL application, which turns out to be a bug in a special case.

You can read more about the bugs and their fixes in the related commit messages.
@meriac @Patater @niklas-arm",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,285,2016-07-12T17:55:07Z,2016-07-19T12:17:25Z,2016-07-19T12:17:25Z,CLOSED,False,382,8,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/285,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/285,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
Please give a thorough review. This PR targets unstable, but is intended to be dev-branch quality, with the exception of the reliance on the Dummy-implement rpc_fncall and fpc_fncall_async commit, and with the exception that we don't yet have a complete end-to-end prototype to verify this design as implemented.
Note that this enables building uvisor-lib out of C++ files, if we so desire. We don't have a need for that yet, as the dummy RPC implementation in this PR could be in C, but I anticipate we might want to use C++ in implementing some portion of RPC. If it's a requirement that uvisor-lib must never use C++ ever, then we can easily drop those commits and reimplement the RPC dummy in C.
@AlessandroA @niklas-arm @meriac","Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
Please give a thorough review. This PR targets unstable, but is intended to be dev-branch quality, with the exception of the reliance on the Dummy-implement rpc_fncall and fpc_fncall_async commit, and with the exception that we don't yet have a complete end-to-end prototype to verify this design as implemented.
Note that this enables building uvisor-lib out of C++ files, if we so desire. We don't have a need for that yet, as the dummy RPC implementation in this PR could be in C, but I anticipate we might want to use C++ in implementing some portion of RPC. If it's a requirement that uvisor-lib must never use C++ ever, then we can easily drop those commits and reimplement the RPC dummy in C.
@AlessandroA @niklas-arm @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,285,2016-07-12T17:55:07Z,2016-07-19T12:17:25Z,2016-07-19T12:17:25Z,CLOSED,False,382,8,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/285,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/285#issuecomment-233583913,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
Please give a thorough review. This PR targets unstable, but is intended to be dev-branch quality, with the exception of the reliance on the Dummy-implement rpc_fncall and fpc_fncall_async commit, and with the exception that we don't yet have a complete end-to-end prototype to verify this design as implemented.
Note that this enables building uvisor-lib out of C++ files, if we so desire. We don't have a need for that yet, as the dummy RPC implementation in this PR could be in C, but I anticipate we might want to use C++ in implementing some portion of RPC. If it's a requirement that uvisor-lib must never use C++ ever, then we can easily drop those commits and reimplement the RPC dummy in C.
@AlessandroA @niklas-arm @meriac",The docs for UVISOR_BOX_RPC_MAXIMUM_INCOMING_RPC are missing right?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,285,2016-07-12T17:55:07Z,2016-07-19T12:17:25Z,2016-07-19T12:17:25Z,CLOSED,False,382,8,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/285,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/285#issuecomment-233586530,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
Please give a thorough review. This PR targets unstable, but is intended to be dev-branch quality, with the exception of the reliance on the Dummy-implement rpc_fncall and fpc_fncall_async commit, and with the exception that we don't yet have a complete end-to-end prototype to verify this design as implemented.
Note that this enables building uvisor-lib out of C++ files, if we so desire. We don't have a need for that yet, as the dummy RPC implementation in this PR could be in C, but I anticipate we might want to use C++ in implementing some portion of RPC. If it's a requirement that uvisor-lib must never use C++ ever, then we can easily drop those commits and reimplement the RPC dummy in C.
@AlessandroA @niklas-arm @meriac","The docs for UVISOR_BOX_RPC_MAXIMUM_INCOMING_RPC are in the ""Limiting the maximum number of incoming RPC messages"" section of uvisor-rtos-docs. Did you want something more added in that section?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,285,2016-07-12T17:55:07Z,2016-07-19T12:17:25Z,2016-07-19T12:17:25Z,CLOSED,False,382,8,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/285,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/285#issuecomment-233587029,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
Please give a thorough review. This PR targets unstable, but is intended to be dev-branch quality, with the exception of the reliance on the Dummy-implement rpc_fncall and fpc_fncall_async commit, and with the exception that we don't yet have a complete end-to-end prototype to verify this design as implemented.
Note that this enables building uvisor-lib out of C++ files, if we so desire. We don't have a need for that yet, as the dummy RPC implementation in this PR could be in C, but I anticipate we might want to use C++ in implementing some portion of RPC. If it's a requirement that uvisor-lib must never use C++ ever, then we can easily drop those commits and reimplement the RPC dummy in C.
@AlessandroA @niklas-arm @meriac","Sorry my mistake, I meant the header file. I couldn't find that API here. It should be in the user-facing RPC header (or in the box-config one, up to us).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,285,2016-07-12T17:55:07Z,2016-07-19T12:17:25Z,2016-07-19T12:17:25Z,CLOSED,False,382,8,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/285,https://github.com/Patater,5,https://github.com/ARMmbed/uvisor/pull/285#issuecomment-233588389,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
Please give a thorough review. This PR targets unstable, but is intended to be dev-branch quality, with the exception of the reliance on the Dummy-implement rpc_fncall and fpc_fncall_async commit, and with the exception that we don't yet have a complete end-to-end prototype to verify this design as implemented.
Note that this enables building uvisor-lib out of C++ files, if we so desire. We don't have a need for that yet, as the dummy RPC implementation in this PR could be in C, but I anticipate we might want to use C++ in implementing some portion of RPC. If it's a requirement that uvisor-lib must never use C++ ever, then we can easily drop those commits and reimplement the RPC dummy in C.
@AlessandroA @niklas-arm @meriac","Ah, UVISOR_BOX_RPC_MAXIMUM_INCOMING_RPC isn't part of this PR. It isn't necessary that UVISOR_BOX_RPC_MAXIMUM_INCOMING_RPC be implemented for the gateways to work.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,285,2016-07-12T17:55:07Z,2016-07-19T12:17:25Z,2016-07-19T12:17:25Z,CLOSED,False,382,8,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/285,https://github.com/AlessandroA,6,https://github.com/ARMmbed/uvisor/pull/285#issuecomment-233589245,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
Please give a thorough review. This PR targets unstable, but is intended to be dev-branch quality, with the exception of the reliance on the Dummy-implement rpc_fncall and fpc_fncall_async commit, and with the exception that we don't yet have a complete end-to-end prototype to verify this design as implemented.
Note that this enables building uvisor-lib out of C++ files, if we so desire. We don't have a need for that yet, as the dummy RPC implementation in this PR could be in C, but I anticipate we might want to use C++ in implementing some portion of RPC. If it's a requirement that uvisor-lib must never use C++ ever, then we can easily drop those commits and reimplement the RPC dummy in C.
@AlessandroA @niklas-arm @meriac","True, but I'd like to deliver for today the whole set of user-facing APIs, which also include this one. If we manage to review and merge this PR by the end of today, the API signatures will be merged into master! 😃",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,285,2016-07-12T17:55:07Z,2016-07-19T12:17:25Z,2016-07-19T12:17:25Z,CLOSED,False,382,8,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/285,https://github.com/Patater,7,https://github.com/ARMmbed/uvisor/pull/285#issuecomment-233591025,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
Please give a thorough review. This PR targets unstable, but is intended to be dev-branch quality, with the exception of the reliance on the Dummy-implement rpc_fncall and fpc_fncall_async commit, and with the exception that we don't yet have a complete end-to-end prototype to verify this design as implemented.
Note that this enables building uvisor-lib out of C++ files, if we so desire. We don't have a need for that yet, as the dummy RPC implementation in this PR could be in C, but I anticipate we might want to use C++ in implementing some portion of RPC. If it's a requirement that uvisor-lib must never use C++ ever, then we can easily drop those commits and reimplement the RPC dummy in C.
@AlessandroA @niklas-arm @meriac",I'm not so comfortable merging this work to master yet. dev would be okay.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,285,2016-07-12T17:55:07Z,2016-07-19T12:17:25Z,2016-07-19T12:17:25Z,CLOSED,False,382,8,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/285,https://github.com/AlessandroA,8,https://github.com/ARMmbed/uvisor/pull/285#issuecomment-233591451,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
Please give a thorough review. This PR targets unstable, but is intended to be dev-branch quality, with the exception of the reliance on the Dummy-implement rpc_fncall and fpc_fncall_async commit, and with the exception that we don't yet have a complete end-to-end prototype to verify this design as implemented.
Note that this enables building uvisor-lib out of C++ files, if we so desire. We don't have a need for that yet, as the dummy RPC implementation in this PR could be in C, but I anticipate we might want to use C++ in implementing some portion of RPC. If it's a requirement that uvisor-lib must never use C++ ever, then we can easily drop those commits and reimplement the RPC dummy in C.
@AlessandroA @niklas-arm @meriac","But it's just API signatures right? No implementation. We need to be confident about these APIs as they are anyway part of the public release (which will point to master). It's fine if those API will change slightly in the future, although of course we're trying to get them right from the beginning  😉",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,285,2016-07-12T17:55:07Z,2016-07-19T12:17:25Z,2016-07-19T12:17:25Z,CLOSED,False,382,8,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/285,https://github.com/Patater,9,https://github.com/ARMmbed/uvisor/pull/285#issuecomment-233594365,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
Please give a thorough review. This PR targets unstable, but is intended to be dev-branch quality, with the exception of the reliance on the Dummy-implement rpc_fncall and fpc_fncall_async commit, and with the exception that we don't yet have a complete end-to-end prototype to verify this design as implemented.
Note that this enables building uvisor-lib out of C++ files, if we so desire. We don't have a need for that yet, as the dummy RPC implementation in this PR could be in C, but I anticipate we might want to use C++ in implementing some portion of RPC. If it's a requirement that uvisor-lib must never use C++ ever, then we can easily drop those commits and reimplement the RPC dummy in C.
@AlessandroA @niklas-arm @meriac","There may be other changes we want to make to the APIs as we progress with implementation. These APIs are not 100% ready for the release, and not ready to be committed to master, until that implementation work is complete.
There are also commits I still want to rebase before they become unrebasable. Specifically, I'd like to have the real implementation of the dummies (instead of the dummy implementation) in history in a sane progression.
I dummy-implemented the UVISOR_BOX_RPC_MAXIMUM_INCOMING_RPC macro in rpc.h in a new commit.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,285,2016-07-12T17:55:07Z,2016-07-19T12:17:25Z,2016-07-19T12:17:25Z,CLOSED,False,382,8,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/285,https://github.com/Patater,10,https://github.com/ARMmbed/uvisor/pull/285#issuecomment-233614401,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
Please give a thorough review. This PR targets unstable, but is intended to be dev-branch quality, with the exception of the reliance on the Dummy-implement rpc_fncall and fpc_fncall_async commit, and with the exception that we don't yet have a complete end-to-end prototype to verify this design as implemented.
Note that this enables building uvisor-lib out of C++ files, if we so desire. We don't have a need for that yet, as the dummy RPC implementation in this PR could be in C, but I anticipate we might want to use C++ in implementing some portion of RPC. If it's a requirement that uvisor-lib must never use C++ ever, then we can easily drop those commits and reimplement the RPC dummy in C.
@AlessandroA @niklas-arm @meriac",Closing this PR to re-open another against dev instead of against unstable.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,286,2016-07-18T12:56:34Z,2016-08-17T10:33:42Z,2016-08-17T10:33:42Z,CLOSED,False,475,158,13,https://github.com/niklas-arm,Port page heap access switching to ARMv7-M MPU,9,"[""don't merge yet""]",https://github.com/ARMmbed/uvisor/pull/286,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/286,"This adds the necessary changes to use subregions to access the page heap.
Changes include accessing the page owner bitmap efficiently to map it directly to MPU subregions and moving the page heap to behind the uVisor .bss section and aligning it's end with a subregion of the SRAM access region.
Note: This builds on #284 and cherry-picks #280 and #273 from unstable to dev.
cc @AlessandroA @meriac @Patater","This adds the necessary changes to use subregions to access the page heap.
Changes include accessing the page owner bitmap efficiently to map it directly to MPU subregions and moving the page heap to behind the uVisor .bss section and aligning it's end with a subregion of the SRAM access region.
Note: This builds on #284 and cherry-picks #280 and #273 from unstable to dev.
cc @AlessandroA @meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,286,2016-07-18T12:56:34Z,2016-08-17T10:33:42Z,2016-08-17T10:33:42Z,CLOSED,False,475,158,13,https://github.com/niklas-arm,Port page heap access switching to ARMv7-M MPU,9,"[""don't merge yet""]",https://github.com/ARMmbed/uvisor/pull/286,https://github.com/niklas-arm,2,https://github.com/ARMmbed/uvisor/pull/286#issuecomment-240374613,"This adds the necessary changes to use subregions to access the page heap.
Changes include accessing the page owner bitmap efficiently to map it directly to MPU subregions and moving the page heap to behind the uVisor .bss section and aligning it's end with a subregion of the SRAM access region.
Note: This builds on #284 and cherry-picks #280 and #273 from unstable to dev.
cc @AlessandroA @meriac @Patater","Closed in favor of #294, since it includes all these changes.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,287,2016-07-19T12:23:36Z,2016-07-20T09:53:32Z,2016-07-20T09:53:32Z,MERGED,True,381,4,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/287,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/287,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
This PR targets dev. However, we don't yet have a complete end-to-end prototype to verify this design. Changes could be made to the API as a result of further development.
@AlessandroA @niklas-arm @meriac","Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
This PR targets dev. However, we don't yet have a complete end-to-end prototype to verify this design. Changes could be made to the API as a result of further development.
@AlessandroA @niklas-arm @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,287,2016-07-19T12:23:36Z,2016-07-20T09:53:32Z,2016-07-20T09:53:32Z,MERGED,True,381,4,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/287,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/287#issuecomment-233617543,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
This PR targets dev. However, we don't yet have a complete end-to-end prototype to verify this design. Changes could be made to the API as a result of further development.
@AlessandroA @niklas-arm @meriac",I dropped the uvisor-lib: Enable building of C++ files commit because we don't need it yet. I'll add it to whatever PR ends up actually needing it.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,287,2016-07-19T12:23:36Z,2016-07-20T09:53:32Z,2016-07-20T09:53:32Z,MERGED,True,381,4,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/287,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/287#issuecomment-233618986,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
This PR targets dev. However, we don't yet have a complete end-to-end prototype to verify this design. Changes could be made to the API as a result of further development.
@AlessandroA @niklas-arm @meriac",@meriac Ready for review!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,287,2016-07-19T12:23:36Z,2016-07-20T09:53:32Z,2016-07-20T09:53:32Z,MERGED,True,381,4,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/287,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/287#issuecomment-233624810,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
This PR targets dev. However, we don't yet have a complete end-to-end prototype to verify this design. Changes could be made to the API as a result of further development.
@AlessandroA @niklas-arm @meriac",Please hold off merging while I re-test the code after most recent modifications.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,287,2016-07-19T12:23:36Z,2016-07-20T09:53:32Z,2016-07-20T09:53:32Z,MERGED,True,381,4,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/287,https://github.com/Patater,5,https://github.com/ARMmbed/uvisor/pull/287#issuecomment-233627505,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
This PR targets dev. However, we don't yet have a complete end-to-end prototype to verify this design. Changes could be made to the API as a result of further development.
@AlessandroA @niklas-arm @meriac",Testing done,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,287,2016-07-19T12:23:36Z,2016-07-20T09:53:32Z,2016-07-20T09:53:32Z,MERGED,True,381,4,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/287,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/287#issuecomment-233856523,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
This PR targets dev. However, we don't yet have a complete end-to-end prototype to verify this design. Changes could be made to the API as a result of further development.
@AlessandroA @niklas-arm @meriac",I am working on eliminating the limitation that RPC gateways will only be callable outside of the  translation unit where they are declared. That was too much of a pain in the butt.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,287,2016-07-19T12:23:36Z,2016-07-20T09:53:32Z,2016-07-20T09:53:32Z,MERGED,True,381,4,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/287,https://github.com/Patater,7,https://github.com/ARMmbed/uvisor/pull/287#issuecomment-233894346,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
This PR targets dev. However, we don't yet have a complete end-to-end prototype to verify this design. Changes could be made to the API as a result of further development.
@AlessandroA @niklas-arm @meriac","That limitation has been eliminated.
Please review and merge.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,287,2016-07-19T12:23:36Z,2016-07-20T09:53:32Z,2016-07-20T09:53:32Z,MERGED,True,381,4,8,https://github.com/Patater,RPC Gateway,9,[],https://github.com/ARMmbed/uvisor/pull/287,https://github.com/AlessandroA,8,https://github.com/ARMmbed/uvisor/pull/287#issuecomment-233904612,"Implement an in-flash, verifiable, callable RPC structure that nominates a function as suitable RPC target.
This PR targets dev. However, we don't yet have a complete end-to-end prototype to verify this design. Changes could be made to the API as a result of further development.
@AlessandroA @niklas-arm @meriac",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,291,2016-07-20T12:22:34Z,2016-07-20T15:32:22Z,2016-07-20T15:32:23Z,MERGED,True,6515,1376,84,https://github.com/AlessandroA,Publish the development branch to master,109,[],https://github.com/ARMmbed/uvisor/pull/291,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/291,"This PR is to publish the changes developed in the dev branch into master.
Changelog:

New APIs to disable/re-enable all IRQs.
New abstraction layer for context switches.
Export tables.
Hooks for privileged IRQ handlers.
Secure boxes initialization.
New page allocator feature.
New support for uVisor-aware dynamic memory allocation.
Keil RTX support on mbed OS.
Removal of the secure gateway feature.
Register gateway implemented (and APIs updated).
New RPC APIs (header files only, for now).
Many style improvements.
Updated docs.
Bugfixes.

@meriac @Patater @niklas-arm","This PR is to publish the changes developed in the dev branch into master.
Changelog:

New APIs to disable/re-enable all IRQs.
New abstraction layer for context switches.
Export tables.
Hooks for privileged IRQ handlers.
Secure boxes initialization.
New page allocator feature.
New support for uVisor-aware dynamic memory allocation.
Keil RTX support on mbed OS.
Removal of the secure gateway feature.
Register gateway implemented (and APIs updated).
New RPC APIs (header files only, for now).
Many style improvements.
Updated docs.
Bugfixes.

@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,291,2016-07-20T12:22:34Z,2016-07-20T15:32:22Z,2016-07-20T15:32:23Z,MERGED,True,6515,1376,84,https://github.com/AlessandroA,Publish the development branch to master,109,[],https://github.com/ARMmbed/uvisor/pull/291,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/291#issuecomment-233940330,"This PR is to publish the changes developed in the dev branch into master.
Changelog:

New APIs to disable/re-enable all IRQs.
New abstraction layer for context switches.
Export tables.
Hooks for privileged IRQ handlers.
Secure boxes initialization.
New page allocator feature.
New support for uVisor-aware dynamic memory allocation.
Keil RTX support on mbed OS.
Removal of the secure gateway feature.
Register gateway implemented (and APIs updated).
New RPC APIs (header files only, for now).
Many style improvements.
Updated docs.
Bugfixes.

@meriac @Patater @niklas-arm","Remove the reverted commits and the reverting commits.
Remove trailing whitespace from Docs: Add linker script padding for ARMv7-M MPUs.
Then LGTM. Thanks.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,291,2016-07-20T12:22:34Z,2016-07-20T15:32:22Z,2016-07-20T15:32:23Z,MERGED,True,6515,1376,84,https://github.com/AlessandroA,Publish the development branch to master,109,[],https://github.com/ARMmbed/uvisor/pull/291,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/291#issuecomment-233949279,"This PR is to publish the changes developed in the dev branch into master.
Changelog:

New APIs to disable/re-enable all IRQs.
New abstraction layer for context switches.
Export tables.
Hooks for privileged IRQ handlers.
Secure boxes initialization.
New page allocator feature.
New support for uVisor-aware dynamic memory allocation.
Keil RTX support on mbed OS.
Removal of the secure gateway feature.
Register gateway implemented (and APIs updated).
New RPC APIs (header files only, for now).
Many style improvements.
Updated docs.
Bugfixes.

@meriac @Patater @niklas-arm","Removed 2 commits and their subsequent revert commits (total of 4 commits removed).
Removed trailing whitespaces from the commit Docs: Add linker script padding for ARMv7-M MPUs.

Ready for merge.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,292,2016-07-20T16:11:10Z,2016-07-21T07:04:07Z,2016-07-21T07:04:07Z,MERGED,True,34,25,2,https://github.com/AlessandroA,Update documentation to new mbed OS version,2,[],https://github.com/ARMmbed/uvisor/pull/292,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/292,"Minor updates were missing:

The README had some deprecated information.
The debugging guide had yotta-specific instructions.

@meriac @Patater @niklas-arm","Minor updates were missing:

The README had some deprecated information.
The debugging guide had yotta-specific instructions.

@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,292,2016-07-20T16:11:10Z,2016-07-21T07:04:07Z,2016-07-21T07:04:07Z,MERGED,True,34,25,2,https://github.com/AlessandroA,Update documentation to new mbed OS version,2,[],https://github.com/ARMmbed/uvisor/pull/292,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/292#issuecomment-234001841,"Minor updates were missing:

The README had some deprecated information.
The debugging guide had yotta-specific instructions.

@meriac @Patater @niklas-arm",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,293,2016-07-21T14:23:03Z,2016-07-21T15:19:07Z,2016-09-20T13:41:48Z,MERGED,True,50,37,7,https://github.com/AlessandroA,Refactor the documentation into two folders,5,[],https://github.com/ARMmbed/uvisor/pull/293,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/293,"The net results of this PR are the following:

All docs split in 2 folders, api and core.
The docs folder has a dedicated README.md which de-multiplexes the right document to the right purpose.

The README.md file is always rendered when you open the docs folder on GitHub.



All docs references have been fixed.
@meriac @niklas-arm @Patater","The net results of this PR are the following:

All docs split in 2 folders, api and core.
The docs folder has a dedicated README.md which de-multiplexes the right document to the right purpose.

The README.md file is always rendered when you open the docs folder on GitHub.



All docs references have been fixed.
@meriac @niklas-arm @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,293,2016-07-21T14:23:03Z,2016-07-21T15:19:07Z,2016-09-20T13:41:48Z,MERGED,True,50,37,7,https://github.com/AlessandroA,Refactor the documentation into two folders,5,[],https://github.com/ARMmbed/uvisor/pull/293,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/293#issuecomment-234271055,"The net results of this PR are the following:

All docs split in 2 folders, api and core.
The docs folder has a dedicated README.md which de-multiplexes the right document to the right purpose.

The README.md file is always rendered when you open the docs folder on GitHub.



All docs references have been fixed.
@meriac @niklas-arm @Patater","Enabling uVisor debug messages seems like a core sort of activity to me. But I guess it could be api if we rephrase it as ""Figuring out why uVisor broke your app"".",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,293,2016-07-21T14:23:03Z,2016-07-21T15:19:07Z,2016-09-20T13:41:48Z,MERGED,True,50,37,7,https://github.com/AlessandroA,Refactor the documentation into two folders,5,[],https://github.com/ARMmbed/uvisor/pull/293,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/293#issuecomment-234272877,"The net results of this PR are the following:

All docs split in 2 folders, api and core.
The docs folder has a dedicated README.md which de-multiplexes the right document to the right purpose.

The README.md file is always rendered when you open the docs folder on GitHub.



All docs references have been fixed.
@meriac @niklas-arm @Patater","Not sure, I would expect an app user/writer to want to see debug messages when uVisor halts. Keep in mind that the document is from the mbed OS perspective (and that with the automatic debug-build selection is fairly easy if you have a GDB-enabled board). @meriac What do you think?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,293,2016-07-21T14:23:03Z,2016-07-21T15:19:07Z,2016-09-20T13:41:48Z,MERGED,True,50,37,7,https://github.com/AlessandroA,Refactor the documentation into two folders,5,[],https://github.com/ARMmbed/uvisor/pull/293,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/293#issuecomment-234274296,"The net results of this PR are the following:

All docs split in 2 folders, api and core.
The docs folder has a dedicated README.md which de-multiplexes the right document to the right purpose.

The README.md file is always rendered when you open the docs folder on GitHub.



All docs references have been fixed.
@meriac @niklas-arm @Patater",I'll note that I like the agreement between the source code folder structure and the proposed documentation folder structure.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,294,2016-07-22T08:45:11Z,2016-08-24T13:49:53Z,2016-08-24T13:49:53Z,MERGED,True,1453,992,19,https://github.com/niklas-arm,Add interface for MPU region management and scheduling,11,[],https://github.com/ARMmbed/uvisor/pull/294,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/294,"This adds a common interface for the implementation of the MPU region storage and scheduling.
Tested on both K64F and EFM32.
This build on top of #286.
cc @AlessandroA @meriac @Patater.","This adds a common interface for the implementation of the MPU region storage and scheduling.
Tested on both K64F and EFM32.
This build on top of #286.
cc @AlessandroA @meriac @Patater.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,294,2016-07-22T08:45:11Z,2016-08-24T13:49:53Z,2016-08-24T13:49:53Z,MERGED,True,1453,992,19,https://github.com/niklas-arm,Add interface for MPU region management and scheduling,11,[],https://github.com/ARMmbed/uvisor/pull/294,https://github.com/niklas-arm,2,https://github.com/ARMmbed/uvisor/pull/294#issuecomment-241999522,"This adds a common interface for the implementation of the MPU region storage and scheduling.
Tested on both K64F and EFM32.
This build on top of #286.
cc @AlessandroA @meriac @Patater.",Updated code to address review.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,294,2016-07-22T08:45:11Z,2016-08-24T13:49:53Z,2016-08-24T13:49:53Z,MERGED,True,1453,992,19,https://github.com/niklas-arm,Add interface for MPU region management and scheduling,11,[],https://github.com/ARMmbed/uvisor/pull/294,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/294#issuecomment-242017804,"This adds a common interface for the implementation of the MPU region storage and scheduling.
Tested on both K64F and EFM32.
This build on top of #286.
cc @AlessandroA @meriac @Patater.","Could you please add here a comment specifying how we need to change the app and/or mbed OS to accommodate the new changes?
From what I've seen so far, I think at least the following is needed:

Update the linker script of all uVisor-supported platforms (K64F, EFM32GG_STK3700, Beetle).
Update the app to include the new config macro.
Update the docs for porting (linker script) and quick-start (config macro).

Anything else I've missed?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,295,2016-07-22T14:55:22Z,2016-07-22T15:04:11Z,2016-07-22T15:04:11Z,MERGED,True,6,2,3,https://github.com/meriac,Update uVisor RTOS docs publisher,2,[],https://github.com/ARMmbed/uvisor/pull/295,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/295,"Add Word template for rendering uVisor RTOS docs
Add changes for publishing to local branch

@AlessandroA","Add Word template for rendering uVisor RTOS docs
Add changes for publishing to local branch

@AlessandroA",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,295,2016-07-22T14:55:22Z,2016-07-22T15:04:11Z,2016-07-22T15:04:11Z,MERGED,True,6,2,3,https://github.com/meriac,Update uVisor RTOS docs publisher,2,[],https://github.com/ARMmbed/uvisor/pull/295,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/295#issuecomment-234568417,"Add Word template for rendering uVisor RTOS docs
Add changes for publishing to local branch

@AlessandroA",👍 LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,296,2016-07-22T16:11:23Z,2016-07-25T09:04:26Z,2016-07-25T09:04:26Z,CLOSED,False,3,1,2,https://github.com/AlessandroA,Docs: Add link to rendered docs PDF,1,[],https://github.com/ARMmbed/uvisor/pull/296,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/296,@meriac,@meriac,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,297,2016-07-25T09:26:32Z,2016-07-25T12:36:38Z,2016-07-25T12:36:38Z,MERGED,True,9,7,2,https://github.com/meriac,Add documentation links to uVisor OS-integration PDF,1,[],https://github.com/ARMmbed/uvisor/pull/297,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/297,@AlessandroA,@AlessandroA,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,297,2016-07-25T09:26:32Z,2016-07-25T12:36:38Z,2016-07-25T12:36:38Z,MERGED,True,9,7,2,https://github.com/meriac,Add documentation links to uVisor OS-integration PDF,1,[],https://github.com/ARMmbed/uvisor/pull/297,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/297#issuecomment-234940987,@AlessandroA,Thanks!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,301,2016-07-25T13:17:04Z,2016-07-25T13:21:12Z,2016-07-25T13:21:13Z,MERGED,True,259,0,9,https://github.com/meriac,Add docker build system,5,[],https://github.com/ARMmbed/uvisor/pull/301,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/301,"document usage of the publish uVisor build system
create docker build system image for compiling uVisor reproducible

@AlessandroA","document usage of the publish uVisor build system
create docker build system image for compiling uVisor reproducible

@AlessandroA",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,301,2016-07-25T13:17:04Z,2016-07-25T13:21:12Z,2016-07-25T13:21:13Z,MERGED,True,259,0,9,https://github.com/meriac,Add docker build system,5,[],https://github.com/ARMmbed/uvisor/pull/301,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/301#issuecomment-234950851,"document usage of the publish uVisor build system
create docker build system image for compiling uVisor reproducible

@AlessandroA",LGTM!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,303,2016-07-25T14:36:31Z,2016-07-25T15:21:39Z,2016-07-25T15:21:39Z,MERGED,True,16,1,1,https://github.com/Patater,More RPC API,2,[],https://github.com/ARMmbed/uvisor/pull/303,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/303,"This PR:

fixes a mistake in the original rpc.h file
adds fpc_fncall_wait to the rpc.h file

@AlessandroA @meriac @niklas-arm","This PR:

fixes a mistake in the original rpc.h file
adds fpc_fncall_wait to the rpc.h file

@AlessandroA @meriac @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,304,2016-07-26T15:50:59Z,2016-07-26T15:57:27Z,2016-07-26T15:57:27Z,MERGED,True,0,1,1,https://github.com/Patater,Remove unused TFN_RPC_Callback,1,[],https://github.com/ARMmbed/uvisor/pull/304,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/304,"This unused typedef snuck into rpc.h somehow... remove it.
@AlessandroA @meriac @niklas-arm","This unused typedef snuck into rpc.h somehow... remove it.
@AlessandroA @meriac @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,307,2016-08-02T12:16:54Z,2016-08-02T12:22:45Z,2016-08-02T12:22:46Z,MERGED,True,95,0,1,https://github.com/meriac,Add initial clang-format file,1,[],https://github.com/ARMmbed/uvisor/pull/307,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/307,"This file attempts to describe our coding standard in a way that
clang-format understands. It isn't perfect yet, but it is a nice
starting point.
See http://clang.llvm.org/docs/ClangFormat.html for usage
instructions, including how to integrate clang-format with your favorite
text editor.","This file attempts to describe our coding standard in a way that
clang-format understands. It isn't perfect yet, but it is a nice
starting point.
See http://clang.llvm.org/docs/ClangFormat.html for usage
instructions, including how to integrate clang-format with your favorite
text editor.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,307,2016-08-02T12:16:54Z,2016-08-02T12:22:45Z,2016-08-02T12:22:46Z,MERGED,True,95,0,1,https://github.com/meriac,Add initial clang-format file,1,[],https://github.com/ARMmbed/uvisor/pull/307,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/307#issuecomment-236887780,"This file attempts to describe our coding standard in a way that
clang-format understands. It isn't perfect yet, but it is a nice
starting point.
See http://clang.llvm.org/docs/ClangFormat.html for usage
instructions, including how to integrate clang-format with your favorite
text editor.",👍,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,308,2016-08-10T16:41:42Z,2016-09-21T08:26:53Z,2017-02-22T10:25:55Z,MERGED,True,2471,207,46,https://github.com/Patater,Add initial RPC implementation,29,[],https://github.com/ARMmbed/uvisor/pull/308,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/308,"This adds RPC sending and receiving, and the uVisor secure copying.
@niklas-arm @AlessandroA @meriac","This adds RPC sending and receiving, and the uVisor secure copying.
@niklas-arm @AlessandroA @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,308,2016-08-10T16:41:42Z,2016-09-21T08:26:53Z,2017-02-22T10:25:55Z,MERGED,True,2471,207,46,https://github.com/Patater,Add initial RPC implementation,29,[],https://github.com/ARMmbed/uvisor/pull/308,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/308#issuecomment-244745680,"This adds RPC sending and receiving, and the uVisor secure copying.
@niklas-arm @AlessandroA @meriac",Addressed most of the XXX comments.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,308,2016-08-10T16:41:42Z,2016-09-21T08:26:53Z,2017-02-22T10:25:55Z,MERGED,True,2471,207,46,https://github.com/Patater,Add initial RPC implementation,29,[],https://github.com/ARMmbed/uvisor/pull/308,https://github.com/meriac,3,https://github.com/ARMmbed/uvisor/pull/308#issuecomment-248286821,"This adds RPC sending and receiving, and the uVisor secure copying.
@niklas-arm @AlessandroA @meriac","@Patater @alessandro @niklas-arm Other than the comments above I am fine with the API. A general comment for your own reviews:
Please make sure to verify in top level user-facing functions, whether the provided structure pointers are valid (magic value etc?).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,308,2016-08-10T16:41:42Z,2016-09-21T08:26:53Z,2017-02-22T10:25:55Z,MERGED,True,2471,207,46,https://github.com/Patater,Add initial RPC implementation,29,[],https://github.com/ARMmbed/uvisor/pull/308,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/308#issuecomment-248360264,"This adds RPC sending and receiving, and the uVisor secure copying.
@niklas-arm @AlessandroA @meriac",Feedback is all addressed,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,308,2016-08-10T16:41:42Z,2016-09-21T08:26:53Z,2017-02-22T10:25:55Z,MERGED,True,2471,207,46,https://github.com/Patater,Add initial RPC implementation,29,[],https://github.com/ARMmbed/uvisor/pull/308,https://github.com/sherrellbc,5,https://github.com/ARMmbed/uvisor/pull/308#issuecomment-281420712,"This adds RPC sending and receiving, and the uVisor secure copying.
@niklas-arm @AlessandroA @meriac","@Patater
Can this API be used from the public box?
Specifically, can this API be used to execute RPC calls into the main/public box?
The semantics of UVISOR_BOX_RPC_GATEWAY_SYNC require the box_name. Does the public/main box have a name?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,308,2016-08-10T16:41:42Z,2016-09-21T08:26:53Z,2017-02-22T10:25:55Z,MERGED,True,2471,207,46,https://github.com/Patater,Add initial RPC implementation,29,[],https://github.com/ARMmbed/uvisor/pull/308,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/308#issuecomment-281629362,"This adds RPC sending and receiving, and the uVisor secure copying.
@niklas-arm @AlessandroA @meriac","@sherrellbc No, this API can't be used to RPC into the public box. Gateways into the public box can't be created.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,311,2016-08-23T10:24:48Z,2016-09-02T09:26:17Z,2016-09-02T09:26:17Z,MERGED,True,177,0,4,https://github.com/fvincenzo,Add uvisor support to Beetle,2,[],https://github.com/ARMmbed/uvisor/pull/311,https://github.com/fvincenzo,1,https://github.com/ARMmbed/uvisor/pull/311,This PR contains two patches and adds the support for Beetle to uvisor.,This PR contains two patches and adds the support for Beetle to uvisor.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,311,2016-08-23T10:24:48Z,2016-09-02T09:26:17Z,2016-09-02T09:26:17Z,MERGED,True,177,0,4,https://github.com/fvincenzo,Add uvisor support to Beetle,2,[],https://github.com/ARMmbed/uvisor/pull/311,https://github.com/meriac,2,https://github.com/ARMmbed/uvisor/pull/311#issuecomment-241715093,This PR contains two patches and adds the support for Beetle to uvisor.,"@AlessandroA please review, too.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,311,2016-08-23T10:24:48Z,2016-09-02T09:26:17Z,2016-09-02T09:26:17Z,MERGED,True,177,0,4,https://github.com/fvincenzo,Add uvisor support to Beetle,2,[],https://github.com/ARMmbed/uvisor/pull/311,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/311#issuecomment-242077312,This PR contains two patches and adds the support for Beetle to uvisor.,"@fvincenzo For the debug_beetle.c file what I suggest to do is to put it into platform/beetle/src/debug_beetle.c. If I remember correctly the build system si already able to detect platform-specific code (let me know if it doesn't).
Once the code is in the Beetle-specific folder, you remove the use of the CORE_BEETLE symbol from the whole code-base (in debug.c, in the configuration file, and in the debug_beetle.c file).
To make sure that the UART code is picked up, define the CHANNEL_DEBUG variable in the platform/beetle/inc/config.h file.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,311,2016-08-23T10:24:48Z,2016-09-02T09:26:17Z,2016-09-02T09:26:17Z,MERGED,True,177,0,4,https://github.com/fvincenzo,Add uvisor support to Beetle,2,[],https://github.com/ARMmbed/uvisor/pull/311,https://github.com/fvincenzo,4,https://github.com/ARMmbed/uvisor/pull/311#issuecomment-244326297,This PR contains two patches and adds the support for Beetle to uvisor.,"@AlessandroA
I modified the PR based on your suggestions and rebased on the latest main. Unfortunately if I build in this condition uvisor stops working.
uVisor mode: 2
uvisor_ram : @0x20000140 (7872 bytes) [config]
             @0x20000140 (7872 bytes) [linker]
bss_boxes  : @0x20002000 (8320 bytes) [config]

box stack segment start=0x20002000 end=0x20002000 (length=8320)
MPU.REGIONS=8
MPU.ALIGNMENT=0x0000001F
MPU.ALIGNMENT_BITS=5
HALT_ERROR(./core/system/src/mpu/vmpu_armv7m_mpu.c#178): inferred ACL's (0x003F) don't match exptected ACL's (0x0037)

This issue seems not depending from my code.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,311,2016-08-23T10:24:48Z,2016-09-02T09:26:17Z,2016-09-02T09:26:17Z,MERGED,True,177,0,4,https://github.com/fvincenzo,Add uvisor support to Beetle,2,[],https://github.com/ARMmbed/uvisor/pull/311,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/311#issuecomment-244326564,This PR contains two patches and adds the support for Beetle to uvisor.,@fvincenzo I can confirm this issue was already observed by @niklas-arm in his port to the EFM32GG_STK3700 module. I'll raise an issue here and verify the ACLs independently from this PR. Thanks for the update!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,313,2016-08-24T13:53:53Z,2016-08-24T13:55:04Z,2016-08-24T13:55:04Z,MERGED,True,1453,992,19,https://github.com/meriac,Secure Memory Allocator,12,[],https://github.com/ARMmbed/uvisor/pull/313,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/313,"This adds a common interface for the implementation of the MPU region storage and scheduling.
Tested on both K64F and EFM32.
This also adds the necessary changes to use subregions to access the page heap.
Changes include accessing the page owner bitmap efficiently to map it directly to MPU subregions and moving the page heap to behind the uVisor .bss section and aligning it's end with a subregion of the SRAM access region.
@AlessandroA","This adds a common interface for the implementation of the MPU region storage and scheduling.
Tested on both K64F and EFM32.
This also adds the necessary changes to use subregions to access the page heap.
Changes include accessing the page owner bitmap efficiently to map it directly to MPU subregions and moving the page heap to behind the uVisor .bss section and aligning it's end with a subregion of the SRAM access region.
@AlessandroA",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,314,2016-08-25T13:00:52Z,2016-11-10T15:09:03Z,2016-11-10T15:09:03Z,CLOSED,False,10,0,1,https://github.com/sherrellbc,Updated QUICKSTART.md ,1,[],https://github.com/ARMmbed/uvisor/pull/314,https://github.com/sherrellbc,1,https://github.com/ARMmbed/uvisor/pull/314,"QUICKSTART.md does not work by default. There should be an explicit step to checkout a working release of mbed-os (see here). In addition to this, a uVisor ACL was missing for the PIT causing the example blinky code to not work.
I did not check if the later secure box example requires more ACL changes -- this is just a patch to get the blinky code to work.","QUICKSTART.md does not work by default. There should be an explicit step to checkout a working release of mbed-os (see here). In addition to this, a uVisor ACL was missing for the PIT causing the example blinky code to not work.
I did not check if the later secure box example requires more ACL changes -- this is just a patch to get the blinky code to work.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,314,2016-08-25T13:00:52Z,2016-11-10T15:09:03Z,2016-11-10T15:09:03Z,CLOSED,False,10,0,1,https://github.com/sherrellbc,Updated QUICKSTART.md ,1,[],https://github.com/ARMmbed/uvisor/pull/314,https://github.com/meriac,2,https://github.com/ARMmbed/uvisor/pull/314#issuecomment-253444281,"QUICKSTART.md does not work by default. There should be an explicit step to checkout a working release of mbed-os (see here). In addition to this, a uVisor ACL was missing for the PIT causing the example blinky code to not work.
I did not check if the later secure box example requires more ACL changes -- this is just a patch to get the blinky code to work.","@sherrellbc Please sign the contributor license agreement in your mbed.com account, so we can merge your contributions.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,314,2016-08-25T13:00:52Z,2016-11-10T15:09:03Z,2016-11-10T15:09:03Z,CLOSED,False,10,0,1,https://github.com/sherrellbc,Updated QUICKSTART.md ,1,[],https://github.com/ARMmbed/uvisor/pull/314,https://github.com/meriac,3,https://github.com/ARMmbed/uvisor/pull/314#issuecomment-259714152,"QUICKSTART.md does not work by default. There should be an explicit step to checkout a working release of mbed-os (see here). In addition to this, a uVisor ACL was missing for the PIT causing the example blinky code to not work.
I did not check if the later secure box example requires more ACL changes -- this is just a patch to get the blinky code to work.","@sherrellbc please ping me once the CLA is signed, happy to re-open.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,318,2016-08-31T14:05:16Z,2016-08-31T14:34:46Z,2016-09-20T13:41:43Z,MERGED,True,1,1,1,https://github.com/AlessandroA,Fix compilation of platform-specific src files,1,[],https://github.com/ARMmbed/uvisor/pull/318,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/318,"@meriac
@fvincenzo: This should fix your compilation problem.","@meriac
@fvincenzo: This should fix your compilation problem.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,320,2016-09-02T09:59:19Z,2016-09-02T12:16:12Z,2016-09-12T19:22:05Z,MERGED,True,69,41,9,https://github.com/meriac,Allow hardware specific region-ACL extensions,2,[],https://github.com/ARMmbed/uvisor/pull/320,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/320,"Enables hardware specific region-ACL extensions
Move subregion configuration into HW-specific ACLs:

For K64F DMA Busmaster overrides are possible
For ARMv7-M Subregions can be defined- Enables access to box 0 memories by the Ethernet peripheral


Background region privileges reduced to Core and Debugger

@AlessandroA","Enables hardware specific region-ACL extensions
Move subregion configuration into HW-specific ACLs:

For K64F DMA Busmaster overrides are possible
For ARMv7-M Subregions can be defined- Enables access to box 0 memories by the Ethernet peripheral


Background region privileges reduced to Core and Debugger

@AlessandroA",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,320,2016-09-02T09:59:19Z,2016-09-02T12:16:12Z,2016-09-12T19:22:05Z,MERGED,True,69,41,9,https://github.com/meriac,Allow hardware specific region-ACL extensions,2,[],https://github.com/ARMmbed/uvisor/pull/320,https://github.com/meriac,2,https://github.com/ARMmbed/uvisor/pull/320#issuecomment-244344075,"Enables hardware specific region-ACL extensions
Move subregion configuration into HW-specific ACLs:

For K64F DMA Busmaster overrides are possible
For ARMv7-M Subregions can be defined- Enables access to box 0 memories by the Ethernet peripheral


Background region privileges reduced to Core and Debugger

@AlessandroA","@AlessandroA I fixed the spacing problem. I would like to avoid though macros for now for the hw-specific ACLs, as they are currently only used in this two lines plus I don't want to make this ""as thing"".",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,320,2016-09-02T09:59:19Z,2016-09-02T12:16:12Z,2016-09-12T19:22:05Z,MERGED,True,69,41,9,https://github.com/meriac,Allow hardware specific region-ACL extensions,2,[],https://github.com/ARMmbed/uvisor/pull/320,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/320#issuecomment-244358660,"Enables hardware specific region-ACL extensions
Move subregion configuration into HW-specific ACLs:

For K64F DMA Busmaster overrides are possible
For ARMv7-M Subregions can be defined- Enables access to box 0 memories by the Ethernet peripheral


Background region privileges reduced to Core and Debugger

@AlessandroA",LGTM 👍,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,320,2016-09-02T09:59:19Z,2016-09-02T12:16:12Z,2016-09-12T19:22:05Z,MERGED,True,69,41,9,https://github.com/meriac,Allow hardware specific region-ACL extensions,2,[],https://github.com/ARMmbed/uvisor/pull/320,https://github.com/sherrellbc,4,https://github.com/ARMmbed/uvisor/pull/320#issuecomment-246461158,"Enables hardware specific region-ACL extensions
Move subregion configuration into HW-specific ACLs:

For K64F DMA Busmaster overrides are possible
For ARMv7-M Subregions can be defined- Enables access to box 0 memories by the Ethernet peripheral


Background region privileges reduced to Core and Debugger

@AlessandroA",DMA confirmed to work (see #315) to/from box 0 using LwIP as a test case (the original motivation for this patch). Other problems related to managing mutually exclusive memory (mutex) at run-time have now manifested as either a side-effect of this patch or as something previously unknown and un-tested. See the above quoted git issue for more information.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,322,2016-09-02T15:40:16Z,2016-09-02T15:54:26Z,2016-09-20T13:41:43Z,MERGED,True,1,1,1,https://github.com/AlessandroA,Debug: Fix bug in debug message,1,[],https://github.com/ARMmbed/uvisor/pull/322,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/322,@meriac,@meriac,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,323,2016-09-08T13:45:04Z,2016-09-13T10:47:28Z,2016-09-20T13:41:41Z,MERGED,True,110,104,11,https://github.com/AlessandroA,Reintroduce the debug box,4,[],https://github.com/ARMmbed/uvisor/pull/323,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/323,"This PR re-introduces the debug box feature.

Use the latest context switch APIs.
Add hook to suspend the RTOS from uVisor.

The PR requires applications built with uVisor enabled to add the rt_suspend hook to the sys-hooks configuration:
-UVISOR_SET_PRIV_SYS_HOOKS(SVC_Handler, PendSV_Handler, SysTick_Handler);
+UVISOR_SET_PRIV_SYS_HOOKS(SVC_Handler, PendSV_Handler, SysTick_Handler, rt_suspend);
@meriac @Patater","This PR re-introduces the debug box feature.

Use the latest context switch APIs.
Add hook to suspend the RTOS from uVisor.

The PR requires applications built with uVisor enabled to add the rt_suspend hook to the sys-hooks configuration:
-UVISOR_SET_PRIV_SYS_HOOKS(SVC_Handler, PendSV_Handler, SysTick_Handler);
+UVISOR_SET_PRIV_SYS_HOOKS(SVC_Handler, PendSV_Handler, SysTick_Handler, rt_suspend);
@meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,323,2016-09-08T13:45:04Z,2016-09-13T10:47:28Z,2016-09-20T13:41:41Z,MERGED,True,110,104,11,https://github.com/AlessandroA,Reintroduce the debug box,4,[],https://github.com/ARMmbed/uvisor/pull/323,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/323#issuecomment-245894939,"This PR re-introduces the debug box feature.

Use the latest context switch APIs.
Add hook to suspend the RTOS from uVisor.

The PR requires applications built with uVisor enabled to add the rt_suspend hook to the sys-hooks configuration:
-UVISOR_SET_PRIV_SYS_HOOKS(SVC_Handler, PendSV_Handler, SysTick_Handler);
+UVISOR_SET_PRIV_SYS_HOOKS(SVC_Handler, PendSV_Handler, SysTick_Handler, rt_suspend);
@meriac @Patater",@Patater Thanks for the comments! Addressed.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,323,2016-09-08T13:45:04Z,2016-09-13T10:47:28Z,2016-09-20T13:41:41Z,MERGED,True,110,104,11,https://github.com/AlessandroA,Reintroduce the debug box,4,[],https://github.com/ARMmbed/uvisor/pull/323,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/323#issuecomment-246620834,"This PR re-introduces the debug box feature.

Use the latest context switch APIs.
Add hook to suspend the RTOS from uVisor.

The PR requires applications built with uVisor enabled to add the rt_suspend hook to the sys-hooks configuration:
-UVISOR_SET_PRIV_SYS_HOOKS(SVC_Handler, PendSV_Handler, SysTick_Handler);
+UVISOR_SET_PRIV_SYS_HOOKS(SVC_Handler, PendSV_Handler, SysTick_Handler, rt_suspend);
@meriac @Patater",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,324,2016-09-13T11:58:41Z,2016-09-13T14:34:14Z,2016-09-13T14:34:14Z,MERGED,True,26,20,5,https://github.com/Patater,Enhance the debug box,4,[],https://github.com/ARMmbed/uvisor/pull/324,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/324,"Enhance the debug box and fix a linker warning.
@AlessandroA @niklas-arm @meriac","Enhance the debug box and fix a linker warning.
@AlessandroA @niklas-arm @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,324,2016-09-13T11:58:41Z,2016-09-13T14:34:14Z,2016-09-13T14:34:14Z,MERGED,True,26,20,5,https://github.com/Patater,Enhance the debug box,4,[],https://github.com/ARMmbed/uvisor/pull/324,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/324#issuecomment-246659383,"Enhance the debug box and fix a linker warning.
@AlessandroA @niklas-arm @meriac","Thanks for the fixes! LGTM 👍
@meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,328,2016-09-16T09:31:18Z,2016-09-16T15:08:49Z,2016-09-20T13:41:36Z,MERGED,True,17082,9310,19,https://github.com/AlessandroA,CMSIS: Update to CMSIS 5,1,[],https://github.com/ARMmbed/uvisor/pull/328,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/328,@meriac @Patater @niklas-arm,@meriac @Patater @niklas-arm,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,329,2016-09-16T09:33:36Z,2016-09-16T14:33:09Z,2016-09-20T13:41:35Z,MERGED,True,276,226,22,https://github.com/AlessandroA,Minor fixes,7,[],https://github.com/ARMmbed/uvisor/pull/329,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/329,"This PR improves style and pattern consistency across documentation and platform configurations.
@meriac @Patater @niklas-arm","This PR improves style and pattern consistency across documentation and platform configurations.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,329,2016-09-16T09:33:36Z,2016-09-16T14:33:09Z,2016-09-20T13:41:35Z,MERGED,True,276,226,22,https://github.com/AlessandroA,Minor fixes,7,[],https://github.com/ARMmbed/uvisor/pull/329,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/329#issuecomment-247560293,"This PR improves style and pattern consistency across documentation and platform configurations.
@meriac @Patater @niklas-arm","@niklas-arm Please verify that the changes in the porting guide (linker script) make sense. In particular, could you verify that the alignment requirements for v7-M and other platforms are correct for the uVisor BSS and page heap sections?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,330,2016-09-16T10:18:06Z,,2017-09-28T14:00:47Z,OPEN,False,2816,87,32,https://github.com/niklas-arm,Add doxygen support,3,"[""don't merge yet"", 'needs: work']",https://github.com/ARMmbed/uvisor/pull/330,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/330,"This adds a simple doxygen configuration and adapts our headers to group APIs into basic modules. This is only a rough draft, so that we have something to render.
Some APIs are just excluded, since I deemed them not relevant for application developers. They can be re-enabled by including the UVISOR_INTERNAL section in doxygen (add to line 651 in doxyfile, ENABLED_SECTIONS = UVISOR_INTERNAL).
The grouping decisions are not final, please leave a comment if I misjudged.
This includes no changes to code, only comments have been added or modified.
We could probably spend a year on the doxygen config alone, it's 2439 lines long.
The interesting decisions I've made to the default config can easily be seen in the second commit.
cc @AlessandroA @meriac @Patater","This adds a simple doxygen configuration and adapts our headers to group APIs into basic modules. This is only a rough draft, so that we have something to render.
Some APIs are just excluded, since I deemed them not relevant for application developers. They can be re-enabled by including the UVISOR_INTERNAL section in doxygen (add to line 651 in doxyfile, ENABLED_SECTIONS = UVISOR_INTERNAL).
The grouping decisions are not final, please leave a comment if I misjudged.
This includes no changes to code, only comments have been added or modified.
We could probably spend a year on the doxygen config alone, it's 2439 lines long.
The interesting decisions I've made to the default config can easily be seen in the second commit.
cc @AlessandroA @meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,331,2016-09-16T16:13:44Z,2016-09-16T16:17:01Z,2016-09-16T16:17:01Z,MERGED,True,5,5,2,https://github.com/meriac,Fix case-sensitive file names in CMSIS 5,1,[],https://github.com/ARMmbed/uvisor/pull/331,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/331,@Patater @niklas-arm @AlessandroA,@Patater @niklas-arm @AlessandroA,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,333,2016-09-19T09:28:44Z,2016-09-19T09:34:45Z,2016-09-19T09:34:45Z,MERGED,True,12,2,2,https://github.com/Patater,rtx: Register with uVisor,2,[],https://github.com/ARMmbed/uvisor/pull/333,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/333,"Each application shouldn't need to register the privileged system handlers. We can register the OS with uVisor in uvisor-lib.
@AlessandroA @meriac @niklas-arm","Each application shouldn't need to register the privileged system handlers. We can register the OS with uVisor in uvisor-lib.
@AlessandroA @meriac @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,334,2016-09-20T12:25:15Z,2016-09-20T18:35:57Z,2017-01-19T15:25:31Z,MERGED,True,40,16,7,https://github.com/AlessandroA,Virtualize NVIC_SystemReset,3,[],https://github.com/ARMmbed/uvisor/pull/334,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/334,"This PR virtualizes the NVIC_SystemReset API.

Note: The API can be used only by the debug box.

Upon merge, we need to update mbed OS and the version of CMSIS 5 it contains (there is a PR ready for that).
I'm also proposing the following change: The halt_error handler in a debug box should not trigger a reset automatically, as it is counterintuitive. Instead, uVisor will halt upon return.
The debug box can still call NVIC_SystemReset if it wants to.
@meriac @Patater @niklas-arm","This PR virtualizes the NVIC_SystemReset API.

Note: The API can be used only by the debug box.

Upon merge, we need to update mbed OS and the version of CMSIS 5 it contains (there is a PR ready for that).
I'm also proposing the following change: The halt_error handler in a debug box should not trigger a reset automatically, as it is counterintuitive. Instead, uVisor will halt upon return.
The debug box can still call NVIC_SystemReset if it wants to.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,334,2016-09-20T12:25:15Z,2016-09-20T18:35:57Z,2017-01-19T15:25:31Z,MERGED,True,40,16,7,https://github.com/AlessandroA,Virtualize NVIC_SystemReset,3,[],https://github.com/ARMmbed/uvisor/pull/334,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/334#issuecomment-248287048,"This PR virtualizes the NVIC_SystemReset API.

Note: The API can be used only by the debug box.

Upon merge, we need to update mbed OS and the version of CMSIS 5 it contains (there is a PR ready for that).
I'm also proposing the following change: The halt_error handler in a debug box should not trigger a reset automatically, as it is counterintuitive. Instead, uVisor will halt upon return.
The debug box can still call NVIC_SystemReset if it wants to.
@meriac @Patater @niklas-arm","Since halt_error is going back to the former behavior of not returning, we could also restore the __attribute__ ((__noreturn__)) to its declaration that was removed when we added the debug box feature.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,334,2016-09-20T12:25:15Z,2016-09-20T18:35:57Z,2017-01-19T15:25:31Z,MERGED,True,40,16,7,https://github.com/AlessandroA,Virtualize NVIC_SystemReset,3,[],https://github.com/ARMmbed/uvisor/pull/334,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/334#issuecomment-248287741,"This PR virtualizes the NVIC_SystemReset API.

Note: The API can be used only by the debug box.

Upon merge, we need to update mbed OS and the version of CMSIS 5 it contains (there is a PR ready for that).
I'm also proposing the following change: The halt_error handler in a debug box should not trigger a reset automatically, as it is counterintuitive. Instead, uVisor will halt upon return.
The debug box can still call NVIC_SystemReset if it wants to.
@meriac @Patater @niklas-arm",I don't see the reason for adding vIRQ: Add reason to vIRQ_SystemReset right now. Consider dropping the commit (or describing in the commit message the reason for why we want to add this).,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,335,2016-09-20T16:02:23Z,2016-09-21T17:00:41Z,2016-10-13T13:39:46Z,MERGED,True,72,35,7,https://github.com/niklas-arm,Fix page heap alignment issues and ISR stack pointer issues,4,[],https://github.com/ARMmbed/uvisor/pull/335,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/335,"This fixes the alignment issues on the page heap MPU region with the introduction of an additional shift.
This also fixes one issue with the ISR stack pointer on v7-M MPU on my experimental EFM32GG port, as described in #326.
However, I still get Hardfaults for an unstack error within 10mins, but only if IRQ2 (used by us_ticker) is registered. Other IRQs including GPIO interrupts do not trigger this behavior.
cc @AlessandroA @meriac @Patater","This fixes the alignment issues on the page heap MPU region with the introduction of an additional shift.
This also fixes one issue with the ISR stack pointer on v7-M MPU on my experimental EFM32GG port, as described in #326.
However, I still get Hardfaults for an unstack error within 10mins, but only if IRQ2 (used by us_ticker) is registered. Other IRQs including GPIO interrupts do not trigger this behavior.
cc @AlessandroA @meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,335,2016-09-20T16:02:23Z,2016-09-21T17:00:41Z,2016-10-13T13:39:46Z,MERGED,True,72,35,7,https://github.com/niklas-arm,Fix page heap alignment issues and ISR stack pointer issues,4,[],https://github.com/ARMmbed/uvisor/pull/335,https://github.com/halazouna,2,https://github.com/ARMmbed/uvisor/pull/335#issuecomment-248565998,"This fixes the alignment issues on the page heap MPU region with the introduction of an additional shift.
This also fixes one issue with the ISR stack pointer on v7-M MPU on my experimental EFM32GG port, as described in #326.
However, I still get Hardfaults for an unstack error within 10mins, but only if IRQ2 (used by us_ticker) is registered. Other IRQs including GPIO interrupts do not trigger this behavior.
cc @AlessandroA @meriac @Patater","I gave it a try, the interrupt issue is resolved, but as @Patater said it breaks IRQ nesting.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,335,2016-09-20T16:02:23Z,2016-09-21T17:00:41Z,2016-10-13T13:39:46Z,MERGED,True,72,35,7,https://github.com/niklas-arm,Fix page heap alignment issues and ISR stack pointer issues,4,[],https://github.com/ARMmbed/uvisor/pull/335,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/335#issuecomment-248652874,"This fixes the alignment issues on the page heap MPU region with the introduction of an additional shift.
This also fixes one issue with the ISR stack pointer on v7-M MPU on my experimental EFM32GG port, as described in #326.
However, I still get Hardfaults for an unstack error within 10mins, but only if IRQ2 (used by us_ticker) is registered. Other IRQs including GPIO interrupts do not trigger this behavior.
cc @AlessandroA @meriac @Patater","@niklas-arm WRT ""Align page heap MPU region to correct alignment"" could you please specify the changes needed in the EFM32GG ld and in the porting guide so that I can fix them right after the PR?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,335,2016-09-20T16:02:23Z,2016-09-21T17:00:41Z,2016-10-13T13:39:46Z,MERGED,True,72,35,7,https://github.com/niklas-arm,Fix page heap alignment issues and ISR stack pointer issues,4,[],https://github.com/ARMmbed/uvisor/pull/335,https://github.com/niklas-arm,4,https://github.com/ARMmbed/uvisor/pull/335#issuecomment-248653552,"This fixes the alignment issues on the page heap MPU region with the introduction of an additional shift.
This also fixes one issue with the ISR stack pointer on v7-M MPU on my experimental EFM32GG port, as described in #326.
However, I still get Hardfaults for an unstack error within 10mins, but only if IRQ2 (used by us_ticker) is registered. Other IRQs including GPIO interrupts do not trigger this behavior.
cc @AlessandroA @meriac @Patater","specify the changes needed in the EFM32GG ld

I don't think there are any changes needed in mbed-os, the fix is required inside uVisor only.",True,{'THUMBS_UP': ['https://github.com/AlessandroA']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,335,2016-09-20T16:02:23Z,2016-09-21T17:00:41Z,2016-10-13T13:39:46Z,MERGED,True,72,35,7,https://github.com/niklas-arm,Fix page heap alignment issues and ISR stack pointer issues,4,[],https://github.com/ARMmbed/uvisor/pull/335,https://github.com/niklas-arm,5,https://github.com/ARMmbed/uvisor/pull/335#issuecomment-248653843,"This fixes the alignment issues on the page heap MPU region with the introduction of an additional shift.
This also fixes one issue with the ISR stack pointer on v7-M MPU on my experimental EFM32GG port, as described in #326.
However, I still get Hardfaults for an unstack error within 10mins, but only if IRQ2 (used by us_ticker) is registered. Other IRQs including GPIO interrupts do not trigger this behavior.
cc @AlessandroA @meriac @Patater","For reference, this is the port I am using.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,335,2016-09-20T16:02:23Z,2016-09-21T17:00:41Z,2016-10-13T13:39:46Z,MERGED,True,72,35,7,https://github.com/niklas-arm,Fix page heap alignment issues and ISR stack pointer issues,4,[],https://github.com/ARMmbed/uvisor/pull/335,https://github.com/halazouna,6,https://github.com/ARMmbed/uvisor/pull/335#issuecomment-253220811,"This fixes the alignment issues on the page heap MPU region with the introduction of an additional shift.
This also fixes one issue with the ISR stack pointer on v7-M MPU on my experimental EFM32GG port, as described in #326.
However, I still get Hardfaults for an unstack error within 10mins, but only if IRQ2 (used by us_ticker) is registered. Other IRQs including GPIO interrupts do not trigger this behavior.
cc @AlessandroA @meriac @Patater","Hi @niklas-arm ,
I'm getting a hardfault, after pushing a button several time( like 30 times in a row, and sometimes less, after one or two pushes ).
I think there is a problem with the alignment of the stack within the unvic_gateway_context_switch_in:
/* Source box: Get the current stack pointer. */
/* Note: We must use the current PSP as the SVCall can only give us the MSP
 * register, since it was triggered from privileged mode. */
src_sp = context_validate_exc_sf(__get_PSP());

This started to occur more often when I started using RPC API.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,335,2016-09-20T16:02:23Z,2016-09-21T17:00:41Z,2016-10-13T13:39:46Z,MERGED,True,72,35,7,https://github.com/niklas-arm,Fix page heap alignment issues and ISR stack pointer issues,4,[],https://github.com/ARMmbed/uvisor/pull/335,https://github.com/Patater,7,https://github.com/ARMmbed/uvisor/pull/335#issuecomment-253222022,"This fixes the alignment issues on the page heap MPU region with the introduction of an additional shift.
This also fixes one issue with the ISR stack pointer on v7-M MPU on my experimental EFM32GG port, as described in #326.
However, I still get Hardfaults for an unstack error within 10mins, but only if IRQ2 (used by us_ticker) is registered. Other IRQs including GPIO interrupts do not trigger this behavior.
cc @AlessandroA @meriac @Patater","Hello @asensaoui,
I have a PR open to fix a hard fault resulting from unstacking faults. Maybe you'd like to test it to see if it helps address your problem.
Regarding stack alignment within unvic_gateway_context_switch_in, what led you to this conclusion? This may be deserving of filing another issue.
Cheers,
Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,335,2016-09-20T16:02:23Z,2016-09-21T17:00:41Z,2016-10-13T13:39:46Z,MERGED,True,72,35,7,https://github.com/niklas-arm,Fix page heap alignment issues and ISR stack pointer issues,4,[],https://github.com/ARMmbed/uvisor/pull/335,https://github.com/halazouna,8,https://github.com/ARMmbed/uvisor/pull/335#issuecomment-253226917,"This fixes the alignment issues on the page heap MPU region with the introduction of an additional shift.
This also fixes one issue with the ISR stack pointer on v7-M MPU on my experimental EFM32GG port, as described in #326.
However, I still get Hardfaults for an unstack error within 10mins, but only if IRQ2 (used by us_ticker) is registered. Other IRQs including GPIO interrupts do not trigger this behavior.
cc @AlessandroA @meriac @Patater","@Patater , Thanks for your reply. Already did, still getting the hardfault.
What led me to that conclusion is the pc and lr registers in the stack frame :
@""***\n""
608,804 @""                    HARD FAULT\n""
608,817 @""**\n""
608,849 @""\n""
608,862 @"" HFSR  : 0x40000000\n""
608,875 @""\r\n""
608,888 @""\r* CFSR  : 0x00000082\n""
608,920 @""\r\n""
608,933 @""\r* DFSR  : 0x00000001\n""
608,946 @""\r\n""
608,959 @""\r* BFAR  : 0x200048F0\n""
608,991 @""\r\n""
609,023 @""\r* MMFAR : 0x200048F0\n""
609,036 @""\r\n""
609,068 @""\r* EXCEPTION STACK FRAME\n""
609,081 @""  Exception from privileged code\n""
609,094 @""    msp:     0x20001EA8\n""
609,126 @""\r    lr:      0xFFFFFFF1\n""
609,139 @""\r  Exception stack frame:\n""
609,152 @""    msp[08]: 0x100052D9 | align\n""
609,165 @""    msp[07]: 0x4100020B | xPSR\n""
609,178 @""    msp[06]: 0x100008F6 | pc\n""
609,191 @""    msp[05]: 0x1000389D | lr\n""
609,223 @""    msp[04]: 0x10002DA0 | r12\n""
609,255 @""    msp[03]: 0x200048F0 | r3\n""
609,268 @""    msp[02]: 0x00000000 | r2\n""
609,281 @""    msp[01]: 0x10002E98 | r1\n""
609,294 @""    msp[00]: 0x200048F0 | r0\n""
609,307 @""\n""
a snippet of the the Disassembly at the address in the lr register :
10003894:   mov     r3, r4
477           src_sp = context_validate_exc_sf(__get_PSP());
10003896:   mov     r0, r3
10003898:   bl      0x100008dc <context_validate_exc_sf>
1000389c:   str     r0, [r7, #32]
480           xpsr = ipsr & ~0x1FF;
Thank you.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,335,2016-09-20T16:02:23Z,2016-09-21T17:00:41Z,2016-10-13T13:39:46Z,MERGED,True,72,35,7,https://github.com/niklas-arm,Fix page heap alignment issues and ISR stack pointer issues,4,[],https://github.com/ARMmbed/uvisor/pull/335,https://github.com/Patater,9,https://github.com/ARMmbed/uvisor/pull/335#issuecomment-253228197,"This fixes the alignment issues on the page heap MPU region with the introduction of an additional shift.
This also fixes one issue with the ISR stack pointer on v7-M MPU on my experimental EFM32GG port, as described in #326.
However, I still get Hardfaults for an unstack error within 10mins, but only if IRQ2 (used by us_ticker) is registered. Other IRQs including GPIO interrupts do not trigger this behavior.
cc @AlessandroA @meriac @Patater","Thanks for the update, @asensaoui.
Could you open a new issue and ideally provide source to a minimal application that reproduces your issue? I'll debug from there.
Thanks much!",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,335,2016-09-20T16:02:23Z,2016-09-21T17:00:41Z,2016-10-13T13:39:46Z,MERGED,True,72,35,7,https://github.com/niklas-arm,Fix page heap alignment issues and ISR stack pointer issues,4,[],https://github.com/ARMmbed/uvisor/pull/335,https://github.com/halazouna,10,https://github.com/ARMmbed/uvisor/pull/335#issuecomment-253514944,"This fixes the alignment issues on the page heap MPU region with the introduction of an additional shift.
This also fixes one issue with the ISR stack pointer on v7-M MPU on my experimental EFM32GG port, as described in #326.
However, I still get Hardfaults for an unstack error within 10mins, but only if IRQ2 (used by us_ticker) is registered. Other IRQs including GPIO interrupts do not trigger this behavior.
cc @AlessandroA @meriac @Patater","@Patater ,
While trying to reproduce the issue in a simple example, I failed, uVisor was working just fine. So I assume that the problem is within my project and not uVisor.
Sorry for disturbing.
Thanks,
asensaoui.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,335,2016-09-20T16:02:23Z,2016-09-21T17:00:41Z,2016-10-13T13:39:46Z,MERGED,True,72,35,7,https://github.com/niklas-arm,Fix page heap alignment issues and ISR stack pointer issues,4,[],https://github.com/ARMmbed/uvisor/pull/335,https://github.com/Patater,11,https://github.com/ARMmbed/uvisor/pull/335#issuecomment-253515638,"This fixes the alignment issues on the page heap MPU region with the introduction of an additional shift.
This also fixes one issue with the ISR stack pointer on v7-M MPU on my experimental EFM32GG port, as described in #326.
However, I still get Hardfaults for an unstack error within 10mins, but only if IRQ2 (used by us_ticker) is registered. Other IRQs including GPIO interrupts do not trigger this behavior.
cc @AlessandroA @meriac @Patater","Hi @asensaoui,
Thanks for making an effort to make the simple example. If in the future it does end up looking like an issue in uVisor, please file an issue.
Thanks!",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,336,2016-09-21T08:33:14Z,2016-09-21T09:26:11Z,2016-09-21T09:26:11Z,MERGED,True,2471,207,46,https://github.com/AlessandroA,Merge dev into master,30,[],https://github.com/ARMmbed/uvisor/pull/336,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/336,@Patater,@Patater,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,336,2016-09-21T08:33:14Z,2016-09-21T09:26:11Z,2016-09-21T09:26:11Z,MERGED,True,2471,207,46,https://github.com/AlessandroA,Merge dev into master,30,[],https://github.com/ARMmbed/uvisor/pull/336,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/336#issuecomment-248546691,@Patater,"The PR has been created to keep the merge commit, which points to the correct PR.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,336,2016-09-21T08:33:14Z,2016-09-21T09:26:11Z,2016-09-21T09:26:11Z,MERGED,True,2471,207,46,https://github.com/AlessandroA,Merge dev into master,30,[],https://github.com/ARMmbed/uvisor/pull/336,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/336#issuecomment-248553513,@Patater,"Don't merge until #338 is merged.
It turns out we run out of .data in the kinetis debug build after this merges. Thanks CI.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,336,2016-09-21T08:33:14Z,2016-09-21T09:26:11Z,2016-09-21T09:26:11Z,MERGED,True,2471,207,46,https://github.com/AlessandroA,Merge dev into master,30,[],https://github.com/ARMmbed/uvisor/pull/336,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/336#issuecomment-248555606,@Patater,retest,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,338,2016-09-21T08:56:12Z,2016-09-21T09:07:51Z,2016-09-21T09:07:51Z,MERGED,True,2,5,1,https://github.com/Patater,Save some flash space by consolidating halts,1,[],https://github.com/ARMmbed/uvisor/pull/338,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/338,"This helps reduce the flash size of our debug build at the expense of
the suitability of the debug build for debugging.
An issue at #337 tracks our
progress towards solving this problem in a way that does not reduce the
suitability of the debug build for debugging.
@AlessandroA","This helps reduce the flash size of our debug build at the expense of
the suitability of the debug build for debugging.
An issue at #337 tracks our
progress towards solving this problem in a way that does not reduce the
suitability of the debug build for debugging.
@AlessandroA",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,341,2016-09-23T13:07:25Z,2016-09-26T09:34:24Z,2016-09-26T09:34:24Z,MERGED,True,23,1,1,https://github.com/niklas-arm,Wrap thread_switch in an atomic section,1,[],https://github.com/ARMmbed/uvisor/pull/341,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/341,"The system hook thread_switch gets called both through the SVC and
though the PendSV, which can get interrupted by the SVC.
Since calls to the uVisor API are not re-entrant, we need to wrap this
function in an atomic section to prevent faults.
cc @AlessandroA @meriac @Patater","The system hook thread_switch gets called both through the SVC and
though the PendSV, which can get interrupted by the SVC.
Since calls to the uVisor API are not re-entrant, we need to wrap this
function in an atomic section to prevent faults.
cc @AlessandroA @meriac @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,341,2016-09-23T13:07:25Z,2016-09-26T09:34:24Z,2016-09-26T09:34:24Z,MERGED,True,23,1,1,https://github.com/niklas-arm,Wrap thread_switch in an atomic section,1,[],https://github.com/ARMmbed/uvisor/pull/341,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/341#issuecomment-249224644,"The system hook thread_switch gets called both through the SVC and
though the PendSV, which can get interrupted by the SVC.
Since calls to the uVisor API are not re-entrant, we need to wrap this
function in an atomic section to prevent faults.
cc @AlessandroA @meriac @Patater",@meriac,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,342,2016-09-23T14:39:25Z,2016-09-23T15:14:16Z,2016-09-23T15:14:16Z,MERGED,True,4,2,1,https://github.com/Patater,Update description of rpc_fncall_waitfor(),1,[],https://github.com/ARMmbed/uvisor/pull/342,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/342,"The commit that added box_id_caller to rpc_fncall_waitfor() did not also
update the documentation for rpc_fncall_waitfor(). Update the description
of rpc_fncall_waitfor() to include mention of box_id_caller.
Fixes: 34eb5f0 (""rpc: Add box_id_caller to rpc_fncall_waitfor"")
@AlessandroA @niklas-arm @sherrellbc","The commit that added box_id_caller to rpc_fncall_waitfor() did not also
update the documentation for rpc_fncall_waitfor(). Update the description
of rpc_fncall_waitfor() to include mention of box_id_caller.
Fixes: 34eb5f0 (""rpc: Add box_id_caller to rpc_fncall_waitfor"")
@AlessandroA @niklas-arm @sherrellbc",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,342,2016-09-23T14:39:25Z,2016-09-23T15:14:16Z,2016-09-23T15:14:16Z,MERGED,True,4,2,1,https://github.com/Patater,Update description of rpc_fncall_waitfor(),1,[],https://github.com/ARMmbed/uvisor/pull/342,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/342#issuecomment-249218921,"The commit that added box_id_caller to rpc_fncall_waitfor() did not also
update the documentation for rpc_fncall_waitfor(). Update the description
of rpc_fncall_waitfor() to include mention of box_id_caller.
Fixes: 34eb5f0 (""rpc: Add box_id_caller to rpc_fncall_waitfor"")
@AlessandroA @niklas-arm @sherrellbc","Yes, the original commit did update those.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,342,2016-09-23T14:39:25Z,2016-09-23T15:14:16Z,2016-09-23T15:14:16Z,MERGED,True,4,2,1,https://github.com/Patater,Update description of rpc_fncall_waitfor(),1,[],https://github.com/ARMmbed/uvisor/pull/342,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/342#issuecomment-249219739,"The commit that added box_id_caller to rpc_fncall_waitfor() did not also
update the documentation for rpc_fncall_waitfor(). Update the description
of rpc_fncall_waitfor() to include mention of box_id_caller.
Fixes: 34eb5f0 (""rpc: Add box_id_caller to rpc_fncall_waitfor"")
@AlessandroA @niklas-arm @sherrellbc",Thanks!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,343,2016-09-27T09:18:41Z,2016-09-27T12:25:40Z,2017-01-19T15:25:29Z,MERGED,True,2,3,1,https://github.com/AlessandroA,Docs: Update information on examples,1,[],https://github.com/ARMmbed/uvisor/pull/343,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/343,"Now the IRQ example is the main example.
@meriac","Now the IRQ example is the main example.
@meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,344,2016-09-27T09:38:05Z,2016-09-27T10:48:59Z,2016-09-27T16:19:00Z,MERGED,True,8,6,1,https://github.com/Patater,Update Box ID API documentation,1,[],https://github.com/ARMmbed/uvisor/pull/344,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/344,"Now that the RTOS integration has completed and RPC is available, how
the Box ID API works has changed a bit. Update the documentation to
reflect how the Box ID API works now.
@AlessandroA @niklas-arm @meriac
Preview https://github.com/Patater/uvisor/blob/box-id-api-doc/docs/api/API.md#box-identity","Now that the RTOS integration has completed and RPC is available, how
the Box ID API works has changed a bit. Update the documentation to
reflect how the Box ID API works now.
@AlessandroA @niklas-arm @meriac
Preview https://github.com/Patater/uvisor/blob/box-id-api-doc/docs/api/API.md#box-identity",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,344,2016-09-27T09:38:05Z,2016-09-27T10:48:59Z,2016-09-27T16:19:00Z,MERGED,True,8,6,1,https://github.com/Patater,Update Box ID API documentation,1,[],https://github.com/ARMmbed/uvisor/pull/344,https://github.com/mazimkhan,2,https://github.com/ARMmbed/uvisor/pull/344#issuecomment-249916485,"Now that the RTOS integration has completed and RPC is available, how
the Box ID API works has changed a bit. Update the documentation to
reflect how the Box ID API works now.
@AlessandroA @niklas-arm @meriac
Preview https://github.com/Patater/uvisor/blob/box-id-api-doc/docs/api/API.md#box-identity",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,346,2016-09-27T12:21:36Z,2016-09-27T12:29:42Z,2016-09-27T12:29:42Z,CLOSED,False,0,0,0,https://github.com/meriac,Update mbed-os-linker-report link & uVisor example links,0,[],https://github.com/ARMmbed/uvisor/pull/346,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/346,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,347,2016-09-27T12:43:46Z,2016-09-27T12:48:15Z,2016-09-28T13:58:22Z,MERGED,True,3,3,1,https://github.com/meriac,Docs: Update example descriptions,1,[],https://github.com/ARMmbed/uvisor/pull/347,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/347,Minor grammar/typo fixes.,Minor grammar/typo fixes.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,348,2016-09-29T09:26:06Z,2016-09-29T10:17:11Z,2017-01-19T15:25:28Z,MERGED,True,1,0,1,https://github.com/AlessandroA,Make the main box config pointer extern,1,[],https://github.com/ARMmbed/uvisor/pull/348,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/348,"This allows macros or APIs to use the main box as a target for security
operations. A common example is using the SECURE_ACCESS() APIs targeting
box 0.
After this PR is merged, we can remove this commit from the EFM32GG port.
@meriac @Patater @niklas-arm","This allows macros or APIs to use the main box as a target for security
operations. A common example is using the SECURE_ACCESS() APIs targeting
box 0.
After this PR is merged, we can remove this commit from the EFM32GG port.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,349,2016-09-29T10:05:17Z,2016-09-29T10:16:26Z,2016-09-29T10:17:34Z,MERGED,True,11,6,1,https://github.com/Patater,docs: Update template linker script for dynamic legacy heap,1,[],https://github.com/ARMmbed/uvisor/pull/349,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/349,"Update the porting guide's template linker script to create a
dynamically-sized legacy heap (of at least HEAP_SIZE size). This
allows all memory not used by the page heap to be available to the
legacy heap.
@AlessandroA @niklas-arm @meriac
Preview: https://github.com/Patater/uvisor/blob/dynamic-legacy-heap/docs/core/PORTING.md","Update the porting guide's template linker script to create a
dynamically-sized legacy heap (of at least HEAP_SIZE size). This
allows all memory not used by the page heap to be available to the
legacy heap.
@AlessandroA @niklas-arm @meriac
Preview: https://github.com/Patater/uvisor/blob/dynamic-legacy-heap/docs/core/PORTING.md",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,354,2016-10-06T14:41:42Z,2017-05-31T09:43:38Z,2017-05-31T09:43:38Z,CLOSED,False,47,12,8,https://github.com/niklas-arm,Add newlib reent struct to every box.,1,"[""don't merge yet""]",https://github.com/ARMmbed/uvisor/pull/354,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/354,"Tested on v7-M and K64F.
cc @meriac @Patater @AlessandroA","Tested on v7-M and K64F.
cc @meriac @Patater @AlessandroA",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,354,2016-10-06T14:41:42Z,2017-05-31T09:43:38Z,2017-05-31T09:43:38Z,CLOSED,False,47,12,8,https://github.com/niklas-arm,Add newlib reent struct to every box.,1,"[""don't merge yet""]",https://github.com/ARMmbed/uvisor/pull/354,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/354#issuecomment-305140415,"Tested on v7-M and K64F.
cc @meriac @Patater @AlessandroA",Closing as outdated. The functionality was added in #429.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,355,2016-10-06T15:52:54Z,2016-10-12T15:21:13Z,2016-10-12T15:21:13Z,MERGED,True,9,9,1,https://github.com/meriac,Docs: Add dedicated examples list,1,[],https://github.com/ARMmbed/uvisor/pull/355,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/355,"introduces the new uvisor number store example

@AlessandroA @niklas-arm @Patater","introduces the new uvisor number store example

@AlessandroA @niklas-arm @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,355,2016-10-06T15:52:54Z,2016-10-12T15:21:13Z,2016-10-12T15:21:13Z,MERGED,True,9,9,1,https://github.com/meriac,Docs: Add dedicated examples list,1,[],https://github.com/ARMmbed/uvisor/pull/355,https://github.com/mazimkhan,2,https://github.com/ARMmbed/uvisor/pull/355#issuecomment-252014962,"introduces the new uvisor number store example

@AlessandroA @niklas-arm @Patater",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,356,2016-10-11T16:47:37Z,2016-11-14T15:59:48Z,2016-11-14T15:59:48Z,MERGED,True,283,203,9,https://github.com/Patater,Stack fault recovery,8,[],https://github.com/ARMmbed/uvisor/pull/356,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/356,"Recover from stacking and unstacking faults. Reprioritize faults relative to SVC, so we can recover from more faults and also, as a bonus, get better debug messages. (Other miscellaneous fixes are also included.)
Tested on EFM32GG and K64F with a test that fails before this PR's commits are applied and passes after this PR's commits are applied.
@AlessandroA @meriac @niklas-arm","Recover from stacking and unstacking faults. Reprioritize faults relative to SVC, so we can recover from more faults and also, as a bonus, get better debug messages. (Other miscellaneous fixes are also included.)
Tested on EFM32GG and K64F with a test that fails before this PR's commits are applied and passes after this PR's commits are applied.
@AlessandroA @meriac @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,356,2016-10-11T16:47:37Z,2016-11-14T15:59:48Z,2016-11-14T15:59:48Z,MERGED,True,283,203,9,https://github.com/Patater,Stack fault recovery,8,[],https://github.com/ARMmbed/uvisor/pull/356,https://github.com/mazimkhan,2,https://github.com/ARMmbed/uvisor/pull/356#issuecomment-256293156,"Recover from stacking and unstacking faults. Reprioritize faults relative to SVC, so we can recover from more faults and also, as a bonus, get better debug messages. (Other miscellaneous fixes are also included.)
Tested on EFM32GG and K64F with a test that fails before this PR's commits are applied and passes after this PR's commits are applied.
@AlessandroA @meriac @niklas-arm",retest,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,356,2016-10-11T16:47:37Z,2016-11-14T15:59:48Z,2016-11-14T15:59:48Z,MERGED,True,283,203,9,https://github.com/Patater,Stack fault recovery,8,[],https://github.com/ARMmbed/uvisor/pull/356,https://github.com/mazimkhan,3,https://github.com/ARMmbed/uvisor/pull/356#issuecomment-256306040,"Recover from stacking and unstacking faults. Reprioritize faults relative to SVC, so we can recover from more faults and also, as a bonus, get better debug messages. (Other miscellaneous fixes are also included.)
Tested on EFM32GG and K64F with a test that fails before this PR's commits are applied and passes after this PR's commits are applied.
@AlessandroA @meriac @niklas-arm",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,356,2016-10-11T16:47:37Z,2016-11-14T15:59:48Z,2016-11-14T15:59:48Z,MERGED,True,283,203,9,https://github.com/Patater,Stack fault recovery,8,[],https://github.com/ARMmbed/uvisor/pull/356,https://github.com/mazimkhan,4,https://github.com/ARMmbed/uvisor/pull/356#issuecomment-256307438,"Recover from stacking and unstacking faults. Reprioritize faults relative to SVC, so we can recover from more faults and also, as a bonus, get better debug messages. (Other miscellaneous fixes are also included.)
Tested on EFM32GG and K64F with a test that fails before this PR's commits are applied and passes after this PR's commits are applied.
@AlessandroA @meriac @niklas-arm",build uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,356,2016-10-11T16:47:37Z,2016-11-14T15:59:48Z,2016-11-14T15:59:48Z,MERGED,True,283,203,9,https://github.com/Patater,Stack fault recovery,8,[],https://github.com/ARMmbed/uvisor/pull/356,https://github.com/Patater,5,https://github.com/ARMmbed/uvisor/pull/356#issuecomment-258896357,"Recover from stacking and unstacking faults. Reprioritize faults relative to SVC, so we can recover from more faults and also, as a bonus, get better debug messages. (Other miscellaneous fixes are also included.)
Tested on EFM32GG and K64F with a test that fails before this PR's commits are applied and passes after this PR's commits are applied.
@AlessandroA @meriac @niklas-arm",Rebased on latest master,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,356,2016-10-11T16:47:37Z,2016-11-14T15:59:48Z,2016-11-14T15:59:48Z,MERGED,True,283,203,9,https://github.com/Patater,Stack fault recovery,8,[],https://github.com/ARMmbed/uvisor/pull/356,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/356#issuecomment-259718145,"Recover from stacking and unstacking faults. Reprioritize faults relative to SVC, so we can recover from more faults and also, as a bonus, get better debug messages. (Other miscellaneous fixes are also included.)
Tested on EFM32GG and K64F with a test that fails before this PR's commits are applied and passes after this PR's commits are applied.
@AlessandroA @meriac @niklas-arm",Responded to Alessandro's comments,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,356,2016-10-11T16:47:37Z,2016-11-14T15:59:48Z,2016-11-14T15:59:48Z,MERGED,True,283,203,9,https://github.com/Patater,Stack fault recovery,8,[],https://github.com/ARMmbed/uvisor/pull/356,https://github.com/Patater,7,https://github.com/ARMmbed/uvisor/pull/356#issuecomment-259718550,"Recover from stacking and unstacking faults. Reprioritize faults relative to SVC, so we can recover from more faults and also, as a bonus, get better debug messages. (Other miscellaneous fixes are also included.)
Tested on EFM32GG and K64F with a test that fails before this PR's commits are applied and passes after this PR's commits are applied.
@AlessandroA @meriac @niklas-arm",Tests pass on EFM32,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,356,2016-10-11T16:47:37Z,2016-11-14T15:59:48Z,2016-11-14T15:59:48Z,MERGED,True,283,203,9,https://github.com/Patater,Stack fault recovery,8,[],https://github.com/ARMmbed/uvisor/pull/356,https://github.com/Patater,8,https://github.com/ARMmbed/uvisor/pull/356#issuecomment-259721998,"Recover from stacking and unstacking faults. Reprioritize faults relative to SVC, so we can recover from more faults and also, as a bonus, get better debug messages. (Other miscellaneous fixes are also included.)
Tested on EFM32GG and K64F with a test that fails before this PR's commits are applied and passes after this PR's commits are applied.
@AlessandroA @meriac @niklas-arm",Tests pass on K64F,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,356,2016-10-11T16:47:37Z,2016-11-14T15:59:48Z,2016-11-14T15:59:48Z,MERGED,True,283,203,9,https://github.com/Patater,Stack fault recovery,8,[],https://github.com/ARMmbed/uvisor/pull/356,https://github.com/Patater,9,https://github.com/ARMmbed/uvisor/pull/356#issuecomment-260309412,"Recover from stacking and unstacking faults. Reprioritize faults relative to SVC, so we can recover from more faults and also, as a bonus, get better debug messages. (Other miscellaneous fixes are also included.)
Tested on EFM32GG and K64F with a test that fails before this PR's commits are applied and passes after this PR's commits are applied.
@AlessandroA @meriac @niklas-arm",Responded to Alessandro's comments and re-ran tests. Tests are passing on EFM32 and K64F.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,358,2016-10-19T15:43:22Z,2016-10-19T15:50:16Z,2016-10-19T15:50:16Z,MERGED,True,5,5,2,https://github.com/meriac,Fix case sensitive file names in headers,1,[],https://github.com/ARMmbed/uvisor/pull/358,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/358,@AlessandroA @Patater @niklas-arm,@AlessandroA @Patater @niklas-arm,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,359,2016-10-19T15:57:59Z,2016-10-19T15:59:05Z,2017-01-19T15:25:22Z,MERGED,True,14,14,8,https://github.com/AlessandroA,CMSIS: Fix case-sensitive file inclusions,1,[],https://github.com/ARMmbed/uvisor/pull/359,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/359,"This applies the same fix of
a46ded2 ""Fix case sensitive file names in headers""
to all CMSIS header files, including those that are currently unused by uVisor.
@meriac","This applies the same fix of
a46ded2 ""Fix case sensitive file names in headers""
to all CMSIS header files, including those that are currently unused by uVisor.
@meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,360,2016-10-21T13:44:13Z,2016-10-25T10:25:17Z,2016-10-25T10:25:17Z,MERGED,True,15,0,2,https://github.com/iriark01,Adding files for publishing on docs.mbed,2,[],https://github.com/ARMmbed/uvisor/pull/360,https://github.com/iriark01,1,https://github.com/ARMmbed/uvisor/pull/360,"Since we no longer use uvisor_lib, there's no point not using uvisor as the docs source for docs.mbed, instead of uvisor_docs (which merged uvisor_lib and uvisor).
However, this requires adding the YML and an index.md to the repo. I've added them; they shouldn't get in your way too much.","Since we no longer use uvisor_lib, there's no point not using uvisor as the docs source for docs.mbed, instead of uvisor_docs (which merged uvisor_lib and uvisor).
However, this requires adding the YML and an index.md to the repo. I've added them; they shouldn't get in your way too much.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,366,2016-10-25T10:12:48Z,2016-10-26T09:09:59Z,2016-10-26T09:09:59Z,MERGED,True,1,1,1,https://github.com/niklas-arm,Place g_svc_vtor_tbl into Flash not RAM,1,[],https://github.com/ARMmbed/uvisor/pull/366,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/366,cc @AlessandroA,cc @AlessandroA,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,367,2016-10-25T13:02:59Z,2016-10-25T13:05:52Z,2016-10-25T13:05:52Z,MERGED,True,1,1,1,https://github.com/iriark01,Changing directory name,1,[],https://github.com/ARMmbed/uvisor/pull/367,https://github.com/iriark01,1,https://github.com/ARMmbed/uvisor/pull/367,It was so obvious I'd get something wrong. Docs doesn't exist; I need docs.,It was so obvious I'd get something wrong. Docs doesn't exist; I need docs.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,368,2016-10-31T11:46:48Z,2016-10-31T13:44:55Z,2016-10-31T13:44:56Z,MERGED,True,28,10,5,https://github.com/Patater,"Dual flash space caps, and other small fixes",7,[],https://github.com/ARMmbed/uvisor/pull/368,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/368,"These ready-to-go commits were split off from #356, due to implementation of the page invalidation API taking a while. Submitting them earlier will enable better collaboration. See commit messages for details.
@AlessandroA @meriac @niklas-arm","These ready-to-go commits were split off from #356, due to implementation of the page invalidation API taking a while. Submitting them earlier will enable better collaboration. See commit messages for details.
@AlessandroA @meriac @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,368,2016-10-31T11:46:48Z,2016-10-31T13:44:55Z,2016-10-31T13:44:56Z,MERGED,True,28,10,5,https://github.com/Patater,"Dual flash space caps, and other small fixes",7,[],https://github.com/ARMmbed/uvisor/pull/368,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/368#issuecomment-257296872,"These ready-to-go commits were split off from #356, due to implementation of the page invalidation API taking a while. Submitting them earlier will enable better collaboration. See commit messages for details.
@AlessandroA @meriac @niklas-arm","Note: The CI failures are CI-related. Code in the PR has been tested locally, hence merging.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,370,2016-11-01T18:16:49Z,2016-11-08T11:24:26Z,2016-11-08T11:24:26Z,MERGED,True,719,944,33,https://github.com/niklas-arm,Expose uVisor APIs via function table instead of SVC IDs,5,[],https://github.com/ARMmbed/uvisor/pull/370,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/370,"This moves the export table at the beginning of the uVisor binary and allows the application to just call a uVisor function, which then executes a thunk inside uVisor binary which does the SVC with the right ID.
Benchmark API is also removed.
TODO: Porting guide needs to be updated to reflect an additional load:
ldr r0, =uvisor_api
ldr r0, [r0, #8]
blx r0
cc @AlessandroA @Patater @meriac","This moves the export table at the beginning of the uVisor binary and allows the application to just call a uVisor function, which then executes a thunk inside uVisor binary which does the SVC with the right ID.
Benchmark API is also removed.
TODO: Porting guide needs to be updated to reflect an additional load:
ldr r0, =uvisor_api
ldr r0, [r0, #8]
blx r0
cc @AlessandroA @Patater @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,370,2016-11-01T18:16:49Z,2016-11-08T11:24:26Z,2016-11-08T11:24:26Z,MERGED,True,719,944,33,https://github.com/niklas-arm,Expose uVisor APIs via function table instead of SVC IDs,5,[],https://github.com/ARMmbed/uvisor/pull/370,https://github.com/mazimkhan,2,https://github.com/ARMmbed/uvisor/pull/370#issuecomment-258388635,"This moves the export table at the beginning of the uVisor binary and allows the application to just call a uVisor function, which then executes a thunk inside uVisor binary which does the SVC with the right ID.
Benchmark API is also removed.
TODO: Porting guide needs to be updated to reflect an additional load:
ldr r0, =uvisor_api
ldr r0, [r0, #8]
blx r0
cc @AlessandroA @Patater @meriac","The uvisor build and test jobs are misleading. The batch script that does uvisor build does not make Jenkins realise that  make has failed. Will fix it soon.
13:46:50 ./platform/beetle/debug/configuration_beetle_cortex_m3_0x20000000_0x140.linker:8: nonconstant expression for origin
13:46:50 collect2.exe: error: ld returned 1 exit status
13:46:50 make[3]: *** [platform/beetle/debug/configuration_beetle_cortex_m3_0x20000000_0x140.elf] Error 1
13:46:50 make[3]: Leaving directory `c:/jsbld/ws/mbed-os/uvisor-pr-test-pipeline@2/mbed-os/features/FEATURE_UVISOR/importer/TARGET_IGNORE/uvisor'
13:46:50 make[2]: *** [CONFIGURATION_BEETLE_CORTEX_M3_0x20000000_0x140] Error 2
13:46:50 make[2]: Leaving directory `c:/jsbld/ws/mbed-os/uvisor-pr-test-pipeline@2/mbed-os/features/FEATURE_UVISOR/importer/TARGET_IGNORE/uvisor'
13:46:50 make[1]: *** [platform-beetle] Error 2
13:46:50 make[1]: Leaving directory `c:/jsbld/ws/mbed-os/uvisor-pr-test-pipeline@2/mbed-os/features/FEATURE_UVISOR/importer/TARGET_IGNORE/uvisor'
13:46:50 make: *** [uvisor-compile] Error 2
13:46:50 make: Leaving directory `c:/jsbld/ws/mbed-os/uvisor-pr-test-pipeline@2/mbed-os/features/FEATURE_UVISOR/importer'",True,{'THUMBS_UP': ['https://github.com/AlessandroA']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,371,2016-11-04T10:43:42Z,2016-11-04T12:29:00Z,2016-11-04T12:29:00Z,MERGED,True,68,0,1,https://github.com/Patater,Add script to test a range of commits,1,[],https://github.com/ARMmbed/uvisor/pull/371,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/371,"This is handy to see if all the commits you have in your branch, back to
origin/master, each build individually.
@AlessandroA @meriac","This is handy to see if all the commits you have in your branch, back to
origin/master, each build individually.
@AlessandroA @meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,371,2016-11-04T10:43:42Z,2016-11-04T12:29:00Z,2016-11-04T12:29:00Z,MERGED,True,68,0,1,https://github.com/Patater,Add script to test a range of commits,1,[],https://github.com/ARMmbed/uvisor/pull/371,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/371#issuecomment-258398975,"This is handy to see if all the commits you have in your branch, back to
origin/master, each build individually.
@AlessandroA @meriac",I have one idea to improve this script actually. Please allow me to implement before merging.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,371,2016-11-04T10:43:42Z,2016-11-04T12:29:00Z,2016-11-04T12:29:00Z,MERGED,True,68,0,1,https://github.com/Patater,Add script to test a range of commits,1,[],https://github.com/ARMmbed/uvisor/pull/371,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/371#issuecomment-258403235,"This is handy to see if all the commits you have in your branch, back to
origin/master, each build individually.
@AlessandroA @meriac","OK. I made the script return to the initial branch when done. Without this change, the script would always leave you with a detached head.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,372,2016-11-04T12:11:49Z,2016-11-07T13:55:18Z,2017-01-19T15:25:20Z,MERGED,True,378,419,24,https://github.com/AlessandroA,Refactor the vMPU and debug files,10,[],https://github.com/ARMmbed/uvisor/pull/372,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/372,"This PR introduces minor fixes and refactors the debug and vMPU folders.
The idea behind the PR is to make the folder structure in the core folder consistent and to avoid some code duplication.
In addition, the Makefile has been simplified so that (i.) you don't need to manually add source files to the compilation, and (ii.) MPU-specific files are conditionally compiled through filter directories:
The new debug functions (v8-M specific) will be added on top of this PR separately.
core/vmpu/vmpu.c
          kinetis/vmpu_kinetis.c
          kinetis/...
          ...

@meriac @niklas-arm @Patater","This PR introduces minor fixes and refactors the debug and vMPU folders.
The idea behind the PR is to make the folder structure in the core folder consistent and to avoid some code duplication.
In addition, the Makefile has been simplified so that (i.) you don't need to manually add source files to the compilation, and (ii.) MPU-specific files are conditionally compiled through filter directories:
The new debug functions (v8-M specific) will be added on top of this PR separately.
core/vmpu/vmpu.c
          kinetis/vmpu_kinetis.c
          kinetis/...
          ...

@meriac @niklas-arm @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,372,2016-11-04T12:11:49Z,2016-11-07T13:55:18Z,2017-01-19T15:25:20Z,MERGED,True,378,419,24,https://github.com/AlessandroA,Refactor the vMPU and debug files,10,[],https://github.com/ARMmbed/uvisor/pull/372,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/372#issuecomment-258492189,"This PR introduces minor fixes and refactors the debug and vMPU folders.
The idea behind the PR is to make the folder structure in the core folder consistent and to avoid some code duplication.
In addition, the Makefile has been simplified so that (i.) you don't need to manually add source files to the compilation, and (ii.) MPU-specific files are conditionally compiled through filter directories:
The new debug functions (v8-M specific) will be added on top of this PR separately.
core/vmpu/vmpu.c
          kinetis/vmpu_kinetis.c
          kinetis/...
          ...

@meriac @niklas-arm @Patater","The commit ""vMPU: Move files to dedicated folder"" should not rename ""core/debug/src/debug_kinetis.c"" → ""core/debug/src/debug_freescale_k64.c"". Doing so undoes what a previous commit (""Debug: Move debug source code all in same folder"") wanted to do.

Fixed.

Now that all the vmpu_* files are in a vmpu directory, does it still make sense to have vmpu_ in the file names?

I would like to keep vmpu_ as otherwise the purpose of the files is not very clear.

The commit ""Makefile: Automate source file listings"" also renames a bunch of files. Renaming should not be done in this commit which is meant to auto discover source file listings, but in a different commit.

I split the commit into 2 so the changes to the Makefile related to automating the discovery process are cleaner. The new commit still need to rename+change the Makefile, as otherwise the commit itself would not compile.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,372,2016-11-04T12:11:49Z,2016-11-07T13:55:18Z,2017-01-19T15:25:20Z,MERGED,True,378,419,24,https://github.com/AlessandroA,Refactor the vMPU and debug files,10,[],https://github.com/ARMmbed/uvisor/pull/372,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/372#issuecomment-258510516,"This PR introduces minor fixes and refactors the debug and vMPU folders.
The idea behind the PR is to make the folder structure in the core folder consistent and to avoid some code duplication.
In addition, the Makefile has been simplified so that (i.) you don't need to manually add source files to the compilation, and (ii.) MPU-specific files are conditionally compiled through filter directories:
The new debug functions (v8-M specific) will be added on top of this PR separately.
core/vmpu/vmpu.c
          kinetis/vmpu_kinetis.c
          kinetis/...
          ...

@meriac @niklas-arm @Patater","Commit msg fixed.
Rebased to latest ARMmbed/uvisor.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,373,2016-11-08T10:27:16Z,2016-11-08T11:26:30Z,2017-01-19T15:25:18Z,MERGED,True,112,13,1,https://github.com/AlessandroA,Proper syndrome registers debugging,2,[],https://github.com/ARMmbed/uvisor/pull/373,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/373,"This PR makes debugging more user-friendly by explaining in a verbose way the reason for every fault.
@meriac @Patater @niklas-arm","This PR makes debugging more user-friendly by explaining in a verbose way the reason for every fault.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,373,2016-11-08T10:27:16Z,2016-11-08T11:26:30Z,2017-01-19T15:25:18Z,MERGED,True,112,13,1,https://github.com/AlessandroA,Proper syndrome registers debugging,2,[],https://github.com/ARMmbed/uvisor/pull/373,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/373#issuecomment-259104248,"This PR makes debugging more user-friendly by explaining in a verbose way the reason for every fault.
@meriac @Patater @niklas-arm","@Patater Added whole register as well. Now you always get the full register view (HFSR, CFSR or DFSR) and then also the detailed bit-by-bit explanation. On a given fault, only bits specific to that fault are spelled out (UFSR, BFSR, MMFSR views in the CFSR).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,373,2016-11-08T10:27:16Z,2016-11-08T11:26:30Z,2017-01-19T15:25:18Z,MERGED,True,112,13,1,https://github.com/AlessandroA,Proper syndrome registers debugging,2,[],https://github.com/ARMmbed/uvisor/pull/373,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/373#issuecomment-259104501,"This PR makes debugging more user-friendly by explaining in a verbose way the reason for every fault.
@meriac @Patater @niklas-arm",Excellent. Just what the doctor ordered. Thanks!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,374,2016-11-08T13:20:53Z,2016-11-08T13:22:52Z,2016-11-08T13:22:52Z,MERGED,True,12,6,3,https://github.com/niklas-arm,Add a uvisor_init helper function,1,[],https://github.com/ARMmbed/uvisor/pull/374,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/374,"This way no startup script changes are necessary.
Supplements changes of #370.
cc @meriac @AlessandroA @Patater","This way no startup script changes are necessary.
Supplements changes of #370.
cc @meriac @AlessandroA @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,375,2016-11-08T15:57:02Z,2016-11-10T15:07:02Z,2016-11-10T15:07:02Z,MERGED,True,108,83,3,https://github.com/Patater,svc: Make svc_exports.h great again,2,[],https://github.com/ARMmbed/uvisor/pull/375,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/375,"Removing svc_exports.h broke the register-level gateway. Re-create
svc_exports.h with just the minimum needed to make the register-level
gateway work again.
Fixes: f51198c (""Expose all uVisor API via a function table"")
@AlessandroA @meriac @niklas-arm","Removing svc_exports.h broke the register-level gateway. Re-create
svc_exports.h with just the minimum needed to make the register-level
gateway work again.
Fixes: f51198c (""Expose all uVisor API via a function table"")
@AlessandroA @meriac @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,375,2016-11-08T15:57:02Z,2016-11-10T15:07:02Z,2016-11-10T15:07:02Z,MERGED,True,108,83,3,https://github.com/Patater,svc: Make svc_exports.h great again,2,[],https://github.com/ARMmbed/uvisor/pull/375,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/375#issuecomment-259691639,"Removing svc_exports.h broke the register-level gateway. Re-create
svc_exports.h with just the minimum needed to make the register-level
gateway work again.
Fixes: f51198c (""Expose all uVisor API via a function table"")
@AlessandroA @meriac @niklas-arm",Tests pass on EFM32.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,376,2016-11-14T16:24:30Z,2016-11-18T16:47:09Z,2016-11-18T16:47:09Z,MERGED,True,46,1,8,https://github.com/Patater,Add MPU invalidation API and semaphore timeouts,2,[],https://github.com/ARMmbed/uvisor/pull/376,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/376,"This is useful for testing as we can use it to force memory faults to
occur at controlled locations.
Also add semaphore timeout reporting, so that rpc_fncall_waitfor can report timeouts properly.
@AlessandroA @meriac @niklas-arm","This is useful for testing as we can use it to force memory faults to
occur at controlled locations.
Also add semaphore timeout reporting, so that rpc_fncall_waitfor can report timeouts properly.
@AlessandroA @meriac @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,376,2016-11-14T16:24:30Z,2016-11-18T16:47:09Z,2016-11-18T16:47:09Z,MERGED,True,46,1,8,https://github.com/Patater,Add MPU invalidation API and semaphore timeouts,2,[],https://github.com/ARMmbed/uvisor/pull/376,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/376#issuecomment-261571941,"This is useful for testing as we can use it to force memory faults to
occur at controlled locations.
Also add semaphore timeout reporting, so that rpc_fncall_waitfor can report timeouts properly.
@AlessandroA @meriac @niklas-arm","@Patater IIUC this PR is exposing an API that uVisor already had internally (to invalidate the MPU regions) as a way for a user to invalidate all of its current regions. If that's correct, could you please update the commit message?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,376,2016-11-14T16:24:30Z,2016-11-18T16:47:09Z,2016-11-18T16:47:09Z,MERGED,True,46,1,8,https://github.com/Patater,Add MPU invalidation API and semaphore timeouts,2,[],https://github.com/ARMmbed/uvisor/pull/376,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/376#issuecomment-261572587,"This is useful for testing as we can use it to force memory faults to
occur at controlled locations.
Also add semaphore timeout reporting, so that rpc_fncall_waitfor can report timeouts properly.
@AlessandroA @meriac @niklas-arm",Updated commit message,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,376,2016-11-14T16:24:30Z,2016-11-18T16:47:09Z,2016-11-18T16:47:09Z,MERGED,True,46,1,8,https://github.com/Patater,Add MPU invalidation API and semaphore timeouts,2,[],https://github.com/ARMmbed/uvisor/pull/376,https://github.com/meriac,4,https://github.com/ARMmbed/uvisor/pull/376#issuecomment-261579961,"This is useful for testing as we can use it to force memory faults to
occur at controlled locations.
Also add semaphore timeout reporting, so that rpc_fncall_waitfor can report timeouts properly.
@AlessandroA @meriac @niklas-arm",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,379,2016-11-30T13:58:00Z,2016-12-08T11:59:46Z,2016-12-08T11:59:46Z,CLOSED,False,26,5,3,https://github.com/AlessandroA,Docker: Update GCC to 5.4.1 2016q3,1,[],https://github.com/ARMmbed/uvisor/pull/379,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/379,@meriac @Patater @niklas-arm,@meriac @Patater @niklas-arm,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,379,2016-11-30T13:58:00Z,2016-12-08T11:59:46Z,2016-12-08T11:59:46Z,CLOSED,False,26,5,3,https://github.com/AlessandroA,Docker: Update GCC to 5.4.1 2016q3,1,[],https://github.com/ARMmbed/uvisor/pull/379,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/379#issuecomment-265724088,@meriac @Patater @niklas-arm,"Superseded by #382, which is now updated to GCC 6.1. We should keep an eye on the updated version of the Fedora packages though, to get the latest version of arm-none-eabi-gcc which supports the -march=v8-m.main and -mcmse options.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,381,2016-12-07T09:47:27Z,2016-12-07T10:36:52Z,2016-12-07T10:36:52Z,MERGED,True,191,86,8,https://github.com/AlessandroA,Stm32f4 support,3,[],https://github.com/ARMmbed/uvisor/pull/381,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/381,"In the past a tightly-coupled memory (TCM) could be used easily in place
of the SRAM because what uVisor expected in SRAM was simply moved to the
TCM itself.
Now that we have the page heap the situation is different: If uVisor
uses the TCM then only uVisor own memories and the compile-time-defined
boxes private memories are put in the TCM, whereas the page heap stays
in the actual SRAM.
This commit updates the uVisor codebase as follows:

Generalize range-checking functions for physical/public SRAM.
Make sure that sanity checks apply to the correct memory.
Adapt the static MPU region settings for the SRAM to only cover the
public SRAM.

This commit requires an update to our linker scripts, where the
public SRAM start and end addresses are specified. The changes required
will be introduced in a different PR and are captured in the
updated porting guide.
@meriac @Patater @niklas-arm","In the past a tightly-coupled memory (TCM) could be used easily in place
of the SRAM because what uVisor expected in SRAM was simply moved to the
TCM itself.
Now that we have the page heap the situation is different: If uVisor
uses the TCM then only uVisor own memories and the compile-time-defined
boxes private memories are put in the TCM, whereas the page heap stays
in the actual SRAM.
This commit updates the uVisor codebase as follows:

Generalize range-checking functions for physical/public SRAM.
Make sure that sanity checks apply to the correct memory.
Adapt the static MPU region settings for the SRAM to only cover the
public SRAM.

This commit requires an update to our linker scripts, where the
public SRAM start and end addresses are specified. The changes required
will be introduced in a different PR and are captured in the
updated porting guide.
@meriac @Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,382,2016-12-07T11:09:35Z,2016-12-07T16:02:48Z,2016-12-07T16:02:48Z,MERGED,True,12,1,2,https://github.com/meriac,Docker: Fix missing .gitconfig,2,[],https://github.com/ARMmbed/uvisor/pull/382,https://github.com/meriac,1,https://github.com/ARMmbed/uvisor/pull/382,"Add back missing git configuration file for docker build.

enable password storing
'matching' push style
use vim as default editor

@AlessandroA","Add back missing git configuration file for docker build.

enable password storing
'matching' push style
use vim as default editor

@AlessandroA",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,383,2016-12-08T12:11:02Z,2016-12-08T12:14:03Z,2016-12-08T12:17:24Z,MERGED,True,1,0,1,https://github.com/AlessandroA,Fix the uVisor-unsupported version of page allocator,1,[],https://github.com/ARMmbed/uvisor/pull/383,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/383,"Fixes:

a0bd7b9 ""Add support for TCMs used as SRAM""

@meriac","Fixes:

a0bd7b9 ""Add support for TCMs used as SRAM""

@meriac",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,385,2016-12-19T14:08:56Z,2016-12-19T14:37:17Z,2016-12-19T14:37:17Z,MERGED,True,17,28,4,https://github.com/AlessandroA,Docs: Update to latest mbed options,1,[],https://github.com/ARMmbed/uvisor/pull/385,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/385,".build -> BUILD
Debug flag

@meriac @niklas-arm",".build -> BUILD
Debug flag

@meriac @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,386,2016-12-19T14:49:28Z,2016-12-19T14:51:05Z,2017-01-19T15:25:12Z,MERGED,True,11,3,1,https://github.com/AlessandroA,Docs: Improve instructions for GDB,1,[],https://github.com/ARMmbed/uvisor/pull/386,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/386,@meriac,@meriac,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,388,2016-12-20T17:16:52Z,2017-02-08T19:35:55Z,2017-02-08T19:35:55Z,MERGED,True,1,1,1,https://github.com/nchong,Fix out-by-one error in vmpu_mpu_push,1,[],https://github.com/ARMmbed/uvisor/pull/388,https://github.com/nchong,1,https://github.com/ARMmbed/uvisor/pull/388,"See issue #369.
This function pushes a slot/region into the v7M MPU. If g_mpu_slot is equal to ARMv7M_MPU_REGIONS_MAX (say 8) then the overflow check
  (++g_mpu_slot > ARMv7M_MPU_REGIONS_MAX)
    ==
  (8 > 8)
    ==
  false

does not fire (when it should) and the function will access the array g_mpu_priority[8] out-of-bounds and write to an unsupported region number.","See issue #369.
This function pushes a slot/region into the v7M MPU. If g_mpu_slot is equal to ARMv7M_MPU_REGIONS_MAX (say 8) then the overflow check
  (++g_mpu_slot > ARMv7M_MPU_REGIONS_MAX)
    ==
  (8 > 8)
    ==
  false

does not fire (when it should) and the function will access the array g_mpu_priority[8] out-of-bounds and write to an unsupported region number.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,388,2016-12-20T17:16:52Z,2017-02-08T19:35:55Z,2017-02-08T19:35:55Z,MERGED,True,1,1,1,https://github.com/nchong,Fix out-by-one error in vmpu_mpu_push,1,[],https://github.com/ARMmbed/uvisor/pull/388,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/388#issuecomment-278398365,"See issue #369.
This function pushes a slot/region into the v7M MPU. If g_mpu_slot is equal to ARMv7M_MPU_REGIONS_MAX (say 8) then the overflow check
  (++g_mpu_slot > ARMv7M_MPU_REGIONS_MAX)
    ==
  (8 > 8)
    ==
  false

does not fire (when it should) and the function will access the array g_mpu_priority[8] out-of-bounds and write to an unsupported region number.",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,389,2016-12-20T17:19:16Z,,2017-09-28T13:38:25Z,OPEN,False,3,2,2,https://github.com/nchong,Fix enabling v7M MPU too early,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/389,https://github.com/nchong,1,https://github.com/ARMmbed/uvisor/pull/389,"See issue #380.
Move call to vmpu_mpu_lock() after vmpu_load_box(). This guarantees that all RBAR/RASR registers have been written-to (by vmpu_mpu_invalidate()) before the MPU is enabled.
My only concern is whether this change is compatible with the Kinetis MPU.","See issue #380.
Move call to vmpu_mpu_lock() after vmpu_load_box(). This guarantees that all RBAR/RASR registers have been written-to (by vmpu_mpu_invalidate()) before the MPU is enabled.
My only concern is whether this change is compatible with the Kinetis MPU.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,389,2016-12-20T17:19:16Z,,2017-09-28T13:38:25Z,OPEN,False,3,2,2,https://github.com/nchong,Fix enabling v7M MPU too early,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/389,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/389#issuecomment-319055450,"See issue #380.
Move call to vmpu_mpu_lock() after vmpu_load_box(). This guarantees that all RBAR/RASR registers have been written-to (by vmpu_mpu_invalidate()) before the MPU is enabled.
My only concern is whether this change is compatible with the Kinetis MPU.",Please rebase on latest uVisor.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,390,2017-01-05T13:03:05Z,2017-01-06T11:16:29Z,2017-01-06T11:16:30Z,MERGED,True,14,4,1,https://github.com/Patater,Enable K64F DMA,2,[],https://github.com/ARMmbed/uvisor/pull/390,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/390,@AlessandroA @meriac @niklas-arm,@AlessandroA @meriac @niklas-arm,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,395,2017-01-12T21:48:50Z,2017-01-13T10:50:21Z,2017-01-13T10:50:21Z,MERGED,True,35,35,1,https://github.com/AnotherButler,Update QUICKSTART.md,1,[],https://github.com/ARMmbed/uvisor/pull/395,https://github.com/AnotherButler,1,https://github.com/ARMmbed/uvisor/pull/395,"-Remove idioms
-Change passive to active voice
-Make other minor grammar changes","-Remove idioms
-Change passive to active voice
-Make other minor grammar changes",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,395,2017-01-12T21:48:50Z,2017-01-13T10:50:21Z,2017-01-13T10:50:21Z,MERGED,True,35,35,1,https://github.com/AnotherButler,Update QUICKSTART.md,1,[],https://github.com/ARMmbed/uvisor/pull/395,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/395#issuecomment-272404808,"-Remove idioms
-Change passive to active voice
-Make other minor grammar changes","I'm going to test the updated code and report back here when finished. Meanwhile, thanks a lot for the patch @AnotherButler.
Once this PR is merged, I will propose another couple commits to fix some outdated semantics and will then export the doc to mbed OS via a separate PR.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,395,2017-01-12T21:48:50Z,2017-01-13T10:50:21Z,2017-01-13T10:50:21Z,MERGED,True,35,35,1,https://github.com/AnotherButler,Update QUICKSTART.md,1,[],https://github.com/ARMmbed/uvisor/pull/395,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/395#issuecomment-272415049,"-Remove idioms
-Change passive to active voice
-Make other minor grammar changes",Update: The example works but because of some previous changes in the wait() API implementation we need to add a new ACL to the list provided in the doc for the guide to work. I will merge this PR and then create a new one containing the updated example.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,396,2017-01-13T16:57:57Z,2017-01-17T12:38:32Z,2017-01-19T15:25:09Z,MERGED,True,106,96,13,https://github.com/AlessandroA,Quickstart example update,2,[],https://github.com/ARMmbed/uvisor/pull/396,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/396,"This PR updates the quickstart guide with a more practical example. The features presented are the same but the code is simpler.
The PR also includes a commit that updates our semantics from main box to public box.
@AnotherButler could you please review the changes?
@Patater @niklas-arm let me know if you think the step-by-step example could be made easier/more meaningful.","This PR updates the quickstart guide with a more practical example. The features presented are the same but the code is simpler.
The PR also includes a commit that updates our semantics from main box to public box.
@AnotherButler could you please review the changes?
@Patater @niklas-arm let me know if you think the step-by-step example could be made easier/more meaningful.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,396,2017-01-13T16:57:57Z,2017-01-17T12:38:32Z,2017-01-19T15:25:09Z,MERGED,True,106,96,13,https://github.com/AlessandroA,Quickstart example update,2,[],https://github.com/ARMmbed/uvisor/pull/396,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/396#issuecomment-272838788,"This PR updates the quickstart guide with a more practical example. The features presented are the same but the code is simpler.
The PR also includes a commit that updates our semantics from main box to public box.
@AnotherButler could you please review the changes?
@Patater @niklas-arm let me know if you think the step-by-step example could be made easier/more meaningful.","@Patater I updated the commit that replaces occurrences of main box (or any slight variation) with public box. This applies also to main_cfg_ptr which has become public_box_cfg_ptr (Note: This is not a publicly available pointer, but the name has been changed for consistency).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,400,2017-01-19T14:16:39Z,2017-01-19T15:18:20Z,2017-01-19T15:25:07Z,MERGED,True,15,19,2,https://github.com/AlessandroA,Docs: Fix sample code for debug box,3,[],https://github.com/ARMmbed/uvisor/pull/400,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/400,"Fixes:

#392: ""A quick change in debugging documentation""

@niklas-arm @Patater
Thanks @asensaoui @janjongboom for also reporting this.","Fixes:

#392: ""A quick change in debugging documentation""

@niklas-arm @Patater
Thanks @asensaoui @janjongboom for also reporting this.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,400,2017-01-19T14:16:39Z,2017-01-19T15:18:20Z,2017-01-19T15:25:07Z,MERGED,True,15,19,2,https://github.com/AlessandroA,Docs: Fix sample code for debug box,3,[],https://github.com/ARMmbed/uvisor/pull/400,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/400#issuecomment-273792053,"Fixes:

#392: ""A quick change in debugging documentation""

@niklas-arm @Patater
Thanks @asensaoui @janjongboom for also reporting this.",@Patater added clarification regarding reboot from a debug box handler.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,402,2017-01-26T15:57:47Z,2017-01-27T17:05:43Z,2017-01-27T17:05:43Z,MERGED,True,3,5,1,https://github.com/janjongboom,PIT peripheral is required on K64F,1,[],https://github.com/ARMmbed/uvisor/pull/402,https://github.com/janjongboom,1,https://github.com/ARMmbed/uvisor/pull/402,"@AlessandroA
FYI, I'm adding RPC guide and how to use flash storage to the quickstart guide. Will come tomorrow or so.","@AlessandroA
FYI, I'm adding RPC guide and how to use flash storage to the quickstart guide. Will come tomorrow or so.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,403,2017-01-26T17:15:29Z,2017-02-07T11:37:33Z,2017-02-07T11:37:33Z,MERGED,True,116,159,10,https://github.com/niklas-arm,First box to call NVIC owns the interrupt,3,[],https://github.com/ARMmbed/uvisor/pull/403,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/403,"This also copies the initial VTOR table from flash to ram and sets correct priority. That way, statically allocated interrupts are preserved and need only be enabled.
cc @AlessandroA @Patater","This also copies the initial VTOR table from flash to ram and sets correct priority. That way, statically allocated interrupts are preserved and need only be enabled.
cc @AlessandroA @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,403,2017-01-26T17:15:29Z,2017-02-07T11:37:33Z,2017-02-07T11:37:33Z,MERGED,True,116,159,10,https://github.com/niklas-arm,First box to call NVIC owns the interrupt,3,[],https://github.com/ARMmbed/uvisor/pull/403,https://github.com/niklas-arm,2,https://github.com/ARMmbed/uvisor/pull/403#issuecomment-276337625,"This also copies the initial VTOR table from flash to ram and sets correct priority. That way, statically allocated interrupts are preserved and need only be enabled.
cc @AlessandroA @Patater",Updated for review.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,403,2017-01-26T17:15:29Z,2017-02-07T11:37:33Z,2017-02-07T11:37:33Z,MERGED,True,116,159,10,https://github.com/niklas-arm,First box to call NVIC owns the interrupt,3,[],https://github.com/ARMmbed/uvisor/pull/403,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/403#issuecomment-276931004,"This also copies the initial VTOR table from flash to ram and sets correct priority. That way, statically allocated interrupts are preserved and need only be enabled.
cc @AlessandroA @Patater","@niklas-arm As part of this PR you should also quickly update the docs. Please scan the docs folder for occurrences of the NVIC APIs. While the APIs haven't changed, the underlying behavior has.
This includes at least:

https://github.com/ARMmbed/uvisor/blob/master/docs/api/API.md
https://github.com/ARMmbed/uvisor/blob/master/docs/api/QUICKSTART.md

Please specify the new behavior (no need to set an ISR first; first box touching an IRQ gets the IRQ; you cannot release ownership of an IRQ; if you don't set an IRQ you get the box 0 default one).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,403,2017-01-26T17:15:29Z,2017-02-07T11:37:33Z,2017-02-07T11:37:33Z,MERGED,True,116,159,10,https://github.com/niklas-arm,First box to call NVIC owns the interrupt,3,[],https://github.com/ARMmbed/uvisor/pull/403,https://github.com/niklas-arm,4,https://github.com/ARMmbed/uvisor/pull/403#issuecomment-276983579,"This also copies the initial VTOR table from flash to ram and sets correct priority. That way, statically allocated interrupts are preserved and need only be enabled.
cc @AlessandroA @Patater",Updated.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,403,2017-01-26T17:15:29Z,2017-02-07T11:37:33Z,2017-02-07T11:37:33Z,MERGED,True,116,159,10,https://github.com/niklas-arm,First box to call NVIC owns the interrupt,3,[],https://github.com/ARMmbed/uvisor/pull/403,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/403#issuecomment-277020044,"This also copies the initial VTOR table from flash to ram and sets correct priority. That way, statically allocated interrupts are preserved and need only be enabled.
cc @AlessandroA @Patater",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,403,2017-01-26T17:15:29Z,2017-02-07T11:37:33Z,2017-02-07T11:37:33Z,MERGED,True,116,159,10,https://github.com/niklas-arm,First box to call NVIC owns the interrupt,3,[],https://github.com/ARMmbed/uvisor/pull/403,https://github.com/AlessandroA,6,https://github.com/ARMmbed/uvisor/pull/403#issuecomment-277230134,"This also copies the initial VTOR table from flash to ram and sets correct priority. That way, statically allocated interrupts are preserved and need only be enabled.
cc @AlessandroA @Patater",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,403,2017-01-26T17:15:29Z,2017-02-07T11:37:33Z,2017-02-07T11:37:33Z,MERGED,True,116,159,10,https://github.com/niklas-arm,First box to call NVIC owns the interrupt,3,[],https://github.com/ARMmbed/uvisor/pull/403,https://github.com/AlessandroA,7,https://github.com/ARMmbed/uvisor/pull/403#issuecomment-277305484,"This also copies the initial VTOR table from flash to ram and sets correct priority. That way, statically allocated interrupts are preserved and need only be enabled.
cc @AlessandroA @Patater",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,403,2017-01-26T17:15:29Z,2017-02-07T11:37:33Z,2017-02-07T11:37:33Z,MERGED,True,116,159,10,https://github.com/niklas-arm,First box to call NVIC owns the interrupt,3,[],https://github.com/ARMmbed/uvisor/pull/403,https://github.com/AlessandroA,8,https://github.com/ARMmbed/uvisor/pull/403#issuecomment-277968092,"This also copies the initial VTOR table from flash to ram and sets correct priority. That way, statically allocated interrupts are preserved and need only be enabled.
cc @AlessandroA @Patater",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,404,2017-01-27T12:22:33Z,2017-02-10T11:51:54Z,2017-02-10T11:51:54Z,CLOSED,False,120,13,2,https://github.com/janjongboom,RPC and non-volatile storage from a secure box,4,[],https://github.com/ARMmbed/uvisor/pull/404,https://github.com/janjongboom,1,https://github.com/ARMmbed/uvisor/pull/404,"Depends on #402.
Add documentation on:

How to set up RPC to call functions in a secure box from the main box.
How to use non-volatile storage from a secure box.

Plus a nit on how to netcat to devices controlled by pyOCD or OpenOCD (as that took me a while to figure out).
@AlessandroA @iriark01","Depends on #402.
Add documentation on:

How to set up RPC to call functions in a secure box from the main box.
How to use non-volatile storage from a secure box.

Plus a nit on how to netcat to devices controlled by pyOCD or OpenOCD (as that took me a while to figure out).
@AlessandroA @iriark01",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,404,2017-01-27T12:22:33Z,2017-02-10T11:51:54Z,2017-02-10T11:51:54Z,CLOSED,False,120,13,2,https://github.com/janjongboom,RPC and non-volatile storage from a secure box,4,[],https://github.com/ARMmbed/uvisor/pull/404,https://github.com/janjongboom,2,https://github.com/ARMmbed/uvisor/pull/404#issuecomment-276725155,"Depends on #402.
Add documentation on:

How to set up RPC to call functions in a secure box from the main box.
How to use non-volatile storage from a secure box.

Plus a nit on how to netcat to devices controlled by pyOCD or OpenOCD (as that took me a while to figure out).
@AlessandroA @iriark01",@AlessandroA ping,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,404,2017-01-27T12:22:33Z,2017-02-10T11:51:54Z,2017-02-10T11:51:54Z,CLOSED,False,120,13,2,https://github.com/janjongboom,RPC and non-volatile storage from a secure box,4,[],https://github.com/ARMmbed/uvisor/pull/404,https://github.com/janjongboom,3,https://github.com/ARMmbed/uvisor/pull/404#issuecomment-278278422,"Depends on #402.
Add documentation on:

How to set up RPC to call functions in a secure box from the main box.
How to use non-volatile storage from a secure box.

Plus a nit on how to netcat to devices controlled by pyOCD or OpenOCD (as that took me a while to figure out).
@AlessandroA @iriark01",@AlessandroA @meriac ping,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,404,2017-01-27T12:22:33Z,2017-02-10T11:51:54Z,2017-02-10T11:51:54Z,CLOSED,False,120,13,2,https://github.com/janjongboom,RPC and non-volatile storage from a secure box,4,[],https://github.com/ARMmbed/uvisor/pull/404,https://github.com/janjongboom,4,https://github.com/ARMmbed/uvisor/pull/404#issuecomment-278925248,"Depends on #402.
Add documentation on:

How to set up RPC to call functions in a secure box from the main box.
How to use non-volatile storage from a secure box.

Plus a nit on how to netcat to devices controlled by pyOCD or OpenOCD (as that took me a while to figure out).
@AlessandroA @iriark01",See #407 and #408.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,405,2017-02-03T12:28:07Z,2017-02-03T13:06:39Z,2017-02-03T13:06:39Z,MERGED,True,8,8,1,https://github.com/AlessandroA,Replace main -> public_box in secure access macros,1,[],https://github.com/ARMmbed/uvisor/pull/405,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/405,"The same fix will need to go into mbed OS when we export uVisor.
@Patater","The same fix will need to go into mbed OS when we export uVisor.
@Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,406,2017-02-08T17:01:06Z,2017-02-08T17:19:46Z,2017-02-08T17:19:46Z,MERGED,True,1,1,1,https://github.com/Patater,cmsis: Include the correct uvisor-lib.h,1,[],https://github.com/ARMmbed/uvisor/pull/406,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/406,"Currently, we include uvisor-lib.h from a potentially ambiguous place in
core_cmSecureAccess.h. Include the library name in the include path to
ensure we include the correct uvisor-lib.h, independent of the include
folder order.
@AlessandroA @niklas-arm","Currently, we include uvisor-lib.h from a potentially ambiguous place in
core_cmSecureAccess.h. Include the library name in the include path to
ensure we include the correct uvisor-lib.h, independent of the include
folder order.
@AlessandroA @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,407,2017-02-10T11:51:06Z,2017-02-15T14:32:44Z,2017-02-15T14:32:44Z,MERGED,True,120,13,2,https://github.com/janjongboom,Add 'Expose public secure entry points to a secure box' section to the uVisor documentation,1,[],https://github.com/ARMmbed/uvisor/pull/407,https://github.com/janjongboom,1,https://github.com/ARMmbed/uvisor/pull/407,"@AlessandroA  @iriark01
Follow up from #404.","@AlessandroA  @iriark01
Follow up from #404.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,407,2017-02-10T11:51:06Z,2017-02-15T14:32:44Z,2017-02-15T14:32:44Z,MERGED,True,120,13,2,https://github.com/janjongboom,Add 'Expose public secure entry points to a secure box' section to the uVisor documentation,1,[],https://github.com/ARMmbed/uvisor/pull/407,https://github.com/janjongboom,2,https://github.com/ARMmbed/uvisor/pull/407#issuecomment-279674639,"@AlessandroA  @iriark01
Follow up from #404.",@AlessandroA ping,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,408,2017-02-10T11:51:37Z,2017-10-03T08:17:01Z,2017-10-03T08:17:01Z,CLOSED,False,143,0,2,https://github.com/janjongboom,Add 'Using non-volatile storage from uVisor on mbed OS' section to the uVisor docs,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/408,https://github.com/janjongboom,1,https://github.com/ARMmbed/uvisor/pull/408,"Needs #407, follow up from #404.
@AlessandroA @iriark01","Needs #407, follow up from #404.
@AlessandroA @iriark01",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,408,2017-02-10T11:51:37Z,2017-10-03T08:17:01Z,2017-10-03T08:17:01Z,CLOSED,False,143,0,2,https://github.com/janjongboom,Add 'Using non-volatile storage from uVisor on mbed OS' section to the uVisor docs,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/408,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/408#issuecomment-332850106,"Needs #407, follow up from #404.
@AlessandroA @iriark01",#407 has been merged,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,408,2017-02-10T11:51:37Z,2017-10-03T08:17:01Z,2017-10-03T08:17:01Z,CLOSED,False,143,0,2,https://github.com/janjongboom,Add 'Using non-volatile storage from uVisor on mbed OS' section to the uVisor docs,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/408,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/408#issuecomment-332850200,"Needs #407, follow up from #404.
@AlessandroA @iriark01",Sorry for the delay in reviewing. Please rebase on latest uVisor.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,408,2017-02-10T11:51:37Z,2017-10-03T08:17:01Z,2017-10-03T08:17:01Z,CLOSED,False,143,0,2,https://github.com/janjongboom,Add 'Using non-volatile storage from uVisor on mbed OS' section to the uVisor docs,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/408,https://github.com/janjongboom,4,https://github.com/ARMmbed/uvisor/pull/408#issuecomment-332869368,"Needs #407, follow up from #404.
@AlessandroA @iriark01",@AlessandroA You had reservations about this article. Is that still the case?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,408,2017-02-10T11:51:37Z,2017-10-03T08:17:01Z,2017-10-03T08:17:01Z,CLOSED,False,143,0,2,https://github.com/janjongboom,Add 'Using non-volatile storage from uVisor on mbed OS' section to the uVisor docs,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/408,https://github.com/Patater,5,https://github.com/ARMmbed/uvisor/pull/408#issuecomment-332877223,"Needs #407, follow up from #404.
@AlessandroA @iriark01","@janjongboom I had a thorough look through and am fine with it, and removed ""don't merge yet"".",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,408,2017-02-10T11:51:37Z,2017-10-03T08:17:01Z,2017-10-03T08:17:01Z,CLOSED,False,143,0,2,https://github.com/janjongboom,Add 'Using non-volatile storage from uVisor on mbed OS' section to the uVisor docs,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/408,https://github.com/janjongboom,6,https://github.com/ARMmbed/uvisor/pull/408#issuecomment-333444770,"Needs #407, follow up from #404.
@AlessandroA @iriark01","@Patater, addressed your comments, verified working on Mbed OS 5.6, and updated semi-hosting messages based on Mbed OS 5.6.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,408,2017-02-10T11:51:37Z,2017-10-03T08:17:01Z,2017-10-03T08:17:01Z,CLOSED,False,143,0,2,https://github.com/janjongboom,Add 'Using non-volatile storage from uVisor on mbed OS' section to the uVisor docs,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/408,https://github.com/janjongboom,7,https://github.com/ARMmbed/uvisor/pull/408#issuecomment-333729557,"Needs #407, follow up from #404.
@AlessandroA @iriark01",@AnotherButler @Patater Fixed.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,408,2017-02-10T11:51:37Z,2017-10-03T08:17:01Z,2017-10-03T08:17:01Z,CLOSED,False,143,0,2,https://github.com/janjongboom,Add 'Using non-volatile storage from uVisor on mbed OS' section to the uVisor docs,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/408,https://github.com/janjongboom,8,https://github.com/ARMmbed/uvisor/pull/408#issuecomment-333759914,"Needs #407, follow up from #404.
@AlessandroA @iriark01",@Patater Squashed,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,408,2017-02-10T11:51:37Z,2017-10-03T08:17:01Z,2017-10-03T08:17:01Z,CLOSED,False,143,0,2,https://github.com/janjongboom,Add 'Using non-volatile storage from uVisor on mbed OS' section to the uVisor docs,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/408,https://github.com/Patater,9,https://github.com/ARMmbed/uvisor/pull/408#issuecomment-333772360,"Needs #407, follow up from #404.
@AlessandroA @iriark01",Merged manually after minor additional fixups,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,409,2017-02-14T14:59:13Z,,2017-10-10T09:47:25Z,OPEN,False,103,0,1,https://github.com/Patater,docs: Add initial uVisor Onboarding Guide,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/409,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/409,"Preview available at https://github.com/Patater/uvisor/blob/onboard/docs/core/ONBOARD.md
@AlessandroA @niklas-arm","Preview available at https://github.com/Patater/uvisor/blob/onboard/docs/core/ONBOARD.md
@AlessandroA @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,409,2017-02-14T14:59:13Z,,2017-10-10T09:47:25Z,OPEN,False,103,0,1,https://github.com/Patater,docs: Add initial uVisor Onboarding Guide,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/409,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/409#issuecomment-280026887,"Preview available at https://github.com/Patater/uvisor/blob/onboard/docs/core/ONBOARD.md
@AlessandroA @niklas-arm","As this document will likely grow a lot in the future, I think we should stay away from colloquial sentences and stick to concise bullet points.
As for the structure, a long time ago we moved away from 80-col files for markdown because of a requirement from the docs team (apparently it was not rendered well or something like that). Now all of our docs are unwrapped. I prefer the 80-col limit much more, but it would now break consistency. What do you think? @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,409,2017-02-14T14:59:13Z,,2017-10-10T09:47:25Z,OPEN,False,103,0,1,https://github.com/Patater,docs: Add initial uVisor Onboarding Guide,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/409,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/409#issuecomment-280027973,"Preview available at https://github.com/Patater/uvisor/blob/onboard/docs/core/ONBOARD.md
@AlessandroA @niklas-arm","Consise bullet points are boring. We've got to have some style in our voice. The onboarding guide isn't really meant to be overall technical, and certainly the introduction needs to be informal and fun. There are technical portions, and where it is technical, we already do use bullet points where it makes sense to do so.
This wasn't written to be processed by the docs team, but for easy reading and editing among ourselves. If we do want it to be processed by the docs team at some point, we should file an issue to fix the 80 columns problem. It's so much easier to edit with the 80 column limit.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,409,2017-02-14T14:59:13Z,,2017-10-10T09:47:25Z,OPEN,False,103,0,1,https://github.com/Patater,docs: Add initial uVisor Onboarding Guide,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/409,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/409#issuecomment-290388447,"Preview available at https://github.com/Patater/uvisor/blob/onboard/docs/core/ONBOARD.md
@AlessandroA @niklas-arm",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,409,2017-02-14T14:59:13Z,,2017-10-10T09:47:25Z,OPEN,False,103,0,1,https://github.com/Patater,docs: Add initial uVisor Onboarding Guide,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/409,https://github.com/AnotherButler,5,https://github.com/ARMmbed/uvisor/pull/409#issuecomment-330918962,"Preview available at https://github.com/Patater/uvisor/blob/onboard/docs/core/ONBOARD.md
@AlessandroA @niklas-arm","@Patater Is this an internal document for our team to use, or is this technical documentation for contributors?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,409,2017-02-14T14:59:13Z,,2017-10-10T09:47:25Z,OPEN,False,103,0,1,https://github.com/Patater,docs: Add initial uVisor Onboarding Guide,1,['needs: review'],https://github.com/ARMmbed/uvisor/pull/409,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/409#issuecomment-331069789,"Preview available at https://github.com/Patater/uvisor/blob/onboard/docs/core/ONBOARD.md
@AlessandroA @niklas-arm","@AnotherButler This is somewhat technical (although not ""tech writing"") documentation for all contributors. We keep internal documents internal.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,411,2017-02-14T22:21:15Z,2017-03-08T22:26:26Z,2017-03-09T09:16:32Z,MERGED,True,552,692,9,https://github.com/AnotherButler,Copy edit uVisor documents,1,[],https://github.com/ARMmbed/uvisor/pull/411,https://github.com/AnotherButler,1,https://github.com/ARMmbed/uvisor/pull/411,"Update uVisor documents for active voice, consistency, grammar and spelling","Update uVisor documents for active voice, consistency, grammar and spelling",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,412,2017-02-15T13:10:19Z,2017-02-21T11:27:25Z,2017-02-21T11:27:25Z,MERGED,True,432,330,15,https://github.com/AlessandroA,vMPU refactoring,19,[],https://github.com/ARMmbed/uvisor/pull/412,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/412,"This PR refactors the vMPU code that enumerates boxes.
The refactoring brings the following changes:

Parts of vmpu_enumerate_boxes have been moved to other functions, which makes it easier to read the code.
The code has been updated to reflect the migration from simple ""per-box context + stack"" model to ""per-box BSS sections + stack"", where the BSS sections contain multiple items (index, context, heap, RPC queues).

There is now a unified way to read and reason about the BSS sections, by using the UvisorBssSections struct.


Added an optimization for ARMv7-M:

Boxes are enumerated based on the order that minimizes the SRAM usage.
If the total SRAM usage exceeds the available allocated space, then the error message which is printed before halting suggests the space to allocate to remove the memory overflow.



Note: This refactoring breaks backwards compatibility, in that it removes the magic pointer uvisor_ctx.
A __uvisor_ctx pointer is now introduced, which still points to the user context for each box — but it's now a void * pointer. This means that box developers will have to cast it to their own context structure.
Although this is a UX change, I believe it makes it more explicit (from a semantics perspective it's a bit confusing that uvisor_ctx, never explicitly declared, means something different in each box). This point is open to discussion, but keep in mind that in the future we will likely expose the whole UvisorBoxIndex instead of just the context pointer. Developers will need to be aware that the index is a box-agnostic structure of pointers that uVisor switches in and out when switching processes.
@Patater @niklas-arm","This PR refactors the vMPU code that enumerates boxes.
The refactoring brings the following changes:

Parts of vmpu_enumerate_boxes have been moved to other functions, which makes it easier to read the code.
The code has been updated to reflect the migration from simple ""per-box context + stack"" model to ""per-box BSS sections + stack"", where the BSS sections contain multiple items (index, context, heap, RPC queues).

There is now a unified way to read and reason about the BSS sections, by using the UvisorBssSections struct.


Added an optimization for ARMv7-M:

Boxes are enumerated based on the order that minimizes the SRAM usage.
If the total SRAM usage exceeds the available allocated space, then the error message which is printed before halting suggests the space to allocate to remove the memory overflow.



Note: This refactoring breaks backwards compatibility, in that it removes the magic pointer uvisor_ctx.
A __uvisor_ctx pointer is now introduced, which still points to the user context for each box — but it's now a void * pointer. This means that box developers will have to cast it to their own context structure.
Although this is a UX change, I believe it makes it more explicit (from a semantics perspective it's a bit confusing that uvisor_ctx, never explicitly declared, means something different in each box). This point is open to discussion, but keep in mind that in the future we will likely expose the whole UvisorBoxIndex instead of just the context pointer. Developers will need to be aware that the index is a box-agnostic structure of pointers that uVisor switches in and out when switching processes.
@Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,417,2017-03-09T10:41:28Z,2017-04-11T09:30:10Z,2017-04-11T09:30:10Z,MERGED,True,8,8,1,https://github.com/AnotherButler,Update QUICKSTART.md,2,[],https://github.com/ARMmbed/uvisor/pull/417,https://github.com/AnotherButler,1,https://github.com/ARMmbed/uvisor/pull/417,"Copy edit new section of Quickstart.

First commit is only grammar changes and does not require a review [as labeled]
Second commit is active voice and consistent person and requires a review [as labeled]

@AlessandroA","Copy edit new section of Quickstart.

First commit is only grammar changes and does not require a review [as labeled]
Second commit is active voice and consistent person and requires a review [as labeled]

@AlessandroA",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,417,2017-03-09T10:41:28Z,2017-04-11T09:30:10Z,2017-04-11T09:30:10Z,MERGED,True,8,8,1,https://github.com/AnotherButler,Update QUICKSTART.md,2,[],https://github.com/ARMmbed/uvisor/pull/417,https://github.com/AnotherButler,2,https://github.com/ARMmbed/uvisor/pull/417#issuecomment-292996104,"Copy edit new section of Quickstart.

First commit is only grammar changes and does not require a review [as labeled]
Second commit is active voice and consistent person and requires a review [as labeled]

@AlessandroA",@AlessandroA Can I help get this merged in any way?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,417,2017-03-09T10:41:28Z,2017-04-11T09:30:10Z,2017-04-11T09:30:10Z,MERGED,True,8,8,1,https://github.com/AnotherButler,Update QUICKSTART.md,2,[],https://github.com/ARMmbed/uvisor/pull/417,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/417#issuecomment-293198028,"Copy edit new section of Quickstart.

First commit is only grammar changes and does not require a review [as labeled]
Second commit is active voice and consistent person and requires a review [as labeled]

@AlessandroA",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,417,2017-03-09T10:41:28Z,2017-04-11T09:30:10Z,2017-04-11T09:30:10Z,MERGED,True,8,8,1,https://github.com/AnotherButler,Update QUICKSTART.md,2,[],https://github.com/ARMmbed/uvisor/pull/417,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/417#issuecomment-293203011,"Copy edit new section of Quickstart.

First commit is only grammar changes and does not require a review [as labeled]
Second commit is active voice and consistent person and requires a review [as labeled]

@AlessandroA",Sorry for the delay!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,419,2017-03-21T11:43:07Z,2017-03-30T11:53:46Z,2017-03-30T11:53:46Z,MERGED,True,1,0,1,https://github.com/iriark01,Adding API page,1,[],https://github.com/ARMmbed/uvisor/pull/419,https://github.com/iriark01,1,https://github.com/ARMmbed/uvisor/pull/419,"It's not in the YML, meaning it's not built by the docs system","It's not in the YML, meaning it's not built by the docs system",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,419,2017-03-21T11:43:07Z,2017-03-30T11:53:46Z,2017-03-30T11:53:46Z,MERGED,True,1,0,1,https://github.com/iriark01,Adding API page,1,[],https://github.com/ARMmbed/uvisor/pull/419,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/419#issuecomment-290067324,"It's not in the YML, meaning it's not built by the docs system",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,419,2017-03-21T11:43:07Z,2017-03-30T11:53:46Z,2017-03-30T11:53:46Z,MERGED,True,1,0,1,https://github.com/iriark01,Adding API page,1,[],https://github.com/ARMmbed/uvisor/pull/419,https://github.com/iriark01,3,https://github.com/ARMmbed/uvisor/pull/419#issuecomment-290093744,"It's not in the YML, meaning it's not built by the docs system","Sorry, what?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,419,2017-03-21T11:43:07Z,2017-03-30T11:53:46Z,2017-03-30T11:53:46Z,MERGED,True,1,0,1,https://github.com/iriark01,Adding API page,1,[],https://github.com/ARMmbed/uvisor/pull/419,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/419#issuecomment-290123214,"It's not in the YML, meaning it's not built by the docs system",@iriark01 It's an automated message to let the CI to retest uVisor :) The tests should all be green — We're currently looking into why they're not.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,421,2017-04-07T11:14:01Z,2017-04-07T12:13:34Z,2017-04-07T12:13:34Z,MERGED,True,3,3,1,https://github.com/Patater,"Makefile: Build uVisor for M3, even on M4s",1,[],https://github.com/ARMmbed/uvisor/pull/421,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/421,"Currently, uVisor builds with -mcpu=cortex-m4, even on Cortex M3 CPUs.
This can lead to using unavailable instructions. Build uVisor using the
least common denominator architecture. This avoids using unavailable
instructions when targeting Cortex M3 CPUs.
@AlessandroA @niklas-arm","Currently, uVisor builds with -mcpu=cortex-m4, even on Cortex M3 CPUs.
This can lead to using unavailable instructions. Build uVisor using the
least common denominator architecture. This avoids using unavailable
instructions when targeting Cortex M3 CPUs.
@AlessandroA @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,422,2017-04-12T12:25:59Z,2017-04-19T11:51:08Z,2017-04-19T11:51:08Z,MERGED,True,17,17,17,https://github.com/AlessandroA,"Docs: Rename ""api"" to ""lib""",2,[],https://github.com/ARMmbed/uvisor/pull/422,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/422,"This is currently required by the docs.mbed.com engine, which expects
Doxygen documentation to be placed in an api folder, and will not recognize
our Markdown files.
Once the website moves to a different engine, we can revert back to
""api"", if we want to.
@iriark01 Could you please verify that this fixes the issue you reported?
@Patater","This is currently required by the docs.mbed.com engine, which expects
Doxygen documentation to be placed in an api folder, and will not recognize
our Markdown files.
Once the website moves to a different engine, we can revert back to
""api"", if we want to.
@iriark01 Could you please verify that this fixes the issue you reported?
@Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,422,2017-04-12T12:25:59Z,2017-04-19T11:51:08Z,2017-04-19T11:51:08Z,MERGED,True,17,17,17,https://github.com/AlessandroA,"Docs: Rename ""api"" to ""lib""",2,[],https://github.com/ARMmbed/uvisor/pull/422,https://github.com/iriark01,2,https://github.com/ARMmbed/uvisor/pull/422#issuecomment-293568980,"This is currently required by the docs.mbed.com engine, which expects
Doxygen documentation to be placed in an api folder, and will not recognize
our Markdown files.
Once the website moves to a different engine, we can revert back to
""api"", if we want to.
@iriark01 Could you please verify that this fixes the issue you reported?
@Patater","LGTM, but I will have to build once to find out (after you merge)",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,422,2017-04-12T12:25:59Z,2017-04-19T11:51:08Z,2017-04-19T11:51:08Z,MERGED,True,17,17,17,https://github.com/AlessandroA,"Docs: Rename ""api"" to ""lib""",2,[],https://github.com/ARMmbed/uvisor/pull/422,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/422#issuecomment-293577961,"This is currently required by the docs.mbed.com engine, which expects
Doxygen documentation to be placed in an api folder, and will not recognize
our Markdown files.
Once the website moves to a different engine, we can revert back to
""api"", if we want to.
@iriark01 Could you please verify that this fixes the issue you reported?
@Patater",The CI is red because of backwards-incompatibility. This PR is now blocked by ARMmbed/mbed-os#4179.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,422,2017-04-12T12:25:59Z,2017-04-19T11:51:08Z,2017-04-19T11:51:08Z,MERGED,True,17,17,17,https://github.com/AlessandroA,"Docs: Rename ""api"" to ""lib""",2,[],https://github.com/ARMmbed/uvisor/pull/422,https://github.com/AlessandroA,4,https://github.com/ARMmbed/uvisor/pull/422#issuecomment-295192791,"This is currently required by the docs.mbed.com engine, which expects
Doxygen documentation to be placed in an api folder, and will not recognize
our Markdown files.
Once the website moves to a different engine, we can revert back to
""api"", if we want to.
@iriark01 Could you please verify that this fixes the issue you reported?
@Patater",ARMmbed/mbed-os#4179 has been merged. I'm updating the tests so that this PR can go green as well.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,422,2017-04-12T12:25:59Z,2017-04-19T11:51:08Z,2017-04-19T11:51:08Z,MERGED,True,17,17,17,https://github.com/AlessandroA,"Docs: Rename ""api"" to ""lib""",2,[],https://github.com/ARMmbed/uvisor/pull/422,https://github.com/AlessandroA,5,https://github.com/ARMmbed/uvisor/pull/422#issuecomment-295209828,"This is currently required by the docs.mbed.com engine, which expects
Doxygen documentation to be placed in an api folder, and will not recognize
our Markdown files.
Once the website moves to a different engine, we can revert back to
""api"", if we want to.
@iriark01 Could you please verify that this fixes the issue you reported?
@Patater",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,424,2017-04-19T20:08:09Z,,2017-09-28T13:40:06Z,OPEN,False,15,15,6,https://github.com/AnotherButler,Update links in documentation,1,['needs: work'],https://github.com/ARMmbed/uvisor/pull/424,https://github.com/AnotherButler,1,https://github.com/ARMmbed/uvisor/pull/424,"NO CONTENT CHANGES

Attempt to fix broken links throughout published documentation","NO CONTENT CHANGES

Attempt to fix broken links throughout published documentation",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,424,2017-04-19T20:08:09Z,,2017-09-28T13:40:06Z,OPEN,False,15,15,6,https://github.com/AnotherButler,Update links in documentation,1,['needs: work'],https://github.com/ARMmbed/uvisor/pull/424,https://github.com/AlessandroA,2,https://github.com/ARMmbed/uvisor/pull/424#issuecomment-299438855,"NO CONTENT CHANGES

Attempt to fix broken links throughout published documentation","Hi @AnotherButler, thanks for the PR. Unfortunately, these changes break the document navigation within GitHub.
The docs folder structure in this repo is as follows:
.
├── CONTRIBUTING.md
├── README.md
├── SECURE_CODING.md
└── docs
    ├── README.md
    ├── lib
    │   ├── API.md
    │   ├── DEBUGGING.md
    │   ├── QUICKSTART.md
    │   └── manual
    │       ├── Makefile
    │       ├── README.md
    │       ├── Technical.md
    │       ├── UseCases.md
    │       ├── example.md
    │       ├── images
    │       │   ├── memory_layout.png
    │       │   └── memory_layout.svg
    │       └── template
    │           └── pandoc-template.docx
    ├── core
    │   ├── DEVELOPING_LOCALLY.md
    │   └── PORTING.md
    ├── img
    │   ├── memory_layout.png
    │   └── memory_layout.svg
    └── index.md

For example, linking API.md from the top-level README.md file requires the link docs/lib/API.md. Would it be possible to recreate exactly this structure in the online docs? Otherwise, we will always have either the GitHub or the online links broken.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,424,2017-04-19T20:08:09Z,,2017-09-28T13:40:06Z,OPEN,False,15,15,6,https://github.com/AnotherButler,Update links in documentation,1,['needs: work'],https://github.com/ARMmbed/uvisor/pull/424,https://github.com/AnotherButler,3,https://github.com/ARMmbed/uvisor/pull/424#issuecomment-299474251,"NO CONTENT CHANGES

Attempt to fix broken links throughout published documentation",@iriark01 Can you answer this?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,424,2017-04-19T20:08:09Z,,2017-09-28T13:40:06Z,OPEN,False,15,15,6,https://github.com/AnotherButler,Update links in documentation,1,['needs: work'],https://github.com/ARMmbed/uvisor/pull/424,https://github.com/iriark01,4,https://github.com/ARMmbed/uvisor/pull/424#issuecomment-299475504,"NO CONTENT CHANGES

Attempt to fix broken links throughout published documentation",With mbed OS and mbed Cloud we don't consider it a problem that links only work on the docs site. uVisor is a bit different. But why can't the structures match?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,425,2017-04-19T20:20:58Z,2017-05-05T10:55:13Z,2017-05-05T14:06:00Z,MERGED,True,1,1,1,https://github.com/AnotherButler,Fix broken link in CONTRIBUTING.md,1,[],https://github.com/ARMmbed/uvisor/pull/425,https://github.com/AnotherButler,1,https://github.com/ARMmbed/uvisor/pull/425,"NO CONTENT CHANGES
-Fix broken link
This should fix issue #415","NO CONTENT CHANGES
-Fix broken link
This should fix issue #415",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,427,2017-05-05T11:24:13Z,2017-05-05T11:51:31Z,2017-05-05T11:51:31Z,MERGED,True,1,1,1,https://github.com/AlessandroA,Docs: Clarify toolchain requirement (min version),1,[],https://github.com/ARMmbed/uvisor/pull/427,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/427,"Fixes #416: ""Build: Fails with GCC ARM Embedded toolchain v4.9 ""
@Patater @niklas-arm","Fixes #416: ""Build: Fails with GCC ARM Embedded toolchain v4.9 ""
@Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,429,2017-05-30T15:52:22Z,2017-05-31T09:40:14Z,2017-05-31T09:40:14Z,MERGED,True,11325,2423,117,https://github.com/Patater,Update for CMSIS-RTOS2 (RTX5) and ARMv8-M,100,[],https://github.com/ARMmbed/uvisor/pull/429,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/429,"This first few commits get uVisor to work with RTX5. Then, the rest of the commits bring over all our ARMv8-M work, plus various refactoring and bug fixes that also affect ARMv7-M.
@AlessandroA @niklas-arm","This first few commits get uVisor to work with RTX5. Then, the rest of the commits bring over all our ARMv8-M work, plus various refactoring and bug fixes that also affect ARMv7-M.
@AlessandroA @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,429,2017-05-30T15:52:22Z,2017-05-31T09:40:14Z,2017-05-31T09:40:14Z,MERGED,True,11325,2423,117,https://github.com/Patater,Update for CMSIS-RTOS2 (RTX5) and ARMv8-M,100,[],https://github.com/ARMmbed/uvisor/pull/429,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/429#issuecomment-304958540,"This first few commits get uVisor to work with RTX5. Then, the rest of the commits bring over all our ARMv8-M work, plus various refactoring and bug fixes that also affect ARMv7-M.
@AlessandroA @niklas-arm",Each commit builds individually. Tests still run.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,430,2017-06-02T16:30:21Z,2017-06-02T16:31:13Z,2017-06-02T16:31:13Z,MERGED,True,11,2,2,https://github.com/Patater,Disable interrupts before debugging and avoid special register handling on priv faults,2,[],https://github.com/ARMmbed/uvisor/pull/430,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/430,"This PR fixes two unrelated bugs.

debug: Disable interrupts before handling debug box
kinetis: Don't recover special registers from priv

@niklas-arm @AlessandroA","This PR fixes two unrelated bugs.

debug: Disable interrupts before handling debug box
kinetis: Don't recover special registers from priv

@niklas-arm @AlessandroA",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,431,2017-06-05T10:59:43Z,2017-06-27T13:26:39Z,2017-06-27T13:26:39Z,MERGED,True,116,2,12,https://github.com/niklas-arm,Add box id for namespace api,4,[],https://github.com/ARMmbed/uvisor/pull/431,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/431,"Adds a cross-privilege memcmp function used for comparing the secure namespace with the user provided one.
cc @AlessandroA @Patater","Adds a cross-privilege memcmp function used for comparing the secure namespace with the user provided one.
cc @AlessandroA @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,432,2017-06-08T14:49:43Z,,2017-09-28T13:40:34Z,OPEN,False,361,6,6,https://github.com/Patater,WIP RPC that uses IPC,4,"[""don't merge yet"", 'needs: work']",https://github.com/ARMmbed/uvisor/pull/432,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/432,"WIP for RPC (no gateway yet)
@AlessandroA @niklas-arm","WIP for RPC (no gateway yet)
@AlessandroA @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,432,2017-06-08T14:49:43Z,,2017-09-28T13:40:34Z,OPEN,False,361,6,6,https://github.com/Patater,WIP RPC that uses IPC,4,"[""don't merge yet"", 'needs: work']",https://github.com/ARMmbed/uvisor/pull/432,https://github.com/p03189,2,https://github.com/ARMmbed/uvisor/pull/432#issuecomment-324278664,"WIP for RPC (no gateway yet)
@AlessandroA @niklas-arm","In api/src/rpc2.c (commit: rpc2: Add RPC2),
line 105

if (timeout_ms == 0) {

Shouldn't the condition be ""timeout_ms != 0"" ?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,432,2017-06-08T14:49:43Z,,2017-09-28T13:40:34Z,OPEN,False,361,6,6,https://github.com/Patater,WIP RPC that uses IPC,4,"[""don't merge yet"", 'needs: work']",https://github.com/ARMmbed/uvisor/pull/432,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/432#issuecomment-324306971,"WIP for RPC (no gateway yet)
@AlessandroA @niklas-arm","@p03189 No. The current API interprets a timeout of 0 as ""let me know if it is done yet, without any blocking"". Any other timeout value will be interpreted as ""block forever until it is done"".",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,432,2017-06-08T14:49:43Z,,2017-09-28T13:40:34Z,OPEN,False,361,6,6,https://github.com/Patater,WIP RPC that uses IPC,4,"[""don't merge yet"", 'needs: work']",https://github.com/ARMmbed/uvisor/pull/432,https://github.com/p03189,4,https://github.com/ARMmbed/uvisor/pull/432#issuecomment-324314885,"WIP for RPC (no gateway yet)
@AlessandroA @niklas-arm","Oh, thank you.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,436,2017-06-14T16:12:33Z,2017-06-15T10:49:13Z,2017-06-15T10:49:13Z,MERGED,True,3,1,2,https://github.com/mikisch81,Remove definition of g_debug_box from core/debug/inc/debug.h,1,[],https://github.com/ARMmbed/uvisor/pull/436,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/436,"g_debug_box will now be declared in core/debug/inc/debug.h and defined in core/debug/src/debug_box.c.
@Patater @alzix","g_debug_box will now be declared in core/debug/inc/debug.h and defined in core/debug/src/debug_box.c.
@Patater @alzix",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,436,2017-06-14T16:12:33Z,2017-06-15T10:49:13Z,2017-06-15T10:49:13Z,MERGED,True,3,1,2,https://github.com/mikisch81,Remove definition of g_debug_box from core/debug/inc/debug.h,1,[],https://github.com/ARMmbed/uvisor/pull/436,https://github.com/mikisch81,2,https://github.com/ARMmbed/uvisor/pull/436#issuecomment-308489514,"g_debug_box will now be declared in core/debug/inc/debug.h and defined in core/debug/src/debug_box.c.
@Patater @alzix",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,437,2017-06-15T10:10:18Z,2017-06-15T10:53:14Z,2017-06-15T10:53:14Z,MERGED,True,2,4,1,https://github.com/AlessandroA,ARMv8-M: Fix scheduler when there is only 1 box,1,[],https://github.com/ARMmbed/uvisor/pull/437,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/437,"In the previous implementation the context switch function takes the
next box ID before applying modular arithmetic to it. This means that
the very first time a context switch is required, we take the bare
next box ID. Since the next box ID is initialized to 1, if there is only
one box the context switch will fail with an out-of-range box ID error.
This commit makes sure that we modularize the next box ID right from the
first use.
@Patater @niklas-arm","In the previous implementation the context switch function takes the
next box ID before applying modular arithmetic to it. This means that
the very first time a context switch is required, we take the bare
next box ID. Since the next box ID is initialized to 1, if there is only
one box the context switch will fail with an out-of-range box ID error.
This commit makes sure that we modularize the next box ID right from the
first use.
@Patater @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,438,2017-06-15T10:13:02Z,2017-06-30T08:24:37Z,2017-06-30T08:24:37Z,MERGED,True,11,23,2,https://github.com/AlessandroA,Docs: Minor updates following v0.28.x,1,[],https://github.com/ARMmbed/uvisor/pull/438,https://github.com/AlessandroA,1,https://github.com/ARMmbed/uvisor/pull/438,@Patater @niklas-arm,@Patater @niklas-arm,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,438,2017-06-15T10:13:02Z,2017-06-30T08:24:37Z,2017-06-30T08:24:37Z,MERGED,True,11,23,2,https://github.com/AlessandroA,Docs: Minor updates following v0.28.x,1,[],https://github.com/ARMmbed/uvisor/pull/438,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/438#issuecomment-308756990,@Patater @niklas-arm,@AnotherButler Please review.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,438,2017-06-15T10:13:02Z,2017-06-30T08:24:37Z,2017-06-30T08:24:37Z,MERGED,True,11,23,2,https://github.com/AlessandroA,Docs: Minor updates following v0.28.x,1,[],https://github.com/ARMmbed/uvisor/pull/438,https://github.com/AlessandroA,3,https://github.com/ARMmbed/uvisor/pull/438#issuecomment-310654670,@Patater @niklas-arm,"@AnotherButler, thanks for the review! I think I addressed all of your feedback.",True,{'THUMBS_UP': ['https://github.com/AnotherButler']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,439,2017-06-16T18:01:23Z,2017-06-16T18:15:20Z,2017-06-16T18:15:34Z,CLOSED,False,23,27,1,https://github.com/iriark01,Don't merge: setting up for the new docs engine,3,[],https://github.com/ARMmbed/uvisor/pull/439,https://github.com/iriark01,1,https://github.com/ARMmbed/uvisor/pull/439,Please don't merge this; we're setting up for the new docs engine,Please don't merge this; we're setting up for the new docs engine,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,439,2017-06-16T18:01:23Z,2017-06-16T18:15:20Z,2017-06-16T18:15:34Z,CLOSED,False,23,27,1,https://github.com/iriark01,Don't merge: setting up for the new docs engine,3,[],https://github.com/ARMmbed/uvisor/pull/439,https://github.com/iriark01,2,https://github.com/ARMmbed/uvisor/pull/439#issuecomment-309097321,Please don't merge this; we're setting up for the new docs engine,Got it; thanks,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,441,2017-06-27T16:13:58Z,2017-07-13T16:39:07Z,2017-07-13T16:39:07Z,CLOSED,False,1,0,1,https://github.com/Patater,Point at latest uvisor-tests,1,[],https://github.com/ARMmbed/uvisor/pull/441,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/441,This enables uvisor and uvisor-tests to stay synchronized.,This enables uvisor and uvisor-tests to stay synchronized.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,441,2017-06-27T16:13:58Z,2017-07-13T16:39:07Z,2017-07-13T16:39:07Z,CLOSED,False,1,0,1,https://github.com/Patater,Point at latest uvisor-tests,1,[],https://github.com/ARMmbed/uvisor/pull/441,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/441#issuecomment-315133702,This enables uvisor and uvisor-tests to stay synchronized.,Merged as part of #444,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,443,2017-06-30T14:22:29Z,2017-07-06T10:22:43Z,2017-07-06T10:22:43Z,MERGED,True,281,71,7,https://github.com/niklas-arm,vmpu_buffer_is_ok for v7-M,5,[],https://github.com/ARMmbed/uvisor/pull/443,https://github.com/niklas-arm,1,https://github.com/ARMmbed/uvisor/pull/443,"add vmpu_buffer_is_ok for v7-M
fix vmpu_buffer_is_ok for v8-M (also check page heap)
fix reading xpsr from invalid memory on v7-M

cc @Patater","add vmpu_buffer_is_ok for v7-M
fix vmpu_buffer_is_ok for v8-M (also check page heap)
fix reading xpsr from invalid memory on v7-M

cc @Patater",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,443,2017-06-30T14:22:29Z,2017-07-06T10:22:43Z,2017-07-06T10:22:43Z,MERGED,True,281,71,7,https://github.com/niklas-arm,vmpu_buffer_is_ok for v7-M,5,[],https://github.com/ARMmbed/uvisor/pull/443,https://github.com/niklas-arm,2,https://github.com/ARMmbed/uvisor/pull/443#issuecomment-312685154,"add vmpu_buffer_is_ok for v7-M
fix vmpu_buffer_is_ok for v8-M (also check page heap)
fix reading xpsr from invalid memory on v7-M

cc @Patater",Unit tests pass on K64F.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,443,2017-06-30T14:22:29Z,2017-07-06T10:22:43Z,2017-07-06T10:22:43Z,MERGED,True,281,71,7,https://github.com/niklas-arm,vmpu_buffer_is_ok for v7-M,5,[],https://github.com/ARMmbed/uvisor/pull/443,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/443#issuecomment-312833471,"add vmpu_buffer_is_ok for v7-M
fix vmpu_buffer_is_ok for v8-M (also check page heap)
fix reading xpsr from invalid memory on v7-M

cc @Patater",box_id_namespace_unowned_buffer test is breaking due to the introduction of these changes.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,444,2017-07-03T13:34:28Z,2017-07-13T14:58:15Z,2017-07-13T14:58:15Z,MERGED,True,12,7,6,https://github.com/Patater,v7-M IPC,6,[],https://github.com/ARMmbed/uvisor/pull/444,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/444,"This depends on https://github.com/ARMmbed/uvisor-tests/pull/129 being merged first.
@niklas-arm","This depends on https://github.com/ARMmbed/uvisor-tests/pull/129 being merged first.
@niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,445,2017-07-04T19:14:08Z,2017-07-27T08:43:06Z,2017-07-27T08:43:06Z,MERGED,True,257,0,3,https://github.com/alzix,add eclipse project helper,1,[],https://github.com/ARMmbed/uvisor/pull/445,https://github.com/alzix,1,https://github.com/ARMmbed/uvisor/pull/445,"useful for instrumenting example projects with Eclipse+PyOCD debug environment
this script should be called from from mbed-os/features/FEATURE_UVISOR/importer/TARGET_IGNORE/uvisor within example project","useful for instrumenting example projects with Eclipse+PyOCD debug environment
this script should be called from from mbed-os/features/FEATURE_UVISOR/importer/TARGET_IGNORE/uvisor within example project",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,445,2017-07-04T19:14:08Z,2017-07-27T08:43:06Z,2017-07-27T08:43:06Z,MERGED,True,257,0,3,https://github.com/alzix,add eclipse project helper,1,[],https://github.com/ARMmbed/uvisor/pull/445,https://github.com/alzix,2,https://github.com/ARMmbed/uvisor/pull/445#issuecomment-313331728,"useful for instrumenting example projects with Eclipse+PyOCD debug environment
this script should be called from from mbed-os/features/FEATURE_UVISOR/importer/TARGET_IGNORE/uvisor within example project",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,445,2017-07-04T19:14:08Z,2017-07-27T08:43:06Z,2017-07-27T08:43:06Z,MERGED,True,257,0,3,https://github.com/alzix,add eclipse project helper,1,[],https://github.com/ARMmbed/uvisor/pull/445,https://github.com/theotherjimmy,3,https://github.com/ARMmbed/uvisor/pull/445#issuecomment-317077971,"useful for instrumenting example projects with Eclipse+PyOCD debug environment
this script should be called from from mbed-os/features/FEATURE_UVISOR/importer/TARGET_IGNORE/uvisor within example project","Hello,
You could modify the exporter to check for
""UVISOR"" in targets.features
and then use a different template.
But I don't like having anything special for features, anywhere.
@alzix @Patater Could you let me know what would be required to make an mbed-os exporter (I'm guessing make-gcc-arm and therefore eclipse-gcc-arm) Uvisor aware?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,445,2017-07-04T19:14:08Z,2017-07-27T08:43:06Z,2017-07-27T08:43:06Z,MERGED,True,257,0,3,https://github.com/alzix,add eclipse project helper,1,[],https://github.com/ARMmbed/uvisor/pull/445,https://github.com/theotherjimmy,4,https://github.com/ARMmbed/uvisor/pull/445#issuecomment-317081912,"useful for instrumenting example projects with Eclipse+PyOCD debug environment
this script should be called from from mbed-os/features/FEATURE_UVISOR/importer/TARGET_IGNORE/uvisor within example project","Looking at the changes here, you call mbed CLI. That sort of thing is not allowed in any exporter.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,445,2017-07-04T19:14:08Z,2017-07-27T08:43:06Z,2017-07-27T08:43:06Z,MERGED,True,257,0,3,https://github.com/alzix,add eclipse project helper,1,[],https://github.com/ARMmbed/uvisor/pull/445,https://github.com/alzix,5,https://github.com/ARMmbed/uvisor/pull/445#issuecomment-317233410,"useful for instrumenting example projects with Eclipse+PyOCD debug environment
this script should be called from from mbed-os/features/FEATURE_UVISOR/importer/TARGET_IGNORE/uvisor within example project","@theotherjimmy - i'm familiar with general approach in mbed-cli export tools, where generated workspaces do not rely on the mbed-cli. But in current case i had following justifications:

uVisor binary produced by exported Makefile is somehow different and is not working correctly for debug build - we will look in to this later. We have dedicated Ticket for that.
the makefile is static - meaning that adding new sources/headers will require workspace rebuild. While when using mbed-cli - it dynamically picks up new files. Since this workspace is intended to be used for  development purposes this is a significant benefit.
having two build systems is error prone approach - things working locally may/may not work on CI builds. I think the best example for this would be the old Eclipse driven Android Studio, where builds where driven by Eclipse or Ant for CI builds. This solution was pretty fast replaced by IntelliJ in favor of unified build system (Gradle).
mbed-cli availability is on developers machines is proven by the fact mbed export and mbed deploy commands should be executed before the build.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,445,2017-07-04T19:14:08Z,2017-07-27T08:43:06Z,2017-07-27T08:43:06Z,MERGED,True,257,0,3,https://github.com/alzix,add eclipse project helper,1,[],https://github.com/ARMmbed/uvisor/pull/445,https://github.com/alzix,6,https://github.com/ARMmbed/uvisor/pull/445#issuecomment-317235184,"useful for instrumenting example projects with Eclipse+PyOCD debug environment
this script should be called from from mbed-os/features/FEATURE_UVISOR/importer/TARGET_IGNORE/uvisor within example project",@Patater - commit message reworded,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,445,2017-07-04T19:14:08Z,2017-07-27T08:43:06Z,2017-07-27T08:43:06Z,MERGED,True,257,0,3,https://github.com/alzix,add eclipse project helper,1,[],https://github.com/ARMmbed/uvisor/pull/445,https://github.com/theotherjimmy,7,https://github.com/ARMmbed/uvisor/pull/445#issuecomment-317267779,"useful for instrumenting example projects with Eclipse+PyOCD debug environment
this script should be called from from mbed-os/features/FEATURE_UVISOR/importer/TARGET_IGNORE/uvisor within example project","mbed-cli availability is on developers machines is proven by the fact mbed export and mbed deploy commands should be executed before the build.

This is simply not true. Anyone can export from the developer website without installing any tools. That's why you can't rely on mbed CLI.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,446,2017-07-06T06:33:56Z,2017-08-14T17:03:02Z,2017-08-15T08:11:40Z,CLOSED,False,116,0,3,https://github.com/ccli8,Support Nuvoton's M480 target,3,[],https://github.com/ARMmbed/uvisor/pull/446,https://github.com/ccli8,1,https://github.com/ARMmbed/uvisor/pull/446,This PR is to support Nuvoton's M480 series. A target NUMAKER_PFM_M487 of the series is in PR (ARMmbed/mbed-os#4608).,This PR is to support Nuvoton's M480 series. A target NUMAKER_PFM_M487 of the series is in PR (ARMmbed/mbed-os#4608).,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,446,2017-07-06T06:33:56Z,2017-08-14T17:03:02Z,2017-08-15T08:11:40Z,CLOSED,False,116,0,3,https://github.com/ccli8,Support Nuvoton's M480 target,3,[],https://github.com/ARMmbed/uvisor/pull/446,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/446#issuecomment-314044115,This PR is to support Nuvoton's M480 series. A target NUMAKER_PFM_M487 of the series is in PR (ARMmbed/mbed-os#4608).,Thanks very much for your PR. We'll review and get back with you soon.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,446,2017-07-06T06:33:56Z,2017-08-14T17:03:02Z,2017-08-15T08:11:40Z,CLOSED,False,116,0,3,https://github.com/ccli8,Support Nuvoton's M480 target,3,[],https://github.com/ARMmbed/uvisor/pull/446,https://github.com/ccli8,3,https://github.com/ARMmbed/uvisor/pull/446#issuecomment-318565320,This PR is to support Nuvoton's M480 series. A target NUMAKER_PFM_M487 of the series is in PR (ARMmbed/mbed-os#4608).,How about status?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,446,2017-07-06T06:33:56Z,2017-08-14T17:03:02Z,2017-08-15T08:11:40Z,CLOSED,False,116,0,3,https://github.com/ccli8,Support Nuvoton's M480 target,3,[],https://github.com/ARMmbed/uvisor/pull/446,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/446#issuecomment-319141866,This PR is to support Nuvoton's M480 series. A target NUMAKER_PFM_M487 of the series is in PR (ARMmbed/mbed-os#4608).,"After ARMmbed/mbed-os#4608 is rebased on latest mbed OS, we'll test uVisor on M487. If all goes well, we'll merge this PR.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,446,2017-07-06T06:33:56Z,2017-08-14T17:03:02Z,2017-08-15T08:11:40Z,CLOSED,False,116,0,3,https://github.com/ccli8,Support Nuvoton's M480 target,3,[],https://github.com/ARMmbed/uvisor/pull/446,https://github.com/Patater,5,https://github.com/ARMmbed/uvisor/pull/446#issuecomment-319681622,This PR is to support Nuvoton's M480 series. A target NUMAKER_PFM_M487 of the series is in PR (ARMmbed/mbed-os#4608).,"@ccli8
What testing has been done so far with this PR on your end?
If I'd like to run a debugger, are there instructions available someplace describing how to set up a debugger for the M487?
Thanks",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,446,2017-07-06T06:33:56Z,2017-08-14T17:03:02Z,2017-08-15T08:11:40Z,CLOSED,False,116,0,3,https://github.com/ccli8,Support Nuvoton's M480 target,3,[],https://github.com/ARMmbed/uvisor/pull/446,https://github.com/ccli8,6,https://github.com/ARMmbed/uvisor/pull/446#issuecomment-320144359,This PR is to support Nuvoton's M480 series. A target NUMAKER_PFM_M487 of the series is in PR (ARMmbed/mbed-os#4608).,"@Patater

What testing has been done so far with this PR on your end?

I test on the examples you give by adding NUMAKER_PFM_M487's public ACL and enlarging uVisor .bss:

basic uVisor example
uVisor threaded example
secure number store example


If I'd like to run a debugger, are there instructions available someplace describing how to set up a debugger for the M487?

I also create a uVisor example based on yours for our target. It mentions how to debug uVisor program in Keil uVision built with GCC toolchain on our target.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,446,2017-07-06T06:33:56Z,2017-08-14T17:03:02Z,2017-08-15T08:11:40Z,CLOSED,False,116,0,3,https://github.com/ccli8,Support Nuvoton's M480 target,3,[],https://github.com/ARMmbed/uvisor/pull/446,https://github.com/Patater,7,https://github.com/ARMmbed/uvisor/pull/446#issuecomment-320217961,This PR is to support Nuvoton's M480 series. A target NUMAKER_PFM_M487 of the series is in PR (ARMmbed/mbed-os#4608).,"Thanks for sharing your demo application and providing instructions on setting up debugging.
I've run all our uVisor tests with this target, using this PR and the mbed OS PR. All tests pass. Nice work!
I am having some issues with the UART, however. I'll post feedback on the mbed OS PR.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,446,2017-07-06T06:33:56Z,2017-08-14T17:03:02Z,2017-08-15T08:11:40Z,CLOSED,False,116,0,3,https://github.com/ccli8,Support Nuvoton's M480 target,3,[],https://github.com/ARMmbed/uvisor/pull/446,https://github.com/Patater,8,https://github.com/ARMmbed/uvisor/pull/446#issuecomment-322247673,This PR is to support Nuvoton's M480 series. A target NUMAKER_PFM_M487 of the series is in PR (ARMmbed/mbed-os#4608).,"Manually squashed and merged
@ccli8 Thanks!",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,446,2017-07-06T06:33:56Z,2017-08-14T17:03:02Z,2017-08-15T08:11:40Z,CLOSED,False,116,0,3,https://github.com/ccli8,Support Nuvoton's M480 target,3,[],https://github.com/ARMmbed/uvisor/pull/446,https://github.com/ccli8,9,https://github.com/ARMmbed/uvisor/pull/446#issuecomment-322354379,This PR is to support Nuvoton's M480 series. A target NUMAKER_PFM_M487 of the series is in PR (ARMmbed/mbed-os#4608).,"Hi @Patater , if we would like built M487 uVisor core pre-installed in Mbed OS, like K64F:
mbed-os\features\FEATURE_UVISOR\targets\TARGET_UVISOR_SUPPORTED\TARGET_MCU_K64F\TARGET_RELEASE\TARGET_M4\libconfiguration_kinetis_cortex_m4_0x1fff0000.a
mbed-os\features\FEATURE_UVISOR\targets\TARGET_UVISOR_SUPPORTED\TARGET_MCU_K64F\TARGET_DEBUG\libconfiguration_kinetis_cortex_m4_0x1fff0000.a

Did I add NUMAKER_PFM_M487.m480 in Makefile and send a PR, or there is another flow you define?
mbed-os\features\FEATURE_UVISOR\importer\Makefile",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,446,2017-07-06T06:33:56Z,2017-08-14T17:03:02Z,2017-08-15T08:11:40Z,CLOSED,False,116,0,3,https://github.com/ccli8,Support Nuvoton's M480 target,3,[],https://github.com/ARMmbed/uvisor/pull/446,https://github.com/Patater,10,https://github.com/ARMmbed/uvisor/pull/446#issuecomment-322401280,This PR is to support Nuvoton's M480 series. A target NUMAKER_PFM_M487 of the series is in PR (ARMmbed/mbed-os#4608).,"Hi @ccli8
All we have to do is release the next version of uVisor. I have started working on the PR at ARMmbed/mbed-os#4907. Please have a look.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,446,2017-07-06T06:33:56Z,2017-08-14T17:03:02Z,2017-08-15T08:11:40Z,CLOSED,False,116,0,3,https://github.com/ccli8,Support Nuvoton's M480 target,3,[],https://github.com/ARMmbed/uvisor/pull/446,https://github.com/ccli8,11,https://github.com/ARMmbed/uvisor/pull/446#issuecomment-322406277,This PR is to support Nuvoton's M480 series. A target NUMAKER_PFM_M487 of the series is in PR (ARMmbed/mbed-os#4608).,@Patater Thanks for your information.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,447,2017-07-11T18:46:33Z,2017-07-31T10:13:05Z,2017-07-31T10:13:08Z,CLOSED,False,38,9,3,https://github.com/alzix,[WIP] do not carsh on BKPT during semihosting in case debugger is not connected,1,[],https://github.com/ARMmbed/uvisor/pull/447,https://github.com/alzix,1,https://github.com/ARMmbed/uvisor/pull/447,"as it will result in HardFault
this change will allow IoT application developers to test their application against debug version of mbed-os without forcing them to connect the debugger with semihosting
references:

http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka14536.html
14.2 Breakpoint feature (The Definitive Guide to Cortex-M3 and Cortex-M4 Processors)

Tested - debug build is running on K64F without the debugger being attached","as it will result in HardFault
this change will allow IoT application developers to test their application against debug version of mbed-os without forcing them to connect the debugger with semihosting
references:

http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka14536.html
14.2 Breakpoint feature (The Definitive Guide to Cortex-M3 and Cortex-M4 Processors)

Tested - debug build is running on K64F without the debugger being attached",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,447,2017-07-11T18:46:33Z,2017-07-31T10:13:05Z,2017-07-31T10:13:08Z,CLOSED,False,38,9,3,https://github.com/alzix,[WIP] do not carsh on BKPT during semihosting in case debugger is not connected,1,[],https://github.com/ARMmbed/uvisor/pull/447,https://github.com/niklas-arm,2,https://github.com/ARMmbed/uvisor/pull/447#issuecomment-319026410,"as it will result in HardFault
this change will allow IoT application developers to test their application against debug version of mbed-os without forcing them to connect the debugger with semihosting
references:

http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka14536.html
14.2 Breakpoint feature (The Definitive Guide to Cortex-M3 and Cortex-M4 Processors)

Tested - debug build is running on K64F without the debugger being attached","Fixed by #466 instead, please close.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,448,2017-07-12T07:00:23Z,2017-07-27T10:25:56Z,2017-07-27T10:25:56Z,MERGED,True,30,0,5,https://github.com/mikisch81,Add memory barriers,1,[],https://github.com/ARMmbed/uvisor/pull/448,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/448,"Add memory barriers in places where it is advised by the architecture:

ISB after updating CONTROL register to ensure subsequent instructions are fetched with the correct privilege level.
DMB before updating MPU to ensure all transfers to memory are completed before update.
DSB & ISB after updating MPU to ensure subsequence data & instruction transfers are using updated MPU settings.

References:

The Definitive Guide to Cortex-M3 and Cortex-M4 Processors (5.6.13 Memory barrier instructions).
ARM Cortex-M Programming Guide to Memory Barrier Instructions.

Feel free to suggest more places which are needed.. :-)","Add memory barriers in places where it is advised by the architecture:

ISB after updating CONTROL register to ensure subsequent instructions are fetched with the correct privilege level.
DMB before updating MPU to ensure all transfers to memory are completed before update.
DSB & ISB after updating MPU to ensure subsequence data & instruction transfers are using updated MPU settings.

References:

The Definitive Guide to Cortex-M3 and Cortex-M4 Processors (5.6.13 Memory barrier instructions).
ARM Cortex-M Programming Guide to Memory Barrier Instructions.

Feel free to suggest more places which are needed.. :-)",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,448,2017-07-12T07:00:23Z,2017-07-27T10:25:56Z,2017-07-27T10:25:56Z,MERGED,True,30,0,5,https://github.com/mikisch81,Add memory barriers,1,[],https://github.com/ARMmbed/uvisor/pull/448,https://github.com/mikisch81,2,https://github.com/ARMmbed/uvisor/pull/448#issuecomment-315104525,"Add memory barriers in places where it is advised by the architecture:

ISB after updating CONTROL register to ensure subsequent instructions are fetched with the correct privilege level.
DMB before updating MPU to ensure all transfers to memory are completed before update.
DSB & ISB after updating MPU to ensure subsequence data & instruction transfers are using updated MPU settings.

References:

The Definitive Guide to Cortex-M3 and Cortex-M4 Processors (5.6.13 Memory barrier instructions).
ARM Cortex-M Programming Guide to Memory Barrier Instructions.

Feel free to suggest more places which are needed.. :-)",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,448,2017-07-12T07:00:23Z,2017-07-27T10:25:56Z,2017-07-27T10:25:56Z,MERGED,True,30,0,5,https://github.com/mikisch81,Add memory barriers,1,[],https://github.com/ARMmbed/uvisor/pull/448,https://github.com/mikisch81,3,https://github.com/ARMmbed/uvisor/pull/448#issuecomment-317256925,"Add memory barriers in places where it is advised by the architecture:

ISB after updating CONTROL register to ensure subsequent instructions are fetched with the correct privilege level.
DMB before updating MPU to ensure all transfers to memory are completed before update.
DSB & ISB after updating MPU to ensure subsequence data & instruction transfers are using updated MPU settings.

References:

The Definitive Guide to Cortex-M3 and Cortex-M4 Processors (5.6.13 Memory barrier instructions).
ARM Cortex-M Programming Guide to Memory Barrier Instructions.

Feel free to suggest more places which are needed.. :-)",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,448,2017-07-12T07:00:23Z,2017-07-27T10:25:56Z,2017-07-27T10:25:56Z,MERGED,True,30,0,5,https://github.com/mikisch81,Add memory barriers,1,[],https://github.com/ARMmbed/uvisor/pull/448,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/448#issuecomment-317350262,"Add memory barriers in places where it is advised by the architecture:

ISB after updating CONTROL register to ensure subsequent instructions are fetched with the correct privilege level.
DMB before updating MPU to ensure all transfers to memory are completed before update.
DSB & ISB after updating MPU to ensure subsequence data & instruction transfers are using updated MPU settings.

References:

The Definitive Guide to Cortex-M3 and Cortex-M4 Processors (5.6.13 Memory barrier instructions).
ARM Cortex-M Programming Guide to Memory Barrier Instructions.

Feel free to suggest more places which are needed.. :-)",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,449,2017-07-13T15:27:22Z,2017-07-13T16:16:00Z,2017-07-17T15:17:05Z,MERGED,True,4,1,1,https://github.com/fangyi-zhou,pool_queue.c: Check return value of pool_init,1,[],https://github.com/ARMmbed/uvisor/pull/449,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/449,Pass on the error value to uvisor_pool_queue_init if the pool fails to init.,Pass on the error value to uvisor_pool_queue_init if the pool fails to init.,True,{'THUMBS_UP': ['https://github.com/hanno-arm']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,450,2017-07-17T08:55:42Z,2017-08-07T09:46:11Z,2017-08-07T10:34:14Z,MERGED,True,6,1,1,https://github.com/fangyi-zhou,IPC: Check whether wait_tokens are allocated before wait,1,[],https://github.com/ARMmbed/uvisor/pull/450,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/450,"When wait_tokens are unallocated, it is possible that wait never returns
or it depends on a future ipc call that has yet to be created. I believe
this validation on input parameter should be necessary.","When wait_tokens are unallocated, it is possible that wait never returns
or it depends on a future ipc call that has yet to be created. I believe
this validation on input parameter should be necessary.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,451,2017-07-17T10:23:55Z,2017-07-17T10:52:04Z,2017-07-17T10:52:43Z,CLOSED,False,6,5,1,https://github.com/fangyi-zhou,IPC: Make token allocation/free static,3,[],https://github.com/ARMmbed/uvisor/pull/451,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/451,"The two functions should be used for internal linkage, as no external
usage for those could be found and they are internal to IPC call APIs.
Exposing these functions for external use might also cause
synchronisation issues.","The two functions should be used for internal linkage, as no external
usage for those could be found and they are internal to IPC call APIs.
Exposing these functions for external use might also cause
synchronisation issues.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,451,2017-07-17T10:23:55Z,2017-07-17T10:52:04Z,2017-07-17T10:52:43Z,CLOSED,False,6,5,1,https://github.com/fangyi-zhou,IPC: Make token allocation/free static,3,[],https://github.com/ARMmbed/uvisor/pull/451,https://github.com/fangyi-zhou,2,https://github.com/ARMmbed/uvisor/pull/451#issuecomment-315723477,"The two functions should be used for internal linkage, as no external
usage for those could be found and they are internal to IPC call APIs.
Exposing these functions for external use might also cause
synchronisation issues.",#452,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,452,2017-07-17T10:51:50Z,2017-07-21T10:37:05Z,2017-07-21T11:14:35Z,MERGED,True,4,3,1,https://github.com/fangyi-zhou,IPC: Minors fixes,2,[],https://github.com/ARMmbed/uvisor/pull/452,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/452,Update comments and fix styles.,Update comments and fix styles.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,452,2017-07-17T10:51:50Z,2017-07-21T10:37:05Z,2017-07-21T11:14:35Z,MERGED,True,4,3,1,https://github.com/fangyi-zhou,IPC: Minors fixes,2,[],https://github.com/ARMmbed/uvisor/pull/452,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/452#issuecomment-316681135,Update comments and fix styles.,"We can't ""Make token allocation/free static"" because then our tests can't run. Our tests depend on being able to use the token allocator (with their own token memory, not the real box ones) in order to unit test the token allocator.
Could you please drop the commit ""Make token allocation/free static""?
Thanks",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,452,2017-07-17T10:51:50Z,2017-07-21T10:37:05Z,2017-07-21T11:14:35Z,MERGED,True,4,3,1,https://github.com/fangyi-zhou,IPC: Minors fixes,2,[],https://github.com/ARMmbed/uvisor/pull/452,https://github.com/fangyi-zhou,3,https://github.com/ARMmbed/uvisor/pull/452#issuecomment-316716728,Update comments and fix styles.,"I've removed the commit.
In a new PR #457 I introduced a new token allocation method which probably breaks some existing tests. Any suggestions on how to resolve this?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,454,2017-07-17T13:08:18Z,2017-07-20T11:54:40Z,2017-07-20T14:21:51Z,MERGED,True,2,2,1,https://github.com/fangyi-zhou,IPC: Use UVISOR_BOX_ID_ANY instead of INVALID,1,[],https://github.com/ARMmbed/uvisor/pull/454,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/454,"Although they are defined the same macro, use ANY would make better
semantic sense.","Although they are defined the same macro, use ANY would make better
semantic sense.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,455,2017-07-18T14:29:44Z,2017-07-21T10:44:16Z,2017-07-21T10:44:16Z,MERGED,True,1,0,1,https://github.com/Patater,box_init: Re-enable interrupts for 1 box apps,1,[],https://github.com/ARMmbed/uvisor/pull/455,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/455,"When only 1 box is used, interrupts aren't re-enabled when we finish box
initialization. Call box_init_post() even when there is only 1 box.
@gilles-peskine-arm @niklas-arm","When only 1 box is used, interrupts aren't re-enabled when we finish box
initialization. Call box_init_post() even when there is only 1 box.
@gilles-peskine-arm @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,456,2017-07-19T13:25:10Z,2017-07-27T10:24:44Z,2017-07-27T16:48:12Z,MERGED,True,10,8,3,https://github.com/alzix,Fix/box order,2,[],https://github.com/ARMmbed/uvisor/pull/456,https://github.com/alzix,1,https://github.com/ARMmbed/uvisor/pull/456,"fix #442
todo:

check whether box reordering affects other global arrays
merge all global arrays in to a single per box context

cc: @Patater @theamirocohen  @orenc17A @niklas-arm","fix #442
todo:

check whether box reordering affects other global arrays
merge all global arrays in to a single per box context

cc: @Patater @theamirocohen  @orenc17A @niklas-arm",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,456,2017-07-19T13:25:10Z,2017-07-27T10:24:44Z,2017-07-27T16:48:12Z,MERGED,True,10,8,3,https://github.com/alzix,Fix/box order,2,[],https://github.com/ARMmbed/uvisor/pull/456,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/456#issuecomment-317979691,"fix #442
todo:

check whether box reordering affects other global arrays
merge all global arrays in to a single per box context

cc: @Patater @theamirocohen  @orenc17A @niklas-arm",Please update the commit to update tools/uvisor-tests.txt to point to a version of the tests that run your new test (latest origin/master).,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,456,2017-07-19T13:25:10Z,2017-07-27T10:24:44Z,2017-07-27T16:48:12Z,MERGED,True,10,8,3,https://github.com/alzix,Fix/box order,2,[],https://github.com/ARMmbed/uvisor/pull/456,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/456#issuecomment-317986632,"fix #442
todo:

check whether box reordering affects other global arrays
merge all global arrays in to a single per box context

cc: @Patater @theamirocohen  @orenc17A @niklas-arm","Ideally, the test pointer would be updated in the same commit that required the test pointer to advance.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,456,2017-07-19T13:25:10Z,2017-07-27T10:24:44Z,2017-07-27T16:48:12Z,MERGED,True,10,8,3,https://github.com/alzix,Fix/box order,2,[],https://github.com/ARMmbed/uvisor/pull/456,https://github.com/alzix,4,https://github.com/ARMmbed/uvisor/pull/456#issuecomment-318018154,"fix #442
todo:

check whether box reordering affects other global arrays
merge all global arrays in to a single per box context

cc: @Patater @theamirocohen  @orenc17A @niklas-arm",history updated,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,456,2017-07-19T13:25:10Z,2017-07-27T10:24:44Z,2017-07-27T16:48:12Z,MERGED,True,10,8,3,https://github.com/alzix,Fix/box order,2,[],https://github.com/ARMmbed/uvisor/pull/456,https://github.com/alzix,5,https://github.com/ARMmbed/uvisor/pull/456#issuecomment-318139995,"fix #442
todo:

check whether box reordering affects other global arrays
merge all global arrays in to a single per box context

cc: @Patater @theamirocohen  @orenc17A @niklas-arm",there is a new line...,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,456,2017-07-19T13:25:10Z,2017-07-27T10:24:44Z,2017-07-27T16:48:12Z,MERGED,True,10,8,3,https://github.com/alzix,Fix/box order,2,[],https://github.com/ARMmbed/uvisor/pull/456,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/456#issuecomment-318297766,"fix #442
todo:

check whether box reordering affects other global arrays
merge all global arrays in to a single per box context

cc: @Patater @theamirocohen  @orenc17A @niklas-arm","GitHub is showing me a red newline character followed by a red cancel symbol in the diff. If the file itself looks good in a hex editor, then let's move forward and merge this PR.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,456,2017-07-19T13:25:10Z,2017-07-27T10:24:44Z,2017-07-27T16:48:12Z,MERGED,True,10,8,3,https://github.com/alzix,Fix/box order,2,[],https://github.com/ARMmbed/uvisor/pull/456,https://github.com/niklas-arm,7,https://github.com/ARMmbed/uvisor/pull/456#issuecomment-318318612,"fix #442
todo:

check whether box reordering affects other global arrays
merge all global arrays in to a single per box context

cc: @Patater @theamirocohen  @orenc17A @niklas-arm",GitHub doesn't show me a missing newline either…,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,456,2017-07-19T13:25:10Z,2017-07-27T10:24:44Z,2017-07-27T16:48:12Z,MERGED,True,10,8,3,https://github.com/alzix,Fix/box order,2,[],https://github.com/ARMmbed/uvisor/pull/456,https://github.com/Patater,8,https://github.com/ARMmbed/uvisor/pull/456#issuecomment-318319951,"fix #442
todo:

check whether box reordering affects other global arrays
merge all global arrays in to a single per box context

cc: @Patater @theamirocohen  @orenc17A @niklas-arm","OK. On the desktop version, this is okay. This is a GitHub mobile site bug.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,457,2017-07-19T14:48:44Z,2017-07-21T08:19:58Z,2017-07-21T08:19:58Z,CLOSED,False,108,72,4,https://github.com/fangyi-zhou,IPC: new state machine,6,[],https://github.com/ARMmbed/uvisor/pull/457,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/457,"Provide a new state machine for IPC with two simple transitions
READY -> ERROR
READY -> DELIVERED
Modifications to current system:

Token allocation has been re-written to match the slot allocated in the pool queue
wait call APIs are changed to return a token for succeeded actions
IO Request slots will be freed at wait call instead of after a successful delivery
Enforces user to wait after a send or receive call","Provide a new state machine for IPC with two simple transitions
READY -> ERROR
READY -> DELIVERED
Modifications to current system:

Token allocation has been re-written to match the slot allocated in the pool queue
wait call APIs are changed to return a token for succeeded actions
IO Request slots will be freed at wait call instead of after a successful delivery
Enforces user to wait after a send or receive call",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,458,2017-07-20T10:38:06Z,2017-07-27T17:44:58Z,2017-07-27T17:44:58Z,MERGED,True,1,1,1,https://github.com/theamirocohen,Fix typo in file docs/lib/QUICKSTART.md,1,[],https://github.com/ARMmbed/uvisor/pull/458,https://github.com/theamirocohen,1,https://github.com/ARMmbed/uvisor/pull/458,"fix #434
Typo in file name: #include ""secure-box.h""","fix #434
Typo in file name: #include ""secure-box.h""",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,458,2017-07-20T10:38:06Z,2017-07-27T17:44:58Z,2017-07-27T17:44:58Z,MERGED,True,1,1,1,https://github.com/theamirocohen,Fix typo in file docs/lib/QUICKSTART.md,1,[],https://github.com/ARMmbed/uvisor/pull/458,https://github.com/theamirocohen,2,https://github.com/ARMmbed/uvisor/pull/458#issuecomment-317251208,"fix #434
Typo in file name: #include ""secure-box.h""","Hi,
the commit message title was changed",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,458,2017-07-20T10:38:06Z,2017-07-27T17:44:58Z,2017-07-27T17:44:58Z,MERGED,True,1,1,1,https://github.com/theamirocohen,Fix typo in file docs/lib/QUICKSTART.md,1,[],https://github.com/ARMmbed/uvisor/pull/458,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/458#issuecomment-317340776,"fix #434
Typo in file name: #include ""secure-box.h""","- fixing typo in file docs/lib/QUICKSTART.md
+ Fix typo in file docs/lib/QUICKSTART.md",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,458,2017-07-20T10:38:06Z,2017-07-27T17:44:58Z,2017-07-27T17:44:58Z,MERGED,True,1,1,1,https://github.com/theamirocohen,Fix typo in file docs/lib/QUICKSTART.md,1,[],https://github.com/ARMmbed/uvisor/pull/458,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/458#issuecomment-318323513,"fix #434
Typo in file name: #include ""secure-box.h""",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,459,2017-07-20T12:18:11Z,2017-07-21T10:43:18Z,2017-07-21T10:51:39Z,MERGED,True,0,63,1,https://github.com/Patater,beetle: Remove platform specific code,1,[],https://github.com/ARMmbed/uvisor/pull/459,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/459,"uVisor cannot maintain platform specific code.
@niklas-arm @alzix","uVisor cannot maintain platform specific code.
@niklas-arm @alzix",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,460,2017-07-20T14:55:16Z,2017-07-21T10:05:08Z,2017-07-21T11:14:41Z,MERGED,True,1,1,1,https://github.com/fangyi-zhou,pool_queue: Add lower bound check for num in uvisor_pool_init,1,[],https://github.com/ARMmbed/uvisor/pull/460,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/460,"If num is 0, Line 45 will trigger unintended behaviour due to wrap around","If num is 0, Line 45 will trigger unintended behaviour due to wrap around",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,461,2017-07-25T07:35:41Z,2017-07-25T14:46:09Z,2017-07-26T05:31:43Z,MERGED,True,1,1,1,https://github.com/danny4478,Add extern to a global variable [g_vmpu_boxes_counted] in header file,1,[],https://github.com/ARMmbed/uvisor/pull/461,https://github.com/danny4478,1,https://github.com/ARMmbed/uvisor/pull/461,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,462,2017-07-26T11:47:12Z,2017-07-27T17:40:23Z,2017-07-27T17:40:23Z,MERGED,True,3,4,1,https://github.com/orenc17,Handle 128th character dropping issue,1,[],https://github.com/ARMmbed/uvisor/pull/462,https://github.com/orenc17,1,https://github.com/ARMmbed/uvisor/pull/462,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,462,2017-07-26T11:47:12Z,2017-07-27T17:40:23Z,2017-07-27T17:40:23Z,MERGED,True,3,4,1,https://github.com/orenc17,Handle 128th character dropping issue,1,[],https://github.com/ARMmbed/uvisor/pull/462,https://github.com/niklas-arm,2,https://github.com/ARMmbed/uvisor/pull/462#issuecomment-318058711,,One could probably also implement this by checking length against (DEBUG_MAX_BUFFER - 2) and then not overwriting data. But this works fine too. cc @Patater.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,462,2017-07-26T11:47:12Z,2017-07-27T17:40:23Z,2017-07-27T17:40:23Z,MERGED,True,3,4,1,https://github.com/orenc17,Handle 128th character dropping issue,1,[],https://github.com/ARMmbed/uvisor/pull/462,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/462#issuecomment-318090686,,"Yeah, I'd find that easier to read than the current implementation.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,462,2017-07-26T11:47:12Z,2017-07-27T17:40:23Z,2017-07-27T17:40:23Z,MERGED,True,3,4,1,https://github.com/orenc17,Handle 128th character dropping issue,1,[],https://github.com/ARMmbed/uvisor/pull/462,https://github.com/orenc17,4,https://github.com/ARMmbed/uvisor/pull/462#issuecomment-318332951,,retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,462,2017-07-26T11:47:12Z,2017-07-27T17:40:23Z,2017-07-27T17:40:23Z,MERGED,True,3,4,1,https://github.com/orenc17,Handle 128th character dropping issue,1,[],https://github.com/ARMmbed/uvisor/pull/462,https://github.com/orenc17,5,https://github.com/ARMmbed/uvisor/pull/462#issuecomment-318333051,,"@niklas-arm  @Patater
could you please review the new implementation",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,462,2017-07-26T11:47:12Z,2017-07-27T17:40:23Z,2017-07-27T17:40:23Z,MERGED,True,3,4,1,https://github.com/orenc17,Handle 128th character dropping issue,1,[],https://github.com/ARMmbed/uvisor/pull/462,https://github.com/orenc17,6,https://github.com/ARMmbed/uvisor/pull/462#issuecomment-318393020,,Done,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,463,2017-07-26T12:12:54Z,2017-07-27T17:43:31Z,2017-07-27T17:43:31Z,MERGED,True,42,0,3,https://github.com/mikisch81,Export more pool_queue APIs in uvisor_api,1,[],https://github.com/ARMmbed/uvisor/pull/463,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/463,"uvisor_pool_queue_try_allocate
uvisor_pool_try_free
uvisor_pool_queue_try_enqueue
uvisor_pool_queue_try_dequeue
uvisor_pool_queue_try_dequeue_first
uvisor_pool_queue_try_find_first","uvisor_pool_queue_try_allocate
uvisor_pool_try_free
uvisor_pool_queue_try_enqueue
uvisor_pool_queue_try_dequeue
uvisor_pool_queue_try_dequeue_first
uvisor_pool_queue_try_find_first",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,464,2017-07-27T11:17:54Z,2017-07-31T16:14:55Z,2017-07-31T16:15:03Z,MERGED,True,9,7,2,https://github.com/orenc17,Do not enter __vmpu_order_boxes with 1 box,1,[],https://github.com/ARMmbed/uvisor/pull/464,https://github.com/orenc17,1,https://github.com/ARMmbed/uvisor/pull/464,we should not reorder the boxes if we dont have any boxes to reorder,we should not reorder the boxes if we dont have any boxes to reorder,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,464,2017-07-27T11:17:54Z,2017-07-31T16:14:55Z,2017-07-31T16:15:03Z,MERGED,True,9,7,2,https://github.com/orenc17,Do not enter __vmpu_order_boxes with 1 box,1,[],https://github.com/ARMmbed/uvisor/pull/464,https://github.com/orenc17,2,https://github.com/ARMmbed/uvisor/pull/464#issuecomment-318337321,we should not reorder the boxes if we dont have any boxes to reorder,retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,464,2017-07-27T11:17:54Z,2017-07-31T16:14:55Z,2017-07-31T16:15:03Z,MERGED,True,9,7,2,https://github.com/orenc17,Do not enter __vmpu_order_boxes with 1 box,1,[],https://github.com/ARMmbed/uvisor/pull/464,https://github.com/niklas-arm,3,https://github.com/ARMmbed/uvisor/pull/464#issuecomment-318349505,we should not reorder the boxes if we dont have any boxes to reorder,Please squash your commits into one commit.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,464,2017-07-27T11:17:54Z,2017-07-31T16:14:55Z,2017-07-31T16:15:03Z,MERGED,True,9,7,2,https://github.com/orenc17,Do not enter __vmpu_order_boxes with 1 box,1,[],https://github.com/ARMmbed/uvisor/pull/464,https://github.com/orenc17,4,https://github.com/ARMmbed/uvisor/pull/464#issuecomment-318389947,we should not reorder the boxes if we dont have any boxes to reorder,squashed,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,464,2017-07-27T11:17:54Z,2017-07-31T16:14:55Z,2017-07-31T16:15:03Z,MERGED,True,9,7,2,https://github.com/orenc17,Do not enter __vmpu_order_boxes with 1 box,1,[],https://github.com/ARMmbed/uvisor/pull/464,https://github.com/Patater,5,https://github.com/ARMmbed/uvisor/pull/464#issuecomment-319054815,we should not reorder the boxes if we dont have any boxes to reorder,Please update the commit message author email address.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,465,2017-07-30T19:17:58Z,2017-08-01T08:52:03Z,2017-08-10T20:20:57Z,MERGED,True,2,2,2,https://github.com/alzix,Remove __builtin_clz(0) calls,1,[],https://github.com/ARMmbed/uvisor/pull/465,https://github.com/alzix,1,https://github.com/ARMmbed/uvisor/pull/465,"According to GCC documentation __builtin_clz(0) result is undefined.

Removed sanity checks with explicit 0 value calls.
Hard-coded expected result for __builtin_clz(0) to 0.","According to GCC documentation __builtin_clz(0) result is undefined.

Removed sanity checks with explicit 0 value calls.
Hard-coded expected result for __builtin_clz(0) to 0.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,465,2017-07-30T19:17:58Z,2017-08-01T08:52:03Z,2017-08-10T20:20:57Z,MERGED,True,2,2,2,https://github.com/alzix,Remove __builtin_clz(0) calls,1,[],https://github.com/ARMmbed/uvisor/pull/465,https://github.com/alzix,2,https://github.com/ARMmbed/uvisor/pull/465#issuecomment-319013358,"According to GCC documentation __builtin_clz(0) result is undefined.

Removed sanity checks with explicit 0 value calls.
Hard-coded expected result for __builtin_clz(0) to 0.",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,465,2017-07-30T19:17:58Z,2017-08-01T08:52:03Z,2017-08-10T20:20:57Z,MERGED,True,2,2,2,https://github.com/alzix,Remove __builtin_clz(0) calls,1,[],https://github.com/ARMmbed/uvisor/pull/465,https://github.com/alzix,3,https://github.com/ARMmbed/uvisor/pull/465#issuecomment-319268075,"According to GCC documentation __builtin_clz(0) result is undefined.

Removed sanity checks with explicit 0 value calls.
Hard-coded expected result for __builtin_clz(0) to 0.",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,466,2017-07-31T08:49:54Z,2017-08-02T08:10:49Z,2017-08-02T08:10:49Z,MERGED,True,60,20,9,https://github.com/theamirocohen,Enable debug print control,1,[],https://github.com/ARMmbed/uvisor/pull/466,https://github.com/theamirocohen,1,https://github.com/ARMmbed/uvisor/pull/466,fix issue: K64F debug version is not working without debugger being attached,fix issue: K64F debug version is not working without debugger being attached,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,466,2017-07-31T08:49:54Z,2017-08-02T08:10:49Z,2017-08-02T08:10:49Z,MERGED,True,60,20,9,https://github.com/theamirocohen,Enable debug print control,1,[],https://github.com/ARMmbed/uvisor/pull/466,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/466#issuecomment-319057243,fix issue: K64F debug version is not working without debugger being attached,"Don't mention Jira tickets in the commit message, since that's an internal tracking reference not useful to those outside of ARM.",True,{'THUMBS_UP': ['https://github.com/theamirocohen']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,466,2017-07-31T08:49:54Z,2017-08-02T08:10:49Z,2017-08-02T08:10:49Z,MERGED,True,60,20,9,https://github.com/theamirocohen,Enable debug print control,1,[],https://github.com/ARMmbed/uvisor/pull/466,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/466#issuecomment-319096323,fix issue: K64F debug version is not working without debugger being attached,Please squash commits.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,466,2017-07-31T08:49:54Z,2017-08-02T08:10:49Z,2017-08-02T08:10:49Z,MERGED,True,60,20,9,https://github.com/theamirocohen,Enable debug print control,1,[],https://github.com/ARMmbed/uvisor/pull/466,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/466#issuecomment-319347958,fix issue: K64F debug version is not working without debugger being attached,"Your commit message explicitly mentions K64F, but doesn't this work for all platforms and not just K64F?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,466,2017-07-31T08:49:54Z,2017-08-02T08:10:49Z,2017-08-02T08:10:49Z,MERGED,True,60,20,9,https://github.com/theamirocohen,Enable debug print control,1,[],https://github.com/ARMmbed/uvisor/pull/466,https://github.com/theamirocohen,5,https://github.com/ARMmbed/uvisor/pull/466#issuecomment-319349471,fix issue: K64F debug version is not working without debugger being attached,"We know for sure that in K64F there is a problem probing the debug bit, it is set with or without semihosting.
This fix will automatically apply to all platforms.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,466,2017-07-31T08:49:54Z,2017-08-02T08:10:49Z,2017-08-02T08:10:49Z,MERGED,True,60,20,9,https://github.com/theamirocohen,Enable debug print control,1,[],https://github.com/ARMmbed/uvisor/pull/466,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/466#issuecomment-319350210,fix issue: K64F debug version is not working without debugger being attached,"Please update the commit message to remove K64F, as the commit updates all targets. Please also explain the motivation for this change in the commit message.
https://docs.mbed.com/docs/mbed-os-handbook/en/latest/cont/code_style/#guidelines-for-github-pull-requests",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,466,2017-07-31T08:49:54Z,2017-08-02T08:10:49Z,2017-08-02T08:10:49Z,MERGED,True,60,20,9,https://github.com/theamirocohen,Enable debug print control,1,[],https://github.com/ARMmbed/uvisor/pull/466,https://github.com/Patater,7,https://github.com/ARMmbed/uvisor/pull/466#issuecomment-319355260,fix issue: K64F debug version is not working without debugger being attached,"6. Wrap the body at 72 characters.
-- https://docs.mbed.com/docs/mbed-os-handbook/en/latest/cont/code_style/#guidelines-for-github-pull-requests",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,467,2017-07-31T09:12:51Z,2017-07-31T13:54:31Z,2017-08-10T20:20:41Z,MERGED,True,3,2,1,https://github.com/alzix,Fix interrups being enabled too soon,1,[],https://github.com/ARMmbed/uvisor/pull/467,https://github.com/alzix,1,https://github.com/ARMmbed/uvisor/pull/467,"Interrupts are disabled upon entrance to main_entry function and re-enabled just before returning from it.
Thus virq_init function should assume that the interrupts are disabled and should not enable/disable them.
Add assertion to insure this behavior.","Interrupts are disabled upon entrance to main_entry function and re-enabled just before returning from it.
Thus virq_init function should assume that the interrupts are disabled and should not enable/disable them.
Add assertion to insure this behavior.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,468,2017-07-31T09:36:20Z,2017-08-07T12:10:00Z,2017-08-07T12:12:02Z,MERGED,True,18,18,3,https://github.com/fangyi-zhou,vmpu: Check start_addr is no greater than end_addr first,1,[],https://github.com/ARMmbed/uvisor/pull/468,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/468,"If the check is not done first, it can be avoided at
vmpu_buffer_access_is_ok_static where there is not check for start is
smaller than end. Line 247 only checks range.","If the check is not done first, it can be avoided at
vmpu_buffer_access_is_ok_static where there is not check for start is
smaller than end. Line 247 only checks range.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,468,2017-07-31T09:36:20Z,2017-08-07T12:10:00Z,2017-08-07T12:12:02Z,MERGED,True,18,18,3,https://github.com/fangyi-zhou,vmpu: Check start_addr is no greater than end_addr first,1,[],https://github.com/ARMmbed/uvisor/pull/468,https://github.com/fangyi-zhou,2,https://github.com/ARMmbed/uvisor/pull/468#issuecomment-320629788,"If the check is not done first, it can be avoided at
vmpu_buffer_access_is_ok_static where there is not check for start is
smaller than end. Line 247 only checks range.",I think the test failure was due to service outage of GitHub at the time of testing.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,468,2017-07-31T09:36:20Z,2017-08-07T12:10:00Z,2017-08-07T12:12:02Z,MERGED,True,18,18,3,https://github.com/fangyi-zhou,vmpu: Check start_addr is no greater than end_addr first,1,[],https://github.com/ARMmbed/uvisor/pull/468,https://github.com/alzix,3,https://github.com/ARMmbed/uvisor/pull/468#issuecomment-320632406,"If the check is not done first, it can be avoided at
vmpu_buffer_access_is_ok_static where there is not check for start is
smaller than end. Line 247 only checks range.",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,468,2017-07-31T09:36:20Z,2017-08-07T12:10:00Z,2017-08-07T12:12:02Z,MERGED,True,18,18,3,https://github.com/fangyi-zhou,vmpu: Check start_addr is no greater than end_addr first,1,[],https://github.com/ARMmbed/uvisor/pull/468,https://github.com/alzix,4,https://github.com/ARMmbed/uvisor/pull/468#issuecomment-320632510,"If the check is not done first, it can be avoided at
vmpu_buffer_access_is_ok_static where there is not check for start is
smaller than end. Line 247 only checks range.",this is a magic word for triggering CI to retest the PR,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,468,2017-07-31T09:36:20Z,2017-08-07T12:10:00Z,2017-08-07T12:12:02Z,MERGED,True,18,18,3,https://github.com/fangyi-zhou,vmpu: Check start_addr is no greater than end_addr first,1,[],https://github.com/ARMmbed/uvisor/pull/468,https://github.com/Patater,5,https://github.com/ARMmbed/uvisor/pull/468#issuecomment-320633487,"If the check is not done first, it can be avoided at
vmpu_buffer_access_is_ok_static where there is not check for start is
smaller than end. Line 247 only checks range.",It looks like the failure was with the K64F without uVisor test run timing out.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,469,2017-07-31T12:30:30Z,2017-08-07T10:59:19Z,2017-08-29T09:49:32Z,MERGED,True,3,1,1,https://github.com/fangyi-zhou,pool_queue: Force termination of find_first,1,[],https://github.com/ARMmbed/uvisor/pull/469,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/469,"When the pool is corrupted to contain a cycle, it would be bad to keep
the loop infinite because this creates a denial of service. The counter
will force termination of look_first to a finite number of iterations.","When the pool is corrupted to contain a cycle, it would be bad to keep
the loop infinite because this creates a denial of service. The counter
will force termination of look_first to a finite number of iterations.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,470,2017-07-31T12:55:54Z,2017-08-15T08:28:00Z,2017-08-15T08:28:00Z,MERGED,True,158,52,12,https://github.com/romkuz01,Provide a structure with the debug information to debug_halt() handler,1,[],https://github.com/ARMmbed/uvisor/pull/470,https://github.com/romkuz01,1,https://github.com/ARMmbed/uvisor/pull/470,"Ticket: https://jira.arm.com/browse/IOTSEC-369
I added a structure with the basic info that's supposed to aid debugging (some registers and exception stack frame when it's present).
A function debug_collect_halt_info() is used to fill this structure from within uVisor.
A new macro HALT_ERROR_EXTENDED() is used to issue halt with this debug information.
Out of the scope of this pull request: implementation of debug_halt() handler that accepts the debug information and prints it.
All the tests and examples that use debug box must be updated, this wasn't done yet.","Ticket: https://jira.arm.com/browse/IOTSEC-369
I added a structure with the basic info that's supposed to aid debugging (some registers and exception stack frame when it's present).
A function debug_collect_halt_info() is used to fill this structure from within uVisor.
A new macro HALT_ERROR_EXTENDED() is used to issue halt with this debug information.
Out of the scope of this pull request: implementation of debug_halt() handler that accepts the debug information and prints it.
All the tests and examples that use debug box must be updated, this wasn't done yet.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,470,2017-07-31T12:55:54Z,2017-08-15T08:28:00Z,2017-08-15T08:28:00Z,MERGED,True,158,52,12,https://github.com/romkuz01,Provide a structure with the debug information to debug_halt() handler,1,[],https://github.com/ARMmbed/uvisor/pull/470,https://github.com/orenc17,2,https://github.com/ARMmbed/uvisor/pull/470#issuecomment-320598089,"Ticket: https://jira.arm.com/browse/IOTSEC-369
I added a structure with the basic info that's supposed to aid debugging (some registers and exception stack frame when it's present).
A function debug_collect_halt_info() is used to fill this structure from within uVisor.
A new macro HALT_ERROR_EXTENDED() is used to issue halt with this debug information.
Out of the scope of this pull request: implementation of debug_halt() handler that accepts the debug information and prints it.
All the tests and examples that use debug box must be updated, this wasn't done yet.",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,470,2017-07-31T12:55:54Z,2017-08-15T08:28:00Z,2017-08-15T08:28:00Z,MERGED,True,158,52,12,https://github.com/romkuz01,Provide a structure with the debug information to debug_halt() handler,1,[],https://github.com/ARMmbed/uvisor/pull/470,https://github.com/romkuz01,3,https://github.com/ARMmbed/uvisor/pull/470#issuecomment-320616522,"Ticket: https://jira.arm.com/browse/IOTSEC-369
I added a structure with the basic info that's supposed to aid debugging (some registers and exception stack frame when it's present).
A function debug_collect_halt_info() is used to fill this structure from within uVisor.
A new macro HALT_ERROR_EXTENDED() is used to issue halt with this debug information.
Out of the scope of this pull request: implementation of debug_halt() handler that accepts the debug information and prints it.
All the tests and examples that use debug box must be updated, this wasn't done yet.","Oren hi,
I forgot to mention one important thing - my commit breaks compilation on NUC42 due to flash image becoming to big. Alex is aware of that.
Roman

On 7 Aug 2017, at 11:10, Oren Cohen <notifications@github.com<mailto:notifications@github.com>> wrote:


retest uvisor

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub<#470 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AWhOBZvdPQ1CvpgETY5GNczc9Qcisd5Zks5sVsZdgaJpZM4OoV2S>.

IMPORTANT NOTICE: The contents of this email and any attachments are confidential and may also be privileged. If you are not the intended recipient, please notify the sender immediately and do not disclose the contents to any other person, use it for any purpose, or store or copy the information in any medium. Thank you.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,470,2017-07-31T12:55:54Z,2017-08-15T08:28:00Z,2017-08-15T08:28:00Z,MERGED,True,158,52,12,https://github.com/romkuz01,Provide a structure with the debug information to debug_halt() handler,1,[],https://github.com/ARMmbed/uvisor/pull/470,https://github.com/orenc17,4,https://github.com/ARMmbed/uvisor/pull/470#issuecomment-320675335,"Ticket: https://jira.arm.com/browse/IOTSEC-369
I added a structure with the basic info that's supposed to aid debugging (some registers and exception stack frame when it's present).
A function debug_collect_halt_info() is used to fill this structure from within uVisor.
A new macro HALT_ERROR_EXTENDED() is used to issue halt with this debug information.
Out of the scope of this pull request: implementation of debug_halt() handler that accepts the debug information and prints it.
All the tests and examples that use debug box must be updated, this wasn't done yet.",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,470,2017-07-31T12:55:54Z,2017-08-15T08:28:00Z,2017-08-15T08:28:00Z,MERGED,True,158,52,12,https://github.com/romkuz01,Provide a structure with the debug information to debug_halt() handler,1,[],https://github.com/ARMmbed/uvisor/pull/470,https://github.com/orenc17,5,https://github.com/ARMmbed/uvisor/pull/470#issuecomment-320688070,"Ticket: https://jira.arm.com/browse/IOTSEC-369
I added a structure with the basic info that's supposed to aid debugging (some registers and exception stack frame when it's present).
A function debug_collect_halt_info() is used to fill this structure from within uVisor.
A new macro HALT_ERROR_EXTENDED() is used to issue halt with this debug information.
Out of the scope of this pull request: implementation of debug_halt() handler that accepts the debug information and prints it.
All the tests and examples that use debug box must be updated, this wasn't done yet.",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,470,2017-07-31T12:55:54Z,2017-08-15T08:28:00Z,2017-08-15T08:28:00Z,MERGED,True,158,52,12,https://github.com/romkuz01,Provide a structure with the debug information to debug_halt() handler,1,[],https://github.com/ARMmbed/uvisor/pull/470,https://github.com/orenc17,6,https://github.com/ARMmbed/uvisor/pull/470#issuecomment-320873758,"Ticket: https://jira.arm.com/browse/IOTSEC-369
I added a structure with the basic info that's supposed to aid debugging (some registers and exception stack frame when it's present).
A function debug_collect_halt_info() is used to fill this structure from within uVisor.
A new macro HALT_ERROR_EXTENDED() is used to issue halt with this debug information.
Out of the scope of this pull request: implementation of debug_halt() handler that accepts the debug information and prints it.
All the tests and examples that use debug box must be updated, this wasn't done yet.",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,470,2017-07-31T12:55:54Z,2017-08-15T08:28:00Z,2017-08-15T08:28:00Z,MERGED,True,158,52,12,https://github.com/romkuz01,Provide a structure with the debug information to debug_halt() handler,1,[],https://github.com/ARMmbed/uvisor/pull/470,https://github.com/Patater,7,https://github.com/ARMmbed/uvisor/pull/470#issuecomment-321485018,"Ticket: https://jira.arm.com/browse/IOTSEC-369
I added a structure with the basic info that's supposed to aid debugging (some registers and exception stack frame when it's present).
A function debug_collect_halt_info() is used to fill this structure from within uVisor.
A new macro HALT_ERROR_EXTENDED() is used to issue halt with this debug information.
Out of the scope of this pull request: implementation of debug_halt() handler that accepts the debug information and prints it.
All the tests and examples that use debug box must be updated, this wasn't done yet.","Please follow our commit guidelines at https://docs.mbed.com/docs/mbed-os-handbook/en/latest/cont/code_style/

Remove period from end of commit message titles
Start commit message titles with a capital letter
Describe the rationale for the change in the commit message description
Commits should be self-contained and cohesive

Update uvisor-tests.txt pointer in the same commit that requires new tests
Increase the maximum flash size before the commit that requires the increase (all commits should build on their own)


Commits should not link to nor contain non-public information

Please also rebase the commits in this PR on the latest master.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,470,2017-07-31T12:55:54Z,2017-08-15T08:28:00Z,2017-08-15T08:28:00Z,MERGED,True,158,52,12,https://github.com/romkuz01,Provide a structure with the debug information to debug_halt() handler,1,[],https://github.com/ARMmbed/uvisor/pull/470,https://github.com/Patater,8,https://github.com/ARMmbed/uvisor/pull/470#issuecomment-322200885,"Ticket: https://jira.arm.com/browse/IOTSEC-369
I added a structure with the basic info that's supposed to aid debugging (some registers and exception stack frame when it's present).
A function debug_collect_halt_info() is used to fill this structure from within uVisor.
A new macro HALT_ERROR_EXTENDED() is used to issue halt with this debug information.
Out of the scope of this pull request: implementation of debug_halt() handler that accepts the debug information and prints it.
All the tests and examples that use debug box must be updated, this wasn't done yet.","I get this error when building.
./core/vmpu/src/mpu_armv8m/vmpu_armv8m.c:125:9: error: implicit declaration of function 'debug_collect_halt_info' [-Werror=implicit-function-declaration]
     if (debug_collect_halt_info(lr, sp, &info)) {
         ^~~~~~~~~~~~~~~~~~~~~~~```",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,470,2017-07-31T12:55:54Z,2017-08-15T08:28:00Z,2017-08-15T08:28:00Z,MERGED,True,158,52,12,https://github.com/romkuz01,Provide a structure with the debug information to debug_halt() handler,1,[],https://github.com/ARMmbed/uvisor/pull/470,https://github.com/alzix,9,https://github.com/ARMmbed/uvisor/pull/470#issuecomment-322227726,"Ticket: https://jira.arm.com/browse/IOTSEC-369
I added a structure with the basic info that's supposed to aid debugging (some registers and exception stack frame when it's present).
A function debug_collect_halt_info() is used to fill this structure from within uVisor.
A new macro HALT_ERROR_EXTENDED() is used to issue halt with this debug information.
Out of the scope of this pull request: implementation of debug_halt() handler that accepts the debug information and prints it.
All the tests and examples that use debug box must be updated, this wasn't done yet.",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,470,2017-07-31T12:55:54Z,2017-08-15T08:28:00Z,2017-08-15T08:28:00Z,MERGED,True,158,52,12,https://github.com/romkuz01,Provide a structure with the debug information to debug_halt() handler,1,[],https://github.com/ARMmbed/uvisor/pull/470,https://github.com/orenc17,10,https://github.com/ARMmbed/uvisor/pull/470#issuecomment-322238748,"Ticket: https://jira.arm.com/browse/IOTSEC-369
I added a structure with the basic info that's supposed to aid debugging (some registers and exception stack frame when it's present).
A function debug_collect_halt_info() is used to fill this structure from within uVisor.
A new macro HALT_ERROR_EXTENDED() is used to issue halt with this debug information.
Out of the scope of this pull request: implementation of debug_halt() handler that accepts the debug information and prints it.
All the tests and examples that use debug box must be updated, this wasn't done yet.",fixed that,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,471,2017-07-31T15:59:39Z,2017-08-02T16:15:57Z,2017-08-02T16:15:57Z,MERGED,True,1,1,1,https://github.com/c1728p9,Fix declaration of svcRtxKernelLock,1,[],https://github.com/ARMmbed/uvisor/pull/471,https://github.com/c1728p9,1,https://github.com/ARMmbed/uvisor/pull/471,Change the return type of svcRtxKernelLock from uint32_t to int32_t so it matches RTX - https://github.com/ARMmbed/mbed-os/blob/master/rtos/rtx5/TARGET_CORTEX_M/rtx_lib.h#L122.,Change the return type of svcRtxKernelLock from uint32_t to int32_t so it matches RTX - https://github.com/ARMmbed/mbed-os/blob/master/rtos/rtx5/TARGET_CORTEX_M/rtx_lib.h#L122.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,472,2017-07-31T16:03:10Z,2017-08-03T12:52:46Z,2017-08-03T12:52:46Z,CLOSED,False,2,2,1,https://github.com/c1728p9,Remove RTX specific types,1,[],https://github.com/ARMmbed/uvisor/pull/472,https://github.com/c1728p9,1,https://github.com/ARMmbed/uvisor/pull/472,Replace use of osRtxMutex_t with the generic mbed_rtos_storage_mutex_t.,Replace use of osRtxMutex_t with the generic mbed_rtos_storage_mutex_t.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,472,2017-07-31T16:03:10Z,2017-08-03T12:52:46Z,2017-08-03T12:52:46Z,CLOSED,False,2,2,1,https://github.com/c1728p9,Remove RTX specific types,1,[],https://github.com/ARMmbed/uvisor/pull/472,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/472#issuecomment-319133902,Replace use of osRtxMutex_t with the generic mbed_rtos_storage_mutex_t.,Please explain the motivation for the change in the commit message. I'm not yet sure there is a strong enough motivation to use the mbed OS type over the RTX type.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,472,2017-07-31T16:03:10Z,2017-08-03T12:52:46Z,2017-08-03T12:52:46Z,CLOSED,False,2,2,1,https://github.com/c1728p9,Remove RTX specific types,1,[],https://github.com/ARMmbed/uvisor/pull/472,https://github.com/c1728p9,3,https://github.com/ARMmbed/uvisor/pull/472#issuecomment-319315932,Replace use of osRtxMutex_t with the generic mbed_rtos_storage_mutex_t.,"Hi @Patater, I updated the PR to have a more detailed commit message. It might be that it doesn't make sense to have other back ends to uvisior. If this is the case I can close out this PR and update ARMmbed/mbed-os#4776 instead. Just let me know.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,472,2017-07-31T16:03:10Z,2017-08-03T12:52:46Z,2017-08-03T12:52:46Z,CLOSED,False,2,2,1,https://github.com/c1728p9,Remove RTX specific types,1,[],https://github.com/ARMmbed/uvisor/pull/472,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/472#issuecomment-319324375,Replace use of osRtxMutex_t with the generic mbed_rtos_storage_mutex_t.,"Seems weird that CMSIS doesn't already deal with this problem. It feels like ""mbed_rtos_storage.h"" should be ""cmsis_rtos_storage.h"" and part of upstream CMSIS.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,472,2017-07-31T16:03:10Z,2017-08-03T12:52:46Z,2017-08-03T12:52:46Z,CLOSED,False,2,2,1,https://github.com/c1728p9,Remove RTX specific types,1,[],https://github.com/ARMmbed/uvisor/pull/472,https://github.com/c1728p9,5,https://github.com/ARMmbed/uvisor/pull/472#issuecomment-319326414,Replace use of osRtxMutex_t with the generic mbed_rtos_storage_mutex_t.,@bulislaw did you propose adding storage abstraction to cmsis-os?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,472,2017-07-31T16:03:10Z,2017-08-03T12:52:46Z,2017-08-03T12:52:46Z,CLOSED,False,2,2,1,https://github.com/c1728p9,Remove RTX specific types,1,[],https://github.com/ARMmbed/uvisor/pull/472,https://github.com/bulislaw,6,https://github.com/ARMmbed/uvisor/pull/472#issuecomment-319330070,Replace use of osRtxMutex_t with the generic mbed_rtos_storage_mutex_t.,"Yes, there was longer discussion about that with Robi and Reinhard and maybe Jonatan. They said that from RTOS/RTX point of view that's wasn't necessary as far as I remember.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,472,2017-07-31T16:03:10Z,2017-08-03T12:52:46Z,2017-08-03T12:52:46Z,CLOSED,False,2,2,1,https://github.com/c1728p9,Remove RTX specific types,1,[],https://github.com/ARMmbed/uvisor/pull/472,https://github.com/Patater,7,https://github.com/ARMmbed/uvisor/pull/472#issuecomment-319682838,Replace use of osRtxMutex_t with the generic mbed_rtos_storage_mutex_t.,This depends on #471,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,472,2017-07-31T16:03:10Z,2017-08-03T12:52:46Z,2017-08-03T12:52:46Z,CLOSED,False,2,2,1,https://github.com/c1728p9,Remove RTX specific types,1,[],https://github.com/ARMmbed/uvisor/pull/472,https://github.com/Patater,8,https://github.com/ARMmbed/uvisor/pull/472#issuecomment-319948406,Replace use of osRtxMutex_t with the generic mbed_rtos_storage_mutex_t.,retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,472,2017-07-31T16:03:10Z,2017-08-03T12:52:46Z,2017-08-03T12:52:46Z,CLOSED,False,2,2,1,https://github.com/c1728p9,Remove RTX specific types,1,[],https://github.com/ARMmbed/uvisor/pull/472,https://github.com/Patater,9,https://github.com/ARMmbed/uvisor/pull/472#issuecomment-319960160,Replace use of osRtxMutex_t with the generic mbed_rtos_storage_mutex_t.,"Thanks for the PR, but we're going to reject this until the time when we are ready to integrate with a non-RTX mbed OS backend.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,473,2017-08-01T09:51:49Z,2017-08-22T14:46:26Z,2017-08-22T14:53:16Z,MERGED,True,115,103,9,https://github.com/fangyi-zhou,pool_queue: Additional sanity checks,7,[],https://github.com/ARMmbed/uvisor/pull/473,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/473,"Summary: the free slot in the pool should be completely disjoint with the enqueued slots in the queue. Adding additional checks allows the data structure to be more robust against invalid user operations/corrupted data structure.

Checks whether a slot in enqueued before freeing
Checks whether a slot is dequeued before enqueueing
Checks whether the next slot is in bound before continuing the find
Refactor dequeue checks","Summary: the free slot in the pool should be completely disjoint with the enqueued slots in the queue. Adding additional checks allows the data structure to be more robust against invalid user operations/corrupted data structure.

Checks whether a slot in enqueued before freeing
Checks whether a slot is dequeued before enqueueing
Checks whether the next slot is in bound before continuing the find
Refactor dequeue checks",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,473,2017-08-01T09:51:49Z,2017-08-22T14:46:26Z,2017-08-22T14:53:16Z,MERGED,True,115,103,9,https://github.com/fangyi-zhou,pool_queue: Additional sanity checks,7,[],https://github.com/ARMmbed/uvisor/pull/473,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/473#issuecomment-320644326,"Summary: the free slot in the pool should be completely disjoint with the enqueued slots in the queue. Adding additional checks allows the data structure to be more robust against invalid user operations/corrupted data structure.

Checks whether a slot in enqueued before freeing
Checks whether a slot is dequeued before enqueueing
Checks whether the next slot is in bound before continuing the find
Refactor dequeue checks",Please rebase your changes on latest master (don't merge).,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,474,2017-08-02T12:17:51Z,2017-08-03T14:34:11Z,2017-08-20T08:22:12Z,MERGED,True,73,123,5,https://github.com/romkuz01,Move stack frame structure definition to an external header file,2,[],https://github.com/ARMmbed/uvisor/pull/474,https://github.com/romkuz01,1,https://github.com/ARMmbed/uvisor/pull/474,"The same structure was defined in both scheduler.c and context.c
Moved it to halt_exports.h where it will also be used in halt_info_t structure.","The same structure was defined in both scheduler.c and context.c
Moved it to halt_exports.h where it will also be used in halt_info_t structure.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,475,2017-08-03T09:21:43Z,2017-08-14T17:41:19Z,2017-08-29T09:49:30Z,MERGED,True,5,0,1,https://github.com/fangyi-zhou,pool_queue: Add static assert for management_array offset,1,[],https://github.com/ARMmbed/uvisor/pull/475,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/475,"In order for the GNU extension of static initialisation of flexible
array member to work. Care must be taken to check whether the offset of
management_array is the size of the structure, so that accessing the
management_array will be to the allocated static memory following the
pool struct. If this assertion fails, accessing management_array might
end of accessing the struct padding inserted by the compiler.
Additional explanation:
Current struct layout



byte
byte
byte
byte




magic
magic
magic
magic


array
array
array
array


stride
stride
stride
stride


num
num_allocated
first_free
spinlock


->






-> = location management_array points to (outside the struct)
If future modifications are to be added to this data structure, say adding/removing an u8 field. A possible layout will be



byte
byte
byte
byte




magic
magic
magic
magic


array
array
array
array


stride
stride
stride
stride


num
num_allocated
first_free
spinlock


new_field
->padding
padding
padding



-> = location management_array points to (inside the struct)
In this case, management_array points to the struct padding due to the layout of uvisor_pool_entry_t being u8. However, the actual management array is located after the paddings (due to struct alignments).
The C standard does not make clear requirements on struct paddings, but it would be nice to avoid the grey area and be certain.
See also: http://www.cl.cam.ac.uk/~pes20/cerberus/notes30.pdf Section 3.3","In order for the GNU extension of static initialisation of flexible
array member to work. Care must be taken to check whether the offset of
management_array is the size of the structure, so that accessing the
management_array will be to the allocated static memory following the
pool struct. If this assertion fails, accessing management_array might
end of accessing the struct padding inserted by the compiler.
Additional explanation:
Current struct layout



byte
byte
byte
byte




magic
magic
magic
magic


array
array
array
array


stride
stride
stride
stride


num
num_allocated
first_free
spinlock


->






-> = location management_array points to (outside the struct)
If future modifications are to be added to this data structure, say adding/removing an u8 field. A possible layout will be



byte
byte
byte
byte




magic
magic
magic
magic


array
array
array
array


stride
stride
stride
stride


num
num_allocated
first_free
spinlock


new_field
->padding
padding
padding



-> = location management_array points to (inside the struct)
In this case, management_array points to the struct padding due to the layout of uvisor_pool_entry_t being u8. However, the actual management array is located after the paddings (due to struct alignments).
The C standard does not make clear requirements on struct paddings, but it would be nice to avoid the grey area and be certain.
See also: http://www.cl.cam.ac.uk/~pes20/cerberus/notes30.pdf Section 3.3",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,476,2017-08-07T13:39:44Z,2017-08-10T08:07:58Z,2017-08-10T08:07:58Z,MERGED,True,2,119,4,https://github.com/mikisch81,Remove memory map references from uvisor core,2,[],https://github.com/ARMmbed/uvisor/pull/476,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/476,"Fix #398
Remove any platform-specific memory-map references from uvisor core.","Fix #398
Remove any platform-specific memory-map references from uvisor core.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,477,2017-08-07T15:28:35Z,2017-08-11T10:10:05Z,2017-08-11T10:10:05Z,MERGED,True,1,1,1,https://github.com/Patater,priv_sys_hooks: Fix build warning,1,[],https://github.com/ARMmbed/uvisor/pull/477,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/477,"Change the internal priv_os_suspend function pointer type to match RTX's svcRtxKernelLock type.
[Warning] box_init.c@34,73: initialization from incompatible pointer type [-Wincompatible-pointer-types]

Fixes 49d882c (""Fix declaration of svcRtxKernelLock"")","Change the internal priv_os_suspend function pointer type to match RTX's svcRtxKernelLock type.
[Warning] box_init.c@34,73: initialization from incompatible pointer type [-Wincompatible-pointer-types]

Fixes 49d882c (""Fix declaration of svcRtxKernelLock"")",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,478,2017-08-08T13:09:14Z,2017-08-14T14:44:11Z,2017-08-14T14:44:11Z,MERGED,True,14,6,2,https://github.com/theamirocohen,Implement a STATIC_ASSERT macro,1,[],https://github.com/ARMmbed/uvisor/pull/478,https://github.com/theamirocohen,1,https://github.com/ARMmbed/uvisor/pull/478,Implement STATIC_ASSERT macro to catch errors at compile time.,Implement STATIC_ASSERT macro to catch errors at compile time.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,478,2017-08-08T13:09:14Z,2017-08-14T14:44:11Z,2017-08-14T14:44:11Z,MERGED,True,14,6,2,https://github.com/theamirocohen,Implement a STATIC_ASSERT macro,1,[],https://github.com/ARMmbed/uvisor/pull/478,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/478#issuecomment-320971711,Implement STATIC_ASSERT macro to catch errors at compile time.,"The fallback implementation is not working when UVISOR_STATIC_ASSERT is used as a global statement, as in 
  
    
      uvisor/api/inc/rpc_gateway.h
    
    
         Line 47
      in
      bd3ec19
    
  
  
    

        
          
           #define UVISOR_BOX_RPC_GATEWAY_SYNC(box_name, gw_name, fn_name, fn_ret, ...) \ 
        
    
  

. Please revise the implementation so that it additionally works in this case.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,478,2017-08-08T13:09:14Z,2017-08-14T14:44:11Z,2017-08-14T14:44:11Z,MERGED,True,14,6,2,https://github.com/theamirocohen,Implement a STATIC_ASSERT macro,1,[],https://github.com/ARMmbed/uvisor/pull/478,https://github.com/alzix,3,https://github.com/ARMmbed/uvisor/pull/478#issuecomment-321550432,Implement STATIC_ASSERT macro to catch errors at compile time.,"please squash the ""fix code review"" commit",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,479,2017-08-09T10:59:13Z,2017-08-15T09:15:39Z,2017-08-15T09:15:40Z,CLOSED,False,1,1,1,https://github.com/orenc17,Update uvisor-tests.txt to latest,1,[],https://github.com/ARMmbed/uvisor/pull/479,https://github.com/orenc17,1,https://github.com/ARMmbed/uvisor/pull/479,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,479,2017-08-09T10:59:13Z,2017-08-15T09:15:39Z,2017-08-15T09:15:40Z,CLOSED,False,1,1,1,https://github.com/orenc17,Update uvisor-tests.txt to latest,1,[],https://github.com/ARMmbed/uvisor/pull/479,https://github.com/orenc17,2,https://github.com/ARMmbed/uvisor/pull/479#issuecomment-322209019,,retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,479,2017-08-09T10:59:13Z,2017-08-15T09:15:39Z,2017-08-15T09:15:40Z,CLOSED,False,1,1,1,https://github.com/orenc17,Update uvisor-tests.txt to latest,1,[],https://github.com/ARMmbed/uvisor/pull/479,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/479#issuecomment-322420190,,We should update only when we need to.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,480,2017-08-10T08:44:01Z,2017-08-11T10:08:50Z,2017-08-11T10:08:50Z,MERGED,True,1,1,1,https://github.com/p03189,vmpu: armv8m: disable SAU region before any modification,1,[],https://github.com/ARMmbed/uvisor/pull/480,https://github.com/p03189,1,https://github.com/ARMmbed/uvisor/pull/480,"If a SAU region is not disabled, setting RBAR to zero will
extend SAU region and cause a Secure Fault if
vmpu_mpu_invalidate() is covered.
Signed-off-by: Jethro Hsu jethro@realtek.com","If a SAU region is not disabled, setting RBAR to zero will
extend SAU region and cause a Secure Fault if
vmpu_mpu_invalidate() is covered.
Signed-off-by: Jethro Hsu jethro@realtek.com",True,{'THUMBS_UP': ['https://github.com/sychen']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,480,2017-08-10T08:44:01Z,2017-08-11T10:08:50Z,2017-08-11T10:08:50Z,MERGED,True,1,1,1,https://github.com/p03189,vmpu: armv8m: disable SAU region before any modification,1,[],https://github.com/ARMmbed/uvisor/pull/480,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/480#issuecomment-321496481,"If a SAU region is not disabled, setting RBAR to zero will
extend SAU region and cause a Secure Fault if
vmpu_mpu_invalidate() is covered.
Signed-off-by: Jethro Hsu jethro@realtek.com","Thanks for the PR.
Could you please login to developer.mbed.org and agree to the contributor agreement?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,480,2017-08-10T08:44:01Z,2017-08-11T10:08:50Z,2017-08-11T10:08:50Z,MERGED,True,1,1,1,https://github.com/p03189,vmpu: armv8m: disable SAU region before any modification,1,[],https://github.com/ARMmbed/uvisor/pull/480,https://github.com/p03189,3,https://github.com/ARMmbed/uvisor/pull/480#issuecomment-321570192,"If a SAU region is not disabled, setting RBAR to zero will
extend SAU region and cause a Secure Fault if
vmpu_mpu_invalidate() is covered.
Signed-off-by: Jethro Hsu jethro@realtek.com","Ok, it is done.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,480,2017-08-10T08:44:01Z,2017-08-11T10:08:50Z,2017-08-11T10:08:50Z,MERGED,True,1,1,1,https://github.com/p03189,vmpu: armv8m: disable SAU region before any modification,1,[],https://github.com/ARMmbed/uvisor/pull/480,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/480#issuecomment-321570464,"If a SAU region is not disabled, setting RBAR to zero will
extend SAU region and cause a Secure Fault if
vmpu_mpu_invalidate() is covered.
Signed-off-by: Jethro Hsu jethro@realtek.com","Thanks.
Could you please update the commit description to follow our style guide? https://docs.mbed.com/docs/mbed-os-handbook/en/latest/cont/code_style/

Please remove ""Signed-off-by"". We'll maintain the authorship on the commit. You've signed the CLA already.
Use capital to start commit message titles after the prefixes. ""Disable SAU region"" instead of ""disable SAU region""",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,480,2017-08-10T08:44:01Z,2017-08-11T10:08:50Z,2017-08-11T10:08:50Z,MERGED,True,1,1,1,https://github.com/p03189,vmpu: armv8m: disable SAU region before any modification,1,[],https://github.com/ARMmbed/uvisor/pull/480,https://github.com/p03189,5,https://github.com/ARMmbed/uvisor/pull/480#issuecomment-321720956,"If a SAU region is not disabled, setting RBAR to zero will
extend SAU region and cause a Secure Fault if
vmpu_mpu_invalidate() is covered.
Signed-off-by: Jethro Hsu jethro@realtek.com","Hi @Patater,
I have updated commit description according to your style guide.
Thanks for reviewing my work.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,480,2017-08-10T08:44:01Z,2017-08-11T10:08:50Z,2017-08-11T10:08:50Z,MERGED,True,1,1,1,https://github.com/p03189,vmpu: armv8m: disable SAU region before any modification,1,[],https://github.com/ARMmbed/uvisor/pull/480,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/480#issuecomment-321748181,"If a SAU region is not disabled, setting RBAR to zero will
extend SAU region and cause a Secure Fault if
vmpu_mpu_invalidate() is covered.
Signed-off-by: Jethro Hsu jethro@realtek.com","Could you link me to your developer.mbed.org user profile page? I'm looking to see that your profile has the contributor agreement badge.
For example, at the bottom right of the user profile page for 'sam_grove'.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,480,2017-08-10T08:44:01Z,2017-08-11T10:08:50Z,2017-08-11T10:08:50Z,MERGED,True,1,1,1,https://github.com/p03189,vmpu: armv8m: disable SAU region before any modification,1,[],https://github.com/ARMmbed/uvisor/pull/480,https://github.com/p03189,7,https://github.com/ARMmbed/uvisor/pull/480#issuecomment-321752700,"If a SAU region is not disabled, setting RBAR to zero will
extend SAU region and cause a Secure Fault if
vmpu_mpu_invalidate() is covered.
Signed-off-by: Jethro Hsu jethro@realtek.com","Hi @Patater
Please have a visit to this page: Jethro_Hsu",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,480,2017-08-10T08:44:01Z,2017-08-11T10:08:50Z,2017-08-11T10:08:50Z,MERGED,True,1,1,1,https://github.com/p03189,vmpu: armv8m: disable SAU region before any modification,1,[],https://github.com/ARMmbed/uvisor/pull/480,https://github.com/Patater,8,https://github.com/ARMmbed/uvisor/pull/480#issuecomment-321775166,"If a SAU region is not disabled, setting RBAR to zero will
extend SAU region and cause a Secure Fault if
vmpu_mpu_invalidate() is covered.
Signed-off-by: Jethro Hsu jethro@realtek.com",Thanks very much!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,481,2017-08-10T12:03:23Z,2017-08-11T09:52:35Z,2017-08-11T09:52:35Z,MERGED,True,7,76,13,https://github.com/mikisch81,Remove memory_map sources and references,1,[],https://github.com/ARMmbed/uvisor/pull/481,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/481,"Remove memory_map.h/c.
Remove includes for memory_map.h.
Update QUICKSTART.md with correct fault trace.","Remove memory_map.h/c.
Remove includes for memory_map.h.
Update QUICKSTART.md with correct fault trace.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,481,2017-08-10T12:03:23Z,2017-08-11T09:52:35Z,2017-08-11T09:52:35Z,MERGED,True,7,76,13,https://github.com/mikisch81,Remove memory_map sources and references,1,[],https://github.com/ARMmbed/uvisor/pull/481,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/481#issuecomment-321534958,"Remove memory_map.h/c.
Remove includes for memory_map.h.
Update QUICKSTART.md with correct fault trace.",Please explain why the memory map is being removed in the commit message.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,482,2017-08-10T13:00:29Z,2017-08-10T16:17:51Z,2017-08-29T09:49:31Z,MERGED,True,1,1,1,https://github.com/fangyi-zhou,armv8m_vmpu: Remove magic number in vmpu_arch_init,1,[],https://github.com/ARMmbed/uvisor/pull/482,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/482,2 -> SAU_RLAR_NSC_Msk,2 -> SAU_RLAR_NSC_Msk,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,485,2017-08-14T11:44:02Z,2017-08-30T11:10:14Z,2017-08-30T11:10:14Z,CLOSED,False,12,4,4,https://github.com/mikisch81,Clear magic numbers from code,2,[],https://github.com/ARMmbed/uvisor/pull/485,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/485,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,485,2017-08-14T11:44:02Z,2017-08-30T11:10:14Z,2017-08-30T11:10:14Z,CLOSED,False,12,4,4,https://github.com/mikisch81,Clear magic numbers from code,2,[],https://github.com/ARMmbed/uvisor/pull/485,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/485#issuecomment-322172899,,"Thanks. This on the right track.
Please resolve test failures.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,485,2017-08-14T11:44:02Z,2017-08-30T11:10:14Z,2017-08-30T11:10:14Z,CLOSED,False,12,4,4,https://github.com/mikisch81,Clear magic numbers from code,2,[],https://github.com/ARMmbed/uvisor/pull/485,https://github.com/mikisch81,3,https://github.com/ARMmbed/uvisor/pull/485#issuecomment-324637048,,"@Patater @niklas-arm @alzix
Can you take another look, seems that there were 2 register sets which are not right for v8m.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,485,2017-08-14T11:44:02Z,2017-08-30T11:10:14Z,2017-08-30T11:10:14Z,CLOSED,False,12,4,4,https://github.com/mikisch81,Clear magic numbers from code,2,[],https://github.com/ARMmbed/uvisor/pull/485,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/485#issuecomment-325959002,,Merged manually. Thanks!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,486,2017-08-14T11:59:32Z,,2017-09-28T13:43:00Z,OPEN,False,24,99,1,https://github.com/orenc17,Handle armv8m unpriv_access with SAU,1,"['needs: ci', 'needs: preceding PR']",https://github.com/ARMmbed/uvisor/pull/486,https://github.com/orenc17,1,https://github.com/ARMmbed/uvisor/pull/486,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,486,2017-08-14T11:59:32Z,,2017-09-28T13:43:00Z,OPEN,False,24,99,1,https://github.com/orenc17,Handle armv8m unpriv_access with SAU,1,"['needs: ci', 'needs: preceding PR']",https://github.com/ARMmbed/uvisor/pull/486,https://github.com/orenc17,2,https://github.com/ARMmbed/uvisor/pull/486#issuecomment-322219623,,works well on v8,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,486,2017-08-14T11:59:32Z,,2017-09-28T13:43:00Z,OPEN,False,24,99,1,https://github.com/orenc17,Handle armv8m unpriv_access with SAU,1,"['needs: ci', 'needs: preceding PR']",https://github.com/ARMmbed/uvisor/pull/486,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/486#issuecomment-322248033,,What testing has been done with v8-M? All v8-M tests pass?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,486,2017-08-14T11:59:32Z,,2017-09-28T13:43:00Z,OPEN,False,24,99,1,https://github.com/orenc17,Handle armv8m unpriv_access with SAU,1,"['needs: ci', 'needs: preceding PR']",https://github.com/ARMmbed/uvisor/pull/486,https://github.com/orenc17,4,https://github.com/ARMmbed/uvisor/pull/486#issuecomment-322413110,,@niklas-arm could you review the changes and compare it to your work?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,486,2017-08-14T11:59:32Z,,2017-09-28T13:43:00Z,OPEN,False,24,99,1,https://github.com/orenc17,Handle armv8m unpriv_access with SAU,1,"['needs: ci', 'needs: preceding PR']",https://github.com/ARMmbed/uvisor/pull/486,https://github.com/Patater,5,https://github.com/ARMmbed/uvisor/pull/486#issuecomment-322426584,,Looks like this is suffering from the same problem on the page_heap_one_page_test_invalid_access_0 test as Niklas's implementation. Please debug.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,486,2017-08-14T11:59:32Z,,2017-09-28T13:43:00Z,OPEN,False,24,99,1,https://github.com/orenc17,Handle armv8m unpriv_access with SAU,1,"['needs: ci', 'needs: preceding PR']",https://github.com/ARMmbed/uvisor/pull/486,https://github.com/niklas-arm,6,https://github.com/ARMmbed/uvisor/pull/486#issuecomment-322452612,,This is pretty similar to what I implemented. The issue is related to the SAU not being updated with the region containing the accessed memory anymore. For some reason this now leads to a hardfault.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,486,2017-08-14T11:59:32Z,,2017-09-28T13:43:00Z,OPEN,False,24,99,1,https://github.com/orenc17,Handle armv8m unpriv_access with SAU,1,"['needs: ci', 'needs: preceding PR']",https://github.com/ARMmbed/uvisor/pull/486,https://github.com/Patater,7,https://github.com/ARMmbed/uvisor/pull/486#issuecomment-327423878,,"This is waiting for #497 to merge first, so that the debug box has a good context in which to run.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,486,2017-08-14T11:59:32Z,,2017-09-28T13:43:00Z,OPEN,False,24,99,1,https://github.com/orenc17,Handle armv8m unpriv_access with SAU,1,"['needs: ci', 'needs: preceding PR']",https://github.com/ARMmbed/uvisor/pull/486,https://github.com/orenc17,8,https://github.com/ARMmbed/uvisor/pull/486#issuecomment-327749822,,"@Patater  this PR is independent from #497
the PR  that should wait for #497 is PR #496",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,486,2017-08-14T11:59:32Z,,2017-09-28T13:43:00Z,OPEN,False,24,99,1,https://github.com/orenc17,Handle armv8m unpriv_access with SAU,1,"['needs: ci', 'needs: preceding PR']",https://github.com/ARMmbed/uvisor/pull/486,https://github.com/Patater,9,https://github.com/ARMmbed/uvisor/pull/486#issuecomment-327755019,,"This needs to wait, as not all the v8-M tests are passing if I merge this.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,487,2017-08-14T12:15:36Z,2017-08-23T17:23:42Z,2017-08-23T17:23:42Z,MERGED,True,90,97,16,https://github.com/danny4478,Make debug box statically configurable,1,[],https://github.com/ARMmbed/uvisor/pull/487,https://github.com/danny4478,1,https://github.com/ARMmbed/uvisor/pull/487,"Modifications:

SVC for debug box registration removed
Registration to debug_box is now done statically
Documentation updated

Testing:

Tested on public box (debug-fault example) - OK
Tested on secure box (number-store example) - OK
Run on uvisor-tests - OK","Modifications:

SVC for debug box registration removed
Registration to debug_box is now done statically
Documentation updated

Testing:

Tested on public box (debug-fault example) - OK
Tested on secure box (number-store example) - OK
Run on uvisor-tests - OK",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,487,2017-08-14T12:15:36Z,2017-08-23T17:23:42Z,2017-08-23T17:23:42Z,MERGED,True,90,97,16,https://github.com/danny4478,Make debug box statically configurable,1,[],https://github.com/ARMmbed/uvisor/pull/487,https://github.com/danny4478,2,https://github.com/ARMmbed/uvisor/pull/487#issuecomment-323582334,"Modifications:

SVC for debug box registration removed
Registration to debug_box is now done statically
Documentation updated

Testing:

Tested on public box (debug-fault example) - OK
Tested on secure box (number-store example) - OK
Run on uvisor-tests - OK","This PR is ready for review.
Last commit points to corresponding PR in uvisor_tests.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,488,2017-08-14T15:16:30Z,2017-08-14T16:02:07Z,2017-08-14T16:02:07Z,MERGED,True,2,3,2,https://github.com/theamirocohen,Convert asserts to static asserts,1,[],https://github.com/ARMmbed/uvisor/pull/488,https://github.com/theamirocohen,1,https://github.com/ARMmbed/uvisor/pull/488,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,488,2017-08-14T15:16:30Z,2017-08-14T16:02:07Z,2017-08-14T16:02:07Z,MERGED,True,2,3,2,https://github.com/theamirocohen,Convert asserts to static asserts,1,[],https://github.com/ARMmbed/uvisor/pull/488,https://github.com/alzix,2,https://github.com/ARMmbed/uvisor/pull/488#issuecomment-322221769,,retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,489,2017-08-16T12:12:55Z,2017-08-23T17:26:54Z,2017-08-23T17:26:54Z,MERGED,True,16,0,2,https://github.com/orenc17,Travis integration,1,[],https://github.com/ARMmbed/uvisor/pull/489,https://github.com/orenc17,1,https://github.com/ARMmbed/uvisor/pull/489,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,489,2017-08-16T12:12:55Z,2017-08-23T17:26:54Z,2017-08-23T17:26:54Z,MERGED,True,16,0,2,https://github.com/orenc17,Travis integration,1,[],https://github.com/ARMmbed/uvisor/pull/489,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/489#issuecomment-324064657,,"Please follow our commit guidelines.
https://docs.mbed.com/docs/mbed-os-handbook/en/5.5/cont/code_style/",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,490,2017-08-16T15:02:31Z,2017-08-17T07:28:11Z,2017-08-29T09:49:28Z,MERGED,True,1,1,1,https://github.com/fangyi-zhou,ipc: Use memmove instead of memcpy,1,[],https://github.com/ARMmbed/uvisor/pull/490,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/490,"Memcpy may trigger undefined behaviour when there is an overlap between
two memory regions. Using memmove is safer.","Memcpy may trigger undefined behaviour when there is an overlap between
two memory regions. Using memmove is safer.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,491,2017-08-16T16:20:09Z,2017-09-15T08:24:59Z,2017-09-15T08:24:59Z,CLOSED,False,33,3,2,https://github.com/fangyi-zhou,ipc: Check the token of IO descriptor before processing,3,[],https://github.com/ARMmbed/uvisor/pull/491,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/491,"When control has been returned to user after IPC request. It is possible
that the user modifies the token. In Line 146/150, the token has been
read from the descriptor without checking. This may lead to token
corruption, e.g. some unallocated tokens get set to complete.","When control has been returned to user after IPC request. It is possible
that the user modifies the token. In Line 146/150, the token has been
read from the descriptor without checking. This may lead to token
corruption, e.g. some unallocated tokens get set to complete.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,491,2017-08-16T16:20:09Z,2017-09-15T08:24:59Z,2017-09-15T08:24:59Z,CLOSED,False,33,3,2,https://github.com/fangyi-zhou,ipc: Check the token of IO descriptor before processing,3,[],https://github.com/ARMmbed/uvisor/pull/491,https://github.com/fangyi-zhou,2,https://github.com/ARMmbed/uvisor/pull/491#issuecomment-326308761,"When control has been returned to user after IPC request. It is possible
that the user modifies the token. In Line 146/150, the token has been
read from the descriptor without checking. This may lead to token
corruption, e.g. some unallocated tokens get set to complete.",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,491,2017-08-16T16:20:09Z,2017-09-15T08:24:59Z,2017-09-15T08:24:59Z,CLOSED,False,33,3,2,https://github.com/fangyi-zhou,ipc: Check the token of IO descriptor before processing,3,[],https://github.com/ARMmbed/uvisor/pull/491,https://github.com/fangyi-zhou,3,https://github.com/ARMmbed/uvisor/pull/491#issuecomment-328477804,"When control has been returned to user after IPC request. It is possible
that the user modifies the token. In Line 146/150, the token has been
read from the descriptor without checking. This may lead to token
corruption, e.g. some unallocated tokens get set to complete.","Token is taken and used from user space without check. A user can change the token in the descriptor and this change will affect uVisor. This breaks certain functionality.
However, considering the security requirement of IPC is that a box is free to mess up with itself, this fix is optional, as corrupted tokens should not affect other boxes.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,491,2017-08-16T16:20:09Z,2017-09-15T08:24:59Z,2017-09-15T08:24:59Z,CLOSED,False,33,3,2,https://github.com/fangyi-zhou,ipc: Check the token of IO descriptor before processing,3,[],https://github.com/ARMmbed/uvisor/pull/491,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/491#issuecomment-329716179,"When control has been returned to user after IPC request. It is possible
that the user modifies the token. In Line 146/150, the token has been
read from the descriptor without checking. This may lead to token
corruption, e.g. some unallocated tokens get set to complete.","Will drop the token checking commit, but keep the comments commit",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,492,2017-08-17T08:21:53Z,2017-08-18T17:03:42Z,2017-08-18T17:03:42Z,MERGED,True,1,50,1,https://github.com/orenc17,Add debug box reference implementation link to docs,1,[],https://github.com/ARMmbed/uvisor/pull/492,https://github.com/orenc17,1,https://github.com/ARMmbed/uvisor/pull/492,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,493,2017-08-17T14:40:03Z,2017-08-29T12:52:24Z,2017-08-29T12:52:24Z,MERGED,True,1,0,1,https://github.com/mikisch81,Add return statement in halt flow of register_gateway,1,[],https://github.com/ARMmbed/uvisor/pull/493,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/493,"In case there is a debug box HALT_ERROR doesn't halt but forges the
debug_box stack, deprivileges and set the thread mode return address
to the debug-driver's halt callback function.
So after HALT_ERROR need to return in order to exit handler mode so
the debug-driver's halt callback gets called.","In case there is a debug box HALT_ERROR doesn't halt but forges the
debug_box stack, deprivileges and set the thread mode return address
to the debug-driver's halt callback function.
So after HALT_ERROR need to return in order to exit handler mode so
the debug-driver's halt callback gets called.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,493,2017-08-17T14:40:03Z,2017-08-29T12:52:24Z,2017-08-29T12:52:24Z,MERGED,True,1,0,1,https://github.com/mikisch81,Add return statement in halt flow of register_gateway,1,[],https://github.com/ARMmbed/uvisor/pull/493,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/493#issuecomment-323124052,"In case there is a debug box HALT_ERROR doesn't halt but forges the
debug_box stack, deprivileges and set the thread mode return address
to the debug-driver's halt callback function.
So after HALT_ERROR need to return in order to exit handler mode so
the debug-driver's halt callback gets called.","Is there a test that catches this issue?
If not, we should update the tests first and then update the test pointer here. Perhaps make a new ""acl"" test.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,493,2017-08-17T14:40:03Z,2017-08-29T12:52:24Z,2017-08-29T12:52:24Z,MERGED,True,1,0,1,https://github.com/mikisch81,Add return statement in halt flow of register_gateway,1,[],https://github.com/ARMmbed/uvisor/pull/493,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/493#issuecomment-325653926,"In case there is a debug box HALT_ERROR doesn't halt but forges the
debug_box stack, deprivileges and set the thread mode return address
to the debug-driver's halt callback function.
So after HALT_ERROR need to return in order to exit handler mode so
the debug-driver's halt callback gets called.","If the code did continue out of the HALT, I'd expect to be able to test for that. But, that's not what happens. HALT doesn't return, whether in debug mode or not. So, this bug would be hard to see in the wild.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,494,2017-08-18T09:14:02Z,2017-08-22T17:24:20Z,2017-08-22T17:53:59Z,MERGED,True,0,1,1,https://github.com/fangyi-zhou,pool_queue: Remove extra unlock in find_first,1,[],https://github.com/ARMmbed/uvisor/pull/494,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/494,"This unlock is extraneous as the lock will be released at Line 403/416.
This extra unlock will cause synchronisation issues.
Consider 3 threads trying to operate on the same queue.
Thread 0 obtains the lock to and is running find_first.
Thread 1 and Thread 2 is spinning on the lock.
When Thread 0 has found the entry, there is an unlock action. This
allows Thread 1 to operate on the queue. However, the unlock at Line
403/416 executed by Thread 0 will release the lock again. This will
allow Thread 2 to operate on the queue, causing synchronisation problem","This unlock is extraneous as the lock will be released at Line 403/416.
This extra unlock will cause synchronisation issues.
Consider 3 threads trying to operate on the same queue.
Thread 0 obtains the lock to and is running find_first.
Thread 1 and Thread 2 is spinning on the lock.
When Thread 0 has found the entry, there is an unlock action. This
allows Thread 1 to operate on the queue. However, the unlock at Line
403/416 executed by Thread 0 will release the lock again. This will
allow Thread 2 to operate on the queue, causing synchronisation problem",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,494,2017-08-18T09:14:02Z,2017-08-22T17:24:20Z,2017-08-22T17:53:59Z,MERGED,True,0,1,1,https://github.com/fangyi-zhou,pool_queue: Remove extra unlock in find_first,1,[],https://github.com/ARMmbed/uvisor/pull/494,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/494#issuecomment-323308091,"This unlock is extraneous as the lock will be released at Line 403/416.
This extra unlock will cause synchronisation issues.
Consider 3 threads trying to operate on the same queue.
Thread 0 obtains the lock to and is running find_first.
Thread 1 and Thread 2 is spinning on the lock.
When Thread 0 has found the entry, there is an unlock action. This
allows Thread 1 to operate on the queue. However, the unlock at Line
403/416 executed by Thread 0 will release the lock again. This will
allow Thread 2 to operate on the queue, causing synchronisation problem","Please add the following to the bottom of the commit description.
Fixes d5c61322c6ba (""pool_queue: Add uvisor_pool_queue_try_find_first"")",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,494,2017-08-18T09:14:02Z,2017-08-22T17:24:20Z,2017-08-22T17:53:59Z,MERGED,True,0,1,1,https://github.com/fangyi-zhou,pool_queue: Remove extra unlock in find_first,1,[],https://github.com/ARMmbed/uvisor/pull/494,https://github.com/fangyi-zhou,3,https://github.com/ARMmbed/uvisor/pull/494#issuecomment-323380720,"This unlock is extraneous as the lock will be released at Line 403/416.
This extra unlock will cause synchronisation issues.
Consider 3 threads trying to operate on the same queue.
Thread 0 obtains the lock to and is running find_first.
Thread 1 and Thread 2 is spinning on the lock.
When Thread 0 has found the entry, there is an unlock action. This
allows Thread 1 to operate on the queue. However, the unlock at Line
403/416 executed by Thread 0 will release the lock again. This will
allow Thread 2 to operate on the queue, causing synchronisation problem",Updated,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,495,2017-08-24T16:17:24Z,2019-12-03T21:21:12Z,2019-12-03T21:21:12Z,CLOSED,False,219,1,8,https://github.com/fangyi-zhou,Check pool queue sanity in ipc,3,['needs: work'],https://github.com/ARMmbed/uvisor/pull/495,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/495,"It is unsafe to assume the pool queue provided by the user is safe, sanity check is necessary before any pool queue operations.","It is unsafe to assume the pool queue provided by the user is safe, sanity check is necessary before any pool queue operations.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,495,2017-08-24T16:17:24Z,2019-12-03T21:21:12Z,2019-12-03T21:21:12Z,CLOSED,False,219,1,8,https://github.com/fangyi-zhou,Check pool queue sanity in ipc,3,['needs: work'],https://github.com/ARMmbed/uvisor/pull/495,https://github.com/fangyi-zhou,2,https://github.com/ARMmbed/uvisor/pull/495#issuecomment-325921995,"It is unsafe to assume the pool queue provided by the user is safe, sanity check is necessary before any pool queue operations.",We could do checks for RPC pool queues as well.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,495,2017-08-24T16:17:24Z,2019-12-03T21:21:12Z,2019-12-03T21:21:12Z,CLOSED,False,219,1,8,https://github.com/fangyi-zhou,Check pool queue sanity in ipc,3,['needs: work'],https://github.com/ARMmbed/uvisor/pull/495,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/495#issuecomment-329717231,"It is unsafe to assume the pool queue provided by the user is safe, sanity check is necessary before any pool queue operations.",This sort of checking is all very expensive. Are we checking the minimal amount to ensure that a box will be limited to only shooting itself in the foot and not uVisor itself or other boxes?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,495,2017-08-24T16:17:24Z,2019-12-03T21:21:12Z,2019-12-03T21:21:12Z,CLOSED,False,219,1,8,https://github.com/fangyi-zhou,Check pool queue sanity in ipc,3,['needs: work'],https://github.com/ARMmbed/uvisor/pull/495,https://github.com/fangyi-zhou,4,https://github.com/ARMmbed/uvisor/pull/495#issuecomment-329718413,"It is unsafe to assume the pool queue provided by the user is safe, sanity check is necessary before any pool queue operations.","It's checking more than expected. I agree that the check is very costly.
Alternatively,
We could have a variable to act as a latch in uvisor_ipc_t. At IPC request, it is set to true, then ipc_drain_queue only takes place if set to true. So we check on demand.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,496,2017-08-27T14:59:50Z,,2017-09-28T13:44:34Z,OPEN,False,45,12,2,https://github.com/orenc17,WIP: Handle armv8 debug box entry correctly,2,"[""don't merge yet"", 'needs: work']",https://github.com/ARMmbed/uvisor/pull/496,https://github.com/orenc17,1,https://github.com/ARMmbed/uvisor/pull/496,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,497,2017-08-29T14:48:58Z,2017-09-18T16:50:41Z,2017-09-18T16:50:41Z,CLOSED,False,396,228,27,https://github.com/romkuz01,Add deprivilege/print/reprivilege flow,5,[],https://github.com/ARMmbed/uvisor/pull/497,https://github.com/romkuz01,1,https://github.com/ARMmbed/uvisor/pull/497,"Major changes:

Rename old debug_deprivilege_and_return() to debug_deprivilege_and_die()
which better reflects its nature
Add a new debug_deprivilege_and_return() which indeed
performs deprivilege and return within the function itself
Add a new API function uvisor_debug_print_enable() which should
be used from the user's application to enable
deprivilege/print/reprivilege flow
Make SVC's priority higher than of the other exceptions with programmable priority
Normalize line endings used in printing in a few places to ""\r\n"" (still need to fix in some other places)

Note:
Ideally it would be better to break this commit into a few smaller ones
Usage example in the user's application:
...
static void halt_error(THaltError reason, const THaltInfo * halt_info)
{
...
}
static void debug_print(const char * message)
{
printf(""%s"", message);
}
UVISOR_PUBLIC_BOX_DEBUG_DRIVER(halt_error, debug_print);
#define BAD_BAD_ADDR (*((volatile unsigned long *) (0xFFFFFFFF)))
int main(void)
{
uvisor_debug_print_enable(true);
/* About to get a fault now: */
    BAD_BAD_ADDR = 13;

}","Major changes:

Rename old debug_deprivilege_and_return() to debug_deprivilege_and_die()
which better reflects its nature
Add a new debug_deprivilege_and_return() which indeed
performs deprivilege and return within the function itself
Add a new API function uvisor_debug_print_enable() which should
be used from the user's application to enable
deprivilege/print/reprivilege flow
Make SVC's priority higher than of the other exceptions with programmable priority
Normalize line endings used in printing in a few places to ""\r\n"" (still need to fix in some other places)

Note:
Ideally it would be better to break this commit into a few smaller ones
Usage example in the user's application:
...
static void halt_error(THaltError reason, const THaltInfo * halt_info)
{
...
}
static void debug_print(const char * message)
{
printf(""%s"", message);
}
UVISOR_PUBLIC_BOX_DEBUG_DRIVER(halt_error, debug_print);
#define BAD_BAD_ADDR (*((volatile unsigned long *) (0xFFFFFFFF)))
int main(void)
{
uvisor_debug_print_enable(true);
/* About to get a fault now: */
    BAD_BAD_ADDR = 13;

}",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,497,2017-08-29T14:48:58Z,2017-09-18T16:50:41Z,2017-09-18T16:50:41Z,CLOSED,False,396,228,27,https://github.com/romkuz01,Add deprivilege/print/reprivilege flow,5,[],https://github.com/ARMmbed/uvisor/pull/497,https://github.com/romkuz01,2,https://github.com/ARMmbed/uvisor/pull/497#issuecomment-328339060,"Major changes:

Rename old debug_deprivilege_and_return() to debug_deprivilege_and_die()
which better reflects its nature
Add a new debug_deprivilege_and_return() which indeed
performs deprivilege and return within the function itself
Add a new API function uvisor_debug_print_enable() which should
be used from the user's application to enable
deprivilege/print/reprivilege flow
Make SVC's priority higher than of the other exceptions with programmable priority
Normalize line endings used in printing in a few places to ""\r\n"" (still need to fix in some other places)

Note:
Ideally it would be better to break this commit into a few smaller ones
Usage example in the user's application:
...
static void halt_error(THaltError reason, const THaltInfo * halt_info)
{
...
}
static void debug_print(const char * message)
{
printf(""%s"", message);
}
UVISOR_PUBLIC_BOX_DEBUG_DRIVER(halt_error, debug_print);
#define BAD_BAD_ADDR (*((volatile unsigned long *) (0xFFFFFFFF)))
int main(void)
{
uvisor_debug_print_enable(true);
/* About to get a fault now: */
    BAD_BAD_ADDR = 13;

}",retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,497,2017-08-29T14:48:58Z,2017-09-18T16:50:41Z,2017-09-18T16:50:41Z,CLOSED,False,396,228,27,https://github.com/romkuz01,Add deprivilege/print/reprivilege flow,5,[],https://github.com/ARMmbed/uvisor/pull/497,https://github.com/romkuz01,3,https://github.com/ARMmbed/uvisor/pull/497#issuecomment-328516869,"Major changes:

Rename old debug_deprivilege_and_return() to debug_deprivilege_and_die()
which better reflects its nature
Add a new debug_deprivilege_and_return() which indeed
performs deprivilege and return within the function itself
Add a new API function uvisor_debug_print_enable() which should
be used from the user's application to enable
deprivilege/print/reprivilege flow
Make SVC's priority higher than of the other exceptions with programmable priority
Normalize line endings used in printing in a few places to ""\r\n"" (still need to fix in some other places)

Note:
Ideally it would be better to break this commit into a few smaller ones
Usage example in the user's application:
...
static void halt_error(THaltError reason, const THaltInfo * halt_info)
{
...
}
static void debug_print(const char * message)
{
printf(""%s"", message);
}
UVISOR_PUBLIC_BOX_DEBUG_DRIVER(halt_error, debug_print);
#define BAD_BAD_ADDR (*((volatile unsigned long *) (0xFFFFFFFF)))
int main(void)
{
uvisor_debug_print_enable(true);
/* About to get a fault now: */
    BAD_BAD_ADDR = 13;

}","@mikisch81 @orenc17A @theamirocohen
Please review",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,497,2017-08-29T14:48:58Z,2017-09-18T16:50:41Z,2017-09-18T16:50:41Z,CLOSED,False,396,228,27,https://github.com/romkuz01,Add deprivilege/print/reprivilege flow,5,[],https://github.com/ARMmbed/uvisor/pull/497,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/497#issuecomment-330284090,"Major changes:

Rename old debug_deprivilege_and_return() to debug_deprivilege_and_die()
which better reflects its nature
Add a new debug_deprivilege_and_return() which indeed
performs deprivilege and return within the function itself
Add a new API function uvisor_debug_print_enable() which should
be used from the user's application to enable
deprivilege/print/reprivilege flow
Make SVC's priority higher than of the other exceptions with programmable priority
Normalize line endings used in printing in a few places to ""\r\n"" (still need to fix in some other places)

Note:
Ideally it would be better to break this commit into a few smaller ones
Usage example in the user's application:
...
static void halt_error(THaltError reason, const THaltInfo * halt_info)
{
...
}
static void debug_print(const char * message)
{
printf(""%s"", message);
}
UVISOR_PUBLIC_BOX_DEBUG_DRIVER(halt_error, debug_print);
#define BAD_BAD_ADDR (*((volatile unsigned long *) (0xFFFFFFFF)))
int main(void)
{
uvisor_debug_print_enable(true);
/* About to get a fault now: */
    BAD_BAD_ADDR = 13;

}","Merged debug box printing to dev/romkuz01/debug-box-print-experimental due to high risk change and lack of thorough testing
Merged ready to go commits to master",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,498,2017-08-30T11:01:56Z,2017-08-30T12:50:08Z,2017-08-30T12:50:08Z,MERGED,True,4,6,1,https://github.com/mikisch81,Fix wrong usage of uvisor_pool_queue_try_enqueue,1,[],https://github.com/ARMmbed/uvisor/pull/498,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/498,"In drain_message_queue, uvisor_pool_queue_try_enqueue return value was checked for true/false when this API actually returns the slot number.
This caused a false negative assertion which broke the number-store example.
@Patater @fangyi-zhou @alzix","In drain_message_queue, uvisor_pool_queue_try_enqueue return value was checked for true/false when this API actually returns the slot number.
This caused a false negative assertion which broke the number-store example.
@Patater @fangyi-zhou @alzix",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,498,2017-08-30T11:01:56Z,2017-08-30T12:50:08Z,2017-08-30T12:50:08Z,MERGED,True,4,6,1,https://github.com/mikisch81,Fix wrong usage of uvisor_pool_queue_try_enqueue,1,[],https://github.com/ARMmbed/uvisor/pull/498,https://github.com/fangyi-zhou,2,https://github.com/ARMmbed/uvisor/pull/498#issuecomment-325958154,"In drain_message_queue, uvisor_pool_queue_try_enqueue return value was checked for true/false when this API actually returns the slot number.
This caused a false negative assertion which broke the number-store example.
@Patater @fangyi-zhou @alzix",Thanks for the catch. I think I forgot to change the second enqueue in my commit.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,499,2017-08-30T13:58:04Z,2017-08-31T07:09:44Z,2017-08-31T07:09:44Z,MERGED,True,2,2,3,https://github.com/fangyi-zhou,Fix some headers,3,[],https://github.com/ARMmbed/uvisor/pull/499,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/499,"Add missing imports in halt_exports
Remove some unused imports in pool_queue_exports and vmpu_exports","Add missing imports in halt_exports
Remove some unused imports in pool_queue_exports and vmpu_exports",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,501,2017-09-01T08:08:34Z,2017-09-01T12:55:37Z,2017-09-01T13:02:50Z,MERGED,True,3,1,1,https://github.com/fangyi-zhou,ipc: Use secure alias when using user pointer in ipc_deliver,1,[],https://github.com/ARMmbed/uvisor/pull/501,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/501,"When copying the message from send box to receive box, the secure alias
should be used as the kernel accesses user data. Otherwise a BusFault
will occur when secure gating is not disabled.","When copying the message from send box to receive box, the secure alias
should be used as the kernel accesses user data. Otherwise a BusFault
will occur when secure gating is not disabled.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,501,2017-09-01T08:08:34Z,2017-09-01T12:55:37Z,2017-09-01T13:02:50Z,MERGED,True,3,1,1,https://github.com/fangyi-zhou,ipc: Use secure alias when using user pointer in ipc_deliver,1,[],https://github.com/ARMmbed/uvisor/pull/501,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/501#issuecomment-326525207,"When copying the message from send box to receive box, the secure alias
should be used as the kernel accesses user data. Otherwise a BusFault
will occur when secure gating is not disabled.","It actually appears to be a BusFault, and it only happens when DISABLE_GATING is not enabled.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,501,2017-09-01T08:08:34Z,2017-09-01T12:55:37Z,2017-09-01T13:02:50Z,MERGED,True,3,1,1,https://github.com/fangyi-zhou,ipc: Use secure alias when using user pointer in ipc_deliver,1,[],https://github.com/ARMmbed/uvisor/pull/501,https://github.com/fangyi-zhou,3,https://github.com/ARMmbed/uvisor/pull/501#issuecomment-326535928,"When copying the message from send box to receive box, the secure alias
should be used as the kernel accesses user data. Otherwise a BusFault
will occur when secure gating is not disabled.",Updated commit message,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,502,2017-09-01T14:11:42Z,2017-09-15T08:01:57Z,2017-09-15T08:01:57Z,MERGED,True,1,1,1,https://github.com/fangyi-zhou,	ipc: Return success immediately if waiting on empty token,1,[],https://github.com/ARMmbed/uvisor/pull/502,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/502,"Waiting on an empty token will bypass the allocated check because
bitwise and won't fail. It will then cause an infinite loop because the
condition will never fulfil.
Instead, waiting on nothing should return success immediately
Fixes 60048c4","Waiting on an empty token will bypass the allocated check because
bitwise and won't fail. It will then cause an infinite loop because the
condition will never fulfil.
Instead, waiting on nothing should return success immediately
Fixes 60048c4",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,502,2017-09-01T14:11:42Z,2017-09-15T08:01:57Z,2017-09-15T08:01:57Z,MERGED,True,1,1,1,https://github.com/fangyi-zhou,	ipc: Return success immediately if waiting on empty token,1,[],https://github.com/ARMmbed/uvisor/pull/502,https://github.com/danny4478,2,https://github.com/ARMmbed/uvisor/pull/502#issuecomment-327390813,"Waiting on an empty token will bypass the allocated check because
bitwise and won't fail. It will then cause an infinite loop because the
condition will never fulfil.
Instead, waiting on nothing should return success immediately
Fixes 60048c4","I think the real issue here is that the 2 functions, all() and any() have different behavior.
When the  parameter is 0:

any() returns 0.
all() returns 1.
The correct fix in my opinion, is to fix any() to return 1 in case expect is 0.
@Patater, what do you think?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,502,2017-09-01T14:11:42Z,2017-09-15T08:01:57Z,2017-09-15T08:01:57Z,MERGED,True,1,1,1,https://github.com/fangyi-zhou,	ipc: Return success immediately if waiting on empty token,1,[],https://github.com/ARMmbed/uvisor/pull/502,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/502#issuecomment-327441788,"Waiting on an empty token will bypass the allocated check because
bitwise and won't fail. It will then cause an infinite loop because the
condition will never fulfil.
Instead, waiting on nothing should return success immediately
Fixes 60048c4","@danny4478
I'd expect the return error code to be 0 (no error) for both any and all, if the wait_tokens are 0. I'd also expect *done_tokens set to 0 in both cases. What's the reason you'd expect a 1 returned from any?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,502,2017-09-01T14:11:42Z,2017-09-15T08:01:57Z,2017-09-15T08:01:57Z,MERGED,True,1,1,1,https://github.com/fangyi-zhou,	ipc: Return success immediately if waiting on empty token,1,[],https://github.com/ARMmbed/uvisor/pull/502,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/502#issuecomment-327448901,"Waiting on an empty token will bypass the allocated check because
bitwise and won't fail. It will then cause an infinite loop because the
condition will never fulfil.
Instead, waiting on nothing should return success immediately
Fixes 60048c4","I had misunderstood which functions @danny4478 was referring to. It seems the best place to fix this is in the any function, not ipc_waitforany.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,502,2017-09-01T14:11:42Z,2017-09-15T08:01:57Z,2017-09-15T08:01:57Z,MERGED,True,1,1,1,https://github.com/fangyi-zhou,	ipc: Return success immediately if waiting on empty token,1,[],https://github.com/ARMmbed/uvisor/pull/502,https://github.com/fangyi-zhou,5,https://github.com/ARMmbed/uvisor/pull/502#issuecomment-327475692,"Waiting on an empty token will bypass the allocated check because
bitwise and won't fail. It will then cause an infinite loop because the
condition will never fulfil.
Instead, waiting on nothing should return success immediately
Fixes 60048c4",I've moved the check to ipc_waitforany and ipc_waitforall due to the need to return different values.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,502,2017-09-01T14:11:42Z,2017-09-15T08:01:57Z,2017-09-15T08:01:57Z,MERGED,True,1,1,1,https://github.com/fangyi-zhou,	ipc: Return success immediately if waiting on empty token,1,[],https://github.com/ARMmbed/uvisor/pull/502,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/502#issuecomment-327489948,"Waiting on an empty token will bypass the allocated check because
bitwise and won't fail. It will then cause an infinite loop because the
condition will never fulfil.
Instead, waiting on nothing should return success immediately
Fixes 60048c4","Sorry for the misunderstanding.
I think what Danny was suggesting was that we only need to do the following.
static int any(uint32_t have, uint32_t expect)
{
-    return have & expect;
+    return (expect == 0) || (have & expect);
}
What do you think?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,502,2017-09-01T14:11:42Z,2017-09-15T08:01:57Z,2017-09-15T08:01:57Z,MERGED,True,1,1,1,https://github.com/fangyi-zhou,	ipc: Return success immediately if waiting on empty token,1,[],https://github.com/ARMmbed/uvisor/pull/502,https://github.com/fangyi-zhou,7,https://github.com/ARMmbed/uvisor/pull/502#issuecomment-327499281,"Waiting on an empty token will bypass the allocated check because
bitwise and won't fail. It will then cause an infinite loop because the
condition will never fulfil.
Instead, waiting on nothing should return success immediately
Fixes 60048c4","The current implementation saves the time on the lock, but I'm open to change to what you proposed.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,502,2017-09-01T14:11:42Z,2017-09-15T08:01:57Z,2017-09-15T08:01:57Z,MERGED,True,1,1,1,https://github.com/fangyi-zhou,	ipc: Return success immediately if waiting on empty token,1,[],https://github.com/ARMmbed/uvisor/pull/502,https://github.com/danny4478,8,https://github.com/ARMmbed/uvisor/pull/502#issuecomment-327705625,"Waiting on an empty token will bypass the allocated check because
bitwise and won't fail. It will then cause an infinite loop because the
condition will never fulfil.
Instead, waiting on nothing should return success immediately
Fixes 60048c4","Currently wait_tokens of 0 gives different results for ipc_waitforany() and ipc_waitforall().
I don't think this is what we want.
The modification to any() function as @Patater wrote is indeed what I was suggesting, and I think is a must anyway.
I think it can come together with the original change @fangyi-zhou suggested in the first commit to save lock time, and together they make a full solution.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,502,2017-09-01T14:11:42Z,2017-09-15T08:01:57Z,2017-09-15T08:01:57Z,MERGED,True,1,1,1,https://github.com/fangyi-zhou,	ipc: Return success immediately if waiting on empty token,1,[],https://github.com/ARMmbed/uvisor/pull/502,https://github.com/Patater,9,https://github.com/ARMmbed/uvisor/pull/502#issuecomment-327746957,"Waiting on an empty token will bypass the allocated check because
bitwise and won't fail. It will then cause an infinite loop because the
condition will never fulfil.
Instead, waiting on nothing should return success immediately
Fixes 60048c4",I like Danny's solution. The lock time is not significant.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,503,2017-09-03T14:08:47Z,2017-09-12T08:18:54Z,2017-09-12T08:18:54Z,MERGED,True,105,21,7,https://github.com/mikisch81,Update DEBUGGING.md,1,[],https://github.com/ARMmbed/uvisor/pull/503,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/503,"Add PyOCD related information.
@Patater @alzix","Add PyOCD related information.
@Patater @alzix",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,503,2017-09-03T14:08:47Z,2017-09-12T08:18:54Z,2017-09-12T08:18:54Z,MERGED,True,105,21,7,https://github.com/mikisch81,Update DEBUGGING.md,1,[],https://github.com/ARMmbed/uvisor/pull/503,https://github.com/mikisch81,2,https://github.com/ARMmbed/uvisor/pull/503#issuecomment-327078802,"Add PyOCD related information.
@Patater @alzix","@Patater @alzix @danny4478 @romkuz01
Your reviews are welcomed",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,503,2017-09-03T14:08:47Z,2017-09-12T08:18:54Z,2017-09-12T08:18:54Z,MERGED,True,105,21,7,https://github.com/mikisch81,Update DEBUGGING.md,1,[],https://github.com/ARMmbed/uvisor/pull/503,https://github.com/alzix,3,https://github.com/ARMmbed/uvisor/pull/503#issuecomment-327116553,"Add PyOCD related information.
@Patater @alzix",@theamirocohen please review,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,503,2017-09-03T14:08:47Z,2017-09-12T08:18:54Z,2017-09-12T08:18:54Z,MERGED,True,105,21,7,https://github.com/mikisch81,Update DEBUGGING.md,1,[],https://github.com/ARMmbed/uvisor/pull/503,https://github.com/mikisch81,4,https://github.com/ARMmbed/uvisor/pull/503#issuecomment-327227061,"Add PyOCD related information.
@Patater @alzix",@theamirocohen @alzix any more comments?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,503,2017-09-03T14:08:47Z,2017-09-12T08:18:54Z,2017-09-12T08:18:54Z,MERGED,True,105,21,7,https://github.com/mikisch81,Update DEBUGGING.md,1,[],https://github.com/ARMmbed/uvisor/pull/503,https://github.com/alzix,5,https://github.com/ARMmbed/uvisor/pull/503#issuecomment-327763718,"Add PyOCD related information.
@Patater @alzix",please squash your commits,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,503,2017-09-03T14:08:47Z,2017-09-12T08:18:54Z,2017-09-12T08:18:54Z,MERGED,True,105,21,7,https://github.com/mikisch81,Update DEBUGGING.md,1,[],https://github.com/ARMmbed/uvisor/pull/503,https://github.com/mikisch81,6,https://github.com/ARMmbed/uvisor/pull/503#issuecomment-328349735,"Add PyOCD related information.
@Patater @alzix",@Patater can this be merged?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,503,2017-09-03T14:08:47Z,2017-09-12T08:18:54Z,2017-09-12T08:18:54Z,MERGED,True,105,21,7,https://github.com/mikisch81,Update DEBUGGING.md,1,[],https://github.com/ARMmbed/uvisor/pull/503,https://github.com/alzix,7,https://github.com/ARMmbed/uvisor/pull/503#issuecomment-328353729,"Add PyOCD related information.
@Patater @alzix",@mikisch81 you have not yet addressed all the change requests.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,503,2017-09-03T14:08:47Z,2017-09-12T08:18:54Z,2017-09-12T08:18:54Z,MERGED,True,105,21,7,https://github.com/mikisch81,Update DEBUGGING.md,1,[],https://github.com/ARMmbed/uvisor/pull/503,https://github.com/Patater,8,https://github.com/ARMmbed/uvisor/pull/503#issuecomment-328482066,"Add PyOCD related information.
@Patater @alzix",Please apply all fixup commits.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,504,2017-09-03T14:52:37Z,2017-09-18T12:11:05Z,2017-09-18T12:11:05Z,MERGED,True,94,30,5,https://github.com/danny4478,uVisor stack guard for v7-M,1,[],https://github.com/ARMmbed/uvisor/pull/504,https://github.com/danny4478,1,https://github.com/ARMmbed/uvisor/pull/504,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,504,2017-09-03T14:52:37Z,2017-09-18T12:11:05Z,2017-09-18T12:11:05Z,MERGED,True,94,30,5,https://github.com/danny4478,uVisor stack guard for v7-M,1,[],https://github.com/ARMmbed/uvisor/pull/504,https://github.com/danny4478,2,https://github.com/ARMmbed/uvisor/pull/504#issuecomment-327769838,,"@mikisch81 @romkuz01
Please review",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,504,2017-09-03T14:52:37Z,2017-09-18T12:11:05Z,2017-09-18T12:11:05Z,MERGED,True,94,30,5,https://github.com/danny4478,uVisor stack guard for v7-M,1,[],https://github.com/ARMmbed/uvisor/pull/504,https://github.com/alzix,3,https://github.com/ARMmbed/uvisor/pull/504#issuecomment-327772027,,retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,505,2017-09-05T08:58:36Z,2017-09-12T08:40:21Z,2017-09-12T08:40:21Z,MERGED,True,12,0,2,https://github.com/theamirocohen,Update DEBUGGING.md with ULINK pro config info for K64F,1,[],https://github.com/ARMmbed/uvisor/pull/505,https://github.com/theamirocohen,1,https://github.com/ARMmbed/uvisor/pull/505,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,505,2017-09-05T08:58:36Z,2017-09-12T08:40:21Z,2017-09-12T08:40:21Z,MERGED,True,12,0,2,https://github.com/theamirocohen,Update DEBUGGING.md with ULINK pro config info for K64F,1,[],https://github.com/ARMmbed/uvisor/pull/505,https://github.com/alzix,2,https://github.com/ARMmbed/uvisor/pull/505#issuecomment-327116184,,@mikisch81  and @danny4478  please review,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,505,2017-09-05T08:58:36Z,2017-09-12T08:40:21Z,2017-09-12T08:40:21Z,MERGED,True,12,0,2,https://github.com/theamirocohen,Update DEBUGGING.md with ULINK pro config info for K64F,1,[],https://github.com/ARMmbed/uvisor/pull/505,https://github.com/Patater,3,https://github.com/ARMmbed/uvisor/pull/505#issuecomment-328035302,,Please squash commits.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,505,2017-09-05T08:58:36Z,2017-09-12T08:40:21Z,2017-09-12T08:40:21Z,MERGED,True,12,0,2,https://github.com/theamirocohen,Update DEBUGGING.md with ULINK pro config info for K64F,1,[],https://github.com/ARMmbed/uvisor/pull/505,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/505#issuecomment-328481970,,Please apply all fixup commits.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/p03189,1,https://github.com/ARMmbed/uvisor/pull/506,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.","To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-327426195,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.",Do you have a failing test case to reproduce the issue this attempts to fix?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/p03189,3,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-327427215,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.","Yes, I have. I can reproduce this error on my target.",True,{'THUMBS_UP': ['https://github.com/sychen']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-327427965,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.","Please explain in the commit message in more detail how the problem occurs and why it is significant.
Could you share your test case so we can regression test?
Thanks",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/p03189,5,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-327444844,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.","Hi @Patater,
I have updated my commit message, and the uvisor test is for your reference. It is a simple test including one secure box and two threads managed by RTX5 in public box .",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-328107041,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.","Hi @p03189
I couldn't reproduce a SecureFault with your example. I was only able to reproduce an out of memory error, due to Mbed OS not giving any backing memory to the RTX memory allocators (ARM-software/CMSIS_5#177).
I had to change the example's main function (code below), and then it was able to run without any SecureFault for a couple hours.
Do you have a better example that reproduces the SecureFault?
Thanks
int main(void) {

    //size_t count = 0;

    /* XXX Can't use osThreadNew, since Mbed OS doesn't support RTX allocators. */
#if RTX_APIS
    osThreadId_t result = osThreadNew((osThreadFunc_t)sub_thread, NULL, NULL);
    if (result == NULL) {
        printf(""\r\n sub_thread creating is failed \r\n"");
        for (;;);
    }
#else
    Thread *thread = new Thread(osPriorityNormal, 1024, NULL);
    if (thread == NULL) {
        printf(""\r\n sub_thread creating is failed \r\n"");
        for (;;);
    }
    thread->start(sub_thread);
#endif

    while (1) {
        printf(""\r\n***** PUBLIC BOX *****\r\n"");
    }

    return 0;
}",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/p03189,7,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-328484428,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.","Hi @Patater,
What will happen if you simultaneously write both  PENDSTSET and PENDSTCLR to one ? This patch is to clear pending systick_ns_irq regardless it comes before virq_load_systick_ns() or not. The pending systick_ns_irq is handled after returning from SysTick_IRQn_Handler() in uVisor. Because I don't register any systick handler for secure box and VTOR_NS is unchanged, the pending systick_ns_irq goes to be handled by SysTick_Handler() in RTX5. After that, RTX5 try to store context to PSP in Sys_ContextSave(). That causes a secure fault for the invalid PSP in secure box. (Box switching is from public box to secure box, systick_ns_irq handling is in secure box)
I think  you can reproduce this error by using gdb commands or mdk tools to set PENDSTSET to one before virq_load_systick_ns() and check ICSR if the pending SysTick_NS is cleared. For regression, I'm sorry that I can't force a systick_ns_irq in a test.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/Patater,8,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-328567110,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.","I like the patch. I think it's necessary to avoid programming the hardware into an ambiguous state, and I'll accept the patch for that reason.
However, I'm not following how this prevents the error you describe, where systick_ns_irq handling for RTX is in a secure box instead of the public box. It sounds like we need something a bit more to prevent SysTick_NS from going active (but ok to go pending) during execution of secure boxes that don't use SysTick_NS. Would you agree, or is this patch good enough to solve the problem in a way I'm not seeing?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/p03189,9,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-328726607,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.","Hi @Patater,
According to your design, the active and pending state of SysTick_NS will be reset for next activated box, so a pending systick_ns_irq for RTX has to be cleared before execution of secure box. I guess what you need to do is to provide a way for each secure box to register systick_ns_irq and switch the SysTick_NS handler in vector table during box switching process. This patch is to ensure that the pending state is cleared for systick_ns_irq reset, not to prevent SysTick_NS from going active. If you need a policy to manage systick_ns_irq between boxes, it is better to create new patch for that.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/Patater,10,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-329214307,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.","@p03189 How does this change alone fix your issue of the secure box handling SysTick_NS when it isn't supposed to if you also need a separate PR to prevent SysTick_NS from going active? It doesn't doesn't like we've completely gotten to the bottom of this bug, as there appear to be holes in our understanding.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/p03189,11,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-329338560,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.","Hi @Patater,
You and me both don't need to prevent SysTick_NS from going active, we just save and reset SysTick_NS status so that it can be restored for the next time public box is switched back. I found there is a bug when you reset SysTick_NS status, and I have fixed it. I don't need another PR, this patch is good enough to fix the bug in SysTick_NS status reset.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/alzix,12,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-330281480,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.","Hi @p03189 ,
from what i see you are suggesting to reset the pending bit.
As per documentation
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.100235_0002_00_en/pal1486148212346.html all writes of 0 to bits to ICSR register are ignored.
Thus the correct update of ICSR register should be performed with = rather then |= - this is true trough all the code.
The correct way of clearing Systick pending status is:
SCB_NS->ICSR = SCB_ICSR_PENDSTCLR_Msk;",True,"{'THUMBS_UP': ['https://github.com/p03189', 'https://github.com/sychen']}"
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/p03189,13,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-330415336,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.","Hi @alzix ,
Your recommendation is good to me and It is verified on my target.
I have also updated my commit message, thanks for your help.",True,{'THUMBS_UP': ['https://github.com/sychen']}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,506,2017-09-06T09:06:16Z,2017-09-20T16:50:25Z,2017-09-20T16:50:25Z,MERGED,True,2,2,1,https://github.com/p03189,armv8m: Fix an error to clear pending Systick,1,[],https://github.com/ARMmbed/uvisor/pull/506,https://github.com/Patater,14,https://github.com/ARMmbed/uvisor/pull/506#issuecomment-330913037,"To prevent SysTick exception becomes UNKNOWN from
both PENDSTSET and PENDSTCLR are written to one,
PENDNSVSET bit in the value which we are going to
setup has to be cleared.",Thanks!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,507,2017-09-07T12:45:02Z,2017-09-13T13:37:32Z,2017-09-13T13:37:33Z,MERGED,True,37,8,8,https://github.com/mikisch81,Coverity work,2,[],https://github.com/ARMmbed/uvisor/pull/507,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/507,"Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A","Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,507,2017-09-07T12:45:02Z,2017-09-13T13:37:32Z,2017-09-13T13:37:33Z,MERGED,True,37,8,8,https://github.com/mikisch81,Coverity work,2,[],https://github.com/ARMmbed/uvisor/pull/507,https://github.com/mikisch81,2,https://github.com/ARMmbed/uvisor/pull/507#issuecomment-327805271,"Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A",I will move the last commit to a new PR,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,507,2017-09-07T12:45:02Z,2017-09-13T13:37:32Z,2017-09-13T13:37:33Z,MERGED,True,37,8,8,https://github.com/mikisch81,Coverity work,2,[],https://github.com/ARMmbed/uvisor/pull/507,https://github.com/alzix,3,https://github.com/ARMmbed/uvisor/pull/507#issuecomment-328357497,"Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A","@Patater although __noreturn is better from the compiler perspective, it limits our debug capabilities.
function with __noreturn does not generate stack frame.
from GCC documentation: ""Do not assume that registers saved by the calling function are restored before calling the noreturn function.""
In cases we would wish to break at this function, examine stack trace and optionally manually mitigate the error for debugging purpose.
All this will not be available with the suggested implementation. Do you have any 'pros' for it?
Another idea, we can add the UVISOR_NORETURN for release builds - for allowing better compiler optimizations.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,507,2017-09-07T12:45:02Z,2017-09-13T13:37:32Z,2017-09-13T13:37:33Z,MERGED,True,37,8,8,https://github.com/mikisch81,Coverity work,2,[],https://github.com/ARMmbed/uvisor/pull/507,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/507#issuecomment-328474954,"Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A",The debugging reasons seem convincing enough to not use UVISOR_NORETURN. The 'pros' would be better warnings about unused or unreachable code.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,507,2017-09-07T12:45:02Z,2017-09-13T13:37:32Z,2017-09-13T13:37:33Z,MERGED,True,37,8,8,https://github.com/mikisch81,Coverity work,2,[],https://github.com/ARMmbed/uvisor/pull/507,https://github.com/mikisch81,5,https://github.com/ARMmbed/uvisor/pull/507#issuecomment-328499048,"Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A","@Patater @alzix
So, what is the conclusion?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,507,2017-09-07T12:45:02Z,2017-09-13T13:37:32Z,2017-09-13T13:37:33Z,MERGED,True,37,8,8,https://github.com/mikisch81,Coverity work,2,[],https://github.com/ARMmbed/uvisor/pull/507,https://github.com/mikisch81,6,https://github.com/ARMmbed/uvisor/pull/507#issuecomment-328522219,"Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A",@orenc17A FYI,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,507,2017-09-07T12:45:02Z,2017-09-13T13:37:32Z,2017-09-13T13:37:33Z,MERGED,True,37,8,8,https://github.com/mikisch81,Coverity work,2,[],https://github.com/ARMmbed/uvisor/pull/507,https://github.com/alzix,7,https://github.com/ARMmbed/uvisor/pull/507#issuecomment-328636331,"Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A",given the debugging considerations i would vote for volatile loop,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,507,2017-09-07T12:45:02Z,2017-09-13T13:37:32Z,2017-09-13T13:37:33Z,MERGED,True,37,8,8,https://github.com/mikisch81,Coverity work,2,[],https://github.com/ARMmbed/uvisor/pull/507,https://github.com/Patater,8,https://github.com/ARMmbed/uvisor/pull/507#issuecomment-328792147,"Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A","I'm fine with volatile loop, though it doesn't seem very necessary, really.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,507,2017-09-07T12:45:02Z,2017-09-13T13:37:32Z,2017-09-13T13:37:33Z,MERGED,True,37,8,8,https://github.com/mikisch81,Coverity work,2,[],https://github.com/ARMmbed/uvisor/pull/507,https://github.com/Patater,9,https://github.com/ARMmbed/uvisor/pull/507#issuecomment-328798727,"Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A","Did you want to replace for (;;) with uvisor_noreturn() as well, or does Coverity not complain about those?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,507,2017-09-07T12:45:02Z,2017-09-13T13:37:32Z,2017-09-13T13:37:33Z,MERGED,True,37,8,8,https://github.com/mikisch81,Coverity work,2,[],https://github.com/ARMmbed/uvisor/pull/507,https://github.com/Patater,10,https://github.com/ARMmbed/uvisor/pull/507#issuecomment-329114095,"Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A","Please squash commits together where it makes sense to do so. (Keep Coverity models commit separate, for instance.)
Thanks!",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,507,2017-09-07T12:45:02Z,2017-09-13T13:37:32Z,2017-09-13T13:37:33Z,MERGED,True,37,8,8,https://github.com/mikisch81,Coverity work,2,[],https://github.com/ARMmbed/uvisor/pull/507,https://github.com/mikisch81,11,https://github.com/ARMmbed/uvisor/pull/507#issuecomment-329129587,"Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A",@Patater squashed and rebased...,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,507,2017-09-07T12:45:02Z,2017-09-13T13:37:32Z,2017-09-13T13:37:33Z,MERGED,True,37,8,8,https://github.com/mikisch81,Coverity work,2,[],https://github.com/ARMmbed/uvisor/pull/507,https://github.com/alzix,12,https://github.com/ARMmbed/uvisor/pull/507#issuecomment-329169960,"Merge all of the infinite loops like while (1) to one function uvisor_noreturn().
Add a killpath model for the uvisor_noreturn() - Coverity will stop analyzing after this function.

This significantly reduces number of false positives in the analysis.



@Patater @alzix @danny4478 @orenc17A",Lgtm,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/508,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01","Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/mikisch81,2,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-327819203,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01",This is based on #507 so it should be merged only afterwards.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/mikisch81,3,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-328498469,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01","Can someone besides @Patater take a look?
@alzix @danny4478 @romkuz01",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329115924,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01",Is the new Coverity report available?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/mikisch81,5,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329127765,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01",@Patater It is best to run the analysis after #507 is merged.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329132454,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01","@mikisch81 Can we verify that we are actually fixing issues with this change, at least?",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/mikisch81,7,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329135005,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01","@Patater As this PR depends on #507, I need to do some tweaking to the Jenkins job, but I can do it.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/mikisch81,8,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329143670,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01","@Patater
This was tested with my own forks

Without this PR: 144 issues
With this PR: 139 issues",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/Patater,9,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329158353,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01",@mikisch81 Does that mean this PR fixes all the issues you intended to fix? Or are some of our fixes insufficient after addressing review feedback?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/mikisch81,10,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329159859,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01","@Patater I need to further investigate the reports for that.
It will be much easier after #507 is merged because I am always changing the Jenkins job to test different commits.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/Patater,11,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329160595,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01",@mikisch81 OK. #507 is almost there. One remaining question on my end.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/Patater,12,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329170419,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01",#507 is merged now.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/mikisch81,13,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329184785,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01","Updated reports

Without this PR: 141 issues
Without this PR: 136 issues",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/mikisch81,14,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329196181,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01","@Patater
Looks like the CI is currently not stable.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/Patater,15,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329207527,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01","@mikisch81 Yeah, looks like the git clone is taking too long (more than 10 minutes).",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/mikisch81,16,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329209955,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01",@Patater this affects all the PRs,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/Patater,17,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329411087,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01",Please squash commits as appropriate.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/Patater,18,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329411189,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01",@alzix LGTY?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,508,2017-09-07T14:35:14Z,2017-09-14T10:43:44Z,2017-09-14T10:43:44Z,MERGED,True,5,5,3,https://github.com/mikisch81,Fix Coverity issues,1,[],https://github.com/ARMmbed/uvisor/pull/508,https://github.com/alzix,19,https://github.com/ARMmbed/uvisor/pull/508#issuecomment-329444004,"Report before  this PR has 91 issues.
Report with this PR has 85 issues.

Issues resolved: 24-26, 78, 81, 82
@Patater @alzix @danny4478 @romkuz01",LGTM,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,509,2017-09-11T10:27:51Z,2017-09-15T08:00:51Z,2017-09-15T08:00:51Z,MERGED,True,9,5,1,https://github.com/fangyi-zhou,ipc: Add extra notes in ipc_send and ipc_recv,1,[],https://github.com/ARMmbed/uvisor/pull/509,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/509,"IPC descriptor is checked and used during the delivery process. It
must be kept valid until delivery as the descriptor is saved as a
pointer in the IPC IO data structure instead of copied
IPC descriptor must not be reused as token is allocated inside the
descriptor per request. Reusing leads to corruption of tokens and leads
to unpredictable behaviours.","IPC descriptor is checked and used during the delivery process. It
must be kept valid until delivery as the descriptor is saved as a
pointer in the IPC IO data structure instead of copied
IPC descriptor must not be reused as token is allocated inside the
descriptor per request. Reusing leads to corruption of tokens and leads
to unpredictable behaviours.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,510,2017-09-11T21:22:14Z,2017-09-12T08:38:59Z,2017-09-12T08:38:59Z,MERGED,True,11,11,1,https://github.com/AnotherButler,Update README.md,1,[],https://github.com/ARMmbed/uvisor/pull/510,https://github.com/AnotherButler,1,https://github.com/ARMmbed/uvisor/pull/510,Make branding changes to README.md,Make branding changes to README.md,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,511,2017-09-13T15:03:53Z,2017-09-20T16:51:49Z,2017-09-20T16:51:49Z,MERGED,True,43,0,1,https://github.com/mbartling,Added simplified uVisor introduction.,1,[],https://github.com/ARMmbed/uvisor/pull/511,https://github.com/mbartling,1,https://github.com/ARMmbed/uvisor/pull/511,"This document was designed according to the mbed Handbook specs.
ARMmbed/mbed-os-5-docs#244","This document was designed according to the mbed Handbook specs.
ARMmbed/mbed-os-5-docs#244",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,511,2017-09-13T15:03:53Z,2017-09-20T16:51:49Z,2017-09-20T16:51:49Z,MERGED,True,43,0,1,https://github.com/mbartling,Added simplified uVisor introduction.,1,[],https://github.com/ARMmbed/uvisor/pull/511,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/511#issuecomment-329197760,"This document was designed according to the mbed Handbook specs.
ARMmbed/mbed-os-5-docs#244",Please update commit message to follow style guidelines.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,511,2017-09-13T15:03:53Z,2017-09-20T16:51:49Z,2017-09-20T16:51:49Z,MERGED,True,43,0,1,https://github.com/mbartling,Added simplified uVisor introduction.,1,[],https://github.com/ARMmbed/uvisor/pull/511,https://github.com/AnotherButler,3,https://github.com/ARMmbed/uvisor/pull/511#issuecomment-329230133,"This document was designed according to the mbed Handbook specs.
ARMmbed/mbed-os-5-docs#244","Good question. Because the rebranding is a rollout and the images are not new images, it should be OK to merge this, but we should put updating these images on a to-do list.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,511,2017-09-13T15:03:53Z,2017-09-20T16:51:49Z,2017-09-20T16:51:49Z,MERGED,True,43,0,1,https://github.com/mbartling,Added simplified uVisor introduction.,1,[],https://github.com/ARMmbed/uvisor/pull/511,https://github.com/Patater,4,https://github.com/ARMmbed/uvisor/pull/511#issuecomment-329703199,"This document was designed according to the mbed Handbook specs.
ARMmbed/mbed-os-5-docs#244","Please update commit message to follow style guidelines.
In this particular case, all commits were just addressing shortcomings in the original commit, so all commits should be squashed as well.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,511,2017-09-13T15:03:53Z,2017-09-20T16:51:49Z,2017-09-20T16:51:49Z,MERGED,True,43,0,1,https://github.com/mbartling,Added simplified uVisor introduction.,1,[],https://github.com/ARMmbed/uvisor/pull/511,https://github.com/mbartling,5,https://github.com/ARMmbed/uvisor/pull/511#issuecomment-330323660,"This document was designed according to the mbed Handbook specs.
ARMmbed/mbed-os-5-docs#244",Bump,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,511,2017-09-13T15:03:53Z,2017-09-20T16:51:49Z,2017-09-20T16:51:49Z,MERGED,True,43,0,1,https://github.com/mbartling,Added simplified uVisor introduction.,1,[],https://github.com/ARMmbed/uvisor/pull/511,https://github.com/Patater,6,https://github.com/ARMmbed/uvisor/pull/511#issuecomment-330469925,"This document was designed according to the mbed Handbook specs.
ARMmbed/mbed-os-5-docs#244","From commit style guide: ""Use the imperative mood in the subject line.""
- Added simplified uVisor introduction
+ Add simplified uVisor introduction",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,511,2017-09-13T15:03:53Z,2017-09-20T16:51:49Z,2017-09-20T16:51:49Z,MERGED,True,43,0,1,https://github.com/mbartling,Added simplified uVisor introduction.,1,[],https://github.com/ARMmbed/uvisor/pull/511,https://github.com/Patater,7,https://github.com/ARMmbed/uvisor/pull/511#issuecomment-330913212,"This document was designed according to the mbed Handbook specs.
ARMmbed/mbed-os-5-docs#244",Thanks!,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,512,2017-09-18T12:31:39Z,2017-09-18T16:47:58Z,2017-09-18T16:47:58Z,MERGED,True,216,230,25,https://github.com/Patater,Goodies from Roman,5,[],https://github.com/ARMmbed/uvisor/pull/512,https://github.com/Patater,1,https://github.com/ARMmbed/uvisor/pull/512,PR up for testing,PR up for testing,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,513,2017-09-19T11:00:28Z,2019-12-03T21:21:01Z,2019-12-03T21:21:01Z,CLOSED,False,38,30,5,https://github.com/fangyi-zhou,vmpu: vmpu_buffer_access checks ACL,5,"['needs: review', 'needs: ci']",https://github.com/ARMmbed/uvisor/pull/513,https://github.com/fangyi-zhou,1,https://github.com/ARMmbed/uvisor/pull/513,Attempt to fix #484 by checking ACL in vmpu_buffer_access,Attempt to fix #484 by checking ACL in vmpu_buffer_access,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,513,2017-09-19T11:00:28Z,2019-12-03T21:21:01Z,2019-12-03T21:21:01Z,CLOSED,False,38,30,5,https://github.com/fangyi-zhou,vmpu: vmpu_buffer_access checks ACL,5,"['needs: review', 'needs: ci']",https://github.com/ARMmbed/uvisor/pull/513,https://github.com/alzix,2,https://github.com/ARMmbed/uvisor/pull/513#issuecomment-331738268,Attempt to fix #484 by checking ACL in vmpu_buffer_access,retest uvisor,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,515,2017-09-24T19:05:48Z,2017-09-26T15:39:12Z,2017-09-26T16:27:40Z,MERGED,True,7,9,1,https://github.com/AnotherButler,Fix heading levels in INTRO.md,1,[],https://github.com/ARMmbed/uvisor/pull/515,https://github.com/AnotherButler,1,https://github.com/ARMmbed/uvisor/pull/515,"Our engine just introduced the feature of chapters, which means we can change the headings up a level.","Our engine just introduced the feature of chapters, which means we can change the headings up a level.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,516,2017-09-26T12:28:32Z,2017-09-26T15:37:39Z,2017-09-26T15:37:39Z,CLOSED,False,1,1,1,https://github.com/iriark01,Bad link is killing the docs,1,[],https://github.com/ARMmbed/uvisor/pull/516,https://github.com/iriark01,1,https://github.com/ARMmbed/uvisor/pull/516,Please merge ASAP - the engine can't build this page without it,Please merge ASAP - the engine can't build this page without it,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,516,2017-09-26T12:28:32Z,2017-09-26T15:37:39Z,2017-09-26T15:37:39Z,CLOSED,False,1,1,1,https://github.com/iriark01,Bad link is killing the docs,1,[],https://github.com/ARMmbed/uvisor/pull/516,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/516#issuecomment-332239261,Please merge ASAP - the engine can't build this page without it,"It's more obvious where the link is going when laid out that way. I'm fine with this.
Manually merged after fix of commit description to follow commit style guidelines.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,517,2017-09-27T14:03:32Z,2017-09-27T15:12:32Z,2017-09-27T15:12:33Z,CLOSED,False,7,7,1,https://github.com/iriark01,Heading levels,1,[],https://github.com/ARMmbed/uvisor/pull/517,https://github.com/iriark01,1,https://github.com/ARMmbed/uvisor/pull/517,Sorry again but we've got the wrong header levels. Please can you merge this ASAP so we can publish?,Sorry again but we've got the wrong header levels. Please can you merge this ASAP so we can publish?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,517,2017-09-27T14:03:32Z,2017-09-27T15:12:32Z,2017-09-27T15:12:33Z,CLOSED,False,7,7,1,https://github.com/iriark01,Heading levels,1,[],https://github.com/ARMmbed/uvisor/pull/517,https://github.com/Patater,2,https://github.com/ARMmbed/uvisor/pull/517#issuecomment-332554737,Sorry again but we've got the wrong header levels. Please can you merge this ASAP so we can publish?,Updated commit to match style guidelines and applied manually,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,518,2017-09-28T07:21:23Z,,2017-12-21T09:53:35Z,OPEN,False,3,0,1,https://github.com/orenc17,Dummy PR for AWS CI testing,1,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/518,https://github.com/orenc17,1,https://github.com/ARMmbed/uvisor/pull/518,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,518,2017-09-28T07:21:23Z,,2017-12-21T09:53:35Z,OPEN,False,3,0,1,https://github.com/orenc17,Dummy PR for AWS CI testing,1,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/518,https://github.com/alzix,2,https://github.com/ARMmbed/uvisor/pull/518#issuecomment-333363735,,"@orenc17A , is this PR still relevant? If no - please close it.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,518,2017-09-28T07:21:23Z,,2017-12-21T09:53:35Z,OPEN,False,3,0,1,https://github.com/orenc17,Dummy PR for AWS CI testing,1,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/518,https://github.com/alzix,3,https://github.com/ARMmbed/uvisor/pull/518#issuecomment-337292924,,/morph stupid,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,518,2017-09-28T07:21:23Z,,2017-12-21T09:53:35Z,OPEN,False,3,0,1,https://github.com/orenc17,Dummy PR for AWS CI testing,1,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/518,https://github.com/orenc17,4,https://github.com/ARMmbed/uvisor/pull/518#issuecomment-348214142,,/morph build,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,518,2017-09-28T07:21:23Z,,2017-12-21T09:53:35Z,OPEN,False,3,0,1,https://github.com/orenc17,Dummy PR for AWS CI testing,1,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/518,https://github.com/orenc17,5,https://github.com/ARMmbed/uvisor/pull/518#issuecomment-348215136,,/morph build,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,518,2017-09-28T07:21:23Z,,2017-12-21T09:53:35Z,OPEN,False,3,0,1,https://github.com/orenc17,Dummy PR for AWS CI testing,1,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/518,https://github.com/orenc17,6,https://github.com/ARMmbed/uvisor/pull/518#issuecomment-348217381,,/morph build,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,518,2017-09-28T07:21:23Z,,2017-12-21T09:53:35Z,OPEN,False,3,0,1,https://github.com/orenc17,Dummy PR for AWS CI testing,1,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/518,https://github.com/orenc17,7,https://github.com/ARMmbed/uvisor/pull/518#issuecomment-348218067,,/morph build,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,518,2017-09-28T07:21:23Z,,2017-12-21T09:53:35Z,OPEN,False,3,0,1,https://github.com/orenc17,Dummy PR for AWS CI testing,1,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/518,https://github.com/orenc17,8,https://github.com/ARMmbed/uvisor/pull/518#issuecomment-353307468,,/morph build,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,518,2017-09-28T07:21:23Z,,2017-12-21T09:53:35Z,OPEN,False,3,0,1,https://github.com/orenc17,Dummy PR for AWS CI testing,1,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/518,https://github.com/orenc17,9,https://github.com/ARMmbed/uvisor/pull/518#issuecomment-353308128,,/morph build,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,519,2017-10-03T08:27:15Z,2017-10-08T06:43:47Z,2017-10-08T06:43:52Z,MERGED,True,5,1,1,https://github.com/theamirocohen,Set uVisor main stack guard protection for v8-M,1,[],https://github.com/ARMmbed/uvisor/pull/519,https://github.com/theamirocohen,1,https://github.com/ARMmbed/uvisor/pull/519,"@mikisch81
@romkuz01
please review","@mikisch81
@romkuz01
please review",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,520,2017-10-15T13:42:52Z,2017-10-22T10:33:08Z,2017-10-22T10:33:12Z,MERGED,True,9,0,3,https://github.com/theamirocohen,Add msplim_ns for box 0,1,['run-CI'],https://github.com/ARMmbed/uvisor/pull/520,https://github.com/theamirocohen,1,https://github.com/ARMmbed/uvisor/pull/520,"requies changes from PR ARMmbed/mbed-os#5321
and changes from #486
and #496","requies changes from PR ARMmbed/mbed-os#5321
and changes from #486
and #496",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,520,2017-10-15T13:42:52Z,2017-10-22T10:33:08Z,2017-10-22T10:33:12Z,MERGED,True,9,0,3,https://github.com/theamirocohen,Add msplim_ns for box 0,1,['run-CI'],https://github.com/ARMmbed/uvisor/pull/520,https://github.com/theamirocohen,2,https://github.com/ARMmbed/uvisor/pull/520#issuecomment-336712505,"requies changes from PR ARMmbed/mbed-os#5321
and changes from #486
and #496",please review @danny4478 @alzix @romkuz01,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,520,2017-10-15T13:42:52Z,2017-10-22T10:33:08Z,2017-10-22T10:33:12Z,MERGED,True,9,0,3,https://github.com/theamirocohen,Add msplim_ns for box 0,1,['run-CI'],https://github.com/ARMmbed/uvisor/pull/520,https://github.com/alzix,3,https://github.com/ARMmbed/uvisor/pull/520#issuecomment-337008183,"requies changes from PR ARMmbed/mbed-os#5321
and changes from #486
and #496",@Patater - please approve,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,520,2017-10-15T13:42:52Z,2017-10-22T10:33:08Z,2017-10-22T10:33:12Z,MERGED,True,9,0,3,https://github.com/theamirocohen,Add msplim_ns for box 0,1,['run-CI'],https://github.com/ARMmbed/uvisor/pull/520,https://github.com/alzix,4,https://github.com/ARMmbed/uvisor/pull/520#issuecomment-338461273,"requies changes from PR ARMmbed/mbed-os#5321
and changes from #486
and #496",/morph uvisor-test,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,523,2017-10-24T15:48:23Z,2017-11-01T11:33:13Z,2017-11-01T11:33:13Z,MERGED,True,69,27,4,https://github.com/orenc17,Kinetis uVisor stack guard,9,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/523,https://github.com/orenc17,1,https://github.com/ARMmbed/uvisor/pull/523,,,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,523,2017-10-24T15:48:23Z,2017-11-01T11:33:13Z,2017-11-01T11:33:13Z,MERGED,True,69,27,4,https://github.com/orenc17,Kinetis uVisor stack guard,9,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/523,https://github.com/orenc17,2,https://github.com/ARMmbed/uvisor/pull/523#issuecomment-339037541,,/morph uvisor-test,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,523,2017-10-24T15:48:23Z,2017-11-01T11:33:13Z,2017-11-01T11:33:13Z,MERGED,True,69,27,4,https://github.com/orenc17,Kinetis uVisor stack guard,9,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/523,https://github.com/orenc17,3,https://github.com/ARMmbed/uvisor/pull/523#issuecomment-339272180,,/morph uvisor-test,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,523,2017-10-24T15:48:23Z,2017-11-01T11:33:13Z,2017-11-01T11:33:13Z,MERGED,True,69,27,4,https://github.com/orenc17,Kinetis uVisor stack guard,9,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/523,https://github.com/orenc17,4,https://github.com/ARMmbed/uvisor/pull/523#issuecomment-339318229,,/morph uvisor-test,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,523,2017-10-24T15:48:23Z,2017-11-01T11:33:13Z,2017-11-01T11:33:13Z,MERGED,True,69,27,4,https://github.com/orenc17,Kinetis uVisor stack guard,9,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/523,https://github.com/alzix,5,https://github.com/ARMmbed/uvisor/pull/523#issuecomment-339327801,,/morph uvisor-test,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,523,2017-10-24T15:48:23Z,2017-11-01T11:33:13Z,2017-11-01T11:33:13Z,MERGED,True,69,27,4,https://github.com/orenc17,Kinetis uVisor stack guard,9,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/523,https://github.com/orenc17,6,https://github.com/ARMmbed/uvisor/pull/523#issuecomment-339344786,,/morph uvisor-test,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,523,2017-10-24T15:48:23Z,2017-11-01T11:33:13Z,2017-11-01T11:33:13Z,MERGED,True,69,27,4,https://github.com/orenc17,Kinetis uVisor stack guard,9,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/523,https://github.com/alzix,7,https://github.com/ARMmbed/uvisor/pull/523#issuecomment-339579751,,/morph uvisor-test,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,523,2017-10-24T15:48:23Z,2017-11-01T11:33:13Z,2017-11-01T11:33:13Z,MERGED,True,69,27,4,https://github.com/orenc17,Kinetis uVisor stack guard,9,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/523,https://github.com/alzix,8,https://github.com/ARMmbed/uvisor/pull/523#issuecomment-339736512,,/morph uvisor-test,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,523,2017-10-24T15:48:23Z,2017-11-01T11:33:13Z,2017-11-01T11:33:13Z,MERGED,True,69,27,4,https://github.com/orenc17,Kinetis uVisor stack guard,9,"['in progress', 'run-CI']",https://github.com/ARMmbed/uvisor/pull/523,https://github.com/orenc17,9,https://github.com/ARMmbed/uvisor/pull/523#issuecomment-341032574,,@alzix can we ends this?,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,524,2017-10-26T19:45:14Z,2020-06-25T20:22:13Z,2020-06-25T20:22:13Z,CLOSED,False,16,2,1,https://github.com/alzix,Fix uVisor stack memory region size in uVisor linker script,4,[],https://github.com/ARMmbed/uvisor/pull/524,https://github.com/alzix,1,https://github.com/ARMmbed/uvisor/pull/524,"Wrong define (UVISOR_SRAM_LENGTH_PROTECTED instead of UVISOR_SRAM_LENGTH_USED ) was used for calculating uVisor STACK_S memory region size in the linker script.
As a result STACK_S region was bigger than expected by SRAM_OFFSET, which i platform dependent value.
Since uVisor should fit in to a fixed memory region (defined in uvisor-input.S) this mistake could potentially lead to stack corruption.
@orenc17A @Patater could you please take a look","Wrong define (UVISOR_SRAM_LENGTH_PROTECTED instead of UVISOR_SRAM_LENGTH_USED ) was used for calculating uVisor STACK_S memory region size in the linker script.
As a result STACK_S region was bigger than expected by SRAM_OFFSET, which i platform dependent value.
Since uVisor should fit in to a fixed memory region (defined in uvisor-input.S) this mistake could potentially lead to stack corruption.
@orenc17A @Patater could you please take a look",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,524,2017-10-26T19:45:14Z,2020-06-25T20:22:13Z,2020-06-25T20:22:13Z,CLOSED,False,16,2,1,https://github.com/alzix,Fix uVisor stack memory region size in uVisor linker script,4,[],https://github.com/ARMmbed/uvisor/pull/524,https://github.com/alzix,2,https://github.com/ARMmbed/uvisor/pull/524#issuecomment-339779563,"Wrong define (UVISOR_SRAM_LENGTH_PROTECTED instead of UVISOR_SRAM_LENGTH_USED ) was used for calculating uVisor STACK_S memory region size in the linker script.
As a result STACK_S region was bigger than expected by SRAM_OFFSET, which i platform dependent value.
Since uVisor should fit in to a fixed memory region (defined in uvisor-input.S) this mistake could potentially lead to stack corruption.
@orenc17A @Patater could you please take a look",/morph uvisor-test,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,524,2017-10-26T19:45:14Z,2020-06-25T20:22:13Z,2020-06-25T20:22:13Z,CLOSED,False,16,2,1,https://github.com/alzix,Fix uVisor stack memory region size in uVisor linker script,4,[],https://github.com/ARMmbed/uvisor/pull/524,https://github.com/alzix,3,https://github.com/ARMmbed/uvisor/pull/524#issuecomment-340359050,"Wrong define (UVISOR_SRAM_LENGTH_PROTECTED instead of UVISOR_SRAM_LENGTH_USED ) was used for calculating uVisor STACK_S memory region size in the linker script.
As a result STACK_S region was bigger than expected by SRAM_OFFSET, which i platform dependent value.
Since uVisor should fit in to a fixed memory region (defined in uvisor-input.S) this mistake could potentially lead to stack corruption.
@orenc17A @Patater could you please take a look",/morph uvisor-test,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,524,2017-10-26T19:45:14Z,2020-06-25T20:22:13Z,2020-06-25T20:22:13Z,CLOSED,False,16,2,1,https://github.com/alzix,Fix uVisor stack memory region size in uVisor linker script,4,[],https://github.com/ARMmbed/uvisor/pull/524,https://github.com/alzix,4,https://github.com/ARMmbed/uvisor/pull/524#issuecomment-342108597,"Wrong define (UVISOR_SRAM_LENGTH_PROTECTED instead of UVISOR_SRAM_LENGTH_USED ) was used for calculating uVisor STACK_S memory region size in the linker script.
As a result STACK_S region was bigger than expected by SRAM_OFFSET, which i platform dependent value.
Since uVisor should fit in to a fixed memory region (defined in uvisor-input.S) this mistake could potentially lead to stack corruption.
@orenc17A @Patater could you please take a look",/morph uvisor-test,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,525,2017-10-31T16:53:10Z,2017-11-05T12:10:59Z,2017-11-06T19:28:56Z,MERGED,True,2,2,1,https://github.com/AnotherButler,Fix links in INTRO.md,1,[],https://github.com/ARMmbed/uvisor/pull/525,https://github.com/AnotherButler,1,https://github.com/ARMmbed/uvisor/pull/525,Update link anchor text for linking best practices.,Update link anchor text for linking best practices.,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,525,2017-10-31T16:53:10Z,2017-11-05T12:10:59Z,2017-11-06T19:28:56Z,MERGED,True,2,2,1,https://github.com/AnotherButler,Fix links in INTRO.md,1,[],https://github.com/ARMmbed/uvisor/pull/525,https://github.com/alzix,2,https://github.com/ARMmbed/uvisor/pull/525#issuecomment-341968482,Update link anchor text for linking best practices.,Thank you :),True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,546,2018-05-31T06:30:27Z,2018-06-01T11:53:02Z,2018-06-01T11:53:02Z,MERGED,True,2,0,1,https://github.com/iriark01,Deprecation warning,2,[],https://github.com/ARMmbed/uvisor/pull/546,https://github.com/iriark01,1,https://github.com/ARMmbed/uvisor/pull/546,"This will also appear in the uVisor docs on the old docs site.
Text from Simon F, approved by Nicolas D.","This will also appear in the uVisor docs on the old docs site.
Text from Simon F, approved by Nicolas D.",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,547,2018-05-31T06:33:16Z,2018-06-01T11:55:06Z,2018-06-01T11:55:06Z,MERGED,True,2,0,1,https://github.com/iriark01,Deprecation warning,3,[],https://github.com/ARMmbed/uvisor/pull/547,https://github.com/iriark01,1,https://github.com/ARMmbed/uvisor/pull/547,"This will appear on the old and new docs site
Text from Simon F, approved by Nicolas D","This will appear on the old and new docs site
Text from Simon F, approved by Nicolas D",True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,548,2018-06-06T08:50:50Z,2018-06-06T10:41:42Z,2018-06-06T10:41:42Z,MERGED,True,1,1,1,https://github.com/mikisch81,Call debug_init() on release builds as well,1,[],https://github.com/ARMmbed/uvisor/pull/548,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/548,This will disable buffered write to avoid imprecise bus fault,This will disable buffered write to avoid imprecise bus fault,True,{}
ARMmbed/uvisor,https://github.com/ARMmbed/uvisor,549,2018-06-06T11:30:47Z,2018-06-06T12:38:36Z,2018-06-06T12:38:36Z,MERGED,True,27,1,3,https://github.com/mikisch81,Align with mbed-os uvisor files,2,[],https://github.com/ARMmbed/uvisor/pull/549,https://github.com/mikisch81,1,https://github.com/ARMmbed/uvisor/pull/549,,,True,{}
