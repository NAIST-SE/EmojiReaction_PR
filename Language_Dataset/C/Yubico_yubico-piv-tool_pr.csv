Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,65,2016-02-10T23:45:43Z,2016-02-15T07:48:19Z,2016-02-16T03:59:57Z,MERGED,True,6,3,2,https://github.com/mattmoyer,Add options for configuring self-signed certs.,3,[],https://github.com/Yubico/yubico-piv-tool/pull/65,https://github.com/mattmoyer,1,https://github.com/Yubico/yubico-piv-tool/pull/65,"Adds --valid-days and --serial parameters that configure the expiration (notAfter) and serial of self-signed certificates generated using the selfsign-certificate action.
Example use:
$ yubico-piv-tool -a verify-pin -P 123456 -a selfsign-certificate -s 9a -S ""/CN=Yubikey Token/"" -i public.pem -o cert.pem --valid-days 10 --serial 123456789
Successfully verified PIN.
Successfully generated a new self signed certificate.
$ openssl x509 -noout -text -in cert.pem
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 123456789 (0x75bcd15)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: CN=Yubikey Token
        Validity
            Not Before: Feb 10 23:44:08 2016 GMT
            Not After : Feb 20 23:44:08 2016 GMT
        Subject: CN=Yubikey Token
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
            EC Public Key:
                pub:
                    04:bb:2e:78:2b:ee:14:1e:f7:5a:9f:d7:ae:53:00:
                    ee:d5:11:9b:f6:bb:14:da:bf:d7:41:0b:55:79:b5:
                    c0:3c:0b:44:f5:59:d9:e8:97:b3:2a:37:98:1b:be:
                    c7:a8:a5:23:7a:60:7b:69:63:0e:87:5f:96:75:00:
                    eb:f0:45:9f:4f
                ASN1 OID: prime256v1
    Signature Algorithm: ecdsa-with-SHA256
        30:45:02:21:00:f9:b9:4e:04:6f:31:d8:03:3a:f8:13:bd:0b:
        7f:b0:9f:f1:e6:84:25:af:4c:12:29:2e:05:53:65:f3:ce:9b:
        c9:02:20:6c:32:a0:f4:61:84:01:c4:16:f9:9c:40:52:64:ed:
        53:78:95:5c:6e:d2:35:19:56:ee:eb:c7:e5:a0:71:87:95","Adds --valid-days and --serial parameters that configure the expiration (notAfter) and serial of self-signed certificates generated using the selfsign-certificate action.
Example use:
$ yubico-piv-tool -a verify-pin -P 123456 -a selfsign-certificate -s 9a -S ""/CN=Yubikey Token/"" -i public.pem -o cert.pem --valid-days 10 --serial 123456789
Successfully verified PIN.
Successfully generated a new self signed certificate.
$ openssl x509 -noout -text -in cert.pem
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 123456789 (0x75bcd15)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: CN=Yubikey Token
        Validity
            Not Before: Feb 10 23:44:08 2016 GMT
            Not After : Feb 20 23:44:08 2016 GMT
        Subject: CN=Yubikey Token
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
            EC Public Key:
                pub:
                    04:bb:2e:78:2b:ee:14:1e:f7:5a:9f:d7:ae:53:00:
                    ee:d5:11:9b:f6:bb:14:da:bf:d7:41:0b:55:79:b5:
                    c0:3c:0b:44:f5:59:d9:e8:97:b3:2a:37:98:1b:be:
                    c7:a8:a5:23:7a:60:7b:69:63:0e:87:5f:96:75:00:
                    eb:f0:45:9f:4f
                ASN1 OID: prime256v1
    Signature Algorithm: ecdsa-with-SHA256
        30:45:02:21:00:f9:b9:4e:04:6f:31:d8:03:3a:f8:13:bd:0b:
        7f:b0:9f:f1:e6:84:25:af:4c:12:29:2e:05:53:65:f3:ce:9b:
        c9:02:20:6c:32:a0:f4:61:84:01:c4:16:f9:9c:40:52:64:ed:
        53:78:95:5c:6e:d2:35:19:56:ee:eb:c7:e5:a0:71:87:95",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,65,2016-02-10T23:45:43Z,2016-02-15T07:48:19Z,2016-02-16T03:59:57Z,MERGED,True,6,3,2,https://github.com/mattmoyer,Add options for configuring self-signed certs.,3,[],https://github.com/Yubico/yubico-piv-tool/pull/65,https://github.com/klali,2,https://github.com/Yubico/yubico-piv-tool/pull/65#issuecomment-183220651,"Adds --valid-days and --serial parameters that configure the expiration (notAfter) and serial of self-signed certificates generated using the selfsign-certificate action.
Example use:
$ yubico-piv-tool -a verify-pin -P 123456 -a selfsign-certificate -s 9a -S ""/CN=Yubikey Token/"" -i public.pem -o cert.pem --valid-days 10 --serial 123456789
Successfully verified PIN.
Successfully generated a new self signed certificate.
$ openssl x509 -noout -text -in cert.pem
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 123456789 (0x75bcd15)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: CN=Yubikey Token
        Validity
            Not Before: Feb 10 23:44:08 2016 GMT
            Not After : Feb 20 23:44:08 2016 GMT
        Subject: CN=Yubikey Token
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
            EC Public Key:
                pub:
                    04:bb:2e:78:2b:ee:14:1e:f7:5a:9f:d7:ae:53:00:
                    ee:d5:11:9b:f6:bb:14:da:bf:d7:41:0b:55:79:b5:
                    c0:3c:0b:44:f5:59:d9:e8:97:b3:2a:37:98:1b:be:
                    c7:a8:a5:23:7a:60:7b:69:63:0e:87:5f:96:75:00:
                    eb:f0:45:9f:4f
                ASN1 OID: prime256v1
    Signature Algorithm: ecdsa-with-SHA256
        30:45:02:21:00:f9:b9:4e:04:6f:31:d8:03:3a:f8:13:bd:0b:
        7f:b0:9f:f1:e6:84:25:af:4c:12:29:2e:05:53:65:f3:ce:9b:
        c9:02:20:6c:32:a0:f4:61:84:01:c4:16:f9:9c:40:52:64:ed:
        53:78:95:5c:6e:d2:35:19:56:ee:eb:c7:e5:a0:71:87:95","This looks good to me.
One minor nit: Can you drop the const on the int fields to the function (since we don't use const for any other parameters like this)?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,65,2016-02-10T23:45:43Z,2016-02-15T07:48:19Z,2016-02-16T03:59:57Z,MERGED,True,6,3,2,https://github.com/mattmoyer,Add options for configuring self-signed certs.,3,[],https://github.com/Yubico/yubico-piv-tool/pull/65,https://github.com/mattmoyer,3,https://github.com/Yubico/yubico-piv-tool/pull/65#issuecomment-183364089,"Adds --valid-days and --serial parameters that configure the expiration (notAfter) and serial of self-signed certificates generated using the selfsign-certificate action.
Example use:
$ yubico-piv-tool -a verify-pin -P 123456 -a selfsign-certificate -s 9a -S ""/CN=Yubikey Token/"" -i public.pem -o cert.pem --valid-days 10 --serial 123456789
Successfully verified PIN.
Successfully generated a new self signed certificate.
$ openssl x509 -noout -text -in cert.pem
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 123456789 (0x75bcd15)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: CN=Yubikey Token
        Validity
            Not Before: Feb 10 23:44:08 2016 GMT
            Not After : Feb 20 23:44:08 2016 GMT
        Subject: CN=Yubikey Token
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
            EC Public Key:
                pub:
                    04:bb:2e:78:2b:ee:14:1e:f7:5a:9f:d7:ae:53:00:
                    ee:d5:11:9b:f6:bb:14:da:bf:d7:41:0b:55:79:b5:
                    c0:3c:0b:44:f5:59:d9:e8:97:b3:2a:37:98:1b:be:
                    c7:a8:a5:23:7a:60:7b:69:63:0e:87:5f:96:75:00:
                    eb:f0:45:9f:4f
                ASN1 OID: prime256v1
    Signature Algorithm: ecdsa-with-SHA256
        30:45:02:21:00:f9:b9:4e:04:6f:31:d8:03:3a:f8:13:bd:0b:
        7f:b0:9f:f1:e6:84:25:af:4c:12:29:2e:05:53:65:f3:ce:9b:
        c9:02:20:6c:32:a0:f4:61:84:01:c4:16:f9:9c:40:52:64:ed:
        53:78:95:5c:6e:d2:35:19:56:ee:eb:c7:e5:a0:71:87:95",@klali no problem,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,65,2016-02-10T23:45:43Z,2016-02-15T07:48:19Z,2016-02-16T03:59:57Z,MERGED,True,6,3,2,https://github.com/mattmoyer,Add options for configuring self-signed certs.,3,[],https://github.com/Yubico/yubico-piv-tool/pull/65,https://github.com/klali,4,https://github.com/Yubico/yubico-piv-tool/pull/65#issuecomment-184102477,"Adds --valid-days and --serial parameters that configure the expiration (notAfter) and serial of self-signed certificates generated using the selfsign-certificate action.
Example use:
$ yubico-piv-tool -a verify-pin -P 123456 -a selfsign-certificate -s 9a -S ""/CN=Yubikey Token/"" -i public.pem -o cert.pem --valid-days 10 --serial 123456789
Successfully verified PIN.
Successfully generated a new self signed certificate.
$ openssl x509 -noout -text -in cert.pem
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 123456789 (0x75bcd15)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: CN=Yubikey Token
        Validity
            Not Before: Feb 10 23:44:08 2016 GMT
            Not After : Feb 20 23:44:08 2016 GMT
        Subject: CN=Yubikey Token
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
            EC Public Key:
                pub:
                    04:bb:2e:78:2b:ee:14:1e:f7:5a:9f:d7:ae:53:00:
                    ee:d5:11:9b:f6:bb:14:da:bf:d7:41:0b:55:79:b5:
                    c0:3c:0b:44:f5:59:d9:e8:97:b3:2a:37:98:1b:be:
                    c7:a8:a5:23:7a:60:7b:69:63:0e:87:5f:96:75:00:
                    eb:f0:45:9f:4f
                ASN1 OID: prime256v1
    Signature Algorithm: ecdsa-with-SHA256
        30:45:02:21:00:f9:b9:4e:04:6f:31:d8:03:3a:f8:13:bd:0b:
        7f:b0:9f:f1:e6:84:25:af:4c:12:29:2e:05:53:65:f3:ce:9b:
        c9:02:20:6c:32:a0:f4:61:84:01:c4:16:f9:9c:40:52:64:ed:
        53:78:95:5c:6e:d2:35:19:56:ee:eb:c7:e5:a0:71:87:95",Great. Merging.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,70,2016-05-04T21:22:51Z,2016-05-09T06:56:45Z,2016-05-09T06:56:45Z,MERGED,True,3,2,3,https://github.com/mscherer,Add YKPIV_ALGO_TAG,1,[],https://github.com/Yubico/yubico-piv-tool/pull/70,https://github.com/mscherer,1,https://github.com/Yubico/yubico-piv-tool/pull/70,Replace the magic constant 0x80 when sending a packet to the key,Replace the magic constant 0x80 when sending a packet to the key,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,70,2016-05-04T21:22:51Z,2016-05-09T06:56:45Z,2016-05-09T06:56:45Z,MERGED,True,3,2,3,https://github.com/mscherer,Add YKPIV_ALGO_TAG,1,[],https://github.com/Yubico/yubico-piv-tool/pull/70,https://github.com/coveralls,2,https://github.com/Yubico/yubico-piv-tool/pull/70#issuecomment-217009643,Replace the magic constant 0x80 when sending a packet to the key,Coverage remained the same at 3.556% when pulling 6d73eb8 on mscherer:add_constant into 1a525f7 on Yubico:master.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,70,2016-05-04T21:22:51Z,2016-05-09T06:56:45Z,2016-05-09T06:56:45Z,MERGED,True,3,2,3,https://github.com/mscherer,Add YKPIV_ALGO_TAG,1,[],https://github.com/Yubico/yubico-piv-tool/pull/70,https://github.com/coveralls,3,https://github.com/Yubico/yubico-piv-tool/pull/70#issuecomment-217037075,Replace the magic constant 0x80 when sending a packet to the key,Coverage remained the same at 3.556% when pulling 6e4266c on mscherer:add_constant into 1a525f7 on Yubico:master.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,70,2016-05-04T21:22:51Z,2016-05-09T06:56:45Z,2016-05-09T06:56:45Z,MERGED,True,3,2,3,https://github.com/mscherer,Add YKPIV_ALGO_TAG,1,[],https://github.com/Yubico/yubico-piv-tool/pull/70,https://github.com/klali,4,https://github.com/Yubico/yubico-piv-tool/pull/70#issuecomment-217789268,Replace the magic constant 0x80 when sending a packet to the key,Thanks!,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,71,2016-05-04T21:23:01Z,2016-05-09T06:57:22Z,2016-05-09T06:57:22Z,MERGED,True,1,1,1,https://github.com/mscherer,Do not repeat the size of certdata,1,[],https://github.com/Yubico/yubico-piv-tool/pull/71,https://github.com/mscherer,1,https://github.com/Yubico/yubico-piv-tool/pull/71,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,71,2016-05-04T21:23:01Z,2016-05-09T06:57:22Z,2016-05-09T06:57:22Z,MERGED,True,1,1,1,https://github.com/mscherer,Do not repeat the size of certdata,1,[],https://github.com/Yubico/yubico-piv-tool/pull/71,https://github.com/coveralls,2,https://github.com/Yubico/yubico-piv-tool/pull/71#issuecomment-217011641,,Coverage remained the same at 3.556% when pulling ea4c6bd on mscherer:small_cleanup into 1a525f7 on Yubico:master.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,71,2016-05-04T21:23:01Z,2016-05-09T06:57:22Z,2016-05-09T06:57:22Z,MERGED,True,1,1,1,https://github.com/mscherer,Do not repeat the size of certdata,1,[],https://github.com/Yubico/yubico-piv-tool/pull/71,https://github.com/coveralls,3,https://github.com/Yubico/yubico-piv-tool/pull/71#issuecomment-217046695,,Coverage remained the same at 3.556% when pulling ff67119 on mscherer:small_cleanup into 1a525f7 on Yubico:master.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,71,2016-05-04T21:23:01Z,2016-05-09T06:57:22Z,2016-05-09T06:57:22Z,MERGED,True,1,1,1,https://github.com/mscherer,Do not repeat the size of certdata,1,[],https://github.com/Yubico/yubico-piv-tool/pull/71,https://github.com/klali,4,https://github.com/Yubico/yubico-piv-tool/pull/71#issuecomment-217789349,,Thanks!,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,72,2016-05-04T21:27:43Z,2016-05-09T07:02:15Z,2016-05-09T07:02:19Z,MERGED,True,5,5,3,https://github.com/mscherer,Fix various errors messages,1,[],https://github.com/Yubico/yubico-piv-tool/pull/72,https://github.com/mscherer,1,https://github.com/Yubico/yubico-piv-tool/pull/72,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,72,2016-05-04T21:27:43Z,2016-05-09T07:02:15Z,2016-05-09T07:02:19Z,MERGED,True,5,5,3,https://github.com/mscherer,Fix various errors messages,1,[],https://github.com/Yubico/yubico-piv-tool/pull/72,https://github.com/coveralls,2,https://github.com/Yubico/yubico-piv-tool/pull/72#issuecomment-217013219,,Coverage remained the same at 3.556% when pulling 80c7b71 on mscherer:fix_typo into 1a525f7 on Yubico:master.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,72,2016-05-04T21:27:43Z,2016-05-09T07:02:15Z,2016-05-09T07:02:19Z,MERGED,True,5,5,3,https://github.com/mscherer,Fix various errors messages,1,[],https://github.com/Yubico/yubico-piv-tool/pull/72,https://github.com/coveralls,3,https://github.com/Yubico/yubico-piv-tool/pull/72#issuecomment-217044323,,Coverage remained the same at 3.556% when pulling 099c55e on mscherer:fix_typo into 1a525f7 on Yubico:master.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,72,2016-05-04T21:27:43Z,2016-05-09T07:02:15Z,2016-05-09T07:02:19Z,MERGED,True,5,5,3,https://github.com/mscherer,Fix various errors messages,1,[],https://github.com/Yubico/yubico-piv-tool/pull/72,https://github.com/klali,4,https://github.com/Yubico/yubico-piv-tool/pull/72#issuecomment-217790078,,Thanks!,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,73,2016-05-04T22:19:10Z,2016-05-09T06:59:08Z,2016-05-09T06:59:08Z,MERGED,True,3,3,1,https://github.com/mscherer,Use more constant for filling apdu struct.,1,[],https://github.com/Yubico/yubico-piv-tool/pull/73,https://github.com/mscherer,1,https://github.com/Yubico/yubico-piv-tool/pull/73,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,73,2016-05-04T22:19:10Z,2016-05-09T06:59:08Z,2016-05-09T06:59:08Z,MERGED,True,3,3,1,https://github.com/mscherer,Use more constant for filling apdu struct.,1,[],https://github.com/Yubico/yubico-piv-tool/pull/73,https://github.com/coveralls,2,https://github.com/Yubico/yubico-piv-tool/pull/73#issuecomment-217022429,,Coverage remained the same at 3.556% when pulling 89b8c59 on mscherer:more_small_cleanup into 1a525f7 on Yubico:master.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,73,2016-05-04T22:19:10Z,2016-05-09T06:59:08Z,2016-05-09T06:59:08Z,MERGED,True,3,3,1,https://github.com/mscherer,Use more constant for filling apdu struct.,1,[],https://github.com/Yubico/yubico-piv-tool/pull/73,https://github.com/coveralls,3,https://github.com/Yubico/yubico-piv-tool/pull/73#issuecomment-217045640,,Coverage remained the same at 3.556% when pulling 6a4608f on mscherer:more_small_cleanup into 1a525f7 on Yubico:master.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,73,2016-05-04T22:19:10Z,2016-05-09T06:59:08Z,2016-05-09T06:59:08Z,MERGED,True,3,3,1,https://github.com/mscherer,Use more constant for filling apdu struct.,1,[],https://github.com/Yubico/yubico-piv-tool/pull/73,https://github.com/klali,4,https://github.com/Yubico/yubico-piv-tool/pull/73#issuecomment-217789592,,Thanks!,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,74,2016-05-04T22:26:02Z,2016-05-09T06:58:39Z,2016-05-09T06:58:39Z,MERGED,True,3,3,3,https://github.com/mscherer,Fix error in the define name YKPIV_INS_GENERATE_ASYMMERTRIC,1,[],https://github.com/Yubico/yubico-piv-tool/pull/74,https://github.com/mscherer,1,https://github.com/Yubico/yubico-piv-tool/pull/74,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,74,2016-05-04T22:26:02Z,2016-05-09T06:58:39Z,2016-05-09T06:58:39Z,MERGED,True,3,3,3,https://github.com/mscherer,Fix error in the define name YKPIV_INS_GENERATE_ASYMMERTRIC,1,[],https://github.com/Yubico/yubico-piv-tool/pull/74,https://github.com/coveralls,2,https://github.com/Yubico/yubico-piv-tool/pull/74#issuecomment-217041829,,Coverage remained the same at 3.556% when pulling fd9a0a3 on mscherer:fix_constant_name into 1a525f7 on Yubico:master.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,74,2016-05-04T22:26:02Z,2016-05-09T06:58:39Z,2016-05-09T06:58:39Z,MERGED,True,3,3,3,https://github.com/mscherer,Fix error in the define name YKPIV_INS_GENERATE_ASYMMERTRIC,1,[],https://github.com/Yubico/yubico-piv-tool/pull/74,https://github.com/klali,3,https://github.com/Yubico/yubico-piv-tool/pull/74#issuecomment-217789527,,Thanks!,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,75,2016-05-04T23:00:05Z,2016-05-09T07:46:29Z,2016-05-09T07:46:29Z,MERGED,True,31,23,3,https://github.com/mscherer,Replace magic number for status word by constants,1,[],https://github.com/Yubico/yubico-piv-tool/pull/75,https://github.com/mscherer,1,https://github.com/Yubico/yubico-piv-tool/pull/75,"Most come from NIST special publication 800-73-4, section 5.6,
except one which I assume to be a custom one for yubikey.","Most come from NIST special publication 800-73-4, section 5.6,
except one which I assume to be a custom one for yubikey.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,75,2016-05-04T23:00:05Z,2016-05-09T07:46:29Z,2016-05-09T07:46:29Z,MERGED,True,31,23,3,https://github.com/mscherer,Replace magic number for status word by constants,1,[],https://github.com/Yubico/yubico-piv-tool/pull/75,https://github.com/coveralls,2,https://github.com/Yubico/yubico-piv-tool/pull/75#issuecomment-217032128,"Most come from NIST special publication 800-73-4, section 5.6,
except one which I assume to be a custom one for yubikey.",Coverage remained the same at 3.556% when pulling dc37d21 on mscherer:add_sw_const into 1a525f7 on Yubico:master.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,75,2016-05-04T23:00:05Z,2016-05-09T07:46:29Z,2016-05-09T07:46:29Z,MERGED,True,31,23,3,https://github.com/mscherer,Replace magic number for status word by constants,1,[],https://github.com/Yubico/yubico-piv-tool/pull/75,https://github.com/coveralls,3,https://github.com/Yubico/yubico-piv-tool/pull/75#issuecomment-217039192,"Most come from NIST special publication 800-73-4, section 5.6,
except one which I assume to be a custom one for yubikey.",Coverage remained the same at 3.556% when pulling f8f2a2e on mscherer:add_sw_const into 1a525f7 on Yubico:master.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,75,2016-05-04T23:00:05Z,2016-05-09T07:46:29Z,2016-05-09T07:46:29Z,MERGED,True,31,23,3,https://github.com/mscherer,Replace magic number for status word by constants,1,[],https://github.com/Yubico/yubico-piv-tool/pull/75,https://github.com/klali,4,https://github.com/Yubico/yubico-piv-tool/pull/75#issuecomment-217797297,"Most come from NIST special publication 800-73-4, section 5.6,
except one which I assume to be a custom one for yubikey.",Thank you!,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,78,2016-06-29T00:07:15Z,2016-06-29T00:42:11Z,2020-07-14T13:18:43Z,MERGED,True,8,4,1,https://github.com/oscarso,Supplying --key when management key value is longer the default value,3,[],https://github.com/Yubico/yubico-piv-tool/pull/78,https://github.com/oscarso,1,https://github.com/Yubico/yubico-piv-tool/pull/78,Supply the management key value during generate key if it has ever been modified,Supply the management key value during generate key if it has ever been modified,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,78,2016-06-29T00:07:15Z,2016-06-29T00:42:11Z,2020-07-14T13:18:43Z,MERGED,True,8,4,1,https://github.com/oscarso,Supplying --key when management key value is longer the default value,3,[],https://github.com/Yubico/yubico-piv-tool/pull/78,https://github.com/oscarso,2,https://github.com/Yubico/yubico-piv-tool/pull/78#issuecomment-229225482,Supply the management key value during generate key if it has ever been modified,Reviewed by the team. Let's merge it and check again.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,80,2016-08-05T05:47:52Z,2020-02-07T09:17:42Z,2020-02-07T09:17:42Z,CLOSED,False,1,1,1,https://github.com/dnascimento,increase object buffer size to support certificates > 1024 bytes,1,[],https://github.com/Yubico/yubico-piv-tool/pull/80,https://github.com/dnascimento,1,https://github.com/Yubico/yubico-piv-tool/pull/80,"Certificate attribute buffer is limited by the buffer size to 1024 bytes.
I tested successfully certificates > 1024bytes in Yubikey 4.
closes issue #80","Certificate attribute buffer is limited by the buffer size to 1024 bytes.
I tested successfully certificates > 1024bytes in Yubikey 4.
closes issue #80",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,80,2016-08-05T05:47:52Z,2020-02-07T09:17:42Z,2020-02-07T09:17:42Z,CLOSED,False,1,1,1,https://github.com/dnascimento,increase object buffer size to support certificates > 1024 bytes,1,[],https://github.com/Yubico/yubico-piv-tool/pull/80,https://github.com/qpernil,2,https://github.com/Yubico/yubico-piv-tool/pull/80#issuecomment-583302524,"Certificate attribute buffer is limited by the buffer size to 1024 bytes.
I tested successfully certificates > 1024bytes in Yubikey 4.
closes issue #80","Version 2.0.0 increases the buffer size to match the maximum that can be written to the device, which is 3072 bytes.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,87,2016-09-23T06:23:30Z,2016-09-23T11:00:07Z,2016-09-23T11:00:07Z,MERGED,True,1,1,1,https://github.com/fredemmott,Update documentation on ssh-agent on macos,1,[],https://github.com/Yubico/yubico-piv-tool/pull/87,https://github.com/fredemmott,1,https://github.com/Yubico/yubico-piv-tool/pull/87,Works fine on clean installs of sierra - just needs opensc from homebrew,Works fine on clean installs of sierra - just needs opensc from homebrew,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,90,2016-09-30T20:38:27Z,2016-10-03T13:18:04Z,2016-10-03T13:18:04Z,MERGED,True,10,8,1,https://github.com/acdha,Improve SSH with PIV and PKCS11 instructions for newbies,1,[],https://github.com/Yubico/yubico-piv-tool/pull/90,https://github.com/acdha,1,https://github.com/Yubico/yubico-piv-tool/pull/90,"I kept some notes for things which I had to figure out to get my system configured and write some private documentation:

Explain how to use a non-default management key
Explain why -A RSA4096 isn't an option
Remove -P 123456 from the self-sign step to avoid encouraging people to leak their PIN into shell history files; yubico-piv-tool will securely prompt for the PIN by default
Avoid forcing line-wrapping in shell examples, which complicated shell editing
Show Mac Homebrew users how to reliably determine the opensc lib path","I kept some notes for things which I had to figure out to get my system configured and write some private documentation:

Explain how to use a non-default management key
Explain why -A RSA4096 isn't an option
Remove -P 123456 from the self-sign step to avoid encouraging people to leak their PIN into shell history files; yubico-piv-tool will securely prompt for the PIN by default
Avoid forcing line-wrapping in shell examples, which complicated shell editing
Show Mac Homebrew users how to reliably determine the opensc lib path",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,90,2016-09-30T20:38:27Z,2016-10-03T13:18:04Z,2016-10-03T13:18:04Z,MERGED,True,10,8,1,https://github.com/acdha,Improve SSH with PIV and PKCS11 instructions for newbies,1,[],https://github.com/Yubico/yubico-piv-tool/pull/90,https://github.com/a-dma,2,https://github.com/Yubico/yubico-piv-tool/pull/90#issuecomment-251103157,"I kept some notes for things which I had to figure out to get my system configured and write some private documentation:

Explain how to use a non-default management key
Explain why -A RSA4096 isn't an option
Remove -P 123456 from the self-sign step to avoid encouraging people to leak their PIN into shell history files; yubico-piv-tool will securely prompt for the PIN by default
Avoid forcing line-wrapping in shell examples, which complicated shell editing
Show Mac Homebrew users how to reliably determine the opensc lib path",Thanks,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,107,2017-02-20T10:55:31Z,2017-11-27T15:39:43Z,2017-11-27T15:39:43Z,MERGED,True,298,46,8,https://github.com/Jakuje,OopenSSL 1.1.0 compatibility,9,[],https://github.com/Yubico/yubico-piv-tool/pull/107,https://github.com/Jakuje,1,https://github.com/Yubico/yubico-piv-tool/pull/107,"Update 2017-11-14: Resolves  #104. Tested with latest Yubikey 4 with hardware tests, provisioning new key and selfsigning certificates.","Update 2017-11-14: Resolves  #104. Tested with latest Yubikey 4 with hardware tests, provisioning new key and selfsigning certificates.",True,{'THUMBS_UP': ['https://github.com/cj1324']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,107,2017-02-20T10:55:31Z,2017-11-27T15:39:43Z,2017-11-27T15:39:43Z,MERGED,True,298,46,8,https://github.com/Jakuje,OopenSSL 1.1.0 compatibility,9,[],https://github.com/Yubico/yubico-piv-tool/pull/107,https://github.com/klali,2,https://github.com/Yubico/yubico-piv-tool/pull/107#issuecomment-281049801,"Update 2017-11-14: Resolves  #104. Tested with latest Yubikey 4 with hardware tests, provisioning new key and selfsigning certificates.","The approach of doing this with a compat layer is probably the only way to go ahead. I haven't looked it over to see how many of those would need to be added.
There is no direct plan or schedule for this work.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,107,2017-02-20T10:55:31Z,2017-11-27T15:39:43Z,2017-11-27T15:39:43Z,MERGED,True,298,46,8,https://github.com/Jakuje,OopenSSL 1.1.0 compatibility,9,[],https://github.com/Yubico/yubico-piv-tool/pull/107,https://github.com/Jakuje,3,https://github.com/Yubico/yubico-piv-tool/pull/107#issuecomment-281054452,"Update 2017-11-14: Resolves  #104. Tested with latest Yubikey 4 with hardware tests, provisioning new key and selfsigning certificates.","Thank you for prompt comment. There are really only few more changes, but they are probably harder to address than this part in this commit.
If there is no plan yet from Yubico, I will be hopefully able to continue on that (or somebody else), since many distributions are moving to openssl 1.1.0",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,107,2017-02-20T10:55:31Z,2017-11-27T15:39:43Z,2017-11-27T15:39:43Z,MERGED,True,298,46,8,https://github.com/Jakuje,OopenSSL 1.1.0 compatibility,9,[],https://github.com/Yubico/yubico-piv-tool/pull/107,https://github.com/Jakuje,4,https://github.com/Yubico/yubico-piv-tool/pull/107#issuecomment-282008122,"Update 2017-11-14: Resolves  #104. Tested with latest Yubikey 4 with hardware tests, provisioning new key and selfsigning certificates.","I added few more changes I was able to handle. The embedded tests work except the hardware ones (failing even before the change).
What is missing is working with {X509,X509_REQ}_digest() and tweaking of {x509,req}->signature->flags and {req,x509}->{cert_info,sig_alg}->{parameter,algorithm} on several places in the code.
I believe that is a good start, but I don't have enough internal knowledge to test further changes to make sure they will not break some use cases. I will build the package against old OpenSSL so far, but having this fixed in future would be very nice.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,107,2017-02-20T10:55:31Z,2017-11-27T15:39:43Z,2017-11-27T15:39:43Z,MERGED,True,298,46,8,https://github.com/Jakuje,OopenSSL 1.1.0 compatibility,9,[],https://github.com/Yubico/yubico-piv-tool/pull/107,https://github.com/Jakuje,5,https://github.com/Yubico/yubico-piv-tool/pull/107#issuecomment-338225112,"Update 2017-11-14: Resolves  #104. Tested with latest Yubikey 4 with hardware tests, provisioning new key and selfsigning certificates.","I was tweaking with it little bit more added the straight-forward parts, but the certificates are still little bit more complicated.
From what I see, with opaque structures, it is not possible to do exactly what you were doing in functions request_certificate() and selfsign_certificate() and do_create_empty_cert(), such as modifying algorithms, writing signatures directly into X509_REQ and X509 structures and so on.
On the other hand, the X509_REQ_sign() and X509_sign() should get used to achieve the same using high-level interface, while the signature should be provided by using RSA_method and EC_KEY_METHOD structures to pass the signature request to the card itself.
I am pushing a WIP status, that builds with OpenSSL 1.1.0, but for older is still using the same approach. Unfortunately, currently I do not have any capable yubikey at hand to test the actual functionality, so the last commit is for further review/testing, but the idea should be clear.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,107,2017-02-20T10:55:31Z,2017-11-27T15:39:43Z,2017-11-27T15:39:43Z,MERGED,True,298,46,8,https://github.com/Jakuje,OopenSSL 1.1.0 compatibility,9,[],https://github.com/Yubico/yubico-piv-tool/pull/107,https://github.com/Jakuje,6,https://github.com/Yubico/yubico-piv-tool/pull/107#issuecomment-344199811,"Update 2017-11-14: Resolves  #104. Tested with latest Yubikey 4 with hardware tests, provisioning new key and selfsigning certificates.",Finally my new Yubikey arrived so before setting it up for myself I finished with this PR and made even the HW tests pass with OpenSSL 1.1.0 and hopefully also with the old version (including the rebase to the current master).,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,107,2017-02-20T10:55:31Z,2017-11-27T15:39:43Z,2017-11-27T15:39:43Z,MERGED,True,298,46,8,https://github.com/Jakuje,OopenSSL 1.1.0 compatibility,9,[],https://github.com/Yubico/yubico-piv-tool/pull/107,https://github.com/mrmekon,7,https://github.com/Yubico/yubico-piv-tool/pull/107#issuecomment-347158366,"Update 2017-11-14: Resolves  #104. Tested with latest Yubikey 4 with hardware tests, provisioning new key and selfsigning certificates.",@Jakuje I updated this to work with the recent refactoring: PR #131,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,113,2017-03-26T17:28:25Z,2017-03-30T07:40:40Z,2017-03-30T11:19:12Z,MERGED,True,44,32,6,https://github.com/hannesm,fix PSS signing support,2,[],https://github.com/Yubico/yubico-piv-tool/pull/113,https://github.com/hannesm,1,https://github.com/Yubico/yubico-piv-tool/pull/113,"fixes #25 #111
The code on master was slightly wrong:

it stored only the raw modulus in op_info.op.sign.key (see 
  
    
      yubico-piv-tool/ykcs11/ykcs11.c
    
    
        Lines 1755 to 1769
      in
      8e91c8e
    
  
  
    

        
          
           // Also store the raw public key if the mechanism is PSS 
        

        
          
           if (is_PSS_mechanism(pMechanism->mechanism)) { 
        

        
          
             op_info.op.sign.key = malloc(key_len); 
        

        
          
             if (op_info.op.sign.key == NULL) 
        

        
          
               return CKR_HOST_MEMORY; 
        

        
          
            
        

        
          
             template[2].pValue = op_info.op.sign.key; 
        

        
          
             template[2].ulValueLen = key_len; 
        

        
          
            
        

        
          
             if (get_attribute(&session, hKey, template + 2) != CKR_OK) { 
        

        
          
               DBG(""Unable to get public key""); 
        

        
          
               return CKR_KEY_HANDLE_INVALID; 
        

        
          
             } 
        

        
          
            
        

        
          
           } 
        
    
  

) -- where the call to malloc used key_len, which is the bit length of the RSA key
this (overly long) buffer was passed to OpenSSL d2i_RSAPublicKey (via 
  
    
      yubico-piv-tool/ykcs11/mechanisms.c
    
    
         Line 286
      in
      8e91c8e
    
  
  
    

        
          
           rv = do_encode_rsa_public_key(op_info->op.sign.key, op_info->op.sign.key_len, &rsa); 
        
    
  

 and 
  
    
      yubico-piv-tool/ykcs11/openssl_utils.c
    
    
         Line 470
      in
      8e91c8e
    
  
  
    

        
          
           CK_RV do_encode_rsa_public_key(CK_BYTE_PTR data, CK_ULONG len, RSA **key) { 
        
    
  

), which failed since d2i_ expects a full key (algorithmIdentifier, modulus, exponent) DER encoded ASN.1 buffer.
The malloc()ed buffer was never free()d.

Now, instead of using the indirection of d2i_ and a byte array, a pointer to an RSA struct is used in sign_info_t.  c_SignInit allocates the RSA* if PSS is used, and fills its modulus and public exponent.  This also means that apply_sign_mechanism_finalize (in mechanisms.c) does no longer parse the public key, but just passes the RSA* to do_pkcs_pss -- and RSA_free it afterwards.
Another modification is in openssl_utils.c do_pkcs_pss: here, the byte array em is appropriately sized (to the key size), the check if (*out_len < (CK_ULONG)RSA_size(key)) was removed (I don't understand its presence), and em is copied after the OpenSSL operation to out, which has its length adjusted.
I used the resulting ykcs11 library to sign data using PSS (and verify the signature using openssl command line utility).
I'm not a C programmer, please review carefully.","fixes #25 #111
The code on master was slightly wrong:

it stored only the raw modulus in op_info.op.sign.key (see 
  
    
      yubico-piv-tool/ykcs11/ykcs11.c
    
    
        Lines 1755 to 1769
      in
      8e91c8e
    
  
  
    

        
          
           // Also store the raw public key if the mechanism is PSS 
        

        
          
           if (is_PSS_mechanism(pMechanism->mechanism)) { 
        

        
          
             op_info.op.sign.key = malloc(key_len); 
        

        
          
             if (op_info.op.sign.key == NULL) 
        

        
          
               return CKR_HOST_MEMORY; 
        

        
          
            
        

        
          
             template[2].pValue = op_info.op.sign.key; 
        

        
          
             template[2].ulValueLen = key_len; 
        

        
          
            
        

        
          
             if (get_attribute(&session, hKey, template + 2) != CKR_OK) { 
        

        
          
               DBG(""Unable to get public key""); 
        

        
          
               return CKR_KEY_HANDLE_INVALID; 
        

        
          
             } 
        

        
          
            
        

        
          
           } 
        
    
  

) -- where the call to malloc used key_len, which is the bit length of the RSA key
this (overly long) buffer was passed to OpenSSL d2i_RSAPublicKey (via 
  
    
      yubico-piv-tool/ykcs11/mechanisms.c
    
    
         Line 286
      in
      8e91c8e
    
  
  
    

        
          
           rv = do_encode_rsa_public_key(op_info->op.sign.key, op_info->op.sign.key_len, &rsa); 
        
    
  

 and 
  
    
      yubico-piv-tool/ykcs11/openssl_utils.c
    
    
         Line 470
      in
      8e91c8e
    
  
  
    

        
          
           CK_RV do_encode_rsa_public_key(CK_BYTE_PTR data, CK_ULONG len, RSA **key) { 
        
    
  

), which failed since d2i_ expects a full key (algorithmIdentifier, modulus, exponent) DER encoded ASN.1 buffer.
The malloc()ed buffer was never free()d.

Now, instead of using the indirection of d2i_ and a byte array, a pointer to an RSA struct is used in sign_info_t.  c_SignInit allocates the RSA* if PSS is used, and fills its modulus and public exponent.  This also means that apply_sign_mechanism_finalize (in mechanisms.c) does no longer parse the public key, but just passes the RSA* to do_pkcs_pss -- and RSA_free it afterwards.
Another modification is in openssl_utils.c do_pkcs_pss: here, the byte array em is appropriately sized (to the key size), the check if (*out_len < (CK_ULONG)RSA_size(key)) was removed (I don't understand its presence), and em is copied after the OpenSSL operation to out, which has its length adjusted.
I used the resulting ykcs11 library to sign data using PSS (and verify the signature using openssl command line utility).
I'm not a C programmer, please review carefully.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,113,2017-03-26T17:28:25Z,2017-03-30T07:40:40Z,2017-03-30T11:19:12Z,MERGED,True,44,32,6,https://github.com/hannesm,fix PSS signing support,2,[],https://github.com/Yubico/yubico-piv-tool/pull/113,https://github.com/a-dma,2,https://github.com/Yubico/yubico-piv-tool/pull/113#issuecomment-290034977,"fixes #25 #111
The code on master was slightly wrong:

it stored only the raw modulus in op_info.op.sign.key (see 
  
    
      yubico-piv-tool/ykcs11/ykcs11.c
    
    
        Lines 1755 to 1769
      in
      8e91c8e
    
  
  
    

        
          
           // Also store the raw public key if the mechanism is PSS 
        

        
          
           if (is_PSS_mechanism(pMechanism->mechanism)) { 
        

        
          
             op_info.op.sign.key = malloc(key_len); 
        

        
          
             if (op_info.op.sign.key == NULL) 
        

        
          
               return CKR_HOST_MEMORY; 
        

        
          
            
        

        
          
             template[2].pValue = op_info.op.sign.key; 
        

        
          
             template[2].ulValueLen = key_len; 
        

        
          
            
        

        
          
             if (get_attribute(&session, hKey, template + 2) != CKR_OK) { 
        

        
          
               DBG(""Unable to get public key""); 
        

        
          
               return CKR_KEY_HANDLE_INVALID; 
        

        
          
             } 
        

        
          
            
        

        
          
           } 
        
    
  

) -- where the call to malloc used key_len, which is the bit length of the RSA key
this (overly long) buffer was passed to OpenSSL d2i_RSAPublicKey (via 
  
    
      yubico-piv-tool/ykcs11/mechanisms.c
    
    
         Line 286
      in
      8e91c8e
    
  
  
    

        
          
           rv = do_encode_rsa_public_key(op_info->op.sign.key, op_info->op.sign.key_len, &rsa); 
        
    
  

 and 
  
    
      yubico-piv-tool/ykcs11/openssl_utils.c
    
    
         Line 470
      in
      8e91c8e
    
  
  
    

        
          
           CK_RV do_encode_rsa_public_key(CK_BYTE_PTR data, CK_ULONG len, RSA **key) { 
        
    
  

), which failed since d2i_ expects a full key (algorithmIdentifier, modulus, exponent) DER encoded ASN.1 buffer.
The malloc()ed buffer was never free()d.

Now, instead of using the indirection of d2i_ and a byte array, a pointer to an RSA struct is used in sign_info_t.  c_SignInit allocates the RSA* if PSS is used, and fills its modulus and public exponent.  This also means that apply_sign_mechanism_finalize (in mechanisms.c) does no longer parse the public key, but just passes the RSA* to do_pkcs_pss -- and RSA_free it afterwards.
Another modification is in openssl_utils.c do_pkcs_pss: here, the byte array em is appropriately sized (to the key size), the check if (*out_len < (CK_ULONG)RSA_size(key)) was removed (I don't understand its presence), and em is copied after the OpenSSL operation to out, which has its length adjusted.
I used the resulting ykcs11 library to sign data using PSS (and verify the signature using openssl command line utility).
I'm not a C programmer, please review carefully.","Hey,
thanks for the PR.
I'm mostly fine with the changes, just one issue. We were trying to keep the OpenSSL part as hidden away as possible, however this code adds OpenSSL types and calls directly. Would you mind abstracting these away a bit?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,113,2017-03-26T17:28:25Z,2017-03-30T07:40:40Z,2017-03-30T11:19:12Z,MERGED,True,44,32,6,https://github.com/hannesm,fix PSS signing support,2,[],https://github.com/Yubico/yubico-piv-tool/pull/113,https://github.com/hannesm,3,https://github.com/Yubico/yubico-piv-tool/pull/113#issuecomment-290081386,"fixes #25 #111
The code on master was slightly wrong:

it stored only the raw modulus in op_info.op.sign.key (see 
  
    
      yubico-piv-tool/ykcs11/ykcs11.c
    
    
        Lines 1755 to 1769
      in
      8e91c8e
    
  
  
    

        
          
           // Also store the raw public key if the mechanism is PSS 
        

        
          
           if (is_PSS_mechanism(pMechanism->mechanism)) { 
        

        
          
             op_info.op.sign.key = malloc(key_len); 
        

        
          
             if (op_info.op.sign.key == NULL) 
        

        
          
               return CKR_HOST_MEMORY; 
        

        
          
            
        

        
          
             template[2].pValue = op_info.op.sign.key; 
        

        
          
             template[2].ulValueLen = key_len; 
        

        
          
            
        

        
          
             if (get_attribute(&session, hKey, template + 2) != CKR_OK) { 
        

        
          
               DBG(""Unable to get public key""); 
        

        
          
               return CKR_KEY_HANDLE_INVALID; 
        

        
          
             } 
        

        
          
            
        

        
          
           } 
        
    
  

) -- where the call to malloc used key_len, which is the bit length of the RSA key
this (overly long) buffer was passed to OpenSSL d2i_RSAPublicKey (via 
  
    
      yubico-piv-tool/ykcs11/mechanisms.c
    
    
         Line 286
      in
      8e91c8e
    
  
  
    

        
          
           rv = do_encode_rsa_public_key(op_info->op.sign.key, op_info->op.sign.key_len, &rsa); 
        
    
  

 and 
  
    
      yubico-piv-tool/ykcs11/openssl_utils.c
    
    
         Line 470
      in
      8e91c8e
    
  
  
    

        
          
           CK_RV do_encode_rsa_public_key(CK_BYTE_PTR data, CK_ULONG len, RSA **key) { 
        
    
  

), which failed since d2i_ expects a full key (algorithmIdentifier, modulus, exponent) DER encoded ASN.1 buffer.
The malloc()ed buffer was never free()d.

Now, instead of using the indirection of d2i_ and a byte array, a pointer to an RSA struct is used in sign_info_t.  c_SignInit allocates the RSA* if PSS is used, and fills its modulus and public exponent.  This also means that apply_sign_mechanism_finalize (in mechanisms.c) does no longer parse the public key, but just passes the RSA* to do_pkcs_pss -- and RSA_free it afterwards.
Another modification is in openssl_utils.c do_pkcs_pss: here, the byte array em is appropriately sized (to the key size), the check if (*out_len < (CK_ULONG)RSA_size(key)) was removed (I don't understand its presence), and em is copied after the OpenSSL operation to out, which has its length adjusted.
I used the resulting ykcs11 library to sign data using PSS (and verify the signature using openssl command line utility).
I'm not a C programmer, please review carefully.","On 29/03/2017 10:28, Alessio Di Mauro wrote:
 thanks for the PR.
thanks for responding.
 I'm mostly fine with the changes, just one issue. We were trying to keep the OpenSSL part as hidden away as possible,
is there any documentation/design guide what this entails?  I don't
understand what 'as hidden as possible' is supposed to mean:  ykcs11.h
already includes openssl_types.h.  Did anyone try to use e.g. GnuTLS or
mbedTLS as a crypto provider (I would be really interested in that work)?

Which files are ""allowed"" by this policy to call out to
OpenSSL/openssl_utils.c (I suspect ykcs11 is not, but mechanisms is?)?
 however this code adds OpenSSL types and calls directly. Would you
mind abstracting these away a bit?

Where and how exactly?  I can think of multiple solutions here, please
tell which one you prefer (or propose one you're happy with):

- Fix how the previous code did, and parse an DER-encoded public key.
Drawback would be that ykcs11.c would need to build this DER-encoded
public key object (which likely includes calling OpenSSL helpers to get
its structure right, such as the RSA AlgorithmIdentifier).
- Instead of having a RSA *key in ykcs11.h, we could use two fields, the
modulus and the public exponent (each a CK_BYTE_PTR).  This would enable
us to move the call to RSA_new() etc. into mechanisms.c (or via a helper
in openssl_utils.c)?
- Use a custom key format (struct with two CK_BYTE_PTR) in ykcs11.h,
then as above.

The drawback of these solutions is that it clearly uses more dynamically
allocated memory than the current PR here -- we'll need to malloc() for
the data stored in sign_info_t, and let OpenSSL RSA_new (or d2) allocate
another time for the same information.  I don't think this is a major
drawback, but just wanted to mention it.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,113,2017-03-26T17:28:25Z,2017-03-30T07:40:40Z,2017-03-30T11:19:12Z,MERGED,True,44,32,6,https://github.com/hannesm,fix PSS signing support,2,[],https://github.com/Yubico/yubico-piv-tool/pull/113,https://github.com/a-dma,4,https://github.com/Yubico/yubico-piv-tool/pull/113#issuecomment-290084352,"fixes #25 #111
The code on master was slightly wrong:

it stored only the raw modulus in op_info.op.sign.key (see 
  
    
      yubico-piv-tool/ykcs11/ykcs11.c
    
    
        Lines 1755 to 1769
      in
      8e91c8e
    
  
  
    

        
          
           // Also store the raw public key if the mechanism is PSS 
        

        
          
           if (is_PSS_mechanism(pMechanism->mechanism)) { 
        

        
          
             op_info.op.sign.key = malloc(key_len); 
        

        
          
             if (op_info.op.sign.key == NULL) 
        

        
          
               return CKR_HOST_MEMORY; 
        

        
          
            
        

        
          
             template[2].pValue = op_info.op.sign.key; 
        

        
          
             template[2].ulValueLen = key_len; 
        

        
          
            
        

        
          
             if (get_attribute(&session, hKey, template + 2) != CKR_OK) { 
        

        
          
               DBG(""Unable to get public key""); 
        

        
          
               return CKR_KEY_HANDLE_INVALID; 
        

        
          
             } 
        

        
          
            
        

        
          
           } 
        
    
  

) -- where the call to malloc used key_len, which is the bit length of the RSA key
this (overly long) buffer was passed to OpenSSL d2i_RSAPublicKey (via 
  
    
      yubico-piv-tool/ykcs11/mechanisms.c
    
    
         Line 286
      in
      8e91c8e
    
  
  
    

        
          
           rv = do_encode_rsa_public_key(op_info->op.sign.key, op_info->op.sign.key_len, &rsa); 
        
    
  

 and 
  
    
      yubico-piv-tool/ykcs11/openssl_utils.c
    
    
         Line 470
      in
      8e91c8e
    
  
  
    

        
          
           CK_RV do_encode_rsa_public_key(CK_BYTE_PTR data, CK_ULONG len, RSA **key) { 
        
    
  

), which failed since d2i_ expects a full key (algorithmIdentifier, modulus, exponent) DER encoded ASN.1 buffer.
The malloc()ed buffer was never free()d.

Now, instead of using the indirection of d2i_ and a byte array, a pointer to an RSA struct is used in sign_info_t.  c_SignInit allocates the RSA* if PSS is used, and fills its modulus and public exponent.  This also means that apply_sign_mechanism_finalize (in mechanisms.c) does no longer parse the public key, but just passes the RSA* to do_pkcs_pss -- and RSA_free it afterwards.
Another modification is in openssl_utils.c do_pkcs_pss: here, the byte array em is appropriately sized (to the key size), the check if (*out_len < (CK_ULONG)RSA_size(key)) was removed (I don't understand its presence), and em is copied after the OpenSSL operation to out, which has its length adjusted.
I used the resulting ykcs11 library to sign data using PSS (and verify the signature using openssl command line utility).
I'm not a C programmer, please review carefully.","The idea was to keep our option open if we ever wanted to move away from OpenSSL (which may never happen, but still).
The ""glue"" code is in openssl_utils.c. Code in there is allowed to use OpenSSL functions directly, the rest should ideally be calling functions in there. That's why there are a few of aliased types. But I think we haven't been 100% diligent with this rule ourselves...
I think that at this stage, aliasing a key type and calling a helper function would probably suffice.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,113,2017-03-26T17:28:25Z,2017-03-30T07:40:40Z,2017-03-30T11:19:12Z,MERGED,True,44,32,6,https://github.com/hannesm,fix PSS signing support,2,[],https://github.com/Yubico/yubico-piv-tool/pull/113,https://github.com/hannesm,5,https://github.com/Yubico/yubico-piv-tool/pull/113#issuecomment-290085375,"fixes #25 #111
The code on master was slightly wrong:

it stored only the raw modulus in op_info.op.sign.key (see 
  
    
      yubico-piv-tool/ykcs11/ykcs11.c
    
    
        Lines 1755 to 1769
      in
      8e91c8e
    
  
  
    

        
          
           // Also store the raw public key if the mechanism is PSS 
        

        
          
           if (is_PSS_mechanism(pMechanism->mechanism)) { 
        

        
          
             op_info.op.sign.key = malloc(key_len); 
        

        
          
             if (op_info.op.sign.key == NULL) 
        

        
          
               return CKR_HOST_MEMORY; 
        

        
          
            
        

        
          
             template[2].pValue = op_info.op.sign.key; 
        

        
          
             template[2].ulValueLen = key_len; 
        

        
          
            
        

        
          
             if (get_attribute(&session, hKey, template + 2) != CKR_OK) { 
        

        
          
               DBG(""Unable to get public key""); 
        

        
          
               return CKR_KEY_HANDLE_INVALID; 
        

        
          
             } 
        

        
          
            
        

        
          
           } 
        
    
  

) -- where the call to malloc used key_len, which is the bit length of the RSA key
this (overly long) buffer was passed to OpenSSL d2i_RSAPublicKey (via 
  
    
      yubico-piv-tool/ykcs11/mechanisms.c
    
    
         Line 286
      in
      8e91c8e
    
  
  
    

        
          
           rv = do_encode_rsa_public_key(op_info->op.sign.key, op_info->op.sign.key_len, &rsa); 
        
    
  

 and 
  
    
      yubico-piv-tool/ykcs11/openssl_utils.c
    
    
         Line 470
      in
      8e91c8e
    
  
  
    

        
          
           CK_RV do_encode_rsa_public_key(CK_BYTE_PTR data, CK_ULONG len, RSA **key) { 
        
    
  

), which failed since d2i_ expects a full key (algorithmIdentifier, modulus, exponent) DER encoded ASN.1 buffer.
The malloc()ed buffer was never free()d.

Now, instead of using the indirection of d2i_ and a byte array, a pointer to an RSA struct is used in sign_info_t.  c_SignInit allocates the RSA* if PSS is used, and fills its modulus and public exponent.  This also means that apply_sign_mechanism_finalize (in mechanisms.c) does no longer parse the public key, but just passes the RSA* to do_pkcs_pss -- and RSA_free it afterwards.
Another modification is in openssl_utils.c do_pkcs_pss: here, the byte array em is appropriately sized (to the key size), the check if (*out_len < (CK_ULONG)RSA_size(key)) was removed (I don't understand its presence), and em is copied after the OpenSSL operation to out, which has its length adjusted.
I used the resulting ykcs11 library to sign data using PSS (and verify the signature using openssl command line utility).
I'm not a C programmer, please review carefully.","On 29/03/2017 14:09, Alessio Di Mauro wrote:
 The ""glue"" code is in `openssl_utils.c`. Code in there is allowed to use OpenSSL functions directly, the rest should ideally be calling functions in there. That's why there are a few of aliased types. But I think we haven't been 100% diligent with this rule ourselves...
A type alias (where? in openssl_types.h) would be sufficient?  Or should
the RSA_new() be moved out of ykcs11.c as well?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,113,2017-03-26T17:28:25Z,2017-03-30T07:40:40Z,2017-03-30T11:19:12Z,MERGED,True,44,32,6,https://github.com/hannesm,fix PSS signing support,2,[],https://github.com/Yubico/yubico-piv-tool/pull/113,https://github.com/a-dma,6,https://github.com/Yubico/yubico-piv-tool/pull/113#issuecomment-290088393,"fixes #25 #111
The code on master was slightly wrong:

it stored only the raw modulus in op_info.op.sign.key (see 
  
    
      yubico-piv-tool/ykcs11/ykcs11.c
    
    
        Lines 1755 to 1769
      in
      8e91c8e
    
  
  
    

        
          
           // Also store the raw public key if the mechanism is PSS 
        

        
          
           if (is_PSS_mechanism(pMechanism->mechanism)) { 
        

        
          
             op_info.op.sign.key = malloc(key_len); 
        

        
          
             if (op_info.op.sign.key == NULL) 
        

        
          
               return CKR_HOST_MEMORY; 
        

        
          
            
        

        
          
             template[2].pValue = op_info.op.sign.key; 
        

        
          
             template[2].ulValueLen = key_len; 
        

        
          
            
        

        
          
             if (get_attribute(&session, hKey, template + 2) != CKR_OK) { 
        

        
          
               DBG(""Unable to get public key""); 
        

        
          
               return CKR_KEY_HANDLE_INVALID; 
        

        
          
             } 
        

        
          
            
        

        
          
           } 
        
    
  

) -- where the call to malloc used key_len, which is the bit length of the RSA key
this (overly long) buffer was passed to OpenSSL d2i_RSAPublicKey (via 
  
    
      yubico-piv-tool/ykcs11/mechanisms.c
    
    
         Line 286
      in
      8e91c8e
    
  
  
    

        
          
           rv = do_encode_rsa_public_key(op_info->op.sign.key, op_info->op.sign.key_len, &rsa); 
        
    
  

 and 
  
    
      yubico-piv-tool/ykcs11/openssl_utils.c
    
    
         Line 470
      in
      8e91c8e
    
  
  
    

        
          
           CK_RV do_encode_rsa_public_key(CK_BYTE_PTR data, CK_ULONG len, RSA **key) { 
        
    
  

), which failed since d2i_ expects a full key (algorithmIdentifier, modulus, exponent) DER encoded ASN.1 buffer.
The malloc()ed buffer was never free()d.

Now, instead of using the indirection of d2i_ and a byte array, a pointer to an RSA struct is used in sign_info_t.  c_SignInit allocates the RSA* if PSS is used, and fills its modulus and public exponent.  This also means that apply_sign_mechanism_finalize (in mechanisms.c) does no longer parse the public key, but just passes the RSA* to do_pkcs_pss -- and RSA_free it afterwards.
Another modification is in openssl_utils.c do_pkcs_pss: here, the byte array em is appropriately sized (to the key size), the check if (*out_len < (CK_ULONG)RSA_size(key)) was removed (I don't understand its presence), and em is copied after the OpenSSL operation to out, which has its length adjusted.
I used the resulting ykcs11 library to sign data using PSS (and verify the signature using openssl command line utility).
I'm not a C programmer, please review carefully.","Yes, basically the same thing that we do for message digests.
If we want an OpenSSL native type in a ""public"" struct, alias the type and use it from a helper function that calls the actual OpenSSL function (so no direct calls to RSA_new() outside of openssl_utils.c).
This should give us enough freedom to change things around in the future if we want to go that way.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,113,2017-03-26T17:28:25Z,2017-03-30T07:40:40Z,2017-03-30T11:19:12Z,MERGED,True,44,32,6,https://github.com/hannesm,fix PSS signing support,2,[],https://github.com/Yubico/yubico-piv-tool/pull/113,https://github.com/hannesm,7,https://github.com/Yubico/yubico-piv-tool/pull/113#issuecomment-290240526,"fixes #25 #111
The code on master was slightly wrong:

it stored only the raw modulus in op_info.op.sign.key (see 
  
    
      yubico-piv-tool/ykcs11/ykcs11.c
    
    
        Lines 1755 to 1769
      in
      8e91c8e
    
  
  
    

        
          
           // Also store the raw public key if the mechanism is PSS 
        

        
          
           if (is_PSS_mechanism(pMechanism->mechanism)) { 
        

        
          
             op_info.op.sign.key = malloc(key_len); 
        

        
          
             if (op_info.op.sign.key == NULL) 
        

        
          
               return CKR_HOST_MEMORY; 
        

        
          
            
        

        
          
             template[2].pValue = op_info.op.sign.key; 
        

        
          
             template[2].ulValueLen = key_len; 
        

        
          
            
        

        
          
             if (get_attribute(&session, hKey, template + 2) != CKR_OK) { 
        

        
          
               DBG(""Unable to get public key""); 
        

        
          
               return CKR_KEY_HANDLE_INVALID; 
        

        
          
             } 
        

        
          
            
        

        
          
           } 
        
    
  

) -- where the call to malloc used key_len, which is the bit length of the RSA key
this (overly long) buffer was passed to OpenSSL d2i_RSAPublicKey (via 
  
    
      yubico-piv-tool/ykcs11/mechanisms.c
    
    
         Line 286
      in
      8e91c8e
    
  
  
    

        
          
           rv = do_encode_rsa_public_key(op_info->op.sign.key, op_info->op.sign.key_len, &rsa); 
        
    
  

 and 
  
    
      yubico-piv-tool/ykcs11/openssl_utils.c
    
    
         Line 470
      in
      8e91c8e
    
  
  
    

        
          
           CK_RV do_encode_rsa_public_key(CK_BYTE_PTR data, CK_ULONG len, RSA **key) { 
        
    
  

), which failed since d2i_ expects a full key (algorithmIdentifier, modulus, exponent) DER encoded ASN.1 buffer.
The malloc()ed buffer was never free()d.

Now, instead of using the indirection of d2i_ and a byte array, a pointer to an RSA struct is used in sign_info_t.  c_SignInit allocates the RSA* if PSS is used, and fills its modulus and public exponent.  This also means that apply_sign_mechanism_finalize (in mechanisms.c) does no longer parse the public key, but just passes the RSA* to do_pkcs_pss -- and RSA_free it afterwards.
Another modification is in openssl_utils.c do_pkcs_pss: here, the byte array em is appropriately sized (to the key size), the check if (*out_len < (CK_ULONG)RSA_size(key)) was removed (I don't understand its presence), and em is copied after the OpenSSL operation to out, which has its length adjusted.
I used the resulting ykcs11 library to sign data using PSS (and verify the signature using openssl command line utility).
I'm not a C programmer, please review carefully.",@a-dma I pushed the commit 03849d9 which hopefully satisfies your requests.  please let me know if there is any further massaging needed.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,113,2017-03-26T17:28:25Z,2017-03-30T07:40:40Z,2017-03-30T11:19:12Z,MERGED,True,44,32,6,https://github.com/hannesm,fix PSS signing support,2,[],https://github.com/Yubico/yubico-piv-tool/pull/113,https://github.com/a-dma,8,https://github.com/Yubico/yubico-piv-tool/pull/113#issuecomment-290328618,"fixes #25 #111
The code on master was slightly wrong:

it stored only the raw modulus in op_info.op.sign.key (see 
  
    
      yubico-piv-tool/ykcs11/ykcs11.c
    
    
        Lines 1755 to 1769
      in
      8e91c8e
    
  
  
    

        
          
           // Also store the raw public key if the mechanism is PSS 
        

        
          
           if (is_PSS_mechanism(pMechanism->mechanism)) { 
        

        
          
             op_info.op.sign.key = malloc(key_len); 
        

        
          
             if (op_info.op.sign.key == NULL) 
        

        
          
               return CKR_HOST_MEMORY; 
        

        
          
            
        

        
          
             template[2].pValue = op_info.op.sign.key; 
        

        
          
             template[2].ulValueLen = key_len; 
        

        
          
            
        

        
          
             if (get_attribute(&session, hKey, template + 2) != CKR_OK) { 
        

        
          
               DBG(""Unable to get public key""); 
        

        
          
               return CKR_KEY_HANDLE_INVALID; 
        

        
          
             } 
        

        
          
            
        

        
          
           } 
        
    
  

) -- where the call to malloc used key_len, which is the bit length of the RSA key
this (overly long) buffer was passed to OpenSSL d2i_RSAPublicKey (via 
  
    
      yubico-piv-tool/ykcs11/mechanisms.c
    
    
         Line 286
      in
      8e91c8e
    
  
  
    

        
          
           rv = do_encode_rsa_public_key(op_info->op.sign.key, op_info->op.sign.key_len, &rsa); 
        
    
  

 and 
  
    
      yubico-piv-tool/ykcs11/openssl_utils.c
    
    
         Line 470
      in
      8e91c8e
    
  
  
    

        
          
           CK_RV do_encode_rsa_public_key(CK_BYTE_PTR data, CK_ULONG len, RSA **key) { 
        
    
  

), which failed since d2i_ expects a full key (algorithmIdentifier, modulus, exponent) DER encoded ASN.1 buffer.
The malloc()ed buffer was never free()d.

Now, instead of using the indirection of d2i_ and a byte array, a pointer to an RSA struct is used in sign_info_t.  c_SignInit allocates the RSA* if PSS is used, and fills its modulus and public exponent.  This also means that apply_sign_mechanism_finalize (in mechanisms.c) does no longer parse the public key, but just passes the RSA* to do_pkcs_pss -- and RSA_free it afterwards.
Another modification is in openssl_utils.c do_pkcs_pss: here, the byte array em is appropriately sized (to the key size), the check if (*out_len < (CK_ULONG)RSA_size(key)) was removed (I don't understand its presence), and em is copied after the OpenSSL operation to out, which has its length adjusted.
I used the resulting ykcs11 library to sign data using PSS (and verify the signature using openssl command line utility).
I'm not a C programmer, please review carefully.","Merged!
Thanks a lot for the patience.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,113,2017-03-26T17:28:25Z,2017-03-30T07:40:40Z,2017-03-30T11:19:12Z,MERGED,True,44,32,6,https://github.com/hannesm,fix PSS signing support,2,[],https://github.com/Yubico/yubico-piv-tool/pull/113,https://github.com/hannesm,9,https://github.com/Yubico/yubico-piv-tool/pull/113#issuecomment-290381329,"fixes #25 #111
The code on master was slightly wrong:

it stored only the raw modulus in op_info.op.sign.key (see 
  
    
      yubico-piv-tool/ykcs11/ykcs11.c
    
    
        Lines 1755 to 1769
      in
      8e91c8e
    
  
  
    

        
          
           // Also store the raw public key if the mechanism is PSS 
        

        
          
           if (is_PSS_mechanism(pMechanism->mechanism)) { 
        

        
          
             op_info.op.sign.key = malloc(key_len); 
        

        
          
             if (op_info.op.sign.key == NULL) 
        

        
          
               return CKR_HOST_MEMORY; 
        

        
          
            
        

        
          
             template[2].pValue = op_info.op.sign.key; 
        

        
          
             template[2].ulValueLen = key_len; 
        

        
          
            
        

        
          
             if (get_attribute(&session, hKey, template + 2) != CKR_OK) { 
        

        
          
               DBG(""Unable to get public key""); 
        

        
          
               return CKR_KEY_HANDLE_INVALID; 
        

        
          
             } 
        

        
          
            
        

        
          
           } 
        
    
  

) -- where the call to malloc used key_len, which is the bit length of the RSA key
this (overly long) buffer was passed to OpenSSL d2i_RSAPublicKey (via 
  
    
      yubico-piv-tool/ykcs11/mechanisms.c
    
    
         Line 286
      in
      8e91c8e
    
  
  
    

        
          
           rv = do_encode_rsa_public_key(op_info->op.sign.key, op_info->op.sign.key_len, &rsa); 
        
    
  

 and 
  
    
      yubico-piv-tool/ykcs11/openssl_utils.c
    
    
         Line 470
      in
      8e91c8e
    
  
  
    

        
          
           CK_RV do_encode_rsa_public_key(CK_BYTE_PTR data, CK_ULONG len, RSA **key) { 
        
    
  

), which failed since d2i_ expects a full key (algorithmIdentifier, modulus, exponent) DER encoded ASN.1 buffer.
The malloc()ed buffer was never free()d.

Now, instead of using the indirection of d2i_ and a byte array, a pointer to an RSA struct is used in sign_info_t.  c_SignInit allocates the RSA* if PSS is used, and fills its modulus and public exponent.  This also means that apply_sign_mechanism_finalize (in mechanisms.c) does no longer parse the public key, but just passes the RSA* to do_pkcs_pss -- and RSA_free it afterwards.
Another modification is in openssl_utils.c do_pkcs_pss: here, the byte array em is appropriately sized (to the key size), the check if (*out_len < (CK_ULONG)RSA_size(key)) was removed (I don't understand its presence), and em is copied after the OpenSSL operation to out, which has its length adjusted.
I used the resulting ykcs11 library to sign data using PSS (and verify the signature using openssl command line utility).
I'm not a C programmer, please review carefully.","thank you for merging.  is there a plan to release a new version any time soon?  FWIW, a local build produces libykcs11.so.1.3.5, although I'd expect it to be libykcs11.so.1.4.3 - might be worth to look into that before drafting a release...",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,115,2017-05-25T20:18:06Z,2017-05-30T11:04:39Z,2017-05-30T17:49:31Z,CLOSED,False,118,45,4,https://github.com/Gh0u1L5,"bump openssl to 1.0.2l, fix issues #88, #102 and #116",13,[],https://github.com/Yubico/yubico-piv-tool/pull/115,https://github.com/Gh0u1L5,1,https://github.com/Yubico/yubico-piv-tool/pull/115,"OpenSSL just released 1.0.2l, and 1.0.2k cannot be downloaded any more.","OpenSSL just released 1.0.2l, and 1.0.2k cannot be downloaded any more.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,115,2017-05-25T20:18:06Z,2017-05-30T11:04:39Z,2017-05-30T17:49:31Z,CLOSED,False,118,45,4,https://github.com/Gh0u1L5,"bump openssl to 1.0.2l, fix issues #88, #102 and #116",13,[],https://github.com/Yubico/yubico-piv-tool/pull/115,https://github.com/Gh0u1L5,2,https://github.com/Yubico/yubico-piv-tool/pull/115#issuecomment-304189618,"OpenSSL just released 1.0.2l, and 1.0.2k cannot be downloaded any more.","I also spend some time fixing the issues #88 and #102 , please review it.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,115,2017-05-25T20:18:06Z,2017-05-30T11:04:39Z,2017-05-30T17:49:31Z,CLOSED,False,118,45,4,https://github.com/Gh0u1L5,"bump openssl to 1.0.2l, fix issues #88, #102 and #116",13,[],https://github.com/Yubico/yubico-piv-tool/pull/115,https://github.com/klali,3,https://github.com/Yubico/yubico-piv-tool/pull/115#issuecomment-304592285,"OpenSSL just released 1.0.2l, and 1.0.2k cannot be downloaded any more.","Please stop adding more things to this PR, adding more things to this makes reviewing and merging it harder. Feel free to open more PRs however.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,115,2017-05-25T20:18:06Z,2017-05-30T11:04:39Z,2017-05-30T17:49:31Z,CLOSED,False,118,45,4,https://github.com/Gh0u1L5,"bump openssl to 1.0.2l, fix issues #88, #102 and #116",13,[],https://github.com/Yubico/yubico-piv-tool/pull/115,https://github.com/Gh0u1L5,4,https://github.com/Yubico/yubico-piv-tool/pull/115#issuecomment-304718286,"OpenSSL just released 1.0.2l, and 1.0.2k cannot be downloaded any more.","No problem, I've fixed those minor nits, plz have a review.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,115,2017-05-25T20:18:06Z,2017-05-30T11:04:39Z,2017-05-30T17:49:31Z,CLOSED,False,118,45,4,https://github.com/Gh0u1L5,"bump openssl to 1.0.2l, fix issues #88, #102 and #116",13,[],https://github.com/Yubico/yubico-piv-tool/pull/115,https://github.com/klali,5,https://github.com/Yubico/yubico-piv-tool/pull/115#issuecomment-304845459,"OpenSSL just released 1.0.2l, and 1.0.2k cannot be downloaded any more.",I've just merged this in 37a2f77 I took the liberty of squashing and re-ordering some commits. Thank you!,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,115,2017-05-25T20:18:06Z,2017-05-30T11:04:39Z,2017-05-30T17:49:31Z,CLOSED,False,118,45,4,https://github.com/Gh0u1L5,"bump openssl to 1.0.2l, fix issues #88, #102 and #116",13,[],https://github.com/Yubico/yubico-piv-tool/pull/115,https://github.com/Gh0u1L5,6,https://github.com/Yubico/yubico-piv-tool/pull/115#issuecomment-304956081,"OpenSSL just released 1.0.2l, and 1.0.2k cannot be downloaded any more.","@klali Great, thank you.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,117,2017-06-02T20:46:57Z,2020-02-07T09:14:31Z,2020-02-07T09:14:32Z,CLOSED,False,9,3,1,https://github.com/akgood,scrub saved PIN from memory before calling free(),3,[],https://github.com/Yubico/yubico-piv-tool/pull/117,https://github.com/akgood,1,https://github.com/Yubico/yubico-piv-tool/pull/117,"37a2f77 added some functionality to cache and replay PINs when the PIV card session gets reset (due to power loss, etc.). I'm excited for this; speaking from hard-won experience, this will probably save a lot of people a lot of trouble!
However, best-practice would be to ensure that sensitive data should be held in memory only as long as necessary and explicitly destroyed after that. So, here's a small change that'll ensure we always zero out the internal PIN buffer before free-ing it.","37a2f77 added some functionality to cache and replay PINs when the PIV card session gets reset (due to power loss, etc.). I'm excited for this; speaking from hard-won experience, this will probably save a lot of people a lot of trouble!
However, best-practice would be to ensure that sensitive data should be held in memory only as long as necessary and explicitly destroyed after that. So, here's a small change that'll ensure we always zero out the internal PIN buffer before free-ing it.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,117,2017-06-02T20:46:57Z,2020-02-07T09:14:31Z,2020-02-07T09:14:32Z,CLOSED,False,9,3,1,https://github.com/akgood,scrub saved PIN from memory before calling free(),3,[],https://github.com/Yubico/yubico-piv-tool/pull/117,https://github.com/qpernil,2,https://github.com/Yubico/yubico-piv-tool/pull/117#issuecomment-583301207,"37a2f77 added some functionality to cache and replay PINs when the PIV card session gets reset (due to power loss, etc.). I'm excited for this; speaking from hard-won experience, this will probably save a lot of people a lot of trouble!
However, best-practice would be to ensure that sensitive data should be held in memory only as long as necessary and explicitly destroyed after that. So, here's a small change that'll ensure we always zero out the internal PIN buffer before free-ing it.","This functionality is already in the code, including scrubbing the mgm_key, which is also cached from 2.0.0",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,126,2017-10-13T16:12:01Z,2017-10-16T06:46:24Z,2017-10-16T06:46:24Z,CLOSED,False,66,1,1,https://github.com/bentatham,Export all PKCS11 functions,1,[],https://github.com/Yubico/yubico-piv-tool/pull/126,https://github.com/bentatham,1,https://github.com/Yubico/yubico-piv-tool/pull/126,"When trying to call ykcs11 via a pkcs11 interface, the symbols could not be found (other than C_Initialize and C_GetFunctionList).  We traced it back to this file, where only those 2 functions were being adding to the exported symbols in libykcs11.so.
There may be a better way to do this, but this worked for us to fix this issue.
While we don't really need them all, I added all the pkcs11.h functions using the following to generate the list to put into ykcs11.map.
grep CK_DECLARE_FUNCTION ykcs11/pkcs11.h  | sed s/^.*\(C_/C_/ | grep ^C_ | sed ""s/,.*$/;/"" | sed ""s/^/    /g""","When trying to call ykcs11 via a pkcs11 interface, the symbols could not be found (other than C_Initialize and C_GetFunctionList).  We traced it back to this file, where only those 2 functions were being adding to the exported symbols in libykcs11.so.
There may be a better way to do this, but this worked for us to fix this issue.
While we don't really need them all, I added all the pkcs11.h functions using the following to generate the list to put into ykcs11.map.
grep CK_DECLARE_FUNCTION ykcs11/pkcs11.h  | sed s/^.*\(C_/C_/ | grep ^C_ | sed ""s/,.*$/;/"" | sed ""s/^/    /g""",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,126,2017-10-13T16:12:01Z,2017-10-16T06:46:24Z,2017-10-16T06:46:24Z,CLOSED,False,66,1,1,https://github.com/bentatham,Export all PKCS11 functions,1,[],https://github.com/Yubico/yubico-piv-tool/pull/126,https://github.com/a-dma,2,https://github.com/Yubico/yubico-piv-tool/pull/126#issuecomment-336794830,"When trying to call ykcs11 via a pkcs11 interface, the symbols could not be found (other than C_Initialize and C_GetFunctionList).  We traced it back to this file, where only those 2 functions were being adding to the exported symbols in libykcs11.so.
There may be a better way to do this, but this worked for us to fix this issue.
While we don't really need them all, I added all the pkcs11.h functions using the following to generate the list to put into ykcs11.map.
grep CK_DECLARE_FUNCTION ykcs11/pkcs11.h  | sed s/^.*\(C_/C_/ | grep ^C_ | sed ""s/,.*$/;/"" | sed ""s/^/    /g""","Hi,
this is by design. The way you're supposed to be using PKCS#11 modules is by calling C_GetFunctionList and getting function pointers to all the different functions. The names and signatures of the functions are part of the standard.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,128,2017-10-17T07:03:21Z,2017-10-17T08:19:37Z,2017-10-17T08:19:37Z,MERGED,True,8,8,6,https://github.com/edent,http->https & fix broken links,1,[],https://github.com/Yubico/yubico-piv-tool/pull/128,https://github.com/edent,1,https://github.com/Yubico/yubico-piv-tool/pull/128,"Small tidy up.

Upgrade insecure links
Fix broken URls","Small tidy up.

Upgrade insecure links
Fix broken URls",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,128,2017-10-17T07:03:21Z,2017-10-17T08:19:37Z,2017-10-17T08:19:37Z,MERGED,True,8,8,6,https://github.com/edent,http->https & fix broken links,1,[],https://github.com/Yubico/yubico-piv-tool/pull/128,https://github.com/klali,2,https://github.com/Yubico/yubico-piv-tool/pull/128#issuecomment-337151885,"Small tidy up.

Upgrade insecure links
Fix broken URls",Thanks!,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,130,2017-11-14T10:27:40Z,2017-11-20T09:23:05Z,2017-11-20T09:23:25Z,MERGED,True,7953,785,40,https://github.com/mrmekon,Refactor yubico-piv-tool/libykpiv with a ykpiv_util_* high-level API ,57,[],https://github.com/Yubico/yubico-piv-tool/pull/130,https://github.com/mrmekon,1,https://github.com/Yubico/yubico-piv-tool/pull/130,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,131,2017-11-24T14:45:20Z,2017-11-27T15:39:42Z,2017-11-27T15:40:16Z,MERGED,True,420,80,19,https://github.com/mrmekon,OpenSSL 1.1 compatibility,15,[],https://github.com/Yubico/yubico-piv-tool/pull/131,https://github.com/mrmekon,1,https://github.com/Yubico/yubico-piv-tool/pull/131,Extends the work of Jakuje (PR #107).  Both OpenSSL 1.0 and 1.1 verified and passing hardware tests on Mac and Linux.  Both versions built in Travis-CI.,Extends the work of Jakuje (PR #107).  Both OpenSSL 1.0 and 1.1 verified and passing hardware tests on Mac and Linux.  Both versions built in Travis-CI.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,131,2017-11-24T14:45:20Z,2017-11-27T15:39:42Z,2017-11-27T15:40:16Z,MERGED,True,420,80,19,https://github.com/mrmekon,OpenSSL 1.1 compatibility,15,[],https://github.com/Yubico/yubico-piv-tool/pull/131,https://github.com/Jakuje,2,https://github.com/Yubico/yubico-piv-tool/pull/131#issuecomment-347160746,Extends the work of Jakuje (PR #107).  Both OpenSSL 1.0 and 1.1 verified and passing hardware tests on Mac and Linux.  Both versions built in Travis-CI.,@mrmekon Thank you for the update on top of refactored code and than you for creating travis target for 1.1. I hope the next release will be able to work with OpenSSL 1.1 finally.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,131,2017-11-24T14:45:20Z,2017-11-27T15:39:42Z,2017-11-27T15:40:16Z,MERGED,True,420,80,19,https://github.com/mrmekon,OpenSSL 1.1 compatibility,15,[],https://github.com/Yubico/yubico-piv-tool/pull/131,https://github.com/mrmekon,3,https://github.com/Yubico/yubico-piv-tool/pull/131#issuecomment-347220874,Extends the work of Jakuje (PR #107).  Both OpenSSL 1.0 and 1.1 verified and passing hardware tests on Mac and Linux.  Both versions built in Travis-CI.,Thanks for the help @Jakuje.  It will be in the next release :),True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,132,2017-11-29T09:10:40Z,2017-11-29T09:16:24Z,2017-11-29T09:16:27Z,MERGED,True,2,2,2,https://github.com/mrmekon,Bump Windows/Mac builds to latest OpenSSL 1.0.x,1,[],https://github.com/Yubico/yubico-piv-tool/pull/132,https://github.com/mrmekon,1,https://github.com/Yubico/yubico-piv-tool/pull/132,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,133,2017-11-29T09:48:29Z,2017-11-29T09:56:56Z,2017-11-29T09:56:59Z,MERGED,True,6,6,4,https://github.com/mrmekon,Use library dependencies for openssl compat layer,2,[],https://github.com/Yubico/yubico-piv-tool/pull/133,https://github.com/mrmekon,1,https://github.com/Yubico/yubico-piv-tool/pull/133,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,135,2017-12-29T23:34:38Z,2018-01-02T12:07:08Z,2018-01-02T12:07:08Z,MERGED,True,13,13,5,https://github.com/Aloz1,Added checks to allow building against LibreSSL,1,[],https://github.com/Yubico/yubico-piv-tool/pull/135,https://github.com/Aloz1,1,https://github.com/Yubico/yubico-piv-tool/pull/135,"Previously, compiling against LibreSSL worked seamlessly due to being API compatible with OpenSSL 1.0.1. This was broken when OpenSSL 1.1.0 support was added due to the OpenSSL version check conflicting with the LibreSSL versioning scheme.
This PR mitigates the problem by checking the LIBRESSL_VERSION_NUMBER macro where applicable.","Previously, compiling against LibreSSL worked seamlessly due to being API compatible with OpenSSL 1.0.1. This was broken when OpenSSL 1.1.0 support was added due to the OpenSSL version check conflicting with the LibreSSL versioning scheme.
This PR mitigates the problem by checking the LIBRESSL_VERSION_NUMBER macro where applicable.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,135,2017-12-29T23:34:38Z,2018-01-02T12:07:08Z,2018-01-02T12:07:08Z,MERGED,True,13,13,5,https://github.com/Aloz1,Added checks to allow building against LibreSSL,1,[],https://github.com/Yubico/yubico-piv-tool/pull/135,https://github.com/mrmekon,2,https://github.com/Yubico/yubico-piv-tool/pull/135#issuecomment-354753586,"Previously, compiling against LibreSSL worked seamlessly due to being API compatible with OpenSSL 1.0.1. This was broken when OpenSSL 1.1.0 support was added due to the OpenSSL version check conflicting with the LibreSSL versioning scheme.
This PR mitigates the problem by checking the LIBRESSL_VERSION_NUMBER macro where applicable.","+1, but do note that LibreSSL is not officially supported at the moment, so we do not guarantee compatibility.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,136,2017-12-30T20:46:32Z,2018-01-02T12:24:53Z,2018-01-05T19:04:50Z,MERGED,True,16,7,1,https://github.com/jmyreen,Fixed some bugs in the port to Openssl-1.1:,1,[],https://github.com/Yubico/yubico-piv-tool/pull/136,https://github.com/jmyreen,1,https://github.com/Yubico/yubico-piv-tool/pull/136,"wrap_public_key() passed the address of the local stack variable
internal_key to RSA_meth_set0_data(), which was used long after
wrap_public_key() had returned. Changed to static.


The callback functions yk_rsa_meth_sign and yk_ec_meth_sign 'siglen'
parameter has type (unisgned int *), which was cast to (size_t *)
before it was used to write a value in the caller's memory
space. This caused stack corruption on machines where size_t is
bigger than unsigned int.


The callback function's 'siglen' parameter is output-only, not
in-out. The input value was assumed to contain the maximum size of
the output buffer as input, and a bogus value was compared to the
amount of data received from the token in function
_general_authenticate(). Changed to pass in the values returned by
RSA_size(rsa) and ECDSA_size(ec), which Openssl specifies as minimum
buffer sizes.


The callback functions' return values were swapped; fixed to return
1 on success, 0 on failure.","wrap_public_key() passed the address of the local stack variable
internal_key to RSA_meth_set0_data(), which was used long after
wrap_public_key() had returned. Changed to static.


The callback functions yk_rsa_meth_sign and yk_ec_meth_sign 'siglen'
parameter has type (unisgned int *), which was cast to (size_t *)
before it was used to write a value in the caller's memory
space. This caused stack corruption on machines where size_t is
bigger than unsigned int.


The callback function's 'siglen' parameter is output-only, not
in-out. The input value was assumed to contain the maximum size of
the output buffer as input, and a bogus value was compared to the
amount of data received from the token in function
_general_authenticate(). Changed to pass in the values returned by
RSA_size(rsa) and ECDSA_size(ec), which Openssl specifies as minimum
buffer sizes.


The callback functions' return values were swapped; fixed to return
1 on success, 0 on failure.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,136,2017-12-30T20:46:32Z,2018-01-02T12:24:53Z,2018-01-05T19:04:50Z,MERGED,True,16,7,1,https://github.com/jmyreen,Fixed some bugs in the port to Openssl-1.1:,1,[],https://github.com/Yubico/yubico-piv-tool/pull/136,https://github.com/mrmekon,2,https://github.com/Yubico/yubico-piv-tool/pull/136#issuecomment-354756299,"wrap_public_key() passed the address of the local stack variable
internal_key to RSA_meth_set0_data(), which was used long after
wrap_public_key() had returned. Changed to static.


The callback functions yk_rsa_meth_sign and yk_ec_meth_sign 'siglen'
parameter has type (unisgned int *), which was cast to (size_t *)
before it was used to write a value in the caller's memory
space. This caused stack corruption on machines where size_t is
bigger than unsigned int.


The callback function's 'siglen' parameter is output-only, not
in-out. The input value was assumed to contain the maximum size of
the output buffer as input, and a bogus value was compared to the
amount of data received from the token in function
_general_authenticate(). Changed to pass in the values returned by
RSA_size(rsa) and ECDSA_size(ec), which Openssl specifies as minimum
buffer sizes.


The callback functions' return values were swapped; fixed to return
1 on success, 0 on failure.","+1, thanks!",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,137,2018-01-24T14:46:14Z,2018-01-25T10:23:02Z,2018-01-25T10:23:05Z,MERGED,True,39,2,2,https://github.com/mrmekon,Support specifying custom PCSC lib,1,[],https://github.com/Yubico/yubico-piv-tool/pull/137,https://github.com/mrmekon,1,https://github.com/Yubico/yubico-piv-tool/pull/137,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,138,2018-02-10T18:46:52Z,2018-02-27T15:00:10Z,2018-02-27T15:00:10Z,MERGED,True,6,5,3,https://github.com/Jakuje,Compiler warnings and compatibility with older check versions,3,[],https://github.com/Yubico/yubico-piv-tool/pull/138,https://github.com/Jakuje,1,https://github.com/Yubico/yubico-piv-tool/pull/138,"While trying to build the latest version of yubico-piv-tool for EPEL7, I encountered several issues, mostly, the RHEL/CentOS 7 has older version of check (check-0.9.9-5.el7.x86_64), which does not provide the ck_assert_ptr_eq, but it can be simply rewritten to ck_assert. Secondly, there showed up some warnings, mostly in context of not running the HW tests at build time.
With these patches, I am able to build the package on both current Fedora and RHEL7 successfully (I did not test the HW_TEST though -- I don't have spare Yubikey at this moment).","While trying to build the latest version of yubico-piv-tool for EPEL7, I encountered several issues, mostly, the RHEL/CentOS 7 has older version of check (check-0.9.9-5.el7.x86_64), which does not provide the ck_assert_ptr_eq, but it can be simply rewritten to ck_assert. Secondly, there showed up some warnings, mostly in context of not running the HW tests at build time.
With these patches, I am able to build the package on both current Fedora and RHEL7 successfully (I did not test the HW_TEST though -- I don't have spare Yubikey at this moment).",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,138,2018-02-10T18:46:52Z,2018-02-27T15:00:10Z,2018-02-27T15:00:10Z,MERGED,True,6,5,3,https://github.com/Jakuje,Compiler warnings and compatibility with older check versions,3,[],https://github.com/Yubico/yubico-piv-tool/pull/138,https://github.com/Jakuje,2,https://github.com/Yubico/yubico-piv-tool/pull/138#issuecomment-368900887,"While trying to build the latest version of yubico-piv-tool for EPEL7, I encountered several issues, mostly, the RHEL/CentOS 7 has older version of check (check-0.9.9-5.el7.x86_64), which does not provide the ck_assert_ptr_eq, but it can be simply rewritten to ck_assert. Secondly, there showed up some warnings, mostly in context of not running the HW tests at build time.
With these patches, I am able to build the package on both current Fedora and RHEL7 successfully (I did not test the HW_TEST though -- I don't have spare Yubikey at this moment).",Updated based on the comment. Seems to build fine.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,138,2018-02-10T18:46:52Z,2018-02-27T15:00:10Z,2018-02-27T15:00:10Z,MERGED,True,6,5,3,https://github.com/Jakuje,Compiler warnings and compatibility with older check versions,3,[],https://github.com/Yubico/yubico-piv-tool/pull/138,https://github.com/mrmekon,3,https://github.com/Yubico/yubico-piv-tool/pull/138#issuecomment-368902037,"While trying to build the latest version of yubico-piv-tool for EPEL7, I encountered several issues, mostly, the RHEL/CentOS 7 has older version of check (check-0.9.9-5.el7.x86_64), which does not provide the ck_assert_ptr_eq, but it can be simply rewritten to ck_assert. Secondly, there showed up some warnings, mostly in context of not running the HW tests at build time.
With these patches, I am able to build the package on both current Fedora and RHEL7 successfully (I did not test the HW_TEST though -- I don't have spare Yubikey at this moment).","Cool, thanks!  I'll merge it after the Travis checks finish.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,139,2018-02-13T23:29:55Z,2018-03-06T12:46:47Z,2018-03-06T12:46:47Z,MERGED,True,494,53,6,https://github.com/notdpate,Libykpiv ROCA mitigation changes for PIV tool/Minidriver - Release 1.5.2,6,[],https://github.com/Yubico/yubico-piv-tool/pull/139,https://github.com/notdpate,1,https://github.com/Yubico/yubico-piv-tool/pull/139,This pull request contains the updates I made to the ROCA block/mitigation.  This version was built into 3.7.0.152 of the minidriver.  It updates libykpiv to 1.5.2.,This pull request contains the updates I made to the ROCA block/mitigation.  This version was built into 3.7.0.152 of the minidriver.  It updates libykpiv to 1.5.2.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,139,2018-02-13T23:29:55Z,2018-03-06T12:46:47Z,2018-03-06T12:46:47Z,MERGED,True,494,53,6,https://github.com/notdpate,Libykpiv ROCA mitigation changes for PIV tool/Minidriver - Release 1.5.2,6,[],https://github.com/Yubico/yubico-piv-tool/pull/139,https://github.com/notdpate,2,https://github.com/Yubico/yubico-piv-tool/pull/139#issuecomment-370541370,This pull request contains the updates I made to the ROCA block/mitigation.  This version was built into 3.7.0.152 of the minidriver.  It updates libykpiv to 1.5.2.,"LT_CURRENT and LT_REVISION should remain unchanged from the previous release, as the public API was not modified.  The version information inside the libs and tool don't use LT_AGE for the patch version.
Other changes have been made as requested.  Yubico PM doesn't want the piv tool to disable generation on affected devices by default, they want it to warn/log for now.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,139,2018-02-13T23:29:55Z,2018-03-06T12:46:47Z,2018-03-06T12:46:47Z,MERGED,True,494,53,6,https://github.com/notdpate,Libykpiv ROCA mitigation changes for PIV tool/Minidriver - Release 1.5.2,6,[],https://github.com/Yubico/yubico-piv-tool/pull/139,https://github.com/mrmekon,3,https://github.com/Yubico/yubico-piv-tool/pull/139#issuecomment-370553915,This pull request contains the updates I made to the ROCA block/mitigation.  This version was built into 3.7.0.152 of the minidriver.  It updates libykpiv to 1.5.2.,"@notdpate LT_REVISION does need to be bumped still.  It changes when any of the underlying source changes.  From libtool: ""If the library source code has changed at all since the last update, then increment revision""
Everything else is approved!",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,141,2018-02-26T00:50:49Z,2018-02-27T14:21:49Z,2018-03-06T01:25:34Z,MERGED,True,36,1,4,https://github.com/laomaiweng,Improve compatibility with OpenSSL 1.1.0,1,[],https://github.com/Yubico/yubico-piv-tool/pull/141,https://github.com/laomaiweng,1,https://github.com/Yubico/yubico-piv-tool/pull/141,"OpenSSL 1.1.0 can be compiled in a variety of compatibility modes. On my machine, OpenSSL 1.1.0 has all compatibility APIs disabled by default.
This PR thus removes/replaces all calls to deprecated APIs when compiling against OpenSSL 1.1.0, and also adds some required headers.
Please review and feel free to comment so I can adjust things. :)","OpenSSL 1.1.0 can be compiled in a variety of compatibility modes. On my machine, OpenSSL 1.1.0 has all compatibility APIs disabled by default.
This PR thus removes/replaces all calls to deprecated APIs when compiling against OpenSSL 1.1.0, and also adds some required headers.
Please review and feel free to comment so I can adjust things. :)",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,141,2018-02-26T00:50:49Z,2018-02-27T14:21:49Z,2018-03-06T01:25:34Z,MERGED,True,36,1,4,https://github.com/laomaiweng,Improve compatibility with OpenSSL 1.1.0,1,[],https://github.com/Yubico/yubico-piv-tool/pull/141,https://github.com/mrmekon,2,https://github.com/Yubico/yubico-piv-tool/pull/141#issuecomment-368893487,"OpenSSL 1.1.0 can be compiled in a variety of compatibility modes. On my machine, OpenSSL 1.1.0 has all compatibility APIs disabled by default.
This PR thus removes/replaces all calls to deprecated APIs when compiling against OpenSSL 1.1.0, and also adds some required headers.
Please review and feel free to comment so I can adjust things. :)",Merged.  Thanks!,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,144,2018-03-23T21:54:41Z,2018-03-25T15:36:39Z,2018-03-25T22:10:59Z,MERGED,True,1,1,1,https://github.com/jalseth,Fixed slot argument error in attestation verification example.,1,[],https://github.com/Yubico/yubico-piv-tool/pull/144,https://github.com/jalseth,1,https://github.com/Yubico/yubico-piv-tool/pull/144,,,True,{'THUMBS_UP': ['https://github.com/klali']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,157,2018-08-08T14:13:14Z,2018-08-09T08:24:54Z,2018-08-09T08:24:54Z,MERGED,True,26,25,4,https://github.com/Jakuje,Avoid unused variables and warnings when building against OpenSSL 1.1,1,[],https://github.com/Yubico/yubico-piv-tool/pull/157,https://github.com/Jakuje,1,https://github.com/Yubico/yubico-piv-tool/pull/157,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,157,2018-08-08T14:13:14Z,2018-08-09T08:24:54Z,2018-08-09T08:24:54Z,MERGED,True,26,25,4,https://github.com/Jakuje,Avoid unused variables and warnings when building against OpenSSL 1.1,1,[],https://github.com/Yubico/yubico-piv-tool/pull/157,https://github.com/klali,2,https://github.com/Yubico/yubico-piv-tool/pull/157#issuecomment-411677865,,"LGTM, merging.
Thanks!",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,163,2018-09-07T10:56:04Z,2018-09-07T11:58:44Z,2020-07-14T13:19:16Z,MERGED,True,13,1,1,https://github.com/klali,lib: make the reader comparison case-insensitive,1,[],https://github.com/Yubico/yubico-piv-tool/pull/163,https://github.com/klali,1,https://github.com/Yubico/yubico-piv-tool/pull/163,"sadly strcasestr is a GNU/BSD extension, not part of posix so we have to
do our own thing here or do different things on different platforms.","sadly strcasestr is a GNU/BSD extension, not part of posix so we have to
do our own thing here or do different things on different platforms.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,165,2018-09-14T21:34:07Z,2018-09-21T08:34:44Z,2018-09-21T08:34:44Z,MERGED,True,396,163,8,https://github.com/notdpate,libykpiv/piv-tool 1.6.3,1,[],https://github.com/Yubico/yubico-piv-tool/pull/165,https://github.com/notdpate,1,https://github.com/Yubico/yubico-piv-tool/pull/165,"lib: promote get_serial to base API
lib: add ykpiv_get_serial to external API
tool: add serial number/version to status command
build: fix msvc build of case insensitive-reader (missing strncasecmp and cast warnings)
lib: consolidate neo/yk4 + yk5 serial number routines
lib: fix GCC 8 compilier warnings
lib: reimplement deauthenticate to select mgmt aid
build: disable -Waggregate-return
lib: fix warning differences between gcc and msvc
lib: add option to disable implicit card transactions
lib: remove application reselect prior to crypt operations
build: fix msvc warnings wrt length checking logic fixes
lib: fix error condition logic in untransacted internal functions
lib: create internal transactionless ykpiv_transfer_data","lib: promote get_serial to base API
lib: add ykpiv_get_serial to external API
tool: add serial number/version to status command
build: fix msvc build of case insensitive-reader (missing strncasecmp and cast warnings)
lib: consolidate neo/yk4 + yk5 serial number routines
lib: fix GCC 8 compilier warnings
lib: reimplement deauthenticate to select mgmt aid
build: disable -Waggregate-return
lib: fix warning differences between gcc and msvc
lib: add option to disable implicit card transactions
lib: remove application reselect prior to crypt operations
build: fix msvc warnings wrt length checking logic fixes
lib: fix error condition logic in untransacted internal functions
lib: create internal transactionless ykpiv_transfer_data",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,174,2018-11-30T22:17:29Z,2020-02-07T09:16:56Z,2020-02-07T09:16:56Z,CLOSED,False,3,3,2,https://github.com/opoplawski,Increase get_objects buffer; Fix typo in error message,1,[],https://github.com/Yubico/yubico-piv-tool/pull/174,https://github.com/opoplawski,1,https://github.com/Yubico/yubico-piv-tool/pull/174,"Trying to read from a YubiKey 4 I got the following:
# p11tool --export 'pkcs11:model=YubiKey%20YK4;manufacturer=Yubico;serial=1234;token=YubiKey%20PIV;object=X.509%20Certificate%20for%20PIV%20Authentication%00' --debug 100
Setting log level to 100
debug: ykcs11.c:172 (C_GetFunctionList): In
debug: ykcs11.c:180 (C_GetFunctionList): Out
debug: ykcs11.c:87 (C_Initialize): In
trying to connect to reader 'Yubico YubiKey OTP+FIDO+CCID 00 00'.
debug: ykcs11.c:105 (C_Initialize): Found 1 slot(s) of which 0 tokenless/unsupported
debug: ykcs11.c:110 (C_Initialize): Out
|<2>| p11: Initializing module: p11-kit-trust
|<2>| p11: Initializing module: ykcs11
debug: ykcs11.c:150 (C_GetInfo): In
debug: ykcs11.c:164 (C_GetInfo): Out
|<3>| ASSERT: pkcs11.c[compat_load]:891
debug: ykcs11.c:195 (C_GetSlotList): In
debug: ykcs11.c:237 (C_GetSlotList): token present is 1
debug: ykcs11.c:238 (C_GetSlotList): number of slot(s) is 1
debug: ykcs11.c:240 (C_GetSlotList): Out
debug: ykcs11.c:272 (C_GetTokenInfo): In
debug: ykcs11.c:313 (C_GetTokenInfo): Out
debug: ykcs11.c:249 (C_GetSlotInfo): In
debug: ykcs11.c:263 (C_GetSlotInfo): Out
debug: ykcs11.c:512 (C_OpenSession): In
trying to connect to reader 'Yubico YubiKey OTP+FIDO+CCID 00 00'.
debug: yubico_token.c:273 (get_objects): Found AUTH cert (9a)
debug: yubico_token.c:300 (get_objects): Found KMK cert (9d)
Output buffer to small, wanted to write 2070, max was 2048.debug: yubico_token.c:317 (get_objects): The total number of objects for this token is 35
debug: yubico_token.c:273 (get_objects): Found AUTH cert (9a)
debug: yubico_token.c:300 (get_objects): Found KMK cert (9d)
Output buffer to small, wanted to write 2070, max was 2048.debug: yubico_token.c:317 (get_objects): The total number of objects for this token is 35

No idea what the proper buffer size is here.","Trying to read from a YubiKey 4 I got the following:
# p11tool --export 'pkcs11:model=YubiKey%20YK4;manufacturer=Yubico;serial=1234;token=YubiKey%20PIV;object=X.509%20Certificate%20for%20PIV%20Authentication%00' --debug 100
Setting log level to 100
debug: ykcs11.c:172 (C_GetFunctionList): In
debug: ykcs11.c:180 (C_GetFunctionList): Out
debug: ykcs11.c:87 (C_Initialize): In
trying to connect to reader 'Yubico YubiKey OTP+FIDO+CCID 00 00'.
debug: ykcs11.c:105 (C_Initialize): Found 1 slot(s) of which 0 tokenless/unsupported
debug: ykcs11.c:110 (C_Initialize): Out
|<2>| p11: Initializing module: p11-kit-trust
|<2>| p11: Initializing module: ykcs11
debug: ykcs11.c:150 (C_GetInfo): In
debug: ykcs11.c:164 (C_GetInfo): Out
|<3>| ASSERT: pkcs11.c[compat_load]:891
debug: ykcs11.c:195 (C_GetSlotList): In
debug: ykcs11.c:237 (C_GetSlotList): token present is 1
debug: ykcs11.c:238 (C_GetSlotList): number of slot(s) is 1
debug: ykcs11.c:240 (C_GetSlotList): Out
debug: ykcs11.c:272 (C_GetTokenInfo): In
debug: ykcs11.c:313 (C_GetTokenInfo): Out
debug: ykcs11.c:249 (C_GetSlotInfo): In
debug: ykcs11.c:263 (C_GetSlotInfo): Out
debug: ykcs11.c:512 (C_OpenSession): In
trying to connect to reader 'Yubico YubiKey OTP+FIDO+CCID 00 00'.
debug: yubico_token.c:273 (get_objects): Found AUTH cert (9a)
debug: yubico_token.c:300 (get_objects): Found KMK cert (9d)
Output buffer to small, wanted to write 2070, max was 2048.debug: yubico_token.c:317 (get_objects): The total number of objects for this token is 35
debug: yubico_token.c:273 (get_objects): Found AUTH cert (9a)
debug: yubico_token.c:300 (get_objects): Found KMK cert (9d)
Output buffer to small, wanted to write 2070, max was 2048.debug: yubico_token.c:317 (get_objects): The total number of objects for this token is 35

No idea what the proper buffer size is here.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,174,2018-11-30T22:17:29Z,2020-02-07T09:16:56Z,2020-02-07T09:16:56Z,CLOSED,False,3,3,2,https://github.com/opoplawski,Increase get_objects buffer; Fix typo in error message,1,[],https://github.com/Yubico/yubico-piv-tool/pull/174,https://github.com/opoplawski,2,https://github.com/Yubico/yubico-piv-tool/pull/174#issuecomment-443356672,"Trying to read from a YubiKey 4 I got the following:
# p11tool --export 'pkcs11:model=YubiKey%20YK4;manufacturer=Yubico;serial=1234;token=YubiKey%20PIV;object=X.509%20Certificate%20for%20PIV%20Authentication%00' --debug 100
Setting log level to 100
debug: ykcs11.c:172 (C_GetFunctionList): In
debug: ykcs11.c:180 (C_GetFunctionList): Out
debug: ykcs11.c:87 (C_Initialize): In
trying to connect to reader 'Yubico YubiKey OTP+FIDO+CCID 00 00'.
debug: ykcs11.c:105 (C_Initialize): Found 1 slot(s) of which 0 tokenless/unsupported
debug: ykcs11.c:110 (C_Initialize): Out
|<2>| p11: Initializing module: p11-kit-trust
|<2>| p11: Initializing module: ykcs11
debug: ykcs11.c:150 (C_GetInfo): In
debug: ykcs11.c:164 (C_GetInfo): Out
|<3>| ASSERT: pkcs11.c[compat_load]:891
debug: ykcs11.c:195 (C_GetSlotList): In
debug: ykcs11.c:237 (C_GetSlotList): token present is 1
debug: ykcs11.c:238 (C_GetSlotList): number of slot(s) is 1
debug: ykcs11.c:240 (C_GetSlotList): Out
debug: ykcs11.c:272 (C_GetTokenInfo): In
debug: ykcs11.c:313 (C_GetTokenInfo): Out
debug: ykcs11.c:249 (C_GetSlotInfo): In
debug: ykcs11.c:263 (C_GetSlotInfo): Out
debug: ykcs11.c:512 (C_OpenSession): In
trying to connect to reader 'Yubico YubiKey OTP+FIDO+CCID 00 00'.
debug: yubico_token.c:273 (get_objects): Found AUTH cert (9a)
debug: yubico_token.c:300 (get_objects): Found KMK cert (9d)
Output buffer to small, wanted to write 2070, max was 2048.debug: yubico_token.c:317 (get_objects): The total number of objects for this token is 35
debug: yubico_token.c:273 (get_objects): Found AUTH cert (9a)
debug: yubico_token.c:300 (get_objects): Found KMK cert (9d)
Output buffer to small, wanted to write 2070, max was 2048.debug: yubico_token.c:317 (get_objects): The total number of objects for this token is 35

No idea what the proper buffer size is here.","After patch:
trying to connect to reader 'Yubico YubiKey OTP+FIDO+CCID 00 00'.
debug: yubico_token.c:273 (get_objects): Found AUTH cert (9a)
debug: yubico_token.c:300 (get_objects): Found KMK cert (9d)
debug: yubico_token.c:311 (get_objects): Found RETIRED cert (82)
debug: yubico_token.c:317 (get_objects): The total number of objects for this token is 38
debug: yubico_token.c:273 (get_objects): Found AUTH cert (9a)
debug: yubico_token.c:300 (get_objects): Found KMK cert (9d)
debug: yubico_token.c:311 (get_objects): Found RETIRED cert (82)
debug: yubico_token.c:317 (get_objects): The total number of objects for this token is 38
debug: ykcs11.c:640 (C_OpenSession): Out",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,174,2018-11-30T22:17:29Z,2020-02-07T09:16:56Z,2020-02-07T09:16:56Z,CLOSED,False,3,3,2,https://github.com/opoplawski,Increase get_objects buffer; Fix typo in error message,1,[],https://github.com/Yubico/yubico-piv-tool/pull/174,https://github.com/qpernil,3,https://github.com/Yubico/yubico-piv-tool/pull/174#issuecomment-583302120,"Trying to read from a YubiKey 4 I got the following:
# p11tool --export 'pkcs11:model=YubiKey%20YK4;manufacturer=Yubico;serial=1234;token=YubiKey%20PIV;object=X.509%20Certificate%20for%20PIV%20Authentication%00' --debug 100
Setting log level to 100
debug: ykcs11.c:172 (C_GetFunctionList): In
debug: ykcs11.c:180 (C_GetFunctionList): Out
debug: ykcs11.c:87 (C_Initialize): In
trying to connect to reader 'Yubico YubiKey OTP+FIDO+CCID 00 00'.
debug: ykcs11.c:105 (C_Initialize): Found 1 slot(s) of which 0 tokenless/unsupported
debug: ykcs11.c:110 (C_Initialize): Out
|<2>| p11: Initializing module: p11-kit-trust
|<2>| p11: Initializing module: ykcs11
debug: ykcs11.c:150 (C_GetInfo): In
debug: ykcs11.c:164 (C_GetInfo): Out
|<3>| ASSERT: pkcs11.c[compat_load]:891
debug: ykcs11.c:195 (C_GetSlotList): In
debug: ykcs11.c:237 (C_GetSlotList): token present is 1
debug: ykcs11.c:238 (C_GetSlotList): number of slot(s) is 1
debug: ykcs11.c:240 (C_GetSlotList): Out
debug: ykcs11.c:272 (C_GetTokenInfo): In
debug: ykcs11.c:313 (C_GetTokenInfo): Out
debug: ykcs11.c:249 (C_GetSlotInfo): In
debug: ykcs11.c:263 (C_GetSlotInfo): Out
debug: ykcs11.c:512 (C_OpenSession): In
trying to connect to reader 'Yubico YubiKey OTP+FIDO+CCID 00 00'.
debug: yubico_token.c:273 (get_objects): Found AUTH cert (9a)
debug: yubico_token.c:300 (get_objects): Found KMK cert (9d)
Output buffer to small, wanted to write 2070, max was 2048.debug: yubico_token.c:317 (get_objects): The total number of objects for this token is 35
debug: yubico_token.c:273 (get_objects): Found AUTH cert (9a)
debug: yubico_token.c:300 (get_objects): Found KMK cert (9d)
Output buffer to small, wanted to write 2070, max was 2048.debug: yubico_token.c:317 (get_objects): The total number of objects for this token is 35

No idea what the proper buffer size is here.","Version 2.0.0 increases the buffer size to match the maximum that can be written to the device, which is 3072 bytes.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,174,2018-11-30T22:17:29Z,2020-02-07T09:16:56Z,2020-02-07T09:16:56Z,CLOSED,False,3,3,2,https://github.com/opoplawski,Increase get_objects buffer; Fix typo in error message,1,[],https://github.com/Yubico/yubico-piv-tool/pull/174,https://github.com/qpernil,4,https://github.com/Yubico/yubico-piv-tool/pull/174#issuecomment-583302235,"Trying to read from a YubiKey 4 I got the following:
# p11tool --export 'pkcs11:model=YubiKey%20YK4;manufacturer=Yubico;serial=1234;token=YubiKey%20PIV;object=X.509%20Certificate%20for%20PIV%20Authentication%00' --debug 100
Setting log level to 100
debug: ykcs11.c:172 (C_GetFunctionList): In
debug: ykcs11.c:180 (C_GetFunctionList): Out
debug: ykcs11.c:87 (C_Initialize): In
trying to connect to reader 'Yubico YubiKey OTP+FIDO+CCID 00 00'.
debug: ykcs11.c:105 (C_Initialize): Found 1 slot(s) of which 0 tokenless/unsupported
debug: ykcs11.c:110 (C_Initialize): Out
|<2>| p11: Initializing module: p11-kit-trust
|<2>| p11: Initializing module: ykcs11
debug: ykcs11.c:150 (C_GetInfo): In
debug: ykcs11.c:164 (C_GetInfo): Out
|<3>| ASSERT: pkcs11.c[compat_load]:891
debug: ykcs11.c:195 (C_GetSlotList): In
debug: ykcs11.c:237 (C_GetSlotList): token present is 1
debug: ykcs11.c:238 (C_GetSlotList): number of slot(s) is 1
debug: ykcs11.c:240 (C_GetSlotList): Out
debug: ykcs11.c:272 (C_GetTokenInfo): In
debug: ykcs11.c:313 (C_GetTokenInfo): Out
debug: ykcs11.c:249 (C_GetSlotInfo): In
debug: ykcs11.c:263 (C_GetSlotInfo): Out
debug: ykcs11.c:512 (C_OpenSession): In
trying to connect to reader 'Yubico YubiKey OTP+FIDO+CCID 00 00'.
debug: yubico_token.c:273 (get_objects): Found AUTH cert (9a)
debug: yubico_token.c:300 (get_objects): Found KMK cert (9d)
Output buffer to small, wanted to write 2070, max was 2048.debug: yubico_token.c:317 (get_objects): The total number of objects for this token is 35
debug: yubico_token.c:273 (get_objects): Found AUTH cert (9a)
debug: yubico_token.c:300 (get_objects): Found KMK cert (9d)
Output buffer to small, wanted to write 2070, max was 2048.debug: yubico_token.c:317 (get_objects): The total number of objects for this token is 35

No idea what the proper buffer size is here.","Version 2.0.0 increases the buffer size to match the maximum that can be written to the device, which is 3072 bytes.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,176,2018-11-30T22:43:34Z,2020-02-07T10:08:24Z,2020-02-07T10:08:24Z,CLOSED,False,101,47,6,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/176,https://github.com/opoplawski,1,https://github.com/Yubico/yubico-piv-tool/pull/176,"Unfortunately I worked on this before realizing that libykcs11 is an incomplete implementation.  However, this all still remains the right thing to do.  One should probably even drop the ""lib"" from the name of the module since it isn't meant to be linked to directly, but that would probably break too much.  Much of this was cribbed from opensc.","Unfortunately I worked on this before realizing that libykcs11 is an incomplete implementation.  However, this all still remains the right thing to do.  One should probably even drop the ""lib"" from the name of the module since it isn't meant to be linked to directly, but that would probably break too much.  Much of this was cribbed from opensc.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,176,2018-11-30T22:43:34Z,2020-02-07T10:08:24Z,2020-02-07T10:08:24Z,CLOSED,False,101,47,6,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/176,https://github.com/a-dma,2,https://github.com/Yubico/yubico-piv-tool/pull/176#issuecomment-445735580,"Unfortunately I worked on this before realizing that libykcs11 is an incomplete implementation.  However, this all still remains the right thing to do.  One should probably even drop the ""lib"" from the name of the module since it isn't meant to be linked to directly, but that would probably break too much.  Much of this was cribbed from opensc.","Hey, thanks for the contribution.
I'm not an very familiar with p11-kit, but I see you've removed the .map file and manually exported all the functions. Is this what p11-kit expects? The usual way is to only export the two symbols that were in the .map file.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,176,2018-11-30T22:43:34Z,2020-02-07T10:08:24Z,2020-02-07T10:08:24Z,CLOSED,False,101,47,6,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/176,https://github.com/mouse07410,3,https://github.com/Yubico/yubico-piv-tool/pull/176#issuecomment-445738688,"Unfortunately I worked on this before realizing that libykcs11 is an incomplete implementation.  However, this all still remains the right thing to do.  One should probably even drop the ""lib"" from the name of the module since it isn't meant to be linked to directly, but that would probably break too much.  Much of this was cribbed from opensc.","At least on MacOS this was not necessary. I have a lot of problems with libykcs11, but I haven't seen the one this PR is supposed to address. In my experience, p11-kit works with all the libraries I used (opensc-pkcs11.so, libykcs11.so, yubihsm_pkcs11.so, libsofthsm2.so) just fine, assuming that ~/.config/pkcs11/modules/ had the right stuff.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,176,2018-11-30T22:43:34Z,2020-02-07T10:08:24Z,2020-02-07T10:08:24Z,CLOSED,False,101,47,6,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/176,https://github.com/opoplawski,4,https://github.com/Yubico/yubico-piv-tool/pull/176#issuecomment-446317871,"Unfortunately I worked on this before realizing that libykcs11 is an incomplete implementation.  However, this all still remains the right thing to do.  One should probably even drop the ""lib"" from the name of the module since it isn't meant to be linked to directly, but that would probably break too much.  Much of this was cribbed from opensc.","Hey, thanks for the contribution.
I'm not an very familiar with p11-kit, but I see you've removed the .map file and manually exported all the functions. Is this what p11-kit expects? The usual way is to only export the two symbols that were in the .map file.

I'm honestly not sure what p11-kit expects here.  I just copied the exports configuration from opensc and figured they new what they were doing.  If things worked before with just those two symbols, that's probably all that is needed.   I don't think they need to be versioned though as this is a defined interface.",True,{'THUMBS_DOWN': ['https://github.com/mouse07410']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,176,2018-11-30T22:43:34Z,2020-02-07T10:08:24Z,2020-02-07T10:08:24Z,CLOSED,False,101,47,6,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/176,https://github.com/mouse07410,5,https://github.com/Yubico/yubico-piv-tool/pull/176#issuecomment-446360436,"Unfortunately I worked on this before realizing that libykcs11 is an incomplete implementation.  However, this all still remains the right thing to do.  One should probably even drop the ""lib"" from the name of the module since it isn't meant to be linked to directly, but that would probably break too much.  Much of this was cribbed from opensc.","I don't like this approach (it looks hacky to me), and am concerned that merging it would break what currently works. p11-kit does not need this, and works perfectly fine as is:
$ p11tool --list-token-urls
pkcs11:model=p11-kit-trust;manufacturer=PKCS%2311%20Kit;serial=1;token=Default%20Trust
pkcs11:model=p11-kit-trust;manufacturer=PKCS%2311%20Kit;serial=1;token=System%20Trust
pkcs11:model=PKCS%2315%20emulated;manufacturer=piv_II;serial=xxxxxxxx;token=[nobody's business]
pkcs11:model=SoftHSM%20v2;manufacturer=SoftHSM%20project;serial=xxxxxxxx;token=Botan%20PKCS%2311%20tests
pkcs11:model=YubiHSM;manufacturer=Yubico%20%28www.yubico.com%29;serial=xxxxxxxx;token=YubiHSM
pkcs11:model=YubiKey%20YK4;manufacturer=Yubico;serial=1234;token=YubiKey%20PIV
$ ll ~/.config/pkcs11/modules
total 32
drwxr-xr-x  6 mouse  admin               192 Nov 26 17:22 ./
drwxr-xr-x  4 mouse  admin               128 Feb  1  2018 ../
-rw-r--r--  1 mouse  MITLL\Domain Users  107 Jun 12  2018 opensc.module
-rw-r--r--  1 mouse  MITLL\Domain Users  160 Jun 12  2018 softhsm2.module
-rw-r--r--  1 mouse  MITLL\Domain Users  396 Nov 26 17:22 yhsm2.module
-rw-r--r--  1 mouse  MITLL\Domain Users   39 Jun 12  2018 ykcs11.module
$ 

You do have the modules configured, right?
$ cat ~/.config/pkcs11/modules/ykcs11.module 
module: /usr/local/lib/libykcs11.dylib
$ cat ~/.config/pkcs11/modules/opensc.module 
module: /Library/OpenSC/lib/opensc-pkcs11.dylib
#module: /Library/OpenSC/lib/pkcs11-spy.dylib
critical: no
$ cat ~/.config/pkcs11/modules/yhsm2.module 
# PKCS#11 YubiHSM2 interface module v1.0.4
#module: /usr/local/lib/yubihsm_pkcs11.1.dylib
# PKCS#11 YubiHSM2 interface module v2.0.0
module: /usr/local/lib/yubihsm_pkcs11.2.dylib
# PKCS#11 interface module v0.2.0
#module: /usr/local/lib/yubihsm_pkcs11.0.2.0.dylib
# Debugging - trace all the PKCS#11 communications with the YubiHSM2 device
#module: /Library/OpenSC/lib/pkcs11-spy.so
critical: no
$",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,176,2018-11-30T22:43:34Z,2020-02-07T10:08:24Z,2020-02-07T10:08:24Z,CLOSED,False,101,47,6,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/176,https://github.com/opoplawski,6,https://github.com/Yubico/yubico-piv-tool/pull/176#issuecomment-446361363,"Unfortunately I worked on this before realizing that libykcs11 is an incomplete implementation.  However, this all still remains the right thing to do.  One should probably even drop the ""lib"" from the name of the module since it isn't meant to be linked to directly, but that would probably break too much.  Much of this was cribbed from opensc.","Well, one of the main goals of the PR is to install the p11-kit module file automatically, at least on Linux.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,176,2018-11-30T22:43:34Z,2020-02-07T10:08:24Z,2020-02-07T10:08:24Z,CLOSED,False,101,47,6,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/176,https://github.com/mouse07410,7,https://github.com/Yubico/yubico-piv-tool/pull/176#issuecomment-446373111,"Unfortunately I worked on this before realizing that libykcs11 is an incomplete implementation.  However, this all still remains the right thing to do.  One should probably even drop the ""lib"" from the name of the module since it isn't meant to be linked to directly, but that would probably break too much.  Much of this was cribbed from opensc.","one of the main goals of the PR is to install the p11-kit module file automatically

I'm not sure what you mean by ""automatically"". Configuration files I provided are needed, and it's far better to use them than hacking the source. If you look up p11-kit, you'll find that there are system-wide config files and directories - if you insist, you can install the relevant *.module files there.
Although I'm still at loss as to what you hope to get out of it (i.e., assuming p11-kit works perfectly to your satisfaction). This library IMHO is quite inferior to the one provided by OpenSC for everything related to use of Yubikey tokens. The only thing where this one might do better is key generation - which anybody sane would do via a tool like yubico-piv-tool anyway.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,176,2018-11-30T22:43:34Z,2020-02-07T10:08:24Z,2020-02-07T10:08:24Z,CLOSED,False,101,47,6,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/176,https://github.com/qpernil,8,https://github.com/Yubico/yubico-piv-tool/pull/176#issuecomment-583308198,"Unfortunately I worked on this before realizing that libykcs11 is an incomplete implementation.  However, this all still remains the right thing to do.  One should probably even drop the ""lib"" from the name of the module since it isn't meant to be linked to directly, but that would probably break too much.  Much of this was cribbed from opensc.","Could you kindly check if version 2.0.0 resolves your issues relating directly to ykcs11 ? It is a more complete pkcs11 implementation, including the export of all methods in the specification.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,176,2018-11-30T22:43:34Z,2020-02-07T10:08:24Z,2020-02-07T10:08:24Z,CLOSED,False,101,47,6,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/176,https://github.com/qpernil,9,https://github.com/Yubico/yubico-piv-tool/pull/176#issuecomment-583321922,"Unfortunately I worked on this before realizing that libykcs11 is an incomplete implementation.  However, this all still remains the right thing to do.  One should probably even drop the ""lib"" from the name of the module since it isn't meant to be linked to directly, but that would probably break too much.  Much of this was cribbed from opensc.","Closing this pull request, feel free to open a new one based on the 2.0.0 release",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,178,2019-01-01T07:20:50Z,2019-01-02T07:51:37Z,2019-01-03T01:58:33Z,MERGED,True,12,12,2,https://github.com/solidgoldbomb,Fix FASC-N encoding,2,[],https://github.com/Yubico/yubico-piv-tool/pull/178,https://github.com/solidgoldbomb,1,https://github.com/Yubico/yubico-piv-tool/pull/178,"The encoding for the FASC-N field in the CHUID did not match Figure 7 in ""Technical Implementation Guidance: Smart Card Enabled Physical Access Control Systems Version 2.2"" which should be authoritative for this field.
The 5-bit encoding is easy to verify visually.  The first 4-bits should be the number (0-9) encoded in binary and then bit-flipped so that the lsb is first and msb is last.  The 5th bit should be an odd parity across the 4-bit number.  The new perl code matches the spec.
After correcting the fasc.pl tool, I regenerated the CHUID_TMPL in lib/util.c to make use of the corrected encoding.
Tested against a yubikey neo using ykman (reads CHUID) and piv-tool (reads GUID/serial only).
I've also verified that the fixed encoding produces a match with the only online encoder I could find.  That's not much of a proof but it's all I could come up with for interop testing.
The perl code was touched recently in relation to #177, and the discussion included cautions from @mouse07410 about changing this at all but it's so clearly broken in its current state (e.g. '3' generates an entirely invalid BCD code point) that fixing it seems wise.","The encoding for the FASC-N field in the CHUID did not match Figure 7 in ""Technical Implementation Guidance: Smart Card Enabled Physical Access Control Systems Version 2.2"" which should be authoritative for this field.
The 5-bit encoding is easy to verify visually.  The first 4-bits should be the number (0-9) encoded in binary and then bit-flipped so that the lsb is first and msb is last.  The 5th bit should be an odd parity across the 4-bit number.  The new perl code matches the spec.
After correcting the fasc.pl tool, I regenerated the CHUID_TMPL in lib/util.c to make use of the corrected encoding.
Tested against a yubikey neo using ykman (reads CHUID) and piv-tool (reads GUID/serial only).
I've also verified that the fixed encoding produces a match with the only online encoder I could find.  That's not much of a proof but it's all I could come up with for interop testing.
The perl code was touched recently in relation to #177, and the discussion included cautions from @mouse07410 about changing this at all but it's so clearly broken in its current state (e.g. '3' generates an entirely invalid BCD code point) that fixing it seems wise.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,178,2019-01-01T07:20:50Z,2019-01-02T07:51:37Z,2019-01-03T01:58:33Z,MERGED,True,12,12,2,https://github.com/solidgoldbomb,Fix FASC-N encoding,2,[],https://github.com/Yubico/yubico-piv-tool/pull/178,https://github.com/mouse07410,2,https://github.com/Yubico/yubico-piv-tool/pull/178#issuecomment-450732289,"The encoding for the FASC-N field in the CHUID did not match Figure 7 in ""Technical Implementation Guidance: Smart Card Enabled Physical Access Control Systems Version 2.2"" which should be authoritative for this field.
The 5-bit encoding is easy to verify visually.  The first 4-bits should be the number (0-9) encoded in binary and then bit-flipped so that the lsb is first and msb is last.  The 5th bit should be an odd parity across the 4-bit number.  The new perl code matches the spec.
After correcting the fasc.pl tool, I regenerated the CHUID_TMPL in lib/util.c to make use of the corrected encoding.
Tested against a yubikey neo using ykman (reads CHUID) and piv-tool (reads GUID/serial only).
I've also verified that the fixed encoding produces a match with the only online encoder I could find.  That's not much of a proof but it's all I could come up with for interop testing.
The perl code was touched recently in relation to #177, and the discussion included cautions from @mouse07410 about changing this at all but it's so clearly broken in its current state (e.g. '3' generates an entirely invalid BCD code point) that fixing it seems wise.","My main concern is not that OpenSC won't accept this token with the corrected FASN-N - such a situation is highly improbable.
I worry that packages like Thursby PKard, Centrify, and such would reject it. Because that Chris is used to encode Gov't Agency information among other things. For people that need to use those apps because their organization forces them, and/or they also use ""real"" (aka Gov't-issued CAC or PIV) this could be a problem.
For example, the first field of the Federal Agency Smart Credential Number (FASC-N) is Agency code. What ""valid number"" (value) do you propose to put there? Same question applies to the rest of the fields.
My point is - complying with the format would be good. Overlapping with any existing Agency values would be very bad.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,178,2019-01-01T07:20:50Z,2019-01-02T07:51:37Z,2019-01-03T01:58:33Z,MERGED,True,12,12,2,https://github.com/solidgoldbomb,Fix FASC-N encoding,2,[],https://github.com/Yubico/yubico-piv-tool/pull/178,https://github.com/solidgoldbomb,3,https://github.com/Yubico/yubico-piv-tool/pull/178#issuecomment-450764236,"The encoding for the FASC-N field in the CHUID did not match Figure 7 in ""Technical Implementation Guidance: Smart Card Enabled Physical Access Control Systems Version 2.2"" which should be authoritative for this field.
The 5-bit encoding is easy to verify visually.  The first 4-bits should be the number (0-9) encoded in binary and then bit-flipped so that the lsb is first and msb is last.  The 5th bit should be an odd parity across the 4-bit number.  The new perl code matches the spec.
After correcting the fasc.pl tool, I regenerated the CHUID_TMPL in lib/util.c to make use of the corrected encoding.
Tested against a yubikey neo using ykman (reads CHUID) and piv-tool (reads GUID/serial only).
I've also verified that the fixed encoding produces a match with the only online encoder I could find.  That's not much of a proof but it's all I could come up with for interop testing.
The perl code was touched recently in relation to #177, and the discussion included cautions from @mouse07410 about changing this at all but it's so clearly broken in its current state (e.g. '3' generates an entirely invalid BCD code point) that fixing it seems wise.","Thanks for the info.  I don't have access to those applications but I understand that the CHUID field is used to uniquely identify individual persons employed by (or otherwise associated with) the US government.  Could you  help to clarify how best to remain compatible with these other tools?
Would it somehow be better/more compatible with those packages if the FASC-N field is malformed on the yubikey?  The encoding used by this tool seems to deliberately choose Agency Code 9999 which is reserved to mean a non-federal issuer.  Is that helpful or is that actively harmful?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,178,2019-01-01T07:20:50Z,2019-01-02T07:51:37Z,2019-01-03T01:58:33Z,MERGED,True,12,12,2,https://github.com/solidgoldbomb,Fix FASC-N encoding,2,[],https://github.com/Yubico/yubico-piv-tool/pull/178,https://github.com/mouse07410,4,https://github.com/Yubico/yubico-piv-tool/pull/178#issuecomment-450769799,"The encoding for the FASC-N field in the CHUID did not match Figure 7 in ""Technical Implementation Guidance: Smart Card Enabled Physical Access Control Systems Version 2.2"" which should be authoritative for this field.
The 5-bit encoding is easy to verify visually.  The first 4-bits should be the number (0-9) encoded in binary and then bit-flipped so that the lsb is first and msb is last.  The 5th bit should be an odd parity across the 4-bit number.  The new perl code matches the spec.
After correcting the fasc.pl tool, I regenerated the CHUID_TMPL in lib/util.c to make use of the corrected encoding.
Tested against a yubikey neo using ykman (reads CHUID) and piv-tool (reads GUID/serial only).
I've also verified that the fixed encoding produces a match with the only online encoder I could find.  That's not much of a proof but it's all I could come up with for interop testing.
The perl code was touched recently in relation to #177, and the discussion included cautions from @mouse07410 about changing this at all but it's so clearly broken in its current state (e.g. '3' generates an entirely invalid BCD code point) that fixing it seems wise.","Could you help to clarify how best to remain compatible with these other tools?

By not looking like a token issued by a US Gov't agency, of course. Like, having SS=9999.

Would it somehow be better/more compatible with those packages if the FASC-N field is malformed on the yubikey?

Don't know. Malformed - probably not. So turning what's supposed to be BCD into valid BCD is probably good. But the actual values must point at a non-federal issuer.

The encoding used by this tool seems to deliberately choose Agency Code 9999 which is reserved to mean a non-federal issuer. Is that helpful or is that actively harmful?

What do you think? If you are a federal issuer - you can generate a valid code, but in that case most likely you'd be using tools other than yubico-piv-tool. And if you are not a federal issuer - ask yourself if you have a reason to generate a value that falsifies a real agency, and what a likely consequence of presenting such a ""forged"" ID to an entity that can parse and verify that field would be.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,178,2019-01-01T07:20:50Z,2019-01-02T07:51:37Z,2019-01-03T01:58:33Z,MERGED,True,12,12,2,https://github.com/solidgoldbomb,Fix FASC-N encoding,2,[],https://github.com/Yubico/yubico-piv-tool/pull/178,https://github.com/solidgoldbomb,5,https://github.com/Yubico/yubico-piv-tool/pull/178#issuecomment-450788889,"The encoding for the FASC-N field in the CHUID did not match Figure 7 in ""Technical Implementation Guidance: Smart Card Enabled Physical Access Control Systems Version 2.2"" which should be authoritative for this field.
The 5-bit encoding is easy to verify visually.  The first 4-bits should be the number (0-9) encoded in binary and then bit-flipped so that the lsb is first and msb is last.  The 5th bit should be an odd parity across the 4-bit number.  The new perl code matches the spec.
After correcting the fasc.pl tool, I regenerated the CHUID_TMPL in lib/util.c to make use of the corrected encoding.
Tested against a yubikey neo using ykman (reads CHUID) and piv-tool (reads GUID/serial only).
I've also verified that the fixed encoding produces a match with the only online encoder I could find.  That's not much of a proof but it's all I could come up with for interop testing.
The perl code was touched recently in relation to #177, and the discussion included cautions from @mouse07410 about changing this at all but it's so clearly broken in its current state (e.g. '3' generates an entirely invalid BCD code point) that fixing it seems wise.","Could you help to clarify how best to remain compatible with these other tools?

By not looking like a token issued by a US Gov't agency, of course. Like, having SS=9999.

Ok, so we have that one covered.  Agency Code = 9999 is exactly the encoding used here.  That's what this tool always used.  I haven't changed it in this PR.  Also, see below for a rationale for why this is the proper (endorsed) value for this field.


Would it somehow be better/more compatible with those packages if the FASC-N field is malformed on the yubikey?

Don't know. Malformed - probably not. So turning what's supposed to be BCD into valid BCD is probably good. But the actual values must point at a non-federal issuer.

Fixing the BCD encoding is exactly what this PR is doing.  So far, so good.  The yubico-piv-tool has always used a value that points at a non-federal issuer.  I didn't change that in this PR.  AFAICT, Agency Code 9999 is exactly the approved value to use to mean non-federal issuer.  FYI, '9' was one of the few encodings that were correct in the previous versions (along with '0' and '6') so I'm not fixing/changing anything in the encoding of AC=9999 in this PR.


The encoding used by this tool seems to deliberately choose Agency Code 9999 which is reserved to mean a non-federal issuer. Is that helpful or is that actively harmful?

What do you think? If you are a federal issuer - you can generate a valid code, but in that case most likely you'd be using tools other than yubico-piv-tool. And if you are not a federal issuer - ask yourself if you have a reason to generate a value that falsifies a real agency, and what a likely consequence of presenting such a ""forged"" ID to an entity that can parse and verify that field would be.

Sure, it seems entirely likely that federal issuers won't be using this tool.  So we can ignore them for this discussion other than to ensure that we're not colliding with them, right?
It's hard to tell from your response but it seems like you equate one or maybe both of these actions with falsifying or forging or maybe colliding with the US gov usage:

Using CHUID (and thus the mandatory FASC-N) anywhere on a smart card
Encoding a FASC-N with Agency Code = 9999

This PR didn't change either of those things.  The code is still trying to encode the exact same FASC-N value.  It's just doing it properly now.  The intended value didn't change, only the on-card serialization into BCD+parity.
In 811ddbb, I provide a full description of the (fixed) encoding that results from the (unchanged) desired FASC-N value.
I don't think your specific objections are in-scope for this PR but nevertheless, I'll try to provide some support for the (long-standing) use in this tool of [9999-9999-999999-0-1-0000000000300001] as the FASC-N value to be encoded in the CHUID.  FWIW, whoever originally decided on this value seems to have done their homework.  It appears to follow the standard recommended encoding for this usage and is specifically chosen to avoid conflicting with a real gov't agency.
This usage of the CHUID + FASC-N seems to be entirely endorsed in 800-73-3 Part 1.

See: Special Publication 800-73-3 Interfaces for Personal Identity Verification – Part 1: End-Point PIV Card Application Namespace, Data Model and Representation
Section 3.3 Inclusion of Universally Unique IDentifiers (UUIDs)

If the card is a PIV-I or PIV-C card, the FASC-N in the CHUID shall have Agency Code equal to 9999, System Code equal to 9999, and Credential Number equal to 999999, indicating that a UUID is the primary credential identifier. In this case, the FASC-N shall be omitted from certificates and CMS-signed data objects.


I'll admit that my understanding is quite shallow of all of the subtlety of all of the references and terminology so maybe I'm misinterpreting the meaning of that section.
If there's a better (more compatible) value to be used in the FASC-N field than [9999-9999-999999-0-1-0000000000300001] then this PR makes it so that some future PR has a chance of encoding the better value correctly.
FWIW, here's how I arrived at even caring about a CHUID and it's FASC-N field and it's relationship to the US gov't

Have multiple PIV tokens plugged into my computer, want to unambiguously refer to credentials
OpenSC reports all PIV cards as having serial=00000000.  Hmm, why?

piv_card_ctl()... case SC_CARDCTL_GET_SERIALNR... piv_get_serial_nr_from_CHUI()


Ok, let's write the CHUID using yubico-piv-tool set-chui

Why is CHUID so long yet the serial number is so short?
What are these magic, hard-coded values?
TIG SCEPACS
NIST Special Publication 800-73-4


Hmm, that encoding looks broken.  I can fix that.
#178",True,{'THUMBS_UP': ['https://github.com/mouse07410']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,178,2019-01-01T07:20:50Z,2019-01-02T07:51:37Z,2019-01-03T01:58:33Z,MERGED,True,12,12,2,https://github.com/solidgoldbomb,Fix FASC-N encoding,2,[],https://github.com/Yubico/yubico-piv-tool/pull/178,https://github.com/solidgoldbomb,6,https://github.com/Yubico/yubico-piv-tool/pull/178#issuecomment-450789230,"The encoding for the FASC-N field in the CHUID did not match Figure 7 in ""Technical Implementation Guidance: Smart Card Enabled Physical Access Control Systems Version 2.2"" which should be authoritative for this field.
The 5-bit encoding is easy to verify visually.  The first 4-bits should be the number (0-9) encoded in binary and then bit-flipped so that the lsb is first and msb is last.  The 5th bit should be an odd parity across the 4-bit number.  The new perl code matches the spec.
After correcting the fasc.pl tool, I regenerated the CHUID_TMPL in lib/util.c to make use of the corrected encoding.
Tested against a yubikey neo using ykman (reads CHUID) and piv-tool (reads GUID/serial only).
I've also verified that the fixed encoding produces a match with the only online encoder I could find.  That's not much of a proof but it's all I could come up with for interop testing.
The perl code was touched recently in relation to #177, and the discussion included cautions from @mouse07410 about changing this at all but it's so clearly broken in its current state (e.g. '3' generates an entirely invalid BCD code point) that fixing it seems wise.","If this PR gets merged, I'll also open a PR to fix ykman piv set-chuid.  This python code will need to change as well.",True,{'THUMBS_UP': ['https://github.com/mouse07410']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,178,2019-01-01T07:20:50Z,2019-01-02T07:51:37Z,2019-01-03T01:58:33Z,MERGED,True,12,12,2,https://github.com/solidgoldbomb,Fix FASC-N encoding,2,[],https://github.com/Yubico/yubico-piv-tool/pull/178,https://github.com/klali,7,https://github.com/Yubico/yubico-piv-tool/pull/178#issuecomment-450802769,"The encoding for the FASC-N field in the CHUID did not match Figure 7 in ""Technical Implementation Guidance: Smart Card Enabled Physical Access Control Systems Version 2.2"" which should be authoritative for this field.
The 5-bit encoding is easy to verify visually.  The first 4-bits should be the number (0-9) encoded in binary and then bit-flipped so that the lsb is first and msb is last.  The 5th bit should be an odd parity across the 4-bit number.  The new perl code matches the spec.
After correcting the fasc.pl tool, I regenerated the CHUID_TMPL in lib/util.c to make use of the corrected encoding.
Tested against a yubikey neo using ykman (reads CHUID) and piv-tool (reads GUID/serial only).
I've also verified that the fixed encoding produces a match with the only online encoder I could find.  That's not much of a proof but it's all I could come up with for interop testing.
The perl code was touched recently in relation to #177, and the discussion included cautions from @mouse07410 about changing this at all but it's so clearly broken in its current state (e.g. '3' generates an entirely invalid BCD code point) that fixing it seems wise.","This looks sane to me, matching with something else (the referenced website) is good enough for me.
Thanks!",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,178,2019-01-01T07:20:50Z,2019-01-02T07:51:37Z,2019-01-03T01:58:33Z,MERGED,True,12,12,2,https://github.com/solidgoldbomb,Fix FASC-N encoding,2,[],https://github.com/Yubico/yubico-piv-tool/pull/178,https://github.com/solidgoldbomb,8,https://github.com/Yubico/yubico-piv-tool/pull/178#issuecomment-450999221,"The encoding for the FASC-N field in the CHUID did not match Figure 7 in ""Technical Implementation Guidance: Smart Card Enabled Physical Access Control Systems Version 2.2"" which should be authoritative for this field.
The 5-bit encoding is easy to verify visually.  The first 4-bits should be the number (0-9) encoded in binary and then bit-flipped so that the lsb is first and msb is last.  The 5th bit should be an odd parity across the 4-bit number.  The new perl code matches the spec.
After correcting the fasc.pl tool, I regenerated the CHUID_TMPL in lib/util.c to make use of the corrected encoding.
Tested against a yubikey neo using ykman (reads CHUID) and piv-tool (reads GUID/serial only).
I've also verified that the fixed encoding produces a match with the only online encoder I could find.  That's not much of a proof but it's all I could come up with for interop testing.
The perl code was touched recently in relation to #177, and the discussion included cautions from @mouse07410 about changing this at all but it's so clearly broken in its current state (e.g. '3' generates an entirely invalid BCD code point) that fixing it seems wise.",Thanks for the review and for merging.  Companion fix for ykman has also been pushed.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,178,2019-01-01T07:20:50Z,2019-01-02T07:51:37Z,2019-01-03T01:58:33Z,MERGED,True,12,12,2,https://github.com/solidgoldbomb,Fix FASC-N encoding,2,[],https://github.com/Yubico/yubico-piv-tool/pull/178,https://github.com/mouse07410,9,https://github.com/Yubico/yubico-piv-tool/pull/178#issuecomment-451038246,"The encoding for the FASC-N field in the CHUID did not match Figure 7 in ""Technical Implementation Guidance: Smart Card Enabled Physical Access Control Systems Version 2.2"" which should be authoritative for this field.
The 5-bit encoding is easy to verify visually.  The first 4-bits should be the number (0-9) encoded in binary and then bit-flipped so that the lsb is first and msb is last.  The 5th bit should be an odd parity across the 4-bit number.  The new perl code matches the spec.
After correcting the fasc.pl tool, I regenerated the CHUID_TMPL in lib/util.c to make use of the corrected encoding.
Tested against a yubikey neo using ykman (reads CHUID) and piv-tool (reads GUID/serial only).
I've also verified that the fixed encoding produces a match with the only online encoder I could find.  That's not much of a proof but it's all I could come up with for interop testing.
The perl code was touched recently in relation to #177, and the discussion included cautions from @mouse07410 about changing this at all but it's so clearly broken in its current state (e.g. '3' generates an entirely invalid BCD code point) that fixing it seems wise.","Companion fix for ykman has also been pushed

Funny, I can't seem to find that repo. Would you mind posting the pointer here?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,178,2019-01-01T07:20:50Z,2019-01-02T07:51:37Z,2019-01-03T01:58:33Z,MERGED,True,12,12,2,https://github.com/solidgoldbomb,Fix FASC-N encoding,2,[],https://github.com/Yubico/yubico-piv-tool/pull/178,https://github.com/solidgoldbomb,10,https://github.com/Yubico/yubico-piv-tool/pull/178#issuecomment-451039170,"The encoding for the FASC-N field in the CHUID did not match Figure 7 in ""Technical Implementation Guidance: Smart Card Enabled Physical Access Control Systems Version 2.2"" which should be authoritative for this field.
The 5-bit encoding is easy to verify visually.  The first 4-bits should be the number (0-9) encoded in binary and then bit-flipped so that the lsb is first and msb is last.  The 5th bit should be an odd parity across the 4-bit number.  The new perl code matches the spec.
After correcting the fasc.pl tool, I regenerated the CHUID_TMPL in lib/util.c to make use of the corrected encoding.
Tested against a yubikey neo using ykman (reads CHUID) and piv-tool (reads GUID/serial only).
I've also verified that the fixed encoding produces a match with the only online encoder I could find.  That's not much of a proof but it's all I could come up with for interop testing.
The perl code was touched recently in relation to #177, and the discussion included cautions from @mouse07410 about changing this at all but it's so clearly broken in its current state (e.g. '3' generates an entirely invalid BCD code point) that fixing it seems wise.",Yubico/yubikey-manager#200,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,179,2019-01-10T14:52:08Z,2019-01-11T15:40:37Z,2019-01-11T15:40:37Z,CLOSED,False,39,14,1,https://github.com/smrt28,read-object action for pin protected objects,1,[],https://github.com/Yubico/yubico-piv-tool/pull/179,https://github.com/smrt28,1,https://github.com/Yubico/yubico-piv-tool/pull/179,"With the patch, you can now read the pin protected objects. yubico-piv-tool would ask for the pin if needed.
$ ./yubico-piv-tool -a read-object --id=0x5fc103  -f binary
Enter PIN: 
Successfully verified PIN.
12345","With the patch, you can now read the pin protected objects. yubico-piv-tool would ask for the pin if needed.
$ ./yubico-piv-tool -a read-object --id=0x5fc103  -f binary
Enter PIN: 
Successfully verified PIN.
12345",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,179,2019-01-10T14:52:08Z,2019-01-11T15:40:37Z,2019-01-11T15:40:37Z,CLOSED,False,39,14,1,https://github.com/smrt28,read-object action for pin protected objects,1,[],https://github.com/Yubico/yubico-piv-tool/pull/179,https://github.com/klali,2,https://github.com/Yubico/yubico-piv-tool/pull/179#issuecomment-453531319,"With the patch, you can now read the pin protected objects. yubico-piv-tool would ask for the pin if needed.
$ ./yubico-piv-tool -a read-object --id=0x5fc103  -f binary
Enter PIN: 
Successfully verified PIN.
12345","Hey,
I'm not sure about this feature (but I can be persuaded). We don't do automatic verification in other cases where it might be necessary, rather we fail and let the user decide to verify pin.
Thoughts?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,179,2019-01-10T14:52:08Z,2019-01-11T15:40:37Z,2019-01-11T15:40:37Z,CLOSED,False,39,14,1,https://github.com/smrt28,read-object action for pin protected objects,1,[],https://github.com/Yubico/yubico-piv-tool/pull/179,https://github.com/smrt28,3,https://github.com/Yubico/yubico-piv-tool/pull/179#issuecomment-453541815,"With the patch, you can now read the pin protected objects. yubico-piv-tool would ask for the pin if needed.
$ ./yubico-piv-tool -a read-object --id=0x5fc103  -f binary
Enter PIN: 
Successfully verified PIN.
12345","Oh, thanks for the hint. I just realized I can pass several actions to the piv-tool. Passing -averify as the very first argument is definitely the correct way. The patch is nonsense. Sorry about that.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,179,2019-01-10T14:52:08Z,2019-01-11T15:40:37Z,2019-01-11T15:40:37Z,CLOSED,False,39,14,1,https://github.com/smrt28,read-object action for pin protected objects,1,[],https://github.com/Yubico/yubico-piv-tool/pull/179,https://github.com/klali,4,https://github.com/Yubico/yubico-piv-tool/pull/179#issuecomment-453558068,"With the patch, you can now read the pin protected objects. yubico-piv-tool would ask for the pin if needed.
$ ./yubico-piv-tool -a read-object --id=0x5fc103  -f binary
Enter PIN: 
Successfully verified PIN.
12345","Ok. Maybe we need clearer documentation around that? Feel free to propose new patches for fixing annoyances/bad docs.
Thanks!",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,182,2019-02-15T12:16:05Z,2019-02-15T12:35:11Z,2020-07-14T13:19:11Z,MERGED,True,28,0,1,https://github.com/klali,tool: add extensions for selfsigned certificates to match openssl,1,[],https://github.com/Yubico/yubico-piv-tool/pull/182,https://github.com/klali,1,https://github.com/Yubico/yubico-piv-tool/pull/182,"this adds subjectKeyIdentifier, authorityKeyIdentifier and
basicConstraints (CA:TRUE) for selfsigned certificates to match with
openssl req","this adds subjectKeyIdentifier, authorityKeyIdentifier and
basicConstraints (CA:TRUE) for selfsigned certificates to match with
openssl req",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,183,2019-02-15T14:01:07Z,2019-02-15T15:06:30Z,2020-07-14T13:19:05Z,MERGED,True,31,6,1,https://github.com/klali,tool: fix selfsigned extensions,1,[],https://github.com/Yubico/yubico-piv-tool/pull/183,https://github.com/klali,1,https://github.com/Yubico/yubico-piv-tool/pull/183,previous code was on the naive side,previous code was on the naive side,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,184,2019-02-20T15:04:39Z,2019-02-20T15:09:56Z,2019-02-20T15:10:18Z,MERGED,True,11,2,1,https://github.com/nevun,Check return value of strdup,1,[],https://github.com/Yubico/yubico-piv-tool/pull/184,https://github.com/nevun,1,https://github.com/Yubico/yubico-piv-tool/pull/184,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,186,2019-03-05T07:02:13Z,2019-03-05T07:16:54Z,2019-03-06T16:25:43Z,MERGED,True,3,3,1,https://github.com/martelletto,doc: rely on /dev/urandom's distribution to generate secrets,1,[],https://github.com/Yubico/yubico-piv-tool/pull/186,https://github.com/martelletto,1,https://github.com/Yubico/yubico-piv-tool/pull/186,as per Yubico/developers.yubico.com#87,as per Yubico/developers.yubico.com#87,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,187,2019-03-06T13:47:53Z,2019-03-06T14:27:41Z,2019-03-06T14:39:12Z,MERGED,True,1,9,1,https://github.com/nevun,Pvs remove warnings,3,[],https://github.com/Yubico/yubico-piv-tool/pull/187,https://github.com/nevun,1,https://github.com/Yubico/yubico-piv-tool/pull/187,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,188,2019-04-02T00:13:41Z,2019-04-03T08:28:52Z,2019-05-06T21:42:41Z,CLOSED,False,130,32,4,https://github.com/notdpate,Security Review Fixes,13,[],https://github.com/Yubico/yubico-piv-tool/pull/188,https://github.com/notdpate,1,https://github.com/Yubico/yubico-piv-tool/pull/188,Includes security review fixes and minor updates shipped with ykmd 4.0.4.164.,Includes security review fixes and minor updates shipped with ykmd 4.0.4.164.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,188,2019-04-02T00:13:41Z,2019-04-03T08:28:52Z,2019-05-06T21:42:41Z,CLOSED,False,130,32,4,https://github.com/notdpate,Security Review Fixes,13,[],https://github.com/Yubico/yubico-piv-tool/pull/188,https://github.com/klali,2,https://github.com/Yubico/yubico-piv-tool/pull/188#issuecomment-479391678,Includes security review fixes and minor updates shipped with ykmd 4.0.4.164.,This is now merged as 3d084c6,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,191,2019-05-06T21:50:12Z,2019-05-07T12:44:45Z,2020-02-24T12:48:07Z,MERGED,True,23,4,3,https://github.com/notdpate,Serial number + Windows build fixes,1,[],https://github.com/Yubico/yubico-piv-tool/pull/191,https://github.com/notdpate,1,https://github.com/Yubico/yubico-piv-tool/pull/191,"lib: warn, but don't fail on error reading serial number or version
lib: fix Windows build with OpenSSL 1.1.1
ykcs11: fix size_t/unsigned long type mismatch on Windows x64","lib: warn, but don't fail on error reading serial number or version
lib: fix Windows build with OpenSSL 1.1.1
ykcs11: fix size_t/unsigned long type mismatch on Windows x64",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,193,2019-05-19T02:45:14Z,2019-05-20T07:05:10Z,2019-05-20T07:05:11Z,MERGED,True,2,0,1,https://github.com/kelbyludwig,Ignore CKA_LABEL on calls to check_{pub/pvt}key_template,1,[],https://github.com/Yubico/yubico-piv-tool/pull/193,https://github.com/kelbyludwig,1,https://github.com/Yubico/yubico-piv-tool/pull/193,"Adding a CKA_LABEL attribute when calling C_GenerateKeyPair will cause a CKR_ATTRIBUTE_TYPE_INVALID error as it is falls through to the default case.
It appears that the label value defaults to e.g. Public key for PIV Authentication so I assumed this error is not necessary.","Adding a CKA_LABEL attribute when calling C_GenerateKeyPair will cause a CKR_ATTRIBUTE_TYPE_INVALID error as it is falls through to the default case.
It appears that the label value defaults to e.g. Public key for PIV Authentication so I assumed this error is not necessary.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,193,2019-05-19T02:45:14Z,2019-05-20T07:05:10Z,2019-05-20T07:05:11Z,MERGED,True,2,0,1,https://github.com/kelbyludwig,Ignore CKA_LABEL on calls to check_{pub/pvt}key_template,1,[],https://github.com/Yubico/yubico-piv-tool/pull/193,https://github.com/a-dma,2,https://github.com/Yubico/yubico-piv-tool/pull/193#issuecomment-493863161,"Adding a CKA_LABEL attribute when calling C_GenerateKeyPair will cause a CKR_ATTRIBUTE_TYPE_INVALID error as it is falls through to the default case.
It appears that the label value defaults to e.g. Public key for PIV Authentication so I assumed this error is not necessary.",Thanks.,True,{'THUMBS_UP': ['https://github.com/kelbyludwig']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,194,2019-05-21T15:10:03Z,2019-05-22T10:33:23Z,2019-05-22T10:33:23Z,MERGED,True,4,0,2,https://github.com/vathpela,Initialize C_Initialize's reader list to NULs.,1,[],https://github.com/Yubico/yubico-piv-tool/pull/194,https://github.com/vathpela,1,https://github.com/Yubico/yubico-piv-tool/pull/194,"valgrind --track-origins=true says:
==13529== Conditional jump or move depends on uninitialised value(s)
==13529==    at 0x4AF92D1: PK11_MakeString (pk11slot.c:1073)
==13529==    by 0x4AFA5AA: PK11_InitSlot (pk11slot.c:1456)
==13529==    by 0x4AE315E: secmod_LoadPKCS11Module (pk11load.c:563)
==13529==    by 0x4AEF68C: SECMOD_LoadModule (pk11pars.c:1838)
==13529==    by 0x4AEF7C7: SECMOD_LoadModule (pk11pars.c:1874)
==13529==    by 0x4ABCB6A: nss_InitModules (nssinit.c:464)
==13529==    by 0x4ABCB6A: nss_Init (nssinit.c:689)
==13529==    by 0x4ABD17C: NSS_Init (nssinit.c:824)
==13529==    by 0x4059C0: main (pesign.c:354)
==13529==  Uninitialised value was created by a stack allocation
==13529==    at 0x484D175: C_Initialize (in /usr/lib64/libykcs11.so.1.5.0)
This is the result of a combination of two problems.  In
ykcs11/utils.c:parse_readers(), the code does:
for (i = 0; i < len; i++)
if (readers[i] == '\0' && i != len - 1) {
But in ykcs11/ykcs11.c:C_Initialize(), the parts of readers[] that are
initialized are only the parts that have been populated; the rest of
the array is still just whatever value is on the stack.  Additionally,
in lib/ykpiv.c:ykpiv_list_readers(), which populates the array, the
length is updated only in the case where the buffer is smaller than the
data, not when there is additional buffer but no data:
if (num_readers > *len) {
num_readers = (pcsc_word)*len;
}
The result is that if the amount of reader data is smaller than 2048
bytes, PK11_InitSlot() will try to find reader data in the rest of the
array, which has not been initialized.
This patch adds an initialization for the data to set it all '\0', and
also updates the length when there is excess buffer available.
Signed-off-by: Peter Jones pjones@redhat.com","valgrind --track-origins=true says:
==13529== Conditional jump or move depends on uninitialised value(s)
==13529==    at 0x4AF92D1: PK11_MakeString (pk11slot.c:1073)
==13529==    by 0x4AFA5AA: PK11_InitSlot (pk11slot.c:1456)
==13529==    by 0x4AE315E: secmod_LoadPKCS11Module (pk11load.c:563)
==13529==    by 0x4AEF68C: SECMOD_LoadModule (pk11pars.c:1838)
==13529==    by 0x4AEF7C7: SECMOD_LoadModule (pk11pars.c:1874)
==13529==    by 0x4ABCB6A: nss_InitModules (nssinit.c:464)
==13529==    by 0x4ABCB6A: nss_Init (nssinit.c:689)
==13529==    by 0x4ABD17C: NSS_Init (nssinit.c:824)
==13529==    by 0x4059C0: main (pesign.c:354)
==13529==  Uninitialised value was created by a stack allocation
==13529==    at 0x484D175: C_Initialize (in /usr/lib64/libykcs11.so.1.5.0)
This is the result of a combination of two problems.  In
ykcs11/utils.c:parse_readers(), the code does:
for (i = 0; i < len; i++)
if (readers[i] == '\0' && i != len - 1) {
But in ykcs11/ykcs11.c:C_Initialize(), the parts of readers[] that are
initialized are only the parts that have been populated; the rest of
the array is still just whatever value is on the stack.  Additionally,
in lib/ykpiv.c:ykpiv_list_readers(), which populates the array, the
length is updated only in the case where the buffer is smaller than the
data, not when there is additional buffer but no data:
if (num_readers > *len) {
num_readers = (pcsc_word)*len;
}
The result is that if the amount of reader data is smaller than 2048
bytes, PK11_InitSlot() will try to find reader data in the rest of the
array, which has not been initialized.
This patch adds an initialization for the data to set it all '\0', and
also updates the length when there is excess buffer available.
Signed-off-by: Peter Jones pjones@redhat.com",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,194,2019-05-21T15:10:03Z,2019-05-22T10:33:23Z,2019-05-22T10:33:23Z,MERGED,True,4,0,2,https://github.com/vathpela,Initialize C_Initialize's reader list to NULs.,1,[],https://github.com/Yubico/yubico-piv-tool/pull/194,https://github.com/vathpela,2,https://github.com/Yubico/yubico-piv-tool/pull/194#issuecomment-494467353,"valgrind --track-origins=true says:
==13529== Conditional jump or move depends on uninitialised value(s)
==13529==    at 0x4AF92D1: PK11_MakeString (pk11slot.c:1073)
==13529==    by 0x4AFA5AA: PK11_InitSlot (pk11slot.c:1456)
==13529==    by 0x4AE315E: secmod_LoadPKCS11Module (pk11load.c:563)
==13529==    by 0x4AEF68C: SECMOD_LoadModule (pk11pars.c:1838)
==13529==    by 0x4AEF7C7: SECMOD_LoadModule (pk11pars.c:1874)
==13529==    by 0x4ABCB6A: nss_InitModules (nssinit.c:464)
==13529==    by 0x4ABCB6A: nss_Init (nssinit.c:689)
==13529==    by 0x4ABD17C: NSS_Init (nssinit.c:824)
==13529==    by 0x4059C0: main (pesign.c:354)
==13529==  Uninitialised value was created by a stack allocation
==13529==    at 0x484D175: C_Initialize (in /usr/lib64/libykcs11.so.1.5.0)
This is the result of a combination of two problems.  In
ykcs11/utils.c:parse_readers(), the code does:
for (i = 0; i < len; i++)
if (readers[i] == '\0' && i != len - 1) {
But in ykcs11/ykcs11.c:C_Initialize(), the parts of readers[] that are
initialized are only the parts that have been populated; the rest of
the array is still just whatever value is on the stack.  Additionally,
in lib/ykpiv.c:ykpiv_list_readers(), which populates the array, the
length is updated only in the case where the buffer is smaller than the
data, not when there is additional buffer but no data:
if (num_readers > *len) {
num_readers = (pcsc_word)*len;
}
The result is that if the amount of reader data is smaller than 2048
bytes, PK11_InitSlot() will try to find reader data in the rest of the
array, which has not been initialized.
This patch adds an initialization for the data to set it all '\0', and
also updates the length when there is excess buffer available.
Signed-off-by: Peter Jones pjones@redhat.com","It looks like many PRs on this project fail coverage and get merged anyway, and coverage is only at 3% - is this CI failure something I should concern myself with?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,194,2019-05-21T15:10:03Z,2019-05-22T10:33:23Z,2019-05-22T10:33:23Z,MERGED,True,4,0,2,https://github.com/vathpela,Initialize C_Initialize's reader list to NULs.,1,[],https://github.com/Yubico/yubico-piv-tool/pull/194,https://github.com/a-dma,3,https://github.com/Yubico/yubico-piv-tool/pull/194#issuecomment-494726436,"valgrind --track-origins=true says:
==13529== Conditional jump or move depends on uninitialised value(s)
==13529==    at 0x4AF92D1: PK11_MakeString (pk11slot.c:1073)
==13529==    by 0x4AFA5AA: PK11_InitSlot (pk11slot.c:1456)
==13529==    by 0x4AE315E: secmod_LoadPKCS11Module (pk11load.c:563)
==13529==    by 0x4AEF68C: SECMOD_LoadModule (pk11pars.c:1838)
==13529==    by 0x4AEF7C7: SECMOD_LoadModule (pk11pars.c:1874)
==13529==    by 0x4ABCB6A: nss_InitModules (nssinit.c:464)
==13529==    by 0x4ABCB6A: nss_Init (nssinit.c:689)
==13529==    by 0x4ABD17C: NSS_Init (nssinit.c:824)
==13529==    by 0x4059C0: main (pesign.c:354)
==13529==  Uninitialised value was created by a stack allocation
==13529==    at 0x484D175: C_Initialize (in /usr/lib64/libykcs11.so.1.5.0)
This is the result of a combination of two problems.  In
ykcs11/utils.c:parse_readers(), the code does:
for (i = 0; i < len; i++)
if (readers[i] == '\0' && i != len - 1) {
But in ykcs11/ykcs11.c:C_Initialize(), the parts of readers[] that are
initialized are only the parts that have been populated; the rest of
the array is still just whatever value is on the stack.  Additionally,
in lib/ykpiv.c:ykpiv_list_readers(), which populates the array, the
length is updated only in the case where the buffer is smaller than the
data, not when there is additional buffer but no data:
if (num_readers > *len) {
num_readers = (pcsc_word)*len;
}
The result is that if the amount of reader data is smaller than 2048
bytes, PK11_InitSlot() will try to find reader data in the rest of the
array, which has not been initialized.
This patch adds an initialization for the data to set it all '\0', and
also updates the length when there is excess buffer available.
Signed-off-by: Peter Jones pjones@redhat.com","Hi, thanks for the contribution.
The PKCS#11 part of this module is in a bit of a dire state. It needs some serious cleanup and most likely a major version bump when that's done. Regardless, I believe these kind of contribution are still useful.
As far as coverage goes, that's quite tricky because many functions require a YubiKey to be tested, and that's not easily achievable on Travis. I'd say that failing to build is not OK, but decreasing coverage (by 0.001%) is not a big deal.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,196,2019-06-24T13:31:04Z,2019-06-24T13:55:14Z,2019-06-24T13:55:19Z,MERGED,True,0,4,1,https://github.com/dainnilsson,Remove note about ifd-yubico.,1,[],https://github.com/Yubico/yubico-piv-tool/pull/196,https://github.com/dainnilsson,1,https://github.com/Yubico/yubico-piv-tool/pull/196,This is deprecated and no longer needed.,This is deprecated and no longer needed.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,198,2019-07-12T16:44:53Z,2019-07-15T07:20:04Z,2019-07-15T07:20:16Z,MERGED,True,19,4,1,https://github.com/tharsanrp,lib: Implemented change pin for the management key,1,[],https://github.com/Yubico/yubico-piv-tool/pull/198,https://github.com/tharsanrp,1,https://github.com/Yubico/yubico-piv-tool/pull/198,Add the ability for ykcs11 to change the management key,Add the ability for ykcs11 to change the management key,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,198,2019-07-12T16:44:53Z,2019-07-15T07:20:04Z,2019-07-15T07:20:16Z,MERGED,True,19,4,1,https://github.com/tharsanrp,lib: Implemented change pin for the management key,1,[],https://github.com/Yubico/yubico-piv-tool/pull/198,https://github.com/a-dma,2,https://github.com/Yubico/yubico-piv-tool/pull/198#issuecomment-511297493,Add the ability for ykcs11 to change the management key,Thanks.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,201,2019-07-16T20:05:36Z,2019-07-17T07:29:58Z,2019-07-17T07:29:58Z,MERGED,True,7,1,1,https://github.com/tharsanrp,lib: Implemented change pin for the puk key,1,[],https://github.com/Yubico/yubico-piv-tool/pull/201,https://github.com/tharsanrp,1,https://github.com/Yubico/yubico-piv-tool/pull/201,,,True,{'THUMBS_UP': ['https://github.com/mouse07410']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,202,2019-07-17T14:34:34Z,2019-08-16T14:32:27Z,2020-07-14T13:17:36Z,MERGED,True,288,32,11,https://github.com/aveenismail,Support for EC curve P-384,15,[],https://github.com/Yubico/yubico-piv-tool/pull/202,https://github.com/aveenismail,1,https://github.com/Yubico/yubico-piv-tool/pull/202,@a-dma @klali,@a-dma @klali,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,202,2019-07-17T14:34:34Z,2019-08-16T14:32:27Z,2020-07-14T13:17:36Z,MERGED,True,288,32,11,https://github.com/aveenismail,Support for EC curve P-384,15,[],https://github.com/Yubico/yubico-piv-tool/pull/202,https://github.com/a-dma,2,https://github.com/Yubico/yubico-piv-tool/pull/202#issuecomment-517245656,@a-dma @klali,"There's quite a few whitespace changes, trailing whitespaces and tabs added.
Can you please remove those?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,206,2019-08-12T11:00:09Z,2020-01-29T09:18:06Z,2020-07-14T13:17:25Z,MERGED,True,112,112,2,https://github.com/aveenismail,ykcs11: Rearranged slot IDs to match OpenSC IDs,1,[],https://github.com/Yubico/yubico-piv-tool/pull/206,https://github.com/aveenismail,1,https://github.com/Yubico/yubico-piv-tool/pull/206,@a-dma @klali,@a-dma @klali,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,206,2019-08-12T11:00:09Z,2020-01-29T09:18:06Z,2020-07-14T13:17:25Z,MERGED,True,112,112,2,https://github.com/aveenismail,ykcs11: Rearranged slot IDs to match OpenSC IDs,1,[],https://github.com/Yubico/yubico-piv-tool/pull/206,https://github.com/mouse07410,2,https://github.com/Yubico/yubico-piv-tool/pull/206#issuecomment-523269480,@a-dma @klali,"There's a problem in this PR - it fails to actually match the slot IDs.
Example: this is supposed to be a SIGN cert in a slot 02, with Key Usage = {Digital Signature, Non-repudiation}:
$ pkcs11-tool --module /usr/local/lib/libykcs11.dylib --read-object --id 02 --type cert | openssl x509 -inform DER -text
Using slot 0 with a present token (0x0)
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1470750646 (0x57a9dfb6)
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: CN = Forest CA RSA 4
     . . . . .
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: critical
                Digital Signature
            X509v3 Subject Alternative Name: 
                othername:<unsupported>
            X509v3 Extended Key Usage: 
                TLS Web Client Authentication, Microsoft Smartcardlogin

Based on the above output, it picked the PIV Auth certificate that OpenSC considers to be in the slot 01.
As a matter of fact, my fork https://github.com/mouse07410/yubico-piv-tool.git appears to do better than this PR (though still not ideal, as can be seen from using p11tool). Perhaps you may want to make a PR based on it?
Here's what my fork produces (CARD Auth, Key Usage = {Digital Signature}):
$ pkcs11-tool --module /usr/local/lib/libykcs11.dylib --read-object --id 04 --type cert | openssl x509 -inform DER -noout -text
Using slot 0 with a present token (0x0)
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1468961354 (0x578e924a)
        Signature Algorithm: sha256WithRSAEncryption
       . . . . .
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: 
                Digital Signature
    Signature Algorithm: sha256WithRSAEncryption
  . . . . .
$ pkcs11-tool --read-object --id 04 --type cert | openssl x509 -inform DER -noout -text
Using slot 0 with a present token (0x0)
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1468961354 (0x578e924a)
        Signature Algorithm: sha256WithRSAEncryption
. . . . .
        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Key Usage: 
                Digital Signature
    Signature Algorithm: sha256WithRSAEncryption
. . . . .",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,206,2019-08-12T11:00:09Z,2020-01-29T09:18:06Z,2020-07-14T13:17:25Z,MERGED,True,112,112,2,https://github.com/aveenismail,ykcs11: Rearranged slot IDs to match OpenSC IDs,1,[],https://github.com/Yubico/yubico-piv-tool/pull/206,https://github.com/aveenismail,3,https://github.com/Yubico/yubico-piv-tool/pull/206#issuecomment-533121905,@a-dma @klali,"Sorry for the delay in checking this.
I created the following keys on the yubikey PIV interface:

Slot 9a - PIV Authentication - Algorithm EC 256
Slot 9d - Key Management - Algorithm RSA1024
Slot 9e - Card Authentication - Algorithm RSA2048

With this PR applied, I run the following 2 commands:
>> pkcs11-tool --module opensc-pkcs11.so -O
...
Public Key Object; RSA 1024 bits
  label:      KEY MAN pubkey
  ID:         03
  Usage:      encrypt, wrap
Certificate Object; type = X.509 cert
  label:      Certificate for Key Management
  ID:         03

Certificate Object; type = X.509 cert
  label:      Certificate for PIV Authentication
  ID:         01
Public Key Object; EC  EC_POINT 256 bits
  EC_POINT:   0441049cc1d8819d4f96da5b5018e94dd72e5c4f4e5715449b0039b01ceff0c680ff5c7f1c7f8046f5c6612d6a4cdb9097263bb461ec597128cc5fcd3684729d9e1232
  EC_PARAMS:  06082a8648ce3d030107
  label:      PIV AUTH pubkey
  ID:         01
  Usage:      verify

Private Key Object; RSA 
  label:      CARD AUTH key
  ID:         04
  Usage:      sign
Public Key Object; RSA 2048 bits
  label:      CARD AUTH pubkey
  ID:         04
  Usage:      verify
Certificate Object; type = X.509 cert
  label:      Certificate for Card Authentication
  ID:         04
...

>> pkcs11-tool --module libykcs11.so -O
...
Certificate Object; type = X.509 cert
  label:      X.509 Certificate for PIV Authentication
  ID:         01
Public Key Object; EC  EC_POINT 256 bits
  EC_POINT:   0441049cc1d8819d4f96da5b5018e94dd72e5c4f4e5715449b0039b01ceff0c680ff5c7f1c7f8046f5c6612d6a4cdb9097263bb461ec597128cc5fcd3684729d9e1232
  EC_PARAMS:  06082a8648ce3d030107
  label:      Public key for PIV Authentication
  ID:         01
  Usage:      encrypt, verify

Certificate Object; type = X.509 cert
  label:      X.509 Certificate for Card Authentication
  ID:         04
Public Key Object; RSA 2048 bits
  label:      Public key for Card Authentication
  ID:         04
  Usage:      encrypt, verify

Certificate Object; type = X.509 cert
  label:      X.509 Certificate for Key Management
  ID:         03
Public Key Object; RSA 1024 bits
  label:      Public key for Key Management
  ID:         03
  Usage:      encrypt, verify
...


I also read the certificate with ID 01 with the following commands:
>> pkcs11-tool --module opensc-pkcs11.so --read-object --id 01 --type cert | openssl x509 -inform DER -text
Using slot 0 with a present token (0x0)
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            30:54:86:1f:d7:3c:85:ca:d2:e8:c1:dc:74:e2:54:5e:db:53:63:72
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: CN = aveen
        Validity
            Not Before: Sep 19 11:44:07 2019 GMT
            Not After : Sep 19 00:00:00 2020 GMT
        Subject: CN = aveen
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:9c:c1:d8:81:9d:4f:96:da:5b:50:18:e9:4d:d7:
                    2e:5c:4f:4e:57:15:44:9b:00:39:b0:1c:ef:f0:c6:
                    80:ff:5c:7f:1c:7f:80:46:f5:c6:61:2d:6a:4c:db:
                    90:97:26:3b:b4:61:ec:59:71:28:cc:5f:cd:36:84:
                    72:9d:9e:12:32
                ASN1 OID: prime256v1
                NIST CURVE: P-256
    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:4d:a7:c3:2e:f5:aa:7b:12:5c:46:e4:61:d4:10:
         a9:47:ed:03:36:be:38:ea:38:50:36:ed:e8:09:f3:fc:82:9a:
         02:21:00:a6:f8:7a:56:79:e2:d8:0d:76:98:cb:eb:11:79:da:
         4d:67:6d:96:ec:b9:16:04:48:00:bb:51:86:99:5c:6b:fe
-----BEGIN CERTIFICATE-----
MIIBHzCBxqADAgECAhQwVIYf1zyFytLowdx04lRe21NjcjAKBggqhkjOPQQDAjAQ
MQ4wDAYDVQQDDAVhdmVlbjAeFw0xOTA5MTkxMTQ0MDdaFw0yMDA5MTkwMDAwMDBa
MBAxDjAMBgNVBAMMBWF2ZWVuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEnMHY
gZ1PltpbUBjpTdcuXE9OVxVEmwA5sBzv8MaA/1x/HH+ARvXGYS1qTNuQlyY7tGHs
WXEozF/NNoRynZ4SMjAKBggqhkjOPQQDAgNIADBFAiBNp8Mu9ap7ElxG5GHUEKlH
7QM2vjjqOFA27egJ8/yCmgIhAKb4elZ54tgNdpjL6xF52k1nbZbsuRYESAC7UYaZ
XGv+
-----END CERTIFICATE-----


>> pkcs11-tool --module libykcs11.so --read-object --id 01 --type cert | openssl x509 -inform DER -text
Using slot 0 with a present token (0x0)
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            30:54:86:1f:d7:3c:85:ca:d2:e8:c1:dc:74:e2:54:5e:db:53:63:72
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: CN = aveen
        Validity
            Not Before: Sep 19 11:44:07 2019 GMT
            Not After : Sep 19 00:00:00 2020 GMT
        Subject: CN = aveen
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:9c:c1:d8:81:9d:4f:96:da:5b:50:18:e9:4d:d7:
                    2e:5c:4f:4e:57:15:44:9b:00:39:b0:1c:ef:f0:c6:
                    80:ff:5c:7f:1c:7f:80:46:f5:c6:61:2d:6a:4c:db:
                    90:97:26:3b:b4:61:ec:59:71:28:cc:5f:cd:36:84:
                    72:9d:9e:12:32
                ASN1 OID: prime256v1
                NIST CURVE: P-256
    Signature Algorithm: ecdsa-with-SHA256
         30:45:02:20:4d:a7:c3:2e:f5:aa:7b:12:5c:46:e4:61:d4:10:
         a9:47:ed:03:36:be:38:ea:38:50:36:ed:e8:09:f3:fc:82:9a:
         02:21:00:a6:f8:7a:56:79:e2:d8:0d:76:98:cb:eb:11:79:da:
         4d:67:6d:96:ec:b9:16:04:48:00:bb:51:86:99:5c:6b:fe
-----BEGIN CERTIFICATE-----
MIIBHzCBxqADAgECAhQwVIYf1zyFytLowdx04lRe21NjcjAKBggqhkjOPQQDAjAQ
MQ4wDAYDVQQDDAVhdmVlbjAeFw0xOTA5MTkxMTQ0MDdaFw0yMDA5MTkwMDAwMDBa
MBAxDjAMBgNVBAMMBWF2ZWVuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEnMHY
gZ1PltpbUBjpTdcuXE9OVxVEmwA5sBzv8MaA/1x/HH+ARvXGYS1qTNuQlyY7tGHs
WXEozF/NNoRynZ4SMjAKBggqhkjOPQQDAgNIADBFAiBNp8Mu9ap7ElxG5GHUEKlH
7QM2vjjqOFA27egJ8/yCmgIhAKb4elZ54tgNdpjL6xF52k1nbZbsuRYESAC7UYaZ
XGv+
-----END CERTIFICATE-----


The certificates returned using both libykcs11.so and opensc.so were identical. I read the certificates in the other slots too any they were also identical when read using libykcs11.so and opensc.so",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,207,2019-08-16T10:09:57Z,2019-08-19T07:01:24Z,2020-07-14T13:17:47Z,MERGED,True,573,0,13,https://github.com/aveenismail,Added documentation for command line actions,1,[],https://github.com/Yubico/yubico-piv-tool/pull/207,https://github.com/aveenismail,1,https://github.com/Yubico/yubico-piv-tool/pull/207,@a-dma @klali,@a-dma @klali,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,209,2019-08-26T19:10:22Z,2019-09-16T07:27:18Z,2020-05-06T23:59:40Z,MERGED,True,1,1,1,https://github.com/gcbw,error message when yubikey must be reinserted.,2,[],https://github.com/Yubico/yubico-piv-tool/pull/209,https://github.com/gcbw,1,https://github.com/Yubico/yubico-piv-tool/pull/209,"instead of repeating almost word-for-word the diagnostic error from ykcs11 lib (which is show right above this line btw), show something that have any meaning to the end user, who likely do not know what a ""reader"" is.
Before:
$ yubico-piv-tool --verbose -a status
error: no usable reader found.
Failed to connect to reader.

after
$ yubico-piv-tool --verbose -a status
error: no usable reader found.
Failed to connect to yubikey.
Have you tried turning it off and on again

The last line is, obviously, helpful but extraneous, mostly to make a point that i am not a contributor here and someone who knows the end users better than i do should write the actual new text.","instead of repeating almost word-for-word the diagnostic error from ykcs11 lib (which is show right above this line btw), show something that have any meaning to the end user, who likely do not know what a ""reader"" is.
Before:
$ yubico-piv-tool --verbose -a status
error: no usable reader found.
Failed to connect to reader.

after
$ yubico-piv-tool --verbose -a status
error: no usable reader found.
Failed to connect to yubikey.
Have you tried turning it off and on again

The last line is, obviously, helpful but extraneous, mostly to make a point that i am not a contributor here and someone who knows the end users better than i do should write the actual new text.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,209,2019-08-26T19:10:22Z,2019-09-16T07:27:18Z,2020-05-06T23:59:40Z,MERGED,True,1,1,1,https://github.com/gcbw,error message when yubikey must be reinserted.,2,[],https://github.com/Yubico/yubico-piv-tool/pull/209,https://github.com/jmyreen,2,https://github.com/Yubico/yubico-piv-tool/pull/209#issuecomment-525155877,"instead of repeating almost word-for-word the diagnostic error from ykcs11 lib (which is show right above this line btw), show something that have any meaning to the end user, who likely do not know what a ""reader"" is.
Before:
$ yubico-piv-tool --verbose -a status
error: no usable reader found.
Failed to connect to reader.

after
$ yubico-piv-tool --verbose -a status
error: no usable reader found.
Failed to connect to yubikey.
Have you tried turning it off and on again

The last line is, obviously, helpful but extraneous, mostly to make a point that i am not a contributor here and someone who knows the end users better than i do should write the actual new text.","The user may know what a (smart card) reader is, but there is no reader in
this case, since the functionality is integrated in the Yubikey. So I would
remove the ""error: no usable reader found."" too.

Also, how do you ""turn off"" a Yubikey? I suggest the wording ""Try plugging
it out and in again"".

Johan Myréen
(not affiliated with Yubico)
…
On Mon, 26 Aug 2019 at 22:10, gcbw ***@***.***> wrote:
 instead of repeating almost word-for-word the diagnostic error from ykcs11
 lib (which is show right above this line btw), show something that have
 *any* meaning to the end user, who likely do not know what a ""reader"" is.

 Before:

 $ yubico-piv-tool --verbose -a status
 error: no usable reader found.
 Failed to connect to reader.

 after

 $ yubico-piv-tool --verbose -a status
 error: no usable reader found.
 Failed to connect to yubikey.
 Have you tried turning it off and on again

 The last line is, obviously, helpful but extraneous, mostly to make a
 point that i am not a contributor here and someone who knows the end users
 better than i do should write the actual new text.
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #209
 Commit Summary

    - error message when yubikey must be reinserted.

 File Changes

    - *M* tool/yubico-piv-tool.c
    <https://github.com/Yubico/yubico-piv-tool/pull/209/files#diff-0> (2)

 Patch Links:

    - https://github.com/Yubico/yubico-piv-tool/pull/209.patch
    - https://github.com/Yubico/yubico-piv-tool/pull/209.diff

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#209?email_source=notifications&email_token=AG5FNM33KXIALJBBDKK34G3QGQTCBA5CNFSM4IPT4SJ2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HHOSBPA>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AG5FNM2IMSADL37UHCJUNCTQGQTCBANCNFSM4IPT4SJQ>
 .",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,209,2019-08-26T19:10:22Z,2019-09-16T07:27:18Z,2020-05-06T23:59:40Z,MERGED,True,1,1,1,https://github.com/gcbw,error message when yubikey must be reinserted.,2,[],https://github.com/Yubico/yubico-piv-tool/pull/209,https://github.com/gcbw,3,https://github.com/Yubico/yubico-piv-tool/pull/209#issuecomment-525187480,"instead of repeating almost word-for-word the diagnostic error from ykcs11 lib (which is show right above this line btw), show something that have any meaning to the end user, who likely do not know what a ""reader"" is.
Before:
$ yubico-piv-tool --verbose -a status
error: no usable reader found.
Failed to connect to reader.

after
$ yubico-piv-tool --verbose -a status
error: no usable reader found.
Failed to connect to yubikey.
Have you tried turning it off and on again

The last line is, obviously, helpful but extraneous, mostly to make a point that i am not a contributor here and someone who knows the end users better than i do should write the actual new text.","apologies, the ""turn it off and on"" is an anglophone joke.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,210,2019-08-29T07:01:07Z,2019-09-02T07:00:51Z,2019-09-02T07:00:51Z,MERGED,True,1,1,1,https://github.com/secbyd,Clarifying mgmt key error,1,[],https://github.com/Yubico/yubico-piv-tool/pull/210,https://github.com/secbyd,1,https://github.com/Yubico/yubico-piv-tool/pull/210,Key needs to be 48 but also only hexidecimal is supported. This is not very clear in the error nor in documentation at https://developers.yubico.com/yubikey-piv-manager/PIN_and_Management_Key.html,Key needs to be 48 but also only hexidecimal is supported. This is not very clear in the error nor in documentation at https://developers.yubico.com/yubikey-piv-manager/PIN_and_Management_Key.html,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,212,2019-10-02T08:11:22Z,2019-10-02T12:26:35Z,2020-04-01T03:24:10Z,MERGED,True,2,2,1,https://github.com/sgn,yubico-piv-tool: avoid obsolete macro M_ASN1_BIT_STRING_set,1,[],https://github.com/Yubico/yubico-piv-tool/pull/212,https://github.com/sgn,1,https://github.com/Yubico/yubico-piv-tool/pull/212,"From commit f422a51486, (""Remove old ASN.1 code."", 2015-03-14),
OpenSSL no longer provides M_ASN1_* macro.
In that change, OpenSSL replaced M_ASN1_BIT_STRING_set with
ASN1_STRING_set.
Follow OpenSSL steps to support all rolling-release distro.
Signed-off-by: Doan Tran Cong Danh congdanhqx@gmail.com

openssl/openssl@f422a51486","From commit f422a51486, (""Remove old ASN.1 code."", 2015-03-14),
OpenSSL no longer provides M_ASN1_* macro.
In that change, OpenSSL replaced M_ASN1_BIT_STRING_set with
ASN1_STRING_set.
Follow OpenSSL steps to support all rolling-release distro.
Signed-off-by: Doan Tran Cong Danh congdanhqx@gmail.com

openssl/openssl@f422a51486",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,212,2019-10-02T08:11:22Z,2019-10-02T12:26:35Z,2020-04-01T03:24:10Z,MERGED,True,2,2,1,https://github.com/sgn,yubico-piv-tool: avoid obsolete macro M_ASN1_BIT_STRING_set,1,[],https://github.com/Yubico/yubico-piv-tool/pull/212,https://github.com/klali,2,https://github.com/Yubico/yubico-piv-tool/pull/212#issuecomment-537468829,"From commit f422a51486, (""Remove old ASN.1 code."", 2015-03-14),
OpenSSL no longer provides M_ASN1_* macro.
In that change, OpenSSL replaced M_ASN1_BIT_STRING_set with
ASN1_STRING_set.
Follow OpenSSL steps to support all rolling-release distro.
Signed-off-by: Doan Tran Cong Danh congdanhqx@gmail.com

openssl/openssl@f422a51486","Thanks, merging.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,216,2019-12-30T14:39:35Z,2020-01-08T07:27:15Z,2020-01-08T07:27:15Z,MERGED,True,5,0,1,https://github.com/labanskoller,Note about attestation cert problems in YubiKey 4.3,2,[],https://github.com/Yubico/yubico-piv-tool/pull/216,https://github.com/labanskoller,1,https://github.com/Yubico/yubico-piv-tool/pull/216,"Add a note to Using Attestation [1] about the certificate problems with
YubiKey 4.3.
[1] https://developers.yubico.com/yubico-piv-tool/Attestation.html","Add a note to Using Attestation [1] about the certificate problems with
YubiKey 4.3.
[1] https://developers.yubico.com/yubico-piv-tool/Attestation.html",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,216,2019-12-30T14:39:35Z,2020-01-08T07:27:15Z,2020-01-08T07:27:15Z,MERGED,True,5,0,1,https://github.com/labanskoller,Note about attestation cert problems in YubiKey 4.3,2,[],https://github.com/Yubico/yubico-piv-tool/pull/216,https://github.com/labanskoller,2,https://github.com/Yubico/yubico-piv-tool/pull/216#issuecomment-569696362,"Add a note to Using Attestation [1] about the certificate problems with
YubiKey 4.3.
[1] https://developers.yubico.com/yubico-piv-tool/Attestation.html",Note that I've not built the website.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,216,2019-12-30T14:39:35Z,2020-01-08T07:27:15Z,2020-01-08T07:27:15Z,MERGED,True,5,0,1,https://github.com/labanskoller,Note about attestation cert problems in YubiKey 4.3,2,[],https://github.com/Yubico/yubico-piv-tool/pull/216,https://github.com/labanskoller,3,https://github.com/Yubico/yubico-piv-tool/pull/216#issuecomment-569696456,"Add a note to Using Attestation [1] about the certificate problems with
YubiKey 4.3.
[1] https://developers.yubico.com/yubico-piv-tool/Attestation.html",Also my recently published blog post about the certificate problem: https://labanskoller.se/blog/2019/12/30/pki-is-hard-how-yubico-trusted-openssl-and-got-it-wrong/,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,216,2019-12-30T14:39:35Z,2020-01-08T07:27:15Z,2020-01-08T07:27:15Z,MERGED,True,5,0,1,https://github.com/labanskoller,Note about attestation cert problems in YubiKey 4.3,2,[],https://github.com/Yubico/yubico-piv-tool/pull/216,https://github.com/klali,4,https://github.com/Yubico/yubico-piv-tool/pull/216#issuecomment-570186557,"Add a note to Using Attestation [1] about the certificate problems with
YubiKey 4.3.
[1] https://developers.yubico.com/yubico-piv-tool/Attestation.html",Attestation was never available for the Neo so to avoid confusion we should probably not mention it here. Apart from that lgtm.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,216,2019-12-30T14:39:35Z,2020-01-08T07:27:15Z,2020-01-08T07:27:15Z,MERGED,True,5,0,1,https://github.com/labanskoller,Note about attestation cert problems in YubiKey 4.3,2,[],https://github.com/Yubico/yubico-piv-tool/pull/216,https://github.com/labanskoller,5,https://github.com/Yubico/yubico-piv-tool/pull/216#issuecomment-570824178,"Add a note to Using Attestation [1] about the certificate problems with
YubiKey 4.3.
[1] https://developers.yubico.com/yubico-piv-tool/Attestation.html","Attestation was never available for the Neo so to avoid confusion we should probably not mention it here.

Hmm. I don't have a Neo myself but I got that information from the following support article (my emphasis):
https://support.yubico.com/support/solutions/articles/15000013406-piv-attestation-verification-fails-with-openssl-1-1-0

If you are attempting to verify a PIV attestation using the default attestation certificate loaded in the YubiKey 4 or YubiKey NEO and OpenSSL 1.1.0, the verification will fail. This is caused by an issue with the PIV Attestation Root Certificate. Starting with the YubiKey 5 series, an updated PIV Attestation Root Certificate is available which works with OpenSSL 1.1.0. To work around this issue with the YubiKey NEO or YubiKey 4 series devices, you can use the attached Python script and the steps below to verify the attestation certificate chain.

Are you suggesting that the above article is wrong or have I misunderstood anything? If that information is incorrect, will you have it updated or shall I initiate that via your support?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,216,2019-12-30T14:39:35Z,2020-01-08T07:27:15Z,2020-01-08T07:27:15Z,MERGED,True,5,0,1,https://github.com/labanskoller,Note about attestation cert problems in YubiKey 4.3,2,[],https://github.com/Yubico/yubico-piv-tool/pull/216,https://github.com/klali,6,https://github.com/Yubico/yubico-piv-tool/pull/216#issuecomment-571551370,"Add a note to Using Attestation [1] about the certificate problems with
YubiKey 4.3.
[1] https://developers.yubico.com/yubico-piv-tool/Attestation.html","Yes, that information is wrong, I'll try to get that updated internally.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,216,2019-12-30T14:39:35Z,2020-01-08T07:27:15Z,2020-01-08T07:27:15Z,MERGED,True,5,0,1,https://github.com/labanskoller,Note about attestation cert problems in YubiKey 4.3,2,[],https://github.com/Yubico/yubico-piv-tool/pull/216,https://github.com/klali,7,https://github.com/Yubico/yubico-piv-tool/pull/216#issuecomment-571560694,"Add a note to Using Attestation [1] about the certificate problems with
YubiKey 4.3.
[1] https://developers.yubico.com/yubico-piv-tool/Attestation.html","Actually there is a note about this at https://developers.yubico.com/PIV/Introduction/PIV_attestation.html (or at least linking to the KB), maybe it'd be better to make that clearer? or do you think this is better here?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,216,2019-12-30T14:39:35Z,2020-01-08T07:27:15Z,2020-01-08T07:27:15Z,MERGED,True,5,0,1,https://github.com/labanskoller,Note about attestation cert problems in YubiKey 4.3,2,[],https://github.com/Yubico/yubico-piv-tool/pull/216,https://github.com/labanskoller,8,https://github.com/Yubico/yubico-piv-tool/pull/216#issuecomment-571738317,"Add a note to Using Attestation [1] about the certificate problems with
YubiKey 4.3.
[1] https://developers.yubico.com/yubico-piv-tool/Attestation.html","Great! Yes, I know about the notice on that page. Feel free to improve that too, but the reason for this pull request is that the information is too far away from the openssl verify command that's not working on old YubiKeys and modern OpenSSL. In fact it took me over six months to realize that you had published the support article because I visited the ""wrong"" page once in a while and expected it to be updated with the information.
I'll update this PR with the correct information.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,217,2020-01-07T14:25:06Z,2020-01-07T14:34:49Z,2020-01-08T11:54:08Z,MERGED,True,31,0,1,https://github.com/nevun,Adding a static code analysis github workflow,1,[],https://github.com/Yubico/yubico-piv-tool/pull/217,https://github.com/nevun,1,https://github.com/Yubico/yubico-piv-tool/pull/217,Not failing the build pipeline at the moment so can be merged without consequences,Not failing the build pipeline at the moment so can be merged without consequences,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,219,2020-01-21T14:45:51Z,2020-01-27T14:33:56Z,2020-01-27T14:34:24Z,MERGED,True,29,19,1,https://github.com/jokkon,Doc/posix build documentation,3,[],https://github.com/Yubico/yubico-piv-tool/pull/219,https://github.com/jokkon,1,https://github.com/Yubico/yubico-piv-tool/pull/219,Rewrote the build steps for POSIX environments.,Rewrote the build steps for POSIX environments.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,220,2020-01-22T02:32:19Z,2020-01-29T09:18:05Z,2020-02-24T12:48:10Z,MERGED,True,50,13,3,https://github.com/notdpate,Improvements for YubiKey Minidriver 4.1,2,[],https://github.com/Yubico/yubico-piv-tool/pull/220,https://github.com/notdpate,1,https://github.com/Yubico/yubico-piv-tool/pull/220,"lib: add NFC atrs to ykpiv.h
lib: add NEO detection over NFC
lib: parse cardid from CHUID","lib: add NFC atrs to ykpiv.h
lib: add NEO detection over NFC
lib: parse cardid from CHUID",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,224,2020-02-03T14:35:23Z,2020-02-07T09:19:45Z,2020-02-10T16:25:26Z,MERGED,True,1,1,1,https://github.com/de-vri-es,Use relative path to include ykpiv-version.h,1,[],https://github.com/Yubico/yubico-piv-tool/pull/224,https://github.com/de-vri-es,1,https://github.com/Yubico/yubico-piv-tool/pull/224,"This PR makes sure the ykpiv-version.h header is included with a relative path.
This allows users to include the ykpiv.h header through #include <ykpiv/ykpiv.h> without adding /usr/include/ykpiv to the include path.","This PR makes sure the ykpiv-version.h header is included with a relative path.
This allows users to include the ykpiv.h header through #include <ykpiv/ykpiv.h> without adding /usr/include/ykpiv to the include path.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,224,2020-02-03T14:35:23Z,2020-02-07T09:19:45Z,2020-02-10T16:25:26Z,MERGED,True,1,1,1,https://github.com/de-vri-es,Use relative path to include ykpiv-version.h,1,[],https://github.com/Yubico/yubico-piv-tool/pull/224,https://github.com/de-vri-es,2,https://github.com/Yubico/yubico-piv-tool/pull/224#issuecomment-583310165,"This PR makes sure the ykpiv-version.h header is included with a relative path.
This allows users to include the ykpiv.h header through #include <ykpiv/ykpiv.h> without adding /usr/include/ykpiv to the include path.",Thanks :),True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,224,2020-02-03T14:35:23Z,2020-02-07T09:19:45Z,2020-02-10T16:25:26Z,MERGED,True,1,1,1,https://github.com/de-vri-es,Use relative path to include ykpiv-version.h,1,[],https://github.com/Yubico/yubico-piv-tool/pull/224,https://github.com/qpernil,3,https://github.com/Yubico/yubico-piv-tool/pull/224#issuecomment-584014098,"This PR makes sure the ykpiv-version.h header is included with a relative path.
This allows users to include the ykpiv.h header through #include <ykpiv/ykpiv.h> without adding /usr/include/ykpiv to the include path.","Fixed all other similar instances too, internal to the library.",True,{'HEART': ['https://github.com/de-vri-es']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,224,2020-02-03T14:35:23Z,2020-02-07T09:19:45Z,2020-02-10T16:25:26Z,MERGED,True,1,1,1,https://github.com/de-vri-es,Use relative path to include ykpiv-version.h,1,[],https://github.com/Yubico/yubico-piv-tool/pull/224,https://github.com/de-vri-es,4,https://github.com/Yubico/yubico-piv-tool/pull/224#issuecomment-584207112,"This PR makes sure the ykpiv-version.h header is included with a relative path.
This allows users to include the ykpiv.h header through #include <ykpiv/ykpiv.h> without adding /usr/include/ykpiv to the include path.",Awesome :),True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,225,2020-02-04T10:23:50Z,2020-02-07T08:25:02Z,2020-02-07T09:09:49Z,MERGED,True,3,0,1,https://github.com/nevun,Do not leave potential sensitive materials on the stack,1,[],https://github.com/Yubico/yubico-piv-tool/pull/225,https://github.com/nevun,1,https://github.com/Yubico/yubico-piv-tool/pull/225,"Using the OPENSSL_cleanse since it was already used, might make sense to pull in yk_memzero from lib/internal.h instead but that would require some refactoring.","Using the OPENSSL_cleanse since it was already used, might make sense to pull in yk_memzero from lib/internal.h instead but that would require some refactoring.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,227,2020-02-07T18:10:54Z,2020-08-10T07:36:31Z,2020-08-10T07:36:31Z,CLOSED,False,109,117,9,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/227,https://github.com/opoplawski,1,https://github.com/Yubico/yubico-piv-tool/pull/227,This is a rebase of #176 that makes libykcs11.so a proper p11-kit module,This is a rebase of #176 that makes libykcs11.so a proper p11-kit module,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,227,2020-02-07T18:10:54Z,2020-08-10T07:36:31Z,2020-08-10T07:36:31Z,CLOSED,False,109,117,9,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/227,https://github.com/qpernil,2,https://github.com/Yubico/yubico-piv-tool/pull/227#issuecomment-584530747,This is a rebase of #176 that makes libykcs11.so a proper p11-kit module,"Just a query, not very familiar with p11-kit .. Wouldn't just a module configuration file suffice ?
One would have to solve the different library suffix somehow of course.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,227,2020-02-07T18:10:54Z,2020-08-10T07:36:31Z,2020-08-10T07:36:31Z,CLOSED,False,109,117,9,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/227,https://github.com/mouse07410,3,https://github.com/Yubico/yubico-piv-tool/pull/227#issuecomment-584562117,This is a rebase of #176 that makes libykcs11.so a proper p11-kit module,"Yes, adding a config file, like ~/.config/pkcs11/modules/ykcs11.module is sufficient. Tested on MacOS and Linux.
While you are right wrt. different suffixes, .so works in this case on MacOS. I add a symlink to .dylib, but not recall if it’s necessary.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,227,2020-02-07T18:10:54Z,2020-08-10T07:36:31Z,2020-08-10T07:36:31Z,CLOSED,False,109,117,9,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/227,https://github.com/qpernil,4,https://github.com/Yubico/yubico-piv-tool/pull/227#issuecomment-584644735,This is a rebase of #176 that makes libykcs11.so a proper p11-kit module,Could you elaborate what you mean when you say .so works ? We don't install a file with the .so suffix (in the current master),True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,227,2020-02-07T18:10:54Z,2020-08-10T07:36:31Z,2020-08-10T07:36:31Z,CLOSED,False,109,117,9,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/227,https://github.com/opoplawski,5,https://github.com/Yubico/yubico-piv-tool/pull/227#issuecomment-584657278,This is a rebase of #176 that makes libykcs11.so a proper p11-kit module,The module config file is the main thing - it should be made into a .in file and use DYN_LIB_EXT for the extension I think.  Most pkcs11 modules do not use a soversion because they are dlopen()ed instead of linked - though I see from the travis failures that there is at least one think that links to it.  I still think you can drop the soversion because the interface is fixed.  I'll try to clean things up soon if I can find some time.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,227,2020-02-07T18:10:54Z,2020-08-10T07:36:31Z,2020-08-10T07:36:31Z,CLOSED,False,109,117,9,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/227,https://github.com/opoplawski,6,https://github.com/Yubico/yubico-piv-tool/pull/227#issuecomment-586096441,This is a rebase of #176 that makes libykcs11.so a proper p11-kit module,"Looks like libtool uses the .so extension for plugins and this appears to work for MacOS.  There is a test that links with the plugin directly which isn't really the correct thing to do, but I guess is okay for a test.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,227,2020-02-07T18:10:54Z,2020-08-10T07:36:31Z,2020-08-10T07:36:31Z,CLOSED,False,109,117,9,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/227,https://github.com/qpernil,7,https://github.com/Yubico/yubico-piv-tool/pull/227#issuecomment-587329764,This is a rebase of #176 that makes libykcs11.so a proper p11-kit module,"I would prefer to just add a module file and leave the rest unchanged. Any objections to that ?
Still need to figure out how to deal with the shared lib suffix in that case.",True,{'THUMBS_UP': ['https://github.com/mouse07410']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,227,2020-02-07T18:10:54Z,2020-08-10T07:36:31Z,2020-08-10T07:36:31Z,CLOSED,False,109,117,9,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/227,https://github.com/opoplawski,8,https://github.com/Yubico/yubico-piv-tool/pull/227#issuecomment-590654369,This is a rebase of #176 that makes libykcs11.so a proper p11-kit module,"Well, do what you want, but I believe that this is a more proper way to make a pkcs11 module.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,227,2020-02-07T18:10:54Z,2020-08-10T07:36:31Z,2020-08-10T07:36:31Z,CLOSED,False,109,117,9,https://github.com/opoplawski,Make libykcs11.so a module and configure p11-kit to see it,1,[],https://github.com/Yubico/yubico-piv-tool/pull/227,https://github.com/aveenismail,9,https://github.com/Yubico/yubico-piv-tool/pull/227#issuecomment-658092764,This is a rebase of #176 that makes libykcs11.so a proper p11-kit module,"Hi @opoplawski
I'm so sorry for coming in this late. As you can see, the building process have been changed from using automake to using cmake, which makes this pull request incompatible with the new version. We are, however, looking into adding support for p11-kit.
I'm so sorry that the build change has not been communicated more clearly earlier.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,228,2020-02-12T12:16:10Z,2020-02-12T16:31:05Z,2020-02-12T16:31:05Z,MERGED,True,1,1,1,https://github.com/nbraud,tools/yubico-piv-tool: Fix typo,1,[],https://github.com/Yubico/yubico-piv-tool/pull/228,https://github.com/nbraud,1,https://github.com/Yubico/yubico-piv-tool/pull/228,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,231,2020-03-11T09:59:58Z,2020-03-11T10:47:19Z,2020-03-11T10:51:18Z,MERGED,True,5,1,1,https://github.com/nevun,tool: check int length before conversion to size_t,1,[],https://github.com/Yubico/yubico-piv-tool/pull/231,https://github.com/nevun,1,https://github.com/Yubico/yubico-piv-tool/pull/231,"This avoids a potential buffer overflow in fread().
Reported by Ilja van Sprundel, thanks!","This avoids a potential buffer overflow in fread().
Reported by Ilja van Sprundel, thanks!",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,232,2020-04-01T02:25:46Z,2020-04-23T08:53:17Z,2020-04-23T08:53:17Z,CLOSED,False,307,18,4,https://github.com/sgn,Libressl 3.0.2 partial fix,5,[],https://github.com/Yubico/yubico-piv-tool/pull/232,https://github.com/sgn,1,https://github.com/Yubico/yubico-piv-tool/pull/232,"Hi, the latest release failed to be built with libressl (at least with version 3.0.2).
Here is a partial fix.
leftoverbit:

RSA_padding_check_PKCS1_OAEP_mgf1 is undefined in libressl as of now, it's available upstream, but not make it into release, yet.--> Copy-Paste code from libressl
RSA_padding_add_PKCS1_OAEP_mgf1 --> Copy-Paste code from libressl","Hi, the latest release failed to be built with libressl (at least with version 3.0.2).
Here is a partial fix.
leftoverbit:

RSA_padding_check_PKCS1_OAEP_mgf1 is undefined in libressl as of now, it's available upstream, but not make it into release, yet.--> Copy-Paste code from libressl
RSA_padding_add_PKCS1_OAEP_mgf1 --> Copy-Paste code from libressl",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,232,2020-04-01T02:25:46Z,2020-04-23T08:53:17Z,2020-04-23T08:53:17Z,CLOSED,False,307,18,4,https://github.com/sgn,Libressl 3.0.2 partial fix,5,[],https://github.com/Yubico/yubico-piv-tool/pull/232,https://github.com/sgn,2,https://github.com/Yubico/yubico-piv-tool/pull/232#issuecomment-607006398,"Hi, the latest release failed to be built with libressl (at least with version 3.0.2).
Here is a partial fix.
leftoverbit:

RSA_padding_check_PKCS1_OAEP_mgf1 is undefined in libressl as of now, it's available upstream, but not make it into release, yet.--> Copy-Paste code from libressl
RSA_padding_add_PKCS1_OAEP_mgf1 --> Copy-Paste code from libressl",I have no idea why Travis's job fo OSX and Windows is failing.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,232,2020-04-01T02:25:46Z,2020-04-23T08:53:17Z,2020-04-23T08:53:17Z,CLOSED,False,307,18,4,https://github.com/sgn,Libressl 3.0.2 partial fix,5,[],https://github.com/Yubico/yubico-piv-tool/pull/232,https://github.com/qpernil,3,https://github.com/Yubico/yubico-piv-tool/pull/232#issuecomment-616567065,"Hi, the latest release failed to be built with libressl (at least with version 3.0.2).
Here is a partial fix.
leftoverbit:

RSA_padding_check_PKCS1_OAEP_mgf1 is undefined in libressl as of now, it's available upstream, but not make it into release, yet.--> Copy-Paste code from libressl
RSA_padding_add_PKCS1_OAEP_mgf1 --> Copy-Paste code from libressl","Hi, thx for contributing !
I had already started to fix this in a slightly different way before I saw your pull request.
Could you have a look in the master branch and let me know if my fix works for you ?
Thx
Per",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,232,2020-04-01T02:25:46Z,2020-04-23T08:53:17Z,2020-04-23T08:53:17Z,CLOSED,False,307,18,4,https://github.com/sgn,Libressl 3.0.2 partial fix,5,[],https://github.com/Yubico/yubico-piv-tool/pull/232,https://github.com/qpernil,4,https://github.com/Yubico/yubico-piv-tool/pull/232#issuecomment-618272267,"Hi, the latest release failed to be built with libressl (at least with version 3.0.2).
Here is a partial fix.
leftoverbit:

RSA_padding_check_PKCS1_OAEP_mgf1 is undefined in libressl as of now, it's available upstream, but not make it into release, yet.--> Copy-Paste code from libressl
RSA_padding_add_PKCS1_OAEP_mgf1 --> Copy-Paste code from libressl","Since this is now fixed (albeit in a different way than here) in master I'll go ahead an close this PR. Feel free to open a new PR or Issue if you feel the solution in master isn't up to your needs.
And thanks for the contribution !",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,245,2020-05-12T23:43:53Z,2020-06-12T00:28:42Z,2020-06-12T00:28:43Z,CLOSED,False,2,2,1,https://github.com/05nelsonm,Update packages needed for building on POSIX platforms,1,[],https://github.com/Yubico/yubico-piv-tool/pull/245,https://github.com/05nelsonm,1,https://github.com/Yubico/yubico-piv-tool/pull/245,Fixes issue #244,Fixes issue #244,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,245,2020-05-12T23:43:53Z,2020-06-12T00:28:42Z,2020-06-12T00:28:43Z,CLOSED,False,2,2,1,https://github.com/05nelsonm,Update packages needed for building on POSIX platforms,1,[],https://github.com/Yubico/yubico-piv-tool/pull/245,https://github.com/05nelsonm,2,https://github.com/Yubico/yubico-piv-tool/pull/245#issuecomment-642999550,Fixes issue #244,"Seems to have been resolved in commit cce4837.
Closing this PR.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,249,2020-05-26T03:57:17Z,2020-11-16T15:42:29Z,2020-11-16T15:42:59Z,CLOSED,False,6,1,1,https://github.com/arekinath,ykcs11: allow setting reader prefix for NFC use,1,[],https://github.com/Yubico/yubico-piv-tool/pull/249,https://github.com/arekinath,1,https://github.com/Yubico/yubico-piv-tool/pull/249,"It would be nice to be able to use libykcs11 against YubiKeys on an NFC reader. This patch allows setting the environment variable YKCS11_READER_PREFIX to a value other than ""Yubico"" so that libykcs11 can find NFC readers as needed.","It would be nice to be able to use libykcs11 against YubiKeys on an NFC reader. This patch allows setting the environment variable YKCS11_READER_PREFIX to a value other than ""Yubico"" so that libykcs11 can find NFC readers as needed.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,249,2020-05-26T03:57:17Z,2020-11-16T15:42:29Z,2020-11-16T15:42:59Z,CLOSED,False,6,1,1,https://github.com/arekinath,ykcs11: allow setting reader prefix for NFC use,1,[],https://github.com/Yubico/yubico-piv-tool/pull/249,https://github.com/arekinath,2,https://github.com/Yubico/yubico-piv-tool/pull/249#issuecomment-683507367,"It would be nice to be able to use libykcs11 against YubiKeys on an NFC reader. This patch allows setting the environment variable YKCS11_READER_PREFIX to a value other than ""Yubico"" so that libykcs11 can find NFC readers as needed.","Rebased again onto current master. Any feedback on this one? Fixing the test coverage seems difficult without doing something like a mock libpcsc to feed it fake reader names, which would be a bit of an undertaking...",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,249,2020-05-26T03:57:17Z,2020-11-16T15:42:29Z,2020-11-16T15:42:59Z,CLOSED,False,6,1,1,https://github.com/arekinath,ykcs11: allow setting reader prefix for NFC use,1,[],https://github.com/Yubico/yubico-piv-tool/pull/249,https://github.com/qpernil,3,https://github.com/Yubico/yubico-piv-tool/pull/249#issuecomment-728133942,"It would be nice to be able to use libykcs11 against YubiKeys on an NFC reader. This patch allows setting the environment variable YKCS11_READER_PREFIX to a value other than ""Yubico"" so that libykcs11 can find NFC readers as needed.","Considering this I don't think it's appropriate to go by reader name at all. With USB the YubiKey IS the reader as well, but in the NFC case it is just the smart card, with an arbitrarily named reader. Also realizing that someone could have a different PIV smartcard attached we also can't just go by the ability to select the PIV AID. Leaving me thinking that the proper solution is to filter based on the ATR. We already check it to determine the YubiKey model. This logic should be reused to filter on known YubiKey models.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,249,2020-05-26T03:57:17Z,2020-11-16T15:42:29Z,2020-11-16T15:42:59Z,CLOSED,False,6,1,1,https://github.com/arekinath,ykcs11: allow setting reader prefix for NFC use,1,[],https://github.com/Yubico/yubico-piv-tool/pull/249,https://github.com/qpernil,4,https://github.com/Yubico/yubico-piv-tool/pull/249#issuecomment-728142993,"It would be nice to be able to use libykcs11 against YubiKeys on an NFC reader. This patch allows setting the environment variable YKCS11_READER_PREFIX to a value other than ""Yubico"" so that libykcs11 can find NFC readers as needed.","I'm closing this PR, please see #272",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,250,2020-06-02T13:43:48Z,2020-06-03T07:17:13Z,2020-06-03T07:18:25Z,MERGED,True,1,1,1,https://github.com/nevun,tool: missing newline in error message,1,[],https://github.com/Yubico/yubico-piv-tool/pull/250,https://github.com/nevun,1,https://github.com/Yubico/yubico-piv-tool/pull/250,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,251,2020-06-05T15:49:06Z,2020-08-10T07:37:04Z,2020-08-10T07:37:04Z,CLOSED,False,1,1,1,https://github.com/h3xx,Fix FTBFS when building with BUILD_STATIC_LIB=OFF,1,[],https://github.com/Yubico/yubico-piv-tool/pull/251,https://github.com/h3xx,1,https://github.com/Yubico/yubico-piv-tool/pull/251,"Reproduction:
cmake \
    -DBUILD_STATIC_LIB=OFF \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_GENERATOR='Unix Makefiles' \
    -DCMAKE_BUILD_TYPE='Release'

(running make isn't necessary, it fails during configure)
Fails with:
CMake Error at ykcs11/CMakeLists.txt:86 (set_target_properties):
  set_target_properties Can not find target to add properties to: ykcs11","Reproduction:
cmake \
    -DBUILD_STATIC_LIB=OFF \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_GENERATOR='Unix Makefiles' \
    -DCMAKE_BUILD_TYPE='Release'

(running make isn't necessary, it fails during configure)
Fails with:
CMake Error at ykcs11/CMakeLists.txt:86 (set_target_properties):
  set_target_properties Can not find target to add properties to: ykcs11",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,251,2020-06-05T15:49:06Z,2020-08-10T07:37:04Z,2020-08-10T07:37:04Z,CLOSED,False,1,1,1,https://github.com/h3xx,Fix FTBFS when building with BUILD_STATIC_LIB=OFF,1,[],https://github.com/Yubico/yubico-piv-tool/pull/251,https://github.com/aveenismail,2,https://github.com/Yubico/yubico-piv-tool/pull/251#issuecomment-639737938,"Reproduction:
cmake \
    -DBUILD_STATIC_LIB=OFF \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_GENERATOR='Unix Makefiles' \
    -DCMAKE_BUILD_TYPE='Release'

(running make isn't necessary, it fails during configure)
Fails with:
CMake Error at ykcs11/CMakeLists.txt:86 (set_target_properties):
  set_target_properties Can not find target to add properties to: ykcs11","Thank you for the PR.
Actually, we've noticed that this line was left there by mistake, so it will be removed completely for the release.
Thank you and hope you'll be back with more pull requests",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,251,2020-06-05T15:49:06Z,2020-08-10T07:37:04Z,2020-08-10T07:37:04Z,CLOSED,False,1,1,1,https://github.com/h3xx,Fix FTBFS when building with BUILD_STATIC_LIB=OFF,1,[],https://github.com/Yubico/yubico-piv-tool/pull/251,https://github.com/h3xx,3,https://github.com/Yubico/yubico-piv-tool/pull/251#issuecomment-639914338,"Reproduction:
cmake \
    -DBUILD_STATIC_LIB=OFF \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_GENERATOR='Unix Makefiles' \
    -DCMAKE_BUILD_TYPE='Release'

(running make isn't necessary, it fails during configure)
Fails with:
CMake Error at ykcs11/CMakeLists.txt:86 (set_target_properties):
  set_target_properties Can not find target to add properties to: ykcs11","@aveenismail Thank you for your encouraging words. This is among a few build fixes I submitted today.
What branches out there fix this? Would it be better to base my PR's off that branch in the future?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,251,2020-06-05T15:49:06Z,2020-08-10T07:37:04Z,2020-08-10T07:37:04Z,CLOSED,False,1,1,1,https://github.com/h3xx,Fix FTBFS when building with BUILD_STATIC_LIB=OFF,1,[],https://github.com/Yubico/yubico-piv-tool/pull/251,https://github.com/aveenismail,4,https://github.com/Yubico/yubico-piv-tool/pull/251#issuecomment-658098732,"Reproduction:
cmake \
    -DBUILD_STATIC_LIB=OFF \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_GENERATOR='Unix Makefiles' \
    -DCMAKE_BUILD_TYPE='Release'

(running make isn't necessary, it fails during configure)
Fails with:
CMake Error at ykcs11/CMakeLists.txt:86 (set_target_properties):
  set_target_properties Can not find target to add properties to: ykcs11","Hi @h3xx
I'm so sorry for not having answered earlier. The fact is that due to the security update (see https://www.yubico.com/support/security-advisories/ysa-2020-02/), we were working on a private branch the last couple of weeks or so before the release was published. I also couldn't answer your last comment so as not to hint at the security issue before a fix was ready to be published. Now that the release is finally out, the private branch is now merged into the public one, so please feel free to take a look. And also now that the public repository is fully updated, I can take a look at your other pull requests
Apologies again for the silence and thank you for having taken the time to improve yubico-piv-tool",True,{'THUMBS_UP': ['https://github.com/h3xx']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,252,2020-06-05T15:57:26Z,2020-12-07T10:06:11Z,2021-02-03T21:06:49Z,CLOSED,False,11,23,3,https://github.com/h3xx,Use standard variables for install paths,2,[],https://github.com/Yubico/yubico-piv-tool/pull/252,https://github.com/h3xx,1,https://github.com/Yubico/yubico-piv-tool/pull/252,"GNUInstallDirs defines some standard CACHE-ed options:
CMAKE_INSTALL_BINDIR           - user executables (bin)
CMAKE_INSTALL_SBINDIR          - system admin executables (sbin)
CMAKE_INSTALL_LIBEXECDIR       - program executables (libexec)
CMAKE_INSTALL_SYSCONFDIR       - read-only single-machine data (etc)
CMAKE_INSTALL_SHAREDSTATEDIR   - modifiable architecture-independent data (com)
CMAKE_INSTALL_LOCALSTATEDIR    - modifiable single-machine data (var)
CMAKE_INSTALL_LIBDIR           - object code libraries (lib or lib64 or lib/<multiarch-tuple> on Debian)
CMAKE_INSTALL_INCLUDEDIR       - C header files (include)
CMAKE_INSTALL_OLDINCLUDEDIR    - C header files for non-gcc (/usr/include)
CMAKE_INSTALL_DATAROOTDIR      - read-only architecture-independent data root (share)
CMAKE_INSTALL_DATADIR          - read-only architecture-independent data (DATAROOTDIR)
CMAKE_INSTALL_INFODIR          - info documentation (DATAROOTDIR/info)
CMAKE_INSTALL_LOCALEDIR        - locale-dependent data (DATAROOTDIR/locale)
CMAKE_INSTALL_MANDIR           - man documentation (DATAROOTDIR/man)
CMAKE_INSTALL_DOCDIR           - documentation root (DATAROOTDIR/doc/PROJECT_NAME)

More info on GNUInstallDirs can be found here.
Also the reason I got rid of the NOT DEFINED check is that the presence of the CACHE directive means it's setting a default that can be overridden using command line options, so there's no need to check if they're defined (they never are until set(...) is called).","GNUInstallDirs defines some standard CACHE-ed options:
CMAKE_INSTALL_BINDIR           - user executables (bin)
CMAKE_INSTALL_SBINDIR          - system admin executables (sbin)
CMAKE_INSTALL_LIBEXECDIR       - program executables (libexec)
CMAKE_INSTALL_SYSCONFDIR       - read-only single-machine data (etc)
CMAKE_INSTALL_SHAREDSTATEDIR   - modifiable architecture-independent data (com)
CMAKE_INSTALL_LOCALSTATEDIR    - modifiable single-machine data (var)
CMAKE_INSTALL_LIBDIR           - object code libraries (lib or lib64 or lib/<multiarch-tuple> on Debian)
CMAKE_INSTALL_INCLUDEDIR       - C header files (include)
CMAKE_INSTALL_OLDINCLUDEDIR    - C header files for non-gcc (/usr/include)
CMAKE_INSTALL_DATAROOTDIR      - read-only architecture-independent data root (share)
CMAKE_INSTALL_DATADIR          - read-only architecture-independent data (DATAROOTDIR)
CMAKE_INSTALL_INFODIR          - info documentation (DATAROOTDIR/info)
CMAKE_INSTALL_LOCALEDIR        - locale-dependent data (DATAROOTDIR/locale)
CMAKE_INSTALL_MANDIR           - man documentation (DATAROOTDIR/man)
CMAKE_INSTALL_DOCDIR           - documentation root (DATAROOTDIR/doc/PROJECT_NAME)

More info on GNUInstallDirs can be found here.
Also the reason I got rid of the NOT DEFINED check is that the presence of the CACHE directive means it's setting a default that can be overridden using command line options, so there's no need to check if they're defined (they never are until set(...) is called).",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,252,2020-06-05T15:57:26Z,2020-12-07T10:06:11Z,2021-02-03T21:06:49Z,CLOSED,False,11,23,3,https://github.com/h3xx,Use standard variables for install paths,2,[],https://github.com/Yubico/yubico-piv-tool/pull/252,https://github.com/aveenismail,2,https://github.com/Yubico/yubico-piv-tool/pull/252#issuecomment-658151372,"GNUInstallDirs defines some standard CACHE-ed options:
CMAKE_INSTALL_BINDIR           - user executables (bin)
CMAKE_INSTALL_SBINDIR          - system admin executables (sbin)
CMAKE_INSTALL_LIBEXECDIR       - program executables (libexec)
CMAKE_INSTALL_SYSCONFDIR       - read-only single-machine data (etc)
CMAKE_INSTALL_SHAREDSTATEDIR   - modifiable architecture-independent data (com)
CMAKE_INSTALL_LOCALSTATEDIR    - modifiable single-machine data (var)
CMAKE_INSTALL_LIBDIR           - object code libraries (lib or lib64 or lib/<multiarch-tuple> on Debian)
CMAKE_INSTALL_INCLUDEDIR       - C header files (include)
CMAKE_INSTALL_OLDINCLUDEDIR    - C header files for non-gcc (/usr/include)
CMAKE_INSTALL_DATAROOTDIR      - read-only architecture-independent data root (share)
CMAKE_INSTALL_DATADIR          - read-only architecture-independent data (DATAROOTDIR)
CMAKE_INSTALL_INFODIR          - info documentation (DATAROOTDIR/info)
CMAKE_INSTALL_LOCALEDIR        - locale-dependent data (DATAROOTDIR/locale)
CMAKE_INSTALL_MANDIR           - man documentation (DATAROOTDIR/man)
CMAKE_INSTALL_DOCDIR           - documentation root (DATAROOTDIR/doc/PROJECT_NAME)

More info on GNUInstallDirs can be found here.
Also the reason I got rid of the NOT DEFINED check is that the presence of the CACHE directive means it's setting a default that can be overridden using command line options, so there's no need to check if they're defined (they never are until set(...) is called).","Hi @h3xx
It's actually nice to have install paths' variables sat to the absolute path from the get go. Could you please amend your PR to add ""${CMAKE_INSTALL_PREFIX}"" before the install paths in options.cmake (and don't forget to remove ""${prefix}/"" from ykpiv.pc.in and ykcs11.pc.in files)? I'll merge it as soon as you've done the changes.
Thanks",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,252,2020-06-05T15:57:26Z,2020-12-07T10:06:11Z,2021-02-03T21:06:49Z,CLOSED,False,11,23,3,https://github.com/h3xx,Use standard variables for install paths,2,[],https://github.com/Yubico/yubico-piv-tool/pull/252,https://github.com/aveenismail,3,https://github.com/Yubico/yubico-piv-tool/pull/252#issuecomment-671211212,"GNUInstallDirs defines some standard CACHE-ed options:
CMAKE_INSTALL_BINDIR           - user executables (bin)
CMAKE_INSTALL_SBINDIR          - system admin executables (sbin)
CMAKE_INSTALL_LIBEXECDIR       - program executables (libexec)
CMAKE_INSTALL_SYSCONFDIR       - read-only single-machine data (etc)
CMAKE_INSTALL_SHAREDSTATEDIR   - modifiable architecture-independent data (com)
CMAKE_INSTALL_LOCALSTATEDIR    - modifiable single-machine data (var)
CMAKE_INSTALL_LIBDIR           - object code libraries (lib or lib64 or lib/<multiarch-tuple> on Debian)
CMAKE_INSTALL_INCLUDEDIR       - C header files (include)
CMAKE_INSTALL_OLDINCLUDEDIR    - C header files for non-gcc (/usr/include)
CMAKE_INSTALL_DATAROOTDIR      - read-only architecture-independent data root (share)
CMAKE_INSTALL_DATADIR          - read-only architecture-independent data (DATAROOTDIR)
CMAKE_INSTALL_INFODIR          - info documentation (DATAROOTDIR/info)
CMAKE_INSTALL_LOCALEDIR        - locale-dependent data (DATAROOTDIR/locale)
CMAKE_INSTALL_MANDIR           - man documentation (DATAROOTDIR/man)
CMAKE_INSTALL_DOCDIR           - documentation root (DATAROOTDIR/doc/PROJECT_NAME)

More info on GNUInstallDirs can be found here.
Also the reason I got rid of the NOT DEFINED check is that the presence of the CACHE directive means it's setting a default that can be overridden using command line options, so there's no need to check if they're defined (they never are until set(...) is called).","@h3xx
Reminder. Please amend the PR to include absolute paths (see comment above).",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,252,2020-06-05T15:57:26Z,2020-12-07T10:06:11Z,2021-02-03T21:06:49Z,CLOSED,False,11,23,3,https://github.com/h3xx,Use standard variables for install paths,2,[],https://github.com/Yubico/yubico-piv-tool/pull/252,https://github.com/aveenismail,4,https://github.com/Yubico/yubico-piv-tool/pull/252#issuecomment-739814208,"GNUInstallDirs defines some standard CACHE-ed options:
CMAKE_INSTALL_BINDIR           - user executables (bin)
CMAKE_INSTALL_SBINDIR          - system admin executables (sbin)
CMAKE_INSTALL_LIBEXECDIR       - program executables (libexec)
CMAKE_INSTALL_SYSCONFDIR       - read-only single-machine data (etc)
CMAKE_INSTALL_SHAREDSTATEDIR   - modifiable architecture-independent data (com)
CMAKE_INSTALL_LOCALSTATEDIR    - modifiable single-machine data (var)
CMAKE_INSTALL_LIBDIR           - object code libraries (lib or lib64 or lib/<multiarch-tuple> on Debian)
CMAKE_INSTALL_INCLUDEDIR       - C header files (include)
CMAKE_INSTALL_OLDINCLUDEDIR    - C header files for non-gcc (/usr/include)
CMAKE_INSTALL_DATAROOTDIR      - read-only architecture-independent data root (share)
CMAKE_INSTALL_DATADIR          - read-only architecture-independent data (DATAROOTDIR)
CMAKE_INSTALL_INFODIR          - info documentation (DATAROOTDIR/info)
CMAKE_INSTALL_LOCALEDIR        - locale-dependent data (DATAROOTDIR/locale)
CMAKE_INSTALL_MANDIR           - man documentation (DATAROOTDIR/man)
CMAKE_INSTALL_DOCDIR           - documentation root (DATAROOTDIR/doc/PROJECT_NAME)

More info on GNUInstallDirs can be found here.
Also the reason I got rid of the NOT DEFINED check is that the presence of the CACHE directive means it's setting a default that can be overridden using command line options, so there's no need to check if they're defined (they never are until set(...) is called).",This change was implemented with another PR. Closing this one,True,{'THUMBS_UP': ['https://github.com/h3xx']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,253,2020-06-05T16:15:06Z,2020-08-07T12:40:56Z,2020-08-07T12:40:56Z,MERGED,True,2,0,1,https://github.com/h3xx,Fix omission of man page,1,[],https://github.com/Yubico/yubico-piv-tool/pull/253,https://github.com/h3xx,1,https://github.com/Yubico/yubico-piv-tool/pull/253,"It was omitting the man page upon first install, so in order to get the man page added to the installed set of files, one would have to run cmake, then run make, then run cmake again, then run make install.
This commit just hinges the installed file declaration on whether we want to generate man pages. If the man page generation fails, it'll still fail the build like before.","It was omitting the man page upon first install, so in order to get the man page added to the installed set of files, one would have to run cmake, then run make, then run cmake again, then run make install.
This commit just hinges the installed file declaration on whether we want to generate man pages. If the man page generation fails, it'll still fail the build like before.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,253,2020-06-05T16:15:06Z,2020-08-07T12:40:56Z,2020-08-07T12:40:56Z,MERGED,True,2,0,1,https://github.com/h3xx,Fix omission of man page,1,[],https://github.com/Yubico/yubico-piv-tool/pull/253,https://github.com/aveenismail,2,https://github.com/Yubico/yubico-piv-tool/pull/253#issuecomment-658136856,"It was omitting the man page upon first install, so in order to get the man page added to the installed set of files, one would have to run cmake, then run make, then run cmake again, then run make install.
This commit just hinges the installed file declaration on whether we want to generate man pages. If the man page generation fails, it'll still fail the build like before.","Hi @h3xx
I can't see this behavior. I can run:

cmake (yubico-piv-tool.1 not generated after this)
then make (yubico-piv-tool.1 is present in tool/ after this)
then make install (yubico-piv-tool.1 ends up in /usr/local/share/man/man1 after this)

It could be platform dependent though. What platform are you running on?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,253,2020-06-05T16:15:06Z,2020-08-07T12:40:56Z,2020-08-07T12:40:56Z,MERGED,True,2,0,1,https://github.com/h3xx,Fix omission of man page,1,[],https://github.com/Yubico/yubico-piv-tool/pull/253,https://github.com/h3xx,3,https://github.com/Yubico/yubico-piv-tool/pull/253#issuecomment-659546124,"It was omitting the man page upon first install, so in order to get the man page added to the installed set of files, one would have to run cmake, then run make, then run cmake again, then run make install.
This commit just hinges the installed file declaration on whether we want to generate man pages. If the man page generation fails, it'll still fail the build like before.","This bug is a little tricky since it can only be seen if cmake hasn't been run before.

I tried those *exact* steps and still yubico-piv-tool.1 is *still* not installed in the build jail. Tested version 80f3274.
# Shell script I followed:
git clone https://github.com/Yubico/yubico-piv-tool.git
cd yubico-piv-tool
git clean -x -d -f && git co --force
cmake -DGENERATE_MAN_PAGES=ON
make install DESTDIR=$PWD/my-build-jail
find my-build-jail -type f


As far as your step 2 showing that the man page is generated, that's to be expected even with the bug. The issue is that it's only adding an install instruction IF the man page is generated. Install instructions are only processed and added to the makefiles during the configure step. Since the man page file is generated during the later, build step, the configure step cannot see it, and hence will not add it to the makefiles it's generating.
configure step            -> build/install step
- makefiles created          - man page created

The fact your steps work makes me think that one of three things is happening:

The configure step is somehow being repeated when you run make. This is something cmake will do automatically, but only if CMakeLists.txt changes which shouldn't happen normally.
You're not installing into a build jail, and instead you're are installing on your system (make install), in which case, your system already has the man page installed and that's what you're seeing. Remove man page before re-testing.
You're not starting out with a fresh clone (you need to start out with a clean repo). Run git clean -x -d -f && git co --force to destroy all changes in the repo.

I managed to capture exactly my steps in reproducing this issue.
I also captured a proof-that-it-works demonstration of my patch.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,253,2020-06-05T16:15:06Z,2020-08-07T12:40:56Z,2020-08-07T12:40:56Z,MERGED,True,2,0,1,https://github.com/h3xx,Fix omission of man page,1,[],https://github.com/Yubico/yubico-piv-tool/pull/253,https://github.com/aveenismail,4,https://github.com/Yubico/yubico-piv-tool/pull/253#issuecomment-660293870,"It was omitting the man page upon first install, so in order to get the man page added to the installed set of files, one would have to run cmake, then run make, then run cmake again, then run make install.
This commit just hinges the installed file declaration on whether we want to generate man pages. If the man page generation fails, it'll still fail the build like before.","@h3xx
Ok. Now I could re-produce. I was running ""make"" and then ""make install"". It looks like running the make command separate from the install command made a difference.
The reason for separating generating the man page from installing it is that the man page is not generated on Windows. So to include it in the Windows binary package, the man page included in the source package is the one used and ""GENERATE_MAN_PAGES"" is set to ""OFF"". So here's my suggestion:
Could you amend your PR such that instead of removing the ""if(MAN_PAGE)"" statement, just add an install command inside the ""if(GENERATE_MAN_PAGES)"" statement? Basically, copy line 73 and paste it after ""add_custom_target (yubico-piv-tool-man ...)"" command. This way, even if the make command is run again, it'll just overwrite the existing man page. If you have a better idea, I'll definitely try it.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,253,2020-06-05T16:15:06Z,2020-08-07T12:40:56Z,2020-08-07T12:40:56Z,MERGED,True,2,0,1,https://github.com/h3xx,Fix omission of man page,1,[],https://github.com/Yubico/yubico-piv-tool/pull/253,https://github.com/h3xx,5,https://github.com/Yubico/yubico-piv-tool/pull/253#issuecomment-660545780,"It was omitting the man page upon first install, so in order to get the man page added to the installed set of files, one would have to run cmake, then run make, then run cmake again, then run make install.
This commit just hinges the installed file declaration on whether we want to generate man pages. If the man page generation fails, it'll still fail the build like before.","I was running ""make"" and then ""make install"". It looks like running the make command separate from the install command made a difference.


I might be wrong, but I'm pretty sure that's not why. When I tried the same steps I typed above, this time instead running ""make"" AND THEN ""make install,"" yubico-piv-tool.1 is *still* not installed in the build jail. The manpage only gets installed if ""make"" AND THEN ""cmake"" AND THEN ""make"" are run. If I had to guess, you're not properly cleaning the repository before re-running the configure step. Please run ""git clean -x -d -f && git checkout --force"" in the repo before doing a test, which will nuke the entire repository and reset all changes back to clean checkout. I aliased this to 'git nuke' because it's so convenient.
# Shell script I followed:
git clone https://github.com/Yubico/yubico-piv-tool.git
cd yubico-piv-tool
git clean -x -d -f && git checkout --force
cmake -DGENERATE_MAN_PAGES=ON
make &&
make install DESTDIR=$PWD/my-build-jail
find my-build-jail -type f

Which results in...
my-build-jail/usr/local/include/ykpiv/ykpiv-config.h
my-build-jail/usr/local/include/ykpiv/ykpiv.h
my-build-jail/usr/local/lib/libykcs11.a
my-build-jail/usr/local/lib/libykpiv.so.2.1.0
my-build-jail/usr/local/lib/libykcs11.so.2.1.0
my-build-jail/usr/local/lib/pkgconfig/ykpiv.pc
my-build-jail/usr/local/lib/pkgconfig/ykcs11.pc
my-build-jail/usr/local/lib/libykpiv.a
my-build-jail/usr/local/bin/yubico-piv-tool

... -> yubico-piv-tool.1 is absent === BUG

Anyway, since you can reproduce it now, let's move on.


Basically, copy line 73 and paste it after ""add_custom_target (yubico-piv-tool-man ...)"" command. This way, even if the make command is run again, it'll just overwrite the existing man page. If you have a better idea, I'll definitely try it.

If you're saying what I think you are, that would add TWO install instructions to the makefile if ""make"" has been run, and ONLY ONE if it hasn't ""make"" hasn't been run before. I'm not sure why not just add the install instruction once?
In general, what gets added to the makefile during the configure step shouldn't depend on what's been previously built by running ""make"" since that step is supposed to come later. Since the man page is a generated file it's not a good idea to test for it when creating the script that's doing the generating (i.e. the makefile).

You voiced concerns that since the file isn't generated during a Windows build, it also shouldn't be installed in Windows. I agree, it shouldn't. Keeping it inside the if(GENERATE_MAN_PAGES) will still definitely add it for Windows builds that specify -DGENERATE_MAN_PAGES=ON. Since the default value is OFF` for Windows builds (I think, based on this line), it should neither generate nor install the manpage in Windows builds.
Also, it looks like currently, if a Windows builder copies an arbitary file into tool/yubico-piv-tool.1 and then runs CMake and ""make"" or equivalent, it would still have installed a man page! It probably shouldn't do that either. :-D My patch fixes this too.
If you're really concerned about the Windows build process, do you have a Windows machine you could do a test on, to make sure it's not going to install a manpage?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,253,2020-06-05T16:15:06Z,2020-08-07T12:40:56Z,2020-08-07T12:40:56Z,MERGED,True,2,0,1,https://github.com/h3xx,Fix omission of man page,1,[],https://github.com/Yubico/yubico-piv-tool/pull/253,https://github.com/aveenismail,6,https://github.com/Yubico/yubico-piv-tool/pull/253#issuecomment-665238247,"It was omitting the man page upon first install, so in order to get the man page added to the installed set of files, one would have to run cmake, then run make, then run cmake again, then run make install.
This commit just hinges the installed file declaration on whether we want to generate man pages. If the man page generation fails, it'll still fail the build like before.","@h3xx Sorry for the delay. I'm on vacation for 2 weeks. When I'm back on Monday, I'll look into how and why the man page behaves on Windows",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,253,2020-06-05T16:15:06Z,2020-08-07T12:40:56Z,2020-08-07T12:40:56Z,MERGED,True,2,0,1,https://github.com/h3xx,Fix omission of man page,1,[],https://github.com/Yubico/yubico-piv-tool/pull/253,https://github.com/h3xx,7,https://github.com/Yubico/yubico-piv-tool/pull/253#issuecomment-665842409,"It was omitting the man page upon first install, so in order to get the man page added to the installed set of files, one would have to run cmake, then run make, then run cmake again, then run make install.
This commit just hinges the installed file declaration on whether we want to generate man pages. If the man page generation fails, it'll still fail the build like before.","Okay, I updated my change.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,261,2020-07-27T23:24:52Z,2020-07-28T06:13:37Z,2020-08-18T12:47:21Z,MERGED,True,2,2,1,https://github.com/marissanishimoto,Update scan action with correct image fqdn,1,[],https://github.com/Yubico/yubico-piv-tool/pull/261,https://github.com/marissanishimoto,1,https://github.com/Yubico/yubico-piv-tool/pull/261,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,262,2020-08-10T14:42:41Z,2020-10-06T07:49:32Z,2020-10-06T07:49:44Z,MERGED,True,358,31,10,https://github.com/qpernil,Implemented C_DeriveKey and enabled DIN/DOUT,7,[],https://github.com/Yubico/yubico-piv-tool/pull/262,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/262,"Implement C_DeriveKey so that it adds a session object (to the slot, so it is shared between sessions in the same app per the spec) with the result of the ECDH key agreement. The value of the generic secret key can then be retrieved with C_GetAttributeValue. This is similar to yubihsm_pkcs11.","Implement C_DeriveKey so that it adds a session object (to the slot, so it is shared between sessions in the same app per the spec) with the result of the ECDH key agreement. The value of the generic secret key can then be retrieved with C_GetAttributeValue. This is similar to yubihsm_pkcs11.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,264,2020-09-04T13:20:53Z,2020-09-07T06:47:47Z,2020-09-07T06:47:51Z,MERGED,True,12,10,1,https://github.com/nevun,Do not attempt scan if missing docker registry credentials,1,[],https://github.com/Yubico/yubico-piv-tool/pull/264,https://github.com/nevun,1,https://github.com/Yubico/yubico-piv-tool/pull/264,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,265,2020-09-04T13:49:35Z,2020-10-06T08:41:36Z,2020-10-06T08:41:42Z,MERGED,True,22,14,5,https://github.com/nevun,Fixes for getting yubico-piv-tool to compile on BSDs,4,[],https://github.com/Yubico/yubico-piv-tool/pull/265,https://github.com/nevun,1,https://github.com/Yubico/yubico-piv-tool/pull/265,There is still a pthread_mutexattr_* issue left to get all the way on OpenBSD but I figured these fixes would be beneficial anyway for other BSDs and for people linking with specific versions of libressl.,There is still a pthread_mutexattr_* issue left to get all the way on OpenBSD but I figured these fixes would be beneficial anyway for other BSDs and for people linking with specific versions of libressl.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,268,2020-10-02T13:20:19Z,2020-10-02T15:46:23Z,2020-10-02T15:46:27Z,MERGED,True,37,0,1,https://github.com/nevun,CodeQL scanning,1,[],https://github.com/Yubico/yubico-piv-tool/pull/268,https://github.com/nevun,1,https://github.com/Yubico/yubico-piv-tool/pull/268,https://github.blog/2020-09-30-code-scanning-is-now-available/,https://github.blog/2020-09-30-code-scanning-is-now-available/,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,271,2020-10-28T15:04:45Z,2020-11-11T15:25:11Z,2020-11-13T12:41:32Z,MERGED,True,83,23,3,https://github.com/qpernil,"Validate pcsc card handles, and reconnect if needed",10,[],https://github.com/Yubico/yubico-piv-tool/pull/271,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/271,This fixes the issue with removed & reinserted YubiKeys while a pkcs11 application is running,This fixes the issue with removed & reinserted YubiKeys while a pkcs11 application is running,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,273,2020-11-17T16:38:23Z,2020-11-18T07:54:30Z,2020-11-18T07:56:42Z,MERGED,True,807,924,4,https://github.com/qpernil,Using same pkcs11.h as yubihsm-shell,1,[],https://github.com/Yubico/yubico-piv-tool/pull/273,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/273,"Aligned to use the same pkcs11.h as yubihsm-shell, which includes the OAEP and PSS parameter definitions, properly aligned. This fixes an issue on Windows.","Aligned to use the same pkcs11.h as yubihsm-shell, which includes the OAEP and PSS parameter definitions, properly aligned. This fixes an issue on Windows.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,274,2020-11-18T08:15:16Z,2020-11-18T14:09:00Z,2020-11-24T09:13:54Z,MERGED,True,3,27,5,https://github.com/qpernil,Remove gcc & clang pragmas,1,[],https://github.com/Yubico/yubico-piv-tool/pull/274,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/274,Remove unneeded pragmas to suppress warnings,Remove unneeded pragmas to suppress warnings,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,275,2020-11-23T14:17:13Z,2020-11-24T08:54:28Z,2020-11-24T09:13:46Z,MERGED,True,4,82,2,https://github.com/nevun,PIV-129: simplify error handling,3,[],https://github.com/Yubico/yubico-piv-tool/pull/275,https://github.com/nevun,1,https://github.com/Yubico/yubico-piv-tool/pull/275,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,276,2020-11-23T19:47:21Z,2020-12-01T13:09:51Z,2021-01-31T12:39:09Z,MERGED,True,1,1,1,https://github.com/nbraud,Bump SO_VERSION,1,[],https://github.com/Yubico/yubico-piv-tool/pull/276,https://github.com/nbraud,1,https://github.com/Yubico/yubico-piv-tool/pull/276,"ABI compatibility broke, as the symbol versioning scheme changed, so SO_VERSION needs to be increased.
This presumably happened due to the switch to CMake.
Discovered while packaging v2.1.1 for Debian.","ABI compatibility broke, as the symbol versioning scheme changed, so SO_VERSION needs to be increased.
This presumably happened due to the switch to CMake.
Discovered while packaging v2.1.1 for Debian.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,277,2020-11-23T20:13:50Z,2020-12-07T09:56:01Z,2021-03-15T17:52:00Z,MERGED,True,6,8,4,https://github.com/nbraud,CMake: Honor standard variables,2,[],https://github.com/Yubico/yubico-piv-tool/pull/277,https://github.com/nbraud,1,https://github.com/Yubico/yubico-piv-tool/pull/277,"Do not ignore the variables that control CMake's RPATH handling,
such as CMAKE_INSTALL_RPATH (which is enabled by default anyway)
 Honor the standard CMAKE_INSTALL_* variables for install directories.

Both of those changes came up when packaging v2.1.1 for Debian,
as the CMake-based build system was failing to obey any of the standard
configuration variables.
This change should be backwards compatible, in that the defaults should
stay the same, and users who previously set YKPIV_* still override any
other variables.","Do not ignore the variables that control CMake's RPATH handling,
such as CMAKE_INSTALL_RPATH (which is enabled by default anyway)
 Honor the standard CMAKE_INSTALL_* variables for install directories.

Both of those changes came up when packaging v2.1.1 for Debian,
as the CMake-based build system was failing to obey any of the standard
configuration variables.
This change should be backwards compatible, in that the defaults should
stay the same, and users who previously set YKPIV_* still override any
other variables.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,277,2020-11-23T20:13:50Z,2020-12-07T09:56:01Z,2021-03-15T17:52:00Z,MERGED,True,6,8,4,https://github.com/nbraud,CMake: Honor standard variables,2,[],https://github.com/Yubico/yubico-piv-tool/pull/277,https://github.com/nbraud,2,https://github.com/Yubico/yubico-piv-tool/pull/277#issuecomment-770378262,"Do not ignore the variables that control CMake's RPATH handling,
such as CMAKE_INSTALL_RPATH (which is enabled by default anyway)
 Honor the standard CMAKE_INSTALL_* variables for install directories.

Both of those changes came up when packaging v2.1.1 for Debian,
as the CMake-based build system was failing to obey any of the standard
configuration variables.
This change should be backwards compatible, in that the defaults should
stay the same, and users who previously set YKPIV_* still override any
other variables.","6a91dcd got merged, then immediately reverted by 283e2e7.
Could you explain why / what happened?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,277,2020-11-23T20:13:50Z,2020-12-07T09:56:01Z,2021-03-15T17:52:00Z,MERGED,True,6,8,4,https://github.com/nbraud,CMake: Honor standard variables,2,[],https://github.com/Yubico/yubico-piv-tool/pull/277,https://github.com/aveenismail,3,https://github.com/Yubico/yubico-piv-tool/pull/277#issuecomment-770646538,"Do not ignore the variables that control CMake's RPATH handling,
such as CMAKE_INSTALL_RPATH (which is enabled by default anyway)
 Honor the standard CMAKE_INSTALL_* variables for install directories.

Both of those changes came up when packaging v2.1.1 for Debian,
as the CMake-based build system was failing to obey any of the standard
configuration variables.
This change should be backwards compatible, in that the defaults should
stay the same, and users who previously set YKPIV_* still override any
other variables.","Hi @nbraud
It was necessary to specifically set the RPATH when building for MacOS, otherwise the library and the commandline tool weren't linking correctly. We didn't see that setting the RPATH made a difference when building for a Linux system, and that's why we left it there.
Did you see a different behavior with Debian? Do you see a downside for doing it this way?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,277,2020-11-23T20:13:50Z,2020-12-07T09:56:01Z,2021-03-15T17:52:00Z,MERGED,True,6,8,4,https://github.com/nbraud,CMake: Honor standard variables,2,[],https://github.com/Yubico/yubico-piv-tool/pull/277,https://github.com/nbraud,4,https://github.com/Yubico/yubico-piv-tool/pull/277#issuecomment-773966321,"Do not ignore the variables that control CMake's RPATH handling,
such as CMAKE_INSTALL_RPATH (which is enabled by default anyway)
 Honor the standard CMAKE_INSTALL_* variables for install directories.

Both of those changes came up when packaging v2.1.1 for Debian,
as the CMake-based build system was failing to obey any of the standard
configuration variables.
This change should be backwards compatible, in that the defaults should
stay the same, and users who previously set YKPIV_* still override any
other variables.","Did you see a different behavior with Debian? Do you see a downside for doing it this way?

Yes, this makes the build non-reproducible, i.e. rebuilding the same source, with the same toolchain, will give different results depending on the build path.  Setting CMAKE_BUILD_RPATH_USE_ORIGIN or CMAKE_BUILD_WITH_INSTALL_RPATH might work to have builds that are both reproducible-by-default and work on macOS.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,277,2020-11-23T20:13:50Z,2020-12-07T09:56:01Z,2021-03-15T17:52:00Z,MERGED,True,6,8,4,https://github.com/nbraud,CMake: Honor standard variables,2,[],https://github.com/Yubico/yubico-piv-tool/pull/277,https://github.com/aveenismail,5,https://github.com/Yubico/yubico-piv-tool/pull/277#issuecomment-799621420,"Do not ignore the variables that control CMake's RPATH handling,
such as CMAKE_INSTALL_RPATH (which is enabled by default anyway)
 Honor the standard CMAKE_INSTALL_* variables for install directories.

Both of those changes came up when packaging v2.1.1 for Debian,
as the CMake-based build system was failing to obey any of the standard
configuration variables.
This change should be backwards compatible, in that the defaults should
stay the same, and users who previously set YKPIV_* still override any
other variables.",An update was committed to set INSTALL_RPATH only when building on MacOS. I hope this resolves the issue,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,280,2020-12-01T11:11:46Z,2020-12-01T12:26:50Z,2020-12-01T12:29:13Z,MERGED,True,6,6,3,https://github.com/nevun,Close more minor memory leak,2,[],https://github.com/Yubico/yubico-piv-tool/pull/280,https://github.com/nevun,1,https://github.com/Yubico/yubico-piv-tool/pull/280,and also remove a potential double free in the error path.,and also remove a potential double free in the error path.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/koh-osug,1,https://github.com/Yubico/yubico-piv-tool/pull/281,I'm using the tool with a card only supporting T0. Support for this was missing.,I'm using the tool with a card only supporting T0. Support for this was missing.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/aveenismail,2,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-760079070,I'm using the tool with a card only supporting T0. Support for this was missing.,Thank you for the patch @koh-osug. We are somewhat curious about why you need support for T0?,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/kaoh,3,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-760184532,I'm using the tool with a card only supporting T0. Support for this was missing.,I have a smart card only offering T=0 and installed a PIV applet on it.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/qpernil,4,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985443386,I'm using the tool with a card only supporting T0. Support for this was missing.,Just curious again - why use yubico-piv-tool in that case ? The reason for the question at this time is #329 which would disable that..,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/kaoh,5,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985460893,I'm using the tool with a card only supporting T0. Support for this was missing.,yubico-piv-tool is the only tool I know to manage the PIV token. If no T0 is supported it is becoming useless for my smart cards and I have to maintain a fork for my needs. What would be the alternative? Why is #329 breaking the T0 support?,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/qpernil,6,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985512180,I'm using the tool with a card only supporting T0. Support for this was missing.,"Sorry I wasn't clear - It has nothing to do with T0 support, but will reject non-yubico PIV applets, based on the support for our proprietary get-version instruction. This makes sense when trying to enumerate all YubiKeys without filtering on pcsc reader names, particularly to support NFC readers. This instruction has been there long enough it will work for all contemporary YubiKeys. But the change that rejects non-YubiKeys is built into ykpiv_connect in that PR, so it would affect anything based on libykpiv, not just ykcs11..",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/qpernil,7,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985576085,I'm using the tool with a card only supporting T0. Support for this was missing.,"Played around with the PCSC protocol tracking, have a look at b9389db",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/kaoh,8,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985605522,I'm using the tool with a card only supporting T0. Support for this was missing.,"Played around with the PCSC protocol tracking, have a look at b9389db

Looks good, in case the state should be persisted.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/qpernil,9,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985615630,I'm using the tool with a card only supporting T0. Support for this was missing.,"Had to change it a couple of times because it didn't compile on Windows. Force pushed.
I just thought https://github.com/Yubico/yubico-piv-tool/tree/track-protocol might be merged with your changes.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/kaoh,10,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985616369,I'm using the tool with a card only supporting T0. Support for this was missing.,"Sorry I wasn't clear - It has nothing to do with T0 support, but will reject non-yubico PIV applets, based on the support for our proprietary get-version instruction. This makes sense when trying to enumerate all YubiKeys without filtering on pcsc reader names, particularly to support NFC readers. This instruction has been there long enough it will work for all contemporary YubiKeys. But the change that rejects non-YubiKeys is built into ykpiv_connect in that PR, so it would affect anything based on libykpiv, not just ykcs11..

I haven't looked into the details and if it is really necessary to exclude tokens just following the PIV specification and not having the Yubico extension. Could the goals of the new feature also achieved with a fallback solution? In my case the applet is implementing the Yubico extensions and I might not be affected. But there is also the interesting OpenFIPS implementation featuring a FIPS certification which is interesting in high security / federal environments which I assume the Yubico tokens are not offering. This implementation is not implementing the Yubico extensions",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/kaoh,11,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985616621,I'm using the tool with a card only supporting T0. Support for this was missing.,"Had to change it a couple of times because it didn't compile on Windows. Force pushed. I just thought this might be merged with your changes.

Sure.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/qpernil,12,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985621970,I'm using the tool with a card only supporting T0. Support for this was missing.,"What I wanted was a way to support NFC readers seamlessly in ykcs11, and we were checking the version already. So it was literally a one-liner to exclude non-YubiKey PIV applets, which was previously done by filtering on reader name. The change in yubico-piv-tool just follows from where I changed it, it wasn't really a desire to have, but it would mostly make sense there too.
Im curious what applet implements that extension.. Is it something you wrote yourself ? Anyway, I haven't tested the tool with a non-YubiKey, that was never intended to be supported. I'd be interested to know what else may have broken with that applet ? Or was it intentionally written to work with yubico-piv-tool ?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/kaoh,13,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985630300,I'm using the tool with a card only supporting T0. Support for this was missing.,"The other applet I'm using is the PivApplet. These two applets are the most advanced and functional applets I'm aware of. I know of some large companies in the US and federal institutions of the five eyes states which are also using the PIV standard, based on some of these applets or commercial solutions. I would assume they are also using for some administrative tasks the Yubico piv tools.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/qpernil,14,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985685640,I'm using the tool with a card only supporting T0. Support for this was missing.,"OK, would you mind rebasing on top of the track-protocol branch ? I have to admit I was unaware of this use-case for yubico-piv-tool..",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/kaoh,15,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985825873,I'm using the tool with a card only supporting T0. Support for this was missing.,"OK, would you mind rebasing on top of the track-protocol branch ?

Yes, will do.

I have to admit I was unaware of this use-case for yubico-piv-tool..

Yes, sometimes it is interesting who is using open source silently.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/kaoh,16,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-985882849,I'm using the tool with a card only supporting T0. Support for this was missing.,I tried to merge it. Somehow the rebasing showed conflicts.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/qpernil,17,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-987338778,I'm using the tool with a card only supporting T0. Support for this was missing.,I wonder if the Le handling is correct in this code. As far as I can interpret 7816-3 it looks to me that Le in an APDU is not encoded in a TPDU. What is your take on that ? Have you been able to test that code path ?,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/qpernil,18,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-987343097,I'm using the tool with a card only supporting T0. Support for this was missing.,"I've refactored things a bit in my branch track-protocol. I think it was incorrect that many functions were calling the _send_data function directly, when that function was really a _send_tpdu type function. So I refactored it to always use _ykpiv_transfer_data, through _ypkpiv_send_apdu for those functions that want to build up a (limited length) command apdu in the APDU struct and send it. The old _send_data is now called _send_tpdu. If you would be kind enough to test this I'd appreciate it. It doesn't currently handle the 6cXX status code, let me know if that is needed.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/kaoh,19,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-987353803,I'm using the tool with a card only supporting T0. Support for this was missing.,"I wonder if the Le handling is correct in this code. As far as I can interpret 7816-3 it looks to me that Le in an APDU is not encoded in a TPDU. What is your take on that ? Have you been able to test that code path ?

The structure where I added the Le byte is the APDU structure. Without it a segmentation fault was raised later, I guess in the code also full case 4 APDUs are used including an Le byte.  For T1 the implementation does not have to care for this, I guess.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/kaoh,20,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-987356959,I'm using the tool with a card only supporting T0. Support for this was missing.,"It doesn't currently handle the 6cXX status code, let me know if that is needed.

Not sure, if I just added it for completeness or if it failed without it because an Le was not accepted.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/qpernil,21,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-987438246,I'm using the tool with a card only supporting T0. Support for this was missing.,"Since the _send_data function directly calls SCardTransmit the APDU structure is really a tpdu at that stage. And the spec seems to say not to encode Le for a case 4 apdu in the tpdu. It's very confusing since the spec speaks of how Le is encoded in the apdu. And for case 2 it is in fact encoded in the tpdu, in the same offset as Lc, so in our APDU struct it would be lc, with the only difference being that no data follows. So to me it looks more correct before the 091eb30 commit.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/kaoh,22,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-987493072,I'm using the tool with a card only supporting T0. Support for this was missing.,"I now know that this was important for the 6C handling and Case 2S.3 – Le not accepted, La indicated, but you should be right, that here Lc falls together with Le, I don't know why I added an extra byte then. But when looking into this the 6C handling might be important for the Case 3 to be able to return data if the applet is enforcing that the send APDU must have the exact Le set.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/qpernil,23,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-987649377,I'm using the tool with a card only supporting T0. Support for this was missing.,I've now made a PR from my track-protocol branch here #340. If you have the inclination to test that code it would be appreciated.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/qpernil,24,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-997471001,I'm using the tool with a card only supporting T0. Support for this was missing.,Closing this PR as it is adressed in #340,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/qpernil,25,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-997808586,I'm using the tool with a card only supporting T0. Support for this was missing.,"If you have any issues with yubico-piv-tool with your smartcard I'd appreciate a heads-up so we can fix anything that makes sense, i.e. still works with a YubiKey. Thx!
/Per",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,281,2020-12-16T04:38:27Z,2021-12-19T22:14:14Z,2021-12-20T10:55:40Z,CLOSED,False,55,11,2,https://github.com/koh-osug,T0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/281,https://github.com/koh-osug,26,https://github.com/Yubico/yubico-piv-tool/pull/281#issuecomment-997815128,I'm using the tool with a card only supporting T0. Support for this was missing.,"Thanks a lot. Everything looks alright right, as long as the transport layer works, it should behave the same way like a Yubico token.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,282,2020-12-18T19:59:51Z,2022-02-16T14:02:28Z,2022-02-16T14:02:28Z,MERGED,True,4,4,1,https://github.com/h3xx,Fix GNUInstallDirs application,1,[],https://github.com/Yubico/yubico-piv-tool/pull/282,https://github.com/h3xx,1,https://github.com/Yubico/yubico-piv-tool/pull/282,"Use the ""FULL"" equivalent instead of glueing paths together that may-or-may-not be absolute paths.
More information about GNUInstallDirs: https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html","Use the ""FULL"" equivalent instead of glueing paths together that may-or-may-not be absolute paths.
More information about GNUInstallDirs: https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,286,2021-01-22T16:31:47Z,2021-03-11T15:10:34Z,2021-03-11T15:10:35Z,CLOSED,False,4,4,1,https://github.com/mkszuba,Use CMAKE_INSTALL_FULL_<dir> in install paths,1,[],https://github.com/Yubico/yubico-piv-tool/pull/286,https://github.com/mkszuba,1,https://github.com/Yubico/yubico-piv-tool/pull/286,"At present, default installation paths as set in cmake/options.cmake are generated by joining CMAKE_INSTALL_PREFIX and respective CMAKE_INSTALL_ variables. This results in said paths being incorrect if the latter contain absolute paths, which while not the case with cmake by default, is in principle allowed. On the other hand, using CMAKE_INSTALL_FULL_ works regardless of whether CMAKE_INSTALL_ are relative or absolute.
See also: https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html","At present, default installation paths as set in cmake/options.cmake are generated by joining CMAKE_INSTALL_PREFIX and respective CMAKE_INSTALL_ variables. This results in said paths being incorrect if the latter contain absolute paths, which while not the case with cmake by default, is in principle allowed. On the other hand, using CMAKE_INSTALL_FULL_ works regardless of whether CMAKE_INSTALL_ are relative or absolute.
See also: https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,286,2021-01-22T16:31:47Z,2021-03-11T15:10:34Z,2021-03-11T15:10:35Z,CLOSED,False,4,4,1,https://github.com/mkszuba,Use CMAKE_INSTALL_FULL_<dir> in install paths,1,[],https://github.com/Yubico/yubico-piv-tool/pull/286,https://github.com/mkszuba,2,https://github.com/Yubico/yubico-piv-tool/pull/286#issuecomment-796806516,"At present, default installation paths as set in cmake/options.cmake are generated by joining CMAKE_INSTALL_PREFIX and respective CMAKE_INSTALL_ variables. This results in said paths being incorrect if the latter contain absolute paths, which while not the case with cmake by default, is in principle allowed. On the other hand, using CMAKE_INSTALL_FULL_ works regardless of whether CMAKE_INSTALL_ are relative or absolute.
See also: https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html","...and I've just realised that somewhat vague PR title notwithstanding, this is in fact a duplicate of #282 .",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,288,2021-01-31T14:50:01Z,2021-05-03T07:19:05Z,2021-05-03T07:19:05Z,MERGED,True,4,4,2,https://github.com/nbraud,yubico-piv-tool: Put useful description in manpage,1,[],https://github.com/Yubico/yubico-piv-tool/pull/288,https://github.com/nbraud,1,https://github.com/Yubico/yubico-piv-tool/pull/288,"help2man's -n parameter takes a description of the command,
and is used in generating the whatis entry.
Without a description, it defaults to something worse-than-useless:
manual page for yubico-piv-tool ${version}.","help2man's -n parameter takes a description of the command,
and is used in generating the whatis entry.
Without a description, it defaults to something worse-than-useless:
manual page for yubico-piv-tool ${version}.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,293,2021-03-25T15:24:10Z,2021-04-28T15:25:52Z,2021-04-29T11:33:20Z,MERGED,True,12,1,3,https://github.com/qpernil,Ignore and return CK_FALSE for CKA_SIGN_RECOVER,1,[],https://github.com/Yubico/yubico-piv-tool/pull/293,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/293,See #291,See #291,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,297,2021-04-13T14:11:06Z,2021-04-28T15:26:19Z,2021-04-29T11:33:18Z,MERGED,True,16,15,3,https://github.com/qpernil,Fixed EC flags from C_GetMechanismInfo,2,[],https://github.com/Yubico/yubico-piv-tool/pull/297,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/297,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,299,2021-04-22T12:41:54Z,2021-04-22T14:23:07Z,2021-04-22T14:23:11Z,MERGED,True,0,84,1,https://github.com/qpernil,Remove big sur build since it's not supported by github yet,1,[],https://github.com/Yubico/yubico-piv-tool/pull/299,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/299,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,306,2021-06-09T09:37:23Z,2021-06-09T14:50:17Z,2021-09-01T12:35:42Z,MERGED,True,7,4,3,https://github.com/qpernil,Handle no pubkey,3,[],https://github.com/Yubico/yubico-piv-tool/pull/306,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/306,"Handle segfault due to no public key being present in certain circumstance, such as importing a key to a slot that had no key when the session was opened. Also fixed a bug in tests causing stack overwrite if running tests with more than one YubiKey attached.","Handle segfault due to no public key being present in certain circumstance, such as importing a key to a slot that had no key when the session was opened. Also fixed a bug in tests causing stack overwrite if running tests with more than one YubiKey attached.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,307,2021-06-22T13:38:49Z,2022-02-11T12:53:24Z,2022-02-11T12:53:26Z,MERGED,True,33,99,3,https://github.com/qpernil,Simplify C_CreateObject,1,[],https://github.com/Yubico/yubico-piv-tool/pull/307,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/307,Simplify C_CreateObject and remove token_import_private_key,Simplify C_CreateObject and remove token_import_private_key,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,308,2021-06-22T13:46:44Z,,2021-12-21T17:17:06Z,OPEN,False,4059,1330,5,https://github.com/qpernil,Support for PKCS11 3.0,3,[],https://github.com/Yubico/yubico-piv-tool/pull/308,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/308,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,311,2021-07-12T09:45:34Z,2021-07-13T08:02:18Z,2021-12-07T17:25:02Z,MERGED,True,41,2,2,https://github.com/a-dma,P11 attributes,2,[],https://github.com/Yubico/yubico-piv-tool/pull/311,https://github.com/a-dma,1,https://github.com/Yubico/yubico-piv-tool/pull/311,"Make both CKA_SENSITIVE and CKA_EXTRACTABLE settable, but also enforce that they are always respectively CK_TRUE and CK_FALSE.","Make both CKA_SENSITIVE and CKA_EXTRACTABLE settable, but also enforce that they are always respectively CK_TRUE and CK_FALSE.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,311,2021-07-12T09:45:34Z,2021-07-13T08:02:18Z,2021-12-07T17:25:02Z,MERGED,True,41,2,2,https://github.com/a-dma,P11 attributes,2,[],https://github.com/Yubico/yubico-piv-tool/pull/311,https://github.com/mouse07410,2,https://github.com/Yubico/yubico-piv-tool/pull/311#issuecomment-878206842,"Make both CKA_SENSITIVE and CKA_EXTRACTABLE settable, but also enforce that they are always respectively CK_TRUE and CK_FALSE.","CKA_SENSITIVE in a way contradicts CKA_EXTRACTABLE, as one says (when true) ""encrypted key can be exported"", and the other one says (when false) ""don't export this key under any circumstances"".
What do you think is the right behavior if the caller erroneously tries to set both?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,311,2021-07-12T09:45:34Z,2021-07-13T08:02:18Z,2021-12-07T17:25:02Z,MERGED,True,41,2,2,https://github.com/a-dma,P11 attributes,2,[],https://github.com/Yubico/yubico-piv-tool/pull/311,https://github.com/wiktor-k,3,https://github.com/Yubico/yubico-piv-tool/pull/311#issuecomment-878211010,"Make both CKA_SENSITIVE and CKA_EXTRACTABLE settable, but also enforce that they are always respectively CK_TRUE and CK_FALSE.","What do you think is the right behavior if the caller erroneously tries to set both?

Yeah, this can be a tricky set of constraints if one wants to implement it in 100%.
Fortunately this PR solves the common sensitive = true, extractable = false case that is a way of saying ""I don't want these keys to be ever exposed out of the token"" and it's good enough for me and the ARM folks working on parsec.
Thanks! 🙇",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,317,2021-09-01T12:33:25Z,2021-09-01T15:29:04Z,2021-12-07T17:24:59Z,MERGED,True,3,18,1,https://github.com/aveenismail,Fix freeing objects,1,[],https://github.com/Yubico/yubico-piv-tool/pull/317,https://github.com/aveenismail,1,https://github.com/Yubico/yubico-piv-tool/pull/317,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,318,2021-09-01T12:57:37Z,2021-09-01T13:26:37Z,2021-12-07T17:24:56Z,MERGED,True,2,12,1,https://github.com/aveenismail,Update Github Actions for Windows,1,[],https://github.com/Yubico/yubico-piv-tool/pull/318,https://github.com/aveenismail,1,https://github.com/Yubico/yubico-piv-tool/pull/318,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,323,2021-10-25T06:48:51Z,2021-10-26T11:15:54Z,2021-10-26T11:15:59Z,MERGED,True,16,4,1,https://github.com/a-dma,lib: reset the card on reconnection attempts,2,[],https://github.com/Yubico/yubico-piv-tool/pull/323,https://github.com/a-dma,1,https://github.com/Yubico/yubico-piv-tool/pull/323,"This is to mitigate not transacted errors that happen when an
application has an outstanding connection with the card like ssh-agent
through ykcs11, but other processes may select different applications
on the card.
Fixes #322.","This is to mitigate not transacted errors that happen when an
application has an outstanding connection with the card like ssh-agent
through ykcs11, but other processes may select different applications
on the card.
Fixes #322.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,323,2021-10-25T06:48:51Z,2021-10-26T11:15:54Z,2021-10-26T11:15:59Z,MERGED,True,16,4,1,https://github.com/a-dma,lib: reset the card on reconnection attempts,2,[],https://github.com/Yubico/yubico-piv-tool/pull/323,https://github.com/mouse07410,2,https://github.com/Yubico/yubico-piv-tool/pull/323#issuecomment-950794813,"This is to mitigate not transacted errors that happen when an
application has an outstanding connection with the card like ssh-agent
through ykcs11, but other processes may select different applications
on the card.
Fixes #322.","OpenSC has a configuration parameter that tells the library whether to reset upon Reconnect. This mattered for some apps, for example, Java jarsigner.
Or are you saying there's never a legitimate need to ...LEAVE...?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,323,2021-10-25T06:48:51Z,2021-10-26T11:15:54Z,2021-10-26T11:15:59Z,MERGED,True,16,4,1,https://github.com/a-dma,lib: reset the card on reconnection attempts,2,[],https://github.com/Yubico/yubico-piv-tool/pull/323,https://github.com/qpernil,3,https://github.com/Yubico/yubico-piv-tool/pull/323#issuecomment-950940469,"This is to mitigate not transacted errors that happen when an
application has an outstanding connection with the card like ssh-agent
through ykcs11, but other processes may select different applications
on the card.
Fixes #322.","I think it is safer to reset the card when someone else has messed with it outside our control, we don't know what applet is selected etc. We perform a re-select anyway so it should not be needed (hence the previous code) but probably better safe than sorry here. I've also found that the error code is different on Linux and MacOS, hence the handling of additional error codes.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,324,2021-10-25T12:40:08Z,2021-10-25T13:31:09Z,2021-10-25T13:31:15Z,MERGED,True,1,108,1,https://github.com/qpernil,"Remove Ubuntu 16.04 builds, github has no runners any more",1,[],https://github.com/Yubico/yubico-piv-tool/pull/324,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/324,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,325,2021-10-26T09:45:46Z,2021-10-26T14:27:29Z,2021-10-26T14:27:34Z,CLOSED,False,7,7,1,https://github.com/qpernil,Avoid sign extension of PCSC error codes,1,[],https://github.com/Yubico/yubico-piv-tool/pull/325,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/325,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,326,2021-10-27T08:02:39Z,,2021-12-31T14:47:17Z,OPEN,False,59,58,2,https://github.com/qpernil,Automatically verify PIN in sign_data to support always-auth keys,1,[],https://github.com/Yubico/yubico-piv-tool/pull/326,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/326,"Verify PIN in sign_data to be able to use always-authenticate keys in commands that perform more than one operation, potential fix for #321. This means -averify-pin is not needed any more, any command that signs will verify (and prompt for if not given already) the PIN automatically. The action is retained in case someone wants to just verify the PIN.","Verify PIN in sign_data to be able to use always-authenticate keys in commands that perform more than one operation, potential fix for #321. This means -averify-pin is not needed any more, any command that signs will verify (and prompt for if not given already) the PIN automatically. The action is retained in case someone wants to just verify the PIN.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,326,2021-10-27T08:02:39Z,,2021-12-31T14:47:17Z,OPEN,False,59,58,2,https://github.com/qpernil,Automatically verify PIN in sign_data to support always-auth keys,1,[],https://github.com/Yubico/yubico-piv-tool/pull/326,https://github.com/mouse07410,2,https://github.com/Yubico/yubico-piv-tool/pull/326#issuecomment-983599427,"Verify PIN in sign_data to be able to use always-authenticate keys in commands that perform more than one operation, potential fix for #321. This means -averify-pin is not needed any more, any command that signs will verify (and prompt for if not given already) the PIN automatically. The action is retained in case someone wants to just verify the PIN.","Could you please confirm that this PR would automatically prompt for PIN only when the token returns NOT_LOGGED_IN, as opposed to when the driver thinks it should...?",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,326,2021-10-27T08:02:39Z,,2021-12-31T14:47:17Z,OPEN,False,59,58,2,https://github.com/qpernil,Automatically verify PIN in sign_data to support always-auth keys,1,[],https://github.com/Yubico/yubico-piv-tool/pull/326,https://github.com/qpernil,3,https://github.com/Yubico/yubico-piv-tool/pull/326#issuecomment-983714014,"Verify PIN in sign_data to be able to use always-authenticate keys in commands that perform more than one operation, potential fix for #321. This means -averify-pin is not needed any more, any command that signs will verify (and prompt for if not given already) the PIN automatically. The action is retained in case someone wants to just verify the PIN.","This is a simplistic solution, simply verifying pin everytime something tries to perform a signature. The pin will be taken from the command line if given, otherwise it will be requested (once). Previously there was no automatic pin verification, you had to specify -averify-pin on the command line to actually verify the pin. The --pin option would only specify the pin value to be used by -averify-pin, not verify it on it's own. So -averify-pin would seem to be able to solve the problem, but the issue was that other commands would perform more than one command with the YubiKey, invalidating the PIN again for always-auth keys. With this solution there will be too many PIN verifications for normal keys, but that is not really a problem as the pin will be kept in memory. This whole reasoning only applies to yubico-piv-tool and not libykcs11.",True,{'THUMBS_UP': ['https://github.com/mouse07410']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,326,2021-10-27T08:02:39Z,,2021-12-31T14:47:17Z,OPEN,False,59,58,2,https://github.com/qpernil,Automatically verify PIN in sign_data to support always-auth keys,1,[],https://github.com/Yubico/yubico-piv-tool/pull/326,https://github.com/qpernil,4,https://github.com/Yubico/yubico-piv-tool/pull/326#issuecomment-984767347,"Verify PIN in sign_data to be able to use always-authenticate keys in commands that perform more than one operation, potential fix for #321. This means -averify-pin is not needed any more, any command that signs will verify (and prompt for if not given already) the PIN automatically. The action is retained in case someone wants to just verify the PIN.",See also #338. Still considering security implications of that one.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,327,2021-10-27T08:16:18Z,2021-10-27T22:08:47Z,2021-10-27T22:08:50Z,MERGED,True,12,11,5,https://github.com/qpernil,Use tag names instead of magic numbers,1,[],https://github.com/Yubico/yubico-piv-tool/pull/327,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/327,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,328,2021-10-28T09:22:49Z,2022-02-11T15:58:21Z,2022-02-11T15:58:25Z,MERGED,True,110,66,1,https://github.com/qpernil,Support attestation in selfsign-certificate command,1,[],https://github.com/Yubico/yubico-piv-tool/pull/328,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/328,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,329,2021-10-28T13:53:42Z,2022-02-11T16:25:30Z,2022-02-11T16:25:34Z,MERGED,True,55,62,4,https://github.com/qpernil,Support YubiKeys in NFC readers in ykcs11,2,[],https://github.com/Yubico/yubico-piv-tool/pull/329,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/329,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,329,2021-10-28T13:53:42Z,2022-02-11T16:25:30Z,2022-02-11T16:25:34Z,MERGED,True,55,62,4,https://github.com/qpernil,Support YubiKeys in NFC readers in ykcs11,2,[],https://github.com/Yubico/yubico-piv-tool/pull/329,https://github.com/mouse07410,2,https://github.com/Yubico/yubico-piv-tool/pull/329#issuecomment-953876646,,Great idea!,True,{'THUMBS_UP': ['https://github.com/qpernil']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,329,2021-10-28T13:53:42Z,2022-02-11T16:25:30Z,2022-02-11T16:25:34Z,MERGED,True,55,62,4,https://github.com/qpernil,Support YubiKeys in NFC readers in ykcs11,2,[],https://github.com/Yubico/yubico-piv-tool/pull/329,https://github.com/qpernil,3,https://github.com/Yubico/yubico-piv-tool/pull/329#issuecomment-974241236,,Need to investigate how this behaves with a non-YubiKey PIV applet,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,329,2021-10-28T13:53:42Z,2022-02-11T16:25:30Z,2022-02-11T16:25:34Z,MERGED,True,55,62,4,https://github.com/qpernil,Support YubiKeys in NFC readers in ykcs11,2,[],https://github.com/Yubico/yubico-piv-tool/pull/329,https://github.com/qpernil,4,https://github.com/Yubico/yubico-piv-tool/pull/329#issuecomment-985437200,,"Now doesn't filter on PCSC reader names, but instead filters on PIV applets that supports the proprietary get-version command. The latter change applies to any users of libykpiv, not just ykcs11. We were already using this command, we just stopped ignoring errors now.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,331,2021-11-02T20:17:28Z,2021-11-26T15:49:14Z,2021-11-26T15:49:17Z,MERGED,True,5,0,1,https://github.com/qpernil,Call setlocale on startup,1,[],https://github.com/Yubico/yubico-piv-tool/pull/331,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/331,"Call setlocale on startup, possible fix for #296","Call setlocale on startup, possible fix for #296",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,332,2021-11-08T22:52:19Z,2021-12-13T12:48:40Z,2021-12-13T12:48:44Z,MERGED,True,65,26,3,https://github.com/qpernil,Re-establish context if no longer available.,1,[],https://github.com/Yubico/yubico-piv-tool/pull/332,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/332,Requires remembering the reader name. Should also check serial number,Requires remembering the reader name. Should also check serial number,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,332,2021-11-08T22:52:19Z,2021-12-13T12:48:40Z,2021-12-13T12:48:44Z,MERGED,True,65,26,3,https://github.com/qpernil,Re-establish context if no longer available.,1,[],https://github.com/Yubico/yubico-piv-tool/pull/332,https://github.com/qpernil,2,https://github.com/Yubico/yubico-piv-tool/pull/332#issuecomment-964591990,Requires remembering the reader name. Should also check serial number,"With the latest change here it also works fine on Windows. If you remove the last reader on Windows the context becomes invalid, something that I haven't seen happen at all on other platforms",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,334,2021-11-14T17:25:45Z,2021-11-15T07:03:23Z,2021-12-08T09:12:44Z,MERGED,True,2,2,1,https://github.com/neverpanic,Avoid header include guard conflict with OpenSSL 3,1,[],https://github.com/Yubico/yubico-piv-tool/pull/334,https://github.com/neverpanic,1,https://github.com/Yubico/yubico-piv-tool/pull/334,"OpenSSL 3.x ships an openssl/types.h header that's protected with an OPENSSL_TYPES_H include guard macro.  OpenSSL's headers fail to parse when ykcs11/openssl_types.h defines this symbol.
Switch the include guard for the file to YKCS11_OPENSSL_TYPES_H to prevent this from happening.","OpenSSL 3.x ships an openssl/types.h header that's protected with an OPENSSL_TYPES_H include guard macro.  OpenSSL's headers fail to parse when ykcs11/openssl_types.h defines this symbol.
Switch the include guard for the file to YKCS11_OPENSSL_TYPES_H to prevent this from happening.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,334,2021-11-14T17:25:45Z,2021-11-15T07:03:23Z,2021-12-08T09:12:44Z,MERGED,True,2,2,1,https://github.com/neverpanic,Avoid header include guard conflict with OpenSSL 3,1,[],https://github.com/Yubico/yubico-piv-tool/pull/334,https://github.com/qpernil,2,https://github.com/Yubico/yubico-piv-tool/pull/334#issuecomment-968593522,"OpenSSL 3.x ships an openssl/types.h header that's protected with an OPENSSL_TYPES_H include guard macro.  OpenSSL's headers fail to parse when ykcs11/openssl_types.h defines this symbol.
Switch the include guard for the file to YKCS11_OPENSSL_TYPES_H to prevent this from happening.",Thanks a lot for this fix !,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,334,2021-11-14T17:25:45Z,2021-11-15T07:03:23Z,2021-12-08T09:12:44Z,MERGED,True,2,2,1,https://github.com/neverpanic,Avoid header include guard conflict with OpenSSL 3,1,[],https://github.com/Yubico/yubico-piv-tool/pull/334,https://github.com/schopin-pro,3,https://github.com/Yubico/yubico-piv-tool/pull/334#issuecomment-988630720,"OpenSSL 3.x ships an openssl/types.h header that's protected with an OPENSSL_TYPES_H include guard macro.  OpenSSL's headers fail to parse when ykcs11/openssl_types.h defines this symbol.
Switch the include guard for the file to YKCS11_OPENSSL_TYPES_H to prevent this from happening.","FWIW, we've cherry-picked this patch in Ubuntu as part of our OpenSSL 3.0 transition effort. Thank you for this! :)",True,{'THUMBS_UP': ['https://github.com/neverpanic']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,335,2021-11-15T19:08:39Z,2022-02-08T14:34:29Z,2022-02-08T14:34:33Z,MERGED,True,624,515,12,https://github.com/qpernil,AES mgmt key support,5,[],https://github.com/Yubico/yubico-piv-tool/pull/335,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/335,Fix for #333,Fix for #333,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,336,2021-11-26T15:38:30Z,2021-11-26T15:45:52Z,2021-11-26T15:45:56Z,MERGED,True,1,1,1,https://github.com/qpernil,Fixed so verbosity starts from 1,1,[],https://github.com/Yubico/yubico-piv-tool/pull/336,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/336,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,337,2021-12-02T10:29:46Z,2021-12-02T10:30:23Z,2021-12-02T10:30:29Z,MERGED,True,6,3,1,https://github.com/qpernil,set_object fails on invalid object id,1,[],https://github.com/Yubico/yubico-piv-tool/pull/337,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/337,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,338,2021-12-02T15:35:06Z,,2021-12-31T14:46:54Z,OPEN,False,25,8,1,https://github.com/qpernil,Automatically verify cached pin and retry general auth on sw = 6982,1,[],https://github.com/Yubico/yubico-piv-tool/pull/338,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/338,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,338,2021-12-02T15:35:06Z,,2021-12-31T14:46:54Z,OPEN,False,25,8,1,https://github.com/qpernil,Automatically verify cached pin and retry general auth on sw = 6982,1,[],https://github.com/Yubico/yubico-piv-tool/pull/338,https://github.com/qpernil,2,https://github.com/Yubico/yubico-piv-tool/pull/338#issuecomment-984741213,,Different approach to problems with always-auth keys - automatically verify cached pin and retry general-authenticate,True,{'THUMBS_UP': ['https://github.com/mouse07410']}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,338,2021-12-02T15:35:06Z,,2021-12-31T14:46:54Z,OPEN,False,25,8,1,https://github.com/qpernil,Automatically verify cached pin and retry general auth on sw = 6982,1,[],https://github.com/Yubico/yubico-piv-tool/pull/338,https://github.com/qpernil,3,https://github.com/Yubico/yubico-piv-tool/pull/338#issuecomment-984744523,,"The trouble with this approach is that it is in the library, and hence affects all usage, not just piv-tool",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,338,2021-12-02T15:35:06Z,,2021-12-31T14:46:54Z,OPEN,False,25,8,1,https://github.com/qpernil,Automatically verify cached pin and retry general auth on sw = 6982,1,[],https://github.com/Yubico/yubico-piv-tool/pull/338,https://github.com/mouse07410,4,https://github.com/Yubico/yubico-piv-tool/pull/338#issuecomment-984854846,,"I like this approach very much, as it returns the decision whether to (re-)authenticate, back to where it belongs - to the token itself.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,338,2021-12-02T15:35:06Z,,2021-12-31T14:46:54Z,OPEN,False,25,8,1,https://github.com/qpernil,Automatically verify cached pin and retry general auth on sw = 6982,1,[],https://github.com/Yubico/yubico-piv-tool/pull/338,https://github.com/qpernil,5,https://github.com/Yubico/yubico-piv-tool/pull/338#issuecomment-1002600600,,"I think this is probably the wrong approach after all, even if it happens to be very convenient and slots into the code very smoothly. It would essentially negate the intention with always-auth keys, with no way for the application to choose behaviour.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,338,2021-12-02T15:35:06Z,,2021-12-31T14:46:54Z,OPEN,False,25,8,1,https://github.com/qpernil,Automatically verify cached pin and retry general auth on sw = 6982,1,[],https://github.com/Yubico/yubico-piv-tool/pull/338,https://github.com/mouse07410,6,https://github.com/Yubico/yubico-piv-tool/pull/338#issuecomment-1002611294,,"It is the right approach of the user wants his app to behave this way. So, using cached PIN or not should be a configurable option.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,338,2021-12-02T15:35:06Z,,2021-12-31T14:46:54Z,OPEN,False,25,8,1,https://github.com/qpernil,Automatically verify cached pin and retry general auth on sw = 6982,1,[],https://github.com/Yubico/yubico-piv-tool/pull/338,https://github.com/qpernil,7,https://github.com/Yubico/yubico-piv-tool/pull/338#issuecomment-1002612948,,"I think it is more in line with pkcs#11 that the application chooses what to do, after all there is support in pkcs11 to to it well from the application, either using the flag to preeemptively prompt, or to just automatically re-verify a pin it keeps in memory, or alternatively to base the behaviour on the return codes (and hope that different pkcs11 modules give the 'right' error code)",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,340,2021-12-07T07:32:59Z,2022-02-11T11:08:24Z,2022-02-11T11:08:42Z,MERGED,True,196,205,4,https://github.com/qpernil,Add 7816.3 T=0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/340,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/340,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,340,2021-12-07T07:32:59Z,2022-02-11T11:08:24Z,2022-02-11T11:08:42Z,MERGED,True,196,205,4,https://github.com/qpernil,Add 7816.3 T=0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/340,https://github.com/koh-osug,2,https://github.com/Yubico/yubico-piv-tool/pull/340#issuecomment-996285956,,"By using this branch with a T=0 card this is working:
yubico-piv-tool -astatus -r""Alcor Micro AU9560 00 00""

This fails (parts of it):
yubico-piv-tool -r""Alcor Micro AU9560 00 00"" -s9a -ibadssl.com-client.p12 -aimport-key -aimport-cert -v9999 -KPKCS12

The 6C handling seems to be in place, but I see a SCardTransmit on card #0 failed, rc=80100008?
> 00 a4 04 00 05 a0 00 00 03 08  (10)
< 61 73  (2)
The card indicates there is 115 bytes more data for us.
> 00 c0 00 00 73  (5)
< 61 71 4f 0b a0 00 00 03 08 00 00 10 00 01 00 79 0d 4f 0b a0 00 00 03 08 00 00 10 00 01 00 50 14 50 69 76 41 70 70 6c 65 74 20 76 30 2e 38 2e 32 2f 52 45 53 5f 50 26 68 74 74 70 73 3a 2f 2f 67 69 74 68 75 62 2e 63 6f 6d 2f 61 72 65 6b 69 6e 61 74 68 2f 50 69 76 41 70 70 6c 65 74 ac 14 80 01 03 80 01 06 80 01 07 80 01 11 80 01 f0 80 01 f1 06 00 90 00  (117)
Going to send 0 bytes in this go.
> 00 20 00 80 00  (5)
< 63 c5  (2)
Going to send 0 bytes in this go.
> 00 fd 00 00 00  (5)
< 6c 03  (2)
Going to send 0 bytes in this go.
> 00 fd 00 00 03  (5)
SCardTransmit on card #0 failed, rc=80100008
Failed to retrieve version: 'Error in PCSC call'
Going to send 0 bytes in this go.
> 00 f8 00 00 00  (5)
< 6c 04  (2)
Going to send 0 bytes in this go.
> 00 f8 00 00 04  (5)
SCardTransmit on card #0 failed, rc=80100008
Failed communicating with card: 'Error in PCSC call'
Failed to retrieve serial number: 'Error in PCSC call'

The install seems to succeeds part from this error.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,340,2021-12-07T07:32:59Z,2022-02-11T11:08:24Z,2022-02-11T11:08:42Z,MERGED,True,196,205,4,https://github.com/qpernil,Add 7816.3 T=0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/340,https://github.com/qpernil,3,https://github.com/Yubico/yubico-piv-tool/pull/340#issuecomment-996501394,,"I wasn't resetting recv_len for the retry case, pushed a fix now. Please let me know if that helps.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,340,2021-12-07T07:32:59Z,2022-02-11T11:08:24Z,2022-02-11T11:08:42Z,MERGED,True,196,205,4,https://github.com/qpernil,Add 7816.3 T=0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/340,https://github.com/koh-osug,4,https://github.com/Yubico/yubico-piv-tool/pull/340#issuecomment-996765445,,"Looks, I'm seeing now error in my test cases.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,340,2021-12-07T07:32:59Z,2022-02-11T11:08:24Z,2022-02-11T11:08:42Z,MERGED,True,196,205,4,https://github.com/qpernil,Add 7816.3 T=0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/340,https://github.com/qpernil,5,https://github.com/Yubico/yubico-piv-tool/pull/340#issuecomment-997189997,,"I read that as no errors now. Could you confirm if you are satisfied with this branch instead of yours, so I can merge it ?
And many thanks for testing this !",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,340,2021-12-07T07:32:59Z,2022-02-11T11:08:24Z,2022-02-11T11:08:42Z,MERGED,True,196,205,4,https://github.com/qpernil,Add 7816.3 T=0 support,4,[],https://github.com/Yubico/yubico-piv-tool/pull/340,https://github.com/koh-osug,6,https://github.com/Yubico/yubico-piv-tool/pull/340#issuecomment-997198219,,"Yes, it seems to work for all of my cases.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,342,2021-12-07T19:28:08Z,2021-12-07T19:42:07Z,2021-12-07T19:42:12Z,MERGED,True,56,67,12,https://github.com/qpernil,Fix warnings that were supressed by -w,2,[],https://github.com/Yubico/yubico-piv-tool/pull/342,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/342,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,343,2021-12-19T21:57:50Z,2021-12-19T21:58:04Z,2021-12-19T21:58:08Z,MERGED,True,10,10,2,https://github.com/qpernil,Fix format errors on 32-bit,2,[],https://github.com/Yubico/yubico-piv-tool/pull/343,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/343,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,344,2021-12-20T19:05:48Z,2022-02-11T13:33:16Z,2022-02-11T13:33:20Z,MERGED,True,63,30,4,https://github.com/qpernil,Compile cleanly with openssl 1.1 & 3,3,[],https://github.com/Yubico/yubico-piv-tool/pull/344,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/344,"The method API has subtle differences in OpenSSL 3 vs 1.1 which required a rewrite, but the new code works for both versions","The method API has subtle differences in OpenSSL 3 vs 1.1 which required a rewrite, but the new code works for both versions",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/kevinjacobs,1,https://github.com/Yubico/yubico-piv-tool/pull/345,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/qpernil,2,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1002514165,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","Thanks for your pull request, we will evaluate your code after the holidays!",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/qpernil,3,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1004184019,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","I understand the sentiment of keeping it as it was, but it's unfortunate to call these values CKA_something, when the CKA prefix typically means an attribute id, such as CKA_ALWAYS_AUTHENTICATE. I also don't think it makes sense to have the different values represented as flags when it clearly wouldn't make sense to specify more than one. As written it is now implementation dependent which flag takes precedence in such cases. Again, I realize if this is to keep it compatible, so this is not a critique. But I think we need to change. We also shouldn't use the generic attribute ID CKA_VENDOR_DEFINED directly, instead adopting the technique demostrated in pkcs11y.h in the yubihsm-shell project. And as I mentioned in the original issue, we should probably also support CKA_ALWAYS_AUTHENTICATE for pin policy.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/qpernil,4,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1004184663,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","I would also like to support these attributes on key import, but that can be handled via a separate PR, and I might do that if you are not so inclined. And just to perfectly clear, this PR is highly appreciated !",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/kevinjacobs,5,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1004383703,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","I understand the sentiment of keeping it as it was, but it's unfortunate to call these values CKA_something, when the CKA prefix typically means an attribute id, such as CKA_ALWAYS_AUTHENTICATE. I also don't think it makes sense to have the different values represented as flags when it clearly wouldn't make sense to specify more than one. As written it is now implementation dependent which flag takes precedence in such cases. Again, I realize if this is to keep it compatible, so this is not a critique. But I think we need to change. We also shouldn't use the generic attribute ID CKA_VENDOR_DEFINED directly, instead adopting the technique demostrated in pkcs11y.h in the yubihsm-shell project. And as I mentioned in the original issue, we should probably also support CKA_ALWAYS_AUTHENTICATE for pin policy.

Maybe I should have been more clear when asking what would need to change from the previous implementation (my initial patch did exactly what you suggest :)).
Thanks for the yubihsm-shell pointer - I wasn't sure what magic value would be needed to offset from CKA_VENDOR_DEFINED.
I'll re-work the interface accordingly. At this time I can't promise that I'll have bandwidth for the import case, but I'll see what I can do.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/kevinjacobs,6,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1004540253,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","Comments addressed. I'm willing to add similar functionality to the key import path, but I'd prefer to do that in another PR.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/qpernil,7,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1024071309,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","Hi again, and thx for the pull request. It looks good except for a couple of minor points:
First, I think in general setting values to the same they already are should be allowed (including setting them to the default), hence I don't see why the booleans couldn't be set to false, which you currently disallow.
The second point is sort of the same as the one I made before, it is still possible to set conflicting values since the pin- and touch policy can each just have one value (I know you check for that, this is just in principle). I think it would make more sense to have just two attributes, each with the appropriate values also defined. I suggest just echoing the values from ykpiv.h for the policies. Also, such values should not be prefixed CKA, which implies they define an attribute type, not a value. I think the code will even be simplified by such a change.
Best regards!",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/qpernil,8,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1024255510,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","One more thing - I'm going to create a PR to consistently set the length field of attributes we fail to fetch to CK_UNAVAILABLE_INFORMATION, it would be good if you could rebase on top of that and make sure you do that for your attributes too. Thx. It's not 100% clear in the pkcs#11 spec that this should be done, but it makes a lot of sense to do so I think. And we do that in yubihsm_pkcs11.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/qpernil,9,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1024440759,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.",Coming back to the above about CK_UNAVAILABLE_INFORMATION - you won't need to to that as #353 now sets that externally to the get_attribute functions. Hence it has been removed where it was being set before.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/qpernil,10,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1024449445,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","The last issue that will have to be addressed is that get_metadata will fail on most older YubiKeys, it is only from version 5.3 that it is supported. For the proprietary attributes I think this is fine, but for CKA_ALWAYS_AUTHENTICATE we probably need to fall back to the table-driven approach if metadata fails. We could also try attestation if metadata fails. Or maybe first, as the library will have created and saved attestations automatically. The metadata is encoded as X.509 certificate extensions, documented here https://developers.yubico.com/PIV/Introduction/PIV_attestation.html.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/kevinjacobs,11,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1024838431,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","Thanks for the review, it's indeed simpler to implement and use this way.
I opted for just checking if get_metadata fails with YKPIV_NOT_SUPPORTED, then fall back to the table. The tests are a bit slow, but I wanted to make sure all slots behave as expected. Switching some of those to import (rather than GenerateKeyPair) in the follow-on will improve that.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/qpernil,12,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1026904746,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","Hi, I have one final comment on the PR, and I think you might have meant this before and I missed that. For the CKA_ALWAYS_AUTHENTICATE I think to leave it out OR to pass a FALSE should mean the same thing, i.e. default PIN policy for that key. This is more in line with PKCS#11 in that specifying the default value for an attribute is exactly the same as not specifying it. Also, I think the test for CKA_ALWAYS_AUTHENTICATE should follow the pattern of the other two attributes, i.e. failing only if trying to set it when the existing value isn't already the same or default. It is too strict now by disallowing any value for CKA_ALWAYS_AUTHENTICATE if the current value isn't default.
I plan to create a new PR after this that stores the pin and touch policy in the slot struct from the attestation or metadata that gets called on first session open for a slot, so that getting them in C_GetAttributeVale becomes unnecessary. An attestation contains the policies as certificate extensions, and the origin is implicitly generated if you can create an attestation. This is important to avoid interacting with the PIV applet which could deauthenticate an always-auth key.
Best regards",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/kevinjacobs,13,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1027470510,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","Hi, I have one final comment on the PR, and I think you might have meant this before and I missed that. For the CKA_ALWAYS_AUTHENTICATE I think to leave it out OR to pass a FALSE should mean the same thing, i.e. default PIN policy for that key. This is more in line with PKCS#11 in that specifying the default value for an attribute is exactly the same as not specifying it. Also, I think the test for CKA_ALWAYS_AUTHENTICATE should follow the pattern of the other two attributes, i.e. failing only if trying to set it when the existing value isn't already the same or default. It is too strict now by disallowing any value for CKA_ALWAYS_AUTHENTICATE if the current value isn't default.

That was a comment on the linked issue. I agree that we shouldn't change anything when the value is CK_FALSE. Fixed.

I plan to create a new PR after this that stores the pin and touch policy in the slot struct from the attestation or metadata that gets called on first session open for a slot, so that getting them in C_GetAttributeVale becomes unnecessary. An attestation contains the policies as certificate extensions, and the origin is implicitly generated if you can create an attestation. This is important to avoid interacting with the PIV applet which could deauthenticate an always-auth key.

Interesting. That's a bit unexpected. Our library uses CKA_ALWAYS_AUTHENTICATE + TOUCH_ALWAYS. It probes the touch policy and returns to the application (which creates a GUI or CLI touch prompt, if appropriate). The Sign operation occurs after but calls login on its own, so it works fine. Sorry about that.
Thanks again for the reviews.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/qpernil,14,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1027754483,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","I would suggest this diff as well
diff.txt
.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/qpernil,15,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1027825933,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","As a final note I think there is a slight problem in that the code might call get_pr_metadata_attrs several times for a single C_GetAttributeValue call, and for multiple such calls as well, of course. So some caching might be in order. Also, if the YubiKey supports attestation (and the key is generated) you could get the information that way even if metadata is not supported. Attestation has been around much longer than metadata. Both problems are addressed by the change I proposed above.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/qpernil,16,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1028299648,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","Thanks a lot for your contribution, very nice work. I appreciate your responsiveness and not least the comprehensive tests, and this will get merged into the next release. We will start work on merging the outstanding PRs very soon, so I'd like to ask if you are going to create another PR for the import case as well, in the near future ?
Thx!",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/kevinjacobs,17,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1028530724,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","...so I'd like to ask if you are going to create another PR for the import case as well, in the near future ? Thx!

Yes - can't promise that I'll get started before the weekend, so look for something next week. I'll see about caching the get_metadata response there too.
Thanks again!",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,345,2021-12-22T20:08:16Z,2022-02-03T16:42:33Z,2022-02-03T20:15:07Z,MERGED,True,372,20,10,https://github.com/kevinjacobs,Add touch and PIN policy support to YKCS11,10,[],https://github.com/Yubico/yubico-piv-tool/pull/345,https://github.com/qpernil,18,https://github.com/Yubico/yubico-piv-tool/pull/345#issuecomment-1028645083,"Add touch and PIN policy support to YKCS11. Addresses #341
A couple of notes:

The single CKA_VENDOR_DEFINED attribute may not be ideal, but I've largely followed the prior art (i.e. the previous implementation and the defines still present in pkcs11y.h) while adding query policy support through C_GetAttributeValue.
The value of CKA_TOUCH_NEVER is changed from 0x16 (22) to 16. I believe the 0x16 definition was a mistake, given that the others are single-bit values.
Policy attributes are only supported via C_GenerateKeyPair and not with key import.
I only have a YubiKey 5 NFC FIPS for testing. I attempted to account for Neo slots in ykcs11_tests.c, but it would be good to run the tests on any other available devices.

Happy to make adjustments as needed.","Thx, that will be great. No need to cache, unless you want to use that in your own branch, as I will implement saving of these properties in the slot based on the initial attestation/metadata read that is already done when the first session is opened on a slot.",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,348,2021-12-29T10:49:11Z,2021-12-31T14:44:48Z,2021-12-31T14:44:51Z,MERGED,True,0,3,1,https://github.com/qpernil,Don't call _ykpiv_verify explicitly since _ykpiv_select_application c…,1,[],https://github.com/Yubico/yubico-piv-tool/pull/348,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/348,"…alls it. Also, don't change state->retries if we don't call the YubiKey","…alls it. Also, don't change state->retries if we don't call the YubiKey",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,353,2022-01-28T15:30:57Z,2022-02-08T14:39:07Z,2022-02-08T14:39:11Z,MERGED,True,9,29,2,https://github.com/qpernil,Set value length on error conditions to be consistent with yubihsm_pkcs11 behaviour,1,[],https://github.com/Yubico/yubico-piv-tool/pull/353,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/353,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,354,2022-02-04T11:56:44Z,2022-02-08T09:28:41Z,2022-02-08T09:28:48Z,MERGED,True,116,105,11,https://github.com/qpernil,"Get policies from attestation or metadata, and cache in slot",7,[],https://github.com/Yubico/yubico-piv-tool/pull/354,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/354,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,355,2022-02-09T10:53:04Z,2022-02-09T11:32:02Z,2022-02-09T11:32:06Z,MERGED,True,2,0,1,https://github.com/qpernil,Fix faulty fix for api change and data_len bug,1,[],https://github.com/Yubico/yubico-piv-tool/pull/355,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/355,Fix rebase bug that made us skip aes mgmt key tests,Fix rebase bug that made us skip aes mgmt key tests,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,356,2022-02-09T11:04:02Z,2022-02-09T19:25:39Z,2022-02-09T19:25:43Z,MERGED,True,50,13,4,https://github.com/qpernil,Update policy data in slot on key generation and import,2,[],https://github.com/Yubico/yubico-piv-tool/pull/356,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/356,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,357,2022-02-10T01:21:28Z,2022-02-10T10:30:36Z,2022-02-10T10:30:36Z,MERGED,True,232,35,8,https://github.com/kevinjacobs,Support Touch and PIN policies for imported private keys.,1,[],https://github.com/Yubico/yubico-piv-tool/pull/357,https://github.com/kevinjacobs,1,https://github.com/Yubico/yubico-piv-tool/pull/357,Follow-on for #345.,Follow-on for #345.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,358,2022-02-11T15:34:04Z,2022-02-11T16:26:02Z,2022-02-11T16:26:06Z,MERGED,True,2,2,1,https://github.com/qpernil,Ignore return value that differs between openssl versions,1,[],https://github.com/Yubico/yubico-piv-tool/pull/358,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/358,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,359,2022-02-17T15:15:06Z,2022-02-17T15:16:47Z,2022-02-17T15:32:31Z,CLOSED,False,252,222,11,https://github.com/aveenismail,Update release scripts and Github Actions tests,35,[],https://github.com/Yubico/yubico-piv-tool/pull/359,https://github.com/aveenismail,1,https://github.com/Yubico/yubico-piv-tool/pull/359,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,359,2022-02-17T15:15:06Z,2022-02-17T15:16:47Z,2022-02-17T15:32:31Z,CLOSED,False,252,222,11,https://github.com/aveenismail,Update release scripts and Github Actions tests,35,[],https://github.com/Yubico/yubico-piv-tool/pull/359,https://github.com/aveenismail,2,https://github.com/Yubico/yubico-piv-tool/pull/359#issuecomment-1043058958,,Closing this PR because it looks like it contains more changes that it should.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,360,2022-02-17T16:02:14Z,2022-02-17T16:14:55Z,2022-05-12T12:52:56Z,MERGED,True,2,2,1,https://github.com/aveenismail,Github Actions: Update Windows paths,1,[],https://github.com/Yubico/yubico-piv-tool/pull/360,https://github.com/aveenismail,1,https://github.com/Yubico/yubico-piv-tool/pull/360,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,362,2022-03-02T13:32:49Z,2022-03-03T18:03:45Z,2022-03-04T09:08:34Z,MERGED,True,8,6,1,https://github.com/xhanulik,Fix usage of pointer after free,2,[],https://github.com/Yubico/yubico-piv-tool/pull/362,https://github.com/xhanulik,1,https://github.com/Yubico/yubico-piv-tool/pull/362,This PR fixes problems found while building on Fedora 36. Build fails with maybe-uninitialized variables and usage of pointer after the free() in ykcs11_tests_util.c.,This PR fixes problems found while building on Fedora 36. Build fails with maybe-uninitialized variables and usage of pointer after the free() in ykcs11_tests_util.c.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,364,2022-03-11T17:02:16Z,2022-03-15T10:29:36Z,2022-03-15T10:29:39Z,MERGED,True,215,285,3,https://github.com/qpernil,Fix old style decls & policy tests for non-metdata versions,1,[],https://github.com/Yubico/yubico-piv-tool/pull/364,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/364,Fixes #363,Fixes #363,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,365,2022-03-14T13:11:13Z,2022-04-01T09:26:53Z,2022-04-01T09:26:59Z,MERGED,True,1,1,1,https://github.com/qpernil,Mark as Universal,1,[],https://github.com/Yubico/yubico-piv-tool/pull/365,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/365,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,366,2022-04-06T17:58:29Z,2022-04-07T09:13:04Z,2022-04-07T09:13:08Z,MERGED,True,0,39,1,https://github.com/ChanceHarrison,Remove deprecated scan.yml workflow,1,[],https://github.com/Yubico/yubico-piv-tool/pull/366,https://github.com/ChanceHarrison,1,https://github.com/Yubico/yubico-piv-tool/pull/366,Entirely superseded by codeql-analysis.yml,Entirely superseded by codeql-analysis.yml,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,367,2022-04-08T14:16:16Z,2022-04-11T18:18:06Z,2022-04-11T18:18:10Z,MERGED,True,15,16,4,https://github.com/qpernil,Windows warnings,1,[],https://github.com/Yubico/yubico-piv-tool/pull/367,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/367,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,368,2022-04-08T16:13:59Z,2022-04-08T16:20:24Z,2022-04-08T16:20:24Z,MERGED,True,49,182,3,https://github.com/aveenismail,Githubactions,10,[],https://github.com/Yubico/yubico-piv-tool/pull/368,https://github.com/aveenismail,1,https://github.com/Yubico/yubico-piv-tool/pull/368,Fixing the tests run on Github Actions,Fixing the tests run on Github Actions,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,371,2022-04-22T09:17:52Z,2022-04-25T11:45:21Z,2022-04-25T11:45:25Z,MERGED,True,102,14,5,https://github.com/qpernil,Adjust internal api for convenience,11,[],https://github.com/Yubico/yubico-piv-tool/pull/371,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/371,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,372,2022-04-29T11:26:11Z,2022-04-29T17:06:26Z,2022-04-29T17:06:32Z,MERGED,True,13,13,2,https://github.com/qpernil,"Zero-initialize sw, which is passed by address",2,[],https://github.com/Yubico/yubico-piv-tool/pull/372,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/372,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,374,2022-05-05T16:38:36Z,2022-05-17T10:07:16Z,2022-05-17T10:07:16Z,MERGED,True,18,14,1,https://github.com/beneichorst,Attestation procedure corrections,3,[],https://github.com/Yubico/yubico-piv-tool/pull/374,https://github.com/beneichorst,1,https://github.com/Yubico/yubico-piv-tool/pull/374,Correcting OpenSSL commands to provide for proper validation examples using OpenSSL.,Correcting OpenSSL commands to provide for proper validation examples using OpenSSL.,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,374,2022-05-05T16:38:36Z,2022-05-17T10:07:16Z,2022-05-17T10:07:16Z,MERGED,True,18,14,1,https://github.com/beneichorst,Attestation procedure corrections,3,[],https://github.com/Yubico/yubico-piv-tool/pull/374,https://github.com/beneichorst,2,https://github.com/Yubico/yubico-piv-tool/pull/374#issuecomment-1118795507,Correcting OpenSSL commands to provide for proper validation examples using OpenSSL.,Ths PR is a short-term fix -- we may revisit documentation for PIV attestation in the near future,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,377,2022-05-20T09:16:54Z,2022-05-20T12:17:18Z,2022-05-20T12:17:21Z,MERGED,True,62,35,5,https://github.com/qpernil,Ecdsa truncate,3,[],https://github.com/Yubico/yubico-piv-tool/pull/377,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/377,Truncate raw input to ecdsa (including output of hashes > key size). Fixes #290,Truncate raw input to ecdsa (including output of hashes > key size). Fixes #290,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,378,2022-05-20T12:16:10Z,2022-05-20T12:55:36Z,2022-05-20T12:55:39Z,MERGED,True,10,10,1,https://github.com/qpernil,Use correct return type in C_CreateObject,1,[],https://github.com/Yubico/yubico-piv-tool/pull/378,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/378,,,True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,379,2022-05-28T18:23:31Z,,2022-05-28T18:23:31Z,OPEN,False,15,7,5,https://github.com/alonbl,Imporve ykpiv_connect failure user message,1,[],https://github.com/Yubico/yubico-piv-tool/pull/379,https://github.com/alonbl,1,https://github.com/Yubico/yubico-piv-tool/pull/379,"Provide a hint for user that PC/SC service may be down, as user should take
a specific action to resolve the issue.
Signed-off-by: Alon Bar-Lev alon.barlev@gmail.com","Provide a hint for user that PC/SC service may be down, as user should take
a specific action to resolve the issue.
Signed-off-by: Alon Bar-Lev alon.barlev@gmail.com",True,{}
Yubico/yubico-piv-tool,https://github.com/Yubico/yubico-piv-tool,380,2022-06-03T13:56:33Z,,2022-06-03T14:07:44Z,OPEN,False,40,14,4,https://github.com/qpernil,Centalize logging & make it redirectable,1,[],https://github.com/Yubico/yubico-piv-tool/pull/380,https://github.com/qpernil,1,https://github.com/Yubico/yubico-piv-tool/pull/380,,,True,{}
