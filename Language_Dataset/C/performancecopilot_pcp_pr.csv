performancecopilot/pcp,https://github.com/performancecopilot/pcp,77,2016-02-23T18:56:42Z,2016-02-25T06:29:51Z,2016-02-25T06:29:51Z,MERGED,True,10,10,2,https://github.com/rvernica,Update old PCP_VAR_LIB references in manual page,3,[],https://github.com/performancecopilot/pcp/pull/77,https://github.com/rvernica,1,https://github.com/performancecopilot/pcp/pull/77,PCP_VAR_LIB is no longer used but it is still referenced in the pmlogger manual page and in a comment in pmlogger_daily.sh. This patch updates these references to the new PCP_VAR_DIR.,PCP_VAR_LIB is no longer used but it is still referenced in the pmlogger manual page and in a comment in pmlogger_daily.sh. This patch updates these references to the new PCP_VAR_DIR.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,83,2016-03-18T18:06:12Z,2016-03-21T06:59:15Z,2016-03-21T06:59:15Z,MERGED,True,2,2,1,https://github.com/zmc,Fix typo: /etc/pcp/pmmgr/target-discovery,1,[],https://github.com/performancecopilot/pcp/pull/83,https://github.com/zmc,1,https://github.com/performancecopilot/pcp/pull/83,"The docs were telling users to write to /etc/pcp/pmmgr/target-discover
Signed-off-by: Zack Cerza zack@redhat.com","The docs were telling users to write to /etc/pcp/pmmgr/target-discover
Signed-off-by: Zack Cerza zack@redhat.com",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,86,2016-04-15T07:53:37Z,2016-04-15T08:01:24Z,2016-04-15T08:01:24Z,MERGED,True,12,12,3,https://github.com/natoscott,Python 3 based .deb packages,1,[],https://github.com/performancecopilot/pcp/pull/86,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/86,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,87,2016-04-29T06:59:21Z,2016-05-24T15:50:10Z,2016-05-24T15:50:10Z,CLOSED,False,8,3,2,https://github.com/wuliming,Change the blank length of pmiostat's output,2,[],https://github.com/performancecopilot/pcp/pull/87,https://github.com/wuliming,1,https://github.com/performancecopilot/pcp/pull/87,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,87,2016-04-29T06:59:21Z,2016-05-24T15:50:10Z,2016-05-24T15:50:10Z,CLOSED,False,8,3,2,https://github.com/wuliming,Change the blank length of pmiostat's output,2,[],https://github.com/performancecopilot/pcp/pull/87,https://github.com/lberk,2,https://github.com/performancecopilot/pcp/pull/87#issuecomment-216523904,,"Hi, is there a particular reason for this output change?
The change also breaks qa 842 and 1099 (easy fix as it's simply whitespace), but it would be great to have a commit with those changes as well if there's a reason to update the blank length.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,87,2016-04-29T06:59:21Z,2016-05-24T15:50:10Z,2016-05-24T15:50:10Z,CLOSED,False,8,3,2,https://github.com/wuliming,Change the blank length of pmiostat's output,2,[],https://github.com/performancecopilot/pcp/pull/87,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/87#issuecomment-217073537,,the timestamp printed with the -x t  option is 24 characters. So how come you want to change it to 28?,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,87,2016-04-29T06:59:21Z,2016-05-24T15:50:10Z,2016-05-24T15:50:10Z,CLOSED,False,8,3,2,https://github.com/wuliming,Change the blank length of pmiostat's output,2,[],https://github.com/performancecopilot/pcp/pull/87,https://github.com/wuliming,4,https://github.com/performancecopilot/pcp/pull/87#issuecomment-217079492,,"Hi ：
I think the blank is too little(just one blank as follow) between  first column and second column.
Timestamp              Device        rrqm/s  wrqm/s    r/s    w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await %util
Thu May  5 01:33:38 2016 sda              0.0     0.0    0.0    2.0      0.0      4.0     2.00     0.00     2.5     0.0     2.5   0.5
the timestamp printed with the -x t option is 24 characters. So how come you want to change it to 28?
—
You are receiving this because you modified the open/close state.
Reply to this email directly or view it on GitHubhttps://github.com//pull/87#issuecomment-217073537",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,87,2016-04-29T06:59:21Z,2016-05-24T15:50:10Z,2016-05-24T15:50:10Z,CLOSED,False,8,3,2,https://github.com/wuliming,Change the blank length of pmiostat's output,2,[],https://github.com/performancecopilot/pcp/pull/87,https://github.com/goodwinos,5,https://github.com/performancecopilot/pcp/pull/87#issuecomment-217080726,,"On 05/05/2016 03:35 PM, wulm wrote:

Hi ：
I think the blank is too little(just one blank as follow) between first column and second column.
Timestamp Device rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await r_await w_await %util
Thu May 5 01:33:38 2016 sda 0.0 0.0 0.0 2.0 0.0 4.0 2.00 0.00 2.5 0.0 2.5 0.5

well, the timestamp lines up with the timestamp column header, and the device name (sda in your example)
lines up with the 'Device' column header .. and space is rather precious in this report.

the timestamp printed with the -x t option is 24 characters. So how come you want to change it to 28?
—
You are receiving this because you modified the open/close state.
Reply to this email directly or view it on GitHubhttps://github.com//pull/87#issuecomment-217073537
—
You are receiving this because you commented.
Reply to this email directly or view it on GitHub #87 (comment)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,87,2016-04-29T06:59:21Z,2016-05-24T15:50:10Z,2016-05-24T15:50:10Z,CLOSED,False,8,3,2,https://github.com/wuliming,Change the blank length of pmiostat's output,2,[],https://github.com/performancecopilot/pcp/pull/87,https://github.com/lberk,6,https://github.com/performancecopilot/pcp/pull/87#issuecomment-221315716,,"Closing due to inactivity, perhaps the spacing could be an argument to be specified/passed in the event there are alternate personal preferences.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,91,2016-05-13T21:14:32Z,2016-05-13T23:22:49Z,2016-05-13T23:23:04Z,CLOSED,False,2,1,1,https://github.com/taintedkernel,Python bindings: Fixing bug where name isn't set in mmv_metric,1,[],https://github.com/performancecopilot/pcp/pull/91,https://github.com/taintedkernel,1,https://github.com/performancecopilot/pcp/pull/91,Fixes problem at #90,Fixes problem at #90,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,91,2016-05-13T21:14:32Z,2016-05-13T23:22:49Z,2016-05-13T23:23:04Z,CLOSED,False,2,1,1,https://github.com/taintedkernel,Python bindings: Fixing bug where name isn't set in mmv_metric,1,[],https://github.com/performancecopilot/pcp/pull/91,https://github.com/taintedkernel,2,https://github.com/performancecopilot/pcp/pull/91#issuecomment-219182227,Fixes problem at #90,"Found other issues, will open new request once fixed.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,92,2016-05-13T23:45:34Z,2016-05-16T06:41:44Z,2016-05-16T22:51:18Z,MERGED,True,3,2,1,https://github.com/taintedkernel,Fixes crashes and problems updating metrics,2,[],https://github.com/performancecopilot/pcp/pull/92,https://github.com/taintedkernel,1,https://github.com/performancecopilot/pcp/pull/92,@fche and I were able to fix issues with the Python bindings.  These patches fixed the problems on my end.,@fche and I were able to fix issues with the Python bindings.  These patches fixed the problems on my end.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,92,2016-05-13T23:45:34Z,2016-05-16T06:41:44Z,2016-05-16T22:51:18Z,MERGED,True,3,2,1,https://github.com/taintedkernel,Fixes crashes and problems updating metrics,2,[],https://github.com/performancecopilot/pcp/pull/92,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/92#issuecomment-219315220,@fche and I were able to fix issues with the Python bindings.  These patches fixed the problems on my end.,"@taintedkernel thanks for looking into this.  It'd be good to add a regression test or two for this code - do you have some sample python code you've been testing with that you could send through?  (I'll add it into the QA suite if so, thanks!)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,92,2016-05-13T23:45:34Z,2016-05-16T06:41:44Z,2016-05-16T22:51:18Z,MERGED,True,3,2,1,https://github.com/taintedkernel,Fixes crashes and problems updating metrics,2,[],https://github.com/performancecopilot/pcp/pull/92,https://github.com/fche,3,https://github.com/performancecopilot/pcp/pull/92#issuecomment-219326109,@fche and I were able to fix issues with the Python bindings.  These patches fixed the problems on my end.,"do you have some sample python code?

Try the sample code - commented out - in src/python/pcp/mmv.py",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,92,2016-05-13T23:45:34Z,2016-05-16T06:41:44Z,2016-05-16T22:51:18Z,MERGED,True,3,2,1,https://github.com/taintedkernel,Fixes crashes and problems updating metrics,2,[],https://github.com/performancecopilot/pcp/pull/92,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/92#issuecomment-219343939,@fche and I were able to fix issues with the Python bindings.  These patches fixed the problems on my end.,"| Try the sample code - commented out - in src/python/pcp/mmv.py
(this is test case qa/704 and qa/src/test_mmv.py) - I'm more specifically looking for test code that exercises the failing situations here, thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,92,2016-05-13T23:45:34Z,2016-05-16T06:41:44Z,2016-05-16T22:51:18Z,MERGED,True,3,2,1,https://github.com/taintedkernel,Fixes crashes and problems updating metrics,2,[],https://github.com/performancecopilot/pcp/pull/92,https://github.com/taintedkernel,5,https://github.com/performancecopilot/pcp/pull/92#issuecomment-219344231,@fche and I were able to fix issues with the Python bindings.  These patches fixed the problems on my end.,"The code in mmv.py mostly works, but I had to make a few minor
modifications to get it to run correctly.  I'll be able to send over
tomorrow what I have put together thus far.
On Sun, May 15, 2016 at 5:50 PM, Frank Ch. Eigler notifications@github.com
wrote:

do you have some sample python code?
Try the sample code - commented out - in src/python/pcp/mmv.py
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub
#92 (comment)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,92,2016-05-13T23:45:34Z,2016-05-16T06:41:44Z,2016-05-16T22:51:18Z,MERGED,True,3,2,1,https://github.com/taintedkernel,Fixes crashes and problems updating metrics,2,[],https://github.com/performancecopilot/pcp/pull/92,https://github.com/natoscott,6,https://github.com/performancecopilot/pcp/pull/92#issuecomment-219344558,@fche and I were able to fix issues with the Python bindings.  These patches fixed the problems on my end.,"I'll be able to send over tomorrow what I have put together thus far.

@taintedkernel great, thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,92,2016-05-13T23:45:34Z,2016-05-16T06:41:44Z,2016-05-16T22:51:18Z,MERGED,True,3,2,1,https://github.com/taintedkernel,Fixes crashes and problems updating metrics,2,[],https://github.com/performancecopilot/pcp/pull/92,https://github.com/natoscott,7,https://github.com/performancecopilot/pcp/pull/92#issuecomment-219344959,@fche and I were able to fix issues with the Python bindings.  These patches fixed the problems on my end.,"Ah, I also just found that test qa/704 is marked as ""reserved"" & not actively being run, so it may well become healthy with these fixes & provide the coverage we need - will take a look.
@taintedkernel any other test code you send through will still be helpful and used too though, thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,92,2016-05-13T23:45:34Z,2016-05-16T06:41:44Z,2016-05-16T22:51:18Z,MERGED,True,3,2,1,https://github.com/taintedkernel,Fixes crashes and problems updating metrics,2,[],https://github.com/performancecopilot/pcp/pull/92,https://github.com/taintedkernel,8,https://github.com/performancecopilot/pcp/pull/92#issuecomment-219476116,@fche and I were able to fix issues with the Python bindings.  These patches fixed the problems on my end.,"Taking a second look, there's only really 2 issues with the example code in
mmv.py.  The typeof and semantics constants weren't defined so I changed
them to reference the PM_ types in cpmapi.  Also, the call to
lookup_mapping requires an instance string as the second argument (None
will raise an AttributeError).
Attached is example code with the fixes.  I'm putting together a short demo
for my team with this functionality and may be able to also send over that
code afterwards.
On Sun, May 15, 2016 at 9:10 PM, Nathan Scott notifications@github.com
wrote:

Ah, I also just found that test qa/704 is marked as ""reserved"" & not
actively being run, so it may well become healthy with these fixes &
provide the coverage we need - will take a look.
@taintedkernel https://github.com/taintedkernel any other test code you
send through will still be helpful and used too though, thanks.
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub
#92 (comment)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,92,2016-05-13T23:45:34Z,2016-05-16T06:41:44Z,2016-05-16T22:51:18Z,MERGED,True,3,2,1,https://github.com/taintedkernel,Fixes crashes and problems updating metrics,2,[],https://github.com/performancecopilot/pcp/pull/92,https://github.com/natoscott,9,https://github.com/performancecopilot/pcp/pull/92#issuecomment-219572010,@fche and I were able to fix issues with the Python bindings.  These patches fixed the problems on my end.,"| The typeof and semantics constants weren't defined so I changed them to reference the PM_ types in cpmapi
Ah, the commented out sample code is missing an ""import cmmv"" - I'll fix that up.  In fact, maybe a different sample program entirely is in order here.
| Also, the call to lookup_mapping requires an instance string as the second argument (None will raise an AttributeError).
Yes, I came across that one yesterday when working on regressions tests here - so that one's fixed already.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,96,2016-06-17T20:19:13Z,2016-06-20T05:50:35Z,2016-06-20T05:50:35Z,MERGED,True,1,1,1,https://github.com/scotte,Document default pmwebd context timeout,1,[],https://github.com/performancecopilot/pcp/pull/96,https://github.com/scotte,1,https://github.com/performancecopilot/pcp/pull/96,The default pmwebd context timeout of 300 seconds is not documented in the manpage.,The default pmwebd context timeout of 300 seconds is not documented in the manpage.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,96,2016-06-17T20:19:13Z,2016-06-20T05:50:35Z,2016-06-20T05:50:35Z,MERGED,True,1,1,1,https://github.com/scotte,Document default pmwebd context timeout,1,[],https://github.com/performancecopilot/pcp/pull/96,https://github.com/fche,2,https://github.com/performancecopilot/pcp/pull/96#issuecomment-226872080,The default pmwebd context timeout of 300 seconds is not documented in the manpage.,"thanks, lgtm!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,97,2016-07-06T04:11:35Z,2016-07-06T05:25:26Z,2016-07-06T05:25:26Z,MERGED,True,4936,3,32,https://github.com/sitaramshelke,pcp-pidstat: initial commit of PCP implementation of pidstat,1,[],https://github.com/performancecopilot/pcp/pull/97,https://github.com/sitaramshelke,1,https://github.com/performancecopilot/pcp/pull/97,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,97,2016-07-06T04:11:35Z,2016-07-06T05:25:26Z,2016-07-06T05:25:26Z,MERGED,True,4936,3,32,https://github.com/sitaramshelke,pcp-pidstat: initial commit of PCP implementation of pidstat,1,[],https://github.com/performancecopilot/pcp/pull/97,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/97#issuecomment-230670467,,"Nice work Sitaram, looks good!
I'm seeing a failure in the new test qa/1078 - looks like two small things:

We need to use -z to provide deterministic timestamps in the test output (I have a fix for this one)
The individual processes are output in a different order for me - I guess different python version or different dictionary/hashing algorithm, or something like that.  Is there a way to sort the pcp-pidstat output?  (e.g. by pid or by top cpu user, or something like that - just to get that deterministic output).  I'm not seeing it from a quick man page scan.

cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,98,2016-07-07T02:32:29Z,2016-07-07T02:53:15Z,2016-07-07T02:53:15Z,MERGED,True,12,5,1,https://github.com/sitaramshelke,pcp pidstat fixes,3,[],https://github.com/performancecopilot/pcp/pull/98,https://github.com/sitaramshelke,1,https://github.com/performancecopilot/pcp/pull/98,"Fixed floating point precision for total_percent()
Fixed argument parsing for -P
Changed -P to -p to match with the original pidstat :)","Fixed floating point precision for total_percent()
Fixed argument parsing for -P
Changed -P to -p to match with the original pidstat :)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,100,2016-07-29T08:13:03Z,2016-07-29T08:49:29Z,2016-07-29T08:49:29Z,MERGED,True,2473,4,27,https://github.com/sitaramshelke,pcp-mpstat: initial version of PCP implementation of mpstat,1,[],https://github.com/performancecopilot/pcp/pull/100,https://github.com/sitaramshelke,1,https://github.com/performancecopilot/pcp/pull/100,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,103,2016-08-02T18:31:04Z,2016-08-03T01:49:06Z,2016-08-03T01:49:06Z,MERGED,True,149,139,6,https://github.com/sitaramshelke,Pcp mpstat,2,[],https://github.com/performancecopilot/pcp/pull/103,https://github.com/sitaramshelke,1,https://github.com/performancecopilot/pcp/pull/103,Fixed the machine info header and lowercase 'cpu' in -I CPU,Fixed the machine info header and lowercase 'cpu' in -I CPU,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,104,2016-08-04T04:10:28Z,2016-08-04T05:36:38Z,2016-08-04T05:36:38Z,MERGED,True,21,11,3,https://github.com/sitaramshelke,pcp-mpstat: change machine info header,1,[],https://github.com/performancecopilot/pcp/pull/104,https://github.com/sitaramshelke,1,https://github.com/performancecopilot/pcp/pull/104,"Use '%x' format with strftime to display date, add documentation to override this setting and fix qa","Use '%x' format with strftime to display date, add documentation to override this setting and fix qa",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,105,2016-08-05T02:31:20Z,2016-08-05T03:35:03Z,2016-08-05T03:35:03Z,MERGED,True,2596,2763,9,https://github.com/sitaramshelke,Pcp mpstat and pcp pidstat fixes,4,[],https://github.com/performancecopilot/pcp/pull/105,https://github.com/sitaramshelke,1,https://github.com/performancecopilot/pcp/pull/105,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,111,2016-09-01T18:52:29Z,2016-09-02T15:18:18Z,2016-09-02T15:19:33Z,MERGED,True,7,7,1,https://github.com/Klowner,Fix graphite API examples and a minor typo in pmwebapi manpage,2,[],https://github.com/performancecopilot/pcp/pull/111,https://github.com/Klowner,1,https://github.com/performancecopilot/pcp/pull/111,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,111,2016-09-01T18:52:29Z,2016-09-02T15:18:18Z,2016-09-02T15:19:33Z,MERGED,True,7,7,1,https://github.com/Klowner,Fix graphite API examples and a minor typo in pmwebapi manpage,2,[],https://github.com/performancecopilot/pcp/pull/111,https://github.com/fche,2,https://github.com/performancecopilot/pcp/pull/111#issuecomment-244179216,,"lgtm, thanks!",True,{'THUMBS_UP': ['https://github.com/Klowner']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,111,2016-09-01T18:52:29Z,2016-09-02T15:18:18Z,2016-09-02T15:19:33Z,MERGED,True,7,7,1,https://github.com/Klowner,Fix graphite API examples and a minor typo in pmwebapi manpage,2,[],https://github.com/performancecopilot/pcp/pull/111,https://github.com/Klowner,3,https://github.com/performancecopilot/pcp/pull/111#issuecomment-244184775,,"whoops, accidentally closed it",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,112,2016-09-06T09:45:09Z,2016-09-08T02:37:27Z,2016-09-08T02:37:27Z,MERGED,True,46,3,4,https://github.com/ryandoyle,python: add errno attribute to pmErr class,1,[],https://github.com/performancecopilot/pcp/pull/112,https://github.com/ryandoyle,1,https://github.com/performancecopilot/pcp/pull/112,Exposes the error code that the exception was raised with via the errno attribute. This follows the convention of Python built-in exceptions.,Exposes the error code that the exception was raised with via the errno attribute. This follows the convention of Python built-in exceptions.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,119,2016-10-05T16:38:54Z,2016-10-06T06:24:37Z,2016-10-06T06:24:37Z,MERGED,True,1,1,1,https://github.com/fche,relaxing the specificity of the cpu_cycle metric's documentation,1,[],https://github.com/performancecopilot/pcp/pull/119,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/119,... considering that it's likely in error in the libvirt upstream.,... considering that it's likely in error in the libvirt upstream.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,266,2016-11-04T16:34:26Z,2017-04-03T06:53:59Z,2017-04-03T06:53:59Z,CLOSED,False,47,5,3,https://github.com/jumitche,Add NFSv42 ops to linux PMDAs,1,[],https://github.com/performancecopilot/pcp/pull/266,https://github.com/jumitche,1,https://github.com/performancecopilot/pcp/pull/266,"I was taking a look at the NFS support in PCP and noticed that it didn't include the NFSv42 ops for client or server, so I thought I should contribute them.","I was taking a look at the NFS support in PCP and noticed that it didn't include the NFSv42 ops for client or server, so I thought I should contribute them.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,266,2016-11-04T16:34:26Z,2017-04-03T06:53:59Z,2017-04-03T06:53:59Z,CLOSED,False,47,5,3,https://github.com/jumitche,Add NFSv42 ops to linux PMDAs,1,[],https://github.com/performancecopilot/pcp/pull/266,https://github.com/lberk,2,https://github.com/performancecopilot/pcp/pull/266#issuecomment-259190128,"I was taking a look at the NFS support in PCP and noticed that it didn't include the NFSv42 ops for client or server, so I thought I should contribute them.","Hi Justin,

Thanks for throwing this together, looks good to me.  Would you happen
to have a /proc/self/mountstats file that can exercise the new
pmda.nfsclient metrics that you could sent along? (scrubbed if needed)

I'd like to throw together a qa test (or just extend 798) for these
added nfsclient metrics to accompany your commit.

Cheers,

Lukas",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,266,2016-11-04T16:34:26Z,2017-04-03T06:53:59Z,2017-04-03T06:53:59Z,CLOSED,False,47,5,3,https://github.com/jumitche,Add NFSv42 ops to linux PMDAs,1,[],https://github.com/performancecopilot/pcp/pull/266,https://github.com/jumitche,3,https://github.com/performancecopilot/pcp/pull/266#issuecomment-259410645,"I was taking a look at the NFS support in PCP and noticed that it didn't include the NFSv42 ops for client or server, so I thought I should contribute them.","An example that features the additional values, but alas they are all zeros
mountstats.txt",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,266,2016-11-04T16:34:26Z,2017-04-03T06:53:59Z,2017-04-03T06:53:59Z,CLOSED,False,47,5,3,https://github.com/jumitche,Add NFSv42 ops to linux PMDAs,1,[],https://github.com/performancecopilot/pcp/pull/266,https://github.com/lberk,4,https://github.com/performancecopilot/pcp/pull/266#issuecomment-259507894,"I was taking a look at the NFS support in PCP and noticed that it didn't include the NFSv42 ops for client or server, so I thought I should contribute them.","Hey Justin,
Justin Mitchell notifications@github.com writes:

An example that features the additional values, but alas they are all zeros
mountstats.txt

Heh, thanks, I had a similar mountstats file, was just hopeful you might
have one with 'real' values.  I'll tweak it as needed with dummy values
for qa purposes.
I've merged your patch in my tree and Mark should (hopefully) be pulling
it into master shortly!
Thanks for the patch!
Lukas",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,266,2016-11-04T16:34:26Z,2017-04-03T06:53:59Z,2017-04-03T06:53:59Z,CLOSED,False,47,5,3,https://github.com/jumitche,Add NFSv42 ops to linux PMDAs,1,[],https://github.com/performancecopilot/pcp/pull/266,https://github.com/natoscott,5,https://github.com/performancecopilot/pcp/pull/266#issuecomment-291062313,"I was taking a look at the NFS support in PCP and noticed that it didn't include the NFSv42 ops for client or server, so I thought I should contribute them.","This PR was merged in commit f0bb18f last November - not sure why it wasn't auto-closed by github, but closing now anyway.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,267,2016-11-14T19:14:33Z,2016-11-14T21:47:55Z,2016-11-14T21:47:55Z,MERGED,True,0,1,1,https://github.com/fanyeren,this line break building on macOS,1,[],https://github.com/performancecopilot/pcp/pull/267,https://github.com/fanyeren,1,https://github.com/performancecopilot/pcp/pull/267,"server.pl has executable permission, so there is no need to keep this line.","server.pl has executable permission, so there is no need to keep this line.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,271,2016-12-01T07:41:17Z,2016-12-03T02:33:13Z,2016-12-03T02:33:13Z,CLOSED,False,2270,128,11,None,Develop buddyinfo,4,[],https://github.com/performancecopilot/pcp/pull/271,None,1,https://github.com/performancecopilot/pcp/pull/271,"This branch add the metrics about buddyinfo.
This is information of page fragment.
Output is like follow.
# pminfo -fdT mem.buddyinfo
mem.buddyinfo
Data Type: 32-bit unsigned int  InDom: 60.31 0xf00001f
Semantics: instant  Units: none
Help:
information of page fragment from /proc/buddyinfo
inst [0 or ""2^0 DMA Node 0""] value 3
inst [1 or ""2^1 DMA Node 0""] value 1
inst [2 or ""2^2 DMA Node 0""] value 2
inst [3 or ""2^3 DMA Node 0""] value 2
inst [4 or ""2^4 DMA Node 0""] value 2
inst [5 or ""2^5 DMA Node 0""] value 1
inst [6 or ""2^6 DMA Node 0""] value 0
inst [7 or ""2^7 DMA Node 0""] value 0
inst [8 or ""2^8 DMA Node 0""] value 1
inst [9 or ""2^9 DMA Node 0""] value 1
inst [10 or ""2^10 DMA Node 0""] value 3
inst [11 or ""2^0 DMA32 Node 0""] value 379
inst [12 or ""2^1 DMA32 Node 0""] value 464
inst [13 or ""2^2 DMA32 Node 0""] value 97
inst [14 or ""2^3 DMA32 Node 0""] value 155
inst [15 or ""2^4 DMA32 Node 0""] value 86
inst [16 or ""2^5 DMA32 Node 0""] value 30
inst [17 or ""2^6 DMA32 Node 0""] value 23
inst [18 or ""2^7 DMA32 Node 0""] value 10
inst [19 or ""2^8 DMA32 Node 0""] value 26
inst [20 or ""2^9 DMA32 Node 0""] value 11
inst [21 or ""2^10 DMA32 Node 0""] value 681
inst [22 or ""2^0 Normal Node 0""] value 24
inst [23 or ""2^1 Normal Node 0""] value 419
inst [24 or ""2^2 Normal Node 0""] value 144
inst [25 or ""2^3 Normal Node 0""] value 14
inst [26 or ""2^4 Normal Node 0""] value 3
inst [27 or ""2^5 Normal Node 0""] value 0
inst [28 or ""2^6 Normal Node 0""] value 0
inst [29 or ""2^7 Normal Node 0""] value 0
inst [30 or ""2^8 Normal Node 0""] value 0
inst [31 or ""2^9 Normal Node 0""] value 0
inst [32 or ""2^10 Normal Node 0""] value 1","This branch add the metrics about buddyinfo.
This is information of page fragment.
Output is like follow.
# pminfo -fdT mem.buddyinfo
mem.buddyinfo
Data Type: 32-bit unsigned int  InDom: 60.31 0xf00001f
Semantics: instant  Units: none
Help:
information of page fragment from /proc/buddyinfo
inst [0 or ""2^0 DMA Node 0""] value 3
inst [1 or ""2^1 DMA Node 0""] value 1
inst [2 or ""2^2 DMA Node 0""] value 2
inst [3 or ""2^3 DMA Node 0""] value 2
inst [4 or ""2^4 DMA Node 0""] value 2
inst [5 or ""2^5 DMA Node 0""] value 1
inst [6 or ""2^6 DMA Node 0""] value 0
inst [7 or ""2^7 DMA Node 0""] value 0
inst [8 or ""2^8 DMA Node 0""] value 1
inst [9 or ""2^9 DMA Node 0""] value 1
inst [10 or ""2^10 DMA Node 0""] value 3
inst [11 or ""2^0 DMA32 Node 0""] value 379
inst [12 or ""2^1 DMA32 Node 0""] value 464
inst [13 or ""2^2 DMA32 Node 0""] value 97
inst [14 or ""2^3 DMA32 Node 0""] value 155
inst [15 or ""2^4 DMA32 Node 0""] value 86
inst [16 or ""2^5 DMA32 Node 0""] value 30
inst [17 or ""2^6 DMA32 Node 0""] value 23
inst [18 or ""2^7 DMA32 Node 0""] value 10
inst [19 or ""2^8 DMA32 Node 0""] value 26
inst [20 or ""2^9 DMA32 Node 0""] value 11
inst [21 or ""2^10 DMA32 Node 0""] value 681
inst [22 or ""2^0 Normal Node 0""] value 24
inst [23 or ""2^1 Normal Node 0""] value 419
inst [24 or ""2^2 Normal Node 0""] value 144
inst [25 or ""2^3 Normal Node 0""] value 14
inst [26 or ""2^4 Normal Node 0""] value 3
inst [27 or ""2^5 Normal Node 0""] value 0
inst [28 or ""2^6 Normal Node 0""] value 0
inst [29 or ""2^7 Normal Node 0""] value 0
inst [30 or ""2^8 Normal Node 0""] value 0
inst [31 or ""2^9 Normal Node 0""] value 0
inst [32 or ""2^10 Normal Node 0""] value 1",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,271,2016-12-01T07:41:17Z,2016-12-03T02:33:13Z,2016-12-03T02:33:13Z,CLOSED,False,2270,128,11,None,Develop buddyinfo,4,[],https://github.com/performancecopilot/pcp/pull/271,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/271#issuecomment-264133236,"This branch add the metrics about buddyinfo.
This is information of page fragment.
Output is like follow.
# pminfo -fdT mem.buddyinfo
mem.buddyinfo
Data Type: 32-bit unsigned int  InDom: 60.31 0xf00001f
Semantics: instant  Units: none
Help:
information of page fragment from /proc/buddyinfo
inst [0 or ""2^0 DMA Node 0""] value 3
inst [1 or ""2^1 DMA Node 0""] value 1
inst [2 or ""2^2 DMA Node 0""] value 2
inst [3 or ""2^3 DMA Node 0""] value 2
inst [4 or ""2^4 DMA Node 0""] value 2
inst [5 or ""2^5 DMA Node 0""] value 1
inst [6 or ""2^6 DMA Node 0""] value 0
inst [7 or ""2^7 DMA Node 0""] value 0
inst [8 or ""2^8 DMA Node 0""] value 1
inst [9 or ""2^9 DMA Node 0""] value 1
inst [10 or ""2^10 DMA Node 0""] value 3
inst [11 or ""2^0 DMA32 Node 0""] value 379
inst [12 or ""2^1 DMA32 Node 0""] value 464
inst [13 or ""2^2 DMA32 Node 0""] value 97
inst [14 or ""2^3 DMA32 Node 0""] value 155
inst [15 or ""2^4 DMA32 Node 0""] value 86
inst [16 or ""2^5 DMA32 Node 0""] value 30
inst [17 or ""2^6 DMA32 Node 0""] value 23
inst [18 or ""2^7 DMA32 Node 0""] value 10
inst [19 or ""2^8 DMA32 Node 0""] value 26
inst [20 or ""2^9 DMA32 Node 0""] value 11
inst [21 or ""2^10 DMA32 Node 0""] value 681
inst [22 or ""2^0 Normal Node 0""] value 24
inst [23 or ""2^1 Normal Node 0""] value 419
inst [24 or ""2^2 Normal Node 0""] value 144
inst [25 or ""2^3 Normal Node 0""] value 14
inst [26 or ""2^4 Normal Node 0""] value 3
inst [27 or ""2^5 Normal Node 0""] value 0
inst [28 or ""2^6 Normal Node 0""] value 0
inst [29 or ""2^7 Normal Node 0""] value 0
inst [30 or ""2^8 Normal Node 0""] value 0
inst [31 or ""2^9 Normal Node 0""] value 0
inst [32 or ""2^10 Normal Node 0""] value 1","@s-miyoshi-fj  nice work, thanks!
One thing that stands out is that the instance names don't adhere to the rules described on pmdaCacheOp(3).  See paragraph 2 in that man page, starting ""The semantics of a PCP instance domain require a number of rules to  be followed, namely:"".
In particular, the names are not unique to the left of the first space.  I suggest going with the following naming convention here instead:
inst [10 or ""DMA_2048::node0""] value 3
inst [11 or ""DMA32_2::node0""] value 379
etc.  I think the 2^N notation is a bit confusing (not used anywhere else in PCP), so maybe just spell it out like above.  The NUMA node part should match with the NUMA node names used for other metrics, e.g.
see ""pminfo -fmdTt hinv.node.online"".",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,271,2016-12-01T07:41:17Z,2016-12-03T02:33:13Z,2016-12-03T02:33:13Z,CLOSED,False,2270,128,11,None,Develop buddyinfo,4,[],https://github.com/performancecopilot/pcp/pull/271,https://github.com/lberk,3,https://github.com/performancecopilot/pcp/pull/271#issuecomment-264609956,"This branch add the metrics about buddyinfo.
This is information of page fragment.
Output is like follow.
# pminfo -fdT mem.buddyinfo
mem.buddyinfo
Data Type: 32-bit unsigned int  InDom: 60.31 0xf00001f
Semantics: instant  Units: none
Help:
information of page fragment from /proc/buddyinfo
inst [0 or ""2^0 DMA Node 0""] value 3
inst [1 or ""2^1 DMA Node 0""] value 1
inst [2 or ""2^2 DMA Node 0""] value 2
inst [3 or ""2^3 DMA Node 0""] value 2
inst [4 or ""2^4 DMA Node 0""] value 2
inst [5 or ""2^5 DMA Node 0""] value 1
inst [6 or ""2^6 DMA Node 0""] value 0
inst [7 or ""2^7 DMA Node 0""] value 0
inst [8 or ""2^8 DMA Node 0""] value 1
inst [9 or ""2^9 DMA Node 0""] value 1
inst [10 or ""2^10 DMA Node 0""] value 3
inst [11 or ""2^0 DMA32 Node 0""] value 379
inst [12 or ""2^1 DMA32 Node 0""] value 464
inst [13 or ""2^2 DMA32 Node 0""] value 97
inst [14 or ""2^3 DMA32 Node 0""] value 155
inst [15 or ""2^4 DMA32 Node 0""] value 86
inst [16 or ""2^5 DMA32 Node 0""] value 30
inst [17 or ""2^6 DMA32 Node 0""] value 23
inst [18 or ""2^7 DMA32 Node 0""] value 10
inst [19 or ""2^8 DMA32 Node 0""] value 26
inst [20 or ""2^9 DMA32 Node 0""] value 11
inst [21 or ""2^10 DMA32 Node 0""] value 681
inst [22 or ""2^0 Normal Node 0""] value 24
inst [23 or ""2^1 Normal Node 0""] value 419
inst [24 or ""2^2 Normal Node 0""] value 144
inst [25 or ""2^3 Normal Node 0""] value 14
inst [26 or ""2^4 Normal Node 0""] value 3
inst [27 or ""2^5 Normal Node 0""] value 0
inst [28 or ""2^6 Normal Node 0""] value 0
inst [29 or ""2^7 Normal Node 0""] value 0
inst [30 or ""2^8 Normal Node 0""] value 0
inst [31 or ""2^9 Normal Node 0""] value 0
inst [32 or ""2^10 Normal Node 0""] value 1","Hi, I've tweaked the instance names as Nathan suggested and pulled these changes into my branch.  I'll be sending the update mail first thing next week and you should see them in pcp master not long after.  Thanks for the contribution!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,277,2017-02-19T05:35:11Z,2017-03-03T00:13:29Z,2017-03-03T00:13:29Z,MERGED,True,1324,36,15,https://github.com/hkshaw1990,perfevent_pmda: Add PMU events exported from kernel,6,[],https://github.com/performancecopilot/pcp/pull/277,https://github.com/hkshaw1990,1,https://github.com/performancecopilot/pcp/pull/277,"The perfevent pmda gets the event definitions from the libpfm
library. So, to add a new platform counter, we need to add its
definition to the libpfm library and use it here. This patch is the
first step towards removing that dependency. It parses the kernel
exported PMUs and their events from /sys/bus/event_source/devices, and
calculates the config values for each of these events. However, we don't
want to open all the events at once. Only the events which are mentioned
in perfevent.conf under [dynamic] section will be opened. But, all the
dynamic events will be listed with pminfo.
For e.g. :
$ pminfo
[...]
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]
perfevent.hwcounters.power.energy-cores.dutycycle
perfevent.hwcounters.power.energy-cores.value
perfevent.hwcounters.power.energy-ram.dutycycle
perfevent.hwcounters.power.energy-ram.value
[...]
perfevent.hwcounters.msr.mperf.dutycycle
perfevent.hwcounters.msr.mperf.value
perfevent.hwcounters.msr.aperf.dutycycle
perfevent.hwcounters.msr.aperf.value
[...]
perfevent.hwcounters.cpu.mem-stores.dutycycle
perfevent.hwcounters.cpu.mem-stores.value
perfevent.hwcounters.cpu.tx-capacity.dutycycle
perfevent.hwcounters.cpu.tx-capacity.value
perfevent.hwcounters.cpu.mem-loads.dutycycle
perfevent.hwcounters.cpu.mem-loads.value
perfevent.hwcounters.cpu.branch-misses.dutycycle
perfevent.hwcounters.cpu.branch-misses.value
[...]
Now, say only the event cpu.branch-instructions is mentioned under
[dynamic] section in the perfevent.conf file. In this case, we can only
read the values for this event, all other dynamic events are disabled
and will return invalid value.
$ pmval perfevent.hwcounters.cpu.branch-misses.value
metric:    perfevent.hwcounters.cpu.branch-misses.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
          cpu0                  cpu1                  cpu2                  cpu3
        3.028E+05             3.772E+05             3.757E+05             2.638E+05
        4.382E+05             2.716E+05             2.888E+05

cpu.mem-loads is not added in the perfevent.conf file, so we won't be
able to get any values out of it, even though, we can see it under pminfo.
$ pmval perfevent.hwcounters.cpu.mem-loads.value
metric:    perfevent.hwcounters.cpu.mem-loads.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
No values available
No values available
This patch also adds software events whose configuration values are
available under linux/perf_event.h :
[...]
perfevent.hwcounters.software.cpu-migrations.dutycycle
perfevent.hwcounters.software.cpu-migrations.value
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]","The perfevent pmda gets the event definitions from the libpfm
library. So, to add a new platform counter, we need to add its
definition to the libpfm library and use it here. This patch is the
first step towards removing that dependency. It parses the kernel
exported PMUs and their events from /sys/bus/event_source/devices, and
calculates the config values for each of these events. However, we don't
want to open all the events at once. Only the events which are mentioned
in perfevent.conf under [dynamic] section will be opened. But, all the
dynamic events will be listed with pminfo.
For e.g. :
$ pminfo
[...]
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]
perfevent.hwcounters.power.energy-cores.dutycycle
perfevent.hwcounters.power.energy-cores.value
perfevent.hwcounters.power.energy-ram.dutycycle
perfevent.hwcounters.power.energy-ram.value
[...]
perfevent.hwcounters.msr.mperf.dutycycle
perfevent.hwcounters.msr.mperf.value
perfevent.hwcounters.msr.aperf.dutycycle
perfevent.hwcounters.msr.aperf.value
[...]
perfevent.hwcounters.cpu.mem-stores.dutycycle
perfevent.hwcounters.cpu.mem-stores.value
perfevent.hwcounters.cpu.tx-capacity.dutycycle
perfevent.hwcounters.cpu.tx-capacity.value
perfevent.hwcounters.cpu.mem-loads.dutycycle
perfevent.hwcounters.cpu.mem-loads.value
perfevent.hwcounters.cpu.branch-misses.dutycycle
perfevent.hwcounters.cpu.branch-misses.value
[...]
Now, say only the event cpu.branch-instructions is mentioned under
[dynamic] section in the perfevent.conf file. In this case, we can only
read the values for this event, all other dynamic events are disabled
and will return invalid value.
$ pmval perfevent.hwcounters.cpu.branch-misses.value
metric:    perfevent.hwcounters.cpu.branch-misses.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
          cpu0                  cpu1                  cpu2                  cpu3
        3.028E+05             3.772E+05             3.757E+05             2.638E+05
        4.382E+05             2.716E+05             2.888E+05

cpu.mem-loads is not added in the perfevent.conf file, so we won't be
able to get any values out of it, even though, we can see it under pminfo.
$ pmval perfevent.hwcounters.cpu.mem-loads.value
metric:    perfevent.hwcounters.cpu.mem-loads.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
No values available
No values available
This patch also adds software events whose configuration values are
available under linux/perf_event.h :
[...]
perfevent.hwcounters.software.cpu-migrations.dutycycle
perfevent.hwcounters.software.cpu-migrations.value
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,277,2017-02-19T05:35:11Z,2017-03-03T00:13:29Z,2017-03-03T00:13:29Z,MERGED,True,1324,36,15,https://github.com/hkshaw1990,perfevent_pmda: Add PMU events exported from kernel,6,[],https://github.com/performancecopilot/pcp/pull/277,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/277#issuecomment-281000596,"The perfevent pmda gets the event definitions from the libpfm
library. So, to add a new platform counter, we need to add its
definition to the libpfm library and use it here. This patch is the
first step towards removing that dependency. It parses the kernel
exported PMUs and their events from /sys/bus/event_source/devices, and
calculates the config values for each of these events. However, we don't
want to open all the events at once. Only the events which are mentioned
in perfevent.conf under [dynamic] section will be opened. But, all the
dynamic events will be listed with pminfo.
For e.g. :
$ pminfo
[...]
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]
perfevent.hwcounters.power.energy-cores.dutycycle
perfevent.hwcounters.power.energy-cores.value
perfevent.hwcounters.power.energy-ram.dutycycle
perfevent.hwcounters.power.energy-ram.value
[...]
perfevent.hwcounters.msr.mperf.dutycycle
perfevent.hwcounters.msr.mperf.value
perfevent.hwcounters.msr.aperf.dutycycle
perfevent.hwcounters.msr.aperf.value
[...]
perfevent.hwcounters.cpu.mem-stores.dutycycle
perfevent.hwcounters.cpu.mem-stores.value
perfevent.hwcounters.cpu.tx-capacity.dutycycle
perfevent.hwcounters.cpu.tx-capacity.value
perfevent.hwcounters.cpu.mem-loads.dutycycle
perfevent.hwcounters.cpu.mem-loads.value
perfevent.hwcounters.cpu.branch-misses.dutycycle
perfevent.hwcounters.cpu.branch-misses.value
[...]
Now, say only the event cpu.branch-instructions is mentioned under
[dynamic] section in the perfevent.conf file. In this case, we can only
read the values for this event, all other dynamic events are disabled
and will return invalid value.
$ pmval perfevent.hwcounters.cpu.branch-misses.value
metric:    perfevent.hwcounters.cpu.branch-misses.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
          cpu0                  cpu1                  cpu2                  cpu3
        3.028E+05             3.772E+05             3.757E+05             2.638E+05
        4.382E+05             2.716E+05             2.888E+05

cpu.mem-loads is not added in the perfevent.conf file, so we won't be
able to get any values out of it, even though, we can see it under pminfo.
$ pmval perfevent.hwcounters.cpu.mem-loads.value
metric:    perfevent.hwcounters.cpu.mem-loads.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
No values available
No values available
This patch also adds software events whose configuration values are
available under linux/perf_event.h :
[...]
perfevent.hwcounters.software.cpu-migrations.dutycycle
perfevent.hwcounters.software.cpu-migrations.value
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]","Hi Hemant,
Sounds good.  What is the docs & QA plan?  i.e.  Do the existing tests still work?  Does the existing pmdaperfevent.1 man page need an update?  And what tests can we add to exercise this new functionality?
Thanks mate!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,277,2017-02-19T05:35:11Z,2017-03-03T00:13:29Z,2017-03-03T00:13:29Z,MERGED,True,1324,36,15,https://github.com/hkshaw1990,perfevent_pmda: Add PMU events exported from kernel,6,[],https://github.com/performancecopilot/pcp/pull/277,https://github.com/hkshaw1990,3,https://github.com/performancecopilot/pcp/pull/277#issuecomment-281002716,"The perfevent pmda gets the event definitions from the libpfm
library. So, to add a new platform counter, we need to add its
definition to the libpfm library and use it here. This patch is the
first step towards removing that dependency. It parses the kernel
exported PMUs and their events from /sys/bus/event_source/devices, and
calculates the config values for each of these events. However, we don't
want to open all the events at once. Only the events which are mentioned
in perfevent.conf under [dynamic] section will be opened. But, all the
dynamic events will be listed with pminfo.
For e.g. :
$ pminfo
[...]
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]
perfevent.hwcounters.power.energy-cores.dutycycle
perfevent.hwcounters.power.energy-cores.value
perfevent.hwcounters.power.energy-ram.dutycycle
perfevent.hwcounters.power.energy-ram.value
[...]
perfevent.hwcounters.msr.mperf.dutycycle
perfevent.hwcounters.msr.mperf.value
perfevent.hwcounters.msr.aperf.dutycycle
perfevent.hwcounters.msr.aperf.value
[...]
perfevent.hwcounters.cpu.mem-stores.dutycycle
perfevent.hwcounters.cpu.mem-stores.value
perfevent.hwcounters.cpu.tx-capacity.dutycycle
perfevent.hwcounters.cpu.tx-capacity.value
perfevent.hwcounters.cpu.mem-loads.dutycycle
perfevent.hwcounters.cpu.mem-loads.value
perfevent.hwcounters.cpu.branch-misses.dutycycle
perfevent.hwcounters.cpu.branch-misses.value
[...]
Now, say only the event cpu.branch-instructions is mentioned under
[dynamic] section in the perfevent.conf file. In this case, we can only
read the values for this event, all other dynamic events are disabled
and will return invalid value.
$ pmval perfevent.hwcounters.cpu.branch-misses.value
metric:    perfevent.hwcounters.cpu.branch-misses.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
          cpu0                  cpu1                  cpu2                  cpu3
        3.028E+05             3.772E+05             3.757E+05             2.638E+05
        4.382E+05             2.716E+05             2.888E+05

cpu.mem-loads is not added in the perfevent.conf file, so we won't be
able to get any values out of it, even though, we can see it under pminfo.
$ pmval perfevent.hwcounters.cpu.mem-loads.value
metric:    perfevent.hwcounters.cpu.mem-loads.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
No values available
No values available
This patch also adds software events whose configuration values are
available under linux/perf_event.h :
[...]
perfevent.hwcounters.software.cpu-migrations.dutycycle
perfevent.hwcounters.software.cpu-migrations.value
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]","Hi Nathan,
Will add some tests to it (in addition to the existing tests) but not sure what's the best way to do that? Shall I just create a mock sysfs for the perf events so that this agent can read from there? Will that be fine? I will send a separate patch regarding the docs and qa, once you let me know this patch is fine.
Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,277,2017-02-19T05:35:11Z,2017-03-03T00:13:29Z,2017-03-03T00:13:29Z,MERGED,True,1324,36,15,https://github.com/hkshaw1990,perfevent_pmda: Add PMU events exported from kernel,6,[],https://github.com/performancecopilot/pcp/pull/277,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/277#issuecomment-281257648,"The perfevent pmda gets the event definitions from the libpfm
library. So, to add a new platform counter, we need to add its
definition to the libpfm library and use it here. This patch is the
first step towards removing that dependency. It parses the kernel
exported PMUs and their events from /sys/bus/event_source/devices, and
calculates the config values for each of these events. However, we don't
want to open all the events at once. Only the events which are mentioned
in perfevent.conf under [dynamic] section will be opened. But, all the
dynamic events will be listed with pminfo.
For e.g. :
$ pminfo
[...]
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]
perfevent.hwcounters.power.energy-cores.dutycycle
perfevent.hwcounters.power.energy-cores.value
perfevent.hwcounters.power.energy-ram.dutycycle
perfevent.hwcounters.power.energy-ram.value
[...]
perfevent.hwcounters.msr.mperf.dutycycle
perfevent.hwcounters.msr.mperf.value
perfevent.hwcounters.msr.aperf.dutycycle
perfevent.hwcounters.msr.aperf.value
[...]
perfevent.hwcounters.cpu.mem-stores.dutycycle
perfevent.hwcounters.cpu.mem-stores.value
perfevent.hwcounters.cpu.tx-capacity.dutycycle
perfevent.hwcounters.cpu.tx-capacity.value
perfevent.hwcounters.cpu.mem-loads.dutycycle
perfevent.hwcounters.cpu.mem-loads.value
perfevent.hwcounters.cpu.branch-misses.dutycycle
perfevent.hwcounters.cpu.branch-misses.value
[...]
Now, say only the event cpu.branch-instructions is mentioned under
[dynamic] section in the perfevent.conf file. In this case, we can only
read the values for this event, all other dynamic events are disabled
and will return invalid value.
$ pmval perfevent.hwcounters.cpu.branch-misses.value
metric:    perfevent.hwcounters.cpu.branch-misses.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
          cpu0                  cpu1                  cpu2                  cpu3
        3.028E+05             3.772E+05             3.757E+05             2.638E+05
        4.382E+05             2.716E+05             2.888E+05

cpu.mem-loads is not added in the perfevent.conf file, so we won't be
able to get any values out of it, even though, we can see it under pminfo.
$ pmval perfevent.hwcounters.cpu.mem-loads.value
metric:    perfevent.hwcounters.cpu.mem-loads.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
No values available
No values available
This patch also adds software events whose configuration values are
available under linux/perf_event.h :
[...]
perfevent.hwcounters.software.cpu-migrations.dutycycle
perfevent.hwcounters.software.cpu-migrations.value
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]","The approach used seems valid to me @hkshaw1990
For testing, esp. fetch_events, parse_event_string and friends - we could have a testing mode where we prefix DEV_DIR (""/sys/bus/event_source/devices/"") with a path, allowing injection of test paths/files.  See the Linux PMDA and the LINUX_STATSPATH env variable which is used by a number of tests.
In this case, a LD_LIBRARY_PATH interceptor for perf_event_open so that actual kernel calls are not made for the faked event counters would be needed too I think.
Unrelated note, but this part may not be valid ...
--- a/src/pmdas/perfevent/pmda.c
+++ b/src/pmdas/perfevent/pmda.c
@@ -543,7 +545,7 @@ static char *normalize_metric_name(const char *name)
{
for(p = res; *p != '\0'; p++)
{


       if( !isalnum((int)*p) && *p != '_')





       if( !isalnum((int)*p) && *p != '_' && *p != '.' && *p != '-')
       {
           *p = '_'; /* ""underscore"" - new name */
       }



The metric name components should not contain dots or hyphens - see the
SYNTAX section on pmns(5) man page.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,277,2017-02-19T05:35:11Z,2017-03-03T00:13:29Z,2017-03-03T00:13:29Z,MERGED,True,1324,36,15,https://github.com/hkshaw1990,perfevent_pmda: Add PMU events exported from kernel,6,[],https://github.com/performancecopilot/pcp/pull/277,https://github.com/fche,5,https://github.com/performancecopilot/pcp/pull/277#issuecomment-281388172,"The perfevent pmda gets the event definitions from the libpfm
library. So, to add a new platform counter, we need to add its
definition to the libpfm library and use it here. This patch is the
first step towards removing that dependency. It parses the kernel
exported PMUs and their events from /sys/bus/event_source/devices, and
calculates the config values for each of these events. However, we don't
want to open all the events at once. Only the events which are mentioned
in perfevent.conf under [dynamic] section will be opened. But, all the
dynamic events will be listed with pminfo.
For e.g. :
$ pminfo
[...]
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]
perfevent.hwcounters.power.energy-cores.dutycycle
perfevent.hwcounters.power.energy-cores.value
perfevent.hwcounters.power.energy-ram.dutycycle
perfevent.hwcounters.power.energy-ram.value
[...]
perfevent.hwcounters.msr.mperf.dutycycle
perfevent.hwcounters.msr.mperf.value
perfevent.hwcounters.msr.aperf.dutycycle
perfevent.hwcounters.msr.aperf.value
[...]
perfevent.hwcounters.cpu.mem-stores.dutycycle
perfevent.hwcounters.cpu.mem-stores.value
perfevent.hwcounters.cpu.tx-capacity.dutycycle
perfevent.hwcounters.cpu.tx-capacity.value
perfevent.hwcounters.cpu.mem-loads.dutycycle
perfevent.hwcounters.cpu.mem-loads.value
perfevent.hwcounters.cpu.branch-misses.dutycycle
perfevent.hwcounters.cpu.branch-misses.value
[...]
Now, say only the event cpu.branch-instructions is mentioned under
[dynamic] section in the perfevent.conf file. In this case, we can only
read the values for this event, all other dynamic events are disabled
and will return invalid value.
$ pmval perfevent.hwcounters.cpu.branch-misses.value
metric:    perfevent.hwcounters.cpu.branch-misses.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
          cpu0                  cpu1                  cpu2                  cpu3
        3.028E+05             3.772E+05             3.757E+05             2.638E+05
        4.382E+05             2.716E+05             2.888E+05

cpu.mem-loads is not added in the perfevent.conf file, so we won't be
able to get any values out of it, even though, we can see it under pminfo.
$ pmval perfevent.hwcounters.cpu.mem-loads.value
metric:    perfevent.hwcounters.cpu.mem-loads.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
No values available
No values available
This patch also adds software events whose configuration values are
available under linux/perf_event.h :
[...]
perfevent.hwcounters.software.cpu-migrations.dutycycle
perfevent.hwcounters.software.cpu-migrations.value
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]","In addition to any pre-baked /sys/bus fake tarball for qa purposes, please consider having another test that actually exercises the code against the real running kernel.  We've had situations where the pre-baked data gives a false assurance, hiding breakage against changes in the real system.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,277,2017-02-19T05:35:11Z,2017-03-03T00:13:29Z,2017-03-03T00:13:29Z,MERGED,True,1324,36,15,https://github.com/hkshaw1990,perfevent_pmda: Add PMU events exported from kernel,6,[],https://github.com/performancecopilot/pcp/pull/277,https://github.com/hkshaw1990,6,https://github.com/performancecopilot/pcp/pull/277#issuecomment-281426487,"The perfevent pmda gets the event definitions from the libpfm
library. So, to add a new platform counter, we need to add its
definition to the libpfm library and use it here. This patch is the
first step towards removing that dependency. It parses the kernel
exported PMUs and their events from /sys/bus/event_source/devices, and
calculates the config values for each of these events. However, we don't
want to open all the events at once. Only the events which are mentioned
in perfevent.conf under [dynamic] section will be opened. But, all the
dynamic events will be listed with pminfo.
For e.g. :
$ pminfo
[...]
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]
perfevent.hwcounters.power.energy-cores.dutycycle
perfevent.hwcounters.power.energy-cores.value
perfevent.hwcounters.power.energy-ram.dutycycle
perfevent.hwcounters.power.energy-ram.value
[...]
perfevent.hwcounters.msr.mperf.dutycycle
perfevent.hwcounters.msr.mperf.value
perfevent.hwcounters.msr.aperf.dutycycle
perfevent.hwcounters.msr.aperf.value
[...]
perfevent.hwcounters.cpu.mem-stores.dutycycle
perfevent.hwcounters.cpu.mem-stores.value
perfevent.hwcounters.cpu.tx-capacity.dutycycle
perfevent.hwcounters.cpu.tx-capacity.value
perfevent.hwcounters.cpu.mem-loads.dutycycle
perfevent.hwcounters.cpu.mem-loads.value
perfevent.hwcounters.cpu.branch-misses.dutycycle
perfevent.hwcounters.cpu.branch-misses.value
[...]
Now, say only the event cpu.branch-instructions is mentioned under
[dynamic] section in the perfevent.conf file. In this case, we can only
read the values for this event, all other dynamic events are disabled
and will return invalid value.
$ pmval perfevent.hwcounters.cpu.branch-misses.value
metric:    perfevent.hwcounters.cpu.branch-misses.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
          cpu0                  cpu1                  cpu2                  cpu3
        3.028E+05             3.772E+05             3.757E+05             2.638E+05
        4.382E+05             2.716E+05             2.888E+05

cpu.mem-loads is not added in the perfevent.conf file, so we won't be
able to get any values out of it, even though, we can see it under pminfo.
$ pmval perfevent.hwcounters.cpu.mem-loads.value
metric:    perfevent.hwcounters.cpu.mem-loads.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
No values available
No values available
This patch also adds software events whose configuration values are
available under linux/perf_event.h :
[...]
perfevent.hwcounters.software.cpu-migrations.dutycycle
perfevent.hwcounters.software.cpu-migrations.value
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]","@natoscott thanks for the review Nathan.
Will add the suggested QAs for the perfevent.
While I agree that, a hyphen is illegal for a metric name to have, but, why a dot? The reason I am a bit unhappy to change everything to underscore because of some resultant metrics names. There is a ""cpu"" pmu  in /sys/bus/event_source/devices and ""cpu-cycles"" is one of its events. If every disallowed character is changed to underscore then the resultant name is :
perfevent.hwcounters.cpu_cpu_cycles.value
So, atleast, can we have the dot separating the PMU name and the event name?
@fche Agreed to have some test case to check against a real running kernel. But, one issue which we can face there is how do we compare the test results? Since, we don't know what or how many events are exposed in that kernel. Can you please provide some suggestions to it?
Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,277,2017-02-19T05:35:11Z,2017-03-03T00:13:29Z,2017-03-03T00:13:29Z,MERGED,True,1324,36,15,https://github.com/hkshaw1990,perfevent_pmda: Add PMU events exported from kernel,6,[],https://github.com/performancecopilot/pcp/pull/277,https://github.com/fche,7,https://github.com/performancecopilot/pcp/pull/277#issuecomment-281433252,"The perfevent pmda gets the event definitions from the libpfm
library. So, to add a new platform counter, we need to add its
definition to the libpfm library and use it here. This patch is the
first step towards removing that dependency. It parses the kernel
exported PMUs and their events from /sys/bus/event_source/devices, and
calculates the config values for each of these events. However, we don't
want to open all the events at once. Only the events which are mentioned
in perfevent.conf under [dynamic] section will be opened. But, all the
dynamic events will be listed with pminfo.
For e.g. :
$ pminfo
[...]
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]
perfevent.hwcounters.power.energy-cores.dutycycle
perfevent.hwcounters.power.energy-cores.value
perfevent.hwcounters.power.energy-ram.dutycycle
perfevent.hwcounters.power.energy-ram.value
[...]
perfevent.hwcounters.msr.mperf.dutycycle
perfevent.hwcounters.msr.mperf.value
perfevent.hwcounters.msr.aperf.dutycycle
perfevent.hwcounters.msr.aperf.value
[...]
perfevent.hwcounters.cpu.mem-stores.dutycycle
perfevent.hwcounters.cpu.mem-stores.value
perfevent.hwcounters.cpu.tx-capacity.dutycycle
perfevent.hwcounters.cpu.tx-capacity.value
perfevent.hwcounters.cpu.mem-loads.dutycycle
perfevent.hwcounters.cpu.mem-loads.value
perfevent.hwcounters.cpu.branch-misses.dutycycle
perfevent.hwcounters.cpu.branch-misses.value
[...]
Now, say only the event cpu.branch-instructions is mentioned under
[dynamic] section in the perfevent.conf file. In this case, we can only
read the values for this event, all other dynamic events are disabled
and will return invalid value.
$ pmval perfevent.hwcounters.cpu.branch-misses.value
metric:    perfevent.hwcounters.cpu.branch-misses.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
          cpu0                  cpu1                  cpu2                  cpu3
        3.028E+05             3.772E+05             3.757E+05             2.638E+05
        4.382E+05             2.716E+05             2.888E+05

cpu.mem-loads is not added in the perfevent.conf file, so we won't be
able to get any values out of it, even though, we can see it under pminfo.
$ pmval perfevent.hwcounters.cpu.mem-loads.value
metric:    perfevent.hwcounters.cpu.mem-loads.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
No values available
No values available
This patch also adds software events whose configuration values are
available under linux/perf_event.h :
[...]
perfevent.hwcounters.software.cpu-migrations.dutycycle
perfevent.hwcounters.software.cpu-migrations.value
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]","how do we compare the test results?

You'd have to have some logic in the test driver shell script to sanity-check the output, instead of naive comparison against an .out file.  You could compare the number of counters between pcp and perf -l; you could assert a minimum number of non-zero counts; that sort of thing.  _notrun if some prereq is missing.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,277,2017-02-19T05:35:11Z,2017-03-03T00:13:29Z,2017-03-03T00:13:29Z,MERGED,True,1324,36,15,https://github.com/hkshaw1990,perfevent_pmda: Add PMU events exported from kernel,6,[],https://github.com/performancecopilot/pcp/pull/277,https://github.com/natoscott,8,https://github.com/performancecopilot/pcp/pull/277#issuecomment-281482580,"The perfevent pmda gets the event definitions from the libpfm
library. So, to add a new platform counter, we need to add its
definition to the libpfm library and use it here. This patch is the
first step towards removing that dependency. It parses the kernel
exported PMUs and their events from /sys/bus/event_source/devices, and
calculates the config values for each of these events. However, we don't
want to open all the events at once. Only the events which are mentioned
in perfevent.conf under [dynamic] section will be opened. But, all the
dynamic events will be listed with pminfo.
For e.g. :
$ pminfo
[...]
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]
perfevent.hwcounters.power.energy-cores.dutycycle
perfevent.hwcounters.power.energy-cores.value
perfevent.hwcounters.power.energy-ram.dutycycle
perfevent.hwcounters.power.energy-ram.value
[...]
perfevent.hwcounters.msr.mperf.dutycycle
perfevent.hwcounters.msr.mperf.value
perfevent.hwcounters.msr.aperf.dutycycle
perfevent.hwcounters.msr.aperf.value
[...]
perfevent.hwcounters.cpu.mem-stores.dutycycle
perfevent.hwcounters.cpu.mem-stores.value
perfevent.hwcounters.cpu.tx-capacity.dutycycle
perfevent.hwcounters.cpu.tx-capacity.value
perfevent.hwcounters.cpu.mem-loads.dutycycle
perfevent.hwcounters.cpu.mem-loads.value
perfevent.hwcounters.cpu.branch-misses.dutycycle
perfevent.hwcounters.cpu.branch-misses.value
[...]
Now, say only the event cpu.branch-instructions is mentioned under
[dynamic] section in the perfevent.conf file. In this case, we can only
read the values for this event, all other dynamic events are disabled
and will return invalid value.
$ pmval perfevent.hwcounters.cpu.branch-misses.value
metric:    perfevent.hwcounters.cpu.branch-misses.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
          cpu0                  cpu1                  cpu2                  cpu3
        3.028E+05             3.772E+05             3.757E+05             2.638E+05
        4.382E+05             2.716E+05             2.888E+05

cpu.mem-loads is not added in the perfevent.conf file, so we won't be
able to get any values out of it, even though, we can see it under pminfo.
$ pmval perfevent.hwcounters.cpu.mem-loads.value
metric:    perfevent.hwcounters.cpu.mem-loads.value
host:      <>
semantics: cumulative counter (converting to rate)
units:     count (converting to count / sec)
samples:   all
No values available
No values available
This patch also adds software events whose configuration values are
available under linux/perf_event.h :
[...]
perfevent.hwcounters.software.cpu-migrations.dutycycle
perfevent.hwcounters.software.cpu-migrations.value
perfevent.hwcounters.software.context-switches.dutycycle
perfevent.hwcounters.software.context-switches.value
perfevent.hwcounters.software.page-faults.dutycycle
perfevent.hwcounters.software.page-faults.value
[...]","@hkshaw1990 yes, dots are OK as component separators within metric names - just its not within a metric name component (this is a low level detail when adding metric names on the fly - wasn't clear if it will affect you here, so just thought I'd mention it).  You can test this by ensuring the PMNS can be expanded (e.g. via pminfo/pmprobe) at any point where this is a dot.
Regarding testing, you can have arbitrary complexity in a QA test via custom qa/src code, then have the helper program produce deterministic ""OK"" output if all is well and detailed diagnostics on failure.  This still fits in with the ""naive comparison"" model just fine.  In the perfevent case though, it may be overkill though - one can sometimes end up spending more time chasing kernel/hardware issues, test workarounds and platform-idiosyncrasies than doing useful testing - so, up to you to make a call there as the code author.
The final thing to keep in mind is that there is likely to be other people (like myself, and the other PCP maintainers) who run the tests frequently and will need to debug test failures.  So there's a balance to be struck here, it's not a one-size-fits all situation.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,278,2017-02-20T21:44:05Z,2017-02-28T05:07:14Z,2017-02-28T11:27:27Z,MERGED,True,278,245,12,https://github.com/tallpsmith,Tidy up of Vagrantfile & Start of OSX Sierra base box,24,[],https://github.com/performancecopilot/pcp/pull/278,https://github.com/tallpsmith,1,https://github.com/performancecopilot/pcp/pull/278,"My intent started off to get a working stable cleanroom environment for building PCP on OSX.
I've leveraged a pattern found on the interwebs for using an OSX Sierra base image which is then bootstrapped further with some other installations via Homebrew.
I've elected to tidy up the Vagrantfile in the process, pulling out a lot of inline scripts into dedicated files so that the file is easier to read.
At the moment, the provisioning of the OSX Sierra box takes FLIPPING AGES:


Firstly, the base image is 20GB, so get a coffee and chill with Netflix while that downloads the first time...


the brew install of several of the needed components takes FOREVER - in particular gettext and qt5.  My strategy will be to supersede this base image with a newer pre-built OSX Base box with these pre-installed.  This won't help the initial download of the base box though..  I'm not sure where we can store this image, perhaps bintray as Nathan outlined.



For some reason this is coming up with a merge conflict but I don't know why...","My intent started off to get a working stable cleanroom environment for building PCP on OSX.
I've leveraged a pattern found on the interwebs for using an OSX Sierra base image which is then bootstrapped further with some other installations via Homebrew.
I've elected to tidy up the Vagrantfile in the process, pulling out a lot of inline scripts into dedicated files so that the file is easier to read.
At the moment, the provisioning of the OSX Sierra box takes FLIPPING AGES:


Firstly, the base image is 20GB, so get a coffee and chill with Netflix while that downloads the first time...


the brew install of several of the needed components takes FOREVER - in particular gettext and qt5.  My strategy will be to supersede this base image with a newer pre-built OSX Base box with these pre-installed.  This won't help the initial download of the base box though..  I'm not sure where we can store this image, perhaps bintray as Nathan outlined.



For some reason this is coming up with a merge conflict but I don't know why...",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,278,2017-02-20T21:44:05Z,2017-02-28T05:07:14Z,2017-02-28T11:27:27Z,MERGED,True,278,245,12,https://github.com/tallpsmith,Tidy up of Vagrantfile & Start of OSX Sierra base box,24,[],https://github.com/performancecopilot/pcp/pull/278,https://github.com/ryandoyle,2,https://github.com/performancecopilot/pcp/pull/278#issuecomment-281872516,"My intent started off to get a working stable cleanroom environment for building PCP on OSX.
I've leveraged a pattern found on the interwebs for using an OSX Sierra base image which is then bootstrapped further with some other installations via Homebrew.
I've elected to tidy up the Vagrantfile in the process, pulling out a lot of inline scripts into dedicated files so that the file is easier to read.
At the moment, the provisioning of the OSX Sierra box takes FLIPPING AGES:


Firstly, the base image is 20GB, so get a coffee and chill with Netflix while that downloads the first time...


the brew install of several of the needed components takes FOREVER - in particular gettext and qt5.  My strategy will be to supersede this base image with a newer pre-built OSX Base box with these pre-installed.  This won't help the initial download of the base box though..  I'm not sure where we can store this image, perhaps bintray as Nathan outlined.



For some reason this is coming up with a merge conflict but I don't know why...","Given the licensing issues with using the OSX box as per https://github.com/AndrewDryga/vagrant-box-osx#os-x-licensing and http://images.apple.com/legal/sla/docs/macOS1012.pdf, perhaps we should make it harder to use the box without the user implicitly doing so.
The sections of the PDF that are interesting are 2.A and 2.B. The way I read it is that you can only use a VM if your license to the software is via 2.B. If your OSX license is granted by the way of it being pre-installed (2.A), then I don't think the allowable 2 VMs applies.
Also, there are some tabs for the new OSX box - these should be consistent with spaces with the rest of the file.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,278,2017-02-20T21:44:05Z,2017-02-28T05:07:14Z,2017-02-28T11:27:27Z,MERGED,True,278,245,12,https://github.com/tallpsmith,Tidy up of Vagrantfile & Start of OSX Sierra base box,24,[],https://github.com/performancecopilot/pcp/pull/278,https://github.com/tallpsmith,3,https://github.com/performancecopilot/pcp/pull/278#issuecomment-282459226,"My intent started off to get a working stable cleanroom environment for building PCP on OSX.
I've leveraged a pattern found on the interwebs for using an OSX Sierra base image which is then bootstrapped further with some other installations via Homebrew.
I've elected to tidy up the Vagrantfile in the process, pulling out a lot of inline scripts into dedicated files so that the file is easier to read.
At the moment, the provisioning of the OSX Sierra box takes FLIPPING AGES:


Firstly, the base image is 20GB, so get a coffee and chill with Netflix while that downloads the first time...


the brew install of several of the needed components takes FOREVER - in particular gettext and qt5.  My strategy will be to supersede this base image with a newer pre-built OSX Base box with these pre-installed.  This won't help the initial download of the base box though..  I'm not sure where we can store this image, perhaps bintray as Nathan outlined.



For some reason this is coming up with a merge conflict but I don't know why...","@ryandoyle I've updated the PR with the changes we discussed on Friday, so would appreciate another eyeballing.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,278,2017-02-20T21:44:05Z,2017-02-28T05:07:14Z,2017-02-28T11:27:27Z,MERGED,True,278,245,12,https://github.com/tallpsmith,Tidy up of Vagrantfile & Start of OSX Sierra base box,24,[],https://github.com/performancecopilot/pcp/pull/278,https://github.com/ryandoyle,4,https://github.com/performancecopilot/pcp/pull/278#issuecomment-282650497,"My intent started off to get a working stable cleanroom environment for building PCP on OSX.
I've leveraged a pattern found on the interwebs for using an OSX Sierra base image which is then bootstrapped further with some other installations via Homebrew.
I've elected to tidy up the Vagrantfile in the process, pulling out a lot of inline scripts into dedicated files so that the file is easier to read.
At the moment, the provisioning of the OSX Sierra box takes FLIPPING AGES:


Firstly, the base image is 20GB, so get a coffee and chill with Netflix while that downloads the first time...


the brew install of several of the needed components takes FOREVER - in particular gettext and qt5.  My strategy will be to supersede this base image with a newer pre-built OSX Base box with these pre-installed.  This won't help the initial download of the base box though..  I'm not sure where we can store this image, perhaps bintray as Nathan outlined.



For some reason this is coming up with a merge conflict but I don't know why...","A couple of things @tallpsmith

Vagrant is aborting for me when I run a vagrant status. I'm falling through to the elsif(!platformOkToUseOSX) conditional. You probably want to use STDERR.puts for non-fatal errors.
A few stylistic things, Ruby convention is lower-case snake-case

I think the logic could be simplified to only inform the user that they can use the OSX box if they are actually on OSX.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,278,2017-02-20T21:44:05Z,2017-02-28T05:07:14Z,2017-02-28T11:27:27Z,MERGED,True,278,245,12,https://github.com/tallpsmith,Tidy up of Vagrantfile & Start of OSX Sierra base box,24,[],https://github.com/performancecopilot/pcp/pull/278,https://github.com/tallpsmith,5,https://github.com/performancecopilot/pcp/pull/278#issuecomment-282672375,"My intent started off to get a working stable cleanroom environment for building PCP on OSX.
I've leveraged a pattern found on the interwebs for using an OSX Sierra base image which is then bootstrapped further with some other installations via Homebrew.
I've elected to tidy up the Vagrantfile in the process, pulling out a lot of inline scripts into dedicated files so that the file is easier to read.
At the moment, the provisioning of the OSX Sierra box takes FLIPPING AGES:


Firstly, the base image is 20GB, so get a coffee and chill with Netflix while that downloads the first time...


the brew install of several of the needed components takes FOREVER - in particular gettext and qt5.  My strategy will be to supersede this base image with a newer pre-built OSX Base box with these pre-installed.  This won't help the initial download of the base box though..  I'm not sure where we can store this image, perhaps bintray as Nathan outlined.



For some reason this is coming up with a merge conflict but I don't know why...","Ryan, factored in your feedback.
However it ends up only nagging and not preventing the running...?
Several beers and boolean logic are not a good combination for me, will catch you tomorrow.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,278,2017-02-20T21:44:05Z,2017-02-28T05:07:14Z,2017-02-28T11:27:27Z,MERGED,True,278,245,12,https://github.com/tallpsmith,Tidy up of Vagrantfile & Start of OSX Sierra base box,24,[],https://github.com/performancecopilot/pcp/pull/278,https://github.com/ryandoyle,6,https://github.com/performancecopilot/pcp/pull/278#issuecomment-282943213,"My intent started off to get a working stable cleanroom environment for building PCP on OSX.
I've leveraged a pattern found on the interwebs for using an OSX Sierra base image which is then bootstrapped further with some other installations via Homebrew.
I've elected to tidy up the Vagrantfile in the process, pulling out a lot of inline scripts into dedicated files so that the file is easier to read.
At the moment, the provisioning of the OSX Sierra box takes FLIPPING AGES:


Firstly, the base image is 20GB, so get a coffee and chill with Netflix while that downloads the first time...


the brew install of several of the needed components takes FOREVER - in particular gettext and qt5.  My strategy will be to supersede this base image with a newer pre-built OSX Base box with these pre-installed.  This won't help the initial download of the base box though..  I'm not sure where we can store this image, perhaps bintray as Nathan outlined.



For some reason this is coming up with a merge conflict but I don't know why...",Yep looks better now 👍,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,279,2017-02-23T17:06:47Z,2017-02-28T01:58:46Z,2017-02-28T01:58:46Z,MERGED,True,54,0,1,https://github.com/suyash,initial implementation of speed container,2,[],https://github.com/performancecopilot/pcp/pull/279,https://github.com/suyash,1,https://github.com/performancecopilot/pcp/pull/279,"@natoscott I have added a simple container that installs speed and builds all examples.
Go installation is from the official library image.","@natoscott I have added a simple container that installs speed and builds all examples.
Go installation is from the official library image.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,279,2017-02-23T17:06:47Z,2017-02-28T01:58:46Z,2017-02-28T01:58:46Z,MERGED,True,54,0,1,https://github.com/suyash,initial implementation of speed container,2,[],https://github.com/performancecopilot/pcp/pull/279,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/279#issuecomment-282640722,"@natoscott I have added a simple container that installs speed and builds all examples.
Go installation is from the official library image.","This is good, Suyash.  The final container is missing a running pmcd (along side the running Go program), but I realise I didn't explain that very well earlier - the end goal here is an application running in a container, with pmcd also running in the container, that could be deployed into a cloud service.
More importantly, I see the Acme example that I'd like to run here is a little different between Parfait and Speed.  In Speed we based it on the Python Acme example, which exits straight away.  What we need here is an instrumented daemon/service, written in Go and instrumented with Speed.  Could we extend the Acme example in Speed to be long-running (frequently updating the metrics), like Parfait?  (i.e. don't exit right away, but run in a loop and keep updating metric values)  e.g.
https://github.com/performancecopilot/parfait/tree/master/examples/acme/src/main/java
Assuming we can do that, I'll push an update to your PR which completes the container build (adds in pmcd, and runs it alongside the Go Acme service) and adds it into the set we release with PCP.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,279,2017-02-23T17:06:47Z,2017-02-28T01:58:46Z,2017-02-28T01:58:46Z,MERGED,True,54,0,1,https://github.com/suyash,initial implementation of speed container,2,[],https://github.com/performancecopilot/pcp/pull/279,https://github.com/suyash,3,https://github.com/performancecopilot/pcp/pull/279#issuecomment-282810905,"@natoscott I have added a simple container that installs speed and builds all examples.
Go installation is from the official library image.",@natoscott will implement a separate acme_forever example for speed and update this following that,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,279,2017-02-23T17:06:47Z,2017-02-28T01:58:46Z,2017-02-28T01:58:46Z,MERGED,True,54,0,1,https://github.com/suyash,initial implementation of speed container,2,[],https://github.com/performancecopilot/pcp/pull/279,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/279#issuecomment-282843925,"@natoscott I have added a simple container that installs speed and builds all examples.
Go installation is from the official library image.",@suyash thanks!  Or maybe a command line option to run acme --forever?,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,284,2017-03-30T03:17:30Z,2017-03-30T03:21:23Z,2017-03-30T03:21:23Z,MERGED,True,18,17,3,https://github.com/hkshaw1990,perfevent_pmda: Fixes a sigsegv for test_dynamic_events_config,1,[],https://github.com/performancecopilot/pcp/pull/284,https://github.com/hkshaw1990,1,https://github.com/performancecopilot/pcp/pull/284,"The perfevent pmda code initializes/parses a cpumask for each
PMU. Previously, it used to allocate a memory block with max available
cpus from archinfo->cpulist. And, then, it finds out the list of
allowable cpus on which events of a certain PMU can be monitored. That
causes an issue with the test case test_dynamic_events_config, in which,
the archinfo->cpulist initialized (from the system) may be less than the
cpumask available for a pmu in this test case. If that's the case, it
will cause a sigsegv, since, it tries to parse more cpus than the
allocated space.
This PR fixes this issue by allocating the appropriate space by first
looking at the cpumask and then parsing it.","The perfevent pmda code initializes/parses a cpumask for each
PMU. Previously, it used to allocate a memory block with max available
cpus from archinfo->cpulist. And, then, it finds out the list of
allowable cpus on which events of a certain PMU can be monitored. That
causes an issue with the test case test_dynamic_events_config, in which,
the archinfo->cpulist initialized (from the system) may be less than the
cpumask available for a pmu in this test case. If that's the case, it
will cause a sigsegv, since, it tries to parse more cpus than the
allocated space.
This PR fixes this issue by allocating the appropriate space by first
looking at the cpumask and then parsing it.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,285,2017-04-02T17:58:40Z,2017-05-26T05:44:02Z,2017-05-26T05:44:03Z,MERGED,True,4632,4,12,https://github.com/jronak,Implementation of Prometheus PMDA,19,[],https://github.com/performancecopilot/pcp/pull/285,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/285,"Experimental implementation of a PMDA to import Prometheus metrics into PCP.
Looking forward to the suggestions/feedback.
Thanks","Experimental implementation of a PMDA to import Prometheus metrics into PCP.
Looking forward to the suggestions/feedback.
Thanks",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,285,2017-04-02T17:58:40Z,2017-05-26T05:44:02Z,2017-05-26T05:44:03Z,MERGED,True,4632,4,12,https://github.com/jronak,Implementation of Prometheus PMDA,19,[],https://github.com/performancecopilot/pcp/pull/285,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/285#issuecomment-296546332,"Experimental implementation of a PMDA to import Prometheus metrics into PCP.
Looking forward to the suggestions/feedback.
Thanks","@jronak looking good!  Worked first time for me, which is always nice.  :)
The last two steps before an initial merge will be:

some documentation (a man page) - you might find src/pmdas/gluster/pmdagluster.1 useful as a template; in particular, the special pmdaprometheus command line options need documenting, and the 'Installation'' section of the man page should take a user through exactly what's involved.  The 'Files' section should also cover all the configuration files.
regression test(s) - see qa/README, the qa/new script, and the pmdagluster/pmdajson tests as some examples (egrep 'pmda.gluster|pmda.json' qa/group)

At that point, I think we'll have a perfect base from which we can (collectively) build - e.g. we could look into extending this PMDA with any number of things ...

checking that some of the more common endpoints work well (like etcd, kubernetes, etc);
some of the more automatic enabling of metrics that's been requested, when no configs exists;
label support - great to see you've got prometheus labels embedded in compound instance names already, and its immediately clear these will map nicely to the pending PCP label concept too.

cheers.
ps: I'll send you a little patch with some small cleanups I noticed.  Also, down the track you might want to run pylint(1) on the script - it's very opinionated in some regards (re code style), but does pick up some genuine problems too sometimes, so worth going through the volumes of warnings it usually issues.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,288,2017-04-26T07:34:10Z,2017-04-27T06:52:49Z,2017-04-27T06:52:49Z,MERGED,True,25,0,3,https://github.com/myllynen,pmrep: correctly handle endtime in uninterpolated mode,1,[],https://github.com/performancecopilot/pcp/pull/288,https://github.com/myllynen,1,https://github.com/performancecopilot/pcp/pull/288,"https://groups.io/g/pcp/topic/pmrep_endtime_not_effective/4889031
Reported-by: Rares Vernica rvernica@gmail.com","https://groups.io/g/pcp/topic/pmrep_endtime_not_effective/4889031
Reported-by: Rares Vernica rvernica@gmail.com",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,293,2017-05-08T14:36:07Z,2017-05-09T01:25:59Z,2017-05-09T01:25:59Z,MERGED,True,216,36,10,https://github.com/myllynen,pmrep updates,3,[],https://github.com/performancecopilot/pcp/pull/293,https://github.com/myllynen,1,https://github.com/performancecopilot/pcp/pull/293,pmrep instance handling improvements,pmrep instance handling improvements,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,294,2017-05-09T05:07:59Z,2017-05-09T07:24:11Z,2017-05-09T07:24:11Z,MERGED,True,0,2,1,https://github.com/myllynen,pmrep: fix now unneeded workaround,1,[],https://github.com/performancecopilot/pcp/pull/294,https://github.com/myllynen,1,https://github.com/performancecopilot/pcp/pull/294,654d0c0 addressed this properly in libpcp so drop the Python workaround.,654d0c0 addressed this properly in libpcp so drop the Python workaround.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,295,2017-05-09T15:22:29Z,2017-05-10T01:50:56Z,2017-05-10T01:50:56Z,MERGED,True,110,11,3,https://github.com/minnus,Update proc help text,1,[],https://github.com/performancecopilot/pcp/pull/295,https://github.com/minnus,1,https://github.com/performancecopilot/pcp/pull/295,"Add missing help text for some hotproc metrics
Remove some unused proc help text
Add some documentation on where help text should be added","Add missing help text for some hotproc metrics
Remove some unused proc help text
Add some documentation on where help text should be added",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,295,2017-05-09T15:22:29Z,2017-05-10T01:50:56Z,2017-05-10T01:50:56Z,MERGED,True,110,11,3,https://github.com/minnus,Update proc help text,1,[],https://github.com/performancecopilot/pcp/pull/295,https://github.com/lberk,2,https://github.com/performancecopilot/pcp/pull/295#issuecomment-300309223,"Add missing help text for some hotproc metrics
Remove some unused proc help text
Add some documentation on where help text should be added","LGTM, submitted for pcp upstream: https://groups.io/g/pcp/message/15725",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,295,2017-05-09T15:22:29Z,2017-05-10T01:50:56Z,2017-05-10T01:50:56Z,MERGED,True,110,11,3,https://github.com/minnus,Update proc help text,1,[],https://github.com/performancecopilot/pcp/pull/295,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/295#issuecomment-300322524,"Add missing help text for some hotproc metrics
Remove some unused proc help text
Add some documentation on where help text should be added","@lberk please merge it directly once you've reviewed, no need to wait.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,296,2017-05-09T15:51:00Z,2017-05-10T01:50:56Z,2017-05-10T01:50:56Z,MERGED,True,11,14,2,https://github.com/myllynen,pmrep: cmd line improvements,1,[],https://github.com/performancecopilot/pcp/pull/296,https://github.com/myllynen,1,https://github.com/performancecopilot/pcp/pull/296,"With RHBZ#1289912 fixed we can drop the last BUGS item from pmrep(1).
Address the corner case issue with -c while at it.
Minor related cleanups, all QA still passing.","With RHBZ#1289912 fixed we can drop the last BUGS item from pmrep(1).
Address the corner case issue with -c while at it.
Minor related cleanups, all QA still passing.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,297,2017-05-10T07:36:17Z,2017-05-11T05:17:23Z,2017-05-11T05:17:23Z,MERGED,True,171,139,1,https://github.com/myllynen,"libvirt pmda: add new block, perf, vcpu metrics",1,[],https://github.com/performancecopilot/pcp/pull/297,https://github.com/myllynen,1,https://github.com/performancecopilot/pcp/pull/297,"For an overview, see
https://groups.io/g/pcp/message/15733
For more details on the new perf metrics, see
https://libvirt.org/formatdomain.html
For explanation on some of the block metrics, see
https://www.berrange.com/posts/2017/02/10/the-surprisingly-complicated-world-of-disk-image-sizes/","For an overview, see
https://groups.io/g/pcp/message/15733
For more details on the new perf metrics, see
https://libvirt.org/formatdomain.html
For explanation on some of the block metrics, see
https://www.berrange.com/posts/2017/02/10/the-surprisingly-complicated-world-of-disk-image-sizes/",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,299,2017-05-22T07:50:00Z,2017-05-23T00:35:31Z,2017-05-23T00:35:31Z,MERGED,True,6,4,1,https://github.com/jronak,Python Api: Handle duplicate metric name correctly,1,[],https://github.com/performancecopilot/pcp/pull/299,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/299,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,301,2017-05-26T17:54:35Z,2017-06-02T04:30:02Z,2017-06-02T04:30:03Z,MERGED,True,102,1,5,https://github.com/minnus,A couple of new pmmgr options,6,[],https://github.com/performancecopilot/pcp/pull/301,https://github.com/minnus,1,https://github.com/performancecopilot/pcp/pull/301,"hostid-static:
For when the host to be monitored doesn't know what it should be called.  Used in monitoring a VM farm where the name should be an externally generated uuid.
pmlogger-timefmt:
Allow the time format in the filename to be specified.
We have been running both of these for a while, and have seen no ill effects.","hostid-static:
For when the host to be monitored doesn't know what it should be called.  Used in monitoring a VM farm where the name should be an externally generated uuid.
pmlogger-timefmt:
Allow the time format in the filename to be specified.
We have been running both of these for a while, and have seen no ill effects.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,301,2017-05-26T17:54:35Z,2017-06-02T04:30:02Z,2017-06-02T04:30:03Z,MERGED,True,102,1,5,https://github.com/minnus,A couple of new pmmgr options,6,[],https://github.com/performancecopilot/pcp/pull/301,https://github.com/fche,2,https://github.com/performancecopilot/pcp/pull/301#issuecomment-304349115,"hostid-static:
For when the host to be monitored doesn't know what it should be called.  Used in monitoring a VM farm where the name should be an externally generated uuid.
pmlogger-timefmt:
Allow the time format in the filename to be specified.
We have been running both of these for a while, and have seen no ill effects.","LGTM generally; the ""hostid-static"" docs should disclose that setting it will force pmmgr to interpret -all- target pmcds it encounters as the same single static hostid, so this is only useful in a single-target configuration.  (By the way, if passing the unique-id to the VM via pmcd -H $HOSTNAME  is possible, and then the pmmgr side changes wouldn't be needed.)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,301,2017-05-26T17:54:35Z,2017-06-02T04:30:02Z,2017-06-02T04:30:03Z,MERGED,True,102,1,5,https://github.com/minnus,A couple of new pmmgr options,6,[],https://github.com/performancecopilot/pcp/pull/301,https://github.com/minnus,3,https://github.com/performancecopilot/pcp/pull/301#issuecomment-304353510,"hostid-static:
For when the host to be monitored doesn't know what it should be called.  Used in monitoring a VM farm where the name should be an externally generated uuid.
pmlogger-timefmt:
Allow the time format in the filename to be specified.
We have been running both of these for a while, and have seen no ill effects.","Thanks for the feedback Frank.  Should be addressed now.
With respect to the pmcd -H, I wasn't aware of that, and good to now know.  But in practice that would be cumbersome to implement in this specific environment.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,301,2017-05-26T17:54:35Z,2017-06-02T04:30:02Z,2017-06-02T04:30:03Z,MERGED,True,102,1,5,https://github.com/minnus,A couple of new pmmgr options,6,[],https://github.com/performancecopilot/pcp/pull/301,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/301#issuecomment-304579151,"hostid-static:
For when the host to be monitored doesn't know what it should be called.  Used in monitoring a VM farm where the name should be an externally generated uuid.
pmlogger-timefmt:
Allow the time format in the filename to be specified.
We have been running both of these for a while, and have seen no ill effects.",@minnus looks like these changes needs some automated QA?,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,301,2017-05-26T17:54:35Z,2017-06-02T04:30:02Z,2017-06-02T04:30:03Z,MERGED,True,102,1,5,https://github.com/minnus,A couple of new pmmgr options,6,[],https://github.com/performancecopilot/pcp/pull/301,https://github.com/minnus,5,https://github.com/performancecopilot/pcp/pull/301#issuecomment-305599336,"hostid-static:
For when the host to be monitored doesn't know what it should be called.  Used in monitoring a VM farm where the name should be an externally generated uuid.
pmlogger-timefmt:
Allow the time format in the filename to be specified.
We have been running both of these for a while, and have seen no ill effects.","OK, I think this should exercise the 2 new new options",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,302,2017-05-26T18:04:51Z,2017-06-02T04:30:03Z,2017-06-02T04:30:03Z,MERGED,True,67,2,7,https://github.com/minnus,pmlogger label hostname override,7,[],https://github.com/performancecopilot/pcp/pull/302,https://github.com/minnus,1,https://github.com/performancecopilot/pcp/pull/302,"Not ready for merge yet, but just looking for comments if there would be any negative consequence to doing his.  When monitoring a remote VM farm, the hostname can be changed by the user to any value.  When logging many VMs centrally, these leads to 2 issues:
1:
We cannot uniquely identify an archive by hostname, since multiple machines may have the same hostname.
2:
pmlogextract fails to merge archives with different hostnames in the label.
When monitoring these hosts, by setting the hostname in the label to an externally generated uuid, we can solve both of these issues.
We have been running this for a week or so and it seems to work fine.","Not ready for merge yet, but just looking for comments if there would be any negative consequence to doing his.  When monitoring a remote VM farm, the hostname can be changed by the user to any value.  When logging many VMs centrally, these leads to 2 issues:
1:
We cannot uniquely identify an archive by hostname, since multiple machines may have the same hostname.
2:
pmlogextract fails to merge archives with different hostnames in the label.
When monitoring these hosts, by setting the hostname in the label to an externally generated uuid, we can solve both of these issues.
We have been running this for a week or so and it seems to work fine.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,302,2017-05-26T18:04:51Z,2017-06-02T04:30:03Z,2017-06-02T04:30:03Z,MERGED,True,67,2,7,https://github.com/minnus,pmlogger label hostname override,7,[],https://github.com/performancecopilot/pcp/pull/302,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/302#issuecomment-304579004,"Not ready for merge yet, but just looking for comments if there would be any negative consequence to doing his.  When monitoring a remote VM farm, the hostname can be changed by the user to any value.  When logging many VMs centrally, these leads to 2 issues:
1:
We cannot uniquely identify an archive by hostname, since multiple machines may have the same hostname.
2:
pmlogextract fails to merge archives with different hostnames in the label.
When monitoring these hosts, by setting the hostname in the label to an externally generated uuid, we can solve both of these issues.
We have been running this for a week or so and it seems to work fine.","Is pmlabel(1) use an option here @minnus ?  If not, seems OK to me.  Might want to add a check for exceeding PM_LOG_MAXHOSTLEN too.
| We have been running this for a week or so and it seems to work fine.
This'll need an automated regression test - should be fairly straight-forward though (use pmlabel and/or pmdumplog -l to verify the right hostname is used).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,302,2017-05-26T18:04:51Z,2017-06-02T04:30:03Z,2017-06-02T04:30:03Z,MERGED,True,67,2,7,https://github.com/minnus,pmlogger label hostname override,7,[],https://github.com/performancecopilot/pcp/pull/302,https://github.com/minnus,3,https://github.com/performancecopilot/pcp/pull/302#issuecomment-305546531,"Not ready for merge yet, but just looking for comments if there would be any negative consequence to doing his.  When monitoring a remote VM farm, the hostname can be changed by the user to any value.  When logging many VMs centrally, these leads to 2 issues:
1:
We cannot uniquely identify an archive by hostname, since multiple machines may have the same hostname.
2:
pmlogextract fails to merge archives with different hostnames in the label.
When monitoring these hosts, by setting the hostname in the label to an externally generated uuid, we can solve both of these issues.
We have been running this for a week or so and it seems to work fine.","@natoscott OK, should be all set now with QA and man page",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,302,2017-05-26T18:04:51Z,2017-06-02T04:30:03Z,2017-06-02T04:30:03Z,MERGED,True,67,2,7,https://github.com/minnus,pmlogger label hostname override,7,[],https://github.com/performancecopilot/pcp/pull/302,https://github.com/fche,4,https://github.com/performancecopilot/pcp/pull/302#issuecomment-305563999,"Not ready for merge yet, but just looking for comments if there would be any negative consequence to doing his.  When monitoring a remote VM farm, the hostname can be changed by the user to any value.  When logging many VMs centrally, these leads to 2 issues:
1:
We cannot uniquely identify an archive by hostname, since multiple machines may have the same hostname.
2:
pmlogextract fails to merge archives with different hostnames in the label.
When monitoring these hosts, by setting the hostname in the label to an externally generated uuid, we can solve both of these issues.
We have been running this for a week or so and it seems to work fine.","(Probably too late now, but I wonder if perhaps such an option would be even more appropriately placed within pmlogextract itself - that way, if given, it would both set the output archive's loglabel.hostname field, and suppress the 'must have same hostnames on the input archives' check.)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,302,2017-05-26T18:04:51Z,2017-06-02T04:30:03Z,2017-06-02T04:30:03Z,MERGED,True,67,2,7,https://github.com/minnus,pmlogger label hostname override,7,[],https://github.com/performancecopilot/pcp/pull/302,https://github.com/minnus,5,https://github.com/performancecopilot/pcp/pull/302#issuecomment-305566482,"Not ready for merge yet, but just looking for comments if there would be any negative consequence to doing his.  When monitoring a remote VM farm, the hostname can be changed by the user to any value.  When logging many VMs centrally, these leads to 2 issues:
1:
We cannot uniquely identify an archive by hostname, since multiple machines may have the same hostname.
2:
pmlogextract fails to merge archives with different hostnames in the label.
When monitoring these hosts, by setting the hostname in the label to an externally generated uuid, we can solve both of these issues.
We have been running this for a week or so and it seems to work fine.","And a few more fixes.  I missed the pmnewlog stuff and associated QA fallout.  I don't necessarily understand which options should get passed through by pmnewlog, but I think I got it right.  Let me know if I missed anything else.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,303,2017-05-30T06:11:45Z,2017-05-31T06:38:35Z,2017-05-31T06:38:35Z,MERGED,True,178,7,6,https://github.com/jronak,PMDA: Prometheus docker test,2,[],https://github.com/performancecopilot/pcp/pull/303,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/303,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,305,2017-05-31T20:31:09Z,2017-06-01T07:00:16Z,2017-07-16T22:48:24Z,MERGED,True,256,100,6,https://github.com/jronak,PMDA Prometheus injection test,4,[],https://github.com/performancecopilot/pcp/pull/305,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/305,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,306,2017-05-31T20:36:39Z,2017-06-01T08:09:39Z,2017-07-31T09:07:30Z,MERGED,True,1,0,1,https://github.com/jronak,Python API: Clear the _metric_names_map,1,[],https://github.com/performancecopilot/pcp/pull/306,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/306,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,309,2017-06-12T17:08:42Z,2017-06-13T00:51:09Z,2017-06-13T00:51:09Z,MERGED,True,4,2,1,https://github.com/minnus,Fix conditional scope for pmlogger-timefmt change,1,[],https://github.com/performancecopilot/pcp/pull/309,https://github.com/minnus,1,https://github.com/performancecopilot/pcp/pull/309,Fix a scoping issue in one of my recent commits.  Thanks to Frank for pointing this out.,Fix a scoping issue in one of my recent commits.  Thanks to Frank for pointing this out.,True,{'THUMBS_UP': ['https://github.com/fche']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,310,2017-06-15T14:41:07Z,2017-06-16T01:38:35Z,2017-06-16T15:46:40Z,MERGED,True,6,0,1,https://github.com/rlex,Additional slave metrics for MySQL PMDA,1,[],https://github.com/performancecopilot/pcp/pull/310,https://github.com/rlex,1,https://github.com/performancecopilot/pcp/pull/310,"Corresponding lines from SHOW SLAVE STATUS:
SQL_Delay: 0
SQL_Remaining_Delay: NULL

One problem i noticed is that SQL_Delay and SQL_Remaining_Delay can be both int and NULL.
This also applies to Seconds_Behind_Master which is PM_TYPE_U32 right now.","Corresponding lines from SHOW SLAVE STATUS:
SQL_Delay: 0
SQL_Remaining_Delay: NULL

One problem i noticed is that SQL_Delay and SQL_Remaining_Delay can be both int and NULL.
This also applies to Seconds_Behind_Master which is PM_TYPE_U32 right now.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,310,2017-06-15T14:41:07Z,2017-06-16T01:38:35Z,2017-06-16T15:46:40Z,MERGED,True,6,0,1,https://github.com/rlex,Additional slave metrics for MySQL PMDA,1,[],https://github.com/performancecopilot/pcp/pull/310,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/310#issuecomment-308908401,"Corresponding lines from SHOW SLAVE STATUS:
SQL_Delay: 0
SQL_Remaining_Delay: NULL

One problem i noticed is that SQL_Delay and SQL_Remaining_Delay can be both int and NULL.
This also applies to Seconds_Behind_Master which is PM_TYPE_U32 right now.","@rlex I've tweaked the metric semantics to instant (these aren't discrete values) and the units to reflect the documentation (seconds).
I believe the behavior of seeing null in those two fields would be that PM_ERR_APPVERSION is returned for that metric when no value is available (can you confirm?).  We can tweak that behavior by testing for undef values for those metrics in mysql_fetch_callback() if you think it should be different?  (perhaps an error code like PM_ERR_AGAIN - ""Information not currently available"" might be more appropriate here?
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,310,2017-06-15T14:41:07Z,2017-06-16T01:38:35Z,2017-06-16T15:46:40Z,MERGED,True,6,0,1,https://github.com/rlex,Additional slave metrics for MySQL PMDA,1,[],https://github.com/performancecopilot/pcp/pull/310,https://github.com/rlex,3,https://github.com/performancecopilot/pcp/pull/310#issuecomment-309061210,"Corresponding lines from SHOW SLAVE STATUS:
SQL_Delay: 0
SQL_Remaining_Delay: NULL

One problem i noticed is that SQL_Delay and SQL_Remaining_Delay can be both int and NULL.
This also applies to Seconds_Behind_Master which is PM_TYPE_U32 right now.","I'm not sure. There is situations when seconds_behind_master = NULL is normal situation, IE if you stopped replication for some reason (upgrade, maintenance, whatever) or stopped one of replication threads. SQL_Remaining_Delay will be NULL if you don't use delayed replication (which is like 9 from 10 replication installations), so that's OK as well, so i don't think treating Null as error is good idea.
SQL_Remaining_Delay and SQL_Delay are available from 5.6 AFAIK: https://dev.mysql.com/doc/refman/5.6/en/replication-delayed.html",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,311,2017-06-15T19:22:16Z,2017-06-20T20:12:15Z,2017-06-20T20:12:15Z,CLOSED,False,973,6,5,https://github.com/kalperen,Adding time stamp formatting option to pcp pidstat with command line argument -f,11,[],https://github.com/performancecopilot/pcp/pull/311,https://github.com/kalperen,1,https://github.com/performancecopilot/pcp/pull/311,"The format is used with Python's datetime.strftime method which is mostly the same as that described in strftime(3). The functionality is implemented in pcp-pidstat.py.
The changes have been documented in the man page pcp-pidstat(1) .
A new QA test has been created with alongside its expected output (qa/064 and qa/064.out), and the test has been added to the pidstat group under qa/groups.","The format is used with Python's datetime.strftime method which is mostly the same as that described in strftime(3). The functionality is implemented in pcp-pidstat.py.
The changes have been documented in the man page pcp-pidstat(1) .
A new QA test has been created with alongside its expected output (qa/064 and qa/064.out), and the test has been added to the pidstat group under qa/groups.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,311,2017-06-15T19:22:16Z,2017-06-20T20:12:15Z,2017-06-20T20:12:15Z,CLOSED,False,973,6,5,https://github.com/kalperen,Adding time stamp formatting option to pcp pidstat with command line argument -f,11,[],https://github.com/performancecopilot/pcp/pull/311,https://github.com/kalperen,2,https://github.com/performancecopilot/pcp/pull/311#issuecomment-309609139,"The format is used with Python's datetime.strftime method which is mostly the same as that described in strftime(3). The functionality is implemented in pcp-pidstat.py.
The changes have been documented in the man page pcp-pidstat(1) .
A new QA test has been created with alongside its expected output (qa/064 and qa/064.out), and the test has been added to the pidstat group under qa/groups.","Hi Lukas, thanks a lot for the review! I completely understand how the repetitive if/else statements are bad coding practice and why it's much better to make the modifications directly in the head before calling the reporters. The problem is when I tried doing so earlier I ran into some trouble and was unable to get it working. Would you perhaps have any hints on how I can get that done?
I fixed the formatting issues, please let me know if there are other problems.
Thanks again!
Alperen",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,311,2017-06-15T19:22:16Z,2017-06-20T20:12:15Z,2017-06-20T20:12:15Z,CLOSED,False,973,6,5,https://github.com/kalperen,Adding time stamp formatting option to pcp pidstat with command line argument -f,11,[],https://github.com/performancecopilot/pcp/pull/311,https://github.com/kalperen,3,https://github.com/performancecopilot/pcp/pull/311#issuecomment-309806804,"The format is used with Python's datetime.strftime method which is mostly the same as that described in strftime(3). The functionality is implemented in pcp-pidstat.py.
The changes have been documented in the man page pcp-pidstat(1) .
A new QA test has been created with alongside its expected output (qa/064 and qa/064.out), and the test has been added to the pidstat group under qa/groups.","Hey Lukas I finished implementing -f by making the modifications in the head as you requested with the help of my mentors. Please let me know if there are any remaining issues.
Best,
Alperen",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,311,2017-06-15T19:22:16Z,2017-06-20T20:12:15Z,2017-06-20T20:12:15Z,CLOSED,False,973,6,5,https://github.com/kalperen,Adding time stamp formatting option to pcp pidstat with command line argument -f,11,[],https://github.com/performancecopilot/pcp/pull/311,https://github.com/lberk,4,https://github.com/performancecopilot/pcp/pull/311#issuecomment-309818714,"The format is used with Python's datetime.strftime method which is mostly the same as that described in strftime(3). The functionality is implemented in pcp-pidstat.py.
The changes have been documented in the man page pcp-pidstat(1) .
A new QA test has been created with alongside its expected output (qa/064 and qa/064.out), and the test has been added to the pidstat group under qa/groups.","Hey Alperen,
Thanks for sticking with it!  The diff against master looks better now.  I'll be merging this shortly in the afternoon.  Thanks again!
Lukas",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,311,2017-06-15T19:22:16Z,2017-06-20T20:12:15Z,2017-06-20T20:12:15Z,CLOSED,False,973,6,5,https://github.com/kalperen,Adding time stamp formatting option to pcp pidstat with command line argument -f,11,[],https://github.com/performancecopilot/pcp/pull/311,https://github.com/lberk,5,https://github.com/performancecopilot/pcp/pull/311#issuecomment-309877331,"The format is used with Python's datetime.strftime method which is mostly the same as that described in strftime(3). The functionality is implemented in pcp-pidstat.py.
The changes have been documented in the man page pcp-pidstat(1) .
A new QA test has been created with alongside its expected output (qa/064 and qa/064.out), and the test has been added to the pidstat group under qa/groups.","Merged into master, thanks again!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,316,2017-06-27T16:47:04Z,2017-06-29T20:32:00Z,2017-06-30T16:12:43Z,CLOSED,False,22,14,1,https://github.com/kalperen,fixing a heading and column alignment issue when -f arugment is used,1,[],https://github.com/performancecopilot/pcp/pull/316,https://github.com/kalperen,1,https://github.com/performancecopilot/pcp/pull/316,"When -f command line argument is used for pidstat, the width of the column of the timestamp now varies and adapts depending on the length of the timestamp provided.","When -f command line argument is used for pidstat, the width of the column of the timestamp now varies and adapts depending on the length of the timestamp provided.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,316,2017-06-27T16:47:04Z,2017-06-29T20:32:00Z,2017-06-30T16:12:43Z,CLOSED,False,22,14,1,https://github.com/kalperen,fixing a heading and column alignment issue when -f arugment is used,1,[],https://github.com/performancecopilot/pcp/pull/316,https://github.com/lberk,2,https://github.com/performancecopilot/pcp/pull/316#issuecomment-312095333,"When -f command line argument is used for pidstat, the width of the column of the timestamp now varies and adapts depending on the length of the timestamp provided.","I merged this and made the tweaks as well, if you wouldn't mind taking a look at them, I'd appreciate it",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,316,2017-06-27T16:47:04Z,2017-06-29T20:32:00Z,2017-06-30T16:12:43Z,CLOSED,False,22,14,1,https://github.com/kalperen,fixing a heading and column alignment issue when -f arugment is used,1,[],https://github.com/performancecopilot/pcp/pull/316,https://github.com/kalperen,3,https://github.com/performancecopilot/pcp/pull/316#issuecomment-312309630,"When -f command line argument is used for pidstat, the width of the column of the timestamp now varies and adapts depending on the length of the timestamp provided.","Hey Lukas,

Thanks a lot for the changes, it all looks good. I was planning on making
the timestamp variable into an array and store the indentations in it but
you beat me to it.

Thank you for the merge and the help, I appreciate it!

Best,
Alperen
…
On Thu, Jun 29, 2017 at 11:32 PM, Lukas Berk ***@***.***> wrote:
 I merged this and made the tweaks as well, if you wouldn't mind taking a
 look at them, I'd appreciate it

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#316 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AQGqnhFy0syA4VmRVzgTC8_eVNKZqSEwks5sJAnBgaJpZM4OG5rB>
 .",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,317,2017-06-27T17:02:23Z,2017-06-30T07:21:11Z,2017-06-30T07:21:11Z,MERGED,True,2128,6,19,https://github.com/myllynen,Add HAProxy PMDA,1,[],https://github.com/performancecopilot/pcp/pull/317,https://github.com/myllynen,1,https://github.com/performancecopilot/pcp/pull/317,"PMDA for HAProxy using the HAProxy stats socket.
Supports all metrics provided by the ""show info"" / ""show stat"" commands for HAProxy 1.7.
For reference, see
https://www.haproxy.org/
https://www.haproxy.org/download/1.7/doc/configuration.txt
https://www.haproxy.org/download/1.7/doc/management.txt","PMDA for HAProxy using the HAProxy stats socket.
Supports all metrics provided by the ""show info"" / ""show stat"" commands for HAProxy 1.7.
For reference, see
https://www.haproxy.org/
https://www.haproxy.org/download/1.7/doc/configuration.txt
https://www.haproxy.org/download/1.7/doc/management.txt",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,318,2017-07-02T15:01:42Z,2017-07-13T07:51:23Z,2017-07-31T09:07:29Z,MERGED,True,0,0,0,https://github.com/jronak,Python: Add initial labels support for python and pmdaprometheus,0,[],https://github.com/performancecopilot/pcp/pull/318,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/318,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,320,2017-07-06T20:15:59Z,2017-07-17T12:36:43Z,2017-07-31T09:07:28Z,CLOSED,False,132,8,2,https://github.com/jronak,pmdaprometheus: Add auto_config generation support,3,[],https://github.com/performancecopilot/pcp/pull/320,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/320,"Fixes #308
autoconfig_watch.python watches instances endpoint at a regular interval and triggers config generation when the instance is live.","Fixes #308
autoconfig_watch.python watches instances endpoint at a regular interval and triggers config generation when the instance is live.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,322,2017-07-16T23:07:40Z,2017-07-17T12:36:16Z,2017-07-17T14:59:55Z,CLOSED,False,86,13,3,https://github.com/jronak,pmdaprometheus: Parallel http endpoint fetches,2,[],https://github.com/performancecopilot/pcp/pull/322,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/322,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,323,2017-07-23T21:50:31Z,2017-07-25T04:25:56Z,2017-09-14T20:18:12Z,MERGED,True,489,86,10,https://github.com/jronak,Prometheus: add auto metadata refresh and indom cache fixes,14,[],https://github.com/performancecopilot/pcp/pull/323,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/323,"For parallel http fetches, multiple threads are used when the context is with the python interpreter, which I believe fixes #313. Sub-process watches for any changes in the endpoint metrics metadata and uses diffing strategy to add/remove only changed metrics, which fixes #308.
Thanks!","For parallel http fetches, multiple threads are used when the context is with the python interpreter, which I believe fixes #313. Sub-process watches for any changes in the endpoint metrics metadata and uses diffing strategy to add/remove only changed metrics, which fixes #308.
Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,326,2017-08-02T12:14:56Z,2017-08-10T00:43:47Z,2017-08-10T00:43:47Z,CLOSED,False,227,4,10,https://github.com/jumitche,Add nfsd worker thread status values to Linux PMDA,1,[],https://github.com/performancecopilot/pcp/pull/326,https://github.com/jumitche,1,https://github.com/performancecopilot/pcp/pull/326,The values from /proc/fs/nfsd/pool_stats allow the monitoring of the nfs server workload and can show if insufficient threads have been configured,The values from /proc/fs/nfsd/pool_stats allow the monitoring of the nfs server workload and can show if insufficient threads have been configured,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,326,2017-08-02T12:14:56Z,2017-08-10T00:43:47Z,2017-08-10T00:43:47Z,CLOSED,False,227,4,10,https://github.com/jumitche,Add nfsd worker thread status values to Linux PMDA,1,[],https://github.com/performancecopilot/pcp/pull/326,https://github.com/lberk,2,https://github.com/performancecopilot/pcp/pull/326#issuecomment-320045262,The values from /proc/fs/nfsd/pool_stats allow the monitoring of the nfs server workload and can show if insufficient threads have been configured,Thanks for adding the QA!  Do you mind adding it to the pmda.linux group (in the qa/group file).  128 is now failing for me on platforms without nfs metrics.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,326,2017-08-02T12:14:56Z,2017-08-10T00:43:47Z,2017-08-10T00:43:47Z,CLOSED,False,227,4,10,https://github.com/jumitche,Add nfsd worker thread status values to Linux PMDA,1,[],https://github.com/performancecopilot/pcp/pull/326,https://github.com/jumitche,3,https://github.com/performancecopilot/pcp/pull/326#issuecomment-320630674,The values from /proc/fs/nfsd/pool_stats allow the monitoring of the nfs server workload and can show if insufficient threads have been configured,"I would appreciate some feedback if i got the right qa number to add my tests to?  128 initially looked the most likely, but the more i look at it the more it seems that the rest of the test does not work under current linux distros anyway, with get_nfsstat outputting nothing. should i move my tests elsewhere ?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,326,2017-08-02T12:14:56Z,2017-08-10T00:43:47Z,2017-08-10T00:43:47Z,CLOSED,False,227,4,10,https://github.com/jumitche,Add nfsd worker thread status values to Linux PMDA,1,[],https://github.com/performancecopilot/pcp/pull/326,https://github.com/lberk,4,https://github.com/performancecopilot/pcp/pull/326#issuecomment-321127123,The values from /proc/fs/nfsd/pool_stats allow the monitoring of the nfs server workload and can show if insufficient threads have been configured,"Hey @jumitche,
LGTM outside of qa.
qa/128 isn't quite right.  Looks like it's an irix specific testcase (check out qa/group for the general listings).
It's probably easiest to write a new test (check out the ./new script to make this a bit easier) and add it to the pmda.linux group.  We can tailor this test to specifically target the nfs.server bits.
First, I might tar the two /proc files of interest (with interesting values), we can use this tarball to check nfs.server metrics function properly even on a box that don't have nfs exports enabled.  qa/732 is a good example here, note that LINUX_STATSPATH is set and exported to point pmdalinux at the testcase /proc.
Please feel free to let me know if you have any questions",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,326,2017-08-02T12:14:56Z,2017-08-10T00:43:47Z,2017-08-10T00:43:47Z,CLOSED,False,227,4,10,https://github.com/jumitche,Add nfsd worker thread status values to Linux PMDA,1,[],https://github.com/performancecopilot/pcp/pull/326,https://github.com/jumitche,5,https://github.com/performancecopilot/pcp/pull/326#issuecomment-321257414,The values from /proc/fs/nfsd/pool_stats allow the monitoring of the nfs server workload and can show if insufficient threads have been configured,"@lberk thanks for the guidance on the qa tests. It turned out that my patch caused qa/732 to break as that already covers the nfs.server tree, so i have added my additional values to that test instead and squashed the commits down to one. Hope that works better.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,326,2017-08-02T12:14:56Z,2017-08-10T00:43:47Z,2017-08-10T00:43:47Z,CLOSED,False,227,4,10,https://github.com/jumitche,Add nfsd worker thread status values to Linux PMDA,1,[],https://github.com/performancecopilot/pcp/pull/326,https://github.com/lberk,6,https://github.com/performancecopilot/pcp/pull/326#issuecomment-321419234,The values from /proc/fs/nfsd/pool_stats allow the monitoring of the nfs server workload and can show if insufficient threads have been configured,"Merged upstream, thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,327,2017-08-06T12:19:09Z,2017-08-09T01:19:16Z,2017-08-09T06:19:42Z,MERGED,True,312,14,5,https://github.com/jronak,"Add prometheus exporter, QA and fixes",15,[],https://github.com/performancecopilot/pcp/pull/327,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/327,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,328,2017-08-07T04:39:56Z,2017-08-07T05:25:28Z,2017-08-07T05:43:55Z,MERGED,True,87,32,5,https://github.com/ryandoyle,pidstat: fix failing unit tests,1,[],https://github.com/performancecopilot/pcp/pull/328,https://github.com/ryandoyle,1,https://github.com/performancecopilot/pcp/pull/328,"As per #blockprocs channel, fix for the unit tests. Don't worry about merging the PR through the github workflow (assuming thats still the case), just grab the branch from our fork.","As per #blockprocs channel, fix for the unit tests. Don't worry about merging the PR through the github workflow (assuming thats still the case), just grab the branch from our fork.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,330,2017-08-08T03:01:59Z,2017-08-08T07:17:23Z,2017-08-08T10:32:19Z,MERGED,True,947,294,32,https://github.com/jronak,Resolved conflicts ,20,[],https://github.com/performancecopilot/pcp/pull/330,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/330,Resolved pmdaprometheus conflicts on merge with master.,Resolved pmdaprometheus conflicts on merge with master.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,331,2017-08-08T17:49:06Z,2017-08-09T01:19:17Z,2017-08-09T01:19:17Z,MERGED,True,63,6,3,https://github.com/jpwhite4,Fix use after free in perf_setup_dynamic_events().,1,[],https://github.com/performancecopilot/pcp/pull/331,https://github.com/jpwhite4,1,https://github.com/performancecopilot/pcp/pull/331,"There is a use after free bug in the perf_setup_dynamic_events(). Steps
to reproduce:

Run the perfevent PMDA using the default configuration file on a host
that does not have a /sys/bus/event_source/devices/*/cpumask file.
Observe that it almost always segfaults.

I've added an extra test for this scenario into the unit test harness. Ran with valgrind to confirm that no new memory leaks are created by this change. (I note that there are a few existing 'leaks' in the test harness. I assume most are due to the lack of cleanup code in the test harness itself.)
Problem was caused because the cleanup code always calls free() on the pointer to the array containing the cpu indices. This is fine if the memory was allocated in the setup_cpu_config() function. However, when there is no cpumask file in sysfs, this pointer points to an array that has its memory managed elsewhere in the code.","There is a use after free bug in the perf_setup_dynamic_events(). Steps
to reproduce:

Run the perfevent PMDA using the default configuration file on a host
that does not have a /sys/bus/event_source/devices/*/cpumask file.
Observe that it almost always segfaults.

I've added an extra test for this scenario into the unit test harness. Ran with valgrind to confirm that no new memory leaks are created by this change. (I note that there are a few existing 'leaks' in the test harness. I assume most are due to the lack of cleanup code in the test harness itself.)
Problem was caused because the cleanup code always calls free() on the pointer to the array containing the cpu indices. This is fine if the memory was allocated in the setup_cpu_config() function. However, when there is no cpumask file in sysfs, this pointer points to an array that has its memory managed elsewhere in the code.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,332,2017-08-08T19:17:10Z,2017-08-09T01:19:17Z,2017-08-09T01:19:17Z,MERGED,True,2,1,1,https://github.com/jpwhite4,Uninitialised variable & resource leak.,1,[],https://github.com/performancecopilot/pcp/pull/332,https://github.com/jpwhite4,1,https://github.com/performancecopilot/pcp/pull/332,"I noticed these two errors while inspecting the code to track down the
cause of the problem in #331.
The real question is why valgrind didn't find the uninitialised *line. I (temporarily) changed the compiler flags to -O2 for the test harness and low-and-behold valgrind noticed the uninitialized variable in the original code:
==28987== Conditional jump or move depends on uninitialised value(s)
==28987==    at 0x51ABF32: getdelim (iogetdelim.c:63)
==28987==    by 0x40AFF6: getline (stdio.h:117)
==28987==    by 0x40AFF6: setup_cpu_config (parse_events.c:743)
==28987==    by 0x4087ED: perf_setup_dynamic_events (perfinterface.c:714)
==28987==    by 0x40A030: perf_event_create (perfinterface.c:1236)
==28987==    by 0x40445B: test_dynamic_events_config (perf_event_test.c:822)
==28987==    by 0x40481C: runtest (perf_event_test.c:955)
==28987==    by 0x4015D9: main (perf_event_test.c:971)","I noticed these two errors while inspecting the code to track down the
cause of the problem in #331.
The real question is why valgrind didn't find the uninitialised *line. I (temporarily) changed the compiler flags to -O2 for the test harness and low-and-behold valgrind noticed the uninitialized variable in the original code:
==28987== Conditional jump or move depends on uninitialised value(s)
==28987==    at 0x51ABF32: getdelim (iogetdelim.c:63)
==28987==    by 0x40AFF6: getline (stdio.h:117)
==28987==    by 0x40AFF6: setup_cpu_config (parse_events.c:743)
==28987==    by 0x4087ED: perf_setup_dynamic_events (perfinterface.c:714)
==28987==    by 0x40A030: perf_event_create (perfinterface.c:1236)
==28987==    by 0x40445B: test_dynamic_events_config (perf_event_test.c:822)
==28987==    by 0x40481C: runtest (perf_event_test.c:955)
==28987==    by 0x4015D9: main (perf_event_test.c:971)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,335,2017-08-15T05:35:49Z,2017-08-15T07:12:44Z,2017-09-18T08:20:28Z,MERGED,True,101,0,2,https://github.com/jronak,QA: Update pmwebd tests for prometheus metrics export,1,[],https://github.com/performancecopilot/pcp/pull/335,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/335,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,336,2017-08-15T07:26:45Z,2017-08-16T01:05:24Z,2017-08-16T01:34:18Z,CLOSED,False,146,27,4,https://github.com/jronak,Labels support for pmwebd and pmdaprometheus,2,[],https://github.com/performancecopilot/pcp/pull/336,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/336,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,336,2017-08-15T07:26:45Z,2017-08-16T01:05:24Z,2017-08-16T01:34:18Z,CLOSED,False,146,27,4,https://github.com/jronak,Labels support for pmwebd and pmdaprometheus,2,[],https://github.com/performancecopilot/pcp/pull/336,https://github.com/fche,2,https://github.com/performancecopilot/pcp/pull/336#issuecomment-322595619,,Curious about what y'all have planned with respect to labels support in the pwmebd prometheus-exporter code.  There was a marker in the code where the current labels could be fetched & relayed.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,336,2017-08-15T07:26:45Z,2017-08-16T01:05:24Z,2017-08-16T01:34:18Z,CLOSED,False,146,27,4,https://github.com/jronak,Labels support for pmwebd and pmdaprometheus,2,[],https://github.com/performancecopilot/pcp/pull/336,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/336#issuecomment-322631774,,"@jronak I've merged the PMDA changes into the labels branch, they all look good - thanks!
I think the cleanest web API extension will involve adding a new _labels API rather than adding to just _metric and _indom.  Those are only parts of the label hierarchy, so don't really make sense exported on their own like that.  The API response change for _metric and _indom might cause headaches for some users too I imagine.
Similarly the Prometheus side of things will need more work than we have currently - the code only pmGet*'s labels for leaf nodes of the hierarchy, which doesn't represent the situation correctly (more details in the pmLookupLabels(3) and pmMergeLabelSets(3) man pages).
In general though, I think we have the cart before the horse here.  There's alot of missing foundation code we still need (archive support, optional context labels, fetch protocol extension, query support) that we need to have in place before we can decide how  best to tackle the higher level things like pmwebd.
So for now let's set the web API aspects aside and continue on with that core functionality first, then circle back to the web APIs later.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,336,2017-08-15T07:26:45Z,2017-08-16T01:05:24Z,2017-08-16T01:34:18Z,CLOSED,False,146,27,4,https://github.com/jronak,Labels support for pmwebd and pmdaprometheus,2,[],https://github.com/performancecopilot/pcp/pull/336,https://github.com/fche,4,https://github.com/performancecopilot/pcp/pull/336#issuecomment-322637238,,"Of all those foundational missing pieces, which ones impact pmwebd's ability to fetch labels for a given metric/instance?  Archives and queries don't relate.  What do you have in mind with respect to fetches?  Any new PMAPI?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,337,2017-08-25T12:02:32Z,2017-08-28T22:28:06Z,2017-08-28T22:28:06Z,MERGED,True,67,2,3,https://github.com/hkshaw1990,pmda_perfevent: Fix non-showup of dynamic events,2,[],https://github.com/performancecopilot/pcp/pull/337,https://github.com/hkshaw1990,1,https://github.com/performancecopilot/pcp/pull/337,"When the entire perfevent.conf file is empty and only the
[dynamic] section is present, configparser.l doesn't parse
this section because of the given check for pmc settings.
This patch moves the parsing before the check.","When the entire perfevent.conf file is empty and only the
[dynamic] section is present, configparser.l doesn't parse
this section because of the given check for pmc settings.
This patch moves the parsing before the check.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,338,2017-08-30T14:56:09Z,2017-09-20T06:05:22Z,2017-09-20T06:05:22Z,MERGED,True,3249,904,20,https://github.com/myllynen,"pmrep modularization, add pcp2{es,json,xml,xlsx,zabbix}",8,[],https://github.com/performancecopilot/pcp/pull/338,https://github.com/myllynen,1,https://github.com/performancecopilot/pcp/pull/338,"A new tightly coupled PMConfig class for Python utilities is introduced (perhaps think of C++ friend classes) which will take care of reading the configuration file, populating the metrics data for the utility, reading command line (remember that this required quite some effort earlier to get it right for all cases), registering derived metrics, and validating the metrics in the PMNS. Utilities will use the ""standard"" pmrep config file format and remain mostly compatible with pmrep and each other (utility specific options are of course not recognized by other tools, e.g., zabbix_port makes only sense with pcp2zabbix).
Another module with methods that can be called directly is added to set timezone, step mode, and PMAPI context connection. There seems to be little in this area which would be different for most Python utilities.
Zabbix output support is dropped from pmrep (it was marked as experimental in the man page so should be fine) and a set of new utilities are being added to demonstrate how straightforward it becomes to add new bridge/connector utilities feeding PCP metrics data to external systems:

pcp2es
pcp2json
pcp2xml
pcp2xlsx
pcp2zabbix","A new tightly coupled PMConfig class for Python utilities is introduced (perhaps think of C++ friend classes) which will take care of reading the configuration file, populating the metrics data for the utility, reading command line (remember that this required quite some effort earlier to get it right for all cases), registering derived metrics, and validating the metrics in the PMNS. Utilities will use the ""standard"" pmrep config file format and remain mostly compatible with pmrep and each other (utility specific options are of course not recognized by other tools, e.g., zabbix_port makes only sense with pcp2zabbix).
Another module with methods that can be called directly is added to set timezone, step mode, and PMAPI context connection. There seems to be little in this area which would be different for most Python utilities.
Zabbix output support is dropped from pmrep (it was marked as experimental in the man page so should be fine) and a set of new utilities are being added to demonstrate how straightforward it becomes to add new bridge/connector utilities feeding PCP metrics data to external systems:

pcp2es
pcp2json
pcp2xml
pcp2xlsx
pcp2zabbix",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,338,2017-08-30T14:56:09Z,2017-09-20T06:05:22Z,2017-09-20T06:05:22Z,MERGED,True,3249,904,20,https://github.com/myllynen,"pmrep modularization, add pcp2{es,json,xml,xlsx,zabbix}",8,[],https://github.com/performancecopilot/pcp/pull/338,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/338#issuecomment-326458712,"A new tightly coupled PMConfig class for Python utilities is introduced (perhaps think of C++ friend classes) which will take care of reading the configuration file, populating the metrics data for the utility, reading command line (remember that this required quite some effort earlier to get it right for all cases), registering derived metrics, and validating the metrics in the PMNS. Utilities will use the ""standard"" pmrep config file format and remain mostly compatible with pmrep and each other (utility specific options are of course not recognized by other tools, e.g., zabbix_port makes only sense with pcp2zabbix).
Another module with methods that can be called directly is added to set timezone, step mode, and PMAPI context connection. There seems to be little in this area which would be different for most Python utilities.
Zabbix output support is dropped from pmrep (it was marked as experimental in the man page so should be fine) and a set of new utilities are being added to demonstrate how straightforward it becomes to add new bridge/connector utilities feeding PCP metrics data to external systems:

pcp2es
pcp2json
pcp2xml
pcp2xlsx
pcp2zabbix","Looks good Marko.  A few notes I made as I read through the changes ...


pmconfig.PMConfig
The naming convention here looks a bit odd compared to e.g. ""pmapi.pmContext""
Could we make that pmconfig.pmConfig instead?  Or maybe pmConfigFile so as not to be confused with pmGetConfig(3)?  Also, perhaps this should be another ""convenience class"" in pmcc.py instead of a separate module on its own?


pcp2es
""es"" is not very descriptive - let's use either pcp2elastic (as in elastic.co) or pcp2elasticsearch (as in pmdaelasticsearch(1) already in PCP). - I slightly prefer the latter I guess, but either or.


pmcommon
There doesn't seem to be enough code here to justify a separate module?  Perhaps shift this directly into pmapi.py, or pmcc.py.  If the former - could use either @staticmethods on pmContext (there's a number of those already toward the end of the class), or as a separate class (or static helpers) in that file.


In the case of do_connect() I think that could make sense residing somewhere close to pmapi.pmContext.fromOptions() since there's so much similarity between the two.
On a somewhat related note, as we discussed earlier I've annotated pmsubsys as deprecated now, and will remove it from the pcp-4 branch shortly.
Other than the above little things, this all looks like its headed in the right direction to me.  Needs some docs, maybe more tests?, and I think we'll need to tweak the spec files to create some new packages with the correct import module dependencies.
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,338,2017-08-30T14:56:09Z,2017-09-20T06:05:22Z,2017-09-20T06:05:22Z,MERGED,True,3249,904,20,https://github.com/myllynen,"pmrep modularization, add pcp2{es,json,xml,xlsx,zabbix}",8,[],https://github.com/performancecopilot/pcp/pull/338,https://github.com/myllynen,3,https://github.com/performancecopilot/pcp/pull/338#issuecomment-329749393,"A new tightly coupled PMConfig class for Python utilities is introduced (perhaps think of C++ friend classes) which will take care of reading the configuration file, populating the metrics data for the utility, reading command line (remember that this required quite some effort earlier to get it right for all cases), registering derived metrics, and validating the metrics in the PMNS. Utilities will use the ""standard"" pmrep config file format and remain mostly compatible with pmrep and each other (utility specific options are of course not recognized by other tools, e.g., zabbix_port makes only sense with pcp2zabbix).
Another module with methods that can be called directly is added to set timezone, step mode, and PMAPI context connection. There seems to be little in this area which would be different for most Python utilities.
Zabbix output support is dropped from pmrep (it was marked as experimental in the man page so should be fine) and a set of new utilities are being added to demonstrate how straightforward it becomes to add new bridge/connector utilities feeding PCP metrics data to external systems:

pcp2es
pcp2json
pcp2xml
pcp2xlsx
pcp2zabbix","Thanks for the feedback and sorry for the delay, I've been busy and side-tracked with some other issues.


Yes, braino/typo, let's use pmConfig, since we're also validating metrics and such. I'd like to avoid mixing this with pmcc.py as it has its own metrics from the early days instead of pmfg.


Ok, let's use pcp2elasticsearch to make it unambiguous.


Ok, will add to pmapi.py. I'll rename do_connection() to set_connect_opts() as that what it actually does and place it in an appropriate location in pmapi.py.


Once these are ok we certainly need man pages for each new command. Best way to write a new utility with this approach is probably to copy an existing command, diff few existing ones (like diff -u pcp2elasticsearch pcp2xml) to see what's the difference there and adjust the new tool as needed. Not sure where this would be best to document. Perhaps we can add a short note about these new tools to the Quick Guide and mention this in a passing.
QA is also needed but probably more emphasis on valid output compared to e.g. current pcp2influxdb handling of invalid metric names as pmrep covers that well already.
I'll try to push an updated pull request next week.
Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,338,2017-08-30T14:56:09Z,2017-09-20T06:05:22Z,2017-09-20T06:05:22Z,MERGED,True,3249,904,20,https://github.com/myllynen,"pmrep modularization, add pcp2{es,json,xml,xlsx,zabbix}",8,[],https://github.com/performancecopilot/pcp/pull/338,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/338#issuecomment-330121831,"A new tightly coupled PMConfig class for Python utilities is introduced (perhaps think of C++ friend classes) which will take care of reading the configuration file, populating the metrics data for the utility, reading command line (remember that this required quite some effort earlier to get it right for all cases), registering derived metrics, and validating the metrics in the PMNS. Utilities will use the ""standard"" pmrep config file format and remain mostly compatible with pmrep and each other (utility specific options are of course not recognized by other tools, e.g., zabbix_port makes only sense with pcp2zabbix).
Another module with methods that can be called directly is added to set timezone, step mode, and PMAPI context connection. There seems to be little in this area which would be different for most Python utilities.
Zabbix output support is dropped from pmrep (it was marked as experimental in the man page so should be fine) and a set of new utilities are being added to demonstrate how straightforward it becomes to add new bridge/connector utilities feeding PCP metrics data to external systems:

pcp2es
pcp2json
pcp2xml
pcp2xlsx
pcp2zabbix","Thanks for the feedback and sorry for the delay,

No problem at all.

[...] Once these are ok [...]

(that all sounded good to me.)

I'll try to push an updated pull request next week.

Awesome, looking forward to it - thanks Marko.
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,345,2017-09-18T08:42:56Z,2017-09-19T03:03:25Z,2017-09-19T03:03:25Z,MERGED,True,65,62,2,https://github.com/jronak,pmdaprometheus: Metadata generator handles empty lines and comments,1,[],https://github.com/performancecopilot/pcp/pull/345,https://github.com/jronak,1,https://github.com/performancecopilot/pcp/pull/345,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,348,2017-09-20T14:46:30Z,2017-09-22T04:46:11Z,2017-09-22T04:46:11Z,CLOSED,False,1,1,1,https://github.com/JohnPeacockMessageSystems,All environment variables must be PCP_,1,[],https://github.com/performancecopilot/pcp/pull/348,https://github.com/JohnPeacockMessageSystems,1,https://github.com/performancecopilot/pcp/pull/348,"In order to override the default UNBOUND_STATS command, it must be set as an environment variable but pcp.env clearly states that any variable set in pcp.conf will be ignored if not prefixed by PCP_.","In order to override the default UNBOUND_STATS command, it must be set as an environment variable but pcp.env clearly states that any variable set in pcp.conf will be ignored if not prefixed by PCP_.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,348,2017-09-20T14:46:30Z,2017-09-22T04:46:11Z,2017-09-22T04:46:11Z,CLOSED,False,1,1,1,https://github.com/JohnPeacockMessageSystems,All environment variables must be PCP_,1,[],https://github.com/performancecopilot/pcp/pull/348,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/348#issuecomment-331348917,"In order to override the default UNBOUND_STATS command, it must be set as an environment variable but pcp.env clearly states that any variable set in pcp.conf will be ignored if not prefixed by PCP_.","This environment variable is intended solely for regression testing purposed (see qa/754 which would become broken by that patch).  What's the underlying issue here - is /usr/sbin/unbound-control not the correct path on your system?
Usually if we need agent-specific configuration, a PMDA config file would be used, and the PMDA code modified to read it at startup - that's possibly what we need here?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,351,2017-09-27T12:45:34Z,2017-10-12T23:40:34Z,2017-10-12T23:40:34Z,MERGED,True,1159,436,12,https://github.com/4ge32,pmdadm: add histogram function,32,[],https://github.com/performancecopilot/pcp/pull/351,https://github.com/4ge32,1,https://github.com/performancecopilot/pcp/pull/351,"This is an additional function that can use dmstats latency and IO distribution histogram for pmdadm.
It also includes adding help text, man pages description.","This is an additional function that can use dmstats latency and IO distribution histogram for pmdadm.
It also includes adding help text, man pages description.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,358,2017-10-27T23:28:22Z,2018-04-13T00:58:55Z,2018-04-13T00:58:55Z,CLOSED,False,435,0,6,https://github.com/hc000,initial commit of contrail pmda,1,[],https://github.com/performancecopilot/pcp/pull/358,https://github.com/hc000,1,https://github.com/performancecopilot/pcp/pull/358,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,358,2017-10-27T23:28:22Z,2018-04-13T00:58:55Z,2018-04-13T00:58:55Z,CLOSED,False,435,0,6,https://github.com/hc000,initial commit of contrail pmda,1,[],https://github.com/performancecopilot/pcp/pull/358,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/358#issuecomment-380988480,,"Archiving this PR for now, as there's been no response for some time - please re-open when more info is available, thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,359,2017-10-30T09:56:26Z,2017-10-31T02:59:36Z,2017-10-31T02:59:36Z,MERGED,True,111,17,3,https://github.com/myllynen,pmconfig.py: handle option priorities correctly,1,[],https://github.com/performancecopilot/pcp/pull/359,https://github.com/myllynen,1,https://github.com/performancecopilot/pcp/pull/359,"Make sure command line options always override config file values.
Fixes #357.","Make sure command line options always override config file values.
Fixes #357.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,367,2017-11-14T22:10:26Z,2018-02-13T23:15:21Z,2018-02-13T23:15:22Z,CLOSED,False,1,1,1,https://github.com/slashdd,[debian] Missing Build-Depends for libqt5svg5-dev,1,[],https://github.com/performancecopilot/pcp/pull/367,https://github.com/slashdd,1,https://github.com/performancecopilot/pcp/pull/367,Fix for issue #366 in debian/control.master,Fix for issue #366 in debian/control.master,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,367,2017-11-14T22:10:26Z,2018-02-13T23:15:21Z,2018-02-13T23:15:22Z,CLOSED,False,1,1,1,https://github.com/slashdd,[debian] Missing Build-Depends for libqt5svg5-dev,1,[],https://github.com/performancecopilot/pcp/pull/367,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/367#issuecomment-365438435,Fix for issue #366 in debian/control.master,@slashdd this has been superseded by other changes which resolve the underlying issue (via the debian/fixcontrol.master script).  Will be included with the pcp-4.0.0 release later this week.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,400,2017-12-19T19:42:37Z,2017-12-20T21:57:11Z,2017-12-20T21:57:11Z,CLOSED,False,2722,2663,6,https://github.com/fche,"pcpqa pmwebd: use json_pp for canonicalizing (661,1225), forget blinkenlights (661,663)",1,[],https://github.com/performancecopilot/pcp/pull/400,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/400,"Use json_pp (a perl module) to canonicalize json documents coming from
pmwebd, so the output is reproducibly sorted and still proper &
readable JSON.  While in the vicinity, drop references to the
blinkenlights demo, since it is not necessary to demonstrate 302
redirection etc.","Use json_pp (a perl module) to canonicalize json documents coming from
pmwebd, so the output is reproducibly sorted and still proper &
readable JSON.  While in the vicinity, drop references to the
blinkenlights demo, since it is not necessary to demonstrate 302
redirection etc.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,400,2017-12-19T19:42:37Z,2017-12-20T21:57:11Z,2017-12-20T21:57:11Z,CLOSED,False,2722,2663,6,https://github.com/fche,"pcpqa pmwebd: use json_pp for canonicalizing (661,1225), forget blinkenlights (661,663)",1,[],https://github.com/performancecopilot/pcp/pull/400,https://github.com/fche,2,https://github.com/performancecopilot/pcp/pull/400#issuecomment-353154844,"Use json_pp (a perl module) to canonicalize json documents coming from
pmwebd, so the output is reproducibly sorted and still proper &
readable JSON.  While in the vicinity, drop references to the
blinkenlights demo, since it is not necessary to demonstrate 302
redirection etc.","check_vm ... other perl JSON modules ... can they not provide reproducible output instead?

Maybe.  AFAIK they don't have an executable wrapper as a standard component.

is to add a pmjson helper utility

As a philosophical point, I would disfavour bundling even more platform library reimplementation code into PCP.  YMMV.

Also, this commit seems to have multiple unrelated changes - these would be better as separate commits.

Yes, two.  OK.

I see no other automated regression checks for blinkenlights too, so am loathe to remove what little we have there.

I have argued in the past that blinkenlights should itself be removed.  The current qa code doesn't constitute any sort of operational or even installation test.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,400,2017-12-19T19:42:37Z,2017-12-20T21:57:11Z,2017-12-20T21:57:11Z,CLOSED,False,2722,2663,6,https://github.com/fche,"pcpqa pmwebd: use json_pp for canonicalizing (661,1225), forget blinkenlights (661,663)",1,[],https://github.com/performancecopilot/pcp/pull/400,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/400#issuecomment-353163453,"Use json_pp (a perl module) to canonicalize json documents coming from
pmwebd, so the output is reproducibly sorted and still proper &
readable JSON.  While in the vicinity, drop references to the
blinkenlights demo, since it is not necessary to demonstrate 302
redirection etc.","| As a philosophical point, I would disfavour bundling even more platform library reimplementation code into PCP.
That's fine as your personal opinion, but its not consistent with PCP philosophy and its certainly not something we're about to change.  We provide the most cross-platform functionality we can, hence we have what naively might seem to be reimplementation of some small utilities.
More importantly, and which you've not responded to - we try to minimise the pain on those folk doing QA and maximise the number of platforms that tests run on.  While this is something that may not impact on you personally, it does impact on the PCP maintainers greatly.
Anyway, in the short term, instead of introducing yet another new dependency (not added to qa/admin/check-vm FWLIW) let's find a way to do this using at worst the existing dependencies and at best none at all (via pmjson) so such tests run on all platforms.
| I have argued in the past that blinkenlights should itself be removed.
Sorry - missed that.  Where did you argue that?  Who did you argue that with? (mailing list ref?)
[ That part should definitely be in a separate PR then, and this aspect of the discussion should move there - thanks! ]",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,400,2017-12-19T19:42:37Z,2017-12-20T21:57:11Z,2017-12-20T21:57:11Z,CLOSED,False,2722,2663,6,https://github.com/fche,"pcpqa pmwebd: use json_pp for canonicalizing (661,1225), forget blinkenlights (661,663)",1,[],https://github.com/performancecopilot/pcp/pull/400,https://github.com/fche,4,https://github.com/performancecopilot/pcp/pull/400#issuecomment-353190953,"Use json_pp (a perl module) to canonicalize json documents coming from
pmwebd, so the output is reproducibly sorted and still proper &
readable JSON.  While in the vicinity, drop references to the
blinkenlights demo, since it is not necessary to demonstrate 302
redirection etc.","which you've not responded to

The ""Any interest in writing pmjson?"" one?  No.

maximise the number of platforms that tests run on

The JSON::PP package is easily available via CPAN if nothing else.  Shall I add it to admin/check_vm to proceed?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,400,2017-12-19T19:42:37Z,2017-12-20T21:57:11Z,2017-12-20T21:57:11Z,CLOSED,False,2722,2663,6,https://github.com/fche,"pcpqa pmwebd: use json_pp for canonicalizing (661,1225), forget blinkenlights (661,663)",1,[],https://github.com/performancecopilot/pcp/pull/400,https://github.com/natoscott,5,https://github.com/performancecopilot/pcp/pull/400#issuecomment-353194118,"Use json_pp (a perl module) to canonicalize json documents coming from
pmwebd, so the output is reproducibly sorted and still proper &
readable JSON.  While in the vicinity, drop references to the
blinkenlights demo, since it is not necessary to demonstrate 302
redirection etc.","| The ""Any interest in writing pmjson?"" one?
Not that, rather the ""please don't add new packages unnecessarily"" point.  Don't worry about it.
| Shall I add it to admin/check_vm to proceed?
Not necessary, thanks though.  Please open a new PR/issue for any blinkenlights discussions you'd like to have, and with details of any earlier (private?) discussions.  One of the PCP maintainers will resolve the JSON output aspects in a more PCP-appropriate fashion shortly.
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,401,2017-12-20T05:30:59Z,2017-12-20T05:47:10Z,2017-12-22T13:42:56Z,MERGED,True,1,1,1,https://github.com/fche,pcp2zabbix: fix python typo for formatting zabbix server error,1,[],https://github.com/performancecopilot/pcp/pull/401,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/401,"stderr.write takes (""foo %s"" % bar)  rather than (""foo %s"", bar).","stderr.write takes (""foo %s"" % bar)  rather than (""foo %s"", bar).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,404,2017-12-21T16:10:44Z,2017-12-21T20:55:05Z,2017-12-22T13:42:38Z,MERGED,True,5,6,2,https://github.com/fche,qa/1344 _filter: canonicalize sh exec error,1,[],https://github.com/performancecopilot/pcp/pull/404,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/404,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,405,2017-12-21T17:22:52Z,2017-12-22T07:37:30Z,2018-01-08T21:22:11Z,MERGED,True,4,1,2,https://github.com/fche,pmmgr: tolerate pmcds with empty hostname,1,[],https://github.com/performancecopilot/pcp/pull/405,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/405,"An assertion failure was formerly triggered, possibly by pmcds
advertising a blank hostname.  This code now assigns them a
hostid of ""-"".","An assertion failure was formerly triggered, possibly by pmcds
advertising a blank hostname.  This code now assigns them a
hostid of ""-"".",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,405,2017-12-21T17:22:52Z,2017-12-22T07:37:30Z,2018-01-08T21:22:11Z,MERGED,True,4,1,2,https://github.com/fche,pmmgr: tolerate pmcds with empty hostname,1,[],https://github.com/performancecopilot/pcp/pull/405,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/405#issuecomment-353473978,"An assertion failure was formerly triggered, possibly by pmcds
advertising a blank hostname.  This code now assigns them a
hostid of ""-"".","Frank, wouldn't a pmcd advertising a blank hostname be a configuration issue (pmcd side)? That pmcd would have to be running with:  -H """"  which is an invalid hostname. The default is from pmhostname(1), which would be a system configuration issue if it was blank.
Also, what are the consequences of the assertion failure? Can that be better handled as an error?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,405,2017-12-21T17:22:52Z,2017-12-22T07:37:30Z,2018-01-08T21:22:11Z,MERGED,True,4,1,2,https://github.com/fche,pmmgr: tolerate pmcds with empty hostname,1,[],https://github.com/performancecopilot/pcp/pull/405,https://github.com/fche,3,https://github.com/performancecopilot/pcp/pull/405#issuecomment-353475280,"An assertion failure was formerly triggered, possibly by pmcds
advertising a blank hostname.  This code now assigns them a
hostid of ""-"".","wouldn't a pmcd advertising a blank hostname be a configuration issue (pmcd side)?

Probably.

That pmcd would have to be running with: -H """" which is an invalid hostname.

Maybe, but pmcd does not complain if so invoked.

Also, what are the consequences of the assertion failure? Can that be better handled as an error?

An assertion failure, well, exits the process as usual for assert(3).  This is now not an error nor an assertion failure; a sentinel hostid (""-"") is assigned instead, and pmmgr motors on.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,405,2017-12-21T17:22:52Z,2017-12-22T07:37:30Z,2018-01-08T21:22:11Z,MERGED,True,4,1,2,https://github.com/fche,pmmgr: tolerate pmcds with empty hostname,1,[],https://github.com/performancecopilot/pcp/pull/405,https://github.com/goodwinos,4,https://github.com/performancecopilot/pcp/pull/405#issuecomment-353479769,"An assertion failure was formerly triggered, possibly by pmcds
advertising a blank hostname.  This code now assigns them a
hostid of ""-"".","An assertion failure, well, exits the process as usual for assert(3). This is now not an error nor an assertion failure; a sentinel hostid (""-"") is assigned instead, and pmmgr motors on.

yes, what I ment was: what are the consequences of ""motoring on"" with an invalid hostname? Wont this lead to further peculiar behavior or errors later? We might be better with ""unknown"" rather than ""-"".
Might also be worth augmenting pmcd's handling of -H for rudimentary checking of the supplied hostname string .. since there are downstream consumers of the pmcd.hostname metric such as pmmgr that might launch something that might try to connect to it. This would verify the string as an ip addr or [a-zA-Z][a-zA-Z0-9-.]* or some such. Regardless, pmcd should do some checking, currently does none and fallback to gethostname() if the supplied string is invalid.
This of course wouldn't help pmmgr connecting to a downrev pmcd.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,405,2017-12-21T17:22:52Z,2017-12-22T07:37:30Z,2018-01-08T21:22:11Z,MERGED,True,4,1,2,https://github.com/fche,pmmgr: tolerate pmcds with empty hostname,1,[],https://github.com/performancecopilot/pcp/pull/405,https://github.com/fche,5,https://github.com/performancecopilot/pcp/pull/405#issuecomment-353503915,"An assertion failure was formerly triggered, possibly by pmcds
advertising a blank hostname.  This code now assigns them a
hostid of ""-"".","what are the consequences of ""motoring on"" with an invalid hostname?

pmmgr per se is fine; it'll just create a funny-named directory; pmie doesn't seem to care; pmlogger is given the ""-H -"" option and it seems to go on too.
I chose ""-"" instead of an english term like ""unknown"" or ""none"" or ""anonymous"" or ""whatever"" because it is unlikely to collide with real hosts of that name, and because ""-"" is already used as separator in hostids that are constructed from multiple metric values.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,405,2017-12-21T17:22:52Z,2017-12-22T07:37:30Z,2018-01-08T21:22:11Z,MERGED,True,4,1,2,https://github.com/fche,pmmgr: tolerate pmcds with empty hostname,1,[],https://github.com/performancecopilot/pcp/pull/405,https://github.com/goodwinos,6,https://github.com/performancecopilot/pcp/pull/405#issuecomment-353540857,"An assertion failure was formerly triggered, possibly by pmcds
advertising a blank hostname.  This code now assigns them a
hostid of ""-"".","Leaving this open because I'll be also improving pmcd -H hostname checking (there is no checking currently, but pmcd should at least check the named hostname string complies with host naming standards)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,405,2017-12-21T17:22:52Z,2017-12-22T07:37:30Z,2018-01-08T21:22:11Z,MERGED,True,4,1,2,https://github.com/fche,pmmgr: tolerate pmcds with empty hostname,1,[],https://github.com/performancecopilot/pcp/pull/405,https://github.com/fche,7,https://github.com/performancecopilot/pcp/pull/405#issuecomment-353600649,"An assertion failure was formerly triggered, possibly by pmcds
advertising a blank hostname.  This code now assigns them a
hostid of ""-"".","pmcd should at least check the named hostname string complies with host naming standards

Which standards?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,405,2017-12-21T17:22:52Z,2017-12-22T07:37:30Z,2018-01-08T21:22:11Z,MERGED,True,4,1,2,https://github.com/fche,pmmgr: tolerate pmcds with empty hostname,1,[],https://github.com/performancecopilot/pcp/pull/405,https://github.com/goodwinos,8,https://github.com/performancecopilot/pcp/pull/405#issuecomment-353677835,"An assertion failure was formerly triggered, possibly by pmcds
advertising a blank hostname.  This code now assigns them a
hostid of ""-"".","Which standards?

well, s/standards/conventions/
especially the one that says 'thou shall not have a blank hostname' :)
Perhaps translate http://commons.apache.org/proper/commons-validator/apidocs/src-html/org/apache/commons/validator/routines/InetAddressValidator.html to C, or use a suitable regex, etc.
Merry Christmas",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,405,2017-12-21T17:22:52Z,2017-12-22T07:37:30Z,2018-01-08T21:22:11Z,MERGED,True,4,1,2,https://github.com/fche,pmmgr: tolerate pmcds with empty hostname,1,[],https://github.com/performancecopilot/pcp/pull/405,https://github.com/fche,9,https://github.com/performancecopilot/pcp/pull/405#issuecomment-353678690,"An assertion failure was formerly triggered, possibly by pmcds
advertising a blank hostname.  This code now assigns them a
hostid of ""-"".","Yeah ... except system hostnames don't need to be IP addresses, names resolvable by DNS, or any other directory system.  That ""thou shalt"" is good advice, but I don't see it in e.g. POSIX gospel.  The linux kernel tolerates a sethostname("""",0); system call just fine.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,405,2017-12-21T17:22:52Z,2017-12-22T07:37:30Z,2018-01-08T21:22:11Z,MERGED,True,4,1,2,https://github.com/fche,pmmgr: tolerate pmcds with empty hostname,1,[],https://github.com/performancecopilot/pcp/pull/405,https://github.com/goodwinos,10,https://github.com/performancecopilot/pcp/pull/405#issuecomment-356097953,"An assertion failure was formerly triggered, possibly by pmcds
advertising a blank hostname.  This code now assigns them a
hostid of ""-"".",Will add some pmcd -H hostname basic checking and appropriate warning messages,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,405,2017-12-21T17:22:52Z,2017-12-22T07:37:30Z,2018-01-08T21:22:11Z,MERGED,True,4,1,2,https://github.com/fche,pmmgr: tolerate pmcds with empty hostname,1,[],https://github.com/performancecopilot/pcp/pull/405,https://github.com/fche,11,https://github.com/performancecopilot/pcp/pull/405#issuecomment-356100493,"An assertion failure was formerly triggered, possibly by pmcds
advertising a blank hostname.  This code now assigns them a
hostid of ""-"".","To address this scenario fully, one would also need to check against a blank gethostname(2), in case pmcd's -H was not used.  And a sethostname(2) need not be ASCII or friendly isalnum().
If we do not reject such machines outright, then we should check to what extent PCP's tooling (e.g., pmlogger_daily?) tolerates them.  pmmgr sanitizes them in pmmgr_job_spec::compute_hostids.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,409,2018-01-05T14:48:44Z,2018-02-06T07:02:36Z,2018-02-06T07:02:36Z,MERGED,True,1655,1,23,https://github.com/myllynen,Add PCP BCC PMDA to extract metrics from eBPF/BCC Python modules,1,[],https://github.com/performancecopilot/pcp/pull/409,https://github.com/myllynen,1,https://github.com/performancecopilot/pcp/pull/409,"PCP BCC PMDA is a plugin which extracts live performance data from eBPF
programs by using the BCC (BPF Compiler Collection) Python frontend and
provides them to any PCP client for archiving, monitoring, exporting,
and analysis purposes. It loads and acts as a bridge for any number of
configured, separate BCC Python modules embedding BPF code. Existing BCC
Python tools and modules should be possible to convert as PCP BCC PMDA
modules with reasonable effort.","PCP BCC PMDA is a plugin which extracts live performance data from eBPF
programs by using the BCC (BPF Compiler Collection) Python frontend and
provides them to any PCP client for archiving, monitoring, exporting,
and analysis purposes. It loads and acts as a bridge for any number of
configured, separate BCC Python modules embedding BPF code. Existing BCC
Python tools and modules should be possible to convert as PCP BCC PMDA
modules with reasonable effort.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,409,2018-01-05T14:48:44Z,2018-02-06T07:02:36Z,2018-02-06T07:02:36Z,MERGED,True,1655,1,23,https://github.com/myllynen,Add PCP BCC PMDA to extract metrics from eBPF/BCC Python modules,1,[],https://github.com/performancecopilot/pcp/pull/409,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/409#issuecomment-356826320,"PCP BCC PMDA is a plugin which extracts live performance data from eBPF
programs by using the BCC (BPF Compiler Collection) Python frontend and
provides them to any PCP client for archiving, monitoring, exporting,
and analysis purposes. It loads and acts as a bridge for any number of
configured, separate BCC Python modules embedding BPF code. Existing BCC
Python tools and modules should be possible to convert as PCP BCC PMDA
modules with reasonable effort.","Hi Marko,
Overall this looks good to me.  The main issue that we need to address is the duplication of the embedded bpf code from bcc/tools - that looks like a long-term maintenance headache we should tackle up front.
Have you chatted to Brendan about this PMDA yet?  If not, let's contact him to discuss ways we could approach sharing that code (e.g. extracting it into a bpf/ directory, like the lib/ directory some of the other bcc/tools scripts use, perhaps) so the pcp python code can also make use of that code without duplicating it into pcp itself.
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,409,2018-01-05T14:48:44Z,2018-02-06T07:02:36Z,2018-02-06T07:02:36Z,MERGED,True,1655,1,23,https://github.com/myllynen,Add PCP BCC PMDA to extract metrics from eBPF/BCC Python modules,1,[],https://github.com/performancecopilot/pcp/pull/409,https://github.com/myllynen,3,https://github.com/performancecopilot/pcp/pull/409#issuecomment-356834416,"PCP BCC PMDA is a plugin which extracts live performance data from eBPF
programs by using the BCC (BPF Compiler Collection) Python frontend and
provides them to any PCP client for archiving, monitoring, exporting,
and analysis purposes. It loads and acts as a bridge for any number of
configured, separate BCC Python modules embedding BPF code. Existing BCC
Python tools and modules should be possible to convert as PCP BCC PMDA
modules with reasonable effort.","Hi Nathan,
Thanks. The purpose of these few selected modules was mainly to serve as examples/references how to create new PCP BCC PMDA modules using different kind of BPF/BCC data structures, either from scratch or from some existing BCC Python modules (either part of BCC or not). I wasn't planning to convert every BCC tool to PCP (some of them don't even produce anything resembling performance metrics). Also, some of the BPF code had to modified slightly (some BCC tools modify the BPF program on the fly based on command line parameters), I'm not sure how feasible it would be to try dynamically adjust BPF module code on the fly on PCP side if the modules ever get updated, considering also that some BCC tools offer options to provide different kind of metrics based on their command line options.
We exchanged few emails from Brendan so he's aware of this effort. Perhaps we could check what he thinks about this kind of idea, allowing PCP BCC PMDA modules merely to import bpf_text from BCC modules and perhaps calling a function to sanitize the program for PCP would in theory be nice, we could make it optional for BCC tools to support such feature so not to put too much burden on BCC contributors who may or may not be familiar with PCP.
Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,409,2018-01-05T14:48:44Z,2018-02-06T07:02:36Z,2018-02-06T07:02:36Z,MERGED,True,1655,1,23,https://github.com/myllynen,Add PCP BCC PMDA to extract metrics from eBPF/BCC Python modules,1,[],https://github.com/performancecopilot/pcp/pull/409,https://github.com/myllynen,4,https://github.com/performancecopilot/pcp/pull/409#issuecomment-363002905,"PCP BCC PMDA is a plugin which extracts live performance data from eBPF
programs by using the BCC (BPF Compiler Collection) Python frontend and
provides them to any PCP client for archiving, monitoring, exporting,
and analysis purposes. It loads and acts as a bridge for any number of
configured, separate BCC Python modules embedding BPF code. Existing BCC
Python tools and modules should be possible to convert as PCP BCC PMDA
modules with reasonable effort.",I've now pushed a new version which splits out BPF code into separate files in preparation to use the -e of the tools once available so that the BPF code does not necessarily have to be copied anymore. Thanks.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,410,2018-01-09T04:57:53Z,2018-01-09T06:23:10Z,2018-01-09T06:23:10Z,MERGED,True,8,0,1,https://github.com/hkshaw1990,pmda_perfevent: Add null checks for pmc_settings,1,[],https://github.com/performancecopilot/pcp/pull/410,https://github.com/hkshaw1990,1,https://github.com/performancecopilot/pcp/pull/410,Fixes segfaults in case of empty pmc_settings.,Fixes segfaults in case of empty pmc_settings.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,413,2018-01-11T06:47:14Z,2018-01-11T07:22:22Z,2018-01-11T07:22:22Z,MERGED,True,1,1,1,https://github.com/hkshaw1990,Rearrange pmcsetting list check,1,[],https://github.com/performancecopilot/pcp/pull/413,https://github.com/hkshaw1990,1,https://github.com/performancecopilot/pcp/pull/413,setting_lists has to be assigned before the NULL check.,setting_lists has to be assigned before the NULL check.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,424,2018-01-23T20:58:30Z,2018-01-24T18:43:31Z,2018-01-24T18:43:31Z,MERGED,True,16,1,1,https://github.com/wcohen,pmrep.conf: Add sar-n-SOCK config,2,[],https://github.com/performancecopilot/pcp/pull/424,https://github.com/wcohen,1,https://github.com/performancecopilot/pcp/pull/424,"Add a equivalent configuration for pmrep for ""sar -n SOCK"".  The ""pmrep :sar-n-SOCK"" metrics output matches up with the sar command that it modeled after.","Add a equivalent configuration for pmrep for ""sar -n SOCK"".  The ""pmrep :sar-n-SOCK"" metrics output matches up with the sar command that it modeled after.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,425,2018-01-23T22:09:51Z,2018-01-25T07:18:02Z,2018-01-25T07:18:02Z,MERGED,True,8,1,2,https://github.com/wcohen,Have the PMDA JSON create a default place for json metrics,1,[],https://github.com/performancecopilot/pcp/pull/425,https://github.com/wcohen,1,https://github.com/performancecopilot/pcp/pull/425,"To make it easier to use the PMDA JSON for dynamically created metrics
it creates a default directory ($PCP_TMP_DIR/json) for other
applications to place their metrics coded as json files in.  PMDA JSON
scans that directory for json files and it will pick up any new
metrics in the default directory automatically.","To make it easier to use the PMDA JSON for dynamically created metrics
it creates a default directory ($PCP_TMP_DIR/json) for other
applications to place their metrics coded as json files in.  PMDA JSON
scans that directory for json files and it will pick up any new
metrics in the default directory automatically.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,428,2018-01-26T15:12:39Z,2018-03-22T00:40:29Z,2018-03-22T00:40:29Z,MERGED,True,32,12,3,https://github.com/fche,pmwebd file service: add/check ETag header for 304 Not Modified results,1,[],https://github.com/performancecopilot/pcp/pull/428,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/428,"When pmwebd is used for ordinary file service, it's desirable to allow
web browsers to cache those files.  This patch introduces simple
tagging of these files with the ETag: header (with some readily
available fstat(2) values as keys).  It now sends a 304 result code
instead of a 200 and a whole new copy of unmodified files.","When pmwebd is used for ordinary file service, it's desirable to allow
web browsers to cache those files.  This patch introduces simple
tagging of these files with the ETag: header (with some readily
available fstat(2) values as keys).  It now sends a 304 result code
instead of a 200 and a whole new copy of unmodified files.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,428,2018-01-26T15:12:39Z,2018-03-22T00:40:29Z,2018-03-22T00:40:29Z,MERGED,True,32,12,3,https://github.com/fche,pmwebd file service: add/check ETag header for 304 Not Modified results,1,[],https://github.com/performancecopilot/pcp/pull/428,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/428#issuecomment-370981613,"When pmwebd is used for ordinary file service, it's desirable to allow
web browsers to cache those files.  This patch introduces simple
tagging of these files with the ETag: header (with some readily
available fstat(2) values as keys).  It now sends a 304 result code
instead of a 200 and a whole new copy of unmodified files.","Applied this patch, rebuilt/installed and re-ran QA (on the stable system) for the pmwebapi group again - there is consistently one new failure:
[8%] 661 6s ... - output mismatch (see 661.out.bad)
180,184d179
<         },
<         {
<             ""name"": ""cpu"",
<             ""path"": ""archives/naslog.kernel.cpu."",
<             ""is_leaf"": 0

@fche, can you think of any reason this patch would cause qa/661 to remove archives/naslog.kernel.cpu compared to the qualified output? If that is expected, then I'll just remake 661, but it seems strange that only that one metric is affected.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,429,2018-01-26T15:12:53Z,2018-03-07T00:50:21Z,2018-03-07T00:50:46Z,MERGED,True,37,33,2,https://github.com/fche,pmwebd: improve graphite archive-cache performance w.r.t. syscalls,1,[],https://github.com/performancecopilot/pcp/pull/429,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/429,"It was reported that on a large collection of pcp archives, which
included a number of corrupt (0-byte ones), the graphite
metric-enumeration query took too long.  One source of this was
excessive effort on

frequently retrying opening corrupt archives, and
fstat'ing all files under -A $DIR

We no longer do either.  Corrupt archives are treated as though they
were fresh at the moment of pmwebd startup, but containing no content.
The -A directory's transitive contents are no longer routinely
fstat()d, only readdir() enumerated.  This costs us the ability to
follow subdirectory symlinks, but it's a pretty big win otherwise.
No QA impact, only performance.","It was reported that on a large collection of pcp archives, which
included a number of corrupt (0-byte ones), the graphite
metric-enumeration query took too long.  One source of this was
excessive effort on

frequently retrying opening corrupt archives, and
fstat'ing all files under -A $DIR

We no longer do either.  Corrupt archives are treated as though they
were fresh at the moment of pmwebd startup, but containing no content.
The -A directory's transitive contents are no longer routinely
fstat()d, only readdir() enumerated.  This costs us the ability to
follow subdirectory symlinks, but it's a pretty big win otherwise.
No QA impact, only performance.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,429,2018-01-26T15:12:53Z,2018-03-07T00:50:21Z,2018-03-07T00:50:46Z,MERGED,True,37,33,2,https://github.com/fche,pmwebd: improve graphite archive-cache performance w.r.t. syscalls,1,[],https://github.com/performancecopilot/pcp/pull/429,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/429#issuecomment-370665150,"It was reported that on a large collection of pcp archives, which
included a number of corrupt (0-byte ones), the graphite
metric-enumeration query took too long.  One source of this was
excessive effort on

frequently retrying opening corrupt archives, and
fstat'ing all files under -A $DIR

We no longer do either.  Corrupt archives are treated as though they
were fresh at the moment of pmwebd startup, but containing no content.
The -A directory's transitive contents are no longer routinely
fstat()d, only readdir() enumerated.  This costs us the ability to
follow subdirectory symlinks, but it's a pretty big win otherwise.
No QA impact, only performance.","ran baseline (master) QA for group 'pmwebapi' and 1090 and 1388 failed. Then built and installed with the patches from this PR and #428, and now 661 and 1042 fail. That's on the same machine, so maybe there is residual pmwebapi QA pollution between test runs or something. Needs more investigation.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,429,2018-01-26T15:12:53Z,2018-03-07T00:50:21Z,2018-03-07T00:50:46Z,MERGED,True,37,33,2,https://github.com/fche,pmwebd: improve graphite archive-cache performance w.r.t. syscalls,1,[],https://github.com/performancecopilot/pcp/pull/429,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/429#issuecomment-370980795,"It was reported that on a large collection of pcp archives, which
included a number of corrupt (0-byte ones), the graphite
metric-enumeration query took too long.  One source of this was
excessive effort on

frequently retrying opening corrupt archives, and
fstat'ing all files under -A $DIR

We no longer do either.  Corrupt archives are treated as though they
were fresh at the moment of pmwebd startup, but containing no content.
The -A directory's transitive contents are no longer routinely
fstat()d, only readdir() enumerated.  This costs us the ability to
follow subdirectory symlinks, but it's a pretty big win otherwise.
No QA impact, only performance.","Earlier report mentioning "".. residual pmwebapi QA pollution between test runs"" has proven correct - I've applied this patch and run QA on a different system, and it's fine now. So I'll be merging this PR shortly.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,429,2018-01-26T15:12:53Z,2018-03-07T00:50:21Z,2018-03-07T00:50:46Z,MERGED,True,37,33,2,https://github.com/fche,pmwebd: improve graphite archive-cache performance w.r.t. syscalls,1,[],https://github.com/performancecopilot/pcp/pull/429,https://github.com/goodwinos,4,https://github.com/performancecopilot/pcp/pull/429#issuecomment-370983035,"It was reported that on a large collection of pcp archives, which
included a number of corrupt (0-byte ones), the graphite
metric-enumeration query took too long.  One source of this was
excessive effort on

frequently retrying opening corrupt archives, and
fstat'ing all files under -A $DIR

We no longer do either.  Corrupt archives are treated as though they
were fresh at the moment of pmwebd startup, but containing no content.
The -A directory's transitive contents are no longer routinely
fstat()d, only readdir() enumerated.  This costs us the ability to
follow subdirectory symlinks, but it's a pretty big win otherwise.
No QA impact, only performance.",Merged into upstream master.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,430,2018-01-26T15:45:57Z,2018-01-26T15:48:46Z,2018-01-26T15:55:17Z,MERGED,True,4,4,1,https://github.com/fche,fedora.spec merge unmunge,1,[],https://github.com/performancecopilot/pcp/pull/430,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/430,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,436,2018-02-02T19:30:33Z,2018-02-05T04:53:19Z,2018-02-05T04:53:19Z,MERGED,True,13,1,1,https://github.com/sweettea,Recognize all VDO volumes,1,[],https://github.com/performancecopilot/pcp/pull/436,https://github.com/sweettea,1,https://github.com/performancecopilot/pcp/pull/436,"Updated vdo volume detection to be all subdirectories of /sys/kvdo/ which contain an 'instance' file. VDO volumes can have arbitrary names, causing the existence of the directory /sys/kvdo/[name], but all running VDO volumes have an 'instance' file in that subdirectory.","Updated vdo volume detection to be all subdirectories of /sys/kvdo/ which contain an 'instance' file. VDO volumes can have arbitrary names, causing the existence of the directory /sys/kvdo/[name], but all running VDO volumes have an 'instance' file in that subdirectory.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,438,2018-02-06T15:02:57Z,2018-02-06T15:39:34Z,2018-02-06T15:39:34Z,MERGED,True,32,0,1,https://github.com/wcohen,Add a pmrep configuration for numa hint faults metrics,1,[],https://github.com/performancecopilot/pcp/pull/438,https://github.com/wcohen,1,https://github.com/performancecopilot/pcp/pull/438,"PCP metrics were recently added for numa_hint_faults and
numa_hint_faults_local information from /proc/vmstat.  This pmrep
configuration computes a derived metric numa_hint_faults_remote. The
three numa hint fault metrics are displayed with percentages for the
local and remote faults to provide an indicatation whether there is a
problem with page locality on NUMA machines.","PCP metrics were recently added for numa_hint_faults and
numa_hint_faults_local information from /proc/vmstat.  This pmrep
configuration computes a derived metric numa_hint_faults_remote. The
three numa hint fault metrics are displayed with percentages for the
local and remote faults to provide an indicatation whether there is a
problem with page locality on NUMA machines.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,440,2018-02-08T15:34:40Z,2018-02-08T19:20:24Z,2018-02-08T19:20:24Z,MERGED,True,30,0,1,https://github.com/wcohen,Add a pmrep configuration to provide breakdown of CPU usage by NUMA node,1,[],https://github.com/performancecopilot/pcp/pull/440,https://github.com/wcohen,1,https://github.com/performancecopilot/pcp/pull/440,"The grouping of CPUs to nodes (for example processors 0,4,8,12 are in
node 0) may make it more difficult to spot when there is a performance
issue due to NUMA load imbalance.  To make it easier to spot
performance problems due to load imbalance between NUMA nodes the
pmrep pernodecpu configuration provides a per node breakdown of CPU
usage similar to the pmrep sar-u-ALL-P-ALL configuration.","The grouping of CPUs to nodes (for example processors 0,4,8,12 are in
node 0) may make it more difficult to spot when there is a performance
issue due to NUMA load imbalance.  To make it easier to spot
performance problems due to load imbalance between NUMA nodes the
pmrep pernodecpu configuration provides a per node breakdown of CPU
usage similar to the pmrep sar-u-ALL-P-ALL configuration.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,440,2018-02-08T15:34:40Z,2018-02-08T19:20:24Z,2018-02-08T19:20:24Z,MERGED,True,30,0,1,https://github.com/wcohen,Add a pmrep configuration to provide breakdown of CPU usage by NUMA node,1,[],https://github.com/performancecopilot/pcp/pull/440,https://github.com/myllynen,2,https://github.com/performancecopilot/pcp/pull/440#issuecomment-364182646,"The grouping of CPUs to nodes (for example processors 0,4,8,12 are in
node 0) may make it more difficult to spot when there is a performance
issue due to NUMA load imbalance.  To make it easier to spot
performance problems due to load imbalance between NUMA nodes the
pmrep pernodecpu configuration provides a per node breakdown of CPU
usage similar to the pmrep sar-u-ALL-P-ALL configuration.",Or perhaps prefix all these NUMA related sets with numa- especially if more are planned.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,450,2018-03-06T19:45:12Z,2018-03-06T21:02:35Z,2018-03-06T21:02:35Z,MERGED,True,22,0,1,https://github.com/wcohen,A pmrep config setting to monitor NUMA page migrations,2,[],https://github.com/performancecopilot/pcp/pull/450,https://github.com/wcohen,1,https://github.com/performancecopilot/pcp/pull/450,This configuration is to help people get an idea how much bandwidth the automatic NUMA page migration might be using on the system and show if pages are failing to be migrated.,This configuration is to help people get an idea how much bandwidth the automatic NUMA page migration might be using on the system and show if pages are failing to be migrated.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,452,2018-03-10T16:44:46Z,2018-03-13T14:00:44Z,2018-03-13T14:00:44Z,MERGED,True,10,1,1,https://github.com/andreasgerstmayr,"BCC PMDA: biotop: ignore unnamed devices, log unknown devices",1,[],https://github.com/performancecopilot/pcp/pull/452,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/452,"updates for the BCC PMDA biotop tool: This patch ignores unnamed devices (device major number = 0, see https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/devices.txt) and logs traced devices which are not available in the /proc/diskstats file","updates for the BCC PMDA biotop tool: This patch ignores unnamed devices (device major number = 0, see https://github.com/torvalds/linux/blob/master/Documentation/admin-guide/devices.txt) and logs traced devices which are not available in the /proc/diskstats file",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,455,2018-03-14T21:07:01Z,2018-03-16T03:47:49Z,2018-03-16T03:47:49Z,MERGED,True,15,3,3,https://github.com/scotte,Fixes #454 - Enable daemons on debian based systems,1,[],https://github.com/performancecopilot/pcp/pull/455,https://github.com/scotte,1,https://github.com/performancecopilot/pcp/pull/455,"On debian based systems, update-rc.d has different behavior for unit files generated via the sysv-generator versus native systemd units. As a result, PCP daemons are not enabled automatically. With this patch, deb-systemd-helper is used instead of update-rc.d, if it exists.","On debian based systems, update-rc.d has different behavior for unit files generated via the sysv-generator versus native systemd units. As a result, PCP daemons are not enabled automatically. With this patch, deb-systemd-helper is used instead of update-rc.d, if it exists.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,458,2018-03-17T04:38:39Z,2018-03-31T02:25:26Z,2018-03-31T02:25:26Z,CLOSED,False,1257,0,5,https://github.com/ryandoyle,golang: add initial PMAPI support,13,[],https://github.com/performancecopilot/pcp/pull/458,https://github.com/ryandoyle,1,https://github.com/performancecopilot/pcp/pull/458,Adds initial golang support for PMAPI.,Adds initial golang support for PMAPI.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,458,2018-03-17T04:38:39Z,2018-03-31T02:25:26Z,2018-03-31T02:25:26Z,CLOSED,False,1257,0,5,https://github.com/ryandoyle,golang: add initial PMAPI support,13,[],https://github.com/performancecopilot/pcp/pull/458,https://github.com/ryandoyle,2,https://github.com/performancecopilot/pcp/pull/458#issuecomment-373894227,Adds initial golang support for PMAPI.,"Hey there - I had this sitting around in my local branch of PCP for a while.
There is still a bit of functionality missing from the PMAPI but there is more than enough to query for metrics/units/etc... I pulled this code from my simplified golang based interface to PCP  https://github.com/ryandoyle/pcpeasygo. Let me know if the licensing is okay (MIT).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,458,2018-03-17T04:38:39Z,2018-03-31T02:25:26Z,2018-03-31T02:25:26Z,CLOSED,False,1257,0,5,https://github.com/ryandoyle,golang: add initial PMAPI support,13,[],https://github.com/performancecopilot/pcp/pull/458,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/458#issuecomment-374455026,Adds initial golang support for PMAPI.,"@ryandoyle in terms of language, build system, CI, and so on, this seems like it would be a better match for merging with Speed (https://github.com/performancecopilot/speed) rather than core PCP ...?  (Speed also happens to be MIT licensed as well).  Or perhaps as a standalone project building on PCP.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,458,2018-03-17T04:38:39Z,2018-03-31T02:25:26Z,2018-03-31T02:25:26Z,CLOSED,False,1257,0,5,https://github.com/ryandoyle,golang: add initial PMAPI support,13,[],https://github.com/performancecopilot/pcp/pull/458,https://github.com/ryandoyle,4,https://github.com/performancecopilot/pcp/pull/458#issuecomment-375828847,Adds initial golang support for PMAPI.,"Hey @natoscott. Fair enough - it might make including it in projects easier too. How about a separate repository and keep Speed standalone as it is?
What would you like the repository to be? pcp-go, pmapi-go, something else?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,458,2018-03-17T04:38:39Z,2018-03-31T02:25:26Z,2018-03-31T02:25:26Z,CLOSED,False,1257,0,5,https://github.com/ryandoyle,golang: add initial PMAPI support,13,[],https://github.com/performancecopilot/pcp/pull/458,https://github.com/natoscott,5,https://github.com/performancecopilot/pcp/pull/458#issuecomment-376014248,Adds initial golang support for PMAPI.,"| How about a separate repository and keep Speed standalone as it is?
Sounds fine to me.
| What would you like the repository to be?
I'd recommend a name that suits expansion beyond just PMAPI (so not ""pmapi-go"") - some of the code will be common for the PMDA API, which might be a follow-on project for you/someone, so best to not lock it into just the PMAPI (IMO).
So, ""pcp-go"" would be my choice of those two you suggested, or something else entirely - might want to think about when its being promoted and discussed, something catchy / recognisable like ""Vector"" or ""Parfait"" really helps.
I recommend we add it as a top-level project under the pcp github org though, to help get it visible - all up to you as the author, just let me know what you decide.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,458,2018-03-17T04:38:39Z,2018-03-31T02:25:26Z,2018-03-31T02:25:26Z,CLOSED,False,1257,0,5,https://github.com/ryandoyle,golang: add initial PMAPI support,13,[],https://github.com/performancecopilot/pcp/pull/458,https://github.com/ryandoyle,6,https://github.com/performancecopilot/pcp/pull/458#issuecomment-376072829,Adds initial golang support for PMAPI.,"Hey @natoscott, I'm happy with pcp-go as it's really just go bindings for PCP and not a new product like Vector or Parfait IMO.
Having it on the top-level PCP github org would be good as you've mentioned. I don't have access to do that, if yourself or someone else could that would be great.
Cheers - Ryan",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,458,2018-03-17T04:38:39Z,2018-03-31T02:25:26Z,2018-03-31T02:25:26Z,CLOSED,False,1257,0,5,https://github.com/ryandoyle,golang: add initial PMAPI support,13,[],https://github.com/performancecopilot/pcp/pull/458,https://github.com/natoscott,7,https://github.com/performancecopilot/pcp/pull/458#issuecomment-376075768,Adds initial golang support for PMAPI.,"@ryandoyle yep, np - do you have a standalone git repo with this code?  (i.e. not part of a PCP repo with all of the PCP history).  If not, this can be cleanly extracted ... let's chat on slack tomorrow.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,458,2018-03-17T04:38:39Z,2018-03-31T02:25:26Z,2018-03-31T02:25:26Z,CLOSED,False,1257,0,5,https://github.com/ryandoyle,golang: add initial PMAPI support,13,[],https://github.com/performancecopilot/pcp/pull/458,https://github.com/ryandoyle,8,https://github.com/performancecopilot/pcp/pull/458#issuecomment-376076569,Adds initial golang support for PMAPI.,"@natoscott, yep I can extract my commits and push them standalone so thats all good.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,458,2018-03-17T04:38:39Z,2018-03-31T02:25:26Z,2018-03-31T02:25:26Z,CLOSED,False,1257,0,5,https://github.com/ryandoyle,golang: add initial PMAPI support,13,[],https://github.com/performancecopilot/pcp/pull/458,https://github.com/natoscott,9,https://github.com/performancecopilot/pcp/pull/458#issuecomment-376077233,Adds initial golang support for PMAPI.,"@ryandoyle ok mate, once you have a clean pcp-go repo, send me a pointer and I'll set it all up with you as owner, permissions to run CI, etc.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,458,2018-03-17T04:38:39Z,2018-03-31T02:25:26Z,2018-03-31T02:25:26Z,CLOSED,False,1257,0,5,https://github.com/ryandoyle,golang: add initial PMAPI support,13,[],https://github.com/performancecopilot/pcp/pull/458,https://github.com/ryandoyle,10,https://github.com/performancecopilot/pcp/pull/458#issuecomment-376830407,Adds initial golang support for PMAPI.,"Hey @natoscott, I've setup https://github.com/ryandoyle/pcp-go as what I'd push to the one under the pcp org. Let me know if it needs adjustments etc..",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,458,2018-03-17T04:38:39Z,2018-03-31T02:25:26Z,2018-03-31T02:25:26Z,CLOSED,False,1257,0,5,https://github.com/ryandoyle,golang: add initial PMAPI support,13,[],https://github.com/performancecopilot/pcp/pull/458,https://github.com/ryandoyle,11,https://github.com/performancecopilot/pcp/pull/458#issuecomment-377659341,Adds initial golang support for PMAPI.,Now at https://github.com/performancecopilot/pcp-go,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,459,2018-03-17T13:47:33Z,2018-03-17T20:15:15Z,2018-03-17T20:15:15Z,MERGED,True,9,4,1,https://github.com/parthbeingparth,Readme.osx updated for packagemaker and links added for downloading..,1,[],https://github.com/performancecopilot/pcp/pull/459,https://github.com/parthbeingparth,1,https://github.com/performancecopilot/pcp/pull/459,Details of the latest requirements and links are added.,Details of the latest requirements and links are added.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,460,2018-03-17T18:24:34Z,2018-03-19T03:14:04Z,2020-09-21T15:47:19Z,MERGED,True,29,0,3,https://github.com/andreasgerstmayr,integrate Travis CI,1,[],https://github.com/performancecopilot/pcp/pull/460,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/460,"This PR integrates Travis CI.
It builds the PCP rpm packages inside a Docker image (Fedora 27) and executes the testsuite (with the sanity group).
Reason for using Docker inside the Travis CI VM is independence over the Travis CI VM image (at the moment Ubuntu 12.04 and Ubuntu 14.04 are available) and reproducibility.
Example build: https://travis-ci.org/andihit/pcp/builds/354788103
To enable the build on Travis CI, somebody with enough privileges of the GitHub pcp repo has to enable it on Travis CI.
The part where the generated RPM filenames is determined is a bit hacky, maybe somebody has a better idea?","This PR integrates Travis CI.
It builds the PCP rpm packages inside a Docker image (Fedora 27) and executes the testsuite (with the sanity group).
Reason for using Docker inside the Travis CI VM is independence over the Travis CI VM image (at the moment Ubuntu 12.04 and Ubuntu 14.04 are available) and reproducibility.
Example build: https://travis-ci.org/andihit/pcp/builds/354788103
To enable the build on Travis CI, somebody with enough privileges of the GitHub pcp repo has to enable it on Travis CI.
The part where the generated RPM filenames is determined is a bit hacky, maybe somebody has a better idea?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,461,2018-03-19T19:58:39Z,2018-03-20T02:33:54Z,2018-03-20T02:33:54Z,MERGED,True,13,13,1,https://github.com/parthbeingparth,Latest versions and some minor command changes,1,[],https://github.com/performancecopilot/pcp/pull/461,https://github.com/parthbeingparth,1,https://github.com/performancecopilot/pcp/pull/461,"Updated the latest versions of xz, libpng, pixman, cairo and libmicrohttpd. Some minor changes to terminal commands as well.","Updated the latest versions of xz, libpng, pixman, cairo and libmicrohttpd. Some minor changes to terminal commands as well.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,463,2018-03-23T00:58:06Z,2018-03-23T05:57:42Z,2020-09-21T15:47:21Z,MERGED,True,11,4,2,https://github.com/andreasgerstmayr,build: test pmda.bcc group by travis ci,1,[],https://github.com/performancecopilot/pcp/pull/463,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/463,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,464,2018-03-23T01:00:36Z,2018-03-26T01:24:34Z,2020-09-21T15:47:21Z,MERGED,True,166,0,3,https://github.com/andreasgerstmayr,qa: add test 1116 for BCC PMDA biotop tool,1,[],https://github.com/performancecopilot/pcp/pull/464,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/464,"this test writes a testfile to /var/tmp/pcp_qa_1116, because a block device is required for the bcc tool (/tmp is tmpfs)
is this ok, or should I use another location for the testfile?","this test writes a testfile to /var/tmp/pcp_qa_1116, because a block device is required for the bcc tool (/tmp is tmpfs)
is this ok, or should I use another location for the testfile?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,464,2018-03-23T01:00:36Z,2018-03-26T01:24:34Z,2020-09-21T15:47:21Z,MERGED,True,166,0,3,https://github.com/andreasgerstmayr,qa: add test 1116 for BCC PMDA biotop tool,1,[],https://github.com/performancecopilot/pcp/pull/464,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/464#issuecomment-376021208,"this test writes a testfile to /var/tmp/pcp_qa_1116, because a block device is required for the bcc tool (/tmp is tmpfs)
is this ok, or should I use another location for the testfile?","|  is this ok, or should I use another location for the testfile?
Thats OK - but best to access it via $PCP_TMPFILE_DIR (from /etc/pcp.conf) - I've made that tweak, and also removed a bash-ism (assuming that /bin/sh == /bin/bash) in the test in one spot (please double check that for me?  Thanks).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,464,2018-03-23T01:00:36Z,2018-03-26T01:24:34Z,2020-09-21T15:47:21Z,MERGED,True,166,0,3,https://github.com/andreasgerstmayr,qa: add test 1116 for BCC PMDA biotop tool,1,[],https://github.com/performancecopilot/pcp/pull/464,https://github.com/andreasgerstmayr,3,https://github.com/performancecopilot/pcp/pull/464#issuecomment-376081262,"this test writes a testfile to /var/tmp/pcp_qa_1116, because a block device is required for the bcc tool (/tmp is tmpfs)
is this ok, or should I use another location for the testfile?","looks good, thanks for merging!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,468,2018-03-24T14:34:37Z,2018-03-26T01:24:34Z,2019-03-25T15:08:32Z,MERGED,True,29,3,4,https://github.com/fche,GH#451: fix fetchgroup vs derivedmetric instance profile kumite,1,[],https://github.com/performancecopilot/pcp/pull/468,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/468,"The fetchgroup facility tries to optimize the instance profile to
minimize fetching of unnecessary instances.  The presence of
derived metrics (with opaque indom requirements of their own)
makes this optimization harmful.  New code disables it when
an IS_DERIVED() metric is added to the fetchgroup.  qa/1069 tests.","The fetchgroup facility tries to optimize the instance profile to
minimize fetching of unnecessary instances.  The presence of
derived metrics (with opaque indom requirements of their own)
makes this optimization harmful.  New code disables it when
an IS_DERIVED() metric is added to the fetchgroup.  qa/1069 tests.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,470,2018-03-27T00:19:38Z,2018-03-27T22:49:54Z,2020-09-21T15:47:27Z,MERGED,True,1,1,1,https://github.com/andreasgerstmayr,qa: check-vm: update name of python3 bcc package for debian,1,[],https://github.com/performancecopilot/pcp/pull/470,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/470,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,474,2018-03-31T02:43:58Z,2018-04-03T05:03:03Z,2018-04-03T11:22:43Z,MERGED,True,152,10,4,https://github.com/fche,GH#439: add low-level-discovery support to pcp2zabbix,1,[],https://github.com/performancecopilot/pcp/pull/474,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/474,"Add new option --ldd = -l, to set a mode whereby pcp2zabbix
sends zabbix lld metrics for each pcp metric that has an indom.
This lld metric allows zabbix admins to configure templates
that grow automatically with pcp instance domains.  doc, qa++.","Add new option --ldd = -l, to set a mode whereby pcp2zabbix
sends zabbix lld metrics for each pcp metric that has an indom.
This lld metric allows zabbix admins to configure templates
that grow automatically with pcp instance domains.  doc, qa++.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,474,2018-03-31T02:43:58Z,2018-04-03T05:03:03Z,2018-04-03T11:22:43Z,MERGED,True,152,10,4,https://github.com/fche,GH#439: add low-level-discovery support to pcp2zabbix,1,[],https://github.com/performancecopilot/pcp/pull/474,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/474#issuecomment-378130729,"Add new option --ldd = -l, to set a mode whereby pcp2zabbix
sends zabbix lld metrics for each pcp metric that has an indom.
This lld metric allows zabbix admins to configure templates
that grow automatically with pcp instance domains.  doc, qa++.","Merged into upstream master, thanks Frank.
Note there is an issue on F27 where the module directory has been changed to /usr/lib64/modules by default. On F27 (at least), that directory doesn't exist, and so the zabbix_agentd config would need to be set up to specify the path to /usr/lib64/zabbix/agent/zbxpcp.so (or it's symlink /usr/lib64/zabbix/modules/zbxpcp.so).
And this has apparently been reworked upstream, so additional updates will be needed for PCP. We're looking into it, will probably need to make the config autoconf configured and platform specific.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,474,2018-03-31T02:43:58Z,2018-04-03T05:03:03Z,2018-04-03T11:22:43Z,MERGED,True,152,10,4,https://github.com/fche,GH#439: add low-level-discovery support to pcp2zabbix,1,[],https://github.com/performancecopilot/pcp/pull/474,https://github.com/fche,3,https://github.com/performancecopilot/pcp/pull/474#issuecomment-378216242,"Add new option --ldd = -l, to set a mode whereby pcp2zabbix
sends zabbix lld metrics for each pcp metric that has an indom.
This lld metric allows zabbix admins to configure templates
that grow automatically with pcp instance domains.  doc, qa++.",(pcp2zabbix has no connection with the zbxpcp agent code),True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,478,2018-04-10T13:21:23Z,2018-04-13T00:58:24Z,2020-09-21T15:47:30Z,MERGED,True,6,0,1,https://github.com/andreasgerstmayr,travis: print all logs to stdout at the end of the build,1,[],https://github.com/performancecopilot/pcp/pull/478,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/478,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,479,2018-04-10T13:41:30Z,2018-04-13T01:00:05Z,2020-09-21T15:47:30Z,MERGED,True,2,2,2,https://github.com/andreasgerstmayr,"build, qa: force default locale when grepping English words",1,[],https://github.com/performancecopilot/pcp/pull/479,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/479,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,482,2018-04-16T06:09:27Z,2018-04-26T08:34:37Z,2018-04-26T08:34:37Z,MERGED,True,29550,6,8,https://github.com/nkshirsagar,"Committing code, archives and qa for process state tracking",9,[],https://github.com/performancecopilot/pcp/pull/482,https://github.com/nkshirsagar,1,https://github.com/performancecopilot/pcp/pull/482,This feature described at http://tasks.pcp.io/b/cbEf5fxGPp8BrbGYS/roadmap/a6shtF8jBdQ3MLPXn and http://tasks.pcp.io/b/cbEf5fxGPp8BrbGYS/roadmap/8ZW4kzL57tkgZzwuj,This feature described at http://tasks.pcp.io/b/cbEf5fxGPp8BrbGYS/roadmap/a6shtF8jBdQ3MLPXn and http://tasks.pcp.io/b/cbEf5fxGPp8BrbGYS/roadmap/8ZW4kzL57tkgZzwuj,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,482,2018-04-16T06:09:27Z,2018-04-26T08:34:37Z,2018-04-26T08:34:37Z,MERGED,True,29550,6,8,https://github.com/nkshirsagar,"Committing code, archives and qa for process state tracking",9,[],https://github.com/performancecopilot/pcp/pull/482,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/482#issuecomment-384497033,This feature described at http://tasks.pcp.io/b/cbEf5fxGPp8BrbGYS/roadmap/a6shtF8jBdQ3MLPXn and http://tasks.pcp.io/b/cbEf5fxGPp8BrbGYS/roadmap/8ZW4kzL57tkgZzwuj,"Hi Nikhil, I have merged your pcp-pidstat updates into my local tree and tested on F26 and F27, which use python3.6 by default. It all works with python2 (e.g. on RHEL6 and RHEL7), but fails with python3 as follows:
kilcunda:mgoodwin@~/src/pcp-clean[master]$ python3 /usr/libexec/pcp/bin/pcp-pidstat -a qa/archives/pcp-pidstat-process-states -B all
Linux  3.10.0-693.el7.x86_64  (unused)  04/10/18  x86_64    (8 CPU)
Traceback (most recent call last):
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 821, in <module>
    sts = manager.run()
  File ""/usr/lib64/python3.6/site-packages/pcp/pmcc.py"", line 665, in run
    self._printer.report(self)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 798, in report
    report.print_report(timestamp, header_indentation, value_indentation)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 402, in print_report
    if process_state_info.has_key(key):
AttributeError: 'dict' object has no attribute 'has_key'
kilcunda:mgoodwin@~/src/pcp-clean[master]$ pmpython -V
Python 3.6.5


If you need assistance forward porting to python3 platforms, let me know. A follow-up commit to support python3 would be best, rather than re-doing the whole patch. You'd just need to change
if process_state_info.has_key(key):
to something like:
if key in process_state_info:
and then be sure to test on both python2 and python3
-- Regards",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,482,2018-04-16T06:09:27Z,2018-04-26T08:34:37Z,2018-04-26T08:34:37Z,MERGED,True,29550,6,8,https://github.com/nkshirsagar,"Committing code, archives and qa for process state tracking",9,[],https://github.com/performancecopilot/pcp/pull/482,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/482#issuecomment-384538282,This feature described at http://tasks.pcp.io/b/cbEf5fxGPp8BrbGYS/roadmap/a6shtF8jBdQ3MLPXn and http://tasks.pcp.io/b/cbEf5fxGPp8BrbGYS/roadmap/8ZW4kzL57tkgZzwuj,"OK, it's working with python3 now.
However, the new QA test qa/1396 is not passing anywhere except India timezone. This is because pcp-pidstat reports in the local timezone by default. The -z option has to be used to report in the timezone of  the test archive (rathe than the local timezone where the test is being run), so it will have reproducible qualified output when the QA test is run in other timezones. I've changed 1396 so it's run as pcp -z pidstat -a .... and pushed your changes along with my change up to https://github.com/performancecopilot/pcp.git so you can pull it down from there. This has not been merged to master yet, but getting close.
Secondly, the metrics check is failing for all the other QA tests in the pidstat group (064, 1078 and 1040). This is because the pre-existing archives used by those tests do not have all the required metrics, e.g.
# ./check -l 1078
... [trimmed]
< 07:35:08         1000	32357	140	faked-sysv
< 07:35:08         1000	32364	140	rules
---
> Error: not all required metrics are available
> Missing ['proc.psinfo.sname', 'proc.psinfo.start_time', 'proc.psinfo.wchan_s']

The archive used by test qa/1078 doesn't have those three metrics in it. This affects tests 064, 1078, and 1140 in the same way. Either the archives for those tests will have to be re-made, or pcp-pidstat will have to be smarter about checking for needed metrics, i.e. make it conditional on which command line options are given (only the -B option actually needs those three metrics AFAICT).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,482,2018-04-16T06:09:27Z,2018-04-26T08:34:37Z,2018-04-26T08:34:37Z,MERGED,True,29550,6,8,https://github.com/nkshirsagar,"Committing code, archives and qa for process state tracking",9,[],https://github.com/performancecopilot/pcp/pull/482,https://github.com/goodwinos,4,https://github.com/performancecopilot/pcp/pull/482#issuecomment-384540432,This feature described at http://tasks.pcp.io/b/cbEf5fxGPp8BrbGYS/roadmap/a6shtF8jBdQ3MLPXn and http://tasks.pcp.io/b/cbEf5fxGPp8BrbGYS/roadmap/8ZW4kzL57tkgZzwuj,correction: I pushed this up to https://github.com/goodwinos/pcp.git master,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,482,2018-04-16T06:09:27Z,2018-04-26T08:34:37Z,2018-04-26T08:34:37Z,MERGED,True,29550,6,8,https://github.com/nkshirsagar,"Committing code, archives and qa for process state tracking",9,[],https://github.com/performancecopilot/pcp/pull/482,https://github.com/nkshirsagar,5,https://github.com/performancecopilot/pcp/pull/482#issuecomment-384556721,This feature described at http://tasks.pcp.io/b/cbEf5fxGPp8BrbGYS/roadmap/a6shtF8jBdQ3MLPXn and http://tasks.pcp.io/b/cbEf5fxGPp8BrbGYS/roadmap/8ZW4kzL57tkgZzwuj,"merged with https://github.com/goodwinos/pcp.git and submitted patches for python3 and new metric table for -B (ensuring old qa tests for pidstat dont break due to missing metrics in their collected archives)
[root@nkshirsa pcp-1]# git remote -v
origin	https://github.com/nkshirsagar/pcp-1 (fetch)
origin	https://github.com/nkshirsagar/pcp-1 (push)
[root@nkshirsa pcp-1]#
[root@nkshirsa pcp-1]# git log
commit 7567fba
Merge: 632114f 9f26008
Author: root root@nkshirsa.pnq.csb
Date:   Thu Apr 26 13:06:52 2018 +0530
Merge https://github.com/goodwinos/pcp

commit 632114f
Author: Nikhil Kshirsagar nkshirsa@redhat.com
Date:   Thu Apr 26 12:56:59 2018 +0530
Using new metric array for the -B flag, so we don't break earlier archives
which don't collect the additional metrics used for the -B flag

commit 9f26008
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Thu Apr 26 17:13:40 2018 +1000
qa/1396: use pcp -z so the test passes in all timezones

Also, add 1396 to the pidstat group in qa/group

modified:   qa/1396
modified:   qa/1396.out
modified:   qa/group

commit d681505
Merge: f75f3f6 d675fa6
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Thu Apr 26 15:16:32 2018 +1000
Merge branch 'master' of https://github.com/performancecopilot/pcp

commit f75f3f6
Merge: 001a565 2f8f813
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Thu Apr 26 15:15:31 2018 +1000
Merge https://github.com/nkshirsagar/pcp-1

commit 2f8f813
Author: Nikhil Kshirsagar nkshirsa@redhat.com
Date:   Thu Apr 26 10:35:38 2018 +0530
Patch for python3 compatibility

...
...",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,483,2018-04-17T15:28:23Z,2018-04-17T19:33:31Z,2018-04-17T19:33:31Z,MERGED,True,1,1,1,https://github.com/fche,series.h: avoid redefining sds type,1,[],https://github.com/performancecopilot/pcp/pull/483,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/483,"On C < ISO 2011, the repeated typedef of the same identifier is invalid.
To make series.h compilable on pre-std=c11 such as rhel6, add a
#include ""sds.h"" and drop the duplicate typedef.","On C < ISO 2011, the repeated typedef of the same identifier is invalid.
To make series.h compilable on pre-std=c11 such as rhel6, add a
#include ""sds.h"" and drop the duplicate typedef.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,486,2018-05-16T11:04:50Z,2018-05-19T22:41:14Z,2018-05-19T22:41:14Z,MERGED,True,43,43,5,https://github.com/Andrii-hotfix,formatting strings: %I64i used instead of  %lld,4,[],https://github.com/performancecopilot/pcp/pull/486,https://github.com/Andrii-hotfix,1,https://github.com/performancecopilot/pcp/pull/486,formatting strings: %I64i used instead of  %lld,formatting strings: %I64i used instead of  %lld,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,486,2018-05-16T11:04:50Z,2018-05-19T22:41:14Z,2018-05-19T22:41:14Z,MERGED,True,43,43,5,https://github.com/Andrii-hotfix,formatting strings: %I64i used instead of  %lld,4,[],https://github.com/performancecopilot/pcp/pull/486,https://github.com/Andrii-hotfix,2,https://github.com/performancecopilot/pcp/pull/486#issuecomment-390391069,formatting strings: %I64i used instead of  %lld,"@kmcdonell  yes this is for Windows build.
Thank you for your advice. I'll make suggested changes today!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,486,2018-05-16T11:04:50Z,2018-05-19T22:41:14Z,2018-05-19T22:41:14Z,MERGED,True,43,43,5,https://github.com/Andrii-hotfix,formatting strings: %I64i used instead of  %lld,4,[],https://github.com/performancecopilot/pcp/pull/486,https://github.com/Andrii-hotfix,3,https://github.com/performancecopilot/pcp/pull/486#issuecomment-390434624,formatting strings: %I64i used instead of  %lld,"@kmcdonell thanks for the tips!
You have mentioned line 1371 at load.c (libpcp_web) but i guess you have meant line 1371 at query.c (libpcp_web). I've also added cast (__int64_t) at line 1366. Is that ok?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,487,2018-05-16T21:25:00Z,2018-05-17T10:42:53Z,2020-09-21T15:47:32Z,MERGED,True,524,158,15,https://github.com/andreasgerstmayr,"pmdabcc: add runqlat tool, don't create empty instances (histogram buckets), QA tests for biolatency and runqlat and QA refactorings",5,[],https://github.com/performancecopilot/pcp/pull/487,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/487,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,487,2018-05-16T21:25:00Z,2018-05-17T10:42:53Z,2020-09-21T15:47:32Z,MERGED,True,524,158,15,https://github.com/andreasgerstmayr,"pmdabcc: add runqlat tool, don't create empty instances (histogram buckets), QA tests for biolatency and runqlat and QA refactorings",5,[],https://github.com/performancecopilot/pcp/pull/487,https://github.com/myllynen,2,https://github.com/performancecopilot/pcp/pull/487#issuecomment-389749014,,"LGTM, thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,488,2018-05-21T00:19:08Z,2018-05-23T06:51:57Z,2020-09-21T15:47:34Z,MERGED,True,74,2,9,https://github.com/andreasgerstmayr,pmdabcc: label support,3,[],https://github.com/performancecopilot/pcp/pull/488,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/488,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,488,2018-05-21T00:19:08Z,2018-05-23T06:51:57Z,2020-09-21T15:47:34Z,MERGED,True,74,2,9,https://github.com/andreasgerstmayr,pmdabcc: label support,3,[],https://github.com/performancecopilot/pcp/pull/488,https://github.com/myllynen,2,https://github.com/performancecopilot/pcp/pull/488#issuecomment-390592347,,"Also, please make sure pylint runs cleanly (methods need comments at least) and prefer to keep coding style consistent (%s instead of format() and ""return {}"" instead ""return '{}'"" if possible). Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,488,2018-05-21T00:19:08Z,2018-05-23T06:51:57Z,2020-09-21T15:47:34Z,MERGED,True,74,2,9,https://github.com/andreasgerstmayr,pmdabcc: label support,3,[],https://github.com/performancecopilot/pcp/pull/488,https://github.com/andreasgerstmayr,3,https://github.com/performancecopilot/pcp/pull/488#issuecomment-390657997,,"sry about the pylint/PEP8, I'll add a check to travis (don't merge yet)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,488,2018-05-21T00:19:08Z,2018-05-23T06:51:57Z,2020-09-21T15:47:34Z,MERGED,True,74,2,9,https://github.com/andreasgerstmayr,pmdabcc: label support,3,[],https://github.com/performancecopilot/pcp/pull/488,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/488#issuecomment-390947353,,"I've updated the branch to reflect the changes
I'll create a separate PR for including pylint into travis as I have to update a few other files as well to not break the build immediately",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,488,2018-05-21T00:19:08Z,2018-05-23T06:51:57Z,2020-09-21T15:47:34Z,MERGED,True,74,2,9,https://github.com/andreasgerstmayr,pmdabcc: label support,3,[],https://github.com/performancecopilot/pcp/pull/488,https://github.com/myllynen,5,https://github.com/performancecopilot/pcp/pull/488#issuecomment-390947443,,"LGTM, thanks! (As pointed out, the methods need to return strings not dicts.)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,489,2018-05-21T00:58:24Z,2018-05-21T05:32:15Z,2020-09-21T15:47:33Z,MERGED,True,8,1,2,https://github.com/andreasgerstmayr,build: include python3-bpfcc as a dependency for debian,1,[],https://github.com/performancecopilot/pcp/pull/489,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/489,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,489,2018-05-21T00:58:24Z,2018-05-21T05:32:15Z,2020-09-21T15:47:33Z,MERGED,True,8,1,2,https://github.com/andreasgerstmayr,build: include python3-bpfcc as a dependency for debian,1,[],https://github.com/performancecopilot/pcp/pull/489,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/489#issuecomment-390544316,,"@KenJ I think its safe to treat this the same was as PMDA_PERFEVENT and other similar cases in debian/fixcontrol.master...?  (i.e. conditionally injected into debian/control)
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,489,2018-05-21T00:58:24Z,2018-05-21T05:32:15Z,2020-09-21T15:47:33Z,MERGED,True,8,1,2,https://github.com/andreasgerstmayr,build: include python3-bpfcc as a dependency for debian,1,[],https://github.com/performancecopilot/pcp/pull/489,https://github.com/kmcdonell,3,https://github.com/performancecopilot/pcp/pull/489#issuecomment-390554353,,"Sorry, clicked close instead of merge ... will merge when CI is done.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,490,2018-05-23T06:00:12Z,2018-05-23T06:51:57Z,2020-09-21T15:47:35Z,MERGED,True,9,9,5,https://github.com/andreasgerstmayr,pmdabcc: fix pylint warnings,1,[],https://github.com/performancecopilot/pcp/pull/490,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/490,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,491,2018-05-23T20:21:21Z,2018-05-25T22:32:25Z,2020-09-21T15:47:35Z,MERGED,True,485,41,22,https://github.com/andreasgerstmayr,pmdabcc: ext4dist,4,[],https://github.com/performancecopilot/pcp/pull/491,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/491,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,491,2018-05-23T20:21:21Z,2018-05-25T22:32:25Z,2020-09-21T15:47:35Z,MERGED,True,485,41,22,https://github.com/andreasgerstmayr,pmdabcc: ext4dist,4,[],https://github.com/performancecopilot/pcp/pull/491,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/491#issuecomment-392087320,,"@natoscott could you take a look at the makefile updates (updated makefile in modules, new makefile in fs dir) of the last commit? I'm not 100% sure if that's the PCP way to do it",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,491,2018-05-23T20:21:21Z,2018-05-25T22:32:25Z,2020-09-21T15:47:35Z,MERGED,True,485,41,22,https://github.com/andreasgerstmayr,pmdabcc: ext4dist,4,[],https://github.com/performancecopilot/pcp/pull/491,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/491#issuecomment-392204089,,@andihit those makefile changes look spot on.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,492,2018-05-28T14:37:12Z,2018-05-28T23:12:07Z,2020-09-21T15:47:36Z,MERGED,True,570,13,9,https://github.com/andreasgerstmayr, travis: add pylint for pmdabcc ,2,[],https://github.com/performancecopilot/pcp/pull/492,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/492,"using pylint from pip, as the version in ubuntu trusty (at travis) is outdated
if there are merge conflicts with pending patches from Marko, just ping me and I'll rebase","using pylint from pip, as the version in ubuntu trusty (at travis) is outdated
if there are merge conflicts with pending patches from Marko, just ping me and I'll rebase",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,493,2018-05-31T12:03:49Z,2018-06-01T00:09:05Z,2020-09-21T15:47:37Z,MERGED,True,668,0,9,https://github.com/andreasgerstmayr,pmdabcc: xfsdist and zfsdist,2,[],https://github.com/performancecopilot/pcp/pull/493,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/493,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,493,2018-05-31T12:03:49Z,2018-06-01T00:09:05Z,2020-09-21T15:47:37Z,MERGED,True,668,0,9,https://github.com/andreasgerstmayr,pmdabcc: xfsdist and zfsdist,2,[],https://github.com/performancecopilot/pcp/pull/493,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/493#issuecomment-393520055,,"I'll schedule the pid filtering option for the next release of PCP.
About the bitshift: there is a difference (see bpf_get_current_pid_tgid docs), but I'm also not sure what to use, as it differs from BCC tool to tool. Probably we should use FILTER_PID everywhere and add an option to the apply_pid_filter to use either the process id or thread group id (depending on the BCC tool).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,494,2018-05-31T12:37:13Z,2018-06-01T00:09:05Z,2020-09-21T15:47:39Z,MERGED,True,7,4,1,https://github.com/andreasgerstmayr,pmdabcc: order histogram instances ascending,1,[],https://github.com/performancecopilot/pcp/pull/494,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/494,"cosmetic change to get ascending sorted histogram buckets:
ext4 open latency distribution
    inst [0 or ""0-1""] value 140636
    inst [1 or ""2-3""] value 15512
    inst [2 or ""4-7""] value 696
    inst [3 or ""8-15""] value 106
    inst [4 or ""16-31""] value 285
    inst [5 or ""32-63""] value 87
    inst [6 or ""64-127""] value 27
    inst [7 or ""128-255""] value 11
    inst [8 or ""256-511""] value 11","cosmetic change to get ascending sorted histogram buckets:
ext4 open latency distribution
    inst [0 or ""0-1""] value 140636
    inst [1 or ""2-3""] value 15512
    inst [2 or ""4-7""] value 696
    inst [3 or ""8-15""] value 106
    inst [4 or ""16-31""] value 285
    inst [5 or ""32-63""] value 87
    inst [6 or ""64-127""] value 27
    inst [7 or ""128-255""] value 11
    inst [8 or ""256-511""] value 11",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,495,2018-05-31T12:47:38Z,2018-06-01T00:09:06Z,2020-09-21T15:47:39Z,MERGED,True,3,3,2,https://github.com/andreasgerstmayr,pmdabcc: rename runqlat metric name,1,[],https://github.com/performancecopilot/pcp/pull/495,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/495,"as bcc.kernel.all.runnable is inconsistent with the current kernel.all.runnable metric from PCP, I renamed it.
@natoscott do you have any better suggestions for the name?
The tool

measures the time a task spends waiting on a run queue for a turn on-CPU, and shows this time as a histogram. This time should be small, but a task may need to wait its turn due to CPU load.

(https://github.com/iovisor/bcc/blob/master/tools/runqlat.py)","as bcc.kernel.all.runnable is inconsistent with the current kernel.all.runnable metric from PCP, I renamed it.
@natoscott do you have any better suggestions for the name?
The tool

measures the time a task spends waiting on a run queue for a turn on-CPU, and shows this time as a histogram. This time should be small, but a task may need to wait its turn due to CPU load.

(https://github.com/iovisor/bcc/blob/master/tools/runqlat.py)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,495,2018-05-31T12:47:38Z,2018-06-01T00:09:06Z,2020-09-21T15:47:39Z,MERGED,True,3,3,2,https://github.com/andreasgerstmayr,pmdabcc: rename runqlat metric name,1,[],https://github.com/performancecopilot/pcp/pull/495,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/495#issuecomment-393715959,"as bcc.kernel.all.runnable is inconsistent with the current kernel.all.runnable metric from PCP, I renamed it.
@natoscott do you have any better suggestions for the name?
The tool

measures the time a task spends waiting on a run queue for a turn on-CPU, and shows this time as a histogram. This time should be small, but a task may need to wait its turn due to CPU load.

(https://github.com/iovisor/bcc/blob/master/tools/runqlat.py)",@andihit that name looks good to me.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,497,2018-05-31T14:52:56Z,2018-05-31T20:53:42Z,2020-09-21T15:47:41Z,MERGED,True,7,0,1,https://github.com/andreasgerstmayr,qa: check if bcc module is version 0.5.0+,1,[],https://github.com/performancecopilot/pcp/pull/497,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/497,"python BCC module doesn't have a __version__ attribute, therefore check for the DEBUG_BPF_REGISTER_STATE attribute (added in version 0.5.0)","python BCC module doesn't have a __version__ attribute, therefore check for the DEBUG_BPF_REGISTER_STATE attribute (added in version 0.5.0)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,498,2018-06-01T14:49:25Z,2018-06-01T23:48:48Z,2020-09-21T15:47:41Z,MERGED,True,10,2,2,https://github.com/andreasgerstmayr,"pmdabcc: disable ext4dist per default, add xfsdist and zfsdist sections",2,[],https://github.com/performancecopilot/pcp/pull/498,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/498,"ext4dist, xfsdist and zfsdist modules only work if the respective
filesystem kernel module is loaded, therefore disable all fs modules
per default","ext4dist, xfsdist and zfsdist modules only work if the respective
filesystem kernel module is loaded, therefore disable all fs modules
per default",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,499,2018-06-02T03:46:25Z,2018-06-05T01:23:08Z,2018-06-05T01:23:08Z,MERGED,True,208,2,5,https://github.com/prajwalchalla,Integrate Libuv into libpcp_web,2,[],https://github.com/performancecopilot/pcp/pull/499,https://github.com/prajwalchalla,1,https://github.com/performancecopilot/pcp/pull/499,Added libuv and Redis Async Commands for pmproxy2,Added libuv and Redis Async Commands for pmproxy2,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,501,2018-06-04T14:36:47Z,2018-06-10T04:35:33Z,2018-06-10T04:35:33Z,MERGED,True,2,2,1,https://github.com/wcohen,Correct the semantics for proc_fs_nfsd.th_cnt and proc_fs_nfsd.pool_cnt,1,[],https://github.com/performancecopilot/pcp/pull/501,https://github.com/wcohen,1,https://github.com/performancecopilot/pcp/pull/501,"The proc_fs_nfsd.th_cnt and proc_fs_nfsd.pool_cnt were incorrectly
configured with counter semantics.  Both of the metrics should have
instanteneous semantics.","The proc_fs_nfsd.th_cnt and proc_fs_nfsd.pool_cnt were incorrectly
configured with counter semantics.  Both of the metrics should have
instanteneous semantics.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,501,2018-06-04T14:36:47Z,2018-06-10T04:35:33Z,2018-06-10T04:35:33Z,MERGED,True,2,2,1,https://github.com/wcohen,Correct the semantics for proc_fs_nfsd.th_cnt and proc_fs_nfsd.pool_cnt,1,[],https://github.com/performancecopilot/pcp/pull/501,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/501#issuecomment-394556631,"The proc_fs_nfsd.th_cnt and proc_fs_nfsd.pool_cnt were incorrectly
configured with counter semantics.  Both of the metrics should have
instanteneous semantics.","Thanks Will.  Changes in metric metadata need to be accompanied by pmlogconf(1) rules in case we have users recording these metrics with pmlogger(1) already.  For reference, see Mark's commit 362a6b2.
If any help is needed there, please lemme know.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,503,2018-06-05T12:54:55Z,2018-06-06T03:55:09Z,2020-09-21T15:47:42Z,MERGED,True,69,29,5,https://github.com/andreasgerstmayr,"qa: use sparse file for ext4dist, xfsdist, and zfsdist",1,[],https://github.com/performancecopilot/pcp/pull/503,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/503,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,505,2018-06-11T00:02:20Z,2018-06-11T03:38:26Z,2020-09-21T15:48:14Z,MERGED,True,255,47,6,https://github.com/andreasgerstmayr,"pmdabcc: tcplife: track sessions independently, add more metrics + QA",1,[],https://github.com/performancecopilot/pcp/pull/505,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/505,"Updated tcplife to track each TCP session independently of the process and export all metrics visible in the BCC tcplife tool. The session_count configuration option controls how many TCP sessions should be stored in the cache.
@natoscott all instance values will never change, as they show information from already closed TCP sessions, therefore PM_SEM_DISCRETE is the correct semantic for all metric values I assume?
Screenshot of the corresponding vector widget:

(I'll rename RADDR/RPORT to DADDR/DPORT in the vector widget to keep it consistent with the BPF code and manpage of tcplife)","Updated tcplife to track each TCP session independently of the process and export all metrics visible in the BCC tcplife tool. The session_count configuration option controls how many TCP sessions should be stored in the cache.
@natoscott all instance values will never change, as they show information from already closed TCP sessions, therefore PM_SEM_DISCRETE is the correct semantic for all metric values I assume?
Screenshot of the corresponding vector widget:

(I'll rename RADDR/RPORT to DADDR/DPORT in the vector widget to keep it consistent with the BPF code and manpage of tcplife)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,505,2018-06-11T00:02:20Z,2018-06-11T03:38:26Z,2020-09-21T15:48:14Z,MERGED,True,255,47,6,https://github.com/andreasgerstmayr,"pmdabcc: tcplife: track sessions independently, add more metrics + QA",1,[],https://github.com/performancecopilot/pcp/pull/505,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/505#issuecomment-396113806,"Updated tcplife to track each TCP session independently of the process and export all metrics visible in the BCC tcplife tool. The session_count configuration option controls how many TCP sessions should be stored in the cache.
@natoscott all instance values will never change, as they show information from already closed TCP sessions, therefore PM_SEM_DISCRETE is the correct semantic for all metric values I assume?
Screenshot of the corresponding vector widget:

(I'll rename RADDR/RPORT to DADDR/DPORT in the vector widget to keep it consistent with the BPF code and manpage of tcplife)","@andihit yep, I think it makes sense to use discrete here.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,506,2018-06-11T00:18:39Z,2018-06-11T03:38:26Z,2020-09-21T15:48:14Z,MERGED,True,2,1,1,https://github.com/andreasgerstmayr,qa: 1154: check for zpool tool and ZFS kernel module,1,[],https://github.com/performancecopilot/pcp/pull/506,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/506,check for zpool tool and presence of the ZFS kernel module,check for zpool tool and presence of the ZFS kernel module,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,507,2018-06-11T16:22:03Z,2018-06-12T00:22:12Z,2020-09-21T15:48:16Z,MERGED,True,25,33,3,https://github.com/andreasgerstmayr,"pmdabcc: fix tcplife dport, styling, recycle old instances",2,[],https://github.com/performancecopilot/pcp/pull/507,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/507,"correct fix for the destination port (see iovisor/bcc#1813), buffer_page_count power of 2 check and styling updates
recycle old instances by using the row number as instance key (0 = most recent TCP session)
example:
bcc.proc.io.net.tcp.comm PMID: 149.3.1 [command]
    Data Type: string  InDom: 149.3 0x25400003
    Semantics: instant  Units: none
Help:
command
    inst [0 or ""0""] value ""code""
    inst [1 or ""1""] value ""code""
    inst [2 or ""2""] value ""NetworkManager""
    inst [3 or ""3""] value ""curl""
    inst [4 or ""4""] value ""curl""

bcc.proc.io.net.tcp.pid PMID: 149.3.0 [PID]
    Data Type: 32-bit unsigned int  InDom: 149.3 0x25400003
    Semantics: instant  Units: none
Help:
PID
    inst [0 or ""0""] value 8621
    inst [1 or ""1""] value 8621
    inst [2 or ""2""] value 1247
    inst [3 or ""3""] value 3850
    inst [4 or ""4""] value 3810","correct fix for the destination port (see iovisor/bcc#1813), buffer_page_count power of 2 check and styling updates
recycle old instances by using the row number as instance key (0 = most recent TCP session)
example:
bcc.proc.io.net.tcp.comm PMID: 149.3.1 [command]
    Data Type: string  InDom: 149.3 0x25400003
    Semantics: instant  Units: none
Help:
command
    inst [0 or ""0""] value ""code""
    inst [1 or ""1""] value ""code""
    inst [2 or ""2""] value ""NetworkManager""
    inst [3 or ""3""] value ""curl""
    inst [4 or ""4""] value ""curl""

bcc.proc.io.net.tcp.pid PMID: 149.3.0 [PID]
    Data Type: 32-bit unsigned int  InDom: 149.3 0x25400003
    Semantics: instant  Units: none
Help:
PID
    inst [0 or ""0""] value 8621
    inst [1 or ""1""] value 8621
    inst [2 or ""2""] value 1247
    inst [3 or ""3""] value 3850
    inst [4 or ""4""] value 3810",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,508,2018-06-12T05:56:46Z,2018-06-12T07:07:03Z,2018-06-12T07:07:03Z,MERGED,True,59,55,5,https://github.com/Andrii-hotfix,Windows native build changes,2,[],https://github.com/performancecopilot/pcp/pull/508,https://github.com/Andrii-hotfix,1,https://github.com/performancecopilot/pcp/pull/508,Changes required by native build process on Windows,Changes required by native build process on Windows,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,508,2018-06-12T05:56:46Z,2018-06-12T07:07:03Z,2018-06-12T07:07:03Z,MERGED,True,59,55,5,https://github.com/Andrii-hotfix,Windows native build changes,2,[],https://github.com/performancecopilot/pcp/pull/508,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/508#issuecomment-396485801,Changes required by native build process on Windows,"@kmcdonell I have been chatting to @Andrii-hotfix & working through these issues on #windows on slack - just FYI.
The git installer Windows SDK creates a /proc for itself for some reason :( - seems to be a new development, and breaks the build - not sure we can sensibly configure this anymore as a result.
I believe the whitespace cleanups will be automated git tooling (probably on-by-default in git client on Windows) FWIW.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,509,2018-06-12T22:58:36Z,2018-06-12T23:06:00Z,2018-06-12T23:06:00Z,CLOSED,False,2,2,2,https://github.com/Andrii-hotfix,pmda.h changes for static build,1,[],https://github.com/performancecopilot/pcp/pull/509,https://github.com/Andrii-hotfix,1,https://github.com/performancecopilot/pcp/pull/509,*_INTERNAL replaced with *_STATIC,*_INTERNAL replaced with *_STATIC,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,510,2018-06-15T14:35:44Z,2018-06-18T05:28:27Z,2020-09-21T15:48:16Z,MERGED,True,498,36,10,https://github.com/andreasgerstmayr,pmdabcc: execsnoop,1,[],https://github.com/performancecopilot/pcp/pull/510,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/510,execsnoop bcc tool + QA + some refactorings,execsnoop bcc tool + QA + some refactorings,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,510,2018-06-15T14:35:44Z,2018-06-18T05:28:27Z,2020-09-21T15:48:16Z,MERGED,True,498,36,10,https://github.com/andreasgerstmayr,pmdabcc: execsnoop,1,[],https://github.com/performancecopilot/pcp/pull/510,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/510#issuecomment-397691865,execsnoop bcc tool + QA + some refactorings,"I've increased the timeout in _pmdabcc_wait_for_value to 30s (from 10s), works now on travis
but I'm not 100% happy with that solution, 10s should be more than enough for the first value to arrive from the poller thread",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,511,2018-06-20T15:40:32Z,2018-06-20T19:34:47Z,2018-06-20T19:34:47Z,CLOSED,False,798,4,11,https://github.com/andreasgerstmayr,pmdabcc: tcpretrans module,2,[],https://github.com/performancecopilot/pcp/pull/511,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/511,"add the tcpretrans module to the BCC PMDA
including 2 QA tests for the tracing mode and counting mode of the module","add the tcpretrans module to the BCC PMDA
including 2 QA tests for the tracing mode and counting mode of the module",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,511,2018-06-20T15:40:32Z,2018-06-20T19:34:47Z,2018-06-20T19:34:47Z,CLOSED,False,798,4,11,https://github.com/andreasgerstmayr,pmdabcc: tcpretrans module,2,[],https://github.com/performancecopilot/pcp/pull/511,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/511#issuecomment-398812936,"add the tcpretrans module to the BCC PMDA
including 2 QA tests for the tracing mode and counting mode of the module","seems like the test for execsnoop isn't very stable :/
the 2 new tests for tcpretrans ran successfully",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,512,2018-06-20T21:17:03Z,2018-06-21T20:54:43Z,2018-06-21T20:54:43Z,MERGED,True,791,1,7,https://github.com/nagarevaibhav,Adding support for -Zz flag. ,2,[],https://github.com/performancecopilot/pcp/pull/512,https://github.com/nagarevaibhav,1,https://github.com/performancecopilot/pcp/pull/512,"Adding support for -Zz flag. The -Z option changes the timezone to timezone in the format of the environment variable TZ. The -z option changes the reporting timezone to the local timezone as the host that is the source of the performance  metrics, as identified via either the -h or -a options.","Adding support for -Zz flag. The -Z option changes the timezone to timezone in the format of the environment variable TZ. The -z option changes the reporting timezone to the local timezone as the host that is the source of the performance  metrics, as identified via either the -h or -a options.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,512,2018-06-20T21:17:03Z,2018-06-21T20:54:43Z,2018-06-21T20:54:43Z,MERGED,True,791,1,7,https://github.com/nagarevaibhav,Adding support for -Zz flag. ,2,[],https://github.com/performancecopilot/pcp/pull/512,https://github.com/nkshirsagar,2,https://github.com/performancecopilot/pcp/pull/512#issuecomment-398940989,"Adding support for -Zz flag. The -Z option changes the timezone to timezone in the format of the environment variable TZ. The -z option changes the reporting timezone to the local timezone as the host that is the source of the performance  metrics, as identified via either the -h or -a options.",I guess you need to change the iostat reference in the man page to pidstat ?,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,512,2018-06-20T21:17:03Z,2018-06-21T20:54:43Z,2018-06-21T20:54:43Z,MERGED,True,791,1,7,https://github.com/nagarevaibhav,Adding support for -Zz flag. ,2,[],https://github.com/performancecopilot/pcp/pull/512,https://github.com/nagarevaibhav,3,https://github.com/performancecopilot/pcp/pull/512#issuecomment-399090988,"Adding support for -Zz flag. The -Z option changes the timezone to timezone in the format of the environment variable TZ. The -z option changes the reporting timezone to the local timezone as the host that is the source of the performance  metrics, as identified via either the -h or -a options.","Hello @nkshirsagar  , I have changed the pcp-iostat reference in the man page to pcp-pidstat.
Thank you",True,{'THUMBS_UP': ['https://github.com/nkshirsagar']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,512,2018-06-20T21:17:03Z,2018-06-21T20:54:43Z,2018-06-21T20:54:43Z,MERGED,True,791,1,7,https://github.com/nagarevaibhav,Adding support for -Zz flag. ,2,[],https://github.com/performancecopilot/pcp/pull/512,https://github.com/nkshirsagar,4,https://github.com/performancecopilot/pcp/pull/512#issuecomment-399125020,"Adding support for -Zz flag. The -Z option changes the timezone to timezone in the format of the environment variable TZ. The -z option changes the reporting timezone to the local timezone as the host that is the source of the performance  metrics, as identified via either the -h or -a options.",looks good to me,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,514,2018-06-25T14:12:45Z,2018-07-10T02:44:07Z,2020-09-21T15:49:03Z,MERGED,True,422,4,9,https://github.com/andreasgerstmayr, pmdabcc: tcpretrans module + QA ,3,[],https://github.com/performancecopilot/pcp/pull/514,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/514,tcpretrans module + QA,tcpretrans module + QA,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,515,2018-06-25T17:28:41Z,2018-06-26T22:39:29Z,2018-06-26T22:39:29Z,CLOSED,False,29,5,1,https://github.com/Andrii-hotfix,pmns changes for Windows native build,1,[],https://github.com/performancecopilot/pcp/pull/515,https://github.com/Andrii-hotfix,1,https://github.com/performancecopilot/pcp/pull/515,"These changes allows to get pmnsutil.o, pmnsmerge.o, pmnsdel.o.","These changes allows to get pmnsutil.o, pmnsmerge.o, pmnsdel.o.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,515,2018-06-25T17:28:41Z,2018-06-26T22:39:29Z,2018-06-26T22:39:29Z,CLOSED,False,29,5,1,https://github.com/Andrii-hotfix,pmns changes for Windows native build,1,[],https://github.com/performancecopilot/pcp/pull/515,https://github.com/Andrii-hotfix,2,https://github.com/performancecopilot/pcp/pull/515#issuecomment-400485627,"These changes allows to get pmnsutil.o, pmnsmerge.o, pmnsdel.o.","@kmcdonell Ok, got that. Thanks for the explanations. Looks more like I'm missing the right direction :)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,516,2018-06-27T06:25:28Z,2018-07-10T02:44:08Z,2020-09-21T15:49:01Z,MERGED,True,462,60,11,https://github.com/andreasgerstmayr,"pmdabcc: renamed old biotop to bioperpid, add new biotop tool",4,[],https://github.com/performancecopilot/pcp/pull/516,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/516,"bioperpid: cumulates block I/O per pid
biotop: fetches block device I/O activity every X seconds and sorts it (useful for displaying in Vector)","bioperpid: cumulates block I/O per pid
biotop: fetches block device I/O activity every X seconds and sorts it (useful for displaying in Vector)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,516,2018-06-27T06:25:28Z,2018-07-10T02:44:08Z,2020-09-21T15:49:01Z,MERGED,True,462,60,11,https://github.com/andreasgerstmayr,"pmdabcc: renamed old biotop to bioperpid, add new biotop tool",4,[],https://github.com/performancecopilot/pcp/pull/516,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/516#issuecomment-401022627,"bioperpid: cumulates block I/O per pid
biotop: fetches block device I/O activity every X seconds and sorts it (useful for displaying in Vector)","failed test is 1156 (execsnoop), last commit in #514 disables this test on old kernels (< 4.7)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,517,2018-06-28T15:38:35Z,2018-07-10T02:44:08Z,2020-09-21T15:49:02Z,MERGED,True,246,1,2,https://github.com/andreasgerstmayr,pmdabcc: restore old tcplife module as tcpperpid,1,[],https://github.com/performancecopilot/pcp/pull/517,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/517,restore old tcplife module as tcpperpid (count tcp tx/rx per pid and purges dead PIDs),restore old tcplife module as tcpperpid (count tcp tx/rx per pid and purges dead PIDs),True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,518,2018-07-04T07:08:02Z,2018-07-10T02:44:08Z,2020-09-21T15:49:02Z,MERGED,True,494,1,7,https://github.com/andreasgerstmayr,pmdabcc: tcptop module + QA,1,[],https://github.com/performancecopilot/pcp/pull/518,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/518,adds the tcptop tool to the BCC PMDA,adds the tcptop tool to the BCC PMDA,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,519,2018-07-09T08:01:48Z,2018-07-09T09:41:47Z,2018-07-09T09:41:47Z,MERGED,True,5,0,1,https://github.com/parthbeingparth,Fixed file name for libpcp_web,1,[],https://github.com/performancecopilot/pcp/pull/519,https://github.com/parthbeingparth,1,https://github.com/performancecopilot/pcp/pull/519,Changed GNUmakefile for libpcp_web to fix file name.,Changed GNUmakefile for libpcp_web to fix file name.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,520,2018-07-10T10:54:26Z,2018-07-10T20:11:11Z,2020-09-21T15:49:00Z,MERGED,True,24,8,7,https://github.com/andreasgerstmayr,pmdabcc: fix merge leftover in bcc.conf,3,[],https://github.com/performancecopilot/pcp/pull/520,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/520,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,523,2018-07-11T20:14:32Z,2018-07-11T23:28:17Z,2020-09-21T15:49:26Z,MERGED,True,56,36,8,https://github.com/andreasgerstmayr,"pmdabcc: qa fixes, better debug output",2,[],https://github.com/performancecopilot/pcp/pull/523,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/523,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,524,2018-07-13T20:51:41Z,2018-07-13T21:09:31Z,2018-07-13T21:09:31Z,MERGED,True,30,30,1,https://github.com/prajwalchalla,fix for qa 1211,1,[],https://github.com/performancecopilot/pcp/pull/524,https://github.com/prajwalchalla,1,https://github.com/performancecopilot/pcp/pull/524,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,525,2018-07-17T16:33:49Z,2018-07-29T00:46:09Z,2020-09-21T15:49:23Z,MERGED,True,593,4,13,https://github.com/andreasgerstmayr,"pmdabcc: profile module and store callback, python: release GIL",4,[],https://github.com/performancecopilot/pcp/pull/525,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/525,"The profile module records stack traces at a specific interval. It should be used in combination with Vector, which will display them as flame graphs:

This PR also includes a commit which releases the GIL while the PMDA is waiting for new PDUs, otherwise the GIL would lock out background threads.","The profile module records stack traces at a specific interval. It should be used in combination with Vector, which will display them as flame graphs:

This PR also includes a commit which releases the GIL while the PMDA is waiting for new PDUs, otherwise the GIL would lock out background threads.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,525,2018-07-17T16:33:49Z,2018-07-29T00:46:09Z,2020-09-21T15:49:23Z,MERGED,True,593,4,13,https://github.com/andreasgerstmayr,"pmdabcc: profile module and store callback, python: release GIL",4,[],https://github.com/performancecopilot/pcp/pull/525,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/525#issuecomment-406070141,"The profile module records stack traces at a specific interval. It should be used in combination with Vector, which will display them as flame graphs:

This PR also includes a commit which releases the GIL while the PMDA is waiting for new PDUs, otherwise the GIL would lock out background threads.","don't merge yet, @goodwinos found a bug with the GIL commit: when pmcd is sent a SIGTERM, all the python PMDAs end up exiting with a segfault",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,525,2018-07-17T16:33:49Z,2018-07-29T00:46:09Z,2020-09-21T15:49:23Z,MERGED,True,593,4,13,https://github.com/andreasgerstmayr,"pmdabcc: profile module and store callback, python: release GIL",4,[],https://github.com/performancecopilot/pcp/pull/525,https://github.com/fche,3,https://github.com/performancecopilot/pcp/pull/525#issuecomment-407061668,"The profile module records stack traces at a specific interval. It should be used in combination with Vector, which will display them as flame graphs:

This PR also includes a commit which releases the GIL while the PMDA is waiting for new PDUs, otherwise the GIL would lock out background threads.","when pmcd is sent a SIGTERM, all the python PMDAs end up exiting with a segfault

That's probably because in the case of a SIGTERM (or other error), __pmdaMainPDU returns an error rc before giving the ""check"" callback a call.  Via pmdaMain, this gives control back to python without having restored the thread_state.  It may be enough to add a check_callback call to pmda_dispatch after its call to pmdaMain.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,525,2018-07-17T16:33:49Z,2018-07-29T00:46:09Z,2020-09-21T15:49:23Z,MERGED,True,593,4,13,https://github.com/andreasgerstmayr,"pmdabcc: profile module and store callback, python: release GIL",4,[],https://github.com/performancecopilot/pcp/pull/525,https://github.com/goodwinos,4,https://github.com/performancecopilot/pcp/pull/525#issuecomment-407374729,"The profile module records stack traces at a specific interval. It should be used in combination with Vector, which will display them as flame graphs:

This PR also includes a commit which releases the GIL while the PMDA is waiting for new PDUs, otherwise the GIL would lock out background threads.","Hi Frank, that is a spot on suggestion - if/when pmdaMain returns in pmda_dispatch(), calling check_callback seems to be working well .. I'm running with this patch in QA overnight and will likely commit tomorrow.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,526,2018-07-18T07:59:31Z,2018-07-19T06:42:30Z,2018-08-15T07:35:38Z,MERGED,True,1,1,1,https://github.com/yuokada126,qa: check-vm: update file name of python3 bcc RPM package,1,[],https://github.com/performancecopilot/pcp/pull/526,https://github.com/yuokada126,1,https://github.com/performancecopilot/pcp/pull/526,"qa/admin/check-vm assumes python3-bcc is not installed, even though it is installed.
$ qa/admin/check-vm
Missing: /usr/lib*/python3./-packages/bcc.py [python3-bcc or python3-bpfcc (build optional)]
$ rpm -ql python3-bcc
/usr/lib/python3.6/site-packages/bcc
/usr/lib/python3.6/site-packages/bcc-0.6.0-py3.6.egg-info
/usr/lib/python3.6/site-packages/bcc/init.py
/usr/lib/python3.6/site-packages/bcc/pycache
/usr/lib/python3.6/site-packages/bcc/pycache/init.cpython-36.opt-1.pyc
/usr/lib/python3.6/site-packages/bcc/pycache/init.cpython-36.pyc
Updated the previous file name to existing one, and deleted python3-bpfcc
because there seems to be no such RPM package.","qa/admin/check-vm assumes python3-bcc is not installed, even though it is installed.
$ qa/admin/check-vm
Missing: /usr/lib*/python3./-packages/bcc.py [python3-bcc or python3-bpfcc (build optional)]
$ rpm -ql python3-bcc
/usr/lib/python3.6/site-packages/bcc
/usr/lib/python3.6/site-packages/bcc-0.6.0-py3.6.egg-info
/usr/lib/python3.6/site-packages/bcc/init.py
/usr/lib/python3.6/site-packages/bcc/pycache
/usr/lib/python3.6/site-packages/bcc/pycache/init.cpython-36.opt-1.pyc
/usr/lib/python3.6/site-packages/bcc/pycache/init.cpython-36.pyc
Updated the previous file name to existing one, and deleted python3-bpfcc
because there seems to be no such RPM package.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,527,2018-07-18T08:34:22Z,2018-07-19T06:42:30Z,2020-09-21T15:49:25Z,MERGED,True,30,9,13,https://github.com/andreasgerstmayr,pmdabcc: add attribution to the author of each BCC tool,1,[],https://github.com/performancecopilot/pcp/pull/527,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/527,"imho we should also include attribution to the original author in the header of each BCC PMDA module (where appropriate), as quite a few lines of python code are copied and adapted from the original BCC tool","imho we should also include attribution to the original author in the header of each BCC PMDA module (where appropriate), as quite a few lines of python code are copied and adapted from the original BCC tool",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,528,2018-07-18T12:41:49Z,2018-07-19T06:42:30Z,2020-09-21T15:49:24Z,MERGED,True,177,138,13,https://github.com/andreasgerstmayr,"pmdabcc: move module options description to bcc.conf, add short description of each module",1,[],https://github.com/performancecopilot/pcp/pull/528,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/528,Users shouldn't have to look into the source code of each module to get a description of the configuration options - therefore I moved them to bcc.conf (and grouped the modules + added a short description to each module as suggested by @myllynen),Users shouldn't have to look into the source code of each module to get a description of the configuration options - therefore I moved them to bcc.conf (and grouped the modules + added a short description to each module as suggested by @myllynen),True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,528,2018-07-18T12:41:49Z,2018-07-19T06:42:30Z,2020-09-21T15:49:24Z,MERGED,True,177,138,13,https://github.com/andreasgerstmayr,"pmdabcc: move module options description to bcc.conf, add short description of each module",1,[],https://github.com/performancecopilot/pcp/pull/528,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/528#issuecomment-405918234,Users shouldn't have to look into the source code of each module to get a description of the configuration options - therefore I moved them to bcc.conf (and grouped the modules + added a short description to each module as suggested by @myllynen),this commit also includes the description for the new profile tool (#525) - for the merge conflict please use bcc.conf from this commit and ignore the changes to bcc.conf in #525,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,529,2018-07-24T22:45:59Z,2018-07-25T07:15:23Z,2018-07-25T07:15:23Z,MERGED,True,3,3,1,https://github.com/Andrii-hotfix,libpcp_web: fix MAXNAMLEN -> MAXNAMELEN,1,[],https://github.com/performancecopilot/pcp/pull/529,https://github.com/Andrii-hotfix,1,https://github.com/performancecopilot/pcp/pull/529,It's a simple typo I guess. This change helps to build libpcp_web.,It's a simple typo I guess. This change helps to build libpcp_web.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,530,2018-07-25T00:54:27Z,2018-07-25T07:15:23Z,2018-08-15T07:35:35Z,MERGED,True,1,1,1,https://github.com/natoscott,pcp-dstat: use PMAPI context to get hostname,1,[],https://github.com/performancecopilot/pcp/pull/530,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/530,(QA will follow shortly),(QA will follow shortly),True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,531,2018-07-25T15:39:44Z,2018-07-30T12:35:29Z,2018-07-30T12:35:29Z,CLOSED,False,1778,14,9,https://github.com/nagarevaibhav,pcp-pidstat: Adding support for -l flag.,2,[],https://github.com/performancecopilot/pcp/pull/531,https://github.com/nagarevaibhav,1,https://github.com/performancecopilot/pcp/pull/531,"""Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message""","""Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message""",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,531,2018-07-25T15:39:44Z,2018-07-30T12:35:29Z,2018-07-30T12:35:29Z,CLOSED,False,1778,14,9,https://github.com/nagarevaibhav,pcp-pidstat: Adding support for -l flag.,2,[],https://github.com/performancecopilot/pcp/pull/531,https://github.com/nkshirsagar,2,https://github.com/performancecopilot/pcp/pull/531#issuecomment-407963960,"""Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message""","githubteacher/github-for-developers-sept-2015#648
I think you just needed to do a git pull in your (master) branch to get the new pcp stuff that might have gone into pcp-master after you'd forked it, before committing and adding your changes ?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,531,2018-07-25T15:39:44Z,2018-07-30T12:35:29Z,2018-07-30T12:35:29Z,CLOSED,False,1778,14,9,https://github.com/nagarevaibhav,pcp-pidstat: Adding support for -l flag.,2,[],https://github.com/performancecopilot/pcp/pull/531,https://github.com/nkshirsagar,3,https://github.com/performancecopilot/pcp/pull/531#issuecomment-408751057,"""Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message""","mgoodwin: mgoodwin@~/src/pcp/src/pcp/pidstat[nagarevaibhav-master]$ ./pcp-pidstat.py -l
mgoodwin: pcp-pidstat.py: invalid option -- 'l'
mgoodwin:  have I missed something here? Doesn't seem to work??
mgoodwin:  the other thing that will need to be done is to measure the logging space overheads of adding the additional metric proc.psinfo.psargs to src/pmlogconf/zeroconf/pidstat
mgoodwin:  has that been measured? Some processes e.g. chrome have very long arguments
nkshirsa:  ok there's a typo in there
nkshirsa:          pmapi.pmOptions.init(self,""a:s:t:G:IU::p:RrkV?:f:B:l"")
nkshirsa:          pmapi.pmOptions.init(self,""a:s:t:G:IU::p:RrkVZ:z?:f:B:"")
nkshirsa:  second one seems to override the first one, need to remove that second line not sure how it got in there",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,531,2018-07-25T15:39:44Z,2018-07-30T12:35:29Z,2018-07-30T12:35:29Z,CLOSED,False,1778,14,9,https://github.com/nagarevaibhav,pcp-pidstat: Adding support for -l flag.,2,[],https://github.com/performancecopilot/pcp/pull/531,https://github.com/nagarevaibhav,4,https://github.com/performancecopilot/pcp/pull/531#issuecomment-408848133,"""Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message""","Resubmitting the commit, thus closing this request.
Thank you",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,533,2018-07-28T07:57:05Z,2018-07-29T05:12:39Z,2018-07-29T05:24:30Z,MERGED,True,1031,32,10,https://github.com/guillemlp,Add mmv3 support,24,[],https://github.com/performancecopilot/pcp/pull/533,https://github.com/guillemlp,1,https://github.com/performancecopilot/pcp/pull/533,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,533,2018-07-28T07:57:05Z,2018-07-29T05:12:39Z,2018-07-29T05:24:30Z,MERGED,True,1031,32,10,https://github.com/guillemlp,Add mmv3 support,24,[],https://github.com/performancecopilot/pcp/pull/533,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/533#issuecomment-408653003,,"@guillemlp looks good!  I've tweaked a few things - please review my changes, and some followup questions on slack.  Here's the general notes I took while reading the code ...
qa:

some commented out sections in the new test sources (needs cleanup)
need some additional test cases I think:
o  new test program qa/src/mmv3_labels.c to create metrics, indoms,
etc with labels for each of the various types, & optional flag.
o  new qa/xxxx scripts using the new test programs (see qa/new) -
see tests like qa/{649,648,647,646)

docs:

new man page needed for mmv_stats_registry(3) and the other APIs
put a small deprecation note in man/man3/mmv_stats_init.3 as well

libpcp_mmv:

calloc returns zeroed memory, no need to set registry fields to zero
I added a common check routine for labels - can add some more checks
in here still (as noted)
optional labels - I've added this to the API, we forgot about it :)

pmdammv:

in the label callbacks, I tweaked the test for 'type' to use logical
AND (bitwise) as the optional flag may also be set

cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,534,2018-07-30T13:35:45Z,2018-08-10T08:20:05Z,2018-08-10T08:20:05Z,MERGED,True,1775,14,9,https://github.com/nagarevaibhav,pcp-pidstat: Adding support for -l flag.,2,[],https://github.com/performancecopilot/pcp/pull/534,https://github.com/nagarevaibhav,1,https://github.com/performancecopilot/pcp/pull/534,Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message,Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,534,2018-07-30T13:35:45Z,2018-08-10T08:20:05Z,2018-08-10T08:20:05Z,MERGED,True,1775,14,9,https://github.com/nagarevaibhav,pcp-pidstat: Adding support for -l flag.,2,[],https://github.com/performancecopilot/pcp/pull/534,https://github.com/nagarevaibhav,2,https://github.com/performancecopilot/pcp/pull/534#issuecomment-408889743,Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message,"Size comparison requested by Mark:
Identified log file without 'proc.psinfo.psargs' in my system
root@localhost pidstat]#./pcp-pidstat.py -l -a /var/log/pcp/pmlogger/localhost.localdomain/20180716
Error: not all required metrics are available
Missing ['proc.psinfo.psargs']
Comparison of compressed files
Without 'proc.psinfo.psargs'
[root@localhost pidstat]# ls -lh /var/log/pcp/pmlogger/localhost.localdomain/20180716*
-rw-r--r--. 1 pcp pcp 1.9M Jul 17 20:30 /var/log/pcp/pmlogger/localhost.localdomain/20180716.0.xz
-rw-r--r--. 1 pcp pcp  21K Jul 17 20:30 /var/log/pcp/pmlogger/localhost.localdomain/20180716.index
-rw-r--r--. 1 pcp pcp  62K Jul 17 20:30 /var/log/pcp/pmlogger/localhost.localdomain/20180716.meta.xz
With 'proc.psinfo.psargs'
[root@localhost pidstat]# ls -lh /var/log/pcp/pmlogger/localhost.localdomain/20180718*
-rw-r--r--. 1 pcp pcp  12M Jul 19 15:33 /var/log/pcp/pmlogger/localhost.localdomain/20180718.0.xz
-rw-r--r--. 1 pcp pcp 131K Jul 19 15:33 /var/log/pcp/pmlogger/localhost.localdomain/20180718.index
-rw-r--r--. 1 pcp pcp 110K Jul 19 15:33 /var/log/pcp/pmlogger/localhost.localdomain/20180718.meta.xz",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,534,2018-07-30T13:35:45Z,2018-08-10T08:20:05Z,2018-08-10T08:20:05Z,MERGED,True,1775,14,9,https://github.com/nagarevaibhav,pcp-pidstat: Adding support for -l flag.,2,[],https://github.com/performancecopilot/pcp/pull/534,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/534#issuecomment-409098565,Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message,"@nagarevaibhav thanks for the update, and the space increment testing. That's quite a large increment, bigger than I would have expected. Are the archives covering the same time duration? You can use ""pmdumplog -L archivename"" to examine the archive labels and see the start and finish times for each archive. Otherwise, perhaps there were a lot more processes running and/or forked durign the time when the second archive was captured??",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,534,2018-07-30T13:35:45Z,2018-08-10T08:20:05Z,2018-08-10T08:20:05Z,MERGED,True,1775,14,9,https://github.com/nagarevaibhav,pcp-pidstat: Adding support for -l flag.,2,[],https://github.com/performancecopilot/pcp/pull/534,https://github.com/nagarevaibhav,4,https://github.com/performancecopilot/pcp/pull/534#issuecomment-409224522,Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message,"@goodwinos
Are the archives covering the same time duration?
--> Based on the outputs of the command you gave. No, The archive without 'proc.psinfo.psargs' has been recorded for much smaller time thus it is small in size, than the one with 'proc.psinfo.psargs' which has data for entire day.
Without 'proc.psinfo.psargs':
#pmdumplog -L 20180716.0.xz
Log Label (Log Format Version 2)
Performance metrics from host localhost.localdomain
commencing Mon Jul 16 19:57:10.892621 2018
ending          Mon Jul 16 22:45:25.285392 2018
Archive timezone: IST-5:30
PID for pmlogger: 13207
With 'proc.psinfo.psargs':
#pmdumplog -L 20180718.0.xz
Log Label (Log Format Version 2)
Performance metrics from host localhost.localdomain
commencing Wed Jul 18 00:10:12.164343 2018
ending           Wed Jul 18 23:04:11.763938 2018
Archive timezone: IST-5:30
PID for pmlogger: 9414",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,534,2018-07-30T13:35:45Z,2018-08-10T08:20:05Z,2018-08-10T08:20:05Z,MERGED,True,1775,14,9,https://github.com/nagarevaibhav,pcp-pidstat: Adding support for -l flag.,2,[],https://github.com/performancecopilot/pcp/pull/534,https://github.com/goodwinos,5,https://github.com/performancecopilot/pcp/pull/534#issuecomment-411612765,Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message,"have pulled this into my tree and testing it - seems to work well for both live and archive. QA needs some work though,    all tests in the 'pidstat' group now failing: 064 606 1078 1140 1396 1398 1399
Most failures are due to missing the new psargs metric in existing test archives, even though not running with the -l option (except for the new test 1399, which explicitly tests -l)
=== pcp-pidstat with -f formatting of the timestamps
! Error: not all required metrics are available
! Missing ['proc.psinfo.psargs']

I'll see if I can get these tests all fixed up prior to merging to master",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,534,2018-07-30T13:35:45Z,2018-08-10T08:20:05Z,2018-08-10T08:20:05Z,MERGED,True,1775,14,9,https://github.com/nagarevaibhav,pcp-pidstat: Adding support for -l flag.,2,[],https://github.com/performancecopilot/pcp/pull/534,https://github.com/nkshirsagar,6,https://github.com/performancecopilot/pcp/pull/534#issuecomment-411618703,Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message,"Just like we had a new global metrics array PIDSTAT_METRICS_B for the -B flag so the original one wouldn't be changed, perhaps we should have a third metrics array (PIDSTAT_METRICS_L) for this l flag, containing the extra one proc.psinfo.psargs ? And depending on whether we find the -l flag in the command line arguments, we use one or the other, like done for the -B flag ? don't think we need psargs for the first two, do we ??
PIDSTAT_METRICS = ['kernel.uname.nodename', 'kernel.uname.release', 'kernel.uname.sysname',
'kernel.uname.machine','hinv.ncpu','proc.psinfo.pid','proc.nprocs','proc.psinfo.utime',
'proc.psinfo.stime','proc.psinfo.guest_time','proc.psinfo.processor',
'proc.id.uid','proc.psinfo.cmd','kernel.all.cpu.user','kernel.all.cpu.vuser',
'kernel.all.cpu.sys','kernel.all.cpu.guest','kernel.all.cpu.nice','kernel.all.cpu.idle',
'proc.id.uid_nm', 'proc.psinfo.rt_priority', 'proc.psinfo.policy', 'proc.psinfo.minflt',
'proc.psinfo.maj_flt', 'proc.psinfo.vsize', 'proc.psinfo.rss', 'mem.physmem',
'proc.memory.vmstack']
PIDSTAT_METRICS_B = ['kernel.uname.nodename', 'kernel.uname.release', 'kernel.uname.sysname',
'kernel.uname.machine','hinv.ncpu','proc.psinfo.pid','proc.nprocs','proc.psinfo.utime',
'proc.psinfo.stime','proc.psinfo.guest_time','proc.psinfo.processor',
'proc.id.uid','proc.psinfo.cmd','kernel.all.cpu.user','kernel.all.cpu.vuser',
'kernel.all.cpu.sys','kernel.all.cpu.guest','kernel.all.cpu.nice','kernel.all.cpu.idle',
'proc.id.uid_nm', 'proc.psinfo.rt_priority', 'proc.psinfo.policy', 'proc.psinfo.minflt',
'proc.psinfo.maj_flt', 'proc.psinfo.vsize', 'proc.psinfo.rss', 'mem.physmem',
'proc.memory.vmstack','proc.psinfo.sname','proc.psinfo.start_time','proc.psinfo.wchan_s'
]
PIDSTAT_METRICS_L = ['kernel.uname.nodename', 'kernel.uname.release', 'kernel.uname.sysname',
'kernel.uname.machine','hinv.ncpu','proc.psinfo.pid','proc.nprocs','proc.psinfo.utime',
'proc.psinfo.stime','proc.psinfo.guest_time','proc.psinfo.processor',
'proc.id.uid','proc.psinfo.cmd','kernel.all.cpu.user','kernel.all.cpu.vuser',
'kernel.all.cpu.sys','kernel.all.cpu.guest','kernel.all.cpu.nice','kernel.all.cpu.idle',
'proc.id.uid_nm', 'proc.psinfo.rt_priority', 'proc.psinfo.policy', 'proc.psinfo.minflt',
'proc.psinfo.maj_flt', 'proc.psinfo.vsize', 'proc.psinfo.rss', 'mem.physmem',
'proc.memory.vmstack','proc.psinfo.sname','proc.psinfo.start_time','proc.psinfo.wchan_s',
'proc.psinfo.psargs']
then something like,
if name == ""main"":
try:
opts = PidstatOptions()
manager = pmcc.MetricGroupManager.builder(opts,sys.argv)
if not opts.checkOptions():
raise pmapi.pmUsageErr
...
...
if opts.process_name_with_args == True:
manager['pidstat'] = PIDSTAT_METRICS_L",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,534,2018-07-30T13:35:45Z,2018-08-10T08:20:05Z,2018-08-10T08:20:05Z,MERGED,True,1775,14,9,https://github.com/nagarevaibhav,pcp-pidstat: Adding support for -l flag.,2,[],https://github.com/performancecopilot/pcp/pull/534,https://github.com/nagarevaibhav,7,https://github.com/performancecopilot/pcp/pull/534#issuecomment-411789575,Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message,"Hello @goodwinos , Happy to see the feature working well with both live and archives.
Thank you so much for guidance @nkshirsagar , as discussed made changes to the code and added separate metrics array for -l flag, thus QA that @goodwinos had mentioned in previous comment [ i.e 064 606 1078 1140 1396 1398 1399] doesn't seem to fail.
@goodwinos  can you please review the changes and merge the feature ?
Thank you in advance.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,534,2018-07-30T13:35:45Z,2018-08-10T08:20:05Z,2018-08-10T08:20:05Z,MERGED,True,1775,14,9,https://github.com/nagarevaibhav,pcp-pidstat: Adding support for -l flag.,2,[],https://github.com/performancecopilot/pcp/pull/534,https://github.com/goodwinos,8,https://github.com/performancecopilot/pcp/pull/534#issuecomment-412011421,Adding support for -l flag. The -l flag/option displays the process command name and all its arguments which works on live system and also on archives. In addition to this -l flag can also be used with other flags and multiple usage of -l is avoided by displaying incorrect message,"the new patch seems to be working, and QA is now passing for all tests in the 'pidstat' group, EXCEPT the new test qa/1399. The problem in qa/1399 is that pidstat needs to be run with the -z flag so that the report will use the timezone of the test archive, not the local timezone. So this test should be passing in timezone IST, but will fail in all other timezones. A patch similar to the following will be needed:
diff --git a/qa/1399 b/qa/1399
index 01c9d76d5..33761769a 100755
--- a/qa/1399
+++ b/qa/1399
@@ -16,7 +16,7 @@ trap ""rm -rf $tmp $tmp.*; exit \$status"" 0 1 2 3 15
 
 test -x $PCP_BINADM_DIR/pcp-pidstat || _notrun ""No pcp-pidstat(1) installed""
 
-pcp_pidstat=""$PCP_BINADM_DIR/pcp-pidstat""
+pcp_pidstat=""pcp -z $PCP_BINADM_DIR/pcp-pidstat""
 
 archive1=""-a $here/archives/pcp-pidstat-process-args""
 
@@ -40,11 +40,11 @@ $pcp_pidstat $archive1 -k -l -s 3
 #-l & -B
 echo && echo pcp-pidstat output: -B Report process state information. Use -B ""all"" or -B ""comma separated states"". Use -B ""detail"" for showing time spent in every state per process.
 
-$pcp_pidstat $archive -B R,Z -l -s 3
+$pcp_pidstat $archive1 -B R,Z -l -s 3
 
-$pcp_pidstat $archive -B all -l -s 3
+$pcp_pidstat $archive1 -B all -l -s 3
 
-$pcp_pidstat $arhive -B detail -l -s 3
+$pcp_pidstat $archive1 -B detail -l -s 3
 
 # success, all done
 status=0

I'm going ahead and merging this to master, assuming you guys will fix up qa/1399.
Thanks for the contribution!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,536,2018-07-30T17:55:38Z,2018-07-31T03:11:54Z,2018-07-31T03:11:54Z,MERGED,True,9,14,4,https://github.com/parthbeingparth,Fix for qt installation in MacOS,1,[],https://github.com/performancecopilot/pcp/pull/536,https://github.com/parthbeingparth,1,https://github.com/performancecopilot/pcp/pull/536,Changes for a clean build of pmchart and pmtime.,Changes for a clean build of pmchart and pmtime.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,537,2018-07-31T18:34:46Z,2018-08-01T00:58:07Z,2018-08-01T00:58:07Z,MERGED,True,3,3,3,https://github.com/parthbeingparth,Added PACKAGE_VERISON in PKG_MAC_DIR,1,[],https://github.com/performancecopilot/pcp/pull/537,https://github.com/parthbeingparth,1,https://github.com/performancecopilot/pcp/pull/537,"Edit in the directory of pmchart, pmtime and pmquery.","Edit in the directory of pmchart, pmtime and pmquery.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,538,2018-08-01T02:34:27Z,2018-08-02T03:47:16Z,2018-08-02T03:47:16Z,MERGED,True,15,3,1,https://github.com/parthbeingparth,Updated INSTALL.md for MacOS installation,1,[],https://github.com/performancecopilot/pcp/pull/538,https://github.com/parthbeingparth,1,https://github.com/performancecopilot/pcp/pull/538,This is the basic layout of the steps to build and install on MacOS.,This is the basic layout of the steps to build and install on MacOS.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,538,2018-08-01T02:34:27Z,2018-08-02T03:47:16Z,2018-08-02T03:47:16Z,MERGED,True,15,3,1,https://github.com/parthbeingparth,Updated INSTALL.md for MacOS installation,1,[],https://github.com/performancecopilot/pcp/pull/538,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/538#issuecomment-409434112,This is the basic layout of the steps to build and install on MacOS.,"Hi Parth.  Do we need to mention the PCP_DIR setting, and/or the /etc/pcp.conf linking?
The text looks fine - but could you drop the lines from 'This will install pcp on your system. To test it, use:' - this is covered in the 'Post-install steps' section later.  Could you also check the Mac OS X notes in that section, which refer to /Library/StartupItems ... I think that's out of date now too, isn't it?
￼
Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,538,2018-08-01T02:34:27Z,2018-08-02T03:47:16Z,2018-08-02T03:47:16Z,MERGED,True,15,3,1,https://github.com/parthbeingparth,Updated INSTALL.md for MacOS installation,1,[],https://github.com/performancecopilot/pcp/pull/538,https://github.com/parthbeingparth,3,https://github.com/performancecopilot/pcp/pull/538#issuecomment-409435293,This is the basic layout of the steps to build and install on MacOS.,"Okay Sir, I'll make an update with your instructions and check the notes section. I'll make another PR for that. Should i close this one?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,538,2018-08-01T02:34:27Z,2018-08-02T03:47:16Z,2018-08-02T03:47:16Z,MERGED,True,15,3,1,https://github.com/parthbeingparth,Updated INSTALL.md for MacOS installation,1,[],https://github.com/performancecopilot/pcp/pull/538,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/538#issuecomment-409443974,This is the basic layout of the steps to build and install on MacOS.,"@Warewolf96 no need to close this one, you can just push additional commits to this repo/branch until it gets merged.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,539,2018-08-01T04:45:43Z,2018-08-01T07:01:27Z,2018-08-01T15:45:24Z,CLOSED,False,2,2,1,https://github.com/bmwiedemann,pmieconf/rules.c: Do not record build date,1,[],https://github.com/performancecopilot/pcp/pull/539,https://github.com/bmwiedemann,1,https://github.com/performancecopilot/pcp/pull/539,"Do not record the build date
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
The alternative fix would be to allow to override it like in
https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal#C","Do not record the build date
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
The alternative fix would be to allow to override it like in
https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal#C",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,539,2018-08-01T04:45:43Z,2018-08-01T07:01:27Z,2018-08-01T15:45:24Z,CLOSED,False,2,2,1,https://github.com/bmwiedemann,pmieconf/rules.c: Do not record build date,1,[],https://github.com/performancecopilot/pcp/pull/539,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/539#issuecomment-409452826,"Do not record the build date
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
The alternative fix would be to allow to override it like in
https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal#C","@bmwiedemann can you explain what the specific problem is a bit more for me, as it related to generated pmieconf files?  That timestamp is not added to any file we install from the build - AFAICT, it is only written into a file named src/pmieconf/local ... which is used for verification purposes only, during the build.
The timestamp is generally useful to users, so I'm reluctant to remove it from pmieconf(1) entirely - we could remove it from the above ""local"" file that is produced during the build though, if that will help this effort?  i.e. does this patch resolve the problem in a different way?
https://paste.fedoraproject.org/paste/VJ1eBaBJcsl~5JMZwaJP2A
FWIW, there is similar functionality that adds timestamps into pmlogger configurations in the pmlogconf(1) utility.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,539,2018-08-01T04:45:43Z,2018-08-01T07:01:27Z,2018-08-01T15:45:24Z,CLOSED,False,2,2,1,https://github.com/bmwiedemann,pmieconf/rules.c: Do not record build date,1,[],https://github.com/performancecopilot/pcp/pull/539,https://github.com/bmwiedemann,3,https://github.com/performancecopilot/pcp/pull/539#issuecomment-409471059,"Do not record the build date
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
The alternative fix would be to allow to override it like in
https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal#C","Taking a closer look, this change seems to actually not be required for our openSUSE packages. The fedora-paste patch seems to address the same thing.
There is another open issue with tutorial .tar.gz creation - will open a different PR for that.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,539,2018-08-01T04:45:43Z,2018-08-01T07:01:27Z,2018-08-01T15:45:24Z,CLOSED,False,2,2,1,https://github.com/bmwiedemann,pmieconf/rules.c: Do not record build date,1,[],https://github.com/performancecopilot/pcp/pull/539,https://github.com/bmwiedemann,4,https://github.com/performancecopilot/pcp/pull/539#issuecomment-409621603,"Do not record the build date
in order to make builds reproducible.
See https://reproducible-builds.org/ for why this is good.
The alternative fix would be to allow to override it like in
https://wiki.debian.org/ReproducibleBuilds/TimestampsProposal#C",#540 and #541 together made the pcp package build fully reproducible for openSUSE. Then 2nd one only makes a difference when building with debug,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,540,2018-08-01T11:41:55Z,2018-08-02T03:47:16Z,2018-08-02T03:47:16Z,MERGED,True,5,5,5,https://github.com/bmwiedemann,create reproducible tarballs,1,[],https://github.com/performancecopilot/pcp/pull/540,https://github.com/bmwiedemann,1,https://github.com/performancecopilot/pcp/pull/540,"tar's default pax/posix format stores ctime and atime that vary across builds.
ustar format works everywhere and creates more reproducible output.
gzip --no-name causes it to not store a 4-byte UNIX timestamp in .gz header (actually it stores 0)","tar's default pax/posix format stores ctime and atime that vary across builds.
ustar format works everywhere and creates more reproducible output.
gzip --no-name causes it to not store a 4-byte UNIX timestamp in .gz header (actually it stores 0)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,541,2018-08-01T15:23:28Z,2018-08-02T03:47:16Z,2018-08-02T03:47:16Z,MERGED,True,2,2,2,https://github.com/bmwiedemann,Allow to override `date`,1,[],https://github.com/performancecopilot/pcp/pull/541,https://github.com/bmwiedemann,1,https://github.com/performancecopilot/pcp/pull/541,"For openSUSE, this date ended up in pcp-debugsource rpms
via generated source files
making it differ for every build
without this patch, diff contained:
+++ /usr/src/debug/pcp-3.11.9-0.0.x86_64/src/pmclient/pmnsmap.h
  * Built by pmgenmap.sh from the file
  * pmnsmap.spec
- * on Sat Sep  3 01:48:38 UTC 2033
+ * on Wed Aug  1 12:31:06 UTC 2018

+++ /usr/src/debug/pcp-3.11.9-0.0.x86_64/src/libpcp/src/derive_parser.y     2017-11-23 12:00:00.000000000 +0000
@@ -2,7 +2,7 @@
  * DO NOT EDIT THIS FILE ... CHANGES HERE WILL BE LOST
  *
  * This file created from derive_parser.y.in (make changes there!)
- * by fix_derive_parser_y on Sat Sep  3 01:41:26 UTC 2033.
+ * by fix_derive_parser_y on Wed Aug  1 12:24:36 UTC 2018.","For openSUSE, this date ended up in pcp-debugsource rpms
via generated source files
making it differ for every build
without this patch, diff contained:
+++ /usr/src/debug/pcp-3.11.9-0.0.x86_64/src/pmclient/pmnsmap.h
  * Built by pmgenmap.sh from the file
  * pmnsmap.spec
- * on Sat Sep  3 01:48:38 UTC 2033
+ * on Wed Aug  1 12:31:06 UTC 2018

+++ /usr/src/debug/pcp-3.11.9-0.0.x86_64/src/libpcp/src/derive_parser.y     2017-11-23 12:00:00.000000000 +0000
@@ -2,7 +2,7 @@
  * DO NOT EDIT THIS FILE ... CHANGES HERE WILL BE LOST
  *
  * This file created from derive_parser.y.in (make changes there!)
- * by fix_derive_parser_y on Sat Sep  3 01:41:26 UTC 2033.
+ * by fix_derive_parser_y on Wed Aug  1 12:24:36 UTC 2018.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,542,2018-08-02T00:05:04Z,2018-08-02T03:47:17Z,2018-08-02T03:47:17Z,MERGED,True,336,34,8,https://github.com/guillemlp,Fix bug when adding instance and add new regression testcases ,6,[],https://github.com/performancecopilot/pcp/pull/542,https://github.com/guillemlp,1,https://github.com/performancecopilot/pcp/pull/542,There is a bug when getting instances labels shown in testcase 683. In 683.out I have put the labels missing,There is a bug when getting instances labels shown in testcase 683. In 683.out I have put the labels missing,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,543,2018-08-02T04:40:31Z,2018-08-02T06:14:10Z,2018-08-02T06:14:10Z,MERGED,True,14,6,1,https://github.com/Andrii-hotfix,updates to INSTALL: Windows instructions,2,[],https://github.com/performancecopilot/pcp/pull/543,https://github.com/Andrii-hotfix,1,https://github.com/performancecopilot/pcp/pull/543,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,543,2018-08-02T04:40:31Z,2018-08-02T06:14:10Z,2018-08-02T06:14:10Z,MERGED,True,14,6,1,https://github.com/Andrii-hotfix,updates to INSTALL: Windows instructions,2,[],https://github.com/performancecopilot/pcp/pull/543,https://github.com/Andrii-hotfix,2,https://github.com/performancecopilot/pcp/pull/543#issuecomment-409805180,,Except Windows section changes there are some spaces removed in other parts of the file. Git for Windows removes extra spaces automatically. So this commit is still correct.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,544,2018-08-02T10:21:36Z,2018-08-08T00:33:41Z,2018-08-13T11:23:51Z,MERGED,True,105,11,4,https://github.com/anjutsudhakar,Fix perfevent agent to return correct cpu numbers in lower smt levels,2,[],https://github.com/performancecopilot/pcp/pull/544,https://github.com/anjutsudhakar,1,https://github.com/performancecopilot/pcp/pull/544,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,544,2018-08-02T10:21:36Z,2018-08-08T00:33:41Z,2018-08-13T11:23:51Z,MERGED,True,105,11,4,https://github.com/anjutsudhakar,Fix perfevent agent to return correct cpu numbers in lower smt levels,2,[],https://github.com/performancecopilot/pcp/pull/544,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/544#issuecomment-410080987,,"@jpwhite4 @hkshaw1990 could you guys double check this please?  Looks OK to me.  (not sure if we still need to wrap sysconf(3) anymore for QA after this change, Joe?)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,544,2018-08-02T10:21:36Z,2018-08-08T00:33:41Z,2018-08-13T11:23:51Z,MERGED,True,105,11,4,https://github.com/anjutsudhakar,Fix perfevent agent to return correct cpu numbers in lower smt levels,2,[],https://github.com/performancecopilot/pcp/pull/544,https://github.com/hkshaw1990,3,https://github.com/performancecopilot/pcp/pull/544#issuecomment-411006650,,@natoscott will do.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,544,2018-08-02T10:21:36Z,2018-08-08T00:33:41Z,2018-08-13T11:23:51Z,MERGED,True,105,11,4,https://github.com/anjutsudhakar,Fix perfevent agent to return correct cpu numbers in lower smt levels,2,[],https://github.com/performancecopilot/pcp/pull/544,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/544#issuecomment-411246824,,"@anjutsudhakar @hkshaw1990 @jpwhite4 OK, merged - thanks.  I'm seeing a little QA fallout - some asserts are now tripping in the test code.  This patch fixes those (which I think is correct due to the use of four CPUs in test data - but am not certain):
https://paste.fedoraproject.org/paste/kDlMrScioBxgPheVRBsipw
However even with that, I'm still seeing the test fail to produce the expected output (8 CPU test machine):
https://paste.fedoraproject.org/paste/WI0jVZuu9jGON6~vAvQOcQ
Could some take a closer look?  Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,544,2018-08-02T10:21:36Z,2018-08-08T00:33:41Z,2018-08-13T11:23:51Z,MERGED,True,105,11,4,https://github.com/anjutsudhakar,Fix perfevent agent to return correct cpu numbers in lower smt levels,2,[],https://github.com/performancecopilot/pcp/pull/544,https://github.com/hkshaw1990,5,https://github.com/performancecopilot/pcp/pull/544#issuecomment-411625326,,Will look into this today. @natoscott,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,544,2018-08-02T10:21:36Z,2018-08-08T00:33:41Z,2018-08-13T11:23:51Z,MERGED,True,105,11,4,https://github.com/anjutsudhakar,Fix perfevent agent to return correct cpu numbers in lower smt levels,2,[],https://github.com/performancecopilot/pcp/pull/544,https://github.com/hkshaw1990,6,https://github.com/performancecopilot/pcp/pull/544#issuecomment-412061536,,"@natoscott the patch https://paste.fedoraproject.org/paste/WI0jVZuu9jGON6~vAvQOcQ is not required. It looks like there is a cpu mismatch issue as we are getting the CPUs from sysconf and from fakefs.
@anjutsudhakar is working on fixing that for the test cases, where fakefs cpu lists should be added.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,544,2018-08-02T10:21:36Z,2018-08-08T00:33:41Z,2018-08-13T11:23:51Z,MERGED,True,105,11,4,https://github.com/anjutsudhakar,Fix perfevent agent to return correct cpu numbers in lower smt levels,2,[],https://github.com/performancecopilot/pcp/pull/544,https://github.com/anjutsudhakar,7,https://github.com/performancecopilot/pcp/pull/544#issuecomment-412486899,,"Hope this will solve the issue.
#552
@natoscott @hkshaw1990 The issue seems to be because of missing sys*/devices/system/cpu/online in the fakefs for some test cases.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,545,2018-08-03T01:03:52Z,2018-08-03T03:02:55Z,2018-08-03T03:02:55Z,MERGED,True,219,1,2,https://github.com/guillemlp,Add documentation: manpage mmv_stats_registry,3,[],https://github.com/performancecopilot/pcp/pull/545,https://github.com/guillemlp,1,https://github.com/performancecopilot/pcp/pull/545,"In this new manpage, it is explained the new functions to add metrics, instances, indoms, and labels. There is also a small note in mmv_stats_init  saying is deprecated and also it is fixed a small typo when showing the struct mmv_metrics_t instead of mmv_metrics2_t .","In this new manpage, it is explained the new functions to add metrics, instances, indoms, and labels. There is also a small note in mmv_stats_init  saying is deprecated and also it is fixed a small typo when showing the struct mmv_metrics_t instead of mmv_metrics2_t .",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,546,2018-08-03T05:30:13Z,2018-08-03T05:52:04Z,2018-08-03T05:52:04Z,MERGED,True,13,0,1,https://github.com/parthbeingparth,Updated INSTALL.md with symlinks settings,1,[],https://github.com/performancecopilot/pcp/pull/546,https://github.com/parthbeingparth,1,https://github.com/performancecopilot/pcp/pull/546,Detailed instructions for creating symlinks.,Detailed instructions for creating symlinks.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,547,2018-08-06T08:40:39Z,2018-08-08T00:33:41Z,2018-08-08T01:51:29Z,MERGED,True,53,6,4,https://github.com/christianhorn, Implement the trivial-pmda also as perl daemon ,2,[],https://github.com/performancecopilot/pcp/pull/547,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/547,"The trivial-pmda is currently the most simple pmda implementation, provided in C. Adding a perl variant which provides the same functionality.","The trivial-pmda is currently the most simple pmda implementation, provided in C. Adding a perl variant which provides the same functionality.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,547,2018-08-06T08:40:39Z,2018-08-08T00:33:41Z,2018-08-08T01:51:29Z,MERGED,True,53,6,4,https://github.com/christianhorn, Implement the trivial-pmda also as perl daemon ,2,[],https://github.com/performancecopilot/pcp/pull/547,https://github.com/christianhorn,2,https://github.com/performancecopilot/pcp/pull/547#issuecomment-410978000,"The trivial-pmda is currently the most simple pmda implementation, provided in C. Adding a perl variant which provides the same functionality.","pmdatrivial.perl is constantly running as child of pmdaroot, thus I thought 'daemon' would fit.

I don't think it's needed to add Aconex or SGI copyright notices here?

The perl daemon is a downstripped version of simple/pmdasimple.perl, as per this I kept these parts.
I see your point regarding the missing Python implementation, but as my python knowledge is limited, I was not successfull in modifying a simple/pdmasimple.python into a pdmatrivial.python.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,547,2018-08-06T08:40:39Z,2018-08-08T00:33:41Z,2018-08-08T01:51:29Z,MERGED,True,53,6,4,https://github.com/christianhorn, Implement the trivial-pmda also as perl daemon ,2,[],https://github.com/performancecopilot/pcp/pull/547,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/547#issuecomment-411022491,"The trivial-pmda is currently the most simple pmda implementation, provided in C. Adding a perl variant which provides the same functionality.","@christianhorn @myllynen couple of small points ...
Many of the PCP docs do tend to describe any PMDA that is not in DSO form as a ""daemon"", which is perhaps a bit confusing but the code changes here are consistent with what we have in that regard.
I tend to agree it would be neat to have a python version as well - I'll have a crack at this if noone else volunteers.
Finally, we need some regression testing for the new code.  The current C trivial PMDA is tested out by qa/199 - so perl and python versions of this test will be handy.  Again, if noone else volunteers there I'll circle back and knock those out when I merge this.
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,547,2018-08-06T08:40:39Z,2018-08-08T00:33:41Z,2018-08-08T01:51:29Z,MERGED,True,53,6,4,https://github.com/christianhorn, Implement the trivial-pmda also as perl daemon ,2,[],https://github.com/performancecopilot/pcp/pull/547,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/547#issuecomment-411246334,"The trivial-pmda is currently the most simple pmda implementation, provided in C. Adding a perl variant which provides the same functionality.","@christianhorn I've added tests, a Python variant and made some small updates to the Perl PMDA too - please double check my changes, thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,547,2018-08-06T08:40:39Z,2018-08-08T00:33:41Z,2018-08-08T01:51:29Z,MERGED,True,53,6,4,https://github.com/christianhorn, Implement the trivial-pmda also as perl daemon ,2,[],https://github.com/performancecopilot/pcp/pull/547,https://github.com/christianhorn,5,https://github.com/performancecopilot/pcp/pull/547#issuecomment-411257630,"The trivial-pmda is currently the most simple pmda implementation, provided in C. Adding a perl variant which provides the same functionality.","Wow, awesome. Wanted to look at the perl test code, when you had already implemented the python part and the 2 tests :)
Rebuilding master, all trivial variants look good to me. I think this will help people getting custom metrics up and running quickly, I will refer to this new code.",True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,548,2018-08-10T09:58:03Z,2018-08-13T01:46:02Z,2018-08-13T01:46:02Z,MERGED,True,4,0,1,https://github.com/Andrii-hotfix,Windows path instructions,2,[],https://github.com/performancecopilot/pcp/pull/548,https://github.com/Andrii-hotfix,1,https://github.com/performancecopilot/pcp/pull/548,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,551,2018-08-13T08:09:07Z,2018-08-14T00:46:06Z,2018-08-15T07:35:41Z,MERGED,True,181,84,1,https://github.com/yuokada126,pcp-dstat: add CSV output support for pcp-dstat,1,[],https://github.com/performancecopilot/pcp/pull/551,https://github.com/yuokada126,1,https://github.com/performancecopilot/pcp/pull/551,"Add CSV output support for pcp-dstat, which is for backward compatibility with existing python2 dstat utility.","Add CSV output support for pcp-dstat, which is for backward compatibility with existing python2 dstat utility.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,551,2018-08-13T08:09:07Z,2018-08-14T00:46:06Z,2018-08-15T07:35:41Z,MERGED,True,181,84,1,https://github.com/yuokada126,pcp-dstat: add CSV output support for pcp-dstat,1,[],https://github.com/performancecopilot/pcp/pull/551,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/551#issuecomment-412714958,"Add CSV output support for pcp-dstat, which is for backward compatibility with existing python2 dstat utility.",@yuokada126 great job!  I've added to regression test 1187 to exercise the new code - could you review the changes in commit b51714c please?,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,551,2018-08-13T08:09:07Z,2018-08-14T00:46:06Z,2018-08-15T07:35:41Z,MERGED,True,181,84,1,https://github.com/yuokada126,pcp-dstat: add CSV output support for pcp-dstat,1,[],https://github.com/performancecopilot/pcp/pull/551,https://github.com/yuokada126,3,https://github.com/performancecopilot/pcp/pull/551#issuecomment-412737977,"Add CSV output support for pcp-dstat, which is for backward compatibility with existing python2 dstat utility.",@natoscott Thank you for adding test! It looks fine to me.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,552,2018-08-13T11:20:43Z,2018-08-14T00:46:06Z,2018-08-14T00:46:07Z,MERGED,True,2,0,2,https://github.com/anjutsudhakar,qa/perfevent: Fix the QA fallouts,1,[],https://github.com/performancecopilot/pcp/pull/552,https://github.com/anjutsudhakar,1,https://github.com/performancecopilot/pcp/pull/552,"Fix the qa fallouts happened due to the change in the way cpuids are
populated by retrieve_cpuinfo(), for perfevent pmda.
Signed-off-by: Anju T Sudhakar anju@linux.vnet.ibm.com","Fix the qa fallouts happened due to the change in the way cpuids are
populated by retrieve_cpuinfo(), for perfevent pmda.
Signed-off-by: Anju T Sudhakar anju@linux.vnet.ibm.com",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,552,2018-08-13T11:20:43Z,2018-08-14T00:46:06Z,2018-08-14T00:46:07Z,MERGED,True,2,0,2,https://github.com/anjutsudhakar,qa/perfevent: Fix the QA fallouts,1,[],https://github.com/performancecopilot/pcp/pull/552,https://github.com/anjutsudhakar,2,https://github.com/performancecopilot/pcp/pull/552#issuecomment-412487399,"Fix the qa fallouts happened due to the change in the way cpuids are
populated by retrieve_cpuinfo(), for perfevent pmda.
Signed-off-by: Anju T Sudhakar anju@linux.vnet.ibm.com","Do we still need wrap_sysconf_retcode defined in the test cases ? Because we are no more reading the cpulist from sysconf(_SC_NPROCESSORS_ONLN), instead we read it from /sys/devices/syste/cpu directory.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,553,2018-08-13T13:42:43Z,2018-08-14T00:46:07Z,2018-08-14T00:46:07Z,MERGED,True,1042,1195,2,https://github.com/nagarevaibhav,qa/1399: Adding -z to test cases,1,[],https://github.com/performancecopilot/pcp/pull/553,https://github.com/nagarevaibhav,1,https://github.com/performancecopilot/pcp/pull/553,"""Adding -z to test cases in qa/1399 so that report will use timezone of the test archive and not of the local timezone""
It is follow up commit related to pull request #534","""Adding -z to test cases in qa/1399 so that report will use timezone of the test archive and not of the local timezone""
It is follow up commit related to pull request #534",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,556,2018-08-29T18:54:12Z,2018-08-31T06:59:39Z,2018-08-31T06:59:39Z,MERGED,True,775,4,8,https://github.com/guillemlp,Add check of label according to rules of jsonb and add missign testcases of mmv3 genstats and nostats,7,[],https://github.com/performancecopilot/pcp/pull/556,https://github.com/guillemlp,1,https://github.com/performancecopilot/pcp/pull/556,"TODO:
Add qa testcase for mmv3_bad_label and maybe mmv3_bad_name
Add checking of name","TODO:
Add qa testcase for mmv3_bad_label and maybe mmv3_bad_name
Add checking of name",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,559,2018-09-04T08:54:32Z,2018-09-17T08:22:37Z,2018-09-17T08:55:05Z,CLOSED,False,175,1134,8,https://github.com/christianhorn,modify lmsensors to perform autodetection of available sensors,6,[],https://github.com/performancecopilot/pcp/pull/559,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/559,"Not sure if this code is acceptable (or can be made acceptable), but let me try. I have implemented monitoring of temperature/fans on some of my systems, and revamped it so it might be usable for others.

This is revamping the former C code, and using Perl instead. It relies on 'lm_sensors' being installed.
The code is designed to require minimal user interaction: when the pmda starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
I looked at performance. Real used memory is around 10MB, should be ok. I looked at cpu cycles, and did verify the current (lm_sensors based) code with Perl directly parsing /sys directories. The latter one is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly.","Not sure if this code is acceptable (or can be made acceptable), but let me try. I have implemented monitoring of temperature/fans on some of my systems, and revamped it so it might be usable for others.

This is revamping the former C code, and using Perl instead. It relies on 'lm_sensors' being installed.
The code is designed to require minimal user interaction: when the pmda starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
I looked at performance. Real used memory is around 10MB, should be ok. I looked at cpu cycles, and did verify the current (lm_sensors based) code with Perl directly parsing /sys directories. The latter one is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,559,2018-09-04T08:54:32Z,2018-09-17T08:22:37Z,2018-09-17T08:55:05Z,CLOSED,False,175,1134,8,https://github.com/christianhorn,modify lmsensors to perform autodetection of available sensors,6,[],https://github.com/performancecopilot/pcp/pull/559,https://github.com/christianhorn,2,https://github.com/performancecopilot/pcp/pull/559#issuecomment-421929505,"Not sure if this code is acceptable (or can be made acceptable), but let me try. I have implemented monitoring of temperature/fans on some of my systems, and revamped it so it might be usable for others.

This is revamping the former C code, and using Perl instead. It relies on 'lm_sensors' being installed.
The code is designed to require minimal user interaction: when the pmda starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
I looked at performance. Real used memory is around 10MB, should be ok. I looked at cpu cycles, and did verify the current (lm_sensors based) code with Perl directly parsing /sys directories. The latter one is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly.","After looking more into the tests and reading the log https://api.travis-ci.org/v3/job/424231580/log.txt , I think that somehow the tests were performed on a tree which was not passing all tests at that time.
I think ""./check -g pmda.bcc"" failed, which I did not touch. Have not seen a separate test for lmsensors.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,559,2018-09-04T08:54:32Z,2018-09-17T08:22:37Z,2018-09-17T08:55:05Z,CLOSED,False,175,1134,8,https://github.com/christianhorn,modify lmsensors to perform autodetection of available sensors,6,[],https://github.com/performancecopilot/pcp/pull/559,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/559#issuecomment-421932018,"Not sure if this code is acceptable (or can be made acceptable), but let me try. I have implemented monitoring of temperature/fans on some of my systems, and revamped it so it might be usable for others.

This is revamping the former C code, and using Perl instead. It relies on 'lm_sensors' being installed.
The code is designed to require minimal user interaction: when the pmda starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
I looked at performance. Real used memory is around 10MB, should be ok. I looked at cpu cycles, and did verify the current (lm_sensors based) code with Perl directly parsing /sys directories. The latter one is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly.","@christianhorn yes, sorry - those failures were not related to your new code at all.  Marko, Andreas and I had been looking into those in parallel and they're now resolved.
As discussed on IRC the other day, please let me know if you need help with lmsensors PMDA testing - don't worry about those (unrelated) CI failures though.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,559,2018-09-04T08:54:32Z,2018-09-17T08:22:37Z,2018-09-17T08:55:05Z,CLOSED,False,175,1134,8,https://github.com/christianhorn,modify lmsensors to perform autodetection of available sensors,6,[],https://github.com/performancecopilot/pcp/pull/559,https://github.com/christianhorn,4,https://github.com/performancecopilot/pcp/pull/559#issuecomment-421933369,"Not sure if this code is acceptable (or can be made acceptable), but let me try. I have implemented monitoring of temperature/fans on some of my systems, and revamped it so it might be usable for others.

This is revamping the former C code, and using Perl instead. It relies on 'lm_sensors' being installed.
The code is designed to require minimal user interaction: when the pmda starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
I looked at performance. Real used memory is around 10MB, should be ok. I looked at cpu cycles, and did verify the current (lm_sensors based) code with Perl directly parsing /sys directories. The latter one is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly.","Ok, will do a new pull request and see how the testing goes.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,561,2018-09-16T16:13:25Z,2018-09-17T00:22:11Z,2020-09-21T15:49:22Z,MERGED,True,3,6,3,https://github.com/andreasgerstmayr,"qa: move block device comment to path variable for 1116, 1117 and 1158",1,[],https://github.com/performancecopilot/pcp/pull/561,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/561,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,562,2018-09-17T08:20:13Z,2018-09-17T08:20:23Z,2018-09-17T08:20:36Z,CLOSED,False,0,0,0,https://github.com/christianhorn,Merge pull request #2 from performancecopilot/master,1,[],https://github.com/performancecopilot/pcp/pull/562,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/562,Update to current,Update to current,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,562,2018-09-17T08:20:13Z,2018-09-17T08:20:23Z,2018-09-17T08:20:36Z,CLOSED,False,0,0,0,https://github.com/christianhorn,Merge pull request #2 from performancecopilot/master,1,[],https://github.com/performancecopilot/pcp/pull/562,https://github.com/christianhorn,2,https://github.com/performancecopilot/pcp/pull/562#issuecomment-421924515,Update to current,.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,563,2018-09-17T08:37:12Z,2018-09-17T08:37:30Z,2018-09-17T08:37:30Z,CLOSED,False,0,0,0,https://github.com/christianhorn,Merge pull request #2 from performancecopilot/master,1,[],https://github.com/performancecopilot/pcp/pull/563,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/563,Update to current,Update to current,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,564,2018-09-17T10:15:21Z,2018-10-03T02:15:19Z,2018-10-03T02:39:38Z,CLOSED,False,177,1134,8,https://github.com/christianhorn,"modify lmsensors to perform autodetection of available sensors, v2",5,[],https://github.com/performancecopilot/pcp/pull/564,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/564,"Not sure if this code is acceptable (or can be made acceptable), but let me try. I have implemented monitoring of temperature/fans on some of my systems, and revamped it so it might be usable for others.

This is revamping the former C code, and using Perl instead. It relies on /usr/bin/sensors being installed, usually via package lm_sensors.
The code is designed to require minimal user interaction: when the PMDA starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
I looked at performance. Real used memory is around 10MB, should be ok. I looked at cpu cycles, and did verify the current (lm_sensors based) code with Perl directly parsing /sys directories. The latter one is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly.","Not sure if this code is acceptable (or can be made acceptable), but let me try. I have implemented monitoring of temperature/fans on some of my systems, and revamped it so it might be usable for others.

This is revamping the former C code, and using Perl instead. It relies on /usr/bin/sensors being installed, usually via package lm_sensors.
The code is designed to require minimal user interaction: when the PMDA starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
I looked at performance. Real used memory is around 10MB, should be ok. I looked at cpu cycles, and did verify the current (lm_sensors based) code with Perl directly parsing /sys directories. The latter one is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,564,2018-09-17T10:15:21Z,2018-10-03T02:15:19Z,2018-10-03T02:39:38Z,CLOSED,False,177,1134,8,https://github.com/christianhorn,"modify lmsensors to perform autodetection of available sensors, v2",5,[],https://github.com/performancecopilot/pcp/pull/564,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/564#issuecomment-424956148,"Not sure if this code is acceptable (or can be made acceptable), but let me try. I have implemented monitoring of temperature/fans on some of my systems, and revamped it so it might be usable for others.

This is revamping the former C code, and using Perl instead. It relies on /usr/bin/sensors being installed, usually via package lm_sensors.
The code is designed to require minimal user interaction: when the PMDA starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
I looked at performance. Real used memory is around 10MB, should be ok. I looked at cpu cycles, and did verify the current (lm_sensors based) code with Perl directly parsing /sys directories. The latter one is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly.","Hi Christian,
the code looks fine, and builds and works fine. Couple of things:


need to update copyright notices to add your copyright (most likely Red Hat 2018), retaining existing copyright notices


do you want to stick with a softdep check at run-time? Otherwise the pcp-pmda-lmsensors package should Require: lm_sensors  in build/rpm/pcp.spec.in (and fedora.spec). If you want to stick with the softdep, then the Install script should probably check if /usr/bin/sensors exists rather than having this check in the PMDA itself (or both is fine too)


qa test - there don't appear to be any qa tests for this PMDA at all (which I think pre-dates your new perl version). Let me know if you need some assistance with this bit!


Cheers
-- Mark",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,564,2018-09-17T10:15:21Z,2018-10-03T02:15:19Z,2018-10-03T02:39:38Z,CLOSED,False,177,1134,8,https://github.com/christianhorn,"modify lmsensors to perform autodetection of available sensors, v2",5,[],https://github.com/performancecopilot/pcp/pull/564,https://github.com/christianhorn,3,https://github.com/performancecopilot/pcp/pull/564#issuecomment-426490214,"Not sure if this code is acceptable (or can be made acceptable), but let me try. I have implemented monitoring of temperature/fans on some of my systems, and revamped it so it might be usable for others.

This is revamping the former C code, and using Perl instead. It relies on /usr/bin/sensors being installed, usually via package lm_sensors.
The code is designed to require minimal user interaction: when the PMDA starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
I looked at performance. Real used memory is around 10MB, should be ok. I looked at cpu cycles, and did verify the current (lm_sensors based) code with Perl directly parsing /sys directories. The latter one is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly.","Thanks! Working on a new pull request, additionally to these points the PMDA gets reimplemented in Python.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,567,2018-10-03T03:22:55Z,2018-10-16T02:30:52Z,2018-10-18T08:21:43Z,CLOSED,False,296,1146,13,https://github.com/christianhorn,"lmsensors rework, v4",5,[],https://github.com/performancecopilot/pcp/pull/567,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/567,"An implementation of monitoring of temperature/fans.

This is revamping the former C code, and using Python instead. It relies on /usr/bin/sensors being installed, usually via package lm_sensors. The pmda checks for the binary, and a rpm dependency was added.
The code is designed to require minimal user interaction: when the PMDA starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
Used real memory is around 18MB, should be ok. Directly parsing /sys directories is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly in the pmda.","An implementation of monitoring of temperature/fans.

This is revamping the former C code, and using Python instead. It relies on /usr/bin/sensors being installed, usually via package lm_sensors. The pmda checks for the binary, and a rpm dependency was added.
The code is designed to require minimal user interaction: when the PMDA starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
Used real memory is around 18MB, should be ok. Directly parsing /sys directories is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly in the pmda.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,567,2018-10-03T03:22:55Z,2018-10-16T02:30:52Z,2018-10-18T08:21:43Z,CLOSED,False,296,1146,13,https://github.com/christianhorn,"lmsensors rework, v4",5,[],https://github.com/performancecopilot/pcp/pull/567,https://github.com/fche,2,https://github.com/performancecopilot/pcp/pull/567#issuecomment-426593083,"An implementation of monitoring of temperature/fans.

This is revamping the former C code, and using Python instead. It relies on /usr/bin/sensors being installed, usually via package lm_sensors. The pmda checks for the binary, and a rpm dependency was added.
The code is designed to require minimal user interaction: when the PMDA starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
Used real memory is around 18MB, should be ok. Directly parsing /sys directories is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly in the pmda.","The code is designed to require minimal user interaction: when the PMDA starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them.

excellent",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,567,2018-10-03T03:22:55Z,2018-10-16T02:30:52Z,2018-10-18T08:21:43Z,CLOSED,False,296,1146,13,https://github.com/christianhorn,"lmsensors rework, v4",5,[],https://github.com/performancecopilot/pcp/pull/567,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/567#issuecomment-430079294,"An implementation of monitoring of temperature/fans.

This is revamping the former C code, and using Python instead. It relies on /usr/bin/sensors being installed, usually via package lm_sensors. The pmda checks for the binary, and a rpm dependency was added.
The code is designed to require minimal user interaction: when the PMDA starts, it will detect the available sensors (parsing 'sensors -u' output) and create metrics for them. These are different by hardware model, so one does not know beforehand which metrics become available. I still use file 'pmns' from the former implementation, but the contents do actually not apply.
Used real memory is around 18MB, should be ok. Directly parsing /sys directories is ~15 to 20% faster, but comes to a downside: some sensors need 'finetuning afterwards': they need i.e. 20deg subtracted or such. lm_sensors is doing this abstraction internally, when doing the parsing directly then I would need to implement this directly in the pmda.","Merged though not with the original commits (due to commits by root), so I applied as patches and committed with --author=""Christian Horn chorn@redhat.com""",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,570,2018-10-18T08:37:38Z,2018-10-19T02:03:07Z,2020-02-13T06:40:56Z,MERGED,True,80,39,4,https://github.com/christianhorn,Fix lmsensors parser and more,6,[],https://github.com/performancecopilot/pcp/pull/570,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/570,"improve pmdalmsensors.python parser for more possible 'sensors -u' inputs
implement proper commandline parsing, support '--debug' and '--inject' (to inject 'sensors -u' from a file, instead of using live sensors
update manpage with the new options
update 'Install' with a (commented out) example of using sensor data injection","improve pmdalmsensors.python parser for more possible 'sensors -u' inputs
implement proper commandline parsing, support '--debug' and '--inject' (to inject 'sensors -u' from a file, instead of using live sensors
update manpage with the new options
update 'Install' with a (commented out) example of using sensor data injection",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,573,2018-10-31T14:43:11Z,2018-10-31T14:43:33Z,2018-10-31T14:43:33Z,CLOSED,False,0,0,0,https://github.com/anjutsudhakar,Merge pull request #1 from performancecopilot/master,1,[],https://github.com/performancecopilot/pcp/pull/573,https://github.com/anjutsudhakar,1,https://github.com/performancecopilot/pcp/pull/573,Merging the changes-1,Merging the changes-1,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,574,2018-10-31T23:19:14Z,2018-12-05T23:14:07Z,2018-12-05T23:14:07Z,CLOSED,False,78,15,6,https://github.com/anjutsudhakar,Add hv_24x7 nest events to perfevent-pmda,4,[],https://github.com/performancecopilot/pcp/pull/574,https://github.com/anjutsudhakar,1,https://github.com/performancecopilot/pcp/pull/574,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,574,2018-10-31T23:19:14Z,2018-12-05T23:14:07Z,2018-12-05T23:14:07Z,CLOSED,False,78,15,6,https://github.com/anjutsudhakar,Add hv_24x7 nest events to perfevent-pmda,4,[],https://github.com/performancecopilot/pcp/pull/574,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/574#issuecomment-434983576,,"@anjutsudhakar hi Anju!  this change seems to be causing a build failure below qa/ (you'll be able to reproduce this by running make below qa/ - or using ./Makepkgs).  Also, could the tests could be updated to provide coverage of this new functionality?  (see below qa/perfevent)
gcc -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g -DPCP_VERSION=""4.2.0"" -I./src/include -I./src/include/pcp -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g -DPCP_VERSION=""4.2.0"" -I../src/include -I../src/include/pcp -fPIC -fno-strict-aliasing -D_GNU_SOURCE -I../../src/pmdas/perfevent -DFILESYSTEM_ROOT='""./fakefs/""' -Wall -O2 -g -DPCP_VERSION=""4.2.0"" -I../../src/include -I../../src/include/pcp --coverage -c -o target/gcov/architecture.o ../../src/pmdas/perfevent/architecture.c
perf_event_test.c: In function 'test_init_dynamic_events':
perf_event_test.c:707:5: error: too few arguments to function 'init_dynamic_events'
init_dynamic_events(&pmu_list);
^~~~~~~~~~~~~~~~~~~
In file included from perf_event_test.c:12:
../../src/pmdas/perfevent/parse_events.h:86:5: note: declared here
int init_dynamic_events(struct pmu **pmu_list, struct pmcsetting *dynamicpmc);
^~~~~~~~~~~~~~~~~~~
perf_event_test.c: In function 'test_minimum_dynamic_events':
perf_event_test.c:749:5: error: too few arguments to function 'init_dynamic_events'
init_dynamic_events(&pmu_list);
^~~~~~~~~~~~~~~~~~~
In file included from perf_event_test.c:12:
../../src/pmdas/perfevent/parse_events.h:86:5: note: declared here
int init_dynamic_events(struct pmu **pmu_list, struct pmcsetting *dynamicpmc);
^~~~~~~~~~~~~~~~~~~
perf_event_test.c: In function 'test_dynamic_events_fail_event':
perf_event_test.c:773:5: error: too few arguments to function 'init_dynamic_events'
init_dynamic_events(&pmu_list);
^~~~~~~~~~~~~~~~~~~",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,574,2018-10-31T23:19:14Z,2018-12-05T23:14:07Z,2018-12-05T23:14:07Z,CLOSED,False,78,15,6,https://github.com/anjutsudhakar,Add hv_24x7 nest events to perfevent-pmda,4,[],https://github.com/performancecopilot/pcp/pull/574,https://github.com/anjutsudhakar,3,https://github.com/performancecopilot/pcp/pull/574#issuecomment-437286671,,"@natoscott Hi Nathan, Thanks for pointing this. I will fix this.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,574,2018-10-31T23:19:14Z,2018-12-05T23:14:07Z,2018-12-05T23:14:07Z,CLOSED,False,78,15,6,https://github.com/anjutsudhakar,Add hv_24x7 nest events to perfevent-pmda,4,[],https://github.com/performancecopilot/pcp/pull/574,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/574#issuecomment-437293296,,"@natoscott Hi Nathan, Thanks for pointing this. I will fix this.

No problem - let me know if any help is needed.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,574,2018-10-31T23:19:14Z,2018-12-05T23:14:07Z,2018-12-05T23:14:07Z,CLOSED,False,78,15,6,https://github.com/anjutsudhakar,Add hv_24x7 nest events to perfevent-pmda,4,[],https://github.com/performancecopilot/pcp/pull/574,https://github.com/natoscott,5,https://github.com/performancecopilot/pcp/pull/574#issuecomment-444687739,,"This PR was superceded by another, closing.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,578,2018-11-21T16:04:49Z,2018-11-21T16:04:57Z,2018-11-21T16:58:22Z,MERGED,True,7,0,1,https://github.com/lberk,pcp-dstat: Add entropy config,1,[],https://github.com/performancecopilot/pcp/pull/578,https://github.com/lberk,1,https://github.com/performancecopilot/pcp/pull/578,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,579,2018-11-21T22:32:05Z,2018-11-22T02:00:33Z,2018-11-22T02:00:33Z,MERGED,True,17,0,1,https://github.com/wrabcak,[SELinux] Add generic policy rules to allow pcp_pmcd process to read system objects,1,[],https://github.com/performancecopilot/pcp/pull/579,https://github.com/wrabcak,1,https://github.com/performancecopilot/pcp/pull/579,"allow pcp_pmcd_t domain to read all dirs,files and fifo_file in attribute file_type
allow pcp_pmcd_t domain to read shared memory and semaphores of all domain on system
allow pcp_pmcd_t domain stream connect to all domains
allow pcp_pmcd_t domain to connect to all ports.","allow pcp_pmcd_t domain to read all dirs,files and fifo_file in attribute file_type
allow pcp_pmcd_t domain to read shared memory and semaphores of all domain on system
allow pcp_pmcd_t domain stream connect to all domains
allow pcp_pmcd_t domain to connect to all ports.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,581,2018-11-25T15:03:42Z,2018-11-28T05:15:51Z,2018-11-28T05:16:54Z,MERGED,True,32,5,7,https://github.com/rgolangh,pcp2elasticsearch: Support es_search_type flag,2,[],https://github.com/performancecopilot/pcp/pull/581,https://github.com/rgolangh,1,https://github.com/performancecopilot/pcp/pull/581,"Support the es_search_type config flag and allow to override the built-in
pcp-metric. This is specially useful for projects like ViaQ who maintian
their own types and indexes.","Support the es_search_type config flag and allow to override the built-in
pcp-metric. This is specially useful for projects like ViaQ who maintian
their own types and indexes.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,581,2018-11-25T15:03:42Z,2018-11-28T05:15:51Z,2018-11-28T05:16:54Z,MERGED,True,32,5,7,https://github.com/rgolangh,pcp2elasticsearch: Support es_search_type flag,2,[],https://github.com/performancecopilot/pcp/pull/581,https://github.com/sradco,2,https://github.com/performancecopilot/pcp/pull/581#issuecomment-441447097,"Support the es_search_type config flag and allow to override the built-in
pcp-metric. This is specially useful for projects like ViaQ who maintian
their own types and indexes.",Please review @lberk @natoscott,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,581,2018-11-25T15:03:42Z,2018-11-28T05:15:51Z,2018-11-28T05:16:54Z,MERGED,True,32,5,7,https://github.com/rgolangh,pcp2elasticsearch: Support es_search_type flag,2,[],https://github.com/performancecopilot/pcp/pull/581,https://github.com/myllynen,3,https://github.com/performancecopilot/pcp/pull/581#issuecomment-441532029,"Support the es_search_type config flag and allow to override the built-in
pcp-metric. This is specially useful for projects like ViaQ who maintian
their own types and indexes.","Please see how other pcp2xxx tools use certain set of letters for options specific to them. So for this I'd use -p, certainly -s won't work because it's in use already. I agree that the print() statement looks unnecessary, should be removed.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,581,2018-11-25T15:03:42Z,2018-11-28T05:15:51Z,2018-11-28T05:16:54Z,MERGED,True,32,5,7,https://github.com/rgolangh,pcp2elasticsearch: Support es_search_type flag,2,[],https://github.com/performancecopilot/pcp/pull/581,https://github.com/rgolangh,4,https://github.com/performancecopilot/pcp/pull/581#issuecomment-441539903,"Support the es_search_type config flag and allow to override the built-in
pcp-metric. This is specially useful for projects like ViaQ who maintian
their own types and indexes.","@myllynen What about dropping the short flag and supporting only the long ones? For one, we would run out of flags some time, and two, it is not that it is easy to remember. -p is a weak hint for 'search type'.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,581,2018-11-25T15:03:42Z,2018-11-28T05:15:51Z,2018-11-28T05:16:54Z,MERGED,True,32,5,7,https://github.com/rgolangh,pcp2elasticsearch: Support es_search_type flag,2,[],https://github.com/performancecopilot/pcp/pull/581,https://github.com/myllynen,5,https://github.com/performancecopilot/pcp/pull/581#issuecomment-441669150,"Support the es_search_type config flag and allow to override the built-in
pcp-metric. This is specially useful for projects like ViaQ who maintian
their own types and indexes.","I think it's best to have a short option defined as long as there are letters available. If you think -p is not intuitive then perhaps use another one, see e.g. pcp2graphite specific options in pcp2graphite(1) for options others are using.
Whatever short option you pick, you'll need to add it to shell completions to avoid breaking QA 1100.
Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,581,2018-11-25T15:03:42Z,2018-11-28T05:15:51Z,2018-11-28T05:16:54Z,MERGED,True,32,5,7,https://github.com/rgolangh,pcp2elasticsearch: Support es_search_type flag,2,[],https://github.com/performancecopilot/pcp/pull/581,https://github.com/rgolangh,6,https://github.com/performancecopilot/pcp/pull/581#issuecomment-441955113,"Support the es_search_type config flag and allow to override the built-in
pcp-metric. This is specially useful for projects like ViaQ who maintian
their own types and indexes.","I think it's best to have a short option defined as long as there are letters available. If you think -p is not intuitive then perhaps use another one, see e.g. pcp2graphite specific options in pcp2graphite(1) for options others are using.

I used -p meanwhile

Whatever short option you pick, you'll need to add it to shell completions to avoid breaking QA 1100.
Thanks.

Bash and zsh completion updated.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,581,2018-11-25T15:03:42Z,2018-11-28T05:15:51Z,2018-11-28T05:16:54Z,MERGED,True,32,5,7,https://github.com/rgolangh,pcp2elasticsearch: Support es_search_type flag,2,[],https://github.com/performancecopilot/pcp/pull/581,https://github.com/natoscott,7,https://github.com/performancecopilot/pcp/pull/581#issuecomment-442322875,"Support the es_search_type config flag and allow to override the built-in
pcp-metric. This is specially useful for projects like ViaQ who maintian
their own types and indexes.","@rgolangh @sradco @lberk  I've fixed an issue related to short option handling, updated the test case a bit (and updated the expected test output), and merged.  Please double check my changes in commit 504b117 - thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,582,2018-12-02T22:22:55Z,2018-12-04T06:14:11Z,2018-12-04T12:14:28Z,MERGED,True,165,20,4,https://github.com/fche,pmwebd: tolerate live archives with multi-hour-old volumes,1,[],https://github.com/performancecopilot/pcp/pull/582,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/582,"Prior to this patch, it was observed that in a live (being written-to)
multi-volume archive, pmwebd would stop looking for the last volume#
too early.  The timestamp on that wrong ""last"" volume is used in a
subsequent freshness heuristic.  Because the actual last volume file
may not be found during the search, pmwebd could be temporarily blind
to newer data available in newer volumes of the same archive,
returning falsely empty results.  This patch improves this volume
enumeration logic to find the last one, via an explicit loop.  This
leaves pmwebd with a max-60-second blind spot for fresh values.
qa/1389 tests with a pmlogger with HUP-triggered volume switching, and
an explicit /bin/touch to simulate longer-running previous volumes.","Prior to this patch, it was observed that in a live (being written-to)
multi-volume archive, pmwebd would stop looking for the last volume#
too early.  The timestamp on that wrong ""last"" volume is used in a
subsequent freshness heuristic.  Because the actual last volume file
may not be found during the search, pmwebd could be temporarily blind
to newer data available in newer volumes of the same archive,
returning falsely empty results.  This patch improves this volume
enumeration logic to find the last one, via an explicit loop.  This
leaves pmwebd with a max-60-second blind spot for fresh values.
qa/1389 tests with a pmlogger with HUP-triggered volume switching, and
an explicit /bin/touch to simulate longer-running previous volumes.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,582,2018-12-02T22:22:55Z,2018-12-04T06:14:11Z,2018-12-04T12:14:28Z,MERGED,True,165,20,4,https://github.com/fche,pmwebd: tolerate live archives with multi-hour-old volumes,1,[],https://github.com/performancecopilot/pcp/pull/582,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/582#issuecomment-443984393,"Prior to this patch, it was observed that in a live (being written-to)
multi-volume archive, pmwebd would stop looking for the last volume#
too early.  The timestamp on that wrong ""last"" volume is used in a
subsequent freshness heuristic.  Because the actual last volume file
may not be found during the search, pmwebd could be temporarily blind
to newer data available in newer volumes of the same archive,
returning falsely empty results.  This patch improves this volume
enumeration logic to find the last one, via an explicit loop.  This
leaves pmwebd with a max-60-second blind spot for fresh values.
qa/1389 tests with a pmlogger with HUP-triggered volume switching, and
an explicit /bin/touch to simulate longer-running previous volumes.","Merged with a small tweak to qa/1389, which runs for ~ 2m10s (a bit long, but it passes and does the job)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,583,2018-12-04T07:01:09Z,2018-12-05T22:41:28Z,2018-12-05T22:41:28Z,MERGED,True,127,19,9,https://github.com/anjutsudhakar,Add support for hv_24x7 nest perfevents,4,[],https://github.com/performancecopilot/pcp/pull/583,https://github.com/anjutsudhakar,1,https://github.com/performancecopilot/pcp/pull/583,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,584,2018-12-05T13:16:15Z,2018-12-10T22:01:48Z,2018-12-11T04:57:38Z,MERGED,True,82,3,7,https://github.com/sandip4n,pmda: perfevent: Add support for raw perf events,2,[],https://github.com/performancecopilot/pcp/pull/584,https://github.com/sandip4n,1,https://github.com/performancecopilot/pcp/pull/584,"This adds support for using perf events which might not be exposed via standard mechanisms such as sysfs or libpfm. The alternative way to access these hardware counters is by using the architecture
dependent raw event codes directly.
Raw events can be specified in the perfevent configuration using the following syntax:
  RAW:[EVENT_NAME] rawcode=[RAW_EVENT_CODE]

E.g.
  $ tail -n 1 /var/lib/pcp/pmdas/perfevent/perfevent.conf
  RAW:foo rawcode=0x1e

  $ pminfo | grep foo
  perfevent.hwcounters.RAW_foo.dutycycle
  perfevent.hwcounters.RAW_foo.value","This adds support for using perf events which might not be exposed via standard mechanisms such as sysfs or libpfm. The alternative way to access these hardware counters is by using the architecture
dependent raw event codes directly.
Raw events can be specified in the perfevent configuration using the following syntax:
  RAW:[EVENT_NAME] rawcode=[RAW_EVENT_CODE]

E.g.
  $ tail -n 1 /var/lib/pcp/pmdas/perfevent/perfevent.conf
  RAW:foo rawcode=0x1e

  $ pminfo | grep foo
  perfevent.hwcounters.RAW_foo.dutycycle
  perfevent.hwcounters.RAW_foo.value",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,584,2018-12-05T13:16:15Z,2018-12-10T22:01:48Z,2018-12-11T04:57:38Z,MERGED,True,82,3,7,https://github.com/sandip4n,pmda: perfevent: Add support for raw perf events,2,[],https://github.com/performancecopilot/pcp/pull/584,https://github.com/sandip4n,2,https://github.com/performancecopilot/pcp/pull/584#issuecomment-444870708,"This adds support for using perf events which might not be exposed via standard mechanisms such as sysfs or libpfm. The alternative way to access these hardware counters is by using the architecture
dependent raw event codes directly.
Raw events can be specified in the perfevent configuration using the following syntax:
  RAW:[EVENT_NAME] rawcode=[RAW_EVENT_CODE]

E.g.
  $ tail -n 1 /var/lib/pcp/pmdas/perfevent/perfevent.conf
  RAW:foo rawcode=0x1e

  $ pminfo | grep foo
  perfevent.hwcounters.RAW_foo.dutycycle
  perfevent.hwcounters.RAW_foo.value","@natoscott I have resolved the previous issues. If this looks good to you, I can drop the RFC tag.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,584,2018-12-05T13:16:15Z,2018-12-10T22:01:48Z,2018-12-11T04:57:38Z,MERGED,True,82,3,7,https://github.com/sandip4n,pmda: perfevent: Add support for raw perf events,2,[],https://github.com/performancecopilot/pcp/pull/584,https://github.com/anjutsudhakar,3,https://github.com/performancecopilot/pcp/pull/584#issuecomment-445189926,"This adds support for using perf events which might not be exposed via standard mechanisms such as sysfs or libpfm. The alternative way to access these hardware counters is by using the architecture
dependent raw event codes directly.
Raw events can be specified in the perfevent configuration using the following syntax:
  RAW:[EVENT_NAME] rawcode=[RAW_EVENT_CODE]

E.g.
  $ tail -n 1 /var/lib/pcp/pmdas/perfevent/perfevent.conf
  RAW:foo rawcode=0x1e

  $ pminfo | grep foo
  perfevent.hwcounters.RAW_foo.dutycycle
  perfevent.hwcounters.RAW_foo.value",@sandip4n Looks good to me. Tested with the example provided in the commit and it works as expected.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,584,2018-12-05T13:16:15Z,2018-12-10T22:01:48Z,2018-12-11T04:57:38Z,MERGED,True,82,3,7,https://github.com/sandip4n,pmda: perfevent: Add support for raw perf events,2,[],https://github.com/performancecopilot/pcp/pull/584,https://github.com/sandip4n,4,https://github.com/performancecopilot/pcp/pull/584#issuecomment-445197322,"This adds support for using perf events which might not be exposed via standard mechanisms such as sysfs or libpfm. The alternative way to access these hardware counters is by using the architecture
dependent raw event codes directly.
Raw events can be specified in the perfevent configuration using the following syntax:
  RAW:[EVENT_NAME] rawcode=[RAW_EVENT_CODE]

E.g.
  $ tail -n 1 /var/lib/pcp/pmdas/perfevent/perfevent.conf
  RAW:foo rawcode=0x1e

  $ pminfo | grep foo
  perfevent.hwcounters.RAW_foo.dutycycle
  perfevent.hwcounters.RAW_foo.value",Thanks @anjutsudhakar,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,584,2018-12-05T13:16:15Z,2018-12-10T22:01:48Z,2018-12-11T04:57:38Z,MERGED,True,82,3,7,https://github.com/sandip4n,pmda: perfevent: Add support for raw perf events,2,[],https://github.com/performancecopilot/pcp/pull/584,https://github.com/natoscott,5,https://github.com/performancecopilot/pcp/pull/584#issuecomment-445704486,"This adds support for using perf events which might not be exposed via standard mechanisms such as sysfs or libpfm. The alternative way to access these hardware counters is by using the architecture
dependent raw event codes directly.
Raw events can be specified in the perfevent configuration using the following syntax:
  RAW:[EVENT_NAME] rawcode=[RAW_EVENT_CODE]

E.g.
  $ tail -n 1 /var/lib/pcp/pmdas/perfevent/perfevent.conf
  RAW:foo rawcode=0x1e

  $ pminfo | grep foo
  perfevent.hwcounters.RAW_foo.dutycycle
  perfevent.hwcounters.RAW_foo.value",@sandip4n could you add a regression test for this?  (along the lines @anjutsudhakar did in commit a125048 ?),True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,584,2018-12-05T13:16:15Z,2018-12-10T22:01:48Z,2018-12-11T04:57:38Z,MERGED,True,82,3,7,https://github.com/sandip4n,pmda: perfevent: Add support for raw perf events,2,[],https://github.com/performancecopilot/pcp/pull/584,https://github.com/sandip4n,6,https://github.com/performancecopilot/pcp/pull/584#issuecomment-445705813,"This adds support for using perf events which might not be exposed via standard mechanisms such as sysfs or libpfm. The alternative way to access these hardware counters is by using the architecture
dependent raw event codes directly.
Raw events can be specified in the perfevent configuration using the following syntax:
  RAW:[EVENT_NAME] rawcode=[RAW_EVENT_CODE]

E.g.
  $ tail -n 1 /var/lib/pcp/pmdas/perfevent/perfevent.conf
  RAW:foo rawcode=0x1e

  $ pminfo | grep foo
  perfevent.hwcounters.RAW_foo.dutycycle
  perfevent.hwcounters.RAW_foo.value",@natoscott Sure,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,584,2018-12-05T13:16:15Z,2018-12-10T22:01:48Z,2018-12-11T04:57:38Z,MERGED,True,82,3,7,https://github.com/sandip4n,pmda: perfevent: Add support for raw perf events,2,[],https://github.com/performancecopilot/pcp/pull/584,https://github.com/sandip4n,7,https://github.com/performancecopilot/pcp/pull/584#issuecomment-445888640,"This adds support for using perf events which might not be exposed via standard mechanisms such as sysfs or libpfm. The alternative way to access these hardware counters is by using the architecture
dependent raw event codes directly.
Raw events can be specified in the perfevent configuration using the following syntax:
  RAW:[EVENT_NAME] rawcode=[RAW_EVENT_CODE]

E.g.
  $ tail -n 1 /var/lib/pcp/pmdas/perfevent/perfevent.conf
  RAW:foo rawcode=0x1e

  $ pminfo | grep foo
  perfevent.hwcounters.RAW_foo.dutycycle
  perfevent.hwcounters.RAW_foo.value",@natoscott Rebased on top of current master branch and added test cases.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,585,2018-12-11T20:04:34Z,2018-12-11T21:41:03Z,2019-05-09T11:14:32Z,MERGED,True,1,1,1,https://github.com/lberk,"pmchart.desktop: standards require a "";"" at end of Categories field",1,[],https://github.com/performancecopilot/pcp/pull/585,https://github.com/lberk,1,https://github.com/performancecopilot/pcp/pull/585,Merging Frank's XDG desktop categories fix,Merging Frank's XDG desktop categories fix,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,587,2018-12-11T22:08:59Z,2018-12-11T22:11:20Z,2018-12-11T22:11:20Z,MERGED,True,893,317,12,https://github.com/lberk,Merge Ken's qa check-vm work,14,[],https://github.com/performancecopilot/pcp/pull/587,https://github.com/lberk,1,https://github.com/performancecopilot/pcp/pull/587,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,591,2018-12-17T18:36:09Z,2020-02-20T06:21:35Z,2020-02-20T06:21:35Z,CLOSED,False,5,0,1,https://github.com/fche,"pmmgr: workaround for missing libpcp O_CLOEXEC, issues/419",1,[],https://github.com/performancecopilot/pcp/pull/591,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/591,"Manually close fd's 3..sysconf(_SC_OPEN_MAX) before exec'ing
subordinate daemon processes.
issue #419","Manually close fd's 3..sysconf(_SC_OPEN_MAX) before exec'ing
subordinate daemon processes.
issue #419",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,591,2018-12-17T18:36:09Z,2020-02-20T06:21:35Z,2020-02-20T06:21:35Z,CLOSED,False,5,0,1,https://github.com/fche,"pmmgr: workaround for missing libpcp O_CLOEXEC, issues/419",1,[],https://github.com/performancecopilot/pcp/pull/591,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/591#issuecomment-588630359,"Manually close fd's 3..sysconf(_SC_OPEN_MAX) before exec'ing
subordinate daemon processes.
issue #419","This PR lacks QA and as described is more workaround than fix.  Longer term we'll be replacing the standalone pmmgr daemon with improvements to the PCP systemd integration, particularly for pmie and pmlogger farms, so closing this one out now as no further work is planned in this area.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,592,2018-12-17T18:41:27Z,2019-01-11T22:07:32Z,2019-01-11T22:07:32Z,MERGED,True,2,33,2,https://github.com/fche,pmwebd: drop /dev/tty diagnostics copying from pmwebd,2,[],https://github.com/performancecopilot/pcp/pull/592,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/592,"Disable pmwebd -x option.
issue #412","Disable pmwebd -x option.
issue #412",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,593,2018-12-17T18:46:13Z,2019-08-22T04:21:20Z,2019-08-22T04:21:30Z,CLOSED,False,183,11,5,https://github.com/fche,pmwebd: add -r NUM option to retain open archive contexts,1,[],https://github.com/performancecopilot/pcp/pull/593,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/593,"This option permits pmwebd to avoid incurring potentially long libpcp
delays when opening archive contexts, by keeping some number of them
open.  This is done on an LRU basis, and governed by a new ""-r NUM""
option.  This makes a huge difference on archives with O(4GB) .meta
files, such as reported on RHBZ1619708.","This option permits pmwebd to avoid incurring potentially long libpcp
delays when opening archive contexts, by keeping some number of them
open.  This is done on an LRU basis, and governed by a new ""-r NUM""
option.  This makes a huge difference on archives with O(4GB) .meta
files, such as reported on RHBZ1619708.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,593,2018-12-17T18:46:13Z,2019-08-22T04:21:20Z,2019-08-22T04:21:30Z,CLOSED,False,183,11,5,https://github.com/fche,pmwebd: add -r NUM option to retain open archive contexts,1,[],https://github.com/performancecopilot/pcp/pull/593,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/593#issuecomment-523741286,"This option permits pmwebd to avoid incurring potentially long libpcp
delays when opening archive contexts, by keeping some number of them
open.  This is done on an LRU basis, and governed by a new ""-r NUM""
option.  This makes a huge difference on archives with O(4GB) .meta
files, such as reported on RHBZ1619708.","There's been no QA provided exercising the new code in the months since this pull request was created.
pmwebd is also deprecated and in the process of being replaced by pmproxy - it will be removed in a future release.  Since there are no further updates to pmwebd planned, I'm closing this out now.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,594,2018-12-17T18:47:17Z,2019-01-08T21:59:09Z,2019-01-08T22:00:05Z,MERGED,True,4,0,1,https://github.com/fche,pmwebd issues/580: tolerate empty prometheus metrics query,1,[],https://github.com/performancecopilot/pcp/pull/594,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/594,"Previous code could crash on http://localhost:PORT/pmapi/1/metrics
sans the ?target=FOO querystrings.","Previous code could crash on http://localhost:PORT/pmapi/1/metrics
sans the ?target=FOO querystrings.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,594,2018-12-17T18:47:17Z,2019-01-08T21:59:09Z,2019-01-08T22:00:05Z,MERGED,True,4,0,1,https://github.com/fche,pmwebd issues/580: tolerate empty prometheus metrics query,1,[],https://github.com/performancecopilot/pcp/pull/594,https://github.com/lberk,2,https://github.com/performancecopilot/pcp/pull/594#issuecomment-452398917,"Previous code could crash on http://localhost:PORT/pmapi/1/metrics
sans the ?target=FOO querystrings.","Hey Frank,
Thanks for the PR, how can I test this? is there a qa test that could be extended?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,594,2018-12-17T18:47:17Z,2019-01-08T21:59:09Z,2019-01-08T22:00:05Z,MERGED,True,4,0,1,https://github.com/fche,pmwebd issues/580: tolerate empty prometheus metrics query,1,[],https://github.com/performancecopilot/pcp/pull/594,https://github.com/fche,3,https://github.com/performancecopilot/pcp/pull/594#issuecomment-452399455,"Previous code could crash on http://localhost:PORT/pmapi/1/metrics
sans the ?target=FOO querystrings.",The original report #580 (comment) included the demonstration.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,594,2018-12-17T18:47:17Z,2019-01-08T21:59:09Z,2019-01-08T22:00:05Z,MERGED,True,4,0,1,https://github.com/fche,pmwebd issues/580: tolerate empty prometheus metrics query,1,[],https://github.com/performancecopilot/pcp/pull/594,https://github.com/lberk,4,https://github.com/performancecopilot/pcp/pull/594#issuecomment-452403678,"Previous code could crash on http://localhost:PORT/pmapi/1/metrics
sans the ?target=FOO querystrings.","Ok, thanks, in your estimation, would a simple addition to qa/660 with a new curl command work to ensure we don't any regressions on this in the future?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,594,2018-12-17T18:47:17Z,2019-01-08T21:59:09Z,2019-01-08T22:00:05Z,MERGED,True,4,0,1,https://github.com/fche,pmwebd issues/580: tolerate empty prometheus metrics query,1,[],https://github.com/performancecopilot/pcp/pull/594,https://github.com/fche,5,https://github.com/performancecopilot/pcp/pull/594#issuecomment-452405511,"Previous code could crash on http://localhost:PORT/pmapi/1/metrics
sans the ?target=FOO querystrings.",Yes.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,594,2018-12-17T18:47:17Z,2019-01-08T21:59:09Z,2019-01-08T22:00:05Z,MERGED,True,4,0,1,https://github.com/fche,pmwebd issues/580: tolerate empty prometheus metrics query,1,[],https://github.com/performancecopilot/pcp/pull/594,https://github.com/lberk,6,https://github.com/performancecopilot/pcp/pull/594#issuecomment-452408945,"Previous code could crash on http://localhost:PORT/pmapi/1/metrics
sans the ?target=FOO querystrings.","Also, in testing the reproducer as described in #580, I'm getting a failure to start pmwebd;
% /usr/libexec/pcp/bin/pmwebd -h local: -p 8889 &
[Tue Jan  8 18:33:17] pmwebd(21002) Info: context (web1=pm0) created, host local:, permanent
pmwebd: non-permissive and local-context modes are mutually exclusive
Usage: pmwebd [options]

Network options:
...

This is with latest git master, is this expected?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,594,2018-12-17T18:47:17Z,2019-01-08T21:59:09Z,2019-01-08T22:00:05Z,MERGED,True,4,0,1,https://github.com/fche,pmwebd issues/580: tolerate empty prometheus metrics query,1,[],https://github.com/performancecopilot/pcp/pull/594,https://github.com/fche,7,https://github.com/performancecopilot/pcp/pull/594#issuecomment-452410550,"Previous code could crash on http://localhost:PORT/pmapi/1/metrics
sans the ?target=FOO querystrings.","For some reason, the pmwebd -P code also constrains this command-line-option specified list of pmcd destinations.  So try adding -P to the option list.  Sorry I left it out earlier.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,596,2018-12-18T21:39:23Z,2018-12-19T02:28:57Z,2018-12-20T02:25:49Z,MERGED,True,30,34,1,https://github.com/fche,postgresq pmda: fix Install for optional osuser=,1,[],https://github.com/performancecopilot/pcp/pull/596,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/596,"Make pmns setup, local id searching, all optional based on
presence of ""osuser="" configuration.","Make pmns setup, local id searching, all optional based on
presence of ""osuser="" configuration.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,596,2018-12-18T21:39:23Z,2018-12-19T02:28:57Z,2018-12-20T02:25:49Z,MERGED,True,30,34,1,https://github.com/fche,postgresq pmda: fix Install for optional osuser=,1,[],https://github.com/performancecopilot/pcp/pull/596,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/596#issuecomment-448410811,"Make pmns setup, local id searching, all optional based on
presence of ""osuser="" configuration.","eval `grep ""osuser="" $conf`
if [ -n ""$user"" ]; then
....

Unless $user is defined elsewhere, that test is never going to be true and thus the original setup will now never be done, regardless of whether $osuser is defined or not.
I assume you mean :
eval `grep ""^osuser="" $conf`
if [ -n ""$osuser"" ]; then
....",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,1,https://github.com/performancecopilot/pcp/pull/599,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/fche,2,https://github.com/performancecopilot/pcp/pull/599#issuecomment-451960883,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.",great - see also issue #177,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,3,https://github.com/performancecopilot/pcp/pull/599#issuecomment-454405389,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","Ping, any feedback on this one?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/599#issuecomment-454640436,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","Ping, any feedback on this one?

Hi Dave,
No issues from me, still recovering from end-of-year backlog a bit ... but, what is the rationale for this change OOC? - is cron going away?  or are there situations cron is unavailable?  (containers based on systemd?)  or does this mechanism provide other functionality of use in the PCP context?
There's a small issue in that qa/common.check provides (test 255) an ability to stop cronjobs interfering with its work ... the equivalent would need to be implemented for this systemd mechanism.
Has the upgrade path been thought through?  What of the situation where people have modified the PCP cronjobs to add their own customisations?  (e.g. additional command options, different log compression, and so on).
How would someone go about adding / changing the options used in these systemd files?  (e.g. the ""-X xz -x 3"" part)  And if that involves editing them directly, is there package manager support for not overwriting those changes, like there is for the /etc cron files?  (an alternative might be to move the explicit use of ""-X xz -x 3"" into an /etc/pcp file set instead of hard-coding them there)
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,5,https://github.com/performancecopilot/pcp/pull/599#issuecomment-454738295,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","Hi Nathan,

No issues from me, still recovering from end-of-year backlog a bit ... but, what is the rationale for this change OOC? - is cron going away? or are there situations cron is unavailable? (containers based on systemd?) or does this mechanism provide other functionality of use in the PCP context?

We're trying to move towards using systemd timers exclusively for system packages in future SUSE releases.

There's a small issue in that qa/common.check provides (test 255) an ability to stop cronjobs interfering with its work ... the equivalent would need to be implemented for this systemd mechanism.

Ah okay, I'll take a look at that.

Has the upgrade path been thought through? What of the situation where people have modified the PCP cronjobs to add their own customisations? (e.g. additional command options, different log compression, and so on).

This patchset only covers new installations. I guess we could add some rpm script magic to handle cron->systemd timer upgrades. I'll have a think about it.

How would someone go about adding / changing the options used in these systemd files? (e.g. the ""-X xz -x 3"" part) And if that involves editing them directly, is there package manager support for not overwriting those changes, like there is for the /etc cron files? (an alternative might be to move the explicit use of ""-X xz -x 3"" into an /etc/pcp file set instead of hard-coding them there)

If we want these parameters to be user tunable, then using a systemd EnvironmentFile, like your suggested alternative, would make sense.
Thanks for the feedback!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/kmcdonell,6,https://github.com/performancecopilot/pcp/pull/599#issuecomment-454898895,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","Hi @ddiss ... I have basically the same questions as Nathan

what happens after an upgrade if both cron and systemd think they are driving?
leaving the religious issues aside, systemd has proven to be a total pain for QA and by default we avoid it whenever possible ... we'd need a big hammer to stop systemd doing async ""good"" things, like checking and restarting daemons or pmlogger, while QA is running",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/myllynen,7,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456104693,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","systemd has proven to be a total pain for QA and by default we avoid it whenever possible ... we'd need a big hammer to stop systemd doing async ""good"" things

I think we should acknowledge that PCP's systemd support is not complete and may play a part here. For better or worse, a systemd developer described one of the PCP startup scripts as ""horror"" (in https://bugzilla.redhat.com/show_bug.cgi?id=1650999) which I suppose was meant to compare the current PCP approach for using systemd to full systemd support implemented by most of the other services running on recent Linux distributions (which does away with (most) custom shell scripts).
Some aspects to consider around PCP / systemd:

My Fedora 29 VMs would otherwise shutdown in ~2 seconds but with latest git master with redis and pmproxy -t in use (for pmseries), stopping pmproxy takes up to 18 (!) seconds so there's a significant delay caused by PCP init script for system shutdown
When running QA, I see often PCP processes being started outside of systemd realm after QA runs (meaning that the PCP services are running but systemctl status shows them being stopped)
The needed steps to properly support systemd in PCP are AFAICS described in #177 (comment)

Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/fche,8,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456112043,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","systemd has proven to be a total pain for QA and by default we avoid it whenever possible

It may be worthwhile to revisit this.  systemd level stopping & starting of daemons is completely effective, if one just uses systemctl instead of ps|grep|kill methods.  Also, if QA eschews testing on realistic (systemd-based) pcp installations, then QA results can be false positives.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,9,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456114432,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","Hi @kmcdonell

what happens after an upgrade if both cron and systemd think they are driving?

It looks like we should be able to use
ConditionPathExists=!@CRONTAB_PATH@
ConditionPathExists=!@CRONTAB_DAILY_REPORT_PATH@
...
in the timer service files to avoid this condition. Would you consider this appropriate protection?
If so, I'll resubmit with these changes.

leaving the religious issues aside, systemd has proven to be a total pain for QA and by default we avoid it whenever possible ... we'd need a big hammer to stop systemd doing async ""good"" things, like checking and restarting daemons or pmlogger, while QA is running

As discussed with Nathan, I'll look into having qa/common.check handle systemd timers when available.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,10,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456131513,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","It looks like we should be able to use
ConditionPathExists=!@CRONTAB_PATH@
ConditionPathExists=!@CRONTAB_DAILY_REPORT_PATH@
...
in the timer service files to avoid this condition.

I did some testing with this - the service is silently skipped rather than logged as a failure, but otherwise it works well.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,11,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456169458,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","This new patchset includes the systemd service !ConditionPathExists cron guards and adds pmlogger_/pmie_timers sysconfig EnvironmentFile templates, which can be used to override the default service parameters.
I haven't gotten to the test suite changes yet, so this should probably be considered an RFC for now.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,12,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456169805,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.",It probably also makes sense to squash these changes down before merge. I haven't done that yet to make it a little easier for reviewers.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/natoscott,13,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456191102,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","It looks like we should be able to use
ConditionPathExists=!@CRONTAB_PATH@
ConditionPathExists=!@CRONTAB_DAILY_REPORT_PATH@
...
in the timer service files to avoid this condition.

I did some testing with this - the service is silently skipped rather than logged as a failure, but otherwise it works well.

Sounds like a good solution there, Dave - thanks for checking it out.  I think with your planned QA tweaks we're good to go here, I'll start running it on my local systems and in my own QA runs shortly.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/natoscott,14,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456194902,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","For better or worse, a systemd developer described one of the PCP startup scripts as ""horror""

Childish name calling from either side is more likely to hinder than help improve the situation, so please don't repeat such things here - let's stick to facts and discussion of actual patches.

[...] stopping `pmproxy` takes up to 18 (!) seconds so there's a significant delay caused by PCP init script for system shutdown


This one is a bug in the new pmproxy code, being worked on (amongst many other things) - dropping into a debugger on pmproxy suggests it is unrelated to the init scripts, and it appears to be more of an async I/O completion issue.
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,15,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456234142,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","@natoscott skipping 255 is most likely not what you had in mind, but I'll leave it here until I have a better idea of what _remove_cron() and _restore_cron() are actually used for in this test.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/natoscott,16,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456234827,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","@ddiss yeah, not that - the equivalent functionality should be achievable in a similar way to the existing cron code - i.e. moving aside the systemd timer files while the test is running (via _remove_cron), and replacing them at the end (via _restore_cron)?  The aim is to prevent interference from the system scripts while the test runs as that would cause the test to fail.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,17,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456235494,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","@natoscott I could disable the individual timers, which should achieve something like that.",True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,18,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456520543,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.",This new round drops the _check_cron() change and updates test 255 to disable PCP's systemd timers during the test.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,19,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456786300,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.",@natoscott this new round attempts to address your proposals. I added an extra systemd.state file so that backup / restore can be handled independently for systemd timers and crontab.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,20,https://github.com/performancecopilot/pcp/pull/599#issuecomment-456820220,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.",another update with the generated pmlogger/pmie service files added to .gitignore.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/natoscott,21,https://github.com/performancecopilot/pcp/pull/599#issuecomment-464893751,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","@ddiss I'm seeing some fallout from this change.  Upgrading an existing systemd-based system to current PCP via rpm packages results in no cron scripts, no active timers but primary pmlogger and/or pmie service still running.  This means no daily rollover, no daily reports, no log compression, no log culling, and enospc eventually ensues ... generally, badness.
I think we're missing dependencies between the timers and the associated pmlogger/pmie services.  I've taken a stab at adding this based on some systemd docs reading, but would appreciate a closer eye over these changes (will push after a little more testing here.) - thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,22,https://github.com/performancecopilot/pcp/pull/599#issuecomment-464909840,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","@natoscott Sorry for the headache - enablement of systemd services is generally handled by the package post-install scripts. SUSE have a few distro specific spec file macros for this, so I wasn't too sure what to do for Fedora, etc. Proper dependencies between the timers and core services would definitely be nice to have. I'm happy to take a look at whatever changes you have staged.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/natoscott,23,https://github.com/performancecopilot/pcp/pull/599#issuecomment-464921507,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","@ddiss this seems to do the right thing (commit 9947fbf) - no additional spec file changes needed, AFAICT?  (can you describe the SuSE changes a little more so we can audit build/rpm/fedora.spec for missing magic?) - thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,24,https://github.com/performancecopilot/pcp/pull/599#issuecomment-464924618,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","no additional spec file changes needed, AFAICT?

Thanks Nathan. This looks good and should avoid any need to touch the timer services in postinst :)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/natoscott,25,https://github.com/performancecopilot/pcp/pull/599#issuecomment-464926643,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","@ddiss thanks Dave - I think I've overlooked deps for the new services added to replace cron scripts (non-timers) - will update those too.
I also noticed that all other timers seem to use a convention of hyphens rather than underscores in their names.  I wonder if we should follow suit?  Now is probably the best time to decide as these have not been released yet.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/ddiss,26,https://github.com/performancecopilot/pcp/pull/599#issuecomment-464929953,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","I also noticed that all other timers seem to use a convention of hyphens rather than underscores in their names. I wonder if we should follow suit?

I'm fine with either. I guess it makes sense to use the common convention.

Now is probably the best time to decide as these have not been released yet.

Agreed. Will you submit with the renames, or would you like me to?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,599,2019-01-07T14:24:06Z,2019-01-24T06:59:40Z,2019-02-19T00:25:04Z,MERGED,True,343,44,22,https://github.com/ddiss,offer systemd timers as an alternative to crontab,8,[],https://github.com/performancecopilot/pcp/pull/599,https://github.com/natoscott,27,https://github.com/performancecopilot/pcp/pull/599#issuecomment-464930913,"This patchset converts (non-docker) pmie and pmlogger crontab entries to systemd timer + service files, which are installed when ENABLE_SYSTEMD is configured.","Agreed. Will you submit with the renames, or would you like me to?

If you could, that'd be great Dave - I'm keen to focus on other QA and docs efforts for the 4.3.1 release later this week.",True,{'THUMBS_UP': ['https://github.com/ddiss']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,602,2019-01-08T09:38:54Z,2019-01-08T15:42:02Z,2019-01-08T15:42:05Z,MERGED,True,1,1,1,https://github.com/yuokada126,programmers guide: fix typo in sample code,1,[],https://github.com/performancecopilot/pcp/pull/602,https://github.com/yuokada126,1,https://github.com/performancecopilot/pcp/pull/602,"""pmgui"" is incorrectly written as ""ppmgui"" in programmers guide.
https://pcp.io/books/PCP_PG/html/ch03s07s02.html
https://pcp.io/books/PCP_PG/pdf/pcp-programmers-guide.pdf","""pmgui"" is incorrectly written as ""ppmgui"" in programmers guide.
https://pcp.io/books/PCP_PG/html/ch03s07s02.html
https://pcp.io/books/PCP_PG/pdf/pcp-programmers-guide.pdf",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,602,2019-01-08T09:38:54Z,2019-01-08T15:42:02Z,2019-01-08T15:42:05Z,MERGED,True,1,1,1,https://github.com/yuokada126,programmers guide: fix typo in sample code,1,[],https://github.com/performancecopilot/pcp/pull/602,https://github.com/lberk,2,https://github.com/performancecopilot/pcp/pull/602#issuecomment-452344337,"""pmgui"" is incorrectly written as ""ppmgui"" in programmers guide.
https://pcp.io/books/PCP_PG/html/ch03s07s02.html
https://pcp.io/books/PCP_PG/pdf/pcp-programmers-guide.pdf","LGTM, thank you, the qa failure isn't related to this change.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,603,2019-01-08T20:39:18Z,2019-01-10T21:28:04Z,2019-01-10T21:28:35Z,MERGED,True,9,0,3,https://github.com/fche,pmwebd: stop leaking open-fd for 304 (not modified) file service case,2,[],https://github.com/performancecopilot/pcp/pull/603,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/603,"In the case where pmwebd is serving a file, and it turns out eligible
for HTTP-304 optimization, the file descriptor was left open.  We now
close 'er up to avoid this leak.","In the case where pmwebd is serving a file, and it turns out eligible
for HTTP-304 optimization, the file descriptor was left open.  We now
close 'er up to avoid this leak.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,603,2019-01-08T20:39:18Z,2019-01-10T21:28:04Z,2019-01-10T21:28:35Z,MERGED,True,9,0,3,https://github.com/fche,pmwebd: stop leaking open-fd for 304 (not modified) file service case,2,[],https://github.com/performancecopilot/pcp/pull/603,https://github.com/lberk,2,https://github.com/performancecopilot/pcp/pull/603#issuecomment-453260615,"In the case where pmwebd is serving a file, and it turns out eligible
for HTTP-304 optimization, the file descriptor was left open.  We now
close 'er up to avoid this leak.",Thanks for including QA @fche!,True,{'THUMBS_UP': ['https://github.com/fche']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,606,2019-01-15T14:12:29Z,2019-01-15T20:01:21Z,2019-01-16T10:59:03Z,MERGED,True,3,1,3,https://github.com/ddiss,pmns: don't package .NeedRebuild for SUSE distros,1,[],https://github.com/performancecopilot/pcp/pull/606,https://github.com/ddiss,1,https://github.com/performancecopilot/pcp/pull/606,".NeedRebuild creation is handled by rpm scripts.
This change also fixes the target_distro configure check for modern
[open]SUSE distros, which only include /etc/os-release.
Signed-off-by: David Disseldorp ddiss@suse.de",".NeedRebuild creation is handled by rpm scripts.
This change also fixes the target_distro configure check for modern
[open]SUSE distros, which only include /etc/os-release.
Signed-off-by: David Disseldorp ddiss@suse.de",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,609,2019-01-31T13:45:10Z,2019-01-31T23:04:52Z,2019-01-31T23:04:53Z,CLOSED,False,1,1,1,https://github.com/ddiss,pmns: don't install .NeedRebuild on Linux,1,[],https://github.com/performancecopilot/pcp/pull/609,https://github.com/ddiss,1,https://github.com/performancecopilot/pcp/pull/609,"The existing filter already covers RedHat, Debian and SUSE distros, but
depends on os-release file based distro detection.
Change the .NeedRebuild install check to cover all Linux build targets,
so that os-release distro detection isn't necessary.
Signed-off-by: David Disseldorp ddiss@suse.de","The existing filter already covers RedHat, Debian and SUSE distros, but
depends on os-release file based distro detection.
Change the .NeedRebuild install check to cover all Linux build targets,
so that os-release distro detection isn't necessary.
Signed-off-by: David Disseldorp ddiss@suse.de",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,609,2019-01-31T13:45:10Z,2019-01-31T23:04:52Z,2019-01-31T23:04:53Z,CLOSED,False,1,1,1,https://github.com/ddiss,pmns: don't install .NeedRebuild on Linux,1,[],https://github.com/performancecopilot/pcp/pull/609,https://github.com/ddiss,2,https://github.com/performancecopilot/pcp/pull/609#issuecomment-459349448,"The existing filter already covers RedHat, Debian and SUSE distros, but
depends on os-release file based distro detection.
Change the .NeedRebuild install check to cover all Linux build targets,
so that os-release distro detection isn't necessary.
Signed-off-by: David Disseldorp ddiss@suse.de",See https://bugzilla.suse.com/show_bug.cgi?id=1123311 for some more background on why this change is necessary.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,609,2019-01-31T13:45:10Z,2019-01-31T23:04:52Z,2019-01-31T23:04:53Z,CLOSED,False,1,1,1,https://github.com/ddiss,pmns: don't install .NeedRebuild on Linux,1,[],https://github.com/performancecopilot/pcp/pull/609,https://github.com/fche,3,https://github.com/performancecopilot/pcp/pull/609#issuecomment-459352087,"The existing filter already covers RedHat, Debian and SUSE distros, but
depends on os-release file based distro detection.
Change the .NeedRebuild install check to cover all Linux build targets,
so that os-release distro detection isn't necessary.
Signed-off-by: David Disseldorp ddiss@suse.de",I wonder why this .NeedRebuild business is distro-specific at all.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,609,2019-01-31T13:45:10Z,2019-01-31T23:04:52Z,2019-01-31T23:04:53Z,CLOSED,False,1,1,1,https://github.com/ddiss,pmns: don't install .NeedRebuild on Linux,1,[],https://github.com/performancecopilot/pcp/pull/609,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/609#issuecomment-459537349,"The existing filter already covers RedHat, Debian and SUSE distros, but
depends on os-release file based distro detection.
Change the .NeedRebuild install check to cover all Linux build targets,
so that os-release distro detection isn't necessary.
Signed-off-by: David Disseldorp ddiss@suse.de","@ddiss this change has the side-effect of breaking any distribution which is not using (rpm/deb) packaging to handle the namespace rebuild.  There are several of those - Arch, etc.
The underlying change (not depending on the configure.ac mechanisms to detect the distro) is also going to mean SuSE platforms are no longer detected correctly in the build, so any future makefile change needing this information may get a surprise - possibly leading to bugs.
Is there any other reliable way we can detect suse platforms in configure.ac?  In the worst case, I guess you could force PACKAGE_DISTRIBUTION to be set in the spec file, before configure is run, to ensure configure.ac still comes up with the correct result.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,609,2019-01-31T13:45:10Z,2019-01-31T23:04:52Z,2019-01-31T23:04:53Z,CLOSED,False,1,1,1,https://github.com/ddiss,pmns: don't install .NeedRebuild on Linux,1,[],https://github.com/performancecopilot/pcp/pull/609,https://github.com/ddiss,5,https://github.com/performancecopilot/pcp/pull/609#issuecomment-459540959,"The existing filter already covers RedHat, Debian and SUSE distros, but
depends on os-release file based distro detection.
Change the .NeedRebuild install check to cover all Linux build targets,
so that os-release distro detection isn't necessary.
Signed-off-by: David Disseldorp ddiss@suse.de",I'll go down the PACKAGE_DISTRIBUTION route and withdraw this change. Thanks for the feedback.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,610,2019-01-31T18:51:01Z,2019-01-31T23:11:26Z,2019-01-31T23:11:26Z,MERGED,True,12,3,1,https://github.com/fche,pmwebd graphite pngs: tweak y axis labeling,1,[],https://github.com/performancecopilot/pcp/pull/610,https://github.com/fche,1,https://github.com/performancecopilot/pcp/pull/610,"Previously, a hard-coded 0.5 epsilon squashed small near-zero time
series (seen on rate-converted counters) to wiggles, due to poor
vertical autoscaling.  Now we choose a relative epsilon that is
informed by the visual space / precision alotted to the drawn y axis
label (5 digits + exponent).  Eyeballing on a range of time series,
both near and far zero now results in more eye-pleasing graphs.  QA
not impacted, as these are purely visual artifacts.","Previously, a hard-coded 0.5 epsilon squashed small near-zero time
series (seen on rate-converted counters) to wiggles, due to poor
vertical autoscaling.  Now we choose a relative epsilon that is
informed by the visual space / precision alotted to the drawn y axis
label (5 digits + exponent).  Eyeballing on a range of time series,
both near and far zero now results in more eye-pleasing graphs.  QA
not impacted, as these are purely visual artifacts.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,612,2019-02-11T17:43:34Z,2019-02-12T19:36:39Z,2019-02-12T19:36:40Z,MERGED,True,1,1,1,https://github.com/gnb,Fix Python install flags for DIST_ROOT=,1,[],https://github.com/performancecopilot/pcp/pull/612,https://github.com/gnb,1,https://github.com/performancecopilot/pcp/pull/612,"Fix an invalid shell variable reference in builddefs.in which
accidentally works when the DIST_ROOT variable is not empty, but causes
installation of Python modules to fail when DIST_ROOT is empty.  The
Homebrew packaging system for MacOS uses an empty DIST_ROOT to build and
install directly into a user-writable directory under /usr/local/Cellar.","Fix an invalid shell variable reference in builddefs.in which
accidentally works when the DIST_ROOT variable is not empty, but causes
installation of Python modules to fail when DIST_ROOT is empty.  The
Homebrew packaging system for MacOS uses an empty DIST_ROOT to build and
install directly into a user-writable directory under /usr/local/Cellar.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,615,2019-02-27T15:03:12Z,2019-02-27T20:35:55Z,2019-02-27T20:35:55Z,MERGED,True,1,1,1,https://github.com/f0,Fix roadmap link,1,[],https://github.com/performancecopilot/pcp/pull/615,https://github.com/f0,1,https://github.com/performancecopilot/pcp/pull/615,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,616,2019-02-28T11:01:28Z,2019-03-06T06:11:00Z,2019-03-06T06:11:00Z,MERGED,True,82,12,13,https://github.com/ddiss,systemd: pmlogger_daily_check -> pmlogger_check renames,3,[],https://github.com/performancecopilot/pcp/pull/616,https://github.com/ddiss,1,https://github.com/performancecopilot/pcp/pull/616,"A minor follow up to 7ca7595 .
Signed-off-by: David Disseldorp ddiss@suse.de","A minor follow up to 7ca7595 .
Signed-off-by: David Disseldorp ddiss@suse.de",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,616,2019-02-28T11:01:28Z,2019-03-06T06:11:00Z,2019-03-06T06:11:00Z,MERGED,True,82,12,13,https://github.com/ddiss,systemd: pmlogger_daily_check -> pmlogger_check renames,3,[],https://github.com/performancecopilot/pcp/pull/616,https://github.com/ddiss,2,https://github.com/performancecopilot/pcp/pull/616#issuecomment-469630472,"A minor follow up to 7ca7595 .
Signed-off-by: David Disseldorp ddiss@suse.de","As discussed on the list, I've tacked on changes which add back and fixes the empty/multi-param Environment[File] functionality.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,617,2019-03-09T22:01:52Z,2019-03-09T23:27:54Z,2019-03-09T23:27:54Z,MERGED,True,10,0,2,https://github.com/gnb,Allow --with-qt=DIR to specify QT installation dir,1,[],https://github.com/performancecopilot/pcp/pull/617,https://github.com/gnb,1,https://github.com/performancecopilot/pcp/pull/617,"The configure script cannot be given a value for the QT installation
directory except by setting the environment variable QTDIR.  There is a
--with-qt option but you cannot pass it a directory, the only valid
values are ""yes"" ""no"" and ""check"".
Regrettably Homebrew makes it super hard to set an environment variable
during build, and really wants you to do everything with commandline
options to configure.
This change extends the syntax of the --with-qt option by allowing its
value to be the absolute path of the QT installation directory.  This is
consistent with many open source users of autoconf.","The configure script cannot be given a value for the QT installation
directory except by setting the environment variable QTDIR.  There is a
--with-qt option but you cannot pass it a directory, the only valid
values are ""yes"" ""no"" and ""check"".
Regrettably Homebrew makes it super hard to set an environment variable
during build, and really wants you to do everything with commandline
options to configure.
This change extends the syntax of the --with-qt option by allowing its
value to be the absolute path of the QT installation directory.  This is
consistent with many open source users of autoconf.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,622,2019-03-18T11:48:30Z,2019-03-18T12:07:10Z,2019-03-18T12:07:10Z,CLOSED,False,1,1,1,https://github.com/ShivamJ2047,To show correct time difference from UTC,1,[],https://github.com/performancecopilot/pcp/pull/622,https://github.com/ShivamJ2047,1,https://github.com/performancecopilot/pcp/pull/622,PCP is showing correct time zone but the time difference shown is negative of the actual one. This change will show correct time difference.,PCP is showing correct time zone but the time difference shown is negative of the actual one. This change will show correct time difference.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,622,2019-03-18T11:48:30Z,2019-03-18T12:07:10Z,2019-03-18T12:07:10Z,CLOSED,False,1,1,1,https://github.com/ShivamJ2047,To show correct time difference from UTC,1,[],https://github.com/performancecopilot/pcp/pull/622,https://github.com/myllynen,2,https://github.com/performancecopilot/pcp/pull/622#issuecomment-473881283,PCP is showing correct time zone but the time difference shown is negative of the actual one. This change will show correct time difference.,"I think this is by design due to POSIX convention, see e.g. https://unix.stackexchange.com/questions/104088/why-does-tz-utc-8-produce-dates-that-are-utc8. Note that ISO 8601 is probably more easily understood non-programmers, see https://bugzilla.redhat.com/show_bug.cgi?id=1146838. Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,622,2019-03-18T11:48:30Z,2019-03-18T12:07:10Z,2019-03-18T12:07:10Z,CLOSED,False,1,1,1,https://github.com/ShivamJ2047,To show correct time difference from UTC,1,[],https://github.com/performancecopilot/pcp/pull/622,https://github.com/ShivamJ2047,3,https://github.com/performancecopilot/pcp/pull/622#issuecomment-473883482,PCP is showing correct time zone but the time difference shown is negative of the actual one. This change will show correct time difference.,ohh i didn't know about that. I will close it then.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,627,2019-04-17T10:34:45Z,2019-04-24T07:18:18Z,2019-04-24T07:18:18Z,MERGED,True,1,1,1,https://github.com/HonP,Update pmsnap.sh,1,[],https://github.com/performancecopilot/pcp/pull/627,https://github.com/HonP,1,https://github.com/performancecopilot/pcp/pull/627,"In function startXvfb() was tiny bug (pid=$? ->  pid=?!) that did not allow to kill Xvfb server when script have ended, leaded to a lot of Xvfb processes.","In function startXvfb() was tiny bug (pid=$? ->  pid=?!) that did not allow to kill Xvfb server when script have ended, leaded to a lot of Xvfb processes.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,630,2019-04-29T23:13:23Z,2019-04-29T23:20:50Z,2019-04-29T23:20:50Z,MERGED,True,8,0,1,https://github.com/lberk,Add provisioning/release script to help with vagrant bintray uploads,1,[],https://github.com/performancecopilot/pcp/pull/630,https://github.com/lberk,1,https://github.com/performancecopilot/pcp/pull/630,"Should have added this awhile ago, oops!","Should have added this awhile ago, oops!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,631,2019-04-30T14:29:42Z,2019-04-30T14:47:33Z,2019-04-30T14:47:34Z,MERGED,True,12,1,5,https://github.com/lberk,Add pcp_domain level access to maps to selinux policy file,1,[],https://github.com/performancecopilot/pcp/pull/631,https://github.com/lberk,1,https://github.com/performancecopilot/pcp/pull/631,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,633,2019-05-06T09:18:32Z,2019-05-07T07:42:11Z,2020-09-21T15:49:41Z,MERGED,True,108,25,2,https://github.com/andreasgerstmayr,pmdabcc: extend README,1,['docs'],https://github.com/performancecopilot/pcp/pull/633,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/633,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,634,2019-05-06T14:54:36Z,2019-05-07T07:42:27Z,2020-09-21T15:49:49Z,MERGED,True,1,1,1,https://github.com/andreasgerstmayr,pcp-dstat: fix typo in printtype detection,1,['docs'],https://github.com/performancecopilot/pcp/pull/634,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/634,"the two characters get implicitly concatenated if the comma is missing, but printtype is always a single character","the two characters get implicitly concatenated if the comma is missing, but printtype is always a single character",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,636,2019-05-07T17:57:28Z,2019-05-07T21:18:19Z,2020-09-21T15:49:51Z,MERGED,True,1,1,1,https://github.com/andreasgerstmayr,pmdabcc: fix install (due to README rename),1,[],https://github.com/performancecopilot/pcp/pull/636,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/636,"I really should get the azure pipelines integrated soon, that would have catched this bug","I really should get the azure pipelines integrated soon, that would have catched this bug",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,637,2019-05-14T07:21:11Z,2019-05-14T07:25:31Z,2019-10-20T12:19:56Z,MERGED,True,30,30,4,https://github.com/natoscott,Linux kernel PMDA ICMPv6 and Unix domain socket metric fixes,2,['bug'],https://github.com/performancecopilot/pcp/pull/637,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/637,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,638,2019-05-14T19:03:02Z,2019-05-15T04:31:34Z,2020-09-21T15:49:52Z,MERGED,True,228,6,9,https://github.com/andreasgerstmayr,Azure pipeline tests,2,"['testing', 'CI']",https://github.com/performancecopilot/pcp/pull/638,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/638,"Tests run in parallel in 4 docker containers (Fedora Rawhide + 30, Debian testing + stable), and produce test summaries: https://dev.azure.com/andreasgerstmayr/pcp/_build/results?buildId=9&view=ms.vss-test-web.build-test-results-tab
(Every QA test is run on every distribution/release, therefore the high total test count)","Tests run in parallel in 4 docker containers (Fedora Rawhide + 30, Debian testing + stable), and produce test summaries: https://dev.azure.com/andreasgerstmayr/pcp/_build/results?buildId=9&view=ms.vss-test-web.build-test-results-tab
(Every QA test is run on every distribution/release, therefore the high total test count)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,638,2019-05-14T19:03:02Z,2019-05-15T04:31:34Z,2020-09-21T15:49:52Z,MERGED,True,228,6,9,https://github.com/andreasgerstmayr,Azure pipeline tests,2,"['testing', 'CI']",https://github.com/performancecopilot/pcp/pull/638,https://github.com/myllynen,2,https://github.com/performancecopilot/pcp/pull/638#issuecomment-492371348,"Tests run in parallel in 4 docker containers (Fedora Rawhide + 30, Debian testing + stable), and produce test summaries: https://dev.azure.com/andreasgerstmayr/pcp/_build/results?buildId=9&view=ms.vss-test-web.build-test-results-tab
(Every QA test is run on every distribution/release, therefore the high total test count)","pmrep part LGTM, thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,640,2019-05-15T00:33:18Z,2019-05-15T00:33:57Z,2019-05-15T00:33:57Z,MERGED,True,16,10,3,https://github.com/natoscott,pmproxy: fix memory leaks picked up by coverity scanning,1,['bug'],https://github.com/performancecopilot/pcp/pull/640,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/640,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,641,2019-05-15T00:49:43Z,2019-05-15T00:50:48Z,2019-05-15T00:50:48Z,MERGED,True,922,920,2,https://github.com/natoscott,Linux kernel PMDA slabinfo v2.1 metric additions,2,['feature'],https://github.com/performancecopilot/pcp/pull/641,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/641,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,642,2019-05-15T09:14:22Z,2019-05-16T03:38:51Z,2020-09-21T15:49:54Z,MERGED,True,1,1,1,https://github.com/andreasgerstmayr,qa: increase min kernel version for ucalls qa test 1173,1,[],https://github.com/performancecopilot/pcp/pull/642,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/642,"test fails with kernel 4.15 , but works with 4.18+","test fails with kernel 4.15 , but works with 4.18+",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,643,2019-05-15T09:38:55Z,2019-05-16T03:39:21Z,2020-09-21T15:47:48Z,MERGED,True,1,19,1,https://github.com/andreasgerstmayr,qa: use travis only for coverity scan,1,[],https://github.com/performancecopilot/pcp/pull/643,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/643,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,644,2019-05-16T03:17:05Z,2019-05-16T03:17:20Z,2019-05-16T03:17:20Z,MERGED,True,804,204,20,https://github.com/natoscott,libpcp_web: update Redis client code with TLS/SSL support,3,['feature'],https://github.com/performancecopilot/pcp/pull/644,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/644,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,645,2019-05-16T04:30:51Z,2019-05-16T04:44:51Z,2019-05-16T04:44:51Z,MERGED,True,58,24,2,https://github.com/natoscott,pmdalmsensors: improvements in name parsing and error handling,2,"['bug', 'feature']",https://github.com/performancecopilot/pcp/pull/645,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/645,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,646,2019-05-16T12:47:04Z,2019-05-16T22:20:19Z,2020-09-21T15:47:51Z,CLOSED,False,1,0,1,https://github.com/andreasgerstmayr,qa: check azure pipelines integration,1,[],https://github.com/performancecopilot/pcp/pull/646,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/646,verify if azure pipelines checks this PR,verify if azure pipelines checks this PR,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,647,2019-05-16T22:12:29Z,2019-05-16T22:13:12Z,2019-05-16T22:13:12Z,MERGED,True,5,1,5,https://github.com/natoscott,Minor QA and build updates,2,"['testing', 'build']",https://github.com/performancecopilot/pcp/pull/647,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/647,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,648,2019-05-17T05:17:22Z,2019-05-21T07:50:34Z,2019-05-21T07:50:35Z,MERGED,True,20,4,3,https://github.com/goodwinos,logutil: add -m option to pmlogcheck to skip log volume checking,4,['feature'],https://github.com/performancecopilot/pcp/pull/648,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/648,"pmlogcheck has 4 passes (0 - 3). Pass 3 checks the integrity of
the archive log volume(s). This can be expensive, especially if
the volumes are compressed. The new -m option skips pass 3, for
use in cases where only the meta data needs checking.","pmlogcheck has 4 passes (0 - 3). Pass 3 checks the integrity of
the archive log volume(s). This can be expensive, especially if
the volumes are compressed. The new -m option skips pass 3, for
use in cases where only the meta data needs checking.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,649,2019-05-20T02:11:19Z,2019-05-20T02:12:56Z,2019-05-20T02:12:56Z,MERGED,True,15,3,3,https://github.com/natoscott,pcp-dstat: fix --bits option,1,['bug'],https://github.com/performancecopilot/pcp/pull/649,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/649,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,650,2019-05-21T13:56:35Z,2019-05-21T14:54:59Z,2020-09-21T15:47:52Z,MERGED,True,32,33,2,https://github.com/andreasgerstmayr,"qa: include test durations, mark failed build step as failed",1,[],https://github.com/performancecopilot/pcp/pull/650,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/650,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,651,2019-05-22T09:45:38Z,2019-05-22T09:45:51Z,2020-09-21T15:47:52Z,MERGED,True,2,1,2,https://github.com/andreasgerstmayr,"qa: start simple test to trigger test setup in build phase, enable verbosity for fedora 30",1,[],https://github.com/performancecopilot/pcp/pull/651,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/651,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,676,2019-06-06T10:04:46Z,2019-06-11T00:47:09Z,2019-06-11T01:08:39Z,MERGED,True,4,6,2,https://github.com/yuokada126,pcp-dstat: fix misaligned headers in CSV output,1,[],https://github.com/performancecopilot/pcp/pull/676,https://github.com/yuokada126,1,https://github.com/performancecopilot/pcp/pull/676,"The number of commas in title and sub-title headers were more than expected.
Resolves github issue #639.","The number of commas in title and sub-title headers were more than expected.
Resolves github issue #639.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,678,2019-06-10T18:14:53Z,2019-06-11T00:47:09Z,2019-06-11T00:47:10Z,MERGED,True,10,1,1,https://github.com/lberk,Mention pcp archive support in sysstat 12.0.5 in sar2pcp manpage,1,[],https://github.com/performancecopilot/pcp/pull/678,https://github.com/lberk,1,https://github.com/performancecopilot/pcp/pull/678,Addresses issue #677,Addresses issue #677,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,680,2019-06-13T22:15:06Z,2019-06-14T07:14:42Z,2019-06-14T07:14:43Z,MERGED,True,4,1,1,https://github.com/Erbenos,modified exports in libpcp_web,1,[],https://github.com/performancecopilot/pcp/pull/680,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/680,"Adds some functions into exports of libpcp_web, which will be used in upcoming StatsD agent.","Adds some functions into exports of libpcp_web, which will be used in upcoming StatsD agent.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,681,2019-06-17T11:11:19Z,2019-06-23T23:37:25Z,2019-06-24T03:10:23Z,MERGED,True,87,3,7,https://github.com/nagarevaibhav,pcp-free: Adding support for -r/ --terabytes flag.,1,[],https://github.com/performancecopilot/pcp/pull/681,https://github.com/nagarevaibhav,1,https://github.com/performancecopilot/pcp/pull/681,"pcp-free: Adding support for -r/ --terabytes flag.  The -r/ --terabytes flag displays the memory in terabytes. In addition, -r/ --terabytes flag can also be used with other flags like -s, -c.","pcp-free: Adding support for -r/ --terabytes flag.  The -r/ --terabytes flag displays the memory in terabytes. In addition, -r/ --terabytes flag can also be used with other flags like -s, -c.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,683,2019-06-23T05:02:42Z,2019-06-23T23:37:26Z,2019-06-24T03:10:07Z,MERGED,True,5,2,1,https://github.com/yuokada126,pcp-dstat: prevent comma-only lines from being added to csv output,1,[],https://github.com/performancecopilot/pcp/pull/683,https://github.com/yuokada126,1,https://github.com/performancecopilot/pcp/pull/683,"The first sample for counter metrics returns value None. When all
metrics we are displaying are counter metrics, a comma-only line
appears in csv output. This commit prevents such comma-only lines
from being displayed to csv output.","The first sample for counter metrics returns value None. When all
metrics we are displaying are counter metrics, a comma-only line
appears in csv output. This commit prevents such comma-only lines
from being displayed to csv output.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,684,2019-06-26T13:55:57Z,2019-06-27T05:37:21Z,2019-06-27T05:37:21Z,MERGED,True,16,4,5,https://github.com/andreasgerstmayr,"pmdabcc: fix tracepoint_hits module, qa: fixes for 1155, 1170, 1178, ",2,[],https://github.com/performancecopilot/pcp/pull/684,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/684,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,685,2019-06-27T10:21:15Z,2019-06-28T23:17:10Z,2020-09-21T15:47:56Z,MERGED,True,28,1,7,https://github.com/andreasgerstmayr,pmdabcc: add selinux rules to fix bcc syscall prefix detection (fixes…,2,[],https://github.com/performancecopilot/pcp/pull/685,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/685,"… execsnoop)
get_syscall_fnname of bcc relies on /proc/kallsyms to detect the syscall
prefix (depending on the architecture). To read the addresses of
/proc/kallsyms the PMDA requires the CAP_SYSLOG capability, which
needs to be granted by selinux","… execsnoop)
get_syscall_fnname of bcc relies on /proc/kallsyms to detect the syscall
prefix (depending on the architecture). To read the addresses of
/proc/kallsyms the PMDA requires the CAP_SYSLOG capability, which
needs to be granted by selinux",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,685,2019-06-27T10:21:15Z,2019-06-28T23:17:10Z,2020-09-21T15:47:56Z,MERGED,True,28,1,7,https://github.com/andreasgerstmayr,pmdabcc: add selinux rules to fix bcc syscall prefix detection (fixes…,2,[],https://github.com/performancecopilot/pcp/pull/685,https://github.com/lberk,2,https://github.com/performancecopilot/pcp/pull/685#issuecomment-506307532,"… execsnoop)
get_syscall_fnname of bcc relies on /proc/kallsyms to detect the syscall
prefix (depending on the architecture). To read the addresses of
/proc/kallsyms the PMDA requires the CAP_SYSLOG capability, which
needs to be granted by selinux","@andreasgerstmayr thanks! It's always appreciated when folks help out with selinux stuff.  One small thing, do you have the original AVC still?  We try to capture them all both; directly above the corresponding rule in pcpupstream.te.in as well as in the regression test in qa/1622  I believe ken added a src/selinux/next-xxx-yyy script to help with that.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,685,2019-06-27T10:21:15Z,2019-06-28T23:17:10Z,2020-09-21T15:47:56Z,MERGED,True,28,1,7,https://github.com/andreasgerstmayr,pmdabcc: add selinux rules to fix bcc syscall prefix detection (fixes…,2,[],https://github.com/performancecopilot/pcp/pull/685,https://github.com/lberk,3,https://github.com/performancecopilot/pcp/pull/685#issuecomment-506314242,"… execsnoop)
get_syscall_fnname of bcc relies on /proc/kallsyms to detect the syscall
prefix (depending on the architecture). To read the addresses of
/proc/kallsyms the PMDA requires the CAP_SYSLOG capability, which
needs to be granted by selinux","Oh, and please do a sanity check on el6 or el7 era distros.  Often times newer selinux rules won't build there, it'd be good make sure this rule change is compatible.  Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,685,2019-06-27T10:21:15Z,2019-06-28T23:17:10Z,2020-09-21T15:47:56Z,MERGED,True,28,1,7,https://github.com/andreasgerstmayr,pmdabcc: add selinux rules to fix bcc syscall prefix detection (fixes…,2,[],https://github.com/performancecopilot/pcp/pull/685,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/685#issuecomment-506317396,"… execsnoop)
get_syscall_fnname of bcc relies on /proc/kallsyms to detect the syscall
prefix (depending on the architecture). To read the addresses of
/proc/kallsyms the PMDA requires the CAP_SYSLOG capability, which
needs to be granted by selinux","One small thing, do you have the original AVC still?

There was no AVC, the kernel is using has_capability_noaudit (https://github.com/SELinuxProject/selinux-kernel/blob/master/kernel/kallsyms.c#L653), which doesn't produce any audit logs (which made the bug even trickier to resolve).

Oh, and please do a sanity check on el6 or el7 era distros. Often times newer selinux rules won't build there, it'd be good make sure this rule change is compatible.

Ok, I'll setup vagrant and check out your provisioning scripts :)",True,{'THUMBS_UP': ['https://github.com/lberk']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,691,2019-07-07T03:18:02Z,2019-07-08T00:49:51Z,2019-07-08T00:49:51Z,MERGED,True,6,1,1,https://github.com/kmcdonell,Changes committed to git@github.com:kmcdonell/pcp.git master,1,[],https://github.com/performancecopilot/pcp/pull/691,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/691,"Ken McDonell (1):
qa/600: expand on the bizarre notes comment section
qa/600 |    7 ++++++-
1 file changed, 6 insertions(+), 1 deletion(-)
Details ...
commit 461b868
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 7 13:15:00 2019 +1000
qa/600: expand on the bizarre notes comment section

This test fails for a week and then recovers, twice per annum
... go figure!","Ken McDonell (1):
qa/600: expand on the bizarre notes comment section
qa/600 |    7 ++++++-
1 file changed, 6 insertions(+), 1 deletion(-)
Details ...
commit 461b868
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 7 13:15:00 2019 +1000
qa/600: expand on the bizarre notes comment section

This test fails for a week and then recovers, twice per annum
... go figure!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,692,2019-07-08T05:52:45Z,2019-07-09T20:59:51Z,2019-07-09T20:59:52Z,MERGED,True,40,16,1,https://github.com/kmcdonell,/var/tmp/8883.pr,2,[],https://github.com/performancecopilot/pcp/pull/692,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/692,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,693,2019-07-09T01:32:27Z,2019-09-02T00:51:40Z,2019-09-02T00:51:40Z,CLOSED,False,17,19,1,https://github.com/shogo-matsumoto,Fix segfault in pmdaFetch().,1,[],https://github.com/performancecopilot/pcp/pull/693,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/693,"I try to fix the following issue.
https://github.com/cockpit-project/cockpit/issues/6108
Sometimes cockpit-pcp crashes due to segfault in __pmFindProfile().
I think the cause is in __pmFetchLocal() of src/libpcp/src/fetchlocal.c.
Cockpit calls pmdaFetch() periodically. pmdaFetch() refers to pmda->e_prof
via __pmdaCountInst() to calculate the number of instances.
Just before calling pmdaFetch() pmda->e_prof has a chance to be updated in
__pmFetchLocal() but it should satisfy a condition ""ctxp->c_sent != dp->domain"".
This condition is not appropriate I think because there is a following case:

pmDestroyContext() frees pmda->e_prof
pmda->e_prof area is reallocated and used for other purpose
__pmFetchLocal() is called
__pmFetchLocal() does not update pmda->e_prof due to the condition
__pmFetchLocal() calls pmdaFetch()
pmdaFetch() accesses corrupted area by referring to pmda->e_prof

I'm not sure it is best answer but I suggest a fix by removing the condition
in order to replace pmda->e_prof with a new profile at any time before using it.","I try to fix the following issue.
https://github.com/cockpit-project/cockpit/issues/6108
Sometimes cockpit-pcp crashes due to segfault in __pmFindProfile().
I think the cause is in __pmFetchLocal() of src/libpcp/src/fetchlocal.c.
Cockpit calls pmdaFetch() periodically. pmdaFetch() refers to pmda->e_prof
via __pmdaCountInst() to calculate the number of instances.
Just before calling pmdaFetch() pmda->e_prof has a chance to be updated in
__pmFetchLocal() but it should satisfy a condition ""ctxp->c_sent != dp->domain"".
This condition is not appropriate I think because there is a following case:

pmDestroyContext() frees pmda->e_prof
pmda->e_prof area is reallocated and used for other purpose
__pmFetchLocal() is called
__pmFetchLocal() does not update pmda->e_prof due to the condition
__pmFetchLocal() calls pmdaFetch()
pmdaFetch() accesses corrupted area by referring to pmda->e_prof

I'm not sure it is best answer but I suggest a fix by removing the condition
in order to replace pmda->e_prof with a new profile at any time before using it.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,693,2019-07-09T01:32:27Z,2019-09-02T00:51:40Z,2019-09-02T00:51:40Z,CLOSED,False,17,19,1,https://github.com/shogo-matsumoto,Fix segfault in pmdaFetch().,1,[],https://github.com/performancecopilot/pcp/pull/693,https://github.com/shogo-matsumoto,2,https://github.com/performancecopilot/pcp/pull/693#issuecomment-511649682,"I try to fix the following issue.
https://github.com/cockpit-project/cockpit/issues/6108
Sometimes cockpit-pcp crashes due to segfault in __pmFindProfile().
I think the cause is in __pmFetchLocal() of src/libpcp/src/fetchlocal.c.
Cockpit calls pmdaFetch() periodically. pmdaFetch() refers to pmda->e_prof
via __pmdaCountInst() to calculate the number of instances.
Just before calling pmdaFetch() pmda->e_prof has a chance to be updated in
__pmFetchLocal() but it should satisfy a condition ""ctxp->c_sent != dp->domain"".
This condition is not appropriate I think because there is a following case:

pmDestroyContext() frees pmda->e_prof
pmda->e_prof area is reallocated and used for other purpose
__pmFetchLocal() is called
__pmFetchLocal() does not update pmda->e_prof due to the condition
__pmFetchLocal() calls pmdaFetch()
pmdaFetch() accesses corrupted area by referring to pmda->e_prof

I'm not sure it is best answer but I suggest a fix by removing the condition
in order to replace pmda->e_prof with a new profile at any time before using it.","Hi @kmcdonell,
Thank you for the feedback.
I will review my commit but it is helpful if you could update it.
Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,693,2019-07-09T01:32:27Z,2019-09-02T00:51:40Z,2019-09-02T00:51:40Z,CLOSED,False,17,19,1,https://github.com/shogo-matsumoto,Fix segfault in pmdaFetch().,1,[],https://github.com/performancecopilot/pcp/pull/693,https://github.com/kmcdonell,3,https://github.com/performancecopilot/pcp/pull/693#issuecomment-522268450,"I try to fix the following issue.
https://github.com/cockpit-project/cockpit/issues/6108
Sometimes cockpit-pcp crashes due to segfault in __pmFindProfile().
I think the cause is in __pmFetchLocal() of src/libpcp/src/fetchlocal.c.
Cockpit calls pmdaFetch() periodically. pmdaFetch() refers to pmda->e_prof
via __pmdaCountInst() to calculate the number of instances.
Just before calling pmdaFetch() pmda->e_prof has a chance to be updated in
__pmFetchLocal() but it should satisfy a condition ""ctxp->c_sent != dp->domain"".
This condition is not appropriate I think because there is a following case:

pmDestroyContext() frees pmda->e_prof
pmda->e_prof area is reallocated and used for other purpose
__pmFetchLocal() is called
__pmFetchLocal() does not update pmda->e_prof due to the condition
__pmFetchLocal() calls pmdaFetch()
pmdaFetch() accesses corrupted area by referring to pmda->e_prof

I'm not sure it is best answer but I suggest a fix by removing the condition
in order to replace pmda->e_prof with a new profile at any time before using it.","@shogo-matsumoto Sorry for the long silence here, I've not been able to spend much time on PCP recently.
I've reread you're original comment, and realize I overlooked/misunderstood one very important aspect ... this is in libpcp_pmda, not libpcp.  There has been no threading work in libpcp_pmda at all, only in libpcp.
Now just to make sure I am chasing the right bug this time, could you please confirm that the application environment you're seeing this in is a multi-threaded client (so using libpcp and the PMAPI), but it is also using contexts created with PM_CONTEXT_LOCAL, and these contexts are being dynamically created and destroyed across multiple threads.  Is that correct?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,693,2019-07-09T01:32:27Z,2019-09-02T00:51:40Z,2019-09-02T00:51:40Z,CLOSED,False,17,19,1,https://github.com/shogo-matsumoto,Fix segfault in pmdaFetch().,1,[],https://github.com/performancecopilot/pcp/pull/693,https://github.com/kmcdonell,4,https://github.com/performancecopilot/pcp/pull/693#issuecomment-522859167,"I try to fix the following issue.
https://github.com/cockpit-project/cockpit/issues/6108
Sometimes cockpit-pcp crashes due to segfault in __pmFindProfile().
I think the cause is in __pmFetchLocal() of src/libpcp/src/fetchlocal.c.
Cockpit calls pmdaFetch() periodically. pmdaFetch() refers to pmda->e_prof
via __pmdaCountInst() to calculate the number of instances.
Just before calling pmdaFetch() pmda->e_prof has a chance to be updated in
__pmFetchLocal() but it should satisfy a condition ""ctxp->c_sent != dp->domain"".
This condition is not appropriate I think because there is a following case:

pmDestroyContext() frees pmda->e_prof
pmda->e_prof area is reallocated and used for other purpose
__pmFetchLocal() is called
__pmFetchLocal() does not update pmda->e_prof due to the condition
__pmFetchLocal() calls pmdaFetch()
pmdaFetch() accesses corrupted area by referring to pmda->e_prof

I'm not sure it is best answer but I suggest a fix by removing the condition
in order to replace pmda->e_prof with a new profile at any time before using it.","@shogo-matsumoto please ignore my last comment ... this cannot be a multi-threaded app as the pmFetch would fail.
On digging a little deeper I can see https://github.com/cockpit-project/cockpit/issues/6108 ... and
this mentions https://bugzilla.redhat.com/show_bug.cgi?id=1235962 and this BZ contains this traceback from testing on F22:
Truncated backtrace:
Thread no. 1 (10 frames)
#0 __pmFindProfile at profile.c:144
#1 __pmInProfile at profile.c:163
#2 __pmdaNextInst at callback.c:148
#3 pmdaFetch at callback.c:514
#4 linux_fetch at pmda.c:5714
#5 __pmFetchLocal at fetchlocal.c:131
#6 pmFetch at fetch.c:147
#7 cockpit_pcp_metrics_tick at src/bridge/cockpitpcpmetrics.c:349
#8 on_timeout_tick at src/bridge/cockpitmetrics.c:178
#13 g_main_context_iteration at gmain.c:3869
Now I need to check with Juan Antonio Clavero and Martin Pitt to make sure we're all agreed that this the one and same issue.
Assuming for the moment that it is, then I think the failure scenario is ...

using PM_CONTEXT_LOCAL
single threaded
create a new context
do some fetches
in __pmFetchLocal if we are using a profile, the pointer ctxp->c_instprof gets copied to pmda->e_profile via a call path that looks like __pmFetchLocal() -> dispatch.version.any.profile() -> pmdaProfile() ... at the end the pointer copy looks like pmda->e_prof = prof;
close context
pmDestroyContext calls _pmFreeProfile(ctxp->c_instprof) and this leaves pmda->e_prof in the PMDA dangling in the breeze
create new context
next pmFetch is potentially kaboom

I can see how to easily fix this, but first I want to make sure all the interested parties agree on the analysis above.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,693,2019-07-09T01:32:27Z,2019-09-02T00:51:40Z,2019-09-02T00:51:40Z,CLOSED,False,17,19,1,https://github.com/shogo-matsumoto,Fix segfault in pmdaFetch().,1,[],https://github.com/performancecopilot/pcp/pull/693,https://github.com/shogo-matsumoto,5,https://github.com/performancecopilot/pcp/pull/693#issuecomment-522913717,"I try to fix the following issue.
https://github.com/cockpit-project/cockpit/issues/6108
Sometimes cockpit-pcp crashes due to segfault in __pmFindProfile().
I think the cause is in __pmFetchLocal() of src/libpcp/src/fetchlocal.c.
Cockpit calls pmdaFetch() periodically. pmdaFetch() refers to pmda->e_prof
via __pmdaCountInst() to calculate the number of instances.
Just before calling pmdaFetch() pmda->e_prof has a chance to be updated in
__pmFetchLocal() but it should satisfy a condition ""ctxp->c_sent != dp->domain"".
This condition is not appropriate I think because there is a following case:

pmDestroyContext() frees pmda->e_prof
pmda->e_prof area is reallocated and used for other purpose
__pmFetchLocal() is called
__pmFetchLocal() does not update pmda->e_prof due to the condition
__pmFetchLocal() calls pmdaFetch()
pmdaFetch() accesses corrupted area by referring to pmda->e_prof

I'm not sure it is best answer but I suggest a fix by removing the condition
in order to replace pmda->e_prof with a new profile at any time before using it.","Hi @kmcdonell,
Thank you for sharing the information.
I agree with you that the issue does not depend on multi-threaded.
The program (cockpit-pcp) which uses libpcp.so and libpcp_pmda.so in my environment(Fedora 30 + cockpit github version) has two threads but it seems that only one thread (Thread 1) calls pcp functions such as pmDestroyContext() or __pmFetchLocal().
In my test, contexts are created/destroyed when I change data-range (5 minutes, 1 hour, 6 hours, ...) on dashboard page of cockpit.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,693,2019-07-09T01:32:27Z,2019-09-02T00:51:40Z,2019-09-02T00:51:40Z,CLOSED,False,17,19,1,https://github.com/shogo-matsumoto,Fix segfault in pmdaFetch().,1,[],https://github.com/performancecopilot/pcp/pull/693,https://github.com/kmcdonell,6,https://github.com/performancecopilot/pcp/pull/693#issuecomment-523228269,"I try to fix the following issue.
https://github.com/cockpit-project/cockpit/issues/6108
Sometimes cockpit-pcp crashes due to segfault in __pmFindProfile().
I think the cause is in __pmFetchLocal() of src/libpcp/src/fetchlocal.c.
Cockpit calls pmdaFetch() periodically. pmdaFetch() refers to pmda->e_prof
via __pmdaCountInst() to calculate the number of instances.
Just before calling pmdaFetch() pmda->e_prof has a chance to be updated in
__pmFetchLocal() but it should satisfy a condition ""ctxp->c_sent != dp->domain"".
This condition is not appropriate I think because there is a following case:

pmDestroyContext() frees pmda->e_prof
pmda->e_prof area is reallocated and used for other purpose
__pmFetchLocal() is called
__pmFetchLocal() does not update pmda->e_prof due to the condition
__pmFetchLocal() calls pmdaFetch()
pmdaFetch() accesses corrupted area by referring to pmda->e_prof

I'm not sure it is best answer but I suggest a fix by removing the condition
in order to replace pmda->e_prof with a new profile at any time before using it.","Thanks for the update @shogo-matsumoto.
Do you know if the cockpit-pcp application is using more than one PMAPI context within the one thread that's doing the PCP work?
Would it be possible to run cockpit-pcp with -Dcontext,fetch,profile (assuming it implements the standard PCP debugging options from the command line), and send me the stderr output for the failing case?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,693,2019-07-09T01:32:27Z,2019-09-02T00:51:40Z,2019-09-02T00:51:40Z,CLOSED,False,17,19,1,https://github.com/shogo-matsumoto,Fix segfault in pmdaFetch().,1,[],https://github.com/performancecopilot/pcp/pull/693,https://github.com/kmcdonell,7,https://github.com/performancecopilot/pcp/pull/693#issuecomment-523255378,"I try to fix the following issue.
https://github.com/cockpit-project/cockpit/issues/6108
Sometimes cockpit-pcp crashes due to segfault in __pmFindProfile().
I think the cause is in __pmFetchLocal() of src/libpcp/src/fetchlocal.c.
Cockpit calls pmdaFetch() periodically. pmdaFetch() refers to pmda->e_prof
via __pmdaCountInst() to calculate the number of instances.
Just before calling pmdaFetch() pmda->e_prof has a chance to be updated in
__pmFetchLocal() but it should satisfy a condition ""ctxp->c_sent != dp->domain"".
This condition is not appropriate I think because there is a following case:

pmDestroyContext() frees pmda->e_prof
pmda->e_prof area is reallocated and used for other purpose
__pmFetchLocal() is called
__pmFetchLocal() does not update pmda->e_prof due to the condition
__pmFetchLocal() calls pmdaFetch()
pmdaFetch() accesses corrupted area by referring to pmda->e_prof

I'm not sure it is best answer but I suggest a fix by removing the condition
in order to replace pmda->e_prof with a new profile at any time before using it.","Good news ... I have developed a test program that reproduces the SEGV ...
(gdb) where
#0  0x00007ffff7f02f9a in __pmFindProfile (indom=251658247, prof=0x555555574410) at profile.c:145
#1  0x00007ffff7f02ff1 in __pmInProfile (indom=251658247, prof=0x555555574410, inst=0) at profile.c:164
#2  0x00007ffff7fac061 in __pmdaNextInst (inst=0x7fffffffd750, pmda=0x555555565ce0) at callback.c:161
#3  0x00007ffff7fac1a2 in __pmdaCountInst (dp=0x7ffff78d2668, pmda=0x555555565ce0) at callback.c:188
#4  0x00007ffff7facf0c in pmdaFetch (numpmid=1, pmidlist=0x555555564a20, resp=0x7fffffffdab0, pmda=0x555555565ce0) at callback.c:569
#5  0x00007ffff78b448e in ?? () from /var/lib/pcp/pmdas/linux/pmda_linux.so
#6  0x00007ffff7f29437 in __pmFetchLocal (ctxp=0x55555555a2a0, numpmid=1, pmidlist=0x5555555592a8 , result=0x7fffffffdcf8) at fetchlocal.c:129
#7  0x00007ffff7ee97d4 in pmFetch_ctx (ctxp=0x55555555a2a0, numpmid=1, pmidlist=0x5555555592a8 , result=0x7fffffffdcf8) at fetch.c:160
#8  0x00007ffff7ee9c38 in pmFetch (numpmid=1, pmidlist=0x5555555592a8 , result=0x7fffffffdcf8) at fetch.c:234
#9  0x0000555555555516 in do_inner () at profilecrash.c:122
#10 0x00005555555561f8 in main (argc=5, argv=0x7fffffffde78) at profilecrash.c:345
Now, onto the fix.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,693,2019-07-09T01:32:27Z,2019-09-02T00:51:40Z,2019-09-02T00:51:40Z,CLOSED,False,17,19,1,https://github.com/shogo-matsumoto,Fix segfault in pmdaFetch().,1,[],https://github.com/performancecopilot/pcp/pull/693,https://github.com/shogo-matsumoto,8,https://github.com/performancecopilot/pcp/pull/693#issuecomment-526968493,"I try to fix the following issue.
https://github.com/cockpit-project/cockpit/issues/6108
Sometimes cockpit-pcp crashes due to segfault in __pmFindProfile().
I think the cause is in __pmFetchLocal() of src/libpcp/src/fetchlocal.c.
Cockpit calls pmdaFetch() periodically. pmdaFetch() refers to pmda->e_prof
via __pmdaCountInst() to calculate the number of instances.
Just before calling pmdaFetch() pmda->e_prof has a chance to be updated in
__pmFetchLocal() but it should satisfy a condition ""ctxp->c_sent != dp->domain"".
This condition is not appropriate I think because there is a following case:

pmDestroyContext() frees pmda->e_prof
pmda->e_prof area is reallocated and used for other purpose
__pmFetchLocal() is called
__pmFetchLocal() does not update pmda->e_prof due to the condition
__pmFetchLocal() calls pmdaFetch()
pmdaFetch() accesses corrupted area by referring to pmda->e_prof

I'm not sure it is best answer but I suggest a fix by removing the condition
in order to replace pmda->e_prof with a new profile at any time before using it.",The issue seems to be fixed at the commit aa14df7. Thank you for your help.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,694,2019-07-10T12:20:04Z,2019-07-24T01:52:54Z,2020-09-21T15:47:55Z,MERGED,True,2,1,2,https://github.com/andreasgerstmayr,"azure: stop on first error, qa: change deprecated --std=posix option to --library=posix",2,[],https://github.com/performancecopilot/pcp/pull/694,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/694,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,694,2019-07-10T12:20:04Z,2019-07-24T01:52:54Z,2020-09-21T15:47:55Z,MERGED,True,2,1,2,https://github.com/andreasgerstmayr,"azure: stop on first error, qa: change deprecated --std=posix option to --library=posix",2,[],https://github.com/performancecopilot/pcp/pull/694,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/694#issuecomment-510223636,,"On 11/7/19 12:41 am, Lukas Berk wrote:
 ***@***.**** commented on this pull request.

 ------------------------------------------------------------------------

 In src/include/builddefs.in
 <#694 (comment)>:

> @@ -175,7 +175,7 @@ ECHO	= @echo@
   LN_S	= @LN_S@
   GREP    = @grep@
   GIT	= @git@
 -CLINT	= @CppCheck@ --std=posix --force --quiet --error-exitcode=1 -I$(TOPDIR)/src/include/pcp -I/usr/include/bits
 +CLINT	= @CppCheck@ --library=posix --force --quiet --error-exitcode=1 -I$(TOPDIR)/src/include/pcp -I/usr/include/bits

 Have we checked how far back this change exists? el6 era hosts? older
 debian distros? BSDs?
 @kmcdonell <https://github.com/kmcdonell> any insight into if we'll need
 a check for this flag?
It looks like this is a recent change in the fedora ecosystem ... Ubuntu
19.04 (latest) uses --std.

I recommend dealing with this the same way we handle similar cases
elsewhere in the code base ... in configure run cppcheck --help then
grep the output to set something log CPPCHECK_POSIX_OPT to either
--std=posix or --library=posix",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,694,2019-07-10T12:20:04Z,2019-07-24T01:52:54Z,2020-09-21T15:47:55Z,MERGED,True,2,1,2,https://github.com/andreasgerstmayr,"azure: stop on first error, qa: change deprecated --std=posix option to --library=posix",2,[],https://github.com/performancecopilot/pcp/pull/694,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/694#issuecomment-514447157,,@andreasgerstmayr @kmcdonell I've added the CPPCHECK_POSIX_OPT logic and merged now.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,697,2019-07-14T02:17:13Z,2019-07-16T23:45:09Z,2020-08-18T21:27:43Z,MERGED,True,590,84,15,https://github.com/kmcdonell,pmlogextract enhancement and bug fixes Changes committed to git@github.com:kmcdonell/pcp.git 20190710,2,[],https://github.com/performancecopilot/pcp/pull/697,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/697,"Ken McDonell (2):
pmlogextract: add -x option for more resilient merging
qa/archives: add archives for qa/813
man/man1/pmlogextract.1            |   25 +++
qa/813                             |   69 +++++++++
qa/813.out                         |  272 +++++++++++++++++++++++++++++++++++++
qa/archives/20190628.04.03.0.xz    |binary
qa/archives/20190628.04.03.1.xz    |binary
qa/archives/20190628.04.03.index   |binary
qa/archives/20190628.04.03.meta.xz |binary
qa/archives/20190628.06.31.0.xz    |binary
qa/archives/20190628.06.31.index   |binary
qa/archives/20190628.06.31.meta.xz |binary
qa/group                           |    1
src/pmlogextract/gram.y            |   34 ++--
src/pmlogextract/logger.h          |   27 ++-
src/pmlogextract/metriclist.c      |   92 ++++++++----
src/pmlogextract/pmlogextract.c    |  154 ++++++++++++++++----
15 files changed, 590 insertions(+), 84 deletions(-)
Details ...
commit 3b0bf55
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 11 07:33:22 2019 +1000
qa/archives: add archives for qa/813

commit 17f585f
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 11 07:25:31 2019 +1000
pmlogextract: add -x option for more resilient merging

For QA machines in particular, the varied use of the mmv PMDA may mean
the daily archives contain metrics with mismatched metadata, then
pmlogextract chokes in the nightly pmlogger_daily script.  Adding -x
to pmlogextract will silently ""fix"" this.

It may also be useful in unattended pmlogger environments.

From the man page ...
   -x     It  is  expected  that the metadata (name, PMID, type, semantics
          and units) for each metric will be consistent across all of  the
          input  PCP archive log(s) in which that metric appears.  In rare
          cases, e.g. in development, in QA and when a PMDA  is  upgraded,
          this  may not be the case and pmlogextract will report the issue
          and abort without creating the output archive log.  This is done
          so the problem can be fixed with pmlogrewrite(1) before retrying
          the merge.  In unattended or QA environments it may  be  prefer‐
          able to force the merge and omit the metrics with the mismatched
          metadata.  The -x option does this.

Add qa/813 to test this.

Also a bunch of code cleanups in pmlogextract.

And correction of a corner case bug that has been there forever ... if
you use -c configfile and have a non-leaf PMNS name in configfile and
that non-leaf expands to different metrics across the input achives,
then only the matching metrics from the first archive containing
the non-leaf PMNS name would be included in the output ... the test
archives for qa/813 triggered just this scenario!
Fixed.","Ken McDonell (2):
pmlogextract: add -x option for more resilient merging
qa/archives: add archives for qa/813
man/man1/pmlogextract.1            |   25 +++
qa/813                             |   69 +++++++++
qa/813.out                         |  272 +++++++++++++++++++++++++++++++++++++
qa/archives/20190628.04.03.0.xz    |binary
qa/archives/20190628.04.03.1.xz    |binary
qa/archives/20190628.04.03.index   |binary
qa/archives/20190628.04.03.meta.xz |binary
qa/archives/20190628.06.31.0.xz    |binary
qa/archives/20190628.06.31.index   |binary
qa/archives/20190628.06.31.meta.xz |binary
qa/group                           |    1
src/pmlogextract/gram.y            |   34 ++--
src/pmlogextract/logger.h          |   27 ++-
src/pmlogextract/metriclist.c      |   92 ++++++++----
src/pmlogextract/pmlogextract.c    |  154 ++++++++++++++++----
15 files changed, 590 insertions(+), 84 deletions(-)
Details ...
commit 3b0bf55
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 11 07:33:22 2019 +1000
qa/archives: add archives for qa/813

commit 17f585f
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 11 07:25:31 2019 +1000
pmlogextract: add -x option for more resilient merging

For QA machines in particular, the varied use of the mmv PMDA may mean
the daily archives contain metrics with mismatched metadata, then
pmlogextract chokes in the nightly pmlogger_daily script.  Adding -x
to pmlogextract will silently ""fix"" this.

It may also be useful in unattended pmlogger environments.

From the man page ...
   -x     It  is  expected  that the metadata (name, PMID, type, semantics
          and units) for each metric will be consistent across all of  the
          input  PCP archive log(s) in which that metric appears.  In rare
          cases, e.g. in development, in QA and when a PMDA  is  upgraded,
          this  may not be the case and pmlogextract will report the issue
          and abort without creating the output archive log.  This is done
          so the problem can be fixed with pmlogrewrite(1) before retrying
          the merge.  In unattended or QA environments it may  be  prefer‐
          able to force the merge and omit the metrics with the mismatched
          metadata.  The -x option does this.

Add qa/813 to test this.

Also a bunch of code cleanups in pmlogextract.

And correction of a corner case bug that has been there forever ... if
you use -c configfile and have a non-leaf PMNS name in configfile and
that non-leaf expands to different metrics across the input achives,
then only the matching metrics from the first archive containing
the non-leaf PMNS name would be included in the output ... the test
archives for qa/813 triggered just this scenario!
Fixed.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,697,2019-07-14T02:17:13Z,2019-07-16T23:45:09Z,2020-08-18T21:27:43Z,MERGED,True,590,84,15,https://github.com/kmcdonell,pmlogextract enhancement and bug fixes Changes committed to git@github.com:kmcdonell/pcp.git 20190710,2,[],https://github.com/performancecopilot/pcp/pull/697,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/697#issuecomment-511242400,"Ken McDonell (2):
pmlogextract: add -x option for more resilient merging
qa/archives: add archives for qa/813
man/man1/pmlogextract.1            |   25 +++
qa/813                             |   69 +++++++++
qa/813.out                         |  272 +++++++++++++++++++++++++++++++++++++
qa/archives/20190628.04.03.0.xz    |binary
qa/archives/20190628.04.03.1.xz    |binary
qa/archives/20190628.04.03.index   |binary
qa/archives/20190628.04.03.meta.xz |binary
qa/archives/20190628.06.31.0.xz    |binary
qa/archives/20190628.06.31.index   |binary
qa/archives/20190628.06.31.meta.xz |binary
qa/group                           |    1
src/pmlogextract/gram.y            |   34 ++--
src/pmlogextract/logger.h          |   27 ++-
src/pmlogextract/metriclist.c      |   92 ++++++++----
src/pmlogextract/pmlogextract.c    |  154 ++++++++++++++++----
15 files changed, 590 insertions(+), 84 deletions(-)
Details ...
commit 3b0bf55
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 11 07:33:22 2019 +1000
qa/archives: add archives for qa/813

commit 17f585f
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 11 07:25:31 2019 +1000
pmlogextract: add -x option for more resilient merging

For QA machines in particular, the varied use of the mmv PMDA may mean
the daily archives contain metrics with mismatched metadata, then
pmlogextract chokes in the nightly pmlogger_daily script.  Adding -x
to pmlogextract will silently ""fix"" this.

It may also be useful in unattended pmlogger environments.

From the man page ...
   -x     It  is  expected  that the metadata (name, PMID, type, semantics
          and units) for each metric will be consistent across all of  the
          input  PCP archive log(s) in which that metric appears.  In rare
          cases, e.g. in development, in QA and when a PMDA  is  upgraded,
          this  may not be the case and pmlogextract will report the issue
          and abort without creating the output archive log.  This is done
          so the problem can be fixed with pmlogrewrite(1) before retrying
          the merge.  In unattended or QA environments it may  be  prefer‐
          able to force the merge and omit the metrics with the mismatched
          metadata.  The -x option does this.

Add qa/813 to test this.

Also a bunch of code cleanups in pmlogextract.

And correction of a corner case bug that has been there forever ... if
you use -c configfile and have a non-leaf PMNS name in configfile and
that non-leaf expands to different metrics across the input achives,
then only the matching metrics from the first archive containing
the non-leaf PMNS name would be included in the output ... the test
archives for qa/813 triggered just this scenario!
Fixed.","Hi Ken, -x looks good and is definitely an improvement for unattended collection - I'm wondering if we could either keep mis-matched metrics up until the mismatch (and omit thereafter), or vise-versa (keep the new data, discard the old mismatched). Or do you think we're better off just omitting mismatched metrics altogether with the expectation of re-write rules coming along eventually?
Keeping the new data would mean the mismatched old data would just be culled earlier than the configured retention period, and we'd have good data on-going.
Cheers",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,697,2019-07-14T02:17:13Z,2019-07-16T23:45:09Z,2020-08-18T21:27:43Z,MERGED,True,590,84,15,https://github.com/kmcdonell,pmlogextract enhancement and bug fixes Changes committed to git@github.com:kmcdonell/pcp.git 20190710,2,[],https://github.com/performancecopilot/pcp/pull/697,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/697#issuecomment-512043250,"Ken McDonell (2):
pmlogextract: add -x option for more resilient merging
qa/archives: add archives for qa/813
man/man1/pmlogextract.1            |   25 +++
qa/813                             |   69 +++++++++
qa/813.out                         |  272 +++++++++++++++++++++++++++++++++++++
qa/archives/20190628.04.03.0.xz    |binary
qa/archives/20190628.04.03.1.xz    |binary
qa/archives/20190628.04.03.index   |binary
qa/archives/20190628.04.03.meta.xz |binary
qa/archives/20190628.06.31.0.xz    |binary
qa/archives/20190628.06.31.index   |binary
qa/archives/20190628.06.31.meta.xz |binary
qa/group                           |    1
src/pmlogextract/gram.y            |   34 ++--
src/pmlogextract/logger.h          |   27 ++-
src/pmlogextract/metriclist.c      |   92 ++++++++----
src/pmlogextract/pmlogextract.c    |  154 ++++++++++++++++----
15 files changed, 590 insertions(+), 84 deletions(-)
Details ...
commit 3b0bf55
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 11 07:33:22 2019 +1000
qa/archives: add archives for qa/813

commit 17f585f
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 11 07:25:31 2019 +1000
pmlogextract: add -x option for more resilient merging

For QA machines in particular, the varied use of the mmv PMDA may mean
the daily archives contain metrics with mismatched metadata, then
pmlogextract chokes in the nightly pmlogger_daily script.  Adding -x
to pmlogextract will silently ""fix"" this.

It may also be useful in unattended pmlogger environments.

From the man page ...
   -x     It  is  expected  that the metadata (name, PMID, type, semantics
          and units) for each metric will be consistent across all of  the
          input  PCP archive log(s) in which that metric appears.  In rare
          cases, e.g. in development, in QA and when a PMDA  is  upgraded,
          this  may not be the case and pmlogextract will report the issue
          and abort without creating the output archive log.  This is done
          so the problem can be fixed with pmlogrewrite(1) before retrying
          the merge.  In unattended or QA environments it may  be  prefer‐
          able to force the merge and omit the metrics with the mismatched
          metadata.  The -x option does this.

Add qa/813 to test this.

Also a bunch of code cleanups in pmlogextract.

And correction of a corner case bug that has been there forever ... if
you use -c configfile and have a non-leaf PMNS name in configfile and
that non-leaf expands to different metrics across the input achives,
then only the matching metrics from the first archive containing
the non-leaf PMNS name would be included in the output ... the test
archives for qa/813 triggered just this scenario!
Fixed.",merged. We can perhaps consider keeping new data or something further down the track.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,698,2019-07-16T02:29:23Z,2019-07-16T02:38:41Z,2019-07-23T07:07:07Z,MERGED,True,95,92,3,https://github.com/natoscott,pmdalinux: fix hugepage metric value calculations,1,['bug'],https://github.com/performancecopilot/pcp/pull/698,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/698,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,699,2019-07-17T04:42:46Z,2019-07-19T01:37:45Z,2020-08-18T21:27:48Z,MERGED,True,122,70,3,https://github.com/kmcdonell,qa/1369 and scripts/pcp-push Changes committed to git@github.com:kmcdonell/pcp.git 20190717,2,[],https://github.com/performancecopilot/pcp/pull/699,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/699,"Ken McDonell (2):
qa/1369: tweak filter
scripts/pcp-push: another attempt at a revised github workflow
qa/1369          |    4 +
qa/1369.out      |   20 +++---
scripts/pcp-push |  168 +++++++++++++++++++++++++++++++++++--------------------
3 files changed, 122 insertions(+), 70 deletions(-)
Details ...
commit b692f29
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 17 14:36:38 2019 +1000
scripts/pcp-push: another attempt at a revised github workflow

More changes aimed at making commits and merges flow via github
pull requests.

commit ff5678b
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 17 14:34:33 2019 +1000
qa/1369: tweak filter

context label length depends on the length of the hostname and/or
the length of the domainname ... neither are fixed, so apply some
filtering to eliminate per-QA-host differences.","Ken McDonell (2):
qa/1369: tweak filter
scripts/pcp-push: another attempt at a revised github workflow
qa/1369          |    4 +
qa/1369.out      |   20 +++---
scripts/pcp-push |  168 +++++++++++++++++++++++++++++++++++--------------------
3 files changed, 122 insertions(+), 70 deletions(-)
Details ...
commit b692f29
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 17 14:36:38 2019 +1000
scripts/pcp-push: another attempt at a revised github workflow

More changes aimed at making commits and merges flow via github
pull requests.

commit ff5678b
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 17 14:34:33 2019 +1000
qa/1369: tweak filter

context label length depends on the length of the hostname and/or
the length of the domainname ... neither are fixed, so apply some
filtering to eliminate per-QA-host differences.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,701,2019-07-22T01:02:52Z,2019-07-22T04:14:30Z,2019-07-22T04:14:30Z,MERGED,True,4,3,1,https://github.com/goodwinos,pmproxy: fix double-free memory corruption,1,[],https://github.com/performancecopilot/pcp/pull/701,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/701,"Fix consequential double-free corruption in pmwebapi_done() due to the
baton reverse pointer in client->u.http.data pointing back to a free'd
batton. Also dont bother zeroing any baton fields since the entire baton
will be memset to zero just prior to being free'd in pmwebapi_free_baton().
Also only sdsfree the baton->clientid if it is not NULL (this is benign
since sdsfree() handles a NULL pointer anyway).","Fix consequential double-free corruption in pmwebapi_done() due to the
baton reverse pointer in client->u.http.data pointing back to a free'd
batton. Also dont bother zeroing any baton fields since the entire baton
will be memset to zero just prior to being free'd in pmwebapi_free_baton().
Also only sdsfree the baton->clientid if it is not NULL (this is benign
since sdsfree() handles a NULL pointer anyway).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,703,2019-07-23T07:04:59Z,2019-07-23T07:06:19Z,2019-07-23T07:07:09Z,MERGED,True,221,1,7,https://github.com/natoscott,pmproxy: /pmapi/children REST API for pmGetChildrenStatus(3),1,['feature'],https://github.com/performancecopilot/pcp/pull/703,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/703,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,704,2019-07-24T07:57:46Z,2019-07-25T01:28:20Z,2020-09-21T15:47:55Z,MERGED,True,3,1,2,https://github.com/andreasgerstmayr,build/cppcheck: temporary suppress objectIndex error in siphash.c,1,[],https://github.com/performancecopilot/pcp/pull/704,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/704,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,706,2019-07-25T03:53:31Z,2019-07-25T22:20:54Z,2019-07-25T22:20:54Z,MERGED,True,69,58,8,https://github.com/goodwinos,pmdaproc: fix memory leak in pidlist refresh,2,[],https://github.com/performancecopilot/pcp/pull/706,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/706,"RHBZ #1721107
The pidlist refresh function was leaking instance name buffers for
processes that had exited between refreshes. Fix this by storing the
instance name (truncated psargs) in a new field of the hash table
entry, and harvest them correctly if they've exited after each refresh.
The indom table instance names now share a pointer to the new field
in the hash table entry so they dont need to be separately free'd.
This similifies the code and memory management.
Also put a 4K cap on the maximum length of a psargs string for the
unlikely scenario of a psargs string that is not NULL terminated,
i.e. use strndup() rather than strdup(). This may be possible if
a rogue process modified it's argv[0] at run-time.
For testing, the recipe in RHBZ#1721107 was repro'd using valgind
and a workload with lots of process churn (i.e. a couple of large
builds running). Before the fix, valgrind reported numerous similar
leaks as reported in the bug. With the fix applied, those leaks
are gone. The refresh is more efficient now too because we only
have one copy of the psargs strings (in the hash table entry).
Also thoroughly exercised all tests in the QA pmda.proc and
pmda.hotproc groups. A new test might be possible, but the nature
of the required workload would make it difficult (and expensive)
to run.","RHBZ #1721107
The pidlist refresh function was leaking instance name buffers for
processes that had exited between refreshes. Fix this by storing the
instance name (truncated psargs) in a new field of the hash table
entry, and harvest them correctly if they've exited after each refresh.
The indom table instance names now share a pointer to the new field
in the hash table entry so they dont need to be separately free'd.
This similifies the code and memory management.
Also put a 4K cap on the maximum length of a psargs string for the
unlikely scenario of a psargs string that is not NULL terminated,
i.e. use strndup() rather than strdup(). This may be possible if
a rogue process modified it's argv[0] at run-time.
For testing, the recipe in RHBZ#1721107 was repro'd using valgind
and a workload with lots of process churn (i.e. a couple of large
builds running). Before the fix, valgrind reported numerous similar
leaks as reported in the bug. With the fix applied, those leaks
are gone. The refresh is more efficient now too because we only
have one copy of the psargs strings (in the hash table entry).
Also thoroughly exercised all tests in the QA pmda.proc and
pmda.hotproc groups. A new test might be possible, but the nature
of the required workload would make it difficult (and expensive)
to run.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,708,2019-07-26T09:09:33Z,2019-07-30T02:08:34Z,2020-08-18T21:27:53Z,MERGED,True,117,38,22,https://github.com/kmcdonell,Fedora 30 and gcc 8 changes Changes committed to git@github.com:kmcdonell/pcp.git 20190723,14,[],https://github.com/performancecopilot/pcp/pull/708,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/708,"Ken McDonell (3):
qa/admin/check-vm: send all warnings to stderr
qa/admin/other-packages: changes for Fedora 30
qa/admin/other-packages: remove skip.vm03
qa/admin/check-vm                   |   32 ++++++++++++++++----------------
qa/admin/other-packages/manifest    |    1 +
qa/admin/other-packages/skip        |    3 +++
qa/admin/other-packages/skip.vm03   |    3 ---
qa/admin/other-packages/unavailable |    1 +
5 files changed, 21 insertions(+), 19 deletions(-)
Details ...
commit f3b9630
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 23 19:37:12 2019 +1000
qa/admin/other-packages: remove skip.vm03

Not needed now vm03 has been rebuilt with a bigger disk and Fedora 30.

commit 88603e5
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 23 17:03:38 2019 +1000
qa/admin/other-packages: changes for Fedora 30

commit a9cb6c5
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 23 17:02:34 2019 +1000
qa/admin/check-vm: send all warnings to stderr

So package-tool-of-choice `check-vm -p` works properly.","Ken McDonell (3):
qa/admin/check-vm: send all warnings to stderr
qa/admin/other-packages: changes for Fedora 30
qa/admin/other-packages: remove skip.vm03
qa/admin/check-vm                   |   32 ++++++++++++++++----------------
qa/admin/other-packages/manifest    |    1 +
qa/admin/other-packages/skip        |    3 +++
qa/admin/other-packages/skip.vm03   |    3 ---
qa/admin/other-packages/unavailable |    1 +
5 files changed, 21 insertions(+), 19 deletions(-)
Details ...
commit f3b9630
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 23 19:37:12 2019 +1000
qa/admin/other-packages: remove skip.vm03

Not needed now vm03 has been rebuilt with a bigger disk and Fedora 30.

commit 88603e5
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 23 17:03:38 2019 +1000
qa/admin/other-packages: changes for Fedora 30

commit a9cb6c5
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 23 17:02:34 2019 +1000
qa/admin/check-vm: send all warnings to stderr

So package-tool-of-choice `check-vm -p` works properly.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,709,2019-07-26T09:21:57Z,2019-07-26T09:32:33Z,2020-08-18T21:27:58Z,CLOSED,False,114,205,23,https://github.com/kmcdonell,src/libpcp_web/src/exports fixup Changes committed to git@github.com:kmcdonell/pcp.git 20190726,11,[],https://github.com/performancecopilot/pcp/pull/709,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/709,"Ken McDonell (1):
src/libpcp_web/src/exports: remove it ... there is a .in file
src/libpcp_web/src/exports |  167 ---------------------------------------------
1 file changed, 167 deletions(-)
Details ...
commit ee9d4ad
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 26 19:20:58 2019 +1000
src/libpcp_web/src/exports: remove it ... there is a .in file","Ken McDonell (1):
src/libpcp_web/src/exports: remove it ... there is a .in file
src/libpcp_web/src/exports |  167 ---------------------------------------------
1 file changed, 167 deletions(-)
Details ...
commit ee9d4ad
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 26 19:20:58 2019 +1000
src/libpcp_web/src/exports: remove it ... there is a .in file",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,709,2019-07-26T09:21:57Z,2019-07-26T09:32:33Z,2020-08-18T21:27:58Z,CLOSED,False,114,205,23,https://github.com/kmcdonell,src/libpcp_web/src/exports fixup Changes committed to git@github.com:kmcdonell/pcp.git 20190726,11,[],https://github.com/performancecopilot/pcp/pull/709,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/709#issuecomment-515380269,"Ken McDonell (1):
src/libpcp_web/src/exports: remove it ... there is a .in file
src/libpcp_web/src/exports |  167 ---------------------------------------------
1 file changed, 167 deletions(-)
Details ...
commit ee9d4ad
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 26 19:20:58 2019 +1000
src/libpcp_web/src/exports: remove it ... there is a .in file",Oops.  I was wrong.  Ignore this.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,710,2019-07-29T10:40:53Z,2019-07-29T10:41:48Z,2019-07-29T10:41:48Z,MERGED,True,59,2,4,https://github.com/natoscott,pcp-atop: fix write mode (-w) handling of proc vs hotproc metrics,1,['bug'],https://github.com/performancecopilot/pcp/pull/710,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/710,This resolves Red Hat BZ #1733866.,This resolves Red Hat BZ #1733866.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,711,2019-07-30T20:23:04Z,2019-07-30T23:03:12Z,2020-08-18T21:28:03Z,MERGED,True,23,10,3,https://github.com/kmcdonell,shell completion changes for pmlogextract -x and qa notes Changes committed to git@github.com:kmcdonell/pcp.git 20190730,2,[],https://github.com/performancecopilot/pcp/pull/711,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/711,"Ken McDonell (1):
qa/README: add notes for ssh access to pcpqa login with selinux
qa/README |   30 +++++++++++++++++++++---------
1 file changed, 21 insertions(+), 9 deletions(-)
Details ...
commit a995f2f
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 31 06:20:08 2019 +1000
qa/README: add notes for ssh access to pcpqa login with selinux

Thanks to Mark for diagnosing this issue that surfaced recently
when vm03 moved to Fedora 30.","Ken McDonell (1):
qa/README: add notes for ssh access to pcpqa login with selinux
qa/README |   30 +++++++++++++++++++++---------
1 file changed, 21 insertions(+), 9 deletions(-)
Details ...
commit a995f2f
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 31 06:20:08 2019 +1000
qa/README: add notes for ssh access to pcpqa login with selinux

Thanks to Mark for diagnosing this issue that surfaced recently
when vm03 moved to Fedora 30.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,712,2019-07-31T07:13:56Z,2019-08-01T05:22:05Z,2020-09-21T15:47:58Z,MERGED,True,9,0,2,https://github.com/andreasgerstmayr,qa: fix 917 by adding new selinux rule for capability2/syslog,2,[],https://github.com/performancecopilot/pcp/pull/712,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/712,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,713,2019-08-01T05:16:55Z,2019-08-01T05:22:20Z,2019-08-01T05:22:20Z,MERGED,True,12,9,2,https://github.com/goodwinos, libpcp_web: fix discovery segfaults when deleting monitored paths,2,[],https://github.com/performancecopilot/pcp/pull/713,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/713,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,714,2019-08-03T21:32:24Z,2019-08-06T00:25:24Z,2019-08-06T00:25:24Z,MERGED,True,2,0,1,https://github.com/Erbenos,making dictDelete function available,3,[],https://github.com/performancecopilot/pcp/pull/714,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/714,"I will need dictDelete function available in StatsD PMDA, therefore making it available.","I will need dictDelete function available in StatsD PMDA, therefore making it available.",True,{'THUMBS_UP': ['https://github.com/lzap']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,714,2019-08-03T21:32:24Z,2019-08-06T00:25:24Z,2019-08-06T00:25:24Z,MERGED,True,2,0,1,https://github.com/Erbenos,making dictDelete function available,3,[],https://github.com/performancecopilot/pcp/pull/714,https://github.com/Erbenos,2,https://github.com/performancecopilot/pcp/pull/714#issuecomment-518312449,"I will need dictDelete function available in StatsD PMDA, therefore making it available.",Moved.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,716,2019-08-09T06:41:46Z,2019-08-12T02:22:15Z,2019-08-12T02:22:15Z,MERGED,True,3,7,4,https://github.com/goodwinos,logging services - fix systemd configs for log management services,2,[],https://github.com/performancecopilot/pcp/pull/716,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/716,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,717,2019-08-10T08:13:19Z,2019-08-12T02:22:15Z,2020-08-18T21:28:09Z,MERGED,True,181,1,3,https://github.com/kmcdonell,"small sample PMDA change, github helpeer scripts Changes committed to git@github.com:kmcdonell/pcp.git 20190802",5,[],https://github.com/performancecopilot/pcp/pull/717,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/717,"Ken McDonell (3):
src/pmdas/sample/src/GNUmakefile.install: add dsohelp* files to LDIRT
scripts/new-branch: another helper for a github workflow
scripts/pcp-refresh: another helper scripts for the github workflow
scripts/new-branch                       |   90 +++++++++++++++++++++++++++++++
scripts/pcp-refresh                      |   90 +++++++++++++++++++++++++++++++
src/pmdas/sample/src/GNUmakefile.install |    2
3 files changed, 181 insertions(+), 1 deletion(-)
Details ...
commit ba75774
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 10 17:55:51 2019 +1000
scripts/pcp-refresh: another helper scripts for the github workflow

commit 648e980
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 10 07:25:31 2019 +1000
scripts/new-branch: another helper for a github workflow

Use this one to start a new branch in preparation for commits
to be later pushed via a github pull request using scripts/pcp-push.

commit 5a0b05a
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 4 15:38:11 2019 +1000
src/pmdas/sample/src/GNUmakefile.install: add dsohelp* files to LDIRT

These ones are all generated from the ""help"" file and make clean
should remove them so they are recreated if needed and match the
current ""help"" file.","Ken McDonell (3):
src/pmdas/sample/src/GNUmakefile.install: add dsohelp* files to LDIRT
scripts/new-branch: another helper for a github workflow
scripts/pcp-refresh: another helper scripts for the github workflow
scripts/new-branch                       |   90 +++++++++++++++++++++++++++++++
scripts/pcp-refresh                      |   90 +++++++++++++++++++++++++++++++
src/pmdas/sample/src/GNUmakefile.install |    2
3 files changed, 181 insertions(+), 1 deletion(-)
Details ...
commit ba75774
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 10 17:55:51 2019 +1000
scripts/pcp-refresh: another helper scripts for the github workflow

commit 648e980
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 10 07:25:31 2019 +1000
scripts/new-branch: another helper for a github workflow

Use this one to start a new branch in preparation for commits
to be later pushed via a github pull request using scripts/pcp-push.

commit 5a0b05a
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 4 15:38:11 2019 +1000
src/pmdas/sample/src/GNUmakefile.install: add dsohelp* files to LDIRT

These ones are all generated from the ""help"" file and make clean
should remove them so they are recreated if needed and match the
current ""help"" file.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,718,2019-08-10T21:12:34Z,2019-08-12T02:22:16Z,2019-08-12T02:22:16Z,MERGED,True,374,90,5,https://github.com/kmcdonell,github workflow documentation and small script changes Changes committed to git@github.com:kmcdonell/pcp.git 20190811,8,[],https://github.com/performancecopilot/pcp/pull/718,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/718,"Ken McDonell (2):
README.github: document the github workflow
scripts/pcp-push: small changes to match README.github
README.github    |   89 +++++++++++++++++++++++++
scripts/pcp-push |  193 +++++++++++++++++++++++++++++--------------------------
2 files changed, 193 insertions(+), 89 deletions(-)
Details ...
commit 9022d39
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 11 07:05:52 2019 +1000
scripts/pcp-push: small changes to match README.github

- use <datestamp>.sha as the base commit for a bunch of changes
  (created by scripts/new-branch, used by scripts/pcp-push)
- disable ""Push to official github repo?"" logic as this is now done
  (always I think) via accepting a github pull request
- drop the ""Merge local branch <datestamp> back to local master
  branch?"" logic as the merge is done from master to <datestamp>
  before using scripts/pcp-push
- after creating the pull-request, checkout the master branch and
  delete the <datestamp> branch.

commit 62e1bfd
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 11 07:05:25 2019 +1000
README.github: document the github workflow","Ken McDonell (2):
README.github: document the github workflow
scripts/pcp-push: small changes to match README.github
README.github    |   89 +++++++++++++++++++++++++
scripts/pcp-push |  193 +++++++++++++++++++++++++++++--------------------------
2 files changed, 193 insertions(+), 89 deletions(-)
Details ...
commit 9022d39
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 11 07:05:52 2019 +1000
scripts/pcp-push: small changes to match README.github

- use <datestamp>.sha as the base commit for a bunch of changes
  (created by scripts/new-branch, used by scripts/pcp-push)
- disable ""Push to official github repo?"" logic as this is now done
  (always I think) via accepting a github pull request
- drop the ""Merge local branch <datestamp> back to local master
  branch?"" logic as the merge is done from master to <datestamp>
  before using scripts/pcp-push
- after creating the pull-request, checkout the master branch and
  delete the <datestamp> branch.

commit 62e1bfd
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 11 07:05:25 2019 +1000
README.github: document the github workflow",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,719,2019-08-13T05:10:49Z,2019-08-14T00:08:00Z,2020-08-18T21:28:14Z,MERGED,True,104,71,7,https://github.com/kmcdonell,qa and check-vm Changes committed to git@github.com:kmcdonell/pcp.git 20190811,5,[],https://github.com/performancecopilot/pcp/pull/719,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/719,"Ken McDonell (5):
qa/admin/check-vm et al: changes for 32-bit Fedora 30
scripts/pcp-push: small changes for *.sha files
qa/1150: change guard as the test now works for Ubuntu 19.04
qa/023: fix filter ... more fd's are possible
qa/374: rework remote command logic
qa/023                              |    2
qa/1150                             |   19 ++++----
qa/374                              |   61 +++++++++++++++++++--------
qa/admin/check-manifest             |    3 -
qa/admin/other-packages/manifest    |   80 ++++++++++++++++++------------------
qa/admin/other-packages/unavailable |    3 -
scripts/pcp-push                    |    7 ++-
7 files changed, 104 insertions(+), 71 deletions(-)
Details ...
commit 2972e09
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 12 13:38:38 2019 +1000
qa/374: rework remote command logic

Need to be more careful when running commands as user pcpqa on the
remote machine.  Especially if sudo does not work there, then we
were failing this test silently with no clue as to why.

commit 3fda017
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 12 07:11:49 2019 +1000
qa/023: fix filter ... more fd's are possible

The state of pmcd's fd pool is not deterministic, and I think recent
changes around closing of help text files (for DSO PMDAs in particular)
may have moved things a bit so add a couple of more acceptable values
into the filter.

commit 10611d0
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 12 07:10:02 2019 +1000
qa/1150: change guard as the test now works for Ubuntu 19.04

commit 48034f4
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 11 20:15:43 2019 +1000
scripts/pcp-push: small changes for *.sha files

commit 6cc25a8
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 11 20:09:18 2019 +1000
qa/admin/check-vm et al: changes for 32-bit Fedora 30

Also unquote 'perl(...)' specs ... only confuses the process when
using check-vm -p.","Ken McDonell (5):
qa/admin/check-vm et al: changes for 32-bit Fedora 30
scripts/pcp-push: small changes for *.sha files
qa/1150: change guard as the test now works for Ubuntu 19.04
qa/023: fix filter ... more fd's are possible
qa/374: rework remote command logic
qa/023                              |    2
qa/1150                             |   19 ++++----
qa/374                              |   61 +++++++++++++++++++--------
qa/admin/check-manifest             |    3 -
qa/admin/other-packages/manifest    |   80 ++++++++++++++++++------------------
qa/admin/other-packages/unavailable |    3 -
scripts/pcp-push                    |    7 ++-
7 files changed, 104 insertions(+), 71 deletions(-)
Details ...
commit 2972e09
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 12 13:38:38 2019 +1000
qa/374: rework remote command logic

Need to be more careful when running commands as user pcpqa on the
remote machine.  Especially if sudo does not work there, then we
were failing this test silently with no clue as to why.

commit 3fda017
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 12 07:11:49 2019 +1000
qa/023: fix filter ... more fd's are possible

The state of pmcd's fd pool is not deterministic, and I think recent
changes around closing of help text files (for DSO PMDAs in particular)
may have moved things a bit so add a couple of more acceptable values
into the filter.

commit 10611d0
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 12 07:10:02 2019 +1000
qa/1150: change guard as the test now works for Ubuntu 19.04

commit 48034f4
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 11 20:15:43 2019 +1000
scripts/pcp-push: small changes for *.sha files

commit 6cc25a8
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 11 20:09:18 2019 +1000
qa/admin/check-vm et al: changes for 32-bit Fedora 30

Also unquote 'perl(...)' specs ... only confuses the process when
using check-vm -p.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,721,2019-08-20T15:53:52Z,2019-08-22T04:21:10Z,2019-08-22T04:21:10Z,MERGED,True,1490,12,35,https://github.com/andreasgerstmayr,bpftrace PMDA,29,[],https://github.com/performancecopilot/pcp/pull/721,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/721,"exports bpftrace variables (eBPF maps) as PCP metrics
resolves #664","exports bpftrace variables (eBPF maps) as PCP metrics
resolves #664",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,722,2019-08-20T17:59:23Z,2019-08-21T01:38:46Z,2019-08-21T01:38:46Z,MERGED,True,1309,524,29,https://github.com/Erbenos,StatsD update,3,[],https://github.com/performancecopilot/pcp/pull/722,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/722,"added last work from separate StatsD repo, cleaned up memory leaks/errors with Valgrind, small edits to .dbpmdarc","added last work from separate StatsD repo, cleaned up memory leaks/errors with Valgrind, small edits to .dbpmdarc",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,724,2019-08-21T04:57:01Z,2019-08-22T04:21:11Z,2019-08-22T04:21:11Z,MERGED,True,4,3,4,https://github.com/goodwinos,tweak systemd service scripts,2,[],https://github.com/performancecopilot/pcp/pull/724,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/724,"The pmlogger_check service is not required by pmlogger.service. This was causing them to run in parallel. Also, add a 120s timeout in all service scripts for both start and stop to avoid timeouts in Azure CI checks.","The pmlogger_check service is not required by pmlogger.service. This was causing them to run in parallel. Also, add a 120s timeout in all service scripts for both start and stop to avoid timeouts in Azure CI checks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,724,2019-08-21T04:57:01Z,2019-08-22T04:21:11Z,2019-08-22T04:21:11Z,MERGED,True,4,3,4,https://github.com/goodwinos,tweak systemd service scripts,2,[],https://github.com/performancecopilot/pcp/pull/724,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/724#issuecomment-523307156,"The pmlogger_check service is not required by pmlogger.service. This was causing them to run in parallel. Also, add a 120s timeout in all service scripts for both start and stop to avoid timeouts in Azure CI checks.","I don't follow how 120s timeouts help CI improve? What happens if the script hits that timeout - surely the test still fails, right?

Paste from IRC conversation -
 what happens if it hits that timeout - surely the test still fails right?  so, don't follow how it helps
 mgoodwin, will ask in the gh issue
 the assertion is CI often fails because the default timeout (30s) isnt long enough
 removing the RequireBy=pmlogger in pmlogger_check.service is because Ken is seeing failures that I think are due to this
 those two services should not run in parallel
 same as pmlogger and pmlogger_daily
 ok - remind me - if I enable pmlogger, how do the daily and check scripts get enabled?
 by their timers
 how do their timers get enabled?
 (off by default, aren't they?)
 they're requiredby=pmlogger.service
 so if pmlogger.service is enabled and active, the timers are start too
 definitely?  ok
 sounds good
 yep
 next step here would be to convert over to type=notify
...
 looks like CI passed, except on rawhide (gpgkeys issue of some sort) and debian-testing (no sane version of 'ping' available)
 cool
 those were pre-existing issues, i noticed em too
 that's an improvement at least anyway
 ping may have moved to some non-default package on debian testing i guess
 +1",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,725,2019-08-21T08:02:33Z,2019-08-29T08:23:14Z,2019-08-29T08:23:14Z,CLOSED,False,430,985,5,https://github.com/lzap,pmdastatsd: generate man page from pod,1,[],https://github.com/performancecopilot/pcp/pull/725,https://github.com/lzap,1,https://github.com/performancecopilot/pcp/pull/725,This stops the insanity of maintaining man page.,This stops the insanity of maintaining man page.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,725,2019-08-21T08:02:33Z,2019-08-29T08:23:14Z,2019-08-29T08:23:14Z,CLOSED,False,430,985,5,https://github.com/lzap,pmdastatsd: generate man page from pod,1,[],https://github.com/performancecopilot/pcp/pull/725,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/725#issuecomment-523741917,This stops the insanity of maintaining man page.,"@lzap there's some possible down-sides here, e.g. this man page will no longer appear on online resources like pcp.io and man7.org (due to the way they're built) ... is it worth it?  Up to you and @Erbenos",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,725,2019-08-21T08:02:33Z,2019-08-29T08:23:14Z,2019-08-29T08:23:14Z,CLOSED,False,430,985,5,https://github.com/lzap,pmdastatsd: generate man page from pod,1,[],https://github.com/performancecopilot/pcp/pull/725,https://github.com/lzap,3,https://github.com/performancecopilot/pcp/pull/725#issuecomment-524339422,This stops the insanity of maintaining man page.,"Damn, it was painful to convert it back and I can hardly asses how painful it was to write it directly.
Here is an alternative proposal - an extra target that generates it manually so we would commit the generated .1 file into git with some comment the file was autogenerated so people won't accidentaly change it.
If you agree I will refactor this.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,725,2019-08-21T08:02:33Z,2019-08-29T08:23:14Z,2019-08-29T08:23:14Z,CLOSED,False,430,985,5,https://github.com/lzap,pmdastatsd: generate man page from pod,1,[],https://github.com/performancecopilot/pcp/pull/725,https://github.com/Erbenos,4,https://github.com/performancecopilot/pcp/pull/725#issuecomment-524341319,This stops the insanity of maintaining man page.,"I am actually doing some doc changes in my fork and since that one still has no pod doc files, can we wait with this, until .1 doc is merged with my version?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,725,2019-08-21T08:02:33Z,2019-08-29T08:23:14Z,2019-08-29T08:23:14Z,CLOSED,False,430,985,5,https://github.com/lzap,pmdastatsd: generate man page from pod,1,[],https://github.com/performancecopilot/pcp/pull/725,https://github.com/lzap,5,https://github.com/performancecopilot/pcp/pull/725#issuecomment-526080150,This stops the insanity of maintaining man page.,"Of course, this is not important. If you prefer to maintain .1 file manually I can also just throw this away.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,726,2019-08-21T20:35:26Z,2019-08-22T04:21:12Z,2020-08-18T21:28:19Z,MERGED,True,3260,13,15,https://github.com/kmcdonell,fix segv in local context fetch (from cockpit bug) Changes committed to git@github.com:kmcdonell/pcp.git 20190821,9,[],https://github.com/performancecopilot/pcp/pull/726,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/726,"Ken McDonell (6):
qa/src/template.c: small change in comments
qa/903 & 914: (new) exercise profile juggling for multi-thread and local contexts
libpcp: fix cockpit-pcp segv with local context
src/libpcp/src/fetchlocal.c: small tweak to last profile change
qa/group: add 903 and 914 to the context_local group
qa/group: add 903 and 914 to the context group
qa/903                        |   47
qa/903.out                    | 1021 ++++++++++++++++++
qa/914                        |   46
qa/914.out                    | 2257 +++++++++++++++++++++++++++++++++---------
qa/group                      |   10
qa/src/.gitignore             |    2
qa/src/GNUlocaldefs           |   13
qa/src/multithread13.c        |  358 ++++++
qa/src/profilecrash.c         |  455 +++++++-
qa/src/template.c             |    2
src/include/pcp/pmda.h        |    1
src/libpcp/src/connectlocal.c |   16
src/libpcp/src/context.c      |    7
src/libpcp/src/fetchlocal.c   |   19
src/libpcp/src/internal.h     |    1
15 files changed, 3751 insertions(+), 504 deletions(-)
Details ...
commit f4be095
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 21 21:01:04 2019 +1000
qa/group: add 903 and 914 to the context group

commit bc23f9b
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 21 20:58:26 2019 +1000
qa/group: add 903 and 914 to the context_local group

commit c299f92
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 21 20:54:08 2019 +1000
src/libpcp/src/fetchlocal.c: small tweak to last profile change

We need state on both the client-side and the PMDA side.

The previous change exposed a new error where a profile was updated
and not pushed to the DSO PMDA in the absence of any other active
context.

Changes to qa/src/profilecrash.c and qa/914.out to demonstrate the
new error and verify the fix.

commit aa14df7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 21 20:29:07 2019 +1000
libpcp: fix cockpit-pcp segv with local context

The problem has variously been reported as:
    https://github.com/cockpit-project/cockpit/issues/6108 and
    https://bugzilla.redhat.com/show_bug.cgi?id=1235962
and most recently associated with
    https://github.com/performancecopilot/pcp/pull/693

The root cause was a corner case with multiple contexts using
PM_CONTEXT_LOCAL and instance profiles.  We had an optimization that
stopped pushing the profile to the DSO PMDA if it had already been
pushed.

The logic around this optimization was wrong, and when combined
with calls to pmDestroyContext() we could end up with a stale
and corrupted instance profile being used in the DSO PMDA.

This change moves the state from the client-side per-context
structure to the PMDA-side __pmDSO structure.

commit 952ccdb
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 21 20:13:12 2019 +1000
qa/903 & 914: (new) exercise profile juggling for multi-thread and local contexts

Trying to reproduce the cockpit-pcp SEGV.

qa/903 & src/multithread13.c failed to reproduce, but is exercising code
paths not otherwise covered, so keep it..

qa/914 & src/profilecrash.c does reproduce the problem.

commit 086d058
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 21 20:12:46 2019 +1000
qa/src/template.c: small change in comments","Ken McDonell (6):
qa/src/template.c: small change in comments
qa/903 & 914: (new) exercise profile juggling for multi-thread and local contexts
libpcp: fix cockpit-pcp segv with local context
src/libpcp/src/fetchlocal.c: small tweak to last profile change
qa/group: add 903 and 914 to the context_local group
qa/group: add 903 and 914 to the context group
qa/903                        |   47
qa/903.out                    | 1021 ++++++++++++++++++
qa/914                        |   46
qa/914.out                    | 2257 +++++++++++++++++++++++++++++++++---------
qa/group                      |   10
qa/src/.gitignore             |    2
qa/src/GNUlocaldefs           |   13
qa/src/multithread13.c        |  358 ++++++
qa/src/profilecrash.c         |  455 +++++++-
qa/src/template.c             |    2
src/include/pcp/pmda.h        |    1
src/libpcp/src/connectlocal.c |   16
src/libpcp/src/context.c      |    7
src/libpcp/src/fetchlocal.c   |   19
src/libpcp/src/internal.h     |    1
15 files changed, 3751 insertions(+), 504 deletions(-)
Details ...
commit f4be095
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 21 21:01:04 2019 +1000
qa/group: add 903 and 914 to the context group

commit bc23f9b
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 21 20:58:26 2019 +1000
qa/group: add 903 and 914 to the context_local group

commit c299f92
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 21 20:54:08 2019 +1000
src/libpcp/src/fetchlocal.c: small tweak to last profile change

We need state on both the client-side and the PMDA side.

The previous change exposed a new error where a profile was updated
and not pushed to the DSO PMDA in the absence of any other active
context.

Changes to qa/src/profilecrash.c and qa/914.out to demonstrate the
new error and verify the fix.

commit aa14df7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 21 20:29:07 2019 +1000
libpcp: fix cockpit-pcp segv with local context

The problem has variously been reported as:
    https://github.com/cockpit-project/cockpit/issues/6108 and
    https://bugzilla.redhat.com/show_bug.cgi?id=1235962
and most recently associated with
    https://github.com/performancecopilot/pcp/pull/693

The root cause was a corner case with multiple contexts using
PM_CONTEXT_LOCAL and instance profiles.  We had an optimization that
stopped pushing the profile to the DSO PMDA if it had already been
pushed.

The logic around this optimization was wrong, and when combined
with calls to pmDestroyContext() we could end up with a stale
and corrupted instance profile being used in the DSO PMDA.

This change moves the state from the client-side per-context
structure to the PMDA-side __pmDSO structure.

commit 952ccdb
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 21 20:13:12 2019 +1000
qa/903 & 914: (new) exercise profile juggling for multi-thread and local contexts

Trying to reproduce the cockpit-pcp SEGV.

qa/903 & src/multithread13.c failed to reproduce, but is exercising code
paths not otherwise covered, so keep it..

qa/914 & src/profilecrash.c does reproduce the problem.

commit 086d058
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 21 20:12:46 2019 +1000
qa/src/template.c: small change in comments",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,727,2019-08-21T20:41:00Z,2019-08-22T04:21:12Z,2019-08-22T04:21:12Z,MERGED,True,1,1,1,https://github.com/rvernica,Fix typo in variable name,1,[],https://github.com/performancecopilot/pcp/pull/727,https://github.com/rvernica,1,https://github.com/performancecopilot/pcp/pull/727,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,728,2019-08-21T20:46:05Z,2019-08-22T04:21:13Z,2019-08-22T04:21:13Z,MERGED,True,3,0,1,https://github.com/rvernica,Add where the pmcd environment variables are set,1,[],https://github.com/performancecopilot/pcp/pull/728,https://github.com/rvernica,1,https://github.com/performancecopilot/pcp/pull/728,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,732,2019-08-24T19:01:42Z,2019-08-27T01:09:35Z,2019-08-27T01:09:36Z,MERGED,True,342,408,24,https://github.com/Erbenos,pmdastatsd improvements,1,[],https://github.com/performancecopilot/pcp/pull/732,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/732,"Only pmdastatsd related changes, before tests are done.
Updated:

reduced waste of CPU cycles by making thread's loops blocking (more event based)
improved logging (removed 'debug' flag, update 'verbose' to be level based)
agent can be stopped via 'PMDASTATSD_EXIT' payload as well as INT signal
removed .travis.yml from statsd PMDA directory
set HDR histogram as default aggregation option
updated docs accordingly
base verbose logging level prints metric related processing errors, up to a certain threshold
removed helpfile (was empty anyway)

Also added '.vscode' to root gitignore - directory that gets automatically generated when opening repo in Visual Studio Code editor, which keep editor related things inside.","Only pmdastatsd related changes, before tests are done.
Updated:

reduced waste of CPU cycles by making thread's loops blocking (more event based)
improved logging (removed 'debug' flag, update 'verbose' to be level based)
agent can be stopped via 'PMDASTATSD_EXIT' payload as well as INT signal
removed .travis.yml from statsd PMDA directory
set HDR histogram as default aggregation option
updated docs accordingly
base verbose logging level prints metric related processing errors, up to a certain threshold
removed helpfile (was empty anyway)

Also added '.vscode' to root gitignore - directory that gets automatically generated when opening repo in Visual Studio Code editor, which keep editor related things inside.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,733,2019-08-25T17:18:02Z,2019-08-27T01:09:36Z,2020-09-21T15:47:58Z,MERGED,True,177,41,11,https://github.com/andreasgerstmayr,"pmdabpftrace: export tracepoints as string (CSV) metric, table-retain-lines metadata, qa: run python unittests",1,[],https://github.com/performancecopilot/pcp/pull/733,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/733,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,735,2019-08-27T23:01:33Z,2019-09-04T01:28:47Z,2020-01-19T00:37:52Z,MERGED,True,96,52,6,https://github.com/Erbenos,Added support for scientific notation for metric values in StatsD payloads,2,[],https://github.com/performancecopilot/pcp/pull/735,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/735,"...and small fix for underflow detection

Payloads with values such as these are valid:
👍
test:1e1|g
test:+1e+1|g
test:-1e-1|g
test:1.1e1|g

These are not:
👎
test:-.2e2|g
test:.2e2|g
test:e2|g
test:2e2.2|g","...and small fix for underflow detection

Payloads with values such as these are valid:
👍
test:1e1|g
test:+1e+1|g
test:-1e-1|g
test:1.1e1|g

These are not:
👎
test:-.2e2|g
test:.2e2|g
test:e2|g
test:2e2.2|g",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,735,2019-08-27T23:01:33Z,2019-09-04T01:28:47Z,2020-01-19T00:37:52Z,MERGED,True,96,52,6,https://github.com/Erbenos,Added support for scientific notation for metric values in StatsD payloads,2,[],https://github.com/performancecopilot/pcp/pull/735,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/735#issuecomment-525517405,"...and small fix for underflow detection

Payloads with values such as these are valid:
👍
test:1e1|g
test:+1e+1|g
test:-1e-1|g
test:1.1e1|g

These are not:
👎
test:-.2e2|g
test:.2e2|g
test:e2|g
test:2e2.2|g",@Erbenos looks like something that would be good to test - can we extend the testsuite to exercise this change?,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,735,2019-08-27T23:01:33Z,2019-09-04T01:28:47Z,2020-01-19T00:37:52Z,MERGED,True,96,52,6,https://github.com/Erbenos,Added support for scientific notation for metric values in StatsD payloads,2,[],https://github.com/performancecopilot/pcp/pull/735,https://github.com/Erbenos,3,https://github.com/performancecopilot/pcp/pull/735#issuecomment-525520211,"...and small fix for underflow detection

Payloads with values such as these are valid:
👍
test:1e1|g
test:+1e+1|g
test:-1e-1|g
test:1.1e1|g

These are not:
👎
test:-.2e2|g
test:.2e2|g
test:e2|g
test:2e2.2|g","You are right, will do next. While working on this I noticed that with
statsd Makefile the rules for unit tests for parsers are gone, so will
probably add that and integrate those as well.
…
On Wed, 28 Aug 2019, 01:08 Nathan Scott, ***@***.***> wrote:
 @Erbenos <https://github.com/Erbenos> looks like something that would be
 good to test - can we extend the testsuite to exercise this change?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#735?email_source=notifications&email_token=ABN5UV6W64QWKBLNCSWMCA3QGWXVDA5CNFSM4IQQUYJKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD5JMEXI#issuecomment-525517405>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ABN5UV6GWOVDE7T4NTDUB43QGWXVDANCNFSM4IQQUYJA>
 .",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,735,2019-08-27T23:01:33Z,2019-09-04T01:28:47Z,2020-01-19T00:37:52Z,MERGED,True,96,52,6,https://github.com/Erbenos,Added support for scientific notation for metric values in StatsD payloads,2,[],https://github.com/performancecopilot/pcp/pull/735,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/735#issuecomment-525522792,"...and small fix for underflow detection

Payloads with values such as these are valid:
👍
test:1e1|g
test:+1e+1|g
test:-1e-1|g
test:1.1e1|g

These are not:
👎
test:-.2e2|g
test:.2e2|g
test:e2|g
test:2e2.2|g","You are right, will do next. While working on this I noticed that with statsd Makefile the rules for unit tests for parsers are gone, so will probably add that and integrate those as well.

Oh, not gone - they reside in the PCP QA suite now - see test 1599.  You can run them (and all statsd tests) via:
$ cd qa
$ ./check -g pmda.statsd",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,735,2019-08-27T23:01:33Z,2019-09-04T01:28:47Z,2020-01-19T00:37:52Z,MERGED,True,96,52,6,https://github.com/Erbenos,Added support for scientific notation for metric values in StatsD payloads,2,[],https://github.com/performancecopilot/pcp/pull/735,https://github.com/Erbenos,5,https://github.com/performancecopilot/pcp/pull/735#issuecomment-525524127,"...and small fix for underflow detection

Payloads with values such as these are valid:
👍
test:1e1|g
test:+1e+1|g
test:-1e-1|g
test:1.1e1|g

These are not:
👎
test:-.2e2|g
test:.2e2|g
test:e2|g
test:2e2.2|g","The unit tests for parsers work differently than the e2e tests from 1599
(unless I am missing something).

They are defined in src/pmdas/statsd/src/parser-basic.c at bottom of the
file (same for parser-ragel.rl). Idea was to build the binary with those
test specific D flags and then check for their output.
…
On Wed, 28 Aug 2019, 01:32 Nathan Scott, ***@***.***> wrote:
 You are right, will do next. While working on this I noticed that with
 statsd Makefile the rules for unit tests for parsers are gone, so will
 probably add that and integrate those as well.

 Oh, not gone - they reside in the PCP QA suite now - see test 1599. You
 can run them (and all statsd tests) via:

 $ cd qa
 $ ./check -g pmda.statsd

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#735?email_source=notifications&email_token=ABN5UV37OZEC4Y43DRAPP23QGW2RTA5CNFSM4IQQUYJKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD5JNO2A#issuecomment-525522792>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ABN5UV55YTQ6VTCV2WFDAV3QGW2RTANCNFSM4IQQUYJA>
 .",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,735,2019-08-27T23:01:33Z,2019-09-04T01:28:47Z,2020-01-19T00:37:52Z,MERGED,True,96,52,6,https://github.com/Erbenos,Added support for scientific notation for metric values in StatsD payloads,2,[],https://github.com/performancecopilot/pcp/pull/735,https://github.com/natoscott,6,https://github.com/performancecopilot/pcp/pull/735#issuecomment-525526263,"...and small fix for underflow detection

Payloads with values such as these are valid:
👍
test:1e1|g
test:+1e+1|g
test:-1e-1|g
test:1.1e1|g

These are not:
👎
test:-.2e2|g
test:.2e2|g
test:e2|g
test:2e2.2|g","The unit tests for parsers work differently than the e2e tests from 1599 (unless I am missing something). They are defined in src/pmdas/statsd/src/parser-basic.c at bottom of the file (same for parser-ragel.rl). Idea was to build the binary with those test specific D flags and then check for their output.

Ah yes, you're right - some makefile tweaks will be needed there then.
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,735,2019-08-27T23:01:33Z,2019-09-04T01:28:47Z,2020-01-19T00:37:52Z,MERGED,True,96,52,6,https://github.com/Erbenos,Added support for scientific notation for metric values in StatsD payloads,2,[],https://github.com/performancecopilot/pcp/pull/735,https://github.com/lzap,7,https://github.com/performancecopilot/pcp/pull/735#issuecomment-527100231,"...and small fix for underflow detection

Payloads with values such as these are valid:
👍
test:1e1|g
test:+1e+1|g
test:-1e-1|g
test:1.1e1|g

These are not:
👎
test:-.2e2|g
test:.2e2|g
test:e2|g
test:2e2.2|g","Out of curiosity, do tests try to launch the agent both with regular and ragel parsers?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,735,2019-08-27T23:01:33Z,2019-09-04T01:28:47Z,2020-01-19T00:37:52Z,MERGED,True,96,52,6,https://github.com/Erbenos,Added support for scientific notation for metric values in StatsD payloads,2,[],https://github.com/performancecopilot/pcp/pull/735,https://github.com/Erbenos,8,https://github.com/performancecopilot/pcp/pull/735#issuecomment-527108995,"...and small fix for underflow detection

Payloads with values such as these are valid:
👍
test:1e1|g
test:+1e+1|g
test:-1e-1|g
test:1.1e1|g

These are not:
👎
test:-.2e2|g
test:.2e2|g
test:e2|g
test:2e2.2|g","The tests in my pmdastatsd repo do (those in my PCP fork too), but those
don't contain scientific notation payload. The tests in main PCP repository
for statsd are non-existant as of now.
Ideally unit tests will be extended as well to include scientific notation
payload. There are no tests written for this as of now.
…
On Mon, 2 Sep 2019, 12:43 Lukáš Zapletal, ***@***.***> wrote:
 Out of curiosity, do tests try to launch the agent both with regular and
 ragel parsers?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#735?email_source=notifications&email_token=ABN5UV6BDN654BMQDTWRCWLQHTU5LA5CNFSM4IQQUYJKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD5VOSRY#issuecomment-527100231>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ABN5UV7REZZJQDCNK7GTNXDQHTU5LANCNFSM4IQQUYJA>
 .",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,735,2019-08-27T23:01:33Z,2019-09-04T01:28:47Z,2020-01-19T00:37:52Z,MERGED,True,96,52,6,https://github.com/Erbenos,Added support for scientific notation for metric values in StatsD payloads,2,[],https://github.com/performancecopilot/pcp/pull/735,https://github.com/lzap,9,https://github.com/performancecopilot/pcp/pull/735#issuecomment-527122178,"...and small fix for underflow detection

Payloads with values such as these are valid:
👍
test:1e1|g
test:+1e+1|g
test:-1e-1|g
test:1.1e1|g

These are not:
👎
test:-.2e2|g
test:.2e2|g
test:e2|g
test:2e2.2|g","It works great on my development setup. I haven't done anything big, about 1k packets delivered and parsed. One nitpick tho, units do not seem to be reported correctly. Since statsd protocol is always in miliseconds, the agent should set the units correctly so PCP tools show it properly:
metric:    statsd.fm_rails_http_request_total_duration
host:      box.home.lan
semantics: instantaneous value
units:     none
samples:   all
full label for instance[0]: /percentile99::action=index::controller=hosts_controller

This only applies to counters and timings. For gauge the unit is really unknown as statsd does not provide much info about the metrics. Do you want me to report a bug/issue?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,735,2019-08-27T23:01:33Z,2019-09-04T01:28:47Z,2020-01-19T00:37:52Z,MERGED,True,96,52,6,https://github.com/Erbenos,Added support for scientific notation for metric values in StatsD payloads,2,[],https://github.com/performancecopilot/pcp/pull/735,https://github.com/Erbenos,10,https://github.com/performancecopilot/pcp/pull/735#issuecomment-527652698,"...and small fix for underflow detection

Payloads with values such as these are valid:
👍
test:1e1|g
test:+1e+1|g
test:-1e-1|g
test:1.1e1|g

These are not:
👎
test:-.2e2|g
test:.2e2|g
test:e2|g
test:2e2.2|g","It works great on my development setup. I haven't done anything big, about 1k packets delivered and parsed. One nitpick tho, units do not seem to be reported correctly. Since statsd protocol is always in miliseconds, the agent should set the units correctly so PCP tools show it properly:
metric:    statsd.fm_rails_http_request_total_duration
host:      box.home.lan
semantics: instantaneous value
units:     none
samples:   all
full label for instance[0]: /percentile99::action=index::controller=hosts_controller

This only applies to counters and timings. For gauge the unit is really unknown as statsd does not provide much info about the metrics. Do you want me to report a bug/issue?

Fixed in 8fcd8b9",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,736,2019-08-28T03:31:37Z,2019-08-29T06:39:13Z,2019-08-29T06:39:13Z,MERGED,True,42,3726,3,https://github.com/goodwinos,libpcp: fix multi-archive replay error handling with corrupted archive(s),1,[],https://github.com/performancecopilot/pcp/pull/736,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/736,"Changing libpcp/interp is fraught with danger - I'd appreciate review for this one!
There may be other or better ways to solve the problem; improving the error
handling seems to be the best option but I'm open to alternative suggestions,
thanks in advance.
RHBZ#1673053
libpcp multi-archive replay fails to propagate PM_ERR_LOGREC errors back
up the stack to the caller, causing pmrep and other tools to continue
forever (unless given a -T finishing time window bound). Without the fix,
the archives in qa/archives/multi-corrupted demonstrate this.
New QA test 1671 exercises this with qa/archives/multi-corrupted.
Without the fix, 1671.full will be rather large (but limited to 10000
samples). The interp algorithm doesn't seem to make progress and just
keeps looping at posn=60624.
Other QA fallout - have tested QA groups logutil, pmlogextract, archive,
multi-archive, libpcp, decompress-xz and pmlogcheck.  There is one new
failure in qa/914 - this is a new test and fails with/without the fix.","Changing libpcp/interp is fraught with danger - I'd appreciate review for this one!
There may be other or better ways to solve the problem; improving the error
handling seems to be the best option but I'm open to alternative suggestions,
thanks in advance.
RHBZ#1673053
libpcp multi-archive replay fails to propagate PM_ERR_LOGREC errors back
up the stack to the caller, causing pmrep and other tools to continue
forever (unless given a -T finishing time window bound). Without the fix,
the archives in qa/archives/multi-corrupted demonstrate this.
New QA test 1671 exercises this with qa/archives/multi-corrupted.
Without the fix, 1671.full will be rather large (but limited to 10000
samples). The interp algorithm doesn't seem to make progress and just
keeps looping at posn=60624.
Other QA fallout - have tested QA groups logutil, pmlogextract, archive,
multi-archive, libpcp, decompress-xz and pmlogcheck.  There is one new
failure in qa/914 - this is a new test and fails with/without the fix.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,736,2019-08-28T03:31:37Z,2019-08-29T06:39:13Z,2019-08-29T06:39:13Z,MERGED,True,42,3726,3,https://github.com/goodwinos,libpcp: fix multi-archive replay error handling with corrupted archive(s),1,[],https://github.com/performancecopilot/pcp/pull/736,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/736#issuecomment-525609623,"Changing libpcp/interp is fraught with danger - I'd appreciate review for this one!
There may be other or better ways to solve the problem; improving the error
handling seems to be the best option but I'm open to alternative suggestions,
thanks in advance.
RHBZ#1673053
libpcp multi-archive replay fails to propagate PM_ERR_LOGREC errors back
up the stack to the caller, causing pmrep and other tools to continue
forever (unless given a -T finishing time window bound). Without the fix,
the archives in qa/archives/multi-corrupted demonstrate this.
New QA test 1671 exercises this with qa/archives/multi-corrupted.
Without the fix, 1671.full will be rather large (but limited to 10000
samples). The interp algorithm doesn't seem to make progress and just
keeps looping at posn=60624.
Other QA fallout - have tested QA groups logutil, pmlogextract, archive,
multi-archive, libpcp, decompress-xz and pmlogcheck.  There is one new
failure in qa/914 - this is a new test and fails with/without the fix.","LGTM, great work @goodwinos",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,737,2019-08-28T23:20:02Z,2019-08-29T06:39:13Z,2020-08-18T21:28:24Z,MERGED,True,118,31,10,https://github.com/kmcdonell,"qa, vm setup, small code changes to remove warnings Changes committed to git@github.com:kmcdonell/pcp.git 20190829",9,[],https://github.com/performancecopilot/pcp/pull/737,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/737,"Ken McDonell (9):
qa/914 & qa/src/profilecrash.c: generalize metric use
qa/common.config: QA Farm subnet changed
qa/914: speed up
src/libpcp/src/getdate.y: for pure parser use a more modern declaration
qa/src/getdomainname.c: fix compilation warning
qa/README.vm: OpenIndiana updates for pkg use
qa/admin/check-vm: improvement for unknown packages
qa/admin/other-packages/manifest: OpenIndiana changes
qa/admin/other-packages/unavailable: updates for assorted platforms
qa/914                              |   35 ++++++++++++++----
qa/914.out                          |    6 +--
qa/README.vm                        |    6 ++-
qa/admin/check-vm                   |    6 ++-
qa/admin/other-packages/manifest    |    4 +-
qa/admin/other-packages/unavailable |    6 ++-
qa/common.config                    |    8 ++--
qa/src/getdomainname.c              |    2 +
qa/src/profilecrash.c               |   70 +++++++++++++++++++++++++++++-------
src/libpcp/src/getdate.y            |    8 ++++
10 files changed, 119 insertions(+), 32 deletions(-)
Details ...
commit fc6151b
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 09:00:19 2019 +1000
qa/admin/other-packages/unavailable: updates for assorted platforms

commit 908eec0
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 09:00:05 2019 +1000
qa/admin/other-packages/manifest: OpenIndiana changes

commit c399cd8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:58:00 2019 +1000
qa/admin/check-vm: improvement for unknown packages

For platforms where the package (or N/A status) is unknown we
tend to use
        ... [? ...]
in the manifest.

This change allows check-vm -p to report ?:<line number> instead
of ? so these can more easily be found and fixed in the manifest.

commit e0d32d4
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:57:36 2019 +1000
qa/README.vm: OpenIndiana updates for pkg use

commit 82a63ca
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:55:50 2019 +1000
qa/src/getdomainname.c: fix compilation warning

(when getdomainname() not available, like on OpenIndiana)

commit 2ecf859
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:54:48 2019 +1000
src/libpcp/src/getdate.y: for pure parser use a more modern declaration

Compilation warning from bison spotted on OpenIndiana.

commit 9b8b168
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:52:47 2019 +1000
qa/914: speed up

The .xz archive is big ... on small memory VMs we do a lot of slow
decompressing, so decompress once and use the temporary decompressed
archive with src/profilecrash.

commit d79ea24
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:33:01 2019 +1000
qa/common.config: QA Farm subnet changed

Don't even start me on the pox that is the NBN in Australia.

commit f4ddd53
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:31:10 2019 +1000
qa/914 & qa/src/profilecrash.c: generalize metric use

Use sampledso.hordes.one instead of (the rarely available) NFS
server stats.","Ken McDonell (9):
qa/914 & qa/src/profilecrash.c: generalize metric use
qa/common.config: QA Farm subnet changed
qa/914: speed up
src/libpcp/src/getdate.y: for pure parser use a more modern declaration
qa/src/getdomainname.c: fix compilation warning
qa/README.vm: OpenIndiana updates for pkg use
qa/admin/check-vm: improvement for unknown packages
qa/admin/other-packages/manifest: OpenIndiana changes
qa/admin/other-packages/unavailable: updates for assorted platforms
qa/914                              |   35 ++++++++++++++----
qa/914.out                          |    6 +--
qa/README.vm                        |    6 ++-
qa/admin/check-vm                   |    6 ++-
qa/admin/other-packages/manifest    |    4 +-
qa/admin/other-packages/unavailable |    6 ++-
qa/common.config                    |    8 ++--
qa/src/getdomainname.c              |    2 +
qa/src/profilecrash.c               |   70 +++++++++++++++++++++++++++++-------
src/libpcp/src/getdate.y            |    8 ++++
10 files changed, 119 insertions(+), 32 deletions(-)
Details ...
commit fc6151b
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 09:00:19 2019 +1000
qa/admin/other-packages/unavailable: updates for assorted platforms

commit 908eec0
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 09:00:05 2019 +1000
qa/admin/other-packages/manifest: OpenIndiana changes

commit c399cd8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:58:00 2019 +1000
qa/admin/check-vm: improvement for unknown packages

For platforms where the package (or N/A status) is unknown we
tend to use
        ... [? ...]
in the manifest.

This change allows check-vm -p to report ?:<line number> instead
of ? so these can more easily be found and fixed in the manifest.

commit e0d32d4
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:57:36 2019 +1000
qa/README.vm: OpenIndiana updates for pkg use

commit 82a63ca
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:55:50 2019 +1000
qa/src/getdomainname.c: fix compilation warning

(when getdomainname() not available, like on OpenIndiana)

commit 2ecf859
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:54:48 2019 +1000
src/libpcp/src/getdate.y: for pure parser use a more modern declaration

Compilation warning from bison spotted on OpenIndiana.

commit 9b8b168
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:52:47 2019 +1000
qa/914: speed up

The .xz archive is big ... on small memory VMs we do a lot of slow
decompressing, so decompress once and use the temporary decompressed
archive with src/profilecrash.

commit d79ea24
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:33:01 2019 +1000
qa/common.config: QA Farm subnet changed

Don't even start me on the pox that is the NBN in Australia.

commit f4ddd53
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 29 08:31:10 2019 +1000
qa/914 & qa/src/profilecrash.c: generalize metric use

Use sampledso.hordes.one instead of (the rarely available) NFS
server stats.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,738,2019-09-02T07:31:48Z,2019-09-02T23:49:24Z,2020-08-18T21:28:29Z,MERGED,True,1413,127,3,https://github.com/kmcdonell,small qa changes Changes committed to git@github.com:kmcdonell/pcp.git 20190902,3,[],https://github.com/performancecopilot/pcp/pull/738,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/738,"Ken McDonell (3):
qa/412: refactor arithmetic
qa/798: 32-bit version of .out apparently not updated
qa/new-seqs: small cosmetic change to output order
qa/412        |   93 ++-
qa/798.out.32 | 1442 ++++++++++++++++++++++++++++++++++++++++++++++++++++++----
qa/new-seqs   |    5
3 files changed, 1413 insertions(+), 127 deletions(-)
Details ...
commit c99bd70
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 2 17:28:30 2019 +1000
qa/new-seqs: small cosmetic change to output order

commit 5456d5b
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 2 17:24:25 2019 +1000
qa/798: 32-bit version of .out apparently not updated

64-bit version was updated in commit c81f8ee0.

Hope this is OK ...

commit 06beed5
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 2 16:26:37 2019 +1000
qa/412: refactor arithmetic

On some platforms (*BSD in particular), awk's arithmetic is pretty lame
and does not deal at all well with values larger than a signed 32-bit
integer.

Pull the arithmetic out of awk and give it to bc(1) who can be
trusted to do the job.

Also some problems with the archive start time extraction which was
making the test unstable on slower VMs.","Ken McDonell (3):
qa/412: refactor arithmetic
qa/798: 32-bit version of .out apparently not updated
qa/new-seqs: small cosmetic change to output order
qa/412        |   93 ++-
qa/798.out.32 | 1442 ++++++++++++++++++++++++++++++++++++++++++++++++++++++----
qa/new-seqs   |    5
3 files changed, 1413 insertions(+), 127 deletions(-)
Details ...
commit c99bd70
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 2 17:28:30 2019 +1000
qa/new-seqs: small cosmetic change to output order

commit 5456d5b
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 2 17:24:25 2019 +1000
qa/798: 32-bit version of .out apparently not updated

64-bit version was updated in commit c81f8ee0.

Hope this is OK ...

commit 06beed5
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 2 16:26:37 2019 +1000
qa/412: refactor arithmetic

On some platforms (*BSD in particular), awk's arithmetic is pretty lame
and does not deal at all well with values larger than a signed 32-bit
integer.

Pull the arithmetic out of awk and give it to bc(1) who can be
trusted to do the job.

Also some problems with the archive start time extraction which was
making the test unstable on slower VMs.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,739,2019-09-02T08:40:23Z,2019-09-04T01:28:48Z,2019-09-04T01:28:48Z,MERGED,True,26,91,2,https://github.com/lherbolt,pmdalmsensors: initial rework to use json output instead of parsing r…,2,[],https://github.com/performancecopilot/pcp/pull/739,https://github.com/lherbolt,1,https://github.com/performancecopilot/pcp/pull/739,"Hi,
sensors have options to print out the output in json. Which is much easier
to format and get proper output. Here is initial working update to use json output.
Thanks for review.","Hi,
sensors have options to print out the output in json. Which is much easier
to format and get proper output. Here is initial working update to use json output.
Thanks for review.",True,{'THUMBS_UP': ['https://github.com/christianhorn']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,739,2019-09-02T08:40:23Z,2019-09-04T01:28:48Z,2019-09-04T01:28:48Z,MERGED,True,26,91,2,https://github.com/lherbolt,pmdalmsensors: initial rework to use json output instead of parsing r…,2,[],https://github.com/performancecopilot/pcp/pull/739,https://github.com/christianhorn,2,https://github.com/performancecopilot/pcp/pull/739#issuecomment-527085633,"Hi,
sensors have options to print out the output in json. Which is much easier
to format and get proper output. Here is initial working update to use json output.
Thanks for review.","Great, much better than parsing the output.
-                if int(sensorvalues[sensornames[item]]) < 0:
+                if int(sensorvalues[sensornames[item]]) <= 0:

Why sort out also 0? Isn't it a valid value to be returned? I thought that just negative values make no sense, so should be ""None"".",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,739,2019-09-02T08:40:23Z,2019-09-04T01:28:48Z,2019-09-04T01:28:48Z,MERGED,True,26,91,2,https://github.com/lherbolt,pmdalmsensors: initial rework to use json output instead of parsing r…,2,[],https://github.com/performancecopilot/pcp/pull/739,https://github.com/lherbolt,3,https://github.com/performancecopilot/pcp/pull/739#issuecomment-527116880,"Hi,
sensors have options to print out the output in json. Which is much easier
to format and get proper output. Here is initial working update to use json output.
Thanks for review.","Great, much better than parsing the output.
-                if int(sensorvalues[sensornames[item]]) < 0:
+                if int(sensorvalues[sensornames[item]]) <= 0:

Why sort out also 0? Isn't it a valid value to be returned? I thought that just negative values make no sense, so should be ""None"".

Originally I did it b/c some of my fan are not present and sensors reports 0 rpm. Now, thinking about it
it is probably better to sort out just the negative values.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,739,2019-09-02T08:40:23Z,2019-09-04T01:28:48Z,2019-09-04T01:28:48Z,MERGED,True,26,91,2,https://github.com/lherbolt,pmdalmsensors: initial rework to use json output instead of parsing r…,2,[],https://github.com/performancecopilot/pcp/pull/739,https://github.com/christianhorn,4,https://github.com/performancecopilot/pcp/pull/739#issuecomment-527268158,"Hi,
sensors have options to print out the output in json. Which is much easier
to format and get proper output. Here is initial working update to use json output.
Thanks for review.","[..] Now, thinking about it
it is probably better to sort out just the negative values.

Thanks, I think so too. For example, the thinkpads fan here is just spinning up from time to time, having 0 reported as UKN would be bad.
When working on this implementation, I wondered weather invalidating of values should be done in pmda-lmsensors or in lmsensors, which is already doing preprocessing like doing value corrections for some sensors. I did not see this configurable in lmsensors as of today, so doing it in the pmda was the pragmatic solution. We could consider a more flexible implementation with i.e. a small configfile in pcp/pmdas/lmsensors, where a user can choose which sensor values should be considered UKN. I did not really have a need so far.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,739,2019-09-02T08:40:23Z,2019-09-04T01:28:48Z,2019-09-04T01:28:48Z,MERGED,True,26,91,2,https://github.com/lherbolt,pmdalmsensors: initial rework to use json output instead of parsing r…,2,[],https://github.com/performancecopilot/pcp/pull/739,https://github.com/christianhorn,5,https://github.com/performancecopilot/pcp/pull/739#issuecomment-527316396,"Hi,
sensors have options to print out the output in json. Which is much easier
to format and get proper output. Here is initial working update to use json output.
Thanks for review.","When we keep the ""if int(sensorvalues[sensornames[item]]) < 0:"", then it looks good to me. I do not see a hint on a new pull request, so writing it explicitly.
Keeping qa/1480 unchanged does not hurt us for now. If lmsensors has bugs where '-u' and '-j' contents differ, then qa/1480 might eventually start to fail, but as of today it looks good.
I remember that when I worked on the current pmda-lmsensors, lmsensors did still not provide the nicely machine parsable '-j'.
We might need to consider the versions: '-j' came into lm_sensors in April 2017.
For example, RHEL7.* all ship lm_sensors-3.4.0 versions without '-j'. RHEL8.0 and onwards know '-j', and these are also lm_sensors-3.4.0 versions. We should take this as a hint that pmda-lmsensors might get used on systems with older lmsensors.. to the least we should state something in readme/manpage?
Unfortunately, just looking at the lm_sensors version is as seen above not enough to know if lmsensors supports '-j'.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,739,2019-09-02T08:40:23Z,2019-09-04T01:28:48Z,2019-09-04T01:28:48Z,MERGED,True,26,91,2,https://github.com/lherbolt,pmdalmsensors: initial rework to use json output instead of parsing r…,2,[],https://github.com/performancecopilot/pcp/pull/739,https://github.com/lherbolt,6,https://github.com/performancecopilot/pcp/pull/739#issuecomment-527348673,"Hi,
sensors have options to print out the output in json. Which is much easier
to format and get proper output. Here is initial working update to use json output.
Thanks for review.","If lmsensors has bugs where '-u' and '-j' contents differ, then qa/1480 might eventually start to fail, but as of today it looks good.

This is quite unlikely as the -j output is just pretty printed -u. Atleast it looks to me like it when I was
checking the lmsensors source code. I will fix the typo and change back to report zero values as zeros.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,740,2019-09-03T23:07:26Z,2019-09-04T01:28:48Z,2020-08-18T21:28:35Z,MERGED,True,242,101,11,https://github.com/kmcdonell,qa + trace PMDA for *BSD Changes committed to git@github.com:kmcdonell/pcp.git 20190903,5,[],https://github.com/performancecopilot/pcp/pull/740,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/740,"Ken McDonell (5):
qa/1671: separate stderr and stdio from pmrep
src/pmdas/trace: makefile fixes for netbsd
qa/953: map errno 61 (Connection refused) -> NETERROR (for *BSD systems)
qa/915: really only makes sense to run this if systemctl is present
qa/1100: split into 1100 (bash) and 967 (new, zsh)
qa/1100                        |   86 -------------------
qa/1100.out                    |    3
qa/1671                        |    3
qa/1671.out                    |   12 +-
qa/915                         |    8 +
qa/953                         |    3
qa/967                         |  182 +++++++++++++++++++++++++++++++++++++++++
qa/967.out                     |    5 +
qa/group                       |    3
src/pmdas/trace/GNUmakefile    |   26 +++++
src/pmdas/trace/Makefile.proto |   12 +-
11 files changed, 242 insertions(+), 101 deletions(-)
Details ...
commit 27aeb9b
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 4 09:00:39 2019 +1000
qa/1100: split into 1100 (bash) and 967 (new, zsh)

For systems where there is bash but no zsh (like *BSD) this will
allow 1100 to pass and not run 967, rather than the old 1100 always
failing.

commit 5d32893
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 4 08:59:52 2019 +1000
qa/915: really only makes sense to run this if systemctl is present

commit 6a319d8
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 3 09:48:58 2019 +1000
qa/953: map errno 61 (Connection refused) -> NETERROR (for *BSD systems)

commit 0b842ca
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 3 08:22:25 2019 +1000
src/pmdas/trace: makefile fixes for netbsd

If we install PCP headers and libraries in places where cc(1) and
ld(1) don't look by default, we need -I and -L options in the
Makefile to rebuild the demo apps.

commit db9759a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 3 07:08:27 2019 +1000
qa/1671: separate stderr and stdio from pmrep

Stops buffer flushing that is not consistent across all platforms.","Ken McDonell (5):
qa/1671: separate stderr and stdio from pmrep
src/pmdas/trace: makefile fixes for netbsd
qa/953: map errno 61 (Connection refused) -> NETERROR (for *BSD systems)
qa/915: really only makes sense to run this if systemctl is present
qa/1100: split into 1100 (bash) and 967 (new, zsh)
qa/1100                        |   86 -------------------
qa/1100.out                    |    3
qa/1671                        |    3
qa/1671.out                    |   12 +-
qa/915                         |    8 +
qa/953                         |    3
qa/967                         |  182 +++++++++++++++++++++++++++++++++++++++++
qa/967.out                     |    5 +
qa/group                       |    3
src/pmdas/trace/GNUmakefile    |   26 +++++
src/pmdas/trace/Makefile.proto |   12 +-
11 files changed, 242 insertions(+), 101 deletions(-)
Details ...
commit 27aeb9b
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 4 09:00:39 2019 +1000
qa/1100: split into 1100 (bash) and 967 (new, zsh)

For systems where there is bash but no zsh (like *BSD) this will
allow 1100 to pass and not run 967, rather than the old 1100 always
failing.

commit 5d32893
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 4 08:59:52 2019 +1000
qa/915: really only makes sense to run this if systemctl is present

commit 6a319d8
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 3 09:48:58 2019 +1000
qa/953: map errno 61 (Connection refused) -> NETERROR (for *BSD systems)

commit 0b842ca
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 3 08:22:25 2019 +1000
src/pmdas/trace: makefile fixes for netbsd

If we install PCP headers and libraries in places where cc(1) and
ld(1) don't look by default, we need -I and -L options in the
Makefile to rebuild the demo apps.

commit db9759a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 3 07:08:27 2019 +1000
qa/1671: separate stderr and stdio from pmrep

Stops buffer flushing that is not consistent across all platforms.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,741,2019-09-05T16:21:39Z,2019-09-13T14:55:52Z,2019-09-13T14:56:02Z,MERGED,True,160,33,6,https://github.com/andreasgerstmayr,pmdabpftrace: don't use cached instances,2,[],https://github.com/performancecopilot/pcp/pull/741,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/741,"if a dict is used for indom.set_instances, the instance names get cached
using the pmdaCacheOp functionality. However, for bpftrace maps, the keys
should not be cached. For example, at some point the metric
bpftrace.scripts.script100.data.bytes can contain a histogram, and at another
time the same metric can contain an indom with process names as the instance
names.
TODO: somehow the first instance doesn't show up in pminfo, but the log file shows that all instances are passed to the set_instances and replace_indom functions?","if a dict is used for indom.set_instances, the instance names get cached
using the pmdaCacheOp functionality. However, for bpftrace maps, the keys
should not be cached. For example, at some point the metric
bpftrace.scripts.script100.data.bytes can contain a histogram, and at another
time the same metric can contain an indom with process names as the instance
names.
TODO: somehow the first instance doesn't show up in pminfo, but the log file shows that all instances are passed to the set_instances and replace_indom functions?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,741,2019-09-05T16:21:39Z,2019-09-13T14:55:52Z,2019-09-13T14:56:02Z,MERGED,True,160,33,6,https://github.com/andreasgerstmayr,pmdabpftrace: don't use cached instances,2,[],https://github.com/performancecopilot/pcp/pull/741,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/741#issuecomment-531270038,"if a dict is used for indom.set_instances, the instance names get cached
using the pmdaCacheOp functionality. However, for bpftrace maps, the keys
should not be cached. For example, at some point the metric
bpftrace.scripts.script100.data.bytes can contain a histogram, and at another
time the same metric can contain an indom with process names as the instance
names.
TODO: somehow the first instance doesn't show up in pminfo, but the log file shows that all instances are passed to the set_instances and replace_indom functions?",eaa5122 fixes the instance problems mentioned in the TODO -> ready to merge,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,742,2019-09-06T04:03:41Z,2019-09-10T11:49:54Z,2019-09-10T11:49:54Z,MERGED,True,26,4,4,https://github.com/goodwinos,"libpcp,libpcp_pmda: fortify pmdaCache against NULL instance names",1,[],https://github.com/performancecopilot/pcp/pull/742,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/742,"A while back Marko reported pminfo segfaults involving bcc metrics
when used to instrument Java12. This turned out to be NULL instance
names being stored in the pmdaCache file (which is actually a bug
in pmdabcc).
In defense of that scenario, fortify libpcp_pmda and libpcp
against NULL instance names being read in from the indom cache;
rather than segfault, return an appropriate error.
Also update qa/1152 to test and verify the fix. The pmdabcc bug
will be fixed separately now that it's easier to debug.","A while back Marko reported pminfo segfaults involving bcc metrics
when used to instrument Java12. This turned out to be NULL instance
names being stored in the pmdaCache file (which is actually a bug
in pmdabcc).
In defense of that scenario, fortify libpcp_pmda and libpcp
against NULL instance names being read in from the indom cache;
rather than segfault, return an appropriate error.
Also update qa/1152 to test and verify the fix. The pmdabcc bug
will be fixed separately now that it's easier to debug.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,743,2019-09-06T04:26:49Z,2019-09-10T11:49:54Z,2020-08-18T21:28:40Z,MERGED,True,64,7,7,https://github.com/kmcdonell,assorted qa Changes committed to git@github.com:kmcdonell/pcp.git 20190904,11,[],https://github.com/performancecopilot/pcp/pull/743,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/743,"Ken McDonell (9):
qa/967.out: oops, cut-n-paste error in header line from qa/1100
qa/common.check: add check for defunct process in _wait_pmlogger_end()
qa/660: remove more prattle
qa/870: report current datestamp with --check and errors
qa/555: accommodate RHEL 7.x (CentOS 7.x) oddities
qa/555: similar changes to the last ones
qa/555: more junk filtering
qa/1141: notrun if pcpupstream module not loaded
qa/590: notrun for openbsd
qa/1141         |   13 ++++++++++---
qa/555          |   34 +++++++++++++++++++++++-----------
qa/590          |   15 +++++++++++++++
qa/660          |    2 ++
qa/870          |    6 +++++-
qa/967.out      |    2 +-
qa/common.check |   19 ++++++++++++++++++-
7 files changed, 74 insertions(+), 17 deletions(-)
Details ...
commit 75c2bf6
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 6 14:24:35 2019 +1000
qa/590: notrun for openbsd

From the comment added in this commit ...
    This is a bad combination ... we're not sure if it is libc
    on openbsd where fopen() is not thread safe leading to:
    pmNewContext(archives/ok-foo) -> No such file or directory
    or our implementation of ""thread private data"" that is busted
    with clang, but as this test passes everywhere else, we've opted
    to ""notrun"" it here.

commit 561c1b3
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 6 08:53:38 2019 +1000
qa/1141: notrun if pcpupstream module not loaded

If we're on a system with selinux tools installed, but the pcpupstream
module is not loaded, then we run the risk of this test failing because
some other selinux dependency is not satisfied.  For example on SUSE
SLES12 (vm30), I'm seeing this:

Failed to resolve typeattributeset statement at /var/lib/selinux/minimum/tmp/modules/400/pcpupstream/cil:1
semodule:  Failed!

So if we can't load the official pcpupstream module, then there is no
hope for qa/1141, so notrun it.

commit 14dd939
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 5 15:43:38 2019 +1000
qa/555: more junk filtering

syslog(3) on RHEL 7.x (CentOS 7.x) is putting junk into syslog in our
error test cases (which are rejected on other platforms), so make
the qa test filter even more draconian ... only look for the stuff
we expect to be there and ignore everything else.

commit f1a0cd0
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 5 12:43:11 2019 +1000
qa/555: similar changes to the last ones

This time for RHEL 7.6 (vm29).

commit f48801b
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 5 11:46:23 2019 +1000
qa/555: accommodate RHEL 7.x (CentOS 7.x) oddities

1. changed syslog(3) semantics, so once case produces different
   output
2. trashing of syslog (may be a different version of 1.)
3. chatter in syslog

Deal with all of this in the filtering.

commit c415e88
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 5 09:20:46 2019 +1000
qa/870: report current datestamp with --check and errors

Helps diagnose if files reported are old or new.

commit b979a2d
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 5 09:19:28 2019 +1000
qa/660: remove more prattle

warnings from deep inside the libraries pmweb uses.

commit 4de2ef1
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 5 09:00:02 2019 +1000
qa/common.check: add check for defunct process in _wait_pmlogger_end()

pmlogger really has exited if it is defunct.

Seen in qa/1146 on some slow single CPU VMs.

commit 1a9d05c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 4 16:50:31 2019 +1000
qa/967.out: oops, cut-n-paste error in header line from qa/1100","Ken McDonell (9):
qa/967.out: oops, cut-n-paste error in header line from qa/1100
qa/common.check: add check for defunct process in _wait_pmlogger_end()
qa/660: remove more prattle
qa/870: report current datestamp with --check and errors
qa/555: accommodate RHEL 7.x (CentOS 7.x) oddities
qa/555: similar changes to the last ones
qa/555: more junk filtering
qa/1141: notrun if pcpupstream module not loaded
qa/590: notrun for openbsd
qa/1141         |   13 ++++++++++---
qa/555          |   34 +++++++++++++++++++++++-----------
qa/590          |   15 +++++++++++++++
qa/660          |    2 ++
qa/870          |    6 +++++-
qa/967.out      |    2 +-
qa/common.check |   19 ++++++++++++++++++-
7 files changed, 74 insertions(+), 17 deletions(-)
Details ...
commit 75c2bf6
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 6 14:24:35 2019 +1000
qa/590: notrun for openbsd

From the comment added in this commit ...
    This is a bad combination ... we're not sure if it is libc
    on openbsd where fopen() is not thread safe leading to:
    pmNewContext(archives/ok-foo) -> No such file or directory
    or our implementation of ""thread private data"" that is busted
    with clang, but as this test passes everywhere else, we've opted
    to ""notrun"" it here.

commit 561c1b3
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 6 08:53:38 2019 +1000
qa/1141: notrun if pcpupstream module not loaded

If we're on a system with selinux tools installed, but the pcpupstream
module is not loaded, then we run the risk of this test failing because
some other selinux dependency is not satisfied.  For example on SUSE
SLES12 (vm30), I'm seeing this:

Failed to resolve typeattributeset statement at /var/lib/selinux/minimum/tmp/modules/400/pcpupstream/cil:1
semodule:  Failed!

So if we can't load the official pcpupstream module, then there is no
hope for qa/1141, so notrun it.

commit 14dd939
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 5 15:43:38 2019 +1000
qa/555: more junk filtering

syslog(3) on RHEL 7.x (CentOS 7.x) is putting junk into syslog in our
error test cases (which are rejected on other platforms), so make
the qa test filter even more draconian ... only look for the stuff
we expect to be there and ignore everything else.

commit f1a0cd0
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 5 12:43:11 2019 +1000
qa/555: similar changes to the last ones

This time for RHEL 7.6 (vm29).

commit f48801b
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 5 11:46:23 2019 +1000
qa/555: accommodate RHEL 7.x (CentOS 7.x) oddities

1. changed syslog(3) semantics, so once case produces different
   output
2. trashing of syslog (may be a different version of 1.)
3. chatter in syslog

Deal with all of this in the filtering.

commit c415e88
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 5 09:20:46 2019 +1000
qa/870: report current datestamp with --check and errors

Helps diagnose if files reported are old or new.

commit b979a2d
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 5 09:19:28 2019 +1000
qa/660: remove more prattle

warnings from deep inside the libraries pmweb uses.

commit 4de2ef1
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 5 09:00:02 2019 +1000
qa/common.check: add check for defunct process in _wait_pmlogger_end()

pmlogger really has exited if it is defunct.

Seen in qa/1146 on some slow single CPU VMs.

commit 1a9d05c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 4 16:50:31 2019 +1000
qa/967.out: oops, cut-n-paste error in header line from qa/1100",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,744,2019-09-06T05:30:07Z,2019-09-10T11:49:55Z,2019-09-10T11:49:55Z,MERGED,True,8,8,1,https://github.com/goodwinos,fix minor pylint issues with pmdalmsensors,2,[],https://github.com/performancecopilot/pcp/pull/744,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/744,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,745,2019-09-09T01:09:10Z,2019-09-10T11:49:55Z,2020-08-18T21:28:45Z,MERGED,True,77,14,11,https://github.com/kmcdonell,lmsensors PMDA and qa Changes committed to git@github.com:kmcdonell/pcp.git 20190906,16,[],https://github.com/performancecopilot/pcp/pull/745,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/745,"Ken McDonell (4):
qa/188: pick the correct .out variant for SuSE SLES 12
qa/953: do -61 -> NETERROR mapping correctly this time
qa/1547: check and warn if pmcd.control.debug is not 0
src/pmdas/lmsensors/pmdalmsensors.python: fix debug option handling
qa/1547                                  |    3 +++
qa/188                                   |    3 +++
qa/953                                   |    2 +-
src/pmdas/lmsensors/pmdalmsensors.python |   12 ++++++------
4 files changed, 13 insertions(+), 7 deletions(-)
Details ...
commit cca6c77
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Sep 7 12:35:11 2019 +1000
src/pmdas/lmsensors/pmdalmsensors.python: fix debug option handling

This was broken in a couple ways.

1. args.debug is some sort of internal/reserved variable for some
   implementations (first seen on Ubuntu 19.04 with Python 3.7.3)
   leading to ...
       if args.debug >= 0:
   TypeError: '>=' not supported between instances of 'NoneType' and 'int'
   Fix for this appears to be to use dest=<someothername> in the
   parser.add_argument() call ... I chose <someothername> to be
   ""debug_value"".

2. The logic for handling the default (no -d), -d0 and -d1 (or -d2)
   cases needed to be reworked.  We cannot use default=0 because the
   default and -d0 cases are different in the code, and -d0 breaks
   the PMDA installation because the pmns and domain.h files are wrong.
   So we need to guard tests for values for args.debug_value with a
   conjuncted test if args.debug_value is defined, so instead of
        if args.debug_value == 1
   use
        if args.debug_value and args.debug_value == 1

Oh, and this has nothing to improve the low esteem in which I regard
Python as a development enviroment ... it simply sucks.

commit f920f2f
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 6 21:04:13 2019 +1000
qa/1547: check and warn if pmcd.control.debug is not 0

Causes knock-on failures in this test.

commit 8a429e9
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 6 21:03:00 2019 +1000
qa/953: do -61 -> NETERROR mapping correctly this time

commit 19eeafa
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 6 14:40:18 2019 +1000
qa/188: pick the correct .out variant for SuSE SLES 12","Ken McDonell (4):
qa/188: pick the correct .out variant for SuSE SLES 12
qa/953: do -61 -> NETERROR mapping correctly this time
qa/1547: check and warn if pmcd.control.debug is not 0
src/pmdas/lmsensors/pmdalmsensors.python: fix debug option handling
qa/1547                                  |    3 +++
qa/188                                   |    3 +++
qa/953                                   |    2 +-
src/pmdas/lmsensors/pmdalmsensors.python |   12 ++++++------
4 files changed, 13 insertions(+), 7 deletions(-)
Details ...
commit cca6c77
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Sep 7 12:35:11 2019 +1000
src/pmdas/lmsensors/pmdalmsensors.python: fix debug option handling

This was broken in a couple ways.

1. args.debug is some sort of internal/reserved variable for some
   implementations (first seen on Ubuntu 19.04 with Python 3.7.3)
   leading to ...
       if args.debug >= 0:
   TypeError: '>=' not supported between instances of 'NoneType' and 'int'
   Fix for this appears to be to use dest=<someothername> in the
   parser.add_argument() call ... I chose <someothername> to be
   ""debug_value"".

2. The logic for handling the default (no -d), -d0 and -d1 (or -d2)
   cases needed to be reworked.  We cannot use default=0 because the
   default and -d0 cases are different in the code, and -d0 breaks
   the PMDA installation because the pmns and domain.h files are wrong.
   So we need to guard tests for values for args.debug_value with a
   conjuncted test if args.debug_value is defined, so instead of
        if args.debug_value == 1
   use
        if args.debug_value and args.debug_value == 1

Oh, and this has nothing to improve the low esteem in which I regard
Python as a development enviroment ... it simply sucks.

commit f920f2f
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 6 21:04:13 2019 +1000
qa/1547: check and warn if pmcd.control.debug is not 0

Causes knock-on failures in this test.

commit 8a429e9
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 6 21:03:00 2019 +1000
qa/953: do -61 -> NETERROR mapping correctly this time

commit 19eeafa
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 6 14:40:18 2019 +1000
qa/188: pick the correct .out variant for SuSE SLES 12",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,746,2019-09-17T21:01:26Z,2019-09-18T01:45:24Z,2020-08-18T21:28:50Z,MERGED,True,54,25,10,https://github.com/kmcdonell,qa and small coverity-driven fixes Changes committed to git@github.com:kmcdonell/pcp.git 20190910,11,[],https://github.com/performancecopilot/pcp/pull/746,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/746,"Ken McDonell (11):
qa/1146: add $seq arg for ./870 --check call
qa/870: relax checks for pmlogger control files
qa/660: tweak filter
misc: pander to gcc warning insanity
external/dict.c: fix coverity CID 287860 Division or modulo by float zero
src/pcp/atop/atopsar.c: fix coverity CID 288176 Division or modulo by float zero
src/pmdas/weblog/check_match.c: fix coverity CID 341701 Division or modulo by float zero
src/libpcp_gui/src/timestate.c: fix coverity CID 288030 Pointer to local outside scope
src/libpcp_qmc/src/qmc_metric.cpp: coverity fix CID 288108 Resource leak
Revert ""qa/660: tweak filter""
src/libpcp/src/events.c: fix a couple of Coverity reported issues
qa/1146                           |    2 +-
qa/660                            |    6 +++---
qa/870                            |   16 +++++++---------
src/external/dict.c               |    3 ++-
src/libpcp/src/events.c           |    8 ++++++--
src/libpcp_gui/src/timestate.c    |    2 +-
src/libpcp_mmv/src/mmv_stats.c    |   11 +++++++++--
src/libpcp_qmc/src/qmc_metric.cpp |    7 ++++++-
src/pcp/atop/atopsar.c            |    3 +++
src/pcp/atop/showgeneric.c        |   10 +++++++++-
src/pmdas/weblog/check_match.c    |   17 ++++++++++-------
11 files changed, 57 insertions(+), 28 deletions(-)
Details ...
commit 8e98f66
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 18 06:59:38 2019 +1000
src/libpcp/src/events.c: fix a couple of Coverity reported issues

I've lost the CIDs unfortunately.

commit 39ff752
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 18 06:56:34 2019 +1000
Revert ""qa/660: tweak filter""

This reverts commit ea75b67e4153d9e0f7b07ca1488cbf0fd1159e7a.

Previous commit fixed this more consistently ... somehow I committed
two variants of the same change.

commit bea5400
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 12 10:35:34 2019 +1000
src/libpcp_qmc/src/qmc_metric.cpp: coverity fix CID 288108 Resource leak

commit 9c44cf0
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 12 10:29:51 2019 +1000
src/libpcp_gui/src/timestate.c: fix coverity CID 288030 Pointer to local outside scope

commit bea7421
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 12 09:06:38 2019 +1000
src/pmdas/weblog/check_match.c: fix coverity CID 341701 Division or modulo by float zero

commit 75e85cf
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 12 07:11:07 2019 +1000
src/pcp/atop/atopsar.c: fix coverity CID 288176 Division or modulo by float zero

commit 0e75aba
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 12 07:05:57 2019 +1000
external/dict.c: fix coverity CID 287860 Division or modulo by float zero

commit 23d63c3
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 10 19:42:36 2019 +1000
misc: pander to gcc warning insanity

We want to use strtol() and strtod() to parse a string for errors.
With the flags we use for gcc this is not possible without gcc
emitting warnings.

To see how to fix this, check the commit, but be warned you'll
want to vomit.  If anyone has a less ugly hack, to achieve the
same result, please let me know.

commit ea75b67
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 10 19:39:27 2019 +1000
qa/660: tweak filter

More babble from the libs pmwebd uses.

commit 8d868a5
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 10 15:41:15 2019 +1000
qa/870: relax checks for pmlogger control files

In the normal thrust and parry of QA, it is inevitable that some
pmlogger instances will be smacked out of existance in ways that may
prevent orderly cleanup.

If we find turdlets in $PCP_TMP_DIR/pmlogger or $PCP_RUN_DIR that
belong to a pmlogger process that is no longer running, we now treat
these as Warnings that are sent to $seq.full, rather than Errors that
are emitted on stdout.

commit df2daf0
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 10 15:39:40 2019 +1000
qa/1146: add $seq arg for ./870 --check call

So errors (from 870 --check) get logged to 1146.full, not 870.full","Ken McDonell (11):
qa/1146: add $seq arg for ./870 --check call
qa/870: relax checks for pmlogger control files
qa/660: tweak filter
misc: pander to gcc warning insanity
external/dict.c: fix coverity CID 287860 Division or modulo by float zero
src/pcp/atop/atopsar.c: fix coverity CID 288176 Division or modulo by float zero
src/pmdas/weblog/check_match.c: fix coverity CID 341701 Division or modulo by float zero
src/libpcp_gui/src/timestate.c: fix coverity CID 288030 Pointer to local outside scope
src/libpcp_qmc/src/qmc_metric.cpp: coverity fix CID 288108 Resource leak
Revert ""qa/660: tweak filter""
src/libpcp/src/events.c: fix a couple of Coverity reported issues
qa/1146                           |    2 +-
qa/660                            |    6 +++---
qa/870                            |   16 +++++++---------
src/external/dict.c               |    3 ++-
src/libpcp/src/events.c           |    8 ++++++--
src/libpcp_gui/src/timestate.c    |    2 +-
src/libpcp_mmv/src/mmv_stats.c    |   11 +++++++++--
src/libpcp_qmc/src/qmc_metric.cpp |    7 ++++++-
src/pcp/atop/atopsar.c            |    3 +++
src/pcp/atop/showgeneric.c        |   10 +++++++++-
src/pmdas/weblog/check_match.c    |   17 ++++++++++-------
11 files changed, 57 insertions(+), 28 deletions(-)
Details ...
commit 8e98f66
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 18 06:59:38 2019 +1000
src/libpcp/src/events.c: fix a couple of Coverity reported issues

I've lost the CIDs unfortunately.

commit 39ff752
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 18 06:56:34 2019 +1000
Revert ""qa/660: tweak filter""

This reverts commit ea75b67e4153d9e0f7b07ca1488cbf0fd1159e7a.

Previous commit fixed this more consistently ... somehow I committed
two variants of the same change.

commit bea5400
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 12 10:35:34 2019 +1000
src/libpcp_qmc/src/qmc_metric.cpp: coverity fix CID 288108 Resource leak

commit 9c44cf0
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 12 10:29:51 2019 +1000
src/libpcp_gui/src/timestate.c: fix coverity CID 288030 Pointer to local outside scope

commit bea7421
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 12 09:06:38 2019 +1000
src/pmdas/weblog/check_match.c: fix coverity CID 341701 Division or modulo by float zero

commit 75e85cf
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 12 07:11:07 2019 +1000
src/pcp/atop/atopsar.c: fix coverity CID 288176 Division or modulo by float zero

commit 0e75aba
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Sep 12 07:05:57 2019 +1000
external/dict.c: fix coverity CID 287860 Division or modulo by float zero

commit 23d63c3
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 10 19:42:36 2019 +1000
misc: pander to gcc warning insanity

We want to use strtol() and strtod() to parse a string for errors.
With the flags we use for gcc this is not possible without gcc
emitting warnings.

To see how to fix this, check the commit, but be warned you'll
want to vomit.  If anyone has a less ugly hack, to achieve the
same result, please let me know.

commit ea75b67
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 10 19:39:27 2019 +1000
qa/660: tweak filter

More babble from the libs pmwebd uses.

commit 8d868a5
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 10 15:41:15 2019 +1000
qa/870: relax checks for pmlogger control files

In the normal thrust and parry of QA, it is inevitable that some
pmlogger instances will be smacked out of existance in ways that may
prevent orderly cleanup.

If we find turdlets in $PCP_TMP_DIR/pmlogger or $PCP_RUN_DIR that
belong to a pmlogger process that is no longer running, we now treat
these as Warnings that are sent to $seq.full, rather than Errors that
are emitted on stdout.

commit df2daf0
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Sep 10 15:39:40 2019 +1000
qa/1146: add $seq arg for ./870 --check call

So errors (from 870 --check) get logged to 1146.full, not 870.full",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,748,2019-09-18T02:27:37Z,2019-09-23T05:49:34Z,2019-09-23T05:49:34Z,MERGED,True,249,34,8,https://github.com/goodwinos,"pmdalinux - fix handling of discontiguous NUMA node numbering, plus QA",2,[],https://github.com/performancecopilot/pcp/pull/748,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/748,"RHBZ#1730492 - Some numa nodes have no instances
Fix pmdalinux handling of discontiguous or sparse numa node numbering.","RHBZ#1730492 - Some numa nodes have no instances
Fix pmdalinux handling of discontiguous or sparse numa node numbering.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,749,2019-09-19T23:01:22Z,2019-09-21T07:12:41Z,2020-08-18T21:28:55Z,MERGED,True,41,18,2,https://github.com/kmcdonell,libpcp_pmda cache and atopsar Changes committed to git@github.com:kmcdonell/pcp.git 20190918,4,[],https://github.com/performancecopilot/pcp/pull/749,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/749,"Ken McDonell (2):
src/pcp/atop/atopsar.c: fix coverity CID 349453 Logically dead code
src/libpcp_pmda/src/cache.c: refine the fortification ...
src/libpcp_pmda/src/cache.c |   53 +++++++++++++++++++++++++++++++-------------
src/pcp/atop/atopsar.c      |    6 ++--
2 files changed, 41 insertions(+), 18 deletions(-)
Details ...
commit 078d01f
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 20 08:53:43 2019 +1000
src/libpcp_pmda/src/cache.c: refine the fortification ...

Mark's previous change fixed one problem, but is NQR.

In addition to instance domain management, these cache routines can be
used to manage a hash-addressed cache of strings (PMDA_CACHE_STRINGS)
and in this context an empty string is valid, although the NULL name
is wrong always.

The previous fix was causing QA fallout from the proc PMDA with
messages like:
Error: insert_cache: NULL or zero length instance name for inst -1

At the same time I cleaned up the error message to report the instance
domain and made the use of pmInDomStr_r() consistent (preferred over
pmInDomStr()) throughout this file.

commit f2127ed
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 20 06:59:47 2019 +1000
src/pcp/atop/atopsar.c: fix coverity CID 349453 Logically dead code

Previous commit in this area was a little over zealous.","Ken McDonell (2):
src/pcp/atop/atopsar.c: fix coverity CID 349453 Logically dead code
src/libpcp_pmda/src/cache.c: refine the fortification ...
src/libpcp_pmda/src/cache.c |   53 +++++++++++++++++++++++++++++++-------------
src/pcp/atop/atopsar.c      |    6 ++--
2 files changed, 41 insertions(+), 18 deletions(-)
Details ...
commit 078d01f
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 20 08:53:43 2019 +1000
src/libpcp_pmda/src/cache.c: refine the fortification ...

Mark's previous change fixed one problem, but is NQR.

In addition to instance domain management, these cache routines can be
used to manage a hash-addressed cache of strings (PMDA_CACHE_STRINGS)
and in this context an empty string is valid, although the NULL name
is wrong always.

The previous fix was causing QA fallout from the proc PMDA with
messages like:
Error: insert_cache: NULL or zero length instance name for inst -1

At the same time I cleaned up the error message to report the instance
domain and made the use of pmInDomStr_r() consistent (preferred over
pmInDomStr()) throughout this file.

commit f2127ed
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 20 06:59:47 2019 +1000
src/pcp/atop/atopsar.c: fix coverity CID 349453 Logically dead code

Previous commit in this area was a little over zealous.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,750,2019-09-20T12:27:40Z,2019-09-21T20:41:44Z,2020-09-21T15:48:01Z,MERGED,True,22,12,5,https://github.com/andreasgerstmayr,python: fix uncached instances with empty list,1,[],https://github.com/performancecopilot/pcp/pull/750,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/750,"removed early return in set_list_instances: we need to set it_numinst
to 0, and should also set the it_set to an empty array - otherwise the
old instance list will persist
updated qa/1098: updated test pmda - the first and last round should
return an indom with empty instances
added 1098 to the sanity QA group, as it's base functionality for
Python PMDAs","removed early return in set_list_instances: we need to set it_numinst
to 0, and should also set the it_set to an empty array - otherwise the
old instance list will persist
updated qa/1098: updated test pmda - the first and last round should
return an indom with empty instances
added 1098 to the sanity QA group, as it's base functionality for
Python PMDAs",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,751,2019-09-23T13:07:12Z,2019-09-24T07:22:35Z,2020-09-21T15:48:01Z,MERGED,True,137,32,10,https://github.com/andreasgerstmayr,"pmdabpftrace: bpftrace version conditionals, QA for error states",1,[],https://github.com/performancecopilot/pcp/pull/751,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/751,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,752,2019-09-24T03:04:25Z,2019-09-24T05:57:17Z,2019-09-24T05:57:18Z,MERGED,True,1,5,1,https://github.com/goodwinos,pmdaproc - fix cgroup scan performance,5,[],https://github.com/performancecopilot/pcp/pull/752,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/752,Avoid excessive stat calls in cgroup_scan().,Avoid excessive stat calls in cgroup_scan().,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,753,2019-09-24T20:46:50Z,2019-09-25T00:40:53Z,2020-08-18T21:29:01Z,MERGED,True,12,4,3,https://github.com/kmcdonell,misc qa Changes committed to git@github.com:kmcdonell/pcp.git 20190922,6,[],https://github.com/performancecopilot/pcp/pull/753,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/753,"Ken McDonell (4):
qa/1098.out: one small change
Revert ""qa/1098.out: one small change""
qa/1160: sh is always in /bin/sh
qa/1161: various fixes
qa/1098.out |    4 ++--
qa/1160     |    2 +-
qa/1161     |   12 ++++++++++--
qa/1161.out |    2 +-
4 files changed, 14 insertions(+), 6 deletions(-)
Details ...
commit c4a752a
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 25 06:42:32 2019 +1000
qa/1161: various fixes

1. sh is always in /bin/sh ... using #!/usr/bin/sh fails on lots
   of systems.
2. reverse dns for 127.0.0.1 does not always return localhost, e.g.
   localhost.localdomain is common ... use the name returned by ping
   (using IPv4 version) in the filter

commit b8016c9
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 25 06:40:27 2019 +1000
qa/1160: sh is always in /bin/sh

Using #!/usr/bin/sh fails on lots of systems.

commit 3e5bce8
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 23 08:24:49 2019 +1000
Revert ""qa/1098.out: one small change""

This reverts commit 98247e0c7df1c87bdf807d9de34cb57658981132.

Looks like Andreas' version is correct.  I need to invetigate more why
it was failing (so I thought) on some hosts.

commit 98247e0
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Sep 22 06:45:09 2019 +1000
qa/1098.out: one small change

I think this was missed in Andreas' last changes.","Ken McDonell (4):
qa/1098.out: one small change
Revert ""qa/1098.out: one small change""
qa/1160: sh is always in /bin/sh
qa/1161: various fixes
qa/1098.out |    4 ++--
qa/1160     |    2 +-
qa/1161     |   12 ++++++++++--
qa/1161.out |    2 +-
4 files changed, 14 insertions(+), 6 deletions(-)
Details ...
commit c4a752a
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 25 06:42:32 2019 +1000
qa/1161: various fixes

1. sh is always in /bin/sh ... using #!/usr/bin/sh fails on lots
   of systems.
2. reverse dns for 127.0.0.1 does not always return localhost, e.g.
   localhost.localdomain is common ... use the name returned by ping
   (using IPv4 version) in the filter

commit b8016c9
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 25 06:40:27 2019 +1000
qa/1160: sh is always in /bin/sh

Using #!/usr/bin/sh fails on lots of systems.

commit 3e5bce8
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 23 08:24:49 2019 +1000
Revert ""qa/1098.out: one small change""

This reverts commit 98247e0c7df1c87bdf807d9de34cb57658981132.

Looks like Andreas' version is correct.  I need to invetigate more why
it was failing (so I thought) on some hosts.

commit 98247e0
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Sep 22 06:45:09 2019 +1000
qa/1098.out: one small change

I think this was missed in Andreas' last changes.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,754,2019-09-25T01:52:50Z,2019-10-02T04:13:58Z,2020-08-18T21:29:06Z,MERGED,True,0,1,1,https://github.com/kmcdonell,linux proc pmda: fix compilation warning Changes committed to git@github.com:kmcdonell/pcp.git 20190925,3,[],https://github.com/performancecopilot/pcp/pull/754,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/754,"Ken McDonell (1):
src/pmdas/linux_proc/cgroups.c: remove compilation warning
src/pmdas/linux_proc/cgroups.c |    1 -
1 file changed, 1 deletion(-)
Details ...
commit d799431
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 25 11:42:09 2019 +1000
src/pmdas/linux_proc/cgroups.c: remove compilation warning

sbuf is no longer used.","Ken McDonell (1):
src/pmdas/linux_proc/cgroups.c: remove compilation warning
src/pmdas/linux_proc/cgroups.c |    1 -
1 file changed, 1 deletion(-)
Details ...
commit d799431
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 25 11:42:09 2019 +1000
src/pmdas/linux_proc/cgroups.c: remove compilation warning

sbuf is no longer used.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,755,2019-09-30T11:17:19Z,2019-10-02T04:13:57Z,2020-08-18T21:29:11Z,MERGED,True,11,53,5,https://github.com/kmcdonell,misc build and associated tools Changes committed to git@github.com:kmcdonell/pcp.git 20190930,10,[],https://github.com/performancecopilot/pcp/pull/755,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/755,"Ken McDonell (3):
scripts/pcp-push: small change to github workflow for kenj
src/libpcp/src/exports.master: __pmSockAddrGetPort already present
check-vm: RHEL 6.10 updates
qa/admin/other-packages/manifest    |    2 -
qa/admin/other-packages/unavailable |    3 --
scripts/pcp-push                    |   53 ++++++------------------------------
src/libpcp/src/exports.master       |    5 ---
4 files changed, 11 insertions(+), 52 deletions(-)
Details ...
commit 9e0438d
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 30 21:15:10 2019 +1000
check-vm: RHEL 6.10 updates

commit 2c8c1c6
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 30 21:12:27 2019 +1000
src/libpcp/src/exports.master: __pmSockAddrGetPort already present

The previous commit in this file added a second entry for
__pmSockAddrGetPort ... noone noticed, until Solaris' ld flagged
the error and killd the build.

commit 42c7241
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 30 21:11:03 2019 +1000
scripts/pcp-push: small change to github workflow for kenj","Ken McDonell (3):
scripts/pcp-push: small change to github workflow for kenj
src/libpcp/src/exports.master: __pmSockAddrGetPort already present
check-vm: RHEL 6.10 updates
qa/admin/other-packages/manifest    |    2 -
qa/admin/other-packages/unavailable |    3 --
scripts/pcp-push                    |   53 ++++++------------------------------
src/libpcp/src/exports.master       |    5 ---
4 files changed, 11 insertions(+), 52 deletions(-)
Details ...
commit 9e0438d
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 30 21:15:10 2019 +1000
check-vm: RHEL 6.10 updates

commit 2c8c1c6
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 30 21:12:27 2019 +1000
src/libpcp/src/exports.master: __pmSockAddrGetPort already present

The previous commit in this file added a second entry for
__pmSockAddrGetPort ... noone noticed, until Solaris' ld flagged
the error and killd the build.

commit 42c7241
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 30 21:11:03 2019 +1000
scripts/pcp-push: small change to github workflow for kenj",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,756,2019-10-01T20:31:25Z,2019-10-02T04:13:57Z,2020-09-21T15:48:04Z,MERGED,True,184,4,12,https://github.com/andreasgerstmayr,"qa: add test 1544 for pmproxy store and fetch, update bpftrace tests",2,[],https://github.com/performancecopilot/pcp/pull/756,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/756,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,757,2019-10-01T20:53:24Z,2019-10-02T04:13:56Z,2020-08-18T21:29:16Z,MERGED,True,72,86,10,https://github.com/kmcdonell,qa Changes committed to git@github.com:kmcdonell/pcp.git 20191002,13,[],https://github.com/performancecopilot/pcp/pull/757,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/757,"Ken McDonell (2):
qa/660, 1388: move pmwebd to port 44324
qa/567: add missing Python pcp pmapi module is not installed notrun test
qa/1388       |   19 +++++++++++++++++++
qa/567        |    3 +++
qa/660        |   48 +++++++++++++++++++++++++++---------------------
qa/660.out.4  |   12 ++++++------
qa/660.out.46 |   12 ++++++------
5 files changed, 61 insertions(+), 33 deletions(-)
Details ...
commit 5f833ff
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 2 06:49:57 2019 +1000
qa/567: add missing Python pcp pmapi module is not installed notrun test

Will prevent this test from being run on, for example vm13 (Solaris),
where we have 64-bit libpcp and this does not work with the 32-bit
world view of Python on this platform.

This notrun test is is lots of other Python qa tests, but was missing
from 567.

commit f7bb455
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 2 06:24:20 2019 +1000
qa/660, 1388: move pmwebd to port 44324

This is a temporary change, to keep pmwebd and the associated QA
working during the transition from pmwebd to pmproxy for the care
and feeding of port 44323.","Ken McDonell (2):
qa/660, 1388: move pmwebd to port 44324
qa/567: add missing Python pcp pmapi module is not installed notrun test
qa/1388       |   19 +++++++++++++++++++
qa/567        |    3 +++
qa/660        |   48 +++++++++++++++++++++++++++---------------------
qa/660.out.4  |   12 ++++++------
qa/660.out.46 |   12 ++++++------
5 files changed, 61 insertions(+), 33 deletions(-)
Details ...
commit 5f833ff
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 2 06:49:57 2019 +1000
qa/567: add missing Python pcp pmapi module is not installed notrun test

Will prevent this test from being run on, for example vm13 (Solaris),
where we have 64-bit libpcp and this does not work with the 32-bit
world view of Python on this platform.

This notrun test is is lots of other Python qa tests, but was missing
from 567.

commit f7bb455
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 2 06:24:20 2019 +1000
qa/660, 1388: move pmwebd to port 44324

This is a temporary change, to keep pmwebd and the associated QA
working during the transition from pmwebd to pmproxy for the care
and feeding of port 44323.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,758,2019-10-02T09:18:11Z,2019-10-02T22:36:48Z,2020-09-21T15:48:04Z,MERGED,True,11,1,4,https://github.com/andreasgerstmayr,libpcp_pmda: set context in store callback,1,[],https://github.com/performancecopilot/pcp/pull/758,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/758,"All callbacks in callback.c called __pmdaSetContext to store the current
context number, except the store callback, which was a no-op previously.
This commit sets the context number in the store callback, and calls the
store callback from the Python wrapper. In most cases the context was
set without this change, as a call to pmdaDesc set the context properly.
However, there is no guarantee that pmdaDesc is called before store.","All callbacks in callback.c called __pmdaSetContext to store the current
context number, except the store callback, which was a no-op previously.
This commit sets the context number in the store callback, and calls the
store callback from the Python wrapper. In most cases the context was
set without this change, as a call to pmdaDesc set the context properly.
However, there is no guarantee that pmdaDesc is called before store.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,759,2019-10-02T20:18:38Z,2019-10-02T22:36:48Z,2020-08-18T21:19:25Z,MERGED,True,19,3,3,https://github.com/kmcdonell,qa and misc Changes committed to git@github.com:kmcdonell/pcp.git 20191002a,5,[],https://github.com/performancecopilot/pcp/pull/759,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/759,"Ken McDonell (4):
scripts/new-branch: add optional branch ""suffix"" argument
qa/group: put back the deleted pmwebd tests, but mark as retired
qa/GNUmakefile: don't package retired: tests
qa/GNUmakefile: don't package retired: tests (do it properly this time)
Nathan Scott (1):
selinux: build fix for platforms without map for class file
qa/GNUmakefile                |    4 ++--
qa/group                      |    8 ++++++++
scripts/new-branch            |   12 ++++++++++--
src/selinux/pcpupstream.te.in |    2 +-
4 files changed, 21 insertions(+), 5 deletions(-)
Details ...
commit c88247a
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 3 06:16:42 2019 +1000
qa/GNUmakefile: don't package retired: tests (do it properly this time)

commit 05e22d9
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 2 17:15:14 2019 +1000
qa/GNUmakefile: don't package retired: tests

commit cd9a1d4
Author: Nathan Scott nathans@redhat.com
Date:   Wed Oct 2 17:09:00 2019 +1000
selinux: build fix for platforms without map for class file

commit 23f1849
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 2 14:59:27 2019 +1000
qa/group: put back the deleted pmwebd tests, but mark as retired

To avoid confusion and possible re-use of test script numbers I've
re-inserted the recently removed pmwebd qa tests and marked them
"":retired"".

This is just in the group file ... the tests themselves remain deleted.

commit db48c79
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 2 14:58:09 2019 +1000
scripts/new-branch: add optional branch ""suffix"" argument

If two different pull requests are to be made in the same day,
this allows the branch names to be unique.","Ken McDonell (4):
scripts/new-branch: add optional branch ""suffix"" argument
qa/group: put back the deleted pmwebd tests, but mark as retired
qa/GNUmakefile: don't package retired: tests
qa/GNUmakefile: don't package retired: tests (do it properly this time)
Nathan Scott (1):
selinux: build fix for platforms without map for class file
qa/GNUmakefile                |    4 ++--
qa/group                      |    8 ++++++++
scripts/new-branch            |   12 ++++++++++--
src/selinux/pcpupstream.te.in |    2 +-
4 files changed, 21 insertions(+), 5 deletions(-)
Details ...
commit c88247a
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 3 06:16:42 2019 +1000
qa/GNUmakefile: don't package retired: tests (do it properly this time)

commit 05e22d9
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 2 17:15:14 2019 +1000
qa/GNUmakefile: don't package retired: tests

commit cd9a1d4
Author: Nathan Scott nathans@redhat.com
Date:   Wed Oct 2 17:09:00 2019 +1000
selinux: build fix for platforms without map for class file

commit 23f1849
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 2 14:59:27 2019 +1000
qa/group: put back the deleted pmwebd tests, but mark as retired

To avoid confusion and possible re-use of test script numbers I've
re-inserted the recently removed pmwebd qa tests and marked them
"":retired"".

This is just in the group file ... the tests themselves remain deleted.

commit db48c79
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 2 14:58:09 2019 +1000
scripts/new-branch: add optional branch ""suffix"" argument

If two different pull requests are to be made in the same day,
this allows the branch names to be unique.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,760,2019-10-03T04:16:25Z,2019-10-03T22:52:45Z,2020-08-18T21:19:54Z,MERGED,True,2,3,2,https://github.com/kmcdonell,debian packaging Changes committed to git@github.com:kmcdonell/pcp.git 20191003a,3,[],https://github.com/performancecopilot/pcp/pull/760,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/760,"Ken McDonell (3):
qa/.gitignore: remove 662.out (now checked in)
debian/control.master: add Breaks pcp-webapi for libpcp3-dev
debian/control.master: changes for libpcp3-dev
debian/control.master |    6 +++---
qa/.gitignore         |    1 -
2 files changed, 3 insertions(+), 4 deletions(-)
Details ...
commit ea9890a
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 3 13:23:32 2019 +1000
debian/control.master: changes for libpcp3-dev

Need to tweak the transition with the demise of pcp-webapi.

commit eb83621
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 3 10:27:15 2019 +1000
debian/control.master: add Breaks pcp-webapi for libpcp3-dev

commit f6d29f7
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 3 10:26:50 2019 +1000
qa/.gitignore: remove 662.out (now checked in)","Ken McDonell (3):
qa/.gitignore: remove 662.out (now checked in)
debian/control.master: add Breaks pcp-webapi for libpcp3-dev
debian/control.master: changes for libpcp3-dev
debian/control.master |    6 +++---
qa/.gitignore         |    1 -
2 files changed, 3 insertions(+), 4 deletions(-)
Details ...
commit ea9890a
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 3 13:23:32 2019 +1000
debian/control.master: changes for libpcp3-dev

Need to tweak the transition with the demise of pcp-webapi.

commit eb83621
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 3 10:27:15 2019 +1000
debian/control.master: add Breaks pcp-webapi for libpcp3-dev

commit f6d29f7
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 3 10:26:50 2019 +1000
qa/.gitignore: remove 662.out (now checked in)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,761,2019-10-03T13:52:23Z,2019-10-07T01:19:54Z,2020-09-21T15:49:55Z,MERGED,True,195,61,9,https://github.com/andreasgerstmayr,python pmdas: enable authentication support,2,[],https://github.com/performancecopilot/pcp/pull/761,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/761,"modified QA 1388 to test pmproxy authentication (currently failing)
is a general pmdaSetCommFlags(&dispatch, PMDA_FLAG_AUTHORIZE); for python PMDAs fine or should this be optionally enabled on a per-(python)-pmda-basis? none of the python pmdas call set_attribute_callback as of now (as this method is new in this commit), so the overhead should be minimal?","modified QA 1388 to test pmproxy authentication (currently failing)
is a general pmdaSetCommFlags(&dispatch, PMDA_FLAG_AUTHORIZE); for python PMDAs fine or should this be optionally enabled on a per-(python)-pmda-basis? none of the python pmdas call set_attribute_callback as of now (as this method is new in this commit), so the overhead should be minimal?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,761,2019-10-03T13:52:23Z,2019-10-07T01:19:54Z,2020-09-21T15:49:55Z,MERGED,True,195,61,9,https://github.com/andreasgerstmayr,python pmdas: enable authentication support,2,[],https://github.com/performancecopilot/pcp/pull/761,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/761#issuecomment-538321663,"modified QA 1388 to test pmproxy authentication (currently failing)
is a general pmdaSetCommFlags(&dispatch, PMDA_FLAG_AUTHORIZE); for python PMDAs fine or should this be optionally enabled on a per-(python)-pmda-basis? none of the python pmdas call set_attribute_callback as of now (as this method is new in this commit), so the overhead should be minimal?",Thanks for the review! I've added a set_comm_flags method to the Python PMDA base class and exported the PMDA_FLAG_AUTHORIZE and PMDA_FLAG_CONTAINER flags.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,762,2019-10-03T22:33:20Z,2019-10-03T22:52:45Z,2020-08-18T21:19:54Z,MERGED,True,25,7,9,https://github.com/kmcdonell,pmproxy and qa Changes committed to git@github.com:kmcdonell/pcp.git 20191003b,8,[],https://github.com/performancecopilot/pcp/pull/762,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/762,"Ken McDonell (3):
src/pmproxy/src/server.h: add missing #define
qa/294,295,297,651: refine pmproxy filter
qa/1407,1408: need to source common.config for DISPLAY magic to work
qa/1407                  |    1 +
qa/1408                  |    1 +
qa/294                   |    2 ++
qa/295                   |    1 +
qa/297                   |    4 +++-
qa/651                   |   17 ++++++++++++++---
src/pmproxy/src/server.h |    1 +
7 files changed, 23 insertions(+), 4 deletions(-)
Details ...
commit c351bf9
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Oct 4 08:31:33 2019 +1000
qa/1407,1408: need to source common.config for DISPLAY magic to work

commit a2d13fb
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Oct 4 06:29:56 2019 +1000
qa/294,295,297,651: refine pmproxy filter

When libuv is earlier than version 1.0 we need to filter out this
line:
    pmproxy: disabled time series, requires libuv support (missing)

commit ab72089
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 3 21:04:55 2019 +1000
src/pmproxy/src/server.h: add missing #define

Need definition for
    #define on_secure_client_write(c)
for platforms where HAVE_OPENSSL is not defined.","Ken McDonell (3):
src/pmproxy/src/server.h: add missing #define
qa/294,295,297,651: refine pmproxy filter
qa/1407,1408: need to source common.config for DISPLAY magic to work
qa/1407                  |    1 +
qa/1408                  |    1 +
qa/294                   |    2 ++
qa/295                   |    1 +
qa/297                   |    4 +++-
qa/651                   |   17 ++++++++++++++---
src/pmproxy/src/server.h |    1 +
7 files changed, 23 insertions(+), 4 deletions(-)
Details ...
commit c351bf9
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Oct 4 08:31:33 2019 +1000
qa/1407,1408: need to source common.config for DISPLAY magic to work

commit a2d13fb
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Oct 4 06:29:56 2019 +1000
qa/294,295,297,651: refine pmproxy filter

When libuv is earlier than version 1.0 we need to filter out this
line:
    pmproxy: disabled time series, requires libuv support (missing)

commit ab72089
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 3 21:04:55 2019 +1000
src/pmproxy/src/server.h: add missing #define

Need definition for
    #define on_secure_client_write(c)
for platforms where HAVE_OPENSSL is not defined.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,763,2019-10-04T20:44:29Z,2019-10-04T20:45:45Z,2019-10-04T20:46:08Z,MERGED,True,55,55,7,https://github.com/kmcdonell,revert python2 build change Changes committed to git@github.com:kmcdonell/pcp.git 20191005,1,[],https://github.com/performancecopilot/pcp/pull/763,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/763,"Ken McDonell (1):
Revert ""build: when calling 'python' prefer a 2/3-versioned binary if available""
build/rpm/fedora.spec    |    2 +-
build/rpm/pcp.spec.in    |    2 +-
configure                |   44 ++++++++++++++++++++++----------------------
configure.ac             |   22 +++++++++++-----------
debian/rules             |    4 ++--
src/include/builddefs.in |   22 +++++++++++-----------
src/python/GNUmakefile   |   14 +++++++-------
7 files changed, 55 insertions(+), 55 deletions(-)
Details ...
commit d095412
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Oct 5 06:41:01 2019 +1000
Revert ""build: when calling 'python' prefer a 2/3-versioned binary if available""

This reverts commit 6635e2ee08e37e3e90cf9e6651e2cad3ec0b7582.

This commit was addressing a build warning seen on Fedora, but seems
to have introduced build breakage on older platforms that still have
a dependence on Python2.

We'll revisit the issue after the PCP 5.0.0 release.","Ken McDonell (1):
Revert ""build: when calling 'python' prefer a 2/3-versioned binary if available""
build/rpm/fedora.spec    |    2 +-
build/rpm/pcp.spec.in    |    2 +-
configure                |   44 ++++++++++++++++++++++----------------------
configure.ac             |   22 +++++++++++-----------
debian/rules             |    4 ++--
src/include/builddefs.in |   22 +++++++++++-----------
src/python/GNUmakefile   |   14 +++++++-------
7 files changed, 55 insertions(+), 55 deletions(-)
Details ...
commit d095412
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Oct 5 06:41:01 2019 +1000
Revert ""build: when calling 'python' prefer a 2/3-versioned binary if available""

This reverts commit 6635e2ee08e37e3e90cf9e6651e2cad3ec0b7582.

This commit was addressing a build warning seen on Fedora, but seems
to have introduced build breakage on older platforms that still have
a dependence on Python2.

We'll revisit the issue after the PCP 5.0.0 release.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,763,2019-10-04T20:44:29Z,2019-10-04T20:45:45Z,2019-10-04T20:46:08Z,MERGED,True,55,55,7,https://github.com/kmcdonell,revert python2 build change Changes committed to git@github.com:kmcdonell/pcp.git 20191005,1,[],https://github.com/performancecopilot/pcp/pull/763,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/763#issuecomment-538553755,"Ken McDonell (1):
Revert ""build: when calling 'python' prefer a 2/3-versioned binary if available""
build/rpm/fedora.spec    |    2 +-
build/rpm/pcp.spec.in    |    2 +-
configure                |   44 ++++++++++++++++++++++----------------------
configure.ac             |   22 +++++++++++-----------
debian/rules             |    4 ++--
src/include/builddefs.in |   22 +++++++++++-----------
src/python/GNUmakefile   |   14 +++++++-------
7 files changed, 55 insertions(+), 55 deletions(-)
Details ...
commit d095412
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Oct 5 06:41:01 2019 +1000
Revert ""build: when calling 'python' prefer a 2/3-versioned binary if available""

This reverts commit 6635e2ee08e37e3e90cf9e6651e2cad3ec0b7582.

This commit was addressing a build warning seen on Fedora, but seems
to have introduced build breakage on older platforms that still have
a dependence on Python2.

We'll revisit the issue after the PCP 5.0.0 release.",As agreed between Ken and Nathan in email.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,764,2019-10-06T21:55:40Z,2019-10-07T01:19:53Z,2020-09-21T15:49:57Z,MERGED,True,1553,1006,35,https://github.com/andreasgerstmayr,"pmdabpftrace: parse bpftrace output in daemon process, authentication",1,[],https://github.com/performancecopilot/pcp/pull/764,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/764,"parse bpftrace output in daemon process, using asyncio


add authentication support, allowed_users config


stop bpftrace scripts if they produce too much data


stop idling bpftrace scripts, without any callback from PMDA


restructure code in separate files, use a python module for bpftrace
PMDA code


change ascending script ids to uuids


rename bpftrace.script.XXX.output to .error


introduce error state","parse bpftrace output in daemon process, using asyncio


add authentication support, allowed_users config


stop bpftrace scripts if they produce too much data


stop idling bpftrace scripts, without any callback from PMDA


restructure code in separate files, use a python module for bpftrace
PMDA code


change ascending script ids to uuids


rename bpftrace.script.XXX.output to .error


introduce error state",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,766,2019-10-07T19:41:08Z,2019-10-07T19:41:20Z,2020-09-21T15:49:59Z,MERGED,True,195,71,22,https://github.com/andreasgerstmayr,misc CI updates,6,[],https://github.com/performancecopilot/pcp/pull/766,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/766,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,767,2019-10-08T19:50:33Z,2019-10-08T19:50:48Z,2020-09-21T15:49:59Z,MERGED,True,399,199,15,https://github.com/andreasgerstmayr,misc pmdabpftrace bugfixes and additional QA tests,6,[],https://github.com/performancecopilot/pcp/pull/767,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/767,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,768,2019-10-08T23:11:23Z,2019-10-08T23:40:03Z,2020-08-18T21:29:22Z,MERGED,True,36,8,4,https://github.com/kmcdonell,small qa changes Changes committed to git@github.com:kmcdonell/pcp.git 20191009,4,[],https://github.com/performancecopilot/pcp/pull/768,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/768,"Ken McDonell (4):
qa/admin/other-packages/unavailable: rpm changes
qa/1098: better and earlier warning if test_python PMDA install goes badly
qa/1110: one-trip filter for empty indom cache file
qa/1388: remove the test_python PMDA at the end
qa/1098                             |   13 ++++++++++---
qa/1110                             |   12 +++++++++++-
qa/1388                             |    9 +++++++++
qa/admin/other-packages/unavailable |   10 ++++++----
4 files changed, 36 insertions(+), 8 deletions(-)
Details ...
commit 3d1912f
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 9 10:09:36 2019 +1100
qa/1388: remove the test_python PMDA at the end

Was causing a number of cascading QA failures when the test_python
PMDA was installed on random QA hosts.

commit 9cd4dd3
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 9 10:08:29 2019 +1100
qa/1110: one-trip filter for empty indom cache file

Warning only happens the first time the PMDA is installed on
a platform, and is benign.

commit 3bf0fe7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 9 10:07:32 2019 +1100
qa/1098: better and earlier warning if test_python PMDA install goes badly

commit 8de6523
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 9 10:06:53 2019 +1100
qa/admin/other-packages/unavailable: rpm changes","Ken McDonell (4):
qa/admin/other-packages/unavailable: rpm changes
qa/1098: better and earlier warning if test_python PMDA install goes badly
qa/1110: one-trip filter for empty indom cache file
qa/1388: remove the test_python PMDA at the end
qa/1098                             |   13 ++++++++++---
qa/1110                             |   12 +++++++++++-
qa/1388                             |    9 +++++++++
qa/admin/other-packages/unavailable |   10 ++++++----
4 files changed, 36 insertions(+), 8 deletions(-)
Details ...
commit 3d1912f
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 9 10:09:36 2019 +1100
qa/1388: remove the test_python PMDA at the end

Was causing a number of cascading QA failures when the test_python
PMDA was installed on random QA hosts.

commit 9cd4dd3
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 9 10:08:29 2019 +1100
qa/1110: one-trip filter for empty indom cache file

Warning only happens the first time the PMDA is installed on
a platform, and is benign.

commit 3bf0fe7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 9 10:07:32 2019 +1100
qa/1098: better and earlier warning if test_python PMDA install goes badly

commit 8de6523
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 9 10:06:53 2019 +1100
qa/admin/other-packages/unavailable: rpm changes",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,769,2019-10-09T19:41:05Z,2019-10-09T20:43:35Z,2020-08-18T21:29:27Z,MERGED,True,83,1,6,https://github.com/kmcdonell,IMPORTANT pmlogrewrite mem leak fix Changes committed to git@github.com:kmcdonell/pcp.git 20191010,2,[],https://github.com/performancecopilot/pcp/pull/769,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/769,"Ken McDonell (2):
pmlogrewrite: plug major memory leak
qa/878: separate stdout and stderr in the .full file
qa/1149                         |   64 ++++++++++++++++++++++++++++++++++++++++
qa/1149.out                     |    3 +
qa/878                          |    4 ++
qa/group                        |    1
src/pmlogrewrite/pmlogrewrite.c |    5 +++
src/pmlogrewrite/result.c       |    7 +++-
6 files changed, 83 insertions(+), 1 deletion(-)
Details ...
commit 8412169
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 10 06:39:10 2019 +1100
qa/878: separate stdout and stderr in the .full file

Debugging aid.

commit 10309b1
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 10 06:33:13 2019 +1100
pmlogrewrite: plug major memory leak

We were keeping all the PDU buffers because they were never being
unpinned.  This may explain some folklore around long running pmlogger
daily tasks with big archives.

Simple fix.

And added conditional call to __pmFindPDUBuf(-1) before exit to dump
the state of the PDU buffer pool to debug this.

And new qa/1149 to demonstrate the problem and prove the fix works.

Passes all of -g pmlogrewrite QA, so I'm sure this is safe.","Ken McDonell (2):
pmlogrewrite: plug major memory leak
qa/878: separate stdout and stderr in the .full file
qa/1149                         |   64 ++++++++++++++++++++++++++++++++++++++++
qa/1149.out                     |    3 +
qa/878                          |    4 ++
qa/group                        |    1
src/pmlogrewrite/pmlogrewrite.c |    5 +++
src/pmlogrewrite/result.c       |    7 +++-
6 files changed, 83 insertions(+), 1 deletion(-)
Details ...
commit 8412169
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 10 06:39:10 2019 +1100
qa/878: separate stdout and stderr in the .full file

Debugging aid.

commit 10309b1
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 10 06:33:13 2019 +1100
pmlogrewrite: plug major memory leak

We were keeping all the PDU buffers because they were never being
unpinned.  This may explain some folklore around long running pmlogger
daily tasks with big archives.

Simple fix.

And added conditional call to __pmFindPDUBuf(-1) before exit to dump
the state of the PDU buffer pool to debug this.

And new qa/1149 to demonstrate the problem and prove the fix works.

Passes all of -g pmlogrewrite QA, so I'm sure this is safe.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,771,2019-10-11T10:41:11Z,2019-10-15T08:44:11Z,2020-09-21T15:50:03Z,MERGED,True,14,16,2,https://github.com/andreasgerstmayr,pmproxy: send only one fetch response,1,[],https://github.com/performancecopilot/pcp/pull/771,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/771,"pmWebGroupFetch() calls webgroup_fetch_names() which calls
webgroup_fetch() which calls on_pmwebapi_done()
However, at the end of pmWebGroupFetch(), on_pmwebapi_done() is called
also.
This results in (trying to) send the actual fetch response and a
generic {context:XXX, success:true} response, and for HTTP/1.0 clients to
close the connection twice, which results in a libuv assert.
This commit removes the call to on_pmwebapi_done in the webgroup_fetch()
function, and instead returns the error message and status code via
a parameter and return value (like the other webgroup_* functions).","pmWebGroupFetch() calls webgroup_fetch_names() which calls
webgroup_fetch() which calls on_pmwebapi_done()
However, at the end of pmWebGroupFetch(), on_pmwebapi_done() is called
also.
This results in (trying to) send the actual fetch response and a
generic {context:XXX, success:true} response, and for HTTP/1.0 clients to
close the connection twice, which results in a libuv assert.
This commit removes the call to on_pmwebapi_done in the webgroup_fetch()
function, and instead returns the error message and status code via
a parameter and return value (like the other webgroup_* functions).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,773,2019-10-15T16:48:12Z,2019-10-16T06:20:51Z,2019-10-16T18:07:30Z,MERGED,True,14,14,1,https://github.com/jasonk000,Ensure that client data structures are freed only after not in use,1,[],https://github.com/performancecopilot/pcp/pull/773,https://github.com/jasonk000,1,https://github.com/performancecopilot/pcp/pull/773,"This prevents the case where an earlier-than-expected socket close destroys
the data structures that are still in use handling a fetch query.
Fixes #772","This prevents the case where an earlier-than-expected socket close destroys
the data structures that are still in use handling a fetch query.
Fixes #772",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,775,2019-10-15T23:08:26Z,2019-10-18T18:19:55Z,2019-10-18T18:21:05Z,MERGED,True,509,9,9,https://github.com/jasonk000,Ensure uv_write happens from main thread,3,[],https://github.com/performancecopilot/pcp/pull/775,https://github.com/jasonk000,1,https://github.com/performancecopilot/pcp/pull/775,"All uv_write calls should occur via main thread according to libuv API documentation.
Include external uv_callback external dependency (MIT license).
https://github.com/litesync/uv_callback
Use uv_callback library to schedule uv_write calls onto the main thread instead of from the worker thread.
http://docs.libuv.org/en/v1.x/guide/threads.html
Fixes #774","All uv_write calls should occur via main thread according to libuv API documentation.
Include external uv_callback external dependency (MIT license).
https://github.com/litesync/uv_callback
Use uv_callback library to schedule uv_write calls onto the main thread instead of from the worker thread.
http://docs.libuv.org/en/v1.x/guide/threads.html
Fixes #774",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,775,2019-10-15T23:08:26Z,2019-10-18T18:19:55Z,2019-10-18T18:21:05Z,MERGED,True,509,9,9,https://github.com/jasonk000,Ensure uv_write happens from main thread,3,[],https://github.com/performancecopilot/pcp/pull/775,https://github.com/jasonk000,2,https://github.com/performancecopilot/pcp/pull/775#issuecomment-542831071,"All uv_write calls should occur via main thread according to libuv API documentation.
Include external uv_callback external dependency (MIT license).
https://github.com/litesync/uv_callback
Use uv_callback library to schedule uv_write calls onto the main thread instead of from the worker thread.
http://docs.libuv.org/en/v1.x/guide/threads.html
Fixes #774","I've added libuv (-devel) as a dependency for fedora 30 & 31 & rawhide, but the rawhide build seems blocked on a different issue.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,775,2019-10-15T23:08:26Z,2019-10-18T18:19:55Z,2019-10-18T18:21:05Z,MERGED,True,509,9,9,https://github.com/jasonk000,Ensure uv_write happens from main thread,3,[],https://github.com/performancecopilot/pcp/pull/775,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/775#issuecomment-543045610,"All uv_write calls should occur via main thread according to libuv API documentation.
Include external uv_callback external dependency (MIT license).
https://github.com/litesync/uv_callback
Use uv_callback library to schedule uv_write calls onto the main thread instead of from the worker thread.
http://docs.libuv.org/en/v1.x/guide/threads.html
Fixes #774","@jasonk000 I have a fix for the build issue in hand, and some small code tweaks here and there - I'll push once I get some solid testing time in (bit difficult at the moment with travel, but will do so asap).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,776,2019-10-16T09:38:46Z,2019-10-16T10:00:16Z,2020-09-21T15:50:03Z,MERGED,True,4,1,1,https://github.com/andreasgerstmayr,pmproxy: remove linefeeds at the end of JSON responses by fixing the …,1,[],https://github.com/performancecopilot/pcp/pull/776,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/776,…json_pop_suffix function,…json_pop_suffix function,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,777,2019-10-16T22:43:17Z,2019-10-18T15:36:01Z,2020-08-18T21:29:32Z,MERGED,True,113,111,5,https://github.com/kmcdonell,qa and other-packages info updates Changes committed to git@github.com:kmcdonell/pcp.git 20191015,7,[],https://github.com/performancecopilot/pcp/pull/777,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/777,"Ken McDonell (7):
qa/admin/other-packages/manifest: updates for Arch Linux
qa/check.callback.sample: refine ./870 output cmp
qa/admin/other-packages/unavailable: 32-bit Fedora 29 changes
qa/README.vm: update OpenSuSE version availability info
qa/admin/other-packages/: CentOS 7.7 updates
qa/admin/other-packages/: updates for openSUSE Leap 15.1
qa/common: fix some logic errors
qa/README.vm                        |    5
qa/admin/other-packages/manifest    |  200 ++++++++++++++++++------------------
qa/admin/other-packages/unavailable |    7 -
qa/check.callback.sample            |    7 -
qa/common                           |    5
5 files changed, 113 insertions(+), 111 deletions(-)
Details ...
commit bb3cd75
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 17 09:41:06 2019 +1100
qa/common: fix some logic errors

Found on first run for a virgin install on openSUSE Leap 15.1,
although the issues have nothing to do with openSUSE per se.

commit 6df901e
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 17 09:07:34 2019 +1100
qa/admin/other-packages/*: updates for openSUSE Leap 15.1

commit c4d877f
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 16 14:42:05 2019 +1100
qa/admin/other-packages/*: CentOS 7.7 updates

Similar updates also for RHEL 7.7

commit eaf82f5
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 16 11:26:45 2019 +1100
qa/README.vm: update OpenSuSE version availability info

commit b1078a6
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 16 07:34:57 2019 +1100
qa/admin/other-packages/unavailable: 32-bit Fedora 29 changes

commit e9ba978
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 16 07:34:10 2019 +1100
qa/check.callback.sample: refine ./870 output cmp

Need to strip timestamps from output, then compare.

commit 34ec711
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 15 17:17:32 2019 +1100
qa/admin/other-packages/manifest: updates for Arch Linux","Ken McDonell (7):
qa/admin/other-packages/manifest: updates for Arch Linux
qa/check.callback.sample: refine ./870 output cmp
qa/admin/other-packages/unavailable: 32-bit Fedora 29 changes
qa/README.vm: update OpenSuSE version availability info
qa/admin/other-packages/: CentOS 7.7 updates
qa/admin/other-packages/: updates for openSUSE Leap 15.1
qa/common: fix some logic errors
qa/README.vm                        |    5
qa/admin/other-packages/manifest    |  200 ++++++++++++++++++------------------
qa/admin/other-packages/unavailable |    7 -
qa/check.callback.sample            |    7 -
qa/common                           |    5
5 files changed, 113 insertions(+), 111 deletions(-)
Details ...
commit bb3cd75
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 17 09:41:06 2019 +1100
qa/common: fix some logic errors

Found on first run for a virgin install on openSUSE Leap 15.1,
although the issues have nothing to do with openSUSE per se.

commit 6df901e
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Oct 17 09:07:34 2019 +1100
qa/admin/other-packages/*: updates for openSUSE Leap 15.1

commit c4d877f
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 16 14:42:05 2019 +1100
qa/admin/other-packages/*: CentOS 7.7 updates

Similar updates also for RHEL 7.7

commit eaf82f5
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 16 11:26:45 2019 +1100
qa/README.vm: update OpenSuSE version availability info

commit b1078a6
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 16 07:34:57 2019 +1100
qa/admin/other-packages/unavailable: 32-bit Fedora 29 changes

commit e9ba978
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 16 07:34:10 2019 +1100
qa/check.callback.sample: refine ./870 output cmp

Need to strip timestamps from output, then compare.

commit 34ec711
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 15 17:17:32 2019 +1100
qa/admin/other-packages/manifest: updates for Arch Linux",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,778,2019-10-18T09:16:50Z,2019-10-20T08:07:36Z,2019-10-20T08:07:36Z,MERGED,True,238,96,7,https://github.com/anjutsudhakar,perfevent pmda enhancements to support hv_24x7 dynamic events,3,[],https://github.com/performancecopilot/pcp/pull/778,https://github.com/anjutsudhakar,1,https://github.com/performancecopilot/pcp/pull/778,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,779,2019-10-18T13:23:11Z,2019-10-18T15:36:01Z,2020-09-21T15:50:04Z,MERGED,True,28,8,3,https://github.com/andreasgerstmayr,pmproxy instances fixes,3,[],https://github.com/performancecopilot/pcp/pull/779,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/779,,,True,{'THUMBS_UP': ['https://github.com/jasonk000']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,780,2019-10-19T21:15:14Z,2019-10-21T12:02:23Z,2020-01-19T00:37:09Z,MERGED,True,1,5,2,https://github.com/Erbenos,Fedora rawhide fix pmdastatsd,2,[],https://github.com/performancecopilot/pcp/pull/780,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/780,Should address issues regarding building pmdastatsd on Fedora Rawhide caused by new Ragel version.,Should address issues regarding building pmdastatsd on Fedora Rawhide caused by new Ragel version.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,781,2019-10-22T20:57:40Z,2019-11-04T09:31:32Z,2019-11-04T09:31:32Z,CLOSED,False,50,10,2,https://github.com/jasonk000,Handle incomplete container setup,2,[],https://github.com/performancecopilot/pcp/pull/781,https://github.com/jasonk000,1,https://github.com/performancecopilot/pcp/pull/781,"If a non-default cgroup fs path is used, and the container is not quite
set up before polling begins, an invalid entry could be cached. This
prevents the container from being properly discovered once the container
becomes available.
So, when executing the fallback default path, check that the file exists
before accepting it as a correct fallback.
Fixes #770","If a non-default cgroup fs path is used, and the container is not quite
set up before polling begins, an invalid entry could be cached. This
prevents the container from being properly discovered once the container
becomes available.
So, when executing the fallback default path, check that the file exists
before accepting it as a correct fallback.
Fixes #770",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,781,2019-10-22T20:57:40Z,2019-11-04T09:31:32Z,2019-11-04T09:31:32Z,CLOSED,False,50,10,2,https://github.com/jasonk000,Handle incomplete container setup,2,[],https://github.com/performancecopilot/pcp/pull/781,https://github.com/jasonk000,2,https://github.com/performancecopilot/pcp/pull/781#issuecomment-545152165,"If a non-default cgroup fs path is used, and the container is not quite
set up before polling begins, an invalid entry could be cached. This
prevents the container from being properly discovered once the container
becomes available.
So, when executing the fallback default path, check that the file exists
before accepting it as a correct fallback.
Fixes #770","Putting it up for review, I will try to build a QA test case for this",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,781,2019-10-22T20:57:40Z,2019-11-04T09:31:32Z,2019-11-04T09:31:32Z,CLOSED,False,50,10,2,https://github.com/jasonk000,Handle incomplete container setup,2,[],https://github.com/performancecopilot/pcp/pull/781,https://github.com/jasonk000,3,https://github.com/performancecopilot/pcp/pull/781#issuecomment-545515743,"If a non-default cgroup fs path is used, and the container is not quite
set up before polling begins, an invalid entry could be cached. This
prevents the container from being properly discovered once the container
becomes available.
So, when executing the fallback default path, check that the file exists
before accepting it as a correct fallback.
Fixes #770","Here are the specific steps to reproduce:
# deploy the new root pmda code
make -C src/pmdas/root
systemctl stop pmcd
cp src/pmdas/root/pmdaroot /var/lib/pcp/pmdaroot
systemctl start pmcd

# this should work fine for both old and fixed code
(window 1) watch -n 0.1 pminfo -F cgroup.cpuacct.usage --container $(existing container)

# now, schedule a container to the host, get new container name

# this only works with fixed branch
(window 2) check pminfo -F cgroup.cpuacct.usage --container $(new container)

For the fail result, No value(s) available and use of default /docker path for instance ids 23 and 24 (new containers) vs specified path for 22.
(root) ~ # pminfo -F cgroup.cpuacct.usage containers.cgroup --container cd26cfc6-f91b-4381-93f3-a69b124df9dd

cgroup.cpuacct.usage
No value(s) available!

containers.cgroup
.... (lots of containers) ....
    inst [22 or ""a175514ccdfd1ba67d055dec687b1586b95b47e44f9f0218d31d4f2d481d2c2c""] value ""/containers.slice/titus-executor@default__53566aaa-6b8f-4bc6-917b-c206e60789d7.service/a175514ccdfd1ba67d055dec687b1586b95b47e4""
    inst [23 or ""34e19c804fad613b07799e4919d5b54317afb5588656be802ea17d435a998140""] value ""/docker/34e19c804fad613b07799e4919d5b54317afb5588656be802ea17d435a998140""
    inst [24 or ""68680a4f3f68345daae075452aa200712d4af61f2c93fd18ef9106f6032a0cfe""] value ""/docker/68680a4f3f68345daae075452aa200712d4af61f2c93fd18ef9106f6032a0cfe""

For the pass result usage is correctly fetched and containers.cgroup value is correctly populated.
(root) ~ # pminfo -F cgroup.cpuacct.usage containers.cgroup --container ebb556d5-5896-4c40-abbe-73587b2bdeea

cgroup.cpuacct.usage
    inst [4 or ""/containers.slice/titus-executor@default__ebb556d5-5896-4c40-abbe-73587b2bdeea.service/66a8385a337f3686a3ebc9cb5a7e7195fccbc45c78da3ce588d5c0e403164bf2""] value 55070448

containers.cgroup
....
    inst [23 or ""66a8385a337f3686a3ebc9cb5a7e7195fccbc45c78da3ce588d5c0e403164bf2""] value ""/containers.slice/titus-executor@default__ebb556d5-5896-4c40-abbe-73587b2bdeea.service/66a8385a337f3686a3ebc9cb5a7e7195fccbc45c""

(Don't pay too much attention to specific container ids, since the pmcd was restarted between requests, indoms get reordered, and containers are coming and going on this machine).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,781,2019-10-22T20:57:40Z,2019-11-04T09:31:32Z,2019-11-04T09:31:32Z,CLOSED,False,50,10,2,https://github.com/jasonk000,Handle incomplete container setup,2,[],https://github.com/performancecopilot/pcp/pull/781,https://github.com/goodwinos,4,https://github.com/performancecopilot/pcp/pull/781#issuecomment-548100831,"If a non-default cgroup fs path is used, and the container is not quite
set up before polling begins, an invalid entry could be cached. This
prevents the container from being properly discovered once the container
becomes available.
So, when executing the fallback default path, check that the file exists
before accepting it as a correct fallback.
Fixes #770","Hi Jason, is there ment to be an additional commit for this .. I'm not seeing it and the access() call is still always failing.
git checkout -b jasonk000-test-fallback-cgroup-paths master
git pull https://github.com/jasonk000/pcp.git test-fallback-cgroup-paths


Seems to have pulled in the same patch (just with a new commit ID) :
$ git show c6eb09a4a992b7a2fe1594ca13c9b04469345334 | diff - ~/patches/jayson.patch
1c1
< commit c6eb09a4a992b7a2fe1594ca13c9b04469345334
---
> commit c5304636b7b90ba31ed395f52e8724d7f8d84d7f

[~/patches/jayson.patch is the old patch we were workign with yesterday]
Cheers",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,781,2019-10-22T20:57:40Z,2019-11-04T09:31:32Z,2019-11-04T09:31:32Z,CLOSED,False,50,10,2,https://github.com/jasonk000,Handle incomplete container setup,2,[],https://github.com/performancecopilot/pcp/pull/781,https://github.com/jasonk000,5,https://github.com/performancecopilot/pcp/pull/781#issuecomment-548106863,"If a non-default cgroup fs path is used, and the container is not quite
set up before polling begins, an invalid entry could be cached. This
prevents the container from being properly discovered once the container
becomes available.
So, when executing the fallback default path, check that the file exists
before accepting it as a correct fallback.
Fixes #770","no further commits yet @goodwinos , just a rebase; i'm also attempting to set up a qa environment",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,781,2019-10-22T20:57:40Z,2019-11-04T09:31:32Z,2019-11-04T09:31:32Z,CLOSED,False,50,10,2,https://github.com/jasonk000,Handle incomplete container setup,2,[],https://github.com/performancecopilot/pcp/pull/781,https://github.com/natoscott,6,https://github.com/performancecopilot/pcp/pull/781#issuecomment-549275834,"If a non-default cgroup fs path is used, and the container is not quite
set up before polling begins, an invalid entry could be cached. This
prevents the container from being properly discovered once the container
becomes available.
So, when executing the fallback default path, check that the file exists
before accepting it as a correct fallback.
Fixes #770",(merged into pcp-5.0.1),True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,782,2019-10-28T23:07:17Z,2019-10-29T01:56:40Z,2020-08-18T21:29:43Z,MERGED,True,70,34,11,https://github.com/kmcdonell,mostly check-vm updates Changes committed to git@github.com:kmcdonell/pcp.git 20191022,20,[],https://github.com/performancecopilot/pcp/pull/782,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/782,"Ken McDonell (15):
Makepkgs: update for FreeBSD 10.x and 11.x ... don't use Python2
qa/admin/other-packages/manifest: updates for FreeBSD (zpool)
qa/admin/other-packages/*: updates for RHEL 7.6
src/libpcp_web/src/exports: remove duplicate pmDiscoverClose entry
src/libpcp/src/getdate.y & src/libpcp_web/src/query_parser.y: pure parser changes
qa/admin/other-packages/unavailable: updates for openSUSE Leap 15.0
qa/README.vm: small SUSE/openSUSE corrections
qa/admin/other-packages/unavailable: updates for CentOS 6.10
qa/admin/other-packages/unavailable: updates for LinuxMint 17.3
qa/admin/other-packages/require: need python2-devel for Fedora 28
qa/README.vm: update current versions of OpenBSD
qa/admin/other-packages: updates for Fedora 27
qa/admin/whatami: be more defensive about pmprobe
qa/admin/other-packages/manifest: updates for OpenBSD 6.4
qa/README.vm: fill in the missing OpenBSD system upgrade recipe
Makepkgs                            |    6 +++---
qa/README.vm                        |   29 +++++++++++++++++++++++++----
qa/admin/other-packages/manifest    |    4 ++--
qa/admin/other-packages/require     |    5 +++--
qa/admin/other-packages/skip        |    6 +++---
qa/admin/other-packages/unavailable |   10 +++++-----
qa/admin/whatami                    |    5 ++++-
src/libpcp/src/getdate.y            |    7 ++++---
src/libpcp_web/src/exports          |    1 -
src/libpcp_web/src/query_parser.y   |   11 ++++++++++-
10 files changed, 59 insertions(+), 25 deletions(-)
Details ...
commit ca20887
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 29 10:05:51 2019 +1100
qa/README.vm: fill in the missing OpenBSD system upgrade recipe

commit 8024cdd
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 29 10:05:16 2019 +1100
qa/admin/other-packages/manifest: updates for OpenBSD 6.4

commit 1da72fc
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 29 10:03:47 2019 +1100
qa/admin/whatami: be more defensive about pmprobe

pmprobe may be installed, so which(1) returns goodness, but the libpcp
libraries may not be there (botched upgrade, or system upgrade as in
OpenBSD 6.3 -> 6.4).

commit a58e7bb
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Oct 27 06:54:04 2019 +1100
qa/admin/other-packages: updates for Fedora 27

Another EOL platform, I know.  But all the while it keeps working
in the QA Farm I'll keep updating these control files.

commit d0e7edc
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Oct 25 19:14:04 2019 +1100
qa/README.vm: update current versions of OpenBSD

commit 08a89ff
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Oct 25 19:09:36 2019 +1100
qa/admin/other-packages/require: need python2-devel for Fedora 28

This seems to depend on both python2 and python3 being installed.
I know Fedora 28 is at EOL, but I suspect this issue is present in
other platforms where multiple versions of Python are installed,
so making the change here provides a pattern on how to fix it if
the issue reappears elsewhere.

commit bcb1fa1
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 23 20:41:30 2019 +1100
qa/admin/other-packages/unavailable: updates for LinuxMint 17.3

commit 83a2125
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 23 20:35:19 2019 +1100
qa/admin/other-packages/unavailable: updates for CentOS 6.10

commit 97356dc
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 23 08:20:04 2019 +1100
qa/README.vm: small SUSE/openSUSE corrections

commit 1e4941d
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 23 08:19:45 2019 +1100
qa/admin/other-packages/unavailable: updates for openSUSE Leap 15.0

commit cb6ab34
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 22 21:15:12 2019 +1100
src/libpcp/src/getdate.y & src/libpcp_web/src/query_parser.y: pure parser changes

Since we don't use yacc any more, and ever since bison 3.0 (circa 2014),
both syntatic forms have been accepted, namely
    %pure-parser
and
    %define api.pure

But as of bison 3.3 (released Jan 2019) the former is flagged as
deprecated, so use the latter form unconditionally now.

commit 4fac91a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 22 21:09:58 2019 +1100
src/libpcp_web/src/exports: remove duplicate pmDiscoverClose entry

Ignored in most places, but was causing a build error on OpenIndiana
2019.04.

commit a7178e7
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 22 10:37:22 2019 +1100
qa/admin/other-packages/*: updates for RHEL 7.6

commit 8b33f98
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 22 08:56:55 2019 +1100
qa/admin/other-packages/manifest: updates for FreeBSD (zpool)

commit ae7dd5e
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 22 08:49:38 2019 +1100
Makepkgs: update for FreeBSD 10.x and 11.x ... don't use Python2","Ken McDonell (15):
Makepkgs: update for FreeBSD 10.x and 11.x ... don't use Python2
qa/admin/other-packages/manifest: updates for FreeBSD (zpool)
qa/admin/other-packages/*: updates for RHEL 7.6
src/libpcp_web/src/exports: remove duplicate pmDiscoverClose entry
src/libpcp/src/getdate.y & src/libpcp_web/src/query_parser.y: pure parser changes
qa/admin/other-packages/unavailable: updates for openSUSE Leap 15.0
qa/README.vm: small SUSE/openSUSE corrections
qa/admin/other-packages/unavailable: updates for CentOS 6.10
qa/admin/other-packages/unavailable: updates for LinuxMint 17.3
qa/admin/other-packages/require: need python2-devel for Fedora 28
qa/README.vm: update current versions of OpenBSD
qa/admin/other-packages: updates for Fedora 27
qa/admin/whatami: be more defensive about pmprobe
qa/admin/other-packages/manifest: updates for OpenBSD 6.4
qa/README.vm: fill in the missing OpenBSD system upgrade recipe
Makepkgs                            |    6 +++---
qa/README.vm                        |   29 +++++++++++++++++++++++++----
qa/admin/other-packages/manifest    |    4 ++--
qa/admin/other-packages/require     |    5 +++--
qa/admin/other-packages/skip        |    6 +++---
qa/admin/other-packages/unavailable |   10 +++++-----
qa/admin/whatami                    |    5 ++++-
src/libpcp/src/getdate.y            |    7 ++++---
src/libpcp_web/src/exports          |    1 -
src/libpcp_web/src/query_parser.y   |   11 ++++++++++-
10 files changed, 59 insertions(+), 25 deletions(-)
Details ...
commit ca20887
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 29 10:05:51 2019 +1100
qa/README.vm: fill in the missing OpenBSD system upgrade recipe

commit 8024cdd
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 29 10:05:16 2019 +1100
qa/admin/other-packages/manifest: updates for OpenBSD 6.4

commit 1da72fc
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 29 10:03:47 2019 +1100
qa/admin/whatami: be more defensive about pmprobe

pmprobe may be installed, so which(1) returns goodness, but the libpcp
libraries may not be there (botched upgrade, or system upgrade as in
OpenBSD 6.3 -> 6.4).

commit a58e7bb
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Oct 27 06:54:04 2019 +1100
qa/admin/other-packages: updates for Fedora 27

Another EOL platform, I know.  But all the while it keeps working
in the QA Farm I'll keep updating these control files.

commit d0e7edc
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Oct 25 19:14:04 2019 +1100
qa/README.vm: update current versions of OpenBSD

commit 08a89ff
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Oct 25 19:09:36 2019 +1100
qa/admin/other-packages/require: need python2-devel for Fedora 28

This seems to depend on both python2 and python3 being installed.
I know Fedora 28 is at EOL, but I suspect this issue is present in
other platforms where multiple versions of Python are installed,
so making the change here provides a pattern on how to fix it if
the issue reappears elsewhere.

commit bcb1fa1
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 23 20:41:30 2019 +1100
qa/admin/other-packages/unavailable: updates for LinuxMint 17.3

commit 83a2125
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 23 20:35:19 2019 +1100
qa/admin/other-packages/unavailable: updates for CentOS 6.10

commit 97356dc
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 23 08:20:04 2019 +1100
qa/README.vm: small SUSE/openSUSE corrections

commit 1e4941d
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Oct 23 08:19:45 2019 +1100
qa/admin/other-packages/unavailable: updates for openSUSE Leap 15.0

commit cb6ab34
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 22 21:15:12 2019 +1100
src/libpcp/src/getdate.y & src/libpcp_web/src/query_parser.y: pure parser changes

Since we don't use yacc any more, and ever since bison 3.0 (circa 2014),
both syntatic forms have been accepted, namely
    %pure-parser
and
    %define api.pure

But as of bison 3.3 (released Jan 2019) the former is flagged as
deprecated, so use the latter form unconditionally now.

commit 4fac91a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 22 21:09:58 2019 +1100
src/libpcp_web/src/exports: remove duplicate pmDiscoverClose entry

Ignored in most places, but was causing a build error on OpenIndiana
2019.04.

commit a7178e7
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 22 10:37:22 2019 +1100
qa/admin/other-packages/*: updates for RHEL 7.6

commit 8b33f98
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 22 08:56:55 2019 +1100
qa/admin/other-packages/manifest: updates for FreeBSD (zpool)

commit ae7dd5e
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 22 08:49:38 2019 +1100
Makepkgs: update for FreeBSD 10.x and 11.x ... don't use Python2",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,783,2019-10-31T17:26:31Z,2019-11-04T15:34:47Z,2020-09-21T15:50:05Z,MERGED,True,132,18,10,https://github.com/andreasgerstmayr,pmdabpftrace custom output block,2,[],https://github.com/performancecopilot/pcp/pull/783,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/783,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,784,2019-10-31T18:47:11Z,2019-11-05T17:56:05Z,2020-09-21T15:50:06Z,MERGED,True,126,28,13,https://github.com/andreasgerstmayr,endcontext callback for Python PMDAs,3,[],https://github.com/performancecopilot/pcp/pull/784,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/784,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,785,2019-11-04T03:04:29Z,2019-11-04T09:33:18Z,2020-08-18T21:29:48Z,MERGED,True,181,138,16,https://github.com/kmcdonell,qa Changes committed to git@github.com:kmcdonell/pcp.git 20191103,6,[],https://github.com/performancecopilot/pcp/pull/785,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/785,"Ken McDonell (3):
qa/common.check: dodge valgind botch on Arch Linux (vm34)
qa: pm{pmie,logger}_{check,daily} access issues
qa/common.bcc: openSUSE 15.1 has same bad libbcc as 15.0
qa/151          |    8 ++++++-
qa/280          |   12 ++++++-----
qa/314          |   10 +++++----
qa/338          |   61 +++++++++++++++++++++++++++++++++-----------------------
qa/338.out      |   40 ++++++++++++------------------------
qa/430          |    9 ++++++--
qa/503          |   52 +++++++++++++++++++++++++++--------------------
qa/530          |   48 ++++++++++++++++++++++++--------------------
qa/530.out      |   40 ++++++++++++------------------------
qa/532          |    8 ++++++-
qa/641          |    7 +++++-
qa/658          |    7 +++++-
qa/664          |    7 +++++-
qa/925          |    2 -
qa/common.bcc   |    3 +-
qa/common.check |    5 +++-
16 files changed, 181 insertions(+), 138 deletions(-)
Details ...
commit 8b85f9e
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Nov 4 14:01:56 2019 +1100
qa/common.bcc: openSUSE 15.1 has same bad libbcc as 15.0

Update pattern to _notrun some tests on this platform.

commit 413e17d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Nov 3 20:05:59 2019 +1100
qa: pm{pmie,logger}_{check,daily} access issues

On Arch Linux (vm34), many tests were failing because these scripts
do something like this ...
    touch ""$PROGLOG""
    chown $PCP_USER:$PCP_GROUP ""$PROGLOG"" >/dev/null 2>&1
    exec 1>""$PROGLOG"" 2>&1
which does not work with -l $tmp.log from the qa scripts (permission
issue trying to create $PROGLOG).

Fix is to take better control of permission issues in qa tests and make
sure everything we need is owned by user $PCP_USER and group $PCP_GROUP.

commit 2c9643a
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Nov 3 20:03:57 2019 +1100
qa/common.check: dodge valgind botch on Arch Linux (vm34)

was seeing lines like this ...
    warning: addVar: in range ... outside all rx mapped areas
... filter 'em away.","Ken McDonell (3):
qa/common.check: dodge valgind botch on Arch Linux (vm34)
qa: pm{pmie,logger}_{check,daily} access issues
qa/common.bcc: openSUSE 15.1 has same bad libbcc as 15.0
qa/151          |    8 ++++++-
qa/280          |   12 ++++++-----
qa/314          |   10 +++++----
qa/338          |   61 +++++++++++++++++++++++++++++++++-----------------------
qa/338.out      |   40 ++++++++++++------------------------
qa/430          |    9 ++++++--
qa/503          |   52 +++++++++++++++++++++++++++--------------------
qa/530          |   48 ++++++++++++++++++++++++--------------------
qa/530.out      |   40 ++++++++++++------------------------
qa/532          |    8 ++++++-
qa/641          |    7 +++++-
qa/658          |    7 +++++-
qa/664          |    7 +++++-
qa/925          |    2 -
qa/common.bcc   |    3 +-
qa/common.check |    5 +++-
16 files changed, 181 insertions(+), 138 deletions(-)
Details ...
commit 8b85f9e
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Nov 4 14:01:56 2019 +1100
qa/common.bcc: openSUSE 15.1 has same bad libbcc as 15.0

Update pattern to _notrun some tests on this platform.

commit 413e17d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Nov 3 20:05:59 2019 +1100
qa: pm{pmie,logger}_{check,daily} access issues

On Arch Linux (vm34), many tests were failing because these scripts
do something like this ...
    touch ""$PROGLOG""
    chown $PCP_USER:$PCP_GROUP ""$PROGLOG"" >/dev/null 2>&1
    exec 1>""$PROGLOG"" 2>&1
which does not work with -l $tmp.log from the qa scripts (permission
issue trying to create $PROGLOG).

Fix is to take better control of permission issues in qa tests and make
sure everything we need is owned by user $PCP_USER and group $PCP_GROUP.

commit 2c9643a
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Nov 3 20:03:57 2019 +1100
qa/common.check: dodge valgind botch on Arch Linux (vm34)

was seeing lines like this ...
    warning: addVar: in range ... outside all rx mapped areas
... filter 'em away.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,786,2019-11-05T00:38:26Z,2019-11-05T22:19:07Z,2020-08-18T21:29:54Z,MERGED,True,1,1,1,https://github.com/kmcdonell,fix the fix for mk.pmdbg Changes committed to git@github.com:kmcdonell/pcp.git 20191105,3,[],https://github.com/performancecopilot/pcp/pull/786,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/786,"Ken McDonell (1):
src/libpcp/src/mk.pmdbg: rework last change
src/libpcp/src/mk.pmdbg |    2 +-
1 file changed, 1 insertion(+), 1 deletion(-)
Details ...
commit 70adcc3
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Nov 5 07:05:18 2019 +1100
src/libpcp/src/mk.pmdbg: rework last change

The change made in commit 9f267705 for Fedora 31 to workaround a change
in awk behaviour (why, oh, why did anyone think changing awk in this way
was a good idea), unfortunately breaks with older versions of awk, e.g.
on RHEL 6.10.

Rework the change to avoid the \{ in the pattern (which is 100% legal
and should not generate a warning) and replace this with [{].

Sigh.","Ken McDonell (1):
src/libpcp/src/mk.pmdbg: rework last change
src/libpcp/src/mk.pmdbg |    2 +-
1 file changed, 1 insertion(+), 1 deletion(-)
Details ...
commit 70adcc3
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Nov 5 07:05:18 2019 +1100
src/libpcp/src/mk.pmdbg: rework last change

The change made in commit 9f267705 for Fedora 31 to workaround a change
in awk behaviour (why, oh, why did anyone think changing awk in this way
was a good idea), unfortunately breaks with older versions of awk, e.g.
on RHEL 6.10.

Rework the change to avoid the \{ in the pattern (which is 100% legal
and should not generate a warning) and replace this with [{].

Sigh.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,788,2019-11-06T19:54:19Z,2019-11-07T20:37:08Z,2020-08-18T21:29:59Z,MERGED,True,24,0,4,https://github.com/kmcdonell,qa - BCC PMDA Changes committed to git@github.com:kmcdonell/pcp.git 20191107,1,[],https://github.com/performancecopilot/pcp/pull/788,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/788,"Ken McDonell (1):
qa/1155,1157,1170,1178: notrun on Linux 5.2 kernels
qa/1155 |    6 ++++++
qa/1157 |    6 ++++++
qa/1170 |    6 ++++++
qa/1178 |    6 ++++++
4 files changed, 24 insertions(+)
Details ...
commit 1f21bed
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Nov 7 06:50:43 2019 +1100
qa/1155,1157,1170,1178: notrun on Linux 5.2 kernels

The Linux 5.2 kernel headers, BPF and some of the PCP BCC modules are
not good friends, so don't run these tests on just this kernel version.

Thanks Marko.","Ken McDonell (1):
qa/1155,1157,1170,1178: notrun on Linux 5.2 kernels
qa/1155 |    6 ++++++
qa/1157 |    6 ++++++
qa/1170 |    6 ++++++
qa/1178 |    6 ++++++
4 files changed, 24 insertions(+)
Details ...
commit 1f21bed
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Nov 7 06:50:43 2019 +1100
qa/1155,1157,1170,1178: notrun on Linux 5.2 kernels

The Linux 5.2 kernel headers, BPF and some of the PCP BCC modules are
not good friends, so don't run these tests on just this kernel version.

Thanks Marko.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,795,2019-11-15T18:12:42Z,2019-11-21T20:02:12Z,2020-09-21T15:50:08Z,MERGED,True,828,319,43,https://github.com/andreasgerstmayr,parallel CI,12,[],https://github.com/performancecopilot/pcp/pull/795,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/795,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,797,2019-11-21T00:04:02Z,2019-11-22T07:22:34Z,2020-08-18T21:30:04Z,MERGED,True,70,39,3,https://github.com/kmcdonell,misc qa Changes committed to git@github.com:kmcdonell/pcp.git 20191121,2,[],https://github.com/performancecopilot/pcp/pull/797,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/797,"Ken McDonell (2):
qa/756: add filter to handle filesystem directory order non-determinism
qa/886: repeat slowly after me ... do NOT use == with test(1)
qa/756     |   37 ++++++++++++++++++++++++++++++---
qa/756.out |   68 ++++++++++++++++++++++++++++++-------------------------------
qa/886     |    4 +--
3 files changed, 70 insertions(+), 39 deletions(-)
Details ...
commit 9bb95b6
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Nov 21 10:51:42 2019 +1100
qa/886: repeat slowly after me ... do NOT use == with test(1)

commit 9caf4ac
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Nov 21 10:43:57 2019 +1100
qa/756: add filter to handle filesystem directory order non-determinism

Was failing on more than half my QA machines.","Ken McDonell (2):
qa/756: add filter to handle filesystem directory order non-determinism
qa/886: repeat slowly after me ... do NOT use == with test(1)
qa/756     |   37 ++++++++++++++++++++++++++++++---
qa/756.out |   68 ++++++++++++++++++++++++++++++-------------------------------
qa/886     |    4 +--
3 files changed, 70 insertions(+), 39 deletions(-)
Details ...
commit 9bb95b6
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Nov 21 10:51:42 2019 +1100
qa/886: repeat slowly after me ... do NOT use == with test(1)

commit 9caf4ac
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Nov 21 10:43:57 2019 +1100
qa/756: add filter to handle filesystem directory order non-determinism

Was failing on more than half my QA machines.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,805,2019-12-07T17:12:45Z,2019-12-08T21:23:18Z,2019-12-09T16:07:08Z,MERGED,True,2,2,2,https://github.com/jelly,configure: make build reproducible,1,[],https://github.com/performancecopilot/pcp/pull/805,https://github.com/jelly,1,https://github.com/performancecopilot/pcp/pull/805,"pcp.lsm embeds the build date which makes the package un reproducible,
use SOURCE_DATE_EPOCH to always generate a deterministic builddate when
reproducing pcp.
Motiviation: https://reproducible-builds.org/
Signed-off-by: Jelle van der Waa jelle@archlinux.org","pcp.lsm embeds the build date which makes the package un reproducible,
use SOURCE_DATE_EPOCH to always generate a deterministic builddate when
reproducing pcp.
Motiviation: https://reproducible-builds.org/
Signed-off-by: Jelle van der Waa jelle@archlinux.org",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,805,2019-12-07T17:12:45Z,2019-12-08T21:23:18Z,2019-12-09T16:07:08Z,MERGED,True,2,2,2,https://github.com/jelly,configure: make build reproducible,1,[],https://github.com/performancecopilot/pcp/pull/805,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/805#issuecomment-562995781,"pcp.lsm embeds the build date which makes the package un reproducible,
use SOURCE_DATE_EPOCH to always generate a deterministic builddate when
reproducing pcp.
Motiviation: https://reproducible-builds.org/
Signed-off-by: Jelle van der Waa jelle@archlinux.org",@jelly thanks!  I've tweaked it a little to provide a fallback for platforms that do not provide a long-option 'date' command - please double check?  cheers.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,808,2019-12-09T11:19:21Z,2019-12-09T23:03:21Z,2020-09-21T15:50:10Z,MERGED,True,9,10,3,https://github.com/andreasgerstmayr,pmdabpftrace: don't show errors in logs which are due to normal operation,2,[],https://github.com/performancecopilot/pcp/pull/808,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/808,"implement (empty) label callback (hides [Mon Dec  9 11:43:43] pmdabpftrace(3898) Debug: pmdaLabel: InDom 151.104010[16]: Missing metric value(s))
don't log PM_ERR_VALUE errors (log only if libpmda debug flag is set), hides [Mon Dec  9 11:43:54] pmdabpftrace(4533) Error: pmdaFetch: Fetch callback error from metric PMID 151.102.12[-1]: Missing metric value(s)

these ""errors"" are normal, occurs when Grafana is querying data but the bpftrace script didn't collect any data yet","implement (empty) label callback (hides [Mon Dec  9 11:43:43] pmdabpftrace(3898) Debug: pmdaLabel: InDom 151.104010[16]: Missing metric value(s))
don't log PM_ERR_VALUE errors (log only if libpmda debug flag is set), hides [Mon Dec  9 11:43:54] pmdabpftrace(4533) Error: pmdaFetch: Fetch callback error from metric PMID 151.102.12[-1]: Missing metric value(s)

these ""errors"" are normal, occurs when Grafana is querying data but the bpftrace script didn't collect any data yet",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,809,2019-12-10T12:47:12Z,2019-12-11T03:15:05Z,2019-12-11T03:15:05Z,MERGED,True,0,923,11,https://github.com/kurik,"Removed test cases 709,809,850,1125,1264 as pmcollect is deprecated.",1,[],https://github.com/performancecopilot/pcp/pull/809,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/809,"The following test cases 709,809,850,1125,1264 use pmcollect which is already deprecated.
This patch removes these testcases from pcp-testsuite.","The following test cases 709,809,850,1125,1264 use pmcollect which is already deprecated.
This patch removes these testcases from pcp-testsuite.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,814,2019-12-28T20:05:45Z,2020-01-07T02:37:20Z,2020-08-18T21:30:10Z,MERGED,True,2,2,1,https://github.com/kmcdonell,fix rhel6 build breakage Changes committed to git@github.com:kmcdonell/pcp.git 20191229,1,[],https://github.com/performancecopilot/pcp/pull/814,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/814,"Ken McDonell (1):
build/rpm/pcp.spec.in: hostname change
build/rpm/pcp.spec.in |    4 ++--
1 file changed, 2 insertions(+), 2 deletions(-)
Details ...
commit c0c0c6e
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Dec 29 07:01:37 2019 +1100
build/rpm/pcp.spec.in: hostname change

Requires: and BuildRequires: clauses need /bin/hostname not hostname
(need the executable and the associated package is not hostname).

Tracks changes in fedora.spec.

Without this change the build is broken on RHEL6 and CentOS 6.","Ken McDonell (1):
build/rpm/pcp.spec.in: hostname change
build/rpm/pcp.spec.in |    4 ++--
1 file changed, 2 insertions(+), 2 deletions(-)
Details ...
commit c0c0c6e
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Dec 29 07:01:37 2019 +1100
build/rpm/pcp.spec.in: hostname change

Requires: and BuildRequires: clauses need /bin/hostname not hostname
(need the executable and the associated package is not hostname).

Tracks changes in fedora.spec.

Without this change the build is broken on RHEL6 and CentOS 6.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,818,2020-01-09T13:34:38Z,2020-01-13T04:34:47Z,2020-01-13T04:34:47Z,MERGED,True,1,3,2,https://github.com/ddiss,Fix compilation with -fno-common (new GCC 10 default),2,[],https://github.com/performancecopilot/pcp/pull/818,https://github.com/ddiss,1,https://github.com/performancecopilot/pcp/pull/818,"As described in https://bugzilla.opensuse.org/show_bug.cgi?id=1160244

Starting from the upcoming GCC release 10, the default of -fcommon option will change to -fno-common:
In C, global variables with multiple tentative definitions will result in linker errors. Global variable accesses are also more efficient on various targets.
Porting advice:
A common mistake in C is omitting extern when declaring a global variable in a header file.  If the header is included by several files it
results in multiple definitions of the same variable.  In previous GCC versions this error is ignored.  GCC 10 defaults to -fno-common,
which means a linker error will now be reported. To fix this, use extern in header files when declaring global variables, and ensure each global is defined in exactly one C file. As a workaround, legacy C code can be compiled with -fcommon.
  int x;  // tentative definition - avoid in header files 
  extern int y;  // correct declaration in a header file 

Recommendations for package maintainers:

report the violation to upstream
cherry pick a fix from upsteam","As described in https://bugzilla.opensuse.org/show_bug.cgi?id=1160244

Starting from the upcoming GCC release 10, the default of -fcommon option will change to -fno-common:
In C, global variables with multiple tentative definitions will result in linker errors. Global variable accesses are also more efficient on various targets.
Porting advice:
A common mistake in C is omitting extern when declaring a global variable in a header file.  If the header is included by several files it
results in multiple definitions of the same variable.  In previous GCC versions this error is ignored.  GCC 10 defaults to -fno-common,
which means a linker error will now be reported. To fix this, use extern in header files when declaring global variables, and ensure each global is defined in exactly one C file. As a workaround, legacy C code can be compiled with -fcommon.
  int x;  // tentative definition - avoid in header files 
  extern int y;  // correct declaration in a header file 

Recommendations for package maintainers:

report the violation to upstream
cherry pick a fix from upsteam",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,818,2020-01-09T13:34:38Z,2020-01-13T04:34:47Z,2020-01-13T04:34:47Z,MERGED,True,1,3,2,https://github.com/ddiss,Fix compilation with -fno-common (new GCC 10 default),2,[],https://github.com/performancecopilot/pcp/pull/818,https://github.com/ddiss,2,https://github.com/performancecopilot/pcp/pull/818#issuecomment-572597637,"As described in https://bugzilla.opensuse.org/show_bug.cgi?id=1160244

Starting from the upcoming GCC release 10, the default of -fcommon option will change to -fno-common:
In C, global variables with multiple tentative definitions will result in linker errors. Global variable accesses are also more efficient on various targets.
Porting advice:
A common mistake in C is omitting extern when declaring a global variable in a header file.  If the header is included by several files it
results in multiple definitions of the same variable.  In previous GCC versions this error is ignored.  GCC 10 defaults to -fno-common,
which means a linker error will now be reported. To fix this, use extern in header files when declaring global variables, and ensure each global is defined in exactly one C file. As a workaround, legacy C code can be compiled with -fcommon.
  int x;  // tentative definition - avoid in header files 
  extern int y;  // correct declaration in a header file 

Recommendations for package maintainers:

report the violation to upstream
cherry pick a fix from upsteam","FWIW, I've also submitted the sds fix upstream via antirez/sds#120 , but given the backlog of PRs and lack of activity, I doubt it'll be merged there any time soon.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,822,2020-01-20T01:02:32Z,2020-01-21T22:43:38Z,2020-01-21T23:24:50Z,MERGED,True,3,0,1,https://github.com/shogo-matsumoto,pcp-pidstat: fix out of range error when reading metrics from an archive,1,[],https://github.com/performancecopilot/pcp/pull/822,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/822,"pcp pidstat fails with IndexError when proc.psinfo.utime metric is found prior to
kernel.uname.* or hinv.ncpu metrics.
Check whether those metrics exist before starting to show process information.
Resolves: #625
The error in my environment is as follows.
# pcp pidstat -a archive
Traceback (most recent call last):
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 916, in <module>
    sts = manager.run()
  File ""/usr/lib64/python3.6/site-packages/pcp/pmcc.py"", line 665, in run
    self._printer.report(self)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 838, in report
    self.print_machine_info(group, manager)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 820, in print_machine_info
    header_string += group['kernel.uname.sysname'].netValues[0][2] + '  '
IndexError: list index out of range","pcp pidstat fails with IndexError when proc.psinfo.utime metric is found prior to
kernel.uname.* or hinv.ncpu metrics.
Check whether those metrics exist before starting to show process information.
Resolves: #625
The error in my environment is as follows.
# pcp pidstat -a archive
Traceback (most recent call last):
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 916, in <module>
    sts = manager.run()
  File ""/usr/lib64/python3.6/site-packages/pcp/pmcc.py"", line 665, in run
    self._printer.report(self)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 838, in report
    self.print_machine_info(group, manager)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 820, in print_machine_info
    header_string += group['kernel.uname.sysname'].netValues[0][2] + '  '
IndexError: list index out of range",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,822,2020-01-20T01:02:32Z,2020-01-21T22:43:38Z,2020-01-21T23:24:50Z,MERGED,True,3,0,1,https://github.com/shogo-matsumoto,pcp-pidstat: fix out of range error when reading metrics from an archive,1,[],https://github.com/performancecopilot/pcp/pull/822,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/822#issuecomment-576475524,"pcp pidstat fails with IndexError when proc.psinfo.utime metric is found prior to
kernel.uname.* or hinv.ncpu metrics.
Check whether those metrics exist before starting to show process information.
Resolves: #625
The error in my environment is as follows.
# pcp pidstat -a archive
Traceback (most recent call last):
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 916, in <module>
    sts = manager.run()
  File ""/usr/lib64/python3.6/site-packages/pcp/pmcc.py"", line 665, in run
    self._printer.report(self)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 838, in report
    self.print_machine_info(group, manager)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 820, in print_machine_info
    header_string += group['kernel.uname.sysname'].netValues[0][2] + '  '
IndexError: list index out of range","@shogo-matsumoto looking at the code I see a few other metrics not catered for - print_machine_info() also uses kernel.uname.release, kernel.uname.nodename and kernel.uname.machine.
Perhaps instead of testing specific metrics in this way, we could add a try/except around print_machine_info() and return if IndexError is the exception?
I'll write a little QA test for this - for that, we could use an archive based on qa/archives/pcp-pidstat but with these metrics removed via pmlogextract(1).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,822,2020-01-20T01:02:32Z,2020-01-21T22:43:38Z,2020-01-21T23:24:50Z,MERGED,True,3,0,1,https://github.com/shogo-matsumoto,pcp-pidstat: fix out of range error when reading metrics from an archive,1,[],https://github.com/performancecopilot/pcp/pull/822,https://github.com/shogo-matsumoto,3,https://github.com/performancecopilot/pcp/pull/822#issuecomment-576483603,"pcp pidstat fails with IndexError when proc.psinfo.utime metric is found prior to
kernel.uname.* or hinv.ncpu metrics.
Check whether those metrics exist before starting to show process information.
Resolves: #625
The error in my environment is as follows.
# pcp pidstat -a archive
Traceback (most recent call last):
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 916, in <module>
    sts = manager.run()
  File ""/usr/lib64/python3.6/site-packages/pcp/pmcc.py"", line 665, in run
    self._printer.report(self)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 838, in report
    self.print_machine_info(group, manager)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 820, in print_machine_info
    header_string += group['kernel.uname.sysname'].netValues[0][2] + '  '
IndexError: list index out of range","@natoscott Thank you for your comment. As you mentioned my fix is not perfect, so I think it's good idea to use try/exception to handle this issue. It seems that we need also to surround get_ncpu() considering the case of missing hinv.ncpu metric.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,822,2020-01-20T01:02:32Z,2020-01-21T22:43:38Z,2020-01-21T23:24:50Z,MERGED,True,3,0,1,https://github.com/shogo-matsumoto,pcp-pidstat: fix out of range error when reading metrics from an archive,1,[],https://github.com/performancecopilot/pcp/pull/822,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/822#issuecomment-576485517,"pcp pidstat fails with IndexError when proc.psinfo.utime metric is found prior to
kernel.uname.* or hinv.ncpu metrics.
Check whether those metrics exist before starting to show process information.
Resolves: #625
The error in my environment is as follows.
# pcp pidstat -a archive
Traceback (most recent call last):
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 916, in <module>
    sts = manager.run()
  File ""/usr/lib64/python3.6/site-packages/pcp/pmcc.py"", line 665, in run
    self._printer.report(self)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 838, in report
    self.print_machine_info(group, manager)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 820, in print_machine_info
    header_string += group['kernel.uname.sysname'].netValues[0][2] + '  '
IndexError: list index out of range","@shogo-matsumoto yes, I think you are correct.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,822,2020-01-20T01:02:32Z,2020-01-21T22:43:38Z,2020-01-21T23:24:50Z,MERGED,True,3,0,1,https://github.com/shogo-matsumoto,pcp-pidstat: fix out of range error when reading metrics from an archive,1,[],https://github.com/performancecopilot/pcp/pull/822,https://github.com/natoscott,5,https://github.com/performancecopilot/pcp/pull/822#issuecomment-576535085,"pcp pidstat fails with IndexError when proc.psinfo.utime metric is found prior to
kernel.uname.* or hinv.ncpu metrics.
Check whether those metrics exist before starting to show process information.
Resolves: #625
The error in my environment is as follows.
# pcp pidstat -a archive
Traceback (most recent call last):
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 916, in <module>
    sts = manager.run()
  File ""/usr/lib64/python3.6/site-packages/pcp/pmcc.py"", line 665, in run
    self._printer.report(self)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 838, in report
    self.print_machine_info(group, manager)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 820, in print_machine_info
    header_string += group['kernel.uname.sysname'].netValues[0][2] + '  '
IndexError: list index out of range","@shogo-matsumoto how does this patch look to you?
https://paste.centos.org/view/3e180e8b",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,822,2020-01-20T01:02:32Z,2020-01-21T22:43:38Z,2020-01-21T23:24:50Z,MERGED,True,3,0,1,https://github.com/shogo-matsumoto,pcp-pidstat: fix out of range error when reading metrics from an archive,1,[],https://github.com/performancecopilot/pcp/pull/822,https://github.com/shogo-matsumoto,6,https://github.com/performancecopilot/pcp/pull/822#issuecomment-576547038,"pcp pidstat fails with IndexError when proc.psinfo.utime metric is found prior to
kernel.uname.* or hinv.ncpu metrics.
Check whether those metrics exist before starting to show process information.
Resolves: #625
The error in my environment is as follows.
# pcp pidstat -a archive
Traceback (most recent call last):
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 916, in <module>
    sts = manager.run()
  File ""/usr/lib64/python3.6/site-packages/pcp/pmcc.py"", line 665, in run
    self._printer.report(self)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 838, in report
    self.print_machine_info(group, manager)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 820, in print_machine_info
    header_string += group['kernel.uname.sysname'].netValues[0][2] + '  '
IndexError: list index out of range","@natoscott  Thank you. I haven't test yet, but  isn't it necessary to check IndexError for ncpu = self.get_ncpu(group) like the following?
diff --git a/src/pcp/pidstat/pcp-pidstat.py b/src/pcp/pidstat/pcp-pidstat.py
index 1c95267f7..2c0f85c26 100755
--- a/src/pcp/pidstat/pcp-pidstat.py
+++ b/src/pcp/pidstat/pcp-pidstat.py
@@ -833,16 +833,20 @@ class PidstatReport(pmcc.MetricGroupPrinter):
             # need two fetches to report rate converted counter metrics
             return

-        if not self.Machine_info_count:
-            self.print_machine_info(group, manager)
-            self.Machine_info_count = 1
+        try:
+            ncpu = self.get_ncpu(group)
+            if not self.Machine_info_count:
+                self.print_machine_info(group, manager)
+                self.Machine_info_count = 1
+        except IndexError:
+            # missing some metrics
+            return

         ts = group.contextCache.pmLocaltime(int(group.timestamp))
         timestamp = time.strftime(PidstatOptions.timefmt, ts.struct_time())
         interval_in_seconds = self.timeStampDelta(group)
         header_indentation = ""        "" if len(timestamp)<9 else (len(timestamp)-7)*"" ""
         value_indentation = ((len(header_indentation)+9)-len(timestamp))*"" ""
-        ncpu = self.get_ncpu(group)

         metric_repository = ReportingMetricRepository(group)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,822,2020-01-20T01:02:32Z,2020-01-21T22:43:38Z,2020-01-21T23:24:50Z,MERGED,True,3,0,1,https://github.com/shogo-matsumoto,pcp-pidstat: fix out of range error when reading metrics from an archive,1,[],https://github.com/performancecopilot/pcp/pull/822,https://github.com/natoscott,7,https://github.com/performancecopilot/pcp/pull/822#issuecomment-576898382,"pcp pidstat fails with IndexError when proc.psinfo.utime metric is found prior to
kernel.uname.* or hinv.ncpu metrics.
Check whether those metrics exist before starting to show process information.
Resolves: #625
The error in my environment is as follows.
# pcp pidstat -a archive
Traceback (most recent call last):
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 916, in <module>
    sts = manager.run()
  File ""/usr/lib64/python3.6/site-packages/pcp/pmcc.py"", line 665, in run
    self._printer.report(self)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 838, in report
    self.print_machine_info(group, manager)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 820, in print_machine_info
    header_string += group['kernel.uname.sysname'].netValues[0][2] + '  '
IndexError: list index out of range","@shogo-matsumoto I don't think that's strictly necessary because print_machine_info() already calls get_ncpu() internally, so it will trigger the exception on first call.  However, your updated code does make the reason for the exception more clear so let's go with that.  Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,822,2020-01-20T01:02:32Z,2020-01-21T22:43:38Z,2020-01-21T23:24:50Z,MERGED,True,3,0,1,https://github.com/shogo-matsumoto,pcp-pidstat: fix out of range error when reading metrics from an archive,1,[],https://github.com/performancecopilot/pcp/pull/822,https://github.com/shogo-matsumoto,8,https://github.com/performancecopilot/pcp/pull/822#issuecomment-576934384,"pcp pidstat fails with IndexError when proc.psinfo.utime metric is found prior to
kernel.uname.* or hinv.ncpu metrics.
Check whether those metrics exist before starting to show process information.
Resolves: #625
The error in my environment is as follows.
# pcp pidstat -a archive
Traceback (most recent call last):
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 916, in <module>
    sts = manager.run()
  File ""/usr/lib64/python3.6/site-packages/pcp/pmcc.py"", line 665, in run
    self._printer.report(self)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 838, in report
    self.print_machine_info(group, manager)
  File ""/usr/libexec/pcp/bin/pcp-pidstat"", line 820, in print_machine_info
    header_string += group['kernel.uname.sysname'].netValues[0][2] + '  '
IndexError: list index out of range","@natoscott

print_machine_info() already calls get_ncpu() internally,

I misunderstood that. Thank you for merging. I tested and confirmed that the issue does not reproduce at the latest commit.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,823,2020-01-23T10:10:14Z,2020-01-24T23:49:37Z,2020-08-18T21:30:31Z,MERGED,True,174,28,16,https://github.com/kmcdonell,mostly qa Changes committed to git@github.com:kmcdonell/pcp.git 20200110,13,[],https://github.com/performancecopilot/pcp/pull/823,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/823,"Ken McDonell (13):
qa/1423: extend sleeps
qa/054: try to avoid ""hang"" in QA Farm
qa/1155,11157,1170 and 1178: _not run for Ubuntu 19.10
qa/1211: drop QAHOST filtering ... not needed
qa/510: try to fix failures on RHEL/CentOS 6.10
qa/1695: increase delay so valgrind can get started
qa/admin/other-packages: changes for Ubuntu 19.10
qa/check.callback.sample: make sure pmlogger failures are reported
qa/667: various improvements
qa/667: fix previous commit
qa/src/test_pcp.python: don't use unicode strings with Python2
qa/1661: foo.{a,b} is not Bourne shell syntax
qa/1661.out: track cosmetic change in 1661
qa/054                              |   12 +++
qa/1155                             |   17 +++++
qa/1157                             |   17 +++++
qa/1170                             |   17 +++++
qa/1178                             |   17 +++++
qa/1211                             |    1
qa/1423                             |    9 ++
qa/1661                             |   29 +++++++-
qa/1661.out                         |    2
qa/1695                             |    2
qa/510                              |   44 +++++++++++--
qa/667                              |  121 ++++++++++++++++++------------------
qa/admin/other-packages/manifest    |    2
qa/admin/other-packages/unavailable |    1
qa/check.callback.sample            |    6 +
qa/src/test_pcp.python              |    5 +
16 files changed, 224 insertions(+), 78 deletions(-)
Details ...
commit 9c0cda8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 17:00:37 2020 +1100
qa/1661.out: track cosmetic change in 1661

commit 07d8768
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 16:48:06 2020 +1100
qa/1661: foo.{a,b} is not Bourne shell syntax

This came from csh and has infected bash ... if we're really using
/bin/sh, then foo.{a,b} is 'foo.{a,b}' not 'foo.a foo.b'.

commit 0769bc2
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 16:18:44 2020 +1100
qa/src/test_pcp.python: don't use unicode strings with Python2

Was failing on RHEL 6.10 (vm28) where Python 2.6.6 is the only
Python installed.

commit c97cb07
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 16:10:13 2020 +1100
qa/667: fix previous commit

Accidenty pasted some comment text near the start of the file that
was not supposed to be there.

commit 5983942
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 15:48:47 2020 +1100
qa/667: various improvements

1. move the pickled/text port from 2004/2003 to 42004/42003 to avoid
   collisions with carbon-cache on Ubunutu (the test checks for this
   but was _notrun for no other good reason)
2. better filtering of the socat output to avoid buffering and
   ordering problems that were picking the wrong lines although
   the expected lines were also present ... repeated failures on
   RHEL 6.10 (vm28) have now gone away

commit 2a8d714
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 14:57:53 2020 +1100
qa/check.callback.sample: make sure pmlogger failures are reported

Logic error failed to report details when test 870 fails twice and
output is the same both times.

commit 47b39cf
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 06:49:15 2020 +1100
qa/admin/other-packages: changes for Ubuntu 19.10

commit 5d0d9dc
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 22 11:53:31 2020 +1100
qa/1695: increase delay so valgrind can get started

On some VMs this takes a _long_ time, and there is no reliable
way to know when it is safe to start the test.

commit cc45581
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 22 11:46:19 2020 +1100
qa/510: try to fix failures on RHEL/CentOS 6.10

This has been a problematic test for vm14 and vm28 for sometime.

The change takes a much more anal approach to stopping and restarting
the primary pmlogger instance and seems to be more robust.

commit c44cc9a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jan 14 16:10:40 2020 +1100
qa/1211: drop QAHOST filtering ... not needed

And was causing a a failure on bozo where bozo-laptop -> QAHOST-laptop

commit 6463d0f
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jan 14 16:06:04 2020 +1100
qa/1155,11157,1170 and 1178: _not run for Ubuntu 19.10

BPF compiler and linux headers are not getting along.

commit 02e6e18
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jan 10 06:49:53 2020 +1100
qa/054: try to avoid ""hang"" in QA Farm

The (added) comment says it all ...

    This used to log just hinv.ncpu, but as of late 2019 I started seeing
    this test hanging and the QA runs never finished across a number of
    machines in the QA Farm.  The problem is the remote pmcd (usually, but
    not always, vm01 for me), where the pmDesc for hinv.ncpu was unavailable
    because there was no PMCD agent for the domain ... this means the linux
    PMDA was dead, but pmcd was alive.
    Added sample.seconds in the hope that this will avoid the problem for
    this test ... leaving the linux PMDA issue to be investigated separately.

commit 0a18837
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jan 10 06:40:23 2020 +1100
qa/1423: extend sleeps

There is a risky and racy timing issue in this test.

On vm01 it left QA hung as pcp2spark was in a state from which it
would never exit.","Ken McDonell (13):
qa/1423: extend sleeps
qa/054: try to avoid ""hang"" in QA Farm
qa/1155,11157,1170 and 1178: _not run for Ubuntu 19.10
qa/1211: drop QAHOST filtering ... not needed
qa/510: try to fix failures on RHEL/CentOS 6.10
qa/1695: increase delay so valgrind can get started
qa/admin/other-packages: changes for Ubuntu 19.10
qa/check.callback.sample: make sure pmlogger failures are reported
qa/667: various improvements
qa/667: fix previous commit
qa/src/test_pcp.python: don't use unicode strings with Python2
qa/1661: foo.{a,b} is not Bourne shell syntax
qa/1661.out: track cosmetic change in 1661
qa/054                              |   12 +++
qa/1155                             |   17 +++++
qa/1157                             |   17 +++++
qa/1170                             |   17 +++++
qa/1178                             |   17 +++++
qa/1211                             |    1
qa/1423                             |    9 ++
qa/1661                             |   29 +++++++-
qa/1661.out                         |    2
qa/1695                             |    2
qa/510                              |   44 +++++++++++--
qa/667                              |  121 ++++++++++++++++++------------------
qa/admin/other-packages/manifest    |    2
qa/admin/other-packages/unavailable |    1
qa/check.callback.sample            |    6 +
qa/src/test_pcp.python              |    5 +
16 files changed, 224 insertions(+), 78 deletions(-)
Details ...
commit 9c0cda8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 17:00:37 2020 +1100
qa/1661.out: track cosmetic change in 1661

commit 07d8768
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 16:48:06 2020 +1100
qa/1661: foo.{a,b} is not Bourne shell syntax

This came from csh and has infected bash ... if we're really using
/bin/sh, then foo.{a,b} is 'foo.{a,b}' not 'foo.a foo.b'.

commit 0769bc2
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 16:18:44 2020 +1100
qa/src/test_pcp.python: don't use unicode strings with Python2

Was failing on RHEL 6.10 (vm28) where Python 2.6.6 is the only
Python installed.

commit c97cb07
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 16:10:13 2020 +1100
qa/667: fix previous commit

Accidenty pasted some comment text near the start of the file that
was not supposed to be there.

commit 5983942
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 15:48:47 2020 +1100
qa/667: various improvements

1. move the pickled/text port from 2004/2003 to 42004/42003 to avoid
   collisions with carbon-cache on Ubunutu (the test checks for this
   but was _notrun for no other good reason)
2. better filtering of the socat output to avoid buffering and
   ordering problems that were picking the wrong lines although
   the expected lines were also present ... repeated failures on
   RHEL 6.10 (vm28) have now gone away

commit 2a8d714
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 14:57:53 2020 +1100
qa/check.callback.sample: make sure pmlogger failures are reported

Logic error failed to report details when test 870 fails twice and
output is the same both times.

commit 47b39cf
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 23 06:49:15 2020 +1100
qa/admin/other-packages: changes for Ubuntu 19.10

commit 5d0d9dc
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 22 11:53:31 2020 +1100
qa/1695: increase delay so valgrind can get started

On some VMs this takes a _long_ time, and there is no reliable
way to know when it is safe to start the test.

commit cc45581
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 22 11:46:19 2020 +1100
qa/510: try to fix failures on RHEL/CentOS 6.10

This has been a problematic test for vm14 and vm28 for sometime.

The change takes a much more anal approach to stopping and restarting
the primary pmlogger instance and seems to be more robust.

commit c44cc9a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jan 14 16:10:40 2020 +1100
qa/1211: drop QAHOST filtering ... not needed

And was causing a a failure on bozo where bozo-laptop -> QAHOST-laptop

commit 6463d0f
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jan 14 16:06:04 2020 +1100
qa/1155,11157,1170 and 1178: _not run for Ubuntu 19.10

BPF compiler and linux headers are not getting along.

commit 02e6e18
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jan 10 06:49:53 2020 +1100
qa/054: try to avoid ""hang"" in QA Farm

The (added) comment says it all ...

    This used to log just hinv.ncpu, but as of late 2019 I started seeing
    this test hanging and the QA runs never finished across a number of
    machines in the QA Farm.  The problem is the remote pmcd (usually, but
    not always, vm01 for me), where the pmDesc for hinv.ncpu was unavailable
    because there was no PMCD agent for the domain ... this means the linux
    PMDA was dead, but pmcd was alive.
    Added sample.seconds in the hope that this will avoid the problem for
    this test ... leaving the linux PMDA issue to be investigated separately.

commit 0a18837
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jan 10 06:40:23 2020 +1100
qa/1423: extend sleeps

There is a risky and racy timing issue in this test.

On vm01 it left QA hung as pcp2spark was in a state from which it
would never exit.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,824,2020-01-23T21:21:47Z,2020-01-24T23:49:37Z,2020-08-18T21:30:36Z,MERGED,True,219,43,18,https://github.com/kmcdonell,FreeBSD PMDA corrections,15,[],https://github.com/performancecopilot/pcp/pull/824,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/824,"Changes committed to git@github.com:kmcdonell/pcp.git 20200124
Ken McDonell (1):
src/pmdas/freebsd: some metrics upgraded to 64-bit in recent FreeBSD releases
src/pmdas/freebsd/freebsd.c         |   50 +++++++++++++++++++++++++-----------
src/pmdas/freebsd/freebsd_misc.conf |   10 +++++++
2 files changed, 45 insertions(+), 15 deletions(-)
Details ...
commit 985b89f
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jan 24 07:01:58 2020 +1100
src/pmdas/freebsd: some metrics upgraded to 64-bit in recent FreeBSD releases

Handle either/or 32-bit or 64-bit values returned from sysctl()
in these cases and promote the PMAPI type to U64 (will mean odd
wrap behavior if the underlying kernel value is still U32 on older
versions, but this is better than making the metadata different on
different versions).

Add pmlogrewrite rules to reflect these changes.","Changes committed to git@github.com:kmcdonell/pcp.git 20200124
Ken McDonell (1):
src/pmdas/freebsd: some metrics upgraded to 64-bit in recent FreeBSD releases
src/pmdas/freebsd/freebsd.c         |   50 +++++++++++++++++++++++++-----------
src/pmdas/freebsd/freebsd_misc.conf |   10 +++++++
2 files changed, 45 insertions(+), 15 deletions(-)
Details ...
commit 985b89f
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jan 24 07:01:58 2020 +1100
src/pmdas/freebsd: some metrics upgraded to 64-bit in recent FreeBSD releases

Handle either/or 32-bit or 64-bit values returned from sysctl()
in these cases and promote the PMAPI type to U64 (will mean odd
wrap behavior if the underlying kernel value is still U32 on older
versions, but this is better than making the metadata different on
different versions).

Add pmlogrewrite rules to reflect these changes.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,825,2020-01-25T00:21:44Z,2020-01-28T23:16:19Z,2020-01-29T07:07:50Z,MERGED,True,218,118,2,https://github.com/goodwinos,libpcp_web: survive daily log-roll in discovery archive tracking,7,[],https://github.com/performancecopilot/pcp/pull/825,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/825,"Note: Pushed this to a branch because it clearly needs some new QA.
There is also a small possibility of a segfault if pmDiscoverPurgeDeleted()
deletes an entry whilst a traversal is in progress. Some simple local mutex will
fix that.
RHBZ#1785560 - pcp-grafana cease updating after some time
Add read-only lock detection and suspend discovery callbacks when
log-rolling is concurrently active. The log control scripts use
these filesystem locks for mutex (pmlogger_daily, pmlogger_check
and the pmlogger rc script). When the locks clear, clean up our
tracking for what's been deleted, compressed, or merged, examine
what's left and then resume callback processing, discover new
archives etc. This is particularly tricky for pmlogger_daily with
multiple pmloggers (farm) because it starts and then sometimes
restarts each pmlogger shortly afterwards (if systemd decides to
kill the first one!) and uses extended log filenames if any of
this happens within the same minute, merges, compresses, deletes
tmp archives and sometimes re-writes. By suspending callbacks during
such activity / log-rolls, discovery can deal with just about
anything now.
Better handling of deleted archives whilst we're tracking
them (or currently reading them). Most improvements here come
from the lock detection but also by switching to using
regular glibc opendir/readdir - the uv_fs_scandir and
uv_fs_stat functions didn't seem to work well with rapidly
changing directories. Sometimes uv_fs_stat would succeed
on a recently unlinked file, and uv_fs_scandir would
sometimes not include recently created files. Sometimes.
This all made debugging too difficult and using scandir is less
scalable anyway.
Only process directory-changed callbacks rather than changes
to individual archives - identify which tracked archives are
below the changed directory (it's cheap to do so) in the
filesystem - usually at most one active archive is being written
in each directory. Process metadata and logvol data thru
to EOL for those archive(s). This should be more scalable for
large logger farms, but may need callback throttling in the
future, so e.g. we would process callbacks less frequently but
churn thru more metadata and logvol data in each callback
at the expense of slightly higher pmlogger -> redis latency.
Tracked directories with no active archives are not processed
at all (e.g. old pmlogger directories no longer used).
Following from the new logvol handling for RHBZ#1785560 in
previous work, further improve switching log volumes when
pmFetchArchive switches to a newly discovered log volume
(that wasn't there when the context was first opened) but
doesn't correctly seek to the start of the new logvol.
We now do this correctly in process_logvol() when pmFetchArchive
reaches EOL or gets PM_ERR_LOGREC. This is one of the causes
for pmproxy/redis clients to stop updating - new log vols
were being logtailed from the wrong initial logvol ac_offset
and thus finding no new data to send to the registered callbacks
(redis).
Improved diagnostics and added timestamps where it helps in
various places for pmproxy -Ddiscovery.
QA for this lot is work in progress - it's mostly overnight
pmlogger_daily soak testing with multiple loggers running,
each with small logvol switching settings. Formal QA tests
coming next week.","Note: Pushed this to a branch because it clearly needs some new QA.
There is also a small possibility of a segfault if pmDiscoverPurgeDeleted()
deletes an entry whilst a traversal is in progress. Some simple local mutex will
fix that.
RHBZ#1785560 - pcp-grafana cease updating after some time
Add read-only lock detection and suspend discovery callbacks when
log-rolling is concurrently active. The log control scripts use
these filesystem locks for mutex (pmlogger_daily, pmlogger_check
and the pmlogger rc script). When the locks clear, clean up our
tracking for what's been deleted, compressed, or merged, examine
what's left and then resume callback processing, discover new
archives etc. This is particularly tricky for pmlogger_daily with
multiple pmloggers (farm) because it starts and then sometimes
restarts each pmlogger shortly afterwards (if systemd decides to
kill the first one!) and uses extended log filenames if any of
this happens within the same minute, merges, compresses, deletes
tmp archives and sometimes re-writes. By suspending callbacks during
such activity / log-rolls, discovery can deal with just about
anything now.
Better handling of deleted archives whilst we're tracking
them (or currently reading them). Most improvements here come
from the lock detection but also by switching to using
regular glibc opendir/readdir - the uv_fs_scandir and
uv_fs_stat functions didn't seem to work well with rapidly
changing directories. Sometimes uv_fs_stat would succeed
on a recently unlinked file, and uv_fs_scandir would
sometimes not include recently created files. Sometimes.
This all made debugging too difficult and using scandir is less
scalable anyway.
Only process directory-changed callbacks rather than changes
to individual archives - identify which tracked archives are
below the changed directory (it's cheap to do so) in the
filesystem - usually at most one active archive is being written
in each directory. Process metadata and logvol data thru
to EOL for those archive(s). This should be more scalable for
large logger farms, but may need callback throttling in the
future, so e.g. we would process callbacks less frequently but
churn thru more metadata and logvol data in each callback
at the expense of slightly higher pmlogger -> redis latency.
Tracked directories with no active archives are not processed
at all (e.g. old pmlogger directories no longer used).
Following from the new logvol handling for RHBZ#1785560 in
previous work, further improve switching log volumes when
pmFetchArchive switches to a newly discovered log volume
(that wasn't there when the context was first opened) but
doesn't correctly seek to the start of the new logvol.
We now do this correctly in process_logvol() when pmFetchArchive
reaches EOL or gets PM_ERR_LOGREC. This is one of the causes
for pmproxy/redis clients to stop updating - new log vols
were being logtailed from the wrong initial logvol ac_offset
and thus finding no new data to send to the registered callbacks
(redis).
Improved diagnostics and added timestamps where it helps in
various places for pmproxy -Ddiscovery.
QA for this lot is work in progress - it's mostly overnight
pmlogger_daily soak testing with multiple loggers running,
each with small logvol switching settings. Formal QA tests
coming next week.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,826,2020-01-25T09:30:08Z,2020-01-28T05:54:56Z,2020-08-18T21:30:42Z,MERGED,True,1,1,1,https://github.com/kmcdonell,freebsd PMDA (take 2),1,[],https://github.com/performancecopilot/pcp/pull/826,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/826,"Changes committed to git@github.com:kmcdonell/pcp.git 20200125
Ken McDonell (1):
src/pmdas/freebsd/freebsd.c: rework last 32->64 bit change
src/pmdas/freebsd/freebsd.c |    2 +-
1 file changed, 1 insertion(+), 1 deletion(-)
Details ...
commit ef11d7d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jan 25 20:23:53 2020 +1100
src/pmdas/freebsd/freebsd.c: rework last 32->64 bit change

Botched the second argument to do_sysctl(), so it worked on newer
platforms where the metrics are 64-bit in the kernel, but was failing
on the older platforms where the metrics are 32-bit in the kernel.

Fixed now.","Changes committed to git@github.com:kmcdonell/pcp.git 20200125
Ken McDonell (1):
src/pmdas/freebsd/freebsd.c: rework last 32->64 bit change
src/pmdas/freebsd/freebsd.c |    2 +-
1 file changed, 1 insertion(+), 1 deletion(-)
Details ...
commit ef11d7d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jan 25 20:23:53 2020 +1100
src/pmdas/freebsd/freebsd.c: rework last 32->64 bit change

Botched the second argument to do_sysctl(), so it worked on newer
platforms where the metrics are 64-bit in the kernel, but was failing
on the older platforms where the metrics are 32-bit in the kernel.

Fixed now.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,827,2020-01-26T10:46:28Z,2020-01-28T05:54:55Z,2020-08-18T21:30:47Z,MERGED,True,49,17,11,https://github.com/kmcdonell,qa,9,[],https://github.com/performancecopilot/pcp/pull/827,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/827,"Changes committed to git@github.com:kmcdonell/pcp.git 20200126
Ken McDonell (8):
qa/581: add another expected disk name to the filter
qa/243: tweak logic
qa/common.filter: add netcheck pmda to _filter_optional_pmda_instances()
qa/admin/other-packages/unavailable: no bpftrace for CentOS 7.7
qa/950: small changes
scripts/pcp-push: add blank line after PR title
qa/1160: filter out Python unicode u'...' babble
qa/1161: filter out Python unicode u'...' babble
qa/1160                             |    1 +
qa/1161                             |    1 +
qa/243                              |   36 ++++++++++++++++++++++++++++--------
qa/243.out.ipv6                     |    5 ++---
qa/243.out.nonipv6                  |    5 ++---
qa/581                              |    1 +
qa/950                              |   11 ++++++++++-
qa/admin/other-packages/unavailable |    2 +-
qa/common.filter                    |    1 +
scripts/pcp-push                    |    1 +
10 files changed, 48 insertions(+), 16 deletions(-)
Details ...
commit 4860061
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 21:35:45 2020 +1100
qa/1161: filter out Python unicode u'...' babble

Was failing on CentOS 7.7 (vm04).

commit dfc4994
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 21:32:02 2020 +1100
qa/1160: filter out Python unicode u'...' babble

Was failing on CentOS 7.7 (vm04).

commit 83d8ba3
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 21:24:20 2020 +1100
scripts/pcp-push: add blank line after PR title

commit 43f4cf7
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 14:42:32 2020 +1100
qa/950: small changes

- avoid race between avahi_service and avahi_verify (the service can
  be ""started"" from sysctl but the socket is not yet created) ... add
  an arbitrary 5 sec sleep
- filter out timeout errors when trying to contact other (remote) pmproxy
  services

Without this change, the test was always failing on CentOS 7.7 (vm04).

commit e834042
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 14:31:15 2020 +1100
qa/admin/other-packages/unavailable: no bpftrace for CentOS 7.7

Assume same holds for earlier 7.x releases.

commit c40baaf
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 14:24:36 2020 +1100
qa/common.filter: add netcheck pmda to _filter_optional_pmda_instances()

Was causing qa/650 failures on CentOS 7.7 (vm04) where the netcheck
PMDA was installed (not by default, but probably caused by an unrelated
QA failure in the netcheck PMDA tests).

commit 0adf67c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 14:10:28 2020 +1100
qa/243: tweak logic

1. be a little more patient waiting for the first pmcd.log to appear
2. use a different log file for the second pmcd ... makes error
   checking and diff'ing logic clearer.

Apparently avoids non-deterministic failures on CentOS 7.7 (vm04).

commit f90192c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 14:09:03 2020 +1100
qa/581: add another expected disk name to the filter

da[0-9] this time ... from FreeBSD 11 (vm10).","Changes committed to git@github.com:kmcdonell/pcp.git 20200126
Ken McDonell (8):
qa/581: add another expected disk name to the filter
qa/243: tweak logic
qa/common.filter: add netcheck pmda to _filter_optional_pmda_instances()
qa/admin/other-packages/unavailable: no bpftrace for CentOS 7.7
qa/950: small changes
scripts/pcp-push: add blank line after PR title
qa/1160: filter out Python unicode u'...' babble
qa/1161: filter out Python unicode u'...' babble
qa/1160                             |    1 +
qa/1161                             |    1 +
qa/243                              |   36 ++++++++++++++++++++++++++++--------
qa/243.out.ipv6                     |    5 ++---
qa/243.out.nonipv6                  |    5 ++---
qa/581                              |    1 +
qa/950                              |   11 ++++++++++-
qa/admin/other-packages/unavailable |    2 +-
qa/common.filter                    |    1 +
scripts/pcp-push                    |    1 +
10 files changed, 48 insertions(+), 16 deletions(-)
Details ...
commit 4860061
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 21:35:45 2020 +1100
qa/1161: filter out Python unicode u'...' babble

Was failing on CentOS 7.7 (vm04).

commit dfc4994
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 21:32:02 2020 +1100
qa/1160: filter out Python unicode u'...' babble

Was failing on CentOS 7.7 (vm04).

commit 83d8ba3
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 21:24:20 2020 +1100
scripts/pcp-push: add blank line after PR title

commit 43f4cf7
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 14:42:32 2020 +1100
qa/950: small changes

- avoid race between avahi_service and avahi_verify (the service can
  be ""started"" from sysctl but the socket is not yet created) ... add
  an arbitrary 5 sec sleep
- filter out timeout errors when trying to contact other (remote) pmproxy
  services

Without this change, the test was always failing on CentOS 7.7 (vm04).

commit e834042
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 14:31:15 2020 +1100
qa/admin/other-packages/unavailable: no bpftrace for CentOS 7.7

Assume same holds for earlier 7.x releases.

commit c40baaf
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 14:24:36 2020 +1100
qa/common.filter: add netcheck pmda to _filter_optional_pmda_instances()

Was causing qa/650 failures on CentOS 7.7 (vm04) where the netcheck
PMDA was installed (not by default, but probably caused by an unrelated
QA failure in the netcheck PMDA tests).

commit 0adf67c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 14:10:28 2020 +1100
qa/243: tweak logic

1. be a little more patient waiting for the first pmcd.log to appear
2. use a different log file for the second pmcd ... makes error
   checking and diff'ing logic clearer.

Apparently avoids non-deterministic failures on CentOS 7.7 (vm04).

commit f90192c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jan 26 14:09:03 2020 +1100
qa/581: add another expected disk name to the filter

da[0-9] this time ... from FreeBSD 11 (vm10).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,828,2020-01-29T11:32:29Z,2020-01-30T21:54:41Z,2020-08-18T21:30:52Z,MERGED,True,159,73,9,https://github.com/kmcdonell,qa,11,[],https://github.com/performancecopilot/pcp/pull/828,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/828,"Changes committed to git@github.com:kmcdonell/pcp.git 20200129
Ken McDonell (6):
qa/188: fixes for OpenSuse 15.1
qa/703: _notrun if no httpd running
qa/valgrind-suppress-3.15.0: couple of extra cases to suppress
qa/1351: stretch test duration a bit
qa/1155, 1170 and 1178: bpf compilation issues on openSUSE Leap 15.1
qa/1661: adding some diags to help diagnose failures.
qa/1155                     |   17 +++++++++
qa/1170                     |   17 +++++++++
qa/1178                     |   17 +++++++++
qa/1351                     |    4 +-
qa/1661                     |   18 +++++++++
qa/188                      |    4 +-
qa/188.opensuse.15          |   69 ------------------------------------
qa/703                      |    3 +
qa/valgrind-suppress-3.15.0 |   83 ++++++++++++++++++++++++++++++++++++++++++++
9 files changed, 159 insertions(+), 73 deletions(-)
Details ...
commit b612f9c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 29 10:43:30 2020 +1100
qa/1661: adding some diags to help diagnose failures.

The test is not working on vm24 (openSUSE Leap 15.1).

Unfortunately I'm none the wiser with the diagnostic output
so I'll handball this one to Mark.

commit cefaea9
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 29 10:39:21 2020 +1100
qa/1155, 1170 and 1178: bpf compilation issues on openSUSE Leap 15.1

Same header mismatch issue as seen on Ubuntu 19.10 ...

include/linux/bpf-cgroup.h:36:32: error: field has incomplete type 'struct bpf_cgroup_storage_key'
        struct bpf_cgroup_storage_key key;

Only option is _notrun.

commit 2f5ad18
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 29 10:38:29 2020 +1100
qa/1351: stretch test duration a bit

Trying to avoid failure on vm24 (openSUSE Leap 15.1) where not
all expected output lines appear.

commit ad23797
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 29 10:35:11 2020 +1100
qa/valgrind-suppress-3.15.0: couple of extra cases to suppress

1. bogus mem leak in __pmProcessAddArg (seen before with other
   versions of valgrind)
2. uninitialized data use in libcrypto initialization code

Both seen on vm24 (openSUSE Leap 15.1).

commit 36f26e6
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 29 06:57:50 2020 +1100
qa/703: _notrun if no httpd running

No httpd => most unlikely to find http logs that the weblog PMDA
needs!

Seen on vm24 (OpenSuSE Leap 15.1).

commit 8a3da78
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 29 06:46:37 2020 +1100
qa/188: fixes for OpenSuse 15.1

1. fix script to deal with 15.1
2. cull 188.opensuse.15 (it is the same as 188.linux)","Changes committed to git@github.com:kmcdonell/pcp.git 20200129
Ken McDonell (6):
qa/188: fixes for OpenSuse 15.1
qa/703: _notrun if no httpd running
qa/valgrind-suppress-3.15.0: couple of extra cases to suppress
qa/1351: stretch test duration a bit
qa/1155, 1170 and 1178: bpf compilation issues on openSUSE Leap 15.1
qa/1661: adding some diags to help diagnose failures.
qa/1155                     |   17 +++++++++
qa/1170                     |   17 +++++++++
qa/1178                     |   17 +++++++++
qa/1351                     |    4 +-
qa/1661                     |   18 +++++++++
qa/188                      |    4 +-
qa/188.opensuse.15          |   69 ------------------------------------
qa/703                      |    3 +
qa/valgrind-suppress-3.15.0 |   83 ++++++++++++++++++++++++++++++++++++++++++++
9 files changed, 159 insertions(+), 73 deletions(-)
Details ...
commit b612f9c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 29 10:43:30 2020 +1100
qa/1661: adding some diags to help diagnose failures.

The test is not working on vm24 (openSUSE Leap 15.1).

Unfortunately I'm none the wiser with the diagnostic output
so I'll handball this one to Mark.

commit cefaea9
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 29 10:39:21 2020 +1100
qa/1155, 1170 and 1178: bpf compilation issues on openSUSE Leap 15.1

Same header mismatch issue as seen on Ubuntu 19.10 ...

include/linux/bpf-cgroup.h:36:32: error: field has incomplete type 'struct bpf_cgroup_storage_key'
        struct bpf_cgroup_storage_key key;

Only option is _notrun.

commit 2f5ad18
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 29 10:38:29 2020 +1100
qa/1351: stretch test duration a bit

Trying to avoid failure on vm24 (openSUSE Leap 15.1) where not
all expected output lines appear.

commit ad23797
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 29 10:35:11 2020 +1100
qa/valgrind-suppress-3.15.0: couple of extra cases to suppress

1. bogus mem leak in __pmProcessAddArg (seen before with other
   versions of valgrind)
2. uninitialized data use in libcrypto initialization code

Both seen on vm24 (openSUSE Leap 15.1).

commit 36f26e6
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 29 06:57:50 2020 +1100
qa/703: _notrun if no httpd running

No httpd => most unlikely to find http logs that the weblog PMDA
needs!

Seen on vm24 (OpenSuSE Leap 15.1).

commit 8a3da78
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jan 29 06:46:37 2020 +1100
qa/188: fixes for OpenSuse 15.1

1. fix script to deal with 15.1
2. cull 188.opensuse.15 (it is the same as 188.linux)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,829,2020-01-30T20:14:11Z,2020-01-30T21:54:40Z,2020-08-18T21:30:58Z,MERGED,True,177,84,9,https://github.com/kmcdonell,qa/1661 diags,17,[],https://github.com/performancecopilot/pcp/pull/829,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/829,"Changes committed to git@github.com:kmcdonell/pcp.git 20200130
Ken McDonell (3):
Revert ""qa/1661: adding some diags to help diagnose failures.""
qa/1661: reinstate diagnostics
qa/1661: second part of missing diagnostics
Mark Goodwin (1):
qa: fix 1661 to work with multiple pmlogger/farm and add _check_series check
qa/1661 |   72 +++++++++++++++++++++++++++++++++++-----------------------------
1 file changed, 40 insertions(+), 32 deletions(-)
Details ...
commit c41eac2
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 30 17:24:15 2020 +1100
qa/1661: second part of missing diagnostics

commit d6cd8a8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 30 17:06:24 2020 +1100
qa/1661: reinstate diagnostics

Put commit b612f9c7 back.

commit 2623ad7
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 30 16:10:30 2020 +1100
Revert ""qa/1661: adding some diags to help diagnose failures.""

This reverts commit b612f9c7f3d6c782afa90cb4b182496293ab45af.

Moving my changes asside to avoid merge conflict with Mark's
next change.

commit 99d9669
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Thu Jan 30 15:09:18 2020 +1100
qa: fix 1661 to work with multiple pmlogger/farm and add _check_series check

Add _check_series check to the test which will _notrun on
platforms that do not support pmseries, e.g. no libuv.
This might fix Ken's issues with this test on opensuse,

Also fix the curvol check to work on systems with multiple
pmloggers running - just check the current logvol for one
of the pmloggers. This should fix Nathan's issues with this
test.","Changes committed to git@github.com:kmcdonell/pcp.git 20200130
Ken McDonell (3):
Revert ""qa/1661: adding some diags to help diagnose failures.""
qa/1661: reinstate diagnostics
qa/1661: second part of missing diagnostics
Mark Goodwin (1):
qa: fix 1661 to work with multiple pmlogger/farm and add _check_series check
qa/1661 |   72 +++++++++++++++++++++++++++++++++++-----------------------------
1 file changed, 40 insertions(+), 32 deletions(-)
Details ...
commit c41eac2
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 30 17:24:15 2020 +1100
qa/1661: second part of missing diagnostics

commit d6cd8a8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 30 17:06:24 2020 +1100
qa/1661: reinstate diagnostics

Put commit b612f9c7 back.

commit 2623ad7
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jan 30 16:10:30 2020 +1100
Revert ""qa/1661: adding some diags to help diagnose failures.""

This reverts commit b612f9c7f3d6c782afa90cb4b182496293ab45af.

Moving my changes asside to avoid merge conflict with Mark's
next change.

commit 99d9669
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Thu Jan 30 15:09:18 2020 +1100
qa: fix 1661 to work with multiple pmlogger/farm and add _check_series check

Add _check_series check to the test which will _notrun on
platforms that do not support pmseries, e.g. no libuv.
This might fix Ken's issues with this test on opensuse,

Also fix the curvol check to work on systems with multiple
pmloggers running - just check the current logvol for one
of the pmloggers. This should fix Nathan's issues with this
test.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,832,2020-02-02T00:56:08Z,2020-02-03T00:44:25Z,2020-08-18T21:31:03Z,MERGED,True,74,27,14,https://github.com/kmcdonell,"qa, selinux, small code changes",11,[],https://github.com/performancecopilot/pcp/pull/832,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/832,"Changes committed to git@github.com:kmcdonell/pcp.git 20200201
Ken McDonell (11):
qa/1362: tweaks for Ubuntu/Debian
selinux: assorted minor fixups
qa/admin/other-packages: update check-vm rules for redis on Ubuntu
build/rpm/pcp.spec.in: fix guard for
build/rpm/pcp.spec.in: fix guard for /usr/bin/hostname
qa/admin/other-packages/unavailable: add line for Debian bullseye/sid
qa/1185: refactor to use sample PMDA metrics
qa/1343: add df diagnostic on the fail path
src/python/pmapi.c: remove unused variable
qa/common.check: be more careful of crontab updates
qa/188: knock-on from last openSUSE change ... need small rework for SLES
build/rpm/pcp.spec.in               |    4 ++--
qa/1185                             |    6 +++---
qa/1185.out                         |   29 ++++++++++++++++++++---------
qa/1343                             |    1 +
qa/1362                             |   19 ++++++++++++++++++-
qa/1622                             |    9 +++++++++
qa/188                              |    4 +---
qa/917.out.in                       |    2 +-
qa/admin/other-packages/manifest    |    2 +-
qa/admin/other-packages/unavailable |    9 +++++----
qa/common.check                     |   13 ++++++++++++-
src/python/pmapi.c                  |    1 -
src/selinux/README                  |    2 +-
src/selinux/pcpupstream.te.in       |    2 +-
14 files changed, 75 insertions(+), 28 deletions(-)
Details ...
commit 43482c6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Feb 2 11:50:22 2020 +1100
qa/188: knock-on from last openSUSE change ... need small rework for SLES

commit 73b2df1
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Feb 2 11:49:03 2020 +1100
qa/common.check: be more careful of crontab updates

Need to cull the comments to avoid polluting the crontab with
3 comments for every time qa/255 is run.

commit 1e366fe
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Feb 2 07:09:47 2020 +1100
src/python/pmapi.c: remove unused variable

sts in pmUnits_int() ... observed by gcc on vm22 (F29).

commit f1e3a92
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 21:04:54 2020 +1100
qa/1343: add df diagnostic on the fail path

commit c0164a2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 21:03:29 2020 +1100
qa/1185: refactor to use sample PMDA metrics

Get away from the platform PMDAs that have non-deterministic
output across the platforms.

commit d5ef543
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 17:43:23 2020 +1100
qa/admin/other-packages/unavailable: add line for Debian bullseye/sid

commit a619335
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 17:39:22 2020 +1100
build/rpm/pcp.spec.in: fix guard for /usr/bin/hostname

Was busted in multiple ways ... build failed on vm14 CentOS 6.10 for
example.

commit e07d860
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 17:38:03 2020 +1100
build/rpm/pcp.spec.in: fix guard for

commit c5b5349
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 16:37:25 2020 +1100
qa/admin/other-packages: update check-vm rules for redis on Ubuntu

Package name seems to have changed over time for the client side.

These changes are incomplete ... more similar changes will be needed
as I stumble across other dpkg-based systems.

commit dc21263
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 16:33:15 2020 +1100
selinux: assorted minor fixups

- add ioctl to list of allowed ops in the pmda-smart block for
  fixed_disk_device_t:blk_file in the pcpupstream.te.in file
- update qa/917.out.in to match
- add some missing cases (not just the one above) to qa/1622
- update the README to stress that both qa 917 and 1622 need to
  be reviewed after pcpupstream.te.in changes

commit 3ce1fca
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 16:30:13 2020 +1100
qa/1362: tweaks for Ubuntu/Debian

- must use systemctl, not service, to force postgresql restart
- so add _notrun if systemctl not installed
- update comment re. postgresql major version upgrade steps for
  Ubuntu (and all Debian-based distros)","Changes committed to git@github.com:kmcdonell/pcp.git 20200201
Ken McDonell (11):
qa/1362: tweaks for Ubuntu/Debian
selinux: assorted minor fixups
qa/admin/other-packages: update check-vm rules for redis on Ubuntu
build/rpm/pcp.spec.in: fix guard for
build/rpm/pcp.spec.in: fix guard for /usr/bin/hostname
qa/admin/other-packages/unavailable: add line for Debian bullseye/sid
qa/1185: refactor to use sample PMDA metrics
qa/1343: add df diagnostic on the fail path
src/python/pmapi.c: remove unused variable
qa/common.check: be more careful of crontab updates
qa/188: knock-on from last openSUSE change ... need small rework for SLES
build/rpm/pcp.spec.in               |    4 ++--
qa/1185                             |    6 +++---
qa/1185.out                         |   29 ++++++++++++++++++++---------
qa/1343                             |    1 +
qa/1362                             |   19 ++++++++++++++++++-
qa/1622                             |    9 +++++++++
qa/188                              |    4 +---
qa/917.out.in                       |    2 +-
qa/admin/other-packages/manifest    |    2 +-
qa/admin/other-packages/unavailable |    9 +++++----
qa/common.check                     |   13 ++++++++++++-
src/python/pmapi.c                  |    1 -
src/selinux/README                  |    2 +-
src/selinux/pcpupstream.te.in       |    2 +-
14 files changed, 75 insertions(+), 28 deletions(-)
Details ...
commit 43482c6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Feb 2 11:50:22 2020 +1100
qa/188: knock-on from last openSUSE change ... need small rework for SLES

commit 73b2df1
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Feb 2 11:49:03 2020 +1100
qa/common.check: be more careful of crontab updates

Need to cull the comments to avoid polluting the crontab with
3 comments for every time qa/255 is run.

commit 1e366fe
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Feb 2 07:09:47 2020 +1100
src/python/pmapi.c: remove unused variable

sts in pmUnits_int() ... observed by gcc on vm22 (F29).

commit f1e3a92
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 21:04:54 2020 +1100
qa/1343: add df diagnostic on the fail path

commit c0164a2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 21:03:29 2020 +1100
qa/1185: refactor to use sample PMDA metrics

Get away from the platform PMDAs that have non-deterministic
output across the platforms.

commit d5ef543
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 17:43:23 2020 +1100
qa/admin/other-packages/unavailable: add line for Debian bullseye/sid

commit a619335
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 17:39:22 2020 +1100
build/rpm/pcp.spec.in: fix guard for /usr/bin/hostname

Was busted in multiple ways ... build failed on vm14 CentOS 6.10 for
example.

commit e07d860
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 17:38:03 2020 +1100
build/rpm/pcp.spec.in: fix guard for

commit c5b5349
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 16:37:25 2020 +1100
qa/admin/other-packages: update check-vm rules for redis on Ubuntu

Package name seems to have changed over time for the client side.

These changes are incomplete ... more similar changes will be needed
as I stumble across other dpkg-based systems.

commit dc21263
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 16:33:15 2020 +1100
selinux: assorted minor fixups

- add ioctl to list of allowed ops in the pmda-smart block for
  fixed_disk_device_t:blk_file in the pcpupstream.te.in file
- update qa/917.out.in to match
- add some missing cases (not just the one above) to qa/1622
- update the README to stress that both qa 917 and 1622 need to
  be reviewed after pcpupstream.te.in changes

commit 3ce1fca
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 1 16:30:13 2020 +1100
qa/1362: tweaks for Ubuntu/Debian

- must use systemctl, not service, to force postgresql restart
- so add _notrun if systemctl not installed
- update comment re. postgresql major version upgrade steps for
  Ubuntu (and all Debian-based distros)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,833,2020-02-04T04:08:31Z,2020-02-04T04:43:32Z,2020-02-04T04:43:32Z,MERGED,True,2,2,2,https://github.com/shogo-matsumoto,docs: add interval and samples arguments to usage of pcp-atop -r,1,[],https://github.com/performancecopilot/pcp/pull/833,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/833,It seems from the documents that these arguments are not available for pcp-atop -r although they works.,It seems from the documents that these arguments are not available for pcp-atop -r although they works.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,836,2020-02-06T22:35:19Z,2020-02-18T05:32:58Z,2020-02-18T05:32:58Z,MERGED,True,2970,702,42,https://github.com/Erbenos,pmdastatsd new QA and small agent changes,14,[],https://github.com/performancecopilot/pcp/pull/836,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/836,"New QA has better coverage than the old one. Includes a Valgrind test.
pmdastatsd received small changes to double metric values handling and improvements to clean up procedures.","New QA has better coverage than the old one. Includes a Valgrind test.
pmdastatsd received small changes to double metric values handling and improvements to clean up procedures.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,836,2020-02-06T22:35:19Z,2020-02-18T05:32:58Z,2020-02-18T05:32:58Z,MERGED,True,2970,702,42,https://github.com/Erbenos,pmdastatsd new QA and small agent changes,14,[],https://github.com/performancecopilot/pcp/pull/836,https://github.com/lzap,2,https://github.com/performancecopilot/pcp/pull/836#issuecomment-584562456,"New QA has better coverage than the old one. Includes a Valgrind test.
pmdastatsd received small changes to double metric values handling and improvements to clean up procedures.",Tests look good.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,836,2020-02-06T22:35:19Z,2020-02-18T05:32:58Z,2020-02-18T05:32:58Z,MERGED,True,2970,702,42,https://github.com/Erbenos,pmdastatsd new QA and small agent changes,14,[],https://github.com/performancecopilot/pcp/pull/836,https://github.com/Erbenos,3,https://github.com/performancecopilot/pcp/pull/836#issuecomment-585431529,"New QA has better coverage than the old one. Includes a Valgrind test.
pmdastatsd received small changes to double metric values handling and improvements to clean up procedures.","Thank you for your review so far, I will address the issues you brought up.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,836,2020-02-06T22:35:19Z,2020-02-18T05:32:58Z,2020-02-18T05:32:58Z,MERGED,True,2970,702,42,https://github.com/Erbenos,pmdastatsd new QA and small agent changes,14,[],https://github.com/performancecopilot/pcp/pull/836,https://github.com/Erbenos,4,https://github.com/performancecopilot/pcp/pull/836#issuecomment-587207130,"New QA has better coverage than the old one. Includes a Valgrind test.
pmdastatsd received small changes to double metric values handling and improvements to clean up procedures.",The commit above addressed issues mentioned but also disabled 13.py as I noticed the test case is not deterministic and will need to be filtered/processed in python further.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,837,2020-02-06T23:05:56Z,2020-02-11T23:47:56Z,2020-08-18T21:31:08Z,MERGED,True,29,20,9,https://github.com/kmcdonell,man pages for make check,8,[],https://github.com/performancecopilot/pcp/pull/837,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/837,"Changes committed to git@github.com:kmcdonell/pcp.git 20200204
Ken McDonell (2):
man/man1/pmie.1: fix tbl for truth tables with unknown values
man/man1/pmlogextract.1: replace  in filled text with 4 unpaddable spaces
man/man1/pmie.1         |    6 +++---
man/man1/pmlogextract.1 |   10 +++++-----
2 files changed, 8 insertions(+), 8 deletions(-)
Details ...
commit d9abda8
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Feb 4 14:04:34 2020 +1100
man/man1/pmlogextract.1: replace <tab> in filled text with 4 unpaddable spaces

Found by ""make check"", although this one was pretty benign.

commit 9098448
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Feb 4 14:03:01 2020 +1100
man/man1/pmie.1: fix tbl for truth tables with unknown values

Several probles found by make check.  The AND table in particular looks
like it has been malformatted for decades.","Changes committed to git@github.com:kmcdonell/pcp.git 20200204
Ken McDonell (2):
man/man1/pmie.1: fix tbl for truth tables with unknown values
man/man1/pmlogextract.1: replace  in filled text with 4 unpaddable spaces
man/man1/pmie.1         |    6 +++---
man/man1/pmlogextract.1 |   10 +++++-----
2 files changed, 8 insertions(+), 8 deletions(-)
Details ...
commit d9abda8
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Feb 4 14:04:34 2020 +1100
man/man1/pmlogextract.1: replace <tab> in filled text with 4 unpaddable spaces

Found by ""make check"", although this one was pretty benign.

commit 9098448
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Feb 4 14:03:01 2020 +1100
man/man1/pmie.1: fix tbl for truth tables with unknown values

Several probles found by make check.  The AND table in particular looks
like it has been malformatted for decades.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,838,2020-02-12T10:40:21Z,2020-02-13T05:37:42Z,2020-02-13T05:37:42Z,MERGED,True,4,4,4,https://github.com/kurik,Fix of duplicate localhost in 449 and 1074 testcases,1,[],https://github.com/performancecopilot/pcp/pull/838,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/838,"When a system has configured IPv4 as well as IPv6, the localhost
interface is reported twice by multithread2 tool. However
testcases 449 and 1074 expect the report just once. This is
causing fail of these two testcases on IPv4+IPv6 systems.
This commit fixes the issue.","When a system has configured IPv4 as well as IPv6, the localhost
interface is reported twice by multithread2 tool. However
testcases 449 and 1074 expect the report just once. This is
causing fail of these two testcases on IPv4+IPv6 systems.
This commit fixes the issue.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,839,2020-02-13T06:49:20Z,2020-02-16T21:51:30Z,2021-06-21T05:39:50Z,MERGED,True,1,1,1,https://github.com/christianhorn,Pmda openmetrics fix,2,[],https://github.com/performancecopilot/pcp/pull/839,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/839,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,840,2020-02-17T02:40:21Z,2020-02-17T07:32:01Z,2020-08-18T21:31:13Z,MERGED,True,179,23,30,https://github.com/kmcdonell,libpcp derived metric mem leak fix and qa,15,[],https://github.com/performancecopilot/pcp/pull/840,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/840,"Sorry, the script to open a pull request failed, so you'll have to inspect the commits for the details.
The important code change is in libpcp/src/derive_fetch.c, although you'll need the pmapi.h changes as well for the new diagnostics.","Sorry, the script to open a pull request failed, so you'll have to inspect the commits for the details.
The important code change is in libpcp/src/derive_fetch.c, although you'll need the pmapi.h changes as well for the new diagnostics.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,841,2020-02-17T02:47:28Z,2020-02-17T07:32:00Z,2020-08-18T21:31:19Z,MERGED,True,192,23,31,https://github.com/kmcdonell,fix previous failure in scripts/pcp-push,16,[],https://github.com/performancecopilot/pcp/pull/841,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/841,"Changes committed to git@github.com:kmcdonell/pcp.git 20200217
Ken McDonell (1):
scripts/pcp-push: add check for hub(1) being installed, if you need it
Details ...
commit c9831f4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Feb 17 13:45:42 2020 +1100
scripts/pcp-push: add check for hub(1) being installed, if you need it

Prevents previous script failure for me.","Changes committed to git@github.com:kmcdonell/pcp.git 20200217
Ken McDonell (1):
scripts/pcp-push: add check for hub(1) being installed, if you need it
Details ...
commit c9831f4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Feb 17 13:45:42 2020 +1100
scripts/pcp-push: add check for hub(1) being installed, if you need it

Prevents previous script failure for me.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,844,2020-02-18T21:32:10Z,2020-02-19T06:11:34Z,2020-02-19T06:11:34Z,MERGED,True,1,9,2,https://github.com/Erbenos,Fix for EPERM when running pmdastatsd qa 1599,1,[],https://github.com/performancecopilot/pcp/pull/844,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/844,Prefixed python scripts with $sudo and removed some artifacts from the time when the pmdastatsd configs were not hardcoded in tests.,Prefixed python scripts with $sudo and removed some artifacts from the time when the pmdastatsd configs were not hardcoded in tests.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,846,2020-02-19T08:37:57Z,2020-02-20T06:21:38Z,2020-08-18T21:31:24Z,MERGED,True,59,17,3,https://github.com/kmcdonell,"linux pmda + logrewrite, qa",3,[],https://github.com/performancecopilot/pcp/pull/846,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/846,"Changes committed to git@github.com:kmcdonell/pcp.git 20200219
Ken McDonell (3):
qa/1359.out: remade after -Dalloc addition to debug flags
qa/1457: don't run on Ubuntu 19.10
src/pmdas/linux/mk.rewrite: fix a bunch of KERNEL_ULONG errors
Details ...
commit 567d089
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Feb 19 11:40:01 2020 +1100
src/pmdas/linux/mk.rewrite: fix a bunch of KERNEL_ULONG errors

This file had diverged from the PMDA, so the type rewriting rules
for KERNEL_ULONG (U32 or U64) were wrong in a number of places.

commit 45d3edb
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Feb 19 07:14:30 2020 +1100
qa/1457: don't run on Ubuntu 19.10

There is some fatal issue here with libuv, libssl, libcrypto and valgind
that produces 400+ different faults as reported by valgrind.  For future
reference (in case this is really a pmproxy bug, which seems unlikely)
here is the first of the reported errors:

  Conditional jump or move depends on uninitialised value(s)
  at 0x4C4C30B: ??? (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4C4D24B: RAND_DRBG_generate (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4C4E764: ??? (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4C4CA4D: RAND_DRBG_instantiate (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4C4D9BA: ??? (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4C4DD91: RAND_DRBG_get0_public (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4C4DDC3: ??? (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4A50537: SSL_CTX_new (in /usr/lib/x86_64-linux-gnu/libssl.so.1.1)
  by 0x11C8FF: ??? (in /usr/lib/pcp/bin/pmproxy)
  by 0x11225F: ??? (in /usr/lib/pcp/bin/pmproxy)
  by 0x4D8AF65: uv__run_timers (in /usr/lib/x86_64-linux-gnu/libuv.so.1.0.0)
  by 0x4D8E3E9: uv_run (in /usr/lib/x86_64-linux-gnu/libuv.so.1.0.0)

commit d34d9a8
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Feb 19 07:00:45 2020 +1100
qa/1359.out: remade after -Dalloc addition to debug flags","Changes committed to git@github.com:kmcdonell/pcp.git 20200219
Ken McDonell (3):
qa/1359.out: remade after -Dalloc addition to debug flags
qa/1457: don't run on Ubuntu 19.10
src/pmdas/linux/mk.rewrite: fix a bunch of KERNEL_ULONG errors
Details ...
commit 567d089
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Feb 19 11:40:01 2020 +1100
src/pmdas/linux/mk.rewrite: fix a bunch of KERNEL_ULONG errors

This file had diverged from the PMDA, so the type rewriting rules
for KERNEL_ULONG (U32 or U64) were wrong in a number of places.

commit 45d3edb
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Feb 19 07:14:30 2020 +1100
qa/1457: don't run on Ubuntu 19.10

There is some fatal issue here with libuv, libssl, libcrypto and valgind
that produces 400+ different faults as reported by valgrind.  For future
reference (in case this is really a pmproxy bug, which seems unlikely)
here is the first of the reported errors:

  Conditional jump or move depends on uninitialised value(s)
  at 0x4C4C30B: ??? (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4C4D24B: RAND_DRBG_generate (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4C4E764: ??? (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4C4CA4D: RAND_DRBG_instantiate (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4C4D9BA: ??? (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4C4DD91: RAND_DRBG_get0_public (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4C4DDC3: ??? (in /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1)
  by 0x4A50537: SSL_CTX_new (in /usr/lib/x86_64-linux-gnu/libssl.so.1.1)
  by 0x11C8FF: ??? (in /usr/lib/pcp/bin/pmproxy)
  by 0x11225F: ??? (in /usr/lib/pcp/bin/pmproxy)
  by 0x4D8AF65: uv__run_timers (in /usr/lib/x86_64-linux-gnu/libuv.so.1.0.0)
  by 0x4D8E3E9: uv_run (in /usr/lib/x86_64-linux-gnu/libuv.so.1.0.0)

commit d34d9a8
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Feb 19 07:00:45 2020 +1100
qa/1359.out: remade after -Dalloc addition to debug flags",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,847,2020-02-20T11:45:05Z,2020-02-21T06:19:51Z,2020-02-21T06:19:51Z,MERGED,True,2,1,1,https://github.com/kurik,Fix for BZ1805146 (pmlogger_daily_report),1,[],https://github.com/performancecopilot/pcp/pull/847,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/847,"Fix for BZ1805146 - pmlogger_daily_report causing PCP upstream testsuite to fail
This fix makes sure a newly created $REPORTDIR has the expected permissions.","Fix for BZ1805146 - pmlogger_daily_report causing PCP upstream testsuite to fail
This fix makes sure a newly created $REPORTDIR has the expected permissions.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,848,2020-02-20T22:33:10Z,2020-02-21T13:30:03Z,2020-02-21T13:30:09Z,MERGED,True,66,23,4,https://github.com/kmcdonell,_notrun tweaks for bcc PMDA QA tests,5,[],https://github.com/performancecopilot/pcp/pull/848,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/848,"Changes committed to git@github.com:kmcdonell/pcp.git 20200220
Ken McDonell (3):
qa: add _notrun checks for pmda.bcc tests that need version
Revert ""qa: add _notrun checks for pmda.bcc tests that need version""
qa: redo the version test for pmda.bcc tests
Details ...
commit f6308a5
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:40:38 2020 +1100
qa: redo the __version__ test for pmda.bcc tests

Replace the old DEBUG_BPF_REGISTER_STATE test with one that
checks for the symbol __version__ in the Python bcc module.

commit 5da4336
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:36:21 2020 +1100
Revert ""qa: add _notrun checks for pmda.bcc tests that need __version__""

This reverts commit 73c4aaef59a89a330cfe6c8eacb7c2a1b2b65e86.

There is a better way to do this ... I now believe EVERY pmda.bcc test needs
this __version__ symbol, so I'll fold the test back into _pmdabcc_check(), and
avoid the _pmdabcc_require__version__() babble.

commit 73c4aae
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:27:14 2020 +1100
qa: add _notrun checks for pmda.bcc tests that need __version__","Changes committed to git@github.com:kmcdonell/pcp.git 20200220
Ken McDonell (3):
qa: add _notrun checks for pmda.bcc tests that need version
Revert ""qa: add _notrun checks for pmda.bcc tests that need version""
qa: redo the version test for pmda.bcc tests
Details ...
commit f6308a5
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:40:38 2020 +1100
qa: redo the __version__ test for pmda.bcc tests

Replace the old DEBUG_BPF_REGISTER_STATE test with one that
checks for the symbol __version__ in the Python bcc module.

commit 5da4336
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:36:21 2020 +1100
Revert ""qa: add _notrun checks for pmda.bcc tests that need __version__""

This reverts commit 73c4aaef59a89a330cfe6c8eacb7c2a1b2b65e86.

There is a better way to do this ... I now believe EVERY pmda.bcc test needs
this __version__ symbol, so I'll fold the test back into _pmdabcc_check(), and
avoid the _pmdabcc_require__version__() babble.

commit 73c4aae
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:27:14 2020 +1100
qa: add _notrun checks for pmda.bcc tests that need __version__",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,848,2020-02-20T22:33:10Z,2020-02-21T13:30:03Z,2020-02-21T13:30:09Z,MERGED,True,66,23,4,https://github.com/kmcdonell,_notrun tweaks for bcc PMDA QA tests,5,[],https://github.com/performancecopilot/pcp/pull/848,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/848#issuecomment-589653390,"Changes committed to git@github.com:kmcdonell/pcp.git 20200220
Ken McDonell (3):
qa: add _notrun checks for pmda.bcc tests that need version
Revert ""qa: add _notrun checks for pmda.bcc tests that need version""
qa: redo the version test for pmda.bcc tests
Details ...
commit f6308a5
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:40:38 2020 +1100
qa: redo the __version__ test for pmda.bcc tests

Replace the old DEBUG_BPF_REGISTER_STATE test with one that
checks for the symbol __version__ in the Python bcc module.

commit 5da4336
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:36:21 2020 +1100
Revert ""qa: add _notrun checks for pmda.bcc tests that need __version__""

This reverts commit 73c4aaef59a89a330cfe6c8eacb7c2a1b2b65e86.

There is a better way to do this ... I now believe EVERY pmda.bcc test needs
this __version__ symbol, so I'll fold the test back into _pmdabcc_check(), and
avoid the _pmdabcc_require__version__() babble.

commit 73c4aae
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:27:14 2020 +1100
qa: add _notrun checks for pmda.bcc tests that need __version__",Thanks!,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,849,2020-02-21T09:24:39Z,2020-02-23T11:34:40Z,2020-02-23T11:34:40Z,MERGED,True,1892,1386,31,https://github.com/Erbenos,Split up of qa/1599 into multiple smaller qa tests,2,[],https://github.com/performancecopilot/pcp/pull/849,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/849,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,851,2020-02-23T16:33:49Z,2020-02-24T00:34:11Z,2020-02-24T00:34:11Z,MERGED,True,20,20,1,https://github.com/miztake,pcp-atop: fix upper limit of output pid to 7-digits,1,[],https://github.com/performancecopilot/pcp/pull/851,https://github.com/miztake,1,https://github.com/performancecopilot/pcp/pull/851,"pcp-atop displays pid with ""%5d"".
However, since the pid is 2^22(approximately 4 million) at the maximum,
it is necessary to handle up to 7-digits.
Resolves #850","pcp-atop displays pid with ""%5d"".
However, since the pid is 2^22(approximately 4 million) at the maximum,
it is necessary to handle up to 7-digits.
Resolves #850",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,851,2020-02-23T16:33:49Z,2020-02-24T00:34:11Z,2020-02-24T00:34:11Z,MERGED,True,20,20,1,https://github.com/miztake,pcp-atop: fix upper limit of output pid to 7-digits,1,[],https://github.com/performancecopilot/pcp/pull/851,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/851#issuecomment-590135811,"pcp-atop displays pid with ""%5d"".
However, since the pid is 2^22(approximately 4 million) at the maximum,
it is necessary to handle up to 7-digits.
Resolves #850","@miztake looks good.  This affects regression tests qa/785 and qa/1390, which fortunately are testing the change you've made here.  I'll update the expected output of these tests when merging this, so please double check those changes and feel free to include updates to the tests in your PRs.  Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,853,2020-02-24T16:11:43Z,2020-02-24T20:07:43Z,2020-02-24T20:07:43Z,MERGED,True,6,6,1,https://github.com/miztake,man: fix typo in pcpintro(1),1,[],https://github.com/performancecopilot/pcp/pull/853,https://github.com/miztake,1,https://github.com/performancecopilot/pcp/pull/853,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,856,2020-02-26T06:20:53Z,2020-02-27T08:28:24Z,2020-08-18T21:31:29Z,MERGED,True,82,18,6,https://github.com/kmcdonell,rc scripts rework (freebsd) and qa changes,2,[],https://github.com/performancecopilot/pcp/pull/856,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/856,"Changes committed to git@github.com:kmcdonell/pcp.git 20200220
Ken McDonell (5):
qa: add _notrun checks for pmda.bcc tests that need version
Revert ""qa: add notrun checks for pmda.bcc tests that need version""
qa: redo the version test for pmda.bcc tests
rc scripts: small changes to make things work better for FreeBSD
*/rc*: rework the arg logging
Details ...
commit c1aafea
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Feb 26 17:08:47 2020 +1100
*/rc_*: rework the arg logging

1. comment it out by default (to avoid AVC warnings/errors)
2. add for all rc scripts
3. logs got to $PCP_LOG_DIR/rc_foo.log for the foo service
4. log all args, not just $1

commit 748019d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 22 20:28:36 2020 +1100
rc scripts: small changes to make things work better for FreeBSD

Our ""one size fits all"" rc scripts are not exactly kosher for FreeBSD,
but with these small changes they work acceptably well.

commit f6308a5
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:40:38 2020 +1100
qa: redo the __version__ test for pmda.bcc tests

Replace the old DEBUG_BPF_REGISTER_STATE test with one that
checks for the symbol __version__ in the Python bcc module.

commit 5da4336
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:36:21 2020 +1100
Revert ""qa: add _notrun checks for pmda.bcc tests that need __version__""

This reverts commit 73c4aaef59a89a330cfe6c8eacb7c2a1b2b65e86.

There is a better way to do this ... I now believe EVERY pmda.bcc test needs
this __version__ symbol, so I'll fold the test back into _pmdabcc_check(), and
avoid the _pmdabcc_require__version__() babble.

commit 73c4aae
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:27:14 2020 +1100
qa: add _notrun checks for pmda.bcc tests that need __version__","Changes committed to git@github.com:kmcdonell/pcp.git 20200220
Ken McDonell (5):
qa: add _notrun checks for pmda.bcc tests that need version
Revert ""qa: add notrun checks for pmda.bcc tests that need version""
qa: redo the version test for pmda.bcc tests
rc scripts: small changes to make things work better for FreeBSD
*/rc*: rework the arg logging
Details ...
commit c1aafea
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Feb 26 17:08:47 2020 +1100
*/rc_*: rework the arg logging

1. comment it out by default (to avoid AVC warnings/errors)
2. add for all rc scripts
3. logs got to $PCP_LOG_DIR/rc_foo.log for the foo service
4. log all args, not just $1

commit 748019d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 22 20:28:36 2020 +1100
rc scripts: small changes to make things work better for FreeBSD

Our ""one size fits all"" rc scripts are not exactly kosher for FreeBSD,
but with these small changes they work acceptably well.

commit f6308a5
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:40:38 2020 +1100
qa: redo the __version__ test for pmda.bcc tests

Replace the old DEBUG_BPF_REGISTER_STATE test with one that
checks for the symbol __version__ in the Python bcc module.

commit 5da4336
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:36:21 2020 +1100
Revert ""qa: add _notrun checks for pmda.bcc tests that need __version__""

This reverts commit 73c4aaef59a89a330cfe6c8eacb7c2a1b2b65e86.

There is a better way to do this ... I now believe EVERY pmda.bcc test needs
this __version__ symbol, so I'll fold the test back into _pmdabcc_check(), and
avoid the _pmdabcc_require__version__() babble.

commit 73c4aae
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:27:14 2020 +1100
qa: add _notrun checks for pmda.bcc tests that need __version__",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,856,2020-02-26T06:20:53Z,2020-02-27T08:28:24Z,2020-08-18T21:31:29Z,MERGED,True,82,18,6,https://github.com/kmcdonell,rc scripts rework (freebsd) and qa changes,2,[],https://github.com/performancecopilot/pcp/pull/856,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/856#issuecomment-591261748,"Changes committed to git@github.com:kmcdonell/pcp.git 20200220
Ken McDonell (5):
qa: add _notrun checks for pmda.bcc tests that need version
Revert ""qa: add notrun checks for pmda.bcc tests that need version""
qa: redo the version test for pmda.bcc tests
rc scripts: small changes to make things work better for FreeBSD
*/rc*: rework the arg logging
Details ...
commit c1aafea
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Feb 26 17:08:47 2020 +1100
*/rc_*: rework the arg logging

1. comment it out by default (to avoid AVC warnings/errors)
2. add for all rc scripts
3. logs got to $PCP_LOG_DIR/rc_foo.log for the foo service
4. log all args, not just $1

commit 748019d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 22 20:28:36 2020 +1100
rc scripts: small changes to make things work better for FreeBSD

Our ""one size fits all"" rc scripts are not exactly kosher for FreeBSD,
but with these small changes they work acceptably well.

commit f6308a5
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:40:38 2020 +1100
qa: redo the __version__ test for pmda.bcc tests

Replace the old DEBUG_BPF_REGISTER_STATE test with one that
checks for the symbol __version__ in the Python bcc module.

commit 5da4336
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:36:21 2020 +1100
Revert ""qa: add _notrun checks for pmda.bcc tests that need __version__""

This reverts commit 73c4aaef59a89a330cfe6c8eacb7c2a1b2b65e86.

There is a better way to do this ... I now believe EVERY pmda.bcc test needs
this __version__ symbol, so I'll fold the test back into _pmdabcc_check(), and
avoid the _pmdabcc_require__version__() babble.

commit 73c4aae
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:27:14 2020 +1100
qa: add _notrun checks for pmda.bcc tests that need __version__","@kmcdonell are these changes suited to this weeks release, or would you prefer they wait until afterward?  Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,856,2020-02-26T06:20:53Z,2020-02-27T08:28:24Z,2020-08-18T21:31:29Z,MERGED,True,82,18,6,https://github.com/kmcdonell,rc scripts rework (freebsd) and qa changes,2,[],https://github.com/performancecopilot/pcp/pull/856,https://github.com/kmcdonell,3,https://github.com/performancecopilot/pcp/pull/856#issuecomment-591308240,"Changes committed to git@github.com:kmcdonell/pcp.git 20200220
Ken McDonell (5):
qa: add _notrun checks for pmda.bcc tests that need version
Revert ""qa: add notrun checks for pmda.bcc tests that need version""
qa: redo the version test for pmda.bcc tests
rc scripts: small changes to make things work better for FreeBSD
*/rc*: rework the arg logging
Details ...
commit c1aafea
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Feb 26 17:08:47 2020 +1100
*/rc_*: rework the arg logging

1. comment it out by default (to avoid AVC warnings/errors)
2. add for all rc scripts
3. logs got to $PCP_LOG_DIR/rc_foo.log for the foo service
4. log all args, not just $1

commit 748019d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Feb 22 20:28:36 2020 +1100
rc scripts: small changes to make things work better for FreeBSD

Our ""one size fits all"" rc scripts are not exactly kosher for FreeBSD,
but with these small changes they work acceptably well.

commit f6308a5
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:40:38 2020 +1100
qa: redo the __version__ test for pmda.bcc tests

Replace the old DEBUG_BPF_REGISTER_STATE test with one that
checks for the symbol __version__ in the Python bcc module.

commit 5da4336
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:36:21 2020 +1100
Revert ""qa: add _notrun checks for pmda.bcc tests that need __version__""

This reverts commit 73c4aaef59a89a330cfe6c8eacb7c2a1b2b65e86.

There is a better way to do this ... I now believe EVERY pmda.bcc test needs
this __version__ symbol, so I'll fold the test back into _pmdabcc_check(), and
avoid the _pmdabcc_require__version__() babble.

commit 73c4aae
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Feb 20 08:27:14 2020 +1100
qa: add _notrun checks for pmda.bcc tests that need __version__","On 26-Feb-20 5:24 PM, Nathan Scott wrote:
 @kmcdonell <https://github.com/kmcdonell> are these changes suited to
 this weeks release, or would you prefer they wait until afterward? Thanks!
No urgency, they can wait for the next release train.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,857,2020-02-27T12:33:22Z,2020-02-28T05:57:32Z,2020-02-28T05:57:32Z,MERGED,True,74,1,1,https://github.com/jumitche,Update nfs client statistics,1,[],https://github.com/performancecopilot/pcp/pull/857,https://github.com/jumitche,1,https://github.com/performancecopilot/pcp/pull/857,This adds a number of additional nfs client statistics that the kernel exports,This adds a number of additional nfs client statistics that the kernel exports,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,857,2020-02-27T12:33:22Z,2020-02-28T05:57:32Z,2020-02-28T05:57:32Z,MERGED,True,74,1,1,https://github.com/jumitche,Update nfs client statistics,1,[],https://github.com/performancecopilot/pcp/pull/857,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/857#issuecomment-592272257,This adds a number of additional nfs client statistics that the kernel exports,"@jumitche thanks - looks good to me.
I'd like to extend the regression test coverage in qa/798 to cover some of these new metrics - could you add a sample mountstats file below qa/nfsclient/ which contains the new values from the kernel?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,857,2020-02-27T12:33:22Z,2020-02-28T05:57:32Z,2020-02-28T05:57:32Z,MERGED,True,74,1,1,https://github.com/jumitche,Update nfs client statistics,1,[],https://github.com/performancecopilot/pcp/pull/857,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/857#issuecomment-592275282,This adds a number of additional nfs client statistics that the kernel exports,"Would you be interested in working on these metrics too...?
#715
(they're server metrics, code would live in src/pmdas/linux/proc_fs_nfsd.c I guess)
Alternatively, if you have a v4.2 server setup with interesting content in the directory @myllynen mentioned there, could you send me a tarball of that directory?  I'll work on it alongside some other kernel metrics I'm working on currently.  Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,858,2020-03-04T15:11:05Z,2020-04-07T03:34:41Z,2020-04-07T03:34:42Z,CLOSED,False,2,1,1,https://github.com/kurik,Fix of bz1810110 and bz1810118,1,[],https://github.com/performancecopilot/pcp/pull/858,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/858,"Temporary directory containing a config file for the new instance of pmlogger should be readable by pcp:pcp user.
The new instance of pmlogger should not keep stdout open (everything goes to a log file)","Temporary directory containing a config file for the new instance of pmlogger should be readable by pcp:pcp user.
The new instance of pmlogger should not keep stdout open (everything goes to a log file)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,858,2020-03-04T15:11:05Z,2020-04-07T03:34:41Z,2020-04-07T03:34:42Z,CLOSED,False,2,1,1,https://github.com/kurik,Fix of bz1810110 and bz1810118,1,[],https://github.com/performancecopilot/pcp/pull/858,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/858#issuecomment-595008605,"Temporary directory containing a config file for the new instance of pmlogger should be readable by pcp:pcp user.
The new instance of pmlogger should not keep stdout open (everything goes to a log file)","Hi Jan, thanks for the patch - however after installing your proposed patch to pmnewlog, I'm getting QA failures in the 'pmnewlog' test group, e.g.
mgoodwin@~/src/pcp/qa[kurik-master]$ ./check -l -g pmnewlog
PMDA probe: pminfo -h shack -f sample.milliseconds
PMDA probe: pminfo -h shack -f sampledso.milliseconds
PMDA probe: pminfo -h shack -f simple.numfetch
183 79s ... - output mismatch (see 183.out.bad)
2a3
> chown: changing ownership of '/tmp/pcp.vjF1Dzdgf': Operation not permitted
93a95
> chown: changing ownership of '/tmp/pcp.9mxpc4emK': Operation not permitted
Check local PMCD is still alive ...
PMDA probe: pminfo -h shack -f sample.milliseconds
PMDA probe: pminfo -h shack -f sampledso.milliseconds
PMDA probe: pminfo -h shack -f simple.numfetch
184 48s ...
185 - output mismatch (see 185.out.bad)
3a4
> chown: changing ownership of '/tmp/pcp.jr6gvSVpk': Operation not permitted
40a42
> chown: changing ownership of '/tmp/pcp.Vo8Tj4vHL': Operation not permitted
Check local PMCD is still alive ...
PMDA probe: pminfo -h shack -f sample.milliseconds
PMDA probe: pminfo -h shack -f sampledso.milliseconds
PMDA probe: pminfo -h shack -f simple.numfetch
500 119s ...
Failures: 183 185
Failed 2 of 4 tests

Are you seeing similar failures?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,858,2020-03-04T15:11:05Z,2020-04-07T03:34:41Z,2020-04-07T03:34:42Z,CLOSED,False,2,1,1,https://github.com/kurik,Fix of bz1810110 and bz1810118,1,[],https://github.com/performancecopilot/pcp/pull/858,https://github.com/kurik,3,https://github.com/performancecopilot/pcp/pull/858#issuecomment-595201039,"Temporary directory containing a config file for the new instance of pmlogger should be readable by pcp:pcp user.
The new instance of pmlogger should not keep stdout open (everything goes to a log file)","Hi Mark,
thanks for the review. There are more issues with the pmnewlog and this pull requests is just a partial one, fixing only two bugs. Perhaps it will be better to close this pull request and come up with a complete fix instead of fixing these separately.
Anyway thanks a lot for your time and feedback. I will continue to work on this in my spare time.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,858,2020-03-04T15:11:05Z,2020-04-07T03:34:41Z,2020-04-07T03:34:42Z,CLOSED,False,2,1,1,https://github.com/kurik,Fix of bz1810110 and bz1810118,1,[],https://github.com/performancecopilot/pcp/pull/858,https://github.com/goodwinos,4,https://github.com/performancecopilot/pcp/pull/858#issuecomment-595625611,"Temporary directory containing a config file for the new instance of pmlogger should be readable by pcp:pcp user.
The new instance of pmlogger should not keep stdout open (everything goes to a log file)","See comments in https://bugzilla.redhat.com/show_bug.cgi?id=1810110. I think we just need to fix up the two failing qa tests, and then this can still be merged. Those tests just need some judicious sudo calls so chown doesn't fail with EPERM. Normally, pmnewlog is run with sufficient privileges .. just not so in those two QA tests. I can make those changes prior to the merge.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,858,2020-03-04T15:11:05Z,2020-04-07T03:34:41Z,2020-04-07T03:34:42Z,CLOSED,False,2,1,1,https://github.com/kurik,Fix of bz1810110 and bz1810118,1,[],https://github.com/performancecopilot/pcp/pull/858,https://github.com/goodwinos,5,https://github.com/performancecopilot/pcp/pull/858#issuecomment-610154394,"Temporary directory containing a config file for the new instance of pmlogger should be readable by pcp:pcp user.
The new instance of pmlogger should not keep stdout open (everything goes to a log file)","pmnewlog has been deprecated in pcp-5.1.0 (currently pre-release). The logutil scripts now signal pmlogger with SIGUSR2 and pmlogger handles this by closing the current log and opening a new log. In addition, the 'pmnewlog' group in qa/group and the tests that were in it have all been retired.
mgoodwin@~/src/pcp[master]$ grep pmnewlog qa/group
#retired# pmnewlog
183:retired local pmlc pmnewlog
184:retired logutil remote sanity pmdumplog pmnewlog
185:retired local pmnewlog
500:retired local #636417 pmnewlog
So this PR has been fixed via updated functionality in pmlogger and the remaining logutil scripts. We'll keep an eye out for any additional permission issues with tmp files and address those bugs (if any) at that time.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,860,2020-03-16T02:16:46Z,2020-03-19T04:39:24Z,2020-03-19T21:23:46Z,MERGED,True,37,5,10,https://github.com/shogo-matsumoto,pcp-atop: fix STDATE/STTIME in -v output,1,[],https://github.com/performancecopilot/pcp/pull/860,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/860,"STDATE/STTIME of pcp atop -v was wrong (e.g. STDATE=1970/01/01).
A new metric kernel.all.btime is added and used to fix the issue.
Note:

This may not be best but I defined a new global function set_system_btime to pass btime to showprocs.c.
ENDATE/ENTIME are also modified but not be tested because curstat->gen.elaps seems not to be implemented yet.","STDATE/STTIME of pcp atop -v was wrong (e.g. STDATE=1970/01/01).
A new metric kernel.all.btime is added and used to fix the issue.
Note:

This may not be best but I defined a new global function set_system_btime to pass btime to showprocs.c.
ENDATE/ENTIME are also modified but not be tested because curstat->gen.elaps seems not to be implemented yet.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,860,2020-03-16T02:16:46Z,2020-03-19T04:39:24Z,2020-03-19T21:23:46Z,MERGED,True,37,5,10,https://github.com/shogo-matsumoto,pcp-atop: fix STDATE/STTIME in -v output,1,[],https://github.com/performancecopilot/pcp/pull/860,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/860#issuecomment-599823332,"STDATE/STTIME of pcp atop -v was wrong (e.g. STDATE=1970/01/01).
A new metric kernel.all.btime is added and used to fix the issue.
Note:

This may not be best but I defined a new global function set_system_btime to pass btime to showprocs.c.
ENDATE/ENTIME are also modified but not be tested because curstat->gen.elaps seems not to be implemented yet.","STDATE/STTIME of pcp atop -v was wrong (e.g. STDATE=1970/01/01).
A new metric kernel.all.btime is added and used to fix the issue.

Great!

* This may not be best but I defined a new global function set_system_btime to pass btime to showprocs.c.


Agreed, I think there's a better way - see review comments.

* ENDATE/ENTIME are also modified but not be tested because curstat->gen.elaps seems not to be implemented yet.


Ah, good find!  I think we can fix that too - the 'elaps' value there could be calculated as:
kernel.all.uptime - proc.psinfo.start_time
(uptime changed on every sample of course)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,860,2020-03-16T02:16:46Z,2020-03-19T04:39:24Z,2020-03-19T21:23:46Z,MERGED,True,37,5,10,https://github.com/shogo-matsumoto,pcp-atop: fix STDATE/STTIME in -v output,1,[],https://github.com/performancecopilot/pcp/pull/860,https://github.com/shogo-matsumoto,3,https://github.com/performancecopilot/pcp/pull/860#issuecomment-600906370,"STDATE/STTIME of pcp atop -v was wrong (e.g. STDATE=1970/01/01).
A new metric kernel.all.btime is added and used to fix the issue.
Note:

This may not be best but I defined a new global function set_system_btime to pass btime to showprocs.c.
ENDATE/ENTIME are also modified but not be tested because curstat->gen.elaps seems not to be implemented yet.",@natoscott Thank you for the feedback. I updated the commit. Could you review it?,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,860,2020-03-16T02:16:46Z,2020-03-19T04:39:24Z,2020-03-19T21:23:46Z,MERGED,True,37,5,10,https://github.com/shogo-matsumoto,pcp-atop: fix STDATE/STTIME in -v output,1,[],https://github.com/performancecopilot/pcp/pull/860,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/860#issuecomment-600945437,"STDATE/STTIME of pcp atop -v was wrong (e.g. STDATE=1970/01/01).
A new metric kernel.all.btime is added and used to fix the issue.
Note:

This may not be best but I defined a new global function set_system_btime to pass btime to showprocs.c.
ENDATE/ENTIME are also modified but not be tested because curstat->gen.elaps seems not to be implemented yet.","@natoscott Thank you for the feedback. I updated the commit. Could you review it?

@shogo-matsumoto It looks good to me.  I want to add a little test that uses 'pcp atop -v' from the command line, then I'll merge it.  Do you want to work on the curstat->gen.elaps issue you found?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,860,2020-03-16T02:16:46Z,2020-03-19T04:39:24Z,2020-03-19T21:23:46Z,MERGED,True,37,5,10,https://github.com/shogo-matsumoto,pcp-atop: fix STDATE/STTIME in -v output,1,[],https://github.com/performancecopilot/pcp/pull/860,https://github.com/shogo-matsumoto,5,https://github.com/performancecopilot/pcp/pull/860#issuecomment-600980965,"STDATE/STTIME of pcp atop -v was wrong (e.g. STDATE=1970/01/01).
A new metric kernel.all.btime is added and used to fix the issue.
Note:

This may not be best but I defined a new global function set_system_btime to pass btime to showprocs.c.
ENDATE/ENTIME are also modified but not be tested because curstat->gen.elaps seems not to be implemented yet.","Do you want to work on the curstat->gen.elaps issue you found?

I will try it if no one works on this issue. It may take some time.
Is the following your comment correct?

the 'elaps' value there could be calculated as: kernel.all.uptime - proc.psinfo.start_time

It does not seem correct for processes which had already finished. Do you mean that a new metric is needed for elaps which is updated every sample while the process is running?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,860,2020-03-16T02:16:46Z,2020-03-19T04:39:24Z,2020-03-19T21:23:46Z,MERGED,True,37,5,10,https://github.com/shogo-matsumoto,pcp-atop: fix STDATE/STTIME in -v output,1,[],https://github.com/performancecopilot/pcp/pull/860,https://github.com/natoscott,6,https://github.com/performancecopilot/pcp/pull/860#issuecomment-600985303,"STDATE/STTIME of pcp atop -v was wrong (e.g. STDATE=1970/01/01).
A new metric kernel.all.btime is added and used to fix the issue.
Note:

This may not be best but I defined a new global function set_system_btime to pass btime to showprocs.c.
ENDATE/ENTIME are also modified but not be tested because curstat->gen.elaps seems not to be implemented yet.","Do you want to work on the curstat->gen.elaps issue you found?

I will try it if no one works on this issue. It may take some time.

OK, I'll also see if I can fit it in if noone else works on it first.

Is the following your comment correct?

the 'elaps' value there could be calculated as: kernel.all.uptime - proc.psinfo.start_time

It does not seem correct for processes which had already finished.

If the process is finished, pmFetch wont return a proc.psinfo.start_time instance/value for it.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,860,2020-03-16T02:16:46Z,2020-03-19T04:39:24Z,2020-03-19T21:23:46Z,MERGED,True,37,5,10,https://github.com/shogo-matsumoto,pcp-atop: fix STDATE/STTIME in -v output,1,[],https://github.com/performancecopilot/pcp/pull/860,https://github.com/natoscott,7,https://github.com/performancecopilot/pcp/pull/860#issuecomment-601000706,"STDATE/STTIME of pcp atop -v was wrong (e.g. STDATE=1970/01/01).
A new metric kernel.all.btime is added and used to fix the issue.
Note:

This may not be best but I defined a new global function set_system_btime to pass btime to showprocs.c.
ENDATE/ENTIME are also modified but not be tested because curstat->gen.elaps seems not to be implemented yet.","the 'elaps' value there could be calculated as: kernel.all.uptime - proc.psinfo.start_time



Since we don't currently sample kernel.all.uptime (/proc/uptime) in pcp-atop, we could alternatively perform the calculation in this way:
elapsed_time[pid] = (sample time from pmResult) - (kernel.all.boottime + proc.psinfo.start_time[pid])",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,860,2020-03-16T02:16:46Z,2020-03-19T04:39:24Z,2020-03-19T21:23:46Z,MERGED,True,37,5,10,https://github.com/shogo-matsumoto,pcp-atop: fix STDATE/STTIME in -v output,1,[],https://github.com/performancecopilot/pcp/pull/860,https://github.com/shogo-matsumoto,8,https://github.com/performancecopilot/pcp/pull/860#issuecomment-601110721,"STDATE/STTIME of pcp atop -v was wrong (e.g. STDATE=1970/01/01).
A new metric kernel.all.btime is added and used to fix the issue.
Note:

This may not be best but I defined a new global function set_system_btime to pass btime to showprocs.c.
ENDATE/ENTIME are also modified but not be tested because curstat->gen.elaps seems not to be implemented yet.",@natoscott Thank you for your comment. I will try to implement elaps.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,860,2020-03-16T02:16:46Z,2020-03-19T04:39:24Z,2020-03-19T21:23:46Z,MERGED,True,37,5,10,https://github.com/shogo-matsumoto,pcp-atop: fix STDATE/STTIME in -v output,1,[],https://github.com/performancecopilot/pcp/pull/860,https://github.com/natoscott,9,https://github.com/performancecopilot/pcp/pull/860#issuecomment-601423812,"STDATE/STTIME of pcp atop -v was wrong (e.g. STDATE=1970/01/01).
A new metric kernel.all.btime is added and used to fix the issue.
Note:

This may not be best but I defined a new global function set_system_btime to pass btime to showprocs.c.
ENDATE/ENTIME are also modified but not be tested because curstat->gen.elaps seems not to be implemented yet.","@natoscott Thank you for your comment. I will try to implement elaps.

Great!  I've also added commit qa/1347 in commit 56c8d93 which exercises the -v option now.  We should be able to extend that test to exercise the elaps fix too.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,861,2020-03-17T15:20:57Z,2020-03-18T17:56:03Z,2020-03-18T17:56:03Z,CLOSED,False,65,1,1,https://github.com/ElephantZhang,check redis server version,1,[],https://github.com/performancecopilot/pcp/pull/861,https://github.com/ElephantZhang,1,https://github.com/performancecopilot/pcp/pull/861,Add redis server version check after the call of redis_load_version_callback in libpcp_web/src/schema.c. If the version is lower than 5.x the error message will be printed into pmproxy.log,Add redis server version check after the call of redis_load_version_callback in libpcp_web/src/schema.c. If the version is lower than 5.x the error message will be printed into pmproxy.log,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,862,2020-03-18T00:47:38Z,2020-03-19T02:20:33Z,2020-03-19T02:26:34Z,MERGED,True,334,7,16,https://github.com/goodwinos,"add service manager notify API and change pmcd and pmproxy to type=notify, plus QA",8,[],https://github.com/performancecopilot/pcp/pull/862,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/862,"Ken, I've pushed this up to a branch and omitted (for now) any changes to pmlogger and the logutil scripts. Hopefully this will not clash with your changes, other than perhaps qa/group and we can reconcile.  Cheers","Ken, I've pushed this up to a branch and omitted (for now) any changes to pmlogger and the logutil scripts. Hopefully this will not clash with your changes, other than perhaps qa/group and we can reconcile.  Cheers",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,863,2020-03-18T07:38:10Z,2020-03-19T04:39:24Z,2020-03-19T07:51:32Z,MERGED,True,1,0,1,https://github.com/hairmare,Add perl-Data-Dumper dependency for pcp-pmda-redis,1,[],https://github.com/performancecopilot/pcp/pull/863,https://github.com/hairmare,1,https://github.com/performancecopilot/pcp/pull/863,"The pcp-pmda-redis package is not depending on perl-Data-Dumper as it should.
Data-Dumper is being using by pmdaredis.pl 
  
    
      pcp/src/pmdas/redis/pmdaredis.pl
    
    
         Line 72
      in
      0ab16a9
    
  
  
    

        
          
           use Data::Dumper; 
        
    
  


This PR adds it to the specfile as requested here.","The pcp-pmda-redis package is not depending on perl-Data-Dumper as it should.
Data-Dumper is being using by pmdaredis.pl 
  
    
      pcp/src/pmdas/redis/pmdaredis.pl
    
    
         Line 72
      in
      0ab16a9
    
  
  
    

        
          
           use Data::Dumper; 
        
    
  


This PR adds it to the specfile as requested here.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,864,2020-03-18T18:44:32Z,2020-03-19T04:39:23Z,2020-03-19T04:39:23Z,MERGED,True,74,7,1,https://github.com/ElephantZhang,check redis server version,1,[],https://github.com/performancecopilot/pcp/pull/864,https://github.com/ElephantZhang,1,https://github.com/performancecopilot/pcp/pull/864,"Check the redis server version when pmproxy first connect to redis server. If the server version is lower than 5.x, the error message will be printed into file pmproxy.log","Check the redis server version when pmproxy first connect to redis server. If the server version is lower than 5.x, the error message will be printed into file pmproxy.log",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,865,2020-03-19T20:22:47Z,2020-03-20T10:21:33Z,2020-09-21T15:50:32Z,MERGED,True,1,1,1,https://github.com/andreasgerstmayr,build: update do-maybe-requires script to check provides metadata,1,[],https://github.com/performancecopilot/pcp/pull/865,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/865,"If we have a
Maybe-Requires: perl(Net::SNMP)

line in pcp.spec.in, the do-maybe-requires script calls
rpm -q ""perl(Net::SNMP)""

which exits with status 1, because no package with this name is
installed (however, perl-Net-SNMP is installed!).
Therefore rpm needs to check the Provides: metadata of installed
packages as well, which is accomplished with the --whatprovides argument.","If we have a
Maybe-Requires: perl(Net::SNMP)

line in pcp.spec.in, the do-maybe-requires script calls
rpm -q ""perl(Net::SNMP)""

which exits with status 1, because no package with this name is
installed (however, perl-Net-SNMP is installed!).
Therefore rpm needs to check the Provides: metadata of installed
packages as well, which is accomplished with the --whatprovides argument.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,866,2020-03-22T10:50:13Z,2020-03-23T07:46:17Z,2020-08-18T21:31:35Z,MERGED,True,596,6,13,https://github.com/kmcdonell,find-filter and qa,8,[],https://github.com/performancecopilot/pcp/pull/866,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/866,"Changes committed to git@github.com:kmcdonell/pcp.git 20200228
Ken McDonell (6):
qa/1125: renumbered to 1165
qa/group: put back entries for some retired tests
qa/new: update min and max bounds to closer match the current group file state
man/man1/pmlogger_check.1: fix typo
qa/1165: fix test number in comment
find-filter: (new) find-grained filter for files based on mtime or ctime
Details ...
commit f498398
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Mar 4 06:50:18 2020 +1100
find-filter: (new) find-grained filter for files based on mtime or ctime

find-filter is a new helper filter (installed in $PCP_BINADM_DIR) that
is intended to be used in conjunction with find(1) to produce better
than one day selection of files, based on their last modification time
(or creation time).

The implementation is platform-independent and has resolution to a
minute relative to the current time.  This avoids the ""day rounding""
algorithms of find(1)'s -mtime that differ between platforms, and
avoids the non-standard -mmin option.

This will be used on pmlogger_daily to provide shorter and semantically
sounder windows for culling and compressing operations.

commit 0ccfabc
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Feb 28 05:46:41 2020 +1100
qa/1165: fix test number in comment

commit 36d23d3
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Feb 28 05:33:37 2020 +1100
man/man1/pmlogger_check.1: fix typo

Reference to ""pmie"" was a cut-n-paste error.

commit 70f7865
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Feb 28 05:30:29 2020 +1100
qa/new: update min and max bounds to closer match the current group file state

commit b560976
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Feb 28 05:28:37 2020 +1100
qa/group: put back entries for some retired tests

Commit e32ec766 removed a bunch of tests for pmcollect.

The preferred way of handling this in the group file is to mark the
tests with the :retired tag ... they will not be run, but this prevents
the test number being reassigned for something totally different, which
can be confusing, especially when inspecting the git log or reviewing
the history of test pass/failure.

commit a629007
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Feb 28 05:23:13 2020 +1100
qa/1125: renumbered to 1165

1125 was previously used for another unrelated QA test.  To reduce
confusion when reading the git log, move 1125 to 1165.","Changes committed to git@github.com:kmcdonell/pcp.git 20200228
Ken McDonell (6):
qa/1125: renumbered to 1165
qa/group: put back entries for some retired tests
qa/new: update min and max bounds to closer match the current group file state
man/man1/pmlogger_check.1: fix typo
qa/1165: fix test number in comment
find-filter: (new) find-grained filter for files based on mtime or ctime
Details ...
commit f498398
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Mar 4 06:50:18 2020 +1100
find-filter: (new) find-grained filter for files based on mtime or ctime

find-filter is a new helper filter (installed in $PCP_BINADM_DIR) that
is intended to be used in conjunction with find(1) to produce better
than one day selection of files, based on their last modification time
(or creation time).

The implementation is platform-independent and has resolution to a
minute relative to the current time.  This avoids the ""day rounding""
algorithms of find(1)'s -mtime that differ between platforms, and
avoids the non-standard -mmin option.

This will be used on pmlogger_daily to provide shorter and semantically
sounder windows for culling and compressing operations.

commit 0ccfabc
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Feb 28 05:46:41 2020 +1100
qa/1165: fix test number in comment

commit 36d23d3
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Feb 28 05:33:37 2020 +1100
man/man1/pmlogger_check.1: fix typo

Reference to ""pmie"" was a cut-n-paste error.

commit 70f7865
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Feb 28 05:30:29 2020 +1100
qa/new: update min and max bounds to closer match the current group file state

commit b560976
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Feb 28 05:28:37 2020 +1100
qa/group: put back entries for some retired tests

Commit e32ec766 removed a bunch of tests for pmcollect.

The preferred way of handling this in the group file is to mark the
tests with the :retired tag ... they will not be run, but this prevents
the test number being reassigned for something totally different, which
can be confusing, especially when inspecting the git log or reviewing
the history of test pass/failure.

commit a629007
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Feb 28 05:23:13 2020 +1100
qa/1125: renumbered to 1165

1125 was previously used for another unrelated QA test.  To reduce
confusion when reading the git log, move 1125 to 1165.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,867,2020-03-24T02:33:42Z,2020-03-27T03:57:52Z,2020-03-27T20:46:24Z,MERGED,True,284,49,7,https://github.com/goodwinos,pmlogger archive roll and strftime on basename,10,[],https://github.com/performancecopilot/pcp/pull/867,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/867,"Hi Ken, this (see below) is all done and pushed to my pmlogger-exec branch whilst I finish running QA and update docs/pmlogger(1). I've not yet updated the systemd configs, pending simplifying updates to the rc and logutil scripts, which I think is the next step.


argv munging so the args match the running instance ... this means
    the strftime stuff may be internal to pmlogger (not requiring a
    command line arg change) because the date+time pattern is really fixed
  * loop with backoff in pmlogger in the case of collision on the output     archive name (think more than 1 SIGUSR1 inside a minute) ... which
    would obviate the need for the -00, -01 ugliness in the names ...
    pmlogger would just take a bit longer to get started until the
    strftime re-evaluated name is unique ... some loop count and fail
    dead man's brake would also help
  * a new -m arg to indicate reexec


I've been testing this with custom pmlogger.service (for primary logger) and pmlogger@.service (template for farm logger instances), as follows -:
== pmlogger.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -P -r -c config.default -v 100mb -m reexec /var/log/pcp/pmlogger/goblin/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger.pid

[Install]
WantedBy=multi-user.target

And the template == pmlogger@.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -h %i -r -c config.%i -v 100mb -m reexec -l/var/log/pcp/pmlogger/%i/pmlogger.log /var/log/pcp/pmlogger/%i/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger-%i.pid

[Install]
WantedBy=multi-user.target

Obviously these aren't using any rc scripts - just for testing - and have no control file integration. To add a new farm logger : systemctl enable pmlogger@somehost and then start that service. These all manifest as separately managed service units, so we can start/stop individual loggers (including the primary), and on reboot they all start (if enabled) in parallel.","Hi Ken, this (see below) is all done and pushed to my pmlogger-exec branch whilst I finish running QA and update docs/pmlogger(1). I've not yet updated the systemd configs, pending simplifying updates to the rc and logutil scripts, which I think is the next step.


argv munging so the args match the running instance ... this means
    the strftime stuff may be internal to pmlogger (not requiring a
    command line arg change) because the date+time pattern is really fixed
  * loop with backoff in pmlogger in the case of collision on the output     archive name (think more than 1 SIGUSR1 inside a minute) ... which
    would obviate the need for the -00, -01 ugliness in the names ...
    pmlogger would just take a bit longer to get started until the
    strftime re-evaluated name is unique ... some loop count and fail
    dead man's brake would also help
  * a new -m arg to indicate reexec


I've been testing this with custom pmlogger.service (for primary logger) and pmlogger@.service (template for farm logger instances), as follows -:
== pmlogger.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -P -r -c config.default -v 100mb -m reexec /var/log/pcp/pmlogger/goblin/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger.pid

[Install]
WantedBy=multi-user.target

And the template == pmlogger@.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -h %i -r -c config.%i -v 100mb -m reexec -l/var/log/pcp/pmlogger/%i/pmlogger.log /var/log/pcp/pmlogger/%i/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger-%i.pid

[Install]
WantedBy=multi-user.target

Obviously these aren't using any rc scripts - just for testing - and have no control file integration. To add a new farm logger : systemctl enable pmlogger@somehost and then start that service. These all manifest as separately managed service units, so we can start/stop individual loggers (including the primary), and on reboot they all start (if enabled) in parallel.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,867,2020-03-24T02:33:42Z,2020-03-27T03:57:52Z,2020-03-27T20:46:24Z,MERGED,True,284,49,7,https://github.com/goodwinos,pmlogger archive roll and strftime on basename,10,[],https://github.com/performancecopilot/pcp/pull/867,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/867#issuecomment-604221433,"Hi Ken, this (see below) is all done and pushed to my pmlogger-exec branch whilst I finish running QA and update docs/pmlogger(1). I've not yet updated the systemd configs, pending simplifying updates to the rc and logutil scripts, which I think is the next step.


argv munging so the args match the running instance ... this means
    the strftime stuff may be internal to pmlogger (not requiring a
    command line arg change) because the date+time pattern is really fixed
  * loop with backoff in pmlogger in the case of collision on the output     archive name (think more than 1 SIGUSR1 inside a minute) ... which
    would obviate the need for the -00, -01 ugliness in the names ...
    pmlogger would just take a bit longer to get started until the
    strftime re-evaluated name is unique ... some loop count and fail
    dead man's brake would also help
  * a new -m arg to indicate reexec


I've been testing this with custom pmlogger.service (for primary logger) and pmlogger@.service (template for farm logger instances), as follows -:
== pmlogger.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -P -r -c config.default -v 100mb -m reexec /var/log/pcp/pmlogger/goblin/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger.pid

[Install]
WantedBy=multi-user.target

And the template == pmlogger@.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -h %i -r -c config.%i -v 100mb -m reexec -l/var/log/pcp/pmlogger/%i/pmlogger.log /var/log/pcp/pmlogger/%i/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger-%i.pid

[Install]
WantedBy=multi-user.target

Obviously these aren't using any rc scripts - just for testing - and have no control file integration. To add a new farm logger : systemctl enable pmlogger@somehost and then start that service. These all manifest as separately managed service units, so we can start/stop individual loggers (including the primary), and on reboot they all start (if enabled) in parallel.",The missing library for Debian is -lsystemd although this needs wrapping in a macro that is conditionally set via configure (like $(LIB_FOR_PTHREADS)).,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,867,2020-03-24T02:33:42Z,2020-03-27T03:57:52Z,2020-03-27T20:46:24Z,MERGED,True,284,49,7,https://github.com/goodwinos,pmlogger archive roll and strftime on basename,10,[],https://github.com/performancecopilot/pcp/pull/867,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/867#issuecomment-604225204,"Hi Ken, this (see below) is all done and pushed to my pmlogger-exec branch whilst I finish running QA and update docs/pmlogger(1). I've not yet updated the systemd configs, pending simplifying updates to the rc and logutil scripts, which I think is the next step.


argv munging so the args match the running instance ... this means
    the strftime stuff may be internal to pmlogger (not requiring a
    command line arg change) because the date+time pattern is really fixed
  * loop with backoff in pmlogger in the case of collision on the output     archive name (think more than 1 SIGUSR1 inside a minute) ... which
    would obviate the need for the -00, -01 ugliness in the names ...
    pmlogger would just take a bit longer to get started until the
    strftime re-evaluated name is unique ... some loop count and fail
    dead man's brake would also help
  * a new -m arg to indicate reexec


I've been testing this with custom pmlogger.service (for primary logger) and pmlogger@.service (template for farm logger instances), as follows -:
== pmlogger.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -P -r -c config.default -v 100mb -m reexec /var/log/pcp/pmlogger/goblin/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger.pid

[Install]
WantedBy=multi-user.target

And the template == pmlogger@.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -h %i -r -c config.%i -v 100mb -m reexec -l/var/log/pcp/pmlogger/%i/pmlogger.log /var/log/pcp/pmlogger/%i/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger-%i.pid

[Install]
WantedBy=multi-user.target

Obviously these aren't using any rc scripts - just for testing - and have no control file integration. To add a new farm logger : systemctl enable pmlogger@somehost and then start that service. These all manifest as separately managed service units, so we can start/stop individual loggers (including the primary), and on reboot they all start (if enabled) in parallel.","I don't see the point for the %0x instead of %x for the strftime pattern ... we currently use %Y%m%d.%H.%M (no zeroes) which I think will work just fine.

with %Y%m%d.%H.%M the template was shorter than the resulting string, which upset the argv[argc-1] munging. So I inserted the 0's to pad it out.

For Debian-based systems, libsystemd-dev is marked (build optional) in qa/other-packages/manifest, but the build fails with Unmet build dependencies: libsystemd-dev ... either it is not optional for Debian-based systems, or the build needs to be fixed ... I suspect the latter, because libsystemd-dev will not be available for older (but still supported) Debian-based releases.

Andreas fixed the debian library issue last night (see fd28dc2). He also updated qa/admin/other-packages/manifest

There may be a similar issue for RPM builds, but I've not investigated this.

I haven't encountered any

On Ubuntu, the build fails for pmlogger with /usr/bin/ld: ../../../src/libpcp/src/libpcp.so: undefined reference to `sd_notify' ... there is some -l glue missing
I'll add more comments as I work through the build and testing.

Please note I've committed a few more updates to this PR (in the goodwinos:pmlogger-reexec branch)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,867,2020-03-24T02:33:42Z,2020-03-27T03:57:52Z,2020-03-27T20:46:24Z,MERGED,True,284,49,7,https://github.com/goodwinos,pmlogger archive roll and strftime on basename,10,[],https://github.com/performancecopilot/pcp/pull/867,https://github.com/kmcdonell,4,https://github.com/performancecopilot/pcp/pull/867#issuecomment-604227040,"Hi Ken, this (see below) is all done and pushed to my pmlogger-exec branch whilst I finish running QA and update docs/pmlogger(1). I've not yet updated the systemd configs, pending simplifying updates to the rc and logutil scripts, which I think is the next step.


argv munging so the args match the running instance ... this means
    the strftime stuff may be internal to pmlogger (not requiring a
    command line arg change) because the date+time pattern is really fixed
  * loop with backoff in pmlogger in the case of collision on the output     archive name (think more than 1 SIGUSR1 inside a minute) ... which
    would obviate the need for the -00, -01 ugliness in the names ...
    pmlogger would just take a bit longer to get started until the
    strftime re-evaluated name is unique ... some loop count and fail
    dead man's brake would also help
  * a new -m arg to indicate reexec


I've been testing this with custom pmlogger.service (for primary logger) and pmlogger@.service (template for farm logger instances), as follows -:
== pmlogger.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -P -r -c config.default -v 100mb -m reexec /var/log/pcp/pmlogger/goblin/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger.pid

[Install]
WantedBy=multi-user.target

And the template == pmlogger@.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -h %i -r -c config.%i -v 100mb -m reexec -l/var/log/pcp/pmlogger/%i/pmlogger.log /var/log/pcp/pmlogger/%i/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger-%i.pid

[Install]
WantedBy=multi-user.target

Obviously these aren't using any rc scripts - just for testing - and have no control file integration. To add a new farm logger : systemctl enable pmlogger@somehost and then start that service. These all manifest as separately managed service units, so we can start/stop individual loggers (including the primary), and on reboot they all start (if enabled) in parallel.","SIGUSR1 handler does not seem to be installed properly.  I started pmlogger, checked the pid, did
$ sudo kill -USR1 
and a new pmlogger process was running.  At the end of the pmlogger.log.prior file I see:
Caught signal 10, exiting
Note the man page says SIGUSR1, but the code appears to be using SIGUSR2 (which does work sort of as expected, other than these errors in pmlogger.log after the reexec:
__pmBind(/run/pcp/pmlogger.32564.socket): Address already in use
__pmBind(/var/lib/pcp/.pcp/run/pmlogger.32564.socket): No such file or directory
pmlogger: error creating primary logger symbolic link /var/lib/pcp/tmp/pmlogger/primary: File exists
pmlogger: error creating primary logger socket symbolic link /run/pcp/pmlogger.primary.socket: Bad address",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,867,2020-03-24T02:33:42Z,2020-03-27T03:57:52Z,2020-03-27T20:46:24Z,MERGED,True,284,49,7,https://github.com/goodwinos,pmlogger archive roll and strftime on basename,10,[],https://github.com/performancecopilot/pcp/pull/867,https://github.com/kmcdonell,5,https://github.com/performancecopilot/pcp/pull/867#issuecomment-604228670,"Hi Ken, this (see below) is all done and pushed to my pmlogger-exec branch whilst I finish running QA and update docs/pmlogger(1). I've not yet updated the systemd configs, pending simplifying updates to the rc and logutil scripts, which I think is the next step.


argv munging so the args match the running instance ... this means
    the strftime stuff may be internal to pmlogger (not requiring a
    command line arg change) because the date+time pattern is really fixed
  * loop with backoff in pmlogger in the case of collision on the output     archive name (think more than 1 SIGUSR1 inside a minute) ... which
    would obviate the need for the -00, -01 ugliness in the names ...
    pmlogger would just take a bit longer to get started until the
    strftime re-evaluated name is unique ... some loop count and fail
    dead man's brake would also help
  * a new -m arg to indicate reexec


I've been testing this with custom pmlogger.service (for primary logger) and pmlogger@.service (template for farm logger instances), as follows -:
== pmlogger.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -P -r -c config.default -v 100mb -m reexec /var/log/pcp/pmlogger/goblin/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger.pid

[Install]
WantedBy=multi-user.target

And the template == pmlogger@.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -h %i -r -c config.%i -v 100mb -m reexec -l/var/log/pcp/pmlogger/%i/pmlogger.log /var/log/pcp/pmlogger/%i/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger-%i.pid

[Install]
WantedBy=multi-user.target

Obviously these aren't using any rc scripts - just for testing - and have no control file integration. To add a new farm logger : systemctl enable pmlogger@somehost and then start that service. These all manifest as separately managed service units, so we can start/stop individual loggers (including the primary), and on reboot they all start (if enabled) in parallel.","Andreas's changes to not fix my issues above ... there is no LIB_FOR_SYSTEMD being setup and used.
The ""add some number of 0s"" is a gross hack (and not POSIX strftime compliant), there must be a cleaner solution, surely.
I'm pulling from your branch as soon as I see commits.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,867,2020-03-24T02:33:42Z,2020-03-27T03:57:52Z,2020-03-27T20:46:24Z,MERGED,True,284,49,7,https://github.com/goodwinos,pmlogger archive roll and strftime on basename,10,[],https://github.com/performancecopilot/pcp/pull/867,https://github.com/goodwinos,6,https://github.com/performancecopilot/pcp/pull/867#issuecomment-604240804,"Hi Ken, this (see below) is all done and pushed to my pmlogger-exec branch whilst I finish running QA and update docs/pmlogger(1). I've not yet updated the systemd configs, pending simplifying updates to the rc and logutil scripts, which I think is the next step.


argv munging so the args match the running instance ... this means
    the strftime stuff may be internal to pmlogger (not requiring a
    command line arg change) because the date+time pattern is really fixed
  * loop with backoff in pmlogger in the case of collision on the output     archive name (think more than 1 SIGUSR1 inside a minute) ... which
    would obviate the need for the -00, -01 ugliness in the names ...
    pmlogger would just take a bit longer to get started until the
    strftime re-evaluated name is unique ... some loop count and fail
    dead man's brake would also help
  * a new -m arg to indicate reexec


I've been testing this with custom pmlogger.service (for primary logger) and pmlogger@.service (template for farm logger instances), as follows -:
== pmlogger.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -P -r -c config.default -v 100mb -m reexec /var/log/pcp/pmlogger/goblin/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger.pid

[Install]
WantedBy=multi-user.target

And the template == pmlogger@.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -h %i -r -c config.%i -v 100mb -m reexec -l/var/log/pcp/pmlogger/%i/pmlogger.log /var/log/pcp/pmlogger/%i/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger-%i.pid

[Install]
WantedBy=multi-user.target

Obviously these aren't using any rc scripts - just for testing - and have no control file integration. To add a new farm logger : systemctl enable pmlogger@somehost and then start that service. These all manifest as separately managed service units, so we can start/stop individual loggers (including the primary), and on reboot they all start (if enabled) in parallel.","SIGUSR1 handler does not seem to be installed properly. I started pmlogger, checked the pid, did
$ sudo kill -USR1
and a new pmlogger process was running. At the end of the pmlogger.log.prior file I see:
Caught signal 10, exiting
Note the man page says SIGUSR1, but the code appears to be using SIGUSR2 (which does work sort of as expected,

Changed to SIGUSR2 in 1cf9981 (which included updates to the man page). pmnewlog uses SIGUSR1 to kill off the existing logger.
other than these errors in pmlogger.log after the reexec:

__pmBind(/run/pcp/pmlogger.32564.socket): Address already in use
__pmBind(/var/lib/pcp/.pcp/run/pmlogger.32564.socket): No such file or directory
pmlogger: error creating primary logger symbolic link /var/lib/pcp/tmp/pmlogger/primary: File exists
pmlogger: error creating primary logger socket symbolic link /run/pcp/pmlogger.primary.socket: Bad address

Running pmlogger as as root, I haven't been seeing the __pmBind errors/warnings. But running as non-root I do now. and qa/1896.full shows them too. The intent was to use the same sockets, FDs and pid files .. I'll investigate more
Also, https://pubs.opengroup.org/onlinepubs/9699919799/functions/strftime.html says 0 (zero) is a valid flag preceding a conversion character, but maybe that's not current posix?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,867,2020-03-24T02:33:42Z,2020-03-27T03:57:52Z,2020-03-27T20:46:24Z,MERGED,True,284,49,7,https://github.com/goodwinos,pmlogger archive roll and strftime on basename,10,[],https://github.com/performancecopilot/pcp/pull/867,https://github.com/kmcdonell,7,https://github.com/performancecopilot/pcp/pull/867#issuecomment-604344627,"Hi Ken, this (see below) is all done and pushed to my pmlogger-exec branch whilst I finish running QA and update docs/pmlogger(1). I've not yet updated the systemd configs, pending simplifying updates to the rc and logutil scripts, which I think is the next step.


argv munging so the args match the running instance ... this means
    the strftime stuff may be internal to pmlogger (not requiring a
    command line arg change) because the date+time pattern is really fixed
  * loop with backoff in pmlogger in the case of collision on the output     archive name (think more than 1 SIGUSR1 inside a minute) ... which
    would obviate the need for the -00, -01 ugliness in the names ...
    pmlogger would just take a bit longer to get started until the
    strftime re-evaluated name is unique ... some loop count and fail
    dead man's brake would also help
  * a new -m arg to indicate reexec


I've been testing this with custom pmlogger.service (for primary logger) and pmlogger@.service (template for farm logger instances), as follows -:
== pmlogger.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -P -r -c config.default -v 100mb -m reexec /var/log/pcp/pmlogger/goblin/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger.pid

[Install]
WantedBy=multi-user.target

And the template == pmlogger@.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -h %i -r -c config.%i -v 100mb -m reexec -l/var/log/pcp/pmlogger/%i/pmlogger.log /var/log/pcp/pmlogger/%i/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger-%i.pid

[Install]
WantedBy=multi-user.target

Obviously these aren't using any rc scripts - just for testing - and have no control file integration. To add a new farm logger : systemctl enable pmlogger@somehost and then start that service. These all manifest as separately managed service units, so we can start/stop individual loggers (including the primary), and on reboot they all start (if enabled) in parallel.","Hi Mark ... wish we could get in the same room to discuss, but that's not possible at the moment.

pmlogger runs as user pcp, so that's why I'm seeing the _pmBind errors/warnings
pmnewlog will go away, so we could revert to SIGUSR1
the ubuntu man page for strftime is misleading ... but I think %Y%0m%0d.%0H.%0M only works because the %0m adds 1 char to be used in %Y, %0d adds another character to be used in %Y and the %0H and %0M add 2 characters of pad ... this is pretty obtuse!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,867,2020-03-24T02:33:42Z,2020-03-27T03:57:52Z,2020-03-27T20:46:24Z,MERGED,True,284,49,7,https://github.com/goodwinos,pmlogger archive roll and strftime on basename,10,[],https://github.com/performancecopilot/pcp/pull/867,https://github.com/kmcdonell,8,https://github.com/performancecopilot/pcp/pull/867#issuecomment-604358245,"Hi Ken, this (see below) is all done and pushed to my pmlogger-exec branch whilst I finish running QA and update docs/pmlogger(1). I've not yet updated the systemd configs, pending simplifying updates to the rc and logutil scripts, which I think is the next step.


argv munging so the args match the running instance ... this means
    the strftime stuff may be internal to pmlogger (not requiring a
    command line arg change) because the date+time pattern is really fixed
  * loop with backoff in pmlogger in the case of collision on the output     archive name (think more than 1 SIGUSR1 inside a minute) ... which
    would obviate the need for the -00, -01 ugliness in the names ...
    pmlogger would just take a bit longer to get started until the
    strftime re-evaluated name is unique ... some loop count and fail
    dead man's brake would also help
  * a new -m arg to indicate reexec


I've been testing this with custom pmlogger.service (for primary logger) and pmlogger@.service (template for farm logger instances), as follows -:
== pmlogger.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -P -r -c config.default -v 100mb -m reexec /var/log/pcp/pmlogger/goblin/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger.pid

[Install]
WantedBy=multi-user.target

And the template == pmlogger@.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -h %i -r -c config.%i -v 100mb -m reexec -l/var/log/pcp/pmlogger/%i/pmlogger.log /var/log/pcp/pmlogger/%i/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger-%i.pid

[Install]
WantedBy=multi-user.target

Obviously these aren't using any rc scripts - just for testing - and have no control file integration. To add a new farm logger : systemctl enable pmlogger@somehost and then start that service. These all manifest as separately managed service units, so we can start/stop individual loggers (including the primary), and on reboot they all start (if enabled) in parallel.","I don't think the -m command line argument is getting changed to to ""reexec"" before the exec() ... in the ps output mine still appears as -m pmlogger_check after SIGUSR2.
And the logic here:
else if (note && strncmp(note, ""reexec"", 6) != 0)
        break; /* archive already exists and we're NOT using -m reexec */

seems incorrect ... I don't think there should be any conditional execution based on the -m argument ""note"", as this is purely for annotation when inspecting ps output.
And I've just found another wrinkle ... the Latest folio does not get updated if pmlogger gets a SIGUSR2 ... I think this needs to be added to the set of things pmlogger needs to do when started with one of the -m options that indicate this is launched via pmlogger_check or reexec.
I have changes for pmlogger_daily that rip out all of the convoluted logic around pmnewlog and just sends the signal ... we'll see how this goes tonight.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,867,2020-03-24T02:33:42Z,2020-03-27T03:57:52Z,2020-03-27T20:46:24Z,MERGED,True,284,49,7,https://github.com/goodwinos,pmlogger archive roll and strftime on basename,10,[],https://github.com/performancecopilot/pcp/pull/867,https://github.com/goodwinos,9,https://github.com/performancecopilot/pcp/pull/867#issuecomment-604746067,"Hi Ken, this (see below) is all done and pushed to my pmlogger-exec branch whilst I finish running QA and update docs/pmlogger(1). I've not yet updated the systemd configs, pending simplifying updates to the rc and logutil scripts, which I think is the next step.


argv munging so the args match the running instance ... this means
    the strftime stuff may be internal to pmlogger (not requiring a
    command line arg change) because the date+time pattern is really fixed
  * loop with backoff in pmlogger in the case of collision on the output     archive name (think more than 1 SIGUSR1 inside a minute) ... which
    would obviate the need for the -00, -01 ugliness in the names ...
    pmlogger would just take a bit longer to get started until the
    strftime re-evaluated name is unique ... some loop count and fail
    dead man's brake would also help
  * a new -m arg to indicate reexec


I've been testing this with custom pmlogger.service (for primary logger) and pmlogger@.service (template for farm logger instances), as follows -:
== pmlogger.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -P -r -c config.default -v 100mb -m reexec /var/log/pcp/pmlogger/goblin/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger.pid

[Install]
WantedBy=multi-user.target

And the template == pmlogger@.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -h %i -r -c config.%i -v 100mb -m reexec -l/var/log/pcp/pmlogger/%i/pmlogger.log /var/log/pcp/pmlogger/%i/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger-%i.pid

[Install]
WantedBy=multi-user.target

Obviously these aren't using any rc scripts - just for testing - and have no control file integration. To add a new farm logger : systemctl enable pmlogger@somehost and then start that service. These all manifest as separately managed service units, so we can start/stop individual loggers (including the primary), and on reboot they all start (if enabled) in parallel.","Hi Mark ... wish we could get in the same room to discuss, but that's not possible at the moment.

pmlogger runs as user pcp, so that's why I'm seeing the _pmBind errors/warnings


maybe that would be if bind returned EACCESS. But I was getting EADDRINUSE but only when run as non-root user. This was because after the exec, the socket file still existed. So for my case, this patch fixed it :
diff --git a/src/pmlogger/src/ports.c b/src/pmlogger/src/ports.c
index 3e1b5771c..e303fbe83 100644
--- a/src/pmlogger/src/ports.c
+++ b/src/pmlogger/src/ports.c
@@ -311,6 +311,8 @@ GetPorts(char *file)
                    if (sts >= 0 || oserror() == EEXIST) {
                        __pmSockAddrSetPath(myAddr, socketPath);
                        __pmServerSetLocalSocket(socketPath);
+                       if (pmlogger_reexec && access(socketPath, F_OK) == 0)
+                           unlink(socketPath);
                        sts = __pmBind(fd, (void *)myAddr, __pmSockAddrSize());

I have changes to qa/1896 that test this patch (above).


pmnewlog will go away, so we could revert to SIGUSR1


OK I'll revert back to USR1 (once pmnewlog has gone away). How did the overnight testing go with those changes?


the ubuntu man page for strftime is misleading ... but I think %Y%0m%0d.%0H.%0M only works because the %0m adds 1 char to be used in %Y, %0d adds another character to be used in %Y and the %0H and %0M add 2 characters of pad ... this is pretty obtuse!


have the 0 just for %0H and %0M ends up with the same length string after strftime, vis
$ x=qa-%Y%m%d.%0H.%0M; pmdate $x; echo $x
qa-20200327.10.52
qa-%Y%m%d.%0H.%0M

I'll also fix the -m reexec issues",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,867,2020-03-24T02:33:42Z,2020-03-27T03:57:52Z,2020-03-27T20:46:24Z,MERGED,True,284,49,7,https://github.com/goodwinos,pmlogger archive roll and strftime on basename,10,[],https://github.com/performancecopilot/pcp/pull/867,https://github.com/natoscott,10,https://github.com/performancecopilot/pcp/pull/867#issuecomment-604750824,"Hi Ken, this (see below) is all done and pushed to my pmlogger-exec branch whilst I finish running QA and update docs/pmlogger(1). I've not yet updated the systemd configs, pending simplifying updates to the rc and logutil scripts, which I think is the next step.


argv munging so the args match the running instance ... this means
    the strftime stuff may be internal to pmlogger (not requiring a
    command line arg change) because the date+time pattern is really fixed
  * loop with backoff in pmlogger in the case of collision on the output     archive name (think more than 1 SIGUSR1 inside a minute) ... which
    would obviate the need for the -00, -01 ugliness in the names ...
    pmlogger would just take a bit longer to get started until the
    strftime re-evaluated name is unique ... some loop count and fail
    dead man's brake would also help
  * a new -m arg to indicate reexec


I've been testing this with custom pmlogger.service (for primary logger) and pmlogger@.service (template for farm logger instances), as follows -:
== pmlogger.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -P -r -c config.default -v 100mb -m reexec /var/log/pcp/pmlogger/goblin/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger.pid

[Install]
WantedBy=multi-user.target

And the template == pmlogger@.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -h %i -r -c config.%i -v 100mb -m reexec -l/var/log/pcp/pmlogger/%i/pmlogger.log /var/log/pcp/pmlogger/%i/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger-%i.pid

[Install]
WantedBy=multi-user.target

Obviously these aren't using any rc scripts - just for testing - and have no control file integration. To add a new farm logger : systemctl enable pmlogger@somehost and then start that service. These all manifest as separately managed service units, so we can start/stop individual loggers (including the primary), and on reboot they all start (if enabled) in parallel.","Hi Mark ... wish we could get in the same room to discuss, but that's not possible at the moment.

pmlogger runs as user pcp, so that's why I'm seeing the _pmBind errors/warnings


maybe that would be if bind returned EACCESS. But I was getting EADDRINUSE but only when run as non-root user. This was because after the exec, the socket file still existed.

Sounds like pmlogger cleanup() is not being run before the exec?  (atexit handler not being run)  Looks like there's other cleanup that may need to be done too, not just unlinking the unix domain socket.

So for my case, this patch fixed it :

So not sure that's a correct fix - seems more like a workaround?
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,867,2020-03-24T02:33:42Z,2020-03-27T03:57:52Z,2020-03-27T20:46:24Z,MERGED,True,284,49,7,https://github.com/goodwinos,pmlogger archive roll and strftime on basename,10,[],https://github.com/performancecopilot/pcp/pull/867,https://github.com/goodwinos,11,https://github.com/performancecopilot/pcp/pull/867#issuecomment-605307650,"Hi Ken, this (see below) is all done and pushed to my pmlogger-exec branch whilst I finish running QA and update docs/pmlogger(1). I've not yet updated the systemd configs, pending simplifying updates to the rc and logutil scripts, which I think is the next step.


argv munging so the args match the running instance ... this means
    the strftime stuff may be internal to pmlogger (not requiring a
    command line arg change) because the date+time pattern is really fixed
  * loop with backoff in pmlogger in the case of collision on the output     archive name (think more than 1 SIGUSR1 inside a minute) ... which
    would obviate the need for the -00, -01 ugliness in the names ...
    pmlogger would just take a bit longer to get started until the
    strftime re-evaluated name is unique ... some loop count and fail
    dead man's brake would also help
  * a new -m arg to indicate reexec


I've been testing this with custom pmlogger.service (for primary logger) and pmlogger@.service (template for farm logger instances), as follows -:
== pmlogger.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -P -r -c config.default -v 100mb -m reexec /var/log/pcp/pmlogger/goblin/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger.pid

[Install]
WantedBy=multi-user.target

And the template == pmlogger@.service ==
[Unit]
Description=Performance Metrics Archive Logger
Documentation=man:pmlogger(1)
After=network-online.target pmcd.service

[Service]
Type=notify
NotifyAccess=all
TimeoutSec=120
Restart=always
ExecStart=/usr/libexec/pcp/bin/pmlogger -h %i -r -c config.%i -v 100mb -m reexec -l/var/log/pcp/pmlogger/%i/pmlogger.log /var/log/pcp/pmlogger/%i/%%Y%%0m%%0d.%%0H.%%0M
PIDFile=/run/pcp/pmlogger-%i.pid

[Install]
WantedBy=multi-user.target

Obviously these aren't using any rc scripts - just for testing - and have no control file integration. To add a new farm logger : systemctl enable pmlogger@somehost and then start that service. These all manifest as separately managed service units, so we can start/stop individual loggers (including the primary), and on reboot they all start (if enabled) in parallel.","this is all merged into master - deleting the branch. I have another change for pmlogger to write out the 'Latest' folio on startup (including after reexec) just prior to entering the main loop, but that can go directly into master.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,868,2020-03-27T12:36:20Z,2020-03-27T22:42:38Z,2020-03-27T22:42:38Z,MERGED,True,8,2,8,https://github.com/antlarr-suse,Add missing includes in Qt 5.15 beta2,1,[],https://github.com/performancecopilot/pcp/pull/868,https://github.com/antlarr-suse,1,https://github.com/performancecopilot/pcp/pull/868,The definition of QPainterPath is not pulled in anymore from Qt headers that included it indirectly in previous releases so it has to be included explicitly.,The definition of QPainterPath is not pulled in anymore from Qt headers that included it indirectly in previous releases so it has to be included explicitly.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,869,2020-03-28T00:23:21Z,2020-04-07T02:54:26Z,2020-08-18T21:31:40Z,MERGED,True,177,1301,33,https://github.com/kmcdonell,"pmlogger_daily uses signal, pmnewlog retired",14,[],https://github.com/performancecopilot/pcp/pull/869,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/869,"Changes committed to git@github.com:kmcdonell/pcp.git 20200327
Ken McDonell (9):
configure.ac: libsystemd changes
src/include/config.h.in: updates to match latest configure.ac changes
debian/fixcontrol.master: fix libsystemd-dev conditional logic
src/libpcp/src/auxserver.c: change guards around libsystemd uses
src/pmlogger/pmlogger_check.sh: use pmlogger's strftime template feature for archive name
src/pmlogger/pmlogger_daily.sh: signal pmlogger for log rotation
pmnewlog: retired - source code changes
pmnewlog: retired - man page changes
pmnewlog: retired - qa changes
Details ...
commit 67ba7e9
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 16:35:00 2020 +1100
pmnewlog: retired - qa changes

commit 47425de
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 16:31:12 2020 +1100
pmnewlog: retired - man page changes

commit e359a72
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 16:29:24 2020 +1100
pmnewlog: retired - source code changes

Replace pmnewlog script with a stub, advising of retired status and
foreshadowing pending removal of the script.

Remove references to pmnewlog in a couple of places (comments).

commit 30e7bf2
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 15:44:09 2020 +1100
src/pmlogger/pmlogger_daily.sh: signal pmlogger for log rotation

Use pmlogger's new signal and exec mechanism to provide log rotation.

This does away with pmnewlog on all platforms (not just systemd ones)
and more importantly means end-of-day log rotation is now robust,
even when systemd has a finger in the pie.

commit 913b7a2
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 15:39:53 2020 +1100
src/pmlogger/pmlogger_check.sh: use pmlogger's strftime template feature for archive name

Instead of expanding LOGNAME in pmlogger_check.sh we pass %Y%m%d.%0H.%0M
as the archive name.

Drop all the duplicate archive name collision logic, as pmlogger now
handles this itself (by detecting the duplicate name and taking an
avoidance strategy) ... so no more -00, -01, ... nonsense in archive
names.

Some refactoring as pmlogger, not pmlogger_check determines the real name
of the archive.

commit 0c0667e
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 15:26:28 2020 +1100
src/libpcp/src/auxserver.c: change guards around libsystemd uses

Use HAVE_SYSTEMD_SD_DAEMON_H for header and call to sd_notify().

Add code to issue warning if __pmServerNotifySystemd() is called on
a system where HAVE_SYSTEMD is true but HAVE_SYSTEMD_SD_DAEMON_H is
false ... this is possibl, for example, on Debian-based systems where
we are using systemd, but the libsystemd-dev package was not installed
when the pcp package was built, so we have no headers and no library
to provide sd_notify().

Also make the warning unconditional (not behind a pmDebugOptions.services
guard), when __pmServerNotifySystemd() is called for a non-systemd
environment (which should not happen).

commit 962fd7d
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 15:24:25 2020 +1100
debian/fixcontrol.master: fix libsystemd-dev conditional logic

Change the guard from ENABLE_SYSTEMD to PMDA_SYSTEMD.
Verbose comment also added to explain why, as this is not immediately
obvious.

commit 04a87a7
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 15:22:32 2020 +1100
src/include/config.h.in: updates to match latest configure.ac changes

add HAVE_SYSTEMD_SD_DAEMON_H

commit 60ce94a
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 15:14:14 2020 +1100
configure.ac: libsystemd changes

1. use AC_MSG*() around test for enabling systemd use so we can see
   if it is in or out
2. Add check for <systemd/sd-daemon.h> ... this header may not be present
   even if we are using systemd
3. Fix conditional botch that's been there since Dec 2019 when testing $?
   ... [ is string delimiter for autoconf, so need
   test $? -eq 0 ||
   not
   [ $? -eq 0 ] ||
   This was the cause of the mysterious configure output of the form:
   ./configure: line 5823: 0: command not found","Changes committed to git@github.com:kmcdonell/pcp.git 20200327
Ken McDonell (9):
configure.ac: libsystemd changes
src/include/config.h.in: updates to match latest configure.ac changes
debian/fixcontrol.master: fix libsystemd-dev conditional logic
src/libpcp/src/auxserver.c: change guards around libsystemd uses
src/pmlogger/pmlogger_check.sh: use pmlogger's strftime template feature for archive name
src/pmlogger/pmlogger_daily.sh: signal pmlogger for log rotation
pmnewlog: retired - source code changes
pmnewlog: retired - man page changes
pmnewlog: retired - qa changes
Details ...
commit 67ba7e9
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 16:35:00 2020 +1100
pmnewlog: retired - qa changes

commit 47425de
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 16:31:12 2020 +1100
pmnewlog: retired - man page changes

commit e359a72
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 16:29:24 2020 +1100
pmnewlog: retired - source code changes

Replace pmnewlog script with a stub, advising of retired status and
foreshadowing pending removal of the script.

Remove references to pmnewlog in a couple of places (comments).

commit 30e7bf2
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 15:44:09 2020 +1100
src/pmlogger/pmlogger_daily.sh: signal pmlogger for log rotation

Use pmlogger's new signal and exec mechanism to provide log rotation.

This does away with pmnewlog on all platforms (not just systemd ones)
and more importantly means end-of-day log rotation is now robust,
even when systemd has a finger in the pie.

commit 913b7a2
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 15:39:53 2020 +1100
src/pmlogger/pmlogger_check.sh: use pmlogger's strftime template feature for archive name

Instead of expanding LOGNAME in pmlogger_check.sh we pass %Y%m%d.%0H.%0M
as the archive name.

Drop all the duplicate archive name collision logic, as pmlogger now
handles this itself (by detecting the duplicate name and taking an
avoidance strategy) ... so no more -00, -01, ... nonsense in archive
names.

Some refactoring as pmlogger, not pmlogger_check determines the real name
of the archive.

commit 0c0667e
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 15:26:28 2020 +1100
src/libpcp/src/auxserver.c: change guards around libsystemd uses

Use HAVE_SYSTEMD_SD_DAEMON_H for header and call to sd_notify().

Add code to issue warning if __pmServerNotifySystemd() is called on
a system where HAVE_SYSTEMD is true but HAVE_SYSTEMD_SD_DAEMON_H is
false ... this is possibl, for example, on Debian-based systems where
we are using systemd, but the libsystemd-dev package was not installed
when the pcp package was built, so we have no headers and no library
to provide sd_notify().

Also make the warning unconditional (not behind a pmDebugOptions.services
guard), when __pmServerNotifySystemd() is called for a non-systemd
environment (which should not happen).

commit 962fd7d
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 15:24:25 2020 +1100
debian/fixcontrol.master: fix libsystemd-dev conditional logic

Change the guard from ENABLE_SYSTEMD to PMDA_SYSTEMD.
Verbose comment also added to explain why, as this is not immediately
obvious.

commit 04a87a7
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 15:22:32 2020 +1100
src/include/config.h.in: updates to match latest configure.ac changes

add HAVE_SYSTEMD_SD_DAEMON_H

commit 60ce94a
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Mar 27 15:14:14 2020 +1100
configure.ac: libsystemd changes

1. use AC_MSG*() around test for enabling systemd use so we can see
   if it is in or out
2. Add check for <systemd/sd-daemon.h> ... this header may not be present
   even if we are using systemd
3. Fix conditional botch that's been there since Dec 2019 when testing $?
   ... [ is string delimiter for autoconf, so need
   test $? -eq 0 ||
   not
   [ $? -eq 0 ] ||
   This was the cause of the mysterious configure output of the form:
   ./configure: line 5823: 0: command not found",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,870,2020-03-30T01:35:50Z,2020-04-07T02:54:25Z,2020-08-18T21:31:45Z,MERGED,True,373,1445,48,https://github.com/kmcdonell,pmlogger and friends,29,[],https://github.com/performancecopilot/pcp/pull/870,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/870,"Changes committed to git@github.com:kmcdonell/pcp.git 20200329
Ken McDonell (12):
src/pmlogger/src/pmlogger.c: change duplicate archive name avoidance strategy
src/pmlogger/pmlogger_check.sh: fortify test for archive creation
src/libpcp/src/auxserver.c: hide warning from __pmServerNotifySystemd
qa/src/.gitignore: add test_service_notify
qa/041: don't need to dodge systemd here
qa/1347: the shell in !# is /bin/sh, not /usr/bin/sh
qa/340: save original .../pmlogger/control in the same dir, not /tmp
qa/1896: refactor after changes to pmlogger duplicate avoidance scheme
pmlogger et al: drop 0 in strftime patterns
src/pmlogger/pmlogger_check.sh: don't update the Latest folio
pmlogger: refactor -NN archive name collision avoidance
qa: assorted flow-on changes from recent pmlogger changes
Details ...
commit e4119f6
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Mar 30 06:53:11 2020 +1100
qa: assorted flow-on changes from recent pmlogger changes

commit 3c5cee2
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Mar 30 06:50:19 2020 +1100
pmlogger: refactor -NN archive name collision avoidance

The pre-test with access() is insufficient.

Need to move __pmLogCreate() inside the -NN loop and break when this
succeeds.

A bunch of knock-on effects of this, as the real archive name is not
known until the __pmLogCreate() succeeds, and may be different to the
archive name after the initial strftime() expansion.

commit f488708
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Mar 30 06:48:24 2020 +1100
src/pmlogger/pmlogger_check.sh: don't update the Latest folio

This is now done by pmlogger.

commit 2694103
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 14:04:51 2020 +1100
pmlogger et al: drop 0 in strftime patterns

The changed duplicate avoidance scheme means the argv[] munging has
gone away, and with it the need for the expanded archive base name
to be no longer than the pattern from the command line.

This puts things back the way they were, with the default archive
basename pattern (for the system managed pmloggers) being:
        %Y%m%d.%H.%M

commit 0fa97ef
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 14:02:28 2020 +1100
qa/1896: refactor after changes to pmlogger duplicate avoidance scheme

Don't need sleep and sync to avoid minute click over.

Archive names are not deterministic, but only a small finite set of things
need be tested for.

commit a95eec5
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:39:02 2020 +1100
qa/340: save original .../pmlogger/control in the same dir, not /tmp

if the test aborts, we at least have control.340 left in .../pmlogger
to know what the contents used to be.

commit 17eb9a6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:38:20 2020 +1100
qa/1347: the shell in !# is /bin/sh, not /usr/bin/sh

commit a926f85
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:37:28 2020 +1100
qa/041: don't need to dodge systemd here

It is now safe to restart with _service.

commit 0c44e9e
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:36:41 2020 +1100
qa/src/.gitignore: add test_service_notify

commit 0b5896d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:32:39 2020 +1100
src/libpcp/src/auxserver.c: hide warning from __pmServerNotifySystemd

pmlogger will unconditonally call __pmServerNotifySystemd() now,
but if pmlogger is not started by systemd (e.g. pmlogger launched by
record mode, stand alone logging or (especially) the QA suite) then
we don't really want the warning:
    __pmServerNotifySystemd: NOTIFY_SOCKET not set, not launched by systemd
as this is expected behaviour.

Move the warning inside a pmDebugOptions.services guard.

commit 83ee123
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:29:44 2020 +1100
src/pmlogger/pmlogger_check.sh: fortify test for archive creation

Previously we knew the base name of the newly created archive, but
recent changes have meant that this decision is made by pmlogger and
so this script is left to deduce the base name.

If pmlogger does not start (like on purpose in some QA tests), then
the archive is not created and the logic here was a bit busted.

commit ac5f947
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:22:08 2020 +1100
src/pmlogger/src/pmlogger.c: change duplicate archive name avoidance strategy

When pmlogger is launched repeatedly from systemd (or anywhere using
the strftime pattern for the archive name), there is a chance that more
than one invocation happens inside a minute, in which case the %0M at
the end of the strftime pattern is not enough to guarantee uniqueness.

Previously we we just pretending that we were starting +1 or +2 or
+3 miniutes later, but this approach is doomed in the presence of
rapid restarting, like in QA.

This commit reinstates the scheme from pmnewlog(1) (now deprecated)
and uses suffixes like """", ""-00"", ""-01"", ... to force the output
archive base name to be unique.

In the process this means the real archive name maybe longer
than the strftime pattern, so drop the argv[] munging, which on
reflection appears to be (a) non-portable, (b) not reliable, and (c)
not necessary.","Changes committed to git@github.com:kmcdonell/pcp.git 20200329
Ken McDonell (12):
src/pmlogger/src/pmlogger.c: change duplicate archive name avoidance strategy
src/pmlogger/pmlogger_check.sh: fortify test for archive creation
src/libpcp/src/auxserver.c: hide warning from __pmServerNotifySystemd
qa/src/.gitignore: add test_service_notify
qa/041: don't need to dodge systemd here
qa/1347: the shell in !# is /bin/sh, not /usr/bin/sh
qa/340: save original .../pmlogger/control in the same dir, not /tmp
qa/1896: refactor after changes to pmlogger duplicate avoidance scheme
pmlogger et al: drop 0 in strftime patterns
src/pmlogger/pmlogger_check.sh: don't update the Latest folio
pmlogger: refactor -NN archive name collision avoidance
qa: assorted flow-on changes from recent pmlogger changes
Details ...
commit e4119f6
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Mar 30 06:53:11 2020 +1100
qa: assorted flow-on changes from recent pmlogger changes

commit 3c5cee2
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Mar 30 06:50:19 2020 +1100
pmlogger: refactor -NN archive name collision avoidance

The pre-test with access() is insufficient.

Need to move __pmLogCreate() inside the -NN loop and break when this
succeeds.

A bunch of knock-on effects of this, as the real archive name is not
known until the __pmLogCreate() succeeds, and may be different to the
archive name after the initial strftime() expansion.

commit f488708
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Mar 30 06:48:24 2020 +1100
src/pmlogger/pmlogger_check.sh: don't update the Latest folio

This is now done by pmlogger.

commit 2694103
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 14:04:51 2020 +1100
pmlogger et al: drop 0 in strftime patterns

The changed duplicate avoidance scheme means the argv[] munging has
gone away, and with it the need for the expanded archive base name
to be no longer than the pattern from the command line.

This puts things back the way they were, with the default archive
basename pattern (for the system managed pmloggers) being:
        %Y%m%d.%H.%M

commit 0fa97ef
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 14:02:28 2020 +1100
qa/1896: refactor after changes to pmlogger duplicate avoidance scheme

Don't need sleep and sync to avoid minute click over.

Archive names are not deterministic, but only a small finite set of things
need be tested for.

commit a95eec5
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:39:02 2020 +1100
qa/340: save original .../pmlogger/control in the same dir, not /tmp

if the test aborts, we at least have control.340 left in .../pmlogger
to know what the contents used to be.

commit 17eb9a6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:38:20 2020 +1100
qa/1347: the shell in !# is /bin/sh, not /usr/bin/sh

commit a926f85
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:37:28 2020 +1100
qa/041: don't need to dodge systemd here

It is now safe to restart with _service.

commit 0c44e9e
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:36:41 2020 +1100
qa/src/.gitignore: add test_service_notify

commit 0b5896d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:32:39 2020 +1100
src/libpcp/src/auxserver.c: hide warning from __pmServerNotifySystemd

pmlogger will unconditonally call __pmServerNotifySystemd() now,
but if pmlogger is not started by systemd (e.g. pmlogger launched by
record mode, stand alone logging or (especially) the QA suite) then
we don't really want the warning:
    __pmServerNotifySystemd: NOTIFY_SOCKET not set, not launched by systemd
as this is expected behaviour.

Move the warning inside a pmDebugOptions.services guard.

commit 83ee123
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:29:44 2020 +1100
src/pmlogger/pmlogger_check.sh: fortify test for archive creation

Previously we knew the base name of the newly created archive, but
recent changes have meant that this decision is made by pmlogger and
so this script is left to deduce the base name.

If pmlogger does not start (like on purpose in some QA tests), then
the archive is not created and the logic here was a bit busted.

commit ac5f947
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Mar 29 13:22:08 2020 +1100
src/pmlogger/src/pmlogger.c: change duplicate archive name avoidance strategy

When pmlogger is launched repeatedly from systemd (or anywhere using
the strftime pattern for the archive name), there is a chance that more
than one invocation happens inside a minute, in which case the %0M at
the end of the strftime pattern is not enough to guarantee uniqueness.

Previously we we just pretending that we were starting +1 or +2 or
+3 miniutes later, but this approach is doomed in the presence of
rapid restarting, like in QA.

This commit reinstates the scheme from pmnewlog(1) (now deprecated)
and uses suffixes like """", ""-00"", ""-01"", ... to force the output
archive base name to be unique.

In the process this means the real archive name maybe longer
than the strftime pattern, so drop the argv[] munging, which on
reflection appears to be (a) non-portable, (b) not reliable, and (c)
not necessary.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,871,2020-03-31T00:14:38Z,2020-04-07T02:54:24Z,2020-08-18T21:31:50Z,MERGED,True,544,1481,59,https://github.com/kmcdonell,"qa pmlogger fallout, small libpcp change",43,[],https://github.com/performancecopilot/pcp/pull/871,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/871,"Changes committed to git@github.com:kmcdonell/pcp.git 20200330
Ken McDonell (9):
src/libpcp/src/auxserver.c: rework #if to avoid compilation warnings on BSD
qa/119: No ""missing archive"" messages now from pmlogger_check
qa/common.filter & qa/524: handle changed diagnostic format in __pmLogCreate()
qa/admin/check-vm: tweak the use of dpkg-query
qa/1566.out: remade after change in __pmServerNotifySystemd() diagnostic message
qa/1566: __pmServerNotify() generates different warnings on different platforms
qa/854,1055: rework after recent pmlogger changes
qa/679.out: remade after pmlogger_check change in diagnostic
qa/check-vm: small updates to control files
Details ...
commit 2ebf634
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 11:12:38 2020 +1100
qa/check-vm: small updates to control files

commit e4f2965
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 10:51:58 2020 +1100
qa/679.out: remade after pmlogger_check change in diagnostic

Specifically:
Warning: skipping log rotation because we don't know which pmlogger to signal
now appears, and is expected in this test.

commit adbf3a6
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 10:49:38 2020 +1100
qa/854,1055: rework after recent pmlogger changes

Both the name of the current archive and the current pmlogger.log have
become a bit more transient, so make sure we have the correct name for
the former, and make sure the latter is somewhere safe.

commit 9ddf595
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 10:42:17 2020 +1100
qa/1566: __pmServerNotify*() generates different warnings on different platforms

Filter to accommodate the differences.

commit a6d3ad3
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 07:09:54 2020 +1100
qa/1566.out: remade after change in __pmServerNotifySystemd() diagnostic message

commit e4763a6
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 06:53:32 2020 +1100
qa/admin/check-vm: tweak the use of dpkg-query

When generating the list of installled packages, we were previously
and incorrectly including packages that had been installed, and since
removed but their config files remained.

commit 05e61af
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 06:48:53 2020 +1100
qa/common.filter & qa/524: handle changed diagnostic format in __pmLogCreate()

We now report the host and archive name for errors like ""Permission denied"".

commit 7f0efc0
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 06:39:15 2020 +1100
qa/119: No ""missing archive"" messages now from pmlogger_check

These were related to the creation of the Latest folio which is now
done within pmlogger ... as pmlogger is expected not to start for these
test cases, there is no archive and no Latest folio to be created.

commit 5f49d8f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Mar 30 20:08:27 2020 +1100
src/libpcp/src/auxserver.c: rework #if to avoid compilation warnings on *BSD

No systemd here!","Changes committed to git@github.com:kmcdonell/pcp.git 20200330
Ken McDonell (9):
src/libpcp/src/auxserver.c: rework #if to avoid compilation warnings on BSD
qa/119: No ""missing archive"" messages now from pmlogger_check
qa/common.filter & qa/524: handle changed diagnostic format in __pmLogCreate()
qa/admin/check-vm: tweak the use of dpkg-query
qa/1566.out: remade after change in __pmServerNotifySystemd() diagnostic message
qa/1566: __pmServerNotify() generates different warnings on different platforms
qa/854,1055: rework after recent pmlogger changes
qa/679.out: remade after pmlogger_check change in diagnostic
qa/check-vm: small updates to control files
Details ...
commit 2ebf634
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 11:12:38 2020 +1100
qa/check-vm: small updates to control files

commit e4f2965
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 10:51:58 2020 +1100
qa/679.out: remade after pmlogger_check change in diagnostic

Specifically:
Warning: skipping log rotation because we don't know which pmlogger to signal
now appears, and is expected in this test.

commit adbf3a6
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 10:49:38 2020 +1100
qa/854,1055: rework after recent pmlogger changes

Both the name of the current archive and the current pmlogger.log have
become a bit more transient, so make sure we have the correct name for
the former, and make sure the latter is somewhere safe.

commit 9ddf595
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 10:42:17 2020 +1100
qa/1566: __pmServerNotify*() generates different warnings on different platforms

Filter to accommodate the differences.

commit a6d3ad3
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 07:09:54 2020 +1100
qa/1566.out: remade after change in __pmServerNotifySystemd() diagnostic message

commit e4763a6
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 06:53:32 2020 +1100
qa/admin/check-vm: tweak the use of dpkg-query

When generating the list of installled packages, we were previously
and incorrectly including packages that had been installed, and since
removed but their config files remained.

commit 05e61af
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 06:48:53 2020 +1100
qa/common.filter & qa/524: handle changed diagnostic format in __pmLogCreate()

We now report the host and archive name for errors like ""Permission denied"".

commit 7f0efc0
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Mar 31 06:39:15 2020 +1100
qa/119: No ""missing archive"" messages now from pmlogger_check

These were related to the creation of the Latest folio which is now
done within pmlogger ... as pmlogger is expected not to start for these
test cases, there is no archive and no Latest folio to be created.

commit 5f49d8f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Mar 30 20:08:27 2020 +1100
src/libpcp/src/auxserver.c: rework #if to avoid compilation warnings on *BSD

No systemd here!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,872,2020-04-02T01:36:46Z,2020-04-04T00:13:15Z,2020-04-04T00:13:15Z,CLOSED,False,1011,1704,78,https://github.com/kmcdonell,"QA and some code changes (pmlogger, pmlogger scripts, libpcp, pmcd)",79,[],https://github.com/performancecopilot/pcp/pull/872,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/872,"I've screwed up the workflow, so I need to open this PR against my master branch, not a PR-special branch.
This PR also includes a lot of stuff I think is already in the official master, plus some of Mark's recent changes that may, or may not be in the official master.
Some diligent reviewing may be warranted.
Sorry.","I've screwed up the workflow, so I need to open this PR against my master branch, not a PR-special branch.
This PR also includes a lot of stuff I think is already in the official master, plus some of Mark's recent changes that may, or may not be in the official master.
Some diligent reviewing may be warranted.
Sorry.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,872,2020-04-02T01:36:46Z,2020-04-04T00:13:15Z,2020-04-04T00:13:15Z,CLOSED,False,1011,1704,78,https://github.com/kmcdonell,"QA and some code changes (pmlogger, pmlogger scripts, libpcp, pmcd)",79,[],https://github.com/performancecopilot/pcp/pull/872,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/872#issuecomment-607586600,"I've screwed up the workflow, so I need to open this PR against my master branch, not a PR-special branch.
This PR also includes a lot of stuff I think is already in the official master, plus some of Mark's recent changes that may, or may not be in the official master.
Some diligent reviewing may be warranted.
Sorry.","Ken, I've pulled this locally and will push it up to goodwinos:master after re-running some QA. None of your recent PRs are in master yet - I'm staging it all in goodwinos:master until we have QA under control (so I hope you've been using that as the code base for QA!)
There are also some SELinux updates needed, e.g. for pmsignal/kill in a pcp_pmlogger_t context (to trigger log-roll), and a few others. I'm adding these to pcp-selinux-policy, but need to gather some new AVCs, e.g. after the kill to pmsignal change in 71b5902
Also, did your firewall issues have much to do with some of the failures in your QA report?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,872,2020-04-02T01:36:46Z,2020-04-04T00:13:15Z,2020-04-04T00:13:15Z,CLOSED,False,1011,1704,78,https://github.com/kmcdonell,"QA and some code changes (pmlogger, pmlogger scripts, libpcp, pmcd)",79,[],https://github.com/performancecopilot/pcp/pull/872,https://github.com/kmcdonell,3,https://github.com/performancecopilot/pcp/pull/872#issuecomment-607592631,"I've screwed up the workflow, so I need to open this PR against my master branch, not a PR-special branch.
This PR also includes a lot of stuff I think is already in the official master, plus some of Mark's recent changes that may, or may not be in the official master.
Some diligent reviewing may be warranted.
Sorry.","On 2 April 2020 1:39:42 pm Mark Goodwin ***@***.***> wrote:
 Ken, I've pulled this locally and will push it up to goodwinos:master after
 re-running some QA. None of your recent PRs are in master yet - I'm staging
 it all in goodwinos:master until we have QA under control (so I hope you've
 been using that as the code base for QA!)
Yes.
 There are also some SELinux updates needed, e.g. for pmsignal/kill in a
 pcp_pmlogger_t context (to trigger log-roll), and a few others. I'm adding
 these to pcp-selinux-policy, but need to gather some new CVEs, e.g. after
 the kill to pmsignal change in 71b5902

Ok
 Also, did your firewall issues have much to do with some of the failures in
 your QA report?
Only vm30 as involved and13 of 15 failures there are now passing ... so a
small improvement.
…",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,872,2020-04-02T01:36:46Z,2020-04-04T00:13:15Z,2020-04-04T00:13:15Z,CLOSED,False,1011,1704,78,https://github.com/kmcdonell,"QA and some code changes (pmlogger, pmlogger scripts, libpcp, pmcd)",79,[],https://github.com/performancecopilot/pcp/pull/872,https://github.com/kmcdonell,4,https://github.com/performancecopilot/pcp/pull/872#issuecomment-608874762,"I've screwed up the workflow, so I need to open this PR against my master branch, not a PR-special branch.
This PR also includes a lot of stuff I think is already in the official master, plus some of Mark's recent changes that may, or may not be in the official master.
Some diligent reviewing may be warranted.
Sorry.","Mark's managing most of this thru his tree, and outside this PR.
I'll close this one, and track any subsequent changes in a new PR.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,873,2020-04-02T06:10:48Z,2020-04-07T02:54:24Z,2020-08-18T21:31:55Z,MERGED,True,926,1695,70,https://github.com/kmcdonell,pmlogger_check (important) and qa,65,[],https://github.com/performancecopilot/pcp/pull/873,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/873,"Changes committed to git@github.com:kmcdonell/pcp.git 20200402
Ken McDonell (4):
src/pmlogger/pmlogger_check.sh: fix for non-primary pmlogger matching
qa/430: bullet-proof paranoid checking
qa/1108: update to reflect the use of pmsignal in preference to kill
src/pmsignal/pmsignal.sh: add USR2 to the set of supported signals
Details ...
commit 4380f6a
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 2 16:37:29 2020 +1100
src/pmsignal/pmsignal.sh: add USR2 to the set of supported signals

Duh.  pmlogger_daily uses SIGUSR2 to signal pmlogger.

commit c6bc64c
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 2 16:34:39 2020 +1100
qa/1108: update to reflect the use of pmsignal in preference to kill

commit 16ebfb3
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 2 16:31:04 2020 +1100
qa/430: bullet-proof paranoid checking

This is really overkill (the problem was in pmlogger_check, not in
the QA test), but ... Murphy guarantees this test will be a problem in
the future, so leave the checks in place.

The .out file has been corrected to show the really true and correct
results!

commit 7c1c9fe
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 2 16:27:32 2020 +1100
src/pmlogger/pmlogger_check.sh: fix for non-primary pmlogger matching

Same problem as just fixed in pmlogger_daily ...

Tweak glob pattern used to find matching dir in
_get_non_primary_logger_pid() ... this was causing a QA failure.
Another fallout from the pmlogger duplicate archive name avoidance
changes.  Not a problem for the common ""primary pmlogger only""
deployment, but could have been a problem in a pmlogger farm setup.","Changes committed to git@github.com:kmcdonell/pcp.git 20200402
Ken McDonell (4):
src/pmlogger/pmlogger_check.sh: fix for non-primary pmlogger matching
qa/430: bullet-proof paranoid checking
qa/1108: update to reflect the use of pmsignal in preference to kill
src/pmsignal/pmsignal.sh: add USR2 to the set of supported signals
Details ...
commit 4380f6a
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 2 16:37:29 2020 +1100
src/pmsignal/pmsignal.sh: add USR2 to the set of supported signals

Duh.  pmlogger_daily uses SIGUSR2 to signal pmlogger.

commit c6bc64c
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 2 16:34:39 2020 +1100
qa/1108: update to reflect the use of pmsignal in preference to kill

commit 16ebfb3
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 2 16:31:04 2020 +1100
qa/430: bullet-proof paranoid checking

This is really overkill (the problem was in pmlogger_check, not in
the QA test), but ... Murphy guarantees this test will be a problem in
the future, so leave the checks in place.

The .out file has been corrected to show the really true and correct
results!

commit 7c1c9fe
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 2 16:27:32 2020 +1100
src/pmlogger/pmlogger_check.sh: fix for non-primary pmlogger matching

Same problem as just fixed in pmlogger_daily ...

Tweak glob pattern used to find matching dir in
_get_non_primary_logger_pid() ... this was causing a QA failure.
Another fallout from the pmlogger duplicate archive name avoidance
changes.  Not a problem for the common ""primary pmlogger only""
deployment, but could have been a problem in a pmlogger farm setup.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,874,2020-04-06T06:57:52Z,2020-04-07T03:21:26Z,2020-08-18T21:32:01Z,MERGED,True,1626,1743,87,https://github.com/kmcdonell,qa and find-filter,88,[],https://github.com/performancecopilot/pcp/pull/874,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/874,"Changes committed to git@github.com:kmcdonell/pcp.git 20200403
Ken McDonell (11):
src/find-filter: couple of small fixes
qa/915: add _wait_for_pmproxy
qa/common.check: fixes for _wait_for_pmproxy
qa/915: don't restart pmproxy if it was not running at the beginning
qa/300: sleep a bit longer
qa/1190: (new) paranoid checking of PCP configuration
qa/check.callback.sample: add call to ./1190 --check
qa/common: use a more verboase annotation for the config files we change
qa/025, qa/src/pmcdgone.c: drag these ones into the 21st century
qa/950: after starting pmproxy, wait for it to be ready
qa/check-flakey: (new) run some basic triage on failing tests
Mark Goodwin (1):
qa: remake 881 for SIGUSR2
qa/025                        |   15 ++
qa/1190                       |  254 ++++++++++++++++++++++++++++++++++++++++++
qa/1190.out                   |   46 +++++++
qa/300                        |    8 -
qa/881.out                    |    2
qa/915                        |   11 +
qa/950                        |    1
qa/check-flakey               |  193 +++++++++++++++++++++++++++++++
qa/check.callback.sample      |   11 +
qa/common                     |    4
qa/common.check               |   52 +++++---
qa/group                      |    1
qa/src/pmcdgone.c             |   59 +++++++--
src/find-filter/.gitignore    |    1
src/find-filter/find-filter.c |    6
15 files changed, 621 insertions(+), 43 deletions(-)
Details ...
commit 0b3035e
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 16:37:28 2020 +1000
qa/check-flakey: (new) run some basic triage on failing tests

Trying to see if they are flakey, or really a hard failure.

I think I'll be using this in preference to recheck.

commit 8207357
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 15:49:43 2020 +1000
qa/950: after starting pmproxy, wait for it to be ready

commit ac8f698
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 15:45:57 2020 +1000
qa/025, qa/src/pmcdgone.c: drag these ones into the 21st century

1. add -s flag for pmcdgone to optionally use systemctl instead of
   running the ""rc"" scripts directly ... more closely mimics what
   might happen in real life

2. 025 sniffs around and uses -s to pmcdgone if that seems
   appropriate.

commit 5023789
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 15:43:19 2020 +1000
qa/common: use a more verboase annotation for the config files we change

Helps with qa/1190 to identify changes to config files that are
expected and not a sign of badness.

commit 8154504
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 15:41:56 2020 +1000
qa/check.callback.sample: add call to ./1190 --check

commit 0964776
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 13:00:29 2020 +1000
qa/1190: (new) paranoid checking of PCP configuration

A desperate attempt to check for all the ways in which errant PCP QA
test or tests can trash the PCP installation and/or confguration.

Will be used in check.callback.sample to try an minimize cascading
failures.

commit edd7b56
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 10:29:35 2020 +1000
qa/300: sleep a bit longer

0.5 sec was not enough, and the failures were non-deterministic
(another sign of a race in the script).
Waiting 1.5 secs seems to have improved the situation.

commit 619ae41
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 4 11:11:07 2020 +1100
qa/915: don't restart pmproxy if it was not running at the beginning

commit 659149b
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 4 11:09:48 2020 +1100
qa/common.check: fixes for _wait_for_pmproxy

1. timing loop was all wrong, only waiting 2 secs, not 20 secs
2. add proper arg handling, with sane default for logfile

commit 91cd81c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 4 08:10:36 2020 +1100
qa/915: add _wait_for_pmproxy

commit a257848
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Apr 3 19:59:08 2020 +1100
src/find-filter: couple of small fixes

1. add .gitignore for executable
2. fix cut-n-paste errors in -c time handling, exposed on older
   NetBSD (vm09)

commit f7ac80d
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Fri Apr 3 14:51:55 2020 +1100
qa: remake 881 for SIGUSR2","Changes committed to git@github.com:kmcdonell/pcp.git 20200403
Ken McDonell (11):
src/find-filter: couple of small fixes
qa/915: add _wait_for_pmproxy
qa/common.check: fixes for _wait_for_pmproxy
qa/915: don't restart pmproxy if it was not running at the beginning
qa/300: sleep a bit longer
qa/1190: (new) paranoid checking of PCP configuration
qa/check.callback.sample: add call to ./1190 --check
qa/common: use a more verboase annotation for the config files we change
qa/025, qa/src/pmcdgone.c: drag these ones into the 21st century
qa/950: after starting pmproxy, wait for it to be ready
qa/check-flakey: (new) run some basic triage on failing tests
Mark Goodwin (1):
qa: remake 881 for SIGUSR2
qa/025                        |   15 ++
qa/1190                       |  254 ++++++++++++++++++++++++++++++++++++++++++
qa/1190.out                   |   46 +++++++
qa/300                        |    8 -
qa/881.out                    |    2
qa/915                        |   11 +
qa/950                        |    1
qa/check-flakey               |  193 +++++++++++++++++++++++++++++++
qa/check.callback.sample      |   11 +
qa/common                     |    4
qa/common.check               |   52 +++++---
qa/group                      |    1
qa/src/pmcdgone.c             |   59 +++++++--
src/find-filter/.gitignore    |    1
src/find-filter/find-filter.c |    6
15 files changed, 621 insertions(+), 43 deletions(-)
Details ...
commit 0b3035e
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 16:37:28 2020 +1000
qa/check-flakey: (new) run some basic triage on failing tests

Trying to see if they are flakey, or really a hard failure.

I think I'll be using this in preference to recheck.

commit 8207357
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 15:49:43 2020 +1000
qa/950: after starting pmproxy, wait for it to be ready

commit ac8f698
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 15:45:57 2020 +1000
qa/025, qa/src/pmcdgone.c: drag these ones into the 21st century

1. add -s flag for pmcdgone to optionally use systemctl instead of
   running the ""rc"" scripts directly ... more closely mimics what
   might happen in real life

2. 025 sniffs around and uses -s to pmcdgone if that seems
   appropriate.

commit 5023789
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 15:43:19 2020 +1000
qa/common: use a more verboase annotation for the config files we change

Helps with qa/1190 to identify changes to config files that are
expected and not a sign of badness.

commit 8154504
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 15:41:56 2020 +1000
qa/check.callback.sample: add call to ./1190 --check

commit 0964776
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 13:00:29 2020 +1000
qa/1190: (new) paranoid checking of PCP configuration

A desperate attempt to check for all the ways in which errant PCP QA
test or tests can trash the PCP installation and/or confguration.

Will be used in check.callback.sample to try an minimize cascading
failures.

commit edd7b56
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 6 10:29:35 2020 +1000
qa/300: sleep a bit longer

0.5 sec was not enough, and the failures were non-deterministic
(another sign of a race in the script).
Waiting 1.5 secs seems to have improved the situation.

commit 619ae41
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 4 11:11:07 2020 +1100
qa/915: don't restart pmproxy if it was not running at the beginning

commit 659149b
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 4 11:09:48 2020 +1100
qa/common.check: fixes for _wait_for_pmproxy

1. timing loop was all wrong, only waiting 2 secs, not 20 secs
2. add proper arg handling, with sane default for logfile

commit 91cd81c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 4 08:10:36 2020 +1100
qa/915: add _wait_for_pmproxy

commit a257848
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Apr 3 19:59:08 2020 +1100
src/find-filter: couple of small fixes

1. add .gitignore for executable
2. fix cut-n-paste errors in -c time handling, exposed on older
   NetBSD (vm09)

commit f7ac80d
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Fri Apr 3 14:51:55 2020 +1100
qa: remake 881 for SIGUSR2",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,875,2020-04-08T21:14:56Z,2020-04-09T01:50:16Z,2020-08-18T21:32:07Z,MERGED,True,100,15,12,https://github.com/kmcdonell,"qa, rc scripts (cosmetic), pmproxy",8,[],https://github.com/performancecopilot/pcp/pull/875,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/875,"Changes committed to git@github.com:kmcdonell/pcp.git 20200407
Ken McDonell (8):
build/tar/postinstall.tail: fix (misleading) error in comment
qa/1190: important --check fix
qa/294: wait for pmproxy to start
qa/check.callback.sample: tweak PMNS check
rc scripts: add ""env"" to the #debug# lines
src/pmproxy/src/pmproxy.c: make logfile name unique with -Dappl1
qa/1190: fix botch in last commit
qa/915: taking more control of the environment
build/tar/postinstall.tail |    4 +++-
qa/1190                    |   28 ++++++++++++++++++++--------
qa/294                     |    4 ++++
qa/915                     |   29 ++++++++++++++++++++++++++---
qa/check.callback.sample   |    7 +++++--
src/pmcd/rc_pcp            |    1 +
src/pmcd/rc_pmcd           |    1 +
src/pmie/rc_pmie           |    1 +
src/pmlogger/rc_pmlogger   |    1 +
src/pmmgr/rc_pmmgr         |    1 +
src/pmproxy/rc_pmproxy     |    1 +
src/pmproxy/src/pmproxy.c  |   37 ++++++++++++++++++++++++++++++++++++-
12 files changed, 100 insertions(+), 15 deletions(-)
Details ...
commit 92fa062
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 9 07:11:15 2020 +1000
qa/915: taking more control of the environment

1. install a minimal pmproxy.conf with few services enabled
   ... designed to ensure speedy startup of the daemon
2. save/restore pmproxy.conf
3. save/restore pmproxy.options (so that -Dappl1 can easily be
   enabled for desperate debugging times)

commit 185b1b0
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 9 07:03:22 2020 +1000
qa/1190: fix botch in last commit

Changes to the quoting logic were botched in the last commit
... making the test effectively do nothing!

The intent was that with --check, the real pathnames should appear
to help debugging, e.g.
    /var/lib/pcp/pmns/root ... BAD
but without --check, the pathnames should include the PCP_* variables
so that the output is deterministic
    $PCP_VAR_DIR/pmns/root ... BAD

There was a related issue with directories that are checked ...
without --check we should emit only a line for the directory name if
the contents are all OK, else emit a line for each failing file within
the directory.  Again, this makes the output deterministic across
different platforms where directory contents may not be the same,
and certainly may not be in the same order as reported by find(1).

commit 14cb273
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 9 06:55:27 2020 +1000
src/pmproxy/src/pmproxy.c: make logfile name unique with -Dappl1

One(more help for debugging, with -Dappl1, the process' pid is embedded
in the string "".<pid>"" and this is stitched into) the logfile name
to help make it unique.  This helps when multiple pmproxy instances
are involved in a QA run.

Beware, in a default setup this will pollute $PCP_LOG_DIR/pmproxy
with lots of pmproxy.NNNN.log files and these will need to be cleaned
up manually.

commit a94c2dd
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 9 06:53:34 2020 +1000
rc scripts: add ""env"" to the #debug# lines

With systemd + notify in the mix, we need not only the args passed
to the script but the environment.

Only useful in times of desperate debugging ... there is no change
here to the default behaviour.

commit 4f30174
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Apr 7 14:45:41 2020 +1000
qa/check.callback.sample: tweak PMNS check

For reasons that are not yet understood, the romance between the pmproxy
daemon and the mmv PMDA wearing its pmproxy PMDA disguise can sour.
When this happens, the pmproxy.pid metric is left in the PMNS but
the mmv (aka pmproxy) PMDA returns PM_ERR_PMID, so teak the filter
to not raise this as a callback detected error.

commit fc941cd
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Apr 7 14:30:42 2020 +1000
qa/294: wait for pmproxy to start

commit aa6e054
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Apr 7 14:28:29 2020 +1000
qa/1190: important --check fix

When using --check (as in check.callback.sample), do not remove
the .full file for the test currently being run (which is different
to 1190 on about 1344 or 1345 tests).

commit f08feed
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Apr 7 14:27:40 2020 +1000
build/tar/postinstall.tail: fix (misleading) error in comment","Changes committed to git@github.com:kmcdonell/pcp.git 20200407
Ken McDonell (8):
build/tar/postinstall.tail: fix (misleading) error in comment
qa/1190: important --check fix
qa/294: wait for pmproxy to start
qa/check.callback.sample: tweak PMNS check
rc scripts: add ""env"" to the #debug# lines
src/pmproxy/src/pmproxy.c: make logfile name unique with -Dappl1
qa/1190: fix botch in last commit
qa/915: taking more control of the environment
build/tar/postinstall.tail |    4 +++-
qa/1190                    |   28 ++++++++++++++++++++--------
qa/294                     |    4 ++++
qa/915                     |   29 ++++++++++++++++++++++++++---
qa/check.callback.sample   |    7 +++++--
src/pmcd/rc_pcp            |    1 +
src/pmcd/rc_pmcd           |    1 +
src/pmie/rc_pmie           |    1 +
src/pmlogger/rc_pmlogger   |    1 +
src/pmmgr/rc_pmmgr         |    1 +
src/pmproxy/rc_pmproxy     |    1 +
src/pmproxy/src/pmproxy.c  |   37 ++++++++++++++++++++++++++++++++++++-
12 files changed, 100 insertions(+), 15 deletions(-)
Details ...
commit 92fa062
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 9 07:11:15 2020 +1000
qa/915: taking more control of the environment

1. install a minimal pmproxy.conf with few services enabled
   ... designed to ensure speedy startup of the daemon
2. save/restore pmproxy.conf
3. save/restore pmproxy.options (so that -Dappl1 can easily be
   enabled for desperate debugging times)

commit 185b1b0
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 9 07:03:22 2020 +1000
qa/1190: fix botch in last commit

Changes to the quoting logic were botched in the last commit
... making the test effectively do nothing!

The intent was that with --check, the real pathnames should appear
to help debugging, e.g.
    /var/lib/pcp/pmns/root ... BAD
but without --check, the pathnames should include the PCP_* variables
so that the output is deterministic
    $PCP_VAR_DIR/pmns/root ... BAD

There was a related issue with directories that are checked ...
without --check we should emit only a line for the directory name if
the contents are all OK, else emit a line for each failing file within
the directory.  Again, this makes the output deterministic across
different platforms where directory contents may not be the same,
and certainly may not be in the same order as reported by find(1).

commit 14cb273
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 9 06:55:27 2020 +1000
src/pmproxy/src/pmproxy.c: make logfile name unique with -Dappl1

One(more help for debugging, with -Dappl1, the process' pid is embedded
in the string "".<pid>"" and this is stitched into) the logfile name
to help make it unique.  This helps when multiple pmproxy instances
are involved in a QA run.

Beware, in a default setup this will pollute $PCP_LOG_DIR/pmproxy
with lots of pmproxy.NNNN.log files and these will need to be cleaned
up manually.

commit a94c2dd
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 9 06:53:34 2020 +1000
rc scripts: add ""env"" to the #debug# lines

With systemd + notify in the mix, we need not only the args passed
to the script but the environment.

Only useful in times of desperate debugging ... there is no change
here to the default behaviour.

commit 4f30174
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Apr 7 14:45:41 2020 +1000
qa/check.callback.sample: tweak PMNS check

For reasons that are not yet understood, the romance between the pmproxy
daemon and the mmv PMDA wearing its pmproxy PMDA disguise can sour.
When this happens, the pmproxy.pid metric is left in the PMNS but
the mmv (aka pmproxy) PMDA returns PM_ERR_PMID, so teak the filter
to not raise this as a callback detected error.

commit fc941cd
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Apr 7 14:30:42 2020 +1000
qa/294: wait for pmproxy to start

commit aa6e054
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Apr 7 14:28:29 2020 +1000
qa/1190: important --check fix

When using --check (as in check.callback.sample), do not remove
the .full file for the test currently being run (which is different
to 1190 on about 1344 or 1345 tests).

commit f08feed
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Apr 7 14:27:40 2020 +1000
build/tar/postinstall.tail: fix (misleading) error in comment",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,876,2020-04-09T00:38:00Z,2020-04-09T01:50:15Z,2020-08-18T21:32:12Z,MERGED,True,103,15,12,https://github.com/kmcdonell,"qa (small), pmproxy compilation warning fix",11,[],https://github.com/performancecopilot/pcp/pull/876,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/876,"Changes committed to git@github.com:kmcdonell/pcp.git 20200409
Ken McDonell (2):
src/pmproxy/src/pmproxy.c: fix strncpy() compilation warning
qa/915: stop pmproxy if it was not running when the test started
qa/915                    |    3 +++
src/pmproxy/src/pmproxy.c |    2 +-
2 files changed, 4 insertions(+), 1 deletion(-)
Details ...
commit 39aa1ad
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 9 07:35:06 2020 +1000
qa/915: stop pmproxy if it was not running when the test started

commit aa01bb9
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 9 07:25:31 2020 +1000
src/pmproxy/src/pmproxy.c: fix strncpy() compilation warning

gcc 9.2.1 seems more pedantic.","Changes committed to git@github.com:kmcdonell/pcp.git 20200409
Ken McDonell (2):
src/pmproxy/src/pmproxy.c: fix strncpy() compilation warning
qa/915: stop pmproxy if it was not running when the test started
qa/915                    |    3 +++
src/pmproxy/src/pmproxy.c |    2 +-
2 files changed, 4 insertions(+), 1 deletion(-)
Details ...
commit 39aa1ad
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 9 07:35:06 2020 +1000
qa/915: stop pmproxy if it was not running when the test started

commit aa01bb9
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 9 07:25:31 2020 +1000
src/pmproxy/src/pmproxy.c: fix strncpy() compilation warning

gcc 9.2.1 seems more pedantic.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,877,2020-04-09T21:49:28Z,2020-04-16T06:14:16Z,2020-04-16T06:14:16Z,MERGED,True,470,0,8,https://github.com/not4win,export rabbitmq metrics to pcp,11,[],https://github.com/performancecopilot/pcp/pull/877,https://github.com/not4win,1,https://github.com/performancecopilot/pcp/pull/877,Exported rabbitmq metrics into pcp. A python pmda is written which collects rabbitmq metrics through http GET request. A simple testing is also done(1855),Exported rabbitmq metrics into pcp. A python pmda is written which collects rabbitmq metrics through http GET request. A simple testing is also done(1855),True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,879,2020-04-11T18:14:17Z,2020-04-14T12:42:00Z,2020-04-15T09:10:40Z,CLOSED,False,0,0,0,https://github.com/andreasgerstmayr,pmproxy: return authentication errors,0,[],https://github.com/performancecopilot/pcp/pull/879,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/879,"had to open this PR before I forget my findings after easter ;)
Looks like after creating a new context (pmwebapi_new_context) the first PDU pmproxy sends to the PMCD with authentication credentials comes from the pmGetContextHostName_r function (pmLookupName_ctx inside this function), which gets called from pmwebapi_new_context -> pmwebapi_source_meta.
Unfortunately this function doesn't return the sts, so pmproxy doesn't know about any authentication errors. This PR introduces pmGetContextHostName_rr which returns the sts, and fixes QA 1388.
Another issue remains however, valgrind reports the following when the authentication is unsuccessful:
==459557== Invalid write of size 8
==459557==    at 0x4C51FA3: uv_run (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x112411: main_loop (server.c:856)
==459557==    by 0x11194E: main (pmproxy.c:427)
==459557==  Address 0x57f13f0 is 176 bytes inside a block of size 360 free'd
==459557==    at 0x483AA0C: free (vg_replace_malloc.c:540)
==459557==    by 0x48AB593: webgroup_new_context (webgroup.c:207)
==459557==    by 0x48AB593: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==  Block was alloc'd at
==459557==    at 0x483BB1A: calloc (vg_replace_malloc.c:762)
==459557==    by 0x48AB2CE: webgroup_new_context (webgroup.c:162)
==459557==    by 0x48AB2CE: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==","had to open this PR before I forget my findings after easter ;)
Looks like after creating a new context (pmwebapi_new_context) the first PDU pmproxy sends to the PMCD with authentication credentials comes from the pmGetContextHostName_r function (pmLookupName_ctx inside this function), which gets called from pmwebapi_new_context -> pmwebapi_source_meta.
Unfortunately this function doesn't return the sts, so pmproxy doesn't know about any authentication errors. This PR introduces pmGetContextHostName_rr which returns the sts, and fixes QA 1388.
Another issue remains however, valgrind reports the following when the authentication is unsuccessful:
==459557== Invalid write of size 8
==459557==    at 0x4C51FA3: uv_run (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x112411: main_loop (server.c:856)
==459557==    by 0x11194E: main (pmproxy.c:427)
==459557==  Address 0x57f13f0 is 176 bytes inside a block of size 360 free'd
==459557==    at 0x483AA0C: free (vg_replace_malloc.c:540)
==459557==    by 0x48AB593: webgroup_new_context (webgroup.c:207)
==459557==    by 0x48AB593: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==  Block was alloc'd at
==459557==    at 0x483BB1A: calloc (vg_replace_malloc.c:762)
==459557==    by 0x48AB2CE: webgroup_new_context (webgroup.c:162)
==459557==    by 0x48AB2CE: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,879,2020-04-11T18:14:17Z,2020-04-14T12:42:00Z,2020-04-15T09:10:40Z,CLOSED,False,0,0,0,https://github.com/andreasgerstmayr,pmproxy: return authentication errors,0,[],https://github.com/performancecopilot/pcp/pull/879,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/879#issuecomment-612490720,"had to open this PR before I forget my findings after easter ;)
Looks like after creating a new context (pmwebapi_new_context) the first PDU pmproxy sends to the PMCD with authentication credentials comes from the pmGetContextHostName_r function (pmLookupName_ctx inside this function), which gets called from pmwebapi_new_context -> pmwebapi_source_meta.
Unfortunately this function doesn't return the sts, so pmproxy doesn't know about any authentication errors. This PR introduces pmGetContextHostName_rr which returns the sts, and fixes QA 1388.
Another issue remains however, valgrind reports the following when the authentication is unsuccessful:
==459557== Invalid write of size 8
==459557==    at 0x4C51FA3: uv_run (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x112411: main_loop (server.c:856)
==459557==    by 0x11194E: main (pmproxy.c:427)
==459557==  Address 0x57f13f0 is 176 bytes inside a block of size 360 free'd
==459557==    at 0x483AA0C: free (vg_replace_malloc.c:540)
==459557==    by 0x48AB593: webgroup_new_context (webgroup.c:207)
==459557==    by 0x48AB593: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==  Block was alloc'd at
==459557==    at 0x483BB1A: calloc (vg_replace_malloc.c:762)
==459557==    by 0x48AB2CE: webgroup_new_context (webgroup.c:162)
==459557==    by 0x48AB2CE: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==","another thing: sasl2.conf contains mech_list: plain login digest-md5 gssapi per default.
if we don't specify any method in the hostspec in webgroup_access, sasl defaults to gssapi which doesn't work when using authentication with a /etc/pcp/passwd.db sasl database as shown in https://pcp.io/docs/lab.auth.html
Can/should pmproxy support gssapi auth? If not, we can just add method=plain in the hostspec in webgroup_access.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,879,2020-04-11T18:14:17Z,2020-04-14T12:42:00Z,2020-04-15T09:10:40Z,CLOSED,False,0,0,0,https://github.com/andreasgerstmayr,pmproxy: return authentication errors,0,[],https://github.com/performancecopilot/pcp/pull/879,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/879#issuecomment-612707280,"had to open this PR before I forget my findings after easter ;)
Looks like after creating a new context (pmwebapi_new_context) the first PDU pmproxy sends to the PMCD with authentication credentials comes from the pmGetContextHostName_r function (pmLookupName_ctx inside this function), which gets called from pmwebapi_new_context -> pmwebapi_source_meta.
Unfortunately this function doesn't return the sts, so pmproxy doesn't know about any authentication errors. This PR introduces pmGetContextHostName_rr which returns the sts, and fixes QA 1388.
Another issue remains however, valgrind reports the following when the authentication is unsuccessful:
==459557== Invalid write of size 8
==459557==    at 0x4C51FA3: uv_run (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x112411: main_loop (server.c:856)
==459557==    by 0x11194E: main (pmproxy.c:427)
==459557==  Address 0x57f13f0 is 176 bytes inside a block of size 360 free'd
==459557==    at 0x483AA0C: free (vg_replace_malloc.c:540)
==459557==    by 0x48AB593: webgroup_new_context (webgroup.c:207)
==459557==    by 0x48AB593: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==  Block was alloc'd at
==459557==    at 0x483BB1A: calloc (vg_replace_malloc.c:762)
==459557==    by 0x48AB2CE: webgroup_new_context (webgroup.c:162)
==459557==    by 0x48AB2CE: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==","Andreas, I've not really reviewed the code, but I did pull in your changes and tested (on f31). Seems to work and qa/1388 is now passing, so it looks good from that limited perspective!  Cheers",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,879,2020-04-11T18:14:17Z,2020-04-14T12:42:00Z,2020-04-15T09:10:40Z,CLOSED,False,0,0,0,https://github.com/andreasgerstmayr,pmproxy: return authentication errors,0,[],https://github.com/performancecopilot/pcp/pull/879,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/879#issuecomment-613918275,"had to open this PR before I forget my findings after easter ;)
Looks like after creating a new context (pmwebapi_new_context) the first PDU pmproxy sends to the PMCD with authentication credentials comes from the pmGetContextHostName_r function (pmLookupName_ctx inside this function), which gets called from pmwebapi_new_context -> pmwebapi_source_meta.
Unfortunately this function doesn't return the sts, so pmproxy doesn't know about any authentication errors. This PR introduces pmGetContextHostName_rr which returns the sts, and fixes QA 1388.
Another issue remains however, valgrind reports the following when the authentication is unsuccessful:
==459557== Invalid write of size 8
==459557==    at 0x4C51FA3: uv_run (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x112411: main_loop (server.c:856)
==459557==    by 0x11194E: main (pmproxy.c:427)
==459557==  Address 0x57f13f0 is 176 bytes inside a block of size 360 free'd
==459557==    at 0x483AA0C: free (vg_replace_malloc.c:540)
==459557==    by 0x48AB593: webgroup_new_context (webgroup.c:207)
==459557==    by 0x48AB593: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==  Block was alloc'd at
==459557==    at 0x483BB1A: calloc (vg_replace_malloc.c:762)
==459557==    by 0x48AB2CE: webgroup_new_context (webgroup.c:162)
==459557==    by 0x48AB2CE: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==","I've made an error here, this PR was based on the master branch of my own fork... fixed PR with the proper base branch: #882",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,880,2020-04-13T02:21:49Z,2020-04-14T04:13:02Z,2020-08-18T21:32:17Z,MERGED,True,357,61,31,https://github.com/kmcdonell,"pmproxy -F, rc and systemd service changes + QA",20,[],https://github.com/performancecopilot/pcp/pull/880,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/880,"Changes committed to git@github.com:kmcdonell/pcp.git 20200411
Ken McDonell (18):
qa/1190: fix ps(1) filter for pmcd ...
qa: most of the pmproxy group of tests
qa/1696: need python3 (for pmproxy_load_test.python)
qa/915: turn discovery off in the minimalist pmproxy.conf
qa/admin/other-packages/manifest: add packages for pstree (and fuser)
qa/common.avahi: put service state back the way it was at the beginning
src/pmproxy/src/deprecated.c: fix compilation error
src/pmproxy: changes to work better with systemd
qa/297: kill off my pmproxy in _cleanup()
qa/651: tidy up ps(1) filter
qa/common.check: make default PMDA install optional in _restore_pmda_install()
qa/457: clean up the logger PMDA configuration
qa/check-flakey: dodge qa sequence numbers that look like octal to printf(1)
pmproxy: second iteration of systemd mode
qa/check-flakey: fix small wrinkle in data from check.time
qa/1190: don't check for ""qa"" or ""QA"" in .pki/nssdb .db files
qa/check.callback.sample: check if pre-run AVC file exists before diff
qa/457: cosmetic change in diags
man/man1/pmproxy.1               |   34 +++++++++++++++++++++++++--
qa/1190                          |    7 ++++-
qa/1379                          |   13 ++++++++++
qa/1388                          |   16 ++++++++++--
qa/1401                          |   13 ++++++++++
qa/1433                          |   14 ++++++++++-
qa/1543                          |   13 ++++++++++
qa/1544                          |   14 +++++++++++
qa/1573                          |   14 +++++++++--
qa/1573.out                      |    1
qa/1661                          |   16 ++++++++++--
qa/1661.out                      |    2 -
qa/1696                          |    4 +++
qa/294                           |   15 ++++++++++-
qa/295                           |   15 ++++++++++-
qa/297                           |   17 +++++++++++--
qa/457                           |   25 +++++++++++++------
qa/457.out                       |    2 -
qa/651                           |   16 ++++++++----
qa/713                           |   17 +++++++++++--
qa/780                           |   13 ++++++++++
qa/915                           |    2 -
qa/admin/other-packages/manifest |   14 +++++++++++
qa/check-flakey                  |    7 +++--
qa/check.callback.sample         |   17 +++++++------
qa/common.avahi                  |   28 +++++++++++++++++++++-
qa/common.check                  |   15 +++++++++--
src/pmproxy/pmproxy.service.in   |    4 ---
src/pmproxy/rc_pmproxy           |   27 +++++++++++++++------
src/pmproxy/src/deprecated.c     |    2 -
src/pmproxy/src/pmproxy.c        |   49 ++++++++++++++++++++++++++++-----------
31 files changed, 371 insertions(+), 75 deletions(-)
Details ...
commit cdb5d4e
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 13 12:19:41 2020 +1000
qa/457: cosmetic change in diags

commit 79450db
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 13 11:28:23 2020 +1000
qa/check.callback.sample: check if pre-run AVC file exists before diff

commit 681c4b2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Apr 12 15:27:38 2020 +1000
qa/1190: don't check for ""qa"" or ""QA"" in .pki/nssdb .db files

commit 8fc3827
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Apr 12 14:46:13 2020 +1000
qa/check-flakey: fix small wrinkle in data from check.time

commit 706b8f1
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Apr 12 14:19:15 2020 +1000
pmproxy: second iteration of systemd mode

Drop the dependence on NOTIFY_SOCKET in the environment to intuit the
correct behaviour.

1. add -F command line option to pmproxy to explicity request
   half-baked foreground mode where we do not fork(), but we do manage
   the pidfile and set the uid to that of the pcp user.
2. add ""start-systemd"" as an alternative to ""start"" in the rc script,
   and use this to trigger the alternate exec with -F to start pmproxy.
3. use ""start-systemd"" in the service file

commit 0d8ea3a
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Apr 12 14:04:44 2020 +1000
qa/check-flakey: dodge qa sequence numbers that look like octal to printf(1)

commit e191543
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Apr 12 14:03:01 2020 +1000
qa/457: clean up the logger PMDA configuration

qa/1190 found that this test (qa/457) was leaving a configuration
file behind in $PCP_VAR_DIR/config/logger/logger.conf

commit 55a69bf
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Apr 12 13:59:58 2020 +1000
qa/common.check: make default PMDA install optional in _restore_pmda_install()

The default PMDA install recipe:
    $ ./Install </dev/null
may not work if the installation is designed to be interactive, or
requires explicit input values.

To accommodate this, _restore_pmda_install() supports an optional 2nd
parameter and if this is not empty, the default PMDA install will not
be attempted.  It is assumed that the caller will be taking care of
PMDA's final well-being if this is the case.

commit ec92902
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 17:21:14 2020 +1000
qa/651: tidy up ps(1) filter

commit 12b375f
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 17:20:49 2020 +1000
qa/297: kill off my pmproxy in _cleanup()

commit 7b2944b
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:30:48 2020 +1000
src/pmproxy: changes to work better with systemd

1. Drop the ExecStop and PIDFile lines in the services file (neither
   is needed, and ExecStop is harmful)
2. Change the ""rc"" script so that if NOTIFY_SOCKET is set in the
   environment, assume we're being launched from systemd with
   Type=notify and we do NOT want to daemonize or launch a new process,
   so exec pmproxy with -f
3. In pmproxy, if NOTIFY_SOCKET is set in the environment then create
   the pidfile and call pmSetProcessIdentity() even if -f is used.

commit af1762d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:16:56 2020 +1000
src/pmproxy/src/deprecated.c: fix compilation error

Only exposed when DESPERATE defined, which it is not by default.

commit e4e1a63
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:15:07 2020 +1000
qa/common.avahi: put service state back the way it was at the beginning

Same as for the recent pmproxy group of tests.

commit 53fa296
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:13:59 2020 +1000
qa/admin/other-packages/manifest: add packages for pstree (and fuser)

commit 2195d11
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:13:01 2020 +1000
qa/915: turn discovery off in the minimalist pmproxy.conf

Not needed for the purposes of this test.

commit 1230e1d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:12:15 2020 +1000
qa/1696: need python3 (for pmproxy_load_test.python)

commit ef71735
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:10:57 2020 +1000
qa: most of the pmproxy group of tests

Check to see if pmproxy is running at the beginnning and put it back
the way it was at the end of the test.

commit 3e70f0a
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:06:36 2020 +1000
qa/1190: fix ps(1) filter for pmcd ...

Need to accommodate case where pmcd is launched without arguments.","Changes committed to git@github.com:kmcdonell/pcp.git 20200411
Ken McDonell (18):
qa/1190: fix ps(1) filter for pmcd ...
qa: most of the pmproxy group of tests
qa/1696: need python3 (for pmproxy_load_test.python)
qa/915: turn discovery off in the minimalist pmproxy.conf
qa/admin/other-packages/manifest: add packages for pstree (and fuser)
qa/common.avahi: put service state back the way it was at the beginning
src/pmproxy/src/deprecated.c: fix compilation error
src/pmproxy: changes to work better with systemd
qa/297: kill off my pmproxy in _cleanup()
qa/651: tidy up ps(1) filter
qa/common.check: make default PMDA install optional in _restore_pmda_install()
qa/457: clean up the logger PMDA configuration
qa/check-flakey: dodge qa sequence numbers that look like octal to printf(1)
pmproxy: second iteration of systemd mode
qa/check-flakey: fix small wrinkle in data from check.time
qa/1190: don't check for ""qa"" or ""QA"" in .pki/nssdb .db files
qa/check.callback.sample: check if pre-run AVC file exists before diff
qa/457: cosmetic change in diags
man/man1/pmproxy.1               |   34 +++++++++++++++++++++++++--
qa/1190                          |    7 ++++-
qa/1379                          |   13 ++++++++++
qa/1388                          |   16 ++++++++++--
qa/1401                          |   13 ++++++++++
qa/1433                          |   14 ++++++++++-
qa/1543                          |   13 ++++++++++
qa/1544                          |   14 +++++++++++
qa/1573                          |   14 +++++++++--
qa/1573.out                      |    1
qa/1661                          |   16 ++++++++++--
qa/1661.out                      |    2 -
qa/1696                          |    4 +++
qa/294                           |   15 ++++++++++-
qa/295                           |   15 ++++++++++-
qa/297                           |   17 +++++++++++--
qa/457                           |   25 +++++++++++++------
qa/457.out                       |    2 -
qa/651                           |   16 ++++++++----
qa/713                           |   17 +++++++++++--
qa/780                           |   13 ++++++++++
qa/915                           |    2 -
qa/admin/other-packages/manifest |   14 +++++++++++
qa/check-flakey                  |    7 +++--
qa/check.callback.sample         |   17 +++++++------
qa/common.avahi                  |   28 +++++++++++++++++++++-
qa/common.check                  |   15 +++++++++--
src/pmproxy/pmproxy.service.in   |    4 ---
src/pmproxy/rc_pmproxy           |   27 +++++++++++++++------
src/pmproxy/src/deprecated.c     |    2 -
src/pmproxy/src/pmproxy.c        |   49 ++++++++++++++++++++++++++++-----------
31 files changed, 371 insertions(+), 75 deletions(-)
Details ...
commit cdb5d4e
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 13 12:19:41 2020 +1000
qa/457: cosmetic change in diags

commit 79450db
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Apr 13 11:28:23 2020 +1000
qa/check.callback.sample: check if pre-run AVC file exists before diff

commit 681c4b2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Apr 12 15:27:38 2020 +1000
qa/1190: don't check for ""qa"" or ""QA"" in .pki/nssdb .db files

commit 8fc3827
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Apr 12 14:46:13 2020 +1000
qa/check-flakey: fix small wrinkle in data from check.time

commit 706b8f1
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Apr 12 14:19:15 2020 +1000
pmproxy: second iteration of systemd mode

Drop the dependence on NOTIFY_SOCKET in the environment to intuit the
correct behaviour.

1. add -F command line option to pmproxy to explicity request
   half-baked foreground mode where we do not fork(), but we do manage
   the pidfile and set the uid to that of the pcp user.
2. add ""start-systemd"" as an alternative to ""start"" in the rc script,
   and use this to trigger the alternate exec with -F to start pmproxy.
3. use ""start-systemd"" in the service file

commit 0d8ea3a
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Apr 12 14:04:44 2020 +1000
qa/check-flakey: dodge qa sequence numbers that look like octal to printf(1)

commit e191543
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Apr 12 14:03:01 2020 +1000
qa/457: clean up the logger PMDA configuration

qa/1190 found that this test (qa/457) was leaving a configuration
file behind in $PCP_VAR_DIR/config/logger/logger.conf

commit 55a69bf
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Apr 12 13:59:58 2020 +1000
qa/common.check: make default PMDA install optional in _restore_pmda_install()

The default PMDA install recipe:
    $ ./Install </dev/null
may not work if the installation is designed to be interactive, or
requires explicit input values.

To accommodate this, _restore_pmda_install() supports an optional 2nd
parameter and if this is not empty, the default PMDA install will not
be attempted.  It is assumed that the caller will be taking care of
PMDA's final well-being if this is the case.

commit ec92902
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 17:21:14 2020 +1000
qa/651: tidy up ps(1) filter

commit 12b375f
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 17:20:49 2020 +1000
qa/297: kill off my pmproxy in _cleanup()

commit 7b2944b
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:30:48 2020 +1000
src/pmproxy: changes to work better with systemd

1. Drop the ExecStop and PIDFile lines in the services file (neither
   is needed, and ExecStop is harmful)
2. Change the ""rc"" script so that if NOTIFY_SOCKET is set in the
   environment, assume we're being launched from systemd with
   Type=notify and we do NOT want to daemonize or launch a new process,
   so exec pmproxy with -f
3. In pmproxy, if NOTIFY_SOCKET is set in the environment then create
   the pidfile and call pmSetProcessIdentity() even if -f is used.

commit af1762d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:16:56 2020 +1000
src/pmproxy/src/deprecated.c: fix compilation error

Only exposed when DESPERATE defined, which it is not by default.

commit e4e1a63
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:15:07 2020 +1000
qa/common.avahi: put service state back the way it was at the beginning

Same as for the recent pmproxy group of tests.

commit 53fa296
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:13:59 2020 +1000
qa/admin/other-packages/manifest: add packages for pstree (and fuser)

commit 2195d11
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:13:01 2020 +1000
qa/915: turn discovery off in the minimalist pmproxy.conf

Not needed for the purposes of this test.

commit 1230e1d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:12:15 2020 +1000
qa/1696: need python3 (for pmproxy_load_test.python)

commit ef71735
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:10:57 2020 +1000
qa: most of the pmproxy group of tests

Check to see if pmproxy is running at the beginnning and put it back
the way it was at the end of the test.

commit 3e70f0a
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 11 16:06:36 2020 +1000
qa/1190: fix ps(1) filter for pmcd ...

Need to accommodate case where pmcd is launched without arguments.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,881,2020-04-15T06:59:49Z,2020-04-19T23:11:56Z,2020-04-19T23:12:37Z,MERGED,True,95,34,9,https://github.com/goodwinos,Change pmlogger service unit to type=notify,6,[],https://github.com/performancecopilot/pcp/pull/881,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/881,"pushed up to a 'notify' branch if anyone is interested in review and QA. I still have some QA fallout to work through. I've seen failures in 083, 322, 374 on Fedora platforms. Also need an update to 917 and maybe 1622 for the SELinux policy update. Testing on other platfoms (RHEL7, RHEL8, centos, debian and non-systemd platforms is still TODO at this stage).
Similar (though simpler) changes are needed for the pmie service to.","pushed up to a 'notify' branch if anyone is interested in review and QA. I still have some QA fallout to work through. I've seen failures in 083, 322, 374 on Fedora platforms. Also need an update to 917 and maybe 1622 for the SELinux policy update. Testing on other platfoms (RHEL7, RHEL8, centos, debian and non-systemd platforms is still TODO at this stage).
Similar (though simpler) changes are needed for the pmie service to.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,882,2020-04-15T09:05:59Z,2020-04-17T05:39:41Z,2020-09-21T15:49:08Z,MERGED,True,103,52,8,https://github.com/andreasgerstmayr,pmproxy: return authentication errors,2,[],https://github.com/performancecopilot/pcp/pull/882,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/882,"somehow I messed up the last PR (#879) and set the base branch of that PR to the master branch of my fork, instead of the auth-changes feature branch of my fork... here is it again:
Looks like after creating a new context (pmwebapi_new_context) the first PDU pmproxy sends to the PMCD with authentication credentials comes from the pmGetContextHostName_r function (pmLookupName_ctx inside this function), which gets called from pmwebapi_new_context -> pmwebapi_source_meta.
Unfortunately this function doesn't return the sts, so pmproxy doesn't know about any authentication errors. This PR introduces pmGetContextHostName_rr which returns the sts, and fixes QA 1388.
Another issue remains however, valgrind reports the following when the authentication is unsuccessful:
==459557== Invalid write of size 8
==459557==    at 0x4C51FA3: uv_run (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x112411: main_loop (server.c:856)
==459557==    by 0x11194E: main (pmproxy.c:427)
==459557==  Address 0x57f13f0 is 176 bytes inside a block of size 360 free'd
==459557==    at 0x483AA0C: free (vg_replace_malloc.c:540)
==459557==    by 0x48AB593: webgroup_new_context (webgroup.c:207)
==459557==    by 0x48AB593: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==  Block was alloc'd at
==459557==    at 0x483BB1A: calloc (vg_replace_malloc.c:762)
==459557==    by 0x48AB2CE: webgroup_new_context (webgroup.c:162)
==459557==    by 0x48AB2CE: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==","somehow I messed up the last PR (#879) and set the base branch of that PR to the master branch of my fork, instead of the auth-changes feature branch of my fork... here is it again:
Looks like after creating a new context (pmwebapi_new_context) the first PDU pmproxy sends to the PMCD with authentication credentials comes from the pmGetContextHostName_r function (pmLookupName_ctx inside this function), which gets called from pmwebapi_new_context -> pmwebapi_source_meta.
Unfortunately this function doesn't return the sts, so pmproxy doesn't know about any authentication errors. This PR introduces pmGetContextHostName_rr which returns the sts, and fixes QA 1388.
Another issue remains however, valgrind reports the following when the authentication is unsuccessful:
==459557== Invalid write of size 8
==459557==    at 0x4C51FA3: uv_run (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x112411: main_loop (server.c:856)
==459557==    by 0x11194E: main (pmproxy.c:427)
==459557==  Address 0x57f13f0 is 176 bytes inside a block of size 360 free'd
==459557==    at 0x483AA0C: free (vg_replace_malloc.c:540)
==459557==    by 0x48AB593: webgroup_new_context (webgroup.c:207)
==459557==    by 0x48AB593: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==  Block was alloc'd at
==459557==    at 0x483BB1A: calloc (vg_replace_malloc.c:762)
==459557==    by 0x48AB2CE: webgroup_new_context (webgroup.c:162)
==459557==    by 0x48AB2CE: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,882,2020-04-15T09:05:59Z,2020-04-17T05:39:41Z,2020-09-21T15:49:08Z,MERGED,True,103,52,8,https://github.com/andreasgerstmayr,pmproxy: return authentication errors,2,[],https://github.com/performancecopilot/pcp/pull/882,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/882#issuecomment-615053452,"somehow I messed up the last PR (#879) and set the base branch of that PR to the master branch of my fork, instead of the auth-changes feature branch of my fork... here is it again:
Looks like after creating a new context (pmwebapi_new_context) the first PDU pmproxy sends to the PMCD with authentication credentials comes from the pmGetContextHostName_r function (pmLookupName_ctx inside this function), which gets called from pmwebapi_new_context -> pmwebapi_source_meta.
Unfortunately this function doesn't return the sts, so pmproxy doesn't know about any authentication errors. This PR introduces pmGetContextHostName_rr which returns the sts, and fixes QA 1388.
Another issue remains however, valgrind reports the following when the authentication is unsuccessful:
==459557== Invalid write of size 8
==459557==    at 0x4C51FA3: uv_run (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x112411: main_loop (server.c:856)
==459557==    by 0x11194E: main (pmproxy.c:427)
==459557==  Address 0x57f13f0 is 176 bytes inside a block of size 360 free'd
==459557==    at 0x483AA0C: free (vg_replace_malloc.c:540)
==459557==    by 0x48AB593: webgroup_new_context (webgroup.c:207)
==459557==    by 0x48AB593: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==  Block was alloc'd at
==459557==    at 0x483BB1A: calloc (vg_replace_malloc.c:762)
==459557==    by 0x48AB2CE: webgroup_new_context (webgroup.c:162)
==459557==    by 0x48AB2CE: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==","@andreasgerstmayr looks good, nice work!  I think I see the valgrind issue - its complaining about an address that is smack bang in the middle of a recently freed context structure, so I suspect that's the uv_timer_t inside our context_t (load.h line 48).  Which would mean we've registered the timer in new context and then its accessed back in uv_run() after freeing the context on auth failure.  I'll push a follow-up commit to yours to tackle this one.
In terms of the name pmGetContextHostName_rr - I'm not a big fan of the '_rr' :) - how about we go back to basics and call this (finally final!) API version pmGetHostName(3)?  Either way, we need a man page update here too.
Finally, this commit seems to have some unrelated changes to pmdatest_python.python in QA?  Could you double check thats supposed to be there?  Thanks.  (I've merged, so go right ahead and undo that part if its in error)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,882,2020-04-15T09:05:59Z,2020-04-17T05:39:41Z,2020-09-21T15:49:08Z,MERGED,True,103,52,8,https://github.com/andreasgerstmayr,pmproxy: return authentication errors,2,[],https://github.com/performancecopilot/pcp/pull/882,https://github.com/andreasgerstmayr,3,https://github.com/performancecopilot/pcp/pull/882#issuecomment-615162321,"somehow I messed up the last PR (#879) and set the base branch of that PR to the master branch of my fork, instead of the auth-changes feature branch of my fork... here is it again:
Looks like after creating a new context (pmwebapi_new_context) the first PDU pmproxy sends to the PMCD with authentication credentials comes from the pmGetContextHostName_r function (pmLookupName_ctx inside this function), which gets called from pmwebapi_new_context -> pmwebapi_source_meta.
Unfortunately this function doesn't return the sts, so pmproxy doesn't know about any authentication errors. This PR introduces pmGetContextHostName_rr which returns the sts, and fixes QA 1388.
Another issue remains however, valgrind reports the following when the authentication is unsuccessful:
==459557== Invalid write of size 8
==459557==    at 0x4C51FA3: uv_run (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x112411: main_loop (server.c:856)
==459557==    by 0x11194E: main (pmproxy.c:427)
==459557==  Address 0x57f13f0 is 176 bytes inside a block of size 360 free'd
==459557==    at 0x483AA0C: free (vg_replace_malloc.c:540)
==459557==    by 0x48AB593: webgroup_new_context (webgroup.c:207)
==459557==    by 0x48AB593: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==  Block was alloc'd at
==459557==    at 0x483BB1A: calloc (vg_replace_malloc.c:762)
==459557==    by 0x48AB2CE: webgroup_new_context (webgroup.c:162)
==459557==    by 0x48AB2CE: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==","Thanks for the review & merge!

In terms of the name pmGetContextHostName_rr - I'm not a big fan of the '_rr' :) - how about we go back to basics and call this (finally final!) API version pmGetHostName(3)? Either way, we need a man page update here too.

Is it fine to change the signature of an existing API function? (pmGetHostName_r was created to not break the existing API, that's why I added a pmGetHostName_rr :D)

Finally, this commit seems to have some unrelated changes to pmdatest_python.python in QA? Could you double check thats supposed to be there? Thanks. (I've merged, so go right ahead and undo that part if its in error)

Yes, that's supposed to be here - the QA creates multiple contexts and checks associated attributes (the auth username), so the internal mapping from a context to an attribute should be cleared when a context ends, otherwise we end up with an inconsistent state.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,882,2020-04-15T09:05:59Z,2020-04-17T05:39:41Z,2020-09-21T15:49:08Z,MERGED,True,103,52,8,https://github.com/andreasgerstmayr,pmproxy: return authentication errors,2,[],https://github.com/performancecopilot/pcp/pull/882,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/882#issuecomment-616244195,"somehow I messed up the last PR (#879) and set the base branch of that PR to the master branch of my fork, instead of the auth-changes feature branch of my fork... here is it again:
Looks like after creating a new context (pmwebapi_new_context) the first PDU pmproxy sends to the PMCD with authentication credentials comes from the pmGetContextHostName_r function (pmLookupName_ctx inside this function), which gets called from pmwebapi_new_context -> pmwebapi_source_meta.
Unfortunately this function doesn't return the sts, so pmproxy doesn't know about any authentication errors. This PR introduces pmGetContextHostName_rr which returns the sts, and fixes QA 1388.
Another issue remains however, valgrind reports the following when the authentication is unsuccessful:
==459557== Invalid write of size 8
==459557==    at 0x4C51FA3: uv_run (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x112411: main_loop (server.c:856)
==459557==    by 0x11194E: main (pmproxy.c:427)
==459557==  Address 0x57f13f0 is 176 bytes inside a block of size 360 free'd
==459557==    at 0x483AA0C: free (vg_replace_malloc.c:540)
==459557==    by 0x48AB593: webgroup_new_context (webgroup.c:207)
==459557==    by 0x48AB593: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==  Block was alloc'd at
==459557==    at 0x483BB1A: calloc (vg_replace_malloc.c:762)
==459557==    by 0x48AB2CE: webgroup_new_context (webgroup.c:162)
==459557==    by 0x48AB2CE: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==","In terms of the name pmGetContextHostName_rr - I'm not a big fan of the '_rr' :) - how about we go back to basics and call this (finally final!) API version pmGetHostName(3)? Either way, we need a man page update here too.

Is it fine to change the signature of an existing API function? (pmGetHostName_r was created to not break the existing API, that's why I added a pmGetHostName_rr :D)

It's not fine to change signature of existing functions (but that's not what I suggested), we must keep existing APIs as-is for any third-party tools using the library.  As we're closing in on QA week, I've gone ahead and made the change I suggested with the alternate name (pmGetHostName) and updated docs, etc.


Finally, this commit seems to have some unrelated changes
Yes, that's supposed to be here


Great, thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,882,2020-04-15T09:05:59Z,2020-04-17T05:39:41Z,2020-09-21T15:49:08Z,MERGED,True,103,52,8,https://github.com/andreasgerstmayr,pmproxy: return authentication errors,2,[],https://github.com/performancecopilot/pcp/pull/882,https://github.com/andreasgerstmayr,5,https://github.com/performancecopilot/pcp/pull/882#issuecomment-616526940,"somehow I messed up the last PR (#879) and set the base branch of that PR to the master branch of my fork, instead of the auth-changes feature branch of my fork... here is it again:
Looks like after creating a new context (pmwebapi_new_context) the first PDU pmproxy sends to the PMCD with authentication credentials comes from the pmGetContextHostName_r function (pmLookupName_ctx inside this function), which gets called from pmwebapi_new_context -> pmwebapi_source_meta.
Unfortunately this function doesn't return the sts, so pmproxy doesn't know about any authentication errors. This PR introduces pmGetContextHostName_rr which returns the sts, and fixes QA 1388.
Another issue remains however, valgrind reports the following when the authentication is unsuccessful:
==459557== Invalid write of size 8
==459557==    at 0x4C51FA3: uv_run (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x112411: main_loop (server.c:856)
==459557==    by 0x11194E: main (pmproxy.c:427)
==459557==  Address 0x57f13f0 is 176 bytes inside a block of size 360 free'd
==459557==    at 0x483AA0C: free (vg_replace_malloc.c:540)
==459557==    by 0x48AB593: webgroup_new_context (webgroup.c:207)
==459557==    by 0x48AB593: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==  Block was alloc'd at
==459557==    at 0x483BB1A: calloc (vg_replace_malloc.c:762)
==459557==    by 0x48AB2CE: webgroup_new_context (webgroup.c:162)
==459557==    by 0x48AB2CE: webgroup_lookup_context (webgroup.c:260)
==459557==    by 0x48ACA4E: pmWebGroupContext (webgroup.c:299)
==459557==    by 0x4C4DBCD: ??? (in /usr/lib64/libuv.so.1.0.0)
==459557==    by 0x4C7D4E1: start_thread (in /usr/lib64/libpthread-2.30.so)
==459557==    by 0x4E406A2: clone (in /usr/lib64/libc-2.30.so)
==459557==","Is it fine to change the signature of an existing API function? (pmGetHostName_r was created to not break the existing API, that's why I added a pmGetHostName_rr :D)

It's not fine to change signature of existing functions (but that's not what I suggested), we must keep existing APIs as-is for any third-party tools using the library.

Ah sorry, I didn't realize that the old functions have context inside the name, and the new suggested function name doesn't. Now it makes sense.

As we're closing in on QA week, I've gone ahead and made the change I suggested with the alternate name (pmGetHostName) and updated docs, etc.

Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,883,2020-04-15T21:14:46Z,2020-04-16T00:00:30Z,2020-04-16T00:00:31Z,MERGED,True,26,4,2,https://github.com/kmcdonell,tarball update fix,3,[],https://github.com/performancecopilot/pcp/pull/883,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/883,"Changes committed to git@github.com:kmcdonell/pcp.git 20200416
Ken McDonell (1):
build/tar/preinstall: take more care of services before upgrade
build/tar/preinstall.head.in |   15 ++++++++++++++-
build/tar/preinstall.tail    |   15 ++++++++++++---
2 files changed, 26 insertions(+), 4 deletions(-)
Details ...
commit 8242cb5
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 16 07:11:59 2020 +1000
build/tar/preinstall: take more care of services before upgrade

Previous logic for stopping services was flawed for some
build-and-update workflows (involving pcp-daily).

These changes fix that, but will have no effect for most tar-based
installations.","Changes committed to git@github.com:kmcdonell/pcp.git 20200416
Ken McDonell (1):
build/tar/preinstall: take more care of services before upgrade
build/tar/preinstall.head.in |   15 ++++++++++++++-
build/tar/preinstall.tail    |   15 ++++++++++++---
2 files changed, 26 insertions(+), 4 deletions(-)
Details ...
commit 8242cb5
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Apr 16 07:11:59 2020 +1000
build/tar/preinstall: take more care of services before upgrade

Previous logic for stopping services was flawed for some
build-and-update workflows (involving pcp-daily).

These changes fix that, but will have no effect for most tar-based
installations.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,884,2020-04-16T08:05:48Z,2020-04-16T22:26:17Z,2020-04-16T22:26:17Z,MERGED,True,261,261,2,https://github.com/not4win,cleanup rabbitmq pmda ,1,[],https://github.com/performancecopilot/pcp/pull/884,https://github.com/not4win,1,https://github.com/performancecopilot/pcp/pull/884,Handled edge case(len=0 issue) and cleaned up code using pylint.,Handled edge case(len=0 issue) and cleaned up code using pylint.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,885,2020-04-16T20:31:07Z,2020-04-17T05:46:18Z,2020-09-21T15:49:10Z,MERGED,True,134,5,5,https://github.com/andreasgerstmayr,libpcp: fix authentication for multi-step auth methods,1,[],https://github.com/performancecopilot/pcp/pull/885,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/885,"fixes auth for login & digest-md5 methods, and removes gssapi from the default auth methods","fixes auth for login & digest-md5 methods, and removes gssapi from the default auth methods",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,887,2020-04-17T23:36:56Z,2020-04-19T23:00:59Z,2020-04-19T23:00:59Z,MERGED,True,67,66,1,https://github.com/not4win,added help text for all metrics and corrected datatypes,2,[],https://github.com/performancecopilot/pcp/pull/887,https://github.com/not4win,1,https://github.com/performancecopilot/pcp/pull/887,Added help text for all 57 metrics and corrected some metrics to float datatype instead of string.,Added help text for all 57 metrics and corrected some metrics to float datatype instead of string.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,888,2020-04-18T01:24:45Z,2020-04-19T23:27:52Z,2020-08-18T21:32:22Z,MERGED,True,634,68,26,https://github.com/kmcdonell,selinux fixes for rhel 7.8 + odds and sods,11,[],https://github.com/performancecopilot/pcp/pull/888,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/888,"Changes committed to git@github.com:kmcdonell/pcp.git 20200416
Ken McDonell (5):
SELinux: add config-driven setup for pcpqa.te
check-vm: control file updates for RHEL 7.8 and RHEL 8
qa: enable the use of pcpqa.te on SELinux platforms
qa/1141: fix grep to filter semodule -l output
qa/917.out.in: add recently added pcp_pmlogger_t] [unreserved_port_t] rule
configure                           |  111 ++++++++++++++++++++++++++++++---
configure.ac                        |  109 ++++++++++++++++++++++++++++++--
qa/.gitignore                       |    1
qa/1141                             |    2
qa/1490                             |    2
qa/1622                             |    2
qa/917                              |    7 +-
qa/917.out.in                       |    1
qa/GNUmakefile                      |   52 +++++++++++++--
qa/GNUselinuxdefs                   |   79 +++++++++++++++++++++++
qa/admin/other-packages/manifest    |    4 -
qa/admin/other-packages/skip        |    1
qa/admin/other-packages/unavailable |    2
qa/do-avc-work                      |   36 ++++++++++
qa/pcpqa.te.in                      |  121 ++++++++++++++++++++++++++++++++++++
src/include/builddefs.in            |   19 +++++
src/selinux/GNUlocaldefs            |    6 -
src/selinux/GNUmakefile             |    4 -
src/selinux/README                  |   10 ++
src/selinux/pcpupstream.te.in       |    4 -
20 files changed, 539 insertions(+), 34 deletions(-)
Details ...
commit cb822f4
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 11:23:01 2020 +1000
qa/917.out.in: add recently added pcp_pmlogger_t] [unreserved_port_t] rule

commit b77c888
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 11:20:32 2020 +1000
qa/1141: fix grep to filter semodule -l output

At least on vm29 (RHEL 7.8), semodule -l includes a
<tab><module_version_number> on the end of the line ... this was not
being matched and the test was _notrun, even when pcpupstream was
installed.

Change supports both the original and new grep pattern, in case the
old one was correct on some platforms (and not a mistake).

commit d1920f0
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 09:02:38 2020 +1000
qa: enable the use of pcpqa.te on SELinux platforms

The pcpqa policy module contains rules the avoid AVC errors/warnings
that originate from apps used in QA, or used by our PMDAs.  In either
case these rules are not appropriate for inclusion in the main PCP
policy module (pcpupstream).

commit 740e395
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 09:01:43 2020 +1000
check-vm: control file updates for RHEL 7.8 and RHEL 8

commit 3dfb544
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 08:59:40 2020 +1000
SELinux: add config-driven setup for pcpqa.te

This commit adds a bunch of aditional selinux-related macros
in builddefs.  These will be used in the next commit to turn
on the use of pcpqa.te.

Also a slight renaming of the ""BPF"" macros used for SELinux to make
'em more consistent with other uses.","Changes committed to git@github.com:kmcdonell/pcp.git 20200416
Ken McDonell (5):
SELinux: add config-driven setup for pcpqa.te
check-vm: control file updates for RHEL 7.8 and RHEL 8
qa: enable the use of pcpqa.te on SELinux platforms
qa/1141: fix grep to filter semodule -l output
qa/917.out.in: add recently added pcp_pmlogger_t] [unreserved_port_t] rule
configure                           |  111 ++++++++++++++++++++++++++++++---
configure.ac                        |  109 ++++++++++++++++++++++++++++++--
qa/.gitignore                       |    1
qa/1141                             |    2
qa/1490                             |    2
qa/1622                             |    2
qa/917                              |    7 +-
qa/917.out.in                       |    1
qa/GNUmakefile                      |   52 +++++++++++++--
qa/GNUselinuxdefs                   |   79 +++++++++++++++++++++++
qa/admin/other-packages/manifest    |    4 -
qa/admin/other-packages/skip        |    1
qa/admin/other-packages/unavailable |    2
qa/do-avc-work                      |   36 ++++++++++
qa/pcpqa.te.in                      |  121 ++++++++++++++++++++++++++++++++++++
src/include/builddefs.in            |   19 +++++
src/selinux/GNUlocaldefs            |    6 -
src/selinux/GNUmakefile             |    4 -
src/selinux/README                  |   10 ++
src/selinux/pcpupstream.te.in       |    4 -
20 files changed, 539 insertions(+), 34 deletions(-)
Details ...
commit cb822f4
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 11:23:01 2020 +1000
qa/917.out.in: add recently added pcp_pmlogger_t] [unreserved_port_t] rule

commit b77c888
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 11:20:32 2020 +1000
qa/1141: fix grep to filter semodule -l output

At least on vm29 (RHEL 7.8), semodule -l includes a
<tab><module_version_number> on the end of the line ... this was not
being matched and the test was _notrun, even when pcpupstream was
installed.

Change supports both the original and new grep pattern, in case the
old one was correct on some platforms (and not a mistake).

commit d1920f0
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 09:02:38 2020 +1000
qa: enable the use of pcpqa.te on SELinux platforms

The pcpqa policy module contains rules the avoid AVC errors/warnings
that originate from apps used in QA, or used by our PMDAs.  In either
case these rules are not appropriate for inclusion in the main PCP
policy module (pcpupstream).

commit 740e395
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 09:01:43 2020 +1000
check-vm: control file updates for RHEL 7.8 and RHEL 8

commit 3dfb544
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 08:59:40 2020 +1000
SELinux: add config-driven setup for pcpqa.te

This commit adds a bunch of aditional selinux-related macros
in builddefs.  These will be used in the next commit to turn
on the use of pcpqa.te.

Also a slight renaming of the ""BPF"" macros used for SELinux to make
'em more consistent with other uses.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,889,2020-04-18T09:12:32Z,2020-04-19T23:27:51Z,2020-08-18T21:32:28Z,MERGED,True,643,74,29,https://github.com/kmcdonell,"pmlogger rc script, qa",16,[],https://github.com/performancecopilot/pcp/pull/889,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/889,"Changes committed to git@github.com:kmcdonell/pcp.git 20200418
Ken McDonell (4):
qa/common.check: fix diagnostic typo in _service()
src/pmlogger/rc_pmlogger: important fix after SIGUSR2 for log rolling
qa/348: important fixes
qa/297.out: remade after pmGetContextHostName_r -> pmGetContextHostName_rr change
qa/297.out               |    4 ++--
qa/348                   |    7 +++++--
qa/common.check          |    2 +-
src/pmlogger/rc_pmlogger |    2 +-
4 files changed, 9 insertions(+), 6 deletions(-)
Details ...
commit 8c780ee
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 19:10:16 2020 +1000
qa/297.out: remade after pmGetContextHostName_r -> pmGetContextHostName_rr change

commit b924347
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 18:14:47 2020 +1000
qa/348: important fixes

1. the Bourne shell is in /bin/sh, not /usr/bin/sh ... I'm getting really
   tired of this recurring problem ... please use qa/new to create new
   QA tests and avoid this (and a raft of other problems).

2. /sys/kernel/security/lockdown does not always exist ... check before
   trying to feed this file to fgrep

commit e24e498
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 16:08:59 2020 +1000
src/pmlogger/rc_pmlogger: important fix after SIGUSR2 for log rolling

For systems without systemd, the /etc/init.d/pmlogger script has to
be able to identify pmlogger instances started by pmlogger_check and
pmlogger_daily ... this was not happening correctly after the nightly
log rotation and re-exec of pmlogger.

commit 9b0d191
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 16:07:21 2020 +1000
qa/common.check: fix diagnostic typo in _service()","Changes committed to git@github.com:kmcdonell/pcp.git 20200418
Ken McDonell (4):
qa/common.check: fix diagnostic typo in _service()
src/pmlogger/rc_pmlogger: important fix after SIGUSR2 for log rolling
qa/348: important fixes
qa/297.out: remade after pmGetContextHostName_r -> pmGetContextHostName_rr change
qa/297.out               |    4 ++--
qa/348                   |    7 +++++--
qa/common.check          |    2 +-
src/pmlogger/rc_pmlogger |    2 +-
4 files changed, 9 insertions(+), 6 deletions(-)
Details ...
commit 8c780ee
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 19:10:16 2020 +1000
qa/297.out: remade after pmGetContextHostName_r -> pmGetContextHostName_rr change

commit b924347
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 18:14:47 2020 +1000
qa/348: important fixes

1. the Bourne shell is in /bin/sh, not /usr/bin/sh ... I'm getting really
   tired of this recurring problem ... please use qa/new to create new
   QA tests and avoid this (and a raft of other problems).

2. /sys/kernel/security/lockdown does not always exist ... check before
   trying to feed this file to fgrep

commit e24e498
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 16:08:59 2020 +1000
src/pmlogger/rc_pmlogger: important fix after SIGUSR2 for log rolling

For systems without systemd, the /etc/init.d/pmlogger script has to
be able to identify pmlogger instances started by pmlogger_check and
pmlogger_daily ... this was not happening correctly after the nightly
log rotation and re-exec of pmlogger.

commit 9b0d191
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Apr 18 16:07:21 2020 +1000
qa/common.check: fix diagnostic typo in _service()",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,891,2020-04-19T22:31:44Z,2020-04-19T23:31:04Z,2020-08-18T21:32:33Z,MERGED,True,686,95,31,https://github.com/kmcdonell,SELinux build and QA,21,[],https://github.com/performancecopilot/pcp/pull/891,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/891,"Need this one to get 917 properly working.
But this also needs to follow the ""notify"" PR.","Need this one to get 917 properly working.
But this also needs to follow the ""notify"" PR.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,892,2020-04-22T05:00:13Z,2020-04-22T23:10:26Z,2020-04-22T23:10:26Z,MERGED,True,2,1,1,https://github.com/liufan,Fix for new version of ActiveMQ broker,1,[],https://github.com/performancecopilot/pcp/pull/892,https://github.com/liufan,1,https://github.com/performancecopilot/pcp/pull/892,"In the new version of AcrtiveMQ (5.12+), when sending REST request through Jolokia API, it requires an 'Origin' value in HTTP request header(https://activemq.apache.org/rest) otherwise it will fail.
$ curl -u admin:admin http://localhost:8161/api/jolokia/read/org.apache.activemq:brokerName=localhost,destinationName=NOTIFICATIONS,destinationType=Queue,type=Broker
{""error_type"":""java.lang.Exception"",""error"":""java.lang.Exception : Origin null is not allowed to call this agent"",""status"":403}","In the new version of AcrtiveMQ (5.12+), when sending REST request through Jolokia API, it requires an 'Origin' value in HTTP request header(https://activemq.apache.org/rest) otherwise it will fail.
$ curl -u admin:admin http://localhost:8161/api/jolokia/read/org.apache.activemq:brokerName=localhost,destinationName=NOTIFICATIONS,destinationType=Queue,type=Broker
{""error_type"":""java.lang.Exception"",""error"":""java.lang.Exception : Origin null is not allowed to call this agent"",""status"":403}",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,892,2020-04-22T05:00:13Z,2020-04-22T23:10:26Z,2020-04-22T23:10:26Z,MERGED,True,2,1,1,https://github.com/liufan,Fix for new version of ActiveMQ broker,1,[],https://github.com/performancecopilot/pcp/pull/892,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/892#issuecomment-617666933,"In the new version of AcrtiveMQ (5.12+), when sending REST request through Jolokia API, it requires an 'Origin' value in HTTP request header(https://activemq.apache.org/rest) otherwise it will fail.
$ curl -u admin:admin http://localhost:8161/api/jolokia/read/org.apache.activemq:brokerName=localhost,destinationName=NOTIFICATIONS,destinationType=Queue,type=Broker
{""error_type"":""java.lang.Exception"",""error"":""java.lang.Exception : Origin null is not allowed to call this agent"",""status"":403}","Hi Liufan,
is this back-compatible with the current and previous version of ActiveMQ broker (< 5.12) ? If so, we'll merge it for the pcp-5.1.0 release.  Thanks for the contribution!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,892,2020-04-22T05:00:13Z,2020-04-22T23:10:26Z,2020-04-22T23:10:26Z,MERGED,True,2,1,1,https://github.com/liufan,Fix for new version of ActiveMQ broker,1,[],https://github.com/performancecopilot/pcp/pull/892,https://github.com/liufan,3,https://github.com/performancecopilot/pcp/pull/892#issuecomment-617779609,"In the new version of AcrtiveMQ (5.12+), when sending REST request through Jolokia API, it requires an 'Origin' value in HTTP request header(https://activemq.apache.org/rest) otherwise it will fail.
$ curl -u admin:admin http://localhost:8161/api/jolokia/read/org.apache.activemq:brokerName=localhost,destinationName=NOTIFICATIONS,destinationType=Queue,type=Broker
{""error_type"":""java.lang.Exception"",""error"":""java.lang.Exception : Origin null is not allowed to call this agent"",""status"":403}","Hi Mark,
Yes, I've tested it locally. It worked with the previous version of ActiveMQ broker.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,893,2020-04-23T05:48:39Z,2020-04-23T06:47:39Z,2020-08-18T21:32:38Z,MERGED,True,198,134,9,https://github.com/kmcdonell,qa,8,[],https://github.com/performancecopilot/pcp/pull/893,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/893,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,902,2020-05-05T10:05:58Z,2020-05-12T01:13:28Z,2020-05-12T01:13:29Z,MERGED,True,719,0,8,https://github.com/not4win,Export openvswitch metrics into pcp,17,[],https://github.com/performancecopilot/pcp/pull/902,https://github.com/not4win,1,https://github.com/performancecopilot/pcp/pull/902,"Export openvswitch bridge,port, flow metrics into pcp","Export openvswitch bridge,port, flow metrics into pcp",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,902,2020-05-05T10:05:58Z,2020-05-12T01:13:28Z,2020-05-12T01:13:29Z,MERGED,True,719,0,8,https://github.com/not4win,Export openvswitch metrics into pcp,17,[],https://github.com/performancecopilot/pcp/pull/902,https://github.com/not4win,2,https://github.com/performancecopilot/pcp/pull/902#issuecomment-624479888,"Export openvswitch bridge,port, flow metrics into pcp","Ah well, changes done. Just for testing purposes: Install openvswitch with:
sudo dnf install openvswitch
Enable connection:
sudo /usr/share/openvswitch/scripts/ovs-ctl start
Add a temp bridge with:
sudo ovs-vsctl add-br mybridge",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,905,2020-05-12T06:20:50Z,2020-05-12T07:15:29Z,2020-05-12T07:15:29Z,MERGED,True,27,34,1,https://github.com/not4win,Minor changes to openvswitch.,1,[],https://github.com/performancecopilot/pcp/pull/905,https://github.com/not4win,1,https://github.com/performancecopilot/pcp/pull/905,Added help text and resolved pmid issue for openvswitch pmda.,Added help text and resolved pmid issue for openvswitch pmda.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,906,2020-05-12T11:29:07Z,2020-05-13T01:32:05Z,2020-05-13T01:32:05Z,CLOSED,False,0,0,0,https://github.com/winndows,libpcp_trace/src/trace.c: Avoid dereferencing of possible NULL pointe…,0,[],https://github.com/performancecopilot/pcp/pull/906,https://github.com/winndows,1,https://github.com/performancecopilot/pcp/pull/906,"libpcp_trace/src/trace.c: Avoid dereferencing of possible NULL pointer 'data'
We need check the NULL pointer for 'data' to avoid dereferencing NULL pointer
in data->tag.
Signed-off-by: LiaoPingfang liao.pingfang@zte.com.cn","libpcp_trace/src/trace.c: Avoid dereferencing of possible NULL pointer 'data'
We need check the NULL pointer for 'data' to avoid dereferencing NULL pointer
in data->tag.
Signed-off-by: LiaoPingfang liao.pingfang@zte.com.cn",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,907,2020-05-13T01:50:02Z,2020-05-13T02:02:19Z,2020-05-13T02:02:19Z,MERGED,True,5,4,1,https://github.com/winndows,libpcp_trace/src/trace.c: Avoid dereferencing of possible NULL pointe…,1,[],https://github.com/performancecopilot/pcp/pull/907,https://github.com/winndows,1,https://github.com/performancecopilot/pcp/pull/907,"libpcp_trace/src/trace.c: Avoid dereferencing of possible NULL pointer 'data'
We need check the NULL pointer for 'data' to avoid dereferencing NULL pointer
in data->tag.
Signed-off-by: LiaoPingfang liao.pingfang@zte.com.cn","libpcp_trace/src/trace.c: Avoid dereferencing of possible NULL pointer 'data'
We need check the NULL pointer for 'data' to avoid dereferencing NULL pointer
in data->tag.
Signed-off-by: LiaoPingfang liao.pingfang@zte.com.cn",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,908,2020-05-13T08:57:26Z,2020-05-14T00:21:47Z,2020-05-14T00:21:47Z,MERGED,True,53,21,2,https://github.com/not4win,rabbitmq pmda: modifications,5,[],https://github.com/performancecopilot/pcp/pull/908,https://github.com/not4win,1,https://github.com/performancecopilot/pcp/pull/908,Added refresh and label functions to pmda and added a pmlogger configuration file.,Added refresh and label functions to pmda and added a pmlogger configuration file.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,909,2020-05-13T18:35:54Z,2020-05-15T04:37:14Z,2020-05-15T04:37:14Z,MERGED,True,2,2,1,https://github.com/kurik,build: Fix detection of pcp selinux modules during build of pcpqa.pp,1,[],https://github.com/performancecopilot/pcp/pull/909,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/909,Resolves BZ #1835422,Resolves BZ #1835422,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,910,2020-05-14T15:57:00Z,2020-05-15T00:23:18Z,2020-05-15T00:23:18Z,MERGED,True,9,0,2,https://github.com/not4win,Openvswitch pmda: addition,3,[],https://github.com/performancecopilot/pcp/pull/910,https://github.com/not4win,1,https://github.com/performancecopilot/pcp/pull/910,Added pmlogger configuration for openvswitch PMDA.,Added pmlogger configuration for openvswitch PMDA.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,911,2020-05-15T02:05:44Z,2020-05-18T01:13:56Z,2020-08-18T21:32:43Z,MERGED,True,380,76,20,https://github.com/kmcdonell,change to PM_ERR_NODATA semantics,11,[],https://github.com/performancecopilot/pcp/pull/911,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/911,"Changes committed to git@github.com:kmcdonell/pcp.git 20200514
Ken McDonell (6):
qa/255: rework to use _save_config and _restore_config
qa/994: catch mismatch between script, src/permslist and pcp.conf
pmlogrewrite: warn and do nothing for empty archives
src/libpcp/src/logutil.c: expand definition of PM_ERR_NODATA
qa/1195: tweak for expanded PM_ERR_NODATA semantics
pmlogextract: warn and do nothing for empty archives
man/man1/pmlogextract.1         |    4 +
man/man1/pmlogrewrite.1         |    3 +
qa/1195                         |   87 ++++++++++++++++++++++++++++++-
qa/1195.out                     |   17 +++++-
qa/1197                         |   95 ++++++++++++++++++++++++++++++++++
qa/1197.out                     |   22 +++++++
qa/255                          |   46 ++++------------
qa/994                          |   14 +++++
qa/group                        |    2
src/libpcp/src/logutil.c        |   30 ++++++++--
src/pmlogextract/pmlogextract.c |  111 +++++++++++++++++++++++++++-------------
src/pmlogrewrite/pmlogrewrite.c |    5 +
12 files changed, 358 insertions(+), 78 deletions(-)
Details ...
commit 95aec11
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 15 11:44:30 2020 +1000
pmlogextract: warn and do nothing for empty archives

Similar to the recent changes for pmlogrewrite ...

In some cases, the previous behaviour (to treat this as an error
when the pmNewContext() failed) would cause pmlogger_daily to fail
in the log merging step.

Included in the commit is a small man page change and a new QA
test (1197).

commit a1cbe77
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 15 10:50:31 2020 +1000
qa/1195: tweak for expanded PM_ERR_NODATA semantics

commit 1832a2b
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 15 10:15:57 2020 +1000
src/libpcp/src/logutil.c: expand definition of PM_ERR_NODATA

Previously, we returned PM_ERR_NODATA when one of the files making
up a PCP archive had zero size.  Now, we also return PM_ERR_NODATA
if one of the files has a label record but no other (data, metadata
or index) records.  Archives in either of these states contain no useful
information.

There is a small window during pmlogger's start up where the label
records have been written, but if pmlogger is terminated before any
pmResult is received and processed, then the archive files contain
a label record and nothing else. This can then cause pmlogrewrite
and pmlogextract to report errors and/or abort during pmlogger_daily
processing.

Making this change hardens the automatic management of pmlogger
archives, especially for pmlogger ""farms"" where there are many archives,
many pmloggers, and asynchronous starting and stopping of pmlogger ...
all of which means we're increasingly likely to hit the ""window"".

commit d614120
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu May 14 13:44:40 2020 +1000
pmlogrewrite: warn and do nothing for empty archives

Note this is for empty archives (not empty files), where the
archive contains a label record and no data records.

In some cases, the previous behaviour (to treat this as an error
when the pmNewContext() failed) would cause pmlogger_daily to fail
in the log rewriting step, which stopped the merging.

Included in the commit is a small man page change and a new QA
test (1195).

commit 143cf74
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu May 14 07:47:13 2020 +1000
qa/994: catch mismatch between script, src/permslist and pcp.conf

Should no happen, but if you get the qa dir and the installed images
out of whack then it is possible.

commit df439dc
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu May 14 07:45:45 2020 +1000
qa/255: rework to use _save_config and _restore_config

Old-style method is brittle, and when it breaks all remaining QA tests
fail if you're using qa/check.callback.sample.","Changes committed to git@github.com:kmcdonell/pcp.git 20200514
Ken McDonell (6):
qa/255: rework to use _save_config and _restore_config
qa/994: catch mismatch between script, src/permslist and pcp.conf
pmlogrewrite: warn and do nothing for empty archives
src/libpcp/src/logutil.c: expand definition of PM_ERR_NODATA
qa/1195: tweak for expanded PM_ERR_NODATA semantics
pmlogextract: warn and do nothing for empty archives
man/man1/pmlogextract.1         |    4 +
man/man1/pmlogrewrite.1         |    3 +
qa/1195                         |   87 ++++++++++++++++++++++++++++++-
qa/1195.out                     |   17 +++++-
qa/1197                         |   95 ++++++++++++++++++++++++++++++++++
qa/1197.out                     |   22 +++++++
qa/255                          |   46 ++++------------
qa/994                          |   14 +++++
qa/group                        |    2
src/libpcp/src/logutil.c        |   30 ++++++++--
src/pmlogextract/pmlogextract.c |  111 +++++++++++++++++++++++++++-------------
src/pmlogrewrite/pmlogrewrite.c |    5 +
12 files changed, 358 insertions(+), 78 deletions(-)
Details ...
commit 95aec11
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 15 11:44:30 2020 +1000
pmlogextract: warn and do nothing for empty archives

Similar to the recent changes for pmlogrewrite ...

In some cases, the previous behaviour (to treat this as an error
when the pmNewContext() failed) would cause pmlogger_daily to fail
in the log merging step.

Included in the commit is a small man page change and a new QA
test (1197).

commit a1cbe77
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 15 10:50:31 2020 +1000
qa/1195: tweak for expanded PM_ERR_NODATA semantics

commit 1832a2b
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 15 10:15:57 2020 +1000
src/libpcp/src/logutil.c: expand definition of PM_ERR_NODATA

Previously, we returned PM_ERR_NODATA when one of the files making
up a PCP archive had zero size.  Now, we also return PM_ERR_NODATA
if one of the files has a label record but no other (data, metadata
or index) records.  Archives in either of these states contain no useful
information.

There is a small window during pmlogger's start up where the label
records have been written, but if pmlogger is terminated before any
pmResult is received and processed, then the archive files contain
a label record and nothing else. This can then cause pmlogrewrite
and pmlogextract to report errors and/or abort during pmlogger_daily
processing.

Making this change hardens the automatic management of pmlogger
archives, especially for pmlogger ""farms"" where there are many archives,
many pmloggers, and asynchronous starting and stopping of pmlogger ...
all of which means we're increasingly likely to hit the ""window"".

commit d614120
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu May 14 13:44:40 2020 +1000
pmlogrewrite: warn and do nothing for empty archives

Note this is for empty archives (not empty files), where the
archive contains a label record and no data records.

In some cases, the previous behaviour (to treat this as an error
when the pmNewContext() failed) would cause pmlogger_daily to fail
in the log rewriting step, which stopped the merging.

Included in the commit is a small man page change and a new QA
test (1195).

commit 143cf74
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu May 14 07:47:13 2020 +1000
qa/994: catch mismatch between script, src/permslist and pcp.conf

Should no happen, but if you get the qa dir and the installed images
out of whack then it is possible.

commit df439dc
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu May 14 07:45:45 2020 +1000
qa/255: rework to use _save_config and _restore_config

Old-style method is brittle, and when it breaks all remaining QA tests
fail if you're using qa/check.callback.sample.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,912,2020-05-16T10:18:39Z,2020-05-18T08:02:15Z,2020-05-18T08:02:15Z,CLOSED,False,374,8,3,https://github.com/ElephantZhang,Simple idea how to store timeseries replies from Redis,1,[],https://github.com/performancecopilot/pcp/pull/912,https://github.com/ElephantZhang,1,https://github.com/performancecopilot/pcp/pull/912,"To extend time-series query language with RATE() and ADD() functions, this PR is a very first thing I think about how to deal with the replies from Redis. (NOTE: the following code still has bugs, I will continue to fix them.) The following modified code part is to store timeseries values returned from Redis into the corresponding nodes in the parser tree.
A query statement will be transformed into a parser tree consist of struct node_t, then we will take processing on it. Since all the queries to Redis are async and I think there is no simple method to ensure the order of points' queries is correct according to the parser tree. Take an example, a query statement metric.A + (metric.B + metric.C)[count:10], when we have the instances' values of A and going to compute them with B&C's, how can we know the instances' values of B&C's have been obtained? And there are other issues, assume that we do not use functions implemented in Redis, we request to Redis for values of metric.A, then metric.B, but when the reply to metric.A arrive, after the callback function being called we can never access the replies' values unless we save them somewhere.
That's the reason why I add void **SID and pmSeriesValue ***series_values into struct node_t. For each function-type node, use its child nodes' information to request to Redis and store the corresponding instance values into child nodes. And for the further functions' implementation, it's very convenient because for a function-type node, the values required for calculation have already existed in its child nodes.","To extend time-series query language with RATE() and ADD() functions, this PR is a very first thing I think about how to deal with the replies from Redis. (NOTE: the following code still has bugs, I will continue to fix them.) The following modified code part is to store timeseries values returned from Redis into the corresponding nodes in the parser tree.
A query statement will be transformed into a parser tree consist of struct node_t, then we will take processing on it. Since all the queries to Redis are async and I think there is no simple method to ensure the order of points' queries is correct according to the parser tree. Take an example, a query statement metric.A + (metric.B + metric.C)[count:10], when we have the instances' values of A and going to compute them with B&C's, how can we know the instances' values of B&C's have been obtained? And there are other issues, assume that we do not use functions implemented in Redis, we request to Redis for values of metric.A, then metric.B, but when the reply to metric.A arrive, after the callback function being called we can never access the replies' values unless we save them somewhere.
That's the reason why I add void **SID and pmSeriesValue ***series_values into struct node_t. For each function-type node, use its child nodes' information to request to Redis and store the corresponding instance values into child nodes. And for the further functions' implementation, it's very convenient because for a function-type node, the values required for calculation have already existed in its child nodes.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,912,2020-05-16T10:18:39Z,2020-05-18T08:02:15Z,2020-05-18T08:02:15Z,CLOSED,False,374,8,3,https://github.com/ElephantZhang,Simple idea how to store timeseries replies from Redis,1,[],https://github.com/performancecopilot/pcp/pull/912,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/912#issuecomment-630014834,"To extend time-series query language with RATE() and ADD() functions, this PR is a very first thing I think about how to deal with the replies from Redis. (NOTE: the following code still has bugs, I will continue to fix them.) The following modified code part is to store timeseries values returned from Redis into the corresponding nodes in the parser tree.
A query statement will be transformed into a parser tree consist of struct node_t, then we will take processing on it. Since all the queries to Redis are async and I think there is no simple method to ensure the order of points' queries is correct according to the parser tree. Take an example, a query statement metric.A + (metric.B + metric.C)[count:10], when we have the instances' values of A and going to compute them with B&C's, how can we know the instances' values of B&C's have been obtained? And there are other issues, assume that we do not use functions implemented in Redis, we request to Redis for values of metric.A, then metric.B, but when the reply to metric.A arrive, after the callback function being called we can never access the replies' values unless we save them somewhere.
That's the reason why I add void **SID and pmSeriesValue ***series_values into struct node_t. For each function-type node, use its child nodes' information to request to Redis and store the corresponding instance values into child nodes. And for the further functions' implementation, it's very convenient because for a function-type node, the values required for calculation have already existed in its child nodes.",@ElephantZhang let's continue our discussion on this topic over in #redis on pcp slack,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,914,2020-05-17T02:37:46Z,2020-05-18T01:13:55Z,2020-08-18T21:32:48Z,MERGED,True,434,104,30,https://github.com/kmcdonell,"qa, libpcp, rpm packaging",22,[],https://github.com/performancecopilot/pcp/pull/914,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/914,"Changes committed to git@github.com:kmcdonell/pcp.git 20200515
Ken McDonell (9):
qa/479: remade after PM_ERR_NODATA libpcp change
qa/121: #!/usr/bin/sh is evil, and wrong
Revert ""qa/121: #!/usr/bin/sh is evil, and wrong""
qa/195: rework after PM_ERR_NODATA change in libpcp
qa/092: remade after PM_ERR_NODATA libpcp change
src/libpcp/src/logutil.c: tweak diagnostic logic
qa/363: use tmparch/null and tmparch/bad-1 after PM_ERR_NODATA change
qa/389: small changes to timing and reconnection control
build/rpm/pcp.spec.in: fix guard for zeroconf package Requires: clause
build/rpm/pcp.spec.in    |    5 ++++-
qa/092.out               |   13 +------------
qa/121                   |    4 ++--
qa/195                   |    3 ++-
qa/195.out               |   24 ++++++++++++++++++------
qa/363                   |    1 +
qa/363.out               |    4 +++-
qa/389                   |   12 +++++++++---
qa/479.out               |    3 +--
qa/tmparch/.gitignore    |    3 +++
qa/tmparch/GNUlocaldefs  |    9 ++++++++-
src/libpcp/src/logutil.c |    7 +++++--
12 files changed, 57 insertions(+), 31 deletions(-)
Details ...
commit 270b439
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 12:33:44 2020 +1000
build/rpm/pcp.spec.in: fix guard for zeroconf package Requires: clause

The pcp-pmda-openmetrics package is only built if
    %if ""@pmda_openmetrics@"" == ""true""
so the Requires: pcp-pmda-openmetrics clause for the zeroconf package
needs the same guard, and not
    %if ""@have_python@"" == ""true""

commit 632b310
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 07:49:25 2020 +1000
qa/389: small changes to timing and reconnection control

commit ca062f7
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 07:31:01 2020 +1000
qa/363: use tmparch/null and tmparch/bad-1 after PM_ERR_NODATA change

Similar to qa/195, need both archives to exercise all code paths.

commit 1d260e6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 07:27:44 2020 +1000
src/libpcp/src/logutil.c: tweak diagnostic logic

Previous change was allowing an additional empty line to be output
in some rare cases.

commit aef6f07
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 07:27:15 2020 +1000
qa/092: remade after PM_ERR_NODATA libpcp change

commit feb0fa6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 07:24:26 2020 +1000
qa/195: rework after PM_ERR_NODATA change in libpcp

Added a new (corrupted) tmparch/bad-1 archive to exercise the code
path previously taken for tmparch/null (the latter is now identified as
""empty"" rather than ""corrupted"").

And amend 195 and 195.out to check both tmparch/null and tmparch/bad-1

commit 5a13bd9
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 07:23:36 2020 +1000
Revert ""qa/121: #!/usr/bin/sh is evil, and wrong""

This reverts commit c48994d85c3705c0b59807e5ac4b9db9cea8ca8d.

Nathan has done the same thing in his tree, so undo mine to reduce
the chance of a merge conflict.

commit c48994d
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 15 16:31:36 2020 +1000
qa/121: #!/usr/bin/sh is evil, and wrong

commit fd655be
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 15 16:27:43 2020 +1000
qa/479: remade after PM_ERR_NODATA libpcp change","Changes committed to git@github.com:kmcdonell/pcp.git 20200515
Ken McDonell (9):
qa/479: remade after PM_ERR_NODATA libpcp change
qa/121: #!/usr/bin/sh is evil, and wrong
Revert ""qa/121: #!/usr/bin/sh is evil, and wrong""
qa/195: rework after PM_ERR_NODATA change in libpcp
qa/092: remade after PM_ERR_NODATA libpcp change
src/libpcp/src/logutil.c: tweak diagnostic logic
qa/363: use tmparch/null and tmparch/bad-1 after PM_ERR_NODATA change
qa/389: small changes to timing and reconnection control
build/rpm/pcp.spec.in: fix guard for zeroconf package Requires: clause
build/rpm/pcp.spec.in    |    5 ++++-
qa/092.out               |   13 +------------
qa/121                   |    4 ++--
qa/195                   |    3 ++-
qa/195.out               |   24 ++++++++++++++++++------
qa/363                   |    1 +
qa/363.out               |    4 +++-
qa/389                   |   12 +++++++++---
qa/479.out               |    3 +--
qa/tmparch/.gitignore    |    3 +++
qa/tmparch/GNUlocaldefs  |    9 ++++++++-
src/libpcp/src/logutil.c |    7 +++++--
12 files changed, 57 insertions(+), 31 deletions(-)
Details ...
commit 270b439
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 12:33:44 2020 +1000
build/rpm/pcp.spec.in: fix guard for zeroconf package Requires: clause

The pcp-pmda-openmetrics package is only built if
    %if ""@pmda_openmetrics@"" == ""true""
so the Requires: pcp-pmda-openmetrics clause for the zeroconf package
needs the same guard, and not
    %if ""@have_python@"" == ""true""

commit 632b310
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 07:49:25 2020 +1000
qa/389: small changes to timing and reconnection control

commit ca062f7
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 07:31:01 2020 +1000
qa/363: use tmparch/null and tmparch/bad-1 after PM_ERR_NODATA change

Similar to qa/195, need both archives to exercise all code paths.

commit 1d260e6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 07:27:44 2020 +1000
src/libpcp/src/logutil.c: tweak diagnostic logic

Previous change was allowing an additional empty line to be output
in some rare cases.

commit aef6f07
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 07:27:15 2020 +1000
qa/092: remade after PM_ERR_NODATA libpcp change

commit feb0fa6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 07:24:26 2020 +1000
qa/195: rework after PM_ERR_NODATA change in libpcp

Added a new (corrupted) tmparch/bad-1 archive to exercise the code
path previously taken for tmparch/null (the latter is now identified as
""empty"" rather than ""corrupted"").

And amend 195 and 195.out to check both tmparch/null and tmparch/bad-1

commit 5a13bd9
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 17 07:23:36 2020 +1000
Revert ""qa/121: #!/usr/bin/sh is evil, and wrong""

This reverts commit c48994d85c3705c0b59807e5ac4b9db9cea8ca8d.

Nathan has done the same thing in his tree, so undo mine to reduce
the chance of a merge conflict.

commit c48994d
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 15 16:31:36 2020 +1000
qa/121: #!/usr/bin/sh is evil, and wrong

commit fd655be
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 15 16:27:43 2020 +1000
qa/479: remade after PM_ERR_NODATA libpcp change",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,917,2020-05-18T02:47:59Z,2020-05-18T02:51:44Z,2020-05-18T02:51:44Z,MERGED,True,1,1,1,https://github.com/sanjulamadurapperuma,Fix for broken link to installation guide,1,[],https://github.com/performancecopilot/pcp/pull/917,https://github.com/sanjulamadurapperuma,1,https://github.com/performancecopilot/pcp/pull/917,Fixes: performancecopilot/pcp#916,Fixes: performancecopilot/pcp#916,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,920,2020-05-19T15:22:02Z,2020-05-19T15:22:35Z,2020-05-19T15:22:36Z,CLOSED,False,3,3,2,https://github.com/andreasgerstmayr,libpcp: open NSSDB readonly for clients,1,[],https://github.com/performancecopilot/pcp/pull/920,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/920,"I ran the secure tests, they all pass.
The code doesn't change the pmproxy part (with the comment regarding read/write), which is in secureserver.c.","I ran the secure tests, they all pass.
The code doesn't change the pmproxy part (with the comment regarding read/write), which is in secureserver.c.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,921,2020-05-19T15:22:59Z,2020-05-20T01:14:21Z,2020-09-21T15:49:12Z,MERGED,True,10,4,2,https://github.com/andreasgerstmayr,libpcp: open NSSDB readonly for clients,1,[],https://github.com/performancecopilot/pcp/pull/921,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/921,"I ran the tests from the secure group, they all pass.
The code doesn't change the pmproxy part (with the comment regarding read/write), which is in secureserver.c.","I ran the tests from the secure group, they all pass.
The code doesn't change the pmproxy part (with the comment regarding read/write), which is in secureserver.c.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,921,2020-05-19T15:22:59Z,2020-05-20T01:14:21Z,2020-09-21T15:49:12Z,MERGED,True,10,4,2,https://github.com/andreasgerstmayr,libpcp: open NSSDB readonly for clients,1,[],https://github.com/performancecopilot/pcp/pull/921,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/921#issuecomment-631056087,"I ran the tests from the secure group, they all pass.
The code doesn't change the pmproxy part (with the comment regarding read/write), which is in secureserver.c.","ahkr, while testing this (using make/sudo make install after changes), the pmlogger executable gets the unconfined domain and is allowed to do anything... so any change I made ""fixed"" the issue...
but when building updated rpm packages and installing them, the selinux policy gets enforced and the access to PMCD doesn't work anymore.
After manually resetting the correct domain after make install, I've found another issue, the call to __pmMakePath which silently fails and subsequently NSS_Init isn't called and no certificates are loaded. I've amended the commit and pushed again, now it's fixed (and my selinux knowledge got updated :P)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,923,2020-05-21T23:48:32Z,2020-05-22T08:19:14Z,2020-08-18T21:32:54Z,MERGED,True,584,52,13,https://github.com/kmcdonell,"disk.all metrics fix, qa",12,[],https://github.com/performancecopilot/pcp/pull/923,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/923,"Changes committed to git@github.com:kmcdonell/pcp.git 20200522
Ken McDonell (7):
qa/check-flakey: tweak some pretty printing for tests seq #s < 1000
Linux PMDA: fix bad metadata for disk.all.(discard|flush) metrics
qa/badarchives/bozo-vm-disk: new archive with incorrect disk.all metadata
qa/1024.out: remade after fixes to disk.all metadata
qa/1198: (new) check pmlogrewrite rules after recent Linux PMDA changes
qa/920: fix another #! botch
src/pmlogger/src/logue.c: fix compilation warning
qa/1024.out                          |   84 +++---
qa/1198                              |   47 +++
qa/1198.out                          |  468 +++++++++++++++++++++++++++++++++++
qa/920                               |    2
qa/badarchives/bozo-vm-disk.0        |binary
qa/badarchives/bozo-vm-disk.index    |binary
qa/badarchives/bozo-vm-disk.meta     |binary
qa/check-flakey                      |    7
qa/group                             |    1
src/pmdas/linux/GNUmakefile          |    2
src/pmdas/linux/disk_all_fixups.conf |    9
src/pmdas/linux/pmda.c               |   14 -
src/pmlogger/src/logue.c             |    2
13 files changed, 584 insertions(+), 52 deletions(-)
Details ...
commit c0a7fa1
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:46:49 2020 +1000
src/pmlogger/src/logue.c: fix compilation warning

commit 2801bcc
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:46:26 2020 +1000
qa/920: fix another #! botch

commit a07867a
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:45:12 2020 +1000
qa/1198: (new) check pmlogrewrite rules after recent Linux PMDA changes

After the Linux PMDA was updated with the indom metadata
corrected for the disk.all.*(discard|flush)* metrics.

commit 09c76e4
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:43:20 2020 +1000
qa/1024.out: remade after fixes to disk.all metadata

Remade after the Linux PMDA was updated with the indom metadata
corrected for the disk.all.*(discard|flush)* metrics.

commit 75454f2
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:40:56 2020 +1000
qa/badarchives/bozo-vm-disk: new archive with incorrect disk.all metadata

This archive was created before the metadata for the
disk.all.*(discrd|flush)* metrics was corrected.

To be used in the (new) qa/1198.

commit 4101311
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:38:30 2020 +1000
Linux PMDA: fix bad metadata for disk.all.*(discard|flush)* metrics

They incorrectly had the an indom of DISK_INDOM instead of INDOM_NULL.

pmlogrewrite rules included as well.

Issue found by finally digging to understand why QA 1024 was failing on
bozo-vm (the problem is in the linux PMDA, not the QA test).

commit 7ed13af
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:35:35 2020 +1000
qa/check-flakey: tweak some pretty printing for tests seq #s < 1000","Changes committed to git@github.com:kmcdonell/pcp.git 20200522
Ken McDonell (7):
qa/check-flakey: tweak some pretty printing for tests seq #s < 1000
Linux PMDA: fix bad metadata for disk.all.(discard|flush) metrics
qa/badarchives/bozo-vm-disk: new archive with incorrect disk.all metadata
qa/1024.out: remade after fixes to disk.all metadata
qa/1198: (new) check pmlogrewrite rules after recent Linux PMDA changes
qa/920: fix another #! botch
src/pmlogger/src/logue.c: fix compilation warning
qa/1024.out                          |   84 +++---
qa/1198                              |   47 +++
qa/1198.out                          |  468 +++++++++++++++++++++++++++++++++++
qa/920                               |    2
qa/badarchives/bozo-vm-disk.0        |binary
qa/badarchives/bozo-vm-disk.index    |binary
qa/badarchives/bozo-vm-disk.meta     |binary
qa/check-flakey                      |    7
qa/group                             |    1
src/pmdas/linux/GNUmakefile          |    2
src/pmdas/linux/disk_all_fixups.conf |    9
src/pmdas/linux/pmda.c               |   14 -
src/pmlogger/src/logue.c             |    2
13 files changed, 584 insertions(+), 52 deletions(-)
Details ...
commit c0a7fa1
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:46:49 2020 +1000
src/pmlogger/src/logue.c: fix compilation warning

commit 2801bcc
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:46:26 2020 +1000
qa/920: fix another #! botch

commit a07867a
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:45:12 2020 +1000
qa/1198: (new) check pmlogrewrite rules after recent Linux PMDA changes

After the Linux PMDA was updated with the indom metadata
corrected for the disk.all.*(discard|flush)* metrics.

commit 09c76e4
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:43:20 2020 +1000
qa/1024.out: remade after fixes to disk.all metadata

Remade after the Linux PMDA was updated with the indom metadata
corrected for the disk.all.*(discard|flush)* metrics.

commit 75454f2
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:40:56 2020 +1000
qa/badarchives/bozo-vm-disk: new archive with incorrect disk.all metadata

This archive was created before the metadata for the
disk.all.*(discrd|flush)* metrics was corrected.

To be used in the (new) qa/1198.

commit 4101311
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:38:30 2020 +1000
Linux PMDA: fix bad metadata for disk.all.*(discard|flush)* metrics

They incorrectly had the an indom of DISK_INDOM instead of INDOM_NULL.

pmlogrewrite rules included as well.

Issue found by finally digging to understand why QA 1024 was failing on
bozo-vm (the problem is in the linux PMDA, not the QA test).

commit 7ed13af
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri May 22 09:35:35 2020 +1000
qa/check-flakey: tweak some pretty printing for tests seq #s < 1000",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,924,2020-05-23T02:23:16Z,2020-05-23T11:25:04Z,2020-08-18T21:32:59Z,MERGED,True,103,107,11,https://github.com/kmcdonell,"refactor pmlogrewrite rules for linux pmda, qa, compilation warnings",5,[],https://github.com/performancecopilot/pcp/pull/924,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/924,"Changes committed to git@github.com:kmcdonell/pcp.git 20200523
Ken McDonell (5):
linux pmda: rework the pmlogrewrite conf file handling
src/pmlogconf/pmlogconf.c: fix a couple of compilation warnings
qa/check.callback.sample: fix misleading typo in name of pmlogger_daily
qa/src/pmcdgone.c: remove one last system() compilation warning
src/python/pmapi.c: remove (scary) compilation warning
qa/1198                                          |    2
qa/check.callback.sample                         |    4 -
qa/src/pmcdgone.c                                |    5 +
src/pmdas/linux/.gitignore                       |    5 -
src/pmdas/linux/GNUmakefile                      |   13 +--
src/pmdas/linux/kernel_fixups.conf               |   45 ++++++++++++
src/pmdas/linux/mk.rewrite                       |   84 -----------------------
src/pmdas/linux/proc_fs_nfsd_fixups.conf         |    9 ++
src/pmdas/linux/proc_net_sockstat_deprecate.conf |   12 +++
src/pmlogconf/pmlogconf.c                        |   11 ++-
src/python/pmapi.c                               |   20 +++--
11 files changed, 103 insertions(+), 107 deletions(-)
Details ...
commit 5f36b15
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat May 23 09:29:47 2020 +1000
src/python/pmapi.c: remove (scary) compilation warning

This one:
pmapi.c:973:32: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
  973 |     return Py_BuildValue(""i"", *(unsigned int *)&units);
      |                                ^~~~~~~~~~~~~~~~~~~~~~
has been there for a long time ... finally annoyed me enough to make it go away.

commit 4bf46e2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat May 23 09:21:15 2020 +1000
qa/src/pmcdgone.c: remove one last system() compilation warning

commit 157174c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat May 23 09:20:45 2020 +1000
qa/check.callback.sample: fix misleading typo in name of pmlogger_daily

commit 833f059
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat May 23 09:17:13 2020 +1000
src/pmlogconf/pmlogconf.c: fix a couple of compilation warnings

Check return values from fchown() and ftruncate().

commit 846b3de
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat May 23 07:50:47 2020 +1000
linux pmda: rework the pmlogrewrite conf file handling

My last checkin was wrong and broke the build.  Now mk.rewrite
only generates the ones that are platform-dependent, and the
constant ones are checked into git.

When installed, disk_all... got renamed to linux_disk_all... for
consistency.","Changes committed to git@github.com:kmcdonell/pcp.git 20200523
Ken McDonell (5):
linux pmda: rework the pmlogrewrite conf file handling
src/pmlogconf/pmlogconf.c: fix a couple of compilation warnings
qa/check.callback.sample: fix misleading typo in name of pmlogger_daily
qa/src/pmcdgone.c: remove one last system() compilation warning
src/python/pmapi.c: remove (scary) compilation warning
qa/1198                                          |    2
qa/check.callback.sample                         |    4 -
qa/src/pmcdgone.c                                |    5 +
src/pmdas/linux/.gitignore                       |    5 -
src/pmdas/linux/GNUmakefile                      |   13 +--
src/pmdas/linux/kernel_fixups.conf               |   45 ++++++++++++
src/pmdas/linux/mk.rewrite                       |   84 -----------------------
src/pmdas/linux/proc_fs_nfsd_fixups.conf         |    9 ++
src/pmdas/linux/proc_net_sockstat_deprecate.conf |   12 +++
src/pmlogconf/pmlogconf.c                        |   11 ++-
src/python/pmapi.c                               |   20 +++--
11 files changed, 103 insertions(+), 107 deletions(-)
Details ...
commit 5f36b15
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat May 23 09:29:47 2020 +1000
src/python/pmapi.c: remove (scary) compilation warning

This one:
pmapi.c:973:32: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
  973 |     return Py_BuildValue(""i"", *(unsigned int *)&units);
      |                                ^~~~~~~~~~~~~~~~~~~~~~
has been there for a long time ... finally annoyed me enough to make it go away.

commit 4bf46e2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat May 23 09:21:15 2020 +1000
qa/src/pmcdgone.c: remove one last system() compilation warning

commit 157174c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat May 23 09:20:45 2020 +1000
qa/check.callback.sample: fix misleading typo in name of pmlogger_daily

commit 833f059
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat May 23 09:17:13 2020 +1000
src/pmlogconf/pmlogconf.c: fix a couple of compilation warnings

Check return values from fchown() and ftruncate().

commit 846b3de
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat May 23 07:50:47 2020 +1000
linux pmda: rework the pmlogrewrite conf file handling

My last checkin was wrong and broke the build.  Now mk.rewrite
only generates the ones that are platform-dependent, and the
constant ones are checked into git.

When installed, disk_all... got renamed to linux_disk_all... for
consistency.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,925,2020-05-23T07:56:11Z,2020-05-25T04:54:23Z,2020-05-25T04:54:24Z,MERGED,True,393,68,15,https://github.com/goodwinos,Pmrep labels,15,[],https://github.com/performancecopilot/pcp/pull/925,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/925,"Labels support for pmrep and associated pcp2xxx tools, completing Marko's work. This feature just needs another QA test to exercise bug fixes for writing and replaying archives with labels. It also needs some python2 testing.
Resolves #806","Labels support for pmrep and associated pcp2xxx tools, completing Marko's work. This feature just needs another QA test to exercise bug fixes for writing and replaying archives with labels. It also needs some python2 testing.
Resolves #806",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,928,2020-05-26T05:48:56Z,2020-05-26T06:24:48Z,2020-05-26T06:24:48Z,MERGED,True,13,8,1,https://github.com/not4win,Fixed openvswitch pmda issues.,1,[],https://github.com/performancecopilot/pcp/pull/928,https://github.com/not4win,1,https://github.com/performancecopilot/pcp/pull/928,Added try catch block and logged error for the get_switch_info_json class function.,Added try catch block and logged error for the get_switch_info_json class function.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,929,2020-05-26T06:52:22Z,2020-05-26T07:26:39Z,2020-05-26T07:26:39Z,MERGED,True,9,4,1,https://github.com/not4win,pmdarabbitmq: added try catch and logged error which resolves stacktrace problem while parsing,1,[],https://github.com/performancecopilot/pcp/pull/929,https://github.com/not4win,1,https://github.com/performancecopilot/pcp/pull/929,Gave a nasty stacktrace text when it was not able to fetch data from server. Caught exception and logged it.,Gave a nasty stacktrace text when it was not able to fetch data from server. Caught exception and logged it.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,930,2020-05-27T04:33:54Z,2020-05-27T06:50:17Z,2020-08-18T21:33:04Z,MERGED,True,12,7,4,https://github.com/kmcdonell,qa,10,[],https://github.com/performancecopilot/pcp/pull/930,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/930,"Changes committed to git@github.com:kmcdonell/pcp.git 20200524
Ken McDonell (6):
qa/group: 1297 belongs in the pmieutil group
qa/1190: fix for botched pmcd counf logic
qa/1190: fix for botched pmcd count logic
qa/920: fix service name
qa/1768: yet another #! botch
qa/1768: add _notrun if pmfind_check is not installed
qa/1190  |   18 ++++++++++++------
qa/1768  |    4 +++-
qa/920   |    4 ++--
qa/group |    2 +-
4 files changed, 18 insertions(+), 10 deletions(-)
Details ...
commit 1b5cf50
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 24 17:31:23 2020 +1000
qa/1768: add _notrun if pmfind_check is not installed

commit fb21574
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 24 17:29:05 2020 +1000
qa/1768: yet another #! botch

... is this some sort of broken workflow?

commit eefee38
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 24 17:06:31 2020 +1000
qa/920: fix service name

It is pmlogger, not pmlogger_check.

commit 4a9cfe9
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 24 13:24:09 2020 +1000
qa/1190: fix for botched pmcd count logic

Was tripped up by pmfind (new) that may have a ""pmcd"" cmd line argument.

commit 1b4d7a3
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 24 13:24:09 2020 +1000
qa/1190: fix for botched pmcd counf logic

Was tripped up by pmfind (new) that may have ""pmcd"" cmd line argument.

commit 6708c6b
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 24 13:23:47 2020 +1000
qa/group: 1297 belongs in the pmieutil group","Changes committed to git@github.com:kmcdonell/pcp.git 20200524
Ken McDonell (6):
qa/group: 1297 belongs in the pmieutil group
qa/1190: fix for botched pmcd counf logic
qa/1190: fix for botched pmcd count logic
qa/920: fix service name
qa/1768: yet another #! botch
qa/1768: add _notrun if pmfind_check is not installed
qa/1190  |   18 ++++++++++++------
qa/1768  |    4 +++-
qa/920   |    4 ++--
qa/group |    2 +-
4 files changed, 18 insertions(+), 10 deletions(-)
Details ...
commit 1b5cf50
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 24 17:31:23 2020 +1000
qa/1768: add _notrun if pmfind_check is not installed

commit fb21574
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 24 17:29:05 2020 +1000
qa/1768: yet another #! botch

... is this some sort of broken workflow?

commit eefee38
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 24 17:06:31 2020 +1000
qa/920: fix service name

It is pmlogger, not pmlogger_check.

commit 4a9cfe9
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 24 13:24:09 2020 +1000
qa/1190: fix for botched pmcd count logic

Was tripped up by pmfind (new) that may have a ""pmcd"" cmd line argument.

commit 1b4d7a3
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 24 13:24:09 2020 +1000
qa/1190: fix for botched pmcd counf logic

Was tripped up by pmfind (new) that may have ""pmcd"" cmd line argument.

commit 6708c6b
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 24 13:23:47 2020 +1000
qa/group: 1297 belongs in the pmieutil group",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,931,2020-05-27T13:10:40Z,2020-06-03T01:12:39Z,2020-06-03T01:12:40Z,MERGED,True,32,3,2,https://github.com/kurik,"Make sure mkafm commands ""check"" and ""remove"" can work with compressed archives",8,[],https://github.com/performancecopilot/pcp/pull/931,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/931,"Make sure mkafm commands ""check"" and ""remove"" can work with compressed archives","Make sure mkafm commands ""check"" and ""remove"" can work with compressed archives",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,931,2020-05-27T13:10:40Z,2020-06-03T01:12:39Z,2020-06-03T01:12:40Z,MERGED,True,32,3,2,https://github.com/kurik,"Make sure mkafm commands ""check"" and ""remove"" can work with compressed archives",8,[],https://github.com/performancecopilot/pcp/pull/931,https://github.com/kurik,2,https://github.com/performancecopilot/pcp/pull/931#issuecomment-634650082,"Make sure mkafm commands ""check"" and ""remove"" can work with compressed archives",Solves https://bugzilla.redhat.com/show_bug.cgi?id=1839666,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,931,2020-05-27T13:10:40Z,2020-06-03T01:12:39Z,2020-06-03T01:12:40Z,MERGED,True,32,3,2,https://github.com/kurik,"Make sure mkafm commands ""check"" and ""remove"" can work with compressed archives",8,[],https://github.com/performancecopilot/pcp/pull/931,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/931#issuecomment-637895673,"Make sure mkafm commands ""check"" and ""remove"" can work with compressed archives",The proposed fix looks good to me and the update to qa/671 exercises the fix. No other regressions in any other 'folio' group tests. Thanks Jan.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,934,2020-06-01T03:41:46Z,2020-06-01T05:52:13Z,2020-08-18T21:33:09Z,MERGED,True,30,14,9,https://github.com/kmcdonell,"derived metrics rework, qa",9,[],https://github.com/performancecopilot/pcp/pull/934,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/934,"Changes committed to git@github.com:kmcdonell/pcp.git 20200531
Ken McDonell (6):
qa/1103.out: remade after libpcp change in bind_expr() [derived metrics]
src/libpcp/src/derive_parser.y.in: rework logic for N_PATTERN nodes in bind_expr()
src/libpcp/src/derive_parser.y.in: fix incomplete initialization of F_REGEX node
qa/370: update for sysstat version 12.0.6
qa/admin/other-packages/*: updates for CentOS 7.7
qa/157: try to fix some non-determinism
qa/1103.out                         |    4 ++--
qa/157                              |   12 +++++++++++-
qa/157.out                          |    1 -
qa/370                              |   12 +++++++++++-
qa/370.out.15.xz                    |binary
qa/admin/other-packages/manifest    |    2 +-
qa/admin/other-packages/unavailable |    2 +-
qa/sadist/sa-sysstat-12.0.6.xz      |binary
src/libpcp/src/derive_parser.y.in   |   11 ++++-------
9 files changed, 30 insertions(+), 14 deletions(-)
Details ...
commit 84b4b7b
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 1 13:33:03 2020 +1000
qa/157: try to fix some non-determinism

commit ed243c3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 1 13:32:39 2020 +1000
qa/admin/other-packages/*: updates for CentOS 7.7

commit c52e5df
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 31 19:38:00 2020 +1000
qa/370: update for sysstat version 12.0.6

commit f8b0886
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 31 18:50:44 2020 +1000
src/libpcp/src/derive_parser.y.in: fix incomplete initialization of F_REGEX node

In particular np->data.pattern->used and np->data.pattern->hash.hash
were not being set which was leading to some qa/688 failures and
lots of ""Conditional jump or move depends on uninitialised value""
errors during ad hoc valgrind testing of the qa/688 code path.

I suspect the problem is largely benign, because the real expr tree
that is used in fetching comes from bind_expr() where these fields
are correctly initialized, so the expose was limited to calling
__dmdumpexpr() with an expr tree that had been defined, but not yet
bound, e.g. the diagnostic call from registerderived() which is where
the errors were observed.

commit 9d83383
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 31 17:10:49 2020 +1000
src/libpcp/src/derive_parser.y.in: rework logic for N_PATTERN nodes in bind_expr()

We don't need a strdup() here, the value[] does not change after the
bind.

Also fixes valgrind failure in qa/1066.

commit b2d0ce6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 31 17:07:54 2020 +1000
qa/1103.out: remade after libpcp change in bind_expr() [derived metrics]","Changes committed to git@github.com:kmcdonell/pcp.git 20200531
Ken McDonell (6):
qa/1103.out: remade after libpcp change in bind_expr() [derived metrics]
src/libpcp/src/derive_parser.y.in: rework logic for N_PATTERN nodes in bind_expr()
src/libpcp/src/derive_parser.y.in: fix incomplete initialization of F_REGEX node
qa/370: update for sysstat version 12.0.6
qa/admin/other-packages/*: updates for CentOS 7.7
qa/157: try to fix some non-determinism
qa/1103.out                         |    4 ++--
qa/157                              |   12 +++++++++++-
qa/157.out                          |    1 -
qa/370                              |   12 +++++++++++-
qa/370.out.15.xz                    |binary
qa/admin/other-packages/manifest    |    2 +-
qa/admin/other-packages/unavailable |    2 +-
qa/sadist/sa-sysstat-12.0.6.xz      |binary
src/libpcp/src/derive_parser.y.in   |   11 ++++-------
9 files changed, 30 insertions(+), 14 deletions(-)
Details ...
commit 84b4b7b
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 1 13:33:03 2020 +1000
qa/157: try to fix some non-determinism

commit ed243c3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 1 13:32:39 2020 +1000
qa/admin/other-packages/*: updates for CentOS 7.7

commit c52e5df
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 31 19:38:00 2020 +1000
qa/370: update for sysstat version 12.0.6

commit f8b0886
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 31 18:50:44 2020 +1000
src/libpcp/src/derive_parser.y.in: fix incomplete initialization of F_REGEX node

In particular np->data.pattern->used and np->data.pattern->hash.hash
were not being set which was leading to some qa/688 failures and
lots of ""Conditional jump or move depends on uninitialised value""
errors during ad hoc valgrind testing of the qa/688 code path.

I suspect the problem is largely benign, because the real expr tree
that is used in fetching comes from bind_expr() where these fields
are correctly initialized, so the expose was limited to calling
__dmdumpexpr() with an expr tree that had been defined, but not yet
bound, e.g. the diagnostic call from registerderived() which is where
the errors were observed.

commit 9d83383
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 31 17:10:49 2020 +1000
src/libpcp/src/derive_parser.y.in: rework logic for N_PATTERN nodes in bind_expr()

We don't need a strdup() here, the value[] does not change after the
bind.

Also fixes valgrind failure in qa/1066.

commit b2d0ce6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun May 31 17:07:54 2020 +1000
qa/1103.out: remade after libpcp change in bind_expr() [derived metrics]",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,939,2020-06-04T18:49:35Z,2020-06-10T21:04:14Z,2020-06-10T21:04:14Z,MERGED,True,3,3,1,https://github.com/chaytanyasinha,[docs]Updated README.md,1,[],https://github.com/performancecopilot/pcp/pull/939,https://github.com/chaytanyasinha,1,https://github.com/performancecopilot/pcp/pull/939,"Updated README.md
Did minor changes by resolving  some grammatical errors","Updated README.md
Did minor changes by resolving  some grammatical errors",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,940,2020-06-07T21:10:30Z,2020-06-08T04:47:18Z,2020-08-18T21:33:14Z,MERGED,True,91,79,7,https://github.com/kmcdonell,build & configure,4,[],https://github.com/performancecopilot/pcp/pull/940,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/940,"Changes committed to git@github.com:kmcdonell/pcp.git 20200607
Ken McDonell (4):
Makepkgs: default configure --without-python for Ubuntu 20.04 (and later)
configure.ac: Force man pages for Debian-style builds
debian/GNUmakefile: fix cut-n-paste botch for ganglia2pcp packaging
pmie/rc_pmie & pmlogger/rc_pmlogger: fix trap snarfoo
Makepkgs                 |   17 ++++++++
configure                |   99 ++++++++++++-----------------------------------
configure.ac             |   18 ++++++++
debian/GNUmakefile       |   15 +++++--
qa/admin/myconfigure     |   17 ++++++++
src/pmie/rc_pmie         |    2
src/pmlogger/rc_pmlogger |    2
7 files changed, 91 insertions(+), 79 deletions(-)
Details ...
commit 18d4281
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jun 7 09:44:25 2020 +1000
pmie/rc_pmie & pmlogger/rc_pmlogger: fix trap snarfoo

The nested trap was leaving behind directory turds in
$PCP_DIR/var/tmp/pcp.XXXXXXXXX and there was a file called ""tmp""
therein that contained output from _get_pids_by_name().

commit 558d789
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jun 7 09:42:21 2020 +1000
debian/GNUmakefile: fix cut-n-paste botch for ganglia2pcp packaging

PCPIMPORTSAR* macros defined twice (!), no macros for PCPIMPORTGANGLIA*.

Also install-pcpimportganglia target and rules block was missing.

commit 22eff06
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jun 7 09:38:04 2020 +1000
configure.ac: Force man pages for Debian-style builds

The dpkg packaging rules expect the man pages to be present, but our
""smart"" configure logic for figuring out what style of man pages
are required was failing on container-based builds in CI (presumably
because there are no man pages installed there).

Force the inclusion of the man pages by setting the relevant variables
if the ""smart"" logic fails to set them.

Also picked up that configure was not remade after last configure.ac
change, so there are some changes in configure that are not caused
by the configure.ac changes in this commit.

commit 9ce7e2d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jun 7 09:30:10 2020 +1000
Makepkgs: default configure --without-python for Ubuntu 20.04 (and later)

In Ubuntu 20.04 the Python2 package names changed in ways that breaks
our dpkg packaging ... so just don't use Python2 in the build here.

Same change made in qa/admin/myconfigure (as this needs to track the
configure logic from Makepkgs).","Changes committed to git@github.com:kmcdonell/pcp.git 20200607
Ken McDonell (4):
Makepkgs: default configure --without-python for Ubuntu 20.04 (and later)
configure.ac: Force man pages for Debian-style builds
debian/GNUmakefile: fix cut-n-paste botch for ganglia2pcp packaging
pmie/rc_pmie & pmlogger/rc_pmlogger: fix trap snarfoo
Makepkgs                 |   17 ++++++++
configure                |   99 ++++++++++++-----------------------------------
configure.ac             |   18 ++++++++
debian/GNUmakefile       |   15 +++++--
qa/admin/myconfigure     |   17 ++++++++
src/pmie/rc_pmie         |    2
src/pmlogger/rc_pmlogger |    2
7 files changed, 91 insertions(+), 79 deletions(-)
Details ...
commit 18d4281
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jun 7 09:44:25 2020 +1000
pmie/rc_pmie & pmlogger/rc_pmlogger: fix trap snarfoo

The nested trap was leaving behind directory turds in
$PCP_DIR/var/tmp/pcp.XXXXXXXXX and there was a file called ""tmp""
therein that contained output from _get_pids_by_name().

commit 558d789
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jun 7 09:42:21 2020 +1000
debian/GNUmakefile: fix cut-n-paste botch for ganglia2pcp packaging

PCPIMPORTSAR* macros defined twice (!), no macros for PCPIMPORTGANGLIA*.

Also install-pcpimportganglia target and rules block was missing.

commit 22eff06
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jun 7 09:38:04 2020 +1000
configure.ac: Force man pages for Debian-style builds

The dpkg packaging rules expect the man pages to be present, but our
""smart"" configure logic for figuring out what style of man pages
are required was failing on container-based builds in CI (presumably
because there are no man pages installed there).

Force the inclusion of the man pages by setting the relevant variables
if the ""smart"" logic fails to set them.

Also picked up that configure was not remade after last configure.ac
change, so there are some changes in configure that are not caused
by the configure.ac changes in this commit.

commit 9ce7e2d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jun 7 09:30:10 2020 +1000
Makepkgs: default configure --without-python for Ubuntu 20.04 (and later)

In Ubuntu 20.04 the Python2 package names changed in ways that breaks
our dpkg packaging ... so just don't use Python2 in the build here.

Same change made in qa/admin/myconfigure (as this needs to track the
configure logic from Makepkgs).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,941,2020-06-08T18:48:44Z,2020-06-08T22:54:56Z,2020-06-08T22:54:57Z,MERGED,True,3,3,1,https://github.com/kurik,Fix of 1845241 - Intermittent pmlogconf core dumps,1,[],https://github.com/performancecopilot/pcp/pull/941,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/941,"Variable i is compared with vsp->numval in iterrations of evaluate_number_values, evaluate_string_values and evaluate_string_regexp functions. As vsp->numval can have a negative value (an error code), the comparison if iis less then vsp->numval needs to use signed integers instead of unsigned ones.","Variable i is compared with vsp->numval in iterrations of evaluate_number_values, evaluate_string_values and evaluate_string_regexp functions. As vsp->numval can have a negative value (an error code), the comparison if iis less then vsp->numval needs to use signed integers instead of unsigned ones.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,941,2020-06-08T18:48:44Z,2020-06-08T22:54:56Z,2020-06-08T22:54:57Z,MERGED,True,3,3,1,https://github.com/kurik,Fix of 1845241 - Intermittent pmlogconf core dumps,1,[],https://github.com/performancecopilot/pcp/pull/941,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/941#issuecomment-640929081,"Variable i is compared with vsp->numval in iterrations of evaluate_number_values, evaluate_string_values and evaluate_string_regexp functions. As vsp->numval can have a negative value (an error code), the comparison if iis less then vsp->numval needs to use signed integers instead of unsigned ones.","@kurik thanks Jan, I've extended test qa/362 with additional error handling cases too.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,942,2020-06-10T06:42:56Z,2020-06-10T21:04:13Z,2020-08-18T21:33:19Z,MERGED,True,89,34,5,https://github.com/kmcdonell,qa/354 for ci,11,[],https://github.com/performancecopilot/pcp/pull/942,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/942,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,943,2020-06-10T21:12:07Z,2020-06-10T21:52:18Z,2020-08-18T21:33:25Z,MERGED,True,88,96,7,https://github.com/kmcdonell,fixes for CI,5,[],https://github.com/performancecopilot/pcp/pull/943,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/943,"Changes committed to git@github.com:kmcdonell/pcp.git 20200610
Ken McDonell (4):
.github/workflows/ci.yml: re-enable Ubuntu 20.04 in the CI workflow
qa/354: use a bigger hammer in _filter()
qa/338: need to take control of the umask for the user $PCP_USER
qa/group: take 354 out of the not_in_container group
.github/workflows/ci.yml |    2 -
qa/338                   |    6 ++--
qa/354                   |   16 ++++---------
qa/354.out               |   57 -----------------------------------------------
qa/group                 |    2 -
5 files changed, 10 insertions(+), 73 deletions(-)
Details ...
commit b027e7d
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jun 11 07:09:02 2020 +1000
qa/group: take 354 out of the not_in_container group

commit de8fa2a
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jun 11 06:30:52 2020 +1000
qa/338: need to take control of the umask for the user $PCP_USER

commit 94c7ee2
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jun 10 20:45:10 2020 +1000
qa/354: use a bigger hammer in _filter()

Still trying for a CI ""Ubuntu 20.04 in a container"" pass.

commit 1e7f3a2
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jun 10 20:41:12 2020 +1000
.github/workflows/ci.yml: re-enable Ubuntu 20.04 in the CI workflow

We need to figure out how to make this work and pass.","Changes committed to git@github.com:kmcdonell/pcp.git 20200610
Ken McDonell (4):
.github/workflows/ci.yml: re-enable Ubuntu 20.04 in the CI workflow
qa/354: use a bigger hammer in _filter()
qa/338: need to take control of the umask for the user $PCP_USER
qa/group: take 354 out of the not_in_container group
.github/workflows/ci.yml |    2 -
qa/338                   |    6 ++--
qa/354                   |   16 ++++---------
qa/354.out               |   57 -----------------------------------------------
qa/group                 |    2 -
5 files changed, 10 insertions(+), 73 deletions(-)
Details ...
commit b027e7d
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jun 11 07:09:02 2020 +1000
qa/group: take 354 out of the not_in_container group

commit de8fa2a
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jun 11 06:30:52 2020 +1000
qa/338: need to take control of the umask for the user $PCP_USER

commit 94c7ee2
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jun 10 20:45:10 2020 +1000
qa/354: use a bigger hammer in _filter()

Still trying for a CI ""Ubuntu 20.04 in a container"" pass.

commit 1e7f3a2
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jun 10 20:41:12 2020 +1000
.github/workflows/ci.yml: re-enable Ubuntu 20.04 in the CI workflow

We need to figure out how to make this work and pass.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,946,2020-06-15T22:34:44Z,2020-06-18T01:35:28Z,2020-08-18T21:33:30Z,MERGED,True,1018,360,59,https://github.com/kmcdonell,"pmlogger_check-with-systemd, Debian build, qa, misc",28,[],https://github.com/performancecopilot/pcp/pull/946,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/946,"Changes committed to git@github.com:kmcdonell/pcp.git 20200613
Ken McDonell (21):
pmlogger_check.sh: major overhaul (diags and systemd fixups)
src/pmlogger/rc_pmlogger: use --quick to pmlogger_check
src/pmlogger/pmlogger_check.service.in: add --skip-primary arg to pmlogger_check
src/pmlogger/pmlogger.service.in: change ancillary services from After to Before
src/pmlogger/pmlogger_daily.sh: similar changes to pmlogger_check.sh
qa/1200: (new) exercise _wait_for_pmcd() variant in pmlogger_check
Makepkgs & qa/admin/myconfigure: fix botch in last commit for Ubuntu 20.04
debian: roll debhelper compat version from 9 to 10
qa: umask changes
qa/119: remove pmmgr references
qa/430.out: remade after -VV changes to pmlogger_check
qa/623: filter changes after recent -VV changes to pmlogger_check
qa/920: refactor during systemd investigations
qa/1190: rework for performance improvement
qa/check.callback.sample: performance improvements
qa/008: deal with non-determinism in disk indom
qa/008: add qualified output for host bozo-vm
qa/365: another aliased error message
qa/589: another aliased error message
qa: tweak filter for pmlogger_daily tests
qa/1388: add Note about FQDN
Makepkgs                               |    6
debian/compat                          |    2
debian/rules                           |    4
man/man1/pmlogger_check.1              |   22 +++
qa/008                                 |    3
qa/008.helper                          |   49 +++++++
qa/008.out.Colleens-iMac               |   14 +-
qa/008.out.bozo                        |   58 ++++-----
qa/008.out.bozo+cd                     |   68 +++++-----
qa/008.out.bozo-laptop                 |   14 +-
qa/008.out.canary                      |   38 +++---
qa/008.out.comma                       |   14 +-
qa/008.out.kenj-pc                     |   28 ++--
qa/008.out.kmcdonell-laptop            |   14 +-
qa/008.out.ppp-kenmcd                  |   28 ++--
qa/008.out.shard                       |   14 +-
qa/008.out.slick                       |   14 +-
qa/008.out.smash                       |   28 ++--
qa/119                                 |   12 -
qa/1190                                |   23 +--
qa/1190.out                            |    1
qa/1200                                |  125 +++++++++++++++++++
qa/1200.out                            |    9 +
qa/1388                                |    6
qa/151                                 |    5
qa/280                                 |   10 -
qa/338                                 |    2
qa/365                                 |    1
qa/430                                 |   16 ++
qa/430.out                             |  207 ++++++++++++++++++++++-----------
qa/503                                 |   16 +-
qa/530                                 |    8 -
qa/532                                 |    4
qa/564                                 |    3
qa/589                                 |    1
qa/623                                 |    2
qa/641                                 |    4
qa/658                                 |    4
qa/664                                 |    4
qa/679                                 |    2
qa/686                                 |    2
qa/793                                 |    2
qa/920                                 |   20 ++-
qa/925                                 |    5
qa/929                                 |    3
qa/admin/myconfigure                   |    6
qa/check.callback.sample               |    2
qa/group                               |    1
src/pmlogger/pmlogger.service.in       |    2
src/pmlogger/pmlogger_check.service.in |    2
src/pmlogger/pmlogger_check.sh         |  154 ++++++++++++++++++++----
src/pmlogger/pmlogger_daily.sh         |   60 ++++++---
src/pmlogger/rc_pmlogger               |    6
53 files changed, 797 insertions(+), 351 deletions(-)
Details ...
commit 36cd554
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 08:32:00 2020 +1000
qa/1388: add Note about FQDN

This test will fail if hostname(1) does not return a FQDN.

commit 04f693c
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 06:49:14 2020 +1000
qa: tweak filter for pmlogger_daily tests

Depending on the alignment of the planets, /var/log/pcp/NOTICES
can get rotated during this test, and the associated output is not
generally expected.

Filter it out in a consistent manner across all of the tests that
exercise pmlogger_daily.

commit 8401600
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 06:38:42 2020 +1000
qa/589: another aliased error message

This time on Ubuntu 20.04 we're seeing ""Unknown server error"".

commit 19a2393
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:49:14 2020 +1000
qa/365: another aliased error message

This time on Ubuntu 20.04 we're seeing ""Unknown server error"".

commit b4360b0
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:43:20 2020 +1000
qa/008: add qualified output for host bozo-vm

commit 240e3b2
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:38:36 2020 +1000
qa/008: deal with non-determinism in disk indom

O/S upgrades, h/w reconfigs and reboots can all make this test fail.
Remove the dependence on the disk discovery order that drives a fresh
indom instantiation.

commit a6867f4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:06:00 2020 +1000
qa/check.callback.sample: performance improvements

With some tweaks here, and the improvements in qa/1190 the
running time was reduce from 4.6s to 0.9s (x5 improvement).

This is important because it shaves O(1300) x 3.7s = one and half
HOURS off a full QA run with check.callback enabled.

commit 9e53e04
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:04:51 2020 +1000
qa/1190: rework for performance improvement

With a couple of small tweaks, reduce the running time from 3.5s
to 0.4s (x9 improvement).

commit f93b6f3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:02:49 2020 +1000
qa/920: refactor during systemd investigations

This one was a hard failure on bozo (Ubuntu 20.04) ... while
trying to fix the real problem, reworked this test to make it
(a) minimal with same functional coverage, and (b) robust.

commit 8b4ad27
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:47:46 2020 +1000
qa/623: filter changes after recent -VV changes to pmlogger_check

commit e972a9f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:46:47 2020 +1000
qa/430.out: remade after -VV changes to pmlogger_check

commit d24d4a7
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:44:58 2020 +1000
qa/119: remove pmmgr references

Just noticed this when trying to understand a qa failure.
No functional change for current releases.

commit e095837
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:41:55 2020 +1000
qa: umask changes

When we moved to running stuff as user pcp, we no longer controlled
the umask for anything run as
    $ sudo -u $PCP_USER ... <command>

These commits explicitly set the umask before running the <command>.

commit ddab058
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:37:12 2020 +1000
debian: roll debhelper compat version from 9 to 10

9 is now obsolete and not supported on some modern Debian-based
systems.

Current version is 12 (or 13), will get there one step at a time.

commit 6b31d25
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:34:49 2020 +1000
Makepkgs & qa/admin/myconfigure: fix botch in last commit for Ubuntu 20.04

Two CS-101 mistakes in 4 lines of code!  And duplicated by cut-n-paste.

commit 48bbaa1
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:33:09 2020 +1000
qa/1200: (new) exercise _wait_for_pmcd() variant in pmlogger_check

commit 5d65a60
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:25:50 2020 +1000
src/pmlogger/pmlogger_daily.sh: similar changes to pmlogger_check.sh

Most of these were not a problem (this script is not subject to systemd
storms as far as we know), but the changes seem to be for the better.

- log written /var/log/pcp/pmlogger/pmlogger_daily.log.<pid> to avoid
  name collisions when multiple instances are running (note the exiting
  locking mechanism controls concurrent execution safety, this change just
  avoids trashing the log file

- add Start: and End: lines with nanosecond resolution (when -VV used) to
  help debug pmlogger_check ""storms"", e.g. from systemd

- add process tree dump to show where we've been called from (when -VV
  used) to help debug how systemd's screwing us about

- when SaveLogs is in play, change the saved filename pattern to include
        %S (seconds) and the <pid>, to avoid name collisions

- cleanup the lock/unlock code to use absolute pathnames (rather than a
  mix of absolute and relative pathnames) ... no functional change, but
  the code is easier to read

- with -VV don't report comment lines and empty lines from the control
  file(s)

commit 3a68366
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:23:08 2020 +1000
src/pmlogger/pmlogger.service.in: change ancillary services from After to Before

We want pmlogger.service running before pmlogger_check.service, for example.

commit 0b3b4d4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:19:43 2020 +1000
src/pmlogger/pmlogger_check.service.in: add --skip-primary arg to pmlogger_check

We MUST not dink with the primary logger from the systemd pmlogger_check
service ... that is done over in the systemd pmlogger service.

commit 460b7ac
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:04:46 2020 +1000
src/pmlogger/rc_pmlogger: use --quick to pmlogger_check

When starting pmlogger(s) from the init script we really do NOT want to
do compression, the goal is to get at least the primary pmlogger running
as quickly as possible.

Also removed a confusing comment (nothing is run in the background here)
and removed some dead code.

commit 80639d0
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 15:44:51 2020 +1000
pmlogger_check.sh: major overhaul (diags and systemd fixups)

- log written /var/log/pcp/pmlogger/pmlogger_check.log.<pid> to avoid
  name collisions when multiple instances are running (note the exiting
  locking mechanism controls concurrent execution safety, this change just
  avoids trashing the log file

- add Start: and End: lines with nanosecond resolution (when -VV used) to
  help debug pmlogger_check ""storms"", e.g. from systemd

- add process tree dump to show where we've been called from (when -VV
  used) to help debug how systemd's screwing us about

- add -p/--skip-primary command line option to ignore any control lines
  relating to the primary logger (this is critical to making pmlogger_check
  work with systemd, where the primary logger is managed solely by the
  pmlogger service, and the pmlogger_check service looks after any other
  pmloggers

- add -q/--quick command line option to skip any file compression

- when SaveLogs is in play, change the saved filename pattern to include
  %S (seconds) and the <pid>, to avoid name collisions

- cleanup the lock/unlock code to use absolute pathnames (rather than a
  mix of absolute and relative pathnames) ... no functional change, but
  the code is easier to read

- add a variant of _wait_for_pmcd() (from qa) and use this to make sure
  pmcd is present before starting the primary pmlogger

- with -VV don't report comment lines and empty lines from the control
  file(s)

- add -VV diagnostics for some conditions that were not being reported,
  like acquiring the lock file, missing /var/lib/pcp/tmp/pmlogger/primary
  being the reason for starting the primary pmlogger, etc.

Script changes and man page changes in this commit.
  %Y%m%d.%H.%M.%S","Changes committed to git@github.com:kmcdonell/pcp.git 20200613
Ken McDonell (21):
pmlogger_check.sh: major overhaul (diags and systemd fixups)
src/pmlogger/rc_pmlogger: use --quick to pmlogger_check
src/pmlogger/pmlogger_check.service.in: add --skip-primary arg to pmlogger_check
src/pmlogger/pmlogger.service.in: change ancillary services from After to Before
src/pmlogger/pmlogger_daily.sh: similar changes to pmlogger_check.sh
qa/1200: (new) exercise _wait_for_pmcd() variant in pmlogger_check
Makepkgs & qa/admin/myconfigure: fix botch in last commit for Ubuntu 20.04
debian: roll debhelper compat version from 9 to 10
qa: umask changes
qa/119: remove pmmgr references
qa/430.out: remade after -VV changes to pmlogger_check
qa/623: filter changes after recent -VV changes to pmlogger_check
qa/920: refactor during systemd investigations
qa/1190: rework for performance improvement
qa/check.callback.sample: performance improvements
qa/008: deal with non-determinism in disk indom
qa/008: add qualified output for host bozo-vm
qa/365: another aliased error message
qa/589: another aliased error message
qa: tweak filter for pmlogger_daily tests
qa/1388: add Note about FQDN
Makepkgs                               |    6
debian/compat                          |    2
debian/rules                           |    4
man/man1/pmlogger_check.1              |   22 +++
qa/008                                 |    3
qa/008.helper                          |   49 +++++++
qa/008.out.Colleens-iMac               |   14 +-
qa/008.out.bozo                        |   58 ++++-----
qa/008.out.bozo+cd                     |   68 +++++-----
qa/008.out.bozo-laptop                 |   14 +-
qa/008.out.canary                      |   38 +++---
qa/008.out.comma                       |   14 +-
qa/008.out.kenj-pc                     |   28 ++--
qa/008.out.kmcdonell-laptop            |   14 +-
qa/008.out.ppp-kenmcd                  |   28 ++--
qa/008.out.shard                       |   14 +-
qa/008.out.slick                       |   14 +-
qa/008.out.smash                       |   28 ++--
qa/119                                 |   12 -
qa/1190                                |   23 +--
qa/1190.out                            |    1
qa/1200                                |  125 +++++++++++++++++++
qa/1200.out                            |    9 +
qa/1388                                |    6
qa/151                                 |    5
qa/280                                 |   10 -
qa/338                                 |    2
qa/365                                 |    1
qa/430                                 |   16 ++
qa/430.out                             |  207 ++++++++++++++++++++++-----------
qa/503                                 |   16 +-
qa/530                                 |    8 -
qa/532                                 |    4
qa/564                                 |    3
qa/589                                 |    1
qa/623                                 |    2
qa/641                                 |    4
qa/658                                 |    4
qa/664                                 |    4
qa/679                                 |    2
qa/686                                 |    2
qa/793                                 |    2
qa/920                                 |   20 ++-
qa/925                                 |    5
qa/929                                 |    3
qa/admin/myconfigure                   |    6
qa/check.callback.sample               |    2
qa/group                               |    1
src/pmlogger/pmlogger.service.in       |    2
src/pmlogger/pmlogger_check.service.in |    2
src/pmlogger/pmlogger_check.sh         |  154 ++++++++++++++++++++----
src/pmlogger/pmlogger_daily.sh         |   60 ++++++---
src/pmlogger/rc_pmlogger               |    6
53 files changed, 797 insertions(+), 351 deletions(-)
Details ...
commit 36cd554
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 08:32:00 2020 +1000
qa/1388: add Note about FQDN

This test will fail if hostname(1) does not return a FQDN.

commit 04f693c
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 06:49:14 2020 +1000
qa: tweak filter for pmlogger_daily tests

Depending on the alignment of the planets, /var/log/pcp/NOTICES
can get rotated during this test, and the associated output is not
generally expected.

Filter it out in a consistent manner across all of the tests that
exercise pmlogger_daily.

commit 8401600
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 06:38:42 2020 +1000
qa/589: another aliased error message

This time on Ubuntu 20.04 we're seeing ""Unknown server error"".

commit 19a2393
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:49:14 2020 +1000
qa/365: another aliased error message

This time on Ubuntu 20.04 we're seeing ""Unknown server error"".

commit b4360b0
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:43:20 2020 +1000
qa/008: add qualified output for host bozo-vm

commit 240e3b2
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:38:36 2020 +1000
qa/008: deal with non-determinism in disk indom

O/S upgrades, h/w reconfigs and reboots can all make this test fail.
Remove the dependence on the disk discovery order that drives a fresh
indom instantiation.

commit a6867f4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:06:00 2020 +1000
qa/check.callback.sample: performance improvements

With some tweaks here, and the improvements in qa/1190 the
running time was reduce from 4.6s to 0.9s (x5 improvement).

This is important because it shaves O(1300) x 3.7s = one and half
HOURS off a full QA run with check.callback enabled.

commit 9e53e04
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:04:51 2020 +1000
qa/1190: rework for performance improvement

With a couple of small tweaks, reduce the running time from 3.5s
to 0.4s (x9 improvement).

commit f93b6f3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:02:49 2020 +1000
qa/920: refactor during systemd investigations

This one was a hard failure on bozo (Ubuntu 20.04) ... while
trying to fix the real problem, reworked this test to make it
(a) minimal with same functional coverage, and (b) robust.

commit 8b4ad27
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:47:46 2020 +1000
qa/623: filter changes after recent -VV changes to pmlogger_check

commit e972a9f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:46:47 2020 +1000
qa/430.out: remade after -VV changes to pmlogger_check

commit d24d4a7
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:44:58 2020 +1000
qa/119: remove pmmgr references

Just noticed this when trying to understand a qa failure.
No functional change for current releases.

commit e095837
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:41:55 2020 +1000
qa: umask changes

When we moved to running stuff as user pcp, we no longer controlled
the umask for anything run as
    $ sudo -u $PCP_USER ... <command>

These commits explicitly set the umask before running the <command>.

commit ddab058
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:37:12 2020 +1000
debian: roll debhelper compat version from 9 to 10

9 is now obsolete and not supported on some modern Debian-based
systems.

Current version is 12 (or 13), will get there one step at a time.

commit 6b31d25
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:34:49 2020 +1000
Makepkgs & qa/admin/myconfigure: fix botch in last commit for Ubuntu 20.04

Two CS-101 mistakes in 4 lines of code!  And duplicated by cut-n-paste.

commit 48bbaa1
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:33:09 2020 +1000
qa/1200: (new) exercise _wait_for_pmcd() variant in pmlogger_check

commit 5d65a60
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:25:50 2020 +1000
src/pmlogger/pmlogger_daily.sh: similar changes to pmlogger_check.sh

Most of these were not a problem (this script is not subject to systemd
storms as far as we know), but the changes seem to be for the better.

- log written /var/log/pcp/pmlogger/pmlogger_daily.log.<pid> to avoid
  name collisions when multiple instances are running (note the exiting
  locking mechanism controls concurrent execution safety, this change just
  avoids trashing the log file

- add Start: and End: lines with nanosecond resolution (when -VV used) to
  help debug pmlogger_check ""storms"", e.g. from systemd

- add process tree dump to show where we've been called from (when -VV
  used) to help debug how systemd's screwing us about

- when SaveLogs is in play, change the saved filename pattern to include
        %S (seconds) and the <pid>, to avoid name collisions

- cleanup the lock/unlock code to use absolute pathnames (rather than a
  mix of absolute and relative pathnames) ... no functional change, but
  the code is easier to read

- with -VV don't report comment lines and empty lines from the control
  file(s)

commit 3a68366
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:23:08 2020 +1000
src/pmlogger/pmlogger.service.in: change ancillary services from After to Before

We want pmlogger.service running before pmlogger_check.service, for example.

commit 0b3b4d4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:19:43 2020 +1000
src/pmlogger/pmlogger_check.service.in: add --skip-primary arg to pmlogger_check

We MUST not dink with the primary logger from the systemd pmlogger_check
service ... that is done over in the systemd pmlogger service.

commit 460b7ac
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:04:46 2020 +1000
src/pmlogger/rc_pmlogger: use --quick to pmlogger_check

When starting pmlogger(s) from the init script we really do NOT want to
do compression, the goal is to get at least the primary pmlogger running
as quickly as possible.

Also removed a confusing comment (nothing is run in the background here)
and removed some dead code.

commit 80639d0
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 15:44:51 2020 +1000
pmlogger_check.sh: major overhaul (diags and systemd fixups)

- log written /var/log/pcp/pmlogger/pmlogger_check.log.<pid> to avoid
  name collisions when multiple instances are running (note the exiting
  locking mechanism controls concurrent execution safety, this change just
  avoids trashing the log file

- add Start: and End: lines with nanosecond resolution (when -VV used) to
  help debug pmlogger_check ""storms"", e.g. from systemd

- add process tree dump to show where we've been called from (when -VV
  used) to help debug how systemd's screwing us about

- add -p/--skip-primary command line option to ignore any control lines
  relating to the primary logger (this is critical to making pmlogger_check
  work with systemd, where the primary logger is managed solely by the
  pmlogger service, and the pmlogger_check service looks after any other
  pmloggers

- add -q/--quick command line option to skip any file compression

- when SaveLogs is in play, change the saved filename pattern to include
  %S (seconds) and the <pid>, to avoid name collisions

- cleanup the lock/unlock code to use absolute pathnames (rather than a
  mix of absolute and relative pathnames) ... no functional change, but
  the code is easier to read

- add a variant of _wait_for_pmcd() (from qa) and use this to make sure
  pmcd is present before starting the primary pmlogger

- with -VV don't report comment lines and empty lines from the control
  file(s)

- add -VV diagnostics for some conditions that were not being reported,
  like acquiring the lock file, missing /var/lib/pcp/tmp/pmlogger/primary
  being the reason for starting the primary pmlogger, etc.

Script changes and man page changes in this commit.
  %Y%m%d.%H.%M.%S",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,946,2020-06-15T22:34:44Z,2020-06-18T01:35:28Z,2020-08-18T21:33:30Z,MERGED,True,1018,360,59,https://github.com/kmcdonell,"pmlogger_check-with-systemd, Debian build, qa, misc",28,[],https://github.com/performancecopilot/pcp/pull/946,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/946#issuecomment-644553074,"Changes committed to git@github.com:kmcdonell/pcp.git 20200613
Ken McDonell (21):
pmlogger_check.sh: major overhaul (diags and systemd fixups)
src/pmlogger/rc_pmlogger: use --quick to pmlogger_check
src/pmlogger/pmlogger_check.service.in: add --skip-primary arg to pmlogger_check
src/pmlogger/pmlogger.service.in: change ancillary services from After to Before
src/pmlogger/pmlogger_daily.sh: similar changes to pmlogger_check.sh
qa/1200: (new) exercise _wait_for_pmcd() variant in pmlogger_check
Makepkgs & qa/admin/myconfigure: fix botch in last commit for Ubuntu 20.04
debian: roll debhelper compat version from 9 to 10
qa: umask changes
qa/119: remove pmmgr references
qa/430.out: remade after -VV changes to pmlogger_check
qa/623: filter changes after recent -VV changes to pmlogger_check
qa/920: refactor during systemd investigations
qa/1190: rework for performance improvement
qa/check.callback.sample: performance improvements
qa/008: deal with non-determinism in disk indom
qa/008: add qualified output for host bozo-vm
qa/365: another aliased error message
qa/589: another aliased error message
qa: tweak filter for pmlogger_daily tests
qa/1388: add Note about FQDN
Makepkgs                               |    6
debian/compat                          |    2
debian/rules                           |    4
man/man1/pmlogger_check.1              |   22 +++
qa/008                                 |    3
qa/008.helper                          |   49 +++++++
qa/008.out.Colleens-iMac               |   14 +-
qa/008.out.bozo                        |   58 ++++-----
qa/008.out.bozo+cd                     |   68 +++++-----
qa/008.out.bozo-laptop                 |   14 +-
qa/008.out.canary                      |   38 +++---
qa/008.out.comma                       |   14 +-
qa/008.out.kenj-pc                     |   28 ++--
qa/008.out.kmcdonell-laptop            |   14 +-
qa/008.out.ppp-kenmcd                  |   28 ++--
qa/008.out.shard                       |   14 +-
qa/008.out.slick                       |   14 +-
qa/008.out.smash                       |   28 ++--
qa/119                                 |   12 -
qa/1190                                |   23 +--
qa/1190.out                            |    1
qa/1200                                |  125 +++++++++++++++++++
qa/1200.out                            |    9 +
qa/1388                                |    6
qa/151                                 |    5
qa/280                                 |   10 -
qa/338                                 |    2
qa/365                                 |    1
qa/430                                 |   16 ++
qa/430.out                             |  207 ++++++++++++++++++++++-----------
qa/503                                 |   16 +-
qa/530                                 |    8 -
qa/532                                 |    4
qa/564                                 |    3
qa/589                                 |    1
qa/623                                 |    2
qa/641                                 |    4
qa/658                                 |    4
qa/664                                 |    4
qa/679                                 |    2
qa/686                                 |    2
qa/793                                 |    2
qa/920                                 |   20 ++-
qa/925                                 |    5
qa/929                                 |    3
qa/admin/myconfigure                   |    6
qa/check.callback.sample               |    2
qa/group                               |    1
src/pmlogger/pmlogger.service.in       |    2
src/pmlogger/pmlogger_check.service.in |    2
src/pmlogger/pmlogger_check.sh         |  154 ++++++++++++++++++++----
src/pmlogger/pmlogger_daily.sh         |   60 ++++++---
src/pmlogger/rc_pmlogger               |    6
53 files changed, 797 insertions(+), 351 deletions(-)
Details ...
commit 36cd554
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 08:32:00 2020 +1000
qa/1388: add Note about FQDN

This test will fail if hostname(1) does not return a FQDN.

commit 04f693c
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 06:49:14 2020 +1000
qa: tweak filter for pmlogger_daily tests

Depending on the alignment of the planets, /var/log/pcp/NOTICES
can get rotated during this test, and the associated output is not
generally expected.

Filter it out in a consistent manner across all of the tests that
exercise pmlogger_daily.

commit 8401600
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 06:38:42 2020 +1000
qa/589: another aliased error message

This time on Ubuntu 20.04 we're seeing ""Unknown server error"".

commit 19a2393
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:49:14 2020 +1000
qa/365: another aliased error message

This time on Ubuntu 20.04 we're seeing ""Unknown server error"".

commit b4360b0
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:43:20 2020 +1000
qa/008: add qualified output for host bozo-vm

commit 240e3b2
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:38:36 2020 +1000
qa/008: deal with non-determinism in disk indom

O/S upgrades, h/w reconfigs and reboots can all make this test fail.
Remove the dependence on the disk discovery order that drives a fresh
indom instantiation.

commit a6867f4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:06:00 2020 +1000
qa/check.callback.sample: performance improvements

With some tweaks here, and the improvements in qa/1190 the
running time was reduce from 4.6s to 0.9s (x5 improvement).

This is important because it shaves O(1300) x 3.7s = one and half
HOURS off a full QA run with check.callback enabled.

commit 9e53e04
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:04:51 2020 +1000
qa/1190: rework for performance improvement

With a couple of small tweaks, reduce the running time from 3.5s
to 0.4s (x9 improvement).

commit f93b6f3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:02:49 2020 +1000
qa/920: refactor during systemd investigations

This one was a hard failure on bozo (Ubuntu 20.04) ... while
trying to fix the real problem, reworked this test to make it
(a) minimal with same functional coverage, and (b) robust.

commit 8b4ad27
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:47:46 2020 +1000
qa/623: filter changes after recent -VV changes to pmlogger_check

commit e972a9f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:46:47 2020 +1000
qa/430.out: remade after -VV changes to pmlogger_check

commit d24d4a7
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:44:58 2020 +1000
qa/119: remove pmmgr references

Just noticed this when trying to understand a qa failure.
No functional change for current releases.

commit e095837
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:41:55 2020 +1000
qa: umask changes

When we moved to running stuff as user pcp, we no longer controlled
the umask for anything run as
    $ sudo -u $PCP_USER ... <command>

These commits explicitly set the umask before running the <command>.

commit ddab058
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:37:12 2020 +1000
debian: roll debhelper compat version from 9 to 10

9 is now obsolete and not supported on some modern Debian-based
systems.

Current version is 12 (or 13), will get there one step at a time.

commit 6b31d25
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:34:49 2020 +1000
Makepkgs & qa/admin/myconfigure: fix botch in last commit for Ubuntu 20.04

Two CS-101 mistakes in 4 lines of code!  And duplicated by cut-n-paste.

commit 48bbaa1
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:33:09 2020 +1000
qa/1200: (new) exercise _wait_for_pmcd() variant in pmlogger_check

commit 5d65a60
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:25:50 2020 +1000
src/pmlogger/pmlogger_daily.sh: similar changes to pmlogger_check.sh

Most of these were not a problem (this script is not subject to systemd
storms as far as we know), but the changes seem to be for the better.

- log written /var/log/pcp/pmlogger/pmlogger_daily.log.<pid> to avoid
  name collisions when multiple instances are running (note the exiting
  locking mechanism controls concurrent execution safety, this change just
  avoids trashing the log file

- add Start: and End: lines with nanosecond resolution (when -VV used) to
  help debug pmlogger_check ""storms"", e.g. from systemd

- add process tree dump to show where we've been called from (when -VV
  used) to help debug how systemd's screwing us about

- when SaveLogs is in play, change the saved filename pattern to include
        %S (seconds) and the <pid>, to avoid name collisions

- cleanup the lock/unlock code to use absolute pathnames (rather than a
  mix of absolute and relative pathnames) ... no functional change, but
  the code is easier to read

- with -VV don't report comment lines and empty lines from the control
  file(s)

commit 3a68366
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:23:08 2020 +1000
src/pmlogger/pmlogger.service.in: change ancillary services from After to Before

We want pmlogger.service running before pmlogger_check.service, for example.

commit 0b3b4d4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:19:43 2020 +1000
src/pmlogger/pmlogger_check.service.in: add --skip-primary arg to pmlogger_check

We MUST not dink with the primary logger from the systemd pmlogger_check
service ... that is done over in the systemd pmlogger service.

commit 460b7ac
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:04:46 2020 +1000
src/pmlogger/rc_pmlogger: use --quick to pmlogger_check

When starting pmlogger(s) from the init script we really do NOT want to
do compression, the goal is to get at least the primary pmlogger running
as quickly as possible.

Also removed a confusing comment (nothing is run in the background here)
and removed some dead code.

commit 80639d0
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 15:44:51 2020 +1000
pmlogger_check.sh: major overhaul (diags and systemd fixups)

- log written /var/log/pcp/pmlogger/pmlogger_check.log.<pid> to avoid
  name collisions when multiple instances are running (note the exiting
  locking mechanism controls concurrent execution safety, this change just
  avoids trashing the log file

- add Start: and End: lines with nanosecond resolution (when -VV used) to
  help debug pmlogger_check ""storms"", e.g. from systemd

- add process tree dump to show where we've been called from (when -VV
  used) to help debug how systemd's screwing us about

- add -p/--skip-primary command line option to ignore any control lines
  relating to the primary logger (this is critical to making pmlogger_check
  work with systemd, where the primary logger is managed solely by the
  pmlogger service, and the pmlogger_check service looks after any other
  pmloggers

- add -q/--quick command line option to skip any file compression

- when SaveLogs is in play, change the saved filename pattern to include
  %S (seconds) and the <pid>, to avoid name collisions

- cleanup the lock/unlock code to use absolute pathnames (rather than a
  mix of absolute and relative pathnames) ... no functional change, but
  the code is easier to read

- add a variant of _wait_for_pmcd() (from qa) and use this to make sure
  pmcd is present before starting the primary pmlogger

- with -VV don't report comment lines and empty lines from the control
  file(s)

- add -VV diagnostics for some conditions that were not being reported,
  like acquiring the lock file, missing /var/lib/pcp/tmp/pmlogger/primary
  being the reason for starting the primary pmlogger, etc.

Script changes and man page changes in this commit.
  %Y%m%d.%H.%M.%S","Hi Ken,
are you seeing any failures with the new qa/1200 test on systems with a primary and at least one other remote logger configured? The test runs for ages (like 10 mins) and then fails
shack:mgoodwin@~/src/pcp/qa[kmcdonell-20200613]$ ./check -l 1200
PMDA probe: pminfo -h shack -f sample.milliseconds
PMDA probe: pminfo -h shack -f sampledso.milliseconds
PMDA probe: pminfo -h shack -f simple.numfetch
1200 22s ... [failed, exit status 2] - output mismatch (see 1200.out.bad)
9a10,458
> Tue Jun 16 15:56:57 AEST 2020
> Arrgghhh ... pmlogger (primary) failed to start after 20 seconds
> at Tue Jun 16 15:56:57 AEST 2020.
> pmlogger log (/var/log/pcp/pmlogger/shack/pmlogger.log) ...
> cat: /var/log/pcp/pmlogger/shack/pmlogger.log: No such file or directory
> 
> pmlc output ...
> UID          PID    PPID  C STIME TTY          TIME CMD
> pcp       164863       1  4 15:55 pts/11   00:00:03 /usr/libexec/pcp/bin/pmlogger -h goblin -r -T24h10m -c config.goblin -v 100mb -m pmlogger_check %Y%m%d.%H.%M
> pmlc -P
> Unable to connect to primary pmlogger at local:: Connection refused
.... lots deleted ...
> Unable to connect to primary pmlogger at local:: Connection refused
> 
> cat: /var/log/pcp/pmlogger/shack/pmlogger.log: No such file or directory
> cat: /var/log/pcp/pmlogger/shack/pmlogger.log: No such file or directory
> archive not created
> 
> local pmlogger map ...
> -rw-r--r--. 1 pcp pcp 71 Jun 16 15:55 /var/lib/pcp/tmp/pmlogger/164863
> 4330
> goblin
> /var/log/pcp/pmlogger/goblin/20200616.15.55
> pmlogger_check
> 
> Likely looking processes ...

... lots of process listings

> pmlc -P
> Unable to connect to primary pmlogger at local:: Connection refused
> 
> cat: /var/log/pcp/pmlogger/shack/pmlogger.log: No such file or directory
> cat: /var/log/pcp/pmlogger/shack/pmlogger.log: No such file or directory
> archive not created
> 
> local pmlogger map ...
> No files in /var/lib/pcp/tmp/pmlogger !?
> 

Check local PMCD is still alive ...
PMDA probe: pminfo -h shack -f sample.milliseconds
PMDA probe: pminfo -h shack -f sampledso.milliseconds
PMDA probe: pminfo -h shack -f simple.numfetch
Primary pmlogger not running ...
chkconfig pmlogger on, and restart PMCD

[hang]
^C
^CAborted! [running 1200]
Failures: 1200
Failed 1 of 0 tests

After all of that, there is a stale lock in the primary logger directory and the service wont start at all.

shack:mgoodwin@~/src/pcp/qa[kmcdonell-20200613]$ ls -l /var/log/pcp/pmlogger/`hostname`/lock
----------. 1 root root 0 Jun 16 15:52 /var/log/pcp/pmlogger/shack/lock

After manually removing the lock, I can start the service:

shack:mgoodwin@~/src/pcp/qa[kmcdonell-20200613]$ pcp | grep logger
 pmlogger: goblin: /var/log/pcp/pmlogger/goblin/20200616.16.05
           primary logger: /var/log/pcp/pmlogger/shack/20200616.16.05",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,946,2020-06-15T22:34:44Z,2020-06-18T01:35:28Z,2020-08-18T21:33:30Z,MERGED,True,1018,360,59,https://github.com/kmcdonell,"pmlogger_check-with-systemd, Debian build, qa, misc",28,[],https://github.com/performancecopilot/pcp/pull/946,https://github.com/kmcdonell,3,https://github.com/performancecopilot/pcp/pull/946#issuecomment-644579432,"Changes committed to git@github.com:kmcdonell/pcp.git 20200613
Ken McDonell (21):
pmlogger_check.sh: major overhaul (diags and systemd fixups)
src/pmlogger/rc_pmlogger: use --quick to pmlogger_check
src/pmlogger/pmlogger_check.service.in: add --skip-primary arg to pmlogger_check
src/pmlogger/pmlogger.service.in: change ancillary services from After to Before
src/pmlogger/pmlogger_daily.sh: similar changes to pmlogger_check.sh
qa/1200: (new) exercise _wait_for_pmcd() variant in pmlogger_check
Makepkgs & qa/admin/myconfigure: fix botch in last commit for Ubuntu 20.04
debian: roll debhelper compat version from 9 to 10
qa: umask changes
qa/119: remove pmmgr references
qa/430.out: remade after -VV changes to pmlogger_check
qa/623: filter changes after recent -VV changes to pmlogger_check
qa/920: refactor during systemd investigations
qa/1190: rework for performance improvement
qa/check.callback.sample: performance improvements
qa/008: deal with non-determinism in disk indom
qa/008: add qualified output for host bozo-vm
qa/365: another aliased error message
qa/589: another aliased error message
qa: tweak filter for pmlogger_daily tests
qa/1388: add Note about FQDN
Makepkgs                               |    6
debian/compat                          |    2
debian/rules                           |    4
man/man1/pmlogger_check.1              |   22 +++
qa/008                                 |    3
qa/008.helper                          |   49 +++++++
qa/008.out.Colleens-iMac               |   14 +-
qa/008.out.bozo                        |   58 ++++-----
qa/008.out.bozo+cd                     |   68 +++++-----
qa/008.out.bozo-laptop                 |   14 +-
qa/008.out.canary                      |   38 +++---
qa/008.out.comma                       |   14 +-
qa/008.out.kenj-pc                     |   28 ++--
qa/008.out.kmcdonell-laptop            |   14 +-
qa/008.out.ppp-kenmcd                  |   28 ++--
qa/008.out.shard                       |   14 +-
qa/008.out.slick                       |   14 +-
qa/008.out.smash                       |   28 ++--
qa/119                                 |   12 -
qa/1190                                |   23 +--
qa/1190.out                            |    1
qa/1200                                |  125 +++++++++++++++++++
qa/1200.out                            |    9 +
qa/1388                                |    6
qa/151                                 |    5
qa/280                                 |   10 -
qa/338                                 |    2
qa/365                                 |    1
qa/430                                 |   16 ++
qa/430.out                             |  207 ++++++++++++++++++++++-----------
qa/503                                 |   16 +-
qa/530                                 |    8 -
qa/532                                 |    4
qa/564                                 |    3
qa/589                                 |    1
qa/623                                 |    2
qa/641                                 |    4
qa/658                                 |    4
qa/664                                 |    4
qa/679                                 |    2
qa/686                                 |    2
qa/793                                 |    2
qa/920                                 |   20 ++-
qa/925                                 |    5
qa/929                                 |    3
qa/admin/myconfigure                   |    6
qa/check.callback.sample               |    2
qa/group                               |    1
src/pmlogger/pmlogger.service.in       |    2
src/pmlogger/pmlogger_check.service.in |    2
src/pmlogger/pmlogger_check.sh         |  154 ++++++++++++++++++++----
src/pmlogger/pmlogger_daily.sh         |   60 ++++++---
src/pmlogger/rc_pmlogger               |    6
53 files changed, 797 insertions(+), 351 deletions(-)
Details ...
commit 36cd554
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 08:32:00 2020 +1000
qa/1388: add Note about FQDN

This test will fail if hostname(1) does not return a FQDN.

commit 04f693c
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 06:49:14 2020 +1000
qa: tweak filter for pmlogger_daily tests

Depending on the alignment of the planets, /var/log/pcp/NOTICES
can get rotated during this test, and the associated output is not
generally expected.

Filter it out in a consistent manner across all of the tests that
exercise pmlogger_daily.

commit 8401600
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 06:38:42 2020 +1000
qa/589: another aliased error message

This time on Ubuntu 20.04 we're seeing ""Unknown server error"".

commit 19a2393
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:49:14 2020 +1000
qa/365: another aliased error message

This time on Ubuntu 20.04 we're seeing ""Unknown server error"".

commit b4360b0
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:43:20 2020 +1000
qa/008: add qualified output for host bozo-vm

commit 240e3b2
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:38:36 2020 +1000
qa/008: deal with non-determinism in disk indom

O/S upgrades, h/w reconfigs and reboots can all make this test fail.
Remove the dependence on the disk discovery order that drives a fresh
indom instantiation.

commit a6867f4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:06:00 2020 +1000
qa/check.callback.sample: performance improvements

With some tweaks here, and the improvements in qa/1190 the
running time was reduce from 4.6s to 0.9s (x5 improvement).

This is important because it shaves O(1300) x 3.7s = one and half
HOURS off a full QA run with check.callback enabled.

commit 9e53e04
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:04:51 2020 +1000
qa/1190: rework for performance improvement

With a couple of small tweaks, reduce the running time from 3.5s
to 0.4s (x9 improvement).

commit f93b6f3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:02:49 2020 +1000
qa/920: refactor during systemd investigations

This one was a hard failure on bozo (Ubuntu 20.04) ... while
trying to fix the real problem, reworked this test to make it
(a) minimal with same functional coverage, and (b) robust.

commit 8b4ad27
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:47:46 2020 +1000
qa/623: filter changes after recent -VV changes to pmlogger_check

commit e972a9f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:46:47 2020 +1000
qa/430.out: remade after -VV changes to pmlogger_check

commit d24d4a7
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:44:58 2020 +1000
qa/119: remove pmmgr references

Just noticed this when trying to understand a qa failure.
No functional change for current releases.

commit e095837
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:41:55 2020 +1000
qa: umask changes

When we moved to running stuff as user pcp, we no longer controlled
the umask for anything run as
    $ sudo -u $PCP_USER ... <command>

These commits explicitly set the umask before running the <command>.

commit ddab058
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:37:12 2020 +1000
debian: roll debhelper compat version from 9 to 10

9 is now obsolete and not supported on some modern Debian-based
systems.

Current version is 12 (or 13), will get there one step at a time.

commit 6b31d25
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:34:49 2020 +1000
Makepkgs & qa/admin/myconfigure: fix botch in last commit for Ubuntu 20.04

Two CS-101 mistakes in 4 lines of code!  And duplicated by cut-n-paste.

commit 48bbaa1
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:33:09 2020 +1000
qa/1200: (new) exercise _wait_for_pmcd() variant in pmlogger_check

commit 5d65a60
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:25:50 2020 +1000
src/pmlogger/pmlogger_daily.sh: similar changes to pmlogger_check.sh

Most of these were not a problem (this script is not subject to systemd
storms as far as we know), but the changes seem to be for the better.

- log written /var/log/pcp/pmlogger/pmlogger_daily.log.<pid> to avoid
  name collisions when multiple instances are running (note the exiting
  locking mechanism controls concurrent execution safety, this change just
  avoids trashing the log file

- add Start: and End: lines with nanosecond resolution (when -VV used) to
  help debug pmlogger_check ""storms"", e.g. from systemd

- add process tree dump to show where we've been called from (when -VV
  used) to help debug how systemd's screwing us about

- when SaveLogs is in play, change the saved filename pattern to include
        %S (seconds) and the <pid>, to avoid name collisions

- cleanup the lock/unlock code to use absolute pathnames (rather than a
  mix of absolute and relative pathnames) ... no functional change, but
  the code is easier to read

- with -VV don't report comment lines and empty lines from the control
  file(s)

commit 3a68366
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:23:08 2020 +1000
src/pmlogger/pmlogger.service.in: change ancillary services from After to Before

We want pmlogger.service running before pmlogger_check.service, for example.

commit 0b3b4d4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:19:43 2020 +1000
src/pmlogger/pmlogger_check.service.in: add --skip-primary arg to pmlogger_check

We MUST not dink with the primary logger from the systemd pmlogger_check
service ... that is done over in the systemd pmlogger service.

commit 460b7ac
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:04:46 2020 +1000
src/pmlogger/rc_pmlogger: use --quick to pmlogger_check

When starting pmlogger(s) from the init script we really do NOT want to
do compression, the goal is to get at least the primary pmlogger running
as quickly as possible.

Also removed a confusing comment (nothing is run in the background here)
and removed some dead code.

commit 80639d0
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 15:44:51 2020 +1000
pmlogger_check.sh: major overhaul (diags and systemd fixups)

- log written /var/log/pcp/pmlogger/pmlogger_check.log.<pid> to avoid
  name collisions when multiple instances are running (note the exiting
  locking mechanism controls concurrent execution safety, this change just
  avoids trashing the log file

- add Start: and End: lines with nanosecond resolution (when -VV used) to
  help debug pmlogger_check ""storms"", e.g. from systemd

- add process tree dump to show where we've been called from (when -VV
  used) to help debug how systemd's screwing us about

- add -p/--skip-primary command line option to ignore any control lines
  relating to the primary logger (this is critical to making pmlogger_check
  work with systemd, where the primary logger is managed solely by the
  pmlogger service, and the pmlogger_check service looks after any other
  pmloggers

- add -q/--quick command line option to skip any file compression

- when SaveLogs is in play, change the saved filename pattern to include
  %S (seconds) and the <pid>, to avoid name collisions

- cleanup the lock/unlock code to use absolute pathnames (rather than a
  mix of absolute and relative pathnames) ... no functional change, but
  the code is easier to read

- add a variant of _wait_for_pmcd() (from qa) and use this to make sure
  pmcd is present before starting the primary pmlogger

- with -VV don't report comment lines and empty lines from the control
  file(s)

- add -VV diagnostics for some conditions that were not being reported,
  like acquiring the lock file, missing /var/lib/pcp/tmp/pmlogger/primary
  being the reason for starting the primary pmlogger, etc.

Script changes and man page changes in this commit.
  %Y%m%d.%H.%M.%S","On 16 June 2020 4:11:49 pm Mark Goodwin ***@***.***> wrote:
 Hi Ken,

 are you seeing any failures with the new qa/1200 test on systems with a
 primary and at least one other remote logger configured? The test runs for
 ages (like 10 mins) and then fails

 ```
Not seen by me Mark.  But it is a brand new test.  I'll investigate.
Thanks for the triage.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,946,2020-06-15T22:34:44Z,2020-06-18T01:35:28Z,2020-08-18T21:33:30Z,MERGED,True,1018,360,59,https://github.com/kmcdonell,"pmlogger_check-with-systemd, Debian build, qa, misc",28,[],https://github.com/performancecopilot/pcp/pull/946,https://github.com/kmcdonell,4,https://github.com/performancecopilot/pcp/pull/946#issuecomment-644602278,"Changes committed to git@github.com:kmcdonell/pcp.git 20200613
Ken McDonell (21):
pmlogger_check.sh: major overhaul (diags and systemd fixups)
src/pmlogger/rc_pmlogger: use --quick to pmlogger_check
src/pmlogger/pmlogger_check.service.in: add --skip-primary arg to pmlogger_check
src/pmlogger/pmlogger.service.in: change ancillary services from After to Before
src/pmlogger/pmlogger_daily.sh: similar changes to pmlogger_check.sh
qa/1200: (new) exercise _wait_for_pmcd() variant in pmlogger_check
Makepkgs & qa/admin/myconfigure: fix botch in last commit for Ubuntu 20.04
debian: roll debhelper compat version from 9 to 10
qa: umask changes
qa/119: remove pmmgr references
qa/430.out: remade after -VV changes to pmlogger_check
qa/623: filter changes after recent -VV changes to pmlogger_check
qa/920: refactor during systemd investigations
qa/1190: rework for performance improvement
qa/check.callback.sample: performance improvements
qa/008: deal with non-determinism in disk indom
qa/008: add qualified output for host bozo-vm
qa/365: another aliased error message
qa/589: another aliased error message
qa: tweak filter for pmlogger_daily tests
qa/1388: add Note about FQDN
Makepkgs                               |    6
debian/compat                          |    2
debian/rules                           |    4
man/man1/pmlogger_check.1              |   22 +++
qa/008                                 |    3
qa/008.helper                          |   49 +++++++
qa/008.out.Colleens-iMac               |   14 +-
qa/008.out.bozo                        |   58 ++++-----
qa/008.out.bozo+cd                     |   68 +++++-----
qa/008.out.bozo-laptop                 |   14 +-
qa/008.out.canary                      |   38 +++---
qa/008.out.comma                       |   14 +-
qa/008.out.kenj-pc                     |   28 ++--
qa/008.out.kmcdonell-laptop            |   14 +-
qa/008.out.ppp-kenmcd                  |   28 ++--
qa/008.out.shard                       |   14 +-
qa/008.out.slick                       |   14 +-
qa/008.out.smash                       |   28 ++--
qa/119                                 |   12 -
qa/1190                                |   23 +--
qa/1190.out                            |    1
qa/1200                                |  125 +++++++++++++++++++
qa/1200.out                            |    9 +
qa/1388                                |    6
qa/151                                 |    5
qa/280                                 |   10 -
qa/338                                 |    2
qa/365                                 |    1
qa/430                                 |   16 ++
qa/430.out                             |  207 ++++++++++++++++++++++-----------
qa/503                                 |   16 +-
qa/530                                 |    8 -
qa/532                                 |    4
qa/564                                 |    3
qa/589                                 |    1
qa/623                                 |    2
qa/641                                 |    4
qa/658                                 |    4
qa/664                                 |    4
qa/679                                 |    2
qa/686                                 |    2
qa/793                                 |    2
qa/920                                 |   20 ++-
qa/925                                 |    5
qa/929                                 |    3
qa/admin/myconfigure                   |    6
qa/check.callback.sample               |    2
qa/group                               |    1
src/pmlogger/pmlogger.service.in       |    2
src/pmlogger/pmlogger_check.service.in |    2
src/pmlogger/pmlogger_check.sh         |  154 ++++++++++++++++++++----
src/pmlogger/pmlogger_daily.sh         |   60 ++++++---
src/pmlogger/rc_pmlogger               |    6
53 files changed, 797 insertions(+), 351 deletions(-)
Details ...
commit 36cd554
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 08:32:00 2020 +1000
qa/1388: add Note about FQDN

This test will fail if hostname(1) does not return a FQDN.

commit 04f693c
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 06:49:14 2020 +1000
qa: tweak filter for pmlogger_daily tests

Depending on the alignment of the planets, /var/log/pcp/NOTICES
can get rotated during this test, and the associated output is not
generally expected.

Filter it out in a consistent manner across all of the tests that
exercise pmlogger_daily.

commit 8401600
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 16 06:38:42 2020 +1000
qa/589: another aliased error message

This time on Ubuntu 20.04 we're seeing ""Unknown server error"".

commit 19a2393
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:49:14 2020 +1000
qa/365: another aliased error message

This time on Ubuntu 20.04 we're seeing ""Unknown server error"".

commit b4360b0
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:43:20 2020 +1000
qa/008: add qualified output for host bozo-vm

commit 240e3b2
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 21:38:36 2020 +1000
qa/008: deal with non-determinism in disk indom

O/S upgrades, h/w reconfigs and reboots can all make this test fail.
Remove the dependence on the disk discovery order that drives a fresh
indom instantiation.

commit a6867f4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:06:00 2020 +1000
qa/check.callback.sample: performance improvements

With some tweaks here, and the improvements in qa/1190 the
running time was reduce from 4.6s to 0.9s (x5 improvement).

This is important because it shaves O(1300) x 3.7s = one and half
HOURS off a full QA run with check.callback enabled.

commit 9e53e04
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:04:51 2020 +1000
qa/1190: rework for performance improvement

With a couple of small tweaks, reduce the running time from 3.5s
to 0.4s (x9 improvement).

commit f93b6f3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 17:02:49 2020 +1000
qa/920: refactor during systemd investigations

This one was a hard failure on bozo (Ubuntu 20.04) ... while
trying to fix the real problem, reworked this test to make it
(a) minimal with same functional coverage, and (b) robust.

commit 8b4ad27
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:47:46 2020 +1000
qa/623: filter changes after recent -VV changes to pmlogger_check

commit e972a9f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:46:47 2020 +1000
qa/430.out: remade after -VV changes to pmlogger_check

commit d24d4a7
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:44:58 2020 +1000
qa/119: remove pmmgr references

Just noticed this when trying to understand a qa failure.
No functional change for current releases.

commit e095837
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:41:55 2020 +1000
qa: umask changes

When we moved to running stuff as user pcp, we no longer controlled
the umask for anything run as
    $ sudo -u $PCP_USER ... <command>

These commits explicitly set the umask before running the <command>.

commit ddab058
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:37:12 2020 +1000
debian: roll debhelper compat version from 9 to 10

9 is now obsolete and not supported on some modern Debian-based
systems.

Current version is 12 (or 13), will get there one step at a time.

commit 6b31d25
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:34:49 2020 +1000
Makepkgs & qa/admin/myconfigure: fix botch in last commit for Ubuntu 20.04

Two CS-101 mistakes in 4 lines of code!  And duplicated by cut-n-paste.

commit 48bbaa1
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:33:09 2020 +1000
qa/1200: (new) exercise _wait_for_pmcd() variant in pmlogger_check

commit 5d65a60
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:25:50 2020 +1000
src/pmlogger/pmlogger_daily.sh: similar changes to pmlogger_check.sh

Most of these were not a problem (this script is not subject to systemd
storms as far as we know), but the changes seem to be for the better.

- log written /var/log/pcp/pmlogger/pmlogger_daily.log.<pid> to avoid
  name collisions when multiple instances are running (note the exiting
  locking mechanism controls concurrent execution safety, this change just
  avoids trashing the log file

- add Start: and End: lines with nanosecond resolution (when -VV used) to
  help debug pmlogger_check ""storms"", e.g. from systemd

- add process tree dump to show where we've been called from (when -VV
  used) to help debug how systemd's screwing us about

- when SaveLogs is in play, change the saved filename pattern to include
        %S (seconds) and the <pid>, to avoid name collisions

- cleanup the lock/unlock code to use absolute pathnames (rather than a
  mix of absolute and relative pathnames) ... no functional change, but
  the code is easier to read

- with -VV don't report comment lines and empty lines from the control
  file(s)

commit 3a68366
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:23:08 2020 +1000
src/pmlogger/pmlogger.service.in: change ancillary services from After to Before

We want pmlogger.service running before pmlogger_check.service, for example.

commit 0b3b4d4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:19:43 2020 +1000
src/pmlogger/pmlogger_check.service.in: add --skip-primary arg to pmlogger_check

We MUST not dink with the primary logger from the systemd pmlogger_check
service ... that is done over in the systemd pmlogger service.

commit 460b7ac
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 16:04:46 2020 +1000
src/pmlogger/rc_pmlogger: use --quick to pmlogger_check

When starting pmlogger(s) from the init script we really do NOT want to
do compression, the goal is to get at least the primary pmlogger running
as quickly as possible.

Also removed a confusing comment (nothing is run in the background here)
and removed some dead code.

commit 80639d0
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jun 15 15:44:51 2020 +1000
pmlogger_check.sh: major overhaul (diags and systemd fixups)

- log written /var/log/pcp/pmlogger/pmlogger_check.log.<pid> to avoid
  name collisions when multiple instances are running (note the exiting
  locking mechanism controls concurrent execution safety, this change just
  avoids trashing the log file

- add Start: and End: lines with nanosecond resolution (when -VV used) to
  help debug pmlogger_check ""storms"", e.g. from systemd

- add process tree dump to show where we've been called from (when -VV
  used) to help debug how systemd's screwing us about

- add -p/--skip-primary command line option to ignore any control lines
  relating to the primary logger (this is critical to making pmlogger_check
  work with systemd, where the primary logger is managed solely by the
  pmlogger service, and the pmlogger_check service looks after any other
  pmloggers

- add -q/--quick command line option to skip any file compression

- when SaveLogs is in play, change the saved filename pattern to include
  %S (seconds) and the <pid>, to avoid name collisions

- cleanup the lock/unlock code to use absolute pathnames (rather than a
  mix of absolute and relative pathnames) ... no functional change, but
  the code is easier to read

- add a variant of _wait_for_pmcd() (from qa) and use this to make sure
  pmcd is present before starting the primary pmlogger

- with -VV don't report comment lines and empty lines from the control
  file(s)

- add -VV diagnostics for some conditions that were not being reported,
  like acquiring the lock file, missing /var/lib/pcp/tmp/pmlogger/primary
  being the reason for starting the primary pmlogger, etc.

Script changes and man page changes in this commit.
  %Y%m%d.%H.%M.%S","On 16/6/20 5:14 pm, Ken McDonell wrote:
 On 16 June 2020 4:11:49 pm Mark Goodwin ***@***.***> wrote:
 ...
 Not seen by me Mark.  But it is a brand new test.  I'll investigate.
 Thanks for the triage.
Found the problem ... it is in the (new) _wait_for_pmcd() in
pmlogger_check (this test is the only one that would exercise this in
normal operations) ... calling exit there is really bad ... leaves the
lock file, as you found.

Fix is simple.  Given low risk to anyone else, I'll wait until tomorrow
to push the fix and some qa changes to increase the coverage.

Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,947,2020-06-19T13:20:44Z,2020-06-22T01:53:21Z,2020-06-22T01:53:21Z,MERGED,True,1,0,1,https://github.com/kurik,fix of incomplete initialization of __pmHashCtl struct of F_REGEX node,1,[],https://github.com/performancecopilot/pcp/pull/947,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/947,"This is a follow up of f8b0886 commit.
The commit above delivered initialization of hash structure for a node. Unfortunately
hsize field was not set during the initialization. The unset hsize is causing intermittent
crashes of pminfo when the hash table is walked through.
This fix delivers initialization of the hsize field.","This is a follow up of f8b0886 commit.
The commit above delivered initialization of hash structure for a node. Unfortunately
hsize field was not set during the initialization. The unset hsize is causing intermittent
crashes of pminfo when the hash table is walked through.
This fix delivers initialization of the hsize field.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,948,2020-06-22T15:45:14Z,2020-06-30T00:15:12Z,2020-06-30T00:15:12Z,MERGED,True,0,0,1,https://github.com/ragasirtahk,Rename README to README.md,1,[],https://github.com/performancecopilot/pcp/pull/948,https://github.com/ragasirtahk,1,https://github.com/performancecopilot/pcp/pull/948,Just to make it render on GitHub :),Just to make it render on GitHub :),True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,949,2020-06-22T19:18:48Z,2020-06-23T10:44:46Z,2020-06-23T10:44:46Z,MERGED,True,6,6,1,https://github.com/Erbenos,pmdastatsd: fixed an issue that could cause memory leak when parsing invalid datagrams using 'basic' parser,1,[],https://github.com/performancecopilot/pcp/pull/949,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/949,Incorrectly checking/setting variable used as bit map could cause memory leak.,Incorrectly checking/setting variable used as bit map could cause memory leak.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,951,2020-06-28T02:22:04Z,2020-06-29T04:16:37Z,2020-06-29T04:16:56Z,MERGED,True,3606,72,31,https://github.com/kmcdonell,pmlogctl,28,[],https://github.com/performancecopilot/pcp/pull/951,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/951,"Changes committed to git@github.com:kmcdonell/pcp.git 20200620
Ken McDonell (26):
src/pmlogger/pmlogger_daily.sh: small change in output order
src/pmlogctl: (new) experimental pmlogger control utility
pmlogger_check.sh: fix botch if /SaveLogs exists
src/pmlogctl/pmlogctl.sh: updates
pmlogctl.sh: move some diags from -v to -vv control
src/pmlogctl/pmlogctl.sh: refactor
qa/1204: (new) pmlogctl basic functionaity tests
src/pmlogctl/pmlogctl.sh: next round of development
qa: (new) tests for pmlogctl
src/pmlogger/utilproc.sh: make _save_prev_file() less chatty
src/pmlogctl/pmlogctl: some more refinements
src/pmlogctl/pmlogctl.sh: next round of changes
qa/1206 & 1208: remade after recent pmlogctl changes
qa/1209: fix after message text change in pmlogctl
qa/1210 & 1213: (new) check _warning and _error messages from pmlogctl
man/man1/pmlogctl.1: initial man page
src/GNUmakefile: add pmlogctl into the build
src/pmlogctl/pmlogctl.sh: small changes
src/pmlogctl/pmlogctl.sh: fix status localhost => wrong error message
qa/1215: (new) pmlogctl - stop does not stop a running pmlogger cases
qa pmlogctl: track latest changes to pmlogctl
man/man1/pmlogctl.1: typos and add a sample policy file
src/pmlogctl/pmlogctl.sh: rework the primary logger check
qa: changes after pmlogctl rework
src/pmlogctl/pmlogctl.sh: final fixes for initial release
qa: changes to match latest pmlogctl updates
man/man1/pmlogctl.1            |  478 ++++++++
qa/1204                        |  161 ++-
qa/1204.out                    |   57 +
qa/1205                        |  116 ++
qa/1205.out                    |   40
qa/1206                        |  125 ++
qa/1206.out                    |   66 +
qa/1208                        |  111 ++
qa/1208.out                    |   36
qa/1209                        |  134 ++
qa/1209.out                    |   34
qa/1210                        |  160 ++
qa/1210.out                    |   91 +
qa/1213                        |  353 ++++++
qa/1213.out                    |  197 +++
qa/1215                        |  114 ++
qa/1215.out                    |   24
qa/564.out                     |    4
qa/679.out                     |   12
qa/781.out                     |    6
qa/925.out                     |    4
qa/929.out                     |    8
qa/group                       |   11
src/GNUmakefile                |    1
src/pmlogctl/GNUmakefile       |   30
src/pmlogctl/pmlogctl.sh       | 2188 ++++++++++++++++++++++++++++++-----------
src/pmlogger/pmlogger_check.sh |   21
src/pmlogger/pmlogger_daily.sh |   26
src/pmlogger/utilproc.sh       |   46
29 files changed, 3949 insertions(+), 705 deletions(-)
Details ...
commit 7c8fcd4
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jun 28 12:19:53 2020 +1000
qa: changes to match latest pmlogctl updates

commit 08c12b2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jun 28 12:17:20 2020 +1000
src/pmlogctl/pmlogctl.sh: final fixes for initial release

- don't update control files if there is no change
- skip disable control file changes for stop in restart operation
- fix bug in _do_stop for LOCALHOSTNAME entries
- small changes to message text

commit f42812c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 20:00:52 2020 +1000
qa: changes after pmlogctl rework

commit e45b10d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 19:59:53 2020 +1000
src/pmlogctl/pmlogctl.sh: rework the primary logger check

commit 66a50ac
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 10:56:16 2020 +1000
man/man1/pmlogctl.1: typos and add a sample policy file

commit 9e2b0e0
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 07:54:31 2020 +1000
qa pmlogctl: track latest changes to pmlogctl

commit 96b216c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 07:53:47 2020 +1000
qa/1215: (new) pmlogctl - stop does not stop a running pmlogger cases

commit 26b2bf3
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 07:51:29 2020 +1000
src/pmlogctl/pmlogctl.sh: fix status localhost => wrong error message

Earlier rearrangement of checks in the mainline broke this one
corner case, found by qa/1204.

commit 036fd99
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 07:42:47 2020 +1000
src/pmlogctl/pmlogctl.sh: small changes

- error/warning cleanup as a result of qa testing
- add QA-only hook to _not_ kill a pmlogger (to test some error
  code paths)

commit 3119348
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 07:41:51 2020 +1000
src/GNUmakefile: add pmlogctl into the build

commit 960eb0b
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 07:40:35 2020 +1000
man/man1/pmlogctl.1: initial man page

commit 2d10027
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jun 26 09:49:16 2020 +1000
qa/1210 & 1213: (new) check _warning and _error messages from pmlogctl

commit 3f8b657
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jun 26 09:48:07 2020 +1000
qa/1209: fix after message text change in pmlogctl

commit 0b99461
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jun 26 09:47:28 2020 +1000
qa/1206 & 1208: remade after recent pmlogctl changes

commit e8aec0c
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jun 26 09:02:55 2020 +1000
src/pmlogctl/pmlogctl.sh: next round of changes

Most of this is qa-driven, rather than functional change

- check for bad name: section in class polify file ... should be one
  word (used to name the control file in control.d)
- use LC_COLLATE=POSIX with sort throughout
- reword some warning and error messages to improve clarity and consistency
- rework warning and error message logic to reduce repeated reporting
  for same issue, and to abandon work when proceeding is doomed
- ensure details for dead loggers reported in the correct place for the
  -v status command
- tougher consistency checking of existing and potential control lines

commit 16a39ae
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jun 25 13:21:17 2020 +1000
src/pmlogctl/pmlogctl: some more refinements

1. Change the standard class ""policy"" dir from policy.d to class.d (in
   /etc/pcp/pmlogger) ... seems more natural
2. Discover that grep -r and grep -Z are not supported on FreeBSD, so
   use an _egrep() wrapper.  The -Z or equivalent is required when I
   started to test with local: and the grep -r output looks like:
   .../control.d/local::local: n n ...
   _egrep() produces this output, by comparison:
   .../control.d/local:|local: n n ...
   and is much easier to pick apart.
3. Cleaning up some of the error/warning messages and logic as I'm working
   through associated qa tests to exercise all of this.

commit 7fbd2d7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jun 24 15:52:15 2020 +1000
src/pmlogger/utilproc.sh: make _save_prev_file() less chatty

This helper function is intended to save <somefile> to <somefile>.prev.

It is used in the pm*_check and pm*_daily scripts for their diagnostic
log files.

But there is no locking in place, so we're exposed to race conditions.
It does not really matter (locking would be overkill) because if the
same script is being run often enough to hit the race window then the
contents of <somefile> and <somefile>.prev are like buying a ticket
in the lottery (you're clueless and have no chance of winning).

This commit silences _save_prev_file() when rm or cp fail, which is
a possible result of the race.

It has become more visible because pmlogctl is able to launch
pmlogger_check much faster than it was launced in the past, at least
in the qa tests.

commit 3b43338
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jun 24 14:49:23 2020 +1000
qa: (new) tests for pmlogctl

1204 - basics
1205 - status variants
1206 - stop & start variants
1208 - restart variants
1209 - destroy variants

Still to come are all the error path coverage cases.

commit 86a173c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jun 24 14:35:57 2020 +1000
src/pmlogctl/pmlogctl.sh: next round of development

- block all control for the primary logger from here (use systemctl or
  the init scripts)
- no locking for ""status"" command (not needed)
- no locking for -n (SHOWME) use
- tidy up some user-visible messages ... mostly removing ""'s that were
  making the messages look more confusing than needs be
- add start and stop checks that are used after ""stop"", ""start"", ""restart""
  and ""create""
- dodge systemctl reporting ""activating"" instead of ""active""
- better matching of the archive ""directory"" to avoid any false match
  on unique paths that might be a prefix for one another (most unlikely
  in practice, but if it did happen, god help the poor person trying to
  triage it)
- use awk not sed to edit control files (it is easier to do field-by-field
  matching)
- some variable renaming to distinguish ""host"" and ""directory"" values
  between the names than may contain symbolic variables in the control
  files and the real names used by the running instances and the PCP_TMP_DIR
  state files ... $host and $dir are the former, and $args_host and
  $args_dir are the latter (note the $tmp/args file that drives most of
  the work is using the real names)

commit d42de8f
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 23 08:08:50 2020 +1000
qa/1204: (new) pmlogctl basic functionaity tests

Plus new pmlogctl qa group.

commit c591dc5
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 23 07:10:12 2020 +1000
src/pmlogctl/pmlogctl.sh: refactor

Major restructure to support pmlogger instance enumeration by:
    -c <class> => all hosts in the class, or
    hostname ... => just those hosts (all classes), or
    -c <class> hostname ... => intersecton of the named hosts and the class

Add -a flag to apply action to all instances (in some cases we're expecting
the instance enumeration to yield a single host to avoid surprises), -a
allows the action for multiple instances.

Add -f flag to force the action.  In some cases, there are checks to
prevent dangerous actions, e.g. destroy when there is no policy file
to match the class, so the ""destroy:"" policy is not known.  -f aims
large calibre weapon at foot.

Miscellaneous fixups, additional checks, tweaks to -v and -vv diags.

commit 08e057f
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 20 07:56:21 2020 +1000
pmlogctl.sh: move some diags from -v to -vv control

commit bb410e5
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 20 07:45:07 2020 +1000
src/pmlogctl/pmlogctl.sh: updates

- TODO list
- restart command
- minor fix ups

commit 9d34041
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 20 07:22:14 2020 +1000
pmlogger_check.sh: fix botch if <hostname>/SaveLogs exists

Commit f4887081 accidentally removed the initialization of $mylogname
... in review the initialization was NQR, so fix it!

The scope of this in real terms is minimal, as only someone desperate
to debug a pmlogger farm would have created the ...<hostname>/SaveLogs
directory in the first place and without this directory existing the
bugs are benign.

commit f948fdb
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 20 06:59:48 2020 +1000
src/pmlogctl: (new) experimental pmlogger control utility

Intended for managing farms of non-primary pmloggers, this is a
proof of concept implementation.

Intial version as of the first design/discussion conference call
(plus mutex locking).

commit 69725e2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 20 06:49:30 2020 +1000
src/pmlogger/pmlogger_daily.sh: small change in output order

Just make sure the banner comes before any messages associated with
the associated pmlogger instance.  No functional change here.

Some qa tests had to be remade as a consequence.","Changes committed to git@github.com:kmcdonell/pcp.git 20200620
Ken McDonell (26):
src/pmlogger/pmlogger_daily.sh: small change in output order
src/pmlogctl: (new) experimental pmlogger control utility
pmlogger_check.sh: fix botch if /SaveLogs exists
src/pmlogctl/pmlogctl.sh: updates
pmlogctl.sh: move some diags from -v to -vv control
src/pmlogctl/pmlogctl.sh: refactor
qa/1204: (new) pmlogctl basic functionaity tests
src/pmlogctl/pmlogctl.sh: next round of development
qa: (new) tests for pmlogctl
src/pmlogger/utilproc.sh: make _save_prev_file() less chatty
src/pmlogctl/pmlogctl: some more refinements
src/pmlogctl/pmlogctl.sh: next round of changes
qa/1206 & 1208: remade after recent pmlogctl changes
qa/1209: fix after message text change in pmlogctl
qa/1210 & 1213: (new) check _warning and _error messages from pmlogctl
man/man1/pmlogctl.1: initial man page
src/GNUmakefile: add pmlogctl into the build
src/pmlogctl/pmlogctl.sh: small changes
src/pmlogctl/pmlogctl.sh: fix status localhost => wrong error message
qa/1215: (new) pmlogctl - stop does not stop a running pmlogger cases
qa pmlogctl: track latest changes to pmlogctl
man/man1/pmlogctl.1: typos and add a sample policy file
src/pmlogctl/pmlogctl.sh: rework the primary logger check
qa: changes after pmlogctl rework
src/pmlogctl/pmlogctl.sh: final fixes for initial release
qa: changes to match latest pmlogctl updates
man/man1/pmlogctl.1            |  478 ++++++++
qa/1204                        |  161 ++-
qa/1204.out                    |   57 +
qa/1205                        |  116 ++
qa/1205.out                    |   40
qa/1206                        |  125 ++
qa/1206.out                    |   66 +
qa/1208                        |  111 ++
qa/1208.out                    |   36
qa/1209                        |  134 ++
qa/1209.out                    |   34
qa/1210                        |  160 ++
qa/1210.out                    |   91 +
qa/1213                        |  353 ++++++
qa/1213.out                    |  197 +++
qa/1215                        |  114 ++
qa/1215.out                    |   24
qa/564.out                     |    4
qa/679.out                     |   12
qa/781.out                     |    6
qa/925.out                     |    4
qa/929.out                     |    8
qa/group                       |   11
src/GNUmakefile                |    1
src/pmlogctl/GNUmakefile       |   30
src/pmlogctl/pmlogctl.sh       | 2188 ++++++++++++++++++++++++++++++-----------
src/pmlogger/pmlogger_check.sh |   21
src/pmlogger/pmlogger_daily.sh |   26
src/pmlogger/utilproc.sh       |   46
29 files changed, 3949 insertions(+), 705 deletions(-)
Details ...
commit 7c8fcd4
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jun 28 12:19:53 2020 +1000
qa: changes to match latest pmlogctl updates

commit 08c12b2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jun 28 12:17:20 2020 +1000
src/pmlogctl/pmlogctl.sh: final fixes for initial release

- don't update control files if there is no change
- skip disable control file changes for stop in restart operation
- fix bug in _do_stop for LOCALHOSTNAME entries
- small changes to message text

commit f42812c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 20:00:52 2020 +1000
qa: changes after pmlogctl rework

commit e45b10d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 19:59:53 2020 +1000
src/pmlogctl/pmlogctl.sh: rework the primary logger check

commit 66a50ac
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 10:56:16 2020 +1000
man/man1/pmlogctl.1: typos and add a sample policy file

commit 9e2b0e0
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 07:54:31 2020 +1000
qa pmlogctl: track latest changes to pmlogctl

commit 96b216c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 07:53:47 2020 +1000
qa/1215: (new) pmlogctl - stop does not stop a running pmlogger cases

commit 26b2bf3
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 07:51:29 2020 +1000
src/pmlogctl/pmlogctl.sh: fix status localhost => wrong error message

Earlier rearrangement of checks in the mainline broke this one
corner case, found by qa/1204.

commit 036fd99
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 07:42:47 2020 +1000
src/pmlogctl/pmlogctl.sh: small changes

- error/warning cleanup as a result of qa testing
- add QA-only hook to _not_ kill a pmlogger (to test some error
  code paths)

commit 3119348
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 07:41:51 2020 +1000
src/GNUmakefile: add pmlogctl into the build

commit 960eb0b
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 27 07:40:35 2020 +1000
man/man1/pmlogctl.1: initial man page

commit 2d10027
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jun 26 09:49:16 2020 +1000
qa/1210 & 1213: (new) check _warning and _error messages from pmlogctl

commit 3f8b657
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jun 26 09:48:07 2020 +1000
qa/1209: fix after message text change in pmlogctl

commit 0b99461
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jun 26 09:47:28 2020 +1000
qa/1206 & 1208: remade after recent pmlogctl changes

commit e8aec0c
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jun 26 09:02:55 2020 +1000
src/pmlogctl/pmlogctl.sh: next round of changes

Most of this is qa-driven, rather than functional change

- check for bad name: section in class polify file ... should be one
  word (used to name the control file in control.d)
- use LC_COLLATE=POSIX with sort throughout
- reword some warning and error messages to improve clarity and consistency
- rework warning and error message logic to reduce repeated reporting
  for same issue, and to abandon work when proceeding is doomed
- ensure details for dead loggers reported in the correct place for the
  -v status command
- tougher consistency checking of existing and potential control lines

commit 16a39ae
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jun 25 13:21:17 2020 +1000
src/pmlogctl/pmlogctl: some more refinements

1. Change the standard class ""policy"" dir from policy.d to class.d (in
   /etc/pcp/pmlogger) ... seems more natural
2. Discover that grep -r and grep -Z are not supported on FreeBSD, so
   use an _egrep() wrapper.  The -Z or equivalent is required when I
   started to test with local: and the grep -r output looks like:
   .../control.d/local::local: n n ...
   _egrep() produces this output, by comparison:
   .../control.d/local:|local: n n ...
   and is much easier to pick apart.
3. Cleaning up some of the error/warning messages and logic as I'm working
   through associated qa tests to exercise all of this.

commit 7fbd2d7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jun 24 15:52:15 2020 +1000
src/pmlogger/utilproc.sh: make _save_prev_file() less chatty

This helper function is intended to save <somefile> to <somefile>.prev.

It is used in the pm*_check and pm*_daily scripts for their diagnostic
log files.

But there is no locking in place, so we're exposed to race conditions.
It does not really matter (locking would be overkill) because if the
same script is being run often enough to hit the race window then the
contents of <somefile> and <somefile>.prev are like buying a ticket
in the lottery (you're clueless and have no chance of winning).

This commit silences _save_prev_file() when rm or cp fail, which is
a possible result of the race.

It has become more visible because pmlogctl is able to launch
pmlogger_check much faster than it was launced in the past, at least
in the qa tests.

commit 3b43338
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jun 24 14:49:23 2020 +1000
qa: (new) tests for pmlogctl

1204 - basics
1205 - status variants
1206 - stop & start variants
1208 - restart variants
1209 - destroy variants

Still to come are all the error path coverage cases.

commit 86a173c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jun 24 14:35:57 2020 +1000
src/pmlogctl/pmlogctl.sh: next round of development

- block all control for the primary logger from here (use systemctl or
  the init scripts)
- no locking for ""status"" command (not needed)
- no locking for -n (SHOWME) use
- tidy up some user-visible messages ... mostly removing ""'s that were
  making the messages look more confusing than needs be
- add start and stop checks that are used after ""stop"", ""start"", ""restart""
  and ""create""
- dodge systemctl reporting ""activating"" instead of ""active""
- better matching of the archive ""directory"" to avoid any false match
  on unique paths that might be a prefix for one another (most unlikely
  in practice, but if it did happen, god help the poor person trying to
  triage it)
- use awk not sed to edit control files (it is easier to do field-by-field
  matching)
- some variable renaming to distinguish ""host"" and ""directory"" values
  between the names than may contain symbolic variables in the control
  files and the real names used by the running instances and the PCP_TMP_DIR
  state files ... $host and $dir are the former, and $args_host and
  $args_dir are the latter (note the $tmp/args file that drives most of
  the work is using the real names)

commit d42de8f
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 23 08:08:50 2020 +1000
qa/1204: (new) pmlogctl basic functionaity tests

Plus new pmlogctl qa group.

commit c591dc5
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jun 23 07:10:12 2020 +1000
src/pmlogctl/pmlogctl.sh: refactor

Major restructure to support pmlogger instance enumeration by:
    -c <class> => all hosts in the class, or
    hostname ... => just those hosts (all classes), or
    -c <class> hostname ... => intersecton of the named hosts and the class

Add -a flag to apply action to all instances (in some cases we're expecting
the instance enumeration to yield a single host to avoid surprises), -a
allows the action for multiple instances.

Add -f flag to force the action.  In some cases, there are checks to
prevent dangerous actions, e.g. destroy when there is no policy file
to match the class, so the ""destroy:"" policy is not known.  -f aims
large calibre weapon at foot.

Miscellaneous fixups, additional checks, tweaks to -v and -vv diags.

commit 08e057f
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 20 07:56:21 2020 +1000
pmlogctl.sh: move some diags from -v to -vv control

commit bb410e5
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 20 07:45:07 2020 +1000
src/pmlogctl/pmlogctl.sh: updates

- TODO list
- restart command
- minor fix ups

commit 9d34041
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 20 07:22:14 2020 +1000
pmlogger_check.sh: fix botch if <hostname>/SaveLogs exists

Commit f4887081 accidentally removed the initialization of $mylogname
... in review the initialization was NQR, so fix it!

The scope of this in real terms is minimal, as only someone desperate
to debug a pmlogger farm would have created the ...<hostname>/SaveLogs
directory in the first place and without this directory existing the
bugs are benign.

commit f948fdb
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 20 06:59:48 2020 +1000
src/pmlogctl: (new) experimental pmlogger control utility

Intended for managing farms of non-primary pmloggers, this is a
proof of concept implementation.

Intial version as of the first design/discussion conference call
(plus mutex locking).

commit 69725e2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jun 20 06:49:30 2020 +1000
src/pmlogger/pmlogger_daily.sh: small change in output order

Just make sure the banner comes before any messages associated with
the associated pmlogger instance.  No functional change here.

Some qa tests had to be remade as a consequence.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,953,2020-07-01T06:32:32Z,2020-07-03T01:50:24Z,2020-07-03T01:50:24Z,MERGED,True,412,23,14,https://github.com/kmcdonell,small pmlogctl changes,5,[],https://github.com/performancecopilot/pcp/pull/953,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/953,"Changes committed to git@github.com:kmcdonell/pcp.git 20200701
Ken McDonell (5):
qa/1223: (new) pmlogctl tests with multile pmloggers per control file
qa/group: add 1204 to sanity, add 1223 (new)
qa/admin/pcp-daily: remove a couple of references to pmmgr
qa: pmlogctl tests - extend filter to remove any non-qa pmloggers
src/pmlogctl/pmlogctl.sh: more small changes
qa/1204                  |   13 +++
qa/1205                  |   13 +++
qa/1206                  |   13 +++
qa/1208                  |   13 +++
qa/1209                  |   13 +++
qa/1210                  |   13 +++
qa/1213                  |   13 +++
qa/1215                  |   13 +++
qa/1216                  |   13 +++
qa/1223                  |  160 +++++++++++++++++++++++++++++++++++++++++++++++
qa/1223.out              |   85 ++++++++++++++++++++++++
qa/admin/pcp-daily       |    4 -
qa/group                 |    3
src/pmlogctl/pmlogctl.sh |   66 +++++++++++++------
14 files changed, 412 insertions(+), 23 deletions(-)
Details ...
commit df2e8c7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:12:53 2020 +1000
src/pmlogctl/pmlogctl.sh: more small changes

- refine handling of primary pmlogger to reduce warning chatter in some
  cases
- add rudimentary pmlogger.log dredging for ""dead"" loggers with -v and
  status command
- cull TODO list (multiple pmloggers per control file ""just works""(tm))

commit 13f988c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:08:43 2020 +1000
qa: pmlogctl tests - extend filter to remove any non-qa pmloggers

If there are non-primary pmlogger instances running on the qa machines
(like I have), then these need to be excluded from the pmlogctl ""status""
output so the QA tests pass.

Use awk to create an awk program that is run in _filter_status().

commit aadb0f0
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:07:01 2020 +1000
qa/admin/pcp-daily: remove a couple of references to pmmgr

commit 426c188
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:06:16 2020 +1000
qa/group: add 1204 to sanity, add 1223 (new)

commit 22473e2
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:04:42 2020 +1000
qa/1223: (new) pmlogctl tests with multile pmloggers per control file

This covers the migration plan (none needed) for pre-existing control
files that might have multiple pmloggers specified within a single
file.","Changes committed to git@github.com:kmcdonell/pcp.git 20200701
Ken McDonell (5):
qa/1223: (new) pmlogctl tests with multile pmloggers per control file
qa/group: add 1204 to sanity, add 1223 (new)
qa/admin/pcp-daily: remove a couple of references to pmmgr
qa: pmlogctl tests - extend filter to remove any non-qa pmloggers
src/pmlogctl/pmlogctl.sh: more small changes
qa/1204                  |   13 +++
qa/1205                  |   13 +++
qa/1206                  |   13 +++
qa/1208                  |   13 +++
qa/1209                  |   13 +++
qa/1210                  |   13 +++
qa/1213                  |   13 +++
qa/1215                  |   13 +++
qa/1216                  |   13 +++
qa/1223                  |  160 +++++++++++++++++++++++++++++++++++++++++++++++
qa/1223.out              |   85 ++++++++++++++++++++++++
qa/admin/pcp-daily       |    4 -
qa/group                 |    3
src/pmlogctl/pmlogctl.sh |   66 +++++++++++++------
14 files changed, 412 insertions(+), 23 deletions(-)
Details ...
commit df2e8c7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:12:53 2020 +1000
src/pmlogctl/pmlogctl.sh: more small changes

- refine handling of primary pmlogger to reduce warning chatter in some
  cases
- add rudimentary pmlogger.log dredging for ""dead"" loggers with -v and
  status command
- cull TODO list (multiple pmloggers per control file ""just works""(tm))

commit 13f988c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:08:43 2020 +1000
qa: pmlogctl tests - extend filter to remove any non-qa pmloggers

If there are non-primary pmlogger instances running on the qa machines
(like I have), then these need to be excluded from the pmlogctl ""status""
output so the QA tests pass.

Use awk to create an awk program that is run in _filter_status().

commit aadb0f0
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:07:01 2020 +1000
qa/admin/pcp-daily: remove a couple of references to pmmgr

commit 426c188
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:06:16 2020 +1000
qa/group: add 1204 to sanity, add 1223 (new)

commit 22473e2
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:04:42 2020 +1000
qa/1223: (new) pmlogctl tests with multile pmloggers per control file

This covers the migration plan (none needed) for pre-existing control
files that might have multiple pmloggers specified within a single
file.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,954,2020-07-01T22:17:53Z,2020-07-03T06:58:12Z,2020-07-03T06:58:13Z,MERGED,True,331,0,7,https://github.com/not4win,"pmlogpaste: added manual, test files and source files",6,[],https://github.com/performancecopilot/pcp/pull/954,https://github.com/not4win,1,https://github.com/performancecopilot/pcp/pull/954,pmlogpaste takes a file and writes it to a metric in a new archive. Uses LOGIMPORT(3)in building up the archive.,pmlogpaste takes a file and writes it to a metric in a new archive. Uses LOGIMPORT(3)in building up the archive.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,955,2020-07-02T08:53:14Z,2020-07-03T02:35:26Z,2020-07-03T02:35:26Z,MERGED,True,1,3,1,https://github.com/Erbenos,"qa: updated manifest deps for pmdastatsd - removed old, now unused, deps for pmdastatsd",1,[],https://github.com/performancecopilot/pcp/pull/955,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/955,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,959,2020-07-03T10:09:00Z,2020-07-03T10:12:10Z,2020-08-18T21:33:38Z,MERGED,True,970,68,21,https://github.com/kmcdonell,pmiectl (new) and pmlogctl,5,[],https://github.com/performancecopilot/pcp/pull/959,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/959,"Changes committed to git@github.com:kmcdonell/pcp.git 20200701
Ken McDonell (10):
qa/1223: (new) pmlogctl tests with multile pmloggers per control file
qa/group: add 1204 to sanity, add 1223 (new)
qa/admin/pcp-daily: remove a couple of references to pmmgr
qa: pmlogctl tests - extend filter to remove any non-qa pmloggers
src/pmlogctl/pmlogctl.sh: more small changes
pmie_dump_stats: (new) helper to dump pmie stats files
src/pmlogctl: morph into pmlogctl and pmiectl
pmiectl: man page (smoke and mirrors)
qa: (new) 1226, 1228 and 1230 - tests for pmiectl
src/pmlogctl/pmiectl.sh: symlink, just for convenience
man/man1/.gitignore            |    1
man/man1/GNUmakefile           |    6
man/man1/mk.pmiectl            |   77 ++++++++++
man/man1/pmie_dump_stats.1     |   45 +++++
man/man1/pmlogctl.1            |    8 -
qa/1204                        |   15 +
qa/1205                        |   15 +
qa/1206                        |   13 +
qa/1208                        |   15 +
qa/1209                        |   13 +
qa/1210                        |   13 +
qa/1213                        |   13 +
qa/1215                        |   13 +
qa/1216                        |   13 +
qa/1223                        |  160 +++++++++++++++++++++
qa/1223.out                    |   85 +++++++++++
qa/1226                        |  133 +++++++++++++++++
qa/1226.out                    |   73 +++++++++
qa/1228                        |  132 +++++++++++++++++
qa/1228.out                    |   40 +++++
qa/1230                        |  128 ++++++++++++++++
qa/1230.out                    |   32 ++++
qa/admin/pcp-daily             |    4
qa/group                       |    9 +
src/pmie/control.local         |    2
src/pmie/src/GNUmakefile       |    9 -
src/pmie/src/pmie_dump_stats.c |   91 +++++++++++
src/pmlogctl/GNUmakefile       |    2
src/pmlogctl/pmiectl.sh        |    1
src/pmlogctl/pmlogctl.sh       |  312 ++++++++++++++++++++++++++++++-----------
30 files changed, 1382 insertions(+), 91 deletions(-)
Details ...
commit 65f2a24
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 3 20:05:05 2020 +1000
src/pmlogctl/pmiectl.sh: symlink, just for convenience

pmiectl is _really_ pmlogctl.

commit 1214e0f
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 3 20:03:22 2020 +1000
qa: (new) 1226, 1228 and 1230 - tests for pmiectl

commit 89485af
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 3 13:36:52 2020 +1000
pmiectl: man page (smoke and mirrors)

This is the pmlogctl man page, with small changes made by ./mk.pmiectl

commit 408a872
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 3 11:51:30 2020 +1000
src/pmlogctl: morph into pmlogctl and pmiectl

One script, small amount of conditional code based on $0 ... simple.

commit 3d26937
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 2 07:10:04 2020 +1000
pmie_dump_stats: (new) helper to dump pmie stats files

Not intended for human use, this is needed for pmiectl (coming soon).

commit df2e8c7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:12:53 2020 +1000
src/pmlogctl/pmlogctl.sh: more small changes

- refine handling of primary pmlogger to reduce warning chatter in some
  cases
- add rudimentary pmlogger.log dredging for ""dead"" loggers with -v and
  status command
- cull TODO list (multiple pmloggers per control file ""just works""(tm))

commit 13f988c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:08:43 2020 +1000
qa: pmlogctl tests - extend filter to remove any non-qa pmloggers

If there are non-primary pmlogger instances running on the qa machines
(like I have), then these need to be excluded from the pmlogctl ""status""
output so the QA tests pass.

Use awk to create an awk program that is run in _filter_status().

commit aadb0f0
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:07:01 2020 +1000
qa/admin/pcp-daily: remove a couple of references to pmmgr

commit 426c188
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:06:16 2020 +1000
qa/group: add 1204 to sanity, add 1223 (new)

commit 22473e2
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:04:42 2020 +1000
qa/1223: (new) pmlogctl tests with multile pmloggers per control file

This covers the migration plan (none needed) for pre-existing control
files that might have multiple pmloggers specified within a single
file.","Changes committed to git@github.com:kmcdonell/pcp.git 20200701
Ken McDonell (10):
qa/1223: (new) pmlogctl tests with multile pmloggers per control file
qa/group: add 1204 to sanity, add 1223 (new)
qa/admin/pcp-daily: remove a couple of references to pmmgr
qa: pmlogctl tests - extend filter to remove any non-qa pmloggers
src/pmlogctl/pmlogctl.sh: more small changes
pmie_dump_stats: (new) helper to dump pmie stats files
src/pmlogctl: morph into pmlogctl and pmiectl
pmiectl: man page (smoke and mirrors)
qa: (new) 1226, 1228 and 1230 - tests for pmiectl
src/pmlogctl/pmiectl.sh: symlink, just for convenience
man/man1/.gitignore            |    1
man/man1/GNUmakefile           |    6
man/man1/mk.pmiectl            |   77 ++++++++++
man/man1/pmie_dump_stats.1     |   45 +++++
man/man1/pmlogctl.1            |    8 -
qa/1204                        |   15 +
qa/1205                        |   15 +
qa/1206                        |   13 +
qa/1208                        |   15 +
qa/1209                        |   13 +
qa/1210                        |   13 +
qa/1213                        |   13 +
qa/1215                        |   13 +
qa/1216                        |   13 +
qa/1223                        |  160 +++++++++++++++++++++
qa/1223.out                    |   85 +++++++++++
qa/1226                        |  133 +++++++++++++++++
qa/1226.out                    |   73 +++++++++
qa/1228                        |  132 +++++++++++++++++
qa/1228.out                    |   40 +++++
qa/1230                        |  128 ++++++++++++++++
qa/1230.out                    |   32 ++++
qa/admin/pcp-daily             |    4
qa/group                       |    9 +
src/pmie/control.local         |    2
src/pmie/src/GNUmakefile       |    9 -
src/pmie/src/pmie_dump_stats.c |   91 +++++++++++
src/pmlogctl/GNUmakefile       |    2
src/pmlogctl/pmiectl.sh        |    1
src/pmlogctl/pmlogctl.sh       |  312 ++++++++++++++++++++++++++++++-----------
30 files changed, 1382 insertions(+), 91 deletions(-)
Details ...
commit 65f2a24
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 3 20:05:05 2020 +1000
src/pmlogctl/pmiectl.sh: symlink, just for convenience

pmiectl is _really_ pmlogctl.

commit 1214e0f
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 3 20:03:22 2020 +1000
qa: (new) 1226, 1228 and 1230 - tests for pmiectl

commit 89485af
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 3 13:36:52 2020 +1000
pmiectl: man page (smoke and mirrors)

This is the pmlogctl man page, with small changes made by ./mk.pmiectl

commit 408a872
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 3 11:51:30 2020 +1000
src/pmlogctl: morph into pmlogctl and pmiectl

One script, small amount of conditional code based on $0 ... simple.

commit 3d26937
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 2 07:10:04 2020 +1000
pmie_dump_stats: (new) helper to dump pmie stats files

Not intended for human use, this is needed for pmiectl (coming soon).

commit df2e8c7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:12:53 2020 +1000
src/pmlogctl/pmlogctl.sh: more small changes

- refine handling of primary pmlogger to reduce warning chatter in some
  cases
- add rudimentary pmlogger.log dredging for ""dead"" loggers with -v and
  status command
- cull TODO list (multiple pmloggers per control file ""just works""(tm))

commit 13f988c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:08:43 2020 +1000
qa: pmlogctl tests - extend filter to remove any non-qa pmloggers

If there are non-primary pmlogger instances running on the qa machines
(like I have), then these need to be excluded from the pmlogctl ""status""
output so the QA tests pass.

Use awk to create an awk program that is run in _filter_status().

commit aadb0f0
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:07:01 2020 +1000
qa/admin/pcp-daily: remove a couple of references to pmmgr

commit 426c188
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:06:16 2020 +1000
qa/group: add 1204 to sanity, add 1223 (new)

commit 22473e2
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 1 07:04:42 2020 +1000
qa/1223: (new) pmlogctl tests with multile pmloggers per control file

This covers the migration plan (none needed) for pre-existing control
files that might have multiple pmloggers specified within a single
file.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,960,2020-07-04T05:20:32Z,2020-07-04T05:21:26Z,2020-07-04T05:21:26Z,MERGED,True,4,3,1,https://github.com/kmcdonell,pmlogctl fix for qa/1204,3,[],https://github.com/performancecopilot/pcp/pull/960,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/960,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,961,2020-07-05T00:27:26Z,2020-07-05T00:28:09Z,2020-08-18T21:33:43Z,MERGED,True,21,21,2,https://github.com/kmcdonell,ci/coverity/pmlogctl,2,[],https://github.com/performancecopilot/pcp/pull/961,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/961,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,962,2020-07-06T00:06:23Z,2020-07-08T06:05:17Z,2020-08-03T04:17:23Z,MERGED,True,656,5,10,https://github.com/shogo-matsumoto,pmdaproc: add acct metrics,13,[],https://github.com/performancecopilot/pcp/pull/962,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/962,"Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922","Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922",True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,962,2020-07-06T00:06:23Z,2020-07-08T06:05:17Z,2020-08-03T04:17:23Z,MERGED,True,656,5,10,https://github.com/shogo-matsumoto,pmdaproc: add acct metrics,13,[],https://github.com/performancecopilot/pcp/pull/962,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/962#issuecomment-655215972,"Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922","@shogo-matsumoto this is a looking good.  I've made some minor cleanups (see below), so I'll merge your current work (later today) so that we can work together on these remaining items ...

hertz - use existing variable (I've fixed this one)
configuration variables (intervals, file size thresholds, paths) - better if external configurable not hard-coded (handy for testing), and perhaps even could be modified using pmStore(3) and perhaps proc.control.acct or acct.control.* metrics.
QA - sample pacct file (compressed) that we could temporarily put in /var/account/pacct to test the PMDA?

perhaps add this file (perhaps several, different / interesting cases?) to the qa/linux/ pre-installed files set
also need 'live' test to check metrics work with the running kernel process accounting


code style differs to rest of pmdaproc?  best if its consistent
path for PACCT_PCP_PRIVATE_FILE needs to be somewhere more private than /tmp for security (/var/lib/pcp/tmp/pmcd/proc-pacct? /var/lib/pcp/tmp is also PCP_TMPFILE_DIR)
PACCT_SYSTEM_FILE should be from PCP_ACCT_DIR/pacct and configure.ac like PCP_SA_DIR
file size is not an int (get_file_size) - use off_t or size_t or unsigned long long
acct_debug always does the varargs expansion and always incurs function call overhead -
maybe use __pmNotifyErr (gives timestamps) with DEBUG level and move pmDebugOptions check
to wrap each callsite (lowest overhead).
what is the permissions model going to be?  not yet using PCP per-context authentication ... I suggest we go with the model of no-authentication == no access like rest of proc.* metrics.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,962,2020-07-06T00:06:23Z,2020-07-08T06:05:17Z,2020-08-03T04:17:23Z,MERGED,True,656,5,10,https://github.com/shogo-matsumoto,pmdaproc: add acct metrics,13,[],https://github.com/performancecopilot/pcp/pull/962,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/962#issuecomment-655285242,"Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922","@shogo-matsumoto correction:

* what is the permissions model going to be?  not yet using PCP per-context authentication ... I suggest we go with the model of no-authentication == no access like rest of proc.* metrics.


It is using per-context authentication, sorry, my mistake - although enforcing that only root can access these metrics values.  Should we allow any authenticated user, I wonder? (more like the proc.* metrics access)  If so, also the existing -A option to pmdaproc could be used to let a sysadmin allow all (incl. remote) access to the metrics, again consistent with proc.* metrics access.
index a100cc9e6..012296f57 100644
--- a/src/pmdas/linux_proc/pmda.c
+++ b/src/pmdas/linux_proc/pmda.c
@@ -1520,7 +1520,8 @@ proc_refresh(pmdaExt *pmda, int *need_refresh)
            refresh_cgroups2(cgroup, cgrouplen, need_refresh);
     }
 
-    if (need_refresh[CLUSTER_ACCT] && !proc_ctx_getuid(pmda->e_context))
+    if (need_refresh[CLUSTER_ACCT] &&
+       (all_access || proc_ctx_getuid(pmda->e_context) >= 0))
        refresh_acct(&proc_acct);
 
     if (need_refresh[CLUSTER_PID_STAT] ||
Other items:

selinux policy (I've started on this).
man page updates for pmdaproc(1) to mention these metrics and the files used

If you want to chat directly to me about any of this (might be easier to coordinate our efforts that way?) please feel free to contact me on slack - access details on https://pcp.io/community.html",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,962,2020-07-06T00:06:23Z,2020-07-08T06:05:17Z,2020-08-03T04:17:23Z,MERGED,True,656,5,10,https://github.com/shogo-matsumoto,pmdaproc: add acct metrics,13,[],https://github.com/performancecopilot/pcp/pull/962,https://github.com/shogo-matsumoto,4,https://github.com/performancecopilot/pcp/pull/962#issuecomment-655830974,"Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922","@natoscott
Thank you so much for reviewing my code and merging it! I understand the remaining items. (I'm afraid my progress may be slow but) I'll start with the easier of tasks which remains unfinished. The following items seem relatively easy for me.

configuration variables
code style
PACCT_PCP_PRIVATE_FILE
PACCT_SYSTEM_FILE
file size


Should we allow any authenticated user, I wonder? (more like the proc.* metrics access) If so, also the existing -A option to pmdaproc could be used to let a sysadmin allow all (incl. remote) access to the metrics, again consistent with proc.* metrics access.

Yes, I should have added all_access(-A). To be honest, current my implementation is halfway. It prevents non-root user from triggering refresh_acct but not from fetching values. It means any user can access acct metrics if root user accesses acct metrics at the same time.
On second thought, it may be best to adopt no-authentication, as you commented first, in order to allow pmlogger service to collect acct metrics.

If you want to chat directly to me about any of this (might be easier to coordinate our efforts that way?) please feel free to contact me on slack - access details on https://pcp.io/community.html

Thank you for the suggestion. I consider using slack. In most situations e-mail or gihub may be preferable for me in terms of doing my day job (and in terms of my english skill). But slack will be helpful to discuss about complicated items. Thanks a lot.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,962,2020-07-06T00:06:23Z,2020-07-08T06:05:17Z,2020-08-03T04:17:23Z,MERGED,True,656,5,10,https://github.com/shogo-matsumoto,pmdaproc: add acct metrics,13,[],https://github.com/performancecopilot/pcp/pull/962,https://github.com/natoscott,5,https://github.com/performancecopilot/pcp/pull/962#issuecomment-656433894,"Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922",@shogo-matsumoto sounds good - I'll focus on the QA and will merge that access control change.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,962,2020-07-06T00:06:23Z,2020-07-08T06:05:17Z,2020-08-03T04:17:23Z,MERGED,True,656,5,10,https://github.com/shogo-matsumoto,pmdaproc: add acct metrics,13,[],https://github.com/performancecopilot/pcp/pull/962,https://github.com/natoscott,6,https://github.com/performancecopilot/pcp/pull/962#issuecomment-661422449,"Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922","@shogo-matsumoto I made a series of updates and additions to this new code yesterday - if you could find some time to review them, that'd be fantastic.
I have a couple of questions still, things I don't understand fully:

why is the etime (elapsed time) metric a float and not an unsigned integer like the other time metrics (utime and stime)?  or should all three by floating point values?
we're multiplying the time metrics by 1000 (converting seconds to milliseconds) - could we not export them directly in units of seconds?  (is this related to the floating point issue above?)

Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,962,2020-07-06T00:06:23Z,2020-07-08T06:05:17Z,2020-08-03T04:17:23Z,MERGED,True,656,5,10,https://github.com/shogo-matsumoto,pmdaproc: add acct metrics,13,[],https://github.com/performancecopilot/pcp/pull/962,https://github.com/shogo-matsumoto,7,https://github.com/performancecopilot/pcp/pull/962#issuecomment-662195877,"Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922","@natoscott

I made a series of updates and additions to this new code yesterday - if you could find some time to review them, that'd be fantastic.

Thank you for updating the code. I’ll read it.

why is the etime (elapsed time) metric a float and not an unsigned integer like the other time metrics (utime and stime)? or should all three by floating point values?

I used float for etime because ac_etime field of struct acct_v3 is declared as float. However, as you commented, I think all three values (etime, utime, stime) should be floating values. I found my mistake. comp_t type is encoded by encode_comp_t function in linux kernel. It should be decoded when we read acct_v3. I paste a draft of a fix in the bottom of this comment. Could you review it?
By the way, is PM_SEM_COUNTER in the following code appropriate? pmval does not show non-zero value for utime or stime if PM_SEM_COUNTER is used.
src/pmdas/linux_proc/pmda.c
    /* acct.psinfo.utime */
    { NULL, { PMDA_PMID(CLUSTER_ACCT,ACCT_UTIME),
      PM_TYPE_U32, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,1,0,0,PM_TIME_MSEC,0) }, },
    /* acct.psinfo.stime */
    { NULL, { PMDA_PMID(CLUSTER_ACCT,ACCT_STIME),
      PM_TYPE_U32, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,1,0,0,PM_TIME_MSEC,0) }, },


we're multiplying the time metrics by 1000 (converting seconds to milliseconds) - could we not export them directly in units of seconds? (is this related to the floating point issue above?)

Yes, I should have used seconds (and float).
Thanks a lot,
draft of a fix:
diff --git a/src/pmdas/linux_proc/acct.c b/src/pmdas/linux_proc/acct.c
index 92ec79821..1841bec0e 100644
--- a/src/pmdas/linux_proc/acct.c
+++ b/src/pmdas/linux_proc/acct.c
@@ -82,6 +82,21 @@ get_end_time_v3(void *entry)
 	   (int)(((struct acct_v3 *)entry)->ac_etime / hz);
 }
 
+static unsigned long long 
+decode_comp_t(comp_t c)
+{
+    int exp;
+    unsigned long long val;
+
+    exp = (c >> 13) & 0x7;
+    val = c & 0x1fff;
+
+    while (exp-- > 0)
+	val <<= 3;
+
+    return val;
+}
+
 static int
 acct_fetchCallBack_v3(int item, void *p, pmAtomValue *atom)
 {
@@ -103,31 +118,31 @@ acct_fetchCallBack_v3(int item, void *p, pmAtomValue *atom)
 	atom->ul = acctp->ac_btime;
 	break;
     case ACCT_ETIME:
-	atom->f = acctp->ac_etime * 1000 / hz;
+	atom->f = acctp->ac_etime / hz;
 	break;
     case ACCT_UTIME:
-	atom->ul = acctp->ac_utime * 1000 / hz;
+	atom->f = decode_comp_t(acctp->ac_utime) * 1.0 / hz;
 	break;
     case ACCT_STIME:
-	atom->ul = acctp->ac_stime * 1000 / hz;
+	atom->f = decode_comp_t(acctp->ac_stime) * 1.0 / hz;
 	break;
     case ACCT_MEM:
-	atom->ul = acctp->ac_mem;
+	atom->ull = decode_comp_t(acctp->ac_mem);
 	break;
     case ACCT_IO:
-	atom->ul = acctp->ac_io;
+	atom->ull = decode_comp_t(acctp->ac_io);
 	break;
     case ACCT_RW:
-	atom->ul = acctp->ac_rw;
+	atom->ull = decode_comp_t(acctp->ac_rw);
 	break;
     case ACCT_MINFLT:
-	atom->ul = acctp->ac_minflt;
+	atom->ull = decode_comp_t(acctp->ac_minflt);
 	break;
     case ACCT_MAJFLT:
-	atom->ul = acctp->ac_majflt;
+	atom->ull = decode_comp_t(acctp->ac_majflt);
 	break;
     case ACCT_SWAPS:
-	atom->ul = acctp->ac_swaps;
+	atom->ull = decode_comp_t(acctp->ac_swaps);
 	break;
     case ACCT_EXITCODE:
 	atom->ul = acctp->ac_exitcode;
diff --git a/src/pmdas/linux_proc/pmda.c b/src/pmdas/linux_proc/pmda.c
index 82357243c..6b6f0185d 100644
--- a/src/pmdas/linux_proc/pmda.c
+++ b/src/pmdas/linux_proc/pmda.c
@@ -1427,31 +1427,31 @@ static pmdaMetric metrictab[] = {
       PM_TYPE_U32, ACCT_INDOM, PM_SEM_DISCRETE, PMDA_PMUNITS(0,1,0,0,PM_TIME_SEC,0) }, },
     /* acct.psinfo.etime */
     { NULL, { PMDA_PMID(CLUSTER_ACCT,ACCT_ETIME),
-      PM_TYPE_FLOAT, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,1,0,0,PM_TIME_MSEC,0) }, },
+      PM_TYPE_FLOAT, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,1,0,0,PM_TIME_SEC,0) }, },
     /* acct.psinfo.utime */
     { NULL, { PMDA_PMID(CLUSTER_ACCT,ACCT_UTIME),
-      PM_TYPE_U32, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,1,0,0,PM_TIME_MSEC,0) }, },
+      PM_TYPE_FLOAT, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,1,0,0,PM_TIME_SEC,0) }, },
     /* acct.psinfo.stime */
     { NULL, { PMDA_PMID(CLUSTER_ACCT,ACCT_STIME),
-      PM_TYPE_U32, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,1,0,0,PM_TIME_MSEC,0) }, },
+      PM_TYPE_FLOAT, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,1,0,0,PM_TIME_SEC,0) }, },
     /* acct.psinfo.mem */
     { NULL, { PMDA_PMID(CLUSTER_ACCT,ACCT_MEM),
-      PM_TYPE_U32, ACCT_INDOM, PM_SEM_INSTANT, PMDA_PMUNITS(1,0,0,PM_SPACE_KBYTE,0,0) }, },
+      PM_TYPE_U64, ACCT_INDOM, PM_SEM_INSTANT, PMDA_PMUNITS(1,0,0,PM_SPACE_KBYTE,0,0) }, },
     /* acct.psinfo.io */
     { NULL, { PMDA_PMID(CLUSTER_ACCT,ACCT_IO),
-      PM_TYPE_U32, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) } },
+      PM_TYPE_U64, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) } },
     /* acct.psinfo.rw */
     { NULL, { PMDA_PMID(CLUSTER_ACCT,ACCT_RW),
-      PM_TYPE_U32, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) } },
+      PM_TYPE_U64, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) } },
     /* acct.psinfo.minflt */
     { NULL, { PMDA_PMID(CLUSTER_ACCT,ACCT_MINFLT),
-      PM_TYPE_U32, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,0,0,0,0,0) }, },
+      PM_TYPE_U64, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,0,0,0,0,0) }, },
     /* acct.psinfo.majflt */
     { NULL, { PMDA_PMID(CLUSTER_ACCT,ACCT_MAJFLT),
-      PM_TYPE_U32, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) } },
+      PM_TYPE_U64, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) } },
     /* acct.psinfo.swaps */
     { NULL, { PMDA_PMID(CLUSTER_ACCT,ACCT_SWAPS),
-      PM_TYPE_U32, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) } },
+      PM_TYPE_U64, ACCT_INDOM, PM_SEM_COUNTER, PMDA_PMUNITS(0,0,1,0,0,PM_COUNT_ONE) } },
 
     /* acct.id.uid */
     { NULL, { PMDA_PMID(CLUSTER_ACCT,ACCT_UID),",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,962,2020-07-06T00:06:23Z,2020-07-08T06:05:17Z,2020-08-03T04:17:23Z,MERGED,True,656,5,10,https://github.com/shogo-matsumoto,pmdaproc: add acct metrics,13,[],https://github.com/performancecopilot/pcp/pull/962,https://github.com/natoscott,8,https://github.com/performancecopilot/pcp/pull/962#issuecomment-662846106,"Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922","[...]
I used float for etime because ac_etime field of struct acct_v3 is declared as float. However, as you commented, I think all three values (etime, utime, stime) should be floating values. I found my mistake. comp_t type is encoded by encode_comp_t function in linux kernel. It should be decoded when we read acct_v3. I paste a draft of a fix in the bottom of this comment. Could you review it?

Looks good!  I also had been looking at the v2 structure in acct(5) man page, I missed that I needed to scroll down to see the float in v3.

By the way, is PM_SEM_COUNTER in the following code appropriate? pmval does not show non-zero value for utime or stime if PM_SEM_COUNTER is used.

I think so - this follows the equivalent metrics in the proc.* metrics (e.g. proc.psinfo.utime).  Its a cumulative count of time spent by the process executing user code.  pmval does rate convesion on counters, so I'd expect it would show non-zero only during samples where the value changes.  One can use the -r/--raw option to pmval to get see the non-rate converted value.

[...]
draft of a fix:

Looks good @shogo-matsumoto - I'll merge that shortly.
One additional issue I've just realised exists is that we are now enabling process accounting for every PCP installation when it may not have been enabled before.  This is not good, as it incurs an overhead for everyone - and plenty of people wont use these particular metrics, but still incur these overheads.
We'll need to take one of several approaches there I think - which do you think best?


only enable (acct_init) process accounting once a client tool asks for one of the metrics.  we can disable accounting when all clients accessing the metrics if we track all of the connected clients accessing acct.*


move the code into a new pmdaacct(1) which is not default installed.


require an explicit pmStore(3) / pmstore(1) to enable and disable accounting - adding acct.control.* metrics along the lines of the proc.control.* metrics.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,962,2020-07-06T00:06:23Z,2020-07-08T06:05:17Z,2020-08-03T04:17:23Z,MERGED,True,656,5,10,https://github.com/shogo-matsumoto,pmdaproc: add acct metrics,13,[],https://github.com/performancecopilot/pcp/pull/962,https://github.com/shogo-matsumoto,9,https://github.com/performancecopilot/pcp/pull/962#issuecomment-664087438,"Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922","@natoscott

pmval does rate convesion on counters, so I'd expect it would show non-zero only during samples where the value changes.

Ok, I understand.

We'll need to take one of several approaches there I think - which do you think best?

I think it may be best to move the code into a new pmdaacct, but it will take some time if I do that.  I made a PR (#984) as a (temporarily) workaround which has a flag acct.control.enable_acct to control enable/disable of acct. As default it will prevent pmdaproc from creating private acct file (/var/lib/pcp/tmp/pmcd/pacct) and from calling acct. Note that access to system acct file (/var/account/pacct) is not restricted by the flag because other process is responsible for managing the file. Is the fix acceptable?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,962,2020-07-06T00:06:23Z,2020-07-08T06:05:17Z,2020-08-03T04:17:23Z,MERGED,True,656,5,10,https://github.com/shogo-matsumoto,pmdaproc: add acct metrics,13,[],https://github.com/performancecopilot/pcp/pull/962,https://github.com/natoscott,10,https://github.com/performancecopilot/pcp/pull/962#issuecomment-666156108,"Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922","@shogo-matsumoto that's fine - I think the store-based approach is probably the best actually.
I realised after my previous post that there's some code shared with other parts of pmdaproc that wouldn't be easy to extract (like the gid/uid name caches).
I've updated the test to exercise the new code and made a small fix to the fetch return code status.  I noticed there's no help text for the new metrics you added - could you add a little writeup for each? - e.g.
$ pminfo -t acct.control
acct.control.open_retry_interval [Interval of failed acct file opening check]
acct.control.check_acct_interval [Interval on which acct file size is checked]
acct.control.file_size_threshold [Size at which the acct file will be reopened]
acct.control.lifetime One-line Help: Error: One-line or help text is not available
acct.control.refresh One-line Help: Error: One-line or help text is not available
acct.control.enable_acct One-line Help: Error: One-line or help text is not available",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,962,2020-07-06T00:06:23Z,2020-07-08T06:05:17Z,2020-08-03T04:17:23Z,MERGED,True,656,5,10,https://github.com/shogo-matsumoto,pmdaproc: add acct metrics,13,[],https://github.com/performancecopilot/pcp/pull/962,https://github.com/shogo-matsumoto,11,https://github.com/performancecopilot/pcp/pull/962#issuecomment-667750839,"Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922","@natoscott

I noticed there's no help text for the new metrics you added - could you add a little writeup for each? - e.g.

Sorry that I forgot to add help text. I made a PR(#995). Thank you for helping me with testing and so on.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,962,2020-07-06T00:06:23Z,2020-07-08T06:05:17Z,2020-08-03T04:17:23Z,MERGED,True,656,5,10,https://github.com/shogo-matsumoto,pmdaproc: add acct metrics,13,[],https://github.com/performancecopilot/pcp/pull/962,https://github.com/natoscott,12,https://github.com/performancecopilot/pcp/pull/962#issuecomment-667793645,"Collect accounting information from process accounting file (see acct(5)).
pmdaproc(acct) will try to read data from /var/account/pacct if it is effective,
or use private accounting file (/tmp/pcp-pacct).
Currently version 3 format (struct acct_v3) is available.
Related to #922","@natoscott

I noticed there's no help text for the new metrics you added - could you add a little writeup for each? - e.g.

Sorry that I forgot to add help text. I made a PR(#995). Thank you for helping me with testing and so on.

No problem at all.  I think we're finished from the PMDA side of things now!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,963,2020-07-06T23:08:32Z,2020-07-06T23:21:05Z,2020-07-06T23:21:05Z,MERGED,True,1,1,1,https://github.com/lberk,update maintainers email address,1,[],https://github.com/performancecopilot/pcp/pull/963,https://github.com/lberk,1,https://github.com/performancecopilot/pcp/pull/963,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,964,2020-07-07T02:59:46Z,2020-07-08T06:05:16Z,2020-08-18T21:33:48Z,MERGED,True,509,150,17,https://github.com/kmcdonell,pmlogger_daily -k 0 fixes,4,[],https://github.com/performancecopilot/pcp/pull/964,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/964,"Changes committed to git@github.com:kmcdonell/pcp.git 20200706
Ken McDonell (4):
qa/119: re-order setup
pmlogger_daily: -k 0 fixes
qa/1232: (new) check pmlogger_daily -k 0
qa: assorted changes/remakes to match changed pmlogger_daily -k semantics
man/man1/pmlogger_check.1      |  168 ++++++++++++++++++++--------
qa/119                         |   30 ++---
qa/1232                        |  107 +++++++++++++++++
qa/1232.out                    |   36 ++++++
qa/151                         |    6 -
qa/151.out                     |    2
qa/338                         |    6 -
qa/338.out                     |    6 -
qa/530                         |    6 -
qa/530.out                     |    6 -
qa/532                         |    4
qa/532.out                     |    2
qa/679.out                     |   26 ++--
qa/793.out                     |    6 -
qa/925.out                     |    2
qa/group                       |    1
src/pmlogger/pmlogger_daily.sh |  245 +++++++++++++++++++++++++++++++----------
17 files changed, 509 insertions(+), 150 deletions(-)
Details ...
commit 4bb6a87
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 7 12:57:07 2020 +1000
qa: assorted changes/remakes to match changed pmlogger_daily -k semantics

Since -k now has robust semantics relative to ""now"", not some midnight
in the past or future, we need to tweak some of these tests a little.

commit ee9e629
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 7 12:56:36 2020 +1000
qa/1232: (new) check pmlogger_daily -k 0

commit 27a818f
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 7 08:22:26 2020 +1000
pmlogger_daily: -k 0 fixes

This commit completes the work started a while ago, but interrupted
by the ""signal pmlogger to rotate logs"" work, the wrestling with systemd
and the pmlogctl development.

Included in this commit is:

- consistent use of stderr for all verbose, very verbose, warning and
  error output
- complete implementation of the extended DD[:MM[:HH]] notation for the
  -x and -k options to allow specification of ""periods"" other than an
  integral number of days, and in particular less than 1 day
- integration of the pmlogctl #!# protcol in the control files for instances
  stopped by pmlogctl
- removing redundant ""pmlogger_check:"" preamble for some messages to reduce
  output clutter with -V and -VV
- proper handling of -k 0 (or indeed any period less than one day)
- change in -k semantics to match the recent changes to -x semantics, namely
  the ""period"" is measured from _now_, not some arbitrary midnight as chosen
  by find(1) ... this removes a cross-platform inconsistency that has been
  there since day one

commit 8e7ebe9
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 6 15:43:57 2020 +1000
qa/119: re-order setup

Need to stop current pmlogger BEFORE dinking with
/etc/pcp/pmlogger/control.d","Changes committed to git@github.com:kmcdonell/pcp.git 20200706
Ken McDonell (4):
qa/119: re-order setup
pmlogger_daily: -k 0 fixes
qa/1232: (new) check pmlogger_daily -k 0
qa: assorted changes/remakes to match changed pmlogger_daily -k semantics
man/man1/pmlogger_check.1      |  168 ++++++++++++++++++++--------
qa/119                         |   30 ++---
qa/1232                        |  107 +++++++++++++++++
qa/1232.out                    |   36 ++++++
qa/151                         |    6 -
qa/151.out                     |    2
qa/338                         |    6 -
qa/338.out                     |    6 -
qa/530                         |    6 -
qa/530.out                     |    6 -
qa/532                         |    4
qa/532.out                     |    2
qa/679.out                     |   26 ++--
qa/793.out                     |    6 -
qa/925.out                     |    2
qa/group                       |    1
src/pmlogger/pmlogger_daily.sh |  245 +++++++++++++++++++++++++++++++----------
17 files changed, 509 insertions(+), 150 deletions(-)
Details ...
commit 4bb6a87
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 7 12:57:07 2020 +1000
qa: assorted changes/remakes to match changed pmlogger_daily -k semantics

Since -k now has robust semantics relative to ""now"", not some midnight
in the past or future, we need to tweak some of these tests a little.

commit ee9e629
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 7 12:56:36 2020 +1000
qa/1232: (new) check pmlogger_daily -k 0

commit 27a818f
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 7 08:22:26 2020 +1000
pmlogger_daily: -k 0 fixes

This commit completes the work started a while ago, but interrupted
by the ""signal pmlogger to rotate logs"" work, the wrestling with systemd
and the pmlogctl development.

Included in this commit is:

- consistent use of stderr for all verbose, very verbose, warning and
  error output
- complete implementation of the extended DD[:MM[:HH]] notation for the
  -x and -k options to allow specification of ""periods"" other than an
  integral number of days, and in particular less than 1 day
- integration of the pmlogctl #!# protcol in the control files for instances
  stopped by pmlogctl
- removing redundant ""pmlogger_check:"" preamble for some messages to reduce
  output clutter with -V and -VV
- proper handling of -k 0 (or indeed any period less than one day)
- change in -k semantics to match the recent changes to -x semantics, namely
  the ""period"" is measured from _now_, not some arbitrary midnight as chosen
  by find(1) ... this removes a cross-platform inconsistency that has been
  there since day one

commit 8e7ebe9
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 6 15:43:57 2020 +1000
qa/119: re-order setup

Need to stop current pmlogger BEFORE dinking with
/etc/pcp/pmlogger/control.d",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,965,2020-07-07T04:50:57Z,2020-07-08T06:05:15Z,2020-07-08T06:05:16Z,MERGED,True,50,17,1,https://github.com/not4win, pmlogpaste: filled up the man page,1,[],https://github.com/performancecopilot/pcp/pull/965,https://github.com/not4win,1,https://github.com/performancecopilot/pcp/pull/965,"FIlled up the sparse man page with synopsis, description, options etc.","FIlled up the sparse man page with synopsis, description, options etc.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,966,2020-07-07T09:02:27Z,2020-07-08T06:05:15Z,2020-07-08T06:05:15Z,MERGED,True,339,6,5,https://github.com/Erbenos,man: additions/boilerplates for pmsearch related documentation,2,[],https://github.com/performancecopilot/pcp/pull/966,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/966,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,967,2020-07-09T02:02:58Z,2020-07-09T08:29:57Z,2020-07-09T08:29:57Z,MERGED,True,48,9,3,https://github.com/not4win, pmlogpaste: added label support and updated man page for the same,3,[],https://github.com/performancecopilot/pcp/pull/967,https://github.com/not4win,1,https://github.com/performancecopilot/pcp/pull/967,added label support and updated man page for the same.,added label support and updated man page for the same.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,970,2020-07-12T03:13:10Z,2020-07-13T02:22:03Z,2020-08-18T21:33:54Z,MERGED,True,1117,138,76,https://github.com/kmcdonell,"help text for derived metrics, temp file/dir renaming, misc stuff",20,[],https://github.com/performancecopilot/pcp/pull/970,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/970,"Changes committed to git@github.com:kmcdonell/pcp.git 20200711
Ken McDonell (20):
qa/common.filter: tweak _filter_views() for recent Qt warning
qa/1001: need _filter_views in one more place
qa/623.out: remade after -k 0 change to pmlogger_daily
Add help text support for derived metrics
qa: 1233, 1235, 1236, 1237 (all new) derived metric help text tests
qa/new: tweak the preamble output to include args if any
qa/common.config: bozo-vm now has a FQDN, cull some old junk
src: cleanup temp file naming
src/pmproxy/rc_pmproxy: remove $tmp (dir) before exec
qa/1102: openmetrics may NOT be installed at the beginning
qa/1199: fetch every metric first
qa/common.filter: cull acct from top-level pmns
qa/031.out.linux: acct no longer appears in the output
qa/679.out: Warning: no archives found to merge moved to -V guard
qa/1768: change to match recent temp file/dir name changes
src/pmlogger/utilproc.sh: fix typo in last round of changes
qa/1695 & 1696: ipv6 is optional ... filter out
qa/admin/check-vm: updates for Ubuntu 20.04
src/libpcp/src/check-statics: bit over-enthusiastic with the pcp.XXXXXX changes
infiband and lustrecomm PMDAs: use $PCP_DIR as prefix to /etc/pcp.env
man/man3/pmloadderivedconfig.3                  |   61 +++
qa/031.out.linux                                |    1
qa/1001                                         |    2
qa/1102                                         |    2
qa/1199                                         |    2
qa/1233                                         |  112 ++++++
qa/1233.out                                     |   68 +++
qa/1235                                         |   32 +
qa/1235.out                                     |   87 ++++
qa/1236                                         |   92 +++++
qa/1236.out                                     |   46 ++
qa/1237                                         |   32 +
qa/1237.out                                     |   56 +++
qa/1695                                         |    5
qa/1695.out                                     |    1
qa/1696                                         |    5
qa/1696.out                                     |    1
qa/1768                                         |    2
qa/623.out                                      |    6
qa/679.out                                      |    1
qa/admin/check-vm                               |   23 +
qa/admin/other-packages/require                 |    3
qa/admin/other-packages/skip                    |    2
qa/common.config                                |   21 -
qa/common.filter                                |    2
qa/group                                        |    4
qa/new                                          |    7
src/derived/cpu-util.conf                       |   20 +
src/libpcp/src/check-statics                    |    4
src/libpcp/src/derive.h                         |    3
src/libpcp/src/derive_parser.y.in               |  426 +++++++++++++++++++++---
src/libpcp/src/help.c                           |    9
src/libpcp/src/mk.exports                       |    2
src/libpcp/src/mk.pmdbg                         |    2
src/pcp/pcp.sh                                  |    2
src/pcp/shping/pcp-shping.sh                    |    2
src/pcp/summary/pcp-summary.sh                  |    2
src/pcp/vmstat/pcp-vmstat.sh                    |    2
src/pmafm/mkaf                                  |    2
src/pmafm/pmafm                                 |    2
src/pmcd/rc_pcp                                 |    2
src/pmcd/rc_pmcd                                |    2
src/pmchart/views/BusyCPU                       |    2
src/pmdas/infiniband/Install                    |    2
src/pmdas/infiniband/Remove                     |    2
src/pmdas/linux_proc/config.c                   |    2
src/pmdas/lustrecomm/Remove                     |    2
src/pmdas/weblog/Web.Allservers.pmchart         |    2
src/pmdas/weblog/Web.Perserver.Bytes.pmchart    |    2
src/pmdas/weblog/Web.Perserver.Requests.pmchart |    2
src/pmdas/weblog/server.sh                      |    2
src/pmfind/pmfind_check.sh                      |    2
src/pmgadgets/pmgcisco.sh                       |    2
src/pmgadgets/pmgcluster.sh                     |    2
src/pmgadgets/pmgshping.sh                      |    2
src/pmie/pmie2col.sh                            |    2
src/pmie/pmie_check.sh                          |    2
src/pmie/pmie_daily.sh                          |    2
src/pmie/rc_pmie                                |    4
src/pmieconf/xtractnames                        |    2
src/pmlogctl/pmlogctl.sh                        |    8
src/pmlogger/pmlogger_check.sh                  |    2
src/pmlogger/pmlogger_daily.sh                  |    2
src/pmlogger/pmlogger_daily_report.sh           |    2
src/pmlogger/pmlogger_merge.sh                  |    4
src/pmlogger/pmlogger_rewrite.sh                |    2
src/pmlogger/pmlogmv.sh                         |    2
src/pmlogger/rc_pmlogger                        |    4
src/pmlogger/utilproc.sh                        |    2
src/pmlogsummary/pmdiff.sh                      |    2
src/pmns/Make.stdpmid                           |    4
src/pmns/Rebuild                                |    2
src/pmns/pmnsadd                                |    2
src/pmproxy/rc_pmproxy                          |   19 -
src/pmsignal/pmsignal.sh                        |    2
src/pmsnap/pmsnap.sh                            |    2
76 files changed, 1118 insertions(+), 139 deletions(-)
Details ...
commit b0fd04b
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 11:44:54 2020 +1000
infiband and lustrecomm PMDAs: use $PCP_DIR as prefix to /etc/pcp.env

Fixes https://github.com/performancecopilot/pcp/issues/968

commit 41870dc
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 11:41:34 2020 +1000
src/libpcp/src/check-statics: bit over-enthusiastic with the pcp.XXXXXX changes

Need to use /tmp not $PCP_TMPFILE_DIR here.

commit 680b26d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 11:40:10 2020 +1000
qa/admin/check-vm: updates for Ubuntu 20.04

Continuation of the PCP build --without-python (2) changes for Ubunutu,
starting with version 20.04

commit 12729d9
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:56:56 2020 +1000
qa/1695 & 1696: ipv6 is optional ... filter out

commit fe72bff
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:54:43 2020 +1000
src/pmlogger/utilproc.sh: fix typo in last round of changes

-f-p => -f -p

Found by qa/630.

commit 4e2f0d7
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:50:44 2020 +1000
qa/1768: change to match recent temp file/dir name changes

commit 8660007
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:49:20 2020 +1000
qa/679.out: Warning: no archives found to merge moved to -V guard

Fallout from recent pmlogger_daily changes.

commit 291e423
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:48:31 2020 +1000
qa/031.out.linux: acct no longer appears in the output

commit b90fab4
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:47:47 2020 +1000
qa/common.filter: cull acct from top-level pmns

This won't be there on the non-linux platforms.

commit 7c6a10c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:27:33 2020 +1000
qa/1199: fetch _every_ metric first

Force as many of the dynamic allocations in pmcd to happen as possible
before we go belting the context churn test looking for leaks.

Increase the batch for pminfo so this first step is a little faster.

commit f7d8155
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:24:30 2020 +1000
qa/1102: openmetrics may NOT be installed at the beginning

Add filtering for initial Remove.

commit 466afbe
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 12:49:38 2020 +1000
src/pmproxy/rc_pmproxy: remove $tmp (dir) before exec

We were leaving behind /var/tmp/pcp.XXXXX (or after the most recent
change /var/tmp/pmproxy_rc.XXXXX) directories.

When using ""exec"" we cannot expect the old process' trap to clean up,
so need to do it explicitly before (each) exec.

commit 029add4
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 07:51:25 2020 +1000
src: cleanup temp file naming

- change pcp.XXXXXXX -> pm<something>.XXXXXXX or pcp-<something>.XXXXXX
  so we can see who's not cleaning up properly
- use $PCP_TMPFILE_DIR throughout for all temp files

commit dc1f309
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 07:12:47 2020 +1000
qa/common.config: bozo-vm now has a FQDN, cull some old junk

commit a51d17d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 07:10:21 2020 +1000
qa/new: tweak the preamble output to include args if any

Intended for use with --valgrind, as in qa/1236 and qa/1237.

commit 7c0c2ce
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 07:07:36 2020 +1000
qa: 1233, 1235, 1236, 1237 (all new) derived metric help text tests

Also demonstrates how to build a QA test for some functionality and
then easily wrap that same test in a valgrind test cloak (we want
both sorts of testing, but valgrind is not universally available).

commit 1f73f48
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 07:03:57 2020 +1000
Add help text support for derived metrics

This commit includes:
- libpcp changes
- man page
- help text for the kernel.cpu.util derived metrics (by way
  of an example, I'll leave it to the owners of the other
  derived metrics to add help text if they wish).

commit cbb40e2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 06:58:45 2020 +1000
qa/623.out: remade after -k 0 change to pmlogger_daily

Error message text is slightly different.

commit f98be11
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 06:57:40 2020 +1000
qa/1001: need _filter_views in one more place

commit 995fb50
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 06:57:02 2020 +1000
qa/common.filter: tweak _filter_views() for recent Qt warning","Changes committed to git@github.com:kmcdonell/pcp.git 20200711
Ken McDonell (20):
qa/common.filter: tweak _filter_views() for recent Qt warning
qa/1001: need _filter_views in one more place
qa/623.out: remade after -k 0 change to pmlogger_daily
Add help text support for derived metrics
qa: 1233, 1235, 1236, 1237 (all new) derived metric help text tests
qa/new: tweak the preamble output to include args if any
qa/common.config: bozo-vm now has a FQDN, cull some old junk
src: cleanup temp file naming
src/pmproxy/rc_pmproxy: remove $tmp (dir) before exec
qa/1102: openmetrics may NOT be installed at the beginning
qa/1199: fetch every metric first
qa/common.filter: cull acct from top-level pmns
qa/031.out.linux: acct no longer appears in the output
qa/679.out: Warning: no archives found to merge moved to -V guard
qa/1768: change to match recent temp file/dir name changes
src/pmlogger/utilproc.sh: fix typo in last round of changes
qa/1695 & 1696: ipv6 is optional ... filter out
qa/admin/check-vm: updates for Ubuntu 20.04
src/libpcp/src/check-statics: bit over-enthusiastic with the pcp.XXXXXX changes
infiband and lustrecomm PMDAs: use $PCP_DIR as prefix to /etc/pcp.env
man/man3/pmloadderivedconfig.3                  |   61 +++
qa/031.out.linux                                |    1
qa/1001                                         |    2
qa/1102                                         |    2
qa/1199                                         |    2
qa/1233                                         |  112 ++++++
qa/1233.out                                     |   68 +++
qa/1235                                         |   32 +
qa/1235.out                                     |   87 ++++
qa/1236                                         |   92 +++++
qa/1236.out                                     |   46 ++
qa/1237                                         |   32 +
qa/1237.out                                     |   56 +++
qa/1695                                         |    5
qa/1695.out                                     |    1
qa/1696                                         |    5
qa/1696.out                                     |    1
qa/1768                                         |    2
qa/623.out                                      |    6
qa/679.out                                      |    1
qa/admin/check-vm                               |   23 +
qa/admin/other-packages/require                 |    3
qa/admin/other-packages/skip                    |    2
qa/common.config                                |   21 -
qa/common.filter                                |    2
qa/group                                        |    4
qa/new                                          |    7
src/derived/cpu-util.conf                       |   20 +
src/libpcp/src/check-statics                    |    4
src/libpcp/src/derive.h                         |    3
src/libpcp/src/derive_parser.y.in               |  426 +++++++++++++++++++++---
src/libpcp/src/help.c                           |    9
src/libpcp/src/mk.exports                       |    2
src/libpcp/src/mk.pmdbg                         |    2
src/pcp/pcp.sh                                  |    2
src/pcp/shping/pcp-shping.sh                    |    2
src/pcp/summary/pcp-summary.sh                  |    2
src/pcp/vmstat/pcp-vmstat.sh                    |    2
src/pmafm/mkaf                                  |    2
src/pmafm/pmafm                                 |    2
src/pmcd/rc_pcp                                 |    2
src/pmcd/rc_pmcd                                |    2
src/pmchart/views/BusyCPU                       |    2
src/pmdas/infiniband/Install                    |    2
src/pmdas/infiniband/Remove                     |    2
src/pmdas/linux_proc/config.c                   |    2
src/pmdas/lustrecomm/Remove                     |    2
src/pmdas/weblog/Web.Allservers.pmchart         |    2
src/pmdas/weblog/Web.Perserver.Bytes.pmchart    |    2
src/pmdas/weblog/Web.Perserver.Requests.pmchart |    2
src/pmdas/weblog/server.sh                      |    2
src/pmfind/pmfind_check.sh                      |    2
src/pmgadgets/pmgcisco.sh                       |    2
src/pmgadgets/pmgcluster.sh                     |    2
src/pmgadgets/pmgshping.sh                      |    2
src/pmie/pmie2col.sh                            |    2
src/pmie/pmie_check.sh                          |    2
src/pmie/pmie_daily.sh                          |    2
src/pmie/rc_pmie                                |    4
src/pmieconf/xtractnames                        |    2
src/pmlogctl/pmlogctl.sh                        |    8
src/pmlogger/pmlogger_check.sh                  |    2
src/pmlogger/pmlogger_daily.sh                  |    2
src/pmlogger/pmlogger_daily_report.sh           |    2
src/pmlogger/pmlogger_merge.sh                  |    4
src/pmlogger/pmlogger_rewrite.sh                |    2
src/pmlogger/pmlogmv.sh                         |    2
src/pmlogger/rc_pmlogger                        |    4
src/pmlogger/utilproc.sh                        |    2
src/pmlogsummary/pmdiff.sh                      |    2
src/pmns/Make.stdpmid                           |    4
src/pmns/Rebuild                                |    2
src/pmns/pmnsadd                                |    2
src/pmproxy/rc_pmproxy                          |   19 -
src/pmsignal/pmsignal.sh                        |    2
src/pmsnap/pmsnap.sh                            |    2
76 files changed, 1118 insertions(+), 139 deletions(-)
Details ...
commit b0fd04b
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 11:44:54 2020 +1000
infiband and lustrecomm PMDAs: use $PCP_DIR as prefix to /etc/pcp.env

Fixes https://github.com/performancecopilot/pcp/issues/968

commit 41870dc
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 11:41:34 2020 +1000
src/libpcp/src/check-statics: bit over-enthusiastic with the pcp.XXXXXX changes

Need to use /tmp not $PCP_TMPFILE_DIR here.

commit 680b26d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 11:40:10 2020 +1000
qa/admin/check-vm: updates for Ubuntu 20.04

Continuation of the PCP build --without-python (2) changes for Ubunutu,
starting with version 20.04

commit 12729d9
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:56:56 2020 +1000
qa/1695 & 1696: ipv6 is optional ... filter out

commit fe72bff
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:54:43 2020 +1000
src/pmlogger/utilproc.sh: fix typo in last round of changes

-f-p => -f -p

Found by qa/630.

commit 4e2f0d7
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:50:44 2020 +1000
qa/1768: change to match recent temp file/dir name changes

commit 8660007
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:49:20 2020 +1000
qa/679.out: Warning: no archives found to merge moved to -V guard

Fallout from recent pmlogger_daily changes.

commit 291e423
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:48:31 2020 +1000
qa/031.out.linux: acct no longer appears in the output

commit b90fab4
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:47:47 2020 +1000
qa/common.filter: cull acct from top-level pmns

This won't be there on the non-linux platforms.

commit 7c6a10c
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:27:33 2020 +1000
qa/1199: fetch _every_ metric first

Force as many of the dynamic allocations in pmcd to happen as possible
before we go belting the context churn test looking for leaks.

Increase the batch for pminfo so this first step is a little faster.

commit f7d8155
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Jul 12 07:24:30 2020 +1000
qa/1102: openmetrics may NOT be installed at the beginning

Add filtering for initial Remove.

commit 466afbe
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 12:49:38 2020 +1000
src/pmproxy/rc_pmproxy: remove $tmp (dir) before exec

We were leaving behind /var/tmp/pcp.XXXXX (or after the most recent
change /var/tmp/pmproxy_rc.XXXXX) directories.

When using ""exec"" we cannot expect the old process' trap to clean up,
so need to do it explicitly before (each) exec.

commit 029add4
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 07:51:25 2020 +1000
src: cleanup temp file naming

- change pcp.XXXXXXX -> pm<something>.XXXXXXX or pcp-<something>.XXXXXX
  so we can see who's not cleaning up properly
- use $PCP_TMPFILE_DIR throughout for all temp files

commit dc1f309
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 07:12:47 2020 +1000
qa/common.config: bozo-vm now has a FQDN, cull some old junk

commit a51d17d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 07:10:21 2020 +1000
qa/new: tweak the preamble output to include args if any

Intended for use with --valgrind, as in qa/1236 and qa/1237.

commit 7c0c2ce
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 07:07:36 2020 +1000
qa: 1233, 1235, 1236, 1237 (all new) derived metric help text tests

Also demonstrates how to build a QA test for some functionality and
then easily wrap that same test in a valgrind test cloak (we want
both sorts of testing, but valgrind is not universally available).

commit 1f73f48
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 07:03:57 2020 +1000
Add help text support for derived metrics

This commit includes:
- libpcp changes
- man page
- help text for the kernel.cpu.util derived metrics (by way
  of an example, I'll leave it to the owners of the other
  derived metrics to add help text if they wish).

commit cbb40e2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 06:58:45 2020 +1000
qa/623.out: remade after -k 0 change to pmlogger_daily

Error message text is slightly different.

commit f98be11
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 06:57:40 2020 +1000
qa/1001: need _filter_views in one more place

commit 995fb50
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 11 06:57:02 2020 +1000
qa/common.filter: tweak _filter_views() for recent Qt warning",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,971,2020-07-13T04:23:58Z,2020-07-13T10:05:49Z,2020-07-13T10:05:49Z,MERGED,True,414,362,2,https://github.com/shogo-matsumoto,pmdaproc: make minor changes to acct,5,[],https://github.com/performancecopilot/pcp/pull/971,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/971,I've made some minor changes to pmdaproc(acct) based on the comments of #962.,I've made some minor changes to pmdaproc(acct) based on the comments of #962.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,972,2020-07-13T08:53:58Z,2020-07-13T10:35:05Z,2020-07-13T10:35:05Z,MERGED,True,0,7,1,https://github.com/winndows,pcp-atop: Remove superfluous breaks,1,[],https://github.com/performancecopilot/pcp/pull/972,https://github.com/winndows,1,https://github.com/performancecopilot/pcp/pull/972,"Remove superfuous breaks, as there is a 'return' before them.
Signed-off-by: Liao Pingfang liao.pingfang@zte.com.cn","Remove superfuous breaks, as there is a 'return' before them.
Signed-off-by: Liao Pingfang liao.pingfang@zte.com.cn",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,973,2020-07-13T11:07:45Z,2020-07-13T11:38:59Z,2020-07-13T11:38:59Z,MERGED,True,0,11,1,https://github.com/winndows,src/libpcp/src/derive_fetch.c: Remove superfluous breaks,1,[],https://github.com/performancecopilot/pcp/pull/973,https://github.com/winndows,1,https://github.com/performancecopilot/pcp/pull/973,"Remove superfuous breaks, as there is a 'return' before them.
Signed-off-by: Liao Pingfang liao.pingfang@zte.com.cn","Remove superfuous breaks, as there is a 'return' before them.
Signed-off-by: Liao Pingfang liao.pingfang@zte.com.cn",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,974,2020-07-13T11:13:36Z,2020-07-14T00:40:43Z,2020-07-14T00:40:43Z,MERGED,True,0,1,1,https://github.com/winndows,pmdaproc: Remove the superfluous break,1,[],https://github.com/performancecopilot/pcp/pull/974,https://github.com/winndows,1,https://github.com/performancecopilot/pcp/pull/974,"Remove the superfuous break, as there is a 'return' before it.
Signed-off-by: Liao Pingfang liao.pingfang@zte.com.cn","Remove the superfuous break, as there is a 'return' before it.
Signed-off-by: Liao Pingfang liao.pingfang@zte.com.cn",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,975,2020-07-14T06:31:31Z,2020-07-14T06:32:26Z,2020-07-14T06:32:26Z,MERGED,True,1,1,1,https://github.com/kmcdonell,pmdaproc fix,1,[],https://github.com/performancecopilot/pcp/pull/975,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/975,"Changes committed to git@github.com:kmcdonell/pcp.git 20200714
Ken McDonell (1):
sec/pmcd/pmdaproc.sh: silence derived metrics warnings from Remove
src/pmcd/pmdaproc.sh |    2 +-
1 file changed, 1 insertion(+), 1 deletion(-)
Details ...
commit affcfac
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 14 16:30:09 2020 +1000
sec/pmcd/pmdaproc.sh: silence derived metrics warnings from Remove","Changes committed to git@github.com:kmcdonell/pcp.git 20200714
Ken McDonell (1):
sec/pmcd/pmdaproc.sh: silence derived metrics warnings from Remove
src/pmcd/pmdaproc.sh |    2 +-
1 file changed, 1 insertion(+), 1 deletion(-)
Details ...
commit affcfac
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 14 16:30:09 2020 +1000
sec/pmcd/pmdaproc.sh: silence derived metrics warnings from Remove",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,976,2020-07-14T21:23:51Z,2020-07-14T21:26:15Z,2020-08-18T21:33:59Z,MERGED,True,1,0,1,https://github.com/kmcdonell,check exit status,1,[],https://github.com/performancecopilot/pcp/pull/976,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/976,"Changes committed to git@github.com:kmcdonell/pcp.git 20200714
Mark Goodwin (3):
qa/group: mark 1886 reserved until new code merged
selinux: allow pmdaxfs quotaget permissions
qa/917: update 917.out.in for new pmcd quotaget rule
Ken McDonell (2):
sec/pmcd/pmdaproc.sh: silence derived metrics warnings from Remove
qa/check: make exit status 1 if the run is aborted
Andreas Gerstmayr (1):
ci: add debug info for flaky centos8 build
build/ci/platforms/centos8.yml |    3 +++
qa/917.out.in                  |    1 +
qa/check                       |    1 +
qa/group                       |    2 +-
src/pmcd/pmdaproc.sh           |    2 +-
src/selinux/pcpupstream.te.in  |    6 +++++-
6 files changed, 12 insertions(+), 3 deletions(-)
Details ...
commit d5a53b5
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 15 07:23:00 2020 +1000
qa/check: make exit status 1 if the run is aborted

commit acc219f
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 14 22:04:47 2020 +1000
qa/917: update 917.out.in for new pmcd quotaget rule

commit 0ed5303
Author: Andreas Gerstmayr andreas@gerstmayr.me
Date:   Tue Jul 14 12:24:37 2020 +0200
ci: add debug info for flaky centos8 build

commit c32156c
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 14 18:23:33 2020 +1000
selinux: allow pmdaxfs quotaget permissions

The XFS PMDA needs quotaget permissions on F32 with kernel
5.7.8-200.fc32 or later and xfsprogs-5.4.0-3.fc32 or later.

qa/876 exercises the relevant XFS quota calls, and is now
passing again (on a system running the above kernel and
userland).

commit ff9feb4
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 14 18:20:53 2020 +1000
qa/group: mark 1886 reserved until new code merged

qa/1886 tests GSoC work to add expression evaluation to
the libpcp_web query language, which has not been merged
yet.

commit affcfac
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 14 16:30:09 2020 +1000
sec/pmcd/pmdaproc.sh: silence derived metrics warnings from Remove","Changes committed to git@github.com:kmcdonell/pcp.git 20200714
Mark Goodwin (3):
qa/group: mark 1886 reserved until new code merged
selinux: allow pmdaxfs quotaget permissions
qa/917: update 917.out.in for new pmcd quotaget rule
Ken McDonell (2):
sec/pmcd/pmdaproc.sh: silence derived metrics warnings from Remove
qa/check: make exit status 1 if the run is aborted
Andreas Gerstmayr (1):
ci: add debug info for flaky centos8 build
build/ci/platforms/centos8.yml |    3 +++
qa/917.out.in                  |    1 +
qa/check                       |    1 +
qa/group                       |    2 +-
src/pmcd/pmdaproc.sh           |    2 +-
src/selinux/pcpupstream.te.in  |    6 +++++-
6 files changed, 12 insertions(+), 3 deletions(-)
Details ...
commit d5a53b5
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 15 07:23:00 2020 +1000
qa/check: make exit status 1 if the run is aborted

commit acc219f
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 14 22:04:47 2020 +1000
qa/917: update 917.out.in for new pmcd quotaget rule

commit 0ed5303
Author: Andreas Gerstmayr andreas@gerstmayr.me
Date:   Tue Jul 14 12:24:37 2020 +0200
ci: add debug info for flaky centos8 build

commit c32156c
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 14 18:23:33 2020 +1000
selinux: allow pmdaxfs quotaget permissions

The XFS PMDA needs quotaget permissions on F32 with kernel
5.7.8-200.fc32 or later and xfsprogs-5.4.0-3.fc32 or later.

qa/876 exercises the relevant XFS quota calls, and is now
passing again (on a system running the above kernel and
userland).

commit ff9feb4
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 14 18:20:53 2020 +1000
qa/group: mark 1886 reserved until new code merged

qa/1886 tests GSoC work to add expression evaluation to
the libpcp_web query language, which has not been merged
yet.

commit affcfac
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 14 16:30:09 2020 +1000
sec/pmcd/pmdaproc.sh: silence derived metrics warnings from Remove",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,979,2020-07-20T02:22:00Z,2020-07-20T08:03:09Z,2020-07-20T08:03:09Z,MERGED,True,73,14,4,https://github.com/shogo-matsumoto,pmdaproc: acct: initialize acct file path with PCP_* variable and implement cleanup,1,[],https://github.com/performancecopilot/pcp/pull/979,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/979,"Related to:

#962
#969","Related to:

#962
#969",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,980,2020-07-20T22:57:17Z,2020-07-28T01:23:39Z,2020-08-18T21:34:04Z,MERGED,True,126,64,22,https://github.com/kmcdonell,remove systemd path services,14,[],https://github.com/performancecopilot/pcp/pull/980,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/980,"Changes committed to git@github.com:kmcdonell/pcp.git 20200720
Ken McDonell (12):
src/pmlogger/src/callback.c: change type of flushsize from int to off_t
src/pmlogger: remove systemd path services
src/pmie: remove systemd path services
src/pmlogger/src/callback.c: need printf change to match previous off_t change
src/pmfind: remove systemd path services
src/pmlogextract/logio.c: minor tidy up of the logic in one place
src/pmlogrewrite: minor cleanups
src/{pmie,pmlogger,pmfind}: need to remove ""path"" from associated service files as well
qa/1208: really cleanup (uncomment the rm!)
qa/1241 & 1244: (new) check ""flushsize"" updates to temporal index
qa/119: use -u pcp -g pcp for pmlogger_check execution & cosmetic change
src/pmlogger/pmlogger_check.sh: alternate strategy for finding primary logger's PID
Mark Goodwin (2):
logutil: fix pmlogger_daily merge failures, docs + QA testing
qa: minor remake tweaks for 679 and 929
Nathan Scott (1):
pmdaproc, qa: add initial regression test for acct metrics
Shogo Matsumoto (1):
pmdaproc: acct: initialize acct file path with PCP_* variable and implement cleanup
configure                              |    8 +
configure.ac                           |    7 -
man/man1/pmlogger_check.1              |   21 +++
man/man1/pmlogger_merge.1              |   20 +++
qa/119                                 |    8 -
qa/1208                                |    3
qa/1241                                |   46 ++++++++
qa/1241.out                            |    2
qa/1244                                |   42 +++++++
qa/1244.out                            |    2
qa/1740                                |   60 ++++++++++
qa/1740.out                            |   70 ++++++++++++
qa/679.out                             |    8 -
qa/929.out                             |    2
qa/group                               |    4
src/include/pcp.conf.in                |    8 +
src/pmdas/linux_proc/acct.c            |  161 ++++++++++++++++++++++------
src/pmdas/linux_proc/acct.h            |   25 ++++
src/pmdas/linux_proc/getinfo.c         |  105 ++++++++++++++++--
src/pmdas/linux_proc/getinfo.h         |    6 -
src/pmdas/linux_proc/help              |   42 ++++---
src/pmdas/linux_proc/indom.h           |    8 +
src/pmdas/linux_proc/pmda.c            |  185 ++++++++++++++++++++++-----------
src/pmdas/linux_proc/root_proc         |   30 ++++-
src/pmfind/GNUmakefile                 |    8 -
src/pmfind/pmfind.path.in              |    5
src/pmfind/pmfind.service.in           |    2
src/pmie/GNUmakefile                   |   10 -
src/pmie/pmie.service.in               |    4
src/pmie/pmie_check.path.in            |    6 -
src/pmlogextract/logio.c               |   10 -
src/pmlogger/GNUmakefile               |    8 -
src/pmlogger/pmlogger.service.in       |    4
src/pmlogger/pmlogger_check.path.in    |    6 -
src/pmlogger/pmlogger_check.sh         |    7 +
src/pmlogger/pmlogger_daily.service.in |    1
src/pmlogger/pmlogger_daily.sh         |   10 +
src/pmlogger/pmlogger_merge.sh         |   11 +
src/pmlogger/pmlogger_timers.sysconfig |    8 +
src/pmlogger/src/callback.c            |    4
src/pmlogrewrite/GNUmakefile           |    2
src/pmlogrewrite/logger.h              |    2
src/pmlogrewrite/logio.c               |    6 -
src/pmproxy/pmproxy.conf               |    4
44 files changed, 775 insertions(+), 216 deletions(-)
Details ...
commit e3e1b67
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 21 08:46:41 2020 +1000
src/pmlogger/pmlogger_check.sh: alternate strategy for finding primary logger's PID

If $PCP_RUN_DIR/pmlogger.pid does not exist, try symlink from
$PCP_TMP_DIR/pmlogger/primary -> <pid>.

Without this, qa/119 was sometimes failing ... not sure if this is
needed outside QA, but it cannot hurt, and it does further reduce
the chances of running more than one primary pmlogger (which is bad).

commit f8feb5d
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 21 08:45:01 2020 +1000
qa/119: use -u pcp -g pcp for pmlogger_check execution & cosmetic change

commit f4da65b
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 21 07:36:07 2020 +1000
qa/1241 & 1244: (new) check ""flushsize"" updates to temporal index

Make sure output archives have the same temporal index ""flushsize""
entries as created by pmlogger.

commit 0ac1448
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 21 07:07:16 2020 +1000
qa: minor remake tweaks for 679 and 929

commit ff52c63
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 21 05:51:32 2020 +1000
logutil: fix pmlogger_daily merge failures, docs + QA testing

Related: RHBZ#1541406 - ""After upgrading pcp, rewriting and merging of
older archives is not automatic""

Daily pmlogger_daily processing fails to merge archives that have
metadata inconsistencies (e.g. dynamic metric pmid changes), despite
prior pmlogrewrite processing. This is known to occur with metrics
such as kernel.percpu.interrupts.line* if there has been a reboot
between any two particular archives in the list of archives to be
merged. Also known to occur with some pmdaopenmetrics archives
when the pmda.openmetrics QA group has been run.

Improve this by adding the -E flag to pmlogger_daily and pmlogger_merge
to invoke pmlogextract with the -x flag, causing the offending metrics
to be dropped from the merged output archive, rather than have the daily
log processing fail, leaving a mess of unmerged archives in the pmlogger
directories.

Also update relevant man pages and set the default $PMLOGGER_DAILY_PARAMS
to ""-E"" if not overridden in pmlogger_timers.sysconfig.

QA passes for the logutil, pmda.openmetrics and other QA groups.
This has also been QA soak tested over several days in the presence
of assorted archives with deliberately inconsistent metadata.

commit 00638cf
Author: Nathan Scott nathans@redhat.com
Date:   Mon Jul 20 18:02:17 2020 +1000
pmdaproc, qa: add initial regression test for acct metrics

Several new metrics, optimizations and code refactoring as well.

- rename all acct.* metrics to match proc.* subsystems (id, psinfo)
- export new metrics for user and group names (like proc.*_nm)
- export a new ttyname metric (like proc.psinfo.ttyname)
- ensure we only request the timestamp once at the start of a fetch
  involving acct metrics, not once for each instance of each metric
- add caches for mapping user and group IDs to names; use these all
  throughout pmdaproc to avoid name lookup syscalls.
- add an optimization to ttyname resolution using /proc/tty/drivers
- add control metrics to expose some acct thresholds and intervals
- exclude acct.* metrics in pmproxy discovery as we do for proc.*
- tweak several acct.* metrics semantics to match proc.* equivalent
- make global PCP variable name consistent with system pacct path

Test qa/1740 is added to ensure instances and values are returned
when fetching the Linux acct metrics.  Hard to test anything with
any deterministic certainty here; the .full file keeps everything
though in case something goes wrong.

Related to https://github.com/performancecopilot/pcp/pull/962

commit c4552ec
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 17:24:29 2020 +1000
qa/1208: _really_ cleanup (uncomment the rm!)

commit 58eea08
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 14:04:54 2020 +1000
src/{pmie,pmlogger,pmfind}: need to remove ""path"" from associated service files as well

commit 61e49a3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:41:50 2020 +1000
src/pmlogrewrite: minor cleanups

- fix some cut-n-paste mistakes in commens from when some of this code
  was cloned from pmlogextract
- small diagnostic message format changes

commit b8bad35
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:40:06 2020 +1000
src/pmlogextract/logio.c: minor tidy up of the logic in one place

commit c12c82b
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:37:23 2020 +1000
src/pmfind: remove systemd path services

We're not going to use filesystem watchers for /etc/pcp/pmfind

commit 5cb3045
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:26:17 2020 +1000
src/pmlogger/src/callback.c: need printf change to match previous off_t change

commit 35c9843
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:22:51 2020 +1000
src/pmie: remove systemd path services

We're not going to use filesystem watchers for /etc/pcp/pmie/control*

commit 7d43270
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:19:52 2020 +1000
src/pmlogger: remove systemd path services

We're not going to use filesystem watchers for /etc/pcp/pmlogger/control*.

commit 6c6ce3f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:18:27 2020 +1000
src/pmlogger/src/callback.c: change type of flushsize from int to off_t

This is more correct.

commit 8334e5c
Author: Shogo Matsumoto shogo.matsumoto@fujitsu.com
Date:   Mon Jul 20 08:31:43 2020 +0900
pmdaproc: acct: initialize acct file path with PCP_* variable and implement cleanup","Changes committed to git@github.com:kmcdonell/pcp.git 20200720
Ken McDonell (12):
src/pmlogger/src/callback.c: change type of flushsize from int to off_t
src/pmlogger: remove systemd path services
src/pmie: remove systemd path services
src/pmlogger/src/callback.c: need printf change to match previous off_t change
src/pmfind: remove systemd path services
src/pmlogextract/logio.c: minor tidy up of the logic in one place
src/pmlogrewrite: minor cleanups
src/{pmie,pmlogger,pmfind}: need to remove ""path"" from associated service files as well
qa/1208: really cleanup (uncomment the rm!)
qa/1241 & 1244: (new) check ""flushsize"" updates to temporal index
qa/119: use -u pcp -g pcp for pmlogger_check execution & cosmetic change
src/pmlogger/pmlogger_check.sh: alternate strategy for finding primary logger's PID
Mark Goodwin (2):
logutil: fix pmlogger_daily merge failures, docs + QA testing
qa: minor remake tweaks for 679 and 929
Nathan Scott (1):
pmdaproc, qa: add initial regression test for acct metrics
Shogo Matsumoto (1):
pmdaproc: acct: initialize acct file path with PCP_* variable and implement cleanup
configure                              |    8 +
configure.ac                           |    7 -
man/man1/pmlogger_check.1              |   21 +++
man/man1/pmlogger_merge.1              |   20 +++
qa/119                                 |    8 -
qa/1208                                |    3
qa/1241                                |   46 ++++++++
qa/1241.out                            |    2
qa/1244                                |   42 +++++++
qa/1244.out                            |    2
qa/1740                                |   60 ++++++++++
qa/1740.out                            |   70 ++++++++++++
qa/679.out                             |    8 -
qa/929.out                             |    2
qa/group                               |    4
src/include/pcp.conf.in                |    8 +
src/pmdas/linux_proc/acct.c            |  161 ++++++++++++++++++++++------
src/pmdas/linux_proc/acct.h            |   25 ++++
src/pmdas/linux_proc/getinfo.c         |  105 ++++++++++++++++--
src/pmdas/linux_proc/getinfo.h         |    6 -
src/pmdas/linux_proc/help              |   42 ++++---
src/pmdas/linux_proc/indom.h           |    8 +
src/pmdas/linux_proc/pmda.c            |  185 ++++++++++++++++++++++-----------
src/pmdas/linux_proc/root_proc         |   30 ++++-
src/pmfind/GNUmakefile                 |    8 -
src/pmfind/pmfind.path.in              |    5
src/pmfind/pmfind.service.in           |    2
src/pmie/GNUmakefile                   |   10 -
src/pmie/pmie.service.in               |    4
src/pmie/pmie_check.path.in            |    6 -
src/pmlogextract/logio.c               |   10 -
src/pmlogger/GNUmakefile               |    8 -
src/pmlogger/pmlogger.service.in       |    4
src/pmlogger/pmlogger_check.path.in    |    6 -
src/pmlogger/pmlogger_check.sh         |    7 +
src/pmlogger/pmlogger_daily.service.in |    1
src/pmlogger/pmlogger_daily.sh         |   10 +
src/pmlogger/pmlogger_merge.sh         |   11 +
src/pmlogger/pmlogger_timers.sysconfig |    8 +
src/pmlogger/src/callback.c            |    4
src/pmlogrewrite/GNUmakefile           |    2
src/pmlogrewrite/logger.h              |    2
src/pmlogrewrite/logio.c               |    6 -
src/pmproxy/pmproxy.conf               |    4
44 files changed, 775 insertions(+), 216 deletions(-)
Details ...
commit e3e1b67
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 21 08:46:41 2020 +1000
src/pmlogger/pmlogger_check.sh: alternate strategy for finding primary logger's PID

If $PCP_RUN_DIR/pmlogger.pid does not exist, try symlink from
$PCP_TMP_DIR/pmlogger/primary -> <pid>.

Without this, qa/119 was sometimes failing ... not sure if this is
needed outside QA, but it cannot hurt, and it does further reduce
the chances of running more than one primary pmlogger (which is bad).

commit f8feb5d
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 21 08:45:01 2020 +1000
qa/119: use -u pcp -g pcp for pmlogger_check execution & cosmetic change

commit f4da65b
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 21 07:36:07 2020 +1000
qa/1241 & 1244: (new) check ""flushsize"" updates to temporal index

Make sure output archives have the same temporal index ""flushsize""
entries as created by pmlogger.

commit 0ac1448
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 21 07:07:16 2020 +1000
qa: minor remake tweaks for 679 and 929

commit ff52c63
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 21 05:51:32 2020 +1000
logutil: fix pmlogger_daily merge failures, docs + QA testing

Related: RHBZ#1541406 - ""After upgrading pcp, rewriting and merging of
older archives is not automatic""

Daily pmlogger_daily processing fails to merge archives that have
metadata inconsistencies (e.g. dynamic metric pmid changes), despite
prior pmlogrewrite processing. This is known to occur with metrics
such as kernel.percpu.interrupts.line* if there has been a reboot
between any two particular archives in the list of archives to be
merged. Also known to occur with some pmdaopenmetrics archives
when the pmda.openmetrics QA group has been run.

Improve this by adding the -E flag to pmlogger_daily and pmlogger_merge
to invoke pmlogextract with the -x flag, causing the offending metrics
to be dropped from the merged output archive, rather than have the daily
log processing fail, leaving a mess of unmerged archives in the pmlogger
directories.

Also update relevant man pages and set the default $PMLOGGER_DAILY_PARAMS
to ""-E"" if not overridden in pmlogger_timers.sysconfig.

QA passes for the logutil, pmda.openmetrics and other QA groups.
This has also been QA soak tested over several days in the presence
of assorted archives with deliberately inconsistent metadata.

commit 00638cf
Author: Nathan Scott nathans@redhat.com
Date:   Mon Jul 20 18:02:17 2020 +1000
pmdaproc, qa: add initial regression test for acct metrics

Several new metrics, optimizations and code refactoring as well.

- rename all acct.* metrics to match proc.* subsystems (id, psinfo)
- export new metrics for user and group names (like proc.*_nm)
- export a new ttyname metric (like proc.psinfo.ttyname)
- ensure we only request the timestamp once at the start of a fetch
  involving acct metrics, not once for each instance of each metric
- add caches for mapping user and group IDs to names; use these all
  throughout pmdaproc to avoid name lookup syscalls.
- add an optimization to ttyname resolution using /proc/tty/drivers
- add control metrics to expose some acct thresholds and intervals
- exclude acct.* metrics in pmproxy discovery as we do for proc.*
- tweak several acct.* metrics semantics to match proc.* equivalent
- make global PCP variable name consistent with system pacct path

Test qa/1740 is added to ensure instances and values are returned
when fetching the Linux acct metrics.  Hard to test anything with
any deterministic certainty here; the .full file keeps everything
though in case something goes wrong.

Related to https://github.com/performancecopilot/pcp/pull/962

commit c4552ec
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 17:24:29 2020 +1000
qa/1208: _really_ cleanup (uncomment the rm!)

commit 58eea08
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 14:04:54 2020 +1000
src/{pmie,pmlogger,pmfind}: need to remove ""path"" from associated service files as well

commit 61e49a3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:41:50 2020 +1000
src/pmlogrewrite: minor cleanups

- fix some cut-n-paste mistakes in commens from when some of this code
  was cloned from pmlogextract
- small diagnostic message format changes

commit b8bad35
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:40:06 2020 +1000
src/pmlogextract/logio.c: minor tidy up of the logic in one place

commit c12c82b
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:37:23 2020 +1000
src/pmfind: remove systemd path services

We're not going to use filesystem watchers for /etc/pcp/pmfind

commit 5cb3045
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:26:17 2020 +1000
src/pmlogger/src/callback.c: need printf change to match previous off_t change

commit 35c9843
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:22:51 2020 +1000
src/pmie: remove systemd path services

We're not going to use filesystem watchers for /etc/pcp/pmie/control*

commit 7d43270
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:19:52 2020 +1000
src/pmlogger: remove systemd path services

We're not going to use filesystem watchers for /etc/pcp/pmlogger/control*.

commit 6c6ce3f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:18:27 2020 +1000
src/pmlogger/src/callback.c: change type of flushsize from int to off_t

This is more correct.

commit 8334e5c
Author: Shogo Matsumoto shogo.matsumoto@fujitsu.com
Date:   Mon Jul 20 08:31:43 2020 +0900
pmdaproc: acct: initialize acct file path with PCP_* variable and implement cleanup",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,980,2020-07-20T22:57:17Z,2020-07-28T01:23:39Z,2020-08-18T21:34:04Z,MERGED,True,126,64,22,https://github.com/kmcdonell,remove systemd path services,14,[],https://github.com/performancecopilot/pcp/pull/980,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/980#issuecomment-661412321,"Changes committed to git@github.com:kmcdonell/pcp.git 20200720
Ken McDonell (12):
src/pmlogger/src/callback.c: change type of flushsize from int to off_t
src/pmlogger: remove systemd path services
src/pmie: remove systemd path services
src/pmlogger/src/callback.c: need printf change to match previous off_t change
src/pmfind: remove systemd path services
src/pmlogextract/logio.c: minor tidy up of the logic in one place
src/pmlogrewrite: minor cleanups
src/{pmie,pmlogger,pmfind}: need to remove ""path"" from associated service files as well
qa/1208: really cleanup (uncomment the rm!)
qa/1241 & 1244: (new) check ""flushsize"" updates to temporal index
qa/119: use -u pcp -g pcp for pmlogger_check execution & cosmetic change
src/pmlogger/pmlogger_check.sh: alternate strategy for finding primary logger's PID
Mark Goodwin (2):
logutil: fix pmlogger_daily merge failures, docs + QA testing
qa: minor remake tweaks for 679 and 929
Nathan Scott (1):
pmdaproc, qa: add initial regression test for acct metrics
Shogo Matsumoto (1):
pmdaproc: acct: initialize acct file path with PCP_* variable and implement cleanup
configure                              |    8 +
configure.ac                           |    7 -
man/man1/pmlogger_check.1              |   21 +++
man/man1/pmlogger_merge.1              |   20 +++
qa/119                                 |    8 -
qa/1208                                |    3
qa/1241                                |   46 ++++++++
qa/1241.out                            |    2
qa/1244                                |   42 +++++++
qa/1244.out                            |    2
qa/1740                                |   60 ++++++++++
qa/1740.out                            |   70 ++++++++++++
qa/679.out                             |    8 -
qa/929.out                             |    2
qa/group                               |    4
src/include/pcp.conf.in                |    8 +
src/pmdas/linux_proc/acct.c            |  161 ++++++++++++++++++++++------
src/pmdas/linux_proc/acct.h            |   25 ++++
src/pmdas/linux_proc/getinfo.c         |  105 ++++++++++++++++--
src/pmdas/linux_proc/getinfo.h         |    6 -
src/pmdas/linux_proc/help              |   42 ++++---
src/pmdas/linux_proc/indom.h           |    8 +
src/pmdas/linux_proc/pmda.c            |  185 ++++++++++++++++++++++-----------
src/pmdas/linux_proc/root_proc         |   30 ++++-
src/pmfind/GNUmakefile                 |    8 -
src/pmfind/pmfind.path.in              |    5
src/pmfind/pmfind.service.in           |    2
src/pmie/GNUmakefile                   |   10 -
src/pmie/pmie.service.in               |    4
src/pmie/pmie_check.path.in            |    6 -
src/pmlogextract/logio.c               |   10 -
src/pmlogger/GNUmakefile               |    8 -
src/pmlogger/pmlogger.service.in       |    4
src/pmlogger/pmlogger_check.path.in    |    6 -
src/pmlogger/pmlogger_check.sh         |    7 +
src/pmlogger/pmlogger_daily.service.in |    1
src/pmlogger/pmlogger_daily.sh         |   10 +
src/pmlogger/pmlogger_merge.sh         |   11 +
src/pmlogger/pmlogger_timers.sysconfig |    8 +
src/pmlogger/src/callback.c            |    4
src/pmlogrewrite/GNUmakefile           |    2
src/pmlogrewrite/logger.h              |    2
src/pmlogrewrite/logio.c               |    6 -
src/pmproxy/pmproxy.conf               |    4
44 files changed, 775 insertions(+), 216 deletions(-)
Details ...
commit e3e1b67
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 21 08:46:41 2020 +1000
src/pmlogger/pmlogger_check.sh: alternate strategy for finding primary logger's PID

If $PCP_RUN_DIR/pmlogger.pid does not exist, try symlink from
$PCP_TMP_DIR/pmlogger/primary -> <pid>.

Without this, qa/119 was sometimes failing ... not sure if this is
needed outside QA, but it cannot hurt, and it does further reduce
the chances of running more than one primary pmlogger (which is bad).

commit f8feb5d
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 21 08:45:01 2020 +1000
qa/119: use -u pcp -g pcp for pmlogger_check execution & cosmetic change

commit f4da65b
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 21 07:36:07 2020 +1000
qa/1241 & 1244: (new) check ""flushsize"" updates to temporal index

Make sure output archives have the same temporal index ""flushsize""
entries as created by pmlogger.

commit 0ac1448
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 21 07:07:16 2020 +1000
qa: minor remake tweaks for 679 and 929

commit ff52c63
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 21 05:51:32 2020 +1000
logutil: fix pmlogger_daily merge failures, docs + QA testing

Related: RHBZ#1541406 - ""After upgrading pcp, rewriting and merging of
older archives is not automatic""

Daily pmlogger_daily processing fails to merge archives that have
metadata inconsistencies (e.g. dynamic metric pmid changes), despite
prior pmlogrewrite processing. This is known to occur with metrics
such as kernel.percpu.interrupts.line* if there has been a reboot
between any two particular archives in the list of archives to be
merged. Also known to occur with some pmdaopenmetrics archives
when the pmda.openmetrics QA group has been run.

Improve this by adding the -E flag to pmlogger_daily and pmlogger_merge
to invoke pmlogextract with the -x flag, causing the offending metrics
to be dropped from the merged output archive, rather than have the daily
log processing fail, leaving a mess of unmerged archives in the pmlogger
directories.

Also update relevant man pages and set the default $PMLOGGER_DAILY_PARAMS
to ""-E"" if not overridden in pmlogger_timers.sysconfig.

QA passes for the logutil, pmda.openmetrics and other QA groups.
This has also been QA soak tested over several days in the presence
of assorted archives with deliberately inconsistent metadata.

commit 00638cf
Author: Nathan Scott nathans@redhat.com
Date:   Mon Jul 20 18:02:17 2020 +1000
pmdaproc, qa: add initial regression test for acct metrics

Several new metrics, optimizations and code refactoring as well.

- rename all acct.* metrics to match proc.* subsystems (id, psinfo)
- export new metrics for user and group names (like proc.*_nm)
- export a new ttyname metric (like proc.psinfo.ttyname)
- ensure we only request the timestamp once at the start of a fetch
  involving acct metrics, not once for each instance of each metric
- add caches for mapping user and group IDs to names; use these all
  throughout pmdaproc to avoid name lookup syscalls.
- add an optimization to ttyname resolution using /proc/tty/drivers
- add control metrics to expose some acct thresholds and intervals
- exclude acct.* metrics in pmproxy discovery as we do for proc.*
- tweak several acct.* metrics semantics to match proc.* equivalent
- make global PCP variable name consistent with system pacct path

Test qa/1740 is added to ensure instances and values are returned
when fetching the Linux acct metrics.  Hard to test anything with
any deterministic certainty here; the .full file keeps everything
though in case something goes wrong.

Related to https://github.com/performancecopilot/pcp/pull/962

commit c4552ec
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 17:24:29 2020 +1000
qa/1208: _really_ cleanup (uncomment the rm!)

commit 58eea08
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 14:04:54 2020 +1000
src/{pmie,pmlogger,pmfind}: need to remove ""path"" from associated service files as well

commit 61e49a3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:41:50 2020 +1000
src/pmlogrewrite: minor cleanups

- fix some cut-n-paste mistakes in commens from when some of this code
  was cloned from pmlogextract
- small diagnostic message format changes

commit b8bad35
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:40:06 2020 +1000
src/pmlogextract/logio.c: minor tidy up of the logic in one place

commit c12c82b
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:37:23 2020 +1000
src/pmfind: remove systemd path services

We're not going to use filesystem watchers for /etc/pcp/pmfind

commit 5cb3045
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:26:17 2020 +1000
src/pmlogger/src/callback.c: need printf change to match previous off_t change

commit 35c9843
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:22:51 2020 +1000
src/pmie: remove systemd path services

We're not going to use filesystem watchers for /etc/pcp/pmie/control*

commit 7d43270
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:19:52 2020 +1000
src/pmlogger: remove systemd path services

We're not going to use filesystem watchers for /etc/pcp/pmlogger/control*.

commit 6c6ce3f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:18:27 2020 +1000
src/pmlogger/src/callback.c: change type of flushsize from int to off_t

This is more correct.

commit 8334e5c
Author: Shogo Matsumoto shogo.matsumoto@fujitsu.com
Date:   Mon Jul 20 08:31:43 2020 +0900
pmdaproc: acct: initialize acct file path with PCP_* variable and implement cleanup","This gets the path services removed.  It passes a full QA on Ubuntu 20.04.
There will be another batch of commits to splice pmfind_check into pmlogctl, once a couple of design/spec issues have been resolved.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,980,2020-07-20T22:57:17Z,2020-07-28T01:23:39Z,2020-08-18T21:34:04Z,MERGED,True,126,64,22,https://github.com/kmcdonell,remove systemd path services,14,[],https://github.com/performancecopilot/pcp/pull/980,https://github.com/kmcdonell,3,https://github.com/performancecopilot/pcp/pull/980#issuecomment-664721724,"Changes committed to git@github.com:kmcdonell/pcp.git 20200720
Ken McDonell (12):
src/pmlogger/src/callback.c: change type of flushsize from int to off_t
src/pmlogger: remove systemd path services
src/pmie: remove systemd path services
src/pmlogger/src/callback.c: need printf change to match previous off_t change
src/pmfind: remove systemd path services
src/pmlogextract/logio.c: minor tidy up of the logic in one place
src/pmlogrewrite: minor cleanups
src/{pmie,pmlogger,pmfind}: need to remove ""path"" from associated service files as well
qa/1208: really cleanup (uncomment the rm!)
qa/1241 & 1244: (new) check ""flushsize"" updates to temporal index
qa/119: use -u pcp -g pcp for pmlogger_check execution & cosmetic change
src/pmlogger/pmlogger_check.sh: alternate strategy for finding primary logger's PID
Mark Goodwin (2):
logutil: fix pmlogger_daily merge failures, docs + QA testing
qa: minor remake tweaks for 679 and 929
Nathan Scott (1):
pmdaproc, qa: add initial regression test for acct metrics
Shogo Matsumoto (1):
pmdaproc: acct: initialize acct file path with PCP_* variable and implement cleanup
configure                              |    8 +
configure.ac                           |    7 -
man/man1/pmlogger_check.1              |   21 +++
man/man1/pmlogger_merge.1              |   20 +++
qa/119                                 |    8 -
qa/1208                                |    3
qa/1241                                |   46 ++++++++
qa/1241.out                            |    2
qa/1244                                |   42 +++++++
qa/1244.out                            |    2
qa/1740                                |   60 ++++++++++
qa/1740.out                            |   70 ++++++++++++
qa/679.out                             |    8 -
qa/929.out                             |    2
qa/group                               |    4
src/include/pcp.conf.in                |    8 +
src/pmdas/linux_proc/acct.c            |  161 ++++++++++++++++++++++------
src/pmdas/linux_proc/acct.h            |   25 ++++
src/pmdas/linux_proc/getinfo.c         |  105 ++++++++++++++++--
src/pmdas/linux_proc/getinfo.h         |    6 -
src/pmdas/linux_proc/help              |   42 ++++---
src/pmdas/linux_proc/indom.h           |    8 +
src/pmdas/linux_proc/pmda.c            |  185 ++++++++++++++++++++++-----------
src/pmdas/linux_proc/root_proc         |   30 ++++-
src/pmfind/GNUmakefile                 |    8 -
src/pmfind/pmfind.path.in              |    5
src/pmfind/pmfind.service.in           |    2
src/pmie/GNUmakefile                   |   10 -
src/pmie/pmie.service.in               |    4
src/pmie/pmie_check.path.in            |    6 -
src/pmlogextract/logio.c               |   10 -
src/pmlogger/GNUmakefile               |    8 -
src/pmlogger/pmlogger.service.in       |    4
src/pmlogger/pmlogger_check.path.in    |    6 -
src/pmlogger/pmlogger_check.sh         |    7 +
src/pmlogger/pmlogger_daily.service.in |    1
src/pmlogger/pmlogger_daily.sh         |   10 +
src/pmlogger/pmlogger_merge.sh         |   11 +
src/pmlogger/pmlogger_timers.sysconfig |    8 +
src/pmlogger/src/callback.c            |    4
src/pmlogrewrite/GNUmakefile           |    2
src/pmlogrewrite/logger.h              |    2
src/pmlogrewrite/logio.c               |    6 -
src/pmproxy/pmproxy.conf               |    4
44 files changed, 775 insertions(+), 216 deletions(-)
Details ...
commit e3e1b67
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 21 08:46:41 2020 +1000
src/pmlogger/pmlogger_check.sh: alternate strategy for finding primary logger's PID

If $PCP_RUN_DIR/pmlogger.pid does not exist, try symlink from
$PCP_TMP_DIR/pmlogger/primary -> <pid>.

Without this, qa/119 was sometimes failing ... not sure if this is
needed outside QA, but it cannot hurt, and it does further reduce
the chances of running more than one primary pmlogger (which is bad).

commit f8feb5d
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 21 08:45:01 2020 +1000
qa/119: use -u pcp -g pcp for pmlogger_check execution & cosmetic change

commit f4da65b
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 21 07:36:07 2020 +1000
qa/1241 & 1244: (new) check ""flushsize"" updates to temporal index

Make sure output archives have the same temporal index ""flushsize""
entries as created by pmlogger.

commit 0ac1448
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 21 07:07:16 2020 +1000
qa: minor remake tweaks for 679 and 929

commit ff52c63
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Jul 21 05:51:32 2020 +1000
logutil: fix pmlogger_daily merge failures, docs + QA testing

Related: RHBZ#1541406 - ""After upgrading pcp, rewriting and merging of
older archives is not automatic""

Daily pmlogger_daily processing fails to merge archives that have
metadata inconsistencies (e.g. dynamic metric pmid changes), despite
prior pmlogrewrite processing. This is known to occur with metrics
such as kernel.percpu.interrupts.line* if there has been a reboot
between any two particular archives in the list of archives to be
merged. Also known to occur with some pmdaopenmetrics archives
when the pmda.openmetrics QA group has been run.

Improve this by adding the -E flag to pmlogger_daily and pmlogger_merge
to invoke pmlogextract with the -x flag, causing the offending metrics
to be dropped from the merged output archive, rather than have the daily
log processing fail, leaving a mess of unmerged archives in the pmlogger
directories.

Also update relevant man pages and set the default $PMLOGGER_DAILY_PARAMS
to ""-E"" if not overridden in pmlogger_timers.sysconfig.

QA passes for the logutil, pmda.openmetrics and other QA groups.
This has also been QA soak tested over several days in the presence
of assorted archives with deliberately inconsistent metadata.

commit 00638cf
Author: Nathan Scott nathans@redhat.com
Date:   Mon Jul 20 18:02:17 2020 +1000
pmdaproc, qa: add initial regression test for acct metrics

Several new metrics, optimizations and code refactoring as well.

- rename all acct.* metrics to match proc.* subsystems (id, psinfo)
- export new metrics for user and group names (like proc.*_nm)
- export a new ttyname metric (like proc.psinfo.ttyname)
- ensure we only request the timestamp once at the start of a fetch
  involving acct metrics, not once for each instance of each metric
- add caches for mapping user and group IDs to names; use these all
  throughout pmdaproc to avoid name lookup syscalls.
- add an optimization to ttyname resolution using /proc/tty/drivers
- add control metrics to expose some acct thresholds and intervals
- exclude acct.* metrics in pmproxy discovery as we do for proc.*
- tweak several acct.* metrics semantics to match proc.* equivalent
- make global PCP variable name consistent with system pacct path

Test qa/1740 is added to ensure instances and values are returned
when fetching the Linux acct metrics.  Hard to test anything with
any deterministic certainty here; the .full file keeps everything
though in case something goes wrong.

Related to https://github.com/performancecopilot/pcp/pull/962

commit c4552ec
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 17:24:29 2020 +1000
qa/1208: _really_ cleanup (uncomment the rm!)

commit 58eea08
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 14:04:54 2020 +1000
src/{pmie,pmlogger,pmfind}: need to remove ""path"" from associated service files as well

commit 61e49a3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:41:50 2020 +1000
src/pmlogrewrite: minor cleanups

- fix some cut-n-paste mistakes in commens from when some of this code
  was cloned from pmlogextract
- small diagnostic message format changes

commit b8bad35
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:40:06 2020 +1000
src/pmlogextract/logio.c: minor tidy up of the logic in one place

commit c12c82b
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:37:23 2020 +1000
src/pmfind: remove systemd path services

We're not going to use filesystem watchers for /etc/pcp/pmfind

commit 5cb3045
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:26:17 2020 +1000
src/pmlogger/src/callback.c: need printf change to match previous off_t change

commit 35c9843
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:22:51 2020 +1000
src/pmie: remove systemd path services

We're not going to use filesystem watchers for /etc/pcp/pmie/control*

commit 7d43270
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:19:52 2020 +1000
src/pmlogger: remove systemd path services

We're not going to use filesystem watchers for /etc/pcp/pmlogger/control*.

commit 6c6ce3f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 20 13:18:27 2020 +1000
src/pmlogger/src/callback.c: change type of flushsize from int to off_t

This is more correct.

commit 8334e5c
Author: Shogo Matsumoto shogo.matsumoto@fujitsu.com
Date:   Mon Jul 20 08:31:43 2020 +0900
pmdaproc: acct: initialize acct file path with PCP_* variable and implement cleanup","Nathan thought this had been merges last week, but it had not ... hence the conflict with Mark's docker crontab fix.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,981,2020-07-21T17:58:14Z,2020-07-23T12:00:32Z,2020-09-21T15:48:19Z,MERGED,True,265,1,7,https://github.com/andreasgerstmayr,pmdaproc: add cgroup.memory.current metric (cgroup v2),1,[],https://github.com/performancecopilot/pcp/pull/981,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/981,"I wasn't sure about the numbering - in the cgroups.h there are cgroup v2 metrics with a lower number than some cgroup v1 metrics - how did you know 5 years back that 8 months back you will add some other cgroup v2 metrics there? 😮 [1]
I gave it the number 90 now and a new block, but can change that if there's a system which I should follow.
[1] e3c7ea1#diff-23194b027d3722a739170dfbb2f9d940R117","I wasn't sure about the numbering - in the cgroups.h there are cgroup v2 metrics with a lower number than some cgroup v1 metrics - how did you know 5 years back that 8 months back you will add some other cgroup v2 metrics there? 😮 [1]
I gave it the number 90 now and a new block, but can change that if there's a system which I should follow.
[1] e3c7ea1#diff-23194b027d3722a739170dfbb2f9d940R117",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,981,2020-07-21T17:58:14Z,2020-07-23T12:00:32Z,2020-09-21T15:48:19Z,MERGED,True,265,1,7,https://github.com/andreasgerstmayr,pmdaproc: add cgroup.memory.current metric (cgroup v2),1,[],https://github.com/performancecopilot/pcp/pull/981,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/981#issuecomment-662846706,"I wasn't sure about the numbering - in the cgroups.h there are cgroup v2 metrics with a lower number than some cgroup v1 metrics - how did you know 5 years back that 8 months back you will add some other cgroup v2 metrics there? 😮 [1]
I gave it the number 90 now and a new block, but can change that if there's a system which I should follow.
[1] e3c7ea1#diff-23194b027d3722a739170dfbb2f9d940R117","I wasn't sure about the numbering - in the cgroups.h there are cgroup v2 metrics with a lower number than some cgroup v1 metrics - how did you know 5 years back that 8 months back you will add some other cgroup v2 metrics there?

Heh, mate I can barely remember what I was doing yesterday, there's no chance I can remember 5 years back.  :)

I gave it the number 90 now and a new block, but can change that if there's a system which I should follow.

LGTM.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,982,2020-07-23T10:23:25Z,2020-11-12T19:58:37Z,2020-11-12T19:58:38Z,CLOSED,False,36,11752,24,https://github.com/arzoo14,pcp uag book - improved diagrams,3,[],https://github.com/performancecopilot/pcp/pull/982,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/982,This PR improves all the diagrams of Performance Co-Pilot User's and Administrator's Guide book.,This PR improves all the diagrams of Performance Co-Pilot User's and Administrator's Guide book.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,982,2020-07-23T10:23:25Z,2020-11-12T19:58:37Z,2020-11-12T19:58:38Z,CLOSED,False,36,11752,24,https://github.com/arzoo14,pcp uag book - improved diagrams,3,[],https://github.com/performancecopilot/pcp/pull/982,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/982#issuecomment-663307061,This PR improves all the diagrams of Performance Co-Pilot User's and Administrator's Guide book.,"This PR improves all the diagrams of Performance Co-Pilot User's and Administrator's Guide book.

@arzoo14 thanks.  Can you give a summary of the changes?  From what I can see there are now drop-shadows and several other little improvements - could you list them out explicitly?
One thing I'd like to see is a bit of colour, and less black-and-white - without going crazy.  It'd be good to introduce colour and ensure a consistent font is used throughout, that will match with the colours and fonts used on the pcp.io website.  You'll want to create a colour pallette based on the content there (see the pcp-website git repo).
Maybe also do further research into tips for good technical diagrams, eg https://creately.com/blog/diagrams/create-awesome-diagrams/",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,982,2020-07-23T10:23:25Z,2020-11-12T19:58:37Z,2020-11-12T19:58:38Z,CLOSED,False,36,11752,24,https://github.com/arzoo14,pcp uag book - improved diagrams,3,[],https://github.com/performancecopilot/pcp/pull/982,https://github.com/arzoo14,3,https://github.com/performancecopilot/pcp/pull/982#issuecomment-664292973,This PR improves all the diagrams of Performance Co-Pilot User's and Administrator's Guide book.,"@arzoo14 thanks. Can you give a summary of the changes? From what I can see there are now drop-shadows and several other little improvements - could you list them out explicitly?
One thing I'd like to see is a bit of colour, and less black-and-white - without going crazy. It'd be good to introduce colour and ensure a consistent font is used throughout, that will match with the colours and fonts used on the pcp.io website. You'll want to create a colour pallette based on the content there (see the pcp-website git repo).
Maybe also do further research into tips for good technical diagrams, eg https://creately.com/blog/diagrams/create-awesome-diagrams/

@natoscott Following changes are made in the figures (in this PR):

Shadow of the shapes.
Color/font as per pcp.io website.
Proper Scaling.
Consistency (same font, same font size, same color palette, same size of the shapes) throughout the figures.
Improvements in arrow heads.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,982,2020-07-23T10:23:25Z,2020-11-12T19:58:37Z,2020-11-12T19:58:38Z,CLOSED,False,36,11752,24,https://github.com/arzoo14,pcp uag book - improved diagrams,3,[],https://github.com/performancecopilot/pcp/pull/982,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/982#issuecomment-668990480,This PR improves all the diagrams of Performance Co-Pilot User's and Administrator's Guide book.,"@arzoo14 thanks for those notes and the introduction of colour looks good!
The font seems to be different to that we've used throughout the pcp.io website though - can you match that up?  It will be somewhere in the github.com/performancecopilot/pcp-website.git repo, below the 'assets' directory from memory - assets/css/libs/_settings.scss looks like the source of truth?
It'd be worth going through the contents of the 'stock-images' directory there too - that's another source of images we'll want to keep in-sync, and consistent with the overall pallette.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,982,2020-07-23T10:23:25Z,2020-11-12T19:58:37Z,2020-11-12T19:58:38Z,CLOSED,False,36,11752,24,https://github.com/arzoo14,pcp uag book - improved diagrams,3,[],https://github.com/performancecopilot/pcp/pull/982,https://github.com/arzoo14,5,https://github.com/performancecopilot/pcp/pull/982#issuecomment-726307669,This PR improves all the diagrams of Performance Co-Pilot User's and Administrator's Guide book.,"@natoscott
I have made the requested changes.
Closing this in #1142",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,983,2020-07-23T22:49:31Z,2020-08-19T05:33:47Z,2020-08-19T05:33:47Z,CLOSED,False,77362,0,246,https://github.com/haoweiqiu,docs: Convert docbook content to readthedocs and reStructuredText format,3,[],https://github.com/performancecopilot/pcp/pull/983,https://github.com/haoweiqiu,1,https://github.com/performancecopilot/pcp/pull/983,"This PR partially resolves issue #665 and #666.
The ReadtheDocs link is: https://pcp-docs.readthedocs.io","This PR partially resolves issue #665 and #666.
The ReadtheDocs link is: https://pcp-docs.readthedocs.io",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,983,2020-07-23T22:49:31Z,2020-08-19T05:33:47Z,2020-08-19T05:33:47Z,CLOSED,False,77362,0,246,https://github.com/haoweiqiu,docs: Convert docbook content to readthedocs and reStructuredText format,3,[],https://github.com/performancecopilot/pcp/pull/983,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/983#issuecomment-675861378,"This PR partially resolves issue #665 and #666.
The ReadtheDocs link is: https://pcp-docs.readthedocs.io","Discussing with @arzoo14 he's planning to tackle this differently, making separate rst files for every chapter.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,984,2020-07-27T02:29:58Z,2020-07-30T06:31:19Z,2020-07-30T06:31:19Z,MERGED,True,146,33,4,https://github.com/shogo-matsumoto,pmdaproc: acct: correct comp_t values and implement pmstore for acct parameters,3,[],https://github.com/performancecopilot/pcp/pull/984,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/984,Related to: #962,Related to: #962,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,985,2020-07-28T00:49:18Z,2020-07-30T05:48:25Z,2020-08-18T21:25:33Z,MERGED,True,2229,362,48,https://github.com/kmcdonell,pmlogctl/pmfind,20,[],https://github.com/performancecopilot/pcp/pull/985,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/985,"Changes committed to git@github.com:kmcdonell/pcp.git 20200722
Ken McDonell (11):
src/pmlogger/pmlogger_check.sh: remove temp file used in pmlogconf check
pm{log,ie}ctl: second major revision
pm{ie,log}ctl: the pmfind class
pmlogctl: cond-create QA
src/pmlogger/pmlogger_check.sh: make sure pmlogconf has input from /dev/null
pm{log,ie}ctl: add -i ident option
pmlogctl: version 2 of the cond-create command
pmlogctl: change class policy file section name syntax
qa/1228 & 1230: fix pmie control line (was pmlogger, not pmie style)
pmlogctl: move --- start control ... --- end control from -N to -V
src/pmfind/pmfind_check.sh: connect to pm{ie,log}ctl
man/man1/mk.pmiectl                |    7
man/man1/pmlogctl.1                |  209 ++++++--
qa/1204                            |   24 -
qa/1204.out                        |   31 -
qa/1205                            |   16
qa/1205.out                        |    2
qa/1206                            |   12
qa/1208                            |   12
qa/1209                            |   18
qa/1209.out                        |   69 ++
qa/1210                            |   20
qa/1210.out                        |   12
qa/1213                            |  110 ++--
qa/1213.out                        |   34 -
qa/1215                            |   18
qa/1215.out                        |    6
qa/1216                            |   16
qa/1216.out                        |   18
qa/1223                            |   20
qa/1223.out                        |   60 +-
qa/1226                            |   20
qa/1226.out                        |   31 -
qa/1228                            |   18
qa/1228.out                        |    4
qa/1230                            |   17
qa/1232                            |    2
qa/1232.out                        |    7
qa/1248                            |  344 +++++++++++++-
qa/1248.out                        |  219 +++++++++
qa/1249                            |  342 +++++++++++++-
qa/1249.out                        |  196 ++++++++
qa/group                           |    2
src/pmfind/pmfind_check.sh         |   51 +-
src/pmlogctl/.gitignore            |    1
src/pmlogctl/GNUmakefile           |   11
src/pmlogctl/pmlogctl.sh           |  870 ++++++++++++++++++++++++++++---------
src/pmlogctl/pmlogger-pmfind.class |   35 +
src/pmlogger/pmlogger_check.sh     |    5
38 files changed, 2372 insertions(+), 517 deletions(-)
Details ...
commit 663006a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 28 07:25:30 2020 +1000
src/pmfind/pmfind_check.sh: connect to pm{ie,log}ctl

Replace the ""control file copying"" method with direct calls to
pm{ie,log}ctl to use their cond-create action to configure and
start an appropriate instance of pmie and/or pmlogger.

This is the last step in removing any dependence on systemd ""path""
service helpers.

commit a7c0432
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 28 07:19:22 2020 +1000
pmlogctl: move --- start control ... --- end control from -N to -V

Better place for this diagnostic output.

And some QA remaking to match.

commit 665f09a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 28 07:08:38 2020 +1000
qa/1228 & 1230: fix pmie control line (was pmlogger, not pmie style)

Also fix cleanup in 1230.

commit a50574b
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 28 06:45:58 2020 +1000
pmlogctl: change class policy file section name syntax

I realize that section: is not good because local: can be a valid
start to a control line, not introducing the (non-existant) ""local""
section.

Change to [section].

No transition plan needed, none of the pmlogctl stuff has escaped in
a release yet.

commit 3753273
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 27 21:13:11 2020 +1000
pmlogctl: version 2 of the cond-create command

This one:
- slices and dices the pm{logger,ie} configuration files from the
  -c option in the control file line(s) to create a composite configuration
  file that is the union of all of the configuration files in the classes
  that evaluate to true ... this may involve running pm{log,ie}conf to
  mimic what pm{logger,ie}_check will do the first time round if the
  configuation file for a particula class does not exist
- each config file consists of 4 (optional) pieces:
  + preamble
  + pm{log,ie}conf clauses
  + explicit configuration clauses
  + [access] clauses
  and the pieces are spliced back together for the multiple configuration
  files
- qa for all of this
- updated man pages for all of this

commit 2ca9e8d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 25 08:05:39 2020 +1000
pm{log,ie}ctl: add -i ident option

This over-rides the ident (macro) from the ident: section of the
policy class file, and is intended for use with pmfind_check, where
the unique SHA1 signature will be used as the identifier for the
pmlogger/pmie instance.

commit 36a4ac6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 25 07:28:02 2020 +1000
src/pmlogger/pmlogger_check.sh: make sure pmlogconf has input from /dev/null

The -c is not enough to suppress the ""Keep? [y]"" dialog in the event that
changes are made.

commit a2e90a8
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 24 07:13:00 2020 +1000
pmlogctl: cond-create QA

Extend 1204, add 1248 (new).
And small changes to the code.

commit 6c3ab64
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 23 07:53:51 2020 +1000
pm{ie,log}ctl: the pmfind class

One file and .gitignore omitted from the last commit.

Note, the pmie version is created from the pmlogger version in the
build, so the pmie version is not checked in.

commit b3e307a
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 23 07:39:10 2020 +1000
pm{log,ie}ctl: second major revision

1. add cond-create command (to be used by pmfind_check) to conditionally
   create instances ... this defines the create: section of the class
   policy files
2. add a ""pmfind"" class policy file to be used by cond-create as the
   ""fallback"" if none of the other class policy files have a condition
   that evaluates to true
3. change -n and -v to -N and -V (to match the other big scripts we have,
   namely the *_check and *_daily ones)
4. change the name of the name: section in the class policy files
   to be ident: (this is the template to generate a unique identifier
   for each instance, so closer to ""identity"" than ""name"" and the
   latter is confusing with the class name)
5. add a %i macro that is expanded to the real instance name from the
   ident: section
6. add an optional class: section in the class policy files to name
   the class (the old scheme, using the last component of the class
   policy file name is still supported as the fallback if there is no
   class: section
7. update the in-build policy file for the default class to match all
   of the above
8. update the man pages to reflect all of the above
9. update the QA to ensure it all still passes ... there is new QA
   coming for cond-create whihc has no coverage as yet

commit 3f67f9d
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 22 07:07:37 2020 +1000
src/pmlogger/pmlogger_check.sh: remove temp file used in pmlogconf check

When checking to see if $PCP_VAR_DIR/config/pmlogger/foo needs
reconfiguring with pmlogconf, we were leaving behind a temp file
$PCP_VAR_DIR/config/pmlogger/foo.tmp when no changes were made","Changes committed to git@github.com:kmcdonell/pcp.git 20200722
Ken McDonell (11):
src/pmlogger/pmlogger_check.sh: remove temp file used in pmlogconf check
pm{log,ie}ctl: second major revision
pm{ie,log}ctl: the pmfind class
pmlogctl: cond-create QA
src/pmlogger/pmlogger_check.sh: make sure pmlogconf has input from /dev/null
pm{log,ie}ctl: add -i ident option
pmlogctl: version 2 of the cond-create command
pmlogctl: change class policy file section name syntax
qa/1228 & 1230: fix pmie control line (was pmlogger, not pmie style)
pmlogctl: move --- start control ... --- end control from -N to -V
src/pmfind/pmfind_check.sh: connect to pm{ie,log}ctl
man/man1/mk.pmiectl                |    7
man/man1/pmlogctl.1                |  209 ++++++--
qa/1204                            |   24 -
qa/1204.out                        |   31 -
qa/1205                            |   16
qa/1205.out                        |    2
qa/1206                            |   12
qa/1208                            |   12
qa/1209                            |   18
qa/1209.out                        |   69 ++
qa/1210                            |   20
qa/1210.out                        |   12
qa/1213                            |  110 ++--
qa/1213.out                        |   34 -
qa/1215                            |   18
qa/1215.out                        |    6
qa/1216                            |   16
qa/1216.out                        |   18
qa/1223                            |   20
qa/1223.out                        |   60 +-
qa/1226                            |   20
qa/1226.out                        |   31 -
qa/1228                            |   18
qa/1228.out                        |    4
qa/1230                            |   17
qa/1232                            |    2
qa/1232.out                        |    7
qa/1248                            |  344 +++++++++++++-
qa/1248.out                        |  219 +++++++++
qa/1249                            |  342 +++++++++++++-
qa/1249.out                        |  196 ++++++++
qa/group                           |    2
src/pmfind/pmfind_check.sh         |   51 +-
src/pmlogctl/.gitignore            |    1
src/pmlogctl/GNUmakefile           |   11
src/pmlogctl/pmlogctl.sh           |  870 ++++++++++++++++++++++++++++---------
src/pmlogctl/pmlogger-pmfind.class |   35 +
src/pmlogger/pmlogger_check.sh     |    5
38 files changed, 2372 insertions(+), 517 deletions(-)
Details ...
commit 663006a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 28 07:25:30 2020 +1000
src/pmfind/pmfind_check.sh: connect to pm{ie,log}ctl

Replace the ""control file copying"" method with direct calls to
pm{ie,log}ctl to use their cond-create action to configure and
start an appropriate instance of pmie and/or pmlogger.

This is the last step in removing any dependence on systemd ""path""
service helpers.

commit a7c0432
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 28 07:19:22 2020 +1000
pmlogctl: move --- start control ... --- end control from -N to -V

Better place for this diagnostic output.

And some QA remaking to match.

commit 665f09a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 28 07:08:38 2020 +1000
qa/1228 & 1230: fix pmie control line (was pmlogger, not pmie style)

Also fix cleanup in 1230.

commit a50574b
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 28 06:45:58 2020 +1000
pmlogctl: change class policy file section name syntax

I realize that section: is not good because local: can be a valid
start to a control line, not introducing the (non-existant) ""local""
section.

Change to [section].

No transition plan needed, none of the pmlogctl stuff has escaped in
a release yet.

commit 3753273
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 27 21:13:11 2020 +1000
pmlogctl: version 2 of the cond-create command

This one:
- slices and dices the pm{logger,ie} configuration files from the
  -c option in the control file line(s) to create a composite configuration
  file that is the union of all of the configuration files in the classes
  that evaluate to true ... this may involve running pm{log,ie}conf to
  mimic what pm{logger,ie}_check will do the first time round if the
  configuation file for a particula class does not exist
- each config file consists of 4 (optional) pieces:
  + preamble
  + pm{log,ie}conf clauses
  + explicit configuration clauses
  + [access] clauses
  and the pieces are spliced back together for the multiple configuration
  files
- qa for all of this
- updated man pages for all of this

commit 2ca9e8d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 25 08:05:39 2020 +1000
pm{log,ie}ctl: add -i ident option

This over-rides the ident (macro) from the ident: section of the
policy class file, and is intended for use with pmfind_check, where
the unique SHA1 signature will be used as the identifier for the
pmlogger/pmie instance.

commit 36a4ac6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 25 07:28:02 2020 +1000
src/pmlogger/pmlogger_check.sh: make sure pmlogconf has input from /dev/null

The -c is not enough to suppress the ""Keep? [y]"" dialog in the event that
changes are made.

commit a2e90a8
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 24 07:13:00 2020 +1000
pmlogctl: cond-create QA

Extend 1204, add 1248 (new).
And small changes to the code.

commit 6c3ab64
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 23 07:53:51 2020 +1000
pm{ie,log}ctl: the pmfind class

One file and .gitignore omitted from the last commit.

Note, the pmie version is created from the pmlogger version in the
build, so the pmie version is not checked in.

commit b3e307a
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 23 07:39:10 2020 +1000
pm{log,ie}ctl: second major revision

1. add cond-create command (to be used by pmfind_check) to conditionally
   create instances ... this defines the create: section of the class
   policy files
2. add a ""pmfind"" class policy file to be used by cond-create as the
   ""fallback"" if none of the other class policy files have a condition
   that evaluates to true
3. change -n and -v to -N and -V (to match the other big scripts we have,
   namely the *_check and *_daily ones)
4. change the name of the name: section in the class policy files
   to be ident: (this is the template to generate a unique identifier
   for each instance, so closer to ""identity"" than ""name"" and the
   latter is confusing with the class name)
5. add a %i macro that is expanded to the real instance name from the
   ident: section
6. add an optional class: section in the class policy files to name
   the class (the old scheme, using the last component of the class
   policy file name is still supported as the fallback if there is no
   class: section
7. update the in-build policy file for the default class to match all
   of the above
8. update the man pages to reflect all of the above
9. update the QA to ensure it all still passes ... there is new QA
   coming for cond-create whihc has no coverage as yet

commit 3f67f9d
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 22 07:07:37 2020 +1000
src/pmlogger/pmlogger_check.sh: remove temp file used in pmlogconf check

When checking to see if $PCP_VAR_DIR/config/pmlogger/foo needs
reconfiguring with pmlogconf, we were leaving behind a temp file
$PCP_VAR_DIR/config/pmlogger/foo.tmp when no changes were made",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,985,2020-07-28T00:49:18Z,2020-07-30T05:48:25Z,2020-08-18T21:25:33Z,MERGED,True,2229,362,48,https://github.com/kmcdonell,pmlogctl/pmfind,20,[],https://github.com/performancecopilot/pcp/pull/985,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/985#issuecomment-666097195,"Changes committed to git@github.com:kmcdonell/pcp.git 20200722
Ken McDonell (11):
src/pmlogger/pmlogger_check.sh: remove temp file used in pmlogconf check
pm{log,ie}ctl: second major revision
pm{ie,log}ctl: the pmfind class
pmlogctl: cond-create QA
src/pmlogger/pmlogger_check.sh: make sure pmlogconf has input from /dev/null
pm{log,ie}ctl: add -i ident option
pmlogctl: version 2 of the cond-create command
pmlogctl: change class policy file section name syntax
qa/1228 & 1230: fix pmie control line (was pmlogger, not pmie style)
pmlogctl: move --- start control ... --- end control from -N to -V
src/pmfind/pmfind_check.sh: connect to pm{ie,log}ctl
man/man1/mk.pmiectl                |    7
man/man1/pmlogctl.1                |  209 ++++++--
qa/1204                            |   24 -
qa/1204.out                        |   31 -
qa/1205                            |   16
qa/1205.out                        |    2
qa/1206                            |   12
qa/1208                            |   12
qa/1209                            |   18
qa/1209.out                        |   69 ++
qa/1210                            |   20
qa/1210.out                        |   12
qa/1213                            |  110 ++--
qa/1213.out                        |   34 -
qa/1215                            |   18
qa/1215.out                        |    6
qa/1216                            |   16
qa/1216.out                        |   18
qa/1223                            |   20
qa/1223.out                        |   60 +-
qa/1226                            |   20
qa/1226.out                        |   31 -
qa/1228                            |   18
qa/1228.out                        |    4
qa/1230                            |   17
qa/1232                            |    2
qa/1232.out                        |    7
qa/1248                            |  344 +++++++++++++-
qa/1248.out                        |  219 +++++++++
qa/1249                            |  342 +++++++++++++-
qa/1249.out                        |  196 ++++++++
qa/group                           |    2
src/pmfind/pmfind_check.sh         |   51 +-
src/pmlogctl/.gitignore            |    1
src/pmlogctl/GNUmakefile           |   11
src/pmlogctl/pmlogctl.sh           |  870 ++++++++++++++++++++++++++++---------
src/pmlogctl/pmlogger-pmfind.class |   35 +
src/pmlogger/pmlogger_check.sh     |    5
38 files changed, 2372 insertions(+), 517 deletions(-)
Details ...
commit 663006a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 28 07:25:30 2020 +1000
src/pmfind/pmfind_check.sh: connect to pm{ie,log}ctl

Replace the ""control file copying"" method with direct calls to
pm{ie,log}ctl to use their cond-create action to configure and
start an appropriate instance of pmie and/or pmlogger.

This is the last step in removing any dependence on systemd ""path""
service helpers.

commit a7c0432
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 28 07:19:22 2020 +1000
pmlogctl: move --- start control ... --- end control from -N to -V

Better place for this diagnostic output.

And some QA remaking to match.

commit 665f09a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 28 07:08:38 2020 +1000
qa/1228 & 1230: fix pmie control line (was pmlogger, not pmie style)

Also fix cleanup in 1230.

commit a50574b
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Jul 28 06:45:58 2020 +1000
pmlogctl: change class policy file section name syntax

I realize that section: is not good because local: can be a valid
start to a control line, not introducing the (non-existant) ""local""
section.

Change to [section].

No transition plan needed, none of the pmlogctl stuff has escaped in
a release yet.

commit 3753273
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Jul 27 21:13:11 2020 +1000
pmlogctl: version 2 of the cond-create command

This one:
- slices and dices the pm{logger,ie} configuration files from the
  -c option in the control file line(s) to create a composite configuration
  file that is the union of all of the configuration files in the classes
  that evaluate to true ... this may involve running pm{log,ie}conf to
  mimic what pm{logger,ie}_check will do the first time round if the
  configuation file for a particula class does not exist
- each config file consists of 4 (optional) pieces:
  + preamble
  + pm{log,ie}conf clauses
  + explicit configuration clauses
  + [access] clauses
  and the pieces are spliced back together for the multiple configuration
  files
- qa for all of this
- updated man pages for all of this

commit 2ca9e8d
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 25 08:05:39 2020 +1000
pm{log,ie}ctl: add -i ident option

This over-rides the ident (macro) from the ident: section of the
policy class file, and is intended for use with pmfind_check, where
the unique SHA1 signature will be used as the identifier for the
pmlogger/pmie instance.

commit 36a4ac6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Jul 25 07:28:02 2020 +1000
src/pmlogger/pmlogger_check.sh: make sure pmlogconf has input from /dev/null

The -c is not enough to suppress the ""Keep? [y]"" dialog in the event that
changes are made.

commit a2e90a8
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 24 07:13:00 2020 +1000
pmlogctl: cond-create QA

Extend 1204, add 1248 (new).
And small changes to the code.

commit 6c3ab64
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 23 07:53:51 2020 +1000
pm{ie,log}ctl: the pmfind class

One file and .gitignore omitted from the last commit.

Note, the pmie version is created from the pmlogger version in the
build, so the pmie version is not checked in.

commit b3e307a
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 23 07:39:10 2020 +1000
pm{log,ie}ctl: second major revision

1. add cond-create command (to be used by pmfind_check) to conditionally
   create instances ... this defines the create: section of the class
   policy files
2. add a ""pmfind"" class policy file to be used by cond-create as the
   ""fallback"" if none of the other class policy files have a condition
   that evaluates to true
3. change -n and -v to -N and -V (to match the other big scripts we have,
   namely the *_check and *_daily ones)
4. change the name of the name: section in the class policy files
   to be ident: (this is the template to generate a unique identifier
   for each instance, so closer to ""identity"" than ""name"" and the
   latter is confusing with the class name)
5. add a %i macro that is expanded to the real instance name from the
   ident: section
6. add an optional class: section in the class policy files to name
   the class (the old scheme, using the last component of the class
   policy file name is still supported as the fallback if there is no
   class: section
7. update the in-build policy file for the default class to match all
   of the above
8. update the man pages to reflect all of the above
9. update the QA to ensure it all still passes ... there is new QA
   coming for cond-create whihc has no coverage as yet

commit 3f67f9d
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Jul 22 07:07:37 2020 +1000
src/pmlogger/pmlogger_check.sh: remove temp file used in pmlogconf check

When checking to see if $PCP_VAR_DIR/config/pmlogger/foo needs
reconfiguring with pmlogconf, we were leaving behind a temp file
$PCP_VAR_DIR/config/pmlogger/foo.tmp when no changes were made","I've pull Nathan's path changes as well to try and head off any merge conflicts.
This builds for me and qa passes for the sanity, pmlogctl, pmiectl and pmfind groups with the sole exception of qa/1768 that does not work after my pmfind_check changes, but I'll refactor that one and push it independently.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,986,2020-07-28T12:11:36Z,2020-07-30T07:23:47Z,2020-07-30T07:23:47Z,MERGED,True,536,139,12,https://github.com/Erbenos,"pmwebapi: redisearch related modifications to pmproxy, libpcp_web, pmsearch and man pages",14,[],https://github.com/performancecopilot/pcp/pull/986,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/986,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,988,2020-07-30T06:52:37Z,2020-07-30T07:23:46Z,2020-07-30T07:23:46Z,MERGED,True,95,14,3,https://github.com/kmcdonell,pmlogctl & qa/1768,2,[],https://github.com/performancecopilot/pcp/pull/988,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/988,"Changes committed to git@github.com:kmcdonell/pcp.git 20200730
Ken McDonell (2):
qa/1768: new filter and remade after pmfind_check changes
src/pmlogctl/pmlogctl.sh: fix sed botch
qa/1768                  |    7 +--
qa/1768.out              |   96 +++++++++++++++++++++++++++++++++++++++++++----
src/pmlogctl/pmlogctl.sh |    6 +-
3 files changed, 95 insertions(+), 14 deletions(-)
Details ...
commit 90e8fce
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:49:29 2020 +1000
src/pmlogctl/pmlogctl.sh: fix sed botch

hostspecs like pcp://slick:44321 were tripping up the %h expansion
because of the embedded / ... changed the sed pattern delimiter from
/ to ; (; seems unlikely in a hostspec, but if it can occur I'll
need some additional embedded escaping goo)

commit 11e3ee8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:42:36 2020 +1000
qa/1768: new filter and remade after pmfind_check changes

pmfind_check now uses pm{log,ie}ctl, rather than making direct changes
to the control files.","Changes committed to git@github.com:kmcdonell/pcp.git 20200730
Ken McDonell (2):
qa/1768: new filter and remade after pmfind_check changes
src/pmlogctl/pmlogctl.sh: fix sed botch
qa/1768                  |    7 +--
qa/1768.out              |   96 +++++++++++++++++++++++++++++++++++++++++++----
src/pmlogctl/pmlogctl.sh |    6 +-
3 files changed, 95 insertions(+), 14 deletions(-)
Details ...
commit 90e8fce
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:49:29 2020 +1000
src/pmlogctl/pmlogctl.sh: fix sed botch

hostspecs like pcp://slick:44321 were tripping up the %h expansion
because of the embedded / ... changed the sed pattern delimiter from
/ to ; (; seems unlikely in a hostspec, but if it can occur I'll
need some additional embedded escaping goo)

commit 11e3ee8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:42:36 2020 +1000
qa/1768: new filter and remade after pmfind_check changes

pmfind_check now uses pm{log,ie}ctl, rather than making direct changes
to the control files.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,989,2020-07-30T08:12:13Z,2020-07-30T08:34:33Z,2020-07-30T08:34:33Z,MERGED,True,34,32,2,https://github.com/kmcdonell,qa/1768,1,[],https://github.com/performancecopilot/pcp/pull/989,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/989,"Changes committed to git@github.com:kmcdonell/pcp.git 20200730
Ken McDonell (3):
qa/1768: new filter and remade after pmfind_check changes
src/pmlogctl/pmlogctl.sh: fix sed botch
qa/1768: fix filter for /etc and .../bin/... paths
qa/1768                  |    9 +-
qa/1768.out              |  160 +++++++++++++++++++++++++++++++++++------------
src/pmlogctl/pmlogctl.sh |    6 -
3 files changed, 129 insertions(+), 46 deletions(-)
Details ...
commit 6999b8e
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 18:09:50 2020 +1000
qa/1768: fix filter for /etc and .../bin/... paths

commit 90e8fce
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:49:29 2020 +1000
src/pmlogctl/pmlogctl.sh: fix sed botch

hostspecs like pcp://slick:44321 were tripping up the %h expansion
because of the embedded / ... changed the sed pattern delimiter from
/ to ; (; seems unlikely in a hostspec, but if it can occur I'll
need some additional embedded escaping goo)

commit 11e3ee8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:42:36 2020 +1000
qa/1768: new filter and remade after pmfind_check changes

pmfind_check now uses pm{log,ie}ctl, rather than making direct changes
to the control files.","Changes committed to git@github.com:kmcdonell/pcp.git 20200730
Ken McDonell (3):
qa/1768: new filter and remade after pmfind_check changes
src/pmlogctl/pmlogctl.sh: fix sed botch
qa/1768: fix filter for /etc and .../bin/... paths
qa/1768                  |    9 +-
qa/1768.out              |  160 +++++++++++++++++++++++++++++++++++------------
src/pmlogctl/pmlogctl.sh |    6 -
3 files changed, 129 insertions(+), 46 deletions(-)
Details ...
commit 6999b8e
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 18:09:50 2020 +1000
qa/1768: fix filter for /etc and .../bin/... paths

commit 90e8fce
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:49:29 2020 +1000
src/pmlogctl/pmlogctl.sh: fix sed botch

hostspecs like pcp://slick:44321 were tripping up the %h expansion
because of the embedded / ... changed the sed pattern delimiter from
/ to ; (; seems unlikely in a hostspec, but if it can occur I'll
need some additional embedded escaping goo)

commit 11e3ee8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:42:36 2020 +1000
qa/1768: new filter and remade after pmfind_check changes

pmfind_check now uses pm{log,ie}ctl, rather than making direct changes
to the control files.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,990,2020-07-30T11:31:56Z,2020-07-30T20:58:38Z,2020-07-30T20:58:38Z,MERGED,True,13,13,2,https://github.com/kmcdonell,fix debian buld breakage,2,[],https://github.com/performancecopilot/pcp/pull/990,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/990,"Changes committed to git@github.com:kmcdonell/pcp.git 20200730
Miroslav Foltýn (14):
libpcp_web: fixed redis search text endpoint handler, now correctly returns response
pmproxy: correctly handling /search/text type params, updated response model for /search/suggest; libpcp_web: bunch of heuristics around querying Redisearch in /search related endpoints
libpcp_web: search, updated minimum token length for querying RediSearch
pmwebapi: extended pmSearchTextType, pmSearchTextRequest, /search corrected Redisearch query handling; pmproxy: reverted /search/suggest response model, updated /search/text response model, made all search result item fields optional, updated /search/text defaults
libpcp_web: search: handling of some edge cases
pmproxy: new /search/indom endpoint, simple response being names of entities, no edge-cases handling
pmproxy: /search/indom better response model, now includes metrics and instances in response
pmproxy: /search/indom response now same as /search/text; libpcp_web: removed forgotten sleep (whoopsie), pagination support for indom
docs: updated some fulltext search related docs
man: updated pmsearch.1, fixed linting issues; pmsearch: updated with --indom modifier; pmproxy: more consistent naming for /search endpoints param type, libpcp_web: always index indoms in 'pcp:text' with both name and indom fields
libpcp_web: BM25 scorer for search related ops
libpcp_web: sorting redis search indom by type
libpcp_web: fix typo in comment of redis_search_text_query
pmsearch: formatting output in a same way webapi responses are formatted - leaving out the fields that contain no value; qa: updated pmsearch testcase 1871
Ken McDonell (4):
qa/1768: new filter and remade after pmfind_check changes
src/pmlogctl/pmlogctl.sh: fix sed botch
qa/1768: fix filter for /etc and .../bin/... paths
debian/libpcp3-dev.install: fix pmSearchTextInDom man page
Nathan Scott (2):
pmsearch: very minor code consistency tweaks on review
build: fix deb builds with addition of devel man page
debian/libpcp3-dev.install     |   24 +-
man/man1/pmsearch.1            |   14 -
man/man3/pmsearchtextindom.3   |   37 +++
man/man3/pmsearchtextsuggest.3 |    2
man/man3/pmwebapi.3            |   63 +++---
qa/1768                        |    9
qa/1768.out                    |  160 +++++++++++----
qa/1871                        |   12 +
qa/1871.out                    |   54 +++++
src/include/pcp/pmwebapi.h     |   13 -
src/libpcp_web/src/exports     |    3
src/libpcp_web/src/search.c    |  421 ++++++++++++++++++++++++++++++-----------
src/libpcp_web/src/search.h    |   16 -
src/pmlogctl/pmlogctl.sh       |    6
src/pmproxy/src/search.c       |  262 ++++++++++++++++---------
src/pmsearch/pmsearch.c        |   40 ++-
16 files changed, 811 insertions(+), 325 deletions(-)
Details ...
commit 76102b0
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 21:29:06 2020 +1000
debian/libpcp3-dev.install: fix pmSearchTextInDom man page

""Text"" was missing in the name here.
Also sort -f to maintain order.

commit 6999b8e
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 18:09:50 2020 +1000
qa/1768: fix filter for /etc and .../bin/... paths

commit bc4284e
Author: Nathan Scott nathans@redhat.com
Date:   Thu Jul 30 17:21:53 2020 +1000
build: fix deb builds with addition of devel man page

commit 72b4e79
Author: Nathan Scott nathans@redhat.com
Date:   Thu Jul 30 17:10:29 2020 +1000
pmsearch: very minor code consistency tweaks on review

commit 90e8fce
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:49:29 2020 +1000
src/pmlogctl/pmlogctl.sh: fix sed botch

hostspecs like pcp://slick:44321 were tripping up the %h expansion
because of the embedded / ... changed the sed pattern delimiter from
/ to ; (; seems unlikely in a hostspec, but if it can occur I'll
need some additional embedded escaping goo)

commit 11e3ee8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:42:36 2020 +1000
qa/1768: new filter and remade after pmfind_check changes

pmfind_check now uses pm{log,ie}ctl, rather than making direct changes
to the control files.

commit b7ed73b
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 28 16:01:27 2020 +0200
pmsearch: formatting output in a same way webapi responses are formatted - leaving out the fields that contain no value; qa: updated pmsearch testcase 1871

commit 736f308
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 28 14:15:30 2020 +0200
libpcp_web: fix typo in comment of redis_search_text_query

commit cc80cba
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 28 14:06:07 2020 +0200
libpcp_web: sorting redis search indom by type

commit cfc06eb
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Mon Jul 27 19:56:49 2020 +0200
libpcp_web: BM25 scorer for search related ops

commit dcd2bed
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Mon Jul 27 12:50:19 2020 +0200
man: updated pmsearch.1, fixed linting issues; pmsearch: updated with --indom modifier; pmproxy: more consistent naming for /search endpoints param type, libpcp_web: always index indoms in 'pcp:text' with both name and indom fields

commit b25d9ad
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 19:59:55 2020 +0200
docs: updated some fulltext search related docs

commit 528a197
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 19:51:34 2020 +0200
pmproxy: /search/indom response now same as /search/text; libpcp_web: removed forgotten sleep (whoopsie), pagination support for indom

commit 40ced65
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 18:08:12 2020 +0200
pmproxy: /search/indom better response model, now includes metrics and instances in response

commit 70f0268
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 17:52:40 2020 +0200
pmproxy: new /search/indom endpoint, simple response being names of entities, no edge-cases handling

commit 19f0033
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 15:34:03 2020 +0200
libpcp_web: search: handling of some edge cases

commit d17d9e4
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Thu Jul 23 19:17:37 2020 +0200
pmwebapi: extended pmSearchTextType, pmSearchTextRequest, /search corrected Redisearch query handling; pmproxy: reverted /search/suggest response model, updated /search/text response model, made all search result item fields optional, updated /search/text defaults

commit 76c8799
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Wed Jul 22 23:31:43 2020 +0200
libpcp_web: search, updated minimum token length for querying RediSearch

commit 56138d3
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Wed Jul 22 23:03:53 2020 +0200
pmproxy: correctly handling /search/text type params, updated response model for /search/suggest; libpcp_web: bunch of heuristics around querying Redisearch in /search related endpoints

commit 7914e3d
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 21 20:01:38 2020 +0200
libpcp_web: fixed redis search text endpoint handler, now correctly returns response","Changes committed to git@github.com:kmcdonell/pcp.git 20200730
Miroslav Foltýn (14):
libpcp_web: fixed redis search text endpoint handler, now correctly returns response
pmproxy: correctly handling /search/text type params, updated response model for /search/suggest; libpcp_web: bunch of heuristics around querying Redisearch in /search related endpoints
libpcp_web: search, updated minimum token length for querying RediSearch
pmwebapi: extended pmSearchTextType, pmSearchTextRequest, /search corrected Redisearch query handling; pmproxy: reverted /search/suggest response model, updated /search/text response model, made all search result item fields optional, updated /search/text defaults
libpcp_web: search: handling of some edge cases
pmproxy: new /search/indom endpoint, simple response being names of entities, no edge-cases handling
pmproxy: /search/indom better response model, now includes metrics and instances in response
pmproxy: /search/indom response now same as /search/text; libpcp_web: removed forgotten sleep (whoopsie), pagination support for indom
docs: updated some fulltext search related docs
man: updated pmsearch.1, fixed linting issues; pmsearch: updated with --indom modifier; pmproxy: more consistent naming for /search endpoints param type, libpcp_web: always index indoms in 'pcp:text' with both name and indom fields
libpcp_web: BM25 scorer for search related ops
libpcp_web: sorting redis search indom by type
libpcp_web: fix typo in comment of redis_search_text_query
pmsearch: formatting output in a same way webapi responses are formatted - leaving out the fields that contain no value; qa: updated pmsearch testcase 1871
Ken McDonell (4):
qa/1768: new filter and remade after pmfind_check changes
src/pmlogctl/pmlogctl.sh: fix sed botch
qa/1768: fix filter for /etc and .../bin/... paths
debian/libpcp3-dev.install: fix pmSearchTextInDom man page
Nathan Scott (2):
pmsearch: very minor code consistency tweaks on review
build: fix deb builds with addition of devel man page
debian/libpcp3-dev.install     |   24 +-
man/man1/pmsearch.1            |   14 -
man/man3/pmsearchtextindom.3   |   37 +++
man/man3/pmsearchtextsuggest.3 |    2
man/man3/pmwebapi.3            |   63 +++---
qa/1768                        |    9
qa/1768.out                    |  160 +++++++++++----
qa/1871                        |   12 +
qa/1871.out                    |   54 +++++
src/include/pcp/pmwebapi.h     |   13 -
src/libpcp_web/src/exports     |    3
src/libpcp_web/src/search.c    |  421 ++++++++++++++++++++++++++++++-----------
src/libpcp_web/src/search.h    |   16 -
src/pmlogctl/pmlogctl.sh       |    6
src/pmproxy/src/search.c       |  262 ++++++++++++++++---------
src/pmsearch/pmsearch.c        |   40 ++-
16 files changed, 811 insertions(+), 325 deletions(-)
Details ...
commit 76102b0
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 21:29:06 2020 +1000
debian/libpcp3-dev.install: fix pmSearchTextInDom man page

""Text"" was missing in the name here.
Also sort -f to maintain order.

commit 6999b8e
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 18:09:50 2020 +1000
qa/1768: fix filter for /etc and .../bin/... paths

commit bc4284e
Author: Nathan Scott nathans@redhat.com
Date:   Thu Jul 30 17:21:53 2020 +1000
build: fix deb builds with addition of devel man page

commit 72b4e79
Author: Nathan Scott nathans@redhat.com
Date:   Thu Jul 30 17:10:29 2020 +1000
pmsearch: very minor code consistency tweaks on review

commit 90e8fce
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:49:29 2020 +1000
src/pmlogctl/pmlogctl.sh: fix sed botch

hostspecs like pcp://slick:44321 were tripping up the %h expansion
because of the embedded / ... changed the sed pattern delimiter from
/ to ; (; seems unlikely in a hostspec, but if it can occur I'll
need some additional embedded escaping goo)

commit 11e3ee8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:42:36 2020 +1000
qa/1768: new filter and remade after pmfind_check changes

pmfind_check now uses pm{log,ie}ctl, rather than making direct changes
to the control files.

commit b7ed73b
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 28 16:01:27 2020 +0200
pmsearch: formatting output in a same way webapi responses are formatted - leaving out the fields that contain no value; qa: updated pmsearch testcase 1871

commit 736f308
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 28 14:15:30 2020 +0200
libpcp_web: fix typo in comment of redis_search_text_query

commit cc80cba
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 28 14:06:07 2020 +0200
libpcp_web: sorting redis search indom by type

commit cfc06eb
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Mon Jul 27 19:56:49 2020 +0200
libpcp_web: BM25 scorer for search related ops

commit dcd2bed
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Mon Jul 27 12:50:19 2020 +0200
man: updated pmsearch.1, fixed linting issues; pmsearch: updated with --indom modifier; pmproxy: more consistent naming for /search endpoints param type, libpcp_web: always index indoms in 'pcp:text' with both name and indom fields

commit b25d9ad
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 19:59:55 2020 +0200
docs: updated some fulltext search related docs

commit 528a197
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 19:51:34 2020 +0200
pmproxy: /search/indom response now same as /search/text; libpcp_web: removed forgotten sleep (whoopsie), pagination support for indom

commit 40ced65
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 18:08:12 2020 +0200
pmproxy: /search/indom better response model, now includes metrics and instances in response

commit 70f0268
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 17:52:40 2020 +0200
pmproxy: new /search/indom endpoint, simple response being names of entities, no edge-cases handling

commit 19f0033
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 15:34:03 2020 +0200
libpcp_web: search: handling of some edge cases

commit d17d9e4
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Thu Jul 23 19:17:37 2020 +0200
pmwebapi: extended pmSearchTextType, pmSearchTextRequest, /search corrected Redisearch query handling; pmproxy: reverted /search/suggest response model, updated /search/text response model, made all search result item fields optional, updated /search/text defaults

commit 76c8799
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Wed Jul 22 23:31:43 2020 +0200
libpcp_web: search, updated minimum token length for querying RediSearch

commit 56138d3
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Wed Jul 22 23:03:53 2020 +0200
pmproxy: correctly handling /search/text type params, updated response model for /search/suggest; libpcp_web: bunch of heuristics around querying Redisearch in /search related endpoints

commit 7914e3d
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 21 20:01:38 2020 +0200
libpcp_web: fixed redis search text endpoint handler, now correctly returns response",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,992,2020-07-30T22:11:34Z,2020-07-30T22:43:57Z,2020-08-18T21:34:09Z,MERGED,True,74,8,10,https://github.com/kmcdonell,"qa, pmie&systemd, pmie_check",6,[],https://github.com/performancecopilot/pcp/pull/992,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/992,"Changes committed to git@github.com:kmcdonell/pcp.git 20200730
Miroslav Foltýn (14):
libpcp_web: fixed redis search text endpoint handler, now correctly returns response
pmproxy: correctly handling /search/text type params, updated response model for /search/suggest; libpcp_web: bunch of heuristics around querying Redisearch in /search related endpoints
libpcp_web: search, updated minimum token length for querying RediSearch
pmwebapi: extended pmSearchTextType, pmSearchTextRequest, /search corrected Redisearch query handling; pmproxy: reverted /search/suggest response model, updated /search/text response model, made all search result item fields optional, updated /search/text defaults
libpcp_web: search: handling of some edge cases
pmproxy: new /search/indom endpoint, simple response being names of entities, no edge-cases handling
pmproxy: /search/indom better response model, now includes metrics and instances in response
pmproxy: /search/indom response now same as /search/text; libpcp_web: removed forgotten sleep (whoopsie), pagination support for indom
docs: updated some fulltext search related docs
man: updated pmsearch.1, fixed linting issues; pmsearch: updated with --indom modifier; pmproxy: more consistent naming for /search endpoints param type, libpcp_web: always index indoms in 'pcp:text' with both name and indom fields
libpcp_web: BM25 scorer for search related ops
libpcp_web: sorting redis search indom by type
libpcp_web: fix typo in comment of redis_search_text_query
pmsearch: formatting output in a same way webapi responses are formatted - leaving out the fields that contain no value; qa: updated pmsearch testcase 1871
Ken McDonell (11):
qa/1768: new filter and remade after pmfind_check changes
src/pmlogctl/pmlogctl.sh: fix sed botch
qa/1768: fix filter for /etc and .../bin/... paths
debian/libpcp3-dev.install: fix pmSearchTextInDom man page
man/man3/pmsearchtextindom.3: pmSearchTextIndom -> pmSearchTextInDom
qa/003: filter out network.mptcp.* metrics when no values available
qa/069: change ... -> +++ in filter to avoid ellipsis filtering elsewhere
qa/common.check: changes in _service for systemctl and pmie
src/pmie/pmie_check.*: make pmie_check PartOf pmie
src/pmie/pmie_check.sh: use per-process log file
qa/115: tweak filter and remade after pmie_check log/verbosity change
Nathan Scott (2):
pmsearch: very minor code consistency tweaks on review
build: fix deb builds with addition of devel man page
debian/libpcp3-dev.install     |   24 +-
man/man1/pmsearch.1            |   14 -
man/man3/pmsearchtextindom.3   |   41 +++
man/man3/pmsearchtextsuggest.3 |    2
man/man3/pmwebapi.3            |   63 +++---
qa/003                         |    1
qa/069                         |    2
qa/069.out.ipv6                |    2
qa/069.out.nonipv6             |    2
qa/115                         |    7
qa/115.out                     |   30 ++
qa/1768                        |    9
qa/1768.out                    |  160 +++++++++++----
qa/1871                        |   12 +
qa/1871.out                    |   54 +++++
qa/common.check                |    9
src/include/pcp/pmwebapi.h     |   13 -
src/libpcp_web/src/exports     |    3
src/libpcp_web/src/search.c    |  421 ++++++++++++++++++++++++++++++-----------
src/libpcp_web/src/search.h    |   16 -
src/pmie/pmie_check.service.in |    1
src/pmie/pmie_check.sh         |   27 ++
src/pmie/pmie_check.timer      |    1
src/pmlogctl/pmlogctl.sh       |    6
src/pmproxy/src/search.c       |  262 ++++++++++++++++---------
src/pmsearch/pmsearch.c        |   40 ++-
26 files changed, 887 insertions(+), 335 deletions(-)
Details ...
commit 88b3c2a
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 08:09:16 2020 +1000
qa/115: tweak filter and remade after pmie_check log/verbosity change

commit 6563dc5
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 08:06:23 2020 +1000
src/pmie/pmie_check.sh: use per-process log file

Same change as was made some time ago in pmlogger_check, namely
use a temp file for the log and rename at the end.

commit 7fdcb96
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 07:43:55 2020 +1000
src/pmie/pmie_check.*: make pmie_check PartOf pmie

When pmie is stopped by systemctl we need to also stop both the
pmie_check.service and pmie_check.timer.  If this does not happen
the next start pmie may report errors due to a race between
pmie.service and pmie_check.timer to get the primary pmie running
(pmie.service needs to win this race).

commit e97791d
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 07:34:22 2020 +1000
qa/common.check: changes in _service for systemctl and pmie

When stopping pmie with systemctl, it is necessary to also stop
pmie_check.service and pmie_check.timer, otherwise a subsequent
start for pmie is likely to fail.

This probably should be fixed in the systemd control files!

commit daf7197
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 07:33:30 2020 +1000
qa/069: change ... -> +++ in filter to avoid ellipsis filtering elsewhere

commit 6c8196b
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 07:31:32 2020 +1000
qa/003: filter out network.mptcp.* metrics when no values available

commit 646e2dc
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 06:30:56 2020 +1000
man/man3/pmsearchtextindom.3: pmSearchTextIndom -> pmSearchTextInDom

The function name was wrong (Indom not InDom) in the NAME section
which broke the Debian build.

commit 76102b0
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 21:29:06 2020 +1000
debian/libpcp3-dev.install: fix pmSearchTextInDom man page

""Text"" was missing in the name here.
Also sort -f to maintain order.

commit 6999b8e
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 18:09:50 2020 +1000
qa/1768: fix filter for /etc and .../bin/... paths

commit bc4284e
Author: Nathan Scott nathans@redhat.com
Date:   Thu Jul 30 17:21:53 2020 +1000
build: fix deb builds with addition of devel man page

commit 72b4e79
Author: Nathan Scott nathans@redhat.com
Date:   Thu Jul 30 17:10:29 2020 +1000
pmsearch: very minor code consistency tweaks on review

commit 90e8fce
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:49:29 2020 +1000
src/pmlogctl/pmlogctl.sh: fix sed botch

hostspecs like pcp://slick:44321 were tripping up the %h expansion
because of the embedded / ... changed the sed pattern delimiter from
/ to ; (; seems unlikely in a hostspec, but if it can occur I'll
need some additional embedded escaping goo)

commit 11e3ee8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:42:36 2020 +1000
qa/1768: new filter and remade after pmfind_check changes

pmfind_check now uses pm{log,ie}ctl, rather than making direct changes
to the control files.

commit b7ed73b
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 28 16:01:27 2020 +0200
pmsearch: formatting output in a same way webapi responses are formatted - leaving out the fields that contain no value; qa: updated pmsearch testcase 1871

commit 736f308
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 28 14:15:30 2020 +0200
libpcp_web: fix typo in comment of redis_search_text_query

commit cc80cba
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 28 14:06:07 2020 +0200
libpcp_web: sorting redis search indom by type

commit cfc06eb
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Mon Jul 27 19:56:49 2020 +0200
libpcp_web: BM25 scorer for search related ops

commit dcd2bed
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Mon Jul 27 12:50:19 2020 +0200
man: updated pmsearch.1, fixed linting issues; pmsearch: updated with --indom modifier; pmproxy: more consistent naming for /search endpoints param type, libpcp_web: always index indoms in 'pcp:text' with both name and indom fields

commit b25d9ad
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 19:59:55 2020 +0200
docs: updated some fulltext search related docs

commit 528a197
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 19:51:34 2020 +0200
pmproxy: /search/indom response now same as /search/text; libpcp_web: removed forgotten sleep (whoopsie), pagination support for indom

commit 40ced65
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 18:08:12 2020 +0200
pmproxy: /search/indom better response model, now includes metrics and instances in response

commit 70f0268
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 17:52:40 2020 +0200
pmproxy: new /search/indom endpoint, simple response being names of entities, no edge-cases handling

commit 19f0033
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 15:34:03 2020 +0200
libpcp_web: search: handling of some edge cases

commit d17d9e4
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Thu Jul 23 19:17:37 2020 +0200
pmwebapi: extended pmSearchTextType, pmSearchTextRequest, /search corrected Redisearch query handling; pmproxy: reverted /search/suggest response model, updated /search/text response model, made all search result item fields optional, updated /search/text defaults

commit 76c8799
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Wed Jul 22 23:31:43 2020 +0200
libpcp_web: search, updated minimum token length for querying RediSearch

commit 56138d3
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Wed Jul 22 23:03:53 2020 +0200
pmproxy: correctly handling /search/text type params, updated response model for /search/suggest; libpcp_web: bunch of heuristics around querying Redisearch in /search related endpoints

commit 7914e3d
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 21 20:01:38 2020 +0200
libpcp_web: fixed redis search text endpoint handler, now correctly returns response","Changes committed to git@github.com:kmcdonell/pcp.git 20200730
Miroslav Foltýn (14):
libpcp_web: fixed redis search text endpoint handler, now correctly returns response
pmproxy: correctly handling /search/text type params, updated response model for /search/suggest; libpcp_web: bunch of heuristics around querying Redisearch in /search related endpoints
libpcp_web: search, updated minimum token length for querying RediSearch
pmwebapi: extended pmSearchTextType, pmSearchTextRequest, /search corrected Redisearch query handling; pmproxy: reverted /search/suggest response model, updated /search/text response model, made all search result item fields optional, updated /search/text defaults
libpcp_web: search: handling of some edge cases
pmproxy: new /search/indom endpoint, simple response being names of entities, no edge-cases handling
pmproxy: /search/indom better response model, now includes metrics and instances in response
pmproxy: /search/indom response now same as /search/text; libpcp_web: removed forgotten sleep (whoopsie), pagination support for indom
docs: updated some fulltext search related docs
man: updated pmsearch.1, fixed linting issues; pmsearch: updated with --indom modifier; pmproxy: more consistent naming for /search endpoints param type, libpcp_web: always index indoms in 'pcp:text' with both name and indom fields
libpcp_web: BM25 scorer for search related ops
libpcp_web: sorting redis search indom by type
libpcp_web: fix typo in comment of redis_search_text_query
pmsearch: formatting output in a same way webapi responses are formatted - leaving out the fields that contain no value; qa: updated pmsearch testcase 1871
Ken McDonell (11):
qa/1768: new filter and remade after pmfind_check changes
src/pmlogctl/pmlogctl.sh: fix sed botch
qa/1768: fix filter for /etc and .../bin/... paths
debian/libpcp3-dev.install: fix pmSearchTextInDom man page
man/man3/pmsearchtextindom.3: pmSearchTextIndom -> pmSearchTextInDom
qa/003: filter out network.mptcp.* metrics when no values available
qa/069: change ... -> +++ in filter to avoid ellipsis filtering elsewhere
qa/common.check: changes in _service for systemctl and pmie
src/pmie/pmie_check.*: make pmie_check PartOf pmie
src/pmie/pmie_check.sh: use per-process log file
qa/115: tweak filter and remade after pmie_check log/verbosity change
Nathan Scott (2):
pmsearch: very minor code consistency tweaks on review
build: fix deb builds with addition of devel man page
debian/libpcp3-dev.install     |   24 +-
man/man1/pmsearch.1            |   14 -
man/man3/pmsearchtextindom.3   |   41 +++
man/man3/pmsearchtextsuggest.3 |    2
man/man3/pmwebapi.3            |   63 +++---
qa/003                         |    1
qa/069                         |    2
qa/069.out.ipv6                |    2
qa/069.out.nonipv6             |    2
qa/115                         |    7
qa/115.out                     |   30 ++
qa/1768                        |    9
qa/1768.out                    |  160 +++++++++++----
qa/1871                        |   12 +
qa/1871.out                    |   54 +++++
qa/common.check                |    9
src/include/pcp/pmwebapi.h     |   13 -
src/libpcp_web/src/exports     |    3
src/libpcp_web/src/search.c    |  421 ++++++++++++++++++++++++++++++-----------
src/libpcp_web/src/search.h    |   16 -
src/pmie/pmie_check.service.in |    1
src/pmie/pmie_check.sh         |   27 ++
src/pmie/pmie_check.timer      |    1
src/pmlogctl/pmlogctl.sh       |    6
src/pmproxy/src/search.c       |  262 ++++++++++++++++---------
src/pmsearch/pmsearch.c        |   40 ++-
26 files changed, 887 insertions(+), 335 deletions(-)
Details ...
commit 88b3c2a
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 08:09:16 2020 +1000
qa/115: tweak filter and remade after pmie_check log/verbosity change

commit 6563dc5
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 08:06:23 2020 +1000
src/pmie/pmie_check.sh: use per-process log file

Same change as was made some time ago in pmlogger_check, namely
use a temp file for the log and rename at the end.

commit 7fdcb96
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 07:43:55 2020 +1000
src/pmie/pmie_check.*: make pmie_check PartOf pmie

When pmie is stopped by systemctl we need to also stop both the
pmie_check.service and pmie_check.timer.  If this does not happen
the next start pmie may report errors due to a race between
pmie.service and pmie_check.timer to get the primary pmie running
(pmie.service needs to win this race).

commit e97791d
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 07:34:22 2020 +1000
qa/common.check: changes in _service for systemctl and pmie

When stopping pmie with systemctl, it is necessary to also stop
pmie_check.service and pmie_check.timer, otherwise a subsequent
start for pmie is likely to fail.

This probably should be fixed in the systemd control files!

commit daf7197
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 07:33:30 2020 +1000
qa/069: change ... -> +++ in filter to avoid ellipsis filtering elsewhere

commit 6c8196b
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 07:31:32 2020 +1000
qa/003: filter out network.mptcp.* metrics when no values available

commit 646e2dc
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Jul 31 06:30:56 2020 +1000
man/man3/pmsearchtextindom.3: pmSearchTextIndom -> pmSearchTextInDom

The function name was wrong (Indom not InDom) in the NAME section
which broke the Debian build.

commit 76102b0
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 21:29:06 2020 +1000
debian/libpcp3-dev.install: fix pmSearchTextInDom man page

""Text"" was missing in the name here.
Also sort -f to maintain order.

commit 6999b8e
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 18:09:50 2020 +1000
qa/1768: fix filter for /etc and .../bin/... paths

commit bc4284e
Author: Nathan Scott nathans@redhat.com
Date:   Thu Jul 30 17:21:53 2020 +1000
build: fix deb builds with addition of devel man page

commit 72b4e79
Author: Nathan Scott nathans@redhat.com
Date:   Thu Jul 30 17:10:29 2020 +1000
pmsearch: very minor code consistency tweaks on review

commit 90e8fce
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:49:29 2020 +1000
src/pmlogctl/pmlogctl.sh: fix sed botch

hostspecs like pcp://slick:44321 were tripping up the %h expansion
because of the embedded / ... changed the sed pattern delimiter from
/ to ; (; seems unlikely in a hostspec, but if it can occur I'll
need some additional embedded escaping goo)

commit 11e3ee8
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Jul 30 16:42:36 2020 +1000
qa/1768: new filter and remade after pmfind_check changes

pmfind_check now uses pm{log,ie}ctl, rather than making direct changes
to the control files.

commit b7ed73b
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 28 16:01:27 2020 +0200
pmsearch: formatting output in a same way webapi responses are formatted - leaving out the fields that contain no value; qa: updated pmsearch testcase 1871

commit 736f308
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 28 14:15:30 2020 +0200
libpcp_web: fix typo in comment of redis_search_text_query

commit cc80cba
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 28 14:06:07 2020 +0200
libpcp_web: sorting redis search indom by type

commit cfc06eb
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Mon Jul 27 19:56:49 2020 +0200
libpcp_web: BM25 scorer for search related ops

commit dcd2bed
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Mon Jul 27 12:50:19 2020 +0200
man: updated pmsearch.1, fixed linting issues; pmsearch: updated with --indom modifier; pmproxy: more consistent naming for /search endpoints param type, libpcp_web: always index indoms in 'pcp:text' with both name and indom fields

commit b25d9ad
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 19:59:55 2020 +0200
docs: updated some fulltext search related docs

commit 528a197
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 19:51:34 2020 +0200
pmproxy: /search/indom response now same as /search/text; libpcp_web: removed forgotten sleep (whoopsie), pagination support for indom

commit 40ced65
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 18:08:12 2020 +0200
pmproxy: /search/indom better response model, now includes metrics and instances in response

commit 70f0268
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 17:52:40 2020 +0200
pmproxy: new /search/indom endpoint, simple response being names of entities, no edge-cases handling

commit 19f0033
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Fri Jul 24 15:34:03 2020 +0200
libpcp_web: search: handling of some edge cases

commit d17d9e4
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Thu Jul 23 19:17:37 2020 +0200
pmwebapi: extended pmSearchTextType, pmSearchTextRequest, /search corrected Redisearch query handling; pmproxy: reverted /search/suggest response model, updated /search/text response model, made all search result item fields optional, updated /search/text defaults

commit 76c8799
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Wed Jul 22 23:31:43 2020 +0200
libpcp_web: search, updated minimum token length for querying RediSearch

commit 56138d3
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Wed Jul 22 23:03:53 2020 +0200
pmproxy: correctly handling /search/text type params, updated response model for /search/suggest; libpcp_web: bunch of heuristics around querying Redisearch in /search related endpoints

commit 7914e3d
Author: Miroslav Foltýn miroslav.foltyn64@gmail.com
Date:   Tue Jul 21 20:01:38 2020 +0200
libpcp_web: fixed redis search text endpoint handler, now correctly returns response",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,993,2020-08-02T18:51:22Z,2020-08-03T01:39:27Z,2020-08-03T01:39:28Z,MERGED,True,925,73,7,https://github.com/Erbenos,pmproxy: /search/* endpoints tweaks; man: pmwebapi.3; qa: simple pmproxy /search/* test,1,[],https://github.com/performancecopilot/pcp/pull/993,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/993,"pmproxy:

/search/* - removed client param from all endpoints
/search/text - query params are now in singular form
/search/info - removed ?key param as it did nothing anyway, all RediSearch stuff is in single index
/search/text - removed indom opts for ?field and ?highlight params as RediSearch indom field is no longer fulltext searchable
/search/text - made search query look for tokens in index in order (helps with some heuristics for fetching helptexts)

man:

updated search related docs

qa:

/search endpoints request->response test 1872","pmproxy:

/search/* - removed client param from all endpoints
/search/text - query params are now in singular form
/search/info - removed ?key param as it did nothing anyway, all RediSearch stuff is in single index
/search/text - removed indom opts for ?field and ?highlight params as RediSearch indom field is no longer fulltext searchable
/search/text - made search query look for tokens in index in order (helps with some heuristics for fetching helptexts)

man:

updated search related docs

qa:

/search endpoints request->response test 1872",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,994,2020-08-03T00:10:19Z,2020-08-03T01:39:27Z,2020-08-18T22:21:36Z,MERGED,True,585,435,67,https://github.com/kmcdonell,"man pages, CI, build breakage, ...",9,[],https://github.com/performancecopilot/pcp/pull/994,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/994,"Changes committed to git@github.com:kmcdonell/pcp.git 20200802
Ken McDonell (9):
jumbo man page changes
configure.ac: fix BSD build breakage
src/include/builddefs.in: re-order -I options in CFLAGS
src/pmlogconf/util.c: issaspace() takes an int, not a char argument
qa/admin/check-vm: fix Python version heuristic
build/ci/platforms/ubuntu{1804,2004}.yml: use DEBIAN_FRONTEND=noninteractive with apt-get
build/ci/platforms/ubuntu{1804,2004}.yml: use ACCEPT_EULA=Y with apt-get
qa/admin/check-vm: ensure missing build dependencies are listed with -p
build/ci/paltforms/.yml: ensure -f is used with -p for check-vm
build/ci/platforms/debian10.yml   |    2
build/ci/platforms/debian11.yml   |    2
build/ci/platforms/ubuntu1604.yml |    2
build/ci/platforms/ubuntu1804.yml |   10 -
build/ci/platforms/ubuntu2004.yml |    8 -
configure                         |   16 +-
configure.ac                      |    2
debian/libpcp-mmv1-dev.install    |    6
debian/libpcp-pmda3-dev.install   |   29 ---
debian/libpcp-trace2-dev.install  |    1
debian/libpcp-web1-dev.install    |    2
debian/libpcp3-dev.install        |  145 +------------------
man/Check                         |  290 ++++++++++++++++++++++++++++++++++----
man/man1/pcp-kube-pods.1          |    1
man/man1/pcp-python.1             |    4
man/man1/pmclient.1               |    3
man/man1/pmdacisco.1              |    4
man/man1/pmdakernel.1             |    3
man/man1/pmdasample.1             |   52 +++---
man/man1/pmdasendmail.1           |   50 +++---
man/man1/pmdasimple.1             |   58 +++----
man/man1/pmdatrivial.1            |   44 ++---
man/man1/pmdatxmon.1              |   57 +++----
man/man1/pmie2col.1               |    2
man/man1/pmlogpaste.1             |    2
man/man1/pmquery.1                |    6
man/man1/pmsearch.1               |    2
man/man1/pmstat.1                 |    5
man/man1/pmval.1                  |    7
man/man1/sheet2pcp.1              |   30 +--
man/man3/QmcContext.3             |    2
man/man3/QmcDesc.3                |    2
man/man3/QmcGroup.3               |    2
man/man3/QmcIndom.3               |    2
man/man3/QmcMetric.3              |    2
man/man3/QmcSource.3              |    2
man/man3/mmv_inc_value.3          |    2
man/man3/mmv_lookup_value_desc.3  |    2
man/man3/mmv_stats_init.3         |    2
man/man3/mmv_stats_registry.3     |    4
man/man3/pcpintro.3               |   52 ++++++
man/man3/pmdacache.3              |    1
man/man3/pmdaeventarray.3         |    1
man/man3/pmdaeventclient.3        |    1
man/man3/pmdaeventqueue.3         |    1
man/man3/pmdahelp.3               |    1
man/man3/pmdatrace.3              |    3
man/man3/pmdiscoverservices.3     |    3
man/man3/pmgetusername.3          |    2
man/man3/pmid_helper.3            |    2
man/man3/pmierrstr.3              |    3
man/man3/pmigethandle.3           |    2
man/man3/pmindom_helper.3         |    2
man/man3/pmiunits.3               |    9 -
man/man3/pmpathseparator.3        |    2
man/man3/pmrecord.3               |    4
man/man3/pmseriesdescs.3          |    2
man/man3/pmseriesquery.3          |    2
man/man3/pmsetprocessidentity.3   |    2
man/man3/pmtime.3                 |    2
man/man3/pmtimeval.3              |    2
man/man3d/pmparsedebug.3          |    1
man/man3i/__pmaf.3                |    1
man/man3i/__pmprocesspipe.3       |    4
qa/admin/check-vm                 |   22 ++
src/include/builddefs.in          |   20 --
src/pmlogconf/util.c              |   10 -
67 files changed, 587 insertions(+), 437 deletions(-)
Details ...
commit 336d1f7
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 08:36:16 2020 +1000
build/ci/paltforms/*.yml: ensure -f is used with -p for check-vm

Without the -f, we're using the ""guess which version"" heuristics
which is not a good idea for a virgin install.

commit 8d9e2bc
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 08:33:26 2020 +1000
qa/admin/check-vm: ensure missing build dependencies are listed with -p

commit 908e4a3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 08:22:46 2020 +1000
build/ci/platforms/ubuntu{1804,2004}.yml: use ACCEPT_EULA=Y with apt-get

Second attempt to avoid the M$ EULA acceptance failure that was
failing the Update packages step with the msodbcsql17 package.

commit 064d8fc
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 07:45:44 2020 +1000
build/ci/platforms/ubuntu{1804,2004}.yml: use DEBIAN_FRONTEND=noninteractive with apt-get

When apt-get is installing or upgrading packages, it is best to
use this (it was being used in one place, but there were a couple
of others).

Hopefully this will avoid the M$ EULA acceptance failure that was
failing the Update packages step with the msodbcsql17 package.

commit 076e85f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 07:30:51 2020 +1000
qa/admin/check-vm: fix Python version heuristic

Without -f, check-vm uses a ""guess which version of XYZ you should
be using"" heuristic, for XYZ being Python and Qt.  The Python bit
was wrong and was excluding python3-all-dev from the manifest when
version 3 was guessed for Python.

Was causing a CI build breakage for the ubuntu2004-dierct platform.

commit b79d26a
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 07:03:10 2020 +1000
src/pmlogconf/util.c: issaspace() takes an int, not a char argument

Was causing compilation warnings on *BSD.

commit 5ceb783
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 06:56:53 2020 +1000
src/include/builddefs.in: re-order -I options in CFLAGS

This was causing a build breakage on *BSD where libuv exists and
the headers for libuv are in /usr/pkg/include which is where the PCP
headers end up being installed also.

This change moves the build relative -I options to be before LCFLAGS
in CFLAGS, so our headers are inspected before /usr/pkg/include
(which is specified via LCFLAGS if needed for libuv, for example).

Otherwise the build uses the installed PCP headers, and when the
headers change (like adding a debug flag), the build will fail.

commit 006d8ee
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 06:54:51 2020 +1000
configure.ac: fix *BSD build breakage

The world is bigger than GNU and long options are evil.  In particular
there is no reason to use --utc and --date for date(1) when perfectly
good portable equivalents exist.

commit a144737
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 2 15:29:46 2020 +1000
jumbo man page changes

First off the man/Check script has been fed steriods and now detects
a range of badness in the man pages mostly around consistency,
correctness and interaction with man(1), especially man -k ...
and man <section#> tool-or-function-name.

Also the debian packaging is checked for the section 3 entries that
are NOT in the pcp package.

And there are a bunch of man page changes to ensure man/Check passes
without errors or warnings.","Changes committed to git@github.com:kmcdonell/pcp.git 20200802
Ken McDonell (9):
jumbo man page changes
configure.ac: fix BSD build breakage
src/include/builddefs.in: re-order -I options in CFLAGS
src/pmlogconf/util.c: issaspace() takes an int, not a char argument
qa/admin/check-vm: fix Python version heuristic
build/ci/platforms/ubuntu{1804,2004}.yml: use DEBIAN_FRONTEND=noninteractive with apt-get
build/ci/platforms/ubuntu{1804,2004}.yml: use ACCEPT_EULA=Y with apt-get
qa/admin/check-vm: ensure missing build dependencies are listed with -p
build/ci/paltforms/.yml: ensure -f is used with -p for check-vm
build/ci/platforms/debian10.yml   |    2
build/ci/platforms/debian11.yml   |    2
build/ci/platforms/ubuntu1604.yml |    2
build/ci/platforms/ubuntu1804.yml |   10 -
build/ci/platforms/ubuntu2004.yml |    8 -
configure                         |   16 +-
configure.ac                      |    2
debian/libpcp-mmv1-dev.install    |    6
debian/libpcp-pmda3-dev.install   |   29 ---
debian/libpcp-trace2-dev.install  |    1
debian/libpcp-web1-dev.install    |    2
debian/libpcp3-dev.install        |  145 +------------------
man/Check                         |  290 ++++++++++++++++++++++++++++++++++----
man/man1/pcp-kube-pods.1          |    1
man/man1/pcp-python.1             |    4
man/man1/pmclient.1               |    3
man/man1/pmdacisco.1              |    4
man/man1/pmdakernel.1             |    3
man/man1/pmdasample.1             |   52 +++---
man/man1/pmdasendmail.1           |   50 +++---
man/man1/pmdasimple.1             |   58 +++----
man/man1/pmdatrivial.1            |   44 ++---
man/man1/pmdatxmon.1              |   57 +++----
man/man1/pmie2col.1               |    2
man/man1/pmlogpaste.1             |    2
man/man1/pmquery.1                |    6
man/man1/pmsearch.1               |    2
man/man1/pmstat.1                 |    5
man/man1/pmval.1                  |    7
man/man1/sheet2pcp.1              |   30 +--
man/man3/QmcContext.3             |    2
man/man3/QmcDesc.3                |    2
man/man3/QmcGroup.3               |    2
man/man3/QmcIndom.3               |    2
man/man3/QmcMetric.3              |    2
man/man3/QmcSource.3              |    2
man/man3/mmv_inc_value.3          |    2
man/man3/mmv_lookup_value_desc.3  |    2
man/man3/mmv_stats_init.3         |    2
man/man3/mmv_stats_registry.3     |    4
man/man3/pcpintro.3               |   52 ++++++
man/man3/pmdacache.3              |    1
man/man3/pmdaeventarray.3         |    1
man/man3/pmdaeventclient.3        |    1
man/man3/pmdaeventqueue.3         |    1
man/man3/pmdahelp.3               |    1
man/man3/pmdatrace.3              |    3
man/man3/pmdiscoverservices.3     |    3
man/man3/pmgetusername.3          |    2
man/man3/pmid_helper.3            |    2
man/man3/pmierrstr.3              |    3
man/man3/pmigethandle.3           |    2
man/man3/pmindom_helper.3         |    2
man/man3/pmiunits.3               |    9 -
man/man3/pmpathseparator.3        |    2
man/man3/pmrecord.3               |    4
man/man3/pmseriesdescs.3          |    2
man/man3/pmseriesquery.3          |    2
man/man3/pmsetprocessidentity.3   |    2
man/man3/pmtime.3                 |    2
man/man3/pmtimeval.3              |    2
man/man3d/pmparsedebug.3          |    1
man/man3i/__pmaf.3                |    1
man/man3i/__pmprocesspipe.3       |    4
qa/admin/check-vm                 |   22 ++
src/include/builddefs.in          |   20 --
src/pmlogconf/util.c              |   10 -
67 files changed, 587 insertions(+), 437 deletions(-)
Details ...
commit 336d1f7
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 08:36:16 2020 +1000
build/ci/paltforms/*.yml: ensure -f is used with -p for check-vm

Without the -f, we're using the ""guess which version"" heuristics
which is not a good idea for a virgin install.

commit 8d9e2bc
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 08:33:26 2020 +1000
qa/admin/check-vm: ensure missing build dependencies are listed with -p

commit 908e4a3
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 08:22:46 2020 +1000
build/ci/platforms/ubuntu{1804,2004}.yml: use ACCEPT_EULA=Y with apt-get

Second attempt to avoid the M$ EULA acceptance failure that was
failing the Update packages step with the msodbcsql17 package.

commit 064d8fc
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 07:45:44 2020 +1000
build/ci/platforms/ubuntu{1804,2004}.yml: use DEBIAN_FRONTEND=noninteractive with apt-get

When apt-get is installing or upgrading packages, it is best to
use this (it was being used in one place, but there were a couple
of others).

Hopefully this will avoid the M$ EULA acceptance failure that was
failing the Update packages step with the msodbcsql17 package.

commit 076e85f
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 07:30:51 2020 +1000
qa/admin/check-vm: fix Python version heuristic

Without -f, check-vm uses a ""guess which version of XYZ you should
be using"" heuristic, for XYZ being Python and Qt.  The Python bit
was wrong and was excluding python3-all-dev from the manifest when
version 3 was guessed for Python.

Was causing a CI build breakage for the ubuntu2004-dierct platform.

commit b79d26a
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 07:03:10 2020 +1000
src/pmlogconf/util.c: issaspace() takes an int, not a char argument

Was causing compilation warnings on *BSD.

commit 5ceb783
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 06:56:53 2020 +1000
src/include/builddefs.in: re-order -I options in CFLAGS

This was causing a build breakage on *BSD where libuv exists and
the headers for libuv are in /usr/pkg/include which is where the PCP
headers end up being installed also.

This change moves the build relative -I options to be before LCFLAGS
in CFLAGS, so our headers are inspected before /usr/pkg/include
(which is specified via LCFLAGS if needed for libuv, for example).

Otherwise the build uses the installed PCP headers, and when the
headers change (like adding a debug flag), the build will fail.

commit 006d8ee
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 06:54:51 2020 +1000
configure.ac: fix *BSD build breakage

The world is bigger than GNU and long options are evil.  In particular
there is no reason to use --utc and --date for date(1) when perfectly
good portable equivalents exist.

commit a144737
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 2 15:29:46 2020 +1000
jumbo man page changes

First off the man/Check script has been fed steriods and now detects
a range of badness in the man pages mostly around consistency,
correctness and interaction with man(1), especially man -k ...
and man <section#> tool-or-function-name.

Also the debian packaging is checked for the section 3 entries that
are NOT in the pcp package.

And there are a bunch of man page changes to ensure man/Check passes
without errors or warnings.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,995,2020-08-03T00:48:14Z,2020-08-03T01:39:26Z,2020-08-03T01:39:26Z,MERGED,True,5,2,1,https://github.com/shogo-matsumoto,pmdaproc: acct: add help text for acct.control.*,1,[],https://github.com/performancecopilot/pcp/pull/995,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/995,Related to: #962,Related to: #962,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,997,2020-08-04T01:36:14Z,2020-08-04T02:08:20Z,2020-08-04T02:08:20Z,MERGED,True,201,14,6,https://github.com/kmcdonell,man pages and man page build,6,[],https://github.com/performancecopilot/pcp/pull/997,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/997,"Changes committed to git@github.com:kmcdonell/pcp.git 20200803
Ken McDonell (4):
qa/1251: (new) basic checkout for man(1) plumbing for PCP man pages
qa/1251: tweaks after *BSD adventure
src/include/builddefs.in: tweak INSTALL_MAN
man/man1/pmdacisco.1: remove the probe.1 and parse.1 aliases
man/Check                |   21 ++---
man/man1/pmdacisco.1     |    4
qa/1251                  |  192 ++++++++++++++++++++++++++++++++++++++---------
qa/1251.out              |   74 +++++++++++++++++-
qa/group                 |    1
src/include/builddefs.in |    1
6 files changed, 240 insertions(+), 53 deletions(-)
Details ...
commit e406df3
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 08:06:02 2020 +1000
man/man1/pmdacisco.1: remove the probe.1 and parse.1 aliases

These names are just too common to be polluting the man1 namespace,
and the commands are rarely used.

Needs an extra inclusion in Check to not enforce the NAME and SYNOPSIS
consistency checks for pmdacisco.1.

commit fbf197b
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 07:55:34 2020 +1000
src/include/builddefs.in: tweak INSTALL_MAN

We really don't need the sort here, and it leads to some slightly
odd relationships between the installed files and the symlinks, e.g.
for pmdacisco with the sort
        parse.1 is a file
        pmdacisco.1 -> parse.1
        probe.1 -> parse.1
without the sort
        pmdacisco.1 is a file
        parse.1 -> pmdacisco.1
        probe.1 -> pmdacisco.1

There is of course another whole can of worms about these specific
man pages, but that's another topic.

commit 5b792da
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 07:32:11 2020 +1000
qa/1251: tweaks after *BSD adventure

Still not quite right on NetBSD, but closer

commit 041e44d
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 16:41:11 2020 +1000
qa/1251: (new) basic checkout for man(1) plumbing for PCP man pages","Changes committed to git@github.com:kmcdonell/pcp.git 20200803
Ken McDonell (4):
qa/1251: (new) basic checkout for man(1) plumbing for PCP man pages
qa/1251: tweaks after *BSD adventure
src/include/builddefs.in: tweak INSTALL_MAN
man/man1/pmdacisco.1: remove the probe.1 and parse.1 aliases
man/Check                |   21 ++---
man/man1/pmdacisco.1     |    4
qa/1251                  |  192 ++++++++++++++++++++++++++++++++++++++---------
qa/1251.out              |   74 +++++++++++++++++-
qa/group                 |    1
src/include/builddefs.in |    1
6 files changed, 240 insertions(+), 53 deletions(-)
Details ...
commit e406df3
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 08:06:02 2020 +1000
man/man1/pmdacisco.1: remove the probe.1 and parse.1 aliases

These names are just too common to be polluting the man1 namespace,
and the commands are rarely used.

Needs an extra inclusion in Check to not enforce the NAME and SYNOPSIS
consistency checks for pmdacisco.1.

commit fbf197b
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 07:55:34 2020 +1000
src/include/builddefs.in: tweak INSTALL_MAN

We really don't need the sort here, and it leads to some slightly
odd relationships between the installed files and the symlinks, e.g.
for pmdacisco with the sort
        parse.1 is a file
        pmdacisco.1 -> parse.1
        probe.1 -> parse.1
without the sort
        pmdacisco.1 is a file
        parse.1 -> pmdacisco.1
        probe.1 -> pmdacisco.1

There is of course another whole can of worms about these specific
man pages, but that's another topic.

commit 5b792da
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 07:32:11 2020 +1000
qa/1251: tweaks after *BSD adventure

Still not quite right on NetBSD, but closer

commit 041e44d
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 16:41:11 2020 +1000
qa/1251: (new) basic checkout for man(1) plumbing for PCP man pages",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,998,2020-08-04T21:04:27Z,2020-08-06T23:37:28Z,2020-08-06T23:37:28Z,MERGED,True,307,54,10,https://github.com/Erbenos,"pmproxy, pmsearch, libpcp_web: search functions renamed to be more alike to its series counterparts; man: updated docs of search related functions",3,[],https://github.com/performancecopilot/pcp/pull/998,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/998,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,998,2020-08-04T21:04:27Z,2020-08-06T23:37:28Z,2020-08-06T23:37:28Z,MERGED,True,307,54,10,https://github.com/Erbenos,"pmproxy, pmsearch, libpcp_web: search functions renamed to be more alike to its series counterparts; man: updated docs of search related functions",3,[],https://github.com/performancecopilot/pcp/pull/998,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/998#issuecomment-669000005,,"@Erbenos as mentioned on slack, I think we should keep the 'Text' part of the API names in anticipation of a future (string metric) Values search index.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,998,2020-08-04T21:04:27Z,2020-08-06T23:37:28Z,2020-08-06T23:37:28Z,MERGED,True,307,54,10,https://github.com/Erbenos,"pmproxy, pmsearch, libpcp_web: search functions renamed to be more alike to its series counterparts; man: updated docs of search related functions",3,[],https://github.com/performancecopilot/pcp/pull/998,https://github.com/Erbenos,3,https://github.com/performancecopilot/pcp/pull/998#issuecomment-669298106,,"Reverted back to including ""Text"" segment in related function names.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,999,2020-08-06T00:42:17Z,2020-08-06T02:33:55Z,2020-08-18T22:21:41Z,MERGED,True,286,78,11,https://github.com/kmcdonell,"pmie+systemd, configure for man pages, qa",15,[],https://github.com/performancecopilot/pcp/pull/999,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/999,"Changes committed to git@github.com:kmcdonell/pcp.git 20200803
Ken McDonell (19):
qa/1251: (new) basic checkout for man(1) plumbing for PCP man pages
qa/1251: tweaks after *BSD adventure
src/include/builddefs.in: tweak INSTALL_MAN
man/man1/pmdacisco.1: remove the probe.1 and parse.1 aliases
build/tar/postinstall.tail: cull pmmgr from earlier installs, build man db
debian/rules: support older compat modes ...
qa/1251: support some more bizarre man/man-k variations
qa/1251: FreeBSD strangeness accommodated this time
qa/1251: fix syntax error
build/tar/postinstall.tail: tweak pmmgr culling for FreeBSD
qa/1251: need variant .out to accommodate different apropos/whatis indexing
qa/.gitignore: add 1251.out after last commit for 1251
qa/1251: CentOS 6.10 fallout
qa/1251: openSUSE Leap 15.1 fallout
qa/1251: NetBSD changes
configure.ac: redo HAVE_MANPAGES heuristic, guard exection of bpftrace
src/libpcp/src/auxserver.c: move -Dservices diags from syslog to stderr
src/pmie/pmie_check.service.in: add 25m holdoff at start
src/pmie/src/pmie.c: move notify earlier
Nathan Scott (6):
docs: fix a couple of typos in pmlogger script comments
pmdasmart: fix compilation warning in smart_strip_input function
qa: fix 1397 valgrind filtering for some platforms
qa: missed a spot - update expected 1397 output wrt valgrind warnings
pmieconf: add network rules detecting socket connection saturation
qa: take more control of pmproxy config in qa/1695
Mark Goodwin (4):
qa/115: re-enable pmie.service if it was enabled at the start of the test
qa/575: re-enable pmie.service if it was enabled at the start of the test
qa/581: filter yet another network interface in _filter_pmie_log
qa/common.check: _remove_job_scheduler needs to save pmie.service in systemd_state
Andreas Gerstmayr (1):
ci: don't run update/dist-upgrade in containers (it's an anti pattern)
Paul Evans (1):
pmda.smart: Add full support for NVM Express disks
build/ci/run.py                         |    4
build/tar/postinstall.tail              |   32
configure                               |   50
configure.ac                            |   54
debian/rules                            |    9
man/Check                               |   21
man/man1/pmdacisco.1                    |    4
qa/.gitignore                           |    1
qa/115                                  |    2
qa/1251                                 |  299 +++-
qa/1251.out                             |  140 -
qa/1251.out.no_xM                       |   54
qa/1251.out.xM                          |   62
qa/1397                                 |    2
qa/1397.out                             | 2344 +++++++++++++++++++++++++++++++-
qa/1695                                 |    9
qa/575                                  |    4
qa/581                                  |    1
qa/common.check                         |    5
qa/group                                |    1
qa/smart/smart-root-003.tgz             |binary
src/include/builddefs.in                |    1
src/libpcp/src/auxserver.c              |   14
src/pmdas/smart/help                    |   32
src/pmdas/smart/pmda.c                  |  126 +
src/pmdas/smart/pmdasmart.h             |    7
src/pmdas/smart/pmns                    |   30
src/pmdas/smart/smart_stats.c           |  353 ++++
src/pmdas/smart/smart_stats.h           |   80 -
src/pmie/pmie_check.service.in          |    1
src/pmie/src/pmie.c                     |   46
src/pmieconf/.gitignore                 |    1
src/pmieconf/GNUmakefile                |    2
src/pmieconf/network/localdefs          |    2
src/pmieconf/network/tcplistenoverflows |   42
src/pmieconf/network/tcpqfulldocookies  |   44
src/pmieconf/network/tcpqfulldrops      |   44
src/pmlogger/pmlogger_check.sh          |    2
src/pmlogger/pmlogger_daily.sh          |    2
39 files changed, 3658 insertions(+), 269 deletions(-)
Details ...
commit b8730f2
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 09:26:49 2020 +1000
src/pmie/src/pmie.c: move notify earlier

If systemd is in the picture tell it we're running as soon as possible.

Also added some diags to help triage problems with systemd killing
pmie very early on.

commit 412ab97
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 09:25:38 2020 +1000
src/pmie/pmie_check.service.in: add 25m holdoff at start

Like was done for pmlogger_check.

Trying to make sure we don't race between pmie and pmie_check at start.

commit 8a11479
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 09:24:37 2020 +1000
src/libpcp/src/auxserver.c: move -Dservices diags from syslog to stderr

commit c57ac0e
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 06:43:48 2020 +1000
configure.ac: redo HAVE_MANPAGES heuristic, guard exection of bpftrace

From NetBSD
- man1/man.1* did not exist, so no man pages were generated ... but
  there were a slew of man1/foo.1* files ... so generalize the heuristic
  so it works if _any_ man page is found
- there is no bpftrace, so guard with ""which bpftrace"" before trying to
  execute it

commit fc74097
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 06:40:46 2020 +1000
qa/1251: NetBSD changes

- formatting (bold, undeline) in output from man -k ... filter it away
- remove 1251.out that snuck in during a previous commit ... the test
  selects 1251.out.xM or 1251.out.no_xM at runtime.

commit c189209
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 14:54:45 2020 +1000
qa/1251: openSUSE Leap 15.1 fallout

Looks like that by default, mandb(1) has not been run, so no man
page index, so this test has no chance of passing.

Add _notrun test for ""man -k ls"" and add Note describing how this
might be fixed.

commit aa5ddc4
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 14:42:08 2020 +1000
qa/1251: CentOS 6.10 fallout

- man -k ""nothing appropriate"" message (with or without a final
  period) may come on stdout or stderr ... had most of the bases
  covered, except the way it works on CentOS 6.10
- more generic problem, need to squash white space in man command
  output (not the -k variant) to avoid mismatch due to different
  line justification algorithms

commit a872710
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 13:33:40 2020 +1000
qa/.gitignore: add 1251.out after last commit for 1251

commit 853c3e5
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 13:30:39 2020 +1000
qa/1251: need variant .out to accommodate different apropos/whatis indexing

Some platforms, e.g. CentOS 7.7, don't build the man -k index using the
man page filename, nor the .TH macro parameters ... so indexing is limited
to commands/functions mentioned at the start of the .SH NAME section.

We need to deal with this and run slightly different test cases with
correspondingly different expected output.

commit 247d24e
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 11:10:28 2020 +1000
build/tar/postinstall.tail: tweak pmmgr culling for FreeBSD

commit 92cb72f
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 08:24:27 2020 +1000
qa/1251: fix syntax error

Very odd ... FreeBSD sh(1) did not object, but all bash-based sh's will
barf.

commit 56130e7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 08:23:09 2020 +1000
qa/1251: FreeBSD strangeness accommodated this time

commit de2166c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 07:52:06 2020 +1000
qa/1251: support some more bizarre man/man-k variations

From Slackware this time.

commit 870d6de
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 07:47:56 2020 +1000
debian/rules: support older compat modes ...

Ubuntu 14.04 is supported until Apr 2022, and the previous change to
move from compat version 9 to 10 broke the build there.

This change uses compat version 10 for the most part, but will
fall back to compat version 9 when dh_update_autotools_config is
not present.

commit c79068c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 07:45:01 2020 +1000
build/tar/postinstall.tail: cull pmmgr from earlier installs, build man db

Lots of bits-n-pieces from pmmgr may have remained from previous
installs, so get rid of these.

Also rebuild the apropos/whatis (aka man -k for Slackware) index in
the background so that the PCP man pages can be found with man -k.

commit d9334c4
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Aug 4 15:19:27 2020 +1000
qa/common.check: _remove_job_scheduler needs to save pmie.service in systemd_state

Now the pmie_{check,daily} timers are PartOf pmie.service,
_remove_job_scheduler() needs to also stash the is-active
status of pmie.service in systemd_state. Otherwise, after
_remove_job_scheduler stops the timers (and pmie.service),
pmie.service will not be restarted by _restore_job_scheduler.
(qa/255,510 and 920 affected by this were leaving pmie.service
enabled but stopped).

commit adf2d99
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Aug 4 15:18:12 2020 +1000
qa/581: filter yet another network interface in _filter_pmie_log

commit dc0c0d8
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 14:31:09 2020 +1000
qa: take more control of pmproxy config in qa/1695

Switch off optional features in pmproxy like discovery so that
the test becomes (more) deterministic in terms of the load put
on pmproxy - test exercised the /metrics endpoint primarily.

commit 86f8291
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 13:49:42 2020 +1000
pmieconf: add network rules detecting socket connection saturation

Adds pmie rules - network.tcpqfulldrops, network.tcpqfulldocookies,
and network.listenoverflows - detecting socket connection saturation
likely causing performance degredation and outright service failure.

commit 7670240
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 12:07:34 2020 +1000
qa: missed a spot - update expected 1397 output wrt valgrind warnings

commit 66e43cc
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Aug 4 11:55:02 2020 +1000
qa/575: re-enable pmie.service if it was enabled at the start of the test

qa/575 is another test that has been leaving pmie service disabled.

commit 2e754b6
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 11:31:57 2020 +1000
qa: fix 1397 valgrind filtering for some platforms

commit fe8ee8b
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 11:28:28 2020 +1000
pmdasmart: fix compilation warning in smart_strip_input function

commit 59e97c6
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Aug 4 10:50:11 2020 +1000
qa/115: re-enable pmie.service if it was enabled at the start of the test

qa/115 is the test that has been leaving pmie service disabled.
So re-enable the service in the trap handler if it was enabled
when the test was first started.

commit e406df3
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 08:06:02 2020 +1000
man/man1/pmdacisco.1: remove the probe.1 and parse.1 aliases

These names are just too common to be polluting the man1 namespace,
and the commands are rarely used.

Needs an extra inclusion in Check to not enforce the NAME and SYNOPSIS
consistency checks for pmdacisco.1.

commit fbf197b
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 07:55:34 2020 +1000
src/include/builddefs.in: tweak INSTALL_MAN

We really don't need the sort here, and it leads to some slightly
odd relationships between the installed files and the symlinks, e.g.
for pmdacisco with the sort
        parse.1 is a file
        pmdacisco.1 -> parse.1
        probe.1 -> parse.1
without the sort
        pmdacisco.1 is a file
        parse.1 -> pmdacisco.1
        probe.1 -> pmdacisco.1

There is of course another whole can of worms about these specific
man pages, but that's another topic.

commit 5b792da
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 07:32:11 2020 +1000
qa/1251: tweaks after *BSD adventure

Still not quite right on NetBSD, but closer

commit ee53e15
Author: Paul Evans pevans@redhat.com
Date:   Mon Aug 3 18:25:54 2020 +0100
pmda.smart: Add full support for NVM Express disks

Add support in the S.M.A.R.T PMDA for health attributes from NVME disks
using smartctl output and following the attributes listed in the NVME
Express 1.4a Specification.

It turns out that SATA SSD and NVM Express SSD have completely different
S.M.A.R.T listing in both attributes and format. This patch add the support
along with new ""smart.nvme_attributes.*"" metrics.

Included is an updated and expanded QA test 1379 that covers testing an
NVME disk input and Valgrind testing.

This update satisfies github issue #901 ""pmda-smart read almost no
metrics...""

commit 8f77b93
Author: Andreas Gerstmayr andreas@gerstmayr.me
Date:   Mon Aug 3 14:51:20 2020 +0200
ci: don't run update/dist-upgrade in containers (it's an anti pattern)

https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#run

commit 041e44d
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 16:41:11 2020 +1000
qa/1251: (new) basic checkout for man(1) plumbing for PCP man pages

commit 136b869
Author: Nathan Scott nathans@redhat.com
Date:   Mon Aug 3 16:22:34 2020 +1000
docs: fix a couple of typos in pmlogger script comments","Changes committed to git@github.com:kmcdonell/pcp.git 20200803
Ken McDonell (19):
qa/1251: (new) basic checkout for man(1) plumbing for PCP man pages
qa/1251: tweaks after *BSD adventure
src/include/builddefs.in: tweak INSTALL_MAN
man/man1/pmdacisco.1: remove the probe.1 and parse.1 aliases
build/tar/postinstall.tail: cull pmmgr from earlier installs, build man db
debian/rules: support older compat modes ...
qa/1251: support some more bizarre man/man-k variations
qa/1251: FreeBSD strangeness accommodated this time
qa/1251: fix syntax error
build/tar/postinstall.tail: tweak pmmgr culling for FreeBSD
qa/1251: need variant .out to accommodate different apropos/whatis indexing
qa/.gitignore: add 1251.out after last commit for 1251
qa/1251: CentOS 6.10 fallout
qa/1251: openSUSE Leap 15.1 fallout
qa/1251: NetBSD changes
configure.ac: redo HAVE_MANPAGES heuristic, guard exection of bpftrace
src/libpcp/src/auxserver.c: move -Dservices diags from syslog to stderr
src/pmie/pmie_check.service.in: add 25m holdoff at start
src/pmie/src/pmie.c: move notify earlier
Nathan Scott (6):
docs: fix a couple of typos in pmlogger script comments
pmdasmart: fix compilation warning in smart_strip_input function
qa: fix 1397 valgrind filtering for some platforms
qa: missed a spot - update expected 1397 output wrt valgrind warnings
pmieconf: add network rules detecting socket connection saturation
qa: take more control of pmproxy config in qa/1695
Mark Goodwin (4):
qa/115: re-enable pmie.service if it was enabled at the start of the test
qa/575: re-enable pmie.service if it was enabled at the start of the test
qa/581: filter yet another network interface in _filter_pmie_log
qa/common.check: _remove_job_scheduler needs to save pmie.service in systemd_state
Andreas Gerstmayr (1):
ci: don't run update/dist-upgrade in containers (it's an anti pattern)
Paul Evans (1):
pmda.smart: Add full support for NVM Express disks
build/ci/run.py                         |    4
build/tar/postinstall.tail              |   32
configure                               |   50
configure.ac                            |   54
debian/rules                            |    9
man/Check                               |   21
man/man1/pmdacisco.1                    |    4
qa/.gitignore                           |    1
qa/115                                  |    2
qa/1251                                 |  299 +++-
qa/1251.out                             |  140 -
qa/1251.out.no_xM                       |   54
qa/1251.out.xM                          |   62
qa/1397                                 |    2
qa/1397.out                             | 2344 +++++++++++++++++++++++++++++++-
qa/1695                                 |    9
qa/575                                  |    4
qa/581                                  |    1
qa/common.check                         |    5
qa/group                                |    1
qa/smart/smart-root-003.tgz             |binary
src/include/builddefs.in                |    1
src/libpcp/src/auxserver.c              |   14
src/pmdas/smart/help                    |   32
src/pmdas/smart/pmda.c                  |  126 +
src/pmdas/smart/pmdasmart.h             |    7
src/pmdas/smart/pmns                    |   30
src/pmdas/smart/smart_stats.c           |  353 ++++
src/pmdas/smart/smart_stats.h           |   80 -
src/pmie/pmie_check.service.in          |    1
src/pmie/src/pmie.c                     |   46
src/pmieconf/.gitignore                 |    1
src/pmieconf/GNUmakefile                |    2
src/pmieconf/network/localdefs          |    2
src/pmieconf/network/tcplistenoverflows |   42
src/pmieconf/network/tcpqfulldocookies  |   44
src/pmieconf/network/tcpqfulldrops      |   44
src/pmlogger/pmlogger_check.sh          |    2
src/pmlogger/pmlogger_daily.sh          |    2
39 files changed, 3658 insertions(+), 269 deletions(-)
Details ...
commit b8730f2
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 09:26:49 2020 +1000
src/pmie/src/pmie.c: move notify earlier

If systemd is in the picture tell it we're running as soon as possible.

Also added some diags to help triage problems with systemd killing
pmie very early on.

commit 412ab97
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 09:25:38 2020 +1000
src/pmie/pmie_check.service.in: add 25m holdoff at start

Like was done for pmlogger_check.

Trying to make sure we don't race between pmie and pmie_check at start.

commit 8a11479
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 09:24:37 2020 +1000
src/libpcp/src/auxserver.c: move -Dservices diags from syslog to stderr

commit c57ac0e
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 06:43:48 2020 +1000
configure.ac: redo HAVE_MANPAGES heuristic, guard exection of bpftrace

From NetBSD
- man1/man.1* did not exist, so no man pages were generated ... but
  there were a slew of man1/foo.1* files ... so generalize the heuristic
  so it works if _any_ man page is found
- there is no bpftrace, so guard with ""which bpftrace"" before trying to
  execute it

commit fc74097
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 06:40:46 2020 +1000
qa/1251: NetBSD changes

- formatting (bold, undeline) in output from man -k ... filter it away
- remove 1251.out that snuck in during a previous commit ... the test
  selects 1251.out.xM or 1251.out.no_xM at runtime.

commit c189209
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 14:54:45 2020 +1000
qa/1251: openSUSE Leap 15.1 fallout

Looks like that by default, mandb(1) has not been run, so no man
page index, so this test has no chance of passing.

Add _notrun test for ""man -k ls"" and add Note describing how this
might be fixed.

commit aa5ddc4
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 14:42:08 2020 +1000
qa/1251: CentOS 6.10 fallout

- man -k ""nothing appropriate"" message (with or without a final
  period) may come on stdout or stderr ... had most of the bases
  covered, except the way it works on CentOS 6.10
- more generic problem, need to squash white space in man command
  output (not the -k variant) to avoid mismatch due to different
  line justification algorithms

commit a872710
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 13:33:40 2020 +1000
qa/.gitignore: add 1251.out after last commit for 1251

commit 853c3e5
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 13:30:39 2020 +1000
qa/1251: need variant .out to accommodate different apropos/whatis indexing

Some platforms, e.g. CentOS 7.7, don't build the man -k index using the
man page filename, nor the .TH macro parameters ... so indexing is limited
to commands/functions mentioned at the start of the .SH NAME section.

We need to deal with this and run slightly different test cases with
correspondingly different expected output.

commit 247d24e
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 11:10:28 2020 +1000
build/tar/postinstall.tail: tweak pmmgr culling for FreeBSD

commit 92cb72f
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 08:24:27 2020 +1000
qa/1251: fix syntax error

Very odd ... FreeBSD sh(1) did not object, but all bash-based sh's will
barf.

commit 56130e7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 08:23:09 2020 +1000
qa/1251: FreeBSD strangeness accommodated this time

commit de2166c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 07:52:06 2020 +1000
qa/1251: support some more bizarre man/man-k variations

From Slackware this time.

commit 870d6de
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 07:47:56 2020 +1000
debian/rules: support older compat modes ...

Ubuntu 14.04 is supported until Apr 2022, and the previous change to
move from compat version 9 to 10 broke the build there.

This change uses compat version 10 for the most part, but will
fall back to compat version 9 when dh_update_autotools_config is
not present.

commit c79068c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 07:45:01 2020 +1000
build/tar/postinstall.tail: cull pmmgr from earlier installs, build man db

Lots of bits-n-pieces from pmmgr may have remained from previous
installs, so get rid of these.

Also rebuild the apropos/whatis (aka man -k for Slackware) index in
the background so that the PCP man pages can be found with man -k.

commit d9334c4
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Aug 4 15:19:27 2020 +1000
qa/common.check: _remove_job_scheduler needs to save pmie.service in systemd_state

Now the pmie_{check,daily} timers are PartOf pmie.service,
_remove_job_scheduler() needs to also stash the is-active
status of pmie.service in systemd_state. Otherwise, after
_remove_job_scheduler stops the timers (and pmie.service),
pmie.service will not be restarted by _restore_job_scheduler.
(qa/255,510 and 920 affected by this were leaving pmie.service
enabled but stopped).

commit adf2d99
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Aug 4 15:18:12 2020 +1000
qa/581: filter yet another network interface in _filter_pmie_log

commit dc0c0d8
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 14:31:09 2020 +1000
qa: take more control of pmproxy config in qa/1695

Switch off optional features in pmproxy like discovery so that
the test becomes (more) deterministic in terms of the load put
on pmproxy - test exercised the /metrics endpoint primarily.

commit 86f8291
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 13:49:42 2020 +1000
pmieconf: add network rules detecting socket connection saturation

Adds pmie rules - network.tcpqfulldrops, network.tcpqfulldocookies,
and network.listenoverflows - detecting socket connection saturation
likely causing performance degredation and outright service failure.

commit 7670240
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 12:07:34 2020 +1000
qa: missed a spot - update expected 1397 output wrt valgrind warnings

commit 66e43cc
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Aug 4 11:55:02 2020 +1000
qa/575: re-enable pmie.service if it was enabled at the start of the test

qa/575 is another test that has been leaving pmie service disabled.

commit 2e754b6
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 11:31:57 2020 +1000
qa: fix 1397 valgrind filtering for some platforms

commit fe8ee8b
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 11:28:28 2020 +1000
pmdasmart: fix compilation warning in smart_strip_input function

commit 59e97c6
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Aug 4 10:50:11 2020 +1000
qa/115: re-enable pmie.service if it was enabled at the start of the test

qa/115 is the test that has been leaving pmie service disabled.
So re-enable the service in the trap handler if it was enabled
when the test was first started.

commit e406df3
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 08:06:02 2020 +1000
man/man1/pmdacisco.1: remove the probe.1 and parse.1 aliases

These names are just too common to be polluting the man1 namespace,
and the commands are rarely used.

Needs an extra inclusion in Check to not enforce the NAME and SYNOPSIS
consistency checks for pmdacisco.1.

commit fbf197b
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 07:55:34 2020 +1000
src/include/builddefs.in: tweak INSTALL_MAN

We really don't need the sort here, and it leads to some slightly
odd relationships between the installed files and the symlinks, e.g.
for pmdacisco with the sort
        parse.1 is a file
        pmdacisco.1 -> parse.1
        probe.1 -> parse.1
without the sort
        pmdacisco.1 is a file
        parse.1 -> pmdacisco.1
        probe.1 -> pmdacisco.1

There is of course another whole can of worms about these specific
man pages, but that's another topic.

commit 5b792da
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 07:32:11 2020 +1000
qa/1251: tweaks after *BSD adventure

Still not quite right on NetBSD, but closer

commit ee53e15
Author: Paul Evans pevans@redhat.com
Date:   Mon Aug 3 18:25:54 2020 +0100
pmda.smart: Add full support for NVM Express disks

Add support in the S.M.A.R.T PMDA for health attributes from NVME disks
using smartctl output and following the attributes listed in the NVME
Express 1.4a Specification.

It turns out that SATA SSD and NVM Express SSD have completely different
S.M.A.R.T listing in both attributes and format. This patch add the support
along with new ""smart.nvme_attributes.*"" metrics.

Included is an updated and expanded QA test 1379 that covers testing an
NVME disk input and Valgrind testing.

This update satisfies github issue #901 ""pmda-smart read almost no
metrics...""

commit 8f77b93
Author: Andreas Gerstmayr andreas@gerstmayr.me
Date:   Mon Aug 3 14:51:20 2020 +0200
ci: don't run update/dist-upgrade in containers (it's an anti pattern)

https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#run

commit 041e44d
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 16:41:11 2020 +1000
qa/1251: (new) basic checkout for man(1) plumbing for PCP man pages

commit 136b869
Author: Nathan Scott nathans@redhat.com
Date:   Mon Aug 3 16:22:34 2020 +1000
docs: fix a couple of typos in pmlogger script comments",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,999,2020-08-06T00:42:17Z,2020-08-06T02:33:55Z,2020-08-18T22:21:41Z,MERGED,True,286,78,11,https://github.com/kmcdonell,"pmie+systemd, configure for man pages, qa",15,[],https://github.com/performancecopilot/pcp/pull/999,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/999#issuecomment-669647101,"Changes committed to git@github.com:kmcdonell/pcp.git 20200803
Ken McDonell (19):
qa/1251: (new) basic checkout for man(1) plumbing for PCP man pages
qa/1251: tweaks after *BSD adventure
src/include/builddefs.in: tweak INSTALL_MAN
man/man1/pmdacisco.1: remove the probe.1 and parse.1 aliases
build/tar/postinstall.tail: cull pmmgr from earlier installs, build man db
debian/rules: support older compat modes ...
qa/1251: support some more bizarre man/man-k variations
qa/1251: FreeBSD strangeness accommodated this time
qa/1251: fix syntax error
build/tar/postinstall.tail: tweak pmmgr culling for FreeBSD
qa/1251: need variant .out to accommodate different apropos/whatis indexing
qa/.gitignore: add 1251.out after last commit for 1251
qa/1251: CentOS 6.10 fallout
qa/1251: openSUSE Leap 15.1 fallout
qa/1251: NetBSD changes
configure.ac: redo HAVE_MANPAGES heuristic, guard exection of bpftrace
src/libpcp/src/auxserver.c: move -Dservices diags from syslog to stderr
src/pmie/pmie_check.service.in: add 25m holdoff at start
src/pmie/src/pmie.c: move notify earlier
Nathan Scott (6):
docs: fix a couple of typos in pmlogger script comments
pmdasmart: fix compilation warning in smart_strip_input function
qa: fix 1397 valgrind filtering for some platforms
qa: missed a spot - update expected 1397 output wrt valgrind warnings
pmieconf: add network rules detecting socket connection saturation
qa: take more control of pmproxy config in qa/1695
Mark Goodwin (4):
qa/115: re-enable pmie.service if it was enabled at the start of the test
qa/575: re-enable pmie.service if it was enabled at the start of the test
qa/581: filter yet another network interface in _filter_pmie_log
qa/common.check: _remove_job_scheduler needs to save pmie.service in systemd_state
Andreas Gerstmayr (1):
ci: don't run update/dist-upgrade in containers (it's an anti pattern)
Paul Evans (1):
pmda.smart: Add full support for NVM Express disks
build/ci/run.py                         |    4
build/tar/postinstall.tail              |   32
configure                               |   50
configure.ac                            |   54
debian/rules                            |    9
man/Check                               |   21
man/man1/pmdacisco.1                    |    4
qa/.gitignore                           |    1
qa/115                                  |    2
qa/1251                                 |  299 +++-
qa/1251.out                             |  140 -
qa/1251.out.no_xM                       |   54
qa/1251.out.xM                          |   62
qa/1397                                 |    2
qa/1397.out                             | 2344 +++++++++++++++++++++++++++++++-
qa/1695                                 |    9
qa/575                                  |    4
qa/581                                  |    1
qa/common.check                         |    5
qa/group                                |    1
qa/smart/smart-root-003.tgz             |binary
src/include/builddefs.in                |    1
src/libpcp/src/auxserver.c              |   14
src/pmdas/smart/help                    |   32
src/pmdas/smart/pmda.c                  |  126 +
src/pmdas/smart/pmdasmart.h             |    7
src/pmdas/smart/pmns                    |   30
src/pmdas/smart/smart_stats.c           |  353 ++++
src/pmdas/smart/smart_stats.h           |   80 -
src/pmie/pmie_check.service.in          |    1
src/pmie/src/pmie.c                     |   46
src/pmieconf/.gitignore                 |    1
src/pmieconf/GNUmakefile                |    2
src/pmieconf/network/localdefs          |    2
src/pmieconf/network/tcplistenoverflows |   42
src/pmieconf/network/tcpqfulldocookies  |   44
src/pmieconf/network/tcpqfulldrops      |   44
src/pmlogger/pmlogger_check.sh          |    2
src/pmlogger/pmlogger_daily.sh          |    2
39 files changed, 3658 insertions(+), 269 deletions(-)
Details ...
commit b8730f2
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 09:26:49 2020 +1000
src/pmie/src/pmie.c: move notify earlier

If systemd is in the picture tell it we're running as soon as possible.

Also added some diags to help triage problems with systemd killing
pmie very early on.

commit 412ab97
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 09:25:38 2020 +1000
src/pmie/pmie_check.service.in: add 25m holdoff at start

Like was done for pmlogger_check.

Trying to make sure we don't race between pmie and pmie_check at start.

commit 8a11479
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 09:24:37 2020 +1000
src/libpcp/src/auxserver.c: move -Dservices diags from syslog to stderr

commit c57ac0e
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 06:43:48 2020 +1000
configure.ac: redo HAVE_MANPAGES heuristic, guard exection of bpftrace

From NetBSD
- man1/man.1* did not exist, so no man pages were generated ... but
  there were a slew of man1/foo.1* files ... so generalize the heuristic
  so it works if _any_ man page is found
- there is no bpftrace, so guard with ""which bpftrace"" before trying to
  execute it

commit fc74097
Author: Ken McDonell kenj@kenj.id.au
Date:   Thu Aug 6 06:40:46 2020 +1000
qa/1251: NetBSD changes

- formatting (bold, undeline) in output from man -k ... filter it away
- remove 1251.out that snuck in during a previous commit ... the test
  selects 1251.out.xM or 1251.out.no_xM at runtime.

commit c189209
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 14:54:45 2020 +1000
qa/1251: openSUSE Leap 15.1 fallout

Looks like that by default, mandb(1) has not been run, so no man
page index, so this test has no chance of passing.

Add _notrun test for ""man -k ls"" and add Note describing how this
might be fixed.

commit aa5ddc4
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 14:42:08 2020 +1000
qa/1251: CentOS 6.10 fallout

- man -k ""nothing appropriate"" message (with or without a final
  period) may come on stdout or stderr ... had most of the bases
  covered, except the way it works on CentOS 6.10
- more generic problem, need to squash white space in man command
  output (not the -k variant) to avoid mismatch due to different
  line justification algorithms

commit a872710
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 13:33:40 2020 +1000
qa/.gitignore: add 1251.out after last commit for 1251

commit 853c3e5
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 13:30:39 2020 +1000
qa/1251: need variant .out to accommodate different apropos/whatis indexing

Some platforms, e.g. CentOS 7.7, don't build the man -k index using the
man page filename, nor the .TH macro parameters ... so indexing is limited
to commands/functions mentioned at the start of the .SH NAME section.

We need to deal with this and run slightly different test cases with
correspondingly different expected output.

commit 247d24e
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 11:10:28 2020 +1000
build/tar/postinstall.tail: tweak pmmgr culling for FreeBSD

commit 92cb72f
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 08:24:27 2020 +1000
qa/1251: fix syntax error

Very odd ... FreeBSD sh(1) did not object, but all bash-based sh's will
barf.

commit 56130e7
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 08:23:09 2020 +1000
qa/1251: FreeBSD strangeness accommodated this time

commit de2166c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 07:52:06 2020 +1000
qa/1251: support some more bizarre man/man-k variations

From Slackware this time.

commit 870d6de
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 07:47:56 2020 +1000
debian/rules: support older compat modes ...

Ubuntu 14.04 is supported until Apr 2022, and the previous change to
move from compat version 9 to 10 broke the build there.

This change uses compat version 10 for the most part, but will
fall back to compat version 9 when dh_update_autotools_config is
not present.

commit c79068c
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Aug 5 07:45:01 2020 +1000
build/tar/postinstall.tail: cull pmmgr from earlier installs, build man db

Lots of bits-n-pieces from pmmgr may have remained from previous
installs, so get rid of these.

Also rebuild the apropos/whatis (aka man -k for Slackware) index in
the background so that the PCP man pages can be found with man -k.

commit d9334c4
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Aug 4 15:19:27 2020 +1000
qa/common.check: _remove_job_scheduler needs to save pmie.service in systemd_state

Now the pmie_{check,daily} timers are PartOf pmie.service,
_remove_job_scheduler() needs to also stash the is-active
status of pmie.service in systemd_state. Otherwise, after
_remove_job_scheduler stops the timers (and pmie.service),
pmie.service will not be restarted by _restore_job_scheduler.
(qa/255,510 and 920 affected by this were leaving pmie.service
enabled but stopped).

commit adf2d99
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Aug 4 15:18:12 2020 +1000
qa/581: filter yet another network interface in _filter_pmie_log

commit dc0c0d8
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 14:31:09 2020 +1000
qa: take more control of pmproxy config in qa/1695

Switch off optional features in pmproxy like discovery so that
the test becomes (more) deterministic in terms of the load put
on pmproxy - test exercised the /metrics endpoint primarily.

commit 86f8291
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 13:49:42 2020 +1000
pmieconf: add network rules detecting socket connection saturation

Adds pmie rules - network.tcpqfulldrops, network.tcpqfulldocookies,
and network.listenoverflows - detecting socket connection saturation
likely causing performance degredation and outright service failure.

commit 7670240
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 12:07:34 2020 +1000
qa: missed a spot - update expected 1397 output wrt valgrind warnings

commit 66e43cc
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Aug 4 11:55:02 2020 +1000
qa/575: re-enable pmie.service if it was enabled at the start of the test

qa/575 is another test that has been leaving pmie service disabled.

commit 2e754b6
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 11:31:57 2020 +1000
qa: fix 1397 valgrind filtering for some platforms

commit fe8ee8b
Author: Nathan Scott nathans@redhat.com
Date:   Tue Aug 4 11:28:28 2020 +1000
pmdasmart: fix compilation warning in smart_strip_input function

commit 59e97c6
Author: Mark Goodwin mgoodwin@redhat.com
Date:   Tue Aug 4 10:50:11 2020 +1000
qa/115: re-enable pmie.service if it was enabled at the start of the test

qa/115 is the test that has been leaving pmie service disabled.
So re-enable the service in the trap handler if it was enabled
when the test was first started.

commit e406df3
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 08:06:02 2020 +1000
man/man1/pmdacisco.1: remove the probe.1 and parse.1 aliases

These names are just too common to be polluting the man1 namespace,
and the commands are rarely used.

Needs an extra inclusion in Check to not enforce the NAME and SYNOPSIS
consistency checks for pmdacisco.1.

commit fbf197b
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 07:55:34 2020 +1000
src/include/builddefs.in: tweak INSTALL_MAN

We really don't need the sort here, and it leads to some slightly
odd relationships between the installed files and the symlinks, e.g.
for pmdacisco with the sort
        parse.1 is a file
        pmdacisco.1 -> parse.1
        probe.1 -> parse.1
without the sort
        pmdacisco.1 is a file
        parse.1 -> pmdacisco.1
        probe.1 -> pmdacisco.1

There is of course another whole can of worms about these specific
man pages, but that's another topic.

commit 5b792da
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 4 07:32:11 2020 +1000
qa/1251: tweaks after *BSD adventure

Still not quite right on NetBSD, but closer

commit ee53e15
Author: Paul Evans pevans@redhat.com
Date:   Mon Aug 3 18:25:54 2020 +0100
pmda.smart: Add full support for NVM Express disks

Add support in the S.M.A.R.T PMDA for health attributes from NVME disks
using smartctl output and following the attributes listed in the NVME
Express 1.4a Specification.

It turns out that SATA SSD and NVM Express SSD have completely different
S.M.A.R.T listing in both attributes and format. This patch add the support
along with new ""smart.nvme_attributes.*"" metrics.

Included is an updated and expanded QA test 1379 that covers testing an
NVME disk input and Valgrind testing.

This update satisfies github issue #901 ""pmda-smart read almost no
metrics...""

commit 8f77b93
Author: Andreas Gerstmayr andreas@gerstmayr.me
Date:   Mon Aug 3 14:51:20 2020 +0200
ci: don't run update/dist-upgrade in containers (it's an anti pattern)

https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#run

commit 041e44d
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 3 16:41:11 2020 +1000
qa/1251: (new) basic checkout for man(1) plumbing for PCP man pages

commit 136b869
Author: Nathan Scott nathans@redhat.com
Date:   Mon Aug 3 16:22:34 2020 +1000
docs: fix a couple of typos in pmlogger script comments","pmie+pmieutil QA passes, looks fine. Note AFAIK the TimeoutStartSec=25m change in pmie_check.service does not introduce a ""hold-off"" at start. It determines how long the oneshot can run for (in a large pmie farm it could run for longer than the default timeout).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1005,2020-08-18T06:54:36Z,2020-08-18T07:35:47Z,2020-08-18T07:35:47Z,MERGED,True,3361,190,6,https://github.com/goodwinos,"Merge Kyoma's libpcp_web ""Timeseries query language extensions"" GSoC work",38,[],https://github.com/performancecopilot/pcp/pull/1005,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1005,"This PR merges the first (major) part of Kyoma's GSoC work for timeseries query language extensions, adding numerous functions and arithmetic expressions. All tests in QA groups libpcp_web and pmseries have been verified and new test qa/1886 is added to exercise most of the new functions and expressions.
Additional work is in progress involving metadata updates, more functions and updated documentation.","This PR merges the first (major) part of Kyoma's GSoC work for timeseries query language extensions, adding numerous functions and arithmetic expressions. All tests in QA groups libpcp_web and pmseries have been verified and new test qa/1886 is added to exercise most of the new functions and expressions.
Additional work is in progress involving metadata updates, more functions and updated documentation.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1006,2020-08-18T10:55:07Z,2020-08-19T05:31:17Z,2020-09-02T01:04:12Z,MERGED,True,6333,617,92,https://github.com/kmcdonell,per-context derived metrics,25,[],https://github.com/performancecopilot/pcp/pull/1006,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1006,"Changes committed to git@github.com:kmcdonell/pcp.git 20200807
Ken McDonell (24):
Makepkgs: for Gentoo build w/out Python2
qa/admin/pcp-daily: run check-vm and report missing packages
qa/admin/other-packages/require: RHEL 8.x needs python2-devel
pm{log,ie}ctl + qa: fine tuning
qa/1252 & 1253: (new) exercise derived metrics and context juggling
src/libpcp: derived metric changes for register after open
qa/src/template.c: change command line arg declarations
qa/src/GNUlocaldefs: add ctx_derive.c missed in earlier commit
qa/README.vm: small updates
qa: some derived metric tests remade after last libpcp change to a diagnostic
src/include/pcp/pmapi.h: new methods for per-context derived metrics
src/libpcp: first-cut at per-context derived metrics
qa/src: app changes for per-context derived metrics
qa: coverage for per-context derived metrics
qa/1260: update comment to get libpcp routine name right
man: new and updated man pages for per-context derived metrics
debian/libpcp3-dev.install: add per-context derived metric man pages
qa/src/template.c: small changes
libpcp: more changes related to per-context derived metrics
src/include/pcp/pmapi.h: change macro for pm{Get,Set}DerivedControl
qa: lots of tests remade after diagnostic message changes in libpcp
qa/src: add -C and add_ctx_dm() call to src/torture_pmns.c
qa: additional tests for per-context derived metrics
src/libpcp_fault/src/GNUmakefile: fix bit rot
Makepkgs                          |    1
debian/libpcp3-dev.install        |    5
man/man3/pmaddderived.3           |  154 +++++
man/man3/pmgetderivedcontrol.3    |  108 +++
man/man3/pmregisterderived.3      |   25
qa/070.out                        |   30 -
qa/1063.out                       |   30 -
qa/1064.out                       |   24
qa/1103.out                       |   18
qa/1204                           |    7
qa/1204.out                       |   34 -
qa/1206                           |    9
qa/1206.out                       |    4
qa/1208                           |    6
qa/1208.out                       |    2
qa/1209                           |   12
qa/1209.out                       |    2
qa/1210                           |   14
qa/1210.out                       |    2
qa/1213                           |    7
qa/1213.out                       |    4
qa/1216                           |    7
qa/1216.out                       |    4
qa/1230                           |    6
qa/1230.out                       |    2
qa/1233.out                       |   12
qa/1235.out                       |   12
qa/1251                           |    6
qa/1252                           |   49 +
qa/1252.out                       |  228 +++++++
qa/1253                           |   34 +
qa/1253.out                       |  238 ++++++++
qa/1254                           |   68 ++
qa/1254.out                       |  294 ++++++++++
qa/1256                           |   32 +
qa/1256.out                       |  304 ++++++++++
qa/1259                           |   68 ++
qa/1259.out                       | 1116 +++++++++++++++++++++++++++++++++++++-
qa/1260                           |   75 ++
qa/1260.out                       |  415 ++++++++++++++
qa/1261                           |  133 ++++
qa/1261.out                       |  256 ++++++++
qa/1262                           |   36 +
qa/1262.out                       |  266 +++++++++
qa/1263                           |   74 ++
qa/1263.out                       |   57 +
qa/1268                           |   94 +++
qa/1268.out                       |  109 +++
qa/1270                           |   83 ++
qa/1270.out                       |   93 +++
qa/225.out                        |   56 -
qa/246.out                        |   10
qa/247.out                        |   62 +-
qa/256.out                        |   22
qa/259.out                        |   22
qa/260.out                        |   18
qa/263.out                        |   96 +--
qa/275.out                        |   54 -
qa/334.out                        |   14
qa/335.out                        |    8
qa/586.out                        |    2
qa/688.out                        |   18
qa/690.out                        |   24
qa/773.out                        |   12
qa/803.out                        |    4
qa/927.out                        |   30 -
qa/935.out                        |   56 -
qa/937.out                        |   22
qa/938.out                        |   40 -
qa/939.out                        |   44 -
qa/968.out                        |    2
qa/969.out                        |   76 +-
qa/README.vm                      |   14
qa/admin/other-packages/require   |    1
qa/admin/pcp-daily                |   10
qa/group                          |   13
qa/src/.gitignore                 |    1
qa/src/GNUlocaldefs               |   21
qa/src/addctxdm.c                 |  129 ++++
qa/src/churnctx.c                 |   32 -
qa/src/ctx_derive.c               |  592 +++++++++++++++++++-
qa/src/grind_ctx.c                |   20
qa/src/template.c                 |   20
qa/src/torture_pmns.c             |   17
src/include/pcp/pmapi.h           |   15
src/libpcp/src/derive.h           |   28
src/libpcp/src/derive_fetch.c     |    2
src/libpcp/src/derive_parser.y.in |  849 +++++++++++++++++++++++-----
src/libpcp/src/exports.master     |    8
src/libpcp/src/pmns.c             |    6
src/libpcp_fault/src/GNUmakefile  |    4
src/pmlogctl/pmlogctl.sh          |    9
92 files changed, 6434 insertions(+), 718 deletions(-)
Details ...
commit 0a82aec
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 20:50:39 2020 +1000
src/libpcp_fault/src/GNUmakefile: fix bit rot

This needs to (loosely) track libpcp, but it had become just a bit
too loose to the point where the fault injection version of libpcp
would not build correctly any more.

commit e9f1b79
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 20:47:19 2020 +1000
qa: additional tests for per-context derived metrics

1263: per-context derived metrics and torture_pmns
1268: per-context derived metrics and metric name masking test
1270: PMID exhaustion tests through fault injection

commit 8643eea
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 20:43:50 2020 +1000
qa/src: add -C and add_ctx_dm() call to src/torture_pmns.c

So we can exercise PMNS operations agains per-context derived metrics.

Also clean up some compilation warnings in src/ctx_derive.c and
src/ctx_derive.c

commit 7949fd9
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 20:42:05 2020 +1000
qa: lots of tests remade after diagnostic message changes in libpcp

Fallout from latest derived metric changes.

commit 1a6ba1f
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 20:38:52 2020 +1000
src/include/pcp/pmapi.h: change macro for pm{Get,Set}DerivedControl

Change macro from PCP_DERIVED_DEBUG_PMNS to PCP_DERIVED_DEBUG_EVAL
to better capture debugging instrumentation scope.

commit eba4d8a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 20:24:22 2020 +1000
libpcp: more changes related to per-context derived metrics

- fix locking protocol botches
- rework pmid allocation scheme and implement out of PMIDs checks
  for both global and per-context derived metrics
- add fault injection hooks to test PMID exhaustion code paths
- change pmRegisterDerived diagnostic to stress global scope for
  these derived metrics
- change control macro from PCP_DERIVED_DEBUG_PMNS to PCP_DERIVED_DEBUG_EVAL
  to better capture debugging instrumentation scope
- re-enable PMNS operations when no context is available (this was
  disabled by an earlier per-context change) ... we can always use
  registered.mlist[], even when there is no current context
- in all lookups, skip global derived metrics that are masked by
  per-context derived metrics of the same name
- add ctxp as argument to __dmgetname() so we can handle both global
  and per-context scopes, and really search the per-context list when
  the context is available ... involves changes to pmNameID() and
  pmNameAll() as well

commit c69848a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 07:03:09 2020 +1000
qa/src/template.c: small changes

- put back the ""General options"" line in the usage that was dropped
  in the last commit
- replace PMAPI_OPTIONS by the string from pmapi.h ... this makes
  it much easier to edit to cull uneeded options when creating a new app
- remade 070.out and 586.out to match changes

commit d5970af
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 17 07:20:18 2020 +1000
debian/libpcp3-dev.install: add per-context derived metric man pages

commit ab6b5ae
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 17 07:19:21 2020 +1000
man: new and updated man pages for per-context derived metrics

commit 06027fa
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 16 15:08:20 2020 +1000
qa/1260: update comment to get libpcp routine name right

commit f03cd12
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 16 14:56:55 2020 +1000
qa: coverage for per-context derived metrics

225.out: remade after libpcp diagnostic format change
803.out: remade after libpcp diagnostic format change in parser
968.out: remade after libpcp diagnostic format change in parser
1252: extended coverage
1253: extended coverage
1254: (new) using the new src/ctx_derive that exercises global derived
      metrics with context churning
1256: (new) valgrind version of 1254
1259: (new) version of 1254 that uses per-context metrics
1260: (new) exercise pm{Set,Get}DerivedControl() to get and set limits
      for both global and per-context derived metrics, and toggle
      various flavours of derived metric debugging on and off
1261: (new) version of 1066 (mongo derived grinder that uses every
      construct in the derived metrics expr grammar) for per-context
      derived metrics
1262: (new) valgrind version of 1261
group: all the new tests above

commit 9c02fa2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 16 11:56:52 2020 +1000
qa/src: app changes for per-context derived metrics

- addctxdm.c: new routine (add_ctx_dm()) to load per-context derived
  metrics from a config file, along the lines of pmLoadDerivedConfig
- ctx_derive.c: internal changes to increase coverage
- churnctx.c and grind_ctx.c: new -C arg to use add_ctx_dm()

commit 783bbb9
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 16 11:55:45 2020 +1000
src/libpcp: first-cut at per-context derived metrics

Major refactoring to derive_parser.y.in and associated changes.

commit 2d41bae
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 16 11:53:40 2020 +1000
src/include/pcp/pmapi.h: new methods for per-context derived metrics

- pmAddDerivedMetric
- pmAddDerived
- pmGetDerivedControl
- pmSetDerivedControl

commit 3ffed54
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 11 09:49:29 2020 +1000
qa: some derived metric tests remade after last libpcp change to a diagnostic

commit 81929d9
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 11 09:49:11 2020 +1000
qa/README.vm: small updates

commit 7b86831
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 11 09:48:10 2020 +1000
qa/src/GNUlocaldefs: add ctx_derive.c missed in earlier commit

commit 21265a4
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 11 09:47:17 2020 +1000
qa/src/template.c: change command line arg declarations

Enumerate the options, making it easier to cherry-pick command line
options when creating a new test program.

commit 15932fb
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 11 09:41:59 2020 +1000
src/libpcp: derived metric changes for register after open

Previously, we had (incorrectly) assumed that the set of global derived
metrics would no change for a context after the pmNewContext() ... but
if a subsequent pmRegisterDerived*() is performed, we need those newly
defined derived metrics to be visible, not just in future contexts,
but also in all currently open contexts.

This is precursor work to the refactoring needed to support per-context
derived metrics alongside the (existing) global derived metrics.

commit 05200ac
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 11 09:40:00 2020 +1000
qa/1252 & 1253: (new) exercise derived metrics and context juggling

1253 is the valgrind version of 1252.

Also new qa test program qa/src/ctx_derive.c

commit c4496d8
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 7 17:20:11 2020 +1000
pm{log,ie}ctl + qa: fine tuning

- fix line wrapping before [default ...] in usage message
- qa/1204 for usage change, and to filter extra white space out
- qa (lots) because PCP_ETC_DIR is not always /etc, especially in
  *BSD land

commit 0e523b2
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 7 17:18:51 2020 +1000
qa/admin/other-packages/require: RHEL 8.x needs python2-devel

commit 1f5af00
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 7 17:14:29 2020 +1000
qa/admin/pcp-daily: run check-vm and report missing packages

Just with -m.

commit 59e3bb1
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 7 17:10:29 2020 +1000
Makepkgs: for Gentoo build w/out Python2

When both Python2 and Python3 are present, our build dies down a deep
rat hole in the Python part of the build.  With Python3 alone, the build
works.","Changes committed to git@github.com:kmcdonell/pcp.git 20200807
Ken McDonell (24):
Makepkgs: for Gentoo build w/out Python2
qa/admin/pcp-daily: run check-vm and report missing packages
qa/admin/other-packages/require: RHEL 8.x needs python2-devel
pm{log,ie}ctl + qa: fine tuning
qa/1252 & 1253: (new) exercise derived metrics and context juggling
src/libpcp: derived metric changes for register after open
qa/src/template.c: change command line arg declarations
qa/src/GNUlocaldefs: add ctx_derive.c missed in earlier commit
qa/README.vm: small updates
qa: some derived metric tests remade after last libpcp change to a diagnostic
src/include/pcp/pmapi.h: new methods for per-context derived metrics
src/libpcp: first-cut at per-context derived metrics
qa/src: app changes for per-context derived metrics
qa: coverage for per-context derived metrics
qa/1260: update comment to get libpcp routine name right
man: new and updated man pages for per-context derived metrics
debian/libpcp3-dev.install: add per-context derived metric man pages
qa/src/template.c: small changes
libpcp: more changes related to per-context derived metrics
src/include/pcp/pmapi.h: change macro for pm{Get,Set}DerivedControl
qa: lots of tests remade after diagnostic message changes in libpcp
qa/src: add -C and add_ctx_dm() call to src/torture_pmns.c
qa: additional tests for per-context derived metrics
src/libpcp_fault/src/GNUmakefile: fix bit rot
Makepkgs                          |    1
debian/libpcp3-dev.install        |    5
man/man3/pmaddderived.3           |  154 +++++
man/man3/pmgetderivedcontrol.3    |  108 +++
man/man3/pmregisterderived.3      |   25
qa/070.out                        |   30 -
qa/1063.out                       |   30 -
qa/1064.out                       |   24
qa/1103.out                       |   18
qa/1204                           |    7
qa/1204.out                       |   34 -
qa/1206                           |    9
qa/1206.out                       |    4
qa/1208                           |    6
qa/1208.out                       |    2
qa/1209                           |   12
qa/1209.out                       |    2
qa/1210                           |   14
qa/1210.out                       |    2
qa/1213                           |    7
qa/1213.out                       |    4
qa/1216                           |    7
qa/1216.out                       |    4
qa/1230                           |    6
qa/1230.out                       |    2
qa/1233.out                       |   12
qa/1235.out                       |   12
qa/1251                           |    6
qa/1252                           |   49 +
qa/1252.out                       |  228 +++++++
qa/1253                           |   34 +
qa/1253.out                       |  238 ++++++++
qa/1254                           |   68 ++
qa/1254.out                       |  294 ++++++++++
qa/1256                           |   32 +
qa/1256.out                       |  304 ++++++++++
qa/1259                           |   68 ++
qa/1259.out                       | 1116 +++++++++++++++++++++++++++++++++++++-
qa/1260                           |   75 ++
qa/1260.out                       |  415 ++++++++++++++
qa/1261                           |  133 ++++
qa/1261.out                       |  256 ++++++++
qa/1262                           |   36 +
qa/1262.out                       |  266 +++++++++
qa/1263                           |   74 ++
qa/1263.out                       |   57 +
qa/1268                           |   94 +++
qa/1268.out                       |  109 +++
qa/1270                           |   83 ++
qa/1270.out                       |   93 +++
qa/225.out                        |   56 -
qa/246.out                        |   10
qa/247.out                        |   62 +-
qa/256.out                        |   22
qa/259.out                        |   22
qa/260.out                        |   18
qa/263.out                        |   96 +--
qa/275.out                        |   54 -
qa/334.out                        |   14
qa/335.out                        |    8
qa/586.out                        |    2
qa/688.out                        |   18
qa/690.out                        |   24
qa/773.out                        |   12
qa/803.out                        |    4
qa/927.out                        |   30 -
qa/935.out                        |   56 -
qa/937.out                        |   22
qa/938.out                        |   40 -
qa/939.out                        |   44 -
qa/968.out                        |    2
qa/969.out                        |   76 +-
qa/README.vm                      |   14
qa/admin/other-packages/require   |    1
qa/admin/pcp-daily                |   10
qa/group                          |   13
qa/src/.gitignore                 |    1
qa/src/GNUlocaldefs               |   21
qa/src/addctxdm.c                 |  129 ++++
qa/src/churnctx.c                 |   32 -
qa/src/ctx_derive.c               |  592 +++++++++++++++++++-
qa/src/grind_ctx.c                |   20
qa/src/template.c                 |   20
qa/src/torture_pmns.c             |   17
src/include/pcp/pmapi.h           |   15
src/libpcp/src/derive.h           |   28
src/libpcp/src/derive_fetch.c     |    2
src/libpcp/src/derive_parser.y.in |  849 +++++++++++++++++++++++-----
src/libpcp/src/exports.master     |    8
src/libpcp/src/pmns.c             |    6
src/libpcp_fault/src/GNUmakefile  |    4
src/pmlogctl/pmlogctl.sh          |    9
92 files changed, 6434 insertions(+), 718 deletions(-)
Details ...
commit 0a82aec
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 20:50:39 2020 +1000
src/libpcp_fault/src/GNUmakefile: fix bit rot

This needs to (loosely) track libpcp, but it had become just a bit
too loose to the point where the fault injection version of libpcp
would not build correctly any more.

commit e9f1b79
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 20:47:19 2020 +1000
qa: additional tests for per-context derived metrics

1263: per-context derived metrics and torture_pmns
1268: per-context derived metrics and metric name masking test
1270: PMID exhaustion tests through fault injection

commit 8643eea
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 20:43:50 2020 +1000
qa/src: add -C and add_ctx_dm() call to src/torture_pmns.c

So we can exercise PMNS operations agains per-context derived metrics.

Also clean up some compilation warnings in src/ctx_derive.c and
src/ctx_derive.c

commit 7949fd9
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 20:42:05 2020 +1000
qa: lots of tests remade after diagnostic message changes in libpcp

Fallout from latest derived metric changes.

commit 1a6ba1f
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 20:38:52 2020 +1000
src/include/pcp/pmapi.h: change macro for pm{Get,Set}DerivedControl

Change macro from PCP_DERIVED_DEBUG_PMNS to PCP_DERIVED_DEBUG_EVAL
to better capture debugging instrumentation scope.

commit eba4d8a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 20:24:22 2020 +1000
libpcp: more changes related to per-context derived metrics

- fix locking protocol botches
- rework pmid allocation scheme and implement out of PMIDs checks
  for both global and per-context derived metrics
- add fault injection hooks to test PMID exhaustion code paths
- change pmRegisterDerived diagnostic to stress global scope for
  these derived metrics
- change control macro from PCP_DERIVED_DEBUG_PMNS to PCP_DERIVED_DEBUG_EVAL
  to better capture debugging instrumentation scope
- re-enable PMNS operations when no context is available (this was
  disabled by an earlier per-context change) ... we can always use
  registered.mlist[], even when there is no current context
- in all lookups, skip global derived metrics that are masked by
  per-context derived metrics of the same name
- add ctxp as argument to __dmgetname() so we can handle both global
  and per-context scopes, and really search the per-context list when
  the context is available ... involves changes to pmNameID() and
  pmNameAll() as well

commit c69848a
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 18 07:03:09 2020 +1000
qa/src/template.c: small changes

- put back the ""General options"" line in the usage that was dropped
  in the last commit
- replace PMAPI_OPTIONS by the string from pmapi.h ... this makes
  it much easier to edit to cull uneeded options when creating a new app
- remade 070.out and 586.out to match changes

commit d5970af
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 17 07:20:18 2020 +1000
debian/libpcp3-dev.install: add per-context derived metric man pages

commit ab6b5ae
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 17 07:19:21 2020 +1000
man: new and updated man pages for per-context derived metrics

commit 06027fa
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 16 15:08:20 2020 +1000
qa/1260: update comment to get libpcp routine name right

commit f03cd12
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 16 14:56:55 2020 +1000
qa: coverage for per-context derived metrics

225.out: remade after libpcp diagnostic format change
803.out: remade after libpcp diagnostic format change in parser
968.out: remade after libpcp diagnostic format change in parser
1252: extended coverage
1253: extended coverage
1254: (new) using the new src/ctx_derive that exercises global derived
      metrics with context churning
1256: (new) valgrind version of 1254
1259: (new) version of 1254 that uses per-context metrics
1260: (new) exercise pm{Set,Get}DerivedControl() to get and set limits
      for both global and per-context derived metrics, and toggle
      various flavours of derived metric debugging on and off
1261: (new) version of 1066 (mongo derived grinder that uses every
      construct in the derived metrics expr grammar) for per-context
      derived metrics
1262: (new) valgrind version of 1261
group: all the new tests above

commit 9c02fa2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 16 11:56:52 2020 +1000
qa/src: app changes for per-context derived metrics

- addctxdm.c: new routine (add_ctx_dm()) to load per-context derived
  metrics from a config file, along the lines of pmLoadDerivedConfig
- ctx_derive.c: internal changes to increase coverage
- churnctx.c and grind_ctx.c: new -C arg to use add_ctx_dm()

commit 783bbb9
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 16 11:55:45 2020 +1000
src/libpcp: first-cut at per-context derived metrics

Major refactoring to derive_parser.y.in and associated changes.

commit 2d41bae
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 16 11:53:40 2020 +1000
src/include/pcp/pmapi.h: new methods for per-context derived metrics

- pmAddDerivedMetric
- pmAddDerived
- pmGetDerivedControl
- pmSetDerivedControl

commit 3ffed54
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 11 09:49:29 2020 +1000
qa: some derived metric tests remade after last libpcp change to a diagnostic

commit 81929d9
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 11 09:49:11 2020 +1000
qa/README.vm: small updates

commit 7b86831
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 11 09:48:10 2020 +1000
qa/src/GNUlocaldefs: add ctx_derive.c missed in earlier commit

commit 21265a4
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 11 09:47:17 2020 +1000
qa/src/template.c: change command line arg declarations

Enumerate the options, making it easier to cherry-pick command line
options when creating a new test program.

commit 15932fb
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 11 09:41:59 2020 +1000
src/libpcp: derived metric changes for register after open

Previously, we had (incorrectly) assumed that the set of global derived
metrics would no change for a context after the pmNewContext() ... but
if a subsequent pmRegisterDerived*() is performed, we need those newly
defined derived metrics to be visible, not just in future contexts,
but also in all currently open contexts.

This is precursor work to the refactoring needed to support per-context
derived metrics alongside the (existing) global derived metrics.

commit 05200ac
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Aug 11 09:40:00 2020 +1000
qa/1252 & 1253: (new) exercise derived metrics and context juggling

1253 is the valgrind version of 1252.

Also new qa test program qa/src/ctx_derive.c

commit c4496d8
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 7 17:20:11 2020 +1000
pm{log,ie}ctl + qa: fine tuning

- fix line wrapping before [default ...] in usage message
- qa/1204 for usage change, and to filter extra white space out
- qa (lots) because PCP_ETC_DIR is not always /etc, especially in
  *BSD land

commit 0e523b2
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 7 17:18:51 2020 +1000
qa/admin/other-packages/require: RHEL 8.x needs python2-devel

commit 1f5af00
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 7 17:14:29 2020 +1000
qa/admin/pcp-daily: run check-vm and report missing packages

Just with -m.

commit 59e3bb1
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 7 17:10:29 2020 +1000
Makepkgs: for Gentoo build w/out Python2

When both Python2 and Python3 are present, our build dies down a deep
rat hole in the Python part of the build.  With Python3 alone, the build
works.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1007,2020-08-18T12:38:17Z,2020-08-19T05:31:16Z,2020-09-02T01:04:29Z,MERGED,True,6,6,1,https://github.com/Erbenos,libpcp_web: search edge case fix,1,[],https://github.com/performancecopilot/pcp/pull/1007,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/1007,"Handles edge case, when multiple word queries seemed to be handled / parsed differently by RediSearch based on order of query parts.
Before:
127.0.0.1:6379> ft.explain pcp:text '(kernel)=>{$inorder:true} @TYPE:{indom|metric}'
INTERSECT {
  UNION {
    kernel
    +kernel(expanded)
  }
  TAG:@TYPE {
    indom
    metric
  }
}

127.0.0.1:6379> ft.explain pcp:text '(kernel cpu)=>{$inorder:true} @TYPE:{indom|metric}'
INTERSECT {
  UNION {
    kernel
    +kernel(expanded)
  }
  UNION {
    cpu
    +cpu(expanded)
  }
  TAG:@TYPE {
    indom
    metric
  }
} => { $inorder: true; }

After:

127.0.0.1:6379>  ft.explain pcp:text '@TYPE:{indom|metric} (kernel)=>{$inorder:true}'
INTERSECT {
  TAG:@TYPE {
    indom
    metric
  }
  UNION {
    kernel
    +kernel(expanded)
  }
}

127.0.0.1:6379>  ft.explain pcp:text '@TYPE:{indom|metric} (kernel cpu)=>{$inorder:true}'
INTERSECT {
  TAG:@TYPE {
    indom
    metric
  }
  INTERSECT {
    UNION {
      kernel
      +kernel(expanded)
    }
    UNION {
      cpu
      +cpu(expanded)
    }
  } => { $inorder: true; }
}

This could have caused multi-word queries to return 0 search results even though some were expected.","Handles edge case, when multiple word queries seemed to be handled / parsed differently by RediSearch based on order of query parts.
Before:
127.0.0.1:6379> ft.explain pcp:text '(kernel)=>{$inorder:true} @TYPE:{indom|metric}'
INTERSECT {
  UNION {
    kernel
    +kernel(expanded)
  }
  TAG:@TYPE {
    indom
    metric
  }
}

127.0.0.1:6379> ft.explain pcp:text '(kernel cpu)=>{$inorder:true} @TYPE:{indom|metric}'
INTERSECT {
  UNION {
    kernel
    +kernel(expanded)
  }
  UNION {
    cpu
    +cpu(expanded)
  }
  TAG:@TYPE {
    indom
    metric
  }
} => { $inorder: true; }

After:

127.0.0.1:6379>  ft.explain pcp:text '@TYPE:{indom|metric} (kernel)=>{$inorder:true}'
INTERSECT {
  TAG:@TYPE {
    indom
    metric
  }
  UNION {
    kernel
    +kernel(expanded)
  }
}

127.0.0.1:6379>  ft.explain pcp:text '@TYPE:{indom|metric} (kernel cpu)=>{$inorder:true}'
INTERSECT {
  TAG:@TYPE {
    indom
    metric
  }
  INTERSECT {
    UNION {
      kernel
      +kernel(expanded)
    }
    UNION {
      cpu
      +cpu(expanded)
    }
  } => { $inorder: true; }
}

This could have caused multi-word queries to return 0 search results even though some were expected.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1008,2020-08-22T06:29:15Z,2020-08-23T01:33:04Z,2020-08-26T04:24:09Z,MERGED,True,6574,308,42,https://github.com/kmcdonell,early binding for per-context derived metrics,17,[],https://github.com/performancecopilot/pcp/pull/1008,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1008,"Changes committed to git@github.com:kmcdonell/pcp.git 20200821
Ken McDonell (13):
qa/common.rc: move temp files ($tmp) from /tmp to /var/tmp
qa/.gitignore: some 121 temps and pycache for bpftrace
qa/GNUmakefile.install: cleanup after making pcpqa.pp
qa/README.vm: Add some dnf notes
qa/admin/other-packages/unavailable: updates for RHEL 8.2
qa/common: when running qa from git tree, make sure pcpqa.te is created
qa/023: the hostname for localhost is sometime ip6-localhost
qa/common.filter: extend disk indom filtering in _filter_dumpresult()
qa: misc changes after $tmp moved from /tmp to /var/tmp
qa/1271: (new) exercise binding in pmAddDerived*()
libpcp: early binding for per-context derived metrics
qa: assorted derived metric tweaks
man/man3/pmaddderived.3: add note that semantic checks are synchronous
man/man3/pmaddderived.3             |    9
qa/.gitignore                       |    4
qa/023                              |    1
qa/1026                             |    3
qa/1026.out                         |    2
qa/1045                             |    2
qa/1045.out                         |    2
qa/1047                             |    2
qa/1047.out                         |   14
qa/1072                             |    3
qa/1072.out                         |    8
qa/115                              |    6
qa/115.out                          |  132
qa/1259.out                         | 6000 ++++++++++++++++++++++++++++++++++++
qa/1260.out                         |   77
qa/1268.out                         |   30
qa/1270.out                         |   10
qa/1271                             |   69
qa/1271.out                         |   77
qa/225                              |    4
qa/225.out                          |  136
qa/266                              |    4
qa/274                              |    2
qa/274.out                          |   24
qa/315                              |    4
qa/315.out                          |    4
qa/444.out                          |    4
qa/803.out                          |    4
qa/968.out                          |    2
qa/GNUmakefile.install              |    2
qa/README.vm                        |   10
qa/admin/other-packages/unavailable |    1
qa/common                           |    6
qa/common.filter                    |    1
qa/common.rc                        |    4
qa/group                            |    1
qa/src/addctxdm.c                   |    2
src/libpcp/src/check-statics        |    2
src/libpcp/src/derive.h             |    2
src/libpcp/src/derive_fetch.c       |    2
src/libpcp/src/derive_parser.y.in   |  208 -
41 files changed, 6573 insertions(+), 307 deletions(-)
Details ...
commit 01e97e6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 22 16:19:04 2020 +1000
man/man3/pmaddderived.3: add note that semantic checks are synchronous

commit e25a62a
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 22 16:15:15 2020 +1000
qa: assorted derived metric tweaks

To match most recent round of libpcp changes, especially some diagnostic
message formats and some slight changes in the flow of control during the
creation and checking of derived metrics.

commit d25ad8b
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 22 16:11:26 2020 +1000
libpcp: early binding for per-context derived metrics

By calling __dmbind() at the time of definition, we're able to
perform semantic checks synchronously.  This means both syntactic
and semantic errors for per-context derived metrics are checked at
the time of the pmAddDerived*() call.

Note this is not possible for the global derived metrics as their
semantic checks must be delayed until each context has been established
and the metadata is needed.

commit 42bc016
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 22 16:09:11 2020 +1000
qa/1271: (new) exercise binding in pmAddDerived*()

Done at the time the per-context derived metric is defined, so we
can detect semantic errors synchronously in this case.

commit b21b9bd
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 15:36:48 2020 +1000
qa: misc changes after $tmp moved from /tmp to /var/tmp

commit d1e37c3
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:33:10 2020 +1000
qa/common.filter: extend disk indom filtering in _filter_dumpresult()

Specifically
    inst [0 or ""overlay""] value NUMBER
for containers in CI.

commit 140fe4c
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:28:43 2020 +1000
qa/023: the hostname for localhost is sometime ip6-localhost

Specifically for fedora_rawhide-container in CI.

commit 795375b
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:13:12 2020 +1000
qa/common: when running qa from git tree, make sure pcpqa.te is created

Fix small wrinkle between running qa from git tree vs. running qa
from installed testsuite location.

commit 7e9afb7
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:12:43 2020 +1000
qa/admin/other-packages/unavailable: updates for RHEL 8.2

commit 7643998
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:11:28 2020 +1000
qa/README.vm: Add some dnf notes

For libuv-devel installation on RHEL 8, thanks Andreas.

commit f9548a2
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:09:50 2020 +1000
qa/GNUmakefile.install: cleanup after making pcpqa.pp

The selinux makefile that is used leaves behind several files in
./tmp that are some sort of a cache for repeated executions ... we
don't need these files once pcpqa.pp has been created.

commit f2d7611
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:08:56 2020 +1000
qa/.gitignore: some 121 temps and pycache for bpftrace

commit f0f60e9
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 06:46:54 2020 +1000
qa/common.rc: move temp files ($tmp) from /tmp to /var/tmp

1. /var/tmp is typically bigger than /tmp
2. /tmp may be mounted noexec (esp in a container in CI) and at least
   one test (063) does cc -o $tmp and then tries to execute $tmp","Changes committed to git@github.com:kmcdonell/pcp.git 20200821
Ken McDonell (13):
qa/common.rc: move temp files ($tmp) from /tmp to /var/tmp
qa/.gitignore: some 121 temps and pycache for bpftrace
qa/GNUmakefile.install: cleanup after making pcpqa.pp
qa/README.vm: Add some dnf notes
qa/admin/other-packages/unavailable: updates for RHEL 8.2
qa/common: when running qa from git tree, make sure pcpqa.te is created
qa/023: the hostname for localhost is sometime ip6-localhost
qa/common.filter: extend disk indom filtering in _filter_dumpresult()
qa: misc changes after $tmp moved from /tmp to /var/tmp
qa/1271: (new) exercise binding in pmAddDerived*()
libpcp: early binding for per-context derived metrics
qa: assorted derived metric tweaks
man/man3/pmaddderived.3: add note that semantic checks are synchronous
man/man3/pmaddderived.3             |    9
qa/.gitignore                       |    4
qa/023                              |    1
qa/1026                             |    3
qa/1026.out                         |    2
qa/1045                             |    2
qa/1045.out                         |    2
qa/1047                             |    2
qa/1047.out                         |   14
qa/1072                             |    3
qa/1072.out                         |    8
qa/115                              |    6
qa/115.out                          |  132
qa/1259.out                         | 6000 ++++++++++++++++++++++++++++++++++++
qa/1260.out                         |   77
qa/1268.out                         |   30
qa/1270.out                         |   10
qa/1271                             |   69
qa/1271.out                         |   77
qa/225                              |    4
qa/225.out                          |  136
qa/266                              |    4
qa/274                              |    2
qa/274.out                          |   24
qa/315                              |    4
qa/315.out                          |    4
qa/444.out                          |    4
qa/803.out                          |    4
qa/968.out                          |    2
qa/GNUmakefile.install              |    2
qa/README.vm                        |   10
qa/admin/other-packages/unavailable |    1
qa/common                           |    6
qa/common.filter                    |    1
qa/common.rc                        |    4
qa/group                            |    1
qa/src/addctxdm.c                   |    2
src/libpcp/src/check-statics        |    2
src/libpcp/src/derive.h             |    2
src/libpcp/src/derive_fetch.c       |    2
src/libpcp/src/derive_parser.y.in   |  208 -
41 files changed, 6573 insertions(+), 307 deletions(-)
Details ...
commit 01e97e6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 22 16:19:04 2020 +1000
man/man3/pmaddderived.3: add note that semantic checks are synchronous

commit e25a62a
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 22 16:15:15 2020 +1000
qa: assorted derived metric tweaks

To match most recent round of libpcp changes, especially some diagnostic
message formats and some slight changes in the flow of control during the
creation and checking of derived metrics.

commit d25ad8b
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 22 16:11:26 2020 +1000
libpcp: early binding for per-context derived metrics

By calling __dmbind() at the time of definition, we're able to
perform semantic checks synchronously.  This means both syntactic
and semantic errors for per-context derived metrics are checked at
the time of the pmAddDerived*() call.

Note this is not possible for the global derived metrics as their
semantic checks must be delayed until each context has been established
and the metadata is needed.

commit 42bc016
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 22 16:09:11 2020 +1000
qa/1271: (new) exercise binding in pmAddDerived*()

Done at the time the per-context derived metric is defined, so we
can detect semantic errors synchronously in this case.

commit b21b9bd
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 15:36:48 2020 +1000
qa: misc changes after $tmp moved from /tmp to /var/tmp

commit d1e37c3
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:33:10 2020 +1000
qa/common.filter: extend disk indom filtering in _filter_dumpresult()

Specifically
    inst [0 or ""overlay""] value NUMBER
for containers in CI.

commit 140fe4c
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:28:43 2020 +1000
qa/023: the hostname for localhost is sometime ip6-localhost

Specifically for fedora_rawhide-container in CI.

commit 795375b
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:13:12 2020 +1000
qa/common: when running qa from git tree, make sure pcpqa.te is created

Fix small wrinkle between running qa from git tree vs. running qa
from installed testsuite location.

commit 7e9afb7
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:12:43 2020 +1000
qa/admin/other-packages/unavailable: updates for RHEL 8.2

commit 7643998
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:11:28 2020 +1000
qa/README.vm: Add some dnf notes

For libuv-devel installation on RHEL 8, thanks Andreas.

commit f9548a2
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:09:50 2020 +1000
qa/GNUmakefile.install: cleanup after making pcpqa.pp

The selinux makefile that is used leaves behind several files in
./tmp that are some sort of a cache for repeated executions ... we
don't need these files once pcpqa.pp has been created.

commit f2d7611
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 07:08:56 2020 +1000
qa/.gitignore: some 121 temps and pycache for bpftrace

commit f0f60e9
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 21 06:46:54 2020 +1000
qa/common.rc: move temp files ($tmp) from /tmp to /var/tmp

1. /var/tmp is typically bigger than /tmp
2. /tmp may be mounted noexec (esp in a container in CI) and at least
   one test (063) does cc -o $tmp and then tries to execute $tmp",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1009,2020-08-23T01:41:00Z,2020-08-23T01:41:49Z,2020-08-23T01:41:49Z,MERGED,True,2,2,2,https://github.com/kmcdonell,small qa changes,4,[],https://github.com/performancecopilot/pcp/pull/1009,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1009,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1010,2020-08-23T01:47:43Z,2020-08-23T01:48:10Z,2020-08-23T01:48:10Z,MERGED,True,8,1,2,https://github.com/kmcdonell,small qa changes,2,[],https://github.com/performancecopilot/pcp/pull/1010,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1010,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1012,2020-08-24T22:08:14Z,2020-08-24T22:08:23Z,2020-08-24T22:08:23Z,MERGED,True,40,14,10,https://github.com/kmcdonell,qa + small changes,6,[],https://github.com/performancecopilot/pcp/pull/1012,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1012,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1014,2020-08-26T03:41:03Z,2020-08-26T04:22:51Z,2020-08-26T04:22:51Z,MERGED,True,190,123,15,https://github.com/kmcdonell,odds and sods,11,[],https://github.com/performancecopilot/pcp/pull/1014,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1014,"A bunch of OpenBSD 6.7 portability issues are fixed.
Some generic configure fixups for fallout from the recent ""/var -> /usr/... for some folks"" changes.
Miscellaneous QA amendments, including a code change for the sample PMDA to ensure pseudo random numbers are deterministic (!) across all platforms for QA.","A bunch of OpenBSD 6.7 portability issues are fixed.
Some generic configure fixups for fallout from the recent ""/var -> /usr/... for some folks"" changes.
Miscellaneous QA amendments, including a code change for the sample PMDA to ensure pseudo random numbers are deterministic (!) across all platforms for QA.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1015,2020-08-27T01:21:59Z,2020-08-27T01:22:09Z,2020-08-27T01:22:09Z,MERGED,True,53,22,3,https://github.com/kmcdonell,qa - small changes,3,[],https://github.com/performancecopilot/pcp/pull/1015,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1015,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1016,2020-08-27T04:41:08Z,2020-08-27T04:41:27Z,2020-08-27T04:41:27Z,MERGED,True,11,16,5,https://github.com/kmcdonell,qa fixes for some F32 failures,4,[],https://github.com/performancecopilot/pcp/pull/1016,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1016,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1018,2020-08-30T04:57:27Z,2020-09-03T06:57:52Z,2020-09-03T06:57:52Z,MERGED,True,213,80,4,https://github.com/ElephantZhang,HMSET timeseries query expressions descriptor,7,[],https://github.com/performancecopilot/pcp/pull/1018,https://github.com/ElephantZhang,1,https://github.com/performancecopilot/pcp/pull/1018,"Check compatibility between series
For those metric name with multiple SIDs, check the units' compatibility between them and if three dimensions are identical but scales are different, use the larger scale and convert the values with the smaller scale. Data type is promoted to type PM_TYPE_DOUBLE. Otherwise, report an error and do not store descriptors of them.
Update query expressions' descriptor

Store the computed semantics, type, and units into Redis
Keep indom unchanged
Set pmid to 511.0.0
Leave source unchanged (should we change this field?)

TODO

expression of two ""discrete"" metrics give an ""instant"" result --> should be discrete
Fix: division seems to be giving an negative unsigned result:


$ pmseries 'hinv.ncpu{hostname == ""goblin""}[samples:1] / hinv.ncpu{hostname == ""f32""}[samples:1]'
2ffb8da3697fd93d5d169467157e95f6e53e427d
[Wed Sep  2 15:47:33.962186000 2020] 2147483652 719000c48da83c83a642a2fc54d41448f0d85558

goblin has 8 CPUs and f32 has 2.

Update field source in the descriptor. Still do not have a definite method, maybe a source for a result of an expression involving multiple sources will become all zeros.
Fix: pmseries 'hinv.ncpu[samples:1] / hinv.ncpu{hostname == ""Non-existent host""}[samples:1]' cause Segmentation fault (core dumped)
Fix: 'kernel.all.uptime[count:5] - kernel.all.uptime[count:5]', the results should all be 0

Note
This branch still need many tests! qa/1886 is under processing..","Check compatibility between series
For those metric name with multiple SIDs, check the units' compatibility between them and if three dimensions are identical but scales are different, use the larger scale and convert the values with the smaller scale. Data type is promoted to type PM_TYPE_DOUBLE. Otherwise, report an error and do not store descriptors of them.
Update query expressions' descriptor

Store the computed semantics, type, and units into Redis
Keep indom unchanged
Set pmid to 511.0.0
Leave source unchanged (should we change this field?)

TODO

expression of two ""discrete"" metrics give an ""instant"" result --> should be discrete
Fix: division seems to be giving an negative unsigned result:


$ pmseries 'hinv.ncpu{hostname == ""goblin""}[samples:1] / hinv.ncpu{hostname == ""f32""}[samples:1]'
2ffb8da3697fd93d5d169467157e95f6e53e427d
[Wed Sep  2 15:47:33.962186000 2020] 2147483652 719000c48da83c83a642a2fc54d41448f0d85558

goblin has 8 CPUs and f32 has 2.

Update field source in the descriptor. Still do not have a definite method, maybe a source for a result of an expression involving multiple sources will become all zeros.
Fix: pmseries 'hinv.ncpu[samples:1] / hinv.ncpu{hostname == ""Non-existent host""}[samples:1]' cause Segmentation fault (core dumped)
Fix: 'kernel.all.uptime[count:5] - kernel.all.uptime[count:5]', the results should all be 0

Note
This branch still need many tests! qa/1886 is under processing..",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1018,2020-08-30T04:57:27Z,2020-09-03T06:57:52Z,2020-09-03T06:57:52Z,MERGED,True,213,80,4,https://github.com/ElephantZhang,HMSET timeseries query expressions descriptor,7,[],https://github.com/performancecopilot/pcp/pull/1018,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1018#issuecomment-685173856,"Check compatibility between series
For those metric name with multiple SIDs, check the units' compatibility between them and if three dimensions are identical but scales are different, use the larger scale and convert the values with the smaller scale. Data type is promoted to type PM_TYPE_DOUBLE. Otherwise, report an error and do not store descriptors of them.
Update query expressions' descriptor

Store the computed semantics, type, and units into Redis
Keep indom unchanged
Set pmid to 511.0.0
Leave source unchanged (should we change this field?)

TODO

expression of two ""discrete"" metrics give an ""instant"" result --> should be discrete
Fix: division seems to be giving an negative unsigned result:


$ pmseries 'hinv.ncpu{hostname == ""goblin""}[samples:1] / hinv.ncpu{hostname == ""f32""}[samples:1]'
2ffb8da3697fd93d5d169467157e95f6e53e427d
[Wed Sep  2 15:47:33.962186000 2020] 2147483652 719000c48da83c83a642a2fc54d41448f0d85558

goblin has 8 CPUs and f32 has 2.

Update field source in the descriptor. Still do not have a definite method, maybe a source for a result of an expression involving multiple sources will become all zeros.
Fix: pmseries 'hinv.ncpu[samples:1] / hinv.ncpu{hostname == ""Non-existent host""}[samples:1]' cause Segmentation fault (core dumped)
Fix: 'kernel.all.uptime[count:5] - kernel.all.uptime[count:5]', the results should all be 0

Note
This branch still need many tests! qa/1886 is under processing..","The indom for the result of rate() is looking correct now
$ pmseries 'kernel.all.pswitch[count:2]'

a07f1ea0bb3222364d25885dc236a699deed1edf
    [Wed Sep  2 08:41:36.966001000 2020] 39634186
    [Wed Sep  2 08:41:36.957373000 2020] 39634173

$ pmseries -d a07f1ea0bb3222364d25885dc236a699deed1edf

a07f1ea0bb3222364d25885dc236a699deed1edf
    PMID: 60.0.13
    Data Type: 64-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: counter  Units: count

$ pmseries 'rate(kernel.all.pswitch[count:2])'

ee593cd9e19f53ba6eff7e43a8e1655558f176f0
    [Wed Sep  2 08:42:06.954869000 2020] 12.000000 a07f1ea0bb3222364d25885dc236a699deed1edf

$ pmseries -d ee593cd9e19f53ba6eff7e43a8e1655558f176f0

ee593cd9e19f53ba6eff7e43a8e1655558f176f0
    PMID: 511.0.0
    Data Type: double  InDom: PM_INDOM_NULL 0xffffffff
    Semantics: instant  Units: count / sec

I'll do some more testing and update qa/1886 some more, but looking good so far!
Cheers",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1019,2020-08-31T08:44:44Z,2020-09-01T07:47:17Z,2020-09-04T06:02:48Z,MERGED,True,1444,573,21,https://github.com/kmcdonell,pmlogmv & qa,20,[],https://github.com/performancecopilot/pcp/pull/1019,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1019,"Changes committed to git@github.com:kmcdonell/pcp.git 20200831
Ken McDonell (11):
qa/1347: change filter to accommodate failure due to systemd on Fedora 32
src/pmlogger/pmlogmv.sh: deal glob and egrep special chars in filenames
qa/1272: (new) exercise strange meta characters in pmlogmv arguments
qa/179: add short sleep between pmlc invocations
qa/738.out & qa/898.out: remade after recent pmlogmv changes
qa/1272.out: remade to match small pmlogmv change
qa/975: iostat2pcp does not work with sysstat 12.2.0
pmlogmv: retire shell script, wheel in C replacement
src/pmlogmv/pmlogmv.sh: add note to stress this version is retired
qa: assorted changes to track pmlogmv change from sh script to C app
man/man1/pmlogmv.1: document new -f flag
man/man1/pmlogmv.1       |   26 ++
qa/1272                  |   86 ++++++
qa/1272.out              |  579 ++++++++++++++++++++++++++++++++++++++---------
qa/1347                  |   32 +-
qa/1347.out              |  504 ++++++++++++++++++++--------------------
qa/179                   |    1
qa/738                   |   14 -
qa/738.out               |  273 ++++++++--------------
qa/898.out               |   77 ++----
qa/975                   |   18 -
qa/group                 |    1
src/pmlogger/GNUmakefile |    3
src/pmlogger/pmlogmv.sh  |  105 ++++++--
src/pmlogmv/.gitignore   |    1
src/pmlogmv/GNUmakefile  |   31 ++
src/pmlogmv/pmlogmv.c    |  288 +++++++++++++++++++++++
src/pmlogmv/pmlogmv.sh   |    4
17 files changed, 1428 insertions(+), 615 deletions(-)
Details ...
commit 9a167fd
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 31 17:10:39 2020 +1000
man/man1/pmlogmv.1: document new -f flag

Forces pmlogmv to proceed, even when newname contains ""unsafe""
(to the shell) meta characters.

commit c243475
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 31 16:59:08 2020 +1000
qa: assorted changes to track pmlogmv change from sh script to C app

Mostly just cosmetic, except for 1272 that has (a) correct answers
now, and (b) lots of cases the old script would barf on.

commit 93e3b35
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 31 16:58:02 2020 +1000
src/pmlogmv/pmlogmv.sh: add note to stress this version is retired

commit f16207e
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 31 16:54:56 2020 +1000
pmlogmv: retire shell script, wheel in C replacement

I just got tired of trying to make pmlogmv really work when I
needed it to ... and the hackery around special meta characters
in file names (glob, shell syntax, egrep regex, ...) was making
the script unreadable.

Reimplemented in C.

commit beedcd6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 30 08:07:39 2020 +1000
qa/975: iostat2pcp does not work with sysstat 12.2.0

And there appears to be no plan to make it work, so make this
test _notrun.

commit 13aac54
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 29 16:13:54 2020 +1000
qa/1272.out: remade to match small pmlogmv change

commit d541a97
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 29 15:12:29 2020 +1000
qa/738.out & qa/898.out: remade after recent pmlogmv changes

commit b61c395
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 29 15:10:01 2020 +1000
qa/179: add short sleep between pmlc invocations

Seems to make the test more robust, especially on vm37 (OpenBSD 6.7),
probably by allowing pmlogger to finish the first ""log once"" request
before processing the second ""log every 200msec"" request.

commit 97f3231
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 29 15:08:52 2020 +1000
qa/1272: (new) exercise strange meta characters in pmlogmv arguments

commit e86bbd2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 29 14:56:29 2020 +1000
src/pmlogger/pmlogmv.sh: deal glob and egrep special chars in filenames

Seems like every time I go to use pmlogmv to solve a real problem it
breaks.

This time it was the guards against duplicate oldname matches that
were wrong, and in ""fixing"" this I exposed a whole Pandora's Box of
Ugliness associated with ""special"" characters in the oldname and
newname arguments ... in different places and in different ways we
were exposed to egrep(1) regex meta characters (like ., +, [, ..)
and sh(1) glob meta characters (like ?, *, [, ...) and sh(1) special
characters (like ;, |, &, < and >).

This set of issues is now fixed, and qa -g pmlogmv passes (including
a new qa/1272).

commit 23758d2
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 28 07:11:50 2020 +1000
qa/1347: change filter to accommodate failure due to systemd on Fedora 32

The updated comment says it all ...
  - as of Fedora 32, systemd broke all of this by adding multiple
    usernames that are not unique in the first 8 characters, in
    disregard of a ""rule"" that had been in place for 45 years ...
    we only have the first 8 characters of the username to work with
    in our output, so more than 1 uid maps to the same first 8
    characters of the username and this test failed ... changed to
    map all non-root uids to the name USER and all non-root gids to
    the name GROUP","Changes committed to git@github.com:kmcdonell/pcp.git 20200831
Ken McDonell (11):
qa/1347: change filter to accommodate failure due to systemd on Fedora 32
src/pmlogger/pmlogmv.sh: deal glob and egrep special chars in filenames
qa/1272: (new) exercise strange meta characters in pmlogmv arguments
qa/179: add short sleep between pmlc invocations
qa/738.out & qa/898.out: remade after recent pmlogmv changes
qa/1272.out: remade to match small pmlogmv change
qa/975: iostat2pcp does not work with sysstat 12.2.0
pmlogmv: retire shell script, wheel in C replacement
src/pmlogmv/pmlogmv.sh: add note to stress this version is retired
qa: assorted changes to track pmlogmv change from sh script to C app
man/man1/pmlogmv.1: document new -f flag
man/man1/pmlogmv.1       |   26 ++
qa/1272                  |   86 ++++++
qa/1272.out              |  579 ++++++++++++++++++++++++++++++++++++++---------
qa/1347                  |   32 +-
qa/1347.out              |  504 ++++++++++++++++++++--------------------
qa/179                   |    1
qa/738                   |   14 -
qa/738.out               |  273 ++++++++--------------
qa/898.out               |   77 ++----
qa/975                   |   18 -
qa/group                 |    1
src/pmlogger/GNUmakefile |    3
src/pmlogger/pmlogmv.sh  |  105 ++++++--
src/pmlogmv/.gitignore   |    1
src/pmlogmv/GNUmakefile  |   31 ++
src/pmlogmv/pmlogmv.c    |  288 +++++++++++++++++++++++
src/pmlogmv/pmlogmv.sh   |    4
17 files changed, 1428 insertions(+), 615 deletions(-)
Details ...
commit 9a167fd
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 31 17:10:39 2020 +1000
man/man1/pmlogmv.1: document new -f flag

Forces pmlogmv to proceed, even when newname contains ""unsafe""
(to the shell) meta characters.

commit c243475
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 31 16:59:08 2020 +1000
qa: assorted changes to track pmlogmv change from sh script to C app

Mostly just cosmetic, except for 1272 that has (a) correct answers
now, and (b) lots of cases the old script would barf on.

commit 93e3b35
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 31 16:58:02 2020 +1000
src/pmlogmv/pmlogmv.sh: add note to stress this version is retired

commit f16207e
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Aug 31 16:54:56 2020 +1000
pmlogmv: retire shell script, wheel in C replacement

I just got tired of trying to make pmlogmv really work when I
needed it to ... and the hackery around special meta characters
in file names (glob, shell syntax, egrep regex, ...) was making
the script unreadable.

Reimplemented in C.

commit beedcd6
Author: Ken McDonell kenj@kenj.id.au
Date:   Sun Aug 30 08:07:39 2020 +1000
qa/975: iostat2pcp does not work with sysstat 12.2.0

And there appears to be no plan to make it work, so make this
test _notrun.

commit 13aac54
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 29 16:13:54 2020 +1000
qa/1272.out: remade to match small pmlogmv change

commit d541a97
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 29 15:12:29 2020 +1000
qa/738.out & qa/898.out: remade after recent pmlogmv changes

commit b61c395
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 29 15:10:01 2020 +1000
qa/179: add short sleep between pmlc invocations

Seems to make the test more robust, especially on vm37 (OpenBSD 6.7),
probably by allowing pmlogger to finish the first ""log once"" request
before processing the second ""log every 200msec"" request.

commit 97f3231
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 29 15:08:52 2020 +1000
qa/1272: (new) exercise strange meta characters in pmlogmv arguments

commit e86bbd2
Author: Ken McDonell kenj@kenj.id.au
Date:   Sat Aug 29 14:56:29 2020 +1000
src/pmlogger/pmlogmv.sh: deal glob and egrep special chars in filenames

Seems like every time I go to use pmlogmv to solve a real problem it
breaks.

This time it was the guards against duplicate oldname matches that
were wrong, and in ""fixing"" this I exposed a whole Pandora's Box of
Ugliness associated with ""special"" characters in the oldname and
newname arguments ... in different places and in different ways we
were exposed to egrep(1) regex meta characters (like ., +, [, ..)
and sh(1) glob meta characters (like ?, *, [, ...) and sh(1) special
characters (like ;, |, &, < and >).

This set of issues is now fixed, and qa -g pmlogmv passes (including
a new qa/1272).

commit 23758d2
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Aug 28 07:11:50 2020 +1000
qa/1347: change filter to accommodate failure due to systemd on Fedora 32

The updated comment says it all ...
  - as of Fedora 32, systemd broke all of this by adding multiple
    usernames that are not unique in the first 8 characters, in
    disregard of a ""rule"" that had been in place for 45 years ...
    we only have the first 8 characters of the username to work with
    in our output, so more than 1 uid maps to the same first 8
    characters of the username and this test failed ... changed to
    map all non-root uids to the name USER and all non-root gids to
    the name GROUP",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1020,2020-09-01T09:01:20Z,2020-09-01T10:49:37Z,2020-09-01T10:49:37Z,MERGED,True,102,6,6,https://github.com/kmcdonell,qa,5,[],https://github.com/performancecopilot/pcp/pull/1020,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1020,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1021,2020-09-02T06:49:00Z,2020-09-02T06:49:16Z,2020-09-02T06:49:16Z,MERGED,True,38,19,4,https://github.com/kmcdonell,"QA (for CI) and small pm{log,ie}ctl change to relax arg parsing",4,[],https://github.com/performancecopilot/pcp/pull/1021,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1021,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1022,2020-09-02T07:11:30Z,2020-09-02T07:11:38Z,2020-09-02T07:11:38Z,MERGED,True,31,0,31,https://github.com/kmcdonell,"Force PMDA Remove to work for Perl PMDAs, even when no Install has been done",2,[],https://github.com/performancecopilot/pcp/pull/1022,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1022,Fix for QA in CI.,Fix for QA in CI.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1023,2020-09-04T06:01:03Z,2020-09-04T06:01:22Z,2020-09-04T06:01:22Z,MERGED,True,158,43,45,https://github.com/kmcdonell,Force Python PMDAs to ensure domain.h.python and pmns.python exist for ./Remove,8,[],https://github.com/performancecopilot/pcp/pull/1023,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1023,"Same change as I made for Perl PMDAs a day or so ago.
Although the code change is simple, this one had quite a bit more QA fallout than the Perl change ... most of this is rework in the filtering associated with PMDA ./Remove in the QA tests or their associated common routiines.","Same change as I made for Perl PMDAs a day or so ago.
Although the code change is simple, this one had quite a bit more QA fallout than the Perl change ... most of this is rework in the filtering associated with PMDA ./Remove in the QA tests or their associated common routiines.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1024,2020-09-04T06:29:17Z,2020-09-05T11:16:05Z,2020-09-28T04:25:06Z,MERGED,True,255,33,5,https://github.com/kmcdonell,pmlogger fix for repeated metric,5,[],https://github.com/performancecopilot/pcp/pull/1024,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1024,"Changes committed to git@github.com:kmcdonell/pcp.git 20200904
Ken McDonell (5):
src/libpcp/src/optfetch.c: improve diagnositics
src/pmlogger/src/fetch.c: improve -Dfetch diagnostics
src/pmlogger/src/gram.y: fix for repeated metric problem
src/pmlogger/src/checks.c: fix for repeated metric problem
qa/061.out: remade after opFetch diagnostic change in libpcp
qa/061.out                |   40 +++++++++++++++
src/libpcp/src/optfetch.c |   22 +++++---
src/pmlogger/src/checks.c |  122 ++++++++++++++++++++++++++++++++++++----------
src/pmlogger/src/fetch.c  |   97 ++++++++++++++++++++++++++++++++++++
src/pmlogger/src/gram.y   |    7 ++
5 files changed, 255 insertions(+), 33 deletions(-)
Details ...
commit 7deb4e7
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 4 16:27:23 2020 +1000
qa/061.out: remade after opFetch diagnostic change in libpcp

commit 824e9ef
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 4 16:20:23 2020 +1000
src/pmlogger/src/checks.c: fix for repeated metric problem

In this part of the fix, chk_one() and chk_all() are given
a make over.

chk_one() had a small ""same group"" logic error (benign I think),
but was missing any useful diagnostics.

chk_all() had the useful diagnostics, but the logic was grossly incomplete
(as in missing) ... this in the code
        /*TODO, not right!*/
should have been a warning!  Arrrgh.
So the routine has been rewritten ... and in so doing now returns 1
correctly for a replicated metric (and no instances specified) in the
same config file logging group, which means we don't call optFetch()
again back in the caller.

commit dc1edae
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 4 16:09:14 2020 +1000
src/pmlogger/src/gram.y: fix for repeated metric problem

If we were really lucky and had a pmlogger config like:

.... {
        ...[A]
        metric-a
        ...[B]
        metric-a
}
then metric-a could end up in two fetchctl_t groups, meaning it
would be fetched twice as often as expected, in back-to-back fetches
each time the associated upper-level task was run.

The critical issue is that if the metrics in the [B] group cause
optFetch to split the task's work into two (or more) fetchctl_t
groups, we ""lose"" track of the first metric-a, and when the second
metric-a is encountered we feed it to optFetch again instead of
skipping it.

This part of the fix ensures that after calling __pmOptFetchAdd() we
then call linkback(tp) to ensure _all_ of the fetchctl_t groups
are linked back to the associated upper level task (tp).

There is also an additional diagnostic here to dump out all of the
fetchctl_t groups after calling __pmOptFetchAdd() when -Doptfetch
and -Ddesperate are in play.

commit 2b5232b
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 4 16:05:26 2020 +1000
src/pmlogger/src/fetch.c: improve -Dfetch diagnostics

For most (everyhting except the prologue and epilogue), pmlogger
uses a provide myFetch() routine instead of pmFetch().

This change lifts the pmFetch() -Dfetch diagnostics from libpcp
and splices them into pmlogger, so pmlogger -Dfetch shows all the
pmResults coming back from pmcd.

There is no functional code change in this commit.

commit 51be935
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 4 16:03:40 2020 +1000
src/libpcp/src/optfetch.c: improve diagnositics

No functional code change here.","Changes committed to git@github.com:kmcdonell/pcp.git 20200904
Ken McDonell (5):
src/libpcp/src/optfetch.c: improve diagnositics
src/pmlogger/src/fetch.c: improve -Dfetch diagnostics
src/pmlogger/src/gram.y: fix for repeated metric problem
src/pmlogger/src/checks.c: fix for repeated metric problem
qa/061.out: remade after opFetch diagnostic change in libpcp
qa/061.out                |   40 +++++++++++++++
src/libpcp/src/optfetch.c |   22 +++++---
src/pmlogger/src/checks.c |  122 ++++++++++++++++++++++++++++++++++++----------
src/pmlogger/src/fetch.c  |   97 ++++++++++++++++++++++++++++++++++++
src/pmlogger/src/gram.y   |    7 ++
5 files changed, 255 insertions(+), 33 deletions(-)
Details ...
commit 7deb4e7
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 4 16:27:23 2020 +1000
qa/061.out: remade after opFetch diagnostic change in libpcp

commit 824e9ef
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 4 16:20:23 2020 +1000
src/pmlogger/src/checks.c: fix for repeated metric problem

In this part of the fix, chk_one() and chk_all() are given
a make over.

chk_one() had a small ""same group"" logic error (benign I think),
but was missing any useful diagnostics.

chk_all() had the useful diagnostics, but the logic was grossly incomplete
(as in missing) ... this in the code
        /*TODO, not right!*/
should have been a warning!  Arrrgh.
So the routine has been rewritten ... and in so doing now returns 1
correctly for a replicated metric (and no instances specified) in the
same config file logging group, which means we don't call optFetch()
again back in the caller.

commit dc1edae
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 4 16:09:14 2020 +1000
src/pmlogger/src/gram.y: fix for repeated metric problem

If we were really lucky and had a pmlogger config like:

.... {
        ...[A]
        metric-a
        ...[B]
        metric-a
}
then metric-a could end up in two fetchctl_t groups, meaning it
would be fetched twice as often as expected, in back-to-back fetches
each time the associated upper-level task was run.

The critical issue is that if the metrics in the [B] group cause
optFetch to split the task's work into two (or more) fetchctl_t
groups, we ""lose"" track of the first metric-a, and when the second
metric-a is encountered we feed it to optFetch again instead of
skipping it.

This part of the fix ensures that after calling __pmOptFetchAdd() we
then call linkback(tp) to ensure _all_ of the fetchctl_t groups
are linked back to the associated upper level task (tp).

There is also an additional diagnostic here to dump out all of the
fetchctl_t groups after calling __pmOptFetchAdd() when -Doptfetch
and -Ddesperate are in play.

commit 2b5232b
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 4 16:05:26 2020 +1000
src/pmlogger/src/fetch.c: improve -Dfetch diagnostics

For most (everyhting except the prologue and epilogue), pmlogger
uses a provide myFetch() routine instead of pmFetch().

This change lifts the pmFetch() -Dfetch diagnostics from libpcp
and splices them into pmlogger, so pmlogger -Dfetch shows all the
pmResults coming back from pmcd.

There is no functional code change in this commit.

commit 51be935
Author: Ken McDonell kenj@kenj.id.au
Date:   Fri Sep 4 16:03:40 2020 +1000
src/libpcp/src/optfetch.c: improve diagnositics

No functional code change here.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1026,2020-09-05T11:33:01Z,2020-09-05T11:33:21Z,2020-09-05T11:33:21Z,MERGED,True,204,118,40,https://github.com/kmcdonell,QA for CI,7,[],https://github.com/performancecopilot/pcp/pull/1026,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1026,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1027,2020-09-06T07:17:13Z,2020-09-06T07:17:48Z,2020-09-06T07:17:48Z,MERGED,True,24,17,11,https://github.com/kmcdonell,QA for CI (mostly),10,[],https://github.com/performancecopilot/pcp/pull/1027,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1027,"Plus a couple of PMDA changes to make the last round of gcc #pragmas work with older gcc versions, like on CentOS 6.","Plus a couple of PMDA changes to make the last round of gcc #pragmas work with older gcc versions, like on CentOS 6.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1028,2020-09-07T03:02:46Z,2020-09-07T03:03:01Z,2020-09-07T03:03:01Z,MERGED,True,631,18,11,https://github.com/kmcdonell,pmlogger repeated metric (fix corner cases) and QA,7,[],https://github.com/performancecopilot/pcp/pull/1028,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1028,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1031,2020-09-07T09:16:20Z,2020-09-07T23:26:04Z,2020-09-07T23:26:04Z,MERGED,True,2,2,2,https://github.com/kurik,Fix of typos when referencing man pages in systemd unit files,1,[],https://github.com/performancecopilot/pcp/pull/1031,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/1031,Resolves bug 1876452.,Resolves bug 1876452.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1033,2020-09-07T10:53:40Z,2020-09-07T10:53:55Z,2020-09-07T10:53:55Z,MERGED,True,7,5,4,https://github.com/kmcdonell,QA for CI,3,[],https://github.com/performancecopilot/pcp/pull/1033,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1033,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1034,2020-09-08T09:15:12Z,2020-09-08T09:17:26Z,2020-09-08T09:17:26Z,MERGED,True,216,541,15,https://github.com/kmcdonell,QA,14,[],https://github.com/performancecopilot/pcp/pull/1034,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1034,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1037,2020-09-09T02:59:58Z,2020-09-09T03:00:07Z,2020-09-09T03:00:07Z,MERGED,True,25,7,6,https://github.com/kmcdonell,QA for CI,8,[],https://github.com/performancecopilot/pcp/pull/1037,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1037,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1038,2020-09-09T06:01:24Z,2020-09-09T06:44:09Z,2020-09-09T07:23:27Z,MERGED,True,33,6,2,https://github.com/janfrode,Add dstat plugin for GPFS. Requires the GPFS PMDA.,2,[],https://github.com/performancecopilot/pcp/pull/1038,https://github.com/janfrode,1,https://github.com/performancecopilot/pcp/pull/1038,"Gives GPFS throughput and file operation stats.
Output looks like this:
> # pcp dstat  --gpfs
> -fs/total
> read writ
> 156M 155M
> 227M 228M
> 232M 232M
> 153M 153M
> 72M  72M
> 70M  70M
> 75M  75M^C




> # pcp dstat  --gpfs-ops
> -----------------------gpfs-ops/total----------------------
>   opens     reads     writes  inode_upd  readdir    closes
>        0         0         0         0         0         0
>        0         0         0         0         0         0
>        0         0         0         0         0         0
>        0         0         0         0         0         0
>       17        49         0         0         0        16
>       99       297         0         0         0        99
>       91       274         0         0         0        92
>      105       316         0         0         0       105
>       94       281         0         0         0        93
>       89       265         0         0         0        89
>       86       260         0         0         0        87 ^C","Gives GPFS throughput and file operation stats.
Output looks like this:
> # pcp dstat  --gpfs
> -fs/total
> read writ
> 156M 155M
> 227M 228M
> 232M 232M
> 153M 153M
> 72M  72M
> 70M  70M
> 75M  75M^C




> # pcp dstat  --gpfs-ops
> -----------------------gpfs-ops/total----------------------
>   opens     reads     writes  inode_upd  readdir    closes
>        0         0         0         0         0         0
>        0         0         0         0         0         0
>        0         0         0         0         0         0
>        0         0         0         0         0         0
>       17        49         0         0         0        16
>       99       297         0         0         0        99
>       91       274         0         0         0        92
>      105       316         0         0         0       105
>       94       281         0         0         0        93
>       89       265         0         0         0        89
>       86       260         0         0         0        87 ^C",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1039,2020-09-09T07:14:07Z,2020-09-09T23:12:08Z,2020-09-28T04:25:11Z,MERGED,True,115,3,13,https://github.com/kmcdonell,new commands for pmlc,2,[],https://github.com/performancecopilot/pcp/pull/1039,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1039,"Changes committed to git@github.com:kmcdonell/pcp.git 20200909
Ken McDonell (2):
qa/admin/other-packages/unavailable: CentOS 6.10 updates
pmlc: add disconnect and sleep commands
man/man1/pmlc.1                     |   17 +++++++++++++++++
qa/099.out                          |    2 ++
qa/102.out                          |   18 ++++++++++++++++++
qa/139.out                          |    2 ++
qa/179.out                          |    6 ++++++
qa/381                              |    2 ++
qa/381.out                          |   16 ++++++++++++++++
qa/510.out                          |    2 ++
qa/admin/other-packages/unavailable |    4 ++--
src/pmlc/gram.y                     |   15 ++++++++++++++-
src/pmlc/lex.l                      |    2 ++
src/pmlc/pmlc.c                     |   31 +++++++++++++++++++++++++++++++
src/pmlc/pmlc.h                     |    1 +
13 files changed, 115 insertions(+), 3 deletions(-)
Details ...
commit a4edc04
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 9 16:54:33 2020 +1000
pmlc: add disconnect and sleep commands

A while back we removed the sleep(1) that pmlc used to do after
each disconnect.  There is no functional reason for the sleep and
it was delaying some startup functions.

Fast forward and qa/381 is flakey and failing on some CI platforms
... the problem is that in scripted uses of pmlc (as in qa/381) the
sequence
        connect ...
        ...
        connect ...
may fail if the two connect commands are aimed at the same pmlogger
instance (possibly via different but equivalent args), then pmlogger
does not get a chance to cleanup and reset the socket between the
(implicit disconnect before the second connect) and the real connect.

Adding a disconnect command to pmlc allows us to make the disconnect
explicit.

Adding a sleep command allows us a tuning knob to make sure pmlogger
catches up.

So the sequence above can be re-written:
        connect ...
        ...
        disconnect
        sleep 100       (msec are the units here)
        connect ...

The new commands do not change the semantics of any existing pmlc
command.

Some existing pmlc tests were remade because of the command summary that
is produced at pmlc startup.

commit bf80bee
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 9 16:54:13 2020 +1000
qa/admin/other-packages/unavailable: CentOS 6.10 updates","Changes committed to git@github.com:kmcdonell/pcp.git 20200909
Ken McDonell (2):
qa/admin/other-packages/unavailable: CentOS 6.10 updates
pmlc: add disconnect and sleep commands
man/man1/pmlc.1                     |   17 +++++++++++++++++
qa/099.out                          |    2 ++
qa/102.out                          |   18 ++++++++++++++++++
qa/139.out                          |    2 ++
qa/179.out                          |    6 ++++++
qa/381                              |    2 ++
qa/381.out                          |   16 ++++++++++++++++
qa/510.out                          |    2 ++
qa/admin/other-packages/unavailable |    4 ++--
src/pmlc/gram.y                     |   15 ++++++++++++++-
src/pmlc/lex.l                      |    2 ++
src/pmlc/pmlc.c                     |   31 +++++++++++++++++++++++++++++++
src/pmlc/pmlc.h                     |    1 +
13 files changed, 115 insertions(+), 3 deletions(-)
Details ...
commit a4edc04
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 9 16:54:33 2020 +1000
pmlc: add disconnect and sleep commands

A while back we removed the sleep(1) that pmlc used to do after
each disconnect.  There is no functional reason for the sleep and
it was delaying some startup functions.

Fast forward and qa/381 is flakey and failing on some CI platforms
... the problem is that in scripted uses of pmlc (as in qa/381) the
sequence
        connect ...
        ...
        connect ...
may fail if the two connect commands are aimed at the same pmlogger
instance (possibly via different but equivalent args), then pmlogger
does not get a chance to cleanup and reset the socket between the
(implicit disconnect before the second connect) and the real connect.

Adding a disconnect command to pmlc allows us to make the disconnect
explicit.

Adding a sleep command allows us a tuning knob to make sure pmlogger
catches up.

So the sequence above can be re-written:
        connect ...
        ...
        disconnect
        sleep 100       (msec are the units here)
        connect ...

The new commands do not change the semantics of any existing pmlc
command.

Some existing pmlc tests were remade because of the command summary that
is produced at pmlc startup.

commit bf80bee
Author: Ken McDonell kenj@kenj.id.au
Date:   Wed Sep 9 16:54:13 2020 +1000
qa/admin/other-packages/unavailable: CentOS 6.10 updates",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1042,2020-09-10T06:28:31Z,2020-09-10T06:28:38Z,2020-09-10T06:28:38Z,MERGED,True,51,12,5,https://github.com/kmcdonell,QA for CI,5,[],https://github.com/performancecopilot/pcp/pull/1042,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1042,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1043,2020-09-11T06:14:20Z,2020-09-11T07:06:06Z,2020-09-11T07:06:06Z,MERGED,True,151,33,28,https://github.com/kmcdonell,"selinux change for CentOS 6.10, QA for CI, small code changes",15,[],https://github.com/performancecopilot/pcp/pull/1043,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1043,"make selinux type proc_security_t and associated rules conditional
redo #pragma changes for gcc 10
fix pstree usage with -VV in some pmlogger and pmie scripts
usual grab bag of QA changes, mostly aimed at understanding failures in CI","make selinux type proc_security_t and associated rules conditional
redo #pragma changes for gcc 10
fix pstree usage with -VV in some pmlogger and pmie scripts
usual grab bag of QA changes, mostly aimed at understanding failures in CI",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1044,2020-09-11T12:09:49Z,2020-09-11T12:10:06Z,2020-09-11T12:10:06Z,MERGED,True,33,3,4,https://github.com/kmcdonell,couple of small QA changes for tomorrow's CI run,2,[],https://github.com/performancecopilot/pcp/pull/1044,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1044,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1046,2020-09-12T06:55:26Z,2020-09-12T06:55:40Z,2020-09-12T06:55:40Z,MERGED,True,82,33,20,https://github.com/kmcdonell,QA for CI,14,[],https://github.com/performancecopilot/pcp/pull/1046,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1046,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1047,2020-09-13T08:41:19Z,2020-09-13T08:41:43Z,2020-09-13T08:41:43Z,MERGED,True,70,42,19,https://github.com/kmcdonell,QA for CI,9,[],https://github.com/performancecopilot/pcp/pull/1047,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1047,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1048,2020-09-14T11:15:09Z,2020-09-14T11:15:18Z,2020-09-14T11:15:18Z,MERGED,True,58,25,6,https://github.com/kmcdonell,QA for CI,8,[],https://github.com/performancecopilot/pcp/pull/1048,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1048,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1053,2020-09-16T08:55:39Z,2020-09-16T08:55:48Z,2020-09-16T08:55:48Z,MERGED,True,1269,17,20,https://github.com/kmcdonell,dbpmda maintenance,3,[],https://github.com/performancecopilot/pcp/pull/1053,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1053,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1054,2020-09-16T13:55:05Z,2020-09-22T16:19:33Z,2021-01-27T10:53:25Z,MERGED,True,109,61,8,https://github.com/andreasgerstmayr,build: rename python-dev to python2-dev,1,[],https://github.com/performancecopilot/pcp/pull/1054,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1054,"Debian bullseye removed the python-dev package. python2-dev also exists
on Debian buster, therefore use this instead of python-dev.","Debian bullseye removed the python-dev package. python2-dev also exists
on Debian buster, therefore use this instead of python-dev.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1054,2020-09-16T13:55:05Z,2020-09-22T16:19:33Z,2021-01-27T10:53:25Z,MERGED,True,109,61,8,https://github.com/andreasgerstmayr,build: rename python-dev to python2-dev,1,[],https://github.com/performancecopilot/pcp/pull/1054,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1054#issuecomment-693422949,"Debian bullseye removed the python-dev package. python2-dev also exists
on Debian buster, therefore use this instead of python-dev.",This should fix the build failure on debian bullseye.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1054,2020-09-16T13:55:05Z,2020-09-22T16:19:33Z,2021-01-27T10:53:25Z,MERGED,True,109,61,8,https://github.com/andreasgerstmayr,build: rename python-dev to python2-dev,1,[],https://github.com/performancecopilot/pcp/pull/1054,https://github.com/kmcdonell,3,https://github.com/performancecopilot/pcp/pull/1054#issuecomment-693649637,"Debian bullseye removed the python-dev package. python2-dev also exists
on Debian buster, therefore use this instead of python-dev.","@andreasgerstmayr we're fixing the same issue in two different ways.  For Debian, you're accommodating the package name change, but for Ubuntu I took a more autocratic decision and decided there is no longer any reason to include Python2 support into the PCP packages so I added --without python to configure in Makepkgs.
Either approach is OK, but we probably don't need both.  So some rationalisation may be needed to reduce confusion furhter down the track.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1054,2020-09-16T13:55:05Z,2020-09-22T16:19:33Z,2021-01-27T10:53:25Z,MERGED,True,109,61,8,https://github.com/andreasgerstmayr,build: rename python-dev to python2-dev,1,[],https://github.com/performancecopilot/pcp/pull/1054,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/1054#issuecomment-693669495,"Debian bullseye removed the python-dev package. python2-dev also exists
on Debian buster, therefore use this instead of python-dev.","decided there is no longer any reason to include Python2 support

+1
given the fact that Python 2 is EOL since beginning of this year, I don't mind dropping it entirely
I'll update this PR tomorrow.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1054,2020-09-16T13:55:05Z,2020-09-22T16:19:33Z,2021-01-27T10:53:25Z,MERGED,True,109,61,8,https://github.com/andreasgerstmayr,build: rename python-dev to python2-dev,1,[],https://github.com/performancecopilot/pcp/pull/1054,https://github.com/andreasgerstmayr,5,https://github.com/performancecopilot/pcp/pull/1054#issuecomment-695079691,"Debian bullseye removed the python-dev package. python2-dev also exists
on Debian buster, therefore use this instead of python-dev.","Sorry, I just couldn't resist accommodating the package name change - it's just a tiny change, in case some people really want to use Python 2. I changed the logic to use /etc/os-release, because /etc/lsb-release only exists on Ubuntu, where /etc/os-release exists on both (also on Fedora).
I've added the same logic to the configure script, to disable Python 2 unless explicitly requested.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1054,2020-09-16T13:55:05Z,2020-09-22T16:19:33Z,2021-01-27T10:53:25Z,MERGED,True,109,61,8,https://github.com/andreasgerstmayr,build: rename python-dev to python2-dev,1,[],https://github.com/performancecopilot/pcp/pull/1054,https://github.com/andreasgerstmayr,6,https://github.com/performancecopilot/pcp/pull/1054#issuecomment-696231180,"Debian bullseye removed the python-dev package. python2-dev also exists
on Debian buster, therefore use this instead of python-dev.","Does this cleanly handle the situation where someone has python-pcp installed and is upgrading to pcp-5.2.1?

Right now it just doesn't build the python-pcp package anymore.
I started a debian bullseye container, and:

python-pcp isn't available in the debian repos
it is available on bintray, however:
apt-cache rdepends python-pcp shows that no package depends on python-pcp


Also is the case where a 3rd party package has a dependency on pcp-python handled? (dpkg ""Provides:"" keyword IIRC, in debian/control*)

Like the obsoletes keyword? i.e. specifying that python3-pcp provides python-pcp? imho that's not the case here, because Python 3 is not backwards-compatible to Python 2, so python3-pcp does not provide python-pcp (they also have their own site-packages directory, etc.).
Yes, afaics the only issue can be users packaging their Python 2 only PMDA as .deb. Should we just take a step back and continue building the Python 2 bindings (and accommodate the python2-dev name change)?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1055,2020-09-17T04:36:18Z,2020-09-17T06:52:27Z,2020-09-17T06:52:27Z,MERGED,True,169,38,8,https://github.com/kmcdonell,"libpcp, libpcp_pmda fixes",3,[],https://github.com/performancecopilot/pcp/pull/1055,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1055,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1057,2020-09-18T06:17:59Z,2020-09-18T06:18:17Z,2020-09-18T06:18:17Z,MERGED,True,178,53,15,https://github.com/kmcdonell,"QA for CI, linux_proc PMDA fix for no cgroups",13,[],https://github.com/performancecopilot/pcp/pull/1057,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1057,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1058,2020-09-19T05:47:33Z,2020-09-19T07:02:09Z,2020-09-19T07:02:09Z,MERGED,True,111,49,16,https://github.com/kmcdonell,"check-vm, CentOS 8 config, ... held CI builds",4,[],https://github.com/performancecopilot/pcp/pull/1058,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1058,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1060,2020-09-20T16:01:41Z,2020-09-28T04:43:12Z,2020-09-28T04:43:12Z,MERGED,True,6891,0,26,https://github.com/arzoo14,[docs] UAG book - Ch. 1 to 8,2,[],https://github.com/performancecopilot/pcp/pull/1060,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1060,"Closes #665
This PR contains the readthedocs/sphinx setup along with the complete User's and Administrator's Guide Book in reStructured Text (rst) format.","Closes #665
This PR contains the readthedocs/sphinx setup along with the complete User's and Administrator's Guide Book in reStructured Text (rst) format.",True,"{'THUMBS_UP': ['https://github.com/natoscott', 'https://github.com/andreasgerstmayr']}"
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1061,2020-09-22T07:05:45Z,2020-09-22T07:51:06Z,2020-09-22T07:51:06Z,MERGED,True,573,261,6,https://github.com/kmcdonell,check-vm,16,[],https://github.com/performancecopilot/pcp/pull/1061,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1061,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1062,2020-09-23T03:53:37Z,2020-09-23T04:03:33Z,2020-09-23T04:03:33Z,MERGED,True,181,201,2,https://github.com/goodwinos,libpcp_web: in query function/expr use pmAtomStr for string conversion,1,[],https://github.com/performancecopilot/pcp/pull/1062,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1062,"In series_pmAtomValue_conv_str(), use pmAtomStr() instead of sprintf.
This has additional argument and buffer length checking. Also, report
errors here instead of in every caller, which eliminates a bunch of err
handling TODOs. Also fixed a few minor typos and formatting.
qa/1886 is remade because pmAtomStr uses %e for float and double.","In series_pmAtomValue_conv_str(), use pmAtomStr() instead of sprintf.
This has additional argument and buffer length checking. Also, report
errors here instead of in every caller, which eliminates a bunch of err
handling TODOs. Also fixed a few minor typos and formatting.
qa/1886 is remade because pmAtomStr uses %e for float and double.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1063,2020-09-23T11:25:34Z,2020-09-23T11:25:51Z,2020-09-23T11:25:51Z,MERGED,True,162,87,8,https://github.com/kmcdonell,check-vm & qa,7,[],https://github.com/performancecopilot/pcp/pull/1063,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1063,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1066,2020-09-24T11:54:22Z,2020-09-24T11:54:39Z,2020-09-24T11:54:39Z,MERGED,True,387,433,4,https://github.com/kmcdonell,check-vm fix for unexpected packaging tool,4,[],https://github.com/performancecopilot/pcp/pull/1066,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1066,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1067,2020-09-25T00:21:56Z,2020-09-25T00:30:12Z,2020-09-25T00:30:12Z,MERGED,True,24,1,5,https://github.com/kmcdonell,qa and check-vm,6,[],https://github.com/performancecopilot/pcp/pull/1067,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1067,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1069,2020-09-27T09:05:17Z,2020-09-27T09:05:47Z,2020-09-27T09:05:48Z,MERGED,True,112,82,9,https://github.com/kmcdonell,qa and check-vm,14,[],https://github.com/performancecopilot/pcp/pull/1069,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1069,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1070,2020-09-28T04:30:29Z,2020-09-28T07:13:55Z,2020-09-29T01:41:23Z,MERGED,True,45,8,1,https://github.com/kmcdonell,fix for EINPROGRESS in __pmConnect(),1,[],https://github.com/performancecopilot/pcp/pull/1070,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1070,"Changes committed to git@github.com:kmcdonell/pcp.git 20200928
Ken McDonell (1):
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect
src/libpcp/src/auxconnect.c |   53 +++++++++++++++++++++++++++++++++++++-------
1 file changed, 45 insertions(+), 8 deletions(-)
Details ...
commit adf7ea4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 28 14:26:32 2020 +1000
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect

Give us a chance to succeed, even when connect() returns EINPROGRESS.","Changes committed to git@github.com:kmcdonell/pcp.git 20200928
Ken McDonell (1):
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect
src/libpcp/src/auxconnect.c |   53 +++++++++++++++++++++++++++++++++++++-------
1 file changed, 45 insertions(+), 8 deletions(-)
Details ...
commit adf7ea4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 28 14:26:32 2020 +1000
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect

Give us a chance to succeed, even when connect() returns EINPROGRESS.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1070,2020-09-28T04:30:29Z,2020-09-28T07:13:55Z,2020-09-29T01:41:23Z,MERGED,True,45,8,1,https://github.com/kmcdonell,fix for EINPROGRESS in __pmConnect(),1,[],https://github.com/performancecopilot/pcp/pull/1070,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1070#issuecomment-699825814,"Changes committed to git@github.com:kmcdonell/pcp.git 20200928
Ken McDonell (1):
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect
src/libpcp/src/auxconnect.c |   53 +++++++++++++++++++++++++++++++++++++-------
1 file changed, 45 insertions(+), 8 deletions(-)
Details ...
commit adf7ea4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 28 14:26:32 2020 +1000
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect

Give us a chance to succeed, even when connect() returns EINPROGRESS.","@goodwinos sorry, this got merged as a by-product of merging qa stuff for tonight's CI QA run.
Please review this one still, if there are any issues I'll revert/rework.
Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1070,2020-09-28T04:30:29Z,2020-09-28T07:13:55Z,2020-09-29T01:41:23Z,MERGED,True,45,8,1,https://github.com/kmcdonell,fix for EINPROGRESS in __pmConnect(),1,[],https://github.com/performancecopilot/pcp/pull/1070,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/1070#issuecomment-699955290,"Changes committed to git@github.com:kmcdonell/pcp.git 20200928
Ken McDonell (1):
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect
src/libpcp/src/auxconnect.c |   53 +++++++++++++++++++++++++++++++++++++-------
1 file changed, 45 insertions(+), 8 deletions(-)
Details ...
commit adf7ea4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 28 14:26:32 2020 +1000
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect

Give us a chance to succeed, even when connect() returns EINPROGRESS.","@goodwinos sorry, this got merged as a by-product of merging qa stuff for tonight's CI QA run.
Please review this one still, if there are any issues I'll revert/rework.
Thanks.

will do - sorry have been distracted with some really weird instances labels issues",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1070,2020-09-28T04:30:29Z,2020-09-28T07:13:55Z,2020-09-29T01:41:23Z,MERGED,True,45,8,1,https://github.com/kmcdonell,fix for EINPROGRESS in __pmConnect(),1,[],https://github.com/performancecopilot/pcp/pull/1070,https://github.com/goodwinos,4,https://github.com/performancecopilot/pcp/pull/1070#issuecomment-700338208,"Changes committed to git@github.com:kmcdonell/pcp.git 20200928
Ken McDonell (1):
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect
src/libpcp/src/auxconnect.c |   53 +++++++++++++++++++++++++++++++++++++-------
1 file changed, 45 insertions(+), 8 deletions(-)
Details ...
commit adf7ea4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 28 14:26:32 2020 +1000
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect

Give us a chance to succeed, even when connect() returns EINPROGRESS.","Looks good Ken - the connect(2) man page seems to indicate AF_UNIX might return EAGAIN in the same way the other address families can return EINPROGRESS. It's not however very clear whether AF_UNIX/EAGAIN would need to retry the connect(), but if not, then we might need e.g.
--- a/src/libpcp/src/auxconnect.c
+++ b/src/libpcp/src/auxconnect.c
@@ -681,7 +681,7 @@ __pmConnect(int fd, void *addr, __pmSockLen addrlen)
 
     /* something bad happened ... */
     sts = neterror();
-    if (sts == EINPROGRESS) {
+    if (sts == EINPROGRESS || (sts == EAGAIN && sock->sockaddr.raw.sa_family == AF_UNIX)) {",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1070,2020-09-28T04:30:29Z,2020-09-28T07:13:55Z,2020-09-29T01:41:23Z,MERGED,True,45,8,1,https://github.com/kmcdonell,fix for EINPROGRESS in __pmConnect(),1,[],https://github.com/performancecopilot/pcp/pull/1070,https://github.com/kmcdonell,5,https://github.com/performancecopilot/pcp/pull/1070#issuecomment-700354506,"Changes committed to git@github.com:kmcdonell/pcp.git 20200928
Ken McDonell (1):
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect
src/libpcp/src/auxconnect.c |   53 +++++++++++++++++++++++++++++++++++++-------
1 file changed, 45 insertions(+), 8 deletions(-)
Details ...
commit adf7ea4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 28 14:26:32 2020 +1000
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect

Give us a chance to succeed, even when connect() returns EINPROGRESS.","Thanks Mark.
I think it is OK, as we use the same simple guard (sts == EINPROGRESS) in other places in the code.  If we fall into the test block, then I'd expect the select() to timeout if we don't have the guard quite correct, and we go down the same old error path.
OK?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1070,2020-09-28T04:30:29Z,2020-09-28T07:13:55Z,2020-09-29T01:41:23Z,MERGED,True,45,8,1,https://github.com/kmcdonell,fix for EINPROGRESS in __pmConnect(),1,[],https://github.com/performancecopilot/pcp/pull/1070,https://github.com/goodwinos,6,https://github.com/performancecopilot/pcp/pull/1070#issuecomment-700359178,"Changes committed to git@github.com:kmcdonell/pcp.git 20200928
Ken McDonell (1):
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect
src/libpcp/src/auxconnect.c |   53 +++++++++++++++++++++++++++++++++++++-------
1 file changed, 45 insertions(+), 8 deletions(-)
Details ...
commit adf7ea4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 28 14:26:32 2020 +1000
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect

Give us a chance to succeed, even when connect() returns EINPROGRESS.","OK looks fine then. I did find it strange only writefds should be checked in select(), but that's what the docs say to do!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1070,2020-09-28T04:30:29Z,2020-09-28T07:13:55Z,2020-09-29T01:41:23Z,MERGED,True,45,8,1,https://github.com/kmcdonell,fix for EINPROGRESS in __pmConnect(),1,[],https://github.com/performancecopilot/pcp/pull/1070,https://github.com/kmcdonell,7,https://github.com/performancecopilot/pcp/pull/1070#issuecomment-700373802,"Changes committed to git@github.com:kmcdonell/pcp.git 20200928
Ken McDonell (1):
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect
src/libpcp/src/auxconnect.c |   53 +++++++++++++++++++++++++++++++++++++-------
1 file changed, 45 insertions(+), 8 deletions(-)
Details ...
commit adf7ea4
Author: Ken McDonell kenj@kenj.id.au
Date:   Mon Sep 28 14:26:32 2020 +1000
src/libpcp/src/auxconnect.c: handle EINPROGRESS from connect() in __pmConnect

Give us a chance to succeed, even when connect() returns EINPROGRESS.","On 29/9/20 10:49 am, Mark Goodwin wrote:
 OK looks fine then. I did find it strange only writefds should be
 checked in select(), but that's what the docs say to do!
select on readfds would block forever/timeout if this is an output
socket ... 8^)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1071,2020-09-28T07:13:37Z,2020-09-28T07:13:53Z,2020-09-28T07:13:53Z,MERGED,True,94,53,12,https://github.com/kmcdonell,"qa, dbpmda, libpcp",7,[],https://github.com/performancecopilot/pcp/pull/1071,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1071,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1072,2020-09-28T11:21:42Z,2020-09-28T11:21:59Z,2020-09-28T11:21:59Z,MERGED,True,8,1,2,https://github.com/kmcdonell,qa/admin/other-packages: updates for Debian 10,1,[],https://github.com/performancecopilot/pcp/pull/1072,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1072,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1073,2020-09-29T06:55:49Z,2020-09-29T06:56:07Z,2020-09-29T06:56:07Z,MERGED,True,33,20,8,https://github.com/kmcdonell,daily grab bag of check-vm and qa changes,15,[],https://github.com/performancecopilot/pcp/pull/1073,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1073,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1074,2020-09-30T05:40:35Z,2020-09-30T05:41:02Z,2020-09-30T05:41:02Z,MERGED,True,163,191,18,https://github.com/kmcdonell,qa and check-vm,8,[],https://github.com/performancecopilot/pcp/pull/1074,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1074,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1075,2020-10-01T07:09:52Z,2020-10-01T07:10:26Z,2020-10-01T07:10:26Z,MERGED,True,514,29,21,https://github.com/kmcdonell,"dbpmda (add getiname), qa, check-vm",5,[],https://github.com/performancecopilot/pcp/pull/1075,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1075,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1076,2020-10-01T17:40:35Z,2020-10-02T00:36:43Z,2020-10-02T00:36:43Z,MERGED,True,6011,1814,29,https://github.com/arzoo14,[docs] PG Book - Ch. 1 to 4,2,[],https://github.com/performancecopilot/pcp/pull/1076,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1076,"Closes #666
This PR contains the following:

color highlighted text (in examples) is changed to black everywhere.
image path is changed to ../../images/.
Programmer's Guide book (Ch. 1 to 4) in reStructured Text (rst) format.","Closes #666
This PR contains the following:

color highlighted text (in examples) is changed to black everywhere.
image path is changed to ../../images/.
Programmer's Guide book (Ch. 1 to 4) in reStructured Text (rst) format.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1077,2020-10-02T04:36:11Z,2020-10-02T04:36:23Z,2020-10-02T04:36:23Z,MERGED,True,626,13,7,https://github.com/kmcdonell,"event.* helptext, qa, check-vm",5,[],https://github.com/performancecopilot/pcp/pull/1077,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1077,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1078,2020-10-02T07:17:13Z,2020-10-02T11:40:44Z,2020-10-02T11:40:45Z,MERGED,True,119,31,3,https://github.com/kmcdonell,qa/admin/check-manifest & other-packages/unavailable: more changes,3,[],https://github.com/performancecopilot/pcp/pull/1078,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1078,"Trying to wrestle this to the ground, especially in CI.","Trying to wrestle this to the ground, especially in CI.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1079,2020-10-03T07:59:41Z,2020-10-03T07:59:56Z,2020-10-03T07:59:56Z,MERGED,True,65,33,6,https://github.com/kmcdonell,qa + check-vm,5,[],https://github.com/performancecopilot/pcp/pull/1079,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1079,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1080,2020-10-04T05:57:19Z,2020-10-04T23:33:25Z,2020-10-04T23:33:25Z,MERGED,True,64,72,12,https://github.com/kmcdonell,qa (mostly),9,[],https://github.com/performancecopilot/pcp/pull/1080,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1080,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1081,2020-10-05T10:58:29Z,2020-10-05T10:58:40Z,2020-10-05T10:58:40Z,MERGED,True,123,49,11,https://github.com/kmcdonell,qa,7,[],https://github.com/performancecopilot/pcp/pull/1081,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1081,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1082,2020-10-06T06:01:36Z,2020-10-06T06:02:02Z,2020-10-06T06:02:02Z,MERGED,True,83,16,9,https://github.com/kmcdonell,"qa, check-vm, bits-n-bobs",11,[],https://github.com/performancecopilot/pcp/pull/1082,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1082,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1083,2020-10-06T10:49:18Z,2020-10-07T05:44:38Z,2020-10-07T05:44:38Z,MERGED,True,20,2,3,https://github.com/kmcdonell,check-vm,6,[],https://github.com/performancecopilot/pcp/pull/1083,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1083,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1086,2020-10-08T08:51:04Z,2020-10-08T21:30:57Z,2020-10-08T21:30:58Z,MERGED,True,1,1,1,https://github.com/kurik,The run of 1061 test sometimes takes longer than 1s,1,[],https://github.com/performancecopilot/pcp/pull/1086,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/1086,"The run of 1061 test sometimes takes longer than 1s.
This commit allows run of the test to take 0-9.999s","The run of 1061 test sometimes takes longer than 1s.
This commit allows run of the test to take 0-9.999s",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1103,2020-10-09T05:25:01Z,2020-10-09T18:17:17Z,2020-10-09T18:17:17Z,MERGED,True,257,39,13,https://github.com/kmcdonell,"ci, qa, zimbra pmda",24,[],https://github.com/performancecopilot/pcp/pull/1103,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1103,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1104,2020-10-09T09:45:48Z,2020-10-12T04:57:44Z,2020-10-12T04:57:44Z,MERGED,True,7,3,1,https://github.com/kurik,Improved exception handling of mssql PMDA connection,1,[],https://github.com/performancecopilot/pcp/pull/1104,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/1104,"Improved exception handling when a connection of mssql PMDA to MSSQL server fails.
The pyodbc module seems to use InterfaceError exception when username/password authentication is used.
When trusted connection is used, then pyodbc seems to use just Error exception.","Improved exception handling when a connection of mssql PMDA to MSSQL server fails.
The pyodbc module seems to use InterfaceError exception when username/password authentication is used.
When trusted connection is used, then pyodbc seems to use just Error exception.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1105,2020-10-09T19:46:04Z,2020-10-12T01:24:40Z,2020-10-12T01:24:40Z,MERGED,True,139,55,1,https://github.com/ElephantZhang,libpcp_web: Keeping meta-data qualifiers in canonical expressions,1,[],https://github.com/performancecopilot/pcp/pull/1105,https://github.com/ElephantZhang,1,https://github.com/performancecopilot/pcp/pull/1105,"updates in series_expr_canonical(), recovering a query statement from a parser tree.
Also fixed bugs in series_compatibility_convert(), make sure units of every series-id with same metric name will be converted to the largest one among them.","updates in series_expr_canonical(), recovering a query statement from a parser tree.
Also fixed bugs in series_compatibility_convert(), make sure units of every series-id with same metric name will be converted to the largest one among them.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1106,2020-10-10T10:43:28Z,2020-10-10T10:43:37Z,2020-10-10T10:43:37Z,MERGED,True,5,0,2,https://github.com/kmcdonell,qa,2,[],https://github.com/performancecopilot/pcp/pull/1106,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1106,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1107,2020-10-13T05:49:43Z,2020-10-13T10:54:41Z,2020-10-13T10:54:42Z,MERGED,True,2897,436,36,https://github.com/kmcdonell,migrate CI from check-vm to list-packages,37,[],https://github.com/performancecopilot/pcp/pull/1107,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1107,"See qa/admin/package-lists/README for an explanation, but the one liner is that we're leveraging all the check-vm infrastructure to seed one file with a list of packages for each disto+version+arch combination.  Any tweaking then involves editing these files and not trying to amend the check-vm control files any more.","See qa/admin/package-lists/README for an explanation, but the one liner is that we're leveraging all the check-vm infrastructure to seed one file with a list of packages for each disto+version+arch combination.  Any tweaking then involves editing these files and not trying to amend the check-vm control files any more.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1107,2020-10-13T05:49:43Z,2020-10-13T10:54:41Z,2020-10-13T10:54:42Z,MERGED,True,2897,436,36,https://github.com/kmcdonell,migrate CI from check-vm to list-packages,37,[],https://github.com/performancecopilot/pcp/pull/1107,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1107#issuecomment-707660781,"See qa/admin/package-lists/README for an explanation, but the one liner is that we're leveraging all the check-vm infrastructure to seed one file with a list of packages for each disto+version+arch combination.  Any tweaking then involves editing these files and not trying to amend the check-vm control files any more.","looks good, thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1108,2020-10-14T06:14:04Z,2020-10-14T07:13:12Z,2020-10-14T07:13:12Z,MERGED,True,450,149,25,https://github.com/kmcdonell,ci and qa,21,[],https://github.com/performancecopilot/pcp/pull/1108,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1108,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1108,2020-10-14T06:14:04Z,2020-10-14T07:13:12Z,2020-10-14T07:13:12Z,MERGED,True,450,149,25,https://github.com/kmcdonell,ci and qa,21,[],https://github.com/performancecopilot/pcp/pull/1108,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1108#issuecomment-708182846,,"Once the CI builds pass, I intend to merge this before tonight's QA run.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1108,2020-10-14T06:14:04Z,2020-10-14T07:13:12Z,2020-10-14T07:13:12Z,MERGED,True,450,149,25,https://github.com/kmcdonell,ci and qa,21,[],https://github.com/performancecopilot/pcp/pull/1108,https://github.com/kmcdonell,3,https://github.com/performancecopilot/pcp/pull/1108#issuecomment-708209173,,"fedora32-container is hung waiting for registry.fedoraproject.org ... nothing to do with any changes in this PR, so I'm going to merge.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1109,2020-10-15T00:27:08Z,2020-10-19T04:37:21Z,2020-10-19T04:37:21Z,MERGED,True,121,39,6,https://github.com/shogo-matsumoto,pcp-atop: add support for process accounting,1,[],https://github.com/performancecopilot/pcp/pull/1109,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/1109,"Resolves: #922
Note that process accounting is available if psacct service is running or acct.control.enable_acct is set to non-zero.","Resolves: #922
Note that process accounting is available if psacct service is running or acct.control.enable_acct is set to non-zero.",True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1110,2020-10-15T03:01:07Z,2020-10-15T04:09:05Z,2020-10-15T04:09:05Z,MERGED,True,205,34,9,https://github.com/kmcdonell,qa,7,[],https://github.com/performancecopilot/pcp/pull/1110,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1110,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1111,2020-10-15T09:56:52Z,2020-10-19T04:37:20Z,2020-10-19T04:37:20Z,MERGED,True,552,1,8,https://github.com/kjain101,perfevent pmda enhancements to support hv_24x7/hv_gpci dynamic events,4,[],https://github.com/performancecopilot/pcp/pull/1111,https://github.com/kjain101,1,https://github.com/performancecopilot/pcp/pull/1111,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1112,2020-10-16T05:57:31Z,2020-10-16T05:57:44Z,2020-10-16T05:57:44Z,MERGED,True,101,32,9,https://github.com/kmcdonell,qa,8,[],https://github.com/performancecopilot/pcp/pull/1112,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1112,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1113,2020-10-18T06:18:14Z,2020-10-18T06:53:42Z,2020-10-18T06:53:42Z,MERGED,True,534,198,18,https://github.com/kmcdonell,"qa, libpcp_pmda, pmlogctl, tarball builds",11,[],https://github.com/performancecopilot/pcp/pull/1113,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1113,"Lots of little stuff here.
I'd like to get the QA stuff in before tonight's CI QA run, so I plan to merge this once the CI builds are done and seek retrospective reviews for the code parts of this PR.","Lots of little stuff here.
I'd like to get the QA stuff in before tonight's CI QA run, so I plan to merge this once the CI builds are done and seek retrospective reviews for the code parts of this PR.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1114,2020-10-18T06:47:48Z,2020-10-30T00:37:39Z,2020-10-30T00:37:39Z,MERGED,True,239,76,2,https://github.com/ElephantZhang,Expr support for /series/query,2,[],https://github.com/performancecopilot/pcp/pull/1114,https://github.com/ElephantZhang,1,https://github.com/performancecopilot/pcp/pull/1114,"Let /series/query support reporting fabricated sid with its descriptor, see this example:

$ curl --get ""http://localhost:44322/series/query?expr=rate(kernel.all.pswitch)""
[""79cc71e91ffd9f5a6adbcb8c7ee8d01164677f71""]
$ curl -Gs 'http://localhost:44322/series/descs?series=79cc71e91ffd9f5a6adbcb8c7ee8d01164677f71' | pmjson
[
{
""series"": ""79cc71e91ffd9f5a6adbcb8c7ee8d01164677f71"",
""source"": ""11f6eed3f8dc2710e7aebe3b534263a57836d494"",
""pmid"": ""511.0.0"",
""indom"": ""none"",
""semantics"": ""instant"",
""type"": ""double"",
""units"": ""count / sec""
}
]
$ pmseries -Dquery 'rate(kernel.all.pswitch)'
series_function_hash: canonical expr:
rate(kernel.all.pswitch)
79cc71e91ffd9f5a6adbcb8c7ee8d01164677f71","Let /series/query support reporting fabricated sid with its descriptor, see this example:

$ curl --get ""http://localhost:44322/series/query?expr=rate(kernel.all.pswitch)""
[""79cc71e91ffd9f5a6adbcb8c7ee8d01164677f71""]
$ curl -Gs 'http://localhost:44322/series/descs?series=79cc71e91ffd9f5a6adbcb8c7ee8d01164677f71' | pmjson
[
{
""series"": ""79cc71e91ffd9f5a6adbcb8c7ee8d01164677f71"",
""source"": ""11f6eed3f8dc2710e7aebe3b534263a57836d494"",
""pmid"": ""511.0.0"",
""indom"": ""none"",
""semantics"": ""instant"",
""type"": ""double"",
""units"": ""count / sec""
}
]
$ pmseries -Dquery 'rate(kernel.all.pswitch)'
series_function_hash: canonical expr:
rate(kernel.all.pswitch)
79cc71e91ffd9f5a6adbcb8c7ee8d01164677f71",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1115,2020-10-19T20:29:15Z,2020-10-21T00:08:08Z,2020-10-21T00:08:08Z,MERGED,True,131,51,6,https://github.com/kmcdonell,netcheck PMDA fixes,2,[],https://github.com/performancecopilot/pcp/pull/1115,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1115,"Changes committed to git@github.com:kmcdonell/pcp.git 20201020
Ken McDonell (1):
src/pmdas/netcheck: rework to accommodate some QA failures
qa/1160.out                                    |   14 +++++-----
src/pmdas/netcheck/modules/pcpnetcheck.python  |   35 +++++++++++++++----------
src/pmdas/netcheck/modules/ping.python         |   35 ++++++++++++++++++-------
src/pmdas/netcheck/modules/ping_latency.python |   33 +++++++++++++++++------
src/pmdas/netcheck/modules/ping_loss.python    |   33 +++++++++++++++++------
src/pmdas/netcheck/netcheck.conf               |   22 ++++++++++++---
6 files changed, 121 insertions(+), 51 deletions(-)
Details ...
commit 4986a0c
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 20 07:11:49 2020 +1100
src/pmdas/netcheck: rework to accommodate some QA failures

Finally had time to understand why test is failing sometimes.

The following situations were all problematic for the ""ping""
modules (ping, ping_latency and ping_loss):
- ping(1) command has no -6 option, even when IPv6 is enabled
- ping6(1) is required to do IPv6 ping
- IPv6 is enabled on the local host but the local gateway does not
  support IPv6

This comment includes the following changes:
- default to using IPv4 for ""ping"" modules
- add ""command"" (default ""ping"") and ""cmdargs"" (default empty) configuration
  options in the .conf file for the ""ping"" modules ... the previous defaults
  could be activated with:
        command = ping6
  or:
        cmdargs = -6
  depending on the platform.
- remove all references to SIX_OPT and six_opt in the code base
- remove all use of the literal 'ping' when constructing the ""ping"" command
  ... use the ""command"" configuration option
- add ""cmdargs"" to the ""ping"" command after all other arguments and before
  the hostname
- after the ""ping"" command has been constructed, log the full shell command
  so we can see what is really being run
- log the list of hosts to be pinged for the ping module
- add per host error counters, incremented when the ""ping"" command returns
  non-zero status ... and if this happens and the error count is <= 3 log
  the event and the output from the ""ping"" command to aid triage

Some of these changes are in the common pcpnetcheck code, but some of
them are replicated across each of the ping, ping_latency and ping_loss
modules.","Changes committed to git@github.com:kmcdonell/pcp.git 20201020
Ken McDonell (1):
src/pmdas/netcheck: rework to accommodate some QA failures
qa/1160.out                                    |   14 +++++-----
src/pmdas/netcheck/modules/pcpnetcheck.python  |   35 +++++++++++++++----------
src/pmdas/netcheck/modules/ping.python         |   35 ++++++++++++++++++-------
src/pmdas/netcheck/modules/ping_latency.python |   33 +++++++++++++++++------
src/pmdas/netcheck/modules/ping_loss.python    |   33 +++++++++++++++++------
src/pmdas/netcheck/netcheck.conf               |   22 ++++++++++++---
6 files changed, 121 insertions(+), 51 deletions(-)
Details ...
commit 4986a0c
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 20 07:11:49 2020 +1100
src/pmdas/netcheck: rework to accommodate some QA failures

Finally had time to understand why test is failing sometimes.

The following situations were all problematic for the ""ping""
modules (ping, ping_latency and ping_loss):
- ping(1) command has no -6 option, even when IPv6 is enabled
- ping6(1) is required to do IPv6 ping
- IPv6 is enabled on the local host but the local gateway does not
  support IPv6

This comment includes the following changes:
- default to using IPv4 for ""ping"" modules
- add ""command"" (default ""ping"") and ""cmdargs"" (default empty) configuration
  options in the .conf file for the ""ping"" modules ... the previous defaults
  could be activated with:
        command = ping6
  or:
        cmdargs = -6
  depending on the platform.
- remove all references to SIX_OPT and six_opt in the code base
- remove all use of the literal 'ping' when constructing the ""ping"" command
  ... use the ""command"" configuration option
- add ""cmdargs"" to the ""ping"" command after all other arguments and before
  the hostname
- after the ""ping"" command has been constructed, log the full shell command
  so we can see what is really being run
- log the list of hosts to be pinged for the ping module
- add per host error counters, incremented when the ""ping"" command returns
  non-zero status ... and if this happens and the error count is <= 3 log
  the event and the output from the ""ping"" command to aid triage

Some of these changes are in the common pcpnetcheck code, but some of
them are replicated across each of the ping, ping_latency and ping_loss
modules.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1115,2020-10-19T20:29:15Z,2020-10-21T00:08:08Z,2020-10-21T00:08:08Z,MERGED,True,131,51,6,https://github.com/kmcdonell,netcheck PMDA fixes,2,[],https://github.com/performancecopilot/pcp/pull/1115,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1115#issuecomment-713198891,"Changes committed to git@github.com:kmcdonell/pcp.git 20201020
Ken McDonell (1):
src/pmdas/netcheck: rework to accommodate some QA failures
qa/1160.out                                    |   14 +++++-----
src/pmdas/netcheck/modules/pcpnetcheck.python  |   35 +++++++++++++++----------
src/pmdas/netcheck/modules/ping.python         |   35 ++++++++++++++++++-------
src/pmdas/netcheck/modules/ping_latency.python |   33 +++++++++++++++++------
src/pmdas/netcheck/modules/ping_loss.python    |   33 +++++++++++++++++------
src/pmdas/netcheck/netcheck.conf               |   22 ++++++++++++---
6 files changed, 121 insertions(+), 51 deletions(-)
Details ...
commit 4986a0c
Author: Ken McDonell kenj@kenj.id.au
Date:   Tue Oct 20 07:11:49 2020 +1100
src/pmdas/netcheck: rework to accommodate some QA failures

Finally had time to understand why test is failing sometimes.

The following situations were all problematic for the ""ping""
modules (ping, ping_latency and ping_loss):
- ping(1) command has no -6 option, even when IPv6 is enabled
- ping6(1) is required to do IPv6 ping
- IPv6 is enabled on the local host but the local gateway does not
  support IPv6

This comment includes the following changes:
- default to using IPv4 for ""ping"" modules
- add ""command"" (default ""ping"") and ""cmdargs"" (default empty) configuration
  options in the .conf file for the ""ping"" modules ... the previous defaults
  could be activated with:
        command = ping6
  or:
        cmdargs = -6
  depending on the platform.
- remove all references to SIX_OPT and six_opt in the code base
- remove all use of the literal 'ping' when constructing the ""ping"" command
  ... use the ""command"" configuration option
- add ""cmdargs"" to the ""ping"" command after all other arguments and before
  the hostname
- after the ""ping"" command has been constructed, log the full shell command
  so we can see what is really being run
- log the list of hosts to be pinged for the ping module
- add per host error counters, incremented when the ""ping"" command returns
  non-zero status ... and if this happens and the error count is <= 3 log
  the event and the output from the ""ping"" command to aid triage

Some of these changes are in the common pcpnetcheck code, but some of
them are replicated across each of the ping, ping_latency and ping_loss
modules.","Review from Nathan via email.

It looks fine to me Ken - I'll tweak it a little to remove the
duplicated log-command-once logic using a little helper
function & then merge once QA'd.

Thanks Nathan",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1116,2020-10-20T06:08:19Z,2020-10-20T06:45:28Z,2020-10-20T06:45:28Z,MERGED,True,23,21,4,https://github.com/kmcdonell,ci+qa,3,[],https://github.com/performancecopilot/pcp/pull/1116,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1116,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1117,2020-10-20T07:28:21Z,2020-10-21T00:08:07Z,2020-10-21T00:08:07Z,MERGED,True,971,9,6,https://github.com/arzoo14,[docs] REST API documentation,5,[],https://github.com/performancecopilot/pcp/pull/1117,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1117,This PR contains the REST API documentation alongwith the basic setup and some necessary changes in UAG and PG books.,This PR contains the REST API documentation alongwith the basic setup and some necessary changes in UAG and PG books.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1118,2020-10-21T04:17:30Z,2020-10-21T22:24:43Z,2020-10-21T22:24:45Z,MERGED,True,12,11,9,https://github.com/TroyWilsonAus,Fixing runtime and compile issues with the activemq pdma,2,[],https://github.com/performancecopilot/pcp/pull/1118,https://github.com/TroyWilsonAus,1,https://github.com/performancecopilot/pcp/pull/1118,"When running the pdma we found a few issues.

Invalid Header ""http://localhost""
Unable to load new from Queue ...

This PR resolves these issues.","When running the pdma we found a few issues.

Invalid Header ""http://localhost""
Unable to load new from Queue ...

This PR resolves these issues.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1119,2020-10-21T18:21:14Z,2020-10-21T22:24:43Z,2020-11-06T14:17:23Z,MERGED,True,875,0,1,https://github.com/arzoo14,[docs] REST API documentation - PMAPI HOST SERVICES,1,[],https://github.com/performancecopilot/pcp/pull/1119,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1119,"This PR adds the remaining and last part of the REST API documentation, i.e, PMAPI HOST SERVICES.
PMAPI HOST SERVICES covers the following:

GET /pmapi/context
GET /pmapi/metric
GET /pmapi/fetch
GET /pmapi/children
GET /pmapi/indom
GET /pmapi/profile
GET /pmapi/store
GET /pmapi/derive
GET /pmapi/metrics","This PR adds the remaining and last part of the REST API documentation, i.e, PMAPI HOST SERVICES.
PMAPI HOST SERVICES covers the following:

GET /pmapi/context
GET /pmapi/metric
GET /pmapi/fetch
GET /pmapi/children
GET /pmapi/indom
GET /pmapi/profile
GET /pmapi/store
GET /pmapi/derive
GET /pmapi/metrics",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1120,2020-10-22T05:04:58Z,2020-10-22T05:51:17Z,2020-10-22T05:51:17Z,MERGED,True,61,18,6,https://github.com/kmcdonell,qa & proc PMDA (strange QA+cgroups issue),7,[],https://github.com/performancecopilot/pcp/pull/1120,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1120,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1123,2020-10-23T12:10:52Z,2020-10-26T23:30:50Z,2021-01-27T10:53:23Z,MERGED,True,27,6,5,https://github.com/andreasgerstmayr,pmproxy Access-Control-Max-Age header and label values response output fix,3,['pmproxy'],https://github.com/performancecopilot/pcp/pull/1123,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1123,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1125,2020-10-24T20:45:30Z,2020-10-24T20:46:21Z,2020-10-24T20:46:21Z,MERGED,True,12,2,2,https://github.com/kmcdonell,ci + qa,2,[],https://github.com/performancecopilot/pcp/pull/1125,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1125,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1126,2020-10-25T10:10:07Z,2020-10-25T10:10:21Z,2020-10-25T10:10:21Z,MERGED,True,11,7,4,https://github.com/kmcdonell,qa,2,[],https://github.com/performancecopilot/pcp/pull/1126,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1126,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1129,2020-10-28T10:22:27Z,2020-10-28T10:22:43Z,2020-10-28T10:22:43Z,MERGED,True,41,7,4,https://github.com/kmcdonell,qa + small pmlogctl/pmiectl fixes,5,[],https://github.com/performancecopilot/pcp/pull/1129,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1129,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1135,2020-11-02T17:27:41Z,2020-11-06T03:37:31Z,2021-01-27T10:54:01Z,MERGED,True,57,21,2,https://github.com/andreasgerstmayr,pmproxy: do not change the schema for empty responses for /search API methods,1,[],https://github.com/performancecopilot/pcp/pull/1135,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1135,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1136,2020-11-04T10:43:04Z,2020-11-04T10:43:12Z,2020-11-04T10:43:12Z,MERGED,True,16,3,3,https://github.com/kmcdonell,qa,5,[],https://github.com/performancecopilot/pcp/pull/1136,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1136,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1137,2020-11-04T12:37:38Z,2020-11-06T05:11:01Z,2020-11-06T08:20:56Z,MERGED,True,3,3,1,https://github.com/mvollmer,pmdas/linux: Use _pm_assign_ulong for disk.dev.read_bytes etc,1,[],https://github.com/performancecopilot/pcp/pull/1137,https://github.com/mvollmer,1,https://github.com/performancecopilot/pcp/pull/1137,"They are declared with KERNEL_ULONG, so they should be using
_pm_assign_ulong.","They are declared with KERNEL_ULONG, so they should be using
_pm_assign_ulong.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1137,2020-11-04T12:37:38Z,2020-11-06T05:11:01Z,2020-11-06T08:20:56Z,MERGED,True,3,3,1,https://github.com/mvollmer,pmdas/linux: Use _pm_assign_ulong for disk.dev.read_bytes etc,1,[],https://github.com/performancecopilot/pcp/pull/1137,https://github.com/mvollmer,2,https://github.com/performancecopilot/pcp/pull/1137#issuecomment-721708454,"They are declared with KERNEL_ULONG, so they should be using
_pm_assign_ulong.","Without this, I get garbage in the upper 32 bits for all but the first call to pmFetch. There might be more KERNEL_ULONG metrics that don't use _pm_assign_ulong; I haven't checked carefully.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1137,2020-11-04T12:37:38Z,2020-11-06T05:11:01Z,2020-11-06T08:20:56Z,MERGED,True,3,3,1,https://github.com/mvollmer,pmdas/linux: Use _pm_assign_ulong for disk.dev.read_bytes etc,1,[],https://github.com/performancecopilot/pcp/pull/1137,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1137#issuecomment-722148503,"They are declared with KERNEL_ULONG, so they should be using
_pm_assign_ulong.","@mvollmer hi Marius,

Without this, I get garbage in the upper 32 bits for all but the first call to pmFetch.

Could you send me a copy (or just paste here) of your /proc/diskstats with values showing the problem?  We can build a regression test using that.

There might be more KERNEL_ULONG metrics that don't use _pm_assign_ulong; I haven't checked carefully.

No problem - I'll audit them, thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1137,2020-11-04T12:37:38Z,2020-11-06T05:11:01Z,2020-11-06T08:20:56Z,MERGED,True,3,3,1,https://github.com/mvollmer,pmdas/linux: Use _pm_assign_ulong for disk.dev.read_bytes etc,1,[],https://github.com/performancecopilot/pcp/pull/1137,https://github.com/mvollmer,4,https://github.com/performancecopilot/pcp/pull/1137#issuecomment-722207327,"They are declared with KERNEL_ULONG, so they should be using
_pm_assign_ulong.","@mvollmer hi Marius,

Without this, I get garbage in the upper 32 bits for all but the first call to pmFetch.

Could you send me a copy (or just paste here) of your /proc/diskstats with values showing the problem? We can build a regression test using that.

Here you go:
# cat /proc/diskstats 
  11       0 sr0 7 0 2 2 0 0 0 0 0 6 2 0 0 0 0 0 0
 252       0 vda 21066 90 3131759 14386 27072 2670 1872313 42608 0 35067 67781 0 0 0 0 2522 10786
 252       1 vda1 141 23 10874 18 3 0 24 2 0 79 21 0 0 0 0 0 0
 252       2 vda2 20877 67 3117525 14354 25674 2670 1872289 27509 0 28112 41864 0 0 0 0 0 0
   8       0 sda 101 0 7137 15 2 0 0 0 0 54 16 0 0 0 0 2 0
   8      16 sdb 126 0 8569 59 2 0 0 0 0 66 61 0 0 0 0 2 0
   8      32 sdc 307 0 9673 81 9 0 4096 6 0 156 88 0 0 0 0 6 0
 253       0 dm-0 20181 0 3108365 10240 29259 0 1895521 46776 0 34841 57016 0 0 0 0 0 0
 253       1 dm-1 98 0 4440 13 2 0 0 0 0 21 13 0 0 0 0 0 0
 251       0 zram0 294 0 2352 2 1 0 8 1 0 10 3 0 0 0 0 0 0
 253       2 dm-2 193 0 6492 92 4 0 4096 20 0 98 112 0 0 0 0 0 0



There might be more KERNEL_ULONG metrics that don't use _pm_assign_ulong; I haven't checked carefully.

No problem - I'll audit them, thanks.

Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1137,2020-11-04T12:37:38Z,2020-11-06T05:11:01Z,2020-11-06T08:20:56Z,MERGED,True,3,3,1,https://github.com/mvollmer,pmdas/linux: Use _pm_assign_ulong for disk.dev.read_bytes etc,1,[],https://github.com/performancecopilot/pcp/pull/1137,https://github.com/mvollmer,5,https://github.com/performancecopilot/pcp/pull/1137#issuecomment-722944975,"They are declared with KERNEL_ULONG, so they should be using
_pm_assign_ulong.",Thanks for 6d53660!,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1138,2020-11-06T20:36:52Z,2020-11-07T02:07:50Z,2020-11-07T02:07:50Z,MERGED,True,102,0,5,https://github.com/kmcdonell,"Linux PMDA: fix for waitio ""counters"" from /proc/stat going backwards",2,[],https://github.com/performancecopilot/pcp/pull/1138,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1138,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1138,2020-11-06T20:36:52Z,2020-11-07T02:07:50Z,2020-11-07T02:07:50Z,MERGED,True,102,0,5,https://github.com/kmcdonell,"Linux PMDA: fix for waitio ""counters"" from /proc/stat going backwards",2,[],https://github.com/performancecopilot/pcp/pull/1138,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1138#issuecomment-723374128,,looks good to me and the QA test passes,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1139,2020-11-11T14:30:07Z,2020-11-11T19:41:14Z,2020-11-11T19:41:14Z,MERGED,True,26,20,2,https://github.com/arzoo14,[docs] Modifications in REST API,1,[],https://github.com/performancecopilot/pcp/pull/1139,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1139,"This PR contains the following changes:

REST API Guide is added in toctree for easier navigation.
Description of API response is changed from successful operation to OK.","This PR contains the following changes:

REST API Guide is added in toctree for easier navigation.
Description of API response is changed from successful operation to OK.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1141,2020-11-11T17:32:28Z,2020-11-11T22:16:09Z,2020-11-11T22:16:09Z,MERGED,True,1,9,1,https://github.com/ddiss,pmns/Make: drop duplicate if/else,1,[],https://github.com/performancecopilot/pcp/pull/1141,https://github.com/ddiss,1,https://github.com/performancecopilot/pcp/pull/1141,"As of 029add4, both the if and else
branches here match. Restoration of the previous build-time logic is
tracked via #1140 and
will affect more scripts than just this one.
Signed-off-by: David Disseldorp ddiss@suse.de","As of 029add4, both the if and else
branches here match. Restoration of the previous build-time logic is
tracked via #1140 and
will affect more scripts than just this one.
Signed-off-by: David Disseldorp ddiss@suse.de",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1141,2020-11-11T17:32:28Z,2020-11-11T22:16:09Z,2020-11-11T22:16:09Z,MERGED,True,1,9,1,https://github.com/ddiss,pmns/Make: drop duplicate if/else,1,[],https://github.com/performancecopilot/pcp/pull/1141,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1141#issuecomment-725691248,"As of 029add4, both the if and else
branches here match. Restoration of the previous build-time logic is
tracked via #1140 and
will affect more scripts than just this one.
Signed-off-by: David Disseldorp ddiss@suse.de","Hi David, nice to hear from you again! This change is trivially correct, though reading Ken's comment in the else part of the conditional, he probably intended to use /tmp, instead of $PCP_TMPFILE_DIR, i.e. tmp=mktemp -d ""/tmp/pmns_stdpmid.XXXXXXXXX"" || exit 1
But as you mentioned in #1140, we need to audit all use of $PCP_TMPFILE_DIR for build/runtime usage, as well as fix the configure prefix defaults .. but let's discuss that in #1140 and just merge this change.  thanks",True,{'THUMBS_UP': ['https://github.com/ddiss']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1142,2020-11-12T19:53:00Z,2020-11-13T15:16:29Z,2020-11-13T15:16:30Z,MERGED,True,47,11763,31,https://github.com/arzoo14,[docs] Improvements in Diagrams,1,[],https://github.com/performancecopilot/pcp/pull/1142,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1142,"This PR improves the diagrams present in the PCP books.
Improvement incorporates the following:

Shadow of the shapes.
Color/font as per pcp.io website.
Proper Scaling.
Consistency (same font, same font size, same color palette, same size of the shapes) throughout the figures.
Improvements in arrow heads.","This PR improves the diagrams present in the PCP books.
Improvement incorporates the following:

Shadow of the shapes.
Color/font as per pcp.io website.
Proper Scaling.
Consistency (same font, same font size, same color palette, same size of the shapes) throughout the figures.
Improvements in arrow heads.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1142,2020-11-12T19:53:00Z,2020-11-13T15:16:29Z,2020-11-13T15:16:30Z,MERGED,True,47,11763,31,https://github.com/arzoo14,[docs] Improvements in Diagrams,1,[],https://github.com/performancecopilot/pcp/pull/1142,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1142#issuecomment-726821323,"This PR improves the diagrams present in the PCP books.
Improvement incorporates the following:

Shadow of the shapes.
Color/font as per pcp.io website.
Proper Scaling.
Consistency (same font, same font size, same color palette, same size of the shapes) throughout the figures.
Improvements in arrow heads.",looks great. thanks!,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1143,2020-11-16T01:46:50Z,2020-11-16T05:55:33Z,2020-11-16T05:55:33Z,MERGED,True,1,1,1,https://github.com/TroyWilsonAus,Increased buffer size to allow for multiple reads of the stream.,1,[],https://github.com/performancecopilot/pcp/pull/1143,https://github.com/TroyWilsonAus,1,https://github.com/performancecopilot/pcp/pull/1143,Increased the buffer size to allow for larger responses from apache.,Increased the buffer size to allow for larger responses from apache.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1144,2020-11-16T01:48:24Z,2020-11-16T06:14:54Z,2020-11-16T06:14:54Z,CLOSED,False,234,0,6,https://github.com/TroyWilsonAus,Added docker-build image (for OL7),1,[],https://github.com/performancecopilot/pcp/pull/1144,https://github.com/TroyWilsonAus,1,https://github.com/performancecopilot/pcp/pull/1144,"Added docker file and script to perform build in a container with most dependencies already installed.
This doesn't include all dependencies, (mostly some Perl CPAN objects are missing).
This worked for me for building core and c++ related pdma's","Added docker file and script to perform build in a container with most dependencies already installed.
This doesn't include all dependencies, (mostly some Perl CPAN objects are missing).
This worked for me for building core and c++ related pdma's",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1144,2020-11-16T01:48:24Z,2020-11-16T06:14:54Z,2020-11-16T06:14:54Z,CLOSED,False,234,0,6,https://github.com/TroyWilsonAus,Added docker-build image (for OL7),1,[],https://github.com/performancecopilot/pcp/pull/1144,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1144#issuecomment-727760094,"Added docker file and script to perform build in a container with most dependencies already installed.
This doesn't include all dependencies, (mostly some Perl CPAN objects are missing).
This worked for me for building core and c++ related pdma's","Our strategy has been to work towards continually improving qa/admin/check-vm rather than adding Docker images for specific build cases.  As discussed on slack, if a build fails due to check-vm missing toolchain / deps requirements, lets understand and fix that.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1145,2020-11-16T01:53:22Z,2020-11-16T05:55:32Z,2020-11-16T05:55:32Z,MERGED,True,37,6,1,https://github.com/TroyWilsonAus,Add better http debugging,3,[],https://github.com/performancecopilot/pcp/pull/1145,https://github.com/TroyWilsonAus,1,https://github.com/performancecopilot/pcp/pull/1145,Added more detailed debugging for http based pdma's,Added more detailed debugging for http based pdma's,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1146,2020-11-19T06:01:26Z,2020-11-19T06:39:07Z,2020-11-19T06:39:07Z,MERGED,True,510,32,9,https://github.com/kmcdonell,pmlogsummary fix for dynamic instance domains,5,[],https://github.com/performancecopilot/pcp/pull/1146,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1146,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1147,2020-11-19T07:03:18Z,2020-11-20T05:14:49Z,2020-11-20T05:14:49Z,MERGED,True,18,1,3,https://github.com/arzoo14,[docs] Text in table cells wrapped,1,[],https://github.com/performancecopilot/pcp/pull/1147,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1147,"Currently, the text in table cells are not wrapped, due to which the tables are very wide with horizontal scroll bars. This PR resolves this issue by wrapping the text and spreading it over multiple lines.","Currently, the text in table cells are not wrapped, due to which the tables are very wide with horizontal scroll bars. This PR resolves this issue by wrapping the text and spreading it over multiple lines.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1154,2020-11-22T19:28:23Z,2020-11-23T00:27:11Z,2020-11-24T15:40:47Z,MERGED,True,37,9960,22,https://github.com/arzoo14,[docs] Improvements in Diagrams - PG book,1,[],https://github.com/performancecopilot/pcp/pull/1154,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1154,"Continuation of PR #1142 !
This PR improves the diagrams present in the PCP PG book. Improvement incorporates the following:

Shadow of the shapes.
Color/font as per pcp.io website.
Proper Scaling.
Consistency (same font, same font size, same color palette, same size of the shapes) throughout the figures.
Improvements in arrow heads.","Continuation of PR #1142 !
This PR improves the diagrams present in the PCP PG book. Improvement incorporates the following:

Shadow of the shapes.
Color/font as per pcp.io website.
Proper Scaling.
Consistency (same font, same font size, same color palette, same size of the shapes) throughout the figures.
Improvements in arrow heads.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1160,2020-11-25T18:13:52Z,2020-11-26T00:57:51Z,2020-11-26T00:57:51Z,MERGED,True,16,5,1,https://github.com/ElephantZhang,Fix issue #1157 multiple HMSET calls,1,"['/series/query expr', 'pmseries']",https://github.com/performancecopilot/pcp/pull/1160,https://github.com/ElephantZhang,1,https://github.com/performancecopilot/pcp/pull/1160,"Fix multiple HMSET calls when querying time series expression.
TODO:

set sources to all-zeros for expressions’ descs
fix issue #1155
Remove metric names requets","Fix multiple HMSET calls when querying time series expression.
TODO:

set sources to all-zeros for expressions’ descs
fix issue #1155
Remove metric names requets",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1161,2020-11-26T05:54:08Z,2020-11-26T06:13:51Z,2020-11-26T06:13:51Z,MERGED,True,499,1,3,https://github.com/arzoo14,[docs] pmseries(1) chapter added in UAG book,1,[],https://github.com/performancecopilot/pcp/pull/1161,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1161,"Closes #1096.
This PR adds a new chapter - Fast, Scalable Time Series Querying - pmseries in the User's and Administrator's Guide book.","Closes #1096.
This PR adds a new chapter - Fast, Scalable Time Series Querying - pmseries in the User's and Administrator's Guide book.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1162,2020-11-26T19:57:59Z,2020-11-26T22:05:07Z,2020-11-26T22:05:07Z,MERGED,True,67,71,18,https://github.com/arzoo14,[docs] Improvements in Docs,1,[],https://github.com/performancecopilot/pcp/pull/1162,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1162,"This PR improves the following:

Adds PCP icon to Books Guide and REST API Guide.
Moves the table of contents just below the chapter title.
Fixes the whitespaces and typos.","This PR improves the following:

Adds PCP icon to Books Guide and REST API Guide.
Moves the table of contents just below the chapter title.
Fixes the whitespaces and typos.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1164,2020-12-01T05:24:40Z,2020-12-10T08:22:40Z,2020-12-10T08:22:40Z,MERGED,True,501,8,13,https://github.com/kmcdonell,libpcp performance improvements for interp mode with dynamic indoms,6,[],https://github.com/performancecopilot/pcp/pull/1164,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1164,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1164,2020-12-01T05:24:40Z,2020-12-10T08:22:40Z,2020-12-10T08:22:40Z,MERGED,True,501,8,13,https://github.com/kmcdonell,libpcp performance improvements for interp mode with dynamic indoms,6,[],https://github.com/performancecopilot/pcp/pull/1164,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1164#issuecomment-737191982,,"Built and installed fine. I've left it running QA for the new test 1286, and the atop, pmda.proc and libpcp groups. So far 632, 1079 and 1347 failed, which I'll take a look at in the morning (may or may not be related). It's a bit late in the evening to review the libpcp changes :P",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1164,2020-12-01T05:24:40Z,2020-12-10T08:22:40Z,2020-12-10T08:22:40Z,MERGED,True,501,8,13,https://github.com/kmcdonell,libpcp performance improvements for interp mode with dynamic indoms,6,[],https://github.com/performancecopilot/pcp/pull/1164,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/1164#issuecomment-737507464,,"QA:
632 - dates way out into the future
1079 - extra PID (670) in atop listing
1347 - similar to 1079, extra PIDs for pmsleep
All the above are passing on a different machine running current master branch",True,{'CONFUSED': ['https://github.com/kmcdonell']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1164,2020-12-01T05:24:40Z,2020-12-10T08:22:40Z,2020-12-10T08:22:40Z,MERGED,True,501,8,13,https://github.com/kmcdonell,libpcp performance improvements for interp mode with dynamic indoms,6,[],https://github.com/performancecopilot/pcp/pull/1164,https://github.com/kmcdonell,4,https://github.com/performancecopilot/pcp/pull/1164#issuecomment-737718837,,Thanks Mark.  I guess these failing as tests are not in -g archive nor -g multi-archive ... I'm in Echuca at the moment and won't be able to look at this until the middle of next week.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1164,2020-12-01T05:24:40Z,2020-12-10T08:22:40Z,2020-12-10T08:22:40Z,MERGED,True,501,8,13,https://github.com/kmcdonell,libpcp performance improvements for interp mode with dynamic indoms,6,[],https://github.com/performancecopilot/pcp/pull/1164,https://github.com/goodwinos,5,https://github.com/performancecopilot/pcp/pull/1164#issuecomment-737894444,,"Hi Ken, 632 is passing now after I remade qa/src/timeshift. The previous binary was built without your patch series, so I'm not sure if that's good or bad (!), but at least it's passing now.
1347 and 1079 might just need a remake for the extra PIDs showing up in atop listings. I'll retest with this PR on a different machine.
All the tests in the archive and multi-archive groups are passing.
Still need to review the libpcp src changes ...
Enjoy Echuca :)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1164,2020-12-01T05:24:40Z,2020-12-10T08:22:40Z,2020-12-10T08:22:40Z,MERGED,True,501,8,13,https://github.com/kmcdonell,libpcp performance improvements for interp mode with dynamic indoms,6,[],https://github.com/performancecopilot/pcp/pull/1164,https://github.com/kmcdonell,6,https://github.com/performancecopilot/pcp/pull/1164#issuecomment-738327960,,"@goodwinos agree on 632 and not unexpected as it is exposed to an internal libpcp data structure I changed. 1347 is a boundary tail condition ... I need to double check which result is correct ... the missing process name and args from atop is a bit of a concern, see pids 2956902 and 2956910, but these ones disappear near the end of the archive.  From a quick look, 1079 seems similar with pid 670 coming and going near the end of the archive and no process name or args in the atop output.
Leave this in my court ... I'll add here once I have more analysis.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1164,2020-12-01T05:24:40Z,2020-12-10T08:22:40Z,2020-12-10T08:22:40Z,MERGED,True,501,8,13,https://github.com/kmcdonell,libpcp performance improvements for interp mode with dynamic indoms,6,[],https://github.com/performancecopilot/pcp/pull/1164,https://github.com/goodwinos,7,https://github.com/performancecopilot/pcp/pull/1164#issuecomment-742265969,,"We agreed to merge this PR - so I'll do that later this evening or in the morning. I'll just remake 1347 and 1079. And 632 should pass in CI because it's always a fresh build.
Thanks Ken
Cheers",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1166,2020-12-03T14:34:32Z,2020-12-09T18:58:05Z,2021-01-27T10:53:11Z,MERGED,True,596,25,15,https://github.com/andreasgerstmayr,pmdabcc: netproc module + atop per-process network statistics,6,[],https://github.com/performancecopilot/pcp/pull/1166,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1166,"first version of the BCC netproc module, which provides data for the pcp atop per-process bandwidth statistics
I'm open to changes of the name (netproc was the best I could come up with) and metric names
bcc.proc.io.net.perpid.tcp.in.packets
bcc.proc.io.net.perpid.tcp.in.bytes
bcc.proc.io.net.perpid.tcp.out.packets
bcc.proc.io.net.perpid.tcp.out.bytes
bcc.proc.io.net.perpid.udp.in.packets
bcc.proc.io.net.perpid.udp.in.bytes
bcc.proc.io.net.perpid.udp.out.packets
bcc.proc.io.net.perpid.udp.out.bytes

(bcc.proc.io.net.tcp.* is already in use by the tcplife BCC module)","first version of the BCC netproc module, which provides data for the pcp atop per-process bandwidth statistics
I'm open to changes of the name (netproc was the best I could come up with) and metric names
bcc.proc.io.net.perpid.tcp.in.packets
bcc.proc.io.net.perpid.tcp.in.bytes
bcc.proc.io.net.perpid.tcp.out.packets
bcc.proc.io.net.perpid.tcp.out.bytes
bcc.proc.io.net.perpid.udp.in.packets
bcc.proc.io.net.perpid.udp.in.bytes
bcc.proc.io.net.perpid.udp.out.packets
bcc.proc.io.net.perpid.udp.out.bytes

(bcc.proc.io.net.tcp.* is already in use by the tcplife BCC module)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1166,2020-12-03T14:34:32Z,2020-12-09T18:58:05Z,2021-01-27T10:53:11Z,MERGED,True,596,25,15,https://github.com/andreasgerstmayr,pmdabcc: netproc module + atop per-process network statistics,6,[],https://github.com/performancecopilot/pcp/pull/1166,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1166#issuecomment-738232465,"first version of the BCC netproc module, which provides data for the pcp atop per-process bandwidth statistics
I'm open to changes of the name (netproc was the best I could come up with) and metric names
bcc.proc.io.net.perpid.tcp.in.packets
bcc.proc.io.net.perpid.tcp.in.bytes
bcc.proc.io.net.perpid.tcp.out.packets
bcc.proc.io.net.perpid.tcp.out.bytes
bcc.proc.io.net.perpid.udp.in.packets
bcc.proc.io.net.perpid.udp.in.bytes
bcc.proc.io.net.perpid.udp.out.packets
bcc.proc.io.net.perpid.udp.out.bytes

(bcc.proc.io.net.tcp.* is already in use by the tcplife BCC module)","I've left all references to netatop in place in an effort to not deviate too much from upstream atop.
Currently I'm removing the network statistics of finished processes (in the PMDA).

Pros: the list of instances doesn't grow indefinitely
Cons: we miss short-lived processes

netatop comes with a netatop daemon (netatopd), which stores network statistics from finished processes on the disk, i.e. it catches also short-lived processes and retains the history.
The ""system and process activity since boot"" is misleading at the moment, need to check this. Also need to verify a few things in the eBPF script (number of packets might be incorrect). And free memory where appropriate. Other than that, the ""n"" key already shows per-process network stats :)",True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1167,2020-12-06T19:37:59Z,2020-12-06T23:59:07Z,2020-12-06T23:59:07Z,MERGED,True,2,2,1,https://github.com/ElephantZhang,Fix issue #1155,1,[],https://github.com/performancecopilot/pcp/pull/1167,https://github.com/ElephantZhang,1,https://github.com/performancecopilot/pcp/pull/1167,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1172,2020-12-09T00:29:45Z,2020-12-10T04:10:48Z,2020-12-10T04:10:48Z,MERGED,True,39,5,2,https://github.com/shogo-matsumoto,pcp-atop: restore an original state of process accounting when pcp-atop exits,2,[],https://github.com/performancecopilot/pcp/pull/1172,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/1172,"Previously pcp-atop force pmdaproc to disable process accounting state
when it exits regardless of what the original state was.
pcp-atop will control the state regarding acct.control.enable_acct as
a reference count to make sure to restore the original state after
all pcp-atop instances exit.","Previously pcp-atop force pmdaproc to disable process accounting state
when it exits regardless of what the original state was.
pcp-atop will control the state regarding acct.control.enable_acct as
a reference count to make sure to restore the original state after
all pcp-atop instances exit.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1176,2020-12-14T17:21:10Z,2020-12-15T01:36:35Z,2021-01-27T10:53:16Z,MERGED,True,50,14,1,https://github.com/andreasgerstmayr,atop: improve task/netproc instance matching algorithm,1,[],https://github.com/performancecopilot/pcp/pull/1176,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1176,create a pid-indexed hash to avoid the O(n*m) nested loop,create a pid-indexed hash to avoid the O(n*m) nested loop,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1184,2020-12-24T10:47:15Z,2020-12-26T22:43:08Z,2020-12-26T22:43:08Z,MERGED,True,1236,5111,40,https://github.com/kmcdonell,"libpcp interp.c rework, minor fixes and qa",130,[],https://github.com/performancecopilot/pcp/pull/1184,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1184,"Something bad seems to have happened in the change to ""rebase rather than merge"" and I'm seeing a slew of commits here that are not expected (at least by me).
I'll leave the PR open until we can sort out what's going on.","Something bad seems to have happened in the change to ""rebase rather than merge"" and I'm seeing a slew of commits here that are not expected (at least by me).
I'll leave the PR open until we can sort out what's going on.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1184,2020-12-24T10:47:15Z,2020-12-26T22:43:08Z,2020-12-26T22:43:08Z,MERGED,True,1236,5111,40,https://github.com/kmcdonell,"libpcp interp.c rework, minor fixes and qa",130,[],https://github.com/performancecopilot/pcp/pull/1184,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1184#issuecomment-751403432,"Something bad seems to have happened in the change to ""rebase rather than merge"" and I'm seeing a slew of commits here that are not expected (at least by me).
I'll leave the PR open until we can sort out what's going on.","I've done a recursive diff of my tree and the official tree, and the only differences are the ones I'd expect from my small number of commits.
And my tree passes QA on bozo, bozo-vm and vm03 ...
So I don't understand why github thinks there are so many commits in this PR, but I'm going to merge away.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1185,2020-12-31T03:40:44Z,2020-12-31T04:26:49Z,2020-12-31T04:26:49Z,MERGED,True,9,5,4,https://github.com/kmcdonell,libpcp fix for recent interp.c changes,3,[],https://github.com/performancecopilot/pcp/pull/1185,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1185,"Actually in logutil.c when an archive context is closed and the new ""trim"" indom data structures are freed.","Actually in logutil.c when an archive context is closed and the new ""trim"" indom data structures are freed.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1187,2021-01-05T01:40:46Z,2021-01-05T02:32:33Z,2021-01-05T02:32:34Z,MERGED,True,142,5,9,https://github.com/kmcdonell,"qa, linux pmda, htop",7,[],https://github.com/performancecopilot/pcp/pull/1187,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1187,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1189,2021-01-14T11:10:52Z,2021-01-15T05:54:39Z,2021-01-15T05:54:39Z,MERGED,True,8511,1,49,https://github.com/mac133k,Linux ZFS PMDA,103,[],https://github.com/performancecopilot/pcp/pull/1189,https://github.com/mac133k,1,https://github.com/performancecopilot/pcp/pull/1189,PMDA for OpenZFS on Linux was added under src/pmdas/linux_zfs.,PMDA for OpenZFS on Linux was added under src/pmdas/linux_zfs.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1189,2021-01-14T11:10:52Z,2021-01-15T05:54:39Z,2021-01-15T05:54:39Z,MERGED,True,8511,1,49,https://github.com/mac133k,Linux ZFS PMDA,103,[],https://github.com/performancecopilot/pcp/pull/1189,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1189#issuecomment-760662385,PMDA for OpenZFS on Linux was added under src/pmdas/linux_zfs.,"@mac133k this looks great!  Here's my 'todo' notes from reading through all the changes and additions - I've fixed a few and the rest are all small items that can arrive via follow up commits (I'll merge it shortly).

Some metrics are missing help text
? might be base some descriptions on:
https://openzfs.github.io/openzfs-docs/man/1/arcstat.1.html
ZFS_POOL InDom missing help text [fixed]
Linker failure with -flto [fixed]
/usr/bin/ld: pmda.o (symbol from plugin): in function zfs_init': (.text+0x0): multiple definition of ZFS_PATH'; zfs_utils.o (symbol from plugin):(.text+0x0): first defined here
Missing .gitignore content for generated files [fixed]
DOS line endings on some header files [fixed]
Some unused macros in the makefile [fixed]
Missing license headers on new source files
Missing copyright notice on new source files
New man page is missing content
Optimization - some strcmp use repeats comparison of common
prefix when extracting values (e.g. ""dnode_"", ""scatter_"", ""cache_"",
""hash_"", ""metadata_"", ""dmu_"", etc) inside file scanning loops - the
common prefixes could be tested for once, if matching skip over and
then perform shorter string comparisons on the remaining suffixes.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1191,2021-01-16T04:30:08Z,2021-01-16T08:14:24Z,2021-01-16T08:14:24Z,MERGED,True,402,32,9,https://github.com/kmcdonell,"qa, pmdumptext man page",18,[],https://github.com/performancecopilot/pcp/pull/1191,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1191,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1192,2021-01-17T10:51:47Z,2021-01-17T19:24:27Z,2021-01-17T19:24:27Z,MERGED,True,14,2,2,https://github.com/kmcdonell,small selinux issue & qa/917,2,[],https://github.com/performancecopilot/pcp/pull/1192,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1192,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1193,2021-01-17T14:21:16Z,2021-01-18T07:12:27Z,2021-01-18T07:12:27Z,MERGED,True,528,1,33,https://github.com/mac133k,Linux zfs license headers,3,[],https://github.com/performancecopilot/pcp/pull/1193,https://github.com/mac133k,1,https://github.com/performancecopilot/pcp/pull/1193,Copyright notices and manual content were added.,Copyright notices and manual content were added.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1197,2021-01-18T20:03:38Z,2021-01-19T00:36:19Z,2021-01-21T09:29:51Z,MERGED,True,318,237,9,https://github.com/mac133k,Conditionals were branched out to optimize string matching on fetch.,1,[],https://github.com/performancecopilot/pcp/pull/1197,https://github.com/mac133k,1,https://github.com/performancecopilot/pcp/pull/1197,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1197,2021-01-18T20:03:38Z,2021-01-19T00:36:19Z,2021-01-21T09:29:51Z,MERGED,True,318,237,9,https://github.com/mac133k,Conditionals were branched out to optimize string matching on fetch.,1,[],https://github.com/performancecopilot/pcp/pull/1197,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1197#issuecomment-762530081,,@mac133k thanks - I've made some optimizations (and other changes) above and beyond yours here - please double-check 'em for me?  Thanks!,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1197,2021-01-18T20:03:38Z,2021-01-19T00:36:19Z,2021-01-21T09:29:51Z,MERGED,True,318,237,9,https://github.com/mac133k,Conditionals were branched out to optimize string matching on fetch.,1,[],https://github.com/performancecopilot/pcp/pull/1197,https://github.com/mac133k,3,https://github.com/performancecopilot/pcp/pull/1197#issuecomment-762753360,,"@natoscott I was thinking about tokenizing metric names, but your solution is simpler and better. I checked the metrics and it seems like all the values are fetched properly, so good stuff. Thanks.",True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1197,2021-01-18T20:03:38Z,2021-01-19T00:36:19Z,2021-01-21T09:29:51Z,MERGED,True,318,237,9,https://github.com/mac133k,Conditionals were branched out to optimize string matching on fetch.,1,[],https://github.com/performancecopilot/pcp/pull/1197,https://github.com/mac133k,4,https://github.com/performancecopilot/pcp/pull/1197#issuecomment-763959393,,"@natoscott In your code value = strtoull(mval, NULL, 0) is called before the metric name is matched which means that invalid values are passed for conversion from the first 2 lines of a stat file, ie.:
$ head -5 /proc/spl/kstat/zfs/arcstats 
13 1 0x01 116 31552 2235805236238192 3208739869080194
name                            type data
hits                            4    791425
misses                          4    0
demand_data_hits                4    0

However it did not result in any serious error, because ultimately the value remains unassigned if the string from the first column does not match a known metric.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1197,2021-01-18T20:03:38Z,2021-01-19T00:36:19Z,2021-01-21T09:29:51Z,MERGED,True,318,237,9,https://github.com/mac133k,Conditionals were branched out to optimize string matching on fetch.,1,[],https://github.com/performancecopilot/pcp/pull/1197,https://github.com/natoscott,5,https://github.com/performancecopilot/pcp/pull/1197#issuecomment-764208777,,"@mac133k oh, that's a good point!  Do you prefer is we revert to using individual strtoull calls for each field or leave as-is?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1197,2021-01-18T20:03:38Z,2021-01-19T00:36:19Z,2021-01-21T09:29:51Z,MERGED,True,318,237,9,https://github.com/mac133k,Conditionals were branched out to optimize string matching on fetch.,1,[],https://github.com/performancecopilot/pcp/pull/1197,https://github.com/mac133k,6,https://github.com/performancecopilot/pcp/pull/1197#issuecomment-764503528,,"No, I agree that the previous version with strtoull in every line looked ugly, so let's leave it as is for now. I have an idea how to skip the header lines. I will submit a new PR soon.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1198,2021-01-19T04:36:27Z,2021-01-21T06:25:30Z,2021-01-21T06:25:30Z,CLOSED,False,10342,27,55,https://github.com/goodwinos,Pmdasockets,14,[],https://github.com/performancecopilot/pcp/pull/1198,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1198,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1198,2021-01-19T04:36:27Z,2021-01-21T06:25:30Z,2021-01-21T06:25:30Z,CLOSED,False,10342,27,55,https://github.com/goodwinos,Pmdasockets,14,[],https://github.com/performancecopilot/pcp/pull/1198,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1198#issuecomment-762779814,,"I have some more changes for this PR, which I'll commit tomorrow  (wed morning Melb TZ).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1198,2021-01-19T04:36:27Z,2021-01-21T06:25:30Z,2021-01-21T06:25:30Z,CLOSED,False,10342,27,55,https://github.com/goodwinos,Pmdasockets,14,[],https://github.com/performancecopilot/pcp/pull/1198,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/1198#issuecomment-764411593,,Abandoning this PR since it has a lot of packaging and CI related commits that would need to be reverted. I'll cherry-pick what's to be kept.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1201,2021-01-21T01:57:14Z,2021-01-21T04:07:38Z,2021-01-21T04:07:38Z,MERGED,True,7759,1962,91,https://github.com/kmcdonell,QA,29,[],https://github.com/performancecopilot/pcp/pull/1201,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1201,Still carrying a lot of redone commits thanks to --rebase ... sigh.,Still carrying a lot of redone commits thanks to --rebase ... sigh.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1202,2021-01-21T20:57:43Z,2021-01-25T05:52:55Z,2021-01-25T05:52:55Z,MERGED,True,49,11,11,https://github.com/mac133k,Linux zfs skip header lines,2,[],https://github.com/performancecopilot/pcp/pull/1202,https://github.com/mac133k,1,https://github.com/performancecopilot/pcp/pull/1202,This is the follow-up to PR#1197,This is the follow-up to PR#1197,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1202,2021-01-21T20:57:43Z,2021-01-25T05:52:55Z,2021-01-25T05:52:55Z,MERGED,True,49,11,11,https://github.com/mac133k,Linux zfs skip header lines,2,[],https://github.com/performancecopilot/pcp/pull/1202,https://github.com/mac133k,2,https://github.com/performancecopilot/pcp/pull/1202#issuecomment-765305852,This is the follow-up to PR#1197,"@natoscott Yes, you are right.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1204,2021-01-22T06:06:02Z,2021-01-22T06:55:20Z,2021-01-22T06:55:20Z,MERGED,True,10480,27,55,https://github.com/goodwinos,new optional PMDA package pcp-pmda-sockets,19,[],https://github.com/performancecopilot/pcp/pull/1204,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1204,"CI passed in goodwinos/pcp branch pcp-pmda-sockets, apart from a rawhide build error (but that build error is pre-existing).","CI passed in goodwinos/pcp branch pcp-pmda-sockets, apart from a rawhide build error (but that build error is pre-existing).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/portante,1,https://github.com/performancecopilot/pcp/pull/1205,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.","This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/portante,2,https://github.com/performancecopilot/pcp/pull/1205#issuecomment-767043158,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.","The other question that comes up is all the other metrics that are not being reported:

resource usage from rsyslog
action metrics
handling disk-assisted queue metrics",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/christianhorn,3,https://github.com/performancecopilot/pcp/pull/1205#issuecomment-998577728,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.","For some basic rsyslog monitoring, this here works ok for me: https://fluxcoil.net/files/tmp/pmdarsyslog.pl.chorn
Works with the rsyslog.conf customization you use in the portante:fix-rsyslog-pmda tree.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/portante,4,https://github.com/performancecopilot/pcp/pull/1205#issuecomment-1004334778,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.","For some basic rsyslog monitoring, this here works ok for me: https://fluxcoil.net/files/tmp/pmdarsyslog.pl.chorn Works with the rsyslog.conf customization you use in the portante:fix-rsyslog-pmda tree.

@christianhorn, what version of Rsyslog are you using?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/portante,5,https://github.com/performancecopilot/pcp/pull/1205#issuecomment-1004336281,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.","I have updated this a bit to work with my RHEL 7 installed 8.24.0-57.el7_9.1.  It was not matching omelasticsearch.
I am not sure the queues are working yet, or the imuxsock.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/christianhorn,6,https://github.com/performancecopilot/pcp/pull/1205#issuecomment-1004391385,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.",rsyslog 8.2102.0 here.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/portante,7,https://github.com/performancecopilot/pcp/pull/1205#issuecomment-1004413175,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.","I have verified the queues and imuxsock is working ... by hand.
We really need to make this part of a test.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/portante,8,https://github.com/performancecopilot/pcp/pull/1205#issuecomment-1004413446,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.","rsyslog 8.2102.0 here.

What rsyslog stats are you graphing?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/portante,9,https://github.com/performancecopilot/pcp/pull/1205#issuecomment-1004452625,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.","rsyslog 8.2102.0 here.

FWIW, this appears to be the same version that Fedora 34 has.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/christianhorn,10,https://github.com/performancecopilot/pcp/pull/1205#issuecomment-1004739068,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.","rsyslog 8.2102.0 here.
What rsyslog stats are you graphing?


rsyslog.interval
rsyslog.imuxsock.discarded
rsyslog.imuxsock.numratelimiters
rsyslog.imuxsock.submitted
These 4 are in same scales, I have them in one graph in graphana.
rsyslog.queues.nvcsw
rsyslog.queues.oublock
rsyslog.queues.inblock
rsyslog.queues.majflt
rsyslog.queues.maxrss
rsyslog.queues.nivcsw
rsyslog.queues.minflt
rsyslog.queues.openfiles
These are in the second graph, with logarithmic scale one also has an overview and can spot sudden peaks. I basically want to spot sudden spikes in syslog messages, meaning that something needs attention.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/portante,11,https://github.com/performancecopilot/pcp/pull/1205#issuecomment-1005198418,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.","https://fluxcoil.net/files/tmp/pmdarsyslog.pl.chorn

@christianhorn, I have created another PR with your changes added, but instead of replacing the queue stats, I've add resource stats.  See #1510.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/rgerhards,12,https://github.com/performancecopilot/pcp/pull/1205#issuecomment-1007269980,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.","As far as from looking at the rsyslog test data, this looks good to me.  No other opinions or insight. HTH.",True,"{'THUMBS_UP': ['https://github.com/christianhorn', 'https://github.com/portante', 'https://github.com/natoscott']}"
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1205,2021-01-23T01:02:03Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,391,49,3,https://github.com/portante,Fix rsyslog pmda to work with modern output,1,[],https://github.com/performancecopilot/pcp/pull/1205,https://github.com/christianhorn,13,https://github.com/performancecopilot/pcp/pull/1205#issuecomment-1007307455,"This commit only addresses fetching the existing metrics from the more recent impstats output format.
The statistics for omelasticsearch have changed drastically, while 2 additional statistics for queues have been added, discarded.full and discarded.nf.  This commit does NOT attempt to add new PCP metrics for those changes.
The man page for pmdarsyslog(1) has been updated to reference the new ""modern"" rsyslog configuration format, and the qa/455 test has been expanded to cover the supported metrics.","[..] I've add resource stats. See #1510.

Thanks! Works nicely for me.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1206,2021-01-25T17:08:43Z,2021-02-02T14:05:39Z,2021-04-02T19:55:57Z,MERGED,True,0,2,2,https://github.com/andreasgerstmayr,systemd: remove Wants=pmcd from pmlogger and pmie,1,[],https://github.com/performancecopilot/pcp/pull/1206,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1206,"Rationale: pmlogger and pmie should not always start pmcd as a dependency,
because a local pmcd is not required if pmlogger or pmie is connecting to a
remote pmcd.
Resolves #1200","Rationale: pmlogger and pmie should not always start pmcd as a dependency,
because a local pmcd is not required if pmlogger or pmie is connecting to a
remote pmcd.
Resolves #1200",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1206,2021-01-25T17:08:43Z,2021-02-02T14:05:39Z,2021-04-02T19:55:57Z,MERGED,True,0,2,2,https://github.com/andreasgerstmayr,systemd: remove Wants=pmcd from pmlogger and pmie,1,[],https://github.com/performancecopilot/pcp/pull/1206,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1206#issuecomment-771378710,"Rationale: pmlogger and pmie should not always start pmcd as a dependency,
because a local pmcd is not required if pmlogger or pmie is connecting to a
remote pmcd.
Resolves #1200","agree, looks good. If pmlogger config is needed for a local pmlogger, it's an administrative issue to make sure pmlogconf can generate it (which may mean enabling local pmcd).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1207,2021-02-01T16:31:34Z,2021-02-02T14:06:13Z,2021-04-02T19:55:59Z,MERGED,True,6,4,1,https://github.com/andreasgerstmayr,build: add versioned rpm spec dependencies for pcp-zeroconf to pcp.spec.in,1,[],https://github.com/performancecopilot/pcp/pull/1207,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1207,same changes and reason as in 9dc78f0,same changes and reason as in 9dc78f0,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1208,2021-02-01T18:45:58Z,2021-02-08T04:29:52Z,2021-02-08T04:29:53Z,CLOSED,False,4,1,1,https://github.com/praveen-pcp,#1188:fixing pmproxy memory leaks due to client exits like curl,1,[],https://github.com/performancecopilot/pcp/pull/1208,https://github.com/praveen-pcp,1,https://github.com/performancecopilot/pcp/pull/1208,"#1188 - fixing libpcp_web for memory leaks.
There are multiple memory leaks due to struct context not freed. it holds multiple dict and metrics data and does not free up memory.
please see memory report below beofre the fix-
pmproxy_memory_profiing.txt","#1188 - fixing libpcp_web for memory leaks.
There are multiple memory leaks due to struct context not freed. it holds multiple dict and metrics data and does not free up memory.
please see memory report below beofre the fix-
pmproxy_memory_profiing.txt",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1208,2021-02-01T18:45:58Z,2021-02-08T04:29:52Z,2021-02-08T04:29:53Z,CLOSED,False,4,1,1,https://github.com/praveen-pcp,#1188:fixing pmproxy memory leaks due to client exits like curl,1,[],https://github.com/performancecopilot/pcp/pull/1208,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1208#issuecomment-774858057,"#1188 - fixing libpcp_web for memory leaks.
There are multiple memory leaks due to struct context not freed. it holds multiple dict and metrics data and does not free up memory.
please see memory report below beofre the fix-
pmproxy_memory_profiing.txt","Closing this PR since it has been fixed in master branch with a more generic solution, see comments in #1188
thanks",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1209,2021-02-04T19:55:32Z,2021-02-04T23:36:19Z,2021-02-04T23:36:19Z,MERGED,True,1103,872,3,https://github.com/mac133k,Linux zfs help text,2,[],https://github.com/performancecopilot/pcp/pull/1209,https://github.com/mac133k,1,https://github.com/performancecopilot/pcp/pull/1209,Re. #1194,Re. #1194,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1212,2021-02-15T00:19:01Z,2021-02-15T06:26:36Z,2021-02-15T06:26:36Z,MERGED,True,2,2,1,https://github.com/ddiss,build: avoid packaging rundir on [open]SUSE distros,1,[],https://github.com/performancecopilot/pcp/pull/1212,https://github.com/ddiss,1,https://github.com/performancecopilot/pcp/pull/1212,"Like Debian, SUSE based distributions have lint checks to block packages
carrying [/var]/run/ install paths.
Signed-off-by: David Disseldorp ddiss@suse.de","Like Debian, SUSE based distributions have lint checks to block packages
carrying [/var]/run/ install paths.
Signed-off-by: David Disseldorp ddiss@suse.de",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1213,2021-02-16T05:40:19Z,2021-02-16T06:45:16Z,2021-02-18T11:50:06Z,MERGED,True,103,0,5,https://github.com/smalinux,Add SysArchMeter,5,['feature'],https://github.com/performancecopilot/pcp/pull/1213,https://github.com/smalinux,1,https://github.com/performancecopilot/pcp/pull/1213,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1215,2021-02-18T11:04:04Z,2021-07-14T23:17:34Z,2021-07-14T23:17:35Z,CLOSED,False,49,50,26,https://github.com/ddiss,build: install libraries without exec permission,1,[],https://github.com/performancecopilot/pcp/pull/1215,https://github.com/ddiss,1,https://github.com/performancecopilot/pcp/pull/1215,"SUSE based distributions prefer shared objects files to be installed
without execute permission. This is enforced via built-time lint checks.","SUSE based distributions prefer shared objects files to be installed
without execute permission. This is enforced via built-time lint checks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1215,2021-02-18T11:04:04Z,2021-07-14T23:17:34Z,2021-07-14T23:17:35Z,CLOSED,False,49,50,26,https://github.com/ddiss,build: install libraries without exec permission,1,[],https://github.com/performancecopilot/pcp/pull/1215,https://github.com/ddiss,2,https://github.com/performancecopilot/pcp/pull/1215#issuecomment-781264823,"SUSE based distributions prefer shared objects files to be installed
without execute permission. This is enforced via built-time lint checks.",@kkaempf we've been carrying this change of your downstream for some time. I hope you don't mind me submitting it here,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1215,2021-02-18T11:04:04Z,2021-07-14T23:17:34Z,2021-07-14T23:17:35Z,CLOSED,False,49,50,26,https://github.com/ddiss,build: install libraries without exec permission,1,[],https://github.com/performancecopilot/pcp/pull/1215,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1215#issuecomment-782963496,"SUSE based distributions prefer shared objects files to be installed
without execute permission. This is enforced via built-time lint checks.","SUSE based distributions prefer shared objects files to be installed
without execute permission. This is enforced via built-time lint checks.

This seems to fail on Fedora...  ""rpm -Uvh "" gives several pages of...
error: Failed dependencies:
	libpcp.so.3()(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.0)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.10)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.11)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.12)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.13)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.14)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.15)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.16)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.19)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.2)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.20)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.21)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.22)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.24)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.25)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.28)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.3)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.30)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.4)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.5)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.6)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.7)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.9)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_gui.so.2()(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_gui.so.2(PCP_GUI_2.0)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_import.so.1()(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_import.so.1(PCP_IMPORT_1.0)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_import.so.1(PCP_IMPORT_1.2)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_mmv.so.1()(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_mmv.so.1(PCP_MMV_1.0)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_mmv.so.1(PCP_MMV_1.2)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_pmda.so.3()(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.0)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.1)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.10)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.4)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.5)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.6)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.7)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.9)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_trace.so.2()(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_trace.so.2(PCP_TRACE_2.0)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1()(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.10)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.11)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.12)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.13)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.14)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.15)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.2)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.3)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.4)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.5)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.6)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.8)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp_web.so.1(PCP_WEB_1.9)(64bit) is needed by pcp-5.3.0-1.x86_64
	libpcp.so.3()(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.0)(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.14)(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.2)(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.21)(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.22)(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.3)(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.7)(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp_pmda.so.3()(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.0)(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.1)(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.3)(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.7)(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp_pmda.so.3(PCP_PMDA_3.9)(64bit) is needed by pcp-devel-5.3.0-1.x86_64
	libpcp.so.3()(64bit) is needed by pcp-gui-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.0)(64bit) is needed by pcp-gui-5.3.0-1.x86_64
	libpcp.so.3(PCP_3.2)(64bit) is needed by pcp-gui-5.3.0-1.x86_64
	[...]

... and doesn't perform the install as a result.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1215,2021-02-18T11:04:04Z,2021-07-14T23:17:34Z,2021-07-14T23:17:35Z,CLOSED,False,49,50,26,https://github.com/ddiss,build: install libraries without exec permission,1,[],https://github.com/performancecopilot/pcp/pull/1215,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/1215#issuecomment-880271781,"SUSE based distributions prefer shared objects files to be installed
without execute permission. This is enforced via built-time lint checks.","Closing for now, until this can be made to work across distros.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1217,2021-02-20T19:45:37Z,2021-02-22T03:41:26Z,2021-02-22T22:33:15Z,MERGED,True,3,0,1,https://github.com/smalinux,"pcp-htop: fix ZramMeter, Handle missing condition",1,[],https://github.com/performancecopilot/pcp/pull/1217,https://github.com/smalinux,1,https://github.com/performancecopilot/pcp/pull/1217,"If ZramMeter does not exist in the machine for any reason, pcp-htop will
panic. This condition prevents this case.","If ZramMeter does not exist in the machine for any reason, pcp-htop will
panic. This condition prevents this case.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1218,2021-02-20T20:22:50Z,2021-02-22T03:41:26Z,2021-02-22T22:33:17Z,MERGED,True,341,1,11,https://github.com/smalinux,pcp-htop: Add ZFS ARC statistics,1,[],https://github.com/performancecopilot/pcp/pull/1218,https://github.com/smalinux,1,https://github.com/performancecopilot/pcp/pull/1218,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1219,2021-02-21T09:16:32Z,2021-02-22T22:22:34Z,2021-06-21T05:39:58Z,MERGED,True,1,1,1,https://github.com/christianhorn,fix no longer working link,2,[],https://github.com/performancecopilot/pcp/pull/1219,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/1219,"https://prometheus.io/docs/concepts/metric_types/ seems to make most sense.
https://github.com/OpenObservability/OpenMetrics/blob/master/specification/OpenMetrics.md looks like a more upstream definition, but it refers to types which openmetrics seems to not support currently.","https://prometheus.io/docs/concepts/metric_types/ seems to make most sense.
https://github.com/OpenObservability/OpenMetrics/blob/master/specification/OpenMetrics.md looks like a more upstream definition, but it refers to types which openmetrics seems to not support currently.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1219,2021-02-21T09:16:32Z,2021-02-22T22:22:34Z,2021-06-21T05:39:58Z,MERGED,True,1,1,1,https://github.com/christianhorn,fix no longer working link,2,[],https://github.com/performancecopilot/pcp/pull/1219,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1219#issuecomment-783058848,"https://prometheus.io/docs/concepts/metric_types/ seems to make most sense.
https://github.com/OpenObservability/OpenMetrics/blob/master/specification/OpenMetrics.md looks like a more upstream definition, but it refers to types which openmetrics seems to not support currently.","The second link is the ""formal"" specification of the OpenMetrics format (nowadays supported by many more tools than Prometheus alone) ... it is the link we want here.
It is OK that we don't support every type (yet - we will support more over time, as this community standard evolves) - you'll see in the spec the use of words like ""may support"" vs ""must support"" - AFAIK, we do support all the ""must"" clauses, and over time we'll support more and more of the ""may"" ones.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1221,2021-02-25T15:44:19Z,2021-03-24T11:37:47Z,2021-04-02T19:55:47Z,MERGED,True,5,0,1,https://github.com/andreasgerstmayr,pmproxy: explain the stream. options in terms of metric retention,1,[],https://github.com/performancecopilot/pcp/pull/1221,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1221,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1222,2021-03-01T03:56:27Z,2021-03-01T23:55:25Z,2021-06-21T05:40:02Z,MERGED,True,2,2,1,https://github.com/christianhorn,Update pmdaopenmetrics.1,1,[],https://github.com/performancecopilot/pcp/pull/1222,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/1222,"Ensure upper case, otherwise custom types like 'counter' are not properly recognized.","Ensure upper case, otherwise custom types like 'counter' are not properly recognized.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1224,2021-03-03T04:01:09Z,2021-03-25T05:28:34Z,2021-03-25T05:28:35Z,MERGED,True,1,8,2,https://github.com/shogo-matsumoto,zeroconf: remove duplicate metrics from 30-second sampling setting.,1,[],https://github.com/performancecopilot/pcp/pull/1224,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/1224,"There are two intervals (10 sec, 30 sec) to collect kernel.all.cpu.*
metrics if zeroconf is enabled.
In this case, the metrics can be collected twice in a very short period
of time. Due to the short sampling interval, large error values may be
output in rate calculation.
To resolve the issue, remove the metrics from 30-second sampling setting.
At the same time, we'll add kernel.all.cpu.vuser to tools/sar to make
sure we don't lose the metric.
modified: src/pmlogconf/zeroconf/pidstat
modified: src/pmlogconf/tools/sar","There are two intervals (10 sec, 30 sec) to collect kernel.all.cpu.*
metrics if zeroconf is enabled.
In this case, the metrics can be collected twice in a very short period
of time. Due to the short sampling interval, large error values may be
output in rate calculation.
To resolve the issue, remove the metrics from 30-second sampling setting.
At the same time, we'll add kernel.all.cpu.vuser to tools/sar to make
sure we don't lose the metric.
modified: src/pmlogconf/zeroconf/pidstat
modified: src/pmlogconf/tools/sar",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1224,2021-03-03T04:01:09Z,2021-03-25T05:28:34Z,2021-03-25T05:28:35Z,MERGED,True,1,8,2,https://github.com/shogo-matsumoto,zeroconf: remove duplicate metrics from 30-second sampling setting.,1,[],https://github.com/performancecopilot/pcp/pull/1224,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1224#issuecomment-791215627,"There are two intervals (10 sec, 30 sec) to collect kernel.all.cpu.*
metrics if zeroconf is enabled.
In this case, the metrics can be collected twice in a very short period
of time. Due to the short sampling interval, large error values may be
output in rate calculation.
To resolve the issue, remove the metrics from 30-second sampling setting.
At the same time, we'll add kernel.all.cpu.vuser to tools/sar to make
sure we don't lose the metric.
modified: src/pmlogconf/zeroconf/pidstat
modified: src/pmlogconf/tools/sar","Thanks Shogo-san, your changes to avoid duplicate logging are good in general - however we're currently reviewing the zeroconf settings, in particular for per-process and per-thread metrics. I also note there are some kernel.all.cpu.* metrics not included (e.g. guest_nice and vnice). So we'll be discussing this a bit more and merging your changes next week, likely with a few additional changes. It would be good if pmlogger could detect and handle duplicate logging blocks for individual metrics (e.g. by only logging the shortest interval instead of all requested intervals), but that's a complicated change and probably not the right  solution anyway.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1224,2021-03-03T04:01:09Z,2021-03-25T05:28:34Z,2021-03-25T05:28:35Z,MERGED,True,1,8,2,https://github.com/shogo-matsumoto,zeroconf: remove duplicate metrics from 30-second sampling setting.,1,[],https://github.com/performancecopilot/pcp/pull/1224,https://github.com/shogo-matsumoto,3,https://github.com/performancecopilot/pcp/pull/1224#issuecomment-792375917,"There are two intervals (10 sec, 30 sec) to collect kernel.all.cpu.*
metrics if zeroconf is enabled.
In this case, the metrics can be collected twice in a very short period
of time. Due to the short sampling interval, large error values may be
output in rate calculation.
To resolve the issue, remove the metrics from 30-second sampling setting.
At the same time, we'll add kernel.all.cpu.vuser to tools/sar to make
sure we don't lose the metric.
modified: src/pmlogconf/zeroconf/pidstat
modified: src/pmlogconf/tools/sar","So we'll be discussing this a bit more and merging your changes next week, likely with a few additional changes. It would be good if pmlogger could detect and handle duplicate logging blocks for individual metrics (e.g. by only logging the shortest interval instead of all requested intervals), but that's a complicated change and probably not the right solution anyway.

Hi Mark-san, thank you for your review and the comment. My patch is an ad hoc workaround and may not be a perfect solution, so I appreciate your help.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1227,2021-03-12T14:22:55Z,2021-03-16T13:12:25Z,2021-04-02T19:55:48Z,MERGED,True,205,12,10,https://github.com/andreasgerstmayr,docs: first version of scaling guide,2,[],https://github.com/performancecopilot/pcp/pull/1227,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1227,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1227,2021-03-12T14:22:55Z,2021-03-16T13:12:25Z,2021-04-02T19:55:48Z,MERGED,True,205,12,10,https://github.com/andreasgerstmayr,docs: first version of scaling guide,2,[],https://github.com/performancecopilot/pcp/pull/1227,https://github.com/arzoo14,2,https://github.com/performancecopilot/pcp/pull/1227#issuecomment-799940905,,@andreasgerstmayr Looks good. Thanks for the PR!,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1228,2021-03-23T10:42:15Z,2021-03-24T06:31:47Z,2021-04-08T01:44:38Z,MERGED,True,463,12,15,https://github.com/goodwinos,"instrumentation and mmv metrics to pmproxy/libpcp_web, fix more memory leaks, add QA",10,[],https://github.com/performancecopilot/pcp/pull/1228,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1228,"qa/1689 is a new test  (it's rather undernourished so far). For the new metrics, see the help text pminfo -fmdt pmproxy","qa/1689 is a new test  (it's rather undernourished so far). For the new metrics, see the help text pminfo -fmdt pmproxy",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1240,2021-04-07T18:44:08Z,2021-04-08T16:33:39Z,2021-04-29T20:33:21Z,MERGED,True,38,9,2,https://github.com/andreasgerstmayr,pmdabcc: netproc: add command name to instance names,2,[],https://github.com/performancecopilot/pcp/pull/1240,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1240,"Mimics proc PMDA's logic to cut the cmdline.
Resolves #1233","Mimics proc PMDA's logic to cut the cmdline.
Resolves #1233",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1240,2021-04-07T18:44:08Z,2021-04-08T16:33:39Z,2021-04-29T20:33:21Z,MERGED,True,38,9,2,https://github.com/andreasgerstmayr,pmdabcc: netproc: add command name to instance names,2,[],https://github.com/performancecopilot/pcp/pull/1240,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1240#issuecomment-815910356,"Mimics proc PMDA's logic to cut the cmdline.
Resolves #1233",Thanks for the suggestions! I've moved it to the base class now and renamed it accordingly (get_instance_name_for_pid).,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1240,2021-04-07T18:44:08Z,2021-04-08T16:33:39Z,2021-04-29T20:33:21Z,MERGED,True,38,9,2,https://github.com/andreasgerstmayr,pmdabcc: netproc: add command name to instance names,2,[],https://github.com/performancecopilot/pcp/pull/1240,https://github.com/andreasgerstmayr,3,https://github.com/performancecopilot/pcp/pull/1240#issuecomment-815913671,"Mimics proc PMDA's logic to cut the cmdline.
Resolves #1233","I think get_cmdline(pid) could be called directly so would be perhaps a bit cleaner, or what do you think?

Using self.get_cmdline() instad of PCPBCCModule.get_cmdline()? tbh I got confused and thought I need to use the class name for static methods, but looks like in Python I don't need to (it's required in other languages for static methods). I've updated it accordingly.
Or are you referring to something else?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1240,2021-04-07T18:44:08Z,2021-04-08T16:33:39Z,2021-04-29T20:33:21Z,MERGED,True,38,9,2,https://github.com/andreasgerstmayr,pmdabcc: netproc: add command name to instance names,2,[],https://github.com/performancecopilot/pcp/pull/1240,https://github.com/myllynen,4,https://github.com/performancecopilot/pcp/pull/1240#issuecomment-815945907,"Mimics proc PMDA's logic to cut the cmdline.
Resolves #1233","Yes, that's what I meant but I think even plain get_cmdline(pid) would be enough.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1240,2021-04-07T18:44:08Z,2021-04-08T16:33:39Z,2021-04-29T20:33:21Z,MERGED,True,38,9,2,https://github.com/andreasgerstmayr,pmdabcc: netproc: add command name to instance names,2,[],https://github.com/performancecopilot/pcp/pull/1240,https://github.com/andreasgerstmayr,5,https://github.com/performancecopilot/pcp/pull/1240#issuecomment-815969272,"Mimics proc PMDA's logic to cut the cmdline.
Resolves #1233","Yes, that's what I meant but I think even plain get_cmdline(pid) would be enough.

This got me curious:
class Test:
    @staticmethod
    def a():
        print(""a() called"")

    def b(self):
        Test.a()
        self.a()
        a()

t = Test()
t.b()

$ python test.py
a() called
a() called
Traceback (most recent call last):
  File ""/home/agerstmayr/redhat/dev/test.py"", line 12, in <module>
    t.b()
  File ""/home/agerstmayr/redhat/dev/test.py"", line 9, in b
    a()
NameError: name 'a' is not defined

I'll merge the PR now, thanks for the review!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1241,2021-04-09T13:45:14Z,2021-04-09T13:45:29Z,2021-04-29T20:33:20Z,MERGED,True,2,3,3,https://github.com/andreasgerstmayr,Remove unused netproc import,2,[],https://github.com/performancecopilot/pcp/pull/1241,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1241,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1242,2021-04-09T14:44:17Z,2021-04-12T16:05:48Z,2021-04-29T20:33:20Z,MERGED,True,68,45,10,https://github.com/andreasgerstmayr,rename netproc metrics and add pmlogconf rule,3,[],https://github.com/performancecopilot/pcp/pull/1242,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1242,"afaics I've covered all usages of the netproc PMDA and renamed the metric in all places. Can you please double-check?
I've also added a pmlogconf rule to log the metric if it's available (note: the BCC PMDA is not installed by default).","afaics I've covered all usages of the netproc PMDA and renamed the metric in all places. Can you please double-check?
I've also added a pmlogconf rule to log the metric if it's available (note: the BCC PMDA is not installed by default).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1242,2021-04-09T14:44:17Z,2021-04-12T16:05:48Z,2021-04-29T20:33:20Z,MERGED,True,68,45,10,https://github.com/andreasgerstmayr,rename netproc metrics and add pmlogconf rule,3,[],https://github.com/performancecopilot/pcp/pull/1242,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1242#issuecomment-817934153,"afaics I've covered all usages of the netproc PMDA and renamed the metric in all places. Can you please double-check?
I've also added a pmlogconf rule to log the metric if it's available (note: the BCC PMDA is not installed by default).",Thanks for the reviews! I've added a pmlogrewrite conf file now.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1247,2021-04-23T17:22:24Z,2021-04-29T20:33:03Z,2021-05-05T17:41:09Z,CLOSED,False,26045,4382,136,https://github.com/andreasgerstmayr,"Integrate hiredis and hiredis-cluster as dependencies, add Redis MMV metrics",11,[],https://github.com/performancecopilot/pcp/pull/1247,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1247,"integrated hiredis and hiredis-cluster as dependencies
added Redis MMV metrics
do not register callback twice for initial discovery directories

TODO: resolve QA fallout","integrated hiredis and hiredis-cluster as dependencies
added Redis MMV metrics
do not register callback twice for initial discovery directories

TODO: resolve QA fallout",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1249,2021-04-29T16:31:47Z,2021-04-30T12:46:28Z,2021-05-05T17:41:07Z,MERGED,True,2,0,1,https://github.com/andreasgerstmayr,discovery: do not register callback twice for initial directories,1,[],https://github.com/performancecopilot/pcp/pull/1249,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1249,"The initial directories and archive are registered twice:
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger (flags: 0x0011 |new|directory|)
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger/agerstmayr-thinkpad (flags: 0x0011 |new|directory|)
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger/agerstmayr-thinkpad/20210421.14.42.meta (flags: 0x00a1 |new|datavol|metavol|)
fs_change_callBack: event on /var/log/pcp/pmlogger/agerstmayr-thinkpad - changed
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger/agerstmayr-thinkpad/20210421.14.42.meta (flags: 0x00a1 |new|datavol|metavol|)
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger (flags: 0x0011 |new|directory|)
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger/agerstmayr-thinkpad (flags: 0x0011 |new|directory|)
fs_change_callBack: event on /var/log/pcp/pmlogger/agerstmayr-thinkpad - changed
fs_change_callBack: event on /var/log/pcp/pmlogger/agerstmayr-thinkpad - changed
resulting in the fs_change_callBack callback executed twice on every
change to the root pmlogger directory. This commit removes the
PM_DISCOVER_FLAGS_NEW flag upon first registration.","The initial directories and archive are registered twice:
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger (flags: 0x0011 |new|directory|)
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger/agerstmayr-thinkpad (flags: 0x0011 |new|directory|)
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger/agerstmayr-thinkpad/20210421.14.42.meta (flags: 0x00a1 |new|datavol|metavol|)
fs_change_callBack: event on /var/log/pcp/pmlogger/agerstmayr-thinkpad - changed
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger/agerstmayr-thinkpad/20210421.14.42.meta (flags: 0x00a1 |new|datavol|metavol|)
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger (flags: 0x0011 |new|directory|)
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger/agerstmayr-thinkpad (flags: 0x0011 |new|directory|)
fs_change_callBack: event on /var/log/pcp/pmlogger/agerstmayr-thinkpad - changed
fs_change_callBack: event on /var/log/pcp/pmlogger/agerstmayr-thinkpad - changed
resulting in the fs_change_callBack callback executed twice on every
change to the root pmlogger directory. This commit removes the
PM_DISCOVER_FLAGS_NEW flag upon first registration.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1249,2021-04-29T16:31:47Z,2021-04-30T12:46:28Z,2021-05-05T17:41:07Z,MERGED,True,2,0,1,https://github.com/andreasgerstmayr,discovery: do not register callback twice for initial directories,1,[],https://github.com/performancecopilot/pcp/pull/1249,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1249#issuecomment-829727104,"The initial directories and archive are registered twice:
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger (flags: 0x0011 |new|directory|)
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger/agerstmayr-thinkpad (flags: 0x0011 |new|directory|)
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger/agerstmayr-thinkpad/20210421.14.42.meta (flags: 0x00a1 |new|datavol|metavol|)
fs_change_callBack: event on /var/log/pcp/pmlogger/agerstmayr-thinkpad - changed
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger/agerstmayr-thinkpad/20210421.14.42.meta (flags: 0x00a1 |new|datavol|metavol|)
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger (flags: 0x0011 |new|directory|)
pmDiscoverMonitor: added event for /var/log/pcp/pmlogger/agerstmayr-thinkpad (flags: 0x0011 |new|directory|)
fs_change_callBack: event on /var/log/pcp/pmlogger/agerstmayr-thinkpad - changed
fs_change_callBack: event on /var/log/pcp/pmlogger/agerstmayr-thinkpad - changed
resulting in the fs_change_callBack callback executed twice on every
change to the root pmlogger directory. This commit removes the
PM_DISCOVER_FLAGS_NEW flag upon first registration.","Hi Andreas, the changed_callback() traverses looking for new entries: pmDiscoverTraverse(PM_DISCOVER_FLAGS_NEW, created_callback); The NEW flag is then unset in the created_callback. I guess somehow that resulted in multiple callbacks being registered as can be seen in the debug traces. In any case, your patch to explicitly unset the NEW flag after calling pmDiscoverMonitor() looks good because the NEW flag is unset earlier.
Thanks",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1250,2021-04-29T20:41:52Z,2021-05-11T10:11:35Z,2021-07-07T17:12:07Z,MERGED,True,26584,4388,143,https://github.com/andreasgerstmayr,"Integrate hiredis and hiredis-cluster as dependencies, add Redis MMV metrics",8,"['feature', 'build', 'janitor']",https://github.com/performancecopilot/pcp/pull/1250,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1250,"integrated hiredis and hiredis-cluster as dependencies
added Redis MMV metrics
qa/1603 to test Redis cluster mode

Note: there may be more info/warning messages in the pmproxy log than before, because due to a mismatch in the return code checking most of the Redis reply sanity checks used to be ignored (checkStatusReplyXX in schema.c etc.)","integrated hiredis and hiredis-cluster as dependencies
added Redis MMV metrics
qa/1603 to test Redis cluster mode

Note: there may be more info/warning messages in the pmproxy log than before, because due to a mismatch in the return code checking most of the Redis reply sanity checks used to be ignored (checkStatusReplyXX in schema.c etc.)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1250,2021-04-29T20:41:52Z,2021-05-11T10:11:35Z,2021-07-07T17:12:07Z,MERGED,True,26584,4388,143,https://github.com/andreasgerstmayr,"Integrate hiredis and hiredis-cluster as dependencies, add Redis MMV metrics",8,"['feature', 'build', 'janitor']",https://github.com/performancecopilot/pcp/pull/1250,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1250#issuecomment-831513594,"integrated hiredis and hiredis-cluster as dependencies
added Redis MMV metrics
qa/1603 to test Redis cluster mode

Note: there may be more info/warning messages in the pmproxy log than before, because due to a mismatch in the return code checking most of the Redis reply sanity checks used to be ignored (checkStatusReplyXX in schema.c etc.)","rebased, added more diagnostics + qa updates",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1250,2021-04-29T20:41:52Z,2021-05-11T10:11:35Z,2021-07-07T17:12:07Z,MERGED,True,26584,4388,143,https://github.com/andreasgerstmayr,"Integrate hiredis and hiredis-cluster as dependencies, add Redis MMV metrics",8,"['feature', 'build', 'janitor']",https://github.com/performancecopilot/pcp/pull/1250,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/1250#issuecomment-831678331,"integrated hiredis and hiredis-cluster as dependencies
added Redis MMV metrics
qa/1603 to test Redis cluster mode

Note: there may be more info/warning messages in the pmproxy log than before, because due to a mismatch in the return code checking most of the Redis reply sanity checks used to be ignored (checkStatusReplyXX in schema.c etc.)","Hi Andreas, with the new vendor directory, we now have three versions of dict.[ch]. Which one should/will be used in libpcp_web? The src/external version is copyright 2012 whereas the hiredis and hiredis-cluster versions seem to be older and different (all three are different).
Should the new vendor directory live below (say) src/external instead of in the top level?
Recent Fedora has hiredis-0.13.3-14.fc33.x86_64 .. should this be used on platforms where it is available in preference to the vendored version? Note Fedora doesn't seem to have the hiredis-cluster package. Neither seems to be available on RHEL.
qa/1603 enables the cluster option with redis-server ... --cluster-enabled yes. I'm confused about which parts of the existing redis package and the new vendored hiredis package will be used to enable and use cluster mode.
I guess I'll have a bunch more questions once I've built a test cluster .. e.g. how well does the existing redisSlots stuff work with the commonly called redisSlotsRequest() function, e.g. all throughout query.c and schema.c?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1250,2021-04-29T20:41:52Z,2021-05-11T10:11:35Z,2021-07-07T17:12:07Z,MERGED,True,26584,4388,143,https://github.com/andreasgerstmayr,"Integrate hiredis and hiredis-cluster as dependencies, add Redis MMV metrics",8,"['feature', 'build', 'janitor']",https://github.com/performancecopilot/pcp/pull/1250,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/1250#issuecomment-831838945,"integrated hiredis and hiredis-cluster as dependencies
added Redis MMV metrics
qa/1603 to test Redis cluster mode

Note: there may be more info/warning messages in the pmproxy log than before, because due to a mismatch in the return code checking most of the Redis reply sanity checks used to be ignored (checkStatusReplyXX in schema.c etc.)","Hi Andreas, with the new vendor directory, we now have three versions of dict.[ch]. Which one should/will be used in libpcp_web? The src/external version is copyright 2012 whereas the hiredis and hiredis-cluster versions seem to be older and different (all three are different).

Yep, that was a big trouble initially - I wanted to accommodate both library versions, but C doesn't support namespaces. I resolved this now by symlinking the files we want (i.e. except dict/sds) into src/libpcp_web/src/deps/, so we only have a single dict and sds version in use - the one from src/external. It's the same approach we're using for $(XFILES), the only difference is that it preserves the folder structure.

Should the new vendor directory live below (say) src/external instead of in the top level?

I like the vendor/website/namespace/project directory structure - it shows where the code is coming from, that we're vendoring this project, i.e. it's external, and it is not source code created/maintained by PCP. Coincidentally it's the same directory structure Go uses for vendoring ;)

Recent Fedora has hiredis-0.13.3-14.fc33.x86_64 .. should this be used on platforms where it is available in preference to the vendored version? Note Fedora doesn't seem to have the hiredis-cluster package. Neither seems to be available on RHEL.

We cannot use it because of the dict/sds mismatch. It's slightly binary incompatible in various ways, and crashes silently. imho it will work properly only if we don't use dict/sds (or use the dict/sds version of hiredis instead of our newer version).

qa/1603 enables the cluster option with redis-server ... --cluster-enabled yes. I'm confused about which parts of the existing redis package and the new vendored hiredis package will be used to enable and use cluster mode.

Cluster support is part of Redis, the redis-cli --cluster-enabled yes has nothing to do with hiredis-cluster. hiredis-cluster is a client to make use of the Redis cluster functionality, it does not enable cluster mode, cluster mode needs to be enabled in the Redis database directly (it's a feature of Redis). You can create a Redis cluster with redis-cli --cluster-enabled yes and use any client library (which has cluster support) with it.

I guess I'll have a bunch more questions once I've built a test cluster .. e.g. how well does the existing redisSlots stuff work with the commonly called redisSlotsRequest() function, e.g. all throughout query.c and schema.c?

It's a good thing that redisSlotsRequest() is used to wrap all Redis requests - that's where I handle the new MMV metrics now :). After increasing the metrics, it calls hiredis-cluster. So all the redisSlots stuff is still there, but it's using hiredis-cluster in the backend.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1250,2021-04-29T20:41:52Z,2021-05-11T10:11:35Z,2021-07-07T17:12:07Z,MERGED,True,26584,4388,143,https://github.com/andreasgerstmayr,"Integrate hiredis and hiredis-cluster as dependencies, add Redis MMV metrics",8,"['feature', 'build', 'janitor']",https://github.com/performancecopilot/pcp/pull/1250,https://github.com/andreasgerstmayr,5,https://github.com/performancecopilot/pcp/pull/1250#issuecomment-834628661,"integrated hiredis and hiredis-cluster as dependencies
added Redis MMV metrics
qa/1603 to test Redis cluster mode

Note: there may be more info/warning messages in the pmproxy log than before, because due to a mismatch in the return code checking most of the Redis reply sanity checks used to be ignored (checkStatusReplyXX in schema.c etc.)","rebased on latest main branch to resolve a merge conflict, and squashed a few intermediate commits",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1251,2021-04-30T22:38:31Z,2021-05-01T11:10:01Z,2021-05-01T11:12:31Z,MERGED,True,1,1,1,https://github.com/smalinux,Fix a typo mistake in pmregisterderived(3),1,[],https://github.com/performancecopilot/pcp/pull/1251,https://github.com/smalinux,1,https://github.com/performancecopilot/pcp/pull/1251,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1251,2021-04-30T22:38:31Z,2021-05-01T11:10:01Z,2021-05-01T11:12:31Z,MERGED,True,1,1,1,https://github.com/smalinux,Fix a typo mistake in pmregisterderived(3),1,[],https://github.com/performancecopilot/pcp/pull/1251,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1251#issuecomment-830614866,,Thanks @smalinux,True,{'THUMBS_UP': ['https://github.com/smalinux']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1284,2021-05-13T07:12:18Z,2021-05-13T22:20:22Z,2021-05-13T22:20:22Z,MERGED,True,943,1038,31,https://github.com/natoscott,pmdapodman: switch from libvarlink to the podman REST API,1,[],https://github.com/performancecopilot/pcp/pull/1284,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1284,"Recent versions of podman have retired the use of libvarlink,
preferring end users access that functionality via a REST API
nowadays.  This change converts PCP to using these REST calls
and removes all references to libvarlink (QA, build, specfile
and so on).  There's some minor selinux impact too.
Additionally, I've implemented exporting of podman labels via
PCP metric labels now also.  Additionally, the agent supports
access to both root and rootless container metrics now.  I'll
tackle pmdaroot support for this too (container.* metrics) as
a follow-up commit.
There's one caveat to all this at present: accessing pods via
the REST API causes podman to hang - I'm working with podman
developers to diagnose and fix that - Red Hat BZ #1958732.
Resolves Red Hat bug #1956608
Resolves #657
Related to #913","Recent versions of podman have retired the use of libvarlink,
preferring end users access that functionality via a REST API
nowadays.  This change converts PCP to using these REST calls
and removes all references to libvarlink (QA, build, specfile
and so on).  There's some minor selinux impact too.
Additionally, I've implemented exporting of podman labels via
PCP metric labels now also.  Additionally, the agent supports
access to both root and rootless container metrics now.  I'll
tackle pmdaroot support for this too (container.* metrics) as
a follow-up commit.
There's one caveat to all this at present: accessing pods via
the REST API causes podman to hang - I'm working with podman
developers to diagnose and fix that - Red Hat BZ #1958732.
Resolves Red Hat bug #1956608
Resolves #657
Related to #913",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1285,2021-05-14T03:09:48Z,2021-05-14T04:34:37Z,2021-05-14T04:34:49Z,MERGED,True,138,173,9,https://github.com/natoscott,pmchart bug fix updates,2,[],https://github.com/performancecopilot/pcp/pull/1285,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1285,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1286,2021-05-14T03:57:54Z,2021-05-14T05:01:09Z,2021-05-14T05:01:09Z,MERGED,True,145,79,5,https://github.com/goodwinos,pmproxy/libpcp_web: throttle discovery callbacks to improve scalability and other improvements,2,[],https://github.com/performancecopilot/pcp/pull/1286,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1286,see 7aed88c and fc24639 for issue #1283,see 7aed88c and fc24639 for issue #1283,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1287,2021-05-14T14:44:42Z,2021-05-17T12:12:57Z,2021-07-07T17:12:13Z,MERGED,True,33,0,1,https://github.com/andreasgerstmayr,docs: add note about vendoring in CONTRIBUTING.md,1,[],https://github.com/performancecopilot/pcp/pull/1287,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1287,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1289,2021-05-17T02:40:31Z,2021-05-19T00:47:35Z,2021-05-19T00:47:35Z,MERGED,True,6580,31,5,https://github.com/natoscott,docs: add sizing recommendations table to the Scaling doc,4,[],https://github.com/performancecopilot/pcp/pull/1289,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1289,"Adds a table with recommended deployment architectures based on
the numbers of hosts being monitored.  Clarifies the individual
architecture sections, particularly around 'fully distributed'.","Adds a table with recommended deployment architectures based on
the numbers of hosts being monitored.  Clarifies the individual
architecture sections, particularly around 'fully distributed'.",True,{'THUMBS_UP': ['https://github.com/andreasgerstmayr']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1289,2021-05-17T02:40:31Z,2021-05-19T00:47:35Z,2021-05-19T00:47:35Z,MERGED,True,6580,31,5,https://github.com/natoscott,docs: add sizing recommendations table to the Scaling doc,4,[],https://github.com/performancecopilot/pcp/pull/1289,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1289#issuecomment-842520194,"Adds a table with recommended deployment architectures based on
the numbers of hosts being monitored.  Clarifies the individual
architecture sections, particularly around 'fully distributed'.","+1 on the architecture renamings and updates.
in the pmlogger-farm.svg image the Redis cluster text is not centered anymore, and I can't see any changes except that. Was that intended?
Speaking about the Redis cluster cloud icon, iirc there was a discussion about changing it to just Redis - I'm fine with that, PCP handles clustered & standalone Redis transparently.
Regarding the table: the logging interval is an important factor. For example, logging 100 pmcds once every 10 seconds or once every 60 seconds makes a difference (the first one is unstable on a pmlogger farm, the latter option with 60s interval works fine). Not sure how to get this information into the table - maybe a new column with ""metric throughput""? For example 120 pmcds logging every 60 seconds gives us the same amount of metric value updates (and processed Redis commands/second and required storage) as 20 pmcds logging every 10 seconds. Maybe we need a diagram to illustrate that (?)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1289,2021-05-17T02:40:31Z,2021-05-19T00:47:35Z,2021-05-19T00:47:35Z,MERGED,True,6580,31,5,https://github.com/natoscott,docs: add sizing recommendations table to the Scaling doc,4,[],https://github.com/performancecopilot/pcp/pull/1289,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1289#issuecomment-842807650,"Adds a table with recommended deployment architectures based on
the numbers of hosts being monitored.  Clarifies the individual
architecture sections, particularly around 'fully distributed'.","+1 on the architecture renamings and updates.
in the pmlogger-farm.svg image the Redis cluster text is not centered anymore, and I can't see any changes except that. Was that intended?

Hmm, I'm confused - pmlogger-farm.svg no longer contains the text 'Redis cluster' anywhere and the new text ('Redis Instance') is centered for me.  Tried using inkscape and eog to view just now to check and both look good.

Regarding the table: the logging interval is an important factor.

Yep - one of several important factors.  The number of metrics has a similar impact, as does the choice of metrics (large vs small indoms), as do the physical attributes of the actual machine(s) being logged.  I think these factors are beyond the scope of the initial table though, which is just trying to give an initial back-of-the-envelope kind of recommendation and not be all-encompassing.  The rest of the document covers those finer details well I think.

Not sure how to get this information into the table

I don't think it belongs in the new table.


maybe a new column with ""metric throughput""? For example 120 pmcds logging every 60 seconds gives us the same amount of metric value updates (and processed Redis commands/second and required storage) as 20 pmcds logging every 10 seconds.


Usually.  :)  Not all hosts are the same, so in certain situations even this column would provide incorrect information.

Maybe we need a diagram to illustrate that (?)

Yeah, good idea - I think there's plenty of scope for more detailed explanations like this.  My intent with this change is to provide initial high level guidance though, so I'm reluctant to add anything else to the initial table due to the risk of causing confusion, or that might cause the primary message to get lost there.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1289,2021-05-17T02:40:31Z,2021-05-19T00:47:35Z,2021-05-19T00:47:35Z,MERGED,True,6580,31,5,https://github.com/natoscott,docs: add sizing recommendations table to the Scaling doc,4,[],https://github.com/performancecopilot/pcp/pull/1289,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/1289#issuecomment-843065015,"Adds a table with recommended deployment architectures based on
the numbers of hosts being monitored.  Clarifies the individual
architecture sections, particularly around 'fully distributed'.","+1 on the architecture renamings and updates.
in the pmlogger-farm.svg image the Redis cluster text is not centered anymore, and I can't see any changes except that. Was that intended?

Hmm, I'm confused - pmlogger-farm.svg no longer contains the text 'Redis cluster' anywhere and the new text ('Redis Instance') is centered for me. Tried using inkscape and eog to view just now to check and both look good.

Me too ;) - what does https://github.com/performancecopilot/pcp/blob/aace082815e57c248842735263eee7e02d73246a/docs/HowTos/scaling/pmlogger-farm.svg (click on the document icon, next to the ""Raw"" button) show? I tried multiple browsers, and can only see the same image except the Redis Cluster text isn't centered anymore.


Regarding the table: the logging interval is an important factor.

Yep - one of several important factors. The number of metrics has a similar impact, as does the choice of metrics (large vs small indoms), as do the physical attributes of the actual machine(s) being logged. I think these factors are beyond the scope of the initial table though, which is just trying to give an initial back-of-the-envelope kind of recommendation and not be all-encompassing. The rest of the document covers those finer details well I think.

Hm yeah, that's also there ... my point was ppl shouldn't get the impression that a single pmlogger farm with 100 pmcds and a logging interval of 10 seconds works fine.


Not sure how to get this information into the table

I don't think it belongs in the new table.


maybe a new column with ""metric throughput""? For example 120 pmcds logging every 60 seconds gives us the same amount of metric value updates (and processed Redis commands/second and required storage) as 20 pmcds logging every 10 seconds.


Usually. :) Not all hosts are the same, so in certain situations even this column would provide incorrect information.

Maybe we need a diagram to illustrate that (?)

Yeah, good idea - I think there's plenty of scope for more detailed explanations like this. My intent with this change is to provide initial high level guidance though, so I'm reluctant to add anything else to the initial table due to the risk of causing confusion, or that might cause the primary message to get lost there.

+1
Let's merge it and refine as needed, wdyt @goodwinos?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1289,2021-05-17T02:40:31Z,2021-05-19T00:47:35Z,2021-05-19T00:47:35Z,MERGED,True,6580,31,5,https://github.com/natoscott,docs: add sizing recommendations table to the Scaling doc,4,[],https://github.com/performancecopilot/pcp/pull/1289,https://github.com/goodwinos,5,https://github.com/performancecopilot/pcp/pull/1289#issuecomment-843079372,"Adds a table with recommended deployment architectures based on
the numbers of hosts being monitored.  Clarifies the individual
architecture sections, particularly around 'fully distributed'.","...


Yeah, good idea - I think there's plenty of scope for more detailed explanations like this. My intent with this change is to provide initial high level guidance though, so I'm reluctant to add anything else to the initial table due to the risk of causing confusion, or that might cause the primary message to get lost there.

+1
Let's merge it and refine as needed, wdyt @goodwinos?

yep +1.
We need to run new benchmarks too (after many recent code changes for pcp-5.3.1, e.g. hiredis/cluster, discovery callback throttle and various bug fixes) but I think we can mostly expand on all of that in a v2 of the doc.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1289,2021-05-17T02:40:31Z,2021-05-19T00:47:35Z,2021-05-19T00:47:35Z,MERGED,True,6580,31,5,https://github.com/natoscott,docs: add sizing recommendations table to the Scaling doc,4,[],https://github.com/performancecopilot/pcp/pull/1289,https://github.com/goodwinos,6,https://github.com/performancecopilot/pcp/pull/1289#issuecomment-843082146,"Adds a table with recommended deployment architectures based on
the numbers of hosts being monitored.  Clarifies the individual
architecture sections, particularly around 'fully distributed'.","Oh and also - regarding Marko's comments - when we do re-run, use more representative pmcd hosts, e.g. smaller CPU and interrupt indoms, the effect of proc data, etc.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1289,2021-05-17T02:40:31Z,2021-05-19T00:47:35Z,2021-05-19T00:47:35Z,MERGED,True,6580,31,5,https://github.com/natoscott,docs: add sizing recommendations table to the Scaling doc,4,[],https://github.com/performancecopilot/pcp/pull/1289,https://github.com/andreasgerstmayr,7,https://github.com/performancecopilot/pcp/pull/1289#issuecomment-843102957,"Adds a table with recommended deployment architectures based on
the numbers of hosts being monitored.  Clarifies the individual
architecture sections, particularly around 'fully distributed'.","Fun fact, https://raw.githubusercontent.com/performancecopilot/pcp/aace082815e57c248842735263eee7e02d73246a/docs/HowTos/scaling/pmlogger-farm.svg shows me the old version, but if I save this file to my disk and open it with the Gnome Image App it shows me a different picture (the one with ""Redis Instance"").",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1289,2021-05-17T02:40:31Z,2021-05-19T00:47:35Z,2021-05-19T00:47:35Z,MERGED,True,6580,31,5,https://github.com/natoscott,docs: add sizing recommendations table to the Scaling doc,4,[],https://github.com/performancecopilot/pcp/pull/1289,https://github.com/natoscott,8,https://github.com/performancecopilot/pcp/pull/1289#issuecomment-843659152,"Adds a table with recommended deployment architectures based on
the numbers of hosts being monitored.  Clarifies the individual
architecture sections, particularly around 'fully distributed'.","Fun fact, https://raw.githubusercontent.com/performancecopilot/pcp/aace082815e57c248842735263eee7e02d73246a/docs/HowTos/scaling/pmlogger-farm.svg shows me the old version, but if I save this file to my disk and open it with the Gnome Image App it shows me a different picture (the one with ""Redis Instance"").

Looking into the svg file contents, I can indeed see both copies of the text - there's an XML entity named 'foreignObject' containing the Cluster text, followed immediately by a 'text' element containing the newer Instance text.  I'll edit the file directly I guess, let's see if that solves it.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1293,2021-05-19T02:42:00Z,2021-05-25T22:44:49Z,2021-05-25T22:46:03Z,MERGED,True,29,3,2,https://github.com/goodwinos,pmieutil: do not discard pmie stderr when starting pmie service,4,[],https://github.com/performancecopilot/pcp/pull/1293,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1293,"Retain and check pmie stderr messages for analysis when the
service fails to start. Previously stderr was sent to /dev/null,
which made it very difficult to debug (with users resorting to
strace, ltrace and even stap scripts). Any unexpected service
start failure messages now appear in $PCP_LOG_DIR/pmie/pmie_check.log.
Have checked QA for the pmie, pmieutil and pmiectl groups.
Resolves: Red Hat BZ#1954576 - Increase robustness of pmie startup script","Retain and check pmie stderr messages for analysis when the
service fails to start. Previously stderr was sent to /dev/null,
which made it very difficult to debug (with users resorting to
strace, ltrace and even stap scripts). Any unexpected service
start failure messages now appear in $PCP_LOG_DIR/pmie/pmie_check.log.
Have checked QA for the pmie, pmieutil and pmiectl groups.
Resolves: Red Hat BZ#1954576 - Increase robustness of pmie startup script",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1294,2021-05-19T08:08:33Z,2021-05-20T05:02:58Z,2021-05-20T05:03:21Z,MERGED,True,5,5,1,https://github.com/natoscott,libpcp: trivial refactoring to solve a gcc warning,1,[],https://github.com/performancecopilot/pcp/pull/1294,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1294,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1295,2021-05-19T08:15:08Z,2021-05-20T05:02:58Z,2021-05-20T05:03:19Z,MERGED,True,24,9,4,https://github.com/natoscott,build: fix debian builds with missing openpyxl packages,1,[],https://github.com/performancecopilot/pcp/pull/1295,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1295,Resolves #1288,Resolves #1288,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1297,2021-05-20T07:14:44Z,2021-05-25T13:03:03Z,2021-05-25T13:32:28Z,MERGED,True,6,13,1,https://github.com/martinpitt,Some fixes to the guide,3,[],https://github.com/performancecopilot/pcp/pull/1297,https://github.com/martinpitt,1,https://github.com/performancecopilot/pcp/pull/1297,See individual commits for details.,See individual commits for details.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1298,2021-05-21T05:28:00Z,2021-05-21T07:12:28Z,2021-05-21T07:12:34Z,MERGED,True,78,0,1,https://github.com/shogo-matsumoto,pmrep: add RHEL8 compatible sar metricsets to default pmrep conf directory,1,[],https://github.com/performancecopilot/pcp/pull/1298,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/1298,"The output format of some metricsets has been changed to
follow the changes in sysstat v12. Leave the old sar-v11 output
format as well for RHEL8 users.","The output format of some metricsets has been changed to
follow the changes in sysstat v12. Leave the old sar-v11 output
format as well for RHEL8 users.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1298,2021-05-21T05:28:00Z,2021-05-21T07:12:28Z,2021-05-21T07:12:34Z,MERGED,True,78,0,1,https://github.com/shogo-matsumoto,pmrep: add RHEL8 compatible sar metricsets to default pmrep conf directory,1,[],https://github.com/performancecopilot/pcp/pull/1298,https://github.com/myllynen,2,https://github.com/performancecopilot/pcp/pull/1298#issuecomment-845717167,"The output format of some metricsets has been changed to
follow the changes in sysstat v12. Leave the old sar-v11 output
format as well for RHEL8 users.","LGTM, thanks a lot!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1301,2021-05-25T23:45:02Z,2021-05-26T11:40:20Z,2021-05-26T11:40:20Z,MERGED,True,12,2,1,https://github.com/goodwinos,redisSlotsRequest ENOMEM handling,4,"['bug', 'pmproxy', '/series/query expr']",https://github.com/performancecopilot/pcp/pull/1301,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1301,"In redisSlotsRequest(), if redisSlotsReplyDataAlloc() fails and returns NULL the async redis request still goes ahead but with a NULL private data pointer passed down the call stack ... leading to badness (much later on) when the reply data is eventually dereferenced.
This PR instead returns ENOMEM to the caller for that case. Unfortunately however, none of the redisSlotsRequest() callers seem to check the return value .. there are over 50 of them and adding error handling for all of them would be a lot of work (exiting in the library call isn't an option).","In redisSlotsRequest(), if redisSlotsReplyDataAlloc() fails and returns NULL the async redis request still goes ahead but with a NULL private data pointer passed down the call stack ... leading to badness (much later on) when the reply data is eventually dereferenced.
This PR instead returns ENOMEM to the caller for that case. Unfortunately however, none of the redisSlotsRequest() callers seem to check the return value .. there are over 50 of them and adding error handling for all of them would be a lot of work (exiting in the library call isn't an option).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1301,2021-05-25T23:45:02Z,2021-05-26T11:40:20Z,2021-05-26T11:40:20Z,MERGED,True,12,2,1,https://github.com/goodwinos,redisSlotsRequest ENOMEM handling,4,"['bug', 'pmproxy', '/series/query expr']",https://github.com/performancecopilot/pcp/pull/1301,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1301#issuecomment-848698019,"In redisSlotsRequest(), if redisSlotsReplyDataAlloc() fails and returns NULL the async redis request still goes ahead but with a NULL private data pointer passed down the call stack ... leading to badness (much later on) when the reply data is eventually dereferenced.
This PR instead returns ENOMEM to the caller for that case. Unfortunately however, none of the redisSlotsRequest() callers seem to check the return value .. there are over 50 of them and adding error handling for all of them would be a lot of work (exiting in the library call isn't an option).","lgtm, thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1302,2021-05-26T07:53:37Z,2021-05-30T00:56:08Z,2021-05-30T00:56:08Z,MERGED,True,2552,1091,43,https://github.com/natoscott,"libpcp, pmcd: support for HIGHRES fetch and result PDUs",1,[],https://github.com/performancecopilot/pcp/pull/1302,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1302,"As an initial step toward becoming Y2038 safe this commit adds
support for sampling with timestamps using the 2x 64bit struct
pmTimespec, as well as new pmHighResFetch interfaces.
pmcd now advertises support for high resolution timestamps to
all clients that connect.  Down-rev clients and libpcp ignore
this bit.  New versions of PCP will detect it and switch over
to requesting highres (aka Y2038 safe) timestamps with every
fetch request.
Some fairly substantial code refactoring in several places has
aimed toward reducing the new code introduced.  In particular,
some places that dealt with pmResult structures have been made
to support an inner function (sorta) that deals with valuesets
so that this can shared between timeval and timespec variants.
The purge of struct pmTimeval (not-Y2038-safe) has begun!","As an initial step toward becoming Y2038 safe this commit adds
support for sampling with timestamps using the 2x 64bit struct
pmTimespec, as well as new pmHighResFetch interfaces.
pmcd now advertises support for high resolution timestamps to
all clients that connect.  Down-rev clients and libpcp ignore
this bit.  New versions of PCP will detect it and switch over
to requesting highres (aka Y2038 safe) timestamps with every
fetch request.
Some fairly substantial code refactoring in several places has
aimed toward reducing the new code introduced.  In particular,
some places that dealt with pmResult structures have been made
to support an inner function (sorta) that deals with valuesets
so that this can shared between timeval and timespec variants.
The purge of struct pmTimeval (not-Y2038-safe) has begun!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1303,2021-05-26T13:25:46Z,2021-05-27T11:43:01Z,2021-07-07T17:12:19Z,MERGED,True,49,14,8,https://github.com/andreasgerstmayr,selinux: add capability2 { bpf },1,[],https://github.com/performancecopilot/pcp/pull/1303,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1303,"Resolves https://bugzilla.redhat.com/show_bug.cgi?id=1952374
I've tested it with RHEL 7 (no BCC PMDA per default), RHEL 8 and  RHEL 9.
@natoscott Your earlier patch had special handling to check if the capabilities2 class exists, is that required? At first I thought it may be a problem to have
class capability2 { syslog };
class capability2 { bpf };

in the policy file (duplicate declaration of the capability2 class), but it doesn't seem to be a problem.","Resolves https://bugzilla.redhat.com/show_bug.cgi?id=1952374
I've tested it with RHEL 7 (no BCC PMDA per default), RHEL 8 and  RHEL 9.
@natoscott Your earlier patch had special handling to check if the capabilities2 class exists, is that required? At first I thought it may be a problem to have
class capability2 { syslog };
class capability2 { bpf };

in the policy file (duplicate declaration of the capability2 class), but it doesn't seem to be a problem.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1303,2021-05-26T13:25:46Z,2021-05-27T11:43:01Z,2021-07-07T17:12:19Z,MERGED,True,49,14,8,https://github.com/andreasgerstmayr,selinux: add capability2 { bpf },1,[],https://github.com/performancecopilot/pcp/pull/1303,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1303#issuecomment-849136176,"Resolves https://bugzilla.redhat.com/show_bug.cgi?id=1952374
I've tested it with RHEL 7 (no BCC PMDA per default), RHEL 8 and  RHEL 9.
@natoscott Your earlier patch had special handling to check if the capabilities2 class exists, is that required? At first I thought it may be a problem to have
class capability2 { syslog };
class capability2 { bpf };

in the policy file (duplicate declaration of the capability2 class), but it doesn't seem to be a problem.","@andreasgerstmayr we do need the conditional code ... the class may not be defined or the permissions may not be defined for that class on some platforms.  We can really only use explicit classes, types and permissions if we think they are universally available.  For example permissions ""syslog"" (not to mention ""bpf"") are not defined for the ""capability2"" class on RHEL 6.
And as best I understand it, the following are all equivalent:
class capability2 { syslog };
class capability2 { bpf };

class capability2 syslog;
class capability2 bpf ;

class capability2 { syslog bpf };",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1303,2021-05-26T13:25:46Z,2021-05-27T11:43:01Z,2021-07-07T17:12:19Z,MERGED,True,49,14,8,https://github.com/andreasgerstmayr,selinux: add capability2 { bpf },1,[],https://github.com/performancecopilot/pcp/pull/1303,https://github.com/andreasgerstmayr,3,https://github.com/performancecopilot/pcp/pull/1303#issuecomment-849153134,"Resolves https://bugzilla.redhat.com/show_bug.cgi?id=1952374
I've tested it with RHEL 7 (no BCC PMDA per default), RHEL 8 and  RHEL 9.
@natoscott Your earlier patch had special handling to check if the capabilities2 class exists, is that required? At first I thought it may be a problem to have
class capability2 { syslog };
class capability2 { bpf };

in the policy file (duplicate declaration of the capability2 class), but it doesn't seem to be a problem.","@kmcdonell: Sorry, I should have been more specific - I was referring to this part of Nathan's earlier patch:
+    seinfo -x --class=capability2 $seinfo_common_flag 2>/dev/null \
+    | grep '^[[ 	]][[ 	]]*(class |)capability2$' >/dev/null \
+    && pcp_selinux_capability2_class=true

i.e. testing for the capability2 class itself, not testing for a specific element (bpf/syslog) of it. I was wondering if that's required, or if it's fine if we just check capability2 class + bpf element in one go (like we did with the syslog element of the capability2 class).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1303,2021-05-26T13:25:46Z,2021-05-27T11:43:01Z,2021-07-07T17:12:19Z,MERGED,True,49,14,8,https://github.com/andreasgerstmayr,selinux: add capability2 { bpf },1,[],https://github.com/performancecopilot/pcp/pull/1303,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/1303#issuecomment-849168146,"Resolves https://bugzilla.redhat.com/show_bug.cgi?id=1952374
I've tested it with RHEL 7 (no BCC PMDA per default), RHEL 8 and  RHEL 9.
@natoscott Your earlier patch had special handling to check if the capabilities2 class exists, is that required? At first I thought it may be a problem to have
class capability2 { syslog };
class capability2 { bpf };

in the policy file (duplicate declaration of the capability2 class), but it doesn't seem to be a problem.","@kmcdonell: Sorry, I should have been more specific - I was referring to this part of Nathan's earlier patch:
+    seinfo -x --class=capability2 $seinfo_common_flag 2>/dev/null \
+    | grep '^[[ 	]][[ 	]]*(class |)capability2$' >/dev/null \
+    && pcp_selinux_capability2_class=true

i.e. testing for the capability2 class itself, not testing for a specific element (bpf/syslog) of it. I was wondering if that's required, or if it's fine if we just check capability2 class + bpf element in one go (like we did with the syslog element of the capability2 class).

AFAIK it's not required - just seemed like it might be the kinda thing missing on some platforms.  :P  ... but if its available everywhere there's no need for it.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1303,2021-05-26T13:25:46Z,2021-05-27T11:43:01Z,2021-07-07T17:12:19Z,MERGED,True,49,14,8,https://github.com/andreasgerstmayr,selinux: add capability2 { bpf },1,[],https://github.com/performancecopilot/pcp/pull/1303,https://github.com/kmcdonell,5,https://github.com/performancecopilot/pcp/pull/1303#issuecomment-849169113,"Resolves https://bugzilla.redhat.com/show_bug.cgi?id=1952374
I've tested it with RHEL 7 (no BCC PMDA per default), RHEL 8 and  RHEL 9.
@natoscott Your earlier patch had special handling to check if the capabilities2 class exists, is that required? At first I thought it may be a problem to have
class capability2 { syslog };
class capability2 { bpf };

in the policy file (duplicate declaration of the capability2 class), but it doesn't seem to be a problem.","@andreasgerstmayr and @natoscott I don't see this code in the tree, so I guess it was a proposed patch.  I'm not sure checking just the class alone makes much sense in this case.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1303,2021-05-26T13:25:46Z,2021-05-27T11:43:01Z,2021-07-07T17:12:19Z,MERGED,True,49,14,8,https://github.com/andreasgerstmayr,selinux: add capability2 { bpf },1,[],https://github.com/performancecopilot/pcp/pull/1303,https://github.com/kmcdonell,6,https://github.com/performancecopilot/pcp/pull/1303#issuecomment-849169694,"Resolves https://bugzilla.redhat.com/show_bug.cgi?id=1952374
I've tested it with RHEL 7 (no BCC PMDA per default), RHEL 8 and  RHEL 9.
@natoscott Your earlier patch had special handling to check if the capabilities2 class exists, is that required? At first I thought it may be a problem to have
class capability2 { syslog };
class capability2 { bpf };

in the policy file (duplicate declaration of the capability2 class), but it doesn't seem to be a problem.",ps @andreasgerstmayr I have some more selinux changes for the bcc PMDA on F33 ... I'll wait for this PR to get done before pushing them to avoid merge conflicts.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1304,2021-05-26T13:44:09Z,2021-05-26T22:31:00Z,2021-07-07T17:12:15Z,MERGED,True,1,1,1,https://github.com/andreasgerstmayr,pmproxy: start pmproxy after Redis (if available),1,[],https://github.com/performancecopilot/pcp/pull/1304,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1304,"If pmproxy starts before Redis, it will disable time-series
functionality. This update makes sure that pmproxy starts after Redis
(only if Redis is available, otherwise there is no change in behavior).
Related: #1296","If pmproxy starts before Redis, it will disable time-series
functionality. This update makes sure that pmproxy starts after Redis
(only if Redis is available, otherwise there is no change in behavior).
Related: #1296",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1304,2021-05-26T13:44:09Z,2021-05-26T22:31:00Z,2021-07-07T17:12:15Z,MERGED,True,1,1,1,https://github.com/andreasgerstmayr,pmproxy: start pmproxy after Redis (if available),1,[],https://github.com/performancecopilot/pcp/pull/1304,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1304#issuecomment-849163737,"If pmproxy starts before Redis, it will disable time-series
functionality. This update makes sure that pmproxy starts after Redis
(only if Redis is available, otherwise there is no change in behavior).
Related: #1296","Looks good to me, merged",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1307,2021-05-27T10:42:29Z,2021-06-01T11:49:58Z,2021-06-01T11:49:58Z,MERGED,True,9,0,1,https://github.com/mbaldessari,Add a small clarification around pmrep and instances,1,[],https://github.com/performancecopilot/pcp/pull/1307,https://github.com/mbaldessari,1,https://github.com/performancecopilot/pcp/pull/1307,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1307,2021-05-27T10:42:29Z,2021-06-01T11:49:58Z,2021-06-01T11:49:58Z,MERGED,True,9,0,1,https://github.com/mbaldessari,Add a small clarification around pmrep and instances,1,[],https://github.com/performancecopilot/pcp/pull/1307,https://github.com/myllynen,2,https://github.com/performancecopilot/pcp/pull/1307#issuecomment-851495674,,"I had to think a while why this works (it's processed as a regex). The non-regex way of targeting several instances was explained under the section describing -i so I now added this there as well:
       -i instances, --instances=instances
            Retrieve and report  only  the  specified  metric  instances.   By
            default  all initially present instances are reported, except when
            writing an archive (see -o), where also all future instances  will
            be reported.
...
            instances is a comma-separated list of one or more instance filter
            specifications.  Filters containing commas or whitespace  must  be
            quoted with single (') or double ("") quotes.  Note that as part of
            a metricspec on command line a list with more than one filter both
            the  list  and  each  filter must be quoted as shown below.  It is
            also possible to define a single filter with bars (|) as  instance
            separating regex in order to make quoting easier, see below.

            Multiple  -i options are allowed as an alternative way of specify‐
            ing more than one non-metric-specific instance filters.
...
            As an example, the following would report the same instances:

                 $ pmrep -i '. minute' kernel.all.load
                 $ pmrep -i '1 minute','5 minute' kernel.all.load
                 $ pmrep -i ""'1 minute','5 minute'"" kernel.all.load
                 $ pmrep -i '1 minute' -i '5 minute' kernel.all.load
                 $ pmrep kernel.all.load,,""'1 minute','5 minute'""
                 $ pmrep kernel.all.load,,'1 minute|5 minute'
...

What do you think, is this helpful enough now?
Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1307,2021-05-27T10:42:29Z,2021-06-01T11:49:58Z,2021-06-01T11:49:58Z,MERGED,True,9,0,1,https://github.com/mbaldessari,Add a small clarification around pmrep and instances,1,[],https://github.com/performancecopilot/pcp/pull/1307,https://github.com/mbaldessari,3,https://github.com/performancecopilot/pcp/pull/1307#issuecomment-851994296,,"Aye, works for me. Thanks, Marko
I'd still add this example as well (as examples at the end are the first thing I look in a manpage), but do not feel strongly about it. I.e. we can drop this one as well.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1307,2021-05-27T10:42:29Z,2021-06-01T11:49:58Z,2021-06-01T11:49:58Z,MERGED,True,9,0,1,https://github.com/mbaldessari,Add a small clarification around pmrep and instances,1,[],https://github.com/performancecopilot/pcp/pull/1307,https://github.com/myllynen,4,https://github.com/performancecopilot/pcp/pull/1307#issuecomment-852060976,,"You're right, nobody wants to read a dozen A4 long man page if they can get the info they need by quickly checking few examples. I'll merge (and tweak a bit) this now. Thanks for raising this issue & PR!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1310,2021-05-31T10:51:53Z,2021-06-04T13:57:20Z,2021-06-04T13:57:20Z,MERGED,True,431,206,4,https://github.com/rmahique,Improve flexibility to define new metrics and monitor replication,6,[],https://github.com/performancecopilot/pcp/pull/1310,https://github.com/rmahique,1,https://github.com/performancecopilot/pcp/pull/1310,"Make it more flexible to support the definition of metrics and sources by using the configuration file, other changes to make it more flexible, default metrics remain
Signed-off-by: Raul Mahiques rmahique@redhat.com","Make it more flexible to support the definition of metrics and sources by using the configuration file, other changes to make it more flexible, default metrics remain
Signed-off-by: Raul Mahiques rmahique@redhat.com",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1310,2021-05-31T10:51:53Z,2021-06-04T13:57:20Z,2021-06-04T13:57:20Z,MERGED,True,431,206,4,https://github.com/rmahique,Improve flexibility to define new metrics and monitor replication,6,[],https://github.com/performancecopilot/pcp/pull/1310,https://github.com/myllynen,2,https://github.com/performancecopilot/pcp/pull/1310#issuecomment-851873379,"Make it more flexible to support the definition of metrics and sources by using the configuration file, other changes to make it more flexible, default metrics remain
Signed-off-by: Raul Mahiques rmahique@redhat.com","This looks good to me, although I don't have access anymore to environment where I could test this.
Apart from a few completely unsubstantial cosmetics the only thing I'd like to see improved is a bit of documentation, few sentences either on the man page or in the example conf file or both. @rmahique do you think you could add few sentences as a follow-up before Friday if we merge this?
Also, if using only the default metrics is it so that the metrics (metadata and names) don't change before/after this patch? Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1312,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-851715493,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,@andreasgerstmayr I'd really like to understand why so much memory is being used rather than just ignoring it.  This is (meant to be) a bare-bones pmproxy - it intrigues me how it can use ~3MB more (resident) than pmcd (which is actually doing work) ... where can that memory be in use I wonder?,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/andreasgerstmayr,3,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-851987256,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"To me it looks like pmproxy isn't using much, it's the shared libraries:
agerstmayr at agerstmayr-thinkpad in ~pcp/qa on git:main
$ sudo pmap -x $(pidof pmproxy) | sort -k 3 -nr
Address           Kbytes     RSS   Dirty Mode  Mapping
00007fc822192000    1332    1184       0 r-x-- libc-2.33.so
00007fc822350000     612     612       0 r-x-- libpcp.so.3
000055f5ca8ee000     608     552     552 rw---   [ anon ]
00007fc82250d000     488     488       0 r---- libcrypto.so.1.1.1k
00007fc822481000     400     316       0 r-x-- libpcp_web.so.1
00007fc822587000    1720     212       0 r-x-- libcrypto.so.1.1.1k
00007fc821ffc000     616     208       0 r-x-- libm-2.33.so
00007fc821ce3000     516     208       0 r-x-- libsystemd.so.0.31.0
00007fc8205bb000     200     200       0 r-x-- libnss_systemd.so.2
00007fc821a96000     192     192       0 r-x-- libdbus-1.so.3.19.13
00007fc8222df000     304     184       0 r---- libc-2.33.so
00007fc8227c7000     176     176     176 r---- libcrypto.so.1.1.1k
00007fc820482000     164     164       0 r---- libp11-kit.so.0.3.0
00007ffe06833000     160     160     160 rw---   [ stack ]
00007fc82216c000     152     152       0 r---- libc-2.33.so
00007fc8228b2000     148     148       0 r-x-- ld-2.33.so
00007fc821afc000     140     140       0 r---- libkrb5.so.3.3
00007fc82062f000    9040     128       0 r--s- passwd
00007fc81b4f7000   11300     128       0 r--s- initgroups
00007fc822735000     584     124       0 r---- libcrypto.so.1.1.1k
00007fc820549000     348     124       0 r---- libp11-kit.so.0.3.0
00007fc82244d000     120     120       0 r-x-- libuv.so.1.0.0
00007fc8218f0000     244     120       0 r---- libgcrypt.so.20.3.3
00007fc8227fb000     116     116       0 r---- libssl.so.1.1.1k
00007fc821e4a000     100     100       0 r---- libnss3.so
00007fc8204ab000     632     100       0 r-x-- libp11-kit.so.0.3.0
00007fc8223e9000     132      92       0 r---- libpcp.so.3
00007fc82233b000      84      84       0 r---- libpcp.so.3
00007fc82170e000      88      80       0 r-x-- libgpg-error.so.0.32.0
000055f5ca0db000      80      80       0 r-x-- pmproxy
00007fc821cd1000      72      72       0 r---- libsystemd.so.0.31.0
00007fc822818000     352      64       0 r-x-- libssl.so.1.1.1k
00007fc8224e5000     104      64       0 r---- libpcp_web.so.1
00007fc82241e000      76      64       0 r-x-- libpcp_pmda.so.3
00007fc821f91000     252      64       0 r-x-- libssl3.so
00007fc821e63000     888      64       0 r-x-- libnss3.so
00007fc821e13000     148      64       0 r-x-- libnspr4.so
00007fc821dec000      76      64       0 r-x-- libsasl2.so.3.0.0
00007fc821dbe000     108      64       0 r-x-- liblzma.so.5.2.5
00007fc821cab000      72      64       0 r-x-- libnssutil3.so
00007fc821c33000      80      64       0 r-x-- libcrypt.so.2.0.0
00007fc821be6000     236      64       0 r-x-- libgssapi_krb5.so.2.2
00007fc821b1f000     428      64       0 r-x-- libkrb5.so.3.3
00007fc821ac6000      72      64       0 r---- libdbus-1.so.3.19.13
00007fc821998000     896      64       0 r-x-- libzstd.so.1.5.0
00007fc82193f000     104      64       0 r-x-- libselinux.so.1
00007fc82180a000     920      64       0 r-x-- libgcrypt.so.20.3.3
00007fc8217e4000      72      64       0 r-x-- libgcc_s-11-20210428.so.1
00007fc821734000     428      64       0 r-x-- libpcre2-8.so.0.10.1
00007fc8205ed000      68      64       0 r---- libnss_systemd.so.2
00007fc822152000      60      60       0 r-x-- libpthread-2.33.so
00007fc821fed000      60      60       0 r---- libm-2.33.so
00007fc821d64000     172      60       0 r---- libsystemd.so.0.31.0
00007fc822134000      56      56       0 r-x-- libz.so.1.2.11
00007fc821bca000      56      56      56 r---- libkrb5.so.3.3
00007fc8217fc000      56      56       0 r---- libgcrypt.so.20.3.3
00007fc821f84000      52      52       0 r---- libssl3.so
00007fc821c9e000      52      52       0 r---- libnssutil3.so
00007fc821c6f000      56      52       0 r-x-- libresolv-2.33.so
00007fc821a89000      52      52       0 r---- libdbus-1.so.3.19.13
00007fc821e07000      48      48       0 r---- libnspr4.so
00007fc821bda000      48      48       0 r---- libgssapi_krb5.so.2.2
00007fc821ae9000      48      48       0 r-x-- libk5crypto.so.3.1
00007fc8228d7000      40      40       0 r---- ld-2.33.so
00007fc82246b000      40      40       0 r---- libuv.so.1.0.0
00007fc822443000      40      40       0 r---- libuv.so.1.0.0
00007fc821d99000      40      40       0 r-x-- libavahi-client.so.3.2.9
00007fc821972000     112      40       0 r-x-- liblz4.so.1.9.3
00007fc8205aa000      40      40      40 rw--- libp11-kit.so.0.3.0
00007fc8205a0000      40      40      40 r---- libp11-kit.so.0.3.0
00007fc82288a000      36      36      36 r---- libssl.so.1.1.1k
00007fc822478000      36      36       0 r---- libpcp_web.so.1
00007fc821724000      36      36       0 r---- libgpg-error.so.0.32.0
00007fc8217d4000      32      32       0 r-x-- libkrb5support.so.0.1
00007fc820f04000    8216      32      32 rw---   [ anon ]
00007fc8228a5000      28      28       0 r-x-- libnss_sss.so.2
00007fc82214b000      28      28       0 r---- libpthread-2.33.so
00007fc821cc9000      28      28      28 r---- libnssutil3.so
00007fc820606000      28      28       0 r-x-- libnss_files-2.33.so
00007fc8205b4000      28      28       0 r---- libnss_systemd.so.2
000055f5ca0d4000      28      28       0 r---- pmproxy
00007fc822504000      24      24       0 r-x-- libpcp_mmv.so.1
00007fc822411000      32      24      24 rw---   [ anon ]
00007fc821daf000      24      24       0 r-x-- libavahi-common.so.3.5.4
00007fc821959000      28      24       0 r---- libselinux.so.1
00007fc821939000      24      24       0 r---- libselinux.so.1
00007fc821930000      24      24      24 rw--- libgcrypt.so.20.3.3
000055f5ca0ef000      24      24       0 r---- pmproxy
00007fc822419000      20      20       0 r---- libpcp_pmda.so.3
00007fc822332000      36      20      20 rw---   [ anon ]
00007fc821f7b000      20      20      20 r---- libnss3.so
00007fc821de7000      20      20       0 r---- libsasl2.so.3.0.0
00007fc821ae4000      20      20       0 r---- libk5crypto.so.3.1
00007fc821993000      20      20       0 r---- libzstd.so.1.5.0
00007fc820479000      20      20       0 r-x-- libffi.so.6.0.2
00007fc822893000      16      16      16 rw--- libssl.so.1.1.1k
00007fc8227f3000      16      16      16 rw--- libcrypto.so.1.1.1k
00007fc82240b000      16      16      16 r---- libpcp.so.3
00007fc822161000      16      16       0 r---- libpthread-2.33.so
00007fc821fe5000      16      16      16 r---- libssl3.so
00007fc821da3000      16      16       0 r---- libavahi-client.so.3.2.9
00007fc821d95000      16      16       0 r---- libavahi-client.so.3.2.9
00007fc821d8f000      16      16      16 r---- libsystemd.so.0.31.0
00007fc821c88000      16      16       0 r-x-- librt-2.33.so
00007fc821c6b000      16      16       0 r---- libresolv-2.33.so
00007fc821967000      16      16       0 r-x-- libcap.so.2.48
00007fc8217d0000      16      16       0 r---- libkrb5support.so.0.1
00007fc82170a000      16      16       0 r---- libgpg-error.so.0.32.0
00007fc8205fe000      16      16      16 r---- libnss_systemd.so.2
00007fc82232f000      12      12      12 rw--- libc-2.33.so
00007fc82232c000      12      12      12 r---- libc-2.33.so
00007fc822131000      12      12       0 r---- libz.so.1.2.11
00007fc821f80000      12      12      12 rw--- libnss3.so
00007fc821dbb000      12      12       0 r---- liblzma.so.5.2.5
00007fc821db5000      12      12       0 r---- libavahi-common.so.3.5.4
00007fc821dac000      12      12       0 r---- libavahi-common.so.3.5.4
00007fc821c85000      12      12       0 r---- librt-2.33.so
00007fc82196f000      12      12       0 r---- liblz4.so.1.9.3
00007fc82192d000      12      12      12 r---- libgcrypt.so.20.3.3
00007fc8217f6000      12      12       0 r---- libgcc_s-11-20210428.so.1
00007fc8217e1000      12      12       0 r---- libgcc_s-11-20210428.so.1
00007fc820603000      12      12       0 r---- libnss_files-2.33.so
00007fc8228e3000       8       8       8 rw--- ld-2.33.so
00007fc8228e1000       8       8       8 r---- ld-2.33.so
00007fc8228ac000       8       8       0 r---- libnss_sss.so.2
00007fc8228a3000       8       8       0 r---- libnss_sss.so.2
00007fc8228a1000       8       8       0 rw-s- series (deleted)
00007fc82289e000       8       8       0 rw-s- redis (deleted)
00007fc822897000       8       8       8 rw---   [ anon ]
00007fc8227f7000      16       8       8 rw---   [ anon ]
00007fc822502000       8       8       0 r---- libpcp_mmv.so.1
00007fc822500000       8       8       8 rw--- libpcp_web.so.1
00007fc82243e000       8       8       0 r-x-- libdl-2.33.so
00007fc82243c000       8       8       0 r---- libdl-2.33.so
00007fc822439000      12       8       8 rw---   [ anon ]
00007fc82240f000       8       8       8 rw--- libpcp.so.3
00007fc821fea000      12       8       8 rw---   [ anon ]
00007fc821e46000       8       8       8 rw--- libnspr4.so
00007fc821daa000       8       8       8 rw---   [ anon ]
00007fc821c99000       8       8       0 r-x-- libplc4.so
00007fc821c97000       8       8       0 r---- libplc4.so
00007fc821c90000       8       8       8 rw---   [ anon ]
00007fc821c31000       8       8       0 r---- libcrypt.so.2.0.0
00007fc821c2e000       8       8       8 r---- libgssapi_krb5.so.2.2
00007fc821bd8000       8       8       8 rw--- libkrb5.so.3.3
00007fc821af9000       8       8       8 r---- libk5crypto.so.3.1
00007fc821ae2000       8       8       8 rw---   [ anon ]
00007fc821add000       8       8       0 r-x-- libcom_err.so.2.1
00007fc821adb000       8       8       0 r---- libcom_err.so.2.1
00007fc821ad8000       8       8       8 r---- libdbus-1.so.3.19.13
00007fc821965000       8       8       0 r---- libcap.so.2.48
00007fc821936000      12       8       8 rw---   [ anon ]
00007fc8217cb000       8       8       0 r-x-- libkeyutils.so.1.9
00007fc8217c9000       8       8       0 r---- libkeyutils.so.1.9
00007fc821732000       8       8       0 r---- libpcre2-8.so.0.10.1
00007fc821730000       8       8       8 rw---   [ anon ]
00007fc82060d000       8       8       0 r---- libnss_files-2.33.so
00007fc820477000       8       8       0 r---- libffi.so.6.0.2
000055f5ca0f8000       8       8       8 rw---   [ anon ]
00007ffe069b2000       8       4       0 r-x--   [ anon ]
00007fc8228b1000       4       4       0 r---- ld-2.33.so
00007fc8228b0000       4       4       0 rw-s- server (deleted)
00007fc8228af000       4       4       4 rw--- libnss_sss.so.2
00007fc8228ae000       4       4       4 r---- libnss_sss.so.2
00007fc8228a0000       4       4       0 rw-s- webgroup (deleted)
00007fc82250b000       4       4       4 r---- libpcp_mmv.so.1
00007fc82250a000       4       4       0 r---- libpcp_mmv.so.1
00007fc8224ff000       4       4       4 r---- libpcp_web.so.1
00007fc822477000       4       4       4 rw--- libuv.so.1.0.0
00007fc822476000       4       4       4 r---- libuv.so.1.0.0
00007fc822442000       4       4       4 rw---   [ anon ]
00007fc822441000       4       4       4 r---- libdl-2.33.so
00007fc822438000       4       4       4 rw--- libpcp_pmda.so.3
00007fc822437000       4       4       4 r---- libpcp_pmda.so.3
00007fc822168000      16       4       4 rw---   [ anon ]
00007fc822167000       4       4       4 rw--- libpthread-2.33.so
00007fc822166000       4       4       4 r---- libpthread-2.33.so
00007fc822149000       4       4       4 r---- libz.so.1.2.11
00007fc822130000       4       4       4 rw--- libm-2.33.so
00007fc82212f000       4       4       4 r---- libm-2.33.so
00007fc821fe9000       4       4       4 rw--- libssl3.so
00007fc821e45000       4       4       4 r---- libnspr4.so
00007fc821e06000       4       4       4 rw--- libsasl2.so.3.0.0
00007fc821e05000       4       4       4 r---- libsasl2.so.3.0.0
00007fc821de5000       4       4       4 r---- liblzma.so.5.2.5
00007fc821dba000       4       4       4 rw--- libavahi-common.so.3.5.4
00007fc821db9000       4       4       4 r---- libavahi-common.so.3.5.4
00007fc821da9000       4       4       4 rw--- libavahi-client.so.3.2.9
00007fc821da8000       4       4       4 r---- libavahi-client.so.3.2.9
00007fc821d93000       4       4       4 rw--- libsystemd.so.0.31.0
00007fc821cd0000       4       4       4 rw--- libnssutil3.so
00007fc821c9d000       4       4       4 rw--- libplc4.so
00007fc821c9c000       4       4       4 r---- libplc4.so
00007fc821c96000       4       4       4 rw--- libplds4.so
00007fc821c95000       4       4       4 r---- libplds4.so
00007fc821c93000       4       4       0 r-x-- libplds4.so
00007fc821c92000       4       4       0 r---- libplds4.so
00007fc821c8f000       4       4       4 rw--- librt-2.33.so
00007fc821c8e000       4       4       4 r---- librt-2.33.so
00007fc821c82000       4       4       4 rw--- libresolv-2.33.so
00007fc821c81000       4       4       4 r---- libresolv-2.33.so
00007fc821c61000       4       4       4 r---- libcrypt.so.2.0.0
00007fc821c30000       4       4       4 rw--- libgssapi_krb5.so.2.2
00007fc821afb000       4       4       4 rw--- libk5crypto.so.3.1
00007fc821ae1000       4       4       4 rw--- libcom_err.so.2.1
00007fc821ae0000       4       4       4 r---- libcom_err.so.2.1
00007fc821ada000       4       4       4 rw--- libdbus-1.so.3.19.13
00007fc821a88000       4       4       4 rw--- libzstd.so.1.5.0
00007fc821a87000       4       4       4 r---- libzstd.so.1.5.0
00007fc821991000       4       4       4 r---- liblz4.so.1.9.3
00007fc82196e000       4       4       4 rw--- libcap.so.2.48
00007fc82196d000       4       4       4 r---- libcap.so.2.48
00007fc821962000       4       4       4 rw--- libselinux.so.1
00007fc821961000       4       4       4 r---- libselinux.so.1
00007fc8217fb000       4       4       4 rw--- libgcc_s-11-20210428.so.1
00007fc8217fa000       4       4       4 r---- libgcc_s-11-20210428.so.1
00007fc8217e0000       4       4       4 rw--- libkrb5support.so.0.1
00007fc8217df000       4       4       4 r---- libkrb5support.so.0.1
00007fc8217ce000       4       4       4 r---- libkeyutils.so.1.9
00007fc8217c8000       4       4       4 rw--- libpcre2-8.so.0.10.1
00007fc8217c7000       4       4       4 r---- libpcre2-8.so.0.10.1
00007fc82172f000       4       4       4 rw--- libgpg-error.so.0.32.0
00007fc82172e000       4       4       4 r---- libgpg-error.so.0.32.0
00007fc82060f000       4       4       4 r---- libnss_files-2.33.so
00007fc820602000       4       4       4 rw--- libnss_systemd.so.2
00007fc820481000       4       4       4 rw--- libffi.so.6.0.2
00007fc820480000       4       4       4 r---- libffi.so.6.0.2
00007fc81c000000     132       4       4 rw---   [ anon ]
000055f5ca0f7000       4       4       4 rw--- pmproxy
000055f5ca0f6000       4       4       4 r---- pmproxy
---------------- ------- ------- ------- 
total kB          114968   10568    1760

But I just discovered this command yesterday, so I may interpret it wrong - what do you think?
(I manually fixed the header+footer in the output, doesn't go well with sort)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/myllynen,4,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-851992862,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"Now that you're investigating memory usage in detail in a real-world case, could you please check the current pmrep per-process memory related metricsets, are those helpful and would you keep those metricsets as-is or tweak them somehow? See /etc/pcp/pmrep/proc.conf for details. Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/goodwinos,5,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-853495385,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"Related: #1318
Regarding the pmap listing, this is basically reformatted from /proc/PID/maps. And those mappings are generally libs shared between many processes. A more informative snapshot is from /proc/PID/status, e.g.
$ egrep '^Name|^Vm|^Rss' /proc/$(pidof pmproxy)/status
Name:	pmproxy
VmPeak:	  157420 kB
VmSize:	  148864 kB
VmLck:	       0 kB
VmPin:	       0 kB
VmHWM:	   60744 kB
VmRSS:	   60744 kB
RssAnon:	   52604 kB
RssFile:	    8140 kB
RssShmem:	       0 kB
VmData:	   65396 kB
VmStk:	     300 kB
VmExe:	      76 kB
VmLib:	   11188 kB
VmPTE:	     188 kB
VmSwap:	       0 kB

And also /proc/PID/statm (which is cheaper to scrape, as proposed for issue #1318)
$ cat /proc/$(pidof pmproxy)/statm
37216 15186 2035 19 0 16424 0",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/natoscott,6,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-879508831,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"I had a bit of a look into this issue today, found a few things but but didn't get to the bottom of it.
Comparing pmcd to pmproxy is quite enlightening.  One area that's quite different is pmproxy has at least an extra ~750K RSS from ""libcrypto.so.1.1.1k"" ... for no apparent reason.  If that's happening in a few libraries, it'd explain the difference - its not the only thing though, there's plenty of anon memory and other mappings.
$ sudo pmap -x $(pidof pmproxy) | sort -k 3 -nr | grep libcrypto
00007f1bf0446000     488     488       0 r---- libcrypto.so.1.1.1k
00007f1bf04c0000    1720     248       0 r-x-- libcrypto.so.1.1.1k
00007f1bf0700000     176     176     176 r---- libcrypto.so.1.1.1k
00007f1bf066e000     584     128       0 r---- libcrypto.so.1.1.1k
00007f1bf072c000      16      16      16 rw--- libcrypto.so.1.1.1k

versus
sudo pmap -x $(pidof pmcd) | sort -k 3 -nr | grep libcrypto
00007f308c41f000     176     176     176 r---- libcrypto.so.1.1.1k
00007f308c165000     488     128       0 r---- libcrypto.so.1.1.1k
00007f308c44b000      16      16      16 rw--- libcrypto.so.1.1.1k
00007f308c38d000     584       0       0 r---- libcrypto.so.1.1.1k
00007f308c1df000    1720       0       0 r-x-- libcrypto.so.1.1.1k

One bug I found - pmproxy is ignoring secure.enabled and always attempts to enable TLS (fix incoming) - but even with that fixed, it doesn't change the situation compared to pmcd.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/goodwinos,7,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-918865272,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"Here's some more analysis FWIW. I'd agree with Andreas, most of this is the 42 shared libraries that pmproxy is linked with. On f34, it's also linked with libpcap for some reason, which pushes it over the threshold causing qa/1573 to fail.
Running on f33, with the following minimal pmproxy.conf:
[pmproxy]
pcp.enabled = true
http.enabled = true
redis.enabled = true
secure.enabled = false
[discover]
enabled = true
[pmseries]
enabled = false

start and break in main: RSS is 6624. After entering the main loop at the end of this analysis, RSS is 9068.

USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     3016875  0.0  0.0  18384  6624

enter ParseOptions, no change
enter openports, no change
enter server_init, not much change

in open_request_ports:
540	    if (__pmServerHasFeature(PM_SERVER_FEATURE_DISCOVERY))
541		server->presence = __pmServerAdvertisePresence(PM_SERVER_PROXY_SPEC, port);
causes VSZ to jump from 18384 to 92144 (big jump) but RSS was unchanged so the memory was not mapped.

enter setup_secure_module:
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     3140348  0.0  0.0  92144  6708

enter setup_redis_module:
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     3140348  0.0  0.0  92144  6708

stepping thru setup_redis_module:

205		proxy->slots = redisSlotsConnect(proxy->config ...)
...
164	    if ((slots->acc = redisClusterAsyncContextInit()) == NULL) {

Both VSZ and RSS growth :
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     3026934  0.0  0.0  92276  8332
...
215	    sts = redisClusterConnect2(slots->acc->cc);
   1605	    return cluster_update_route(cc);
       1507	        ret = cluster_update_route_by_addr(cc, node->host, node->port);
           1291	        c = redisConnectWithTimeout(ip, port, *cc->connect_timeout);
	       852	    return redisConnectWithOptions(&options);
	           818	        redisContextConnectBindTcp(c, options->endpoint.tcp.ip,
		       544	    return _redisContextConnectTcp(...)
		           60	      && __nss_database_lookup2 (DATABASE_NAME_STRING,...
			       190	  *fctp = __nss_lookup_function (*ni, fct_name);
			           448		  if (nss_load_library (ni) != 0)
				       351	      ni->library->lib_handle = __libc_dlopen (shlib_name);
				       (gdb) p shlib_name
                                       $10 = 0x7ffffffdc290 ""libnss_files.so.2""
After loading that shared library,
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     3139280  0.0  0.0  92644  9080

(gdb) where
#0  nss_load_library (ni=ni@entry=0x555555587460) at nsswitch.c:321
#1  0x00007ffff79ac9f9 in __GI___nss_lookup_function (ni=0x555555587460, fct_name=<optimized out>, fct_name@entry=0x7ffff7a18dd7 ""gethostbyname2_r"") at nsswitch.c:448
#2  0x00007ffff79acb90 in __GI___nss_lookup (ni=ni@entry=0x7ffffffdc3c8, fct_name=fct_name@entry=0x7ffff7a18dd7 ""gethostbyname2_r"", fct2_name=fct2_name@entry=0x0, fctp=fctp@entry=0x7ffffffdc3d0) at nsswitch.c:190
#3  0x00007ffff79ade27 in __GI___nss_hosts_lookup2 (ni=ni@entry=0x7ffffffdc3c8, fct_name=fct_name@entry=0x7ffff7a18dd7 ""gethostbyname2_r"", fct2_name=fct2_name@entry=0x0, fctp=fctp@entry=0x7ffffffdc3d0) at XXX-lookup.c:66
#4  0x00007ffff799a238 in __gethostbyname2_r (name=name@entry=0x555555585f30 ""localhost"", af=af@entry=2, resbuf=resbuf@entry=0x7ffffffdc520, buffer=<optimized out>, buflen=1024, result=result@entry=0x7ffffffdc518, h_errnop=0x7ffff6e4b87c) at ../nss/getXXbyYY_r.c:269
#5  0x00007ffff79722d7 in gaih_inet (name=name@entry=0x555555585f30 ""localhost"", service=service@entry=0x7ffffffdc720, req=req@entry=0x7ffffffdcd30, pai=pai@entry=0x7ffffffdc708, naddrs=naddrs@entry=0x7ffffffdc704, tmpbuf=tmpbuf@entry=0x7ffffffdc800) at ../sysdeps/posix/getaddrinfo.c:559
#6  0x00007ffff7972e69 in __GI_getaddrinfo (name=<optimized out>, service=<optimized out>, hints=0x7ffffffdcd30, pai=0x7ffffffdcd28) at ../sysdeps/posix/getaddrinfo.c:2244
#7  0x00007ffff7bcceb8 in _redisContextConnectTcp (c=0x555555585850, addr=0x555555580861 ""localhost"", port=6379, timeout=0x7ffffffdce20, source_addr=0x0) at deps/hiredis/net.c:425
#8  0x00007ffff7bcd3dd in redisContextConnectBindTcp (c=0x555555585850, addr=0x555555580861 ""localhost"", port=6379, timeout=0x7ffffffdce20, source_addr=0x0) at deps/hiredis/net.c:544
#9  0x00007ffff7bcb0cb in redisConnectWithOptions (options=0x7ffffffdce40) at deps/hiredis/hiredis.c:818
#10 0x00007ffff7bcb29a in redisConnectWithTimeout (ip=0x555555580861 ""localhost"", port=6379, tv=...) at deps/hiredis/hiredis.c:852
#11 0x00007ffff7bd57dc in cluster_update_route_by_addr (cc=0x7ffff7fa8010, ip=0x555555580861 ""localhost"", port=6379) at deps/hiredis-cluster/hircluster.c:1291
#12 0x00007ffff7bd5f8b in cluster_update_route (cc=0x7ffff7fa8010) at deps/hiredis-cluster/hircluster.c:1507
#13 0x00007ffff7bd62e1 in _redisClusterConnect2 (cc=0x7ffff7fa8010) at deps/hiredis-cluster/hircluster.c:1605
#14 0x00007ffff7bd6e0f in redisClusterConnect2 (cc=0x7ffff7fa8010) at deps/hiredis-cluster/hircluster.c:2011
#15 0x00007ffff7bbc301 in redisSlotsInit (config=0x55555557a900, events=0x7ffff7b810e0 <default_loop_struct>) at slots.c:215
#16 0x00007ffff7bb0b0f in redisSlotsConnect (config=0x55555557a900, flags=SLOTS_KEYMAP, info=0x55555555d70d <proxylog>, done=0x555555563f8e <on_redis_connected>, userdata=0x55555557fcc0, events=0x7ffff7b810e0 <default_loop_struct>, arg=0x55555557fcc0) at schema.c:1452
#17 0x0000555555564457 in setup_redis_module (proxy=0x55555557fcc0) at redis.c:205
#18 0x0000555555564564 in redis_reconnect_worker (arg=0x55555557fcc0) at redis.c:227
#19 0x00007ffff7be83ef in pmWebTimerRegister (callback=0x555555564466 <redis_reconnect_worker>, data=0x55555557fcc0) at timer.c:79
#20 0x000055555555f6c6 in setup_proxy (arg=0x7fffffffd340) at server.c:786
#21 0x00007ffff7b5c076 in uv__run_timers (loop=loop@entry=0x7ffff7b810e0 <default_loop_struct>) at src/timer.c:178
#22 0x00007ffff7b638da in uv_run (loop=0x7ffff7b810e0 <default_loop_struct>, mode=UV_RUN_DEFAULT) at src/unix/core.c:376
#23 0x000055555555f881 in main_loop (arg=0x55555557fcc0) at server.c:836
#24 0x000055555555cfcb in main (argc=5, argv=0x7fffffffe578) at pmproxy.c:467


So redis context and the 16384 slots are using additional memory. And the nss library, which may be being dlopen'd unnecessarily if we're not connecting to redis over ssl.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/natoscott,8,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-919058152,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"start and break in main: RSS is 6624. After entering the main loop at the end of this analysis, RSS is 9068.

OK, so that's the mysterious 3MB diff with pmcd ... good progress but root cause is still not really understood though.  Some more notes and questions to help progress further:

__pmServerAdvertisePresence(PM_SERVER_PROXY_SPEC, port);
causes VSZ to jump from 18384 to 92144 (big jump) but RSS was unchanged so the memory was not mapped.

Good to know - this part should be improved with your (separate, planned) Avahi change?

...
164	    if ((slots->acc = redisClusterAsyncContextInit()) == NULL) {
Both VSZ and RSS growth :
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     3026934  0.0  0.0  92276  8332
...

OK, there's a ton of bloat somewhere in there for sure.  This is a change since we moved to hiredis-cluster I think.  Previously our slots.c code used a binary tree populated with only elements for cluster nodes that actually exist (hence, small for the default one-node, non-cluster case).  I wonder if the hiredis-cluster library is particularly inefficient in memory use for the non-cluster case?

215	    sts = redisClusterConnect2(slots->acc->cc);

(IOW, until recently we didn't make the above call at all)

                                   $10 = 0x7ffffffdc290 ""libnss_files.so.2""

After loading that shared library,
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     3139280  0.0  0.0  92644  9080

This nss library looks like noise to me? - just a small number of Kb.  It seems that the new cluster code is the most likely root cause from these notes.

So redis context and the 16384 slots are using additional memory. And the nss library, which may be being dlopen'd unnecessarily if we're not connecting to redis over ssl.

The redis context structure itself is also noise...
(gdb) p sizeof(redisAsyncContext)
$1 = 448

Did you find a data structure expanded across all 16384 slots?  That could be an interesting one - wouldn't need to be super large to consume alot of the missing 2-3MB RSS.
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/goodwinos,9,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-919682466,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"start and break in main: RSS is 6624. After entering the main loop at the end of this analysis, RSS is 9068.

OK, so that's the mysterious 3MB diff with pmcd ... good progress but root cause is still not really understood though. Some more notes and questions to help progress further:

__pmServerAdvertisePresence(PM_SERVER_PROXY_SPEC, port);
causes VSZ to jump from 18384 to 92144 (big jump) but RSS was unchanged so the memory was not mapped.

Good to know - this part should be improved with your (separate, planned) Avahi change?

yes - I've updated BZ 1899625 with some notes - both pmcd and pmproxy will benefit not just from reduces VSZ but also by dropping the unwanted systemd Before= setting.


...
164	    if ((slots->acc = redisClusterAsyncContextInit()) == NULL) {
Both VSZ and RSS growth :
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     3026934  0.0  0.0  92276  8332
...

OK, there's a ton of bloat somewhere in there for sure. ... I wonder if the hiredis-cluster library is particularly inefficient in memory use for the non-cluster case?

Seems to be - effectively treated as cluster of only one node, but I don't think there's much we can do about it without a lot of effort for not much gain.


                                   $10 = 0x7ffffffdc290 ""libnss_files.so.2""

After loading that shared library,
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root     3139280  0.0  0.0  92644  9080

This nss library looks like noise to me? - just a small number of Kb. It seems that the new cluster code is the most likely root cause from these notes.

it's clearly not huge. my comment was more along the lines of why does it need to be loaded at all?


So redis context and the 16384 slots are using additional memory. And the nss library, which may be being dlopen'd unnecessarily if we're not connecting to redis over ssl.

The redis context structure itself is also noise...
(gdb) p sizeof(redisAsyncContext)
$1 = 448


yes it's small, but the redisClusterContext structure is much bigger
(gdb) p sizeof(redisClusterContext)
$1 = 131792

Did you find a data structure expanded across all 16384 slots? That could be an interesting one - wouldn't need to be super large to consume alot of the missing 2-3MB RSS.

yes. It's the redisClusterContext.table field. The structure containing that field is calloc'd in redisClusterContextInit(). The table array is REDIS_CLUSTER_SLOTS = 16384 pointers, which is 128K. It's initialized by calloc (and again later the table[] array is zeroed with a memset, unnecessarily). Even though it's only 128K, after that call RSS went up by 1648K. Not sure why, guess it's something related to heap management. Following that are numerous smaller RSS bumps involving binding the socket and actual redis connection, e.g. redisContextConnectBindTcp(), redisConnectWithTimeout(),  and getaddrinfo().
Other than the avahi change (which will reduce VSZ but not RSS), it doesn't look like there's much we can really do for this .. and we're only talking about less than 10MB anyway.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/natoscott,10,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-919718505,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"Good to know - this part should be improved with your (separate, planned) Avahi change?

yes - I've updated BZ 1899625 with some notes - both pmcd and pmproxy will benefit not just from reduces VSZ but also by dropping the unwanted systemd Before= setting.

Good stuff.



...
164	    if ((slots->acc = redisClusterAsyncContextInit()) == NULL) {

OK, there's a ton of bloat somewhere in there for sure. ... I wonder if the hiredis-cluster library is particularly inefficient in memory use for the non-cluster case?

Seems to be - effectively treated as cluster of only one node, but I don't think there's much we can do about it without a lot of effort for not much gain.

Let's see what we can do here, especially since this is a regression and we know the cause now.
It seems to me there's no need to be calling that function at all for most people (most people don't use clusters) - maybe we can auto-detect cluster mode like we do with redisearch, and just use a regular async, non-cluster context in the default case?  That doesn't seem like alot of effort.
While you're away I'll look into it some more with @andreasgerstmayr and see what we can come up with.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/andreasgerstmayr,11,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-919979346,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"It seems to me there's no need to be calling that function at all for most people (most people don't use clusters) - maybe we can auto-detect cluster mode like we do with redisearch, and just use a regular async, non-cluster context in the default case? That doesn't seem like alot of effort.
While you're away I'll look into it some more with @andreasgerstmayr and see what we can come up with.

afaics we have two options here: either update the memory allocation strategy in hiredis-cluster upstream, or use either hiredis or hiredis-cluster in PCP depending if cluster mode is enabled.
The main annoyance of the second solution are the callbacks - for hiredis-cluster the redis response callbacks get redisClusterAsyncContext, for hiredis they get redisAsyncContext. So we'd need a new type (possibly a struct containing a union of both, and a field whether cluster mode is enabled or not), update all response handlers to use the new struct, and also update 
  
    
      pcp/src/libpcp_web/src/slots.c
    
    
        Lines 286 to 303
      in
      f59d519
    
  
  
    

        
          
           void 
        

        
          
           redisSlotsReplyCallback(redisClusterAsyncContext *c, void *r, void *arg) 
        

        
          
           { 
        

        
          
               redisSlotsReplyData *srd = arg; 
        

        
          
               redisReply 		*reply = r; 
        

        
          
            
        

        
          
               srd->slots->inflight_requests--; 
        

        
          
               mmv_stats_add(srd->slots->metrics_handle, ""responses.wait"", NULL, usec_now() - srd->start); 
        

        
          
               mmv_stats_inc(srd->slots->metrics_handle, ""responses.total"", NULL); 
        

        
          
               mmv_stats_add(srd->slots->metrics_handle, ""requests.inflight.total"", NULL, -1); 
        

        
          
               mmv_stats_add(srd->slots->metrics_handle, ""requests.inflight.bytes"", NULL, (int64_t)(-srd->req_size)); 
        

        
          
            
        

        
          
               if (reply == NULL || reply->type == REDIS_REPLY_ERROR) 
        

        
          
           	mmv_stats_inc(srd->slots->metrics_handle, ""responses.error"", NULL); 
        

        
          
            
        

        
          
               srd->callback(c, r, srd->arg); 
        

        
          
               redisSlotsReplyDataFree(arg); 
        

        
          
           } 
        
    
  

 to allocate this new struct, run the callback, and free the struct.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/natoscott,12,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-920585608,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"I made some upstream changes over in Nordix/hiredis-cluster#64
This is a handy improvement, but having spent time on this now I see it's not the biggest improvement we can make here after all.  I found the pmSetProcessIdentity call to initgroups(3), in libpcp, of all things, to be problematic with current Fedora/glibc.  Optimizing this (trivially) gives back a whopping single-line-change return of >1MB RSS in pmproxy, and makes this test pass reliably again.  Better yet, this is a win for every PCP daemon, including PMDAs.  Even pmcd is lighter weight than before (sub-7MB RSS there now).
See #1411 for details.  With these changes the test is reliably passing once more and pmproxy memory use is well below the test limit, so I'm closing out this issue finally. 🎉",True,{'HOORAY': ['https://github.com/andreasgerstmayr']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/natoscott,13,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-920588868,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"| Running on f33, with the following minimal pmproxy.conf:
^^^^^^^^^^^^^^^^^
@goodwinos argh!  This is why your analysis and results were not reproducible for me on f34 where this test is failing.  See the very first comment from @andreasgerstmayr in this issue.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/andreasgerstmayr,14,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-921163894,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"I found the pmSetProcessIdentity call to initgroups(3), in libpcp, of all things, to be problematic with current Fedora/glibc. Optimizing this (trivially) gives back a whopping single-line-change return of >1MB RSS in pmproxy, and makes this test pass reliably again.

Interesting, I wonder why this call is using 1MB+? The /etc/group file has 1166 bytes on my system, and I have 83 groups in that file. Or maybe it's allocating that much memory, and free'ing it after, but glibc doesn't return the memory back to the system, and PCP doesn't allocate more memory after that, so we see the increased RSS usage.
Anyway, I'm glad this issue is resolved. Thanks for your investigations!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1312,2021-05-31T15:36:39Z,2021-09-16T05:20:30Z,2021-10-14T14:06:42Z,CLOSED,False,2,2,1,https://github.com/andreasgerstmayr,qa/1573: increase max pmproxy RSS by 1 MB,1,[],https://github.com/performancecopilot/pcp/pull/1312,https://github.com/natoscott,15,https://github.com/performancecopilot/pcp/pull/1312#issuecomment-921456497,on Fedora 34 pmproxy uses slightly above 10 MB RSS.,"@andreasgerstmayr stab in the dark without looking at the code, I'd punt there's memory being allocated for a cache of identity information from NIS (even if its not in use).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1313,2021-06-01T02:28:46Z,2021-06-02T03:30:57Z,2021-06-02T03:30:57Z,MERGED,True,62,4,6,https://github.com/natoscott,selinux: use new logging_watch_all_log_dirs_path macro,1,[],https://github.com/performancecopilot/pcp/pull/1313,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1313,"Allow PMDAs that access log files to do so when latest versions
of the kernel and selinux-policy is installed.
This resolves a new qa/652 (pmdasystemd) failure amongst others.","Allow PMDAs that access log files to do so when latest versions
of the kernel and selinux-policy is installed.
This resolves a new qa/652 (pmdasystemd) failure amongst others.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1313,2021-06-01T02:28:46Z,2021-06-02T03:30:57Z,2021-06-02T03:30:57Z,MERGED,True,62,4,6,https://github.com/natoscott,selinux: use new logging_watch_all_log_dirs_path macro,1,[],https://github.com/performancecopilot/pcp/pull/1313,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1313#issuecomment-851792420,"Allow PMDAs that access log files to do so when latest versions
of the kernel and selinux-policy is installed.
This resolves a new qa/652 (pmdasystemd) failure amongst others.","This fix is held up by a problem (I think) in the base selinux-policy definitions:
https://bugzilla.redhat.com/show_bug.cgi?id=1966397",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1314,2021-06-01T05:22:42Z,2021-06-01T07:10:32Z,2021-06-01T07:10:32Z,MERGED,True,59,1,5,https://github.com/natoscott,pmieconf: detect sustained CPU thermal throttling,1,[],https://github.com/performancecopilot/pcp/pull/1314,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1314,Resolves Red Hat BZ #1908212,Resolves Red Hat BZ #1908212,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1315,2021-06-01T06:34:53Z,2021-06-01T07:11:21Z,2021-06-01T07:11:58Z,MERGED,True,54,1,4,https://github.com/goodwinos,"pmlogger: fix FD leak on reexec, plus QA",1,[],https://github.com/performancecopilot/pcp/pull/1315,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1315,"Set FD_CLOEXEC flag on the pmlogger control sockets so they are
closed when pmlogger reexecs. Add new test qa/1901 to verify.","Set FD_CLOEXEC flag on the pmlogger control sockets so they are
closed when pmlogger reexecs. Add new test qa/1901 to verify.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1316,2021-06-02T01:18:32Z,2021-06-02T03:30:57Z,2021-06-02T03:30:57Z,MERGED,True,13,1721,39,https://github.com/natoscott,"build: retire the RPM PMDA, unused and not performance related",1,[],https://github.com/performancecopilot/pcp/pull/1316,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1316,"Recent changes to rpmdb formats and selinux policy requirements,
as well as a total lack of user interest over the years (not too
surprising since its metrics are not performance data) combined
recently to make this decision an easy one.","Recent changes to rpmdb formats and selinux policy requirements,
as well as a total lack of user interest over the years (not too
surprising since its metrics are not performance data) combined
recently to make this decision an easy one.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1317,2021-06-02T06:26:54Z,2021-06-02T07:13:05Z,2021-06-02T07:13:05Z,MERGED,True,11,1,2,https://github.com/natoscott,"selinux updates: dma device access, qa test remake",2,[],https://github.com/performancecopilot/pcp/pull/1317,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1317,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1319,2021-06-03T05:07:38Z,2021-06-08T01:03:44Z,2021-06-08T01:03:44Z,CLOSED,False,59,4,3,https://github.com/goodwinos,pmproxy: add pmproxy.mem.rss and pmproxy.mem.vsz metrics,1,[],https://github.com/performancecopilot/pcp/pull/1319,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1319,"Adds pmproxy metrics for virtual size and resident set size.
This will be useful for correlating pmproxy memory growth
with other metrics.
Also updates pmrep config for ':pmproxy' to include these in
the first two columns.
QA is still todo (would just verify against ps listing).
Related: #1318","Adds pmproxy metrics for virtual size and resident set size.
This will be useful for correlating pmproxy memory growth
with other metrics.
Also updates pmrep config for ':pmproxy' to include these in
the first two columns.
QA is still todo (would just verify against ps listing).
Related: #1318",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1319,2021-06-03T05:07:38Z,2021-06-08T01:03:44Z,2021-06-08T01:03:44Z,CLOSED,False,59,4,3,https://github.com/goodwinos,pmproxy: add pmproxy.mem.rss and pmproxy.mem.vsz metrics,1,[],https://github.com/performancecopilot/pcp/pull/1319,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1319#issuecomment-856361762,"Adds pmproxy metrics for virtual size and resident set size.
This will be useful for correlating pmproxy memory growth
with other metrics.
Also updates pmrep config for ':pmproxy' to include these in
the first two columns.
QA is still todo (would just verify against ps listing).
Related: #1318",abandoning this PR. The work will be done as part of #1318,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1320,2021-06-08T03:49:20Z,2021-06-09T06:20:15Z,2021-06-09T06:20:15Z,MERGED,True,7,7,2,https://github.com/natoscott,Change the minimum python2 version to be 2.7,1,[],https://github.com/performancecopilot/pcp/pull/1320,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1320,"After some recent problems and temporary workarounds, we
resolved to drop python2 on old platforms (RHEL6 vintage)

this ups the minimum version from 2.6 to 2.7.","After some recent problems and temporary workarounds, we
resolved to drop python2 on old platforms (RHEL6 vintage)

this ups the minimum version from 2.6 to 2.7.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1321,2021-06-09T08:08:36Z,2021-06-14T11:09:40Z,2021-06-14T11:09:40Z,MERGED,True,669,32,7,https://github.com/goodwinos,"pmproxy / libpcp_web multithreading, http and https/tls fixes, QA",2,[],https://github.com/performancecopilot/pcp/pull/1321,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1321,"3f5ba221842e6 libpcp_web: add mutex to struct webgroup protecting the context dict
2bad6aef10339 pmproxy: add mutex for client req lists, fix https/tls support, QA

Resolves BZ 1947989 - pmproxy hangs and consume 100% cpu if the redis datasource is configured with TLS
Resolves #1311
Related #1203, qa/297 and qa/1290
Tested with updates to qa/1457","3f5ba221842e6 libpcp_web: add mutex to struct webgroup protecting the context dict
2bad6aef10339 pmproxy: add mutex for client req lists, fix https/tls support, QA

Resolves BZ 1947989 - pmproxy hangs and consume 100% cpu if the redis datasource is configured with TLS
Resolves #1311
Related #1203, qa/297 and qa/1290
Tested with updates to qa/1457",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1323,2021-06-10T01:33:45Z,2021-06-10T07:20:27Z,2021-06-10T07:20:27Z,MERGED,True,18721,1697,224,https://github.com/natoscott,Use vendoring of the upstream htop code rather than a local copy,4,[],https://github.com/performancecopilot/pcp/pull/1323,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1323,"Use the same techniques Andreas pioneered with hiredis and hiredis-cluster for htop.
This is only feasible now that the htop platform code for PCP is merged upstream.","Use the same techniques Andreas pioneered with hiredis and hiredis-cluster for htop.
This is only feasible now that the htop platform code for PCP is merged upstream.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1324,2021-06-10T23:17:33Z,2021-06-11T03:34:34Z,2021-06-11T03:35:18Z,MERGED,True,6,14,2,https://github.com/natoscott,build: fix rpm build on el6 relating to python,1,[],https://github.com/performancecopilot/pcp/pull/1324,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1324,"The pcp-system-tools package does not require python,
some tools are written in C as well so we can deliver
that subset still.","The pcp-system-tools package does not require python,
some tools are written in C as well so we can deliver
that subset still.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1325,2021-06-11T00:10:26Z,2021-06-11T03:34:34Z,2021-06-11T03:34:39Z,MERGED,True,38,52,8,https://github.com/natoscott,libpcp: complete remaining libpcp.h internal struct renaming,1,[],https://github.com/performancecopilot/pcp/pull/1325,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1325,"Resolve the two remaining ""pm"" vs ""__pm"" structure names that
were called out in the TODO near the head of libpcp.h.  After
auditing code, pmTimeZone is unused so just drop it.  Renamed
pmHostSpec to __pmHostSpec - used in libraries and QA only.","Resolve the two remaining ""pm"" vs ""__pm"" structure names that
were called out in the TODO near the head of libpcp.h.  After
auditing code, pmTimeZone is unused so just drop it.  Renamed
pmHostSpec to __pmHostSpec - used in libraries and QA only.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1326,2021-06-17T11:45:00Z,2021-06-17T23:11:02Z,2021-06-17T23:11:02Z,MERGED,True,1,0,1,https://github.com/goodwinos,libpcp_web: disable Redis connection if version check fails,2,[],https://github.com/performancecopilot/pcp/pull/1326,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1326,"Set slots->setup to zero if the Redis version check fails,
indicating Redis is too old (< V5) on this platform.
If the Redis version check fails, ""redis-cli monitor"" shows
the version request but no further activity.  qa/1543 passes
as do QA groups pmproxy, libpcp_web, redis and pmseries.","Set slots->setup to zero if the Redis version check fails,
indicating Redis is too old (< V5) on this platform.
If the Redis version check fails, ""redis-cli monitor"" shows
the version request but no further activity.  qa/1543 passes
as do QA groups pmproxy, libpcp_web, redis and pmseries.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1328,2021-06-19T06:38:28Z,2021-06-20T03:32:17Z,2021-06-20T03:32:21Z,MERGED,True,616,110,13,https://github.com/natoscott,hacluster metrics update,3,[],https://github.com/performancecopilot/pcp/pull/1328,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1328,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1329,2021-06-20T23:58:13Z,2021-06-21T01:01:46Z,2021-06-21T01:01:49Z,MERGED,True,253,30,10,https://github.com/natoscott,Resolve logimport library error handling problems,2,[],https://github.com/performancecopilot/pcp/pull/1329,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1329,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1330,2021-06-21T05:59:19Z,2021-06-24T01:22:04Z,2021-07-16T04:46:01Z,MERGED,True,1392,6,25,https://github.com/christianhorn,"pmda-denki, the pmda for metrics dealing with the electrical power of the system",12,[],https://github.com/performancecopilot/pcp/pull/1330,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/1330,"There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?","There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1330,2021-06-21T05:59:19Z,2021-06-24T01:22:04Z,2021-07-16T04:46:01Z,MERGED,True,1392,6,25,https://github.com/christianhorn,"pmda-denki, the pmda for metrics dealing with the electrical power of the system",12,[],https://github.com/performancecopilot/pcp/pull/1330,https://github.com/christianhorn,2,https://github.com/performancecopilot/pcp/pull/1330#issuecomment-864753534,"There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?","Ah, the commit also rolls back recent changes in qa/group, that was not intended.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1330,2021-06-21T05:59:19Z,2021-06-24T01:22:04Z,2021-07-16T04:46:01Z,MERGED,True,1392,6,25,https://github.com/christianhorn,"pmda-denki, the pmda for metrics dealing with the electrical power of the system",12,[],https://github.com/performancecopilot/pcp/pull/1330,https://github.com/christianhorn,3,https://github.com/performancecopilot/pcp/pull/1330#issuecomment-864757057,"There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?","Full log with the failure at the end is here: https://fluxcoil.net/files/tmp/pcp_Makepkg_failure.txt
The makepkg failure:
`
=== pmconfig ===
gcc -O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1  -m64  -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -I./src/include -I./src/include/pcp -DPCP_VERSION=""5.3.2"" -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g -I../src/include -I../src/include/pcp -DPCP_VERSION=""5.3.2"" -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g -I../../src/include -I../../src/include/pcp -DPCP_VERSION=""5.3.2"" -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g   -c -o pmconfig.o pmconfig.c
gcc -O2 -flto=auto -ffat-lto-objects -fexceptions -g -grecord-gcc-switches -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -fstack-protector-strong -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1  -m64  -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -I./src/include -I./src/include/pcp -DPCP_VERSION=""5.3.2"" -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g -I../src/include -I../src/include/pcp -DPCP_VERSION=""5.3.2"" -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g -I../../src/include -I../../src/include/pcp -DPCP_VERSION=""5.3.2"" -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g -o pmconfig -Wl,-z,relro -Wl,--as-needed  -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld  -Wl,-z,relro -Wl,--as-needed  -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld  -Wall -L./src/libpcp/src -L./src/libpcp_web/src -L./src/libpcp_pmda/src -L./src/libpcp_mmv/src  -Wl,-z,relro -Wl,--as-needed  -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld  -Wall -L../src/libpcp/src -L../src/libpcp_web/src -L../src/libpcp_pmda/src -L../src/libpcp_mmv/src  -Wl,-z,relro -Wl,--as-needed  -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld  -Wall -L../../src/libpcp/src -L../../src/libpcp_web/src -L../../src/libpcp_pmda/src -L../../src/libpcp_mmv/src   pmconfig.o      -lpcp
=== pmdas ===
make[3]: *** No rule to make target 'denki', needed by 'default_pcp'.  Stop.
make[2]: *** [GNUmakefile:145: default_pcp] Error 2
make[2]: Leaving directory '/pcpserv/pcp/pcp-5.3.2/pcp-5.3.2/src'
make[1]: *** [GNUmakefile:49: default_pcp] Error 2
make[1]: Leaving directory '/pcpserv/pcp/pcp-5.3.2/pcp-5.3.2'
error: Bad exit status from /var/tmp/rpm-tmp.uvKsyo (%build)
RPM build errors:
Bad exit status from /var/tmp/rpm-tmp.uvKsyo (%build)
make: *** [GNUmakefile:34: pack_pcp] Error 1
make: Leaving directory '/pcpserv/pcp/pcp-5.3.2/build/rpm'
`",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1330,2021-06-21T05:59:19Z,2021-06-24T01:22:04Z,2021-07-16T04:46:01Z,MERGED,True,1392,6,25,https://github.com/christianhorn,"pmda-denki, the pmda for metrics dealing with the electrical power of the system",12,[],https://github.com/performancecopilot/pcp/pull/1330,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/1330#issuecomment-865413830,"There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?","@christianhorn you'll need these tweaks to get to a complete packaged build:
https://paste.centos.org/view/b513f8ad
Couple other things please:

change ""#!/usr/bin/sh"" references to ""#!/bin/sh"" in scripts
make the QA test files use compressed tarballs of the content
add a .gitignore file in src/pmdas/denki

Probably a few more things once I review in detail, but that'll get your build going for now.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1330,2021-06-21T05:59:19Z,2021-06-24T01:22:04Z,2021-07-16T04:46:01Z,MERGED,True,1392,6,25,https://github.com/christianhorn,"pmda-denki, the pmda for metrics dealing with the electrical power of the system",12,[],https://github.com/performancecopilot/pcp/pull/1330,https://github.com/christianhorn,5,https://github.com/performancecopilot/pcp/pull/1330#issuecomment-865428382,"There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?","Awesome, builds locally with these changes. Doing a new pull request and will see what CI says.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1330,2021-06-21T05:59:19Z,2021-06-24T01:22:04Z,2021-07-16T04:46:01Z,MERGED,True,1392,6,25,https://github.com/christianhorn,"pmda-denki, the pmda for metrics dealing with the electrical power of the system",12,[],https://github.com/performancecopilot/pcp/pull/1330,https://github.com/christianhorn,6,https://github.com/performancecopilot/pcp/pull/1330#issuecomment-865668530,"There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?","Some things to be done (hints welcome) before this can be considered for upstream:

files qa/denki/bigsystem.tgz and qa/denki/Thinkpad_L480_bat_busy.tgz are in my commit, but changes (which I was not able to identify) to get them shipped as part of pcp-testsuite are required. Currently qa/1653 fails as it's missing these 2 files.
I created a basic pmdadenki.1 manpage.. but the denki/README file is way more useful, mostly as it's easier to write. Can that be shipped as part of pcp-pmda-denki ? I hint also in the manpage at the README.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1330,2021-06-21T05:59:19Z,2021-06-24T01:22:04Z,2021-07-16T04:46:01Z,MERGED,True,1392,6,25,https://github.com/christianhorn,"pmda-denki, the pmda for metrics dealing with the electrical power of the system",12,[],https://github.com/performancecopilot/pcp/pull/1330,https://github.com/natoscott,7,https://github.com/performancecopilot/pcp/pull/1330#issuecomment-865689244,"There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?","@christianhorn good work, here's some more hints...

* files qa/denki/bigsystem.tgz and qa/denki/Thinkpad_L480_bat_busy.tgz are in my commit, but changes (which I was not able to identify) to get them shipped as part of pcp-testsuite are required. Currently qa/1653 fails as it's missing these 2 files.


qa/denki/GNUmakefile must ensure these files arrive in pcp-testsuite (and /var/lib/pcp/testsuite).
Have a look at how qa/linux/GNUmakefile handles things.  Note you also need a minimal GNUmakefile.install there if not done already.

* I created a basic pmdadenki.1 manpage.. but the denki/README file is way more useful, mostly as it's easier to write. Can that be shipped as part of pcp-pmda-denki ? I hint also in the manpage at the README.


Yep, README there is fine - quite common even, especially historically - have a look at pmdabcc for one example.
cheers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1330,2021-06-21T05:59:19Z,2021-06-24T01:22:04Z,2021-07-16T04:46:01Z,MERGED,True,1392,6,25,https://github.com/christianhorn,"pmda-denki, the pmda for metrics dealing with the electrical power of the system",12,[],https://github.com/performancecopilot/pcp/pull/1330,https://github.com/christianhorn,8,https://github.com/performancecopilot/pcp/pull/1330#issuecomment-866529553,"There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?","From my side the code looks ok now for upstreaming. Comments/review welcome, if something is missing or changes required.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1330,2021-06-21T05:59:19Z,2021-06-24T01:22:04Z,2021-07-16T04:46:01Z,MERGED,True,1392,6,25,https://github.com/christianhorn,"pmda-denki, the pmda for metrics dealing with the electrical power of the system",12,[],https://github.com/performancecopilot/pcp/pull/1330,https://github.com/natoscott,9,https://github.com/performancecopilot/pcp/pull/1330#issuecomment-867261198,"There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?","@christianhorn I have a handful of changes to tidy up further, all small stuff.  I'll merge shortly but there remains an issue with the QA test running locally here - can you figure out what would cause this:
[pcpqa@shard ~]$ ./check -g pmda.denki
PMDA probe: pminfo -h shard -f sample.milliseconds
PMDA probe: pminfo -h shard -f sampledso.milliseconds
PMDA probe: pminfo -h shard -f simple.numfetch
1653 - output mismatch (see 1653.out.bad)
39c39
< Check denki metrics have appeared ... 5 metrics and 11 values
---
> Check denki metrics have appeared ... 5 metrics and 7 values
42,45c42,43
<     inst [0 or ""0-package-1""] value 8826
<     inst [1 or ""0-core""] value 3483
<     inst [2 or ""1-package-0""] value 13719
<     inst [3 or ""1-core""] value 8334
---
>     inst [0 or ""package-1""] value 8826
>     inst [1 or ""core""] value 3483
48,51c46,47
<     inst [0 or ""0-package-1""] value 8826
<     inst [1 or ""0-core""] value 3483
<     inst [2 or ""1-package-0""] value 13719
<     inst [3 or ""1-core""] value 8334
---
>     inst [0 or ""package-1""] value 8826
>     inst [1 or ""core""] value 3483
Check local PMCD is still alive ...
PMDA probe: pminfo -h shard -f sample.milliseconds
PMDA probe: pminfo -h shard -f sampledso.milliseconds
PMDA probe: pminfo -h shard -f simple.numfetch
Failures: 1653
Failed 1 of 1 tests

Is there some dependency on the state of the localhost still perhaps, even when using injected data?  Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1330,2021-06-21T05:59:19Z,2021-06-24T01:22:04Z,2021-07-16T04:46:01Z,MERGED,True,1392,6,25,https://github.com/christianhorn,"pmda-denki, the pmda for metrics dealing with the electrical power of the system",12,[],https://github.com/performancecopilot/pcp/pull/1330,https://github.com/christianhorn,10,https://github.com/performancecopilot/pcp/pull/1330#issuecomment-867267333,"There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?","Looks like just the first rapl-package was found, instead of the test data. denki.log should look like this ideally with that test root:
Wed Jun 23 14:00:35] pmdadenki(1675003) Debug: detected Intel RAPL, with 32 cpu-cores and 2 rapl-packages.
This is seen with a build ontop of your modifications, right? Will do a build and test that.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1330,2021-06-21T05:59:19Z,2021-06-24T01:22:04Z,2021-07-16T04:46:01Z,MERGED,True,1392,6,25,https://github.com/christianhorn,"pmda-denki, the pmda for metrics dealing with the electrical power of the system",12,[],https://github.com/performancecopilot/pcp/pull/1330,https://github.com/natoscott,11,https://github.com/performancecopilot/pcp/pull/1330#issuecomment-867308983,"There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?","Looks like just the first rapl-package was found, instead of the test data. denki.log should look like this ideally with that test root:
Wed Jun 23 14:00:35] pmdadenki(1675003) Debug: detected Intel RAPL, with 32 cpu-cores and 2 rapl-packages.
This is seen with a build ontop of your modifications, right?

Yep

Will do a build and test that.

Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1330,2021-06-21T05:59:19Z,2021-06-24T01:22:04Z,2021-07-16T04:46:01Z,MERGED,True,1392,6,25,https://github.com/christianhorn,"pmda-denki, the pmda for metrics dealing with the electrical power of the system",12,[],https://github.com/performancecopilot/pcp/pull/1330,https://github.com/christianhorn,12,https://github.com/performancecopilot/pcp/pull/1330#issuecomment-867485608,"There is an issue with this commit, Makepkg does not succeed.
I figured this commit would be the best base so others can
have a look and point out what I am missing..
As first step, can you point out what is missing to getting
pcp-pmda-denki rpm build?","Thanks a bunch! I will suggest to simplify a piece, but will do that in a separate pull request. As it is, it works and passes QA.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1331,2021-06-21T17:47:49Z,2021-06-22T00:04:17Z,2021-06-22T00:04:17Z,MERGED,True,2,7,1,https://github.com/pauljevans,pmdahacluster: Remove un-needed pmdaCacheLookupName() calls,1,[],https://github.com/performancecopilot/pcp/pull/1331,https://github.com/pauljevans,1,https://github.com/performancecopilot/pcp/pull/1331,"Update instance refresh code for the label supported metrics to remove the
superfluous pmdaCacheLookupName() calls.
We update the label supported indoms in mirror to the non-label indoms
and in turn don't require re-checking instance updates immediately again
(after doing so for the non-label indoms).
This also fixes the Coverity defects reported by Nathan for unchecked returns
on these calls.","Update instance refresh code for the label supported metrics to remove the
superfluous pmdaCacheLookupName() calls.
We update the label supported indoms in mirror to the non-label indoms
and in turn don't require re-checking instance updates immediately again
(after doing so for the non-label indoms).
This also fixes the Coverity defects reported by Nathan for unchecked returns
on these calls.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1332,2021-06-21T22:32:20Z,2021-06-22T00:04:50Z,2021-06-22T00:04:50Z,MERGED,True,9,1,1,https://github.com/rmahique,added conditions to return different output if replica agreement is d…,1,[],https://github.com/performancecopilot/pcp/pull/1332,https://github.com/rmahique,1,https://github.com/performancecopilot/pcp/pull/1332,"added conditions to return different output if replica agreement is disabled, etc..
Signed-off-by: Raul Mahiques rmahique@redhat.com","added conditions to return different output if replica agreement is disabled, etc..
Signed-off-by: Raul Mahiques rmahique@redhat.com",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1333,2021-06-24T02:56:00Z,2021-06-24T05:26:08Z,2021-07-16T04:45:48Z,MERGED,True,1535,4,14,https://github.com/goodwinos,"pcp-ss: initial version of new client tool, with QA and docs",1,[],https://github.com/performancecopilot/pcp/pull/1333,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1333,"Initial commit for pcp-ss(1) front end client for pmdasockets(1),
implementing many (but not yet all) of the ss(8) options. This
is packaged in pcp-system-tools. New QA test 1633 is added along
with test archive and man page.
Still TODO are some PMDA changes for a persistent filter config
file and various additional metrics, e.g. supporting the --process
option, see #1231
Resolves: RHBZ#1879350","Initial commit for pcp-ss(1) front end client for pmdasockets(1),
implementing many (but not yet all) of the ss(8) options. This
is packaged in pcp-system-tools. New QA test 1633 is added along
with test archive and man page.
Still TODO are some PMDA changes for a persistent filter config
file and various additional metrics, e.g. supporting the --process
option, see #1231
Resolves: RHBZ#1879350",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1334,2021-06-24T12:26:22Z,2021-07-06T03:12:23Z,2022-04-05T13:24:04Z,MERGED,True,12,20,3,https://github.com/christianhorn,Automatic cpu core detection for pmda-denki,3,[],https://github.com/performancecopilot/pcp/pull/1334,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/1334,"remove command line option for cpus
autodetect for up to 4096 cores, current linux kernel limit
""intel rapl"" -> ""rapl"", as also newer AMD cpus support it","remove command line option for cpus
autodetect for up to 4096 cores, current linux kernel limit
""intel rapl"" -> ""rapl"", as also newer AMD cpus support it",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1334,2021-06-24T12:26:22Z,2021-07-06T03:12:23Z,2022-04-05T13:24:04Z,MERGED,True,12,20,3,https://github.com/christianhorn,Automatic cpu core detection for pmda-denki,3,[],https://github.com/performancecopilot/pcp/pull/1334,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1334#issuecomment-867992740,"remove command line option for cpus
autodetect for up to 4096 cores, current linux kernel limit
""intel rapl"" -> ""rapl"", as also newer AMD cpus support it","Hmm, this seems like a step backward - why hard code the number of CPUs instead of just asking for the correct value from the  system?  It breaks our code in subtle ways when the kernel improves and any CPU count limit is increased.  It also means we have to traverse loops thousands of times on systems with small CPU counts.
The command line option is for QA only (like -r) - its not something regular users have to use.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1334,2021-06-24T12:26:22Z,2021-07-06T03:12:23Z,2022-04-05T13:24:04Z,MERGED,True,12,20,3,https://github.com/christianhorn,Automatic cpu core detection for pmda-denki,3,[],https://github.com/performancecopilot/pcp/pull/1334,https://github.com/christianhorn,3,https://github.com/performancecopilot/pcp/pull/1334#issuecomment-868001933,"remove command line option for cpus
autodetect for up to 4096 cores, current linux kernel limit
""intel rapl"" -> ""rapl"", as also newer AMD cpus support it","The suggested implementation is not hardcoded, it sets 4096 as absolute maximum (and we can change that easily, even now while the kernel does not yet support it).

It breaks our code in subtle ways when the kernel improves and any CPU count limit is increased.

I think we could replace it with the maximum value for integer without issues. Ageed, this pull request would not deal with >4096 cores.

It also means we have to traverse loops thousands of times on systems with small CPU counts.

The detection function runs exactly one time, it has a loop which runs potentially from 0 to MAX_CPUS, but the first cpu-number which is not found leads to the end of the loop. I confirmed with a debug statement inside the loop.

The command line option is for QA only (like -r) - its not something regular users have to use.

I did only look at the current build with the -r and test data, not on a real 32core system. But I think it would also on the real 32core system need the -c 32.
Let me confirm behavior of the current code on a multi-numa-zone/32+ core system, will report.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1334,2021-06-24T12:26:22Z,2021-07-06T03:12:23Z,2022-04-05T13:24:04Z,MERGED,True,12,20,3,https://github.com/christianhorn,Automatic cpu core detection for pmda-denki,3,[],https://github.com/performancecopilot/pcp/pull/1334,https://github.com/christianhorn,4,https://github.com/performancecopilot/pcp/pull/1334#issuecomment-868275518,"remove command line option for cpus
autodetect for up to 4096 cores, current linux kernel limit
""intel rapl"" -> ""rapl"", as also newer AMD cpus support it","Some news:

our core limits are higher as I had looked up, theoretically ~8k cores
current code works on live systems also with >1 rapl packages. The system I tested on is AMD EPYC, I also verified that these provide RAPL on rhell8 (so kernel 4 with ports from newer upstream). Impressive to see 2 packages humming away with 60W consumption each, compared to laptops.
But I still feel bad to use sysconf(_SC_NPROCESSORS_CONF) for live systems and command line cores for QA, having as much code shared for both usages would be good.

I consider 2 pathes:

You used ""static int ncpus; ncpus =  sysconf(_SC_NPROCESSORS_CONF)"", so that would cover 2^32, which we could set for MAX_CPUS. That would allow maximum code sharing reallife and QA code, and not decrease the limit of cpus. It seems like sysconf() returns long int.. but with all future proofness, assuming 2^128 might be to much :)
I also considered to read the directory /sys/devices/system/cpu/ and evaluate the biggest cpu* entry.. but just setting MAX_CPUS is simpler.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1334,2021-06-24T12:26:22Z,2021-07-06T03:12:23Z,2022-04-05T13:24:04Z,MERGED,True,12,20,3,https://github.com/christianhorn,Automatic cpu core detection for pmda-denki,3,[],https://github.com/performancecopilot/pcp/pull/1334,https://github.com/christianhorn,5,https://github.com/performancecopilot/pcp/pull/1334#issuecomment-869278683,"remove command line option for cpus
autodetect for up to 4096 cores, current linux kernel limit
""intel rapl"" -> ""rapl"", as also newer AMD cpus support it","This commit should remove the downsides.

It has no regression regarding number of supported cpus, ncpus was ""int"" and MAX_CPUS is unsigned int
No loops are wasted, the detection loop starts to count with 0 and tests one-by-one if the next cpu exists, and leaves the loop with the first cpu which is not found.
The commit allows now common cpu detection for both realworld and QA cases",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1335,2021-06-25T12:27:00Z,2021-06-28T11:45:13Z,2021-07-07T17:12:39Z,MERGED,True,1,1,1,https://github.com/andreasgerstmayr,build: mark python3-bpfcc dependency as architecture specific,1,[],https://github.com/performancecopilot/pcp/pull/1335,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1335,"See https://packages.debian.org/sid/libbpfcc for supported architectures
of libbpfcc","See https://packages.debian.org/sid/libbpfcc for supported architectures
of libbpfcc",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1336,2021-06-28T12:12:07Z,2021-06-29T00:11:33Z,2021-06-29T00:11:33Z,MERGED,True,1178,1106,13,https://github.com/goodwinos,"pcp-ss and pmdasockets - add persistent filter, plus bug fixes and QA",3,[],https://github.com/performancecopilot/pcp/pull/1336,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1336,47f9df2 and 6e19b22,47f9df2 and 6e19b22,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1337,2021-07-01T04:12:16Z,2021-07-06T03:12:23Z,2021-07-07T02:40:04Z,MERGED,True,1,1,1,https://github.com/shogo-matsumoto,pmdalinux: take buddyinfo's order into account in calculating total size,1,[],https://github.com/performancecopilot/pcp/pull/1337,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/1337,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1337,2021-07-01T04:12:16Z,2021-07-06T03:12:23Z,2021-07-07T02:40:04Z,MERGED,True,1,1,1,https://github.com/shogo-matsumoto,pmdalinux: take buddyinfo's order into account in calculating total size,1,[],https://github.com/performancecopilot/pcp/pull/1337,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1337#issuecomment-874426678,,"@shogo-matsumoto thanks!  I found an issue while testing this relating to sign extension when moving from a signed 32 bit value to the unsigned long long used in the pmAtomValue for the total (bytes) metric.  This resulted in regression test qa/821 failing with these changes.  I went ahead and fixed it as best I could - please review my follow-up changes here?  Thanks!
$ ./check 821
821 26s ... - output mismatch (see 821.out.bad)
[...]
<     inst [21 or ""DMA32::order10::node0""] value 2724
---
>     inst [21 or ""DMA32::order10::node0""] value 18014398508077056
[...]
Failures: 821
Failed 1 of 1 tests

I believe the correct value there should be 2789376, but sign extension happened, i.e.
gdb -q
(gdb) p /t 18014398508077056
$1 = 111111111111111111111111111111111010101001000000000000
(gdb)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1337,2021-07-01T04:12:16Z,2021-07-06T03:12:23Z,2021-07-07T02:40:04Z,MERGED,True,1,1,1,https://github.com/shogo-matsumoto,pmdalinux: take buddyinfo's order into account in calculating total size,1,[],https://github.com/performancecopilot/pcp/pull/1337,https://github.com/shogo-matsumoto,3,https://github.com/performancecopilot/pcp/pull/1337#issuecomment-875225578,,@natoscott Thank you for merging the PR. I didn't notice the overflow problem in my low memory environment. Your recent commit looks good to me. Thank you for your help!,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1339,2021-07-02T18:26:10Z,2021-07-07T16:14:16Z,2021-10-14T14:06:41Z,MERGED,True,131,1,3,https://github.com/andreasgerstmayr,build: conditionally enable gperftools (default is no),1,[],https://github.com/performancecopilot/pcp/pull/1339,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1339,"defaults to no, i.e. should not change anything unless explicitly enabled.","defaults to no, i.e. should not change anything unless explicitly enabled.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1342,2021-07-08T03:35:01Z,2021-07-08T07:50:26Z,2021-07-08T07:50:27Z,MERGED,True,62,68,2,https://github.com/goodwinos,Improve pmproxy and libpcp_web scalability,2,[],https://github.com/performancecopilot/pcp/pull/1342,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1342,"5e3b792 libpcp_web: plug mem leak in redisMapInsert during daily log-rolling
2a00a90 libpcp_web/discovery: improve lock handling and scalability
earlier related commits are already in main branch","5e3b792 libpcp_web: plug mem leak in redisMapInsert during daily log-rolling
2a00a90 libpcp_web/discovery: improve lock handling and scalability
earlier related commits are already in main branch",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1343,2021-07-09T02:50:35Z,2021-07-09T03:59:24Z,2021-07-09T03:59:24Z,MERGED,True,2516,149,69,https://github.com/natoscott,Htop merge,5,[],https://github.com/performancecopilot/pcp/pull/1343,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1343,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1344,2021-07-09T19:06:06Z,2021-07-14T10:40:12Z,2021-10-14T14:06:32Z,MERGED,True,70,16,1,https://github.com/andreasgerstmayr,docs: update scaling doc with federated setup and troubleshooting chapter,1,[],https://github.com/performancecopilot/pcp/pull/1344,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1344,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1344,2021-07-09T19:06:06Z,2021-07-14T10:40:12Z,2021-10-14T14:06:32Z,MERGED,True,70,16,1,https://github.com/andreasgerstmayr,docs: update scaling doc with federated setup and troubleshooting chapter,1,[],https://github.com/performancecopilot/pcp/pull/1344,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1344#issuecomment-878642527,,LGTM.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1344,2021-07-09T19:06:06Z,2021-07-14T10:40:12Z,2021-10-14T14:06:32Z,MERGED,True,70,16,1,https://github.com/andreasgerstmayr,docs: update scaling doc with federated setup and troubleshooting chapter,1,[],https://github.com/performancecopilot/pcp/pull/1344,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/1344#issuecomment-879009877,,Looks good Andreas - would it be worth adding a comparison between federated / non-federated results?,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1344,2021-07-09T19:06:06Z,2021-07-14T10:40:12Z,2021-10-14T14:06:32Z,MERGED,True,70,16,1,https://github.com/andreasgerstmayr,docs: update scaling doc with federated setup and troubleshooting chapter,1,[],https://github.com/performancecopilot/pcp/pull/1344,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/1344#issuecomment-879034304,,"Looks good Andreas - would it be worth adding a comparison between federated / non-federated results?

Yep, I was about to write a sentence like ""The observed values of each individual pmlogger farm of the federated deployment are almost identical to a single pmlogger farm, rendering the PCP deployment horizontally scalable"" but it sounds too cheesy - do you have any better suggestions? 😄
The observed values of a non-federated farm with 100 loggers vs each farm of the federated results are almost identical, except of the network bandwidth (noted with ""The network bandwidth is higher due to the inter-node communication of the Redis cluster."").",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1344,2021-07-09T19:06:06Z,2021-07-14T10:40:12Z,2021-10-14T14:06:32Z,MERGED,True,70,16,1,https://github.com/andreasgerstmayr,docs: update scaling doc with federated setup and troubleshooting chapter,1,[],https://github.com/performancecopilot/pcp/pull/1344,https://github.com/andreasgerstmayr,5,https://github.com/performancecopilot/pcp/pull/1344#issuecomment-879786152,,"I'll merge it for now, let's add any updates on a later commit.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1345,2021-07-09T20:11:19Z,2021-07-12T08:19:52Z,2021-07-12T08:19:52Z,MERGED,True,26,41,2,https://github.com/Erbenos,fix(statsd): docs mentioned hardcoded agent stat that was not present and omitted few of those that present were,1,[],https://github.com/performancecopilot/pcp/pull/1345,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/1345,"Additionally, some minor edits so that man page doc and readme doc are more similar.","Additionally, some minor edits so that man page doc and readme doc are more similar.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1346,2021-07-12T20:48:15Z,2021-07-12T21:37:13Z,2021-07-12T21:40:09Z,MERGED,True,0,26,13,https://github.com/Erbenos,qa: remove valgrind requirements from statsd tests that don't actually use it,1,[],https://github.com/performancecopilot/pcp/pull/1346,https://github.com/Erbenos,1,https://github.com/performancecopilot/pcp/pull/1346,"See title, was trying to run tests on a clean system, that's how I found out.","See title, was trying to run tests on a clean system, that's how I found out.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1346,2021-07-12T20:48:15Z,2021-07-12T21:37:13Z,2021-07-12T21:40:09Z,MERGED,True,0,26,13,https://github.com/Erbenos,qa: remove valgrind requirements from statsd tests that don't actually use it,1,[],https://github.com/performancecopilot/pcp/pull/1346,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1346#issuecomment-878614874,"See title, was trying to run tests on a clean system, that's how I found out.","Thanks @Erbenos.  I think qa/1720 needs the same love and care, I'll fix that one.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1346,2021-07-12T20:48:15Z,2021-07-12T21:37:13Z,2021-07-12T21:40:09Z,MERGED,True,0,26,13,https://github.com/Erbenos,qa: remove valgrind requirements from statsd tests that don't actually use it,1,[],https://github.com/performancecopilot/pcp/pull/1346,https://github.com/kmcdonell,3,https://github.com/performancecopilot/pcp/pull/1346#issuecomment-878615957,"See title, was trying to run tests on a clean system, that's how I found out.","Mea cupla, qa/1720 does use valgrind, but it is hidden in qa/statsd/cases/15.py.  So that one's OK.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1347,2021-07-14T06:00:10Z,2021-07-14T07:02:16Z,2021-07-14T07:02:16Z,MERGED,True,5622,16,5,https://github.com/goodwinos,libpcp_web coverity fixes,13,[],https://github.com/performancecopilot/pcp/pull/1347,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1347,"fdd2eda72 libpcp_web: fix compilation error in series_node_prepare_time
ad75163ca libpcp_web: err handling in series_expr_query_desc(), CID366098
938607ee6 libpcp_web: fix err handling in initSeriesQueryBaton(), Coverity CID341677
9bee6e9b6 libpcp_web: fix null check in pmSeriesDiscoverValues, Coverity CID353645
9a0eec3dd libpcp_web: fix null check, Coverity CID353502.
1cb3fe3c7 libpcp_web: check err in query functions. Coverity CID366058,366064,366088
057ffc30d libpcp_web: check ret value from pmParseUnitsStr in series_redis_hash_expression
6c6aebf0f libpcp_web: fix resource leak in redisSlotsInit CID370634
c0f3ad57f libpcp_web: fix resource leak in series_redis_hash_expression CID366094
bb71b0943 libpcp_web: fix resource leak in node_pattern_reply Coverity CID328038

Have checked QA groups -g pmproxy -g libpcp_web -g pmseries","fdd2eda72 libpcp_web: fix compilation error in series_node_prepare_time
ad75163ca libpcp_web: err handling in series_expr_query_desc(), CID366098
938607ee6 libpcp_web: fix err handling in initSeriesQueryBaton(), Coverity CID341677
9bee6e9b6 libpcp_web: fix null check in pmSeriesDiscoverValues, Coverity CID353645
9a0eec3dd libpcp_web: fix null check, Coverity CID353502.
1cb3fe3c7 libpcp_web: check err in query functions. Coverity CID366058,366064,366088
057ffc30d libpcp_web: check ret value from pmParseUnitsStr in series_redis_hash_expression
6c6aebf0f libpcp_web: fix resource leak in redisSlotsInit CID370634
c0f3ad57f libpcp_web: fix resource leak in series_redis_hash_expression CID366094
bb71b0943 libpcp_web: fix resource leak in node_pattern_reply Coverity CID328038

Have checked QA groups -g pmproxy -g libpcp_web -g pmseries",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1348,2021-07-14T13:36:54Z,2021-07-15T08:35:12Z,2021-10-14T14:07:30Z,MERGED,True,7,0,1,https://github.com/andreasgerstmayr,docs: document hostspec parameter functionality for openmetrics endpoint,1,[],https://github.com/performancecopilot/pcp/pull/1348,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1348,Added (almost) the same doc text as in the PMAPI section.,Added (almost) the same doc text as in the PMAPI section.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1349,2021-07-14T15:51:58Z,2021-07-15T08:55:34Z,2021-10-14T14:06:51Z,MERGED,True,34,1,3,https://github.com/andreasgerstmayr,build: optionally enable sanitizers,1,[],https://github.com/performancecopilot/pcp/pull/1349,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1349,"Very handy for data race detection and much more, see
https://github.com/google/sanitizers/wiki","Very handy for data race detection and much more, see
https://github.com/google/sanitizers/wiki",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1350,2021-07-15T01:08:13Z,2021-08-01T23:37:13Z,2021-08-02T16:00:02Z,MERGED,True,5,0,1,https://github.com/jasonk000,pmdabcc: free BPF memory after module setup completes,1,[],https://github.com/performancecopilot/pcp/pull/1350,https://github.com/jasonk000,1,https://github.com/performancecopilot/pcp/pull/1350,reduces RSS footprint slightly (180 -> 140MB) for ~40MB savings on pmdabcc after load,reduces RSS footprint slightly (180 -> 140MB) for ~40MB savings on pmdabcc after load,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/jasonk000,1,https://github.com/performancecopilot/pcp/pull/1351,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/jasonk000,2,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-880932375,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","Looks very good, thanks for this PR Jason!
I've added a few comments inline (not all are equally important).

Thank you. I've addressed all of them (pending your input) and will have a look at how to specify clang as a dependency for configure.

I'm trying to grasp the need for the vmlinux.h file - doesn't this file lock us in with a specific kernel version and architecture (exactly what we want to avoid with BPF CO-RE)?

Good question. vmlinux.h provides the compilation process with the required structs/type information so that compile & link stage has the information to validate types and set up the relocation information in ELF file. It does not need to match the running kernel version as libbpf performs the relocations at runtime to match the running kernel.
In the scenario that a new feature is added to the kernel that you want to trace with BPF CO-RE, if it has new struct/type information that is not available in your version of vmlinux.h, only then does it need to be regenerated.
This article (BPF Portability and CO-RE) - especially the section ""Compiler support"" - provides an excellent explanation of this process.

Could the requirement of this file be avoided when BTF is enabled?

There are three options

Embed a full vmlinux.h in the repo (aka current)
Generate vmlinux.h at build time (see below for build time requirements)
Provide a cutdown / custom header file with just the structs and fields we need (trivial, introduces work to development process)

To generate dynamically on the  build-server, requirements are:

CONFIG_DEBUG_INFO_BTF=y must be compiled into kernel - most recent distributions will have this.
bpftool installation (on ubuntu this is provided by linux-tools-common).
pahole >= 1.16 is required (on ubuntu this is provided by dwarves).
Then we can add bpftool btf dump file /sys/kernel/btf/vmlinux format c to create it.

To provide only the structs we can ship a cut down vmlinux.h and provide only the struct and fields that we need for our program. This requires manual maintenance if we need to access extra kernel-side structs; they need to be introduced manually. I don't think this is a big headache as we only need a few fields from task_struct currently; it is probably only 5-10 lines. Looking at the BPF_CORE_READ calls, we need only struct task_struct { pid, tgid, state }. This is a very viable solution too, it only makes it a module maintainer responsibility.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/jasonk000,3,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-880933161,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!",For review of the cutdown vmlinux.h I have included a new file in 45d9ccc called modules/vmlinux_cut.h. This file is sufficient to replace vmlinux.h. It requires manual maintenance by copying the relevant definitions from a bpftool-generated vmlinux.h.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-881091777,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","These provide an alternative implementation to the pmdabcc python module.

Awesome.

* I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.

[...]
* The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles

I've added configure macros for these (see commit c3fb7c3)
For clang, something like this in configure.ac will get you going...
AC_CHECK_PROGS(CLANG, clang)
AC_SUBST(CLANG)

and add matching changes in src/include/builddefs.in - then make use of $(CLANG) in the makefile.
It'd be really good to know if we need to bring in that entire toolchain or whether GCC is going to be able to do this for us anytime soon... but it sounds like we're going to need both.",True,{'THUMBS_UP': ['https://github.com/jasonk000']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/natoscott,5,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-881092707,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","For review of the cutdown vmlinux.h I have included a new file in 45d9ccc called modules/vmlinux_cut.h. This file is sufficient to replace vmlinux.h. It requires manual maintenance by copying the relevant definitions from a bpftool-generated vmlinux.h.

This looks to me like the way to go - fewer toolchain dependencies is ideal, and at least in its current form this stripped down header looks readily maintainable.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/andreasgerstmayr,6,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-881849267,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","Sorry, forgot to mention - I'm on PTO the next two weeks, meanwhile @natoscott will look over this PR.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/natoscott,7,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-883950074,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","@jasonk000 I've gone through the code in much more detail now, so can give some deeper feedback.
In general it's looking really good.  I recommend we remove the bpf.conf concept entirely (hear me out) and focus on two things:

making module loading work 'automatically' - i.e. scan for modules in known locations (that only root can write to), load all .so files discovered there automatically on startup
make writing the PCP BPF modules as simple as possible, and move all logic dealing with identifier assignment into the PMDA core code (src/pmdas/bpf/bpf.c) - this will help folks writing new modules, and make maintenance easier.

To achieve these goals, there's two PMDA concepts to embrace:

dynamic metric names
instance domain caches

To use ""dynamic metric names"", you'll need to change the 'pmns' file to look more like src/pmdas/mmv/src/pmns for example (i.e. use wildcards, no hard-coded names there).  Then, you need to add some new callbacks into the PMDA to handle the name <-> pmID lookups on behalf of pmcd(1).  The 3 new callbacks needed are 'name', 'pmid' and 'children'.  You might find the MMV PMDA code to be a useful reference there, but other C agents do similar things (sample/src/sample.c too, and a few other more complex ones like pmdalinux, pmdaproc).
In terms of ""instance domain caches"", I highly recommend switching to the pmdaCacheOp(3) interfaces instead of using the array-based instance domains currently being used.  These interfaces guarantee certain rules are satisfied for you and if used right, in addition to indoms for modules, we can also use these APIs to manage (dynamic, persistent) identifier assignment across the entire PMDA.  Read the rules outlined in the second paragraph of pmdaCacheOp(3) carefully.  Also note there's the concept of PMDA_CACHE_STRINGS in that man page - we can use that for persistent identifier management for things beyond indoms (pmID cluster identifiers, for example).
Using these two concepts (dynamic metric names, indom caches) we can completely get rid of all static identifier assignments.  Here's how it would work overall.
At PMDA startup, in the bpf_init() routine for the agent, reserve two 'special' persistent indom caches for strings.  The first one we'll use for pmID cluster numbers, and the second for pmInDom serial numbers - let's call them CLUSTERS and SERIALS one...
#define CLUSTERS 0
#define SERIAL 0
[...]
bpf_init()
{
    [...]
    pmdaCacheResize(CLUSTERS, (1<<12 - 1));  /* see libpcp.h __pmID_int */
    pmdaCacheOp(CLUSTERS, PMDA_CACHE_STRINGS);
    pmdaCacheOp(CLUSTERS, PMDA_CACHE_LOAD);
    pmdaCacheResize(SERIALS, (1<<22 - 1));  /* see libpcp.h __pmInDom_int */
    pmdaCacheOp(SERIALS, PMDA_CACHE_STRINGS);
    pmdaCacheOp(SERIALS, PMDA_CACHE_LOAD);
    bpf_load_modules();

in bpf_load_modules, we now iterate the directory ($PCP_PMDAS_DIR/bpf/modules perhaps) and pick out any file ending with .so - we dlopen that file (just like the code already does) and keep the rest of the filename (without .so suffix) as the main identifier for the module.  Perhaps we go so far as to mandate this is the module 'name' and drop that part of the current module interface - one less callback function for module writers to worry about.
Still inside bpf_load_module, using that 'name', for every module we dlopen call:
   int cluster = pmdaCacheStore(CLUSTERS, PMDA_CACHE_ADD, name, module);
   module->cluster = cluster;

At the end of loading all the modules, before returning from bpf_load_modules(), call
   pmdaCacheOp(CLUSTERS, PMDA_CACHE_SAVE);

In this way we have persistent identifiers for metric names - the same cluster number will be assigned on every iteration of the PMDA (see mention of 'rules' earlier as to why that's important - this affects a number of client tools).
Rinse, repeat this concept to assign instance domain identifiers for those modules that need them.  We probably need to keep the existing pmdabpf module API for a module to say how many indoms it has,
e.g.
    int cluster = pmdaCacheStore(CLUSTERS, PMDA_CACHE_ADD, name, module);
    module->cluster = cluster;
    int count = module->get_indom_count();
    module->indoms = count;
    for (int i = 0; count; i++) {
        char indom[64];
        pmsprintf(indom, sizeof(indom), ""%s/%d"", name, i);
        int serial = pmdaCacheStore(SERIALS, PMDA_CACHE_ADD, indom, NULL);
        module->set_indom_serial(i, serial);
    }

Now we have persistent, dynamic instance domain numbers also, and those indom identifiers cannot conflict across individual modules.
I'll stop here to break the review discussion up.  Next step though is for the modules to tell the PMDA each of the metrics (names) they support, and to construct a 'global' pmdaNamespace with names from across all the modules with that information, used in the new namespace callbacks I mentioned.
We may also want to provide a helper library for modules (module_helpers.c suggests we're going to need this anyway) - which provides helper glue code between the PMDA and modules, again to make the modules easy to write.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/jasonk000,8,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-885333784,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","I've added dynamic cluster ID, dynamic indom, and dynamic namespace setup, and it all works ok.
I have the two tests cases working on f34 but have a makefile issue:
Build completes, test fails on first run:

Passed all 1 tests

Virtual environment setup done, took 19m.

Please run:

    sudo -u pcpqa -i ./check XXX

to run a QA test. PCP is already installed, from sources located in './pcp'.
Starting a shell in the new virtual environment...

[pcpbuild@003241a157dc ~]$ sudo -u pcpqa -i
[pcpqa@003241a157dc ~]$ ./1898
QA output created by 1898

=== bpf agent installation ===
Updating the Performance Metrics Name Space (PMNS) ...
Terminate PMDA if already installed ...
[...install files, make output...]
Updating the PMCD control file, and notifying PMCD ...
Check bpf metrics have appeared ... X metrics and X values

PMDA was not ready in 10 seconds, test failed
[pcpqa@003241a157dc ~]$ 
logout

(Checking the log shows it's an issue with the ELF file not matching what libbpf expects it to look like).
After that, I recompile and install the bpf/modules files
[pcpbuild@003241a157dc ~]$ cd pcp/pcp-5.3.2/src/pmdas/bpf/modules/
[pcpbuild@003241a157dc modules]$ make && make install
make: Nothing to be done for 'check'.
gcc -I../../../../src/include -I../../../../src/include/pcp -DPCP_VERSION=\""5.3.2\"" -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g    -c -o biolatency.o biolatency.c
gcc -I../../../../src/include -I../../../../src/include/pcp -DPCP_VERSION=\""5.3.2\"" -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g    -c -o module_helpers.o module_helpers.c
gcc -I../../../../src/include -I../../../../src/include/pcp -DPCP_VERSION=\""5.3.2\"" -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g    -Wall -L../../../../src/libpcp/src -L../../../../src/libpcp_web/src -L../../../../src/libpcp_pmda/src -L../../../../src/libpcp_mmv/src   -lbpf -shared biolatency.o module_helpers.o -o biolatency.so
gcc -I../../../../src/include -I../../../../src/include/pcp -DPCP_VERSION=\""5.3.2\"" -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g    -c -o runqlat.o runqlat.c
gcc -I../../../../src/include -I../../../../src/include/pcp -DPCP_VERSION=\""5.3.2\"" -fPIC -fno-strict-aliasing -D_GNU_SOURCE  -Wall -O2 -g    -Wall -L../../../../src/libpcp/src -L../../../../src/libpcp_web/src -L../../../../src/libpcp_pmda/src -L../../../../src/libpcp_mmv/src   -lbpf -shared runqlat.o module_helpers.o -o runqlat.so
clang-12 -emit-llvm -O2 -Wno-unknown-attributes -Xclang -disable-llvm-passes -g -c biolatency.bpf.c -o - | opt -O2 -mtriple=bpf-pc-linux | llvm-dis | llc -march=bpf -filetype=obj -o biolatency.bpf.o
clang-12 -emit-llvm -O2 -Wno-unknown-attributes -Xclang -disable-llvm-passes -g -c runqlat.bpf.c -o - | opt -O2 -mtriple=bpf-pc-linux | llvm-dis | llc -march=bpf -filetype=obj -o runqlat.bpf.o
../../../../install-sh -o root -g root -m 755 -d /usr/libexec/pcp/pmdas/bpf/modules
../../../../install-sh -o root -g root -m 755 -d /var/lib/pcp/pmdas/bpf/modules
../../../../install-sh -o root -g root -m 644 -t /var/lib/pcp/pmdas/bpf/modules biolatency.so runqlat.so biolatency.bpf.o runqlat.bpf.o  /usr/libexec/pcp/pmdas/bpf/modules
rm biolatency.o runqlat.o module_helpers.o

And now, the tests pass:
[pcpbuild@003241a157dc modules]$ sudo -u pcpqa -i
[pcpqa@003241a157dc ~]$ ./1898
QA output created by 1898

=== bpf agent installation ===
Updating the Performance Metrics Name Space (PMNS) ...
Terminate PMDA if already installed ...
[...install files, make output...]
Updating the PMCD control file, and notifying PMCD ...
Check bpf metrics have appeared ... X metrics and X values

=== report metric values ===
OK
=== check metric labels ===

=== remove bpf agent ===
Culling the Performance Metrics Name Space ...
bpf ... done
Updating the PMCD control file, and notifying PMCD ...
[...removing files...]
Check bpf metrics have gone away ... OK
[pcpqa@003241a157dc ~]$ ./1895
QA output created by 1895

=== bpf agent installation ===
Updating the Performance Metrics Name Space (PMNS) ...
Terminate PMDA if already installed ...
[...install files, make output...]
Updating the PMCD control file, and notifying PMCD ...
Check bpf metrics have appeared ... X metrics and X values

=== report metric values ===
OK
=== check metric labels ===

=== remove bpf agent ===
Culling the Performance Metrics Name Space ...
bpf ... done
Updating the PMCD control file, and notifying PMCD ...
[...removing files...]
Check bpf metrics have gone away ... OK

@natoscott would love it if you have any pointers.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/natoscott,9,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-889701615,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","I've added dynamic cluster ID, dynamic indom, and dynamic namespace setup, and it all works ok.
I have the two tests cases working on f34 but have a makefile issue:

It's lookin' pretty awesome.

@natoscott would love it if you have any pointers.

Yeah - I'm able to reproduce the same.  It seems to be something 'special' that's happening as part of the rpm build process (I know there's binary/library rewriting that happens in the final stages of the rpmbuild(1) - but not something we have control over.  I haven't been able to pinpoint exactly which change by rpmbuild is causing this though.
I did notice we seem to be taking SIGSEGV though (pmcd.log shows this), and I believe that's the root cause of the lack of metrics showing up in the test.  I think its inside the call to bpf_object__name (in runqlat.c for example).  So my working theory is something that's being changed in the layout of the shared library is causing libbpf code to crash... but that's not 100% proven yet.
HTH.  Here's a few small, unrelated cleanups...
diff --git a/src/pmdas/bpf/.gitignore b/src/pmdas/bpf/.gitignore
new file mode 100644
index 0000000000..da89d1095c
--- /dev/null
+++ b/src/pmdas/bpf/.gitignore
@@ -0,0 +1,5 @@
+domain.h
+exports
+pmdabpf
+pmda_bpf.so
+modules/*.so
diff --git a/src/pmdas/bpf/Install b/src/pmdas/bpf/Install
index 4f9b256667..2379c16749 100755
--- a/src/pmdas/bpf/Install
+++ b/src/pmdas/bpf/Install
@@ -13,7 +13,7 @@
 # or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 # for more details.
 # 
-# Install the simple PMDA and/or PMNS
+# Install the BPF PMDA and/or PMNS
 #
 
 . $PCP_DIR/etc/pcp.env
diff --git a/src/pmdas/bpf/Remove b/src/pmdas/bpf/Remove
index 9f7272b446..1768907104 100755
--- a/src/pmdas/bpf/Remove
+++ b/src/pmdas/bpf/Remove
@@ -12,7 +12,7 @@
 # or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 # for more details.
 # 
-# Remove the simple PMDA
+# Remove the BPF PMDA
 #
 
 . $PCP_DIR/etc/pcp.env
diff --git a/src/pmdas/bpf/modules/GNUmakefile b/src/pmdas/bpf/modules/GNUmakefile
index 771cffa74b..250061cbed 100644
--- a/src/pmdas/bpf/modules/GNUmakefile
+++ b/src/pmdas/bpf/modules/GNUmakefile
@@ -10,8 +10,6 @@ MODULEDIR = $(PCP_PMDASADM_DIR)/$(IAM)/modules
 $(eval $(shell grep ^VERSION_ID= /etc/os-release))
 $(eval $(shell grep ^ID= /etc/os-release))
 
-include $(BUILDRULES)
-
 # Use the clang pipeline to emit LLVM to LLD and emit BPF straight to an ELF .o.
 # The GCC pipeline has parts of this but not completely, and in any case, likely
 # requires version/feature detection too.
@@ -47,5 +45,7 @@ install_pcp install:	default
 	$(INSTALL) -m 755 -d $(MODULETMP)
 	$(INSTALL) -m 644 -t $(MODULETMP) $(MODULES) $(BPF_MODULES) $(MODULEDIR)
 
+include $(BUILDRULES)
+
 clean::
 	rm -f $(MODULES) $(BPF_MODULES)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/jasonk000,10,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-892271967,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","Thanks for the pointer. It looks like rpmbuild in fact calls strip against the binaries, and as it does this, it breaks the relocation information included in the eBPF ELF file. This looks OK but is no longer usable by libbpf.
Based on this, there are two options:

Introduce a custom strip approach that filters out the relevant bpf modules on the list. I've introduced a basic wrapper here that works to prove the point, we can use it.
Or, we can disable symbol stripping altogether. The list of files is actually quite short and I doubt will have any practical negative impact on the produced packages to not strip. By my count there are only 7 files affected: libpcp_pmda.a, libpcp_trace.a, libpcp_gui.a, libpcp.a, libpcp_web.a, libpcp_import.a, libpcp_mmv.a",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/andreasgerstmayr,11,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-897049877,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","I tested the PMDA today on my Fedora 34 notebook:
I couldn't get it working with libbpf 0.3.0 (getting error -22 while loading /sys/kernel/btf/vmlinux, no idea why), so I downloaded libbpf 0.4.0 (https://bodhi.fedoraproject.org/updates/FEDORA-2021-990e9573f6). @natoscott, did it work for you with libbpf 0.3 from the Fedora repos?
Now biolatency works, but runqlat doesn't show any values.
Afaics that's because the symbol/kprobe got renamed in GCC 10.2, the Python based tools fixed it in iovisor/bcc#3315 by using a regex when attaching to that probe. The libbpf tool uses SEC(""tp_btf/sched_switch"") (https://lwn.net/Articles/838168/).
Things like this will keep happening (same for our current bcc-based tools), not sure if there is a better solution other than cluttering the code with many conditionals to check for different versions etc. (well, switching to tracepoints solves it, but in many cases there is no tracepoint available)? - Anyway, that's a thing for the maintainers to worry about, just wanted to bring it up.
Some minor things:

help texts don't work
afaics we can drop vmlinux.h now, as we have vmlinux_cut.h (and let's put the instructions how to generate it in the README.md)

I think the PR is in a good shape and ready for merging after addressing Nathan's comments and the two issues above.
And the memory footprint is impressive, using just 7 MB RSS 👍",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/natoscott,12,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-897281331,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","@natoscott, did it work for you with libbpf 0.3 from the Fedora repos?

No, I've had to use a libbpf git build.

I think the PR is in a good shape and ready for merging after addressing Nathan's comments and the two issues above.
And the memory footprint is impressive, using just 7 MB RSS +1

+1",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/jasonk000,13,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-899987756,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","OK!

iniparser included to parse ini files
configuration set up to allow override of inbuilt clang and llvm-strip path, and pass configuration settings to module
found a way to avoid customisation of BPF compilation based on version
set up help text
use of iovisor/bcc GPL codebase

Ideally we could actually auto-import all iovisor/bcc/libbpf-tools tools?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/andreasgerstmayr,14,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-901911450,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","OK!
* `iniparser` included to parse ini files


We have a vendored ini library (src/external/ini.c), and wrappers around it (src/libpcp_web/src/config.c), could you use this one instead of the new iniparser dependency?
(Please don't shoot the messenger 😃  )

* configuration set up to allow override of inbuilt clang and llvm-strip path, and pass configuration settings to module

* found a way to avoid customisation of BPF compilation based on version

* set up help text

* use of iovisor/bcc GPL codebase


Awesome!

Ideally we could actually auto-import all iovisor/bcc/libbpf-tools tools?

Sounds great! We can import all .bpf.c files, but we still need to translate the command-line args to config files, and put everything in the new module struct, right?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/jasonk000,15,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-902162773,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","We have a vendored ini library (src/external/ini.c), and wrappers around it (src/libpcp_web/src/config.c), could you use this one instead of the new iniparser dependency?

I didn't realise it was included, I looked in src/vendor only. I picked iniparser as it is lightweight and available everywhere we are going to build bpf.
Regardless, I've made the swap in 35c04e9. In my view, inih is less clean as it requires extracting pieces of libpcp_web. I'm not sure we want to refactor libpcp_web as part of this PR, but that could be a logical step.

Sounds great! We can import all .bpf.c files, but we still need to translate the command-line args to config files, and put everything in the new module struct, right?

Yes exactly, I've only ported the minimum to get the BPF framework running. There will need to be subsequent PR for any new scripts to import:

map each of them to configuration values
set up the pmns hierarchy for the module
work out how to model the outputs in PM data format (eg: how to handle string-like outputs)

It's a little bit of work for each one, but across all of them at once would be quite a lot. I'd suggest they come in as separate changes rather than trying to bring the whole lot in a single pass.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1351,2021-07-15T01:22:15Z,2021-08-23T17:55:56Z,2021-09-02T20:54:45Z,MERGED,True,2871,175,48,https://github.com/jasonk000,Add bpf pmda to read ELF-based bpf modules,1,[],https://github.com/performancecopilot/pcp/pull/1351,https://github.com/andreasgerstmayr,16,https://github.com/performancecopilot/pcp/pull/1351#issuecomment-903986981,"These provide an alternative implementation to the pmdabcc python module.
This results in a significant improvement in startup time and memory footprint for these tracing modules. Specifically this now runs in <6MB RSS instead of ~100+MB. The tradeoff is it is less dynamically configurable, however writing BCC and probes with python requires quite a bit of expertise, and is not significantly more complex to build a BPF-based module. In any event, this is extremely useful for us as it is a free 100MB of memory on every machine, and eliminates the need to ship bcc and LLVM / dependencies to every machine too.
Help needed / known issues

I haven't spent much (any) time looking at cross platform or cross OS and how to make sure the makefiles will work correctly. I'm not sure what's needed yet here.
This requires a recent-ish version of clang / llvm toolchain in order to compile the BPF to ELF. GCC has partial but incomplete support for BPF CO-RE and to produce the correct ELF files. If there is a way to work with GCC too I think that would be good to include.
The compilation assumes -lelf and -lbpf, I haven't recorded this in any makefiles
C is not a first language for me, and I haven't yet done a pass to check what free() etc I might have missed.
I have not yet tested this in the context of a DSO / htop environment but I think this would be valuable.

I will of course do a squash before continuing!","In my view, inih is less clean as it requires extracting pieces of libpcp_web. I'm not sure we want to refactor libpcp_web as part of this PR, but that could be a logical step.

+1, I'll take care of that


Sounds great! We can import all .bpf.c files, but we still need to translate the command-line args to config files, and put everything in the new module struct, right?

Yes exactly, I've only ported the minimum to get the BPF framework running. There will need to be subsequent PR for any new scripts to import:
* map each of them to configuration values

* set up the pmns hierarchy for the module

* work out how to model the outputs in PM data format (eg: how to handle string-like outputs)

It's a little bit of work for each one, but across all of them at once would be quite a lot. I'd suggest they come in as separate changes rather than trying to bring the whole lot in a single pass.

+1, can be done one module per PR
Thanks for your contributions Jason, this new PMDA is really awesome!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1352,2021-07-15T05:59:11Z,2021-07-15T11:14:12Z,2021-07-15T11:14:12Z,MERGED,True,43,18,6,https://github.com/goodwinos,libpcp_web coverity round2,8,[],https://github.com/performancecopilot/pcp/pull/1352,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1352,"Still have CID 341699 Use-after-free in libpcp_web/src/load.c when connect_pmapi_source_service() fails., which is giving me trouble with qa/1211 hanging. And probably a new resource leak due to changed error handling in an ENOMEM path (this will need to be ignored if it occurs).
6b6f36b49 libpcp_web: fix resource leak when default_labelset fails, CID340558
3f2b486fe libpcp_web: improve err handling in pmSeriesDiscoverInDom, CID328046
b824f69f6 libpcp_web: fix read overrun in series_lex, CID287946
8ea559f3d libpcp_web: add null check in series_solve, CID366052
a09855144 libpcp_web: check sdssplitlen in redis_search_text_prep, CID370640
84fd38401 libpcp_web: check async context init in redisSlotsInit, CID370635
b6c2c914b libpcp_web: imrpove ENOMEM err handling, CID366063
21642c00f libpcp_web: copy-paste err in series_redis_hash_expression CID372009","Still have CID 341699 Use-after-free in libpcp_web/src/load.c when connect_pmapi_source_service() fails., which is giving me trouble with qa/1211 hanging. And probably a new resource leak due to changed error handling in an ENOMEM path (this will need to be ignored if it occurs).
6b6f36b49 libpcp_web: fix resource leak when default_labelset fails, CID340558
3f2b486fe libpcp_web: improve err handling in pmSeriesDiscoverInDom, CID328046
b824f69f6 libpcp_web: fix read overrun in series_lex, CID287946
8ea559f3d libpcp_web: add null check in series_solve, CID366052
a09855144 libpcp_web: check sdssplitlen in redis_search_text_prep, CID370640
84fd38401 libpcp_web: check async context init in redisSlotsInit, CID370635
b6c2c914b libpcp_web: imrpove ENOMEM err handling, CID366063
21642c00f libpcp_web: copy-paste err in series_redis_hash_expression CID372009",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1353,2021-07-16T06:24:28Z,2021-07-16T07:48:48Z,2021-07-16T07:48:48Z,MERGED,True,18,6,3,https://github.com/goodwinos,Libpcp web coverity round3,2,[],https://github.com/performancecopilot/pcp/pull/1353,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1353,"Should be all done for libpcp_web now.
8c7680feb libpcp_web: split pmapi and redis setup into separate phases, CID341699
eb3d17c7a libpcp_web: fix another read overrun in series_lex, CID287946","Should be all done for libpcp_web now.
8c7680feb libpcp_web: split pmapi and redis setup into separate phases, CID341699
eb3d17c7a libpcp_web: fix another read overrun in series_lex, CID287946",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1354,2021-07-20T06:49:35Z,2021-07-23T06:50:26Z,2021-07-23T06:50:26Z,MERGED,True,533,93,16,https://github.com/goodwinos,"pmproxy/libpcp_web: add generic timer API, add generic server metrics",15,[],https://github.com/performancecopilot/pcp/pull/1354,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1354,"Add new thread-safe timer registeration API to libpcp_web. Also
add generic CPU and mem server metrics to libpcp_web using an
mmv_registry that is set up and passed in by the calling server.
Switch pmproxy to use this interface, replacing server_metrics_init().
Add new pmrep config for :pmproxy-resource. Remake qa/1689 with new
metrics for pmproxy.mem.datasz/maxrss and pmproxy.cpu.total/sys/user.
Still TODO doc/man updates and a bit more QA.","Add new thread-safe timer registeration API to libpcp_web. Also
add generic CPU and mem server metrics to libpcp_web using an
mmv_registry that is set up and passed in by the calling server.
Switch pmproxy to use this interface, replacing server_metrics_init().
Add new pmrep config for :pmproxy-resource. Remake qa/1689 with new
metrics for pmproxy.mem.datasz/maxrss and pmproxy.cpu.total/sys/user.
Still TODO doc/man updates and a bit more QA.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1354,2021-07-20T06:49:35Z,2021-07-23T06:50:26Z,2021-07-23T06:50:26Z,MERGED,True,533,93,16,https://github.com/goodwinos,"pmproxy/libpcp_web: add generic timer API, add generic server metrics",15,[],https://github.com/performancecopilot/pcp/pull/1354,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1354#issuecomment-884634390,"Add new thread-safe timer registeration API to libpcp_web. Also
add generic CPU and mem server metrics to libpcp_web using an
mmv_registry that is set up and passed in by the calling server.
Switch pmproxy to use this interface, replacing server_metrics_init().
Add new pmrep config for :pmproxy-resource. Remake qa/1689 with new
metrics for pmproxy.mem.datasz/maxrss and pmproxy.cpu.total/sys/user.
Still TODO doc/man updates and a bit more QA.","thanks for the review -

In src/pmproxy/src/server.c:

@@ -767,6 +737,7 @@ shutdown_ports(void *arg)
}

 uv_loop_close(proxy->events);


pmWebTimerReleaseAll();

@goodwinos doesn't this have to be called before uv_loop_close? (on the previous line) ... else how can the loop exit cleanly, with timers active timers.

nuked pmWebTimerReleaseAll. The timer is now stopped in pmWebTimerRelease when the last registered timer is released.

In src/libpcp_web/src/timer.c:
+int
+pmWebTimerSetMetricRegistry(struct mmv_registry *registry)
+{
+
Nuke the empty line.

nuked.

In src/libpcp_web/src/timer.c:

if (server_registry) {
fprintf(stderr, ""%s: Error: server instrumentation already registered\n"", pmGetProgname());
pmNotifyErr? (no need for pmGetProgname call also then)


Changed to use pmNotifyErr.

In src/libpcp_web/src/timer.c:
+

if ((value = mmv_lookup_value_desc(map, ""cpu.user"", NULL)) != NULL)
This code would be more efficient if it didn't lookup the MMV offset for every metric on every call. Cache these offsets ...


Done - see server_values[] in timer.c. Andreas and I determined the overheads of calling mmv_lookup_value_desc in every timer callback as basically not noticeable, but agree they build up unnecessarily over time.

[ Likewise throughout libpcp_web - ...]

will do, or will open an issue for next release.

In qa/1689.out:

@@ -141,11 +159,23 @@ pmproxy.discover.throttled_changed_callbacks PMID: 4.5.18 [filesystem changed ca
Help:
number of throttled filesystem change callbacks

-pmproxy.pid PMID: 4.1.0 [pmproxy PID]
+pmproxy.mem.datasz PMID: 4.1.5 [server virtual data size]
Delete all the left-over references to 'server' - they're not adding value to the help text.

done

In qa/1689.out:

@@ -141,11 +159,23 @@ pmproxy.discover.throttled_changed_callbacks PMID: 4.5.18 [filesystem changed ca
Help:
number of throttled filesystem change callbacks

-pmproxy.pid PMID: 4.1.0 [pmproxy PID]
+pmproxy.mem.datasz PMID: 4.1.5 [server virtual data size]

Data Type: 64-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff
Semantics: instant  Units: Kbyte
+Help:
+server process data memory size, returned from sbrk(2)
Ditto.


done

+pmproxy.mem.maxrss PMID: 4.1.4 [server maximum RSS]
Ditto ... etc, etc - through rest of file.

done

In qa/1689.out:

 Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff


 Semantics: discrete  Units: none

Help:
-PID for the current pmproxy invocation
+PID for the current server invocation
'PID' -> 'Identifier'
'server invocation' -> 'process'
... really this is all not super helpful long text - maybe just have shorttext for this one as its pretty obvious?
In src/include/pcp/pmwebapi.h:
..
+extern void pmWebTimerReleaseAll(void); /* stop and free all registered timers */
On reflection I don't think we should have a pmWebTimerReleaseAll

nuked, as above.
new qa and man pages coming later today.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1354,2021-07-20T06:49:35Z,2021-07-23T06:50:26Z,2021-07-23T06:50:26Z,MERGED,True,533,93,16,https://github.com/goodwinos,"pmproxy/libpcp_web: add generic timer API, add generic server metrics",15,[],https://github.com/performancecopilot/pcp/pull/1354,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/1354#issuecomment-884634860,"Add new thread-safe timer registeration API to libpcp_web. Also
add generic CPU and mem server metrics to libpcp_web using an
mmv_registry that is set up and passed in by the calling server.
Switch pmproxy to use this interface, replacing server_metrics_init().
Add new pmrep config for :pmproxy-resource. Remake qa/1689 with new
metrics for pmproxy.mem.datasz/maxrss and pmproxy.cpu.total/sys/user.
Still TODO doc/man updates and a bit more QA.",BTW am seeing very infrequent qa/1443 failures - not sure yet if that is related to these changes.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1355,2021-07-20T07:25:09Z,2021-08-30T06:30:13Z,2021-08-30T06:30:14Z,CLOSED,False,18,16,9,https://github.com/goodwinos,services: migrate all oneshot systemd services to type=simple,1,[],https://github.com/performancecopilot/pcp/pull/1355,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1355,"Systemd type=simple services (with Restart=no) can run for
a short time and then exit, much like a type=oneshot service
but without the need for all the KillMode=none baggage.
Systemd has a much more hands-off approach to simple services,
including not minding if forked subprocesses continue after a
oneshot script has exited.
This essentially changes all oneshot services from:
Type=oneshot
KillMode=none
To:
Type=simple
Restart=no
QA passes for the logctl group but this needs careful review and
a lot of soak time. As such these changes are somewhat experimental
at this stage.
Related: Red Hat BZ#1942844 - systemd-analyze complains about deprecated KillMode directive
Related: Fedora BZ#1897945 - pcp pmlogger services yield systemd killmode warning","Systemd type=simple services (with Restart=no) can run for
a short time and then exit, much like a type=oneshot service
but without the need for all the KillMode=none baggage.
Systemd has a much more hands-off approach to simple services,
including not minding if forked subprocesses continue after a
oneshot script has exited.
This essentially changes all oneshot services from:
Type=oneshot
KillMode=none
To:
Type=simple
Restart=no
QA passes for the logctl group but this needs careful review and
a lot of soak time. As such these changes are somewhat experimental
at this stage.
Related: Red Hat BZ#1942844 - systemd-analyze complains about deprecated KillMode directive
Related: Fedora BZ#1897945 - pcp pmlogger services yield systemd killmode warning",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1355,2021-07-20T07:25:09Z,2021-08-30T06:30:13Z,2021-08-30T06:30:14Z,CLOSED,False,18,16,9,https://github.com/goodwinos,services: migrate all oneshot systemd services to type=simple,1,[],https://github.com/performancecopilot/pcp/pull/1355,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1355#issuecomment-884574272,"Systemd type=simple services (with Restart=no) can run for
a short time and then exit, much like a type=oneshot service
but without the need for all the KillMode=none baggage.
Systemd has a much more hands-off approach to simple services,
including not minding if forked subprocesses continue after a
oneshot script has exited.
This essentially changes all oneshot services from:
Type=oneshot
KillMode=none
To:
Type=simple
Restart=no
QA passes for the logctl group but this needs careful review and
a lot of soak time. As such these changes are somewhat experimental
at this stage.
Related: Red Hat BZ#1942844 - systemd-analyze complains about deprecated KillMode directive
Related: Fedora BZ#1897945 - pcp pmlogger services yield systemd killmode warning","LGTM, but my views about systemd are well known, so perhaps I'm not the most objective reviewer.
I still think we need a root-to-branch audit of all of the systemd stuff in PCP by someone who's a real systemd expert.  I'm still seeing sporadic failure to restart the primary pmlogger in QA, and although this is outside the scope of the changes in this PR it does suggest the integration of PCP with systemd is still not quite right.
On the up side, getting rid of KillMode=none seems like a step in the right direction.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1355,2021-07-20T07:25:09Z,2021-08-30T06:30:13Z,2021-08-30T06:30:14Z,CLOSED,False,18,16,9,https://github.com/goodwinos,services: migrate all oneshot systemd services to type=simple,1,[],https://github.com/performancecopilot/pcp/pull/1355,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/1355#issuecomment-884639567,"Systemd type=simple services (with Restart=no) can run for
a short time and then exit, much like a type=oneshot service
but without the need for all the KillMode=none baggage.
Systemd has a much more hands-off approach to simple services,
including not minding if forked subprocesses continue after a
oneshot script has exited.
This essentially changes all oneshot services from:
Type=oneshot
KillMode=none
To:
Type=simple
Restart=no
QA passes for the logctl group but this needs careful review and
a lot of soak time. As such these changes are somewhat experimental
at this stage.
Related: Red Hat BZ#1942844 - systemd-analyze complains about deprecated KillMode directive
Related: Fedora BZ#1897945 - pcp pmlogger services yield systemd killmode warning","Thanks Ken - at this stage I'm intending to merge this early for pcp-5.3.3. That would give us a whole release cycle of soak and the opportunity to make further changes to our systemd configs and the logctl scripts.
That said, nuking killmode is good initial benefit (resolves 2 BZs). And using type=simple for our logctl service scripts seems to be a very natural fit compared to oneshot. I've been testing this on a 10 logger mini-farm for the past three days and it's stable - and qa -g logctl is consistently passing. Maybe we should merge it??",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1355,2021-07-20T07:25:09Z,2021-08-30T06:30:13Z,2021-08-30T06:30:14Z,CLOSED,False,18,16,9,https://github.com/goodwinos,services: migrate all oneshot systemd services to type=simple,1,[],https://github.com/performancecopilot/pcp/pull/1355,https://github.com/kmcdonell,4,https://github.com/performancecopilot/pcp/pull/1355#issuecomment-884648772,"Systemd type=simple services (with Restart=no) can run for
a short time and then exit, much like a type=oneshot service
but without the need for all the KillMode=none baggage.
Systemd has a much more hands-off approach to simple services,
including not minding if forked subprocesses continue after a
oneshot script has exited.
This essentially changes all oneshot services from:
Type=oneshot
KillMode=none
To:
Type=simple
Restart=no
QA passes for the logctl group but this needs careful review and
a lot of soak time. As such these changes are somewhat experimental
at this stage.
Related: Red Hat BZ#1942844 - systemd-analyze complains about deprecated KillMode directive
Related: Fedora BZ#1897945 - pcp pmlogger services yield systemd killmode warning","Your call ... I'd wait for early in the cycle for 5.3.3, but that's me being cautious.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1355,2021-07-20T07:25:09Z,2021-08-30T06:30:13Z,2021-08-30T06:30:14Z,CLOSED,False,18,16,9,https://github.com/goodwinos,services: migrate all oneshot systemd services to type=simple,1,[],https://github.com/performancecopilot/pcp/pull/1355,https://github.com/goodwinos,5,https://github.com/performancecopilot/pcp/pull/1355#issuecomment-908068732,"Systemd type=simple services (with Restart=no) can run for
a short time and then exit, much like a type=oneshot service
but without the need for all the KillMode=none baggage.
Systemd has a much more hands-off approach to simple services,
including not minding if forked subprocesses continue after a
oneshot script has exited.
This essentially changes all oneshot services from:
Type=oneshot
KillMode=none
To:
Type=simple
Restart=no
QA passes for the logctl group but this needs careful review and
a lot of soak time. As such these changes are somewhat experimental
at this stage.
Related: Red Hat BZ#1942844 - systemd-analyze complains about deprecated KillMode directive
Related: Fedora BZ#1897945 - pcp pmlogger services yield systemd killmode warning","Closing, as described above.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1356,2021-07-20T23:24:31Z,2021-07-21T03:30:10Z,2021-07-21T03:30:10Z,MERGED,True,1,2,1,https://github.com/shogo-matsumoto,"man/man1/pmseries.1: fix "":"" operator description",1,[],https://github.com/performancecopilot/pcp/pull/1356,https://github.com/shogo-matsumoto,1,https://github.com/performancecopilot/pcp/pull/1356,"The explanation seems to be incorrect.
I checked the followings:
# pmseries 'kernel.all.load{hostname:"".*""}'
# pmseries 'kernel.all.load{hostname:""*""}'
65a90920c72e890bd50333fa73cf23fd757d6377

# pmseries 'kernel.all.load{hostname~~"".*""}'
# pmseries 'kernel.all.load{hostname~~""*""}'
65a90920c72e890bd50333fa73cf23fd757d6377

# pmseries 'kernel.all.load{hostname=~"".*""}'
65a90920c72e890bd50333fa73cf23fd757d6377
# pmseries 'kernel.all.load{hostname=~""*""}'
pmseries: [Bad request] invalid regular expression ""*""","The explanation seems to be incorrect.
I checked the followings:
# pmseries 'kernel.all.load{hostname:"".*""}'
# pmseries 'kernel.all.load{hostname:""*""}'
65a90920c72e890bd50333fa73cf23fd757d6377

# pmseries 'kernel.all.load{hostname~~"".*""}'
# pmseries 'kernel.all.load{hostname~~""*""}'
65a90920c72e890bd50333fa73cf23fd757d6377

# pmseries 'kernel.all.load{hostname=~"".*""}'
65a90920c72e890bd50333fa73cf23fd757d6377
# pmseries 'kernel.all.load{hostname=~""*""}'
pmseries: [Bad request] invalid regular expression ""*""",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1358,2021-08-02T07:41:49Z,2021-08-03T04:00:17Z,2021-08-03T04:00:17Z,MERGED,True,1032,263,8,https://github.com/natoscott,"libpcp: initial data structures, macros and TI for v3 archives",1,[],https://github.com/performancecopilot/pcp/pull/1358,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1358,"Adds important macros and data structures we anticipate needing
for version 3 of the PCP archive format.  Code to read, write,
and make use of the new temporal index format is included here.
There should effectively be no change (yet) from this commit as
new code is added under the __PCP_EXPERIMENTAL_ARCHIVE_VERSION3
macro (which is unset) for the most part.","Adds important macros and data structures we anticipate needing
for version 3 of the PCP archive format.  Code to read, write,
and make use of the new temporal index format is included here.
There should effectively be no change (yet) from this commit as
new code is added under the __PCP_EXPERIMENTAL_ARCHIVE_VERSION3
macro (which is unset) for the most part.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1359,2021-08-05T04:12:43Z,2021-08-06T03:16:37Z,2021-08-06T03:16:38Z,MERGED,True,279,115,10,https://github.com/natoscott,pmdaproc: add proc.autogroup scheduling metrics,1,[],https://github.com/performancecopilot/pcp/pull/1359,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1359,"Two new metrics to help with tracking current the current
process prioritization with the Linux CFS implementation,
using /proc/PID/autogroup.
Internally in pmdaproc this new cluster bumped us over the
32bit boundary on the per-process flags field, so I split
that into two separate fields now (actually makes managing
the FLAG macros simpler).","Two new metrics to help with tracking current the current
process prioritization with the Linux CFS implementation,
using /proc/PID/autogroup.
Internally in pmdaproc this new cluster bumped us over the
32bit boundary on the per-process flags field, so I split
that into two separate fields now (actually makes managing
the FLAG macros simpler).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1360,2021-08-09T23:02:10Z,2021-08-10T00:10:24Z,2021-08-10T00:10:27Z,MERGED,True,40,19,12,https://github.com/natoscott,Fix a PMDA upgrade issue relating to python vs python3 switch,1,[],https://github.com/performancecopilot/pcp/pull/1360,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1360,Resolves Red Hat BZ #1988403.,Resolves Red Hat BZ #1988403.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1362,2021-08-16T01:24:54Z,2021-08-16T02:05:30Z,2021-08-16T02:05:30Z,MERGED,True,2449,1047,97,https://github.com/natoscott,Sync htop upstream updates,3,[],https://github.com/performancecopilot/pcp/pull/1362,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1362,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1363,2021-08-19T06:17:01Z,2021-08-19T23:53:56Z,2021-08-19T23:54:02Z,MERGED,True,1056,1663,42,https://github.com/natoscott,__pmLogLabel: changes to support log version independence,1,[],https://github.com/performancecopilot/pcp/pull/1363,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1363,"Internally, both v2 and v3 labels features are accessible
via the (common) __pmLogLabel structure.  A __pmTimestamp
is used therein for all log start time references.  We're
now using dynamically allocated strings for the hostname,
timezone and zoneinfo fields as well.
A stub __pmZoneinfo routine is added to libpcp - this will
be filled out with the pmcd.zoneinfo metric code via a new
commit, and pmdapmcd will share the implementation as it's
going to be used for local contexts and v3 archives also.
pmNewContextZone now uses the pmcd.zoneinfo metric when it
is available.
Next round of on-disk support for v3 archives is included
here too, under __PCP_EXPERIMENTAL_ARCHIVE_VERSION3 still.
Finally I've dropped qa/pmlogconv as this function will be
handled by pmlogrewrite for v2 to v3 conversions.","Internally, both v2 and v3 labels features are accessible
via the (common) __pmLogLabel structure.  A __pmTimestamp
is used therein for all log start time references.  We're
now using dynamically allocated strings for the hostname,
timezone and zoneinfo fields as well.
A stub __pmZoneinfo routine is added to libpcp - this will
be filled out with the pmcd.zoneinfo metric code via a new
commit, and pmdapmcd will share the implementation as it's
going to be used for local contexts and v3 archives also.
pmNewContextZone now uses the pmcd.zoneinfo metric when it
is available.
Next round of on-disk support for v3 archives is included
here too, under __PCP_EXPERIMENTAL_ARCHIVE_VERSION3 still.
Finally I've dropped qa/pmlogconv as this function will be
handled by pmlogrewrite for v2 to v3 conversions.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1364,2021-08-20T00:20:23Z,2021-08-20T05:26:43Z,2021-08-20T05:26:43Z,MERGED,True,19,18,4,https://github.com/natoscott,Minor QA and CI updates,3,[],https://github.com/performancecopilot/pcp/pull/1364,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1364,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1365,2021-08-23T10:02:02Z,2021-08-24T00:45:45Z,2021-08-24T00:45:45Z,MERGED,True,151,232,22,https://github.com/natoscott,__pmLogLabel: move to fixed-sized v3 log file labels,1,[],https://github.com/performancecopilot/pcp/pull/1365,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1365,"For simplicity, sanity and things like pmloglabel(1) that
want to change label hostnames/timezones (without redoing
all following result records), switch to a fixed size v3
label.  This label still has larger start timestamp field
of course, as well as larger hostname, timezone, zoneinfo
fields compared to v2.","For simplicity, sanity and things like pmloglabel(1) that
want to change label hostnames/timezones (without redoing
all following result records), switch to a fixed size v3
label.  This label still has larger start timestamp field
of course, as well as larger hostname, timezone, zoneinfo
fields compared to v2.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1391,2021-08-30T06:18:13Z,2021-08-31T00:48:04Z,2021-09-13T05:24:13Z,MERGED,True,54,16,14,https://github.com/goodwinos,services: switch logutil and pmieutil scripts from type oneshot to exec,1,['systemd'],https://github.com/performancecopilot/pcp/pull/1391,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1391,"Switches the ""daily"" and ""check"" and related services from Type=oneshot
to Type=exec (or Type=simple for older versions of systemd that do
not support Type=exec) and nuke KillMode=none. Explicitly specify
Restart=none, even though it's the default, to be clear that these
timer invoked service scripts are not long running service daemons
and are expected to exit normally.
These changes are a precursor to further improvements to the long
running PCP services and systemd integration.
All tests in the logutil and pmieutil QA groups are passing and soak
testing on several platforms has not shown any new issues (and the
systemd warnings about ""Support for KillMode=none is deprecated"" are
gone).
Resolves: RHBZ#1942844
Resolves: Fedora BZ#1897945
Resolves: #1186
Obsoletes the earlier PR#1355.","Switches the ""daily"" and ""check"" and related services from Type=oneshot
to Type=exec (or Type=simple for older versions of systemd that do
not support Type=exec) and nuke KillMode=none. Explicitly specify
Restart=none, even though it's the default, to be clear that these
timer invoked service scripts are not long running service daemons
and are expected to exit normally.
These changes are a precursor to further improvements to the long
running PCP services and systemd integration.
All tests in the logutil and pmieutil QA groups are passing and soak
testing on several platforms has not shown any new issues (and the
systemd warnings about ""Support for KillMode=none is deprecated"" are
gone).
Resolves: RHBZ#1942844
Resolves: Fedora BZ#1897945
Resolves: #1186
Obsoletes the earlier PR#1355.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1392,2021-08-30T06:37:00Z,2021-08-31T00:52:09Z,2021-08-31T00:52:09Z,MERGED,True,53,97,21,https://github.com/goodwinos,"Remove pmlogger_daily and pmlogger_daily_report poll services, replace with persistent timer setting",3,['systemd'],https://github.com/performancecopilot/pcp/pull/1392,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1392,Resolves issue #1390,Resolves issue #1390,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1394,2021-09-02T00:07:33Z,2021-09-02T23:39:56Z,2021-09-02T23:39:56Z,MERGED,True,4,4,2,https://github.com/natoscott,pmieconf: improve the CPU saturation rules,1,[],https://github.com/performancecopilot/pcp/pull/1394,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1394,"Resolves some formatting issues with the many_util pmie rule.
The back-quoting was incorrect, resulting in quotes appearing
in the syslog message strings.  The message accidentally used
the %c (source) pmie formatting string in %cpus as well.  One
other change here is to refactor the many_util rule so that a
singelton metric is the first part of the expression, not the
per-CPU metrics, so that the %h pmie format expansion gives a
single string when the rule evaluates to true.
Finally, bump up the min/max CPU count threshold that we use
to indicate a small/moderate-sized server (from 4 to 12) - we
use this to transition between different rules' effeciveness.","Resolves some formatting issues with the many_util pmie rule.
The back-quoting was incorrect, resulting in quotes appearing
in the syslog message strings.  The message accidentally used
the %c (source) pmie formatting string in %cpus as well.  One
other change here is to refactor the many_util rule so that a
singelton metric is the first part of the expression, not the
per-CPU metrics, so that the %h pmie format expansion gives a
single string when the rule evaluates to true.
Finally, bump up the min/max CPU count threshold that we use
to indicate a small/moderate-sized server (from 4 to 12) - we
use this to transition between different rules' effeciveness.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1395,2021-09-02T00:27:19Z,2021-09-02T23:39:56Z,2021-09-02T23:39:56Z,MERGED,True,7,17,6,https://github.com/natoscott,Python LGTM fixes,4,[],https://github.com/performancecopilot/pcp/pull/1395,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1395,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1395,2021-09-02T00:27:19Z,2021-09-02T23:39:56Z,2021-09-02T23:39:56Z,MERGED,True,7,17,6,https://github.com/natoscott,Python LGTM fixes,4,[],https://github.com/performancecopilot/pcp/pull/1395,https://github.com/apps/lgtm-com,2,https://github.com/performancecopilot/pcp/pull/1395#issuecomment-910958063,,"This pull request fixes 7 alerts when merging c3393fc into 7c2a873 - view on LGTM.com
fixed alerts:

2 for Special method has incorrect signature
2 for Implicit string concatenation in a list
1 for Suspicious unused loop iteration variable
1 for Wrong number of arguments for format
1 for Redundant assignment",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1396,2021-09-02T00:36:54Z,2021-09-02T23:39:56Z,2021-09-02T23:39:56Z,MERGED,True,11,0,2,https://github.com/natoscott,"build: enable gcc -Wshadow option by default, if not already on",1,[],https://github.com/performancecopilot/pcp/pull/1396,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1396,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1397,2021-09-02T05:43:47Z,2021-09-02T23:39:56Z,2021-09-02T23:39:56Z,MERGED,True,235,2,8,https://github.com/natoscott,pmieconf: add several per-disk pmie rule templates,1,[],https://github.com/performancecopilot/pcp/pull/1397,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1397,"New rules to detect several scenarios:

high device utilization and increasing queue length (mgoodwin)
high device utilization and increasing avg wait time (mgoodwin)
high system device utilization and high bandwidth (pportante)
high system device utilization and high iops (pportante)

The latter two require explict enabling in pmieconf as well as
customization per host to set the bandwidth/iops thresholds to
use for each host (and possibly system device name if not sda).","New rules to detect several scenarios:

high device utilization and increasing queue length (mgoodwin)
high device utilization and increasing avg wait time (mgoodwin)
high system device utilization and high bandwidth (pportante)
high system device utilization and high iops (pportante)

The latter two require explict enabling in pmieconf as well as
customization per host to set the bandwidth/iops thresholds to
use for each host (and possibly system device name if not sda).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1398,2021-09-04T02:30:09Z,2021-09-04T03:31:52Z,2021-09-04T03:31:55Z,MERGED,True,157,166,26,https://github.com/natoscott,Batch of compiler warning and LGTM fix ups,6,[],https://github.com/performancecopilot/pcp/pull/1398,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1398,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1399,2021-09-05T23:45:34Z,2021-09-07T01:31:13Z,2021-09-07T01:31:16Z,MERGED,True,37,44,12,https://github.com/natoscott,Next batch of build and compiler warning fixes,4,[],https://github.com/performancecopilot/pcp/pull/1399,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1399,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1399,2021-09-05T23:45:34Z,2021-09-07T01:31:13Z,2021-09-07T01:31:16Z,MERGED,True,37,44,12,https://github.com/natoscott,Next batch of build and compiler warning fixes,4,[],https://github.com/performancecopilot/pcp/pull/1399,https://github.com/apps/lgtm-com,2,https://github.com/performancecopilot/pcp/pull/1399#issuecomment-913259211,,"This pull request fixes 10 alerts when merging 7b12a8e into 9aab0ac - view on LGTM.com
fixed alerts:

10 for Local variable hides global variable",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1399,2021-09-05T23:45:34Z,2021-09-07T01:31:13Z,2021-09-07T01:31:16Z,MERGED,True,37,44,12,https://github.com/natoscott,Next batch of build and compiler warning fixes,4,[],https://github.com/performancecopilot/pcp/pull/1399,https://github.com/apps/lgtm-com,3,https://github.com/performancecopilot/pcp/pull/1399#issuecomment-913277137,,"This pull request fixes 12 alerts when merging d7601b1 into 392578b - view on LGTM.com
fixed alerts:

10 for Local variable hides global variable
2 for Wrong type of arguments to formatting function",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1400,2021-09-06T16:28:14Z,2022-03-16T01:48:42Z,2022-03-16T01:48:42Z,CLOSED,False,23,5,4,https://github.com/vmojzis,selinux: Use interface call instead of a simple rule,1,[],https://github.com/performancecopilot/pcp/pull/1400,https://github.com/vmojzis,1,https://github.com/performancecopilot/pcp/pull/1400,"The rule does not cover access to directories along the way the log
file. Also, interface already contains a list of all the required types.
This change is needed for the policy to work on systems where glusterd
module was removed.
Signed-off-by: Vit Mojzis vmojzis@redhat.com","The rule does not cover access to directories along the way the log
file. Also, interface already contains a list of all the required types.
This change is needed for the policy to work on systems where glusterd
module was removed.
Signed-off-by: Vit Mojzis vmojzis@redhat.com",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1400,2021-09-06T16:28:14Z,2022-03-16T01:48:42Z,2022-03-16T01:48:42Z,CLOSED,False,23,5,4,https://github.com/vmojzis,selinux: Use interface call instead of a simple rule,1,[],https://github.com/performancecopilot/pcp/pull/1400,https://github.com/vmojzis,2,https://github.com/performancecopilot/pcp/pull/1400#issuecomment-913763798,"The rule does not cover access to directories along the way the log
file. Also, interface already contains a list of all the required types.
This change is needed for the policy to work on systems where glusterd
module was removed.
Signed-off-by: Vit Mojzis vmojzis@redhat.com","The whole policy should be rewritten, please get in touch if that is something you're willing to work on. We'd be happy to help you through the process.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1400,2021-09-06T16:28:14Z,2022-03-16T01:48:42Z,2022-03-16T01:48:42Z,CLOSED,False,23,5,4,https://github.com/vmojzis,selinux: Use interface call instead of a simple rule,1,[],https://github.com/performancecopilot/pcp/pull/1400,https://github.com/vmojzis,3,https://github.com/performancecopilot/pcp/pull/1400#issuecomment-914361304,"The rule does not cover access to directories along the way the log
file. Also, interface already contains a list of all the required types.
This change is needed for the policy to work on systems where glusterd
module was removed.
Signed-off-by: Vit Mojzis vmojzis@redhat.com","It seems you already ""fixed"" the issue by removing the policy rule, but for future it would be great if you could at least put the whole policy into an ""optional_policy"" block (same as I did with the new macro). Or even better, assign each rule/group of rules it's own optional_policy block containing the appropriate requirements (using macros would simplify this quite a bit -- you can search for appropriate macros using ""audit2allow -R""). That way whenever some dependency is missing, the policy block using it will be automatically disabled (as opposed to the policy breaking).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1400,2021-09-06T16:28:14Z,2022-03-16T01:48:42Z,2022-03-16T01:48:42Z,CLOSED,False,23,5,4,https://github.com/vmojzis,selinux: Use interface call instead of a simple rule,1,[],https://github.com/performancecopilot/pcp/pull/1400,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/1400#issuecomment-915179339,"The rule does not cover access to directories along the way the log
file. Also, interface already contains a list of all the required types.
This change is needed for the policy to work on systems where glusterd
module was removed.
Signed-off-by: Vit Mojzis vmojzis@redhat.com","That way whenever some dependency is missing, the policy block using it will be automatically disabled (as opposed to the policy breaking).

That sounds great!
We'd like to tackle this, and also move the PCP policy out of the selinux-policy package (i.e. https://github.com/fedora-selinux/selinux-policy/blob/rawhide/policy/modules/contrib/pcp.te) into pcp-selinux (see Red Hat BZ https://bugzilla.redhat.com/show_bug.cgi?id=1941873) in a future release. We'll get back to you once we're at it, afaics we will definitely need some help with this change. Thanks!",True,{'THUMBS_UP': ['https://github.com/vmojzis']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1400,2021-09-06T16:28:14Z,2022-03-16T01:48:42Z,2022-03-16T01:48:42Z,CLOSED,False,23,5,4,https://github.com/vmojzis,selinux: Use interface call instead of a simple rule,1,[],https://github.com/performancecopilot/pcp/pull/1400,https://github.com/portante,5,https://github.com/performancecopilot/pcp/pull/1400#issuecomment-1028182654,"The rule does not cover access to directories along the way the log
file. Also, interface already contains a list of all the required types.
This change is needed for the policy to work on systems where glusterd
module was removed.
Signed-off-by: Vit Mojzis vmojzis@redhat.com",And I have also built and installed this PR on a RHEL 8.5 system and the installed module works.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1400,2021-09-06T16:28:14Z,2022-03-16T01:48:42Z,2022-03-16T01:48:42Z,CLOSED,False,23,5,4,https://github.com/vmojzis,selinux: Use interface call instead of a simple rule,1,[],https://github.com/performancecopilot/pcp/pull/1400,https://github.com/natoscott,6,https://github.com/performancecopilot/pcp/pull/1400#issuecomment-1068646797,"The rule does not cover access to directories along the way the log
file. Also, interface already contains a list of all the required types.
This change is needed for the policy to work on systems where glusterd
module was removed.
Signed-off-by: Vit Mojzis vmojzis@redhat.com",This was part of the series from @portante recently merged.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1401,2021-09-06T16:55:07Z,2021-09-06T17:14:33Z,2021-10-14T14:06:52Z,MERGED,True,6,8,2,https://github.com/andreasgerstmayr,pmdabpftrace: lgtm fixes,2,[],https://github.com/performancecopilot/pcp/pull/1401,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1401,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1401,2021-09-06T16:55:07Z,2021-09-06T17:14:33Z,2021-10-14T14:06:52Z,MERGED,True,6,8,2,https://github.com/andreasgerstmayr,pmdabpftrace: lgtm fixes,2,[],https://github.com/performancecopilot/pcp/pull/1401,https://github.com/apps/lgtm-com,2,https://github.com/performancecopilot/pcp/pull/1401#issuecomment-913776659,,"This pull request fixes 2 alerts when merging dd58f07 into 36c04e1 - view on LGTM.com
fixed alerts:

2 for Except block handles 'BaseException'",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1402,2021-09-08T00:33:24Z,2021-09-08T01:33:41Z,2021-09-08T01:33:41Z,MERGED,True,3,1,2,https://github.com/natoscott,Couple more LGTM.com fixes for CI,2,[],https://github.com/performancecopilot/pcp/pull/1402,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1402,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1402,2021-09-08T00:33:24Z,2021-09-08T01:33:41Z,2021-09-08T01:33:41Z,MERGED,True,3,1,2,https://github.com/natoscott,Couple more LGTM.com fixes for CI,2,[],https://github.com/performancecopilot/pcp/pull/1402,https://github.com/apps/lgtm-com,2,https://github.com/performancecopilot/pcp/pull/1402#issuecomment-914735658,,"This pull request fixes 1 alert when merging 5358377 into 467f68a - view on LGTM.com
fixed alerts:

1 for Membership test with a non-container",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1403,2021-09-08T09:35:40Z,2021-09-09T06:25:13Z,2021-10-14T14:06:52Z,MERGED,True,1,1,1,https://github.com/andreasgerstmayr,ci: suppress LGTM alert re inheritance,1,[],https://github.com/performancecopilot/pcp/pull/1403,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1403,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1404,2021-09-08T23:00:57Z,2021-09-09T06:24:58Z,2021-09-09T06:24:58Z,MERGED,True,104,26,8,https://github.com/natoscott,pmdalinux: add -A option for overriding permissions checks,1,[],https://github.com/performancecopilot/pcp/pull/1404,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1404,"The mem.slabinfo metrics enforce by default the same access
requirements of the kernel when sampling /proc/slabinfo i.e.
only root users have access.  This change provides the same
mechanism pmdaproc(1) has for overriding these changes, i.e.
an opt-in, security-override command line option for folks
who want to open up access.  This is important when logging
these metrics, for example, as pmlogger runs unprivileged -
but the same rule applies to all other PMAPI client tools.
A brief man page note and new test 1956 to exercise the code
are added as well.
Resolves Red Hat BZ #1962902","The mem.slabinfo metrics enforce by default the same access
requirements of the kernel when sampling /proc/slabinfo i.e.
only root users have access.  This change provides the same
mechanism pmdaproc(1) has for overriding these changes, i.e.
an opt-in, security-override command line option for folks
who want to open up access.  This is important when logging
these metrics, for example, as pmlogger runs unprivileged -
but the same rule applies to all other PMAPI client tools.
A brief man page note and new test 1956 to exercise the code
are added as well.
Resolves Red Hat BZ #1962902",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1405,2021-09-09T00:33:43Z,2021-09-09T06:24:58Z,2021-09-10T02:15:40Z,MERGED,True,207,11,10,https://github.com/natoscott,libpcp_mmv: add new convenience routines for value set/inc,1,[],https://github.com/performancecopilot/pcp/pull/1405,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1405,"Adds two new convenience routines that allow direct value
setting in MMV client libraries instead of casting values
to double first.
A missing man page is added - mmv_set_value(3) - and both
this and an existing mmv_inc_value(3) page are updated to
document the new API variants.","Adds two new convenience routines that allow direct value
setting in MMV client libraries instead of casting values
to double first.
A missing man page is added - mmv_set_value(3) - and both
this and an existing mmv_inc_value(3) page are updated to
document the new API variants.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1406,2021-09-10T04:45:06Z,2021-09-10T06:19:54Z,2021-09-10T06:25:06Z,MERGED,True,156,28,7,https://github.com/natoscott,pmlogrewrite: add support for producing version 3 archives,1,[],https://github.com/performancecopilot/pcp/pull/1406,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1406,"Adds new test qa/1829 to exercise this functionality.
Resolves #1386","Adds new test qa/1829 to exercise this functionality.
Resolves #1386",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1406,2021-09-10T04:45:06Z,2021-09-10T06:19:54Z,2021-09-10T06:25:06Z,MERGED,True,156,28,7,https://github.com/natoscott,pmlogrewrite: add support for producing version 3 archives,1,[],https://github.com/performancecopilot/pcp/pull/1406,https://github.com/apps/lgtm-com,2,https://github.com/performancecopilot/pcp/pull/1406#issuecomment-916645428,"Adds new test qa/1829 to exercise this functionality.
Resolves #1386","This pull request fixes 1 alert when merging 86c7839 into 03bfff1 - view on LGTM.com
fixed alerts:

1 for Local variable hides global variable",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1407,2021-09-10T05:31:10Z,2021-09-10T23:16:23Z,2021-09-10T23:16:23Z,MERGED,True,371,349,4,https://github.com/goodwinos,libpcp_web: avoid duplicate instname labels in /metrics response,1,[],https://github.com/performancecopilot/pcp/pull/1407,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1407,"If a PMDA already returns instname and instid labels for a
non-singular metric, don't insert them again in the /metrics
webscrape response because they will be duplicates. Duplicate
labels are not OpenMetrics compliant and break some downstream
consumers of the /metrics end-point, e.g. prometheus.
qa/1191 and 1221 are remade with duplicate_hostname_label.txt,
which tickles this bug. An additional QA test to exercise the
updated webapi /metrics code is still coming.","If a PMDA already returns instname and instid labels for a
non-singular metric, don't insert them again in the /metrics
webscrape response because they will be duplicates. Duplicate
labels are not OpenMetrics compliant and break some downstream
consumers of the /metrics end-point, e.g. prometheus.
qa/1191 and 1221 are remade with duplicate_hostname_label.txt,
which tickles this bug. An additional QA test to exercise the
updated webapi /metrics code is still coming.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1408,2021-09-13T02:49:59Z,2021-09-13T03:45:12Z,2021-09-13T03:45:19Z,MERGED,True,135,124,6,https://github.com/natoscott,pmproxy: more robust fix for instname/instid duplicates,1,[],https://github.com/performancecopilot/pcp/pull/1408,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1408,"Reworks the previous change to ensure duplicate labels for
openmetrics scraping are not created, for the special case
of the instname and instid pseudo-labels.
This removes the use of strstr to detect instname inside the
JSON label string as this approach produces false positives
when instname= is embedded within a label value or simply a
similar label name like myinstname.  The approach now makes
use of the pmLabelSet information before merging it to form
the final combined labels string.
Related to #1407","Reworks the previous change to ensure duplicate labels for
openmetrics scraping are not created, for the special case
of the instname and instid pseudo-labels.
This removes the use of strstr to detect instname inside the
JSON label string as this approach produces false positives
when instname= is embedded within a label value or simply a
similar label name like myinstname.  The approach now makes
use of the pmLabelSet information before merging it to form
the final combined labels string.
Related to #1407",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1409,2021-09-14T01:09:35Z,2021-09-14T01:24:59Z,2021-09-14T01:24:59Z,MERGED,True,155,107,17,https://github.com/natoscott,Docs and quality updates,4,[],https://github.com/performancecopilot/pcp/pull/1409,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1409,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1411,2021-09-16T05:12:59Z,2021-09-16T07:44:39Z,2021-09-16T22:38:36Z,MERGED,True,10,2,2,https://github.com/natoscott,Initgroups memory bloat,2,[],https://github.com/performancecopilot/pcp/pull/1411,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1411,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1412,2021-09-17T05:18:34Z,2021-09-17T07:55:56Z,2021-09-17T07:55:57Z,MERGED,True,71,75,20,https://github.com/natoscott,More -Wshadow and LGTM warning fixes,10,[],https://github.com/performancecopilot/pcp/pull/1412,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1412,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1412,2021-09-17T05:18:34Z,2021-09-17T07:55:56Z,2021-09-17T07:55:57Z,MERGED,True,71,75,20,https://github.com/natoscott,More -Wshadow and LGTM warning fixes,10,[],https://github.com/performancecopilot/pcp/pull/1412,https://github.com/apps/lgtm-com,2,https://github.com/performancecopilot/pcp/pull/1412#issuecomment-921527502,,"This pull request fixes 32 alerts when merging 720debe into 4875602 - view on LGTM.com
fixed alerts:

23 for Ambiguously signed bit-field member
7 for Comparison result is always the same
2 for Local variable hides global variable",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1413,2021-09-17T13:59:11Z,2021-09-22T09:02:40Z,2021-10-14T14:06:18Z,MERGED,True,823,62,30,https://github.com/andreasgerstmayr,libpcp: use urlencoding for hostspec parameter values,1,[],https://github.com/performancecopilot/pcp/pull/1413,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1413,"Resolves: #1305
The new urldecoding function in decode_uri_component in libpcp/strings.c is effectively the same as http_decode in pmproxy/http.c, except using char* instead of sds (because sds is not available in libpcp).
To avoid having two functions doing the same, I'd suggest using the urldecoding function of libpcp also for pmproxy. Should I export this function in libpcp/exports? It's a simple, standalone, utility function (and currently has no __pm prefix). What do you suggest @natoscott?","Resolves: #1305
The new urldecoding function in decode_uri_component in libpcp/strings.c is effectively the same as http_decode in pmproxy/http.c, except using char* instead of sds (because sds is not available in libpcp).
To avoid having two functions doing the same, I'd suggest using the urldecoding function of libpcp also for pmproxy. Should I export this function in libpcp/exports? It's a simple, standalone, utility function (and currently has no __pm prefix). What do you suggest @natoscott?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1413,2021-09-17T13:59:11Z,2021-09-22T09:02:40Z,2021-10-14T14:06:18Z,MERGED,True,823,62,30,https://github.com/andreasgerstmayr,libpcp: use urlencoding for hostspec parameter values,1,[],https://github.com/performancecopilot/pcp/pull/1413,https://github.com/apps/lgtm-com,2,https://github.com/performancecopilot/pcp/pull/1413#issuecomment-921874610,"Resolves: #1305
The new urldecoding function in decode_uri_component in libpcp/strings.c is effectively the same as http_decode in pmproxy/http.c, except using char* instead of sds (because sds is not available in libpcp).
To avoid having two functions doing the same, I'd suggest using the urldecoding function of libpcp also for pmproxy. Should I export this function in libpcp/exports? It's a simple, standalone, utility function (and currently has no __pm prefix). What do you suggest @natoscott?","This pull request introduces 1 alert when merging 82ddc1d into 720debe - view on LGTM.com
new alerts:

1 for Implicit function declaration",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1413,2021-09-17T13:59:11Z,2021-09-22T09:02:40Z,2021-10-14T14:06:18Z,MERGED,True,823,62,30,https://github.com/andreasgerstmayr,libpcp: use urlencoding for hostspec parameter values,1,[],https://github.com/performancecopilot/pcp/pull/1413,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1413#issuecomment-922684398,"Resolves: #1305
The new urldecoding function in decode_uri_component in libpcp/strings.c is effectively the same as http_decode in pmproxy/http.c, except using char* instead of sds (because sds is not available in libpcp).
To avoid having two functions doing the same, I'd suggest using the urldecoding function of libpcp also for pmproxy. Should I export this function in libpcp/exports? It's a simple, standalone, utility function (and currently has no __pm prefix). What do you suggest @natoscott?","[...]
To avoid having two functions doing the same, I'd suggest using the urldecoding function of libpcp also for pmproxy. Should I export this function in libpcp/exports? It's a simple, standalone, utility function (and currently has no __pm prefix). What do you suggest @natoscott?

Yep, I agree having a single shared implementation in libpcp would be a good thing.  The naming would be best if tweaked to match libpcp conventions - something simple like pmstrencode and pmstrdecode I guess.  Or even simpler, without the the 'str' perhaps?  Any of those is fine IMO.  If its necessary to explain the intended use (C string URI component encoding/decoding), a brief man page might be best rather than going for long, segmented function names (like pmencode_uri_component and pmdecode_uri_component).
In sds.c the encoding routine uses a cryptic 'repr' name (sdscatrepr) - IMO that's taking short names too far :) but there's a happy medium to be found.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1413,2021-09-17T13:59:11Z,2021-09-22T09:02:40Z,2021-10-14T14:06:18Z,MERGED,True,823,62,30,https://github.com/andreasgerstmayr,libpcp: use urlencoding for hostspec parameter values,1,[],https://github.com/performancecopilot/pcp/pull/1413,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/1413#issuecomment-923167776,"Resolves: #1305
The new urldecoding function in decode_uri_component in libpcp/strings.c is effectively the same as http_decode in pmproxy/http.c, except using char* instead of sds (because sds is not available in libpcp).
To avoid having two functions doing the same, I'd suggest using the urldecoding function of libpcp also for pmproxy. Should I export this function in libpcp/exports? It's a simple, standalone, utility function (and currently has no __pm prefix). What do you suggest @natoscott?","[...]
To avoid having two functions doing the same, I'd suggest using the urldecoding function of libpcp also for pmproxy. Should I export this function in libpcp/exports? It's a simple, standalone, utility function (and currently has no __pm prefix). What do you suggest @natoscott?

Yep, I agree having a single shared implementation in libpcp would be a good thing. The naming would be best if tweaked to match libpcp conventions - something simple like pmstrencode and pmstrdecode I guess. Or even simpler, without the the 'str' perhaps? Any of those is fine IMO.

Ok, I've renamed them to __pmStrEncode / __pmStrDecode.

If its necessary to explain the intended use (C string URI component encoding/decoding), a brief man page might be best rather than going for long, segmented function names (like pmencode_uri_component and pmdecode_uri_component).

Regarding documentation: What about annotating the function, and generating the man page with doxygen (or alternatives)? In many editors/IDEs you can hover over function names (or struct members) and it shows the comment/documentation, without leaving the editor (that would be a separate discussion/issue, just wanted to mention it).

In sds.c the encoding routine uses a cryptic 'repr' name (sdscatrepr) - IMO that's taking short names too far :) but there's a happy medium to be found.

I guess that's related to the repr() function in Python:
>>> print(repr(""\t\r\n""))
'\t\r\n'

It comes handy when you have a string with special/non-printable characters like carriage returns or tabs and want to see them, afaics same what sdscatrepr is doing.",True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1413,2021-09-17T13:59:11Z,2021-09-22T09:02:40Z,2021-10-14T14:06:18Z,MERGED,True,823,62,30,https://github.com/andreasgerstmayr,libpcp: use urlencoding for hostspec parameter values,1,[],https://github.com/performancecopilot/pcp/pull/1413,https://github.com/natoscott,5,https://github.com/performancecopilot/pcp/pull/1413#issuecomment-923649555,"Resolves: #1305
The new urldecoding function in decode_uri_component in libpcp/strings.c is effectively the same as http_decode in pmproxy/http.c, except using char* instead of sds (because sds is not available in libpcp).
To avoid having two functions doing the same, I'd suggest using the urldecoding function of libpcp also for pmproxy. Should I export this function in libpcp/exports? It's a simple, standalone, utility function (and currently has no __pm prefix). What do you suggest @natoscott?","[...]
Regarding documentation: What about annotating the function, and generating the man page with doxygen (or alternatives)?



For little helper functions like this, I have no problem with that (and maybe no man page at all is fine here too - its such a small, specialised pair of routines).  For most of the PMAPI though, this isn't going to work - there's too much content, formatting, and other man page specific details for the pages to become generated without substantial lost information (and quality).

I guess that's related to the repr() function in Python:

Ah, interesting - I didn't know that!  Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1413,2021-09-17T13:59:11Z,2021-09-22T09:02:40Z,2021-10-14T14:06:18Z,MERGED,True,823,62,30,https://github.com/andreasgerstmayr,libpcp: use urlencoding for hostspec parameter values,1,[],https://github.com/performancecopilot/pcp/pull/1413,https://github.com/andreasgerstmayr,6,https://github.com/performancecopilot/pcp/pull/1413#issuecomment-924224554,"Resolves: #1305
The new urldecoding function in decode_uri_component in libpcp/strings.c is effectively the same as http_decode in pmproxy/http.c, except using char* instead of sds (because sds is not available in libpcp).
To avoid having two functions doing the same, I'd suggest using the urldecoding function of libpcp also for pmproxy. Should I export this function in libpcp/exports? It's a simple, standalone, utility function (and currently has no __pm prefix). What do you suggest @natoscott?","Regarding documentation: What about annotating the function, and generating the man page with doxygen (or alternatives)?



For little helper functions like this, I have no problem with that (and maybe no man page at all is fine here too - its such a small, specialised pair of routines). For most of the PMAPI though, this isn't going to work - there's too much content, formatting, and other man page specific details for the pages to become generated without substantial lost information (and quality).

I agree, it'll be difficult to get the same level of formatting in code comments :|
I noticed an issue with some username/password combinations - turns out base64_decode returns a sds string where sdslen(x) != strlen(x) when the base64 string is padded (e.g. SQ==). I've fixed this case now and added cmocka tests for it.
While at it, I though the name pmStrEncode is not specific enough - is it base64 encoding? url encoding, or some other encoding? So I went with pmUrlEncode finally. I'll merge it after CI if there are no objections.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1413,2021-09-17T13:59:11Z,2021-09-22T09:02:40Z,2021-10-14T14:06:18Z,MERGED,True,823,62,30,https://github.com/andreasgerstmayr,libpcp: use urlencoding for hostspec parameter values,1,[],https://github.com/performancecopilot/pcp/pull/1413,https://github.com/natoscott,7,https://github.com/performancecopilot/pcp/pull/1413#issuecomment-924444374,"Resolves: #1305
The new urldecoding function in decode_uri_component in libpcp/strings.c is effectively the same as http_decode in pmproxy/http.c, except using char* instead of sds (because sds is not available in libpcp).
To avoid having two functions doing the same, I'd suggest using the urldecoding function of libpcp also for pmproxy. Should I export this function in libpcp/exports? It's a simple, standalone, utility function (and currently has no __pm prefix). What do you suggest @natoscott?","While at it, I though the name pmStrEncode is not specific enough - is it base64 encoding? url encoding, or some other encoding? So I went with pmUrlEncode finally. I'll merge it after CI if there are no objections.

No objections here - thanks, great work!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1415,2021-09-23T04:39:00Z,2021-09-23T08:33:13Z,2021-09-24T02:43:04Z,MERGED,True,1062,671,38,https://github.com/natoscott,pmproxy MMV improvements,7,[],https://github.com/performancecopilot/pcp/pull/1415,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1415,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1416,2021-09-24T01:51:07Z,2021-09-24T02:57:37Z,2021-09-24T03:48:28Z,MERGED,True,203,219,28,https://github.com/natoscott,Docs and quality updates,18,[],https://github.com/performancecopilot/pcp/pull/1416,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1416,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1416,2021-09-24T01:51:07Z,2021-09-24T02:57:37Z,2021-09-24T03:48:28Z,MERGED,True,203,219,28,https://github.com/natoscott,Docs and quality updates,18,[],https://github.com/performancecopilot/pcp/pull/1416,https://github.com/apps/lgtm-com,2,https://github.com/performancecopilot/pcp/pull/1416#issuecomment-926301484,,"This pull request fixes 21 alerts when merging fda60dd into 7030c48 - view on LGTM.com
fixed alerts:

10 for Local variable hides global variable
7 for Cleartext storage of sensitive information in file
4 for Declaration hides parameter",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1416,2021-09-24T01:51:07Z,2021-09-24T02:57:37Z,2021-09-24T03:48:28Z,MERGED,True,203,219,28,https://github.com/natoscott,Docs and quality updates,18,[],https://github.com/performancecopilot/pcp/pull/1416,https://github.com/apps/lgtm-com,3,https://github.com/performancecopilot/pcp/pull/1416#issuecomment-926320544,,"This pull request fixes 21 alerts when merging f0474be into 7030c48 - view on LGTM.com
fixed alerts:

10 for Local variable hides global variable
7 for Cleartext storage of sensitive information in file
4 for Declaration hides parameter",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1420,2021-09-27T18:09:50Z,2021-09-28T00:24:29Z,2021-09-28T00:24:29Z,MERGED,True,1,1,1,https://github.com/kurik,Fix of parsing 'reord_seen' and 'busy' values in sockets pmda,1,[],https://github.com/performancecopilot/pcp/pull/1420,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/1420,"On s390x arch I was observing some unexpected values in the output of the 'sockets' pmda. A deeper analysis shows, there is a copy&paste issue in the source code, replacing the 'busy' value with a value from 'reord_seen' metric, while the 'reord_seen' metric is left unset.
The issue is also present on other arches (x86_64, ppc64le, aarch64) , however for some reason (probably memory alignment or big/little endian, etc.) the values of 'reord_seen' and 'busy' metrics are somehow meaningful, so it did not catch my attention.","On s390x arch I was observing some unexpected values in the output of the 'sockets' pmda. A deeper analysis shows, there is a copy&paste issue in the source code, replacing the 'busy' value with a value from 'reord_seen' metric, while the 'reord_seen' metric is left unset.
The issue is also present on other arches (x86_64, ppc64le, aarch64) , however for some reason (probably memory alignment or big/little endian, etc.) the values of 'reord_seen' and 'busy' metrics are somehow meaningful, so it did not catch my attention.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1421,2021-09-27T23:32:23Z,2021-09-28T00:33:57Z,2021-09-28T00:34:11Z,MERGED,True,6,16,3,https://github.com/natoscott,pmdabpf: resolve help text warning from pmdaInit,1,[],https://github.com/performancecopilot/pcp/pull/1421,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1421,"Help text is generated dynamically by pmdabpf nowadays so
pass NULL to interfaces setting up static help text files
used by other PMDAs.
Fixes: #1419","Help text is generated dynamically by pmdabpf nowadays so
pass NULL to interfaces setting up static help text files
used by other PMDAs.
Fixes: #1419",True,{'THUMBS_UP': ['https://github.com/andreasgerstmayr']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1422,2021-09-28T06:09:10Z,2021-09-30T03:14:22Z,2021-09-30T05:28:58Z,MERGED,True,2,2,1,https://github.com/kurik,Fix of a syntax error in pmdads389.pl,1,[],https://github.com/performancecopilot/pcp/pull/1422,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/1422,"Fix of a syntax error in pmdads389.pl .
This pull request partially fixes bz1966122 .","Fix of a syntax error in pmdads389.pl .
This pull request partially fixes bz1966122 .",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1423,2021-09-28T07:45:04Z,2021-09-30T03:14:22Z,2021-09-30T03:14:23Z,MERGED,True,1232,0,6,https://github.com/natoscott,pcp-atop: handle different event naming of ix86arch PMUs,1,[],https://github.com/performancecopilot/pcp/pull/1423,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1423,"The ix86arch PMU, and hence [ix86arch] section of perfevent.conf,
uses a different (singular form) name for INSTRUCTIONS_RETIRED to
everyone else.  Deal with this quirk such that we fallback to the
alternate name if the regular plural form cannot be found.
New test qa/1978 emulates this scenario using pmlogrewrite.
Resolves Red Hat BZ #1986264","The ix86arch PMU, and hence [ix86arch] section of perfevent.conf,
uses a different (singular form) name for INSTRUCTIONS_RETIRED to
everyone else.  Deal with this quirk such that we fallback to the
alternate name if the regular plural form cannot be found.
New test qa/1978 emulates this scenario using pmlogrewrite.
Resolves Red Hat BZ #1986264",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1425,2021-09-29T16:32:24Z,2021-09-30T03:14:22Z,2021-09-30T05:20:13Z,MERGED,True,14,14,4,https://github.com/kurik,Fix of data types in hacluster pmda,1,[],https://github.com/performancecopilot/pcp/pull/1425,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/1425,"Fix of datatypes for ha_cluster.corosync.member_votes.node_id and
ha_cluster.drbd.connections_* metrics.
Delivers a fix of  bz2008298.","Fix of datatypes for ha_cluster.corosync.member_votes.node_id and
ha_cluster.drbd.connections_* metrics.
Delivers a fix of  bz2008298.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1426,2021-09-30T02:11:08Z,2021-09-30T03:14:22Z,2021-09-30T03:14:30Z,MERGED,True,1472,11,16,https://github.com/natoscott,Enable pcp-atop cpu frequency scaling reports,4,[],https://github.com/performancecopilot/pcp/pull/1426,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1426,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1427,2021-09-30T04:48:05Z,2021-10-05T06:00:12Z,2021-10-05T06:39:41Z,MERGED,True,8,1,5,https://github.com/SunilMohanAdapa,pmlogger: install a zeroconf file for setting interval,1,[],https://github.com/performancecopilot/pcp/pull/1427,https://github.com/SunilMohanAdapa,1,https://github.com/performancecopilot/pcp/pull/1427,"On Debian, a package may not modify configuration files of other packages in
maintainer scripts. This fails the puiparts test[1] will result in eventual
removal[2] of the package and its dependents from Debian.
10.7.3: ""[...] The easy way to achieve this behavior is to make the
configuration file a conffile. [...] This implies that the default
version will be part of the package distribution, and must not be
modified by the maintainer scripts during installation (or at any
other time).""
On systemd systems, avoid editing the configuration file installed by the pcp
package from pcp-zeroconf. Ship a systemd service drop-in configuration file
with the pcp-zeroconf which adds an extra environmental variable when running
pmlogger. This can be overridden by a user by creating a file in
/etc/systemd/system/pmlogger.service.d/. Removing the pcp-zeroconf package and
keeping pcp package will remove the configuration brought in by pcp-zeroconf.
Tests performed:


Build with ./Makepkgs --nonrpm . Build succeeds and built all the .deb file.


Install the .deb files specifically pcp and pcp-zeroconf on Debian unstable.
Install succeeds.


After installation the file /etc/default/pmlogger is not modified.


systemctl show pmlogger.service | grep Environment shows:
Environment=PMLOGGER_INTERVAL=10


After installation, pmlogger service is running. systemctl status
pmlogger.service


The pmlogger service has received the environmental variable. cat
/proc/{pid}/environ | tr '\0' '\n' | grep PMLOGGER_INTERVAL
PMLOGGER_INTERVAL=10


Remove pcp-zeroconf. systemctl daemon-reload. systemctl restart
pmlogger.service. systemctl show pmlogger.service | grep Environment shows empty
output.


Links:


https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.3-1.log


https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=990223


Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","On Debian, a package may not modify configuration files of other packages in
maintainer scripts. This fails the puiparts test[1] will result in eventual
removal[2] of the package and its dependents from Debian.
10.7.3: ""[...] The easy way to achieve this behavior is to make the
configuration file a conffile. [...] This implies that the default
version will be part of the package distribution, and must not be
modified by the maintainer scripts during installation (or at any
other time).""
On systemd systems, avoid editing the configuration file installed by the pcp
package from pcp-zeroconf. Ship a systemd service drop-in configuration file
with the pcp-zeroconf which adds an extra environmental variable when running
pmlogger. This can be overridden by a user by creating a file in
/etc/systemd/system/pmlogger.service.d/. Removing the pcp-zeroconf package and
keeping pcp package will remove the configuration brought in by pcp-zeroconf.
Tests performed:


Build with ./Makepkgs --nonrpm . Build succeeds and built all the .deb file.


Install the .deb files specifically pcp and pcp-zeroconf on Debian unstable.
Install succeeds.


After installation the file /etc/default/pmlogger is not modified.


systemctl show pmlogger.service | grep Environment shows:
Environment=PMLOGGER_INTERVAL=10


After installation, pmlogger service is running. systemctl status
pmlogger.service


The pmlogger service has received the environmental variable. cat
/proc/{pid}/environ | tr '\0' '\n' | grep PMLOGGER_INTERVAL
PMLOGGER_INTERVAL=10


Remove pcp-zeroconf. systemctl daemon-reload. systemctl restart
pmlogger.service. systemctl show pmlogger.service | grep Environment shows empty
output.


Links:


https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.3-1.log


https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=990223


Signed-off-by: Sunil Mohan Adapa sunil@medhas.org",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1427,2021-09-30T04:48:05Z,2021-10-05T06:00:12Z,2021-10-05T06:39:41Z,MERGED,True,8,1,5,https://github.com/SunilMohanAdapa,pmlogger: install a zeroconf file for setting interval,1,[],https://github.com/performancecopilot/pcp/pull/1427,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1427#issuecomment-934092573,"On Debian, a package may not modify configuration files of other packages in
maintainer scripts. This fails the puiparts test[1] will result in eventual
removal[2] of the package and its dependents from Debian.
10.7.3: ""[...] The easy way to achieve this behavior is to make the
configuration file a conffile. [...] This implies that the default
version will be part of the package distribution, and must not be
modified by the maintainer scripts during installation (or at any
other time).""
On systemd systems, avoid editing the configuration file installed by the pcp
package from pcp-zeroconf. Ship a systemd service drop-in configuration file
with the pcp-zeroconf which adds an extra environmental variable when running
pmlogger. This can be overridden by a user by creating a file in
/etc/systemd/system/pmlogger.service.d/. Removing the pcp-zeroconf package and
keeping pcp package will remove the configuration brought in by pcp-zeroconf.
Tests performed:


Build with ./Makepkgs --nonrpm . Build succeeds and built all the .deb file.


Install the .deb files specifically pcp and pcp-zeroconf on Debian unstable.
Install succeeds.


After installation the file /etc/default/pmlogger is not modified.


systemctl show pmlogger.service | grep Environment shows:
Environment=PMLOGGER_INTERVAL=10


After installation, pmlogger service is running. systemctl status
pmlogger.service


The pmlogger service has received the environmental variable. cat
/proc/{pid}/environ | tr '\0' '\n' | grep PMLOGGER_INTERVAL
PMLOGGER_INTERVAL=10


Remove pcp-zeroconf. systemctl daemon-reload. systemctl restart
pmlogger.service. systemctl show pmlogger.service | grep Environment shows empty
output.


Links:


https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.3-1.log


https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=990223


Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","Thanks Sunil, I've merged your patch (and also did the equivalent RPM spec changes).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1427,2021-09-30T04:48:05Z,2021-10-05T06:00:12Z,2021-10-05T06:39:41Z,MERGED,True,8,1,5,https://github.com/SunilMohanAdapa,pmlogger: install a zeroconf file for setting interval,1,[],https://github.com/performancecopilot/pcp/pull/1427,https://github.com/SunilMohanAdapa,3,https://github.com/performancecopilot/pcp/pull/1427#issuecomment-934104621,"On Debian, a package may not modify configuration files of other packages in
maintainer scripts. This fails the puiparts test[1] will result in eventual
removal[2] of the package and its dependents from Debian.
10.7.3: ""[...] The easy way to achieve this behavior is to make the
configuration file a conffile. [...] This implies that the default
version will be part of the package distribution, and must not be
modified by the maintainer scripts during installation (or at any
other time).""
On systemd systems, avoid editing the configuration file installed by the pcp
package from pcp-zeroconf. Ship a systemd service drop-in configuration file
with the pcp-zeroconf which adds an extra environmental variable when running
pmlogger. This can be overridden by a user by creating a file in
/etc/systemd/system/pmlogger.service.d/. Removing the pcp-zeroconf package and
keeping pcp package will remove the configuration brought in by pcp-zeroconf.
Tests performed:


Build with ./Makepkgs --nonrpm . Build succeeds and built all the .deb file.


Install the .deb files specifically pcp and pcp-zeroconf on Debian unstable.
Install succeeds.


After installation the file /etc/default/pmlogger is not modified.


systemctl show pmlogger.service | grep Environment shows:
Environment=PMLOGGER_INTERVAL=10


After installation, pmlogger service is running. systemctl status
pmlogger.service


The pmlogger service has received the environmental variable. cat
/proc/{pid}/environ | tr '\0' '\n' | grep PMLOGGER_INTERVAL
PMLOGGER_INTERVAL=10


Remove pcp-zeroconf. systemctl daemon-reload. systemctl restart
pmlogger.service. systemctl show pmlogger.service | grep Environment shows empty
output.


Links:


https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.3-1.log


https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=990223


Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","@goodwinos Thank you for the merge. I missed the RPM changes and also didn't have a build setup for testing the changes, thanks for taking care of those changes. Also looks like the ownership on the directory is likely incorrect. Created an issue (#1437) for that.
Hope this change can get tagged and uploaded to Debian before pcp, cockpit and freedombox get removed from Debian due to this issue on the 10th. CC: @natoscott.
Many thanks for pcp, folks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1427,2021-09-30T04:48:05Z,2021-10-05T06:00:12Z,2021-10-05T06:39:41Z,MERGED,True,8,1,5,https://github.com/SunilMohanAdapa,pmlogger: install a zeroconf file for setting interval,1,[],https://github.com/performancecopilot/pcp/pull/1427,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/1427#issuecomment-934112056,"On Debian, a package may not modify configuration files of other packages in
maintainer scripts. This fails the puiparts test[1] will result in eventual
removal[2] of the package and its dependents from Debian.
10.7.3: ""[...] The easy way to achieve this behavior is to make the
configuration file a conffile. [...] This implies that the default
version will be part of the package distribution, and must not be
modified by the maintainer scripts during installation (or at any
other time).""
On systemd systems, avoid editing the configuration file installed by the pcp
package from pcp-zeroconf. Ship a systemd service drop-in configuration file
with the pcp-zeroconf which adds an extra environmental variable when running
pmlogger. This can be overridden by a user by creating a file in
/etc/systemd/system/pmlogger.service.d/. Removing the pcp-zeroconf package and
keeping pcp package will remove the configuration brought in by pcp-zeroconf.
Tests performed:


Build with ./Makepkgs --nonrpm . Build succeeds and built all the .deb file.


Install the .deb files specifically pcp and pcp-zeroconf on Debian unstable.
Install succeeds.


After installation the file /etc/default/pmlogger is not modified.


systemctl show pmlogger.service | grep Environment shows:
Environment=PMLOGGER_INTERVAL=10


After installation, pmlogger service is running. systemctl status
pmlogger.service


The pmlogger service has received the environmental variable. cat
/proc/{pid}/environ | tr '\0' '\n' | grep PMLOGGER_INTERVAL
PMLOGGER_INTERVAL=10


Remove pcp-zeroconf. systemctl daemon-reload. systemctl restart
pmlogger.service. systemctl show pmlogger.service | grep Environment shows empty
output.


Links:


https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.3-1.log


https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=990223


Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","@goodwinos Thank you for the merge. I missed the RPM changes and also didn't have a build setup for testing the changes, thanks for taking care of those changes. Also looks like the ownership on the directory is likely incorrect. Created an issue (#1437) for that.
Hope this change can get tagged and uploaded to Debian before pcp, cockpit and freedombox get removed from Debian due to this issue on the 10th. CC: @natoscott.

@SunilMohanAdapa yep, I'll begin working on that tomorrow.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1428,2021-10-01T01:35:55Z,2021-10-03T03:03:30Z,2021-10-03T20:54:40Z,MERGED,True,34,2,3,https://github.com/goodwinos,Add pmlogger_check --only-primary option flag,2,[],https://github.com/performancecopilot/pcp/pull/1428,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1428,Logical opposite of pmlogger_check --skip-primary. Will be used (in subsequent commits) by pmlogger.service to start only the primary logger. Man page for pmlogger_check(1) is also updated.,Logical opposite of pmlogger_check --skip-primary. Will be used (in subsequent commits) by pmlogger.service to start only the primary logger. Man page for pmlogger_check(1) is also updated.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1428,2021-10-01T01:35:55Z,2021-10-03T03:03:30Z,2021-10-03T20:54:40Z,MERGED,True,34,2,3,https://github.com/goodwinos,Add pmlogger_check --only-primary option flag,2,[],https://github.com/performancecopilot/pcp/pull/1428,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1428#issuecomment-931867459,Logical opposite of pmlogger_check --skip-primary. Will be used (in subsequent commits) by pmlogger.service to start only the primary logger. Man page for pmlogger_check(1) is also updated.,"Hi Mark ... I was also expecting a change to pmlogger.service along the lines
Environment=""PMLOGGER_CHECK_PARAMS=-C --only-primary""

to match what is done for pmlogger_check.service and then some additional glue to get this from the systemd service definition down thru the pmlogger RC script and onto pmlogger_check.
Without this, I think the status quo would be unchanged.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1428,2021-10-01T01:35:55Z,2021-10-03T03:03:30Z,2021-10-03T20:54:40Z,MERGED,True,34,2,3,https://github.com/goodwinos,Add pmlogger_check --only-primary option flag,2,[],https://github.com/performancecopilot/pcp/pull/1428,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/1428#issuecomment-931885973,Logical opposite of pmlogger_check --skip-primary. Will be used (in subsequent commits) by pmlogger.service to start only the primary logger. Man page for pmlogger_check(1) is also updated.,"Hi Mark ... I was also expecting a change to pmlogger.service along the lines
Environment=""PMLOGGER_CHECK_PARAMS=-C --only-primary""

to match what is done for pmlogger_check.service and then some additional glue to get this from the systemd service definition down thru the pmlogger RC script and onto pmlogger_check. Without this, I think the status quo would be unchanged.

yes - I hadn't done that bit yet - wanted to discuss the hooks. I'll add those changes
thanks",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1428,2021-10-01T01:35:55Z,2021-10-03T03:03:30Z,2021-10-03T20:54:40Z,MERGED,True,34,2,3,https://github.com/goodwinos,Add pmlogger_check --only-primary option flag,2,[],https://github.com/performancecopilot/pcp/pull/1428,https://github.com/goodwinos,4,https://github.com/performancecopilot/pcp/pull/1428#issuecomment-932202700,Logical opposite of pmlogger_check --skip-primary. Will be used (in subsequent commits) by pmlogger.service to start only the primary logger. Man page for pmlogger_check(1) is also updated.,"have been testing on the lab farm, seems to be mostly working but some of the pmloggers are not staying up for some reason so I'l have to continue with this in the morning",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1428,2021-10-01T01:35:55Z,2021-10-03T03:03:30Z,2021-10-03T20:54:40Z,MERGED,True,34,2,3,https://github.com/goodwinos,Add pmlogger_check --only-primary option flag,2,[],https://github.com/performancecopilot/pcp/pull/1428,https://github.com/kmcdonell,5,https://github.com/performancecopilot/pcp/pull/1428#issuecomment-932853670,Logical opposite of pmlogger_check --skip-primary. Will be used (in subsequent commits) by pmlogger.service to start only the primary logger. Man page for pmlogger_check(1) is also updated.,"Hi Mark, this looks good and I've merged it into my tree and kicked the tyres a bit locally.
Only question I have is this bit in the pmlogger.service.in file:
# no start timeout - for logger farms
TimeoutStartSec=infinity

Specifically, I believe the logger farm management is delegated to the pmlogger_check service, so I don't follow this comment and the setting.
However this is benign enough and we can revisit it next week.
So in the interim I'm going to approve/merge this PR as I have other stuff in the same general area that I'd like to avoid merge conflicts over.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1428,2021-10-01T01:35:55Z,2021-10-03T03:03:30Z,2021-10-03T20:54:40Z,MERGED,True,34,2,3,https://github.com/goodwinos,Add pmlogger_check --only-primary option flag,2,[],https://github.com/performancecopilot/pcp/pull/1428,https://github.com/goodwinos,6,https://github.com/performancecopilot/pcp/pull/1428#issuecomment-933023865,Logical opposite of pmlogger_check --skip-primary. Will be used (in subsequent commits) by pmlogger.service to start only the primary logger. Man page for pmlogger_check(1) is also updated.,"Hi Ken, agree that timeout shouldn't be needed any more (it was originally there to stop systemd killing farm nodes after the timeout). But now the primary under pmlogger.service and the farm (if any) under pmlogger_check.service are separated, the killing has stopped.
I have the extra glue needed to activate this - was testing over the week-end on a high latency cluster and also on a low latency, but didn't get to merge it (too busy with other stuff). Seems to be fine now - to start the primary and the farm immediately we need systemctl start pmlogger pmlogger_check. Or just start pmlogger and then pmlogger_check timer will trigger to start the farm in <= 30 mins. So will I push the remaining glue changes straight to main or will this upset your merge (not sure what other changes you have pending - is that parser latency improvements?)
Once this settles down, I'd like to consider making every farm node it's own service (using templates - as an evolved version of #896 (comment)).
thanks",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1429,2021-10-01T17:54:11Z,2021-10-06T17:25:20Z,2021-10-14T14:06:16Z,MERGED,True,9,9,2,https://github.com/andreasgerstmayr,build: require libbpf >= 0.4.0,1,[],https://github.com/performancecopilot/pcp/pull/1429,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1429,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1430,2021-10-01T18:13:42Z,2021-10-06T17:24:58Z,2021-10-14T14:06:25Z,MERGED,True,117,0,2,https://github.com/andreasgerstmayr,pmdabpf: add man page,1,[],https://github.com/performancecopilot/pcp/pull/1430,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1430,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1431,2021-10-02T22:52:56Z,2021-10-19T22:25:08Z,2021-10-19T22:25:08Z,MERGED,True,1697,199,26,https://github.com/kmcdonell,Harden netstat and snmp parsing for Linux PMDA,18,[],https://github.com/performancecopilot/pcp/pull/1431,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1431,All the details are in the message associated with commit a72b5ed,All the details are in the message associated with commit a72b5ed,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1431,2021-10-02T22:52:56Z,2021-10-19T22:25:08Z,2021-10-19T22:25:08Z,MERGED,True,1697,199,26,https://github.com/kmcdonell,Harden netstat and snmp parsing for Linux PMDA,18,[],https://github.com/performancecopilot/pcp/pull/1431,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1431#issuecomment-937329835,All the details are in the message associated with commit a72b5ed,"Hi Ken, on review the code changes all look good but there is qa fallout (see below). The onetrip checks will reduce log babble and make the parser more efficient. Item 2 regarding MAXPATHLEN hasn't been changed (though you mentioned all were done except item 5) .. should we fix that one at least to make the buffer a credible size?
I checked qa groups sanity and pmda.linux and there are a number of failures as follows:
qa/872 fails:
""Error: no such file or directory"" instead of expected values for all metrics in the procnet-snmp-2.6.32 and procnet-snmp-3.19.0 subtests
qa/957 fails: extra stderr unknown field warnings for a bunch of TcpExt and MPTcpExt fields
These might need to be made version specific, or filtered out. I assume these new fields were found now that entire lines are being parsed instead of silently ignore or something.
qa/1805 fails:
unknown fields for a bunch of unknown TcpExt fields (same TcpExt fields as qa/957 above)
Nathan also mentioned: there's also a typo in the new proc_net_netstat.c comment - ""refeshing""",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1431,2021-10-02T22:52:56Z,2021-10-19T22:25:08Z,2021-10-19T22:25:08Z,MERGED,True,1697,199,26,https://github.com/kmcdonell,Harden netstat and snmp parsing for Linux PMDA,18,[],https://github.com/performancecopilot/pcp/pull/1431,https://github.com/kmcdonell,3,https://github.com/performancecopilot/pcp/pull/1431#issuecomment-937364424,All the details are in the message associated with commit a72b5ed,"Thanks Mark.
MAXPATHLEN should probably be the same size as header[] (for most metrics I thing the header line will be longer than the data line).  I'll fix that.
qa/872: I've not changed anything in the snmp code (although it does need the same makeover I think).  So I suspect that failure may be unrelated to this code change, ... unless I've really screwed something up!  qa/872 is passing for me with these changes in place on vm34.
qa/957: the failures here indicate the Linux PMDA needs to be fixed ... the code change has exposed the fact the the PMDA has not tracked recent kernel changes ... I think this is an example of the QA test doing exactly the right thing.  Once this code is merged, it will trigger a new issue (from me) to fix the Linux PMDA ... I don't think there is any need for conditional work in the QA test.
qa/1805: exactly the same issue as qa/957 ... this is added goodness (from a QA perspective).
And typo will be fixed in next commit.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1431,2021-10-02T22:52:56Z,2021-10-19T22:25:08Z,2021-10-19T22:25:08Z,MERGED,True,1697,199,26,https://github.com/kmcdonell,Harden netstat and snmp parsing for Linux PMDA,18,[],https://github.com/performancecopilot/pcp/pull/1431,https://github.com/kmcdonell,4,https://github.com/performancecopilot/pcp/pull/1431#issuecomment-945211997,All the details are in the message associated with commit a72b5ed,"I've made the pmda changes for the missing metrics, but need some help.  Can anyone suggest suitable help text for the following new metrics:
network.mptcp.mpcapablesynackrx
network.mptcp.mpcapablesyntx
network.mptcp.mpfallbacktokeninit
network.tcp.pfmemallocdrop
network.tcp.tcpbacklogcoalesce
network.tcp.tcpfastopenactivefail
network.tcp.tcpfastopenblackhole
network.tcp.tcpmd5failure
network.tcp.tcpmemorypressureschrono",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1431,2021-10-02T22:52:56Z,2021-10-19T22:25:08Z,2021-10-19T22:25:08Z,MERGED,True,1697,199,26,https://github.com/kmcdonell,Harden netstat and snmp parsing for Linux PMDA,18,[],https://github.com/performancecopilot/pcp/pull/1431,https://github.com/mbaldessari,5,https://github.com/performancecopilot/pcp/pull/1431#issuecomment-945422309,All the details are in the message associated with commit a72b5ed,"So I scavenged around and here is a first pass at descriptions for these counters:
network.mptcp.mpcapablesynackrx - Received SYN/ACK with MP_CAPABLE flag
network.mptcp.mpcapablesyntx - Sent SYN with MP_CAPABLE flag
network.mptcp.mpfallbacktokeninit - Could not init/allocate token
network.tcp.pfmemallocdrop - Dropped skb allocated from pfmemalloc which did not have the SOCK_MEMALLOC flag
network.tcp.tcpbacklogcoalesce - Number of coalesced packets that were in the backlog queue
network.tcp.tcpfastopenactivefail - Fast Open attempts (SYN/data) failed because the remote does not accept it or the attempts timed out.
network.tcp.tcpfastopenblackhole - Number of times the TFO blackhole has been enabled
network.tcp.tcpmd5failure - Counter for drops caused by md5 mismatches
network.tcp.tcpmemorypressureschrono - Cumulative counter tracking duration of memory pressure events in ms",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1431,2021-10-02T22:52:56Z,2021-10-19T22:25:08Z,2021-10-19T22:25:08Z,MERGED,True,1697,199,26,https://github.com/kmcdonell,Harden netstat and snmp parsing for Linux PMDA,18,[],https://github.com/performancecopilot/pcp/pull/1431,https://github.com/kmcdonell,6,https://github.com/performancecopilot/pcp/pull/1431#issuecomment-946322571,All the details are in the message associated with commit a72b5ed,"@mbaldessari thanks so much for this help text.
However, I've discovered some more dodgey logic in the Linux PMDA code that parses the /proc/net/netstat and /proc/net/snmap files.  Once this is fixed, there are another 52 (!) fields in a recent version of the netstat file that are not being exported.
The list below would also benefit from any insights you may have.
I picked up one case from your last response where the metric is counting ""msec"", not ""events"" (aka packets, bytes, connection attempts, errors, etc) ... this is also helpful as I can fix the metadata that describes the units for the metrics.
network.ip.reasmoverlaps
network.tcp.tcphystarttraindetect
network.tcp.tcphystarttraincwnd
network.tcp.tcphystartdelaydetect
network.tcp.tcphystartdelaycwnd
network.tcp.tcpackskippedsynrecv
network.tcp.tcpackskippedpaws
network.tcp.tcpackskippedseq
network.tcp.tcpackskippedfinwait2
network.tcp.tcpackskippedtimewait
network.tcp.tcpackskippedchallenge
network.tcp.tcpwinprobe
network.tcp.tcpkeepalive
network.tcp.tcpmtupfail
network.tcp.tcpmtupsuccess
network.tcp.tcpdelivered
network.tcp.tcpdeliveredce
network.tcp.tcpackcompressed
network.tcp.tcpzerowindowdrop
network.tcp.tcprcvqdrop
network.tcp.tcpwqueuetoobig
network.tcp.tcpfastopenpassivealtkey
network.tcp.tcptimeoutrehash
network.tcp.tcpduplicatedatarehash
network.tcp.tcpdsackrecvsegs
network.tcp.tcpdsackignoreddubious
network.tcp.tcpmigratereqsuccess
network.tcp.tcpmigratereqfailure
network.udp.ignoredmulti
network.udp.memerrors
network.udplite.ignoredmulti
network.udplite.memerrors
network.mptcp.dssnomatchtcp
network.mptcp.datacsumerr
network.mptcp.ofoqueuetail
network.mptcp.ofoqueue
network.mptcp.ofomerge
network.mptcp.nodssinwindow
network.mptcp.duplicatedata
network.mptcp.addaddr
network.mptcp.echoadd
network.mptcp.portadd
network.mptcp.mpjoinportsynrx
network.mptcp.mpjoinportsynackrx
network.mptcp.mpjoinportackrx
network.mptcp.mismatchportsynrx
network.mptcp.mismatchportackrx
network.mptcp.rmaddr
network.mptcp.rmsubflow
network.mptcp.mppriotx
network.mptcp.mppriorx
network.mptcp.rcvpruned",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1432,2021-10-04T09:29:09Z,2021-10-13T02:39:53Z,2021-10-17T23:31:48Z,MERGED,True,1161,312,33,https://github.com/natoscott,"libpcp, pmcd: initial code for a new pmLookupDescs PMAPI routine",1,[],https://github.com/performancecopilot/pcp/pull/1432,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1432,"This implements handling of a new PDU in libpcp that allows bulk
processing of metric descriptors.  The aim is to assist with the
reduction of round-trip PDUs during PMAPI client startup, which
has been observed expensive over high latency networks for tools
dealing with many hundreds of metrics (like pmlogger).
New pmcd code is added and the PCP protocol is extended to allow
new clients to detect remote pmcd support is also in place.  The
implementation for archives and local context mode simply uses a
loop around pmLookupDesc, effectively, and special case handling
is in place for derived metrics.","This implements handling of a new PDU in libpcp that allows bulk
processing of metric descriptors.  The aim is to assist with the
reduction of round-trip PDUs during PMAPI client startup, which
has been observed expensive over high latency networks for tools
dealing with many hundreds of metrics (like pmlogger).
New pmcd code is added and the PCP protocol is extended to allow
new clients to detect remote pmcd support is also in place.  The
implementation for archives and local context mode simply uses a
loop around pmLookupDesc, effectively, and special case handling
is in place for derived metrics.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1432,2021-10-04T09:29:09Z,2021-10-13T02:39:53Z,2021-10-17T23:31:48Z,MERGED,True,1161,312,33,https://github.com/natoscott,"libpcp, pmcd: initial code for a new pmLookupDescs PMAPI routine",1,[],https://github.com/performancecopilot/pcp/pull/1432,https://github.com/apps/lgtm-com,2,https://github.com/performancecopilot/pcp/pull/1432#issuecomment-937498868,"This implements handling of a new PDU in libpcp that allows bulk
processing of metric descriptors.  The aim is to assist with the
reduction of round-trip PDUs during PMAPI client startup, which
has been observed expensive over high latency networks for tools
dealing with many hundreds of metrics (like pmlogger).
New pmcd code is added and the PCP protocol is extended to allow
new clients to detect remote pmcd support is also in place.  The
implementation for archives and local context mode simply uses a
loop around pmLookupDesc, effectively, and special case handling
is in place for derived metrics.","This pull request introduces 2 alerts when merging 3895664 into 85f836a - view on LGTM.com
new alerts:

2 for Lossy pointer cast",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1438,2021-10-06T05:00:15Z,2021-10-06T06:09:33Z,2021-10-06T06:09:44Z,MERGED,True,143,59,5,https://github.com/natoscott,pcp-atop: report user and group names using PMAPI calls,1,[],https://github.com/performancecopilot/pcp/pull/1438,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1438,"This tackles a failure in CI of test qa/1978 due to different
user and group names being reported on test systems.  The root
cause turned out to be use of getpwuid and getgrgid inside the
atop printing routines.  These map IDs to localhost names - we
can do better and use the names from the archive or (possibly
remote) pmcd, which contains the actual map from the collector
host.","This tackles a failure in CI of test qa/1978 due to different
user and group names being reported on test systems.  The root
cause turned out to be use of getpwuid and getgrgid inside the
atop printing routines.  These map IDs to localhost names - we
can do better and use the names from the archive or (possibly
remote) pmcd, which contains the actual map from the collector
host.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1440,2021-10-12T04:43:40Z,2021-10-13T02:39:53Z,2021-10-13T02:39:53Z,MERGED,True,59,2,4,https://github.com/natoscott,pmdakvm: add several new KVM kernel metrics,1,[],https://github.com/performancecopilot/pcp/pull/1440,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1440,"Adds new metrics from the 5.14 kernel series and updates
QA filters for the optional set (some older metrics have
also been dropped from the kernel).","Adds new metrics from the 5.14 kernel series and updates
QA filters for the optional set (some older metrics have
also been dropped from the kernel).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1441,2021-10-13T01:13:59Z,2021-10-13T02:35:37Z,2021-10-13T02:35:38Z,MERGED,True,85,10,7,https://github.com/goodwinos,services: remove run-level check in pmlogger systemd service config,1,[],https://github.com/performancecopilot/pcp/pull/1441,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1441,"Remove the run-level check (pmlogger_check -C flag) since systemd
uses targets for run-level checks. The run-level checks were causing
the pmlogger service to fail to manually start (via systemctl start
pmlogger) when the service is disabled.
New test qa/1889 checks pmlogger still starts even if disabled (on
systemd platforms only). qa/808 is also reworked since it was running
pmlogger_check directly and was failing every second run.","Remove the run-level check (pmlogger_check -C flag) since systemd
uses targets for run-level checks. The run-level checks were causing
the pmlogger service to fail to manually start (via systemctl start
pmlogger) when the service is disabled.
New test qa/1889 checks pmlogger still starts even if disabled (on
systemd platforms only). qa/808 is also reworked since it was running
pmlogger_check directly and was failing every second run.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1442,2021-10-13T22:54:14Z,2021-10-14T02:44:05Z,2021-10-14T02:58:53Z,MERGED,True,8572,148,105,https://github.com/natoscott,Transition more 'external' code to 'vendor' git subtrees,6,[],https://github.com/performancecopilot/pcp/pull/1442,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1442,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1443,2021-10-14T03:52:16Z,2021-10-14T06:16:34Z,2021-10-14T06:16:34Z,MERGED,True,1416,173,48,https://github.com/kmcdonell,"pmlogger speed up, libpcp, debian packaging, kitchen sink",32,[],https://github.com/performancecopilot/pcp/pull/1443,https://github.com/kmcdonell,1,https://github.com/performancecopilot/pcp/pull/1443,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1444,2021-10-14T18:03:41Z,2021-10-21T09:50:17Z,2021-11-05T16:57:36Z,MERGED,True,17,11,3,https://github.com/andreasgerstmayr,libpcp: fix authentication on systems where hostname != fqdn,1,[],https://github.com/performancecopilot/pcp/pull/1444,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1444,"SASL stores username@hostname in the SASL DB (see sasldblistusers2(8))
saslpasswd2(8) uses gethostname() to determine the hostname
sasl_server_new() uses get_fqhostname() to determine a FQDN if the hostname parameter is NULL
therefore, if the hostname doesn't match the FQDN of the system running pmcd, the authentication was broken
as a workaround, let's use gethostname() as parameter to sasl_server_new","SASL stores username@hostname in the SASL DB (see sasldblistusers2(8))
saslpasswd2(8) uses gethostname() to determine the hostname
sasl_server_new() uses get_fqhostname() to determine a FQDN if the hostname parameter is NULL
therefore, if the hostname doesn't match the FQDN of the system running pmcd, the authentication was broken
as a workaround, let's use gethostname() as parameter to sasl_server_new",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1445,2021-10-14T18:08:30Z,2021-10-21T09:53:18Z,2021-11-05T16:58:24Z,MERGED,True,236,96,12,https://github.com/andreasgerstmayr,pmdabpf: use bpf skeletons,2,[],https://github.com/performancecopilot/pcp/pull/1445,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1445,"This way we don't need to ship bpf object files, and it makes the
development of libbpf modules easier.","This way we don't need to ship bpf object files, and it makes the
development of libbpf modules easier.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1446,2021-10-15T03:16:35Z,2021-10-15T03:37:00Z,2021-10-15T03:37:46Z,MERGED,True,5,371,2,https://github.com/natoscott,pmdalinux: cull empty NUMA zones from zoneinfo instance domain,1,[],https://github.com/performancecopilot/pcp/pull/1446,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1446,"The associated values are always zero and not useful so remove
them from the indom and less data is logged for these metrics.
Resolves Red Hat BZ #1985519","The associated values are always zero and not useful so remove
them from the indom and less data is logged for these metrics.
Resolves Red Hat BZ #1985519",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1447,2021-10-15T15:34:39Z,2022-04-08T14:02:38Z,2022-04-08T14:02:38Z,MERGED,True,255,1,6,https://github.com/andreasgerstmayr,pmdabpf valgrind tests,1,['CI'],https://github.com/performancecopilot/pcp/pull/1447,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1447,depends on #1445,depends on #1445,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1447,2021-10-15T15:34:39Z,2022-04-08T14:02:38Z,2022-04-08T14:02:38Z,MERGED,True,255,1,6,https://github.com/andreasgerstmayr,pmdabpf valgrind tests,1,['CI'],https://github.com/performancecopilot/pcp/pull/1447,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1447#issuecomment-945884463,depends on #1445,"this PR is on hold currently, most likely I won't get time before the next release to work on that.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1447,2021-10-15T15:34:39Z,2022-04-08T14:02:38Z,2022-04-08T14:02:38Z,MERGED,True,255,1,6,https://github.com/andreasgerstmayr,pmdabpf valgrind tests,1,['CI'],https://github.com/performancecopilot/pcp/pull/1447,https://github.com/andreasgerstmayr,3,https://github.com/performancecopilot/pcp/pull/1447#issuecomment-1071012059,depends on #1445,"blocked on https://bugs.kde.org/show_bug.cgi?id=451626
There's one other issue: The pminfo -L -K clear -K add,157,$PCP_PMDAS_DIR/bpf/pmda_bpf,bpf_init magic runs bpf_init() and then immediately fetches the metric values, right? Sometimes the biolatency module (which collects the latency of block I/O requests) didn't gather any requests in that short timeframe. Is there any way to run some command (dd to get some I/O activity) or wait a bit before fetching the values? Ideally still keep exercising the DSO part of the bpf PMDA under valgrind.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1447,2021-10-15T15:34:39Z,2022-04-08T14:02:38Z,2022-04-08T14:02:38Z,MERGED,True,255,1,6,https://github.com/andreasgerstmayr,pmdabpf valgrind tests,1,['CI'],https://github.com/performancecopilot/pcp/pull/1447,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/1447#issuecomment-1071327023,depends on #1445,"There's one other issue: The pminfo -L -K clear -K add,157,$PCP_PMDAS_DIR/bpf/pmda_bpf,bpf_init magic runs bpf_init() and then immediately fetches the metric values, right?

Yep.  pmNewContext(3) does the bpf_init from memory, and pmFetch(3) does the sampling - but all within pminfo.

Sometimes the biolatency module (which collects the latency of block I/O requests) didn't gather any requests in that short timeframe. Is there any way to run some command (dd to get some I/O activity) or wait a bit before fetching the values?

Not using pminfo - I think you'd need a custom tool that uses local context with a delay.  Or maybe use pmval?  It will still see the uninitialized metrics on first fetch, but subsequent samples should come good.  Doesn't do all of what pminfo does though, so maybe a little qa/src utility is needed, not sure.
| Ideally still keep exercising the DSO part of the bpf PMDA under valgrind.
+1",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1447,2021-10-15T15:34:39Z,2022-04-08T14:02:38Z,2022-04-08T14:02:38Z,MERGED,True,255,1,6,https://github.com/andreasgerstmayr,pmdabpf valgrind tests,1,['CI'],https://github.com/performancecopilot/pcp/pull/1447,https://github.com/andreasgerstmayr,5,https://github.com/performancecopilot/pcp/pull/1447#issuecomment-1072483851,depends on #1445,"Or maybe use pmval? It will still see the uninitialized metrics on first fetch, but subsequent samples should come good. Doesn't do all of what pminfo does though, so maybe a little qa/src utility is needed, not sure.

Ah, great idea! I didn't realize pmval also supports -K. Yep, that works. Perfect :)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1447,2021-10-15T15:34:39Z,2022-04-08T14:02:38Z,2022-04-08T14:02:38Z,MERGED,True,255,1,6,https://github.com/andreasgerstmayr,pmdabpf valgrind tests,1,['CI'],https://github.com/performancecopilot/pcp/pull/1447,https://github.com/andreasgerstmayr,6,https://github.com/performancecopilot/pcp/pull/1447#issuecomment-1086132579,depends on #1445,"I've created qa/src/wait_for_values.c now, because it's too messy to filter pmval output which is interweaved with valgrind output.
This tool waits up to X milliseconds to fetch any non-zero value, and sleeps 100ms if no value was found.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1449,2021-10-18T15:50:40Z,,2022-03-18T15:56:28Z,OPEN,False,14,1,2,https://github.com/andreasgerstmayr,build: enable bpf PMDA in Debian packaging,1,['blocked'],https://github.com/performancecopilot/pcp/pull/1449,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1449,"Does Debian automatically add dependencies on the libraries used for building? E.g. at runtime we need libbpf0 and libelf1, but in the control.pcp and fixcontrol I only see the development dependencies (lib*-dev).
Another problem is the linux-tools-$(uname -r) package, which contains the current running kernel version in the name. This package contains bpftool, which is required for building the bpf PMDA, but not required at runtime.","Does Debian automatically add dependencies on the libraries used for building? E.g. at runtime we need libbpf0 and libelf1, but in the control.pcp and fixcontrol I only see the development dependencies (lib*-dev).
Another problem is the linux-tools-$(uname -r) package, which contains the current running kernel version in the name. This package contains bpftool, which is required for building the bpf PMDA, but not required at runtime.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1449,2021-10-18T15:50:40Z,,2022-03-18T15:56:28Z,OPEN,False,14,1,2,https://github.com/andreasgerstmayr,build: enable bpf PMDA in Debian packaging,1,['blocked'],https://github.com/performancecopilot/pcp/pull/1449,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1449#issuecomment-945924831,"Does Debian automatically add dependencies on the libraries used for building? E.g. at runtime we need libbpf0 and libelf1, but in the control.pcp and fixcontrol I only see the development dependencies (lib*-dev).
Another problem is the linux-tools-$(uname -r) package, which contains the current running kernel version in the name. This package contains bpftool, which is required for building the bpf PMDA, but not required at runtime.","I was curious how Debian is packaging the libbpf-tools, and they're including ""bpftool"" as a package name in the build dependencies:
https://salsa.debian.org/debian/bpfcc/-/blob/c38a724df294a1b86a2c6cff315d0e351f7ea3c6/debian/control#L34",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1449,2021-10-18T15:50:40Z,,2022-03-18T15:56:28Z,OPEN,False,14,1,2,https://github.com/andreasgerstmayr,build: enable bpf PMDA in Debian packaging,1,['blocked'],https://github.com/performancecopilot/pcp/pull/1449,https://github.com/jasonk000,3,https://github.com/performancecopilot/pcp/pull/1449#issuecomment-945941883,"Does Debian automatically add dependencies on the libraries used for building? E.g. at runtime we need libbpf0 and libelf1, but in the control.pcp and fixcontrol I only see the development dependencies (lib*-dev).
Another problem is the linux-tools-$(uname -r) package, which contains the current running kernel version in the name. This package contains bpftool, which is required for building the bpf PMDA, but not required at runtime.","With regard to libbpf0 and libelf1, libbpf0 depends directly on libelf1. libbpf deps has been listed in qa/, although it's probable I have misunderstood the build and packaging process when putting it together.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1449,2021-10-18T15:50:40Z,,2022-03-18T15:56:28Z,OPEN,False,14,1,2,https://github.com/andreasgerstmayr,build: enable bpf PMDA in Debian packaging,1,['blocked'],https://github.com/performancecopilot/pcp/pull/1449,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/1449#issuecomment-946808117,"Does Debian automatically add dependencies on the libraries used for building? E.g. at runtime we need libbpf0 and libelf1, but in the control.pcp and fixcontrol I only see the development dependencies (lib*-dev).
Another problem is the linux-tools-$(uname -r) package, which contains the current running kernel version in the name. This package contains bpftool, which is required for building the bpf PMDA, but not required at runtime.","With regard to libbpf0 and libelf1, libbpf0 depends directly on libelf1.

Good to know, I've dropped the explicit dependency on libelf now.

libbpf deps has been listed in qa/, although it's probable I have misunderstood the build and packaging process when putting it together.

The configure script checks which dependencies are installed, and enables (compiles) PMDAs if the requirements are met.
To set the dependencies in the package metadata, we have debian/control.pcp and debian/fixcontrol, where the debian/fixcontrol runs sed on the control.pcp and updates it based on the installed software on the build system. The files you updated in qa/ are lists of packages which should be installed at the QA systems before running the configure script, in order to enable/include all optional PCP components (like the bpf PMDA etc.).",True,{'THUMBS_UP': ['https://github.com/jasonk000']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1449,2021-10-18T15:50:40Z,,2022-03-18T15:56:28Z,OPEN,False,14,1,2,https://github.com/andreasgerstmayr,build: enable bpf PMDA in Debian packaging,1,['blocked'],https://github.com/performancecopilot/pcp/pull/1449,https://github.com/andreasgerstmayr,5,https://github.com/performancecopilot/pcp/pull/1449#issuecomment-1069431125,"Does Debian automatically add dependencies on the libraries used for building? E.g. at runtime we need libbpf0 and libelf1, but in the control.pcp and fixcontrol I only see the development dependencies (lib*-dev).
Another problem is the linux-tools-$(uname -r) package, which contains the current running kernel version in the name. This package contains bpftool, which is required for building the bpf PMDA, but not required at runtime.","Debian has a standalone bpftool package now: https://packages.debian.org/bullseye/bpftool (afaics this package didn't exist when creating this PR, as the bpftool program was included in the linux-tools package previously).
However Ubuntu doesn't have bpftool as a standalone package (yet?): https://packages.ubuntu.com/search?suite=jammy&arch=any&searchon=contents&keywords=bpftool
So the current PR would leave Ubuntu users with impossible build requirements if the bpf PMDA gets enabled in the configure script. I assume Ubuntu will follow Debian and have it as a standalone package soon.. I guess? So maybe let's just wait.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1451,2021-10-20T06:55:40Z,2021-10-20T22:49:45Z,2021-10-20T22:49:47Z,MERGED,True,5602,755,7,https://github.com/natoscott,pmdalinux: additions and updates to mem.zoneinfo metrics,1,[],https://github.com/performancecopilot/pcp/pull/1451,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1451,"New metrics below mem.zoneinfo to match those available from
latest Linux kernel versions.  Updates to existing metrics too.
Support for the per-node change to /proc/zoneinfo is added as
well, where some memory metrics that were previously exported
both per-node-per-zone are now only exported per-node.  This
is handled in a backward compatible way in terms of metrics
we export - old metrics give 'no values available' and newer
ones appear as both new metrics and new instances.
New test data from modern kernels is added and test qa/821 is
updated for expected output on various kernel versions.
Resolves Red Hat BZ #1985523.","New metrics below mem.zoneinfo to match those available from
latest Linux kernel versions.  Updates to existing metrics too.
Support for the per-node change to /proc/zoneinfo is added as
well, where some memory metrics that were previously exported
both per-node-per-zone are now only exported per-node.  This
is handled in a backward compatible way in terms of metrics
we export - old metrics give 'no values available' and newer
ones appear as both new metrics and new instances.
New test data from modern kernels is added and test qa/821 is
updated for expected output on various kernel versions.
Resolves Red Hat BZ #1985523.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1452,2021-10-20T14:52:24Z,2021-10-21T09:49:17Z,2021-11-05T16:57:16Z,MERGED,True,41,1,5,https://github.com/andreasgerstmayr,upgrade hiredis v1.0.0 -> v1.0.2,2,[],https://github.com/performancecopilot/pcp/pull/1452,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1452,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1453,2021-10-25T01:27:40Z,2021-11-03T07:17:30Z,2021-11-03T07:17:30Z,MERGED,True,500,24,28,https://github.com/goodwinos,"logutil: add pmlogger_farm service, update associated admin tools",23,[],https://github.com/performancecopilot/pcp/pull/1453,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1453,"Split off new pmlogger_farm.service for all non-primary ""farm""
loggers from the pmlogger.service (primary logger only).
Add migrate_pid_service() shell API function to rc-proc.sh
to add or migrate a pid to the cgroup managing a named systemd
service. e.g. migrate_pid_service $PID pmlogger_farm.service
Add new pmlogctl(1) ""check"" command for checking and restarting
any loggers that have failed. Also check and migrate any new
non-primary logger instances to the pmlogger_farm service using
the new migrate_pid_service function.
Add pmlogger_farm_check service and timer for periodically checking
the health of a logger farm, using ""pmlogctl check"" as described above.
Update RPM specs for handling upgrades from pre pcp-5.3.5 so the
new pmlogger_farm service inherits and retains the pre-upgrade
state of the pmlogger service (enabled, etc). The new service is
off by default on virgin installs (without pcp-zeroconf).
Have conducted RPM upgrade testing and checked startup times on reboot
with systemd-analyse blame - on a pre-configured 10 logger farm, the
pmlogger_farm service starts in O(10ms) .. and then continues in the
background post-boot. Fixes for related BZ#1973833 (Improve remote
pmlogger over slow network connections) have helped considerably.
Still coming is QA for migrate_pid_service() to check portability
and some docs updates. Upgrade testing is done manually.
Resolves: RHBZ#1991896 - Pmlogger processes run in different cgroups.","Split off new pmlogger_farm.service for all non-primary ""farm""
loggers from the pmlogger.service (primary logger only).
Add migrate_pid_service() shell API function to rc-proc.sh
to add or migrate a pid to the cgroup managing a named systemd
service. e.g. migrate_pid_service $PID pmlogger_farm.service
Add new pmlogctl(1) ""check"" command for checking and restarting
any loggers that have failed. Also check and migrate any new
non-primary logger instances to the pmlogger_farm service using
the new migrate_pid_service function.
Add pmlogger_farm_check service and timer for periodically checking
the health of a logger farm, using ""pmlogctl check"" as described above.
Update RPM specs for handling upgrades from pre pcp-5.3.5 so the
new pmlogger_farm service inherits and retains the pre-upgrade
state of the pmlogger service (enabled, etc). The new service is
off by default on virgin installs (without pcp-zeroconf).
Have conducted RPM upgrade testing and checked startup times on reboot
with systemd-analyse blame - on a pre-configured 10 logger farm, the
pmlogger_farm service starts in O(10ms) .. and then continues in the
background post-boot. Fixes for related BZ#1973833 (Improve remote
pmlogger over slow network connections) have helped considerably.
Still coming is QA for migrate_pid_service() to check portability
and some docs updates. Upgrade testing is done manually.
Resolves: RHBZ#1991896 - Pmlogger processes run in different cgroups.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1453,2021-10-25T01:27:40Z,2021-11-03T07:17:30Z,2021-11-03T07:17:30Z,MERGED,True,500,24,28,https://github.com/goodwinos,"logutil: add pmlogger_farm service, update associated admin tools",23,[],https://github.com/performancecopilot/pcp/pull/1453,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1453#issuecomment-951399849,"Split off new pmlogger_farm.service for all non-primary ""farm""
loggers from the pmlogger.service (primary logger only).
Add migrate_pid_service() shell API function to rc-proc.sh
to add or migrate a pid to the cgroup managing a named systemd
service. e.g. migrate_pid_service $PID pmlogger_farm.service
Add new pmlogctl(1) ""check"" command for checking and restarting
any loggers that have failed. Also check and migrate any new
non-primary logger instances to the pmlogger_farm service using
the new migrate_pid_service function.
Add pmlogger_farm_check service and timer for periodically checking
the health of a logger farm, using ""pmlogctl check"" as described above.
Update RPM specs for handling upgrades from pre pcp-5.3.5 so the
new pmlogger_farm service inherits and retains the pre-upgrade
state of the pmlogger service (enabled, etc). The new service is
off by default on virgin installs (without pcp-zeroconf).
Have conducted RPM upgrade testing and checked startup times on reboot
with systemd-analyse blame - on a pre-configured 10 logger farm, the
pmlogger_farm service starts in O(10ms) .. and then continues in the
background post-boot. Fixes for related BZ#1973833 (Improve remote
pmlogger over slow network connections) have helped considerably.
Still coming is QA for migrate_pid_service() to check portability
and some docs updates. Upgrade testing is done manually.
Resolves: RHBZ#1991896 - Pmlogger processes run in different cgroups.","@goodwinos haven't had a chance to review the code as yet (today or tomorrow with luck), but a quick look suggests qa tests 1204 and 1226 need a remake.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1453,2021-10-25T01:27:40Z,2021-11-03T07:17:30Z,2021-11-03T07:17:30Z,MERGED,True,500,24,28,https://github.com/goodwinos,"logutil: add pmlogger_farm service, update associated admin tools",23,[],https://github.com/performancecopilot/pcp/pull/1453,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/1453#issuecomment-951494901,"Split off new pmlogger_farm.service for all non-primary ""farm""
loggers from the pmlogger.service (primary logger only).
Add migrate_pid_service() shell API function to rc-proc.sh
to add or migrate a pid to the cgroup managing a named systemd
service. e.g. migrate_pid_service $PID pmlogger_farm.service
Add new pmlogctl(1) ""check"" command for checking and restarting
any loggers that have failed. Also check and migrate any new
non-primary logger instances to the pmlogger_farm service using
the new migrate_pid_service function.
Add pmlogger_farm_check service and timer for periodically checking
the health of a logger farm, using ""pmlogctl check"" as described above.
Update RPM specs for handling upgrades from pre pcp-5.3.5 so the
new pmlogger_farm service inherits and retains the pre-upgrade
state of the pmlogger service (enabled, etc). The new service is
off by default on virgin installs (without pcp-zeroconf).
Have conducted RPM upgrade testing and checked startup times on reboot
with systemd-analyse blame - on a pre-configured 10 logger farm, the
pmlogger_farm service starts in O(10ms) .. and then continues in the
background post-boot. Fixes for related BZ#1973833 (Improve remote
pmlogger over slow network connections) have helped considerably.
Still coming is QA for migrate_pid_service() to check portability
and some docs updates. Upgrade testing is done manually.
Resolves: RHBZ#1991896 - Pmlogger processes run in different cgroups.","@goodwinos haven't had a chance to review the code as yet (today or tomorrow with luck), but a quick look suggests qa tests 1204 and 1226 need a remake.

Thanks Ken. I'd already remade 1204 and have now also remade 1226 and added new test qa/1466, which tests the new shell function migrate_pid_service() in rc-proc.sh. I've also tested groups pmlogger, pmlogctl, logutil and similar pmie groups, which seem fine. One nit is 301 and 793 which seem to fail when run with the rest of the groups, but pass when run individually later (I think you reported something similar recently?) .. I don't think those failures are related to this PR.
Also note - I have not yet added a pmie_farm.service .. pending review of pmlogger_farm.service and associated changes first.
Thanks",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1454,2021-10-25T02:35:51Z,2021-10-25T04:23:24Z,2021-10-25T04:23:27Z,MERGED,True,54,1708,19,https://github.com/natoscott,build: consolidate the multiple copies of sds strings code,1,[],https://github.com/performancecopilot/pcp/pull/1454,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1454,"Remove src/external sds code and instead use the version in
the vendored hiredis subdirectory.  Switch pmdabpf over to
using remaining APIs from libpcp_web (sds, sdsalloc, dict)
that it had acquired local copies of - a nice improvement,
this PMDA now has no remaining external code dependencies.
Convert code we had using the problematic SDS_NOINIT alloc
mechanism - the sds implemention nowadays enforces string
initialization so simply use the init-to-zero mechanism.","Remove src/external sds code and instead use the version in
the vendored hiredis subdirectory.  Switch pmdabpf over to
using remaining APIs from libpcp_web (sds, sdsalloc, dict)
that it had acquired local copies of - a nice improvement,
this PMDA now has no remaining external code dependencies.
Convert code we had using the problematic SDS_NOINIT alloc
mechanism - the sds implemention nowadays enforces string
initialization so simply use the init-to-zero mechanism.",True,{'THUMBS_UP': ['https://github.com/andreasgerstmayr']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1455,2021-10-25T23:58:27Z,2021-10-26T02:11:19Z,2021-10-26T02:11:22Z,MERGED,True,44,19,3,https://github.com/natoscott,pmdamssql: share username/password with the Assessments API,1,[],https://github.com/performancecopilot/pcp/pull/1455,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1455,"For admin simplicity, if a SQL Server Assessments API install
is detected we now use the username/password combo setup for
this service so that no PCP mssql configuration is required.
Resolves Red Hat BZ #1951342","For admin simplicity, if a SQL Server Assessments API install
is detected we now use the username/password combo setup for
this service so that no PCP mssql configuration is required.
Resolves Red Hat BZ #1951342",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1457,2021-10-27T04:05:11Z,2021-10-27T22:05:57Z,2021-10-27T22:06:07Z,MERGED,True,836,4,29,https://github.com/natoscott,pmdamongodb: new PMDA to export PCP metrics from MongoDB,2,[],https://github.com/performancecopilot/pcp/pull/1457,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1457,"An initial set of around thirty metrics is added - many more are
available though so expect this to grow over time as people need
others.
Regression test qa/1584 exercises the agent with a local install
of MongoDB using default parameters.","An initial set of around thirty metrics is added - many more are
available though so expect this to grow over time as people need
others.
Regression test qa/1584 exercises the agent with a local install
of MongoDB using default parameters.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1458,2021-10-27T23:30:24Z,2021-10-28T10:19:43Z,2021-10-28T10:19:43Z,MERGED,True,5775,627,13,https://github.com/goodwinos,openmetrics: add vmware URL for use with vmware_exporter,4,[],https://github.com/performancecopilot/pcp/pull/1458,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1458,"vmware_exporter provides a /metrics end-point for VMware/ESX
server statistics. There are about 88 metrics exported, many
with instance domains, covering most aspects of VMWare server
performance. For details see the README and notes at
https://github.com/pryorda/vmware_exporter#readme
Quick setup instructions for running vmware_exporter in a container
are included as comments in src/pmdas/openmetrics/vmware.url or once
installed, in $PCP_PMDAS_DIR/openmetrics/config.d/vmware.url
The existing pmdavmware(1) uses a deprecated API and is basically no
longer useful - we're replacing it with this openmetrics configuration.
This has been tested on two different internal Red Hat ESX servers.
A follow-up commit will handle the packaging changes to remove the
pcp-pmda-vmware subpackage.
Related: RHBZ#1758277","vmware_exporter provides a /metrics end-point for VMware/ESX
server statistics. There are about 88 metrics exported, many
with instance domains, covering most aspects of VMWare server
performance. For details see the README and notes at
https://github.com/pryorda/vmware_exporter#readme
Quick setup instructions for running vmware_exporter in a container
are included as comments in src/pmdas/openmetrics/vmware.url or once
installed, in $PCP_PMDAS_DIR/openmetrics/config.d/vmware.url
The existing pmdavmware(1) uses a deprecated API and is basically no
longer useful - we're replacing it with this openmetrics configuration.
This has been tested on two different internal Red Hat ESX servers.
A follow-up commit will handle the packaging changes to remove the
pcp-pmda-vmware subpackage.
Related: RHBZ#1758277",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1459,2021-10-28T13:29:38Z,2021-11-01T16:17:08Z,2021-11-05T16:56:55Z,MERGED,True,208,2,5,https://github.com/andreasgerstmayr,libpcp_web: support Redis authentication with password and Redis ACL,1,[],https://github.com/performancecopilot/pcp/pull/1459,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1459,Resolves: #1417,Resolves: #1417,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1460,2021-10-29T04:04:18Z,2021-10-31T23:49:15Z,2021-10-31T23:49:15Z,MERGED,True,7,2,4,https://github.com/goodwinos,services: disable service advertising by default in pmcd and pmproxy,1,[],https://github.com/performancecopilot/pcp/pull/1460,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1460,"Tweak pmcd.options and pmproxy.options to set -A by default. The -A
flag disables service advertising, which is otherwise enabled by
default. With hindsight, -A should have had the opposite semantics,
i.e. -A should have enabled service advertising .. but we can't
change that retrospectfully. Since pmcd.options and pmproxy.options
are config files, the existing settings (if altered from default)
will be retained on upgrade.
Also tweak systemd unit configs to remove Wants=avahi-daemon.service.
This was causing pmcd's systemd deps to trigger Insights warnings,
see BZ1899625 - ""Enabling pmcd leads to Insights warning about avahi"".
We retain the After=avahi-daemon.service setting in pmcd and add it
to pmproxy service units to ensure avahi starts before the PCP daemons.
This is not a hard dependency, it just specifies the service start
order.
Resolves: RHBZ#1899625","Tweak pmcd.options and pmproxy.options to set -A by default. The -A
flag disables service advertising, which is otherwise enabled by
default. With hindsight, -A should have had the opposite semantics,
i.e. -A should have enabled service advertising .. but we can't
change that retrospectfully. Since pmcd.options and pmproxy.options
are config files, the existing settings (if altered from default)
will be retained on upgrade.
Also tweak systemd unit configs to remove Wants=avahi-daemon.service.
This was causing pmcd's systemd deps to trigger Insights warnings,
see BZ1899625 - ""Enabling pmcd leads to Insights warning about avahi"".
We retain the After=avahi-daemon.service setting in pmcd and add it
to pmproxy service units to ensure avahi starts before the PCP daemons.
This is not a hard dependency, it just specifies the service start
order.
Resolves: RHBZ#1899625",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1461,2021-10-29T05:16:13Z,2021-11-03T04:10:12Z,2021-11-03T04:10:20Z,MERGED,True,1463,353,35,https://github.com/natoscott,"pmdanvidia: updates to latest NVML, add a batch of new metrics",3,[],https://github.com/performancecopilot/pcp/pull/1461,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1461,"Several changes to get the nvidia metrics up-to-date with the
NVML library in the latest versions of CUDA.  The new metrics
include energy use, devices UUIDs (also as labels), supporting
both compute and graphics per-process stats APIs, as well as a
new per-process indom to integrate more easily with top-alike
tools like pcp-atop and pcp-htop.
selinux updates to match current X server policy are included.","Several changes to get the nvidia metrics up-to-date with the
NVML library in the latest versions of CUDA.  The new metrics
include energy use, devices UUIDs (also as labels), supporting
both compute and graphics per-process stats APIs, as well as a
new per-process indom to integrate more easily with top-alike
tools like pcp-atop and pcp-htop.
selinux updates to match current X server policy are included.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/SunilMohanAdapa,1,https://github.com/performancecopilot/pcp/pull/1462,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1462#issuecomment-958928100,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","Thanks for the updated solution Sunil and for considering portability for non-systemd platforms. The changes in pmlogger_check.sh aren't quite right - we would want the zeroconf environment variables to take precedence over the standard values, right? So this line:
envs=grep -h ^PMLOGGER ""$PMLOGGERZEROCONFENVS"" ""$PMLOGGERENVS"" 2>/dev/null 
should be
envs=grep -h ^PMLOGGER ""$PMLOGGERENVS"" ""$PMLOGGERZEROCONFENVS"" 2>/dev/null`
So later on when $envs is eval'd (when pmlogger is launched), we'll get the zeroconf values if that file has been installed. Also it would help to add a comment in each file explaining the precedence rules, e.g. in the zeroconf file, state that it overrides the standard environment (and in the $PMLOGGERENVS file, state that it will be overridden by the zeroconf file, if present.
If you'd like to make these additional changes and update the PR that would be great, otherwise I'll do so in the morning (my morning in Australia).
Also note: these settings are only applied for the primary logger - do you have any thoughts on that? This has come up for discussion before but we decided to leave it as is because otherwise existing pmlogger ""farms"" may get an unexpected increase in log volumes when they upgrade.
`",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/1462#issuecomment-960242940,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","Hi Sunil, I went ahead and made the additional changes (mentioned above), and have now merged this into main branch for pcp-5.3.5.
Thanks",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/SunilMohanAdapa,4,https://github.com/performancecopilot/pcp/pull/1462#issuecomment-960251396,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","@goodwinos , thank you for the review and comments.

Thanks for the updated solution Sunil and for considering portability for non-systemd platforms. The changes in pmlogger_check.sh aren't quite right - we would want the zeroconf environment variables to take precedence over the standard values, right? So this line:
envs=grep -h ^PMLOGGER ""$PMLOGGERZEROCONFENVS"" ""$PMLOGGERENVS"" 2>/dev/null  should be
envs=grep -h ^PMLOGGER ""$PMLOGGERENVS"" ""$PMLOGGERZEROCONFENVS"" 2>/dev/null`
So later on when $envs is eval'd (when pmlogger is launched), we'll get the zeroconf values if that file has been installed. Also it would help to add a comment in each file explaining the precedence rules, e.g. in the zeroconf file, state that it overrides the standard environment (and in the $PMLOGGERENVS file, state that it will be overridden by the zeroconf file, if present.

In my patch, I assumed that /etc/default/pmlogger is the file that user will want to edit. User is not expected to touch the pmlogger_zeroconf at all. Also, I assumed that the order of priority should be User configuration > Zeroconf value > Unconfigured default. Reasoning:

Users are currently used to editing the /etc/default/pmlogger . Configuration file that needs to be edited (for settings to take effect) will not change with the next version of pcp containing this patch. Perhaps there is existing documentation that says the file to be edited for configuration changes is /etc/default/pmlogger .
There will be existing installations where user's may have already changed the file /etc/default/pmlogger to set their preferred logging interval. When they are upgrade to the newer version, I suppose that we should not override the value with the zeroconf file and expect them to additionally modify the newly installed zeroconf file.

It is a bit of confusion for the user to see two files instead one. To address this problem and to make sure that users don't ever edit the zeroconf file, we can add a comment asking them to edit the other file or, better yet, we can consider putting the zeroconf file in /usr/. This way, the user won't ever consider editing the zeroconf file.

If you'd like to make these additional changes and update the PR that would be great, otherwise I'll do so in the morning (my morning in Australia).

I shall now make the changes to add comments reflecting the above viewpoint.
However, if you think zeroconf settings should get the highest priority instead, let me know and I will make the changes accordingly tomorrow. If you wish to avoid the round trip with to US West :), please feel free to make the changes (either by editing my commits or adding new ones).

Also note: these settings are only applied for the primary logger - do you have any thoughts on that? This has come up for discussion before but we decided to leave it as is because otherwise existing pmlogger ""farms"" may get an unexpected increase in log volumes when they upgrade. `

I haven't dug into pcp enough to make a well considered response. However, I can pass an opinion from a generic view point:
It really depends on the true purpose of zeroconf package and what users expect out of it.

If the purpose of zeroconf is to provide a one time configuration at the time of installation and never change it later, then updating the log interval for all the loggers will be an unexpected surprise for the users.
On the other hand, if zeroconf is meant to provide a low effort administration tool that does the right thing most of the time (and users currently expect this), then updating the log interval for all the loggers will be right change for the users (obviously, you saw the need for setting the interval to 10 seconds in zeroconf package). I work on the FreedomBox (which includes cockpit and pcp) project the entire job of which is to eliminate administration effort on behalf the users. From this perspective, I would argue that a zeroconf package with this definition (the one that aims to eliminate administration overhead and does the right thing most of the time) is more useful for the majority of the users. If upstream pcp authors' understanding of how things should be configured evolves, go ahead and do it in the zeroconf package. If a security update requires, better configuration go ahead and do it. To reduce surprises to users, however, announce in release notes, always give a way to override and finally, don't make the changes in security/bug fix branch, if any.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/SunilMohanAdapa,5,https://github.com/performancecopilot/pcp/pull/1462#issuecomment-960251953,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","Hi Sunil, I went ahead and made the additional changes (mentioned above), and have now merged this into main branch for pcp-5.3.5.

Aha, thanks. Never mind my comments.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/natoscott,6,https://github.com/performancecopilot/pcp/pull/1462#issuecomment-960292550,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","It is a bit of confusion for the user to see two files instead one.

+1

To address this problem and to make sure that users don't ever edit the zeroconf file, [...] better yet, we can consider putting the zeroconf file in /usr/. This way, the user won't ever consider editing the zeroconf file.

Good suggestion - I agree this is a better solution than having two side-by-side files with conflicting (duplicate) variable names in a sysadmin-editable location.  Somewhere below /usr it's really clear that this is not something a user would normally be editing.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/natoscott,7,https://github.com/performancecopilot/pcp/pull/1462#issuecomment-1022714960,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","@SunilMohanAdapa @goodwinos I believe these changes have accidentally caused a regression in ansible-pcp which modifies PMLOGGER_INTERVAL in /etc/sysconfig.  When pcp-zeroconf is installed this setting is now ignored and pcp-zeroconf setting ""wins"" (however, ansible-pcp also installs zeroconf).  :(  Not sure on our best option here right now, but we need to consider this one further.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/SunilMohanAdapa,8,https://github.com/performancecopilot/pcp/pull/1462#issuecomment-1022758232,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","@natoscott , @goodwinos  I believe that the solution is straight forward. That is to say that the configuration installed by zeroconf (in /usr 638e426) should have lower precedence compared to user set values in /etc/sysconfig/ (more arguments for this in my previous comment #1462 (comment)). This was the intention of my patch (3020052). However, the priority was reversed later (2c17ba0). If we undo this change, it should be sufficient:

User's only editable configuration file /etc/sysconfig/pmlogger will have highest precedence. The other file in /usr is not user editable and will get lower precedence.
There will be no regressions over previous behavior. Ansible should work just like before.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/natoscott,9,https://github.com/performancecopilot/pcp/pull/1462#issuecomment-1022789792,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","@SunilMohanAdapa sounds promising.  However, since we ship /etc/sysconfig/pmlogger (and with a value for PMLOGGER_INTERVAL), I don't understand how you differentiate between this (our shipped default value outside zeroconf) and something the user has set...?
Oh, I see it now :) ... we don't set a value for PMLOGGER_INTERVAL there, its commented out by default.  OK - your plan sounds good then!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/natoscott,10,https://github.com/performancecopilot/pcp/pull/1462#issuecomment-1026342479,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","@SunilMohanAdapa any chance you have some spare cycles to put together a PR for this change?  We'd like to put a bug-fix only pcp-5.3.6 out within the next week and this feels like something we should fix ASAP.  I'm working on other issues at the moment, but can circle back to this one if you're out of time currently.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/SunilMohanAdapa,11,https://github.com/performancecopilot/pcp/pull/1462#issuecomment-1026385309,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org",I shall try to create a PR in a day or two.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/natoscott,12,https://github.com/performancecopilot/pcp/pull/1462#issuecomment-1026391319,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org","@SunilMohanAdapa awesome, thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1462,2021-10-30T06:12:44Z,2021-11-03T22:25:12Z,2022-02-01T19:07:30Z,MERGED,True,6,22,9,https://github.com/SunilMohanAdapa,pmlogger: Implement zeroconf defaults using an additional env file,1,[],https://github.com/performancecopilot/pcp/pull/1462,https://github.com/SunilMohanAdapa,13,https://github.com/performancecopilot/pcp/pull/1462#issuecomment-1027190110,"Earlier, a new way provide zeroconf values for pmlogger was implemented in
d19714e and
9859201. This solution worked on systems with
systemd but not others. This caused problem for the piuparts test which
apparently does not start under systemd during the test[1].
To implement the solution in a more consistent way across all systems (with and
without systemd), the earlier solution is reverted with a new solution that
drops an additional defaults file with pcp-zeroconf package.
Tests:


Install on a machine with non-systemd Debian based distribution. When pmlogger
is started, the PMLOGGER_INTERNAL is part in the pmlogger process environment
with value 10.


Install on a Debian machine with systemd. When pmlogger is started, the
PMLOGGER_INTERNAL is part in the pmlogger process environment with value 10.


Update /etc/default/pmlogger with a value for PMLOGGER_INTERNAL. That value is
used.


Install without pcp-zeroconf. When pmlogger is started, the PMLOGGER_INTERNAL
is not part of pmlogger process environment.


The file /etc/defaults/pmlogger_zeroconf is part of the pcp-zeroconf package.


Links:

https://piuparts.debian.org/sid/fail/pcp-zeroconf_5.3.4-1.log

Signed-off-by: Sunil Mohan Adapa sunil@medhas.org",@natoscott @goodwinos  #1525 addresses the regression in ansible-pcp by prioritizing user configuration over zeroconf configuration.,True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1463,2021-11-02T14:22:09Z,2021-11-03T12:24:23Z,2021-11-05T16:57:33Z,MERGED,True,7,0,1,https://github.com/andreasgerstmayr,man: add PMLOGGER_INTERVAL note to the description of the -t interval…,1,[],https://github.com/performancecopilot/pcp/pull/1463,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1463,… option of pmlogger,… option of pmlogger,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1464,2021-11-03T22:36:21Z,2021-11-08T00:35:29Z,2021-11-09T23:05:35Z,MERGED,True,399,56,12,https://github.com/andreasgerstmayr,pmproxy: transparent Redis reconnect,1,[],https://github.com/performancecopilot/pcp/pull/1464,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1464,"switch from a boolean 'setup' to a state (connecting, connected,
ready, ...) for Redis connection state
handle Redis disconnects in the async reply handler
in a timer, check if the current state is disconnected and issue a
reconnect","switch from a boolean 'setup' to a state (connecting, connected,
ready, ...) for Redis connection state
handle Redis disconnects in the async reply handler
in a timer, check if the current state is disconnected and issue a
reconnect",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1464,2021-11-03T22:36:21Z,2021-11-08T00:35:29Z,2021-11-09T23:05:35Z,MERGED,True,399,56,12,https://github.com/andreasgerstmayr,pmproxy: transparent Redis reconnect,1,[],https://github.com/performancecopilot/pcp/pull/1464,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1464#issuecomment-960248244,"switch from a boolean 'setup' to a state (connecting, connected,
ready, ...) for Redis connection state
handle Redis disconnects in the async reply handler
in a timer, check if the current state is disconnected and issue a
reconnect",(still needs QA + more testing),True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1464,2021-11-03T22:36:21Z,2021-11-08T00:35:29Z,2021-11-09T23:05:35Z,MERGED,True,399,56,12,https://github.com/andreasgerstmayr,pmproxy: transparent Redis reconnect,1,[],https://github.com/performancecopilot/pcp/pull/1464,https://github.com/goodwinos,3,https://github.com/performancecopilot/pcp/pull/1464#issuecomment-960603594,"switch from a boolean 'setup' to a state (connecting, connected,
ready, ...) for Redis connection state
handle Redis disconnects in the async reply handler
in a timer, check if the current state is disconnected and issue a
reconnect",@andreasgerstmayr I'll review and test this in the morning,True,{'THUMBS_UP': ['https://github.com/andreasgerstmayr']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1464,2021-11-03T22:36:21Z,2021-11-08T00:35:29Z,2021-11-09T23:05:35Z,MERGED,True,399,56,12,https://github.com/andreasgerstmayr,pmproxy: transparent Redis reconnect,1,[],https://github.com/performancecopilot/pcp/pull/1464,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/1464#issuecomment-961347701,"switch from a boolean 'setup' to a state (connecting, connected,
ready, ...) for Redis connection state
handle Redis disconnects in the async reply handler
in a timer, check if the current state is disconnected and issue a
reconnect","replaced exponential backoff with simple 1-minute interval of the redis reconnect worker for simplicity sake
added qa/src/redis_proxy.python script to simulate LOADING Redis is loading the dataset in memory error
handle above error correctly

open TODOs: automated QA test",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1464,2021-11-03T22:36:21Z,2021-11-08T00:35:29Z,2021-11-09T23:05:35Z,MERGED,True,399,56,12,https://github.com/andreasgerstmayr,pmproxy: transparent Redis reconnect,1,[],https://github.com/performancecopilot/pcp/pull/1464,https://github.com/goodwinos,5,https://github.com/performancecopilot/pcp/pull/1464#issuecomment-961690639,"switch from a boolean 'setup' to a state (connecting, connected,
ready, ...) for Redis connection state
handle Redis disconnects in the async reply handler
in a timer, check if the current state is disconnected and issue a
reconnect","Hi Andreas,
in the original patch, redis_reconnect_worker() calls redisSlotsReconnect() which calls redisClusterConnect2(), which wasn't exported or something - I can't really remember but maybe that was why the worker had to be in pmproxy redis.c. But anyway I've built and tested this and it's looking good. I made one small change which was to decrease REDIS_RECONNECT_INTERVAL from 60 to 2. This behaved much better and doesn't have much overhead in the timer worker for the common case where redis is connected. With it set to 60 seconds, clients (e.g. curl requests) would appear to hang when redis was actually up but we were waiting for the reconnect. At 2 seconds, it basically wasn't noticeable.
I tested the following scenarios with pmlogger disabled (so no discovery ingest going on) -

redis down, start pmproxy, curl request (failed), redis up, pmproxy reconnects, curl request succeeds.
redis up, start pmproxy, curl req (success), redis down, curl req (fails), redis up, pmproxy reconnect, curl success
redis up, start pmproxy, redis down and then redis up (with no intervening curl req), curl req succeeds

So that's all good it seems (IIRC the last test above didn't used to work). The error from a failed client request about expecting an array response isn't exactly user friendly (and this was visible in the grafana-pcp dashboard, which will confuse punters looking for the cause)
Remaining testing might involve the above as a unit test, but with:

pmlogger enabled with discovery active
pmlogger_farm enabled with lots of discovery ingest
multiple parallel http client requests (e.g. from a busy grafana-pcp datasource) in a stress test with redis bouncing up/down periodically
redis in cluster mode
remote redis over high latency network

Cheers",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1464,2021-11-03T22:36:21Z,2021-11-08T00:35:29Z,2021-11-09T23:05:35Z,MERGED,True,399,56,12,https://github.com/andreasgerstmayr,pmproxy: transparent Redis reconnect,1,[],https://github.com/performancecopilot/pcp/pull/1464,https://github.com/andreasgerstmayr,6,https://github.com/performancecopilot/pcp/pull/1464#issuecomment-961925098,"switch from a boolean 'setup' to a state (connecting, connected,
ready, ...) for Redis connection state
handle Redis disconnects in the async reply handler
in a timer, check if the current state is disconnected and issue a
reconnect","Thanks for the reviews!

Hi Andreas,
in the original patch, redis_reconnect_worker() calls redisSlotsReconnect() which calls redisClusterConnect2(), which wasn't exported or something - I can't really remember but maybe that was why the worker had to be in pmproxy redis.c.

I think the worker should be in pmproxy/src/redis.c and not libpcp_web, because for the pmseries or pmsearch CLI tools I don't want the reconnect worker - they should just fail (afaics that's what UNIX CLI tools do, there's no retry by default).

But anyway I've built and tested this and it's looking good. I made one small change which was to decrease REDIS_RECONNECT_INTERVAL from 60 to 2.

Sounds trivial, but what should we do about the log spam? If Redis is unavailable for some time, we spam the logs with
[Fri Nov  5 14:43:49] pmproxy(745612) Info: Trying to connect to Redis ...
[Fri Nov  5 14:43:49] pmproxy(745612) Info: Cannot connect to Redis: Connection refused

every two seconds. Should I just not display any log messages about reconnects by default? I assume there are configurations out there with Redis configured but not available, and until now there's only one connection attempt at pmproxy startup, but then there will be millions of failed connection attempts to Redis over the lifetime of the pmproxy process.
Another issue with that small interval is that after establishing the connection, we need to get the current keymap and Redis server version, only after that we can consider Redis 'ready'. If this takes too long, it will do another reconnect while one reconnect is running.
Now, one option would be to only attempt to reconnect when Redis is not currently in the progress of reconnecting. However, in case Redis is stuck in the connection attempt (some one-off network/firewall/TCP issue), then we're indefinitely stuck in the connecting state. That's why I try to reconnect always if Redis is not 'ready' (ready == keymap + Redis version loaded).

This behaved much better and doesn't have much overhead in the timer worker for the common case where redis is connected. With it set to 60 seconds, clients (e.g. curl requests) would appear to hang when redis was actually up but we were waiting for the reconnect. At 2 seconds, it basically wasn't noticeable.

I think the real fix to stuck curl requests is that pmproxy should respond with an error code like HTTP 500, Redis is not available in case Redis is not connected.

I tested the following scenarios with pmlogger disabled (so no discovery ingest going on) -
* redis down, start pmproxy, curl request (failed), redis up, pmproxy reconnects, curl request succeeds.

* redis up, start pmproxy, curl req (success), redis down, curl req (fails), redis up, pmproxy reconnect, curl success

* redis up, start pmproxy, redis down and then redis up (with no intervening curl req), curl req succeeds


Thanks for testing!

So that's all good it seems (IIRC the last test above didn't used to work). The error from a failed client request about expecting an array response isn't exactly user friendly (and this was visible in the grafana-pcp dashboard, which will confuse punters looking for the cause)
Remaining testing might involve the above as a unit test, but with:
* pmlogger enabled with discovery active

* pmlogger_farm enabled with lots of discovery ingest

* multiple parallel http client requests (e.g. from a busy grafana-pcp datasource) in a stress test with redis bouncing up/down periodically

* redis in cluster mode

* remote redis over high latency network


I currently have a test which is basically a combination of 1 and 3. I'm just thinking about the case of many in-flight Redis queries while a reconnect is happening, where after a successful reconnect some stale callback returns with an outdated ""Connection refused"" error, triggering another reconnect. Maybe we need to compare timestamps of last reconnect and compare them with the time when the Redis request was sent out, so we can ignore errors pre-dating the last successful Redis reconnect?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1464,2021-11-03T22:36:21Z,2021-11-08T00:35:29Z,2021-11-09T23:05:35Z,MERGED,True,399,56,12,https://github.com/andreasgerstmayr,pmproxy: transparent Redis reconnect,1,[],https://github.com/performancecopilot/pcp/pull/1464,https://github.com/andreasgerstmayr,7,https://github.com/performancecopilot/pcp/pull/1464#issuecomment-962191511,"switch from a boolean 'setup' to a state (connecting, connected,
ready, ...) for Redis connection state
handle Redis disconnects in the async reply handler
in a timer, check if the current state is disconnected and issue a
reconnect","I've rebased it and ran a full QA run: https://github.com/andreasgerstmayr/pcp/actions/runs/1426620244 (you can download the 'qareport' artifact, which contains the graphical test report in the same design as https://performancecopilot.github.io/qa-reports/reports/latest/).
The new qa/1355 works everywhere except centos8 due to an old Python version (I've added a small TCP proxy written in Python, which fakes the Redis loading error, i.e. for the first X seconds the proxy returns this error, after that it proxies all requests to a real Redis server).
I think it's good to merge as-is, as it doesn't break anything previously working, and fixes the cases where Redis was loading at startup, Redis not available at pmproxy startup, or Redis bouncing during pmproxy runtime.
There might be some edge cases not working yet - see Marks and my comment above - but that'll need to wait.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1464,2021-11-03T22:36:21Z,2021-11-08T00:35:29Z,2021-11-09T23:05:35Z,MERGED,True,399,56,12,https://github.com/andreasgerstmayr,pmproxy: transparent Redis reconnect,1,[],https://github.com/performancecopilot/pcp/pull/1464,https://github.com/goodwinos,8,https://github.com/performancecopilot/pcp/pull/1464#issuecomment-963807658,"switch from a boolean 'setup' to a state (connecting, connected,
ready, ...) for Redis connection state
handle Redis disconnects in the async reply handler
in a timer, check if the current state is disconnected and issue a
reconnect","Andreas wrote:

Thanks for the reviews!

Hi Andreas,
in the original patch, redis_reconnect_worker() calls redisSlotsReconnect() which calls redisClusterConnect2(), which wasn't exported or something - I can't really remember but maybe that was why the worker had to be in pmproxy redis.c.

I think the worker should be in pmproxy/src/redis.c and not libpcp_web, because for the pmseries or pmsearch CLI tools I don't want the reconnect worker - they should just fail (afaics that's what UNIX CLI tools do, there's no retry by default).

yep makes complete sense


But anyway I've built and tested this and it's looking good. I made one small change which was to decrease REDIS_RECONNECT_INTERVAL from 60 to 2.

Sounds trivial, but what should we do about the log spam? If Redis is unavailable for some time, we spam the logs with
[Fri Nov  5 14:43:49] pmproxy(745612) Info: Trying to connect to Redis ...
[Fri Nov  5 14:43:49] pmproxy(745612) Info: Cannot connect to Redis: Connection refused

every two seconds. Should I just not display any log messages about reconnects by default? I assume there are configurations out there with Redis configured but not available, and until now there's only one connection attempt at pmproxy startup, but then there will be millions of failed connection attempts to Redis over the lifetime of the pmproxy process.

Discovery had a similar spamming issue when a pmlogger lock was found (at which time it needs to stop ingesting until the lock clears). I ended up just wrapping the whole lot in pmDebug.discovery because it was just too verbose. However it might be useful in the pmproxy case to notify once that redis is down and the reconnection protocol has been triggered. Then stay silent until pmproxcy connects to redis again, and announce that it's back. That way admins can check pmproxy.log and will know to go off and start redis (if that's actually what they want).

Another issue with that small interval is that after establishing the connection, we need to get the current keymap and Redis server version, only after that we can consider Redis 'ready'. If this takes too long, it will do another reconnect while one reconnect is running.

that's a bit messy. I assume re-authentication would be needed too, if enabled.

Now, one option would be to only attempt to reconnect when Redis is not currently in the progress of reconnecting.

guess so.

However, in case Redis is stuck in the connection attempt (some one-off network/firewall/TCP issue), then we're indefinitely stuck in the connecting state. That's why I try to reconnect always if Redis is not 'ready' (ready == keymap + Redis version loaded).

This behaved much better and doesn't have much overhead in the timer worker for the common case where redis is connected. With it set to 60 seconds, clients (e.g. curl requests) would appear to hang when redis was actually up but we were waiting for the reconnect. At 2 seconds, it basically wasn't noticeable.


I think Nathan has some comments on the default reconnect interval - in my testing it just seemed to work better than having to wait up to a full minute before anything was working again (after bouncing redis server)

I think the real fix to stuck curl requests is that pmproxy should respond with an error code like HTTP 500, Redis is not available in case Redis is not connected.

sounds much better than ""Error, Array expected"" !


I tested the following scenarios with pmlogger disabled (so no discovery ingest going on) -
* redis down, start pmproxy, curl request (failed), redis up, pmproxy reconnects, curl request succeeds.

* redis up, start pmproxy, curl req (success), redis down, curl req (fails), redis up, pmproxy reconnect, curl success

* redis up, start pmproxy, redis down and then redis up (with no intervening curl req), curl req succeeds


Thanks for testing!

So that's all good it seems (IIRC the last test above didn't used to work). The error from a failed client request about expecting an array response isn't exactly user friendly (and this was visible in the grafana-pcp dashboard, which will confuse punters looking for the cause)
Remaining testing might involve the above as a unit test, but with:
* pmlogger enabled with discovery active

* pmlogger_farm enabled with lots of discovery ingest

* multiple parallel http client requests (e.g. from a busy grafana-pcp datasource) in a stress test with redis bouncing up/down periodically

* redis in cluster mode

* remote redis over high latency network


I currently have a test which is basically a combination of 1 and 3. I'm just thinking about the case of many in-flight Redis queries while a reconnect is happening, where after a successful reconnect some stale callback returns with an outdated ""Connection refused"" error, triggering another reconnect. Maybe we need to compare timestamps of last reconnect and compare them with the time when the Redis request was sent out, so we can ignore errors pre-dating the last successful Redis reconnect?

yes - we need to keep state and/or a timer to avoid the re-re-connect scenario.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1464,2021-11-03T22:36:21Z,2021-11-08T00:35:29Z,2021-11-09T23:05:35Z,MERGED,True,399,56,12,https://github.com/andreasgerstmayr,pmproxy: transparent Redis reconnect,1,[],https://github.com/performancecopilot/pcp/pull/1464,https://github.com/natoscott,9,https://github.com/performancecopilot/pcp/pull/1464#issuecomment-963817100,"switch from a boolean 'setup' to a state (connecting, connected,
ready, ...) for Redis connection state
handle Redis disconnects in the async reply handler
in a timer, check if the current state is disconnected and issue a
reconnect","every two seconds. Should I just not display any log messages about reconnects by default?


Other PCP client daemons that do reconnect (pmie, pmlogger) take the approach of logging once on connection loss, then once again when the connection is successfully re-established.  This is what the user/admin needs to know - nothing else.

I assume there are configurations out there with Redis configured but not available, and until now there's only one connection attempt at pmproxy startup, but then there will be millions of failed connection attempts to Redis over the lifetime of the pmproxy process.

We need to change that IMO (even on once-per-minute) - that's just too verbose, and is not end-user-useful information for the most part.


Another issue with that small interval is that after establishing the connection, we need to get the current keymap and Redis server version, only after that we can consider Redis 'ready'. If this takes too long, it will do another reconnect while one reconnect is running.


There are multiple independent states there I guess - the initial socket-connection-established state (which takes very little time, usually, even for remote redis-servers) is different to ""fully ready"" to service requests state.


Now, one option would be to only attempt to reconnect when Redis is not currently in the progress of reconnecting.

guess so.

No question - this is an issue (race) even with long intervals, we're just hiding the underlying problem by introducing a large (unfortunately user-visible) delay.


However, in case Redis is stuck in the connection attempt (some one-off network/firewall/TCP issue), then we're indefinitely stuck in the connecting state.


This is not a common scenario FWIW.  We need to handle it (timeouts?) but doing so shouldn't cause a poor user experience everywhere else, especially in the common cases.


That's why I try to reconnect always if Redis is not 'ready' (ready == keymap + Redis version loaded).


Perhaps separating out socket-level connection establishment to these other high-order aspects of Redis 'readiness' could help reduce/remove the overlapping-reconnection race conditions.



This behaved much better and doesn't have much overhead in the timer worker for the common case where redis is connected. With it set to 60 seconds, clients (e.g. curl requests) would appear to hang when redis was actually up but we were waiting for the reconnect. At 2 seconds, it basically wasn't noticeable.


I think Nathan has some comments on the default reconnect interval - in my testing it just seemed to work better than having to wait up to a full minute before anything was working again (after bouncing redis server)

Oh, simply that the 60 seconds is too long to delay for retry - its going to be very visible to end users who will be confused and have to spend time diagnosing it (sounds like it was the first thing Mark noticed when he tried this out).
The very common scenario of 'service restart redis' is one to optimize for - this should ""always"" (unless under adverse conditions, etc) be near-instant to provide a transparent user experience, and to avoid us continuing to get complaints.


I think the real fix to stuck curl requests is that pmproxy should respond with an error code like HTTP 500, Redis is not available in case Redis is not connected.

sounds much better than ""Error, Array expected"" !

+1


I currently have a test which is basically a combination of 1 and 3. I'm just thinking about the case of many in-flight Redis queries while a reconnect is happening, where after a successful reconnect some stale callback returns with an outdated ""Connection refused"" error, triggering another reconnect. Maybe we need to compare timestamps of last reconnect and compare them with the time when the Redis request was sent out, so we can ignore errors pre-dating the last successful Redis reconnect?


Or (more simple?) sequence numbers perhaps - i.e. every request gets an associated connection seq# and each successful reconnect increments that number.  Using timestamps may prove error prone when the system clock is adjusted.

yes - we need to keep state and/or a timer to avoid the re-re-connect scenario.

That hard-coded delay of 60 seconds should probably be configurable too BTW.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1464,2021-11-03T22:36:21Z,2021-11-08T00:35:29Z,2021-11-09T23:05:35Z,MERGED,True,399,56,12,https://github.com/andreasgerstmayr,pmproxy: transparent Redis reconnect,1,[],https://github.com/performancecopilot/pcp/pull/1464,https://github.com/andreasgerstmayr,10,https://github.com/performancecopilot/pcp/pull/1464#issuecomment-964449868,"switch from a boolean 'setup' to a state (connecting, connected,
ready, ...) for Redis connection state
handle Redis disconnects in the async reply handler
in a timer, check if the current state is disconnected and issue a
reconnect","I've reduced log spam now as you both suggested. It was actually quite simple, we just need to check to not log multiple failed attempts in a row, because multiple successful attempts won't happen anyway in a row (for a successful connection, there is no re-connect of course). The changes are quite small and low risk: #1471.
I've implemented the other changes in PR #1470.


Another issue with that small interval is that after establishing the connection, we need to get the current keymap and Redis server version, only after that we can consider Redis 'ready'. If this takes too long, it will do another reconnect while one reconnect is running.



that's a bit messy. I assume re-authentication would be needed too, if enabled.

Fortunately the auth is handled by hiredis-cluster already for every new connection.

Perhaps separating out socket-level connection establishment to these other high-order aspects of Redis 'readiness' could help reduce/remove the overlapping-reconnection race conditions.

We already have that, first is SLOTS_CONNECTED, second is SLOTS_READY.


However, in case Redis is stuck in the connection attempt (some one-off network/firewall/TCP issue), then we're indefinitely stuck in the connecting state.



This is not a common scenario FWIW. We need to handle it (timeouts?) but doing so shouldn't cause a poor user experience everywhere else, especially in the common cases.

I think stale/broken connections due to faulty loadbalancers, routers, switches, SDN, or any other network gear are not that uncommon. You're right, the configured timeouts should handle this. I think reconnecting in all cases if Redis is not ready would be more robust, but I'm not sure how to prevent re-re-connects with a small interval like 2s. I've changed it now as you suggested to only attempt to reconnect in the SLOTS_DISCONNECTED state. I made some changes in the response callback, to track errors in all states, so we should also catch errors in the phase between Redis connection established and Redis is ready.

Or (more simple?) sequence numbers perhaps - i.e. every request gets an associated connection seq# and each successful reconnect increments that number. Using timestamps may prove error prone when the system clock is adjusted.

Good idea, I've implemented it that way now. It was actually quite a small & clean patch, as we already have the required data structures and callbacks in place (the redisSlotsReplyData struct and related functions/callbacks). See #1470.
As it's literally the last hours before the release and thus not as well tested as it should be, I'm not very sure if we should include it in the upcoming release or not. The first PR #1471 however (re log spam) is low-risk and can definitely be included imho.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1464,2021-11-03T22:36:21Z,2021-11-08T00:35:29Z,2021-11-09T23:05:35Z,MERGED,True,399,56,12,https://github.com/andreasgerstmayr,pmproxy: transparent Redis reconnect,1,[],https://github.com/performancecopilot/pcp/pull/1464,https://github.com/natoscott,11,https://github.com/performancecopilot/pcp/pull/1464#issuecomment-964625196,"switch from a boolean 'setup' to a state (connecting, connected,
ready, ...) for Redis connection state
handle Redis disconnects in the async reply handler
in a timer, check if the current state is disconnected and issue a
reconnect","[...] I'm not very sure if we should include it in the upcoming release or not.

It's sufficiently important and user-affecting that I think its worth pulling in after close review - its surprisingly little code change.
We can delay the release a little while today too so that we can test this further.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1465,2021-11-04T00:49:55Z,2021-11-04T13:06:05Z,2021-11-04T13:06:05Z,MERGED,True,9,9,8,https://github.com/natoscott,qa: resolve new pylint warnings in f35 python,1,['CI'],https://github.com/performancecopilot/pcp/pull/1465,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1465,"Fixes ""W1505: Using deprecated method setDaemon()""","Fixes ""W1505: Using deprecated method setDaemon()""",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1465,2021-11-04T00:49:55Z,2021-11-04T13:06:05Z,2021-11-04T13:06:05Z,MERGED,True,9,9,8,https://github.com/natoscott,qa: resolve new pylint warnings in f35 python,1,['CI'],https://github.com/performancecopilot/pcp/pull/1465,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1465#issuecomment-960881378,"Fixes ""W1505: Using deprecated method setDaemon()""",lgtm,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1466,2021-11-05T01:09:03Z,2021-11-05T04:10:26Z,2021-11-05T04:10:57Z,CLOSED,False,6,5,4,https://github.com/natoscott,pmlogger scripts: move zeroconf definitions to read-only location,1,[],https://github.com/performancecopilot/pcp/pull/1466,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1466,"Follow up on suggestion in #1462 and relocate the zeroconf primary
logger default sampling interval setting to a read-only location.
This file does not belong in any user-configurable location - the
clue is in the name 'zeroconf' - it's not someconf. ;-)  This
is a more FHS-compliant location for this file and makes it very,
very clear this is not a file that should ever be edited.","Follow up on suggestion in #1462 and relocate the zeroconf primary
logger default sampling interval setting to a read-only location.
This file does not belong in any user-configurable location - the
clue is in the name 'zeroconf' - it's not someconf. ;-)  This
is a more FHS-compliant location for this file and makes it very,
very clear this is not a file that should ever be edited.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1466,2021-11-05T01:09:03Z,2021-11-05T04:10:26Z,2021-11-05T04:10:57Z,CLOSED,False,6,5,4,https://github.com/natoscott,pmlogger scripts: move zeroconf definitions to read-only location,1,[],https://github.com/performancecopilot/pcp/pull/1466,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1466#issuecomment-961555633,"Follow up on suggestion in #1462 and relocate the zeroconf primary
logger default sampling interval setting to a read-only location.
This file does not belong in any user-configurable location - the
clue is in the name 'zeroconf' - it's not someconf. ;-)  This
is a more FHS-compliant location for this file and makes it very,
very clear this is not a file that should ever be edited.","Just a note - some user wants everything in pcp-zeroconf, EXCEPT they want to change PMLOGGER_INTERVAL? e.g. in the integration lab where they have -t 3s because 10s was not frequent enough. I guess they'll just have to edit the control file to and add -t3 to override .. that's three different files in three different directories (not counting the config file itself), specifying the default interval.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1466,2021-11-05T01:09:03Z,2021-11-05T04:10:26Z,2021-11-05T04:10:57Z,CLOSED,False,6,5,4,https://github.com/natoscott,pmlogger scripts: move zeroconf definitions to read-only location,1,[],https://github.com/performancecopilot/pcp/pull/1466,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1466#issuecomment-961560729,"Follow up on suggestion in #1462 and relocate the zeroconf primary
logger default sampling interval setting to a read-only location.
This file does not belong in any user-configurable location - the
clue is in the name 'zeroconf' - it's not someconf. ;-)  This
is a more FHS-compliant location for this file and makes it very,
very clear this is not a file that should ever be edited.","Just a note - some user wants everything in pcp-zeroconf, EXCEPT they want to change PMLOGGER_INTERVAL?

Then zeroconf is not for them - its zeroconf for good reason.
Also, if they've given ""-t 3s"" in the control files (i.e. pmlogger command line), they're already overriding whatever zeroconf would set.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1466,2021-11-05T01:09:03Z,2021-11-05T04:10:26Z,2021-11-05T04:10:57Z,CLOSED,False,6,5,4,https://github.com/natoscott,pmlogger scripts: move zeroconf definitions to read-only location,1,[],https://github.com/performancecopilot/pcp/pull/1466,https://github.com/goodwinos,4,https://github.com/performancecopilot/pcp/pull/1466#issuecomment-961564577,"Follow up on suggestion in #1462 and relocate the zeroconf primary
logger default sampling interval setting to a read-only location.
This file does not belong in any user-configurable location - the
clue is in the name 'zeroconf' - it's not someconf. ;-)  This
is a more FHS-compliant location for this file and makes it very,
very clear this is not a file that should ever be edited.","there are ~ 2 dozen other files in the pcp-zeroconf package installed below /etc or /var. Some of them even marked as config files .. bit of a can of worms here
$ rpm -qlvV pcp-zeroconf
.........    /etc/pcp/pmieconf/zeroconf
.........  c /etc/pcp/pmieconf/zeroconf/all_threads
.........    /etc/pcp/pmlogconf/zeroconf
.........  c /etc/pcp/pmlogconf/zeroconf/atop-proc
.........  c /etc/pcp/pmlogconf/zeroconf/interrupts
.........  c /etc/pcp/pmlogconf/zeroconf/nfsclient
.........  c /etc/pcp/pmlogconf/zeroconf/numastat
.........  c /etc/pcp/pmlogconf/zeroconf/pidstat
.........  c /etc/pcp/pmlogconf/zeroconf/pidstat-summary
.........  c /etc/pcp/pmlogconf/zeroconf/tapestat
.........  c /etc/pcp/pmlogconf/zeroconf/xfs-perdev
.........  c /etc/sysconfig/pmlogger_zeroconf
.........    /usr/lib/systemd/system/pmlogger_daily_report.service
.........    /usr/lib/systemd/system/pmlogger_daily_report.timer
.........    /usr/lib/tmpfiles.d/pcp-zeroconf.conf
.........    /usr/libexec/pcp/bin/pmlogger_daily_report
.........    /var/lib/pcp/config/pmieconf/zeroconf
.........    /var/lib/pcp/config/pmieconf/zeroconf/all_threads
.........    /var/lib/pcp/config/pmlogconf/zeroconf
.........    /var/lib/pcp/config/pmlogconf/zeroconf/atop-proc
.........    /var/lib/pcp/config/pmlogconf/zeroconf/interrupts
.........    /var/lib/pcp/config/pmlogconf/zeroconf/nfsclient
.........    /var/lib/pcp/config/pmlogconf/zeroconf/numastat
.........    /var/lib/pcp/config/pmlogconf/zeroconf/pidstat
.........    /var/lib/pcp/config/pmlogconf/zeroconf/pidstat-summary
.........    /var/lib/pcp/config/pmlogconf/zeroconf/tapestat
.........    /var/lib/pcp/config/pmlogconf/zeroconf/xfs-perdev
.........    /var/log/pcp/sa",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1466,2021-11-05T01:09:03Z,2021-11-05T04:10:26Z,2021-11-05T04:10:57Z,CLOSED,False,6,5,4,https://github.com/natoscott,pmlogger scripts: move zeroconf definitions to read-only location,1,[],https://github.com/performancecopilot/pcp/pull/1466,https://github.com/natoscott,5,https://github.com/performancecopilot/pcp/pull/1466#issuecomment-961565460,"Follow up on suggestion in #1462 and relocate the zeroconf primary
logger default sampling interval setting to a read-only location.
This file does not belong in any user-configurable location - the
clue is in the name 'zeroconf' - it's not someconf. ;-)  This
is a more FHS-compliant location for this file and makes it very,
very clear this is not a file that should ever be edited.","There's no new issue there - pmlogconf and pmieconf are using historical locations - there's no alternative (yet) that zeroconf could use.  In both of those cases, /usr/share would be a more correct location however, and we should plan a transition in due course.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1466,2021-11-05T01:09:03Z,2021-11-05T04:10:26Z,2021-11-05T04:10:57Z,CLOSED,False,6,5,4,https://github.com/natoscott,pmlogger scripts: move zeroconf definitions to read-only location,1,[],https://github.com/performancecopilot/pcp/pull/1466,https://github.com/natoscott,6,https://github.com/performancecopilot/pcp/pull/1466#issuecomment-961613649,"Follow up on suggestion in #1462 and relocate the zeroconf primary
logger default sampling interval setting to a read-only location.
This file does not belong in any user-configurable location - the
clue is in the name 'zeroconf' - it's not someconf. ;-)  This
is a more FHS-compliant location for this file and makes it very,
very clear this is not a file that should ever be edited.",Merged.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1467,2021-11-05T07:19:36Z,2021-11-08T00:35:29Z,2021-11-08T00:35:29Z,MERGED,True,112,13,5,https://github.com/natoscott,pmlogconf: resolve issues in persisting changes to pmlogger config,1,[],https://github.com/performancecopilot/pcp/pull/1467,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1467,Resolves Red Hat BZ #2017632,Resolves Red Hat BZ #2017632,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1468,2021-11-08T21:13:45Z,2021-11-08T21:24:52Z,2021-11-09T19:12:34Z,MERGED,True,1,1,1,https://github.com/andreasgerstmayr,pmproxy: don't connect to Redis if it's not required,1,[],https://github.com/performancecopilot/pcp/pull/1468,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1468,"only connect to Redis if one of the following is enabled

Redis proxying
pmseries REST API
pmsearch REST API
archive discovery","only connect to Redis if one of the following is enabled

Redis proxying
pmseries REST API
pmsearch REST API
archive discovery",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1469,2021-11-09T10:47:59Z,2021-11-10T05:26:09Z,2021-11-10T05:26:09Z,MERGED,True,2147,0,59,https://github.com/arzoo14,[docs] Basic structure and Short Guides,1,[],https://github.com/performancecopilot/pcp/pull/1469,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1469,"This PR contains the following:

Basic Structure of Quick Guides.
Short Guides (Ch. 9 to 18) in reStructured Text (rst) format.","This PR contains the following:

Basic Structure of Quick Guides.
Short Guides (Ch. 9 to 18) in reStructured Text (rst) format.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1470,2021-11-09T18:43:41Z,2021-11-09T23:38:29Z,2021-11-10T13:06:56Z,MERGED,True,57,38,5,https://github.com/andreasgerstmayr,redis reconnect improvements,3,[],https://github.com/performancecopilot/pcp/pull/1470,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1470,"do not log more than one failed Redis connection attempt in a row
show ""trying to reconnect"" message only if logging is set to desperate
track Redis connection sequence numbers
reduce check interval to 2s

See #1464 for details.","do not log more than one failed Redis connection attempt in a row
show ""trying to reconnect"" message only if logging is set to desperate
track Redis connection sequence numbers
reduce check interval to 2s

See #1464 for details.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1471,2021-11-09T19:03:50Z,2021-11-09T23:38:29Z,2021-11-10T13:06:56Z,MERGED,True,9,2,2,https://github.com/andreasgerstmayr,libpcp_web: do not log more than one failed Redis connection attempt in a row,1,[],https://github.com/performancecopilot/pcp/pull/1471,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1471,"and show ""trying to reconnect"" message only if logging is set to desperate","and show ""trying to reconnect"" message only if logging is set to desperate",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1472,2021-11-10T06:10:03Z,2021-11-10T22:23:24Z,2021-11-10T22:23:32Z,MERGED,True,22,0,7,https://github.com/natoscott,selinux: resolve an AVC Kenj observed on el8 with pmdashping,1,[],https://github.com/performancecopilot/pcp/pull/1472,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1472,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1473,2021-11-11T21:34:24Z,2021-11-12T03:03:21Z,2021-11-12T03:03:21Z,MERGED,True,381,9,8,https://github.com/arzoo14,[docs] Quick Guides,1,[],https://github.com/performancecopilot/pcp/pull/1473,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1473,This PR contains the Quick Guides (Ch. 1 to 9) in reStructured Text (rst) format.,This PR contains the Quick Guides (Ch. 1 to 9) in reStructured Text (rst) format.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1474,2021-11-12T04:23:43Z,2021-11-23T06:05:00Z,2021-11-23T06:05:00Z,MERGED,True,98,1,2,https://github.com/arzoo14,[docs] Quick Guides : Ch-6,1,[],https://github.com/performancecopilot/pcp/pull/1474,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1474,This PR contains the Chapter-6 : Automate performance problem detection of Quick Guides in reStructured Text (rst) format.,This PR contains the Chapter-6 : Automate performance problem detection of Quick Guides in reStructured Text (rst) format.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1478,2021-11-19T15:47:48Z,2021-12-13T20:11:56Z,2022-03-30T19:17:39Z,MERGED,True,394,404,13,https://github.com/andreasgerstmayr,pmdabcc: sync bcc PMDA modules with upstream bcc tools,1,[],https://github.com/performancecopilot/pcp/pull/1478,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1478,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1479,2021-11-19T16:01:43Z,2021-12-14T12:34:15Z,2022-03-30T19:16:59Z,MERGED,True,331229,398,14,https://github.com/andreasgerstmayr,pmdabpf: support multiple arches,2,[],https://github.com/performancecopilot/pcp/pull/1479,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1479,"pmdabpf: added support for arm64 and powerpc
reinstate full vmlinux.h file, from upstream iovisor/bcc. let's consider this file as a blob (as it's a generated file) and not manually mess with it - sorry for criticising the exact same thing on the initial review of Jason's bpf PMDA PR :|
additionally, fix runqlat bpf module for kernels 5.14 (rename of state field in task struct)","pmdabpf: added support for arm64 and powerpc
reinstate full vmlinux.h file, from upstream iovisor/bcc. let's consider this file as a blob (as it's a generated file) and not manually mess with it - sorry for criticising the exact same thing on the initial review of Jason's bpf PMDA PR :|
additionally, fix runqlat bpf module for kernels 5.14 (rename of state field in task struct)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1479,2021-11-19T16:01:43Z,2021-12-14T12:34:15Z,2022-03-30T19:16:59Z,MERGED,True,331229,398,14,https://github.com/andreasgerstmayr,pmdabpf: support multiple arches,2,[],https://github.com/performancecopilot/pcp/pull/1479,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1479#issuecomment-974248955,"pmdabpf: added support for arm64 and powerpc
reinstate full vmlinux.h file, from upstream iovisor/bcc. let's consider this file as a blob (as it's a generated file) and not manually mess with it - sorry for criticising the exact same thing on the initial review of Jason's bpf PMDA PR :|
additionally, fix runqlat bpf module for kernels 5.14 (rename of state field in task struct)","as we're already requiring bpftool, we could also generate the vmlinux.h on-the-fly during the build? need to verify if BTF is enabled on all distros which we want to support for this PMDA.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1479,2021-11-19T16:01:43Z,2021-12-14T12:34:15Z,2022-03-30T19:16:59Z,MERGED,True,331229,398,14,https://github.com/andreasgerstmayr,pmdabpf: support multiple arches,2,[],https://github.com/performancecopilot/pcp/pull/1479,https://github.com/andreasgerstmayr,3,https://github.com/performancecopilot/pcp/pull/1479#issuecomment-975750791,"pmdabpf: added support for arm64 and powerpc
reinstate full vmlinux.h file, from upstream iovisor/bcc. let's consider this file as a blob (as it's a generated file) and not manually mess with it - sorry for criticising the exact same thing on the initial review of Jason's bpf PMDA PR :|
additionally, fix runqlat bpf module for kernels 5.14 (rename of state field in task struct)","@jasonk000 what do you think, could we generate the vmlinux.h file on-the-fly during build time? It'd have the additional advantage of now having to worry about different architectures, not having a big blob in the git sources and/or not having to cut/extract the important parts of the vmlinux.h every time we update some bpf PMDA module.
The disadvantage is that it will effectively disable the bpf PMDA on distribution releases which don't have BTF enabled yet by default, for example Ubuntu 20.04 LTS. If you recompile PCP on a BTF-enabled Ubuntu 20.04 however, it will work and include the bpf PMDA.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1479,2021-11-19T16:01:43Z,2021-12-14T12:34:15Z,2022-03-30T19:16:59Z,MERGED,True,331229,398,14,https://github.com/andreasgerstmayr,pmdabpf: support multiple arches,2,[],https://github.com/performancecopilot/pcp/pull/1479,https://github.com/jasonk000,4,https://github.com/performancecopilot/pcp/pull/1479#issuecomment-975768256,"pmdabpf: added support for arm64 and powerpc
reinstate full vmlinux.h file, from upstream iovisor/bcc. let's consider this file as a blob (as it's a generated file) and not manually mess with it - sorry for criticising the exact same thing on the initial review of Jason's bpf PMDA PR :|
additionally, fix runqlat bpf module for kernels 5.14 (rename of state field in task struct)","As long as user can provide / override / default the path to some location for vmlinux or the BTF information then a solution should be easy for user to self-provide.
Generating the file at build time to support setup makes sense to me, especially across multiple architectures. It does have the complication you mentioned. In our deployment we provide vmlinux BTF information out of band -- ie: we still use a kernel that does not provide BTF, and have a separate packaging process to deliver BTF.
So, the reason we'd need to provide the path is because we have the BTF available outside the kernel:
bpftool btf dump file /sys/kernel/btf/vmlinux format c

vs
bpftool btf dump file /boot/vmlinux-5.4.0-1057-aws format c",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1479,2021-11-19T16:01:43Z,2021-12-14T12:34:15Z,2022-03-30T19:16:59Z,MERGED,True,331229,398,14,https://github.com/andreasgerstmayr,pmdabpf: support multiple arches,2,[],https://github.com/performancecopilot/pcp/pull/1479,https://github.com/andreasgerstmayr,5,https://github.com/performancecopilot/pcp/pull/1479#issuecomment-976752562,"pmdabpf: added support for arm64 and powerpc
reinstate full vmlinux.h file, from upstream iovisor/bcc. let's consider this file as a blob (as it's a generated file) and not manually mess with it - sorry for criticising the exact same thing on the initial review of Jason's bpf PMDA PR :|
additionally, fix runqlat bpf module for kernels 5.14 (rename of state field in task struct)","@jasonk000: Thanks for your comments!
I've added --with-pmdabpf-btf to specify the location of the BTF sources (defaults to /sys/kernel/btf/vmlinux, but can be overridden with this argument). For a out-of-band bpftool you can use --with-pmdabpf-bpftool.
Do you mind giving it a quick try to check if this PR doesn't break your workflow? I'll merge it if everything is fine.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1479,2021-11-19T16:01:43Z,2021-12-14T12:34:15Z,2022-03-30T19:16:59Z,MERGED,True,331229,398,14,https://github.com/andreasgerstmayr,pmdabpf: support multiple arches,2,[],https://github.com/performancecopilot/pcp/pull/1479,https://github.com/jasonk000,6,https://github.com/performancecopilot/pcp/pull/1479#issuecomment-983972305,"pmdabpf: added support for arm64 and powerpc
reinstate full vmlinux.h file, from upstream iovisor/bcc. let's consider this file as a blob (as it's a generated file) and not manually mess with it - sorry for criticising the exact same thing on the initial review of Jason's bpf PMDA PR :|
additionally, fix runqlat bpf module for kernels 5.14 (rename of state field in task struct)","@andreasgerstmayr this works great, --with-pmdabpf-btf= and --with-pmdabpf-bpftool= do allow me to continue custom building against kernels that do not have BTF enabled at build time. Thank you!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1482,2021-11-23T04:52:02Z,2021-11-23T06:03:08Z,2021-11-23T06:03:14Z,MERGED,True,45,50,2,https://github.com/natoscott,python api: updates to allow building from outside git repo,1,[],https://github.com/performancecopilot/pcp/pull/1482,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1482,"Removes use of (internal-only) libpcp.h and deprecated.h headers
from the python/C wrapper glue code.  Achieved via a combination
of dropping unused code (timevalSleep), local declarations of a
few (mainly options related) internal APIs, dropping a DBG_TRACE
macro usage, allowing use of system headers like <pcp/pmapi.h> &
<pcp/pmda.h> if local git copies not found, and use of the newer
pmID_item/pmID_cluster interfaces instead of __pmID_int.
Resolves #1481","Removes use of (internal-only) libpcp.h and deprecated.h headers
from the python/C wrapper glue code.  Achieved via a combination
of dropping unused code (timevalSleep), local declarations of a
few (mainly options related) internal APIs, dropping a DBG_TRACE
macro usage, allowing use of system headers like <pcp/pmapi.h> &
<pcp/pmda.h> if local git copies not found, and use of the newer
pmID_item/pmID_cluster interfaces instead of __pmID_int.
Resolves #1481",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1483,2021-11-23T05:11:51Z,2021-11-23T06:03:08Z,2021-11-23T06:03:19Z,MERGED,True,12,58,2,https://github.com/natoscott,pmlogconf: fix reprobing with interactive changes,1,[],https://github.com/performancecopilot/pcp/pull/1483,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1483,"In testing an earlier persistance fix it was discovered
that reprobe was inadvertently overwriting user requests
for changes interactively.
Related to Red Hat BZ #2017632","In testing an earlier persistance fix it was discovered
that reprobe was inadvertently overwriting user requests
for changes interactively.
Related to Red Hat BZ #2017632",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1484,2021-11-24T04:31:19Z,2021-11-24T05:14:07Z,2021-11-24T05:14:07Z,MERGED,True,20,20,1,https://github.com/arzoo14,[docs] Improvements in docs,1,[],https://github.com/performancecopilot/pcp/pull/1484,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1484,This PR removes the 'chapter' keyword from the Quick Guides main page.,This PR removes the 'chapter' keyword from the Quick Guides main page.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1485,2021-11-25T22:17:56Z,2021-11-29T23:10:21Z,2021-12-08T02:37:58Z,MERGED,True,8,1,1,https://github.com/natoscott,libpcp_pmda: add indom cache fast-paths for inst lookup beyond max,1,[],https://github.com/performancecopilot/pcp/pull/1485,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1485,"We encountered a situation where indom cache loading consumed vast
CPU resources for an indom of size ~150k instances.  Profiling was
used to identify the insert loop that ensures the inst linked list
within the cache hash tables is sorted - this loop is O(N*2) as we
potentially walk this list from the start on every insert during a
cache load.  Because cache loading happens from a sorted file, the
worst-case scenario happened every time - each new instance insert
occurs beyond the current maximum.  Fortunately we maintain a last
entry pointer, so the new fast path uses that first and falls back
to the original behaviour for an out-of-order insertion.
A second opportunity for the same optimization was identified when
auditing the rest of cache.c - in the find_inst() routine for inst
identifier lookups beyond the current maximum observed instance.
Resolves Red Hat BZ #2024648","We encountered a situation where indom cache loading consumed vast
CPU resources for an indom of size ~150k instances.  Profiling was
used to identify the insert loop that ensures the inst linked list
within the cache hash tables is sorted - this loop is O(N*2) as we
potentially walk this list from the start on every insert during a
cache load.  Because cache loading happens from a sorted file, the
worst-case scenario happened every time - each new instance insert
occurs beyond the current maximum.  Fortunately we maintain a last
entry pointer, so the new fast path uses that first and falls back
to the original behaviour for an out-of-order insertion.
A second opportunity for the same optimization was identified when
auditing the rest of cache.c - in the find_inst() routine for inst
identifier lookups beyond the current maximum observed instance.
Resolves Red Hat BZ #2024648",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1486,2021-11-26T03:18:01Z,2021-11-29T23:10:21Z,2021-11-29T23:10:21Z,MERGED,True,14,5,1,https://github.com/natoscott,pmdammv: use highest available timestamp resolution for checks,1,[],https://github.com/performancecopilot/pcp/pull/1486,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1486,"Update MMV to use the native filesystem mtime timestamp for the
directory modification checks.  This attempts to resolve a race
Ken is observing in qa/1626 where multiple pmproxy MMV mappings
are created in close succession.","Update MMV to use the native filesystem mtime timestamp for the
directory modification checks.  This attempts to resolve a race
Ken is observing in qa/1626 where multiple pmproxy MMV mappings
are created in close succession.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1487,2021-11-29T23:41:44Z,2021-11-30T01:08:58Z,2021-11-30T01:08:58Z,MERGED,True,76,0,6,https://github.com/natoscott,pmdalinux: add new MPTCP metrics from latest Linux kernel versions,1,[],https://github.com/performancecopilot/pcp/pull/1487,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1487,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1488,2021-12-02T05:59:44Z,2021-12-02T19:46:06Z,2021-12-02T19:46:08Z,MERGED,True,32,54,5,https://github.com/natoscott,pmproxy: fix race on teardown of pcp protocol proxy clients,2,[],https://github.com/performancecopilot/pcp/pull/1488,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1488,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1488,2021-12-02T05:59:44Z,2021-12-02T19:46:06Z,2021-12-02T19:46:08Z,MERGED,True,32,54,5,https://github.com/natoscott,pmproxy: fix race on teardown of pcp protocol proxy clients,2,[],https://github.com/performancecopilot/pcp/pull/1488,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1488#issuecomment-984944315,,"I've pulled these changes to vm39, and qa/294 is passing there now ... so the ""corrupted double-linked list"" issue I saw earlier (that was a hard failure) has been resolved.
And check -g pmproxy passes all tests, so no regressions that the QA suite can expose.
Looks good, thanks @natoscott.",True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1489,2021-12-05T21:54:27Z,2021-12-08T04:37:35Z,2021-12-08T04:37:37Z,CLOSED,False,24,5,5,https://github.com/goodwinos,logutil: add path handler for pmlogger_farm_check service,1,[],https://github.com/performancecopilot/pcp/pull/1489,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1489,"The pmlogger_farm_check service is responsible for checking pmlogger
farm processes, restarting any pmloggers that have failed and for
starting any new pmlogger farm processes after control file changes.
The service is driven by pmlogger_farm_check.timer, which starts
the service every 5 minutes. When the service is triggered by the
timer, it simply runs 'pmlogctl -m check' and then exits. See
pmlogctl(1) for details. This works fine but it does mean there may
be up to a five minute delay before any pmlogger control file changes
will be automatically applied to the pmlogger farm.
This commit adds a systemd path handler to the pmlogger_farm_check
service to also trigger the service when there are any changes to
$PCP_SYSCONF_DIR/pmlogger/control or to the control file directory
$PCP_SYSCONF_DIR/pmlogger/control.d (i.e. new control files are added
or changes have been made to any existing control files). The trigger
is applied only when an fd for the file or directory is closed (not
when it is opened or written to).
The existing timer is retained - to periodically check/migrate/restart
any dead loggers, regardless of whether there have been any control
file changes.
This has been manually tested but will need a new QA test - TODO.","The pmlogger_farm_check service is responsible for checking pmlogger
farm processes, restarting any pmloggers that have failed and for
starting any new pmlogger farm processes after control file changes.
The service is driven by pmlogger_farm_check.timer, which starts
the service every 5 minutes. When the service is triggered by the
timer, it simply runs 'pmlogctl -m check' and then exits. See
pmlogctl(1) for details. This works fine but it does mean there may
be up to a five minute delay before any pmlogger control file changes
will be automatically applied to the pmlogger farm.
This commit adds a systemd path handler to the pmlogger_farm_check
service to also trigger the service when there are any changes to
$PCP_SYSCONF_DIR/pmlogger/control or to the control file directory
$PCP_SYSCONF_DIR/pmlogger/control.d (i.e. new control files are added
or changes have been made to any existing control files). The trigger
is applied only when an fd for the file or directory is closed (not
when it is opened or written to).
The existing timer is retained - to periodically check/migrate/restart
any dead loggers, regardless of whether there have been any control
file changes.
This has been manually tested but will need a new QA test - TODO.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1489,2021-12-05T21:54:27Z,2021-12-08T04:37:35Z,2021-12-08T04:37:37Z,CLOSED,False,24,5,5,https://github.com/goodwinos,logutil: add path handler for pmlogger_farm_check service,1,[],https://github.com/performancecopilot/pcp/pull/1489,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1489#issuecomment-986323679,"The pmlogger_farm_check service is responsible for checking pmlogger
farm processes, restarting any pmloggers that have failed and for
starting any new pmlogger farm processes after control file changes.
The service is driven by pmlogger_farm_check.timer, which starts
the service every 5 minutes. When the service is triggered by the
timer, it simply runs 'pmlogctl -m check' and then exits. See
pmlogctl(1) for details. This works fine but it does mean there may
be up to a five minute delay before any pmlogger control file changes
will be automatically applied to the pmlogger farm.
This commit adds a systemd path handler to the pmlogger_farm_check
service to also trigger the service when there are any changes to
$PCP_SYSCONF_DIR/pmlogger/control or to the control file directory
$PCP_SYSCONF_DIR/pmlogger/control.d (i.e. new control files are added
or changes have been made to any existing control files). The trigger
is applied only when an fd for the file or directory is closed (not
when it is opened or written to).
The existing timer is retained - to periodically check/migrate/restart
any dead loggers, regardless of whether there have been any control
file changes.
This has been manually tested but will need a new QA test - TODO.",We did this once before for the pmlogger/pmie services and it was an unmitigated disaster of race conditions and systemd cyclic dependencies.  What's changed that we'd revisit this again now?,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1489,2021-12-05T21:54:27Z,2021-12-08T04:37:35Z,2021-12-08T04:37:37Z,CLOSED,False,24,5,5,https://github.com/goodwinos,logutil: add path handler for pmlogger_farm_check service,1,[],https://github.com/performancecopilot/pcp/pull/1489,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1489#issuecomment-988492161,"The pmlogger_farm_check service is responsible for checking pmlogger
farm processes, restarting any pmloggers that have failed and for
starting any new pmlogger farm processes after control file changes.
The service is driven by pmlogger_farm_check.timer, which starts
the service every 5 minutes. When the service is triggered by the
timer, it simply runs 'pmlogctl -m check' and then exits. See
pmlogctl(1) for details. This works fine but it does mean there may
be up to a five minute delay before any pmlogger control file changes
will be automatically applied to the pmlogger farm.
This commit adds a systemd path handler to the pmlogger_farm_check
service to also trigger the service when there are any changes to
$PCP_SYSCONF_DIR/pmlogger/control or to the control file directory
$PCP_SYSCONF_DIR/pmlogger/control.d (i.e. new control files are added
or changes have been made to any existing control files). The trigger
is applied only when an fd for the file or directory is closed (not
when it is opened or written to).
The existing timer is retained - to periodically check/migrate/restart
any dead loggers, regardless of whether there have been any control
file changes.
This has been manually tested but will need a new QA test - TODO.",Superceded by #1495,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1491,2021-12-07T01:22:05Z,2021-12-08T00:18:31Z,2022-01-11T20:45:45Z,MERGED,True,228,3,3,https://github.com/jasonk000,"pmproxy: when secure.enabled is false, do not attempt to init ssl context even for https requests",4,[],https://github.com/performancecopilot/pcp/pull/1491,https://github.com/jasonk000,1,https://github.com/performancecopilot/pcp/pull/1491,fixes #1490,fixes #1490,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1491,2021-12-07T01:22:05Z,2021-12-08T00:18:31Z,2022-01-11T20:45:45Z,MERGED,True,228,3,3,https://github.com/jasonk000,"pmproxy: when secure.enabled is false, do not attempt to init ssl context even for https requests",4,[],https://github.com/performancecopilot/pcp/pull/1491,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1491#issuecomment-988552352,fixes #1490,@jasonk000 Could you please add qa/1458.out? Thanks.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1491,2021-12-07T01:22:05Z,2021-12-08T00:18:31Z,2022-01-11T20:45:45Z,MERGED,True,228,3,3,https://github.com/jasonk000,"pmproxy: when secure.enabled is false, do not attempt to init ssl context even for https requests",4,[],https://github.com/performancecopilot/pcp/pull/1491,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1491#issuecomment-988558341,fixes #1490,"@jasonk000 Could you please add qa/1458.out? Thanks.

I've pushed this now so that its in place for tonight's full CI run - @jasonk000 please double-check?  Thanks.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1491,2021-12-07T01:22:05Z,2021-12-08T00:18:31Z,2022-01-11T20:45:45Z,MERGED,True,228,3,3,https://github.com/jasonk000,"pmproxy: when secure.enabled is false, do not attempt to init ssl context even for https requests",4,[],https://github.com/performancecopilot/pcp/pull/1491,https://github.com/kmcdonell,4,https://github.com/performancecopilot/pcp/pull/1491#issuecomment-988673790,fixes #1490,I suspect there is more work to be done here (for qa/1458) ... I have 3 different failure signatures in the QA Farm (after qa/1458.out was available).,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1491,2021-12-07T01:22:05Z,2021-12-08T00:18:31Z,2022-01-11T20:45:45Z,MERGED,True,228,3,3,https://github.com/jasonk000,"pmproxy: when secure.enabled is false, do not attempt to init ssl context even for https requests",4,[],https://github.com/performancecopilot/pcp/pull/1491,https://github.com/jasonk000,5,https://github.com/performancecopilot/pcp/pull/1491#issuecomment-989004891,fixes #1490,"Hi @natoscott, I see Ken's note, but I'm not sure how to progress it further from here - could you share the details from CI?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1491,2021-12-07T01:22:05Z,2021-12-08T00:18:31Z,2022-01-11T20:45:45Z,MERGED,True,228,3,3,https://github.com/jasonk000,"pmproxy: when secure.enabled is false, do not attempt to init ssl context even for https requests",4,[],https://github.com/performancecopilot/pcp/pull/1491,https://github.com/natoscott,6,https://github.com/performancecopilot/pcp/pull/1491#issuecomment-989264287,fixes #1490,"@jasonk000 see Ken's private mail from earlier today.  Summary follows...
There's basically two main types of failure (across the five slightly different failing platforms).  In one case, curl consistently gives what looks like an empty response - I'm not sure about root cause there yet but possibly this is on platforms without libuv (I'll add a check for that).  In the other case, we see spurious pmproxy.log messages about failed attempts to connect to Redis.  This is a known issue Andreas and I have been discussing recently, where libpcp_web will fallback to attempting creation of a Redis connection even when pmproxy is configured not to use Redis ... we can filter the message out for now, its unrelated to this fix, or I might tackle the underlying libpcp_web problem if I get time today.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1491,2021-12-07T01:22:05Z,2021-12-08T00:18:31Z,2022-01-11T20:45:45Z,MERGED,True,228,3,3,https://github.com/jasonk000,"pmproxy: when secure.enabled is false, do not attempt to init ssl context even for https requests",4,[],https://github.com/performancecopilot/pcp/pull/1491,https://github.com/kmcdonell,7,https://github.com/performancecopilot/pcp/pull/1491#issuecomment-989265838,fixes #1490,"Small correction, I've seen 5 failure cases across 9 different failing platforms.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1492,2021-12-07T02:16:24Z,2021-12-08T04:37:25Z,2021-12-08T04:37:26Z,CLOSED,False,4,3,2,https://github.com/goodwinos,logutil: tweak pmlogger and pmlogger_farm_check deps,1,[],https://github.com/performancecopilot/pcp/pull/1492,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1492,"Fix missing dep so pmlogger_farm_check.timer is now required by
pmlogger_farm_check.service (which in turn is required by the
pmlogger_farm.service) so control file changes will be checked and
applied when the timer goes off (now every 2 mins).  Previously the
timer was not started on virgin installs due to the missing dep,
probably resulting in RHBZ#2027753.
Also strengthen deps so pmlogger.service ""wants"" pmlogger_farm
(so systemd will try and start/stop the farm service when the pmlogger
service is started/stopped).
Resolves: RHBZ#2027753
Related: #1489","Fix missing dep so pmlogger_farm_check.timer is now required by
pmlogger_farm_check.service (which in turn is required by the
pmlogger_farm.service) so control file changes will be checked and
applied when the timer goes off (now every 2 mins).  Previously the
timer was not started on virgin installs due to the missing dep,
probably resulting in RHBZ#2027753.
Also strengthen deps so pmlogger.service ""wants"" pmlogger_farm
(so systemd will try and start/stop the farm service when the pmlogger
service is started/stopped).
Resolves: RHBZ#2027753
Related: #1489",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1492,2021-12-07T02:16:24Z,2021-12-08T04:37:25Z,2021-12-08T04:37:26Z,CLOSED,False,4,3,2,https://github.com/goodwinos,logutil: tweak pmlogger and pmlogger_farm_check deps,1,[],https://github.com/performancecopilot/pcp/pull/1492,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1492#issuecomment-988492120,"Fix missing dep so pmlogger_farm_check.timer is now required by
pmlogger_farm_check.service (which in turn is required by the
pmlogger_farm.service) so control file changes will be checked and
applied when the timer goes off (now every 2 mins).  Previously the
timer was not started on virgin installs due to the missing dep,
probably resulting in RHBZ#2027753.
Also strengthen deps so pmlogger.service ""wants"" pmlogger_farm
(so systemd will try and start/stop the farm service when the pmlogger
service is started/stopped).
Resolves: RHBZ#2027753
Related: #1489",Superceded by #1495,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1493,2021-12-07T04:30:23Z,2021-12-08T00:18:31Z,2021-12-08T03:09:46Z,MERGED,True,8,6,6,https://github.com/natoscott,"pmlogger, pmie scripts: fix Before= lines in systemd files",1,[],https://github.com/performancecopilot/pcp/pull/1493,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1493,"The Before= lines in pmie_farm and pmlogger_farm files lacked
a link to the associated timer.  The BindsTo= lines had links
to the unrelated primary pmlogger/pmie_check timers.
Finally, remove a hard-coded path from these .in files, which
was inconsistent with the rest of the systemd files setup.","The Before= lines in pmie_farm and pmlogger_farm files lacked
a link to the associated timer.  The BindsTo= lines had links
to the unrelated primary pmlogger/pmie_check timers.
Finally, remove a hard-coded path from these .in files, which
was inconsistent with the rest of the systemd files setup.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1493,2021-12-07T04:30:23Z,2021-12-08T00:18:31Z,2021-12-08T03:09:46Z,MERGED,True,8,6,6,https://github.com/natoscott,"pmlogger, pmie scripts: fix Before= lines in systemd files",1,[],https://github.com/performancecopilot/pcp/pull/1493,https://github.com/goodwinos,2,https://github.com/performancecopilot/pcp/pull/1493#issuecomment-988318275,"The Before= lines in pmie_farm and pmlogger_farm files lacked
a link to the associated timer.  The BindsTo= lines had links
to the unrelated primary pmlogger/pmie_check timers.
Finally, remove a hard-coded path from these .in files, which
was inconsistent with the rest of the systemd files setup.","Changes look fine. I built and did a minimal virgin install (without pcp-zeroconf). After enabling and starting pmcd, pmlogger and pmlogger_farm, the pmlogger_farm_check.timer was now correctly running. I did not run any upgrade tests and did not install or test pcp-zeroconf. Since the WantedBy= change from PR#1492 isn't included, ansible-pcp will need to enable and start the pmlogger_farm.service. The existing spec %post scriptlet for the pcp base package should handle enabling and starting pmlogger_farm for upgrades (provided pmlogger.service ends up enabled after the upgrade completes).
I will close both of my earlier PRs (unmerged).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1493,2021-12-07T04:30:23Z,2021-12-08T00:18:31Z,2021-12-08T03:09:46Z,MERGED,True,8,6,6,https://github.com/natoscott,"pmlogger, pmie scripts: fix Before= lines in systemd files",1,[],https://github.com/performancecopilot/pcp/pull/1493,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1493#issuecomment-988322113,"The Before= lines in pmie_farm and pmlogger_farm files lacked
a link to the associated timer.  The BindsTo= lines had links
to the unrelated primary pmlogger/pmie_check timers.
Finally, remove a hard-coded path from these .in files, which
was inconsistent with the rest of the systemd files setup.","Changes look fine. I built and did a minimal virgin install (without pcp-zeroconf). After enabling and starting pmcd, pmlogger and pmlogger_farm, the pmlogger_farm_check.timer was now correctly running. I did not run any upgrade tests and did not install or test pcp-zeroconf. Since the WantedBy= change from PR#1492 isn't included, ansible-pcp will need to enable and start the pmlogger_farm.service.

OK, thanks for testing (s/WantedBy/Wants/ there, strictly, but I know what you meant).  I'll work on the ansible-pcp changes today.

I will close both of my earlier PRs (unmerged).

+1",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1495,2021-12-08T04:25:27Z,2021-12-08T05:12:00Z,2021-12-08T05:12:04Z,MERGED,True,17,52,6,https://github.com/natoscott,Resolve inconsistencies in new 'farm' and other systemd units,1,[],https://github.com/performancecopilot/pcp/pull/1495,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1495,"This change most importantly introduces the Wants= line Mark
(and Jan earlier, indirectly) proposed to make pmlogger_farm
handling function as end-users will expect when manipulating
the pmlogger.service.  Ditto for pmie.
There's also several cleanups of things that are inconsistent
and just plain wrong or missing, particularly in spec files.
This supercedes PR #1492 and PR #1489.
This resolves Red Hat BZ #2027753.","This change most importantly introduces the Wants= line Mark
(and Jan earlier, indirectly) proposed to make pmlogger_farm
handling function as end-users will expect when manipulating
the pmlogger.service.  Ditto for pmie.
There's also several cleanups of things that are inconsistent
and just plain wrong or missing, particularly in spec files.
This supercedes PR #1492 and PR #1489.
This resolves Red Hat BZ #2027753.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1496,2021-12-08T23:41:56Z,2021-12-09T05:48:33Z,2021-12-09T05:48:38Z,MERGED,True,8,6,2,https://github.com/natoscott,Resolve inconsistencies in new 'farm' systemd timers,1,[],https://github.com/performancecopilot/pcp/pull/1496,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1496,"When the farm systemd timers were introduced the check interval
was drastically reduced from half hourly to 5 minutely.  There
wasn't any discussion about rationales for this and its now not
consistent (does not dovetail at all) with the primary pmlogger
and pmie service.  If startup takes a long time (large farms or
slow networks) these will likely overlap constantly, and timing
should be such that we work with the primary services in mind.
Reset to half hourly for these checks, and lets revisit this in
the new year when the other systemd changes are being proposed.
Related to #1495","When the farm systemd timers were introduced the check interval
was drastically reduced from half hourly to 5 minutely.  There
wasn't any discussion about rationales for this and its now not
consistent (does not dovetail at all) with the primary pmlogger
and pmie service.  If startup takes a long time (large farms or
slow networks) these will likely overlap constantly, and timing
should be such that we work with the primary services in mind.
Reset to half hourly for these checks, and lets revisit this in
the new year when the other systemd changes are being proposed.
Related to #1495",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1497,2021-12-09T06:26:03Z,2021-12-13T08:03:03Z,2021-12-13T19:36:25Z,MERGED,True,114,59,11,https://github.com/natoscott,libpcp_web: honour config settings that disable redis completely,1,[],https://github.com/performancecopilot/pcp/pull/1497,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1497,"Exercised by existing QA test 1458 via CI platforms with no Redis
(test is currently failing there due to this issue).
Related to #1491","Exercised by existing QA test 1458 via CI platforms with no Redis
(test is currently failing there due to this issue).
Related to #1491",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1497,2021-12-09T06:26:03Z,2021-12-13T08:03:03Z,2021-12-13T19:36:25Z,MERGED,True,114,59,11,https://github.com/natoscott,libpcp_web: honour config settings that disable redis completely,1,[],https://github.com/performancecopilot/pcp/pull/1497,https://github.com/kmcdonell,2,https://github.com/performancecopilot/pcp/pull/1497#issuecomment-992805221,"Exercised by existing QA test 1458 via CI platforms with no Redis
(test is currently failing there due to this issue).
Related to #1491",Thanks @natoscott ... qa/1458 is now passing on all the QA Farm Hosts (6 failures previously).,True,"{'THUMBS_UP': ['https://github.com/natoscott', 'https://github.com/jasonk000']}"
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1499,2021-12-13T21:54:57Z,2021-12-14T03:21:37Z,2021-12-14T03:21:45Z,MERGED,True,57,30,3,https://github.com/natoscott,pmlogconf: switch to the bulk pmLookupDescs(3) interface,1,[],https://github.com/performancecopilot/pcp/pull/1499,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1499,"No functional change, all existing regression tests pass.
Related to Red Hat BZ #1973833.","No functional change, all existing regression tests pass.
Related to Red Hat BZ #1973833.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1500,2021-12-14T05:19:20Z,2021-12-14T06:34:34Z,2021-12-14T06:34:34Z,MERGED,True,36,66,10,https://github.com/natoscott,pmlogger/pmie farms: give up on soft link to pmlogger/pmie,1,[],https://github.com/performancecopilot/pcp/pull/1500,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1500,"Several attempts to allow the pmlogger and new pmlogger_farm
services to exist both dependently and independently haven't
been able to solve the problem of the pmlogger_farm services
and timers starting reliably when we need them to.  This has
caused various backwards-compatibility regressions not least
of which is ansible-pcp and the metrics role.
Simplify things by enforcing a hard link between these now -
when pmlogger is enabled/started so is pmlogger_farm.  Using
the same systemd mechanisms we have used reliably to ensure
pmlogger_check and pmlogger_daily are linked to pmlogger, we
now have reliable farm services once more.  The farm-versus-
primary cgroup separation is still maintained however.
While here, I saw the TODO note re lacking cron-back-compat
support - I've implemented that correctly now (trivial) but
its unlikely to affect anyone nowadays.
Resolves Red Hat BZ #2027753.","Several attempts to allow the pmlogger and new pmlogger_farm
services to exist both dependently and independently haven't
been able to solve the problem of the pmlogger_farm services
and timers starting reliably when we need them to.  This has
caused various backwards-compatibility regressions not least
of which is ansible-pcp and the metrics role.
Simplify things by enforcing a hard link between these now -
when pmlogger is enabled/started so is pmlogger_farm.  Using
the same systemd mechanisms we have used reliably to ensure
pmlogger_check and pmlogger_daily are linked to pmlogger, we
now have reliable farm services once more.  The farm-versus-
primary cgroup separation is still maintained however.
While here, I saw the TODO note re lacking cron-back-compat
support - I've implemented that correctly now (trivial) but
its unlikely to affect anyone nowadays.
Resolves Red Hat BZ #2027753.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1501,2021-12-14T16:16:03Z,2021-12-16T06:39:47Z,2021-12-16T06:39:47Z,MERGED,True,9,0,2,https://github.com/portante,Add pmlogconf.summary for rsyslog,1,[],https://github.com/performancecopilot/pcp/pull/1501,https://github.com/portante,1,https://github.com/performancecopilot/pcp/pull/1501,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1501,2021-12-14T16:16:03Z,2021-12-16T06:39:47Z,2021-12-16T06:39:47Z,MERGED,True,9,0,2,https://github.com/portante,Add pmlogconf.summary for rsyslog,1,[],https://github.com/performancecopilot/pcp/pull/1501,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1501#issuecomment-993751710,,"I'll leave it for @natoscott to merge this one, lgtm from me.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1508,2021-12-30T19:44:27Z,2022-01-17T07:07:18Z,2022-01-17T07:07:19Z,CLOSED,False,29,12,3,https://github.com/arzoo14,[docs] Improvements in Quick Guides,1,[],https://github.com/performancecopilot/pcp/pull/1508,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1508,This PR improves the quick guides documentation as per the feedbacks from the community members.,This PR improves the quick guides documentation as per the feedbacks from the community members.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1508,2021-12-30T19:44:27Z,2022-01-17T07:07:18Z,2022-01-17T07:07:19Z,CLOSED,False,29,12,3,https://github.com/arzoo14,[docs] Improvements in Quick Guides,1,[],https://github.com/performancecopilot/pcp/pull/1508,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1508#issuecomment-1014202919,This PR improves the quick guides documentation as per the feedbacks from the community members.,Merged with minor additions in commit message.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1509,2021-12-31T14:38:28Z,2022-01-17T07:07:56Z,2022-01-17T07:07:56Z,CLOSED,False,2,2,1,https://github.com/jinqinghui,bugfix: if total_metrics ==0 and calloc() may return un-NULL address. pmdaInit() will failed!,1,[],https://github.com/performancecopilot/pcp/pull/1509,https://github.com/jinqinghui,1,https://github.com/performancecopilot/pcp/pull/1509,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1509,2021-12-31T14:38:28Z,2022-01-17T07:07:56Z,2022-01-17T07:07:56Z,CLOSED,False,2,2,1,https://github.com/jinqinghui,bugfix: if total_metrics ==0 and calloc() may return un-NULL address. pmdaInit() will failed!,1,[],https://github.com/performancecopilot/pcp/pull/1509,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1509#issuecomment-1014203310,,Merged with minor additions in commit message.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1510,2022-01-04T21:52:44Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,723,49,3,https://github.com/portante,"Add support for rsyslog resource, action, omfwd, imudp, and imptcp statistics",5,[],https://github.com/performancecopilot/pcp/pull/1510,https://github.com/portante,1,https://github.com/performancecopilot/pcp/pull/1510,Based on work from Christian Horn (@christianhorn) at: https://fluxcoil.net/files/tmp/pmdarsyslog.pl.chorn.,Based on work from Christian Horn (@christianhorn) at: https://fluxcoil.net/files/tmp/pmdarsyslog.pl.chorn.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1510,2022-01-04T21:52:44Z,2022-01-18T06:20:20Z,2022-01-18T06:20:20Z,MERGED,True,723,49,3,https://github.com/portante,"Add support for rsyslog resource, action, omfwd, imudp, and imptcp statistics",5,[],https://github.com/performancecopilot/pcp/pull/1510,https://github.com/christianhorn,2,https://github.com/performancecopilot/pcp/pull/1510#issuecomment-1007178398,Based on work from Christian Horn (@christianhorn) at: https://fluxcoil.net/files/tmp/pmdarsyslog.pl.chorn.,"Works nicely, covers the metrics I use, and the name change makes sense. Great work!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1512,2022-01-09T05:48:31Z,2022-01-18T06:20:20Z,2022-01-19T05:39:30Z,MERGED,True,717,371,1,https://github.com/portante,Fix elasticsearch pmda,10,[],https://github.com/performancecopilot/pcp/pull/1512,https://github.com/portante,1,https://github.com/performancecopilot/pcp/pull/1512,"Fixes #1511 in part.
This corrects a bug with the _cluster/state API being invoked at the wrong time (broken if condition), uses the _nodes API instead of the _cluster/state API to determine the master node, and also uses the names of the nodes instead of their IDs.
Further, we perform a bit of refactoring based on pylint feedback, and apply some helpful formatting and tableization which made it easier to find problems in the metric defintions.
Finally we added a number of additional metrics in four separate commits to make it easier to see the progression of additions.
It would be great to find a way to only call the _nodes and _stats/search APIs once, instead of twice, though.","Fixes #1511 in part.
This corrects a bug with the _cluster/state API being invoked at the wrong time (broken if condition), uses the _nodes API instead of the _cluster/state API to determine the master node, and also uses the names of the nodes instead of their IDs.
Further, we perform a bit of refactoring based on pylint feedback, and apply some helpful formatting and tableization which made it easier to find problems in the metric defintions.
Finally we added a number of additional metrics in four separate commits to make it easier to see the progression of additions.
It would be great to find a way to only call the _nodes and _stats/search APIs once, instead of twice, though.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1512,2022-01-09T05:48:31Z,2022-01-18T06:20:20Z,2022-01-19T05:39:30Z,MERGED,True,717,371,1,https://github.com/portante,Fix elasticsearch pmda,10,[],https://github.com/performancecopilot/pcp/pull/1512,https://github.com/portante,2,https://github.com/performancecopilot/pcp/pull/1512#issuecomment-1014481266,"Fixes #1511 in part.
This corrects a bug with the _cluster/state API being invoked at the wrong time (broken if condition), uses the _nodes API instead of the _cluster/state API to determine the master node, and also uses the names of the nodes instead of their IDs.
Further, we perform a bit of refactoring based on pylint feedback, and apply some helpful formatting and tableization which made it easier to find problems in the metric defintions.
Finally we added a number of additional metrics in four separate commits to make it easier to see the progression of additions.
It would be great to find a way to only call the _nodes and _stats/search APIs once, instead of twice, though.","I also see debug output from the Elasticsearch PMDA (the ranges are a way to summarize all the lines emitted, 3,800+):
[Mon Jan 17 05:13:50] pmdaelasticsearch(24500) Debug: pmdaLabel: InDom 108.2[(0-3884)]: Missing metric value(s)
[Mon Jan 17 05:13:50] pmdaelasticsearch(24500) Debug: pmdaLabel: InDom 108.1[(11-21)]: Missing metric value(s)
[Mon Jan 17 05:13:50] pmdaelasticsearch(24500) Debug: pmdaLabel: InDom 108.1[(11-21)]: Missing metric value(s)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1512,2022-01-09T05:48:31Z,2022-01-18T06:20:20Z,2022-01-19T05:39:30Z,MERGED,True,717,371,1,https://github.com/portante,Fix elasticsearch pmda,10,[],https://github.com/performancecopilot/pcp/pull/1512,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1512#issuecomment-1015095935,"Fixes #1511 in part.
This corrects a bug with the _cluster/state API being invoked at the wrong time (broken if condition), uses the _nodes API instead of the _cluster/state API to determine the master node, and also uses the names of the nodes instead of their IDs.
Further, we perform a bit of refactoring based on pylint feedback, and apply some helpful formatting and tableization which made it easier to find problems in the metric defintions.
Finally we added a number of additional metrics in four separate commits to make it easier to see the progression of additions.
It would be great to find a way to only call the _nodes and _stats/search APIs once, instead of twice, though.","It would be great to find a way to only call the _nodes and _stats/search APIs once, instead of twice, though.

This is possible.  There is a python fetch callback - use set_fetch() method to add your own - which is called once per fetch PDU, and importantly its called before the refresh() method used by this PMDA.  If a custom fetch callback method just clears a boolean class variable (named like self.search_called perhaps), we can test and set that same boolean in the refresh method to ensure we only call the search API once.
The rest of this change is looking really good (I've got only one small local tweak so far) - just running tests on it now and will merge shortly, perhaps tackle the above optimization via a followup PR?  Let me know if its not clear & I'll send sample code.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1512,2022-01-09T05:48:31Z,2022-01-18T06:20:20Z,2022-01-19T05:39:30Z,MERGED,True,717,371,1,https://github.com/portante,Fix elasticsearch pmda,10,[],https://github.com/performancecopilot/pcp/pull/1512,https://github.com/portante,4,https://github.com/performancecopilot/pcp/pull/1512#issuecomment-1015385925,"Fixes #1511 in part.
This corrects a bug with the _cluster/state API being invoked at the wrong time (broken if condition), uses the _nodes API instead of the _cluster/state API to determine the master node, and also uses the names of the nodes instead of their IDs.
Further, we perform a bit of refactoring based on pylint feedback, and apply some helpful formatting and tableization which made it easier to find problems in the metric defintions.
Finally we added a number of additional metrics in four separate commits to make it easier to see the progression of additions.
It would be great to find a way to only call the _nodes and _stats/search APIs once, instead of twice, though.",@natoscott I'd be happy to work on the set_fetch() method.  Let me know how you want to approach it.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1512,2022-01-09T05:48:31Z,2022-01-18T06:20:20Z,2022-01-19T05:39:30Z,MERGED,True,717,371,1,https://github.com/portante,Fix elasticsearch pmda,10,[],https://github.com/performancecopilot/pcp/pull/1512,https://github.com/natoscott,5,https://github.com/performancecopilot/pcp/pull/1512#issuecomment-1016101347,"Fixes #1511 in part.
This corrects a bug with the _cluster/state API being invoked at the wrong time (broken if condition), uses the _nodes API instead of the _cluster/state API to determine the master node, and also uses the names of the nodes instead of their IDs.
Further, we perform a bit of refactoring based on pylint feedback, and apply some helpful formatting and tableization which made it easier to find problems in the metric defintions.
Finally we added a number of additional metrics in four separate commits to make it easier to see the progression of additions.
It would be great to find a way to only call the _nodes and _stats/search APIs once, instead of twice, though.","@portante something like this should do it (untested) -
https://gist.github.com/natoscott/0fffd13d5f8d752b5ab7084c40607dbf",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1512,2022-01-09T05:48:31Z,2022-01-18T06:20:20Z,2022-01-19T05:39:30Z,MERGED,True,717,371,1,https://github.com/portante,Fix elasticsearch pmda,10,[],https://github.com/performancecopilot/pcp/pull/1512,https://github.com/natoscott,6,https://github.com/performancecopilot/pcp/pull/1512#issuecomment-1016103300,"Fixes #1511 in part.
This corrects a bug with the _cluster/state API being invoked at the wrong time (broken if condition), uses the _nodes API instead of the _cluster/state API to determine the master node, and also uses the names of the nodes instead of their IDs.
Further, we perform a bit of refactoring based on pylint feedback, and apply some helpful formatting and tableization which made it easier to find problems in the metric defintions.
Finally we added a number of additional metrics in four separate commits to make it easier to see the progression of additions.
It would be great to find a way to only call the _nodes and _stats/search APIs once, instead of twice, though.","| [Mon Jan 17 05:13:50] pmdaelasticsearch(24500) Debug: pmdaLabel: InDom 108.2[(0-3884)]: Missing metric value(s)
Regarding those debug lines, I'm not sure where that's originating from actually.  The closest I can find is these two diagnostics from libpcp_pmda:
libpcp_pmda/src/callback.c:	    fprintf(stderr, ""pmdaLabel: InDom %s labels request\n"",
libpcp_pmda/src/callback.c:	    fprintf(stderr, ""pmdaLabel: InDom %s %d instance labels request\n"",
... similar, but doesn't quite match with what you see.  Very odd.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1513,2022-01-13T18:22:39Z,2022-01-17T07:07:24Z,2022-01-17T07:07:24Z,CLOSED,False,42,0,3,https://github.com/arzoo14,[docs] Documentation of pmdiff,1,[],https://github.com/performancecopilot/pcp/pull/1513,https://github.com/arzoo14,1,https://github.com/performancecopilot/pcp/pull/1513,This PR adds documentation for the pmdiff tool under Quick Guides section.,This PR adds documentation for the pmdiff tool under Quick Guides section.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1513,2022-01-13T18:22:39Z,2022-01-17T07:07:24Z,2022-01-17T07:07:24Z,CLOSED,False,42,0,3,https://github.com/arzoo14,[docs] Documentation of pmdiff,1,[],https://github.com/performancecopilot/pcp/pull/1513,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1513#issuecomment-1014202988,This PR adds documentation for the pmdiff tool under Quick Guides section.,Merged with minor additions in commit message.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1515,2022-01-19T23:23:27Z,2022-01-20T23:27:10Z,2022-01-20T23:27:10Z,MERGED,True,6,4,4,https://github.com/natoscott,systemd units: pmlogger and pmie farm conditional use of type=exec,1,[],https://github.com/performancecopilot/pcp/pull/1515,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1515,"Older versions of systemd do not support type=exec but the pmie
and pmlogger farm check services were using it unconditionally.
Update these to use the technique used by the non-farm service
variants.
Related to #1514","Older versions of systemd do not support type=exec but the pmie
and pmlogger farm check services were using it unconditionally.
Update these to use the technique used by the non-farm service
variants.
Related to #1514",True,{'THUMBS_UP': ['https://github.com/jasonk000']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1516,2022-01-20T00:21:06Z,2022-01-21T05:46:46Z,2022-01-21T05:46:46Z,MERGED,True,1,0,1,https://github.com/jinqinghui,"bugfix: pmseries_load_work() will use baton->loading.data, but no one set it to baton explicitly and will segmentfalt",1,[],https://github.com/performancecopilot/pcp/pull/1516,https://github.com/jinqinghui,1,https://github.com/performancecopilot/pcp/pull/1516,"bugfix: pmseries_load_work() will use baton->loading.data, but no one set it to baton explicitly and will segmentfaly.","bugfix: pmseries_load_work() will use baton->loading.data, but no one set it to baton explicitly and will segmentfaly.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1517,2022-01-21T04:47:12Z,2022-01-21T05:46:46Z,2022-01-21T05:46:46Z,MERGED,True,4,4,1,https://github.com/portante,Correct try block surrounding loop construct,1,[],https://github.com/performancecopilot/pcp/pull/1517,https://github.com/portante,1,https://github.com/performancecopilot/pcp/pull/1517,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1518,2022-01-21T04:51:21Z,,2022-02-05T15:19:56Z,OPEN,False,142,149,1,https://github.com/portante,wip: interval based API calls,1,[],https://github.com/performancecopilot/pcp/pull/1518,https://github.com/portante,1,https://github.com/performancecopilot/pcp/pull/1518,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1519,2022-01-26T10:07:20Z,2022-01-26T23:37:57Z,2022-01-26T23:37:57Z,MERGED,True,7,7,1,https://github.com/kurik,Fix of tty metrics on s390x platform,1,[],https://github.com/performancecopilot/pcp/pull/1519,https://github.com/kurik,1,https://github.com/performancecopilot/pcp/pull/1519,"There was a wrong conversion of tty metrics between 32bits and 64bits
values, causing these metrics to be always zero on s390x platform due
to big-endian architecture. This commit fixes the conversion.
Covered by qa/665.","There was a wrong conversion of tty metrics between 32bits and 64bits
values, causing these metrics to be always zero on s390x platform due
to big-endian architecture. This commit fixes the conversion.
Covered by qa/665.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1523,2022-02-01T02:54:33Z,2022-02-01T22:28:38Z,2022-02-01T22:28:38Z,MERGED,True,16,66,2,https://github.com/natoscott,packaging: update rpm specs to solve systemd warnings,1,[],https://github.com/performancecopilot/pcp/pull/1523,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1523,"Ordering of removal of systemd services, particularly the farms,
was causing systemctl warnings on rpm package removal.  Resolves
that and also uses fewer systemd commands to handle our services
now.
Resolves Red Hat BZ #2048024","Ordering of removal of systemd services, particularly the farms,
was causing systemctl warnings on rpm package removal.  Resolves
that and also uses fewer systemd commands to handle our services
now.
Resolves Red Hat BZ #2048024",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1525,2022-02-01T19:01:12Z,2022-02-01T22:28:38Z,2022-02-01T22:28:38Z,MERGED,True,6,6,3,https://github.com/SunilMohanAdapa,pmlogger: zeroconf: Prioritize user configuration over zeroconf,1,[],https://github.com/performancecopilot/pcp/pull/1525,https://github.com/SunilMohanAdapa,1,https://github.com/performancecopilot/pcp/pull/1525,"In 2c17ba0, zeroconf provided
defaults (/usr/share/pcp/zeroconf/pmlogger, which was actually
/etc/sysconf/pmlogger_zeroconf at the time of the change) were prioritized over
user configuration (/etc/sysconf/pmlogger). This lead to regression in clients
which edited the user configuration and expected the changes to be given
priority over zeroconf configuration. This was identified at least in
ansible-pcp[1].
Undo the changes in this commit so that the final priority is as follows:
User configuration (/etc/sysconfig/pmlogger)
(priority over)
Zeroconf defaults (/usr/share/pcp/zeroconf/pmlogger)
(priority over)
Code defaults (pmlogger.c)
Links:

#1462 (comment)

Tests:


Install pcp. Ensure pmlogger is running. Notice that there is no
PMLOGGER_INTERVAL set in the pmlogger daemon's environment.


Install pcp-zeroconf. Restart pmlogger. Notice that PMLOGGER_INTERVAL
environment is set in the pmlogger daemon's environment. The value is 10.


Edit /etc/sysconfig/pmlogger and set the value of PMLOGGER_INTERVAL to 15.
Restart pmlogger and notice that PMLOGGER_INTERVAL is set to 15 in pmlogger
daemon's environment.


Signed-off-by: Sunil Mohan Adapa sunil@medhas.org
Tested-by: Sunil Mohan Adapa sunil@medhas.org","In 2c17ba0, zeroconf provided
defaults (/usr/share/pcp/zeroconf/pmlogger, which was actually
/etc/sysconf/pmlogger_zeroconf at the time of the change) were prioritized over
user configuration (/etc/sysconf/pmlogger). This lead to regression in clients
which edited the user configuration and expected the changes to be given
priority over zeroconf configuration. This was identified at least in
ansible-pcp[1].
Undo the changes in this commit so that the final priority is as follows:
User configuration (/etc/sysconfig/pmlogger)
(priority over)
Zeroconf defaults (/usr/share/pcp/zeroconf/pmlogger)
(priority over)
Code defaults (pmlogger.c)
Links:

#1462 (comment)

Tests:


Install pcp. Ensure pmlogger is running. Notice that there is no
PMLOGGER_INTERVAL set in the pmlogger daemon's environment.


Install pcp-zeroconf. Restart pmlogger. Notice that PMLOGGER_INTERVAL
environment is set in the pmlogger daemon's environment. The value is 10.


Edit /etc/sysconfig/pmlogger and set the value of PMLOGGER_INTERVAL to 15.
Restart pmlogger and notice that PMLOGGER_INTERVAL is set to 15 in pmlogger
daemon's environment.


Signed-off-by: Sunil Mohan Adapa sunil@medhas.org
Tested-by: Sunil Mohan Adapa sunil@medhas.org",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1526,2022-02-01T22:14:03Z,2022-02-01T22:28:38Z,2022-02-01T22:53:20Z,MERGED,True,2,0,1,https://github.com/natoscott,build: temporary CI workaround until switch to Centos 8 stream,1,[],https://github.com/performancecopilot/pcp/pull/1526,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1526,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1527,2022-02-02T03:13:02Z,2022-03-16T01:47:46Z,2022-03-16T01:47:46Z,MERGED,True,126,89,4,https://github.com/portante,Update selinux,5,[],https://github.com/performancecopilot/pcp/pull/1527,https://github.com/portante,1,https://github.com/performancecopilot/pcp/pull/1527,"This is broken it up into 3 commits in an attempt to make it easier to review.

Tabify the file consistently
Sort the require section so that one can easily find duplicates
Add missing require section pieces and allow rules

This is rebased on top of PR #1400, which is where the two commits come from in this PR.
Once PR #1400 is merged, we can consider merging this one.","This is broken it up into 3 commits in an attempt to make it easier to review.

Tabify the file consistently
Sort the require section so that one can easily find duplicates
Add missing require section pieces and allow rules

This is rebased on top of PR #1400, which is where the two commits come from in this PR.
Once PR #1400 is merged, we can consider merging this one.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1534,2022-02-23T14:54:57Z,2022-03-16T01:47:18Z,2022-03-16T01:47:18Z,CLOSED,False,0,19,5,https://github.com/cjeanner,"Remove ""lockdown"" selinux class",1,[],https://github.com/performancecopilot/pcp/pull/1534,https://github.com/cjeanner,1,https://github.com/performancecopilot/pcp/pull/1534,"With newer kernel, this class doesn't exist at all; selinux-policy also
removed it lately. Keeping this lockdown call makes the package
impossible to install on newer systems such as centos-9 or rhel-9, and
this further breaks other selinux related packages in such a way we
can't easily recover.","With newer kernel, this class doesn't exist at all; selinux-policy also
removed it lately. Keeping this lockdown call makes the package
impossible to install on newer systems such as centos-9 or rhel-9, and
this further breaks other selinux related packages in such a way we
can't easily recover.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1534,2022-02-23T14:54:57Z,2022-03-16T01:47:18Z,2022-03-16T01:47:18Z,CLOSED,False,0,19,5,https://github.com/cjeanner,"Remove ""lockdown"" selinux class",1,[],https://github.com/performancecopilot/pcp/pull/1534,https://github.com/cjeanner,2,https://github.com/performancecopilot/pcp/pull/1534#issuecomment-1049619893,"With newer kernel, this class doesn't exist at all; selinux-policy also
removed it lately. Keeping this lockdown call makes the package
impossible to install on newer systems such as centos-9 or rhel-9, and
this further breaks other selinux related packages in such a way we
can't easily recover.","Hello,
Well, apparently there's something fishy. We're hitting the issue while testing the newer rhel9; apparently there was some internal manipulations in order to actually remove the references from the code. There's this BZ:
https://bugzilla.redhat.com/show_bug.cgi?id=2041503
apparently, even rebuilding with the newer kernel/selinux-policy didn't drop the references to lockdown :/.
I can't really say more, I'm just the ""end-user"" in this chain, unfortunately. But if you feel my patch is wrong, just discard it.
Cheers,
C.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1534,2022-02-23T14:54:57Z,2022-03-16T01:47:18Z,2022-03-16T01:47:18Z,CLOSED,False,0,19,5,https://github.com/cjeanner,"Remove ""lockdown"" selinux class",1,[],https://github.com/performancecopilot/pcp/pull/1534,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1534#issuecomment-1050333557,"With newer kernel, this class doesn't exist at all; selinux-policy also
removed it lately. Keeping this lockdown call makes the package
impossible to install on newer systems such as centos-9 or rhel-9, and
this further breaks other selinux related packages in such a way we
can't easily recover.","apparently, even rebuilding with the newer kernel/selinux-policy didn't drop the references to lockdown :/.

What is the full version of the pcp-selinux package you have installed there?  The rebuild from that BZ that picked up the changes for selinux lockdown rules was verified by our QE folk so I'm a bit surprised you're still seeing this issue.
It's also possible some other selinux-policy change happened, causing the ""fixed"" pcp-selinux policy to not apply on your system... we see that issue from time to time also.
Unfortunately, there are pcp + kernel version combinations out there that need the lockdown policy, so it has to stay now.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1534,2022-02-23T14:54:57Z,2022-03-16T01:47:18Z,2022-03-16T01:47:18Z,CLOSED,False,0,19,5,https://github.com/cjeanner,"Remove ""lockdown"" selinux class",1,[],https://github.com/performancecopilot/pcp/pull/1534,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/1534#issuecomment-1068646223,"With newer kernel, this class doesn't exist at all; selinux-policy also
removed it lately. Keeping this lockdown call makes the package
impossible to install on newer systems such as centos-9 or rhel-9, and
this further breaks other selinux related packages in such a way we
can't easily recover.",Closing as per last comment.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1535,2022-02-27T22:28:06Z,2022-03-02T05:28:40Z,2022-03-02T05:43:00Z,MERGED,True,17,51,1,https://github.com/natoscott,pmdadenki: fix crash in labels callback with multiple instances,1,[],https://github.com/performancecopilot/pcp/pull/1535,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1535,"Remove some leftovers from the initial creation of this PMDA based
on pmdasimple.  The labels callbacks in particular could encounter
a sigsegv when accessing beyond a static global data structure.  A
couple of commented-out calls used the 'now' indom from simple but
that no longer exists.
Also updated the labels to reflect metrics with units in watt hours
and watts, as per Christian's note.
Resolves #1504","Remove some leftovers from the initial creation of this PMDA based
on pmdasimple.  The labels callbacks in particular could encounter
a sigsegv when accessing beyond a static global data structure.  A
couple of commented-out calls used the 'now' indom from simple but
that no longer exists.
Also updated the labels to reflect metrics with units in watt hours
and watts, as per Christian's note.
Resolves #1504",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1551,2022-03-04T03:22:36Z,2022-03-09T00:56:30Z,2022-03-09T00:56:30Z,MERGED,True,1064,19,13,https://github.com/goodwinos,"add disk.wwid.* metrics, aggregated for scsi multipath monitoring",11,[],https://github.com/performancecopilot/pcp/pull/1551,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1551,Fedora BZ#1293444 - RFE: need hba and fc target aggregation. See comments in the commits,Fedora BZ#1293444 - RFE: need hba and fc target aggregation. See comments in the commits,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1552,2022-03-07T09:31:30Z,2022-03-07T20:11:56Z,2022-03-07T20:51:56Z,MERGED,True,224,24,13,https://github.com/natoscott,libpcp: support high resolution interval time parsing,2,[],https://github.com/performancecopilot/pcp/pull/1552,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1552,"Add a new pmParseHighResInterval(3) interface into libpcp.
Resolves #1375","Add a new pmParseHighResInterval(3) interface into libpcp.
Resolves #1375",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1553,2022-03-10T01:12:33Z,2022-03-10T05:37:13Z,2022-03-10T05:37:13Z,MERGED,True,340,204,26,https://github.com/natoscott,"libpcp: time_t sentinel fix, add time parsers using timespecs",3,[],https://github.com/performancecopilot/pcp/pull/1553,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1553,"Fix the sentinel time_t value used in several places to denote
end of time using sizeof(time_t) from configure.ac - no longer
assuming it is fixed at sizeof(int).  A new macro is added for
convenience (PM_MAX_TIME_T).
__pmParseTime and __pmConvertTime gain high resolution variants
which are used internally within the lower resolution versions.
This is a general pattern that seems to work best for all these
time conversions.","Fix the sentinel time_t value used in several places to denote
end of time using sizeof(time_t) from configure.ac - no longer
assuming it is fixed at sizeof(int).  A new macro is added for
convenience (PM_MAX_TIME_T).
__pmParseTime and __pmConvertTime gain high resolution variants
which are used internally within the lower resolution versions.
This is a general pattern that seems to work best for all these
time conversions.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1554,2022-03-10T03:35:55Z,2022-03-16T02:20:16Z,2022-03-16T02:20:16Z,MERGED,True,18,48,1,https://github.com/goodwinos,libpcp_web: support v3 indom and indom_delta in discovery ingest,1,[],https://github.com/performancecopilot/pcp/pull/1554,https://github.com/goodwinos,1,https://github.com/performancecopilot/pcp/pull/1554,"Refactor and simplify pmDiscoverDecodeMetaInDom() to use __pmLogLoadInDom()
from libpcp with a NULL __pmArchCtl (i.e. pre-loaded buffer), instead of
open coding. The library function handles all three variants of indom
archive records - indom, indom_v2 and delta indom.
Do not free the resulting pmInResult in pmDiscoverInvokeInDomCallBacks()
because the buffer is managed (and re-used) by process_metadata().
qa for groups pmproxy and libpcp_web are passing and there is no
evidence of memory leaks. QA for v3 and delta indoms needs to be
checked too.
Resolves: #1548","Refactor and simplify pmDiscoverDecodeMetaInDom() to use __pmLogLoadInDom()
from libpcp with a NULL __pmArchCtl (i.e. pre-loaded buffer), instead of
open coding. The library function handles all three variants of indom
archive records - indom, indom_v2 and delta indom.
Do not free the resulting pmInResult in pmDiscoverInvokeInDomCallBacks()
because the buffer is managed (and re-used) by process_metadata().
qa for groups pmproxy and libpcp_web are passing and there is no
evidence of memory leaks. QA for v3 and delta indoms needs to be
checked too.
Resolves: #1548",True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1555,2022-03-10T19:19:54Z,2022-03-23T15:19:16Z,2022-03-30T19:19:40Z,MERGED,True,242,10,8,https://github.com/andreasgerstmayr,pmproxy: allow request parameters to be sent in the request body,2,[],https://github.com/performancecopilot/pcp/pull/1555,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1555,"Most pmseries REST API methods accept a comma-separated list of series
ids. Each series id is 40 bytes, therefore requesting data for many
series at once can generate a query string which exceeds the maximum
size of an URL.
This commit allows to optionally submit the request parameters in the
body of the HTTP request.
Breaking change warning: Previously it was possible to submit the expr parameter for /series/load and /series/query in the response body, and the series parameter as a newline-separated list of series ids. This functionality wasn't documented (correct me if I'm wrong), so afaics it should be fine to replace it with accepting the request body for all current REST API methods in the standardized urlencoding format.
fyi, corresponding grafana-pcp PR: performancecopilot/grafana-pcp#116
Note: I'm currently seeing the following memleaks in the new QA test, which are afaics unrelated to this PR (all originate from memory allocated in query.c):
44 bytes in 1 blocks are definitely lost in loss record 20 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C4C999: sdsdup (sds.c:153)
by 0x4C27B6F: series_instances_reply (query.c:5006)
by 0x4C27FA7: series_lookup_instances_callback (query.c:5078)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:sdsdup
   fun:series_instances_reply
   fun:series_lookup_instances_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
}
44 bytes in 2 blocks are definitely lost in loss record 21 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C25525: reverse_map (query.c:4340)
by 0x4C25FBB: series_label_value_reply (query.c:4526)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:reverse_map
   fun:series_label_value_reply
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
}
112 bytes in 2 blocks are definitely lost in loss record 27 of 48
at 0x4849464: calloc (vg_replace_malloc.c:1328)
by 0x4C264E4: series_label_reply (query.c:4607)
by 0x4C2687F: series_lookup_labels_callback (query.c:4659)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
by 0x4CB4A7D: ??? (in /usr/lib64/libuv.so.1.0.0)
by 0x4C9E617: uv_run (in /usr/lib64/libuv.so.1.0.0)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:calloc
   fun:series_label_reply
   fun:series_lookup_labels_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
   obj:/usr/lib64/libuv.so.1.0.0
   fun:uv_run
}
4,972 bytes in 226 blocks are definitely lost in loss record 47 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C25525: reverse_map (query.c:4340)
by 0x4C2858B: redis_lookup_mapping_callback (query.c:5177)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:reverse_map
   fun:redis_lookup_mapping_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
}","Most pmseries REST API methods accept a comma-separated list of series
ids. Each series id is 40 bytes, therefore requesting data for many
series at once can generate a query string which exceeds the maximum
size of an URL.
This commit allows to optionally submit the request parameters in the
body of the HTTP request.
Breaking change warning: Previously it was possible to submit the expr parameter for /series/load and /series/query in the response body, and the series parameter as a newline-separated list of series ids. This functionality wasn't documented (correct me if I'm wrong), so afaics it should be fine to replace it with accepting the request body for all current REST API methods in the standardized urlencoding format.
fyi, corresponding grafana-pcp PR: performancecopilot/grafana-pcp#116
Note: I'm currently seeing the following memleaks in the new QA test, which are afaics unrelated to this PR (all originate from memory allocated in query.c):
44 bytes in 1 blocks are definitely lost in loss record 20 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C4C999: sdsdup (sds.c:153)
by 0x4C27B6F: series_instances_reply (query.c:5006)
by 0x4C27FA7: series_lookup_instances_callback (query.c:5078)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:sdsdup
   fun:series_instances_reply
   fun:series_lookup_instances_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
}
44 bytes in 2 blocks are definitely lost in loss record 21 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C25525: reverse_map (query.c:4340)
by 0x4C25FBB: series_label_value_reply (query.c:4526)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:reverse_map
   fun:series_label_value_reply
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
}
112 bytes in 2 blocks are definitely lost in loss record 27 of 48
at 0x4849464: calloc (vg_replace_malloc.c:1328)
by 0x4C264E4: series_label_reply (query.c:4607)
by 0x4C2687F: series_lookup_labels_callback (query.c:4659)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
by 0x4CB4A7D: ??? (in /usr/lib64/libuv.so.1.0.0)
by 0x4C9E617: uv_run (in /usr/lib64/libuv.so.1.0.0)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:calloc
   fun:series_label_reply
   fun:series_lookup_labels_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
   obj:/usr/lib64/libuv.so.1.0.0
   fun:uv_run
}
4,972 bytes in 226 blocks are definitely lost in loss record 47 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C25525: reverse_map (query.c:4340)
by 0x4C2858B: redis_lookup_mapping_callback (query.c:5177)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:reverse_map
   fun:redis_lookup_mapping_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
}",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1555,2022-03-10T19:19:54Z,2022-03-23T15:19:16Z,2022-03-30T19:19:40Z,MERGED,True,242,10,8,https://github.com/andreasgerstmayr,pmproxy: allow request parameters to be sent in the request body,2,[],https://github.com/performancecopilot/pcp/pull/1555,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1555#issuecomment-1064476927,"Most pmseries REST API methods accept a comma-separated list of series
ids. Each series id is 40 bytes, therefore requesting data for many
series at once can generate a query string which exceeds the maximum
size of an URL.
This commit allows to optionally submit the request parameters in the
body of the HTTP request.
Breaking change warning: Previously it was possible to submit the expr parameter for /series/load and /series/query in the response body, and the series parameter as a newline-separated list of series ids. This functionality wasn't documented (correct me if I'm wrong), so afaics it should be fine to replace it with accepting the request body for all current REST API methods in the standardized urlencoding format.
fyi, corresponding grafana-pcp PR: performancecopilot/grafana-pcp#116
Note: I'm currently seeing the following memleaks in the new QA test, which are afaics unrelated to this PR (all originate from memory allocated in query.c):
44 bytes in 1 blocks are definitely lost in loss record 20 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C4C999: sdsdup (sds.c:153)
by 0x4C27B6F: series_instances_reply (query.c:5006)
by 0x4C27FA7: series_lookup_instances_callback (query.c:5078)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:sdsdup
   fun:series_instances_reply
   fun:series_lookup_instances_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
}
44 bytes in 2 blocks are definitely lost in loss record 21 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C25525: reverse_map (query.c:4340)
by 0x4C25FBB: series_label_value_reply (query.c:4526)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:reverse_map
   fun:series_label_value_reply
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
}
112 bytes in 2 blocks are definitely lost in loss record 27 of 48
at 0x4849464: calloc (vg_replace_malloc.c:1328)
by 0x4C264E4: series_label_reply (query.c:4607)
by 0x4C2687F: series_lookup_labels_callback (query.c:4659)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
by 0x4CB4A7D: ??? (in /usr/lib64/libuv.so.1.0.0)
by 0x4C9E617: uv_run (in /usr/lib64/libuv.so.1.0.0)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:calloc
   fun:series_label_reply
   fun:series_lookup_labels_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
   obj:/usr/lib64/libuv.so.1.0.0
   fun:uv_run
}
4,972 bytes in 226 blocks are definitely lost in loss record 47 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C25525: reverse_map (query.c:4340)
by 0x4C2858B: redis_lookup_mapping_callback (query.c:5177)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:reverse_map
   fun:redis_lookup_mapping_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
}",The first memleak is resolved in #1556.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1555,2022-03-10T19:19:54Z,2022-03-23T15:19:16Z,2022-03-30T19:19:40Z,MERGED,True,242,10,8,https://github.com/andreasgerstmayr,pmproxy: allow request parameters to be sent in the request body,2,[],https://github.com/performancecopilot/pcp/pull/1555,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1555#issuecomment-1068691804,"Most pmseries REST API methods accept a comma-separated list of series
ids. Each series id is 40 bytes, therefore requesting data for many
series at once can generate a query string which exceeds the maximum
size of an URL.
This commit allows to optionally submit the request parameters in the
body of the HTTP request.
Breaking change warning: Previously it was possible to submit the expr parameter for /series/load and /series/query in the response body, and the series parameter as a newline-separated list of series ids. This functionality wasn't documented (correct me if I'm wrong), so afaics it should be fine to replace it with accepting the request body for all current REST API methods in the standardized urlencoding format.
fyi, corresponding grafana-pcp PR: performancecopilot/grafana-pcp#116
Note: I'm currently seeing the following memleaks in the new QA test, which are afaics unrelated to this PR (all originate from memory allocated in query.c):
44 bytes in 1 blocks are definitely lost in loss record 20 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C4C999: sdsdup (sds.c:153)
by 0x4C27B6F: series_instances_reply (query.c:5006)
by 0x4C27FA7: series_lookup_instances_callback (query.c:5078)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:sdsdup
   fun:series_instances_reply
   fun:series_lookup_instances_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
}
44 bytes in 2 blocks are definitely lost in loss record 21 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C25525: reverse_map (query.c:4340)
by 0x4C25FBB: series_label_value_reply (query.c:4526)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:reverse_map
   fun:series_label_value_reply
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
}
112 bytes in 2 blocks are definitely lost in loss record 27 of 48
at 0x4849464: calloc (vg_replace_malloc.c:1328)
by 0x4C264E4: series_label_reply (query.c:4607)
by 0x4C2687F: series_lookup_labels_callback (query.c:4659)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
by 0x4CB4A7D: ??? (in /usr/lib64/libuv.so.1.0.0)
by 0x4C9E617: uv_run (in /usr/lib64/libuv.so.1.0.0)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:calloc
   fun:series_label_reply
   fun:series_lookup_labels_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
   obj:/usr/lib64/libuv.so.1.0.0
   fun:uv_run
}
4,972 bytes in 226 blocks are definitely lost in loss record 47 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C25525: reverse_map (query.c:4340)
by 0x4C2858B: redis_lookup_mapping_callback (query.c:5177)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:reverse_map
   fun:redis_lookup_mapping_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
}","@andreasgerstmayr yeah, I can't see it documented anywhere - I think it's safe to go ahead and make this change.  We should probably document the new behaviour though.  ;-)  Especially with grafana-pcp then relying on it.
Re those last couple of leaks - root cause doesn't spring quickly to mind, but looks like its related to handling metric labels names/values.  The struct dict code doing this should be very similar to the way instance name mapping are handled, but I guess its not the same (or a leak on instances were fixed at some point but same pattern existed for labels and was missed, maybe).",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1555,2022-03-10T19:19:54Z,2022-03-23T15:19:16Z,2022-03-30T19:19:40Z,MERGED,True,242,10,8,https://github.com/andreasgerstmayr,pmproxy: allow request parameters to be sent in the request body,2,[],https://github.com/performancecopilot/pcp/pull/1555,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/1555#issuecomment-1072615930,"Most pmseries REST API methods accept a comma-separated list of series
ids. Each series id is 40 bytes, therefore requesting data for many
series at once can generate a query string which exceeds the maximum
size of an URL.
This commit allows to optionally submit the request parameters in the
body of the HTTP request.
Breaking change warning: Previously it was possible to submit the expr parameter for /series/load and /series/query in the response body, and the series parameter as a newline-separated list of series ids. This functionality wasn't documented (correct me if I'm wrong), so afaics it should be fine to replace it with accepting the request body for all current REST API methods in the standardized urlencoding format.
fyi, corresponding grafana-pcp PR: performancecopilot/grafana-pcp#116
Note: I'm currently seeing the following memleaks in the new QA test, which are afaics unrelated to this PR (all originate from memory allocated in query.c):
44 bytes in 1 blocks are definitely lost in loss record 20 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C4C999: sdsdup (sds.c:153)
by 0x4C27B6F: series_instances_reply (query.c:5006)
by 0x4C27FA7: series_lookup_instances_callback (query.c:5078)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:sdsdup
   fun:series_instances_reply
   fun:series_lookup_instances_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
}
44 bytes in 2 blocks are definitely lost in loss record 21 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C25525: reverse_map (query.c:4340)
by 0x4C25FBB: series_label_value_reply (query.c:4526)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:reverse_map
   fun:series_label_value_reply
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
}
112 bytes in 2 blocks are definitely lost in loss record 27 of 48
at 0x4849464: calloc (vg_replace_malloc.c:1328)
by 0x4C264E4: series_label_reply (query.c:4607)
by 0x4C2687F: series_lookup_labels_callback (query.c:4659)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
by 0x4CB4A7D: ??? (in /usr/lib64/libuv.so.1.0.0)
by 0x4C9E617: uv_run (in /usr/lib64/libuv.so.1.0.0)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:calloc
   fun:series_label_reply
   fun:series_lookup_labels_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
   obj:/usr/lib64/libuv.so.1.0.0
   fun:uv_run
}
4,972 bytes in 226 blocks are definitely lost in loss record 47 of 48
at 0x484486F: malloc (vg_replace_malloc.c:381)
by 0x4C4C616: hi_malloc (alloc.h:58)
by 0x4C4C771: sdsnewlen (sds.c:93)
by 0x4C25525: reverse_map (query.c:4340)
by 0x4C2858B: redis_lookup_mapping_callback (query.c:5177)
by 0x4C3B341: redisSlotsReplyCallback (slots.c:515)
by 0x4C5C7EF: redisClusterAsyncCallback (hircluster.c:3908)
by 0x4C46387: __redisRunCallback (async.c:287)
by 0x4C46EAA: redisProcessCallbacks (async.c:572)
by 0x4C470D7: redisAsyncRead (async.c:635)
by 0x4C47134: redisAsyncHandleRead (async.c:654)
by 0x4C39A8F: redisLibuvPoll (libuv.h:21)
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:hi_malloc
   fun:sdsnewlen
   fun:reverse_map
   fun:redis_lookup_mapping_callback
   fun:redisSlotsReplyCallback
   fun:redisClusterAsyncCallback
   fun:__redisRunCallback
   fun:redisProcessCallbacks
   fun:redisAsyncRead
   fun:redisAsyncHandleRead
   fun:redisLibuvPoll
}","Success 🥳  found the two memleaks:
All dict types defined in maps.c have a keyDup callback except sdsOwnDictCallBacks. Grepping through the code shows that sdsOwnDictCallBacks is not used for pmseries. The other one was a missing free on the seriesGetLabelMap.
I'm not 100% confident though that in some special corner case I'm free'ing too much now - mind giving it another look at this PR?
I've started a full QA run in https://github.com/andreasgerstmayr/pcp/actions/runs/2005431601, and I think it'd make sense to always run the full QA run on PRs. Or maybe run the full run based on a label attached to the PR (e.g. there's no need for a full QA run for documentation fixes etc). Ideally there would be also an easy way to compare this PR's test results with the baseline (i.e. the main branch). Best would be of course to have the baseline 100% green and non-flaky.. :)",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1556,2022-03-10T20:31:08Z,2022-03-16T02:35:44Z,2022-03-16T02:35:44Z,MERGED,True,2,0,1,https://github.com/andreasgerstmayr,libpcp_web: fix memleak: free 'metric' member of seriesGetSID struct,1,[],https://github.com/performancecopilot/pcp/pull/1556,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1556,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1557,2022-03-11T18:34:47Z,2022-03-16T02:20:16Z,2022-03-16T02:20:16Z,MERGED,True,18,0,2,https://github.com/andreasgerstmayr,selinux: switch to conditional dependency,1,[],https://github.com/performancecopilot/pcp/pull/1557,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1557,"This ensures that the pcp-selinux package and all it's dependencies are
not pulled into containers and other systems that do not use SELinux.
https://fedoraproject.org/wiki/SELinux/IndependentPolicy#Adding_dependency_to_the_spec_file_of_corresponding_package
This rpm syntax is called ""boolean dependencies"" and is supported since rpm 4.13 (>= RHEL 8).
https://rpm-software-management.github.io/rpm/manual/boolean_dependencies.html
Co-authored-by: Vit Mojzis vmojzis@redhat.com
Resolves: rhbz#2050838","This ensures that the pcp-selinux package and all it's dependencies are
not pulled into containers and other systems that do not use SELinux.
https://fedoraproject.org/wiki/SELinux/IndependentPolicy#Adding_dependency_to_the_spec_file_of_corresponding_package
This rpm syntax is called ""boolean dependencies"" and is supported since rpm 4.13 (>= RHEL 8).
https://rpm-software-management.github.io/rpm/manual/boolean_dependencies.html
Co-authored-by: Vit Mojzis vmojzis@redhat.com
Resolves: rhbz#2050838",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1558,2022-03-14T19:06:07Z,2022-03-15T12:57:05Z,2022-03-15T12:57:05Z,CLOSED,False,152261,0,121,https://github.com/andreasgerstmayr,vendor: vendor libbpf (required by bpf PMDA),2,[],https://github.com/performancecopilot/pcp/pull/1558,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1558,The bpf PMDA requires an up-to-date version of libbpf (v0.6+) which isn't yet available in the main (stable) distribution repositories.,The bpf PMDA requires an up-to-date version of libbpf (v0.6+) which isn't yet available in the main (stable) distribution repositories.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1558,2022-03-14T19:06:07Z,2022-03-15T12:57:05Z,2022-03-15T12:57:05Z,CLOSED,False,152261,0,121,https://github.com/andreasgerstmayr,vendor: vendor libbpf (required by bpf PMDA),2,[],https://github.com/performancecopilot/pcp/pull/1558,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1558#issuecomment-1067189930,The bpf PMDA requires an up-to-date version of libbpf (v0.6+) which isn't yet available in the main (stable) distribution repositories.,"Let's check first if it's feasible to implement workarounds to use the older libbpf version (libbpf 0.4 is in Ubuntu 21.10 and Fedora 35), and only if it's too much work or not possible, vendor libbpf.",True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1559,2022-03-15T20:11:47Z,2022-03-16T02:35:43Z,2022-03-16T02:35:43Z,MERGED,True,18,0,3,https://github.com/andreasgerstmayr,build: detect libbpf version,1,[],https://github.com/performancecopilot/pcp/pull/1559,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1559,"This change stores the libbpf version in the LIBBPF_VERSION Makefile variable, required for the bpf PMDA","This change stores the libbpf version in the LIBBPF_VERSION Makefile variable, required for the bpf PMDA",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1560,2022-03-15T23:30:16Z,2022-03-16T02:28:25Z,2022-03-16T02:28:25Z,MERGED,True,410,175,24,https://github.com/natoscott,libpcp: high resolution log label and time window APIs,1,[],https://github.com/performancecopilot/pcp/pull/1560,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1560,"Provide new APIs to access the v3 log labels start timestamp
in high resolution form, as well as optional zoneinfo field,
in the form of pmGetHighResArchiveLabel(3).  The context end
of archive timestamp is made available in high resolution too
via a new pmGetHighResArchiveEnd routine.
Update the pmGetOptions routine to support a v3 ABI such that
PMAPI client tools can opt-in to working with nanosecond time
throughout.  pmval is converted as a proof of concept.
Resolves #1372
Resolves #1374
Resolves #1377","Provide new APIs to access the v3 log labels start timestamp
in high resolution form, as well as optional zoneinfo field,
in the form of pmGetHighResArchiveLabel(3).  The context end
of archive timestamp is made available in high resolution too
via a new pmGetHighResArchiveEnd routine.
Update the pmGetOptions routine to support a v3 ABI such that
PMAPI client tools can opt-in to working with nanosecond time
throughout.  pmval is converted as a proof of concept.
Resolves #1372
Resolves #1374
Resolves #1377",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1562,2022-03-16T13:54:02Z,2022-03-17T19:53:42Z,2022-03-17T19:53:42Z,MERGED,True,54,43,17,https://github.com/andreasgerstmayr,ci: fix pylint and mandoc linter warnings,1,[],https://github.com/performancecopilot/pcp/pull/1562,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1562,"Contains a few syntax updates to make the Python code more 'pythonic', otherwise no functional change.","Contains a few syntax updates to make the Python code more 'pythonic', otherwise no functional change.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1563,2022-03-17T05:15:18Z,2022-03-17T09:20:35Z,2022-03-17T19:50:12Z,CLOSED,False,0,0,0,https://github.com/natoscott,libpcp: implement the pmHighResSetMode(3) API,0,[],https://github.com/performancecopilot/pcp/pull/1563,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1563,"Adds a common internal __pmSetMode routine in libpcp using
__pmTimestamp structures for time, updates pmSetMode to use
it and adds a new pmHighResSetMode routine with timespecs.
The PM_XTB* time manipulation is moved out of interp.c and
into the top level of pmSetMode - it's only used there now
because pmHighResSetMode is able to specify all intervals,
natively.  Nice and neat in the end.  The fetchgroup code
within libpcp now uses pmHighResSetMode directly resolving
a couple of long-standing TODO items there.
Several QA test programs are updated to use this new API,
in particular the classic torture_api.c is now completely
switched over to using the high resolution interfaces for
all PMAPI interactions.  Similarly the xarch.c and xlog.c
QA sources are also using timespecs exclusively now.
Resolves #1373","Adds a common internal __pmSetMode routine in libpcp using
__pmTimestamp structures for time, updates pmSetMode to use
it and adds a new pmHighResSetMode routine with timespecs.
The PM_XTB* time manipulation is moved out of interp.c and
into the top level of pmSetMode - it's only used there now
because pmHighResSetMode is able to specify all intervals,
natively.  Nice and neat in the end.  The fetchgroup code
within libpcp now uses pmHighResSetMode directly resolving
a couple of long-standing TODO items there.
Several QA test programs are updated to use this new API,
in particular the classic torture_api.c is now completely
switched over to using the high resolution interfaces for
all PMAPI interactions.  Similarly the xarch.c and xlog.c
QA sources are also using timespecs exclusively now.
Resolves #1373",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1564,2022-03-17T15:48:57Z,2022-04-05T10:05:07Z,2022-04-05T10:05:07Z,MERGED,True,44,14,4,https://github.com/andreasgerstmayr,"pmdabpf: resolve memory leaks, destroy bpf skeleton object at shutdown",1,[],https://github.com/performancecopilot/pcp/pull/1564,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1564,"Every bpf PMDA module gets two parameters passed in the init function: init(dict *cfg, char *module_name)
cfg is the global configuration object (with contents of bpf.conf) and module_name is for example biolatency.so.
This PR frees the configuration object at shutdown, and the module_name after calling init() of the module.
imho that's inconsistent, and I'm now very happy with it - however, what's an elegant way to keep references to the module_name of each module and free it in bpf_shutdown? One option would be to create a linked list of these pointers, but I'm sure there is a better option ... Maybe just pass the memory allocated by pmdaCacheStore to the init() function? Doesn't seem very neat either.","Every bpf PMDA module gets two parameters passed in the init function: init(dict *cfg, char *module_name)
cfg is the global configuration object (with contents of bpf.conf) and module_name is for example biolatency.so.
This PR frees the configuration object at shutdown, and the module_name after calling init() of the module.
imho that's inconsistent, and I'm now very happy with it - however, what's an elegant way to keep references to the module_name of each module and free it in bpf_shutdown? One option would be to create a linked list of these pointers, but I'm sure there is a better option ... Maybe just pass the memory allocated by pmdaCacheStore to the init() function? Doesn't seem very neat either.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1564,2022-03-17T15:48:57Z,2022-04-05T10:05:07Z,2022-04-05T10:05:07Z,MERGED,True,44,14,4,https://github.com/andreasgerstmayr,"pmdabpf: resolve memory leaks, destroy bpf skeleton object at shutdown",1,[],https://github.com/performancecopilot/pcp/pull/1564,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1564#issuecomment-1072544612,"Every bpf PMDA module gets two parameters passed in the init function: init(dict *cfg, char *module_name)
cfg is the global configuration object (with contents of bpf.conf) and module_name is for example biolatency.so.
This PR frees the configuration object at shutdown, and the module_name after calling init() of the module.
imho that's inconsistent, and I'm now very happy with it - however, what's an elegant way to keep references to the module_name of each module and free it in bpf_shutdown? One option would be to create a linked list of these pointers, but I'm sure there is a better option ... Maybe just pass the memory allocated by pmdaCacheStore to the init() function? Doesn't seem very neat either.","Thanks for the review! Updated the PR with your changes.
What do you recommend about the lifetime of the module_name string?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1564,2022-03-17T15:48:57Z,2022-04-05T10:05:07Z,2022-04-05T10:05:07Z,MERGED,True,44,14,4,https://github.com/andreasgerstmayr,"pmdabpf: resolve memory leaks, destroy bpf skeleton object at shutdown",1,[],https://github.com/performancecopilot/pcp/pull/1564,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1564#issuecomment-1073373780,"Every bpf PMDA module gets two parameters passed in the init function: init(dict *cfg, char *module_name)
cfg is the global configuration object (with contents of bpf.conf) and module_name is for example biolatency.so.
This PR frees the configuration object at shutdown, and the module_name after calling init() of the module.
imho that's inconsistent, and I'm now very happy with it - however, what's an elegant way to keep references to the module_name of each module and free it in bpf_shutdown? One option would be to create a linked list of these pointers, but I'm sure there is a better option ... Maybe just pass the memory allocated by pmdaCacheStore to the init() function? Doesn't seem very neat either.","Yeah, I think using the copy from the CACHE_CLUSTER_IDS indom would be good, avoiding duplication and refcounting complexity - we should be always able to look that up using the cluster_id if we need to...?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1564,2022-03-17T15:48:57Z,2022-04-05T10:05:07Z,2022-04-05T10:05:07Z,MERGED,True,44,14,4,https://github.com/andreasgerstmayr,"pmdabpf: resolve memory leaks, destroy bpf skeleton object at shutdown",1,[],https://github.com/performancecopilot/pcp/pull/1564,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/1564#issuecomment-1084795629,"Every bpf PMDA module gets two parameters passed in the init function: init(dict *cfg, char *module_name)
cfg is the global configuration object (with contents of bpf.conf) and module_name is for example biolatency.so.
This PR frees the configuration object at shutdown, and the module_name after calling init() of the module.
imho that's inconsistent, and I'm now very happy with it - however, what's an elegant way to keep references to the module_name of each module and free it in bpf_shutdown? One option would be to create a linked list of these pointers, but I'm sure there is a better option ... Maybe just pass the memory allocated by pmdaCacheStore to the init() function? Doesn't seem very neat either.","Yeah, I think using the copy from the CACHE_CLUSTER_IDS indom would be good, avoiding duplication and refcounting complexity - we should be always able to look that up using the cluster_id if we need to...?

+1
I've moved pmdaCacheStore a few lines up now & am using the copy of pmdaCache for the module_name.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1565,2022-03-21T17:05:57Z,2022-05-13T19:52:43Z,2022-05-13T19:53:25Z,MERGED,True,727,331100,10,https://github.com/smalinux,pmdabpf: Add CO-RE execsnoop tool,5,[],https://github.com/performancecopilot/pcp/pull/1565,https://github.com/smalinux,1,https://github.com/performancecopilot/pcp/pull/1565,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1565,2022-03-21T17:05:57Z,2022-05-13T19:52:43Z,2022-05-13T19:53:25Z,MERGED,True,727,331100,10,https://github.com/smalinux,pmdabpf: Add CO-RE execsnoop tool,5,[],https://github.com/performancecopilot/pcp/pull/1565,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1565#issuecomment-1126408509,,Thank you very much for your contribution!,True,{'HEART': ['https://github.com/smalinux']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1566,2022-03-22T20:32:56Z,2022-04-04T09:08:01Z,2022-04-04T09:08:01Z,MERGED,True,6,0,1,https://github.com/saki-osive,Update INSTALL.md to add sudo su,2,[],https://github.com/performancecopilot/pcp/pull/1566,https://github.com/saki-osive,1,https://github.com/performancecopilot/pcp/pull/1566,Update INSTALL.md to add sudo su to prevent install from failing if the user is not root and tries to install via the sudo privilege.,Update INSTALL.md to add sudo su to prevent install from failing if the user is not root and tries to install via the sudo privilege.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1566,2022-03-22T20:32:56Z,2022-04-04T09:08:01Z,2022-04-04T09:08:01Z,MERGED,True,6,0,1,https://github.com/saki-osive,Update INSTALL.md to add sudo su,2,[],https://github.com/performancecopilot/pcp/pull/1566,https://github.com/saki-osive,2,https://github.com/performancecopilot/pcp/pull/1566#issuecomment-1076567659,Update INSTALL.md to add sudo su to prevent install from failing if the user is not root and tries to install via the sudo privilege.,"@natoscott Hi, thank you for your reply, I have added the $ before the privileged command as discussed.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1568,2022-03-30T19:13:21Z,2022-04-01T13:13:46Z,2022-04-01T13:13:47Z,MERGED,True,57,11,10,https://github.com/andreasgerstmayr,pmdabpftrace: move example autostart scripts to /usr/share,1,[],https://github.com/performancecopilot/pcp/pull/1568,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1568,"Resolves: #1418
Got it working, until I found this age-old bug in rpm (open since  2008) which prevents rpm from replacing a directory with a symlink during upgrades: https://bugzilla.redhat.com/show_bug.cgi?id=447156
There is a workaround involving lua code in the %pretrans scriptlet: https://docs.fedoraproject.org/en-US/packaging-guidelines/Directory_Replacement/
@natoscott: what do you recommend, should I go down this path?
Alternatively I could make the bpftrace PMDA look into both directories, and implement some logic to not load the same script twice. I'll still move the default scripts to /usr/share/pcp/pmdas/bpftrace/example, but I won't replace the /var/lib/pcp/pmdas/bpftrace/autostart directory with a symlink, due to this rpm bug.
Not sure what's the best, I'm not 100% happy with either.","Resolves: #1418
Got it working, until I found this age-old bug in rpm (open since  2008) which prevents rpm from replacing a directory with a symlink during upgrades: https://bugzilla.redhat.com/show_bug.cgi?id=447156
There is a workaround involving lua code in the %pretrans scriptlet: https://docs.fedoraproject.org/en-US/packaging-guidelines/Directory_Replacement/
@natoscott: what do you recommend, should I go down this path?
Alternatively I could make the bpftrace PMDA look into both directories, and implement some logic to not load the same script twice. I'll still move the default scripts to /usr/share/pcp/pmdas/bpftrace/example, but I won't replace the /var/lib/pcp/pmdas/bpftrace/autostart directory with a symlink, due to this rpm bug.
Not sure what's the best, I'm not 100% happy with either.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1568,2022-03-30T19:13:21Z,2022-04-01T13:13:46Z,2022-04-01T13:13:47Z,MERGED,True,57,11,10,https://github.com/andreasgerstmayr,pmdabpftrace: move example autostart scripts to /usr/share,1,[],https://github.com/performancecopilot/pcp/pull/1568,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1568#issuecomment-1084009600,"Resolves: #1418
Got it working, until I found this age-old bug in rpm (open since  2008) which prevents rpm from replacing a directory with a symlink during upgrades: https://bugzilla.redhat.com/show_bug.cgi?id=447156
There is a workaround involving lua code in the %pretrans scriptlet: https://docs.fedoraproject.org/en-US/packaging-guidelines/Directory_Replacement/
@natoscott: what do you recommend, should I go down this path?
Alternatively I could make the bpftrace PMDA look into both directories, and implement some logic to not load the same script twice. I'll still move the default scripts to /usr/share/pcp/pmdas/bpftrace/example, but I won't replace the /var/lib/pcp/pmdas/bpftrace/autostart directory with a symlink, due to this rpm bug.
Not sure what's the best, I'm not 100% happy with either.","@natoscott: what do you recommend, should I go down this path?

I'd prefer not, it looks like a maintenance headache longer term.

Alternatively I could make the bpftrace PMDA look into both directories

I think that's a good option.  Maybe it can be simpler still (since its a breaking v6 change already IIRC?) such that if the /etc path exists, we use that and stop looking further.  And in v6 we could stop installing the /var autostart location altogether, so that time people will have to migrate to the correct location and we don't end up with long-term path confusion for users.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1568,2022-03-30T19:13:21Z,2022-04-01T13:13:46Z,2022-04-01T13:13:47Z,MERGED,True,57,11,10,https://github.com/andreasgerstmayr,pmdabpftrace: move example autostart scripts to /usr/share,1,[],https://github.com/performancecopilot/pcp/pull/1568,https://github.com/andreasgerstmayr,3,https://github.com/performancecopilot/pcp/pull/1568#issuecomment-1084839131,"Resolves: #1418
Got it working, until I found this age-old bug in rpm (open since  2008) which prevents rpm from replacing a directory with a symlink during upgrades: https://bugzilla.redhat.com/show_bug.cgi?id=447156
There is a workaround involving lua code in the %pretrans scriptlet: https://docs.fedoraproject.org/en-US/packaging-guidelines/Directory_Replacement/
@natoscott: what do you recommend, should I go down this path?
Alternatively I could make the bpftrace PMDA look into both directories, and implement some logic to not load the same script twice. I'll still move the default scripts to /usr/share/pcp/pmdas/bpftrace/example, but I won't replace the /var/lib/pcp/pmdas/bpftrace/autostart directory with a symlink, due to this rpm bug.
Not sure what's the best, I'm not 100% happy with either.","I'd prefer not, it looks like a maintenance headache longer term.

+1

since its a breaking v6 change already IIRC?

Partly, yes - I plan to move the default scripts to the /usr/share/ example folder, so by default no script will be started when the PMDA is started. This way people who don't want these default scripts don't get irritated when they delete them and they re-appear again for every PCP update.
There is another part to backwards compatibility, namely people who already have custom scripts in their /var autostart location and people who follow already published guides like https://www.redhat.com/en/blog/visualizing-system-performance-rhel-8-part-3-kernel-metric-graphing-performance-co-pilot-grafana-and-bpftrace",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1568,2022-03-30T19:13:21Z,2022-04-01T13:13:46Z,2022-04-01T13:13:47Z,MERGED,True,57,11,10,https://github.com/andreasgerstmayr,pmdabpftrace: move example autostart scripts to /usr/share,1,[],https://github.com/performancecopilot/pcp/pull/1568,https://github.com/andreasgerstmayr,4,https://github.com/performancecopilot/pcp/pull/1568#issuecomment-1084924705,"Resolves: #1418
Got it working, until I found this age-old bug in rpm (open since  2008) which prevents rpm from replacing a directory with a symlink during upgrades: https://bugzilla.redhat.com/show_bug.cgi?id=447156
There is a workaround involving lua code in the %pretrans scriptlet: https://docs.fedoraproject.org/en-US/packaging-guidelines/Directory_Replacement/
@natoscott: what do you recommend, should I go down this path?
Alternatively I could make the bpftrace PMDA look into both directories, and implement some logic to not load the same script twice. I'll still move the default scripts to /usr/share/pcp/pmdas/bpftrace/example, but I won't replace the /var/lib/pcp/pmdas/bpftrace/autostart directory with a symlink, due to this rpm bug.
Not sure what's the best, I'm not 100% happy with either.",Updated PR to scan both directories. Duplicate scripts won't be started. This keeps backwards compatibility with user-provided scripts in /var and with guides mentioning this path.,True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1569,2022-04-05T10:03:33Z,2022-04-06T18:52:02Z,2022-04-06T18:52:03Z,MERGED,True,0,1,1,https://github.com/andreasgerstmayr,ci: remove centos6 from release workflow,1,[],https://github.com/performancecopilot/pcp/pull/1569,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1569,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1570,2022-04-05T13:52:47Z,2022-04-05T23:09:00Z,2022-04-05T23:09:01Z,MERGED,True,139,19,6,https://github.com/christianhorn,Fix battery detection for non-intel systems.,1,[],https://github.com/performancecopilot/pcp/pull/1570,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/1570,"Fix battery detection for non-intel systems, i.e. Apple silicon macbook air.","Fix battery detection for non-intel systems, i.e. Apple silicon macbook air.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1571,2022-04-06T12:07:09Z,2022-04-06T18:51:42Z,2022-04-06T18:51:43Z,MERGED,True,32,47,16,https://github.com/andreasgerstmayr,pmdabpftrace: fix autostart tests,2,[],https://github.com/performancecopilot/pcp/pull/1571,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1571,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1572,2022-04-10T10:09:49Z,2022-04-12T03:58:48Z,2022-04-12T03:58:48Z,MERGED,True,9,5,1,https://github.com/christianhorn,Fix macosx autoconfig setup,1,[],https://github.com/performancecopilot/pcp/pull/1572,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/1572,"introduces extra handling for macosx 11.* and 12..  Old configure script has a setting which assumes x86 for all systems and uses ""-arch x86_64"" for the compiler - that's no longer true as 11. and later also support aarch64/Apple silicon
Current gcc from brew (the most common mac os x package system for opensource soft) has a GCC-11 build which does not know ""-no-cpp-precomp"", so with this fix we do not use -no-cpp-precomp on 11.* and 12.*

Note: this is not fixing PCP build on current Mac OS X/apple silicon completely, but it's a required piece in the right direction.","introduces extra handling for macosx 11.* and 12..  Old configure script has a setting which assumes x86 for all systems and uses ""-arch x86_64"" for the compiler - that's no longer true as 11. and later also support aarch64/Apple silicon
Current gcc from brew (the most common mac os x package system for opensource soft) has a GCC-11 build which does not know ""-no-cpp-precomp"", so with this fix we do not use -no-cpp-precomp on 11.* and 12.*

Note: this is not fixing PCP build on current Mac OS X/apple silicon completely, but it's a required piece in the right direction.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1573,2022-04-11T17:11:50Z,2022-04-12T03:58:48Z,2022-04-12T09:08:22Z,MERGED,True,1,1,1,https://github.com/Conan-Kudo,pcp.conf.in: Fix comment on standard sysconfig path,1,[],https://github.com/performancecopilot/pcp/pull/1573,https://github.com/Conan-Kudo,1,https://github.com/performancecopilot/pcp/pull/1573,"This path is /etc/sysconfig and it's used on Red Hat/Fedora and
SUSE systems. Adjust the comment to accurately reflect that.","This path is /etc/sysconfig and it's used on Red Hat/Fedora and
SUSE systems. Adjust the comment to accurately reflect that.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1574,2022-04-12T10:20:54Z,2022-04-13T00:10:03Z,2022-04-13T00:10:03Z,MERGED,True,51,42,1,https://github.com/christianhorn,Better checks if we are really dealing with battery metrics,1,[],https://github.com/performancecopilot/pcp/pull/1574,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/1574,"Only consider a directory in /sys/class/power_supply as relevant, when one of charge_now, energy_now, power_now exists there.
With this change, directories there which have type=Battery (so far the only criteria), but do not report actual chargelevel or consumption, get now ignored.","Only consider a directory in /sys/class/power_supply as relevant, when one of charge_now, energy_now, power_now exists there.
With this change, directories there which have type=Battery (so far the only criteria), but do not report actual chargelevel or consumption, get now ignored.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1575,2022-04-13T01:01:53Z,2022-04-14T21:47:43Z,2022-04-14T21:47:43Z,MERGED,True,164,48,5,https://github.com/natoscott,Denki PMDA minor cleanups,5,[],https://github.com/performancecopilot/pcp/pull/1575,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1575,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1575,2022-04-13T01:01:53Z,2022-04-14T21:47:43Z,2022-04-14T21:47:43Z,MERGED,True,164,48,5,https://github.com/natoscott,Denki PMDA minor cleanups,5,[],https://github.com/performancecopilot/pcp/pull/1575,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1575#issuecomment-1098552207,,"Can we remove line 246 and change 247 as follows? pmNotifyErr(LOG_DEBUG, ""Assuming %s%s is a battery we should provide metrics for."",dirname,ep->d_name); That will give us that one line of detail which directory is considered a battery, good to have that by default.

Will do (on both suggestions), thanks!  I'll also use LOG_INFO for these diagnostics rather than LOG_DEBUG.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1576,2022-04-18T11:13:53Z,2022-04-22T00:35:33Z,2022-04-22T00:35:33Z,MERGED,True,315,148,5,https://github.com/christianhorn,"pmda denki, multi battery support",4,[],https://github.com/performancecopilot/pcp/pull/1576,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/1576,"Indoms for batteries, allow multiple batteries. QA test for the multibat-system I have here.
Not sure if the debug option is implemented in the best way.","Indoms for batteries, allow multiple batteries. QA test for the multibat-system I have here.
Not sure if the debug option is implemented in the best way.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1577,2022-04-22T06:45:55Z,2022-04-22T06:56:46Z,2022-04-22T06:58:09Z,MERGED,True,7,7,1,https://github.com/christianhorn,Fix pmda-denki help to cover the new battery indoms,1,[],https://github.com/performancecopilot/pcp/pull/1577,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/1577,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1577,2022-04-22T06:45:55Z,2022-04-22T06:56:46Z,2022-04-22T06:58:09Z,MERGED,True,7,7,1,https://github.com/christianhorn,Fix pmda-denki help to cover the new battery indoms,1,[],https://github.com/performancecopilot/pcp/pull/1577,https://github.com/christianhorn,2,https://github.com/performancecopilot/pcp/pull/1577#issuecomment-1106074576,,"Looks like the centos-stream8 build error is not caused by my change, I guess building without the change would also fail..",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1578,2022-04-26T02:01:00Z,2022-04-26T04:34:24Z,2022-04-26T04:34:25Z,MERGED,True,104,57,1,https://github.com/natoscott,libpcp: optimize indom handling in fetchgroup code,1,[],https://github.com/performancecopilot/pcp/pull/1578,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1578,"Looking into some pcp-ss issues I immediately encountered a
noticable elapsed time difference between executing just ss
versus pcp-ss.  It turned out it was due to fetchgroup code
not really understanding how the underlying indom APIs work
and repeatedly refreshing shared indoms (all metrics in the
pcp-ss tool actually share one indom) once for every metric
that happens to use that indom - i.e. many times per fetch.
These changes resulted in a 5x speedup in pcp-ss and it now
completes instantly as expected.  Additionally, we use alot
less memory now for the many-metrics-sharing-an-indom case.","Looking into some pcp-ss issues I immediately encountered a
noticable elapsed time difference between executing just ss
versus pcp-ss.  It turned out it was due to fetchgroup code
not really understanding how the underlying indom APIs work
and repeatedly refreshing shared indoms (all metrics in the
pcp-ss tool actually share one indom) once for every metric
that happens to use that indom - i.e. many times per fetch.
These changes resulted in a 5x speedup in pcp-ss and it now
completes instantly as expected.  Additionally, we use alot
less memory now for the many-metrics-sharing-an-indom case.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1578,2022-04-26T02:01:00Z,2022-04-26T04:34:24Z,2022-04-26T04:34:25Z,MERGED,True,104,57,1,https://github.com/natoscott,libpcp: optimize indom handling in fetchgroup code,1,[],https://github.com/performancecopilot/pcp/pull/1578,https://github.com/apps/lgtm-com,2,https://github.com/performancecopilot/pcp/pull/1578#issuecomment-1109246928,"Looking into some pcp-ss issues I immediately encountered a
noticable elapsed time difference between executing just ss
versus pcp-ss.  It turned out it was due to fetchgroup code
not really understanding how the underlying indom APIs work
and repeatedly refreshing shared indoms (all metrics in the
pcp-ss tool actually share one indom) once for every metric
that happens to use that indom - i.e. many times per fetch.
These changes resulted in a 5x speedup in pcp-ss and it now
completes instantly as expected.  Additionally, we use alot
less memory now for the many-metrics-sharing-an-indom case.","This pull request introduces 1 alert when merging c226e98 into c8fdbf0 - view on LGTM.com
new alerts:

1 for Comparison result is always the same",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1579,2022-04-26T05:53:44Z,2022-04-26T06:58:30Z,2022-04-26T07:03:12Z,MERGED,True,0,13,13,https://github.com/natoscott,"qa: drop setools on Red Hat platform CI, use setools-console",1,[],https://github.com/performancecopilot/pcp/pull/1579,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1579,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1580,2022-04-26T12:02:23Z,2022-04-26T12:02:34Z,2022-04-26T12:02:35Z,MERGED,True,3,2,1,https://github.com/andreasgerstmayr,"ci: add CentOS Stream 9 and Fedora 36, drop Fedora 34 from CI workflow",1,[],https://github.com/performancecopilot/pcp/pull/1580,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1580,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1581,2022-04-26T14:37:22Z,2022-05-02T15:42:21Z,2022-05-02T15:42:21Z,MERGED,True,18,0,1,https://github.com/andreasgerstmayr,docs: add instructions about vendoring a subdirectory of a remote rep…,1,[],https://github.com/performancecopilot/pcp/pull/1581,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1581,…ository,…ository,True,"{'THUMBS_UP': ['https://github.com/smalinux', 'https://github.com/natoscott']}"
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1582,2022-04-26T14:59:51Z,2022-04-29T12:15:13Z,2022-04-29T12:15:13Z,MERGED,True,387929,0,153,https://github.com/andreasgerstmayr,vendor libbpf-tools directory of iovisor/bcc repository,3,[],https://github.com/performancecopilot/pcp/pull/1582,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1582,"See #1565 (comment)
Related: #1565","See #1565 (comment)
Related: #1565",True,"{'HEART': ['https://github.com/smalinux'], 'THUMBS_UP': ['https://github.com/natoscott']}"
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1583,2022-05-03T00:24:53Z,2022-05-04T23:42:34Z,2022-05-04T23:42:35Z,MERGED,True,211,66,8,https://github.com/natoscott,Linux sockets agent bug fixes,3,['bug'],https://github.com/performancecopilot/pcp/pull/1583,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1583,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1584,2022-05-03T20:45:37Z,2022-05-11T06:25:20Z,2022-05-11T06:25:20Z,MERGED,True,1,2,1,https://github.com/portante,Small fixes to the pcp-pidstat man page,1,[],https://github.com/performancecopilot/pcp/pull/1584,https://github.com/portante,1,https://github.com/performancecopilot/pcp/pull/1584,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1585,2022-05-03T23:15:01Z,2022-05-11T06:25:20Z,2022-05-11T06:25:20Z,MERGED,True,40,27,1,https://github.com/portante,DRY out PCP metrics lists,1,[],https://github.com/performancecopilot/pcp/pull/1585,https://github.com/portante,1,https://github.com/performancecopilot/pcp/pull/1585,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1586,2022-05-04T00:13:06Z,,2022-05-12T03:36:44Z,OPEN,False,7,3,1,https://github.com/portante,Correct operation of `pidstat -p ALL|SELF`,1,[],https://github.com/performancecopilot/pcp/pull/1586,https://github.com/portante,1,https://github.com/performancecopilot/pcp/pull/1586,"Note that this PR is layered on PR #1585, where the DRY out ... commit lives.","Note that this PR is layered on PR #1585, where the DRY out ... commit lives.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1586,2022-05-04T00:13:06Z,,2022-05-12T03:36:44Z,OPEN,False,7,3,1,https://github.com/portante,Correct operation of `pidstat -p ALL|SELF`,1,[],https://github.com/performancecopilot/pcp/pull/1586,https://github.com/portante,2,https://github.com/performancecopilot/pcp/pull/1586#issuecomment-1123640596,"Note that this PR is layered on PR #1585, where the DRY out ... commit lives.","The question is what to do with pcp pidstat -p SELF when using an archive?  I believe the command should report an error saying that -p SELF is not valid for that case.
Thoughts @natoscott?",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1586,2022-05-04T00:13:06Z,,2022-05-12T03:36:44Z,OPEN,False,7,3,1,https://github.com/portante,Correct operation of `pidstat -p ALL|SELF`,1,[],https://github.com/performancecopilot/pcp/pull/1586,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1586#issuecomment-1124497045,"Note that this PR is layered on PR #1585, where the DRY out ... commit lives.",@portante I think either an error or perhaps simply no output at all (just the headers) would be fine behaviours.,True,{'THUMBS_UP': ['https://github.com/portante']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1587,2022-05-04T00:54:29Z,,2022-05-11T11:49:17Z,OPEN,False,152,143,1,https://github.com/portante,Add the `pcp pidstat -u` option,3,[],https://github.com/performancecopilot/pcp/pull/1587,https://github.com/portante,1,https://github.com/performancecopilot/pcp/pull/1587,"Layered on top of PR #1586.
The addition of the -u option support is delivered in one commit, and the ability to emit multiple reports is added in a second commit.","Layered on top of PR #1586.
The addition of the -u option support is delivered in one commit, and the ability to emit multiple reports is added in a second commit.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1588,2022-05-04T02:49:19Z,,2022-05-11T11:49:44Z,OPEN,False,255,146,1,https://github.com/portante,Add `pidstat -w` option (context switches),4,[],https://github.com/performancecopilot/pcp/pull/1588,https://github.com/portante,1,https://github.com/performancecopilot/pcp/pull/1588,Layered on top of PR #1587.,Layered on top of PR #1587.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1589,2022-05-04T07:11:42Z,2022-05-04T23:42:34Z,2022-05-05T00:42:42Z,MERGED,True,3,1,1,https://github.com/natoscott,pmdaproc: fix cgroup cpu metrics refresh structures,1,[],https://github.com/performancecopilot/pcp/pull/1589,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1589,"Jan Kurik encountered this issue when running the regression
testsuite (especially qa/359) on non-x86_64 architectures.
Something must've changed in the toolchain recently on these
platforms since we've not seen this before, but this bug has
been in our code for some time.  It works everywhere else by
good fortune, when there just happen to be NULLs after these
cgroups CPU parsing data structures.
Resolves Red Hat BZ #2081262.","Jan Kurik encountered this issue when running the regression
testsuite (especially qa/359) on non-x86_64 architectures.
Something must've changed in the toolchain recently on these
platforms since we've not seen this before, but this bug has
been in our code for some time.  It works everywhere else by
good fortune, when there just happen to be NULLs after these
cgroups CPU parsing data structures.
Resolves Red Hat BZ #2081262.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1591,2022-05-09T12:00:44Z,2022-05-09T14:04:08Z,2022-05-09T14:04:09Z,MERGED,True,0,2,1,https://github.com/andreasgerstmayr,ci: revert workaround for pylint on F36 (BZ 2069189),1,[],https://github.com/performancecopilot/pcp/pull/1591,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1591,https://bugzilla.redhat.com/show_bug.cgi?id=2069189,https://bugzilla.redhat.com/show_bug.cgi?id=2069189,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1592,2022-05-10T11:55:55Z,2022-05-11T11:09:57Z,2022-05-11T11:09:58Z,MERGED,True,14,11,4,https://github.com/andreasgerstmayr,chore: fix pylint errors,1,[],https://github.com/performancecopilot/pcp/pull/1592,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1592,"a couple of minor Python fixes:

don't modify the dict while iterating over it
variables should be declared before the try/except block; in the except block, don't access variables declared in the try block
don't shadow the error variable when nesting try/except blocks","a couple of minor Python fixes:

don't modify the dict while iterating over it
variables should be declared before the try/except block; in the except block, don't access variables declared in the try block
don't shadow the error variable when nesting try/except blocks",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1592,2022-05-10T11:55:55Z,2022-05-11T11:09:57Z,2022-05-11T11:09:58Z,MERGED,True,14,11,4,https://github.com/andreasgerstmayr,chore: fix pylint errors,1,[],https://github.com/performancecopilot/pcp/pull/1592,https://github.com/myllynen,2,https://github.com/performancecopilot/pcp/pull/1592#issuecomment-1123207095,"a couple of minor Python fixes:

don't modify the dict while iterating over it
variables should be declared before the try/except block; in the except block, don't access variables declared in the try block
don't shadow the error variable when nesting try/except blocks","Thanks, LGTM!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1593,2022-05-12T13:33:39Z,2022-05-13T11:47:50Z,2022-05-13T11:47:50Z,MERGED,True,9,0,3,https://github.com/andreasgerstmayr,selinux: allow bcc PMDA to execute its private memfd: objects created by ctypes/libffi,1,[],https://github.com/performancecopilot/pcp/pull/1593,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1593,"Resolves the following AVC:
type=AVC msg=audit(YYY.787): avc:  denied  { execute } for  pid=216047 comm=""python3"" path=2F6D656D66643A6C6962666669202864656C6574656429 dev=""tmpfs"" ino=919210 scontext=system_u:system_r:pcp_pmcd_t:s0 tcontext=system_u:object_r:pcp_tmpfs_t:s0 tclass=file permissive=0

Resolves: https://bugzilla.redhat.com/show_bug.cgi?id=2050094","Resolves the following AVC:
type=AVC msg=audit(YYY.787): avc:  denied  { execute } for  pid=216047 comm=""python3"" path=2F6D656D66643A6C6962666669202864656C6574656429 dev=""tmpfs"" ino=919210 scontext=system_u:system_r:pcp_pmcd_t:s0 tcontext=system_u:object_r:pcp_tmpfs_t:s0 tclass=file permissive=0

Resolves: https://bugzilla.redhat.com/show_bug.cgi?id=2050094",True,{'THUMBS_UP': ['https://github.com/natoscott']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1595,2022-05-13T06:05:42Z,2022-05-13T23:37:22Z,2022-05-14T03:50:50Z,MERGED,True,506,81,11,https://github.com/natoscott,pcp-dstat: implement support for the top-alike plugins,1,[],https://github.com/performancecopilot/pcp/pull/1595,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1595,Resolves Red Hat BZ #2020988.,Resolves Red Hat BZ #2020988.,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1596,2022-05-13T20:28:03Z,2022-05-17T15:44:00Z,2022-05-17T15:44:00Z,MERGED,True,55,117,8,https://github.com/andreasgerstmayr,pmdabpf: check libbpf version before including execsnoop,2,[],https://github.com/performancecopilot/pcp/pull/1596,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1596,and create symlinks for required source files only,and create symlinks for required source files only,True,"{'THUMBS_UP': ['https://github.com/smalinux', 'https://github.com/natoscott']}"
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1598,2022-05-16T12:06:53Z,2022-05-17T00:52:10Z,2022-05-17T00:52:11Z,CLOSED,False,126,48,7,https://github.com/christianhorn,"Add capacity metric, testsuite",2,[],https://github.com/performancecopilot/pcp/pull/1598,https://github.com/christianhorn,1,https://github.com/performancecopilot/pcp/pull/1598,Solves #1597,Solves #1597,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1598,2022-05-16T12:06:53Z,2022-05-17T00:52:10Z,2022-05-17T00:52:11Z,CLOSED,False,126,48,7,https://github.com/christianhorn,"Add capacity metric, testsuite",2,[],https://github.com/performancecopilot/pcp/pull/1598,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1598#issuecomment-1128284984,Solves #1597,"@christianhorn fixed and merged now, just as we discussed on IRC.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1599,2022-05-17T15:02:56Z,2022-05-23T16:57:24Z,2022-05-23T16:57:24Z,MERGED,True,70,26,3,https://github.com/andreasgerstmayr,build: rename artifactory deploy script and add recalculate_metadata …,1,[],https://github.com/performancecopilot/pcp/pull/1599,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1599,"…subtask
Update build/ci/README.md with instructions for common Artifactory tasks","…subtask
Update build/ci/README.md with instructions for common Artifactory tasks",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1601,2022-05-19T08:55:53Z,2022-05-23T02:09:24Z,2022-05-23T12:20:19Z,MERGED,True,183,2,1,https://github.com/veda10,Changes to parse Interface stats,1,[],https://github.com/performancecopilot/pcp/pull/1601,https://github.com/veda10,1,https://github.com/performancecopilot/pcp/pull/1601,Added code to parse OVS Interface stats,Added code to parse OVS Interface stats,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1601,2022-05-19T08:55:53Z,2022-05-23T02:09:24Z,2022-05-23T12:20:19Z,MERGED,True,183,2,1,https://github.com/veda10,Changes to parse Interface stats,1,[],https://github.com/performancecopilot/pcp/pull/1601,https://github.com/natoscott,2,https://github.com/performancecopilot/pcp/pull/1601#issuecomment-1134089665,Added code to parse OVS Interface stats,"@veda10 hi, thanks, looks good.  I've verified qa/1680 still functions (but cannot see any simple way to extend this test, so have left it as-is).  There was an issue which pylint reported (use 'make check' to see it) - I've fixed that in a followup commit.
Oh, one suggestion for future work - please prefix your commit messages with the component that's changing (pmdaopenvswitch: in this case) - that helps maintainers down the track looking just at commit logs.  Thanks!",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1601,2022-05-19T08:55:53Z,2022-05-23T02:09:24Z,2022-05-23T12:20:19Z,MERGED,True,183,2,1,https://github.com/veda10,Changes to parse Interface stats,1,[],https://github.com/performancecopilot/pcp/pull/1601,https://github.com/veda10,3,https://github.com/performancecopilot/pcp/pull/1601#issuecomment-1134604374,Added code to parse OVS Interface stats,"@veda10 hi, thanks, looks good. I've verified qa/1680 still functions (but cannot see any simple way to extend this test, so have left it as-is). There was an issue which pylint reported (use 'make check' to see it) - I've fixed that in a followup commit.
@natoscott Thank you!
Oh, one suggestion for future work - please prefix your commit messages with the component that's changing (pmdaopenvswitch: in this case) - that helps maintainers down the track looking just at commit logs. Thanks!
Sure",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1603,2022-05-26T05:52:26Z,2022-05-26T10:46:41Z,2022-05-26T10:50:44Z,MERGED,True,221,35,11,https://github.com/natoscott,pmproxy discovery improvements from new valgrind test 1662,2,[],https://github.com/performancecopilot/pcp/pull/1603,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1603,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1604,2022-05-27T14:54:26Z,2022-05-30T23:21:48Z,2022-05-30T23:21:49Z,MERGED,True,209,78,4,https://github.com/smalinux,qa for execsnoop and code style cleanups,2,[],https://github.com/performancecopilot/pcp/pull/1604,https://github.com/smalinux,1,https://github.com/performancecopilot/pcp/pull/1604,,,True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1604,2022-05-27T14:54:26Z,2022-05-30T23:21:48Z,2022-05-30T23:21:49Z,MERGED,True,209,78,4,https://github.com/smalinux,qa for execsnoop and code style cleanups,2,[],https://github.com/performancecopilot/pcp/pull/1604,https://github.com/smalinux,2,https://github.com/performancecopilot/pcp/pull/1604#issuecomment-1139704588,,@a3f: Thanks for the code review :),True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1604,2022-05-27T14:54:26Z,2022-05-30T23:21:48Z,2022-05-30T23:21:49Z,MERGED,True,209,78,4,https://github.com/smalinux,qa for execsnoop and code style cleanups,2,[],https://github.com/performancecopilot/pcp/pull/1604,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1604#issuecomment-1141531172,,"@smalinux excellent work, thanks.",True,{'HEART': ['https://github.com/smalinux']}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1605,2022-05-27T15:21:03Z,,2022-05-31T04:12:25Z,OPEN,False,54,2,3,https://github.com/andreasgerstmayr,libpcp_web: break recursion and let libuv process the I/O queue when …,1,[],https://github.com/performancecopilot/pcp/pull/1605,https://github.com/andreasgerstmayr,1,https://github.com/performancecopilot/pcp/pull/1605,"…loading archives into Redis
Previously, the following recursion occured when loading archives into
Redis (e.g. using pmseries --load):
[...]
server_cache_window
server_cache_update_done
doneSeriesGetContext
series_cache_update
server_cache_window

The recursion does end when the archive was read entirely, however
the call stack could grew too large, resulting in a segmentation fault.
This commit breaks the recursion by scheduling server_cache_window() to
run on the next libuv loop iteration, after 5ms. 5ms was choosen so that
libuv can process pending (Redis) I/O callbacks.
This change also keeps the memory usage at about 130 MB, where
previously I saw RSS values of 10 GB+ due to queued Redis requests.","…loading archives into Redis
Previously, the following recursion occured when loading archives into
Redis (e.g. using pmseries --load):
[...]
server_cache_window
server_cache_update_done
doneSeriesGetContext
series_cache_update
server_cache_window

The recursion does end when the archive was read entirely, however
the call stack could grew too large, resulting in a segmentation fault.
This commit breaks the recursion by scheduling server_cache_window() to
run on the next libuv loop iteration, after 5ms. 5ms was choosen so that
libuv can process pending (Redis) I/O callbacks.
This change also keeps the memory usage at about 130 MB, where
previously I saw RSS values of 10 GB+ due to queued Redis requests.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1605,2022-05-27T15:21:03Z,,2022-05-31T04:12:25Z,OPEN,False,54,2,3,https://github.com/andreasgerstmayr,libpcp_web: break recursion and let libuv process the I/O queue when …,1,[],https://github.com/performancecopilot/pcp/pull/1605,https://github.com/andreasgerstmayr,2,https://github.com/performancecopilot/pcp/pull/1605#issuecomment-1139728550,"…loading archives into Redis
Previously, the following recursion occured when loading archives into
Redis (e.g. using pmseries --load):
[...]
server_cache_window
server_cache_update_done
doneSeriesGetContext
series_cache_update
server_cache_window

The recursion does end when the archive was read entirely, however
the call stack could grew too large, resulting in a segmentation fault.
This commit breaks the recursion by scheduling server_cache_window() to
run on the next libuv loop iteration, after 5ms. 5ms was choosen so that
libuv can process pending (Redis) I/O callbacks.
This change also keeps the memory usage at about 130 MB, where
previously I saw RSS values of 10 GB+ due to queued Redis requests.","I'm not very excited about the artificial 5ms delay (it's not actually a delay, just an elaborate guess to let libuv process I/O callbacks).
Thinking more about it, I think a better way to fix the underlying problem is to wait until the Redis requests are processed before continuing with the next record.
Specifically, here: 
  
    
      pcp/src/libpcp_web/src/load.c
    
    
        Lines 500 to 507
      in
      bb865a6
    
  
  
    

        
          
           	/* initiate writes to backend caching servers (Redis) */ 
        

        
          
           	server_cache_metric(baton, metric, timestamp, write_meta, write_data); 
        

        
          
               } 
        

        
          
            
        

        
          
           out: 
        

        
          
               sdsfree(timestamp); 
        

        
          
               /* drop reference taken in server_cache_window */ 
        

        
          
               doneSeriesGetContext(context, ""series_cache_update""); 
        
    
  


server_cache_metric() initiates write requests to Redis, but is not waiting for them to complete. Instead, the loop continues and after the loop doneSeriesGetContext(context, ""series_cache_update""); is called, which calls server_cache_update_done which then calls server_cache_window to process the next record (if any).
I think doneSeriesGetContext(context, ""series_cache_update""); should only be called after all server_cache_metric() write requests are completed. Then the recursion is also broken up and we won't get segmentation faults because the call stack got too big anymore. As a bonus, afaics this will also greatly improve memory usage when pmproxy is run in discovery mode, with many archives (less inflight Redis requests = less memory usage). Related: #1341",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1605,2022-05-27T15:21:03Z,,2022-05-31T04:12:25Z,OPEN,False,54,2,3,https://github.com/andreasgerstmayr,libpcp_web: break recursion and let libuv process the I/O queue when …,1,[],https://github.com/performancecopilot/pcp/pull/1605,https://github.com/natoscott,3,https://github.com/performancecopilot/pcp/pull/1605#issuecomment-1141546976,"…loading archives into Redis
Previously, the following recursion occured when loading archives into
Redis (e.g. using pmseries --load):
[...]
server_cache_window
server_cache_update_done
doneSeriesGetContext
series_cache_update
server_cache_window

The recursion does end when the archive was read entirely, however
the call stack could grew too large, resulting in a segmentation fault.
This commit breaks the recursion by scheduling server_cache_window() to
run on the next libuv loop iteration, after 5ms. 5ms was choosen so that
libuv can process pending (Redis) I/O callbacks.
This change also keeps the memory usage at about 130 MB, where
previously I saw RSS values of 10 GB+ due to queued Redis requests.","Ah, this is great progress @andreasgerstmayr - nicely done.  Instead of a timer-based approach I had been thinking more along the lines of size-limiting things, i.e. once we reach a certain size pending (10MB?  100?), flush it and carry on.  But timer-based certainly has its merits too (may have additional benefits around interactive performance in pmproxy).
| I think a better way to fix the underlying problem is to wait until the Redis requests are processed before continuing with the next record.
Maybe, worth experimenting with - and possibly a combination of both might be ideal.  One thing we want to avoid would be creating a ping-pong with the redis-server process, such that we send-then-wait, redis-waits-then-replies (i.e. synchronous round trips), and so on - best-case I think may be if we can setup a pipeline where we get a bit ahead and feed data at a constant rate.  Recall of course that we need to do I/O on our end too (esp. reading the data volume) so we don't want to block on that if we can avoid it.
Next step would be to start getting some numbers I think - as well as the memory numbers you have, also see if/how much this initial change speeds up archive import... and then improve incrementally from there.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1605,2022-05-27T15:21:03Z,,2022-05-31T04:12:25Z,OPEN,False,54,2,3,https://github.com/andreasgerstmayr,libpcp_web: break recursion and let libuv process the I/O queue when …,1,[],https://github.com/performancecopilot/pcp/pull/1605,https://github.com/natoscott,4,https://github.com/performancecopilot/pcp/pull/1605#issuecomment-1141648411,"…loading archives into Redis
Previously, the following recursion occured when loading archives into
Redis (e.g. using pmseries --load):
[...]
server_cache_window
server_cache_update_done
doneSeriesGetContext
series_cache_update
server_cache_window

The recursion does end when the archive was read entirely, however
the call stack could grew too large, resulting in a segmentation fault.
This commit breaks the recursion by scheduling server_cache_window() to
run on the next libuv loop iteration, after 5ms. 5ms was choosen so that
libuv can process pending (Redis) I/O callbacks.
This change also keeps the memory usage at about 130 MB, where
previously I saw RSS values of 10 GB+ due to queued Redis requests.","One other thought, I notice there is a non-blocking event-loop mechanism in libuv:
uv_run(loop, UV_RUN_NOWAIT);

I'm not sure about this, but we might be able to call that (with the existing event loop as first parameter) at convenient times rather than introducing an additional libuv timer.",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1607,2022-06-01T12:50:18Z,2022-06-02T23:49:43Z,2022-06-02T23:49:43Z,MERGED,True,11,0,2,https://github.com/smalinux,pmdabpf: check libbpf version before running any qa,1,[],https://github.com/performancecopilot/pcp/pull/1607,https://github.com/smalinux,1,https://github.com/performancecopilot/pcp/pull/1607,"Fixes: 2d9476c (""qa/1931: pmdabpf: execsnoop"")","Fixes: 2d9476c (""qa/1931: pmdabpf: execsnoop"")",True,{}
performancecopilot/pcp,https://github.com/performancecopilot/pcp,1608,2022-06-03T00:09:32Z,,2022-06-03T00:25:55Z,OPEN,False,224,220,14,https://github.com/natoscott,Qt endl warnings,4,[],https://github.com/performancecopilot/pcp/pull/1608,https://github.com/natoscott,1,https://github.com/performancecopilot/pcp/pull/1608,,,True,{}
