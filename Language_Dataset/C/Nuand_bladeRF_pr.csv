Nuand/bladeRF,https://github.com/Nuand/bladeRF,456,2016-02-14T19:13:04Z,2016-02-14T21:21:36Z,2018-02-08T20:39:20Z,MERGED,True,30,11,1,https://github.com/rtucker,generate.bash: gracefully handle pandoc failures,1,[],https://github.com/Nuand/bladeRF/pull/456,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/456,This might fix the build failures we're seeing on armhf PPA,This might fix the build failures we're seeing on armhf PPA,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,467,2016-04-20T14:20:36Z,2018-09-05T22:30:07Z,2018-09-05T22:30:07Z,CLOSED,False,98,125,4,https://github.com/jenselofsson,libbladeRF: Move the submit_stream_buffer up one layer to usb.c,1,[],https://github.com/Nuand/bladeRF/pull/467,https://github.com/jenselofsson,1,https://github.com/Nuand/bladeRF/pull/467,"Removed [lusb|cyapi]_submit_stream_buffer and replaced it with submit_stream_buffer in usb.c, as pointed out in issue #439 . Also added the functions [lusb|cyapi]_get_num_avail and [lusb|cyapi]_get_num_transfers, since usb.c need to know the values of num_avail and num_transfers.","Removed [lusb|cyapi]_submit_stream_buffer and replaced it with submit_stream_buffer in usb.c, as pointed out in issue #439 . Also added the functions [lusb|cyapi]_get_num_avail and [lusb|cyapi]_get_num_transfers, since usb.c need to know the values of num_avail and num_transfers.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,467,2016-04-20T14:20:36Z,2018-09-05T22:30:07Z,2018-09-05T22:30:07Z,CLOSED,False,98,125,4,https://github.com/jenselofsson,libbladeRF: Move the submit_stream_buffer up one layer to usb.c,1,[],https://github.com/Nuand/bladeRF/pull/467,https://github.com/jynik,2,https://github.com/Nuand/bladeRF/pull/467#issuecomment-217664466,"Removed [lusb|cyapi]_submit_stream_buffer and replaced it with submit_stream_buffer in usb.c, as pointed out in issue #439 . Also added the functions [lusb|cyapi]_get_num_avail and [lusb|cyapi]_get_num_transfers, since usb.c need to know the values of num_avail and num_transfers.","@jenselo Thank you so much for tackling this. I just wanted to ACK that I've seen this and will be looking to test and merge soon.
If you're up for it, mind pinging me for confirmation of any of the following.

Build tests with MSVC 2012, 2013, 2015
Build tests with gcc
Build tests with clang
Bill of clean health from clang's scan-build tool (I am aware of a false positive from previous code)
Bill of clean health from some transmit tests programs and general usage

I will likely do all of the above regardless, but it's a bit easier to sleep at night when the patch author has confirmed items such as these independently. 😉",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,467,2016-04-20T14:20:36Z,2018-09-05T22:30:07Z,2018-09-05T22:30:07Z,CLOSED,False,98,125,4,https://github.com/jenselofsson,libbladeRF: Move the submit_stream_buffer up one layer to usb.c,1,[],https://github.com/Nuand/bladeRF/pull/467,https://github.com/jenselofsson,3,https://github.com/Nuand/bladeRF/pull/467#issuecomment-224394789,"Removed [lusb|cyapi]_submit_stream_buffer and replaced it with submit_stream_buffer in usb.c, as pointed out in issue #439 . Also added the functions [lusb|cyapi]_get_num_avail and [lusb|cyapi]_get_num_transfers, since usb.c need to know the values of num_avail and num_transfers.","Sorry for the delay.
I have built/compiled it with both clang 3.5.0 and gcc 4.9.2, and it builds and runs just fine, both for Debug and Release type.
scan-build returns:
scan-build: Removing directory '/tmp/scan-build-2016-06-07-211422-12375-1' because it contains no reports.
scan-build: No bugs found.
The libbladeRF_tests builds without problem, and I'm running them now. Unfortunately I don't have access to Windows, so I can't test with MSVC.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,467,2016-04-20T14:20:36Z,2018-09-05T22:30:07Z,2018-09-05T22:30:07Z,CLOSED,False,98,125,4,https://github.com/jenselofsson,libbladeRF: Move the submit_stream_buffer up one layer to usb.c,1,[],https://github.com/Nuand/bladeRF/pull/467,https://github.com/jynik,4,https://github.com/Nuand/bladeRF/pull/467#issuecomment-224436335,"Removed [lusb|cyapi]_submit_stream_buffer and replaced it with submit_stream_buffer in usb.c, as pointed out in issue #439 . Also added the functions [lusb|cyapi]_get_num_avail and [lusb|cyapi]_get_num_transfers, since usb.c need to know the values of num_avail and num_transfers.","@jenselo No worries. I'll definitely be merging this, but I may wait until after the next release I post.  There's a few CyUSB issues that I want to look at, without introducing any other changes into while debugging.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,467,2016-04-20T14:20:36Z,2018-09-05T22:30:07Z,2018-09-05T22:30:07Z,CLOSED,False,98,125,4,https://github.com/jenselofsson,libbladeRF: Move the submit_stream_buffer up one layer to usb.c,1,[],https://github.com/Nuand/bladeRF/pull/467,https://github.com/rtucker,5,https://github.com/Nuand/bladeRF/pull/467#issuecomment-418902394,"Removed [lusb|cyapi]_submit_stream_buffer and replaced it with submit_stream_buffer in usb.c, as pointed out in issue #439 . Also added the functions [lusb|cyapi]_get_num_avail and [lusb|cyapi]_get_num_transfers, since usb.c need to know the values of num_avail and num_transfers.","G'day,
Sadly this PR fell through the cracks and it will no longer apply cleanly :(
If this is still something you're interested in and are able to rebase it against master, please open a new PR and reference this one and we'll take a look!
Thanks for your patience, and I'm sorry that we dropped the ball on this one.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,469,2016-05-01T14:26:02Z,2016-05-01T18:21:08Z,2016-05-02T03:14:36Z,CLOSED,False,5,5,1,https://github.com/gnieboer,Fix to xb.c specify new consts as floats,1,[],https://github.com/Nuand/bladeRF/pull/469,https://github.com/gnieboer,1,https://github.com/Nuand/bladeRF/pull/469,"constants added in recent commit were not specified as floats, so defaulted to doubles, which caused warning on MSVC and the build is set to fail on all warnings.","constants added in recent commit were not specified as floats, so defaulted to doubles, which caused warning on MSVC and the build is set to fail on all warnings.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,469,2016-05-01T14:26:02Z,2016-05-01T18:21:08Z,2016-05-02T03:14:36Z,CLOSED,False,5,5,1,https://github.com/gnieboer,Fix to xb.c specify new consts as floats,1,[],https://github.com/Nuand/bladeRF/pull/469,https://github.com/jynik,2,https://github.com/Nuand/bladeRF/pull/469#issuecomment-216062090,"constants added in recent commit were not specified as floats, so defaulted to doubles, which caused warning on MSVC and the build is set to fail on all warnings.","Thank you!

Confirmed that this failure does not occur with VS2013.
Successfully reproduced warning and build failure with default /WX usage on VS2012.
Touched up commit message and merged to master as of e4cd61a",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,469,2016-05-01T14:26:02Z,2016-05-01T18:21:08Z,2016-05-02T03:14:36Z,CLOSED,False,5,5,1,https://github.com/gnieboer,Fix to xb.c specify new consts as floats,1,[],https://github.com/Nuand/bladeRF/pull/469,https://github.com/gnieboer,3,https://github.com/Nuand/bladeRF/pull/469#issuecomment-216074867,"constants added in recent commit were not specified as floats, so defaulted to doubles, which caused warning on MSVC and the build is set to fail on all warnings.",No worries.  I was using MSVC 2015 Community to build.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,469,2016-05-01T14:26:02Z,2016-05-01T18:21:08Z,2016-05-02T03:14:36Z,CLOSED,False,5,5,1,https://github.com/gnieboer,Fix to xb.c specify new consts as floats,1,[],https://github.com/Nuand/bladeRF/pull/469,https://github.com/jynik,4,https://github.com/Nuand/bladeRF/pull/469#issuecomment-216097638,"constants added in recent commit were not specified as floats, so defaulted to doubles, which caused warning on MSVC and the build is set to fail on all warnings.","Thank you for confirming and apologies for the trouble.  I have some build
automation set up for Linux and just need to finish up the MSVC side of
things.  I'll be sure to get VS2015 onto that.
On Sun, May 1, 2016 at 5:46 PM, Geof Nieboer notifications@github.com
wrote:

No worries. I was using MSVC 2015 Community to build.
—
You are receiving this because you modified the open/close state.
Reply to this email directly or view it on GitHub
#469 (comment)",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,476,2016-06-27T11:21:02Z,2016-06-27T16:34:02Z,2016-06-27T16:34:02Z,CLOSED,False,1,1,1,https://github.com/dmitriykuptsov,Fixed typo,1,[],https://github.com/Nuand/bladeRF/pull/476,https://github.com/dmitriykuptsov,1,https://github.com/Nuand/bladeRF/pull/476,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,476,2016-06-27T11:21:02Z,2016-06-27T16:34:02Z,2016-06-27T16:34:02Z,CLOSED,False,1,1,1,https://github.com/dmitriykuptsov,Fixed typo,1,[],https://github.com/Nuand/bladeRF/pull/476,https://github.com/jynik,2,https://github.com/Nuand/bladeRF/pull/476#issuecomment-228800213,,"This was already correct as-is. There are two different active-high inputs:
https://github.com/Nuand/bladeRF/blob/master/hdl/fpga/ip/nuand/synthesis/pulse_gen.vhd#L113",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,485,2016-08-15T18:01:13Z,2016-08-22T21:27:08Z,2016-08-22T21:27:09Z,MERGED,True,7737,6,39,https://github.com/ifrasch,bladeRF-fsk: Added bladeRF-fsk utility,1,[],https://github.com/Nuand/bladeRF/pull/485,https://github.com/ifrasch,1,https://github.com/Nuand/bladeRF/pull/485,"This commit introduces a new utility which is a bladeRF-to-bladeRF text/file
transfer program. The program uses a custom FSK software modem (implemented in
host-side C code) to send/receive data. Included is a Matlab/Octave
simulation/implementation of the modem's physical layer. Supports
Windows/Linux/OSX. More info can be found in the README.md.
This utility now builds/installs as part of the bladeRF host side code. Meaning
it is included when building the host software from the source.","This commit introduces a new utility which is a bladeRF-to-bladeRF text/file
transfer program. The program uses a custom FSK software modem (implemented in
host-side C code) to send/receive data. Included is a Matlab/Octave
simulation/implementation of the modem's physical layer. Supports
Windows/Linux/OSX. More info can be found in the README.md.
This utility now builds/installs as part of the bladeRF host side code. Meaning
it is included when building the host software from the source.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,485,2016-08-15T18:01:13Z,2016-08-22T21:27:08Z,2016-08-22T21:27:09Z,MERGED,True,7737,6,39,https://github.com/ifrasch,bladeRF-fsk: Added bladeRF-fsk utility,1,[],https://github.com/Nuand/bladeRF/pull/485,https://github.com/jynik,2,https://github.com/Nuand/bladeRF/pull/485#issuecomment-240265134,"This commit introduces a new utility which is a bladeRF-to-bladeRF text/file
transfer program. The program uses a custom FSK software modem (implemented in
host-side C code) to send/receive data. Included is a Matlab/Octave
simulation/implementation of the modem's physical layer. Supports
Windows/Linux/OSX. More info can be found in the README.md.
This utility now builds/installs as part of the bladeRF host side code. Meaning
it is included when building the host software from the source.","@ifrasch Awesomeness!
I've pulled this into a branch on the main repo for further testing.

I was able to build and test on Linux XUbuntu 16.04 (x64). Worked like a charm!
I committed two changes to the aforementioned branch to address build issues with Clang and in OSX. Worked well for me in OSX as well.
Windows builds and runs fine in VS 2013

The program will crash and run into problems when using the Cypress backend. However, I don't think this is necessarily an issue with your program -- the Cypress backend has become increasingly problematic as of late and we may need to simply drop support for it.


Windows build fails on VS2012

Would you mind taking a look at this? I'd at least like to keep the build from being broken.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,485,2016-08-15T18:01:13Z,2016-08-22T21:27:08Z,2016-08-22T21:27:09Z,MERGED,True,7737,6,39,https://github.com/ifrasch,bladeRF-fsk: Added bladeRF-fsk utility,1,[],https://github.com/Nuand/bladeRF/pull/485,https://github.com/jynik,3,https://github.com/Nuand/bladeRF/pull/485#issuecomment-240265547,"This commit introduces a new utility which is a bladeRF-to-bladeRF text/file
transfer program. The program uses a custom FSK software modem (implemented in
host-side C code) to send/receive data. Included is a Matlab/Octave
simulation/implementation of the modem's physical layer. Supports
Windows/Linux/OSX. More info can be found in the README.md.
This utility now builds/installs as part of the bladeRF host side code. Meaning
it is included when building the host software from the source.","Tracking this in https://github.com/Nuand/bladeRF/tree/ifrasch-bladeRF-fsk
Will apply further patches to that branch.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,485,2016-08-15T18:01:13Z,2016-08-22T21:27:08Z,2016-08-22T21:27:09Z,MERGED,True,7737,6,39,https://github.com/ifrasch,bladeRF-fsk: Added bladeRF-fsk utility,1,[],https://github.com/Nuand/bladeRF/pull/485,https://github.com/ifrasch,4,https://github.com/Nuand/bladeRF/pull/485#issuecomment-240759631,"This commit introduces a new utility which is a bladeRF-to-bladeRF text/file
transfer program. The program uses a custom FSK software modem (implemented in
host-side C code) to send/receive data. Included is a Matlab/Octave
simulation/implementation of the modem's physical layer. Supports
Windows/Linux/OSX. More info can be found in the README.md.
This utility now builds/installs as part of the bladeRF host side code. Meaning
it is included when building the host software from the source.","Fixed the build failing on VS 2012, and then retested VS 2013 and Linux. Tested the bladeRF-fsk output program from those 3 platforms as well. I sent you the patch in an email.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,492,2016-11-05T16:19:04Z,2017-01-28T11:05:33Z,2017-01-28T11:05:33Z,MERGED,True,1,0,1,https://github.com/arkamar,libbladeRF_test: Include time.h for compatibility with musl libc,1,[],https://github.com/Nuand/bladeRF/pull/492,https://github.com/arkamar,1,https://github.com/Nuand/bladeRF/pull/492,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,495,2016-12-09T17:09:50Z,2017-01-28T11:04:31Z,2017-01-28T15:57:14Z,MERGED,True,12,0,2,https://github.com/tee3,Fix build on macOS Sierra.,1,[],https://github.com/Nuand/bladeRF/pull/495,https://github.com/tee3,1,https://github.com/Nuand/bladeRF/pull/495,"The 2016.06 release (and also current master) does not build on macOS Sierra.  I found this when attempting to install on macOS Sierra via Homebrew.
This change properly builds using the simplest CMake build on macOS Sierra but has not been tested on earlier versions of macOS.
$ mkdir build
$ cd build
$ cmake ..
$ make
I ran the most basic test of running the bladerf-cli program, but did not run any tests against a bladeRF device.  Is there a mechanism for doing this and reporting results?","The 2016.06 release (and also current master) does not build on macOS Sierra.  I found this when attempting to install on macOS Sierra via Homebrew.
This change properly builds using the simplest CMake build on macOS Sierra but has not been tested on earlier versions of macOS.
$ mkdir build
$ cd build
$ cmake ..
$ make
I ran the most basic test of running the bladerf-cli program, but did not run any tests against a bladeRF device.  Is there a mechanism for doing this and reporting results?",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,495,2016-12-09T17:09:50Z,2017-01-28T11:04:31Z,2017-01-28T15:57:14Z,MERGED,True,12,0,2,https://github.com/tee3,Fix build on macOS Sierra.,1,[],https://github.com/Nuand/bladeRF/pull/495,https://github.com/robertghilduta,2,https://github.com/Nuand/bladeRF/pull/495#issuecomment-275841880,"The 2016.06 release (and also current master) does not build on macOS Sierra.  I found this when attempting to install on macOS Sierra via Homebrew.
This change properly builds using the simplest CMake build on macOS Sierra but has not been tested on earlier versions of macOS.
$ mkdir build
$ cd build
$ cmake ..
$ make
I ran the most basic test of running the bladerf-cli program, but did not run any tests against a bladeRF device.  Is there a mechanism for doing this and reporting results?",Thanks for writing this!,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,495,2016-12-09T17:09:50Z,2017-01-28T11:04:31Z,2017-01-28T15:57:14Z,MERGED,True,12,0,2,https://github.com/tee3,Fix build on macOS Sierra.,1,[],https://github.com/Nuand/bladeRF/pull/495,https://github.com/tee3,3,https://github.com/Nuand/bladeRF/pull/495#issuecomment-275856051,"The 2016.06 release (and also current master) does not build on macOS Sierra.  I found this when attempting to install on macOS Sierra via Homebrew.
This change properly builds using the simplest CMake build on macOS Sierra but has not been tested on earlier versions of macOS.
$ mkdir build
$ cd build
$ cmake ..
$ make
I ran the most basic test of running the bladerf-cli program, but did not run any tests against a bladeRF device.  Is there a mechanism for doing this and reporting results?",Thanks for merging :),True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,497,2017-02-18T22:32:49Z,2017-02-20T21:42:28Z,2017-02-20T21:42:28Z,MERGED,True,11,2,2,https://github.com/ifrasch,hdl: Fixed simulation files,1,[],https://github.com/Nuand/bladeRF/pull/497,https://github.com/ifrasch,1,https://github.com/Nuand/bladeRF/pull/497,"-Added missing ports to simulation/nios_system.vhd
-Added missing files to nuand.do
-Compile.do will now compile successfully in Modelsim","-Added missing ports to simulation/nios_system.vhd
-Added missing files to nuand.do
-Compile.do will now compile successfully in Modelsim",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,501,2017-04-27T12:27:59Z,2017-04-27T20:41:11Z,2017-04-27T20:41:11Z,MERGED,True,6,2,2,https://github.com/mutability,Don't fail postinst entirely on FPGA download error,2,[],https://github.com/Nuand/bladeRF/pull/501,https://github.com/mutability,1,https://github.com/Nuand/bladeRF/pull/501,Failing the postinst breaks the overall install operation and leaves packages half-configured.,Failing the postinst breaks the overall install operation and leaves packages half-configured.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,501,2017-04-27T12:27:59Z,2017-04-27T20:41:11Z,2017-04-27T20:41:11Z,MERGED,True,6,2,2,https://github.com/mutability,Don't fail postinst entirely on FPGA download error,2,[],https://github.com/Nuand/bladeRF/pull/501,https://github.com/bglod,2,https://github.com/Nuand/bladeRF/pull/501#issuecomment-297734167,Failing the postinst breaks the overall install operation and leaves packages half-configured.,@mutability can you add a one-line comment explaining the return 0 in the code? I just don't want to look at it in the future and not remember why it's an error yet is returning zero. Thanks!,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,503,2017-05-21T17:14:50Z,2017-07-20T18:51:51Z,2017-07-20T18:51:51Z,CLOSED,False,2879,273,54,https://github.com/thasti,Add a 'fabric register' interface to read/write registers in custom FPGA designs.,38,[],https://github.com/Nuand/bladeRF/pull/503,https://github.com/thasti,1,https://github.com/Nuand/bladeRF/pull/503,"This component was designed as a tool to have an easy interface to custom FPGA applications . It can be used to set and read various control and status registers in custom FPGA applications.
Application examples may include (but are not limited to):

set signal flow switches in the FPGA DSP
switch between different modulations in a multi-demodulator-implementation
read RSSI information, frequency offsets or lock detect outputs of receiver components

The main advantage this component offers is that there is not anymore a need to multiplex such information  into the FX3 stream interface, which allows using that one exclusively for receive/transmit data. I thought it would be nice to have it in the public repo to save other people developing for the FPGA the hassle of this task.
The register probe currently exposes eight 32bit registers to the FPGA logic that can be written and read by the NIOS2 processor. The necessary API for libbladeRF and inclusion into bladeRF-cli is included. The minor version numbers of FPGA, libbladeRF and bladeRF-cli were incremented, as this can be considered  new functionality.
An instance variable for the NIOS2 component controls, whether nothing, only inputs, outputs or both are exposed as NIOS-system interfaces. For designs not using it, these are set to ""don't expose anything"" per default, and that can be changed in build_bladerf.sh, where new revisions have to be placed anyways.
libbladeRF and bladeRF-cli compile without additional warnings, the FPGA images build just like before - no changes to bladeRF-hosted - and with working functionality on a design using this component. Resource impact is extremely low (and probably not even there in the bladerf-hosted platform, as all registers are optimized away).
I would be interested in review of the following:

Is a bladeRF-platform example needed to demonstrate other people how to use it? As an alternative, I offer adding a wiki entry (on the 'FPGA development' page) documenting how to use the functionality. I refrained from creating a platform that replicated all functionality from hosted (to avoid code duplication) but also did not want an example that contained only the register probe functionality (as it is basically useless) and probably not very educational.
The number of registers exposed (eight, 32 bits each) was somewhat arbitrary, the following were my considerations: One 32 bit register could be used for a pair of I/Q samples without hassle. One register could of course be shared for multiple status flags or signal switches. Considering typical receiver and transmitter applications, 256 bit might be enough for most monitoring and control applications. I would love a mechanism that allows a variable number of registers, but Qsys can not handle arrays of std_logic_vectors, therefore I considered the two variables for 'input/output expose' and a reasonable number of registers a suitable compromise. Any objections on that part?
I added my IP to hdl/fpga/ip/thasti/ - is that okay for you?

Thanks for reviewing and maybe pulling this. I'll be happy to hear your suggestions.","This component was designed as a tool to have an easy interface to custom FPGA applications . It can be used to set and read various control and status registers in custom FPGA applications.
Application examples may include (but are not limited to):

set signal flow switches in the FPGA DSP
switch between different modulations in a multi-demodulator-implementation
read RSSI information, frequency offsets or lock detect outputs of receiver components

The main advantage this component offers is that there is not anymore a need to multiplex such information  into the FX3 stream interface, which allows using that one exclusively for receive/transmit data. I thought it would be nice to have it in the public repo to save other people developing for the FPGA the hassle of this task.
The register probe currently exposes eight 32bit registers to the FPGA logic that can be written and read by the NIOS2 processor. The necessary API for libbladeRF and inclusion into bladeRF-cli is included. The minor version numbers of FPGA, libbladeRF and bladeRF-cli were incremented, as this can be considered  new functionality.
An instance variable for the NIOS2 component controls, whether nothing, only inputs, outputs or both are exposed as NIOS-system interfaces. For designs not using it, these are set to ""don't expose anything"" per default, and that can be changed in build_bladerf.sh, where new revisions have to be placed anyways.
libbladeRF and bladeRF-cli compile without additional warnings, the FPGA images build just like before - no changes to bladeRF-hosted - and with working functionality on a design using this component. Resource impact is extremely low (and probably not even there in the bladerf-hosted platform, as all registers are optimized away).
I would be interested in review of the following:

Is a bladeRF-platform example needed to demonstrate other people how to use it? As an alternative, I offer adding a wiki entry (on the 'FPGA development' page) documenting how to use the functionality. I refrained from creating a platform that replicated all functionality from hosted (to avoid code duplication) but also did not want an example that contained only the register probe functionality (as it is basically useless) and probably not very educational.
The number of registers exposed (eight, 32 bits each) was somewhat arbitrary, the following were my considerations: One 32 bit register could be used for a pair of I/Q samples without hassle. One register could of course be shared for multiple status flags or signal switches. Considering typical receiver and transmitter applications, 256 bit might be enough for most monitoring and control applications. I would love a mechanism that allows a variable number of registers, but Qsys can not handle arrays of std_logic_vectors, therefore I considered the two variables for 'input/output expose' and a reasonable number of registers a suitable compromise. Any objections on that part?
I added my IP to hdl/fpga/ip/thasti/ - is that okay for you?

Thanks for reviewing and maybe pulling this. I'll be happy to hear your suggestions.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,503,2017-05-21T17:14:50Z,2017-07-20T18:51:51Z,2017-07-20T18:51:51Z,CLOSED,False,2879,273,54,https://github.com/thasti,Add a 'fabric register' interface to read/write registers in custom FPGA designs.,38,[],https://github.com/Nuand/bladeRF/pull/503,https://github.com/thasti,2,https://github.com/Nuand/bladeRF/pull/503#issuecomment-309274173,"This component was designed as a tool to have an easy interface to custom FPGA applications . It can be used to set and read various control and status registers in custom FPGA applications.
Application examples may include (but are not limited to):

set signal flow switches in the FPGA DSP
switch between different modulations in a multi-demodulator-implementation
read RSSI information, frequency offsets or lock detect outputs of receiver components

The main advantage this component offers is that there is not anymore a need to multiplex such information  into the FX3 stream interface, which allows using that one exclusively for receive/transmit data. I thought it would be nice to have it in the public repo to save other people developing for the FPGA the hassle of this task.
The register probe currently exposes eight 32bit registers to the FPGA logic that can be written and read by the NIOS2 processor. The necessary API for libbladeRF and inclusion into bladeRF-cli is included. The minor version numbers of FPGA, libbladeRF and bladeRF-cli were incremented, as this can be considered  new functionality.
An instance variable for the NIOS2 component controls, whether nothing, only inputs, outputs or both are exposed as NIOS-system interfaces. For designs not using it, these are set to ""don't expose anything"" per default, and that can be changed in build_bladerf.sh, where new revisions have to be placed anyways.
libbladeRF and bladeRF-cli compile without additional warnings, the FPGA images build just like before - no changes to bladeRF-hosted - and with working functionality on a design using this component. Resource impact is extremely low (and probably not even there in the bladerf-hosted platform, as all registers are optimized away).
I would be interested in review of the following:

Is a bladeRF-platform example needed to demonstrate other people how to use it? As an alternative, I offer adding a wiki entry (on the 'FPGA development' page) documenting how to use the functionality. I refrained from creating a platform that replicated all functionality from hosted (to avoid code duplication) but also did not want an example that contained only the register probe functionality (as it is basically useless) and probably not very educational.
The number of registers exposed (eight, 32 bits each) was somewhat arbitrary, the following were my considerations: One 32 bit register could be used for a pair of I/Q samples without hassle. One register could of course be shared for multiple status flags or signal switches. Considering typical receiver and transmitter applications, 256 bit might be enough for most monitoring and control applications. I would love a mechanism that allows a variable number of registers, but Qsys can not handle arrays of std_logic_vectors, therefore I considered the two variables for 'input/output expose' and a reasonable number of registers a suitable compromise. Any objections on that part?
I added my IP to hdl/fpga/ip/thasti/ - is that okay for you?

Thanks for reviewing and maybe pulling this. I'll be happy to hear your suggestions.","To be able to merge this into a separate branch (as suggested by mikejones), a developer with push access will have to create one. Alternatively, it would be possible to wait until the internal refactoring is complete and I would create new commits that apply to new master then. How should be proceed?",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,506,2017-07-20T18:51:56Z,2018-09-05T22:32:05Z,2018-09-05T22:32:05Z,CLOSED,False,696,18,22,https://github.com/thasti,Add a 'fabric register' interface to read/write registers in custom FPGA designs.,3,[],https://github.com/Nuand/bladeRF/pull/506,https://github.com/thasti,1,https://github.com/Nuand/bladeRF/pull/506,"This component was designed as a tool to have an easy interface to custom FPGA applications . It can be used to set and read various control and status registers in custom FPGA applications.
Application examples may include (but are not limited to):

set signal flow switches in the FPGA DSP
switch between different modulations in a multi-demodulator-implementation
read RSSI information, frequency offsets or lock detect outputs of receiver components

The main advantage this component offers is that there is not anymore a need to multiplex such information  into the FX3 stream interface, which allows using that one exclusively for receive/transmit data. I thought it would be nice to have it in the public repo to save other people developing for the FPGA the hassle of this task.
The register probe currently exposes eight 32bit registers to the FPGA logic that can be written and read by the NIOS2 processor. The necessary API for libbladeRF and inclusion into bladeRF-cli is included. The minor version numbers of FPGA, libbladeRF and bladeRF-cli were incremented, as this can be considered  new functionality.
An instance variable for the NIOS2 component controls, whether nothing, only inputs, outputs or both are exposed as NIOS-system interfaces. For designs not using it, these are set to ""don't expose anything"" per default, and that can be changed in build_bladerf.sh, where new revisions have to be placed anyways.
libbladeRF and bladeRF-cli compile without additional warnings, the FPGA images build just like before - no changes to bladeRF-hosted - and with working functionality on a design using this component. Resource impact is extremely low (and probably not even there in the bladerf-hosted platform, as all registers are optimized away).
I would be interested in review of the following:

Is a bladeRF-platform example needed to demonstrate other people how to use it? As an alternative, I offer adding a wiki entry (on the 'FPGA development' page) documenting how to use the functionality. I refrained from creating a platform that replicated all functionality from hosted (to avoid code duplication) but also did not want an example that contained only the register probe functionality (as it is basically useless) and probably not very educational.
The number of registers exposed (eight, 32 bits each) was somewhat arbitrary, the following were my considerations: One 32 bit register could be used for a pair of I/Q samples without hassle. One register could of course be shared for multiple status flags or signal switches. Considering typical receiver and transmitter applications, 256 bit might be enough for most monitoring and control applications. I would love a mechanism that allows a variable number of registers, but Qsys can not handle arrays of std_logic_vectors, therefore I considered the two variables for 'input/output expose' and a reasonable number of registers a suitable compromise. Any objections on that part?
I added my IP to hdl/fpga/ip/thasti/ - is that okay for you?

Thanks for reviewing and maybe pulling this. I'll be happy to hear your suggestions.","This component was designed as a tool to have an easy interface to custom FPGA applications . It can be used to set and read various control and status registers in custom FPGA applications.
Application examples may include (but are not limited to):

set signal flow switches in the FPGA DSP
switch between different modulations in a multi-demodulator-implementation
read RSSI information, frequency offsets or lock detect outputs of receiver components

The main advantage this component offers is that there is not anymore a need to multiplex such information  into the FX3 stream interface, which allows using that one exclusively for receive/transmit data. I thought it would be nice to have it in the public repo to save other people developing for the FPGA the hassle of this task.
The register probe currently exposes eight 32bit registers to the FPGA logic that can be written and read by the NIOS2 processor. The necessary API for libbladeRF and inclusion into bladeRF-cli is included. The minor version numbers of FPGA, libbladeRF and bladeRF-cli were incremented, as this can be considered  new functionality.
An instance variable for the NIOS2 component controls, whether nothing, only inputs, outputs or both are exposed as NIOS-system interfaces. For designs not using it, these are set to ""don't expose anything"" per default, and that can be changed in build_bladerf.sh, where new revisions have to be placed anyways.
libbladeRF and bladeRF-cli compile without additional warnings, the FPGA images build just like before - no changes to bladeRF-hosted - and with working functionality on a design using this component. Resource impact is extremely low (and probably not even there in the bladerf-hosted platform, as all registers are optimized away).
I would be interested in review of the following:

Is a bladeRF-platform example needed to demonstrate other people how to use it? As an alternative, I offer adding a wiki entry (on the 'FPGA development' page) documenting how to use the functionality. I refrained from creating a platform that replicated all functionality from hosted (to avoid code duplication) but also did not want an example that contained only the register probe functionality (as it is basically useless) and probably not very educational.
The number of registers exposed (eight, 32 bits each) was somewhat arbitrary, the following were my considerations: One 32 bit register could be used for a pair of I/Q samples without hassle. One register could of course be shared for multiple status flags or signal switches. Considering typical receiver and transmitter applications, 256 bit might be enough for most monitoring and control applications. I would love a mechanism that allows a variable number of registers, but Qsys can not handle arrays of std_logic_vectors, therefore I considered the two variables for 'input/output expose' and a reasonable number of registers a suitable compromise. Any objections on that part?
I added my IP to hdl/fpga/ip/thasti/ - is that okay for you?

Thanks for reviewing and maybe pulling this. I'll be happy to hear your suggestions.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,506,2017-07-20T18:51:56Z,2018-09-05T22:32:05Z,2018-09-05T22:32:05Z,CLOSED,False,696,18,22,https://github.com/thasti,Add a 'fabric register' interface to read/write registers in custom FPGA designs.,3,[],https://github.com/Nuand/bladeRF/pull/506,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/506#issuecomment-418902769,"This component was designed as a tool to have an easy interface to custom FPGA applications . It can be used to set and read various control and status registers in custom FPGA applications.
Application examples may include (but are not limited to):

set signal flow switches in the FPGA DSP
switch between different modulations in a multi-demodulator-implementation
read RSSI information, frequency offsets or lock detect outputs of receiver components

The main advantage this component offers is that there is not anymore a need to multiplex such information  into the FX3 stream interface, which allows using that one exclusively for receive/transmit data. I thought it would be nice to have it in the public repo to save other people developing for the FPGA the hassle of this task.
The register probe currently exposes eight 32bit registers to the FPGA logic that can be written and read by the NIOS2 processor. The necessary API for libbladeRF and inclusion into bladeRF-cli is included. The minor version numbers of FPGA, libbladeRF and bladeRF-cli were incremented, as this can be considered  new functionality.
An instance variable for the NIOS2 component controls, whether nothing, only inputs, outputs or both are exposed as NIOS-system interfaces. For designs not using it, these are set to ""don't expose anything"" per default, and that can be changed in build_bladerf.sh, where new revisions have to be placed anyways.
libbladeRF and bladeRF-cli compile without additional warnings, the FPGA images build just like before - no changes to bladeRF-hosted - and with working functionality on a design using this component. Resource impact is extremely low (and probably not even there in the bladerf-hosted platform, as all registers are optimized away).
I would be interested in review of the following:

Is a bladeRF-platform example needed to demonstrate other people how to use it? As an alternative, I offer adding a wiki entry (on the 'FPGA development' page) documenting how to use the functionality. I refrained from creating a platform that replicated all functionality from hosted (to avoid code duplication) but also did not want an example that contained only the register probe functionality (as it is basically useless) and probably not very educational.
The number of registers exposed (eight, 32 bits each) was somewhat arbitrary, the following were my considerations: One 32 bit register could be used for a pair of I/Q samples without hassle. One register could of course be shared for multiple status flags or signal switches. Considering typical receiver and transmitter applications, 256 bit might be enough for most monitoring and control applications. I would love a mechanism that allows a variable number of registers, but Qsys can not handle arrays of std_logic_vectors, therefore I considered the two variables for 'input/output expose' and a reasonable number of registers a suitable compromise. Any objections on that part?
I added my IP to hdl/fpga/ip/thasti/ - is that okay for you?

Thanks for reviewing and maybe pulling this. I'll be happy to hear your suggestions.","G'day,
Sadly this PR fell through the cracks and it will no longer apply cleanly :(
If this is still something you're interested in and are able to rebase it against master, please open a new PR and reference this one and we'll take a look!
Thanks for your patience, and I'm sorry that we dropped the ball on this one.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,507,2017-07-25T19:58:05Z,2017-08-02T21:52:19Z,2017-08-02T21:52:21Z,MERGED,True,9,0,5,https://github.com/rtucker,Fix permissions on downloaded FPGA/firmware images in debian package,3,[],https://github.com/Nuand/bladeRF/pull/507,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/507,"The change from directly overwriting the files in /usr/share/Nuand/bladeRF to creating an intermediate temp file introduced an issue where the binaries are only readable by the root user, because mktemp creates temp files chmod 0600.
This pull request has two fixes:

Do a chmod 0444 on these files after moving them into place
When file_read_buffer fails, print out a more useful error message to call attention to this issue","The change from directly overwriting the files in /usr/share/Nuand/bladeRF to creating an intermediate temp file introduced an issue where the binaries are only readable by the root user, because mktemp creates temp files chmod 0600.
This pull request has two fixes:

Do a chmod 0444 on these files after moving them into place
When file_read_buffer fails, print out a more useful error message to call attention to this issue",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,510,2017-08-02T20:01:00Z,2017-08-02T20:01:55Z,2017-08-02T22:08:20Z,MERGED,True,1,1,1,https://github.com/rtucker,nios: fix si5338_write typo (#491),1,[],https://github.com/Nuand/bladeRF/pull/510,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/510,Unnecessary bit is being set when writing address.,Unnecessary bit is being set when writing address.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,513,2017-08-04T17:49:55Z,2017-08-04T17:50:31Z,2017-08-04T17:50:35Z,MERGED,True,27,22,5,https://github.com/rtucker,"macOS: detect clock_gettime presence directly, instead of inferring from version (#508)",3,[],https://github.com/Nuand/bladeRF/pull/513,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/513,"AvailabilityMacros.h is part of Xcode and not the underlying OS and is not a reliable indicator of what the underlying OS version is.  So, building with Xcode 8.x (with support for macOS 10.12, with clock_gettime) on macOS 10.11 (which does not have clock_gettime) fails.
Instead, we can use CMake's check_library_exists to directly test for clock_gettime in libc, and then build the shim if required.","AvailabilityMacros.h is part of Xcode and not the underlying OS and is not a reliable indicator of what the underlying OS version is.  So, building with Xcode 8.x (with support for macOS 10.12, with clock_gettime) on macOS 10.11 (which does not have clock_gettime) fails.
Instead, we can use CMake's check_library_exists to directly test for clock_gettime in libc, and then build the shim if required.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,514,2017-08-04T18:09:42Z,2017-08-04T18:10:04Z,2017-08-04T18:10:08Z,MERGED,True,12,1,1,https://github.com/rtucker,host/usb.c: add missing set_agc_dc_correction handler (#512),1,[],https://github.com/Nuand/bladeRF/pull/514,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/514,"backend_fns_usb_legacy was missing a .set_agc_dc_correction member,
which causes issues with some compilers.  Stubbed in
set_agc_dc_correction_unsupported.","backend_fns_usb_legacy was missing a .set_agc_dc_correction member,
which causes issues with some compilers.  Stubbed in
set_agc_dc_correction_unsupported.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,516,2017-08-04T19:26:48Z,2017-08-04T19:26:53Z,2017-08-04T19:26:56Z,MERGED,True,14,2,1,https://github.com/rtucker,host: dc_calibration.c: fix int conversion in rx_cal_dc_off (#515),1,[],https://github.com/Nuand/bladeRF/pull/516,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/516,"MSVC warns of loss of precision on implicit conversion from float to
int16_t.  Instead of relying on truncation, do a proper round with
bounds-checking.","MSVC warns of loss of precision on implicit conversion from float to
int16_t.  Instead of relying on truncation, do a proper round with
bounds-checking.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,518,2017-08-04T20:10:50Z,2017-08-04T20:42:48Z,2017-08-04T20:42:50Z,MERGED,True,20,4,2,https://github.com/rtucker,host/cmake: search for pthreadVC2.dll more vigorously (#517),1,[],https://github.com/Nuand/bladeRF/pull/518,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/518,"With the pre-built binary pack, pthreadVC2.dll lives in a
dll/${ARCHITECTURE}/ directory.  However, when compiling from scratch,
it just lives in the source code's root directory.  Look in both places
and set a LIBPTHREADSWIN32_DLL variable accordingly.","With the pre-built binary pack, pthreadVC2.dll lives in a
dll/${ARCHITECTURE}/ directory.  However, when compiling from scratch,
it just lives in the source code's root directory.  Look in both places
and set a LIBPTHREADSWIN32_DLL variable accordingly.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,519,2017-08-04T22:05:01Z,2017-08-05T00:16:56Z,2017-08-05T00:16:59Z,MERGED,True,63,4,1,https://github.com/rtucker,Enforce exclusive access to bladeRF when using libusb under Windows,3,[],https://github.com/Nuand/bladeRF/pull/519,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/519,Fixes #484,Fixes #484,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,521,2017-08-07T15:37:50Z,2017-08-07T22:16:31Z,2017-08-07T22:16:37Z,MERGED,True,2,0,1,https://github.com/rtucker,host/libbladeRF/cyapi: ReleaseMutex before CloseHandle,1,[],https://github.com/Nuand/bladeRF/pull/521,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/521,"When working on mutexes for the libusb backend, I noticed that I needed
to ReleaseMutex() when closing the device, or else that device would not
be usable again until all of the mutexes were released.
I have not tested this with CyAPI as yet, but I believe the same problem
will occur, and I also believe this may fix it.
Fixes #520","When working on mutexes for the libusb backend, I noticed that I needed
to ReleaseMutex() when closing the device, or else that device would not
be usable again until all of the mutexes were released.
I have not tested this with CyAPI as yet, but I believe the same problem
will occur, and I also believe this may fix it.
Fixes #520",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,521,2017-08-07T15:37:50Z,2017-08-07T22:16:31Z,2017-08-07T22:16:37Z,MERGED,True,2,0,1,https://github.com/rtucker,host/libbladeRF/cyapi: ReleaseMutex before CloseHandle,1,[],https://github.com/Nuand/bladeRF/pull/521,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/521#issuecomment-320699570,"When working on mutexes for the libusb backend, I noticed that I needed
to ReleaseMutex() when closing the device, or else that device would not
be usable again until all of the mutexes were released.
I have not tested this with CyAPI as yet, but I believe the same problem
will occur, and I also believe this may fix it.
Fixes #520","Note: If anyone is using CyAPI and has multiple bladeRFs and can test the following with/without this pull req, it would be great!

Plug in both bladeRFs, open two terminal windows
In terminal window 1, bladeRF-cli -i -v verbose
In terminal window 2, bladeRF-cli -i -v verbose
In terminal window 1, quit bladeRF-cli
In terminal window 1, attempt to reopen the device: bladeRF-cli -i -v verbose
5a) If you can't open it because the device is not available, this is the bug.
In terminal window 2, quit bladeRF-cli
In terminal window 1, open the first available device
In terminal window 2, bladeRF-cli -i -v verbose
8a) Both should be open again.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,522,2017-08-07T22:11:08Z,2017-08-07T22:17:01Z,2017-08-07T22:17:08Z,MERGED,True,24,8,3,https://github.com/rtucker,"CyAPI: Define Windows 10 support, fail gracefully if missing (#475)",2,[],https://github.com/Nuand/bladeRF/pull/522,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/522,"This requires that the user get special additional drivers in addition
to the ones provided by the usual SDK; a URL will point in the right
direction.

Note that this does not remove the requirement for driver signing.  Some
work will be needed to document how to do this.","This requires that the user get special additional drivers in addition
to the ones provided by the usual SDK; a URL will point in the right
direction.

Note that this does not remove the requirement for driver signing.  Some
work will be needed to document how to do this.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,524,2017-08-07T22:15:59Z,2017-08-07T22:17:32Z,2017-08-07T22:17:35Z,MERGED,True,30,5,1,https://github.com/rtucker,host/README.md: add pthreads-win32 build instructions (#447),1,[],https://github.com/Nuand/bladeRF/pull/524,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/524,"On recent versions of Windows / Visual Studio, struct timespec is
already defined, and the definition is subtly different than what
pthreads-win32 is built with.
It may be possible to handle this in a more automatic fashion via CMake,
but this is TBD.","On recent versions of Windows / Visual Studio, struct timespec is
already defined, and the definition is subtly different than what
pthreads-win32 is built with.
It may be possible to handle this in a more automatic fashion via CMake,
but this is TBD.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,525,2017-08-07T22:18:13Z,2017-08-07T22:18:18Z,2017-08-07T22:18:20Z,MERGED,True,13,13,5,https://github.com/rtucker,host/CMakeLists: dequote variables in ifs (CMP0054) #511,1,[],https://github.com/Nuand/bladeRF/pull/525,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/525,"Per CMake Policy CMP0054, the meaning of constructs like
if(""${FOOBAR}"" STREQUAL ""quux"")
is ambigious, and the old meaning is deprecated.
https://cmake.org/cmake/help/git-stage/policy/CMP0054.html","Per CMake Policy CMP0054, the meaning of constructs like
if(""${FOOBAR}"" STREQUAL ""quux"")
is ambigious, and the old meaning is deprecated.
https://cmake.org/cmake/help/git-stage/policy/CMP0054.html",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,531,2017-10-24T20:15:57Z,2017-12-08T16:35:13Z,2017-12-14T22:10:13Z,MERGED,True,2,2,1,https://github.com/rtucker,host/cmake: fix regression from #511,1,[],https://github.com/Nuand/bladeRF/pull/531,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/531,"We explicitly set VERSION_INFO_EXTRA to """" for release builds, which
causes (${VERSION_INFO_EXTRA} STREQUAL """") to evaluate to
( STREQUAL """"), a syntax error.
Quoting ${VERSION_INFO_EXTRA} should not cause the ambigious condition
foretold in CMP0054, so doing that.","We explicitly set VERSION_INFO_EXTRA to """" for release builds, which
causes (${VERSION_INFO_EXTRA} STREQUAL """") to evaluate to
( STREQUAL """"), a syntax error.
Quoting ${VERSION_INFO_EXTRA} should not cause the ambigious condition
foretold in CMP0054, so doing that.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,532,2017-11-06T15:38:53Z,2017-12-13T19:04:16Z,2017-12-14T22:10:00Z,MERGED,True,1,1,1,https://github.com/rtucker,fx3: fix cmake invocation in README.md,1,[],https://github.com/Nuand/bladeRF/pull/532,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/532,"The cmake invocation was incorrect and pointed at a non-existant
filename.
Initial report: https://nuand.com/forums/viewtopic.php?f=4&t=3977","The cmake invocation was incorrect and pointed at a non-existant
filename.
Initial report: https://nuand.com/forums/viewtopic.php?f=4&t=3977",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,535,2017-12-08T04:49:00Z,2017-12-08T04:49:35Z,2017-12-08T04:49:35Z,MERGED,True,1015,774,20,https://github.com/robertghilduta,Patches for 2017.12 release,11,[],https://github.com/Nuand/bladeRF/pull/535,https://github.com/robertghilduta,1,https://github.com/Nuand/bladeRF/pull/535,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,536,2017-12-08T05:14:33Z,2017-12-08T05:14:49Z,2017-12-08T05:14:49Z,MERGED,True,15,3,6,https://github.com/robertghilduta,2017.12 version tags,3,[],https://github.com/Nuand/bladeRF/pull/536,https://github.com/robertghilduta,1,https://github.com/Nuand/bladeRF/pull/536,This should be considered 2017.21-rc1,This should be considered 2017.21-rc1,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,537,2017-12-08T18:49:20Z,2017-12-13T19:04:32Z,2018-02-08T20:40:09Z,MERGED,True,16,16,3,https://github.com/rtucker,Update Debian and Arch configurations for FPGA v0.7.1,3,[],https://github.com/Nuand/bladeRF/pull/537,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/537,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,538,2017-12-11T23:04:18Z,2017-12-13T19:05:13Z,2018-02-08T20:40:08Z,MERGED,True,10,2,1,https://github.com/rtucker,host: improved dependency checking for doxygen rebuild,1,[],https://github.com/Nuand/bladeRF/pull/538,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/538,"Previously, cmake would only rebuild the doxygen output if libbladeRF.h
or the Doxyfile itself changed. Now, it will be rebuilt if any of the
examples, long-form documentations, or images change as well.","Previously, cmake would only rebuild the doxygen output if libbladeRF.h
or the Doxyfile itself changed. Now, it will be rebuilt if any of the
examples, long-form documentations, or images change as well.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,539,2017-12-12T21:15:46Z,2018-02-01T20:04:53Z,2018-02-01T20:05:03Z,MERGED,True,654,2,7,https://github.com/rtucker,host: libbladeRF: Add documentation and test program for config file handling,4,[],https://github.com/Nuand/bladeRF/pull/539,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/539,"This updates PR #535 to include documentation (configfile.dox) and a test case (libbladeRF_test_config_file).
Additionally, two typos are fixed, one involving the ""bandwidth"" key in the config file parsing.","This updates PR #535 to include documentation (configfile.dox) and a test case (libbladeRF_test_config_file).
Additionally, two typos are fixed, one involving the ""bandwidth"" key in the config file parsing.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,540,2017-12-14T19:22:46Z,2017-12-14T19:25:54Z,2017-12-14T19:34:55Z,CLOSED,False,46,2,6,https://github.com/rtucker,.,4,[],https://github.com/Nuand/bladeRF/pull/540,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/540,.,.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,541,2017-12-30T01:13:17Z,2018-02-06T19:35:52Z,2018-02-06T19:35:52Z,MERGED,True,3,3,1,https://github.com/chris-pcguy,Fix wrong usage of str2bool,1,"['Issue: Bug', 'Component: Host']",https://github.com/Nuand/bladeRF/pull/541,https://github.com/chris-pcguy,1,https://github.com/Nuand/bladeRF/pull/541,"This leads to AGC being disabled on every call of bladeRF-cli.
Please see https://github.com/Nuand/bladeRF/blob/master/host/utilities/bladeRF-cli/src/cmd/xb300.c#L117 for the proper usage.
I'm not sure if only checking LSB is the proper way to do it, as val (uint32_t) is uninitialized and str2bool sees it as bool (on my machine ""off"" is 2048 and ""on"" is 2049), but it would even work if those ""else if's"" are being
reordered, thus initialized by something else to a non-zero value, or you could zero it right before the str2bool call.
The printf call might not be needed anymore.
Notes:
With the latest changes in kalibrate-bladeRF (add win32 support), changing the buffer sizes of m_x_cb, m_y_cb, m_e_cb, the results of the program look even more odd. Were those changes intended? Either the outputs are correct
before and after the patch, or one BTS has the worst clock in history. I think it's the second one.
With the latest FPGA change (0.7.0 -> 0.7.1, using edge_detector instead of pulse_gen), even setting the sample rate can sometimes lead to a failure. (At least on my board, only shortly after power-on)
Have a nice weekend!
Signed-off-by: Christian Inci chris.gh@broke-the-inter.net","This leads to AGC being disabled on every call of bladeRF-cli.
Please see https://github.com/Nuand/bladeRF/blob/master/host/utilities/bladeRF-cli/src/cmd/xb300.c#L117 for the proper usage.
I'm not sure if only checking LSB is the proper way to do it, as val (uint32_t) is uninitialized and str2bool sees it as bool (on my machine ""off"" is 2048 and ""on"" is 2049), but it would even work if those ""else if's"" are being
reordered, thus initialized by something else to a non-zero value, or you could zero it right before the str2bool call.
The printf call might not be needed anymore.
Notes:
With the latest changes in kalibrate-bladeRF (add win32 support), changing the buffer sizes of m_x_cb, m_y_cb, m_e_cb, the results of the program look even more odd. Were those changes intended? Either the outputs are correct
before and after the patch, or one BTS has the worst clock in history. I think it's the second one.
With the latest FPGA change (0.7.0 -> 0.7.1, using edge_detector instead of pulse_gen), even setting the sample rate can sometimes lead to a failure. (At least on my board, only shortly after power-on)
Have a nice weekend!
Signed-off-by: Christian Inci chris.gh@broke-the-inter.net",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,545,2018-02-07T16:10:22Z,2018-02-07T23:04:08Z,2018-02-07T23:04:13Z,MERGED,True,6,3,1,https://github.com/rtucker,host: libbladeRF/config.c: fix type error (#544),1,[],https://github.com/Nuand/bladeRF/pull/545,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/545,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,545,2018-02-07T16:10:22Z,2018-02-07T23:04:08Z,2018-02-07T23:04:13Z,MERGED,True,6,3,1,https://github.com/rtucker,host: libbladeRF/config.c: fix type error (#544),1,[],https://github.com/Nuand/bladeRF/pull/545,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/545#issuecomment-363833144,,"branch builds ok on Linux (gcc 7.2.0-8ubuntu3, clang 4.0.1-6), macOS (clang-900.0.39.2), Windows (Visual Studio 2017) with caveats (unrelated stuff is broken)",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,545,2018-02-07T16:10:22Z,2018-02-07T23:04:08Z,2018-02-07T23:04:13Z,MERGED,True,6,3,1,https://github.com/rtucker,host: libbladeRF/config.c: fix type error (#544),1,[],https://github.com/Nuand/bladeRF/pull/545,https://github.com/bglod,3,https://github.com/Nuand/bladeRF/pull/545#issuecomment-363839981,,Also builds on Linux with gcc v7.3.0 👍,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,546,2018-02-07T23:31:44Z,2018-02-07T23:33:47Z,2018-02-07T23:34:19Z,MERGED,True,393,16,5,https://github.com/rtucker,host: libbladeRF_test: win32 fixes for test_config_file,3,[],https://github.com/Nuand/bladeRF/pull/546,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/546,This fixes the libbladeRF_test_config_file unit test build under Win32.,This fixes the libbladeRF_test_config_file unit test build under Win32.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,547,2018-02-08T20:33:38Z,2018-03-27T22:23:12Z,2018-03-27T22:23:19Z,MERGED,True,318,191,1,https://github.com/rtucker,host: libbladeRF_bindings: matlab: update libbladeRF_proto.m,5,"['Component: Host', 'Component: MATLAB bindings']",https://github.com/Nuand/bladeRF/pull/547,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/547,"Updates the libbladeRF_proto.m file to have library calls added since it was first generated, and rearranges the order to make future edits easier.
Fixes #543","Updates the libbladeRF_proto.m file to have library calls added since it was first generated, and rearranges the order to make future edits easier.
Fixes #543",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,550,2018-03-27T01:45:43Z,2018-03-27T22:22:14Z,2018-03-27T22:22:14Z,MERGED,True,3,0,1,https://github.com/jmichelp,Fix mutex handling for Windows in libusb backend.,1,"['Issue: Bug', 'Component: Host', 'Platform: Windows']",https://github.com/Nuand/bladeRF/pull/550,https://github.com/jmichelp,1,https://github.com/Nuand/bladeRF/pull/550,"Calling ReleaseMutex without CloseHandle will let the mutex still exist until the process exists.
In such scenario, further calls to CreateMutex will succeed but GetLastError will return 183 (ERROR_ALREADY_EXISTS) causing libbladerf to fail opening the device. This can be assessed by running libbladeRF_test_open.exe -c 2 -v debug.
Cypress backend is not affected as it systematically closes the handle after releasing the mutex.","Calling ReleaseMutex without CloseHandle will let the mutex still exist until the process exists.
In such scenario, further calls to CreateMutex will succeed but GetLastError will return 183 (ERROR_ALREADY_EXISTS) causing libbladerf to fail opening the device. This can be assessed by running libbladeRF_test_open.exe -c 2 -v debug.
Cypress backend is not affected as it systematically closes the handle after releasing the mutex.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,550,2018-03-27T01:45:43Z,2018-03-27T22:22:14Z,2018-03-27T22:22:14Z,MERGED,True,3,0,1,https://github.com/jmichelp,Fix mutex handling for Windows in libusb backend.,1,"['Issue: Bug', 'Component: Host', 'Platform: Windows']",https://github.com/Nuand/bladeRF/pull/550,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/550#issuecomment-376695157,"Calling ReleaseMutex without CloseHandle will let the mutex still exist until the process exists.
In such scenario, further calls to CreateMutex will succeed but GetLastError will return 183 (ERROR_ALREADY_EXISTS) causing libbladerf to fail opening the device. This can be assessed by running libbladeRF_test_open.exe -c 2 -v debug.
Cypress backend is not affected as it systematically closes the handle after releasing the mutex.","I was able to reproduce the libbladeRF_test_open failure, and verify that it is fixed in Windows.
I have the feeling this may also fix #553...",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,551,2018-03-27T21:17:40Z,2018-03-27T22:23:34Z,2018-03-27T22:23:38Z,MERGED,True,12,5,1,https://github.com/rtucker,host: test: fix compile errors on test_config_file,1,"['Issue: Bug', 'Component: Host']",https://github.com/Nuand/bladeRF/pull/551,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/551,"On older compilers, 'for' loop initial declarations are not allowed by
default. So, use the old style for maximum compatibility.
h/t Christophe Devine","On older compilers, 'for' loop initial declarations are not allowed by
default. So, use the old style for maximum compatibility.
h/t Christophe Devine",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,552,2018-03-27T21:19:22Z,2018-03-27T22:24:02Z,2018-08-29T21:25:52Z,MERGED,True,655,0,11,https://github.com/rtucker, host: misc: add Dockerfiles for multi-distro test builds,2,"['Issue: Enhancement', 'Component: Host']",https://github.com/Nuand/bladeRF/pull/552,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/552,"It is now possible to perform test builds automatically across various
releases of Arch, CentOS, Debian, Fedora, and Ubuntu with:
bash host/mis/docker/build.bash
This will hopefully improve the chances of catching build-breaking bugs, such as #551.","It is now possible to perform test builds automatically across various
releases of Arch, CentOS, Debian, Fedora, and Ubuntu with:
bash host/mis/docker/build.bash
This will hopefully improve the chances of catching build-breaking bugs, such as #551.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,556,2018-06-06T17:28:20Z,2018-06-06T17:28:49Z,2018-06-06T17:28:53Z,MERGED,True,2,2,1,https://github.com/rtucker,host: libbladeRF: fix handle_serial strncpy warnings (#555),1,[],https://github.com/Nuand/bladeRF/pull/556,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/556,"Instead of using the length of the source string, use
sizeof(d->serial) to limit strncpy to the length of the destination
string.
Fixes #555","Instead of using the length of the source string, use
sizeof(d->serial) to limit strncpy to the length of the destination
string.
Fixes #555",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,560,2018-07-22T11:21:27Z,2018-08-16T23:03:58Z,2018-08-16T23:03:58Z,CLOSED,False,2024,199,25,https://github.com/alexf91,Remove inferred latches in fx3_gpif,12,[],https://github.com/Nuand/bladeRF/pull/560,https://github.com/alexf91,1,https://github.com/Nuand/bladeRF/pull/560,Fixes #548 by setting a default value for tx_meta_fifo_data in fx3_gpif.vhd.,Fixes #548 by setting a default value for tx_meta_fifo_data in fx3_gpif.vhd.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,560,2018-07-22T11:21:27Z,2018-08-16T23:03:58Z,2018-08-16T23:03:58Z,CLOSED,False,2024,199,25,https://github.com/alexf91,Remove inferred latches in fx3_gpif,12,[],https://github.com/Nuand/bladeRF/pull/560,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/560#issuecomment-413710042,Fixes #548 by setting a default value for tx_meta_fifo_data in fx3_gpif.vhd.,"Thanks for your PR!  Very good catch.
Alas, fx3_gpif.vhd got a rewrite as part of bladeRF2 development, and this bug should no longer exist, so I'm going to close this PR.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,561,2018-08-10T21:57:24Z,2018-08-16T22:56:33Z,2018-08-21T17:34:12Z,MERGED,True,7,0,2,https://github.com/darkfiberiru,Fixes so we can build on freebsd again ,1,[],https://github.com/Nuand/bladeRF/pull/561,https://github.com/darkfiberiru,1,https://github.com/Nuand/bladeRF/pull/561,Tested on FreeBSD only but very low risk across the board,Tested on FreeBSD only but very low risk across the board,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,561,2018-08-10T21:57:24Z,2018-08-16T22:56:33Z,2018-08-21T17:34:12Z,MERGED,True,7,0,2,https://github.com/darkfiberiru,Fixes so we can build on freebsd again ,1,[],https://github.com/Nuand/bladeRF/pull/561,https://github.com/darkfiberiru,2,https://github.com/Nuand/bladeRF/pull/561#issuecomment-412217407,Tested on FreeBSD only but very low risk across the board,Also my CLA should already be on file,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,561,2018-08-10T21:57:24Z,2018-08-16T22:56:33Z,2018-08-21T17:34:12Z,MERGED,True,7,0,2,https://github.com/darkfiberiru,Fixes so we can build on freebsd again ,1,[],https://github.com/Nuand/bladeRF/pull/561,https://github.com/rtucker,3,https://github.com/Nuand/bladeRF/pull/561#issuecomment-413708692,Tested on FreeBSD only but very low risk across the board,thanks!,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,566,2018-08-14T03:34:35Z,2018-08-21T19:36:34Z,2018-08-21T19:39:19Z,MERGED,True,22,15,1,https://github.com/sparklespdx,"""set loopback"" help dialog aware of board type",2,[],https://github.com/Nuand/bladeRF/pull/566,https://github.com/sparklespdx,1,https://github.com/Nuand/bladeRF/pull/566,"I was getting familiar with bladeRF-cli and testing my bladeRF2 and was getting errors when trying to set loopback modes:
radiodev@f838f94589fe:~$ bladeRF-cli -i
bladeRF> info

  Board:                    bladerf2
  Serial #:                 8a952f477f514a11a049743f0c98a38b
  VCTCXO DAC calibration:   0x1f6b
  FPGA size:                49 KLE
  FPGA loaded:              yes
  USB bus:                  2
  USB address:              6
  USB speed:                SuperSpeed
  Backend:                  libusb
  Instance:                 0

bladeRF> print loopback

  Loopback mode: none

bladeRF> set loopback

Usage: set loopback <mode>, where <mode> is one of the following:

  bb_txlpf_rxvga2   Baseband loopback: TXLPF output --> RXVGA2 input

  bb_txlpf_rxlpf    Baseband loopback: TXLPF output --> RXLPF input

  bb_txvga1_rxvga2  Baseband loopback: TXVGA1 output --> RXVGA2 input

  bb_txvga1_rxlpf   Baseband loopback: TXVGA1 output --> RXLPF input

  rf_lna1           RF loopback: TXMIX --> RXMIX via LNA1 path

  rf_lna2           RF loopback: TXMIX --> RXMIX via LNA2 path

  rf_lna3           RF loopback: TXMIX --> RXMIX via LNA3 path

  firmware          Firmware-based sample loopback

  rfic_bist         RFIC BIST loopback

  none              Loopback disabled - Normal operation


bladeRF> set loopback rf_lna1

[ERROR @ host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c:3858] bladerf2_set_loopback: unknown loopback mode (6)


  Error: An unexpected error occurred

bladeRF> set loopback bb_txlpf_rxvga2

[ERROR @ host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c:3858] bladerf2_set_loopback: unknown loopback mode (2)


  Error: An unexpected error occurred

bladeRF> set loopback rfic_bist

  Loopback mode: rfic_bist

bladeRF> print loopback

  Loopback mode: rfic_bist

I took a look in the library code and it seems that the only valid loopback modes are ""none"", ""rfic_bist"" and ""firmware"" for the bladeRF2:
https://github.com/Nuand/bladeRF/blob/master/host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c#L3848-L3860
This is a quick fix that checks the board type before it displays the modes.
radiodev@9c3ca64e2af5:~$ bladeRF-cli -i
bladeRF> info

  Board:                    bladerf2
  Serial #:                 8a952f477f514a11a049743f0c98a38b
  VCTCXO DAC calibration:   0x1f6b
  FPGA size:                49 KLE
  FPGA loaded:              yes
  USB bus:                  2
  USB address:              6
  USB speed:                SuperSpeed
  Backend:                  libusb
  Instance:                 0

bladeRF> set loopback

Usage: set loopback <mode>, where <mode> is one of the following:

  firmware          Firmware-based sample loopback

  rfic_bist         RFIC BIST loopback

  none              Loopback disabled - Normal operation


bladeRF>

I don't have a bladeRF1 board to test with, would appreciate some help with testing.","I was getting familiar with bladeRF-cli and testing my bladeRF2 and was getting errors when trying to set loopback modes:
radiodev@f838f94589fe:~$ bladeRF-cli -i
bladeRF> info

  Board:                    bladerf2
  Serial #:                 8a952f477f514a11a049743f0c98a38b
  VCTCXO DAC calibration:   0x1f6b
  FPGA size:                49 KLE
  FPGA loaded:              yes
  USB bus:                  2
  USB address:              6
  USB speed:                SuperSpeed
  Backend:                  libusb
  Instance:                 0

bladeRF> print loopback

  Loopback mode: none

bladeRF> set loopback

Usage: set loopback <mode>, where <mode> is one of the following:

  bb_txlpf_rxvga2   Baseband loopback: TXLPF output --> RXVGA2 input

  bb_txlpf_rxlpf    Baseband loopback: TXLPF output --> RXLPF input

  bb_txvga1_rxvga2  Baseband loopback: TXVGA1 output --> RXVGA2 input

  bb_txvga1_rxlpf   Baseband loopback: TXVGA1 output --> RXLPF input

  rf_lna1           RF loopback: TXMIX --> RXMIX via LNA1 path

  rf_lna2           RF loopback: TXMIX --> RXMIX via LNA2 path

  rf_lna3           RF loopback: TXMIX --> RXMIX via LNA3 path

  firmware          Firmware-based sample loopback

  rfic_bist         RFIC BIST loopback

  none              Loopback disabled - Normal operation


bladeRF> set loopback rf_lna1

[ERROR @ host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c:3858] bladerf2_set_loopback: unknown loopback mode (6)


  Error: An unexpected error occurred

bladeRF> set loopback bb_txlpf_rxvga2

[ERROR @ host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c:3858] bladerf2_set_loopback: unknown loopback mode (2)


  Error: An unexpected error occurred

bladeRF> set loopback rfic_bist

  Loopback mode: rfic_bist

bladeRF> print loopback

  Loopback mode: rfic_bist

I took a look in the library code and it seems that the only valid loopback modes are ""none"", ""rfic_bist"" and ""firmware"" for the bladeRF2:
https://github.com/Nuand/bladeRF/blob/master/host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c#L3848-L3860
This is a quick fix that checks the board type before it displays the modes.
radiodev@9c3ca64e2af5:~$ bladeRF-cli -i
bladeRF> info

  Board:                    bladerf2
  Serial #:                 8a952f477f514a11a049743f0c98a38b
  VCTCXO DAC calibration:   0x1f6b
  FPGA size:                49 KLE
  FPGA loaded:              yes
  USB bus:                  2
  USB address:              6
  USB speed:                SuperSpeed
  Backend:                  libusb
  Instance:                 0

bladeRF> set loopback

Usage: set loopback <mode>, where <mode> is one of the following:

  firmware          Firmware-based sample loopback

  rfic_bist         RFIC BIST loopback

  none              Loopback disabled - Normal operation


bladeRF>

I don't have a bladeRF1 board to test with, would appreciate some help with testing.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,566,2018-08-14T03:34:35Z,2018-08-21T19:36:34Z,2018-08-21T19:39:19Z,MERGED,True,22,15,1,https://github.com/sparklespdx,"""set loopback"" help dialog aware of board type",2,[],https://github.com/Nuand/bladeRF/pull/566,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/566#issuecomment-413709412,"I was getting familiar with bladeRF-cli and testing my bladeRF2 and was getting errors when trying to set loopback modes:
radiodev@f838f94589fe:~$ bladeRF-cli -i
bladeRF> info

  Board:                    bladerf2
  Serial #:                 8a952f477f514a11a049743f0c98a38b
  VCTCXO DAC calibration:   0x1f6b
  FPGA size:                49 KLE
  FPGA loaded:              yes
  USB bus:                  2
  USB address:              6
  USB speed:                SuperSpeed
  Backend:                  libusb
  Instance:                 0

bladeRF> print loopback

  Loopback mode: none

bladeRF> set loopback

Usage: set loopback <mode>, where <mode> is one of the following:

  bb_txlpf_rxvga2   Baseband loopback: TXLPF output --> RXVGA2 input

  bb_txlpf_rxlpf    Baseband loopback: TXLPF output --> RXLPF input

  bb_txvga1_rxvga2  Baseband loopback: TXVGA1 output --> RXVGA2 input

  bb_txvga1_rxlpf   Baseband loopback: TXVGA1 output --> RXLPF input

  rf_lna1           RF loopback: TXMIX --> RXMIX via LNA1 path

  rf_lna2           RF loopback: TXMIX --> RXMIX via LNA2 path

  rf_lna3           RF loopback: TXMIX --> RXMIX via LNA3 path

  firmware          Firmware-based sample loopback

  rfic_bist         RFIC BIST loopback

  none              Loopback disabled - Normal operation


bladeRF> set loopback rf_lna1

[ERROR @ host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c:3858] bladerf2_set_loopback: unknown loopback mode (6)


  Error: An unexpected error occurred

bladeRF> set loopback bb_txlpf_rxvga2

[ERROR @ host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c:3858] bladerf2_set_loopback: unknown loopback mode (2)


  Error: An unexpected error occurred

bladeRF> set loopback rfic_bist

  Loopback mode: rfic_bist

bladeRF> print loopback

  Loopback mode: rfic_bist

I took a look in the library code and it seems that the only valid loopback modes are ""none"", ""rfic_bist"" and ""firmware"" for the bladeRF2:
https://github.com/Nuand/bladeRF/blob/master/host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c#L3848-L3860
This is a quick fix that checks the board type before it displays the modes.
radiodev@9c3ca64e2af5:~$ bladeRF-cli -i
bladeRF> info

  Board:                    bladerf2
  Serial #:                 8a952f477f514a11a049743f0c98a38b
  VCTCXO DAC calibration:   0x1f6b
  FPGA size:                49 KLE
  FPGA loaded:              yes
  USB bus:                  2
  USB address:              6
  USB speed:                SuperSpeed
  Backend:                  libusb
  Instance:                 0

bladeRF> set loopback

Usage: set loopback <mode>, where <mode> is one of the following:

  firmware          Firmware-based sample loopback

  rfic_bist         RFIC BIST loopback

  none              Loopback disabled - Normal operation


bladeRF>

I don't have a bladeRF1 board to test with, would appreciate some help with testing.","good catch, whoops...!
PR looks good to me overall... the rfic_bist setting is only for bladeRF 2, so it may be worthwhile to wrap that in a check as well.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,566,2018-08-14T03:34:35Z,2018-08-21T19:36:34Z,2018-08-21T19:39:19Z,MERGED,True,22,15,1,https://github.com/sparklespdx,"""set loopback"" help dialog aware of board type",2,[],https://github.com/Nuand/bladeRF/pull/566,https://github.com/sparklespdx,3,https://github.com/Nuand/bladeRF/pull/566#issuecomment-413747899,"I was getting familiar with bladeRF-cli and testing my bladeRF2 and was getting errors when trying to set loopback modes:
radiodev@f838f94589fe:~$ bladeRF-cli -i
bladeRF> info

  Board:                    bladerf2
  Serial #:                 8a952f477f514a11a049743f0c98a38b
  VCTCXO DAC calibration:   0x1f6b
  FPGA size:                49 KLE
  FPGA loaded:              yes
  USB bus:                  2
  USB address:              6
  USB speed:                SuperSpeed
  Backend:                  libusb
  Instance:                 0

bladeRF> print loopback

  Loopback mode: none

bladeRF> set loopback

Usage: set loopback <mode>, where <mode> is one of the following:

  bb_txlpf_rxvga2   Baseband loopback: TXLPF output --> RXVGA2 input

  bb_txlpf_rxlpf    Baseband loopback: TXLPF output --> RXLPF input

  bb_txvga1_rxvga2  Baseband loopback: TXVGA1 output --> RXVGA2 input

  bb_txvga1_rxlpf   Baseband loopback: TXVGA1 output --> RXLPF input

  rf_lna1           RF loopback: TXMIX --> RXMIX via LNA1 path

  rf_lna2           RF loopback: TXMIX --> RXMIX via LNA2 path

  rf_lna3           RF loopback: TXMIX --> RXMIX via LNA3 path

  firmware          Firmware-based sample loopback

  rfic_bist         RFIC BIST loopback

  none              Loopback disabled - Normal operation


bladeRF> set loopback rf_lna1

[ERROR @ host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c:3858] bladerf2_set_loopback: unknown loopback mode (6)


  Error: An unexpected error occurred

bladeRF> set loopback bb_txlpf_rxvga2

[ERROR @ host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c:3858] bladerf2_set_loopback: unknown loopback mode (2)


  Error: An unexpected error occurred

bladeRF> set loopback rfic_bist

  Loopback mode: rfic_bist

bladeRF> print loopback

  Loopback mode: rfic_bist

I took a look in the library code and it seems that the only valid loopback modes are ""none"", ""rfic_bist"" and ""firmware"" for the bladeRF2:
https://github.com/Nuand/bladeRF/blob/master/host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c#L3848-L3860
This is a quick fix that checks the board type before it displays the modes.
radiodev@9c3ca64e2af5:~$ bladeRF-cli -i
bladeRF> info

  Board:                    bladerf2
  Serial #:                 8a952f477f514a11a049743f0c98a38b
  VCTCXO DAC calibration:   0x1f6b
  FPGA size:                49 KLE
  FPGA loaded:              yes
  USB bus:                  2
  USB address:              6
  USB speed:                SuperSpeed
  Backend:                  libusb
  Instance:                 0

bladeRF> set loopback

Usage: set loopback <mode>, where <mode> is one of the following:

  firmware          Firmware-based sample loopback

  rfic_bist         RFIC BIST loopback

  none              Loopback disabled - Normal operation


bladeRF>

I don't have a bladeRF1 board to test with, would appreciate some help with testing.","thanks! and thank you for the code review!
I noticed there's an individual contributor agreement, I will fill it out and email it to y'all.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,566,2018-08-14T03:34:35Z,2018-08-21T19:36:34Z,2018-08-21T19:39:19Z,MERGED,True,22,15,1,https://github.com/sparklespdx,"""set loopback"" help dialog aware of board type",2,[],https://github.com/Nuand/bladeRF/pull/566,https://github.com/rtucker,4,https://github.com/Nuand/bladeRF/pull/566#issuecomment-414796476,"I was getting familiar with bladeRF-cli and testing my bladeRF2 and was getting errors when trying to set loopback modes:
radiodev@f838f94589fe:~$ bladeRF-cli -i
bladeRF> info

  Board:                    bladerf2
  Serial #:                 8a952f477f514a11a049743f0c98a38b
  VCTCXO DAC calibration:   0x1f6b
  FPGA size:                49 KLE
  FPGA loaded:              yes
  USB bus:                  2
  USB address:              6
  USB speed:                SuperSpeed
  Backend:                  libusb
  Instance:                 0

bladeRF> print loopback

  Loopback mode: none

bladeRF> set loopback

Usage: set loopback <mode>, where <mode> is one of the following:

  bb_txlpf_rxvga2   Baseband loopback: TXLPF output --> RXVGA2 input

  bb_txlpf_rxlpf    Baseband loopback: TXLPF output --> RXLPF input

  bb_txvga1_rxvga2  Baseband loopback: TXVGA1 output --> RXVGA2 input

  bb_txvga1_rxlpf   Baseband loopback: TXVGA1 output --> RXLPF input

  rf_lna1           RF loopback: TXMIX --> RXMIX via LNA1 path

  rf_lna2           RF loopback: TXMIX --> RXMIX via LNA2 path

  rf_lna3           RF loopback: TXMIX --> RXMIX via LNA3 path

  firmware          Firmware-based sample loopback

  rfic_bist         RFIC BIST loopback

  none              Loopback disabled - Normal operation


bladeRF> set loopback rf_lna1

[ERROR @ host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c:3858] bladerf2_set_loopback: unknown loopback mode (6)


  Error: An unexpected error occurred

bladeRF> set loopback bb_txlpf_rxvga2

[ERROR @ host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c:3858] bladerf2_set_loopback: unknown loopback mode (2)


  Error: An unexpected error occurred

bladeRF> set loopback rfic_bist

  Loopback mode: rfic_bist

bladeRF> print loopback

  Loopback mode: rfic_bist

I took a look in the library code and it seems that the only valid loopback modes are ""none"", ""rfic_bist"" and ""firmware"" for the bladeRF2:
https://github.com/Nuand/bladeRF/blob/master/host/libraries/libbladeRF/src/board/bladerf2/bladerf2.c#L3848-L3860
This is a quick fix that checks the board type before it displays the modes.
radiodev@9c3ca64e2af5:~$ bladeRF-cli -i
bladeRF> info

  Board:                    bladerf2
  Serial #:                 8a952f477f514a11a049743f0c98a38b
  VCTCXO DAC calibration:   0x1f6b
  FPGA size:                49 KLE
  FPGA loaded:              yes
  USB bus:                  2
  USB address:              6
  USB speed:                SuperSpeed
  Backend:                  libusb
  Instance:                 0

bladeRF> set loopback

Usage: set loopback <mode>, where <mode> is one of the following:

  firmware          Firmware-based sample loopback

  rfic_bist         RFIC BIST loopback

  none              Loopback disabled - Normal operation


bladeRF>

I don't have a bladeRF1 board to test with, would appreciate some help with testing.","ICAA received, tested w/ bladeRF1 and bladeRF2, looks good!  merges",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,573,2018-08-16T22:35:33Z,2018-08-16T22:57:53Z,2018-08-21T17:34:12Z,MERGED,True,24,106,5,https://github.com/rtucker,host: fix builds on 32-bit platforms,5,[],https://github.com/Nuand/bladeRF/pull/573,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/573,"Builds were failing in various ways on 32-bit platforms, due to various assumptions (and the fact that pretty much everything is 64-bit nowadays).  This PR should fix all of them so that it builds clean.","Builds were failing in various ways on 32-bit platforms, due to various assumptions (and the fact that pretty much everything is 64-bit nowadays).  This PR should fix all of them so that it builds clean.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,574,2018-08-16T22:36:29Z,2018-08-16T22:49:33Z,2018-08-21T17:34:12Z,MERGED,True,10,1,1,https://github.com/rtucker,host: docker: fixes for non-linux systems (e.g. MacOS),1,[],https://github.com/Nuand/bladeRF/pull/574,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/574,Gracefully handle situations where there's no nproc command or /proc/loadavg file when doing parallel builds.,Gracefully handle situations where there's no nproc command or /proc/loadavg file when doing parallel builds.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,578,2018-08-21T17:25:33Z,2018-08-21T19:40:03Z,2018-08-29T21:21:54Z,MERGED,True,56,26,1,https://github.com/rtucker,host: libbladeRF: detect possible bladeRF2 during bladeRF1 init (#572),1,[],https://github.com/Nuand/bladeRF/pull/578,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/578,"If a pre-2.2.0 firmware is flashed to a bladeRF2 device, there is no way
to fix the problem without jumpering into bootloader because the
initialization aborts with a BLADERF_ERR_UNEXPECTED.
Here, we're looking for the bladeRF2 FPGA signatures, and if we find
them, we return from bladerf1_open() early after printing some useful
tips. This allows firmware flashing to occur, but not much else because
the FPGA is not loaded.
Fixes #572","If a pre-2.2.0 firmware is flashed to a bladeRF2 device, there is no way
to fix the problem without jumpering into bootloader because the
initialization aborts with a BLADERF_ERR_UNEXPECTED.
Here, we're looking for the bladeRF2 FPGA signatures, and if we find
them, we return from bladerf1_open() early after printing some useful
tips. This allows firmware flashing to occur, but not much else because
the FPGA is not loaded.
Fixes #572",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,579,2018-08-21T22:47:41Z,2018-08-23T17:35:14Z,2018-08-29T21:21:52Z,MERGED,True,43,21,1,https://github.com/rtucker,host: libbladeRF: check for null xb_data in xb200 fns (#575),1,[],https://github.com/Nuand/bladeRF/pull/579,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/579,"Verify that dev->xb_data is not NULL before using it.  Also ensure that it is NULL after freeing.
Fixes #575","Verify that dev->xb_data is not NULL before using it.  Also ensure that it is NULL after freeing.
Fixes #575",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,580,2018-08-22T15:59:56Z,2018-08-23T17:34:38Z,2018-08-23T17:34:45Z,CLOSED,False,1,1,1,https://github.com/rtucker,host: libbladeRF: fix channel on bladerf1/set_tx_gain,1,[],https://github.com/Nuand/bladeRF/pull/580,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/580,"Typo fix
h/t okamoto@slack","Typo fix
h/t okamoto@slack",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,580,2018-08-22T15:59:56Z,2018-08-23T17:34:38Z,2018-08-23T17:34:45Z,CLOSED,False,1,1,1,https://github.com/rtucker,host: libbladeRF: fix channel on bladerf1/set_tx_gain,1,[],https://github.com/Nuand/bladeRF/pull/580,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/580#issuecomment-415504284,"Typo fix
h/t okamoto@slack",fixed by 674dba4,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,582,2018-08-23T17:19:54Z,2018-08-23T21:06:59Z,2018-08-23T21:07:04Z,MERGED,True,69,9,1,https://github.com/rtucker," host: libbladeRF/bladerf2: cache factory trimdac value, preserve trimdac disable state",2,[],https://github.com/Nuand/bladeRF/pull/582,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/582,"Fixes a lockup/crashy bug where bladerf2_get_vctcxo_trim would cause active RX/TX streams to fail.  Also ensures that ""set trimdac"" won't inadvertently re-enable the trim DAC if it is disabled (e.g. because the PLL is enabled).","Fixes a lockup/crashy bug where bladerf2_get_vctcxo_trim would cause active RX/TX streams to fail.  Also ensures that ""set trimdac"" won't inadvertently re-enable the trim DAC if it is disabled (e.g. because the PLL is enabled).",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,583,2018-08-23T21:05:03Z,2018-08-24T16:04:40Z,2018-08-24T16:04:44Z,MERGED,True,765,502,4,https://github.com/rtucker,libbladeRF: polished release notes for v2.0,11,[],https://github.com/Nuand/bladeRF/pull/583,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/583,"Updates the release notes for v2.0 to include more useful information, less useless information, and fewer typos.  More consistent and readable, hopefully.
Also fixes one error in the documentation in libbladeRF.h.","Updates the release notes for v2.0 to include more useful information, less useless information, and fewer typos.  More consistent and readable, hopefully.
Also fixes one error in the documentation in libbladeRF.h.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,585,2018-08-24T03:29:15Z,2018-08-24T03:29:57Z,2018-08-24T03:34:02Z,MERGED,True,9,9,6,https://github.com/bglod,host: libbladeRF: Rename clock select option,1,[],https://github.com/Nuand/bladeRF/pull/585,https://github.com/bglod,1,https://github.com/Nuand/bladeRF/pull/585,"The bladeRF-micro has an option to use either its onboard VCTCXO or an
external 38.4 MHz clock as the clock source for components on the
board. This change addresses some ambiguity in the naming of the onboard
option by renaming it from 'vctcxo' to 'onboard'.
The valid options are now:

onboard
external","The bladeRF-micro has an option to use either its onboard VCTCXO or an
external 38.4 MHz clock as the clock source for components on the
board. This change addresses some ambiguity in the naming of the onboard
option by renaming it from 'vctcxo' to 'onboard'.
The valid options are now:

onboard
external",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,587,2018-08-24T16:07:00Z,2018-08-24T17:13:04Z,2018-08-24T17:13:14Z,MERGED,True,3,0,1,https://github.com/bglod,host: bladeRF-cli: Add 200 ms delay before probing PLL lock status,1,[],https://github.com/Nuand/bladeRF/pull/587,https://github.com/bglod,1,https://github.com/Nuand/bladeRF/pull/587,"Fixes a minor inconvenience caused by probing the PLL lock status too
quickly after enabling the PLL for the first time: the PLL will report
unlocked even though a valid reference is present.
Addresses issue #584.","Fixes a minor inconvenience caused by probing the PLL lock status too
quickly after enabling the PLL for the first time: the PLL will report
unlocked even though a valid reference is present.
Addresses issue #584.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,589,2018-08-24T19:35:49Z,2018-08-24T19:36:05Z,2018-08-24T19:40:41Z,MERGED,True,90,0,4,https://github.com/rtucker,host: add nanosleep shim for Windows,4,[],https://github.com/Nuand/bladeRF/pull/589,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/589,"Windows does not have nanosleep(), so this PR emulates it with a wrapper that calls Sleep().","Windows does not have nanosleep(), so this PR emulates it with a wrapper that calls Sleep().",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,591,2018-08-27T20:47:40Z,2018-09-04T16:35:55Z,2018-09-04T16:35:55Z,MERGED,True,177,6,4,https://github.com/dlrobertson,bladeRF-cli: Add libedit support,1,"['Issue: Enhancement', 'Component: Host']",https://github.com/Nuand/bladeRF/pull/591,https://github.com/dlrobertson,1,https://github.com/Nuand/bladeRF/pull/591,"Add libedit support to the bladeRF-cli utility

Add a libedit input backend
Allow the build system to be configured to link to libedit

Add FindLibEdit cmake module
Update bladeRF-cli build to use libedit if ENABLE_LIBEDIT is set or
libedit is found and libtecla is not




Fix memory leak when a unterminated quoted string is given in
interactive mode

Fixes: #319","Add libedit support to the bladeRF-cli utility

Add a libedit input backend
Allow the build system to be configured to link to libedit

Add FindLibEdit cmake module
Update bladeRF-cli build to use libedit if ENABLE_LIBEDIT is set or
libedit is found and libtecla is not




Fix memory leak when a unterminated quoted string is given in
interactive mode

Fixes: #319",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,591,2018-08-27T20:47:40Z,2018-09-04T16:35:55Z,2018-09-04T16:35:55Z,MERGED,True,177,6,4,https://github.com/dlrobertson,bladeRF-cli: Add libedit support,1,"['Issue: Enhancement', 'Component: Host']",https://github.com/Nuand/bladeRF/pull/591,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/591#issuecomment-416749857,"Add libedit support to the bladeRF-cli utility

Add a libedit input backend
Allow the build system to be configured to link to libedit

Add FindLibEdit cmake module
Update bladeRF-cli build to use libedit if ENABLE_LIBEDIT is set or
libedit is found and libtecla is not




Fix memory leak when a unterminated quoted string is given in
interactive mode

Fixes: #319",ICAA on file,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,593,2018-08-29T16:07:59Z,2018-09-04T16:33:38Z,2018-09-04T16:33:42Z,MERGED,True,492,16,4,https://github.com/rtucker,bladerf2: Support sample rates down to 0.521 Msps (#581),2,[],https://github.com/Nuand/bladeRF/pull/593,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/593,"To support sample rates below ~2.1 Msps, interpolation/decimation must be enabled on the RFIC's FIR filter.  We do this by checking to see if we can achieve the current sample rate with the currently-enabled filter, and if not, we enable a 4x filter.
This PR adds:

LPF taps for the RX and TX FIR filters
API functions to get/set the filters
enums for the available filters
an entry in the RFIC status print from bladeRF-cli

Fixes #581","To support sample rates below ~2.1 Msps, interpolation/decimation must be enabled on the RFIC's FIR filter.  We do this by checking to see if we can achieve the current sample rate with the currently-enabled filter, and if not, we enable a 4x filter.
This PR adds:

LPF taps for the RX and TX FIR filters
API functions to get/set the filters
enums for the available filters
an entry in the RFIC status print from bladeRF-cli

Fixes #581",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,594,2018-08-29T16:35:35Z,2018-08-29T21:19:43Z,2018-08-29T21:21:49Z,MERGED,True,2,0,1,https://github.com/rtucker,libbladeRF/cmake: don't warn about libusb on freebsd (#588),1,[],https://github.com/Nuand/bladeRF/pull/594,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/594,"FreeBSD has their own built-in implementation of libusb,
and FindLibUSB.cmake takes care of making sure this is
all okay, so we don't need to warn about LIBUSB_VERSION
not being set.
Fixes #588","FreeBSD has their own built-in implementation of libusb,
and FindLibUSB.cmake takes care of making sure this is
all okay, so we don't need to warn about LIBUSB_VERSION
not being set.
Fixes #588",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,595,2018-08-29T17:05:02Z,2018-08-29T21:20:21Z,2018-08-29T21:20:25Z,MERGED,True,52,9,1,https://github.com/rtucker,libbladeRF: improve bladerf_gain_mode documentation (#592),1,[],https://github.com/Nuand/bladeRF/pull/595,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/595,"Discuss what the gain modes mean in better detail, and also
indicate that the BLADERF_GAIN_*_AGC options are advanced and
require additional implementation work to use effectively.
Fixes #592","Discuss what the gain modes mean in better detail, and also
indicate that the BLADERF_GAIN_*_AGC options are advanced and
require additional implementation work to use effectively.
Fixes #592",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,596,2018-08-29T23:08:08Z,2018-08-30T21:28:02Z,2018-09-06T16:00:10Z,MERGED,True,124,107,6,https://github.com/rtucker,debian: update packaging files,4,[],https://github.com/Nuand/bladeRF/pull/596,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/596,"Updates control file version from 3.9.5 to 4.1.4.
Replaces http: URLs with https: URLs where applicable.
Updates copyright file to match restructuring in libbladeRF 2.
Include COPYING and legal/* files when installing docs.
Fix maintainer name :)","Updates control file version from 3.9.5 to 4.1.4.
Replaces http: URLs with https: URLs where applicable.
Updates copyright file to match restructuring in libbladeRF 2.
Include COPYING and legal/* files when installing docs.
Fix maintainer name :)",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,597,2018-08-30T00:20:03Z,2018-09-04T16:42:27Z,2018-09-04T16:42:33Z,MERGED,True,24,0,5,https://github.com/rtucker,libbladeRF: install doxygen docs,2,[],https://github.com/Nuand/bladeRF/pull/597,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/597,"Instead of leaving the deftly-assembled API documentation in the build/ dir, with the vast storehouse of knowledge and useful information treated as mere ephemera, this PR installs them with the rest of libbladeRF.
Also adds a debian package: libbladerf-doc","Instead of leaving the deftly-assembled API documentation in the build/ dir, with the vast storehouse of knowledge and useful information treated as mere ephemera, this PR installs them with the rest of libbladeRF.
Also adds a debian package: libbladerf-doc",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,598,2018-08-30T18:10:19Z,2018-09-04T16:10:17Z,2018-09-04T16:34:40Z,MERGED,True,4,4,2,https://github.com/rtucker,host/bladerf2: fix TX LO frequency range checking,2,[],https://github.com/Nuand/bladeRF/pull/598,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/598,"The RFIC supports TX center frequencies down to 47 MHz, but the vendor-supplied library does not.  This PR modifies the range-checking of the vendor library to support LO freqs down to 47 MHz, and also adjusts bladerf2.c to take advantage thereof.","The RFIC supports TX center frequencies down to 47 MHz, but the vendor-supplied library does not.  This PR modifies the range-checking of the vendor library to support LO freqs down to 47 MHz, and also adjusts bladerf2.c to take advantage thereof.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,598,2018-08-30T18:10:19Z,2018-09-04T16:10:17Z,2018-09-04T16:34:40Z,MERGED,True,4,4,2,https://github.com/rtucker,host/bladerf2: fix TX LO frequency range checking,2,[],https://github.com/Nuand/bladeRF/pull/598,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/598#issuecomment-417423648,"The RFIC supports TX center frequencies down to 47 MHz, but the vendor-supplied library does not.  This PR modifies the range-checking of the vendor library to support LO freqs down to 47 MHz, and also adjusts bladerf2.c to take advantage thereof.","In commit a1d6fc3, I modified the ad9361 library to have different minimum LO freqs for RX and TX.  However, we do our own bounds checking, so keeping it simple seems like the best option.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,603,2018-09-04T19:44:30Z,2018-09-05T16:34:23Z,2018-09-05T16:34:27Z,MERGED,True,6,20,2,https://github.com/rtucker,docker: use libedit for centos/fedora builds,1,[],https://github.com/Nuand/bladeRF/pull/603,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/603,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,604,2018-09-04T19:44:46Z,2018-09-06T15:54:42Z,2018-09-06T16:00:03Z,MERGED,True,7,6,1,https://github.com/rtucker,libbladeRF: fix uninitialized variable warning,1,[],https://github.com/Nuand/bladeRF/pull/604,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/604,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,605,2018-09-05T16:55:05Z,2018-09-06T15:59:39Z,2018-09-06T15:59:43Z,MERGED,True,5,9,2,https://github.com/rtucker,libbladeRF: adjust list of RX gain modes (#601),1,[],https://github.com/Nuand/bladeRF/pull/605,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/605,"On the bladeRF 1, remove the redundant ""automatic"" setting
and rename ""default"" to ""automatic"". Also directly use
enum values instead of the reverse-compat #defines.
On the bladeRF 2, rename ""default"" to ""automatic"".
Intent: make it more clear whether the gain mode is automatic
or manual, without having to ""know"" that the default is automatic.
Fixes #601","On the bladeRF 1, remove the redundant ""automatic"" setting
and rename ""default"" to ""automatic"". Also directly use
enum values instead of the reverse-compat #defines.
On the bladeRF 2, rename ""default"" to ""automatic"".
Intent: make it more clear whether the gain mode is automatic
or manual, without having to ""know"" that the default is automatic.
Fixes #601",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,608,2018-09-05T18:18:05Z,2018-09-07T22:15:07Z,2018-09-07T22:15:09Z,MERGED,True,302,72,4,https://github.com/rtucker,"bladerf1: implement bladerf_{get,set}_rf_port[s]",3,[],https://github.com/Nuand/bladeRF/pull/608,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/608,"Implements the RF port getters/setters for the bladeRF 1, moves these functions into the low-level functions section of libbladeRF.h, and implements reading of these settings in bladeRF-cli's 'print hardware' command.
Fixes #600","Implements the RF port getters/setters for the bladeRF 1, moves these functions into the low-level functions section of libbladeRF.h, and implements reading of these settings in bladeRF-cli's 'print hardware' command.
Fixes #600",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,609,2018-09-05T18:47:38Z,2018-09-06T16:01:23Z,2018-09-06T16:01:28Z,MERGED,True,32,10,9,https://github.com/bglod,bladeRF1: Fix nios_gpio assignment for AGC_EN,4,[],https://github.com/Nuand/bladeRF/pull/609,https://github.com/bglod,1,https://github.com/Nuand/bladeRF/pull/609,"Fixes #607
The nios_gpio bit assignment for AGC_EN was already being used for
led(1). This commit also fixes a bug in the agc_band_sel signal
assignment introduced in 3b670ca.","Fixes #607
The nios_gpio bit assignment for AGC_EN was already being used for
led(1). This commit also fixes a bug in the agc_band_sel signal
assignment introduced in 3b670ca.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,610,2018-09-05T19:21:28Z,2018-09-07T22:15:35Z,2018-09-24T23:03:02Z,MERGED,True,169,119,5,https://github.com/rtucker,"host: add format macros for bladerf_frequency, bladerf_timestamp",2,[],https://github.com/Nuand/bladeRF/pull/610,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/610,"Adds new format macros for displaying bladerf_frequency and bladerf_timestamp values to libbladeRF.h.
Updates bladerf1.c, bladerf2.c, and bladeRF-cli's print/set to use the new format macros, and also to use the proper typedefs.
Fixes #577","Adds new format macros for displaying bladerf_frequency and bladerf_timestamp values to libbladeRF.h.
Updates bladerf1.c, bladerf2.c, and bladeRF-cli's print/set to use the new format macros, and also to use the proper typedefs.
Fixes #577",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,610,2018-09-05T19:21:28Z,2018-09-07T22:15:35Z,2018-09-24T23:03:02Z,MERGED,True,169,119,5,https://github.com/rtucker,"host: add format macros for bladerf_frequency, bladerf_timestamp",2,[],https://github.com/Nuand/bladeRF/pull/610,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/610#issuecomment-420382477,"Adds new format macros for displaying bladerf_frequency and bladerf_timestamp values to libbladeRF.h.
Updates bladerf1.c, bladerf2.c, and bladeRF-cli's print/set to use the new format macros, and also to use the proper typedefs.
Fixes #577","this broke 'set txvga1' on the bladerf1
bladeRF> print txvga1

           txvga1:  -14 dB (Range: [-35, -4])

bladeRF> set txvga1 -12

bladeRF-cli: /root/bladeRF/host/utilities/bladeRF-cli/src/cmd/printset_impl.c:686: set_gain: Assertion `range->min < INT32_MIN' failed.
Aborted (core dumped)",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,611,2018-09-06T19:10:23Z,2018-09-07T22:16:10Z,2018-09-24T23:02:48Z,MERGED,True,69,34,5,https://github.com/rtucker,host: add a product description string to devinfo,2,[],https://github.com/Nuand/bladeRF/pull/611,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/611,"Displays a description for each device found during a bladeRF-cli --probe:
  Description:    Nuand bladeRF 2.0
  Backend:        libusb
  Serial:         <redacted>
  USB Bus:        4
  USB Address:    36

This is built from the USB device descriptor, piggy-backing on the same functionality that populates the serial number.
Currently libusb-only; on cyusb, it will likely display """".","Displays a description for each device found during a bladeRF-cli --probe:
  Description:    Nuand bladeRF 2.0
  Backend:        libusb
  Serial:         <redacted>
  USB Bus:        4
  USB Address:    36

This is built from the USB device descriptor, piggy-backing on the same functionality that populates the serial number.
Currently libusb-only; on cyusb, it will likely display """".",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,611,2018-09-06T19:10:23Z,2018-09-07T22:16:10Z,2018-09-24T23:02:48Z,MERGED,True,69,34,5,https://github.com/rtucker,host: add a product description string to devinfo,2,[],https://github.com/Nuand/bladeRF/pull/611,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/611#issuecomment-420383008,"Displays a description for each device found during a bladeRF-cli --probe:
  Description:    Nuand bladeRF 2.0
  Backend:        libusb
  Serial:         <redacted>
  USB Bus:        4
  USB Address:    36

This is built from the USB device descriptor, piggy-backing on the same functionality that populates the serial number.
Currently libusb-only; on cyusb, it will likely display """".",this ended up causing segfaults in some circumstances?  see #616,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,613,2018-09-07T22:05:11Z,2018-09-07T22:16:27Z,2018-09-07T22:16:30Z,MERGED,True,60,27,1,https://github.com/rtucker,bladeRF-cli: ensure device is initialized after deferred open (#612),1,[],https://github.com/Nuand/bladeRF/pull/613,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/613,"If the --load-fpga, --flash-firmware, or --flash-fpga options
are present on the command line, we temporarily set the
BLADERF_FORCE_NO_FPGA_PRESENT environment variable when
opening the device, to trick bladerf_open into not performing
a device initialization before we have the hardware fully
ready to go.
The --load-fpga calls bladerf_load_fpga, which ultimately
calls the correct bladerf*_initialization function to complete
the initialization, so this is fine.
However, the --flash-* options do not do this, and therefore,
flashing firmware or FPGA leaves the device in a half-initialized
state (specifically STATE_FIRMWARE_LOADED). If the FPGA is
in the unconfigured state, this is an accurate and consistent,
if useless, state.
But, if the FPGA has been configured by a previous bladerf_open
or auto-loading from flash, we have two conflicting indicators:
dev->board_data->state indicates that the FPGA is NOT loaded, but
bladerf_is_fpga_configured() (which queries the FX3 for the state
of the FPGA's CONF_DONE pin) indicates that the FPGA is loaded.
The upshot of this: at the end of main(), bladeRF-cli calls
cli_state_destroy(), which calls rxtx_shutdown(), which calls
disarm_triggers(). If bladerf_is_fpga_configured() is true,
then disarm_triggers() calls bladerf_trigger_init(), which
quickly trips out on the CHECK_BOARD_STATE guard.
The fix for this is to add a bool to the rc_config struct, to
remember that we need to close and re-open the device normally
after the FPGA/firmware operations are completed.
This commit also clang-formats the modified functions, cleans
up some of the printfs, and improves the wording of the
informational messages during these operations.
Fixes #612","If the --load-fpga, --flash-firmware, or --flash-fpga options
are present on the command line, we temporarily set the
BLADERF_FORCE_NO_FPGA_PRESENT environment variable when
opening the device, to trick bladerf_open into not performing
a device initialization before we have the hardware fully
ready to go.
The --load-fpga calls bladerf_load_fpga, which ultimately
calls the correct bladerf*_initialization function to complete
the initialization, so this is fine.
However, the --flash-* options do not do this, and therefore,
flashing firmware or FPGA leaves the device in a half-initialized
state (specifically STATE_FIRMWARE_LOADED). If the FPGA is
in the unconfigured state, this is an accurate and consistent,
if useless, state.
But, if the FPGA has been configured by a previous bladerf_open
or auto-loading from flash, we have two conflicting indicators:
dev->board_data->state indicates that the FPGA is NOT loaded, but
bladerf_is_fpga_configured() (which queries the FX3 for the state
of the FPGA's CONF_DONE pin) indicates that the FPGA is loaded.
The upshot of this: at the end of main(), bladeRF-cli calls
cli_state_destroy(), which calls rxtx_shutdown(), which calls
disarm_triggers(). If bladerf_is_fpga_configured() is true,
then disarm_triggers() calls bladerf_trigger_init(), which
quickly trips out on the CHECK_BOARD_STATE guard.
The fix for this is to add a bool to the rc_config struct, to
remember that we need to close and re-open the device normally
after the FPGA/firmware operations are completed.
This commit also clang-formats the modified functions, cleans
up some of the printfs, and improves the wording of the
informational messages during these operations.
Fixes #612",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,617,2018-09-10T21:41:42Z,2018-09-12T17:49:35Z,2018-09-12T17:49:44Z,CLOSED,False,19,6,1,https://github.com/rtucker,libbladeRF: use strncpy/strncat to build product string (#615),3,[],https://github.com/Nuand/bladeRF/pull/617,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/617,"snprintf is seemingly not the way to do this
Fixes #615","snprintf is seemingly not the way to do this
Fixes #615",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,617,2018-09-10T21:41:42Z,2018-09-12T17:49:35Z,2018-09-12T17:49:44Z,CLOSED,False,19,6,1,https://github.com/rtucker,libbladeRF: use strncpy/strncat to build product string (#615),3,[],https://github.com/Nuand/bladeRF/pull/617,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/617#issuecomment-420738792,"snprintf is seemingly not the way to do this
Fixes #615",superseded by #624,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,619,2018-09-10T21:45:40Z,2018-09-12T21:20:55Z,2018-09-12T21:20:58Z,MERGED,True,149,0,3,https://github.com/rtucker,docker: add builds on ubuntu:cosmic,2,[],https://github.com/Nuand/bladeRF/pull/619,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/619,Ubuntu 18.10 build testing,Ubuntu 18.10 build testing,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,620,2018-09-10T22:01:03Z,2018-09-12T17:50:04Z,2018-09-12T17:50:08Z,CLOSED,False,10,0,2,https://github.com/rtucker,libbladeRF: fix doxygen warnings on #defines (#618),1,[],https://github.com/Nuand/bladeRF/pull/620,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/620,Fixes #618,Fixes #618,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,620,2018-09-10T22:01:03Z,2018-09-12T17:50:04Z,2018-09-12T17:50:08Z,CLOSED,False,10,0,2,https://github.com/rtucker,libbladeRF: fix doxygen warnings on #defines (#618),1,[],https://github.com/Nuand/bladeRF/pull/620,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/620#issuecomment-420738952,Fixes #618,Superseded by #623,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,621,2018-09-11T01:31:56Z,2018-09-11T01:32:12Z,2018-09-12T17:54:37Z,MERGED,True,119,169,5,https://github.com/rtucker,"Revert ""host: add format macros for bladerf_frequency, bladerf_timestamp""",5,[],https://github.com/Nuand/bladeRF/pull/621,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/621,Reverts #610,Reverts #610,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,622,2018-09-11T01:37:34Z,2018-09-11T01:39:03Z,2018-09-12T17:54:35Z,MERGED,True,32,67,5,https://github.com/rtucker,"Revert ""host: add a product description string to devinfo""",4,[],https://github.com/Nuand/bladeRF/pull/622,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/622,Reverts #611,Reverts #611,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,623,2018-09-12T17:07:55Z,2018-09-12T21:50:41Z,2018-09-12T21:50:44Z,MERGED,True,148,87,4,https://github.com/rtucker,"libbladeRF: add format macros for frequency, timestamp",1,[],https://github.com/Nuand/bladeRF/pull/623,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/623,"Adds new format macros for displaying bladerf_frequency and
bladerf_timestamp values to libbladeRF.h.
Transitions bladerf1.c and bladerf2.c to use these new macros,
and also cleans up a few more places where the typedefs aren't
currently used.
Also fixes a doxygen warning for undocumented #defines in
bladeRF2.h.
Fixes #577
Fixes #618
Fixes #620","Adds new format macros for displaying bladerf_frequency and
bladerf_timestamp values to libbladeRF.h.
Transitions bladerf1.c and bladerf2.c to use these new macros,
and also cleans up a few more places where the typedefs aren't
currently used.
Also fixes a doxygen warning for undocumented #defines in
bladeRF2.h.
Fixes #577
Fixes #618
Fixes #620",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,624,2018-09-12T17:48:09Z,2018-09-12T21:51:02Z,2018-09-12T21:51:04Z,MERGED,True,57,13,5,https://github.com/rtucker,host: Add manufacturer/product strings to device information,2,[],https://github.com/Nuand/bladeRF/pull/624,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/624,"Adds 'manufacturer' and 'product' members to the bladerf_devinfo struct, and ensures they are properly initialized and populated during enumeration.
These contain the human-readable manufacturer and product names from the USB device descriptor, and are displayed by bladeRF-cli during 'probe' and 'info' commands.
Note: This is a reimplementation of PR #611, which tried to be a little too clever.
Fixes #611
Fixes #615
Fixes #616
Fixes #617","Adds 'manufacturer' and 'product' members to the bladerf_devinfo struct, and ensures they are properly initialized and populated during enumeration.
These contain the human-readable manufacturer and product names from the USB device descriptor, and are displayed by bladeRF-cli during 'probe' and 'info' commands.
Note: This is a reimplementation of PR #611, which tried to be a little too clever.
Fixes #611
Fixes #615
Fixes #616
Fixes #617",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,625,2018-09-12T17:55:49Z,2018-09-12T20:48:48Z,2018-09-12T21:21:20Z,MERGED,True,3,5,1,https://github.com/rtucker,bladerf1: don't leave bladerf1_tx_port_map empty,1,[],https://github.com/Nuand/bladeRF/pull/625,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/625,Fixes #614,Fixes #614,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,625,2018-09-12T17:55:49Z,2018-09-12T20:48:48Z,2018-09-12T21:21:20Z,MERGED,True,3,5,1,https://github.com/rtucker,bladerf1: don't leave bladerf1_tx_port_map empty,1,[],https://github.com/Nuand/bladeRF/pull/625,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/625#issuecomment-420740915,Fixes #614,waiting for verification that this fixes #614,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,626,2018-09-12T18:16:17Z,2018-09-12T21:55:15Z,2018-09-12T21:55:19Z,MERGED,True,44,40,1,https://github.com/rtucker,"bladerf2: rename convenience static fns, misc cleanup",1,[],https://github.com/Nuand/bladeRF/pull/626,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/626,"Renames a couple static functions to clarify their usage
Changes a couple more uint64_t to bladerf_frequency
Remove __FUNCTION__ from a few warnings/errors where it is just
clutter
Closes #606","Renames a couple static functions to clarify their usage
Changes a couple more uint64_t to bladerf_frequency
Remove __FUNCTION__ from a few warnings/errors where it is just
clutter
Closes #606",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,628,2018-09-12T22:25:03Z,2018-09-13T22:11:14Z,2018-09-13T22:11:17Z,MERGED,True,2,2,2,https://github.com/rtucker,matlab: add missing BB_TXVGA1_RXLPF loopback option,1,[],https://github.com/Nuand/bladeRF/pull/628,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/628,Fixes #478,Fixes #478,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,629,2018-09-12T22:53:13Z,2018-09-14T16:19:34Z,2018-09-14T16:20:54Z,MERGED,True,56,1,2,https://github.com/rtucker,libbladeRF: add bladerf_get_serial_struct function,1,[],https://github.com/Nuand/bladeRF/pull/629,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/629,"Adds a bladerf_get_serial_struct function, which is similar
in functionality to bladerf_get_serial, but instead of requiring
a user-supplied buffer of at least BLADERF_SERIAL_LENGTH bytes,
it expects a pointer to a struct bladerf_serial which itself has
a buffer of BLADERF_SERIAL_LENGTH bytes as a member.
This turns BLADERF_SERIAL_LENGTH into an API-internal value,
instead of something that API users have to be intently aware of.
Fixes #382","Adds a bladerf_get_serial_struct function, which is similar
in functionality to bladerf_get_serial, but instead of requiring
a user-supplied buffer of at least BLADERF_SERIAL_LENGTH bytes,
it expects a pointer to a struct bladerf_serial which itself has
a buffer of BLADERF_SERIAL_LENGTH bytes as a member.
This turns BLADERF_SERIAL_LENGTH into an API-internal value,
instead of something that API users have to be intently aware of.
Fixes #382",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,633,2018-09-13T19:10:30Z,2018-09-13T19:29:58Z,2018-09-13T19:30:02Z,MERGED,True,1,1,1,https://github.com/rtucker,libbladeRF: fix bladerf2_trigger_arm typo,1,[],https://github.com/Nuand/bladeRF/pull/633,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/633,"on the bladerf2, bladerf_trigger_arm was calling fpga_trigger_fire
instead of fpga_trigger_arm, creating a situation where the triggers
were not being armed.
Fixes #632","on the bladerf2, bladerf_trigger_arm was calling fpga_trigger_fire
instead of fpga_trigger_arm, creating a situation where the triggers
were not being armed.
Fixes #632",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,634,2018-09-13T22:22:58Z,2018-09-14T16:33:32Z,2018-09-14T18:21:38Z,MERGED,True,389,6,25,https://github.com/bglod,Probe flash ID and return its size,8,[],https://github.com/Nuand/bladeRF/pull/634,https://github.com/bglod,1,https://github.com/Nuand/bladeRF/pull/634,"First ""half"" of fixing issue #571. Provides a mechanism to read out the manufacturer and device IDs from the SPI flash. This can be used to determine the density and architecture.","First ""half"" of fixing issue #571. Provides a mechanism to read out the manufacturer and device IDs from the SPI flash. This can be used to determine the density and architecture.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,635,2018-09-14T17:50:36Z,2018-09-14T17:53:52Z,2018-09-14T17:53:55Z,MERGED,True,2,0,2,https://github.com/rtucker,libbladeRF: add get_flash_id to usb_fns struct in usb drivers,1,[],https://github.com/Nuand/bladeRF/pull/635,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/635,"MSVC is a stickler about how structs are populated, and
so we need to put something in libusb.c and cyapi.c even
though get_flash_id is actually handled in usb.c","MSVC is a stickler about how structs are populated, and
so we need to put something in libusb.c and cyapi.c even
though get_flash_id is actually handled in usb.c",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,636,2018-09-14T17:53:42Z,2018-09-14T17:54:09Z,2018-09-14T17:54:11Z,MERGED,True,3,2,1,https://github.com/rtucker,bladerf: fix strncpy in bladerf_get_serial_struct,1,[],https://github.com/Nuand/bladeRF/pull/636,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/636,Fixes stringop-truncation warning in newer gcc versions,Fixes stringop-truncation warning in newer gcc versions,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,637,2018-09-14T18:14:44Z,2018-09-14T18:22:59Z,2018-09-14T18:26:59Z,MERGED,True,8,2,1,https://github.com/bglod,libbladeRF/bladerf1.c: add AGC log_error output,1,[],https://github.com/Nuand/bladeRF/pull/637,https://github.com/bglod,1,https://github.com/Nuand/bladeRF/pull/637,"Add log_error() output to help the user figure out why they're receiving
ERR_UNSUPPORTED.","Add log_error() output to help the user figure out why they're receiving
ERR_UNSUPPORTED.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,638,2018-09-14T18:22:25Z,2018-09-14T18:23:08Z,2018-09-14T18:23:11Z,MERGED,True,36,29,2,https://github.com/rtucker,libbladeRF: bump FW_FLASH_ID warning to a debug,1,[],https://github.com/Nuand/bladeRF/pull/638,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/638,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,639,2018-09-14T19:14:40Z,2018-09-24T17:14:37Z,2018-09-24T17:14:40Z,MERGED,True,31,10,3,https://github.com/rtucker,python: update bindings with latest libbladeRF adjustments,3,[],https://github.com/Nuand/bladeRF/pull/639,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/639,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,642,2018-09-18T23:13:16Z,2018-09-24T17:16:56Z,2018-09-24T17:17:38Z,MERGED,True,109,58,3,https://github.com/rtucker,hdl: bladerf1: move AGC SPI driver into 80 MHz clock domain,3,[],https://github.com/Nuand/bladeRF/pull/642,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/642,"This ensures that the SPI controllers have a consistent clock to work with, instead of rx_clock (which depends on the configured ADC sample rate). This ensures the SPI clock will always be 20 MHz, and that everything is passing between known clock domains.
Also registers the gain change request lines going into bladerf_agc_lms_drv to improve timing margin, and adds a set_output_delay timing constraint on lms_sclk.
Fixes #640","This ensures that the SPI controllers have a consistent clock to work with, instead of rx_clock (which depends on the configured ADC sample rate). This ensures the SPI clock will always be 20 MHz, and that everything is passing between known clock domains.
Also registers the gain change request lines going into bladerf_agc_lms_drv to improve timing margin, and adds a set_output_delay timing constraint on lms_sclk.
Fixes #640",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,647,2018-09-20T21:50:28Z,2018-09-24T17:15:05Z,2018-09-24T17:15:19Z,MERGED,True,31,2,2,https://github.com/rtucker,host: nios_access: reduce verbose logging spew,1,[],https://github.com/Nuand/bladeRF/pull/647,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/647,"There are a few functions which are used very often, resulting in
a lot of unnecessary bloat on the verbose logging.
Unless ENABLE_LIBBLADERF_NIOS_ACCESS_LOG_VERBOSE is defined, the
following functions will no longer print verbose logging output:
nios_si5338_read
nios_si5338_write
nios_lms6_read
nios_lms6_write
nios_ad9361_spi_read
nios_ad9361_spi_write
nios_adi_axi_read
nios_adi_axi_write
nios_rffe_control_read
nios_rffe_control_write","There are a few functions which are used very often, resulting in
a lot of unnecessary bloat on the verbose logging.
Unless ENABLE_LIBBLADERF_NIOS_ACCESS_LOG_VERBOSE is defined, the
following functions will no longer print verbose logging output:
nios_si5338_read
nios_si5338_write
nios_lms6_read
nios_lms6_write
nios_ad9361_spi_read
nios_ad9361_spi_write
nios_adi_axi_read
nios_adi_axi_write
nios_rffe_control_read
nios_rffe_control_write",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,647,2018-09-20T21:50:28Z,2018-09-24T17:15:05Z,2018-09-24T17:15:19Z,MERGED,True,31,2,2,https://github.com/rtucker,host: nios_access: reduce verbose logging spew,1,[],https://github.com/Nuand/bladeRF/pull/647,https://github.com/bglod,2,https://github.com/Nuand/bladeRF/pull/647#issuecomment-423346940,"There are a few functions which are used very often, resulting in
a lot of unnecessary bloat on the verbose logging.
Unless ENABLE_LIBBLADERF_NIOS_ACCESS_LOG_VERBOSE is defined, the
following functions will no longer print verbose logging output:
nios_si5338_read
nios_si5338_write
nios_lms6_read
nios_lms6_write
nios_ad9361_spi_read
nios_ad9361_spi_write
nios_adi_axi_read
nios_adi_axi_write
nios_rffe_control_read
nios_rffe_control_write",Would a -v insufferable work better? Just a thought.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,647,2018-09-20T21:50:28Z,2018-09-24T17:15:05Z,2018-09-24T17:15:19Z,MERGED,True,31,2,2,https://github.com/rtucker,host: nios_access: reduce verbose logging spew,1,[],https://github.com/Nuand/bladeRF/pull/647,https://github.com/bglod,3,https://github.com/Nuand/bladeRF/pull/647#issuecomment-423347936,"There are a few functions which are used very often, resulting in
a lot of unnecessary bloat on the verbose logging.
Unless ENABLE_LIBBLADERF_NIOS_ACCESS_LOG_VERBOSE is defined, the
following functions will no longer print verbose logging output:
nios_si5338_read
nios_si5338_write
nios_lms6_read
nios_lms6_write
nios_ad9361_spi_read
nios_ad9361_spi_write
nios_adi_axi_read
nios_adi_axi_write
nios_rffe_control_read
nios_rffe_control_write",(Rationale: remembering all these env vars is going to be difficult),True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,647,2018-09-20T21:50:28Z,2018-09-24T17:15:05Z,2018-09-24T17:15:19Z,MERGED,True,31,2,2,https://github.com/rtucker,host: nios_access: reduce verbose logging spew,1,[],https://github.com/Nuand/bladeRF/pull/647,https://github.com/rtucker,4,https://github.com/Nuand/bladeRF/pull/647#issuecomment-423351741,"There are a few functions which are used very often, resulting in
a lot of unnecessary bloat on the verbose logging.
Unless ENABLE_LIBBLADERF_NIOS_ACCESS_LOG_VERBOSE is defined, the
following functions will no longer print verbose logging output:
nios_si5338_read
nios_si5338_write
nios_lms6_read
nios_lms6_write
nios_ad9361_spi_read
nios_ad9361_spi_write
nios_adi_axi_read
nios_adi_axi_write
nios_rffe_control_read
nios_rffe_control_write","Would a -v insufferable work better? Just a thought.

I've had half a mind to do such a thing, but I think it would break ABI... right now, bladerf_log_level is an enum where BLADERF_LOG_LEVEL_VERBOSE is implicitly 0, and adding BLADERF_LOG_LEVEL_INSUFFERABLE above that (either letting it be 0 or explicitly making it -1) is quite possibly ABI-breaking.
Also, it's documented in cmake -L :)",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,647,2018-09-20T21:50:28Z,2018-09-24T17:15:05Z,2018-09-24T17:15:19Z,MERGED,True,31,2,2,https://github.com/rtucker,host: nios_access: reduce verbose logging spew,1,[],https://github.com/Nuand/bladeRF/pull/647,https://github.com/bglod,5,https://github.com/Nuand/bladeRF/pull/647#issuecomment-423352334,"There are a few functions which are used very often, resulting in
a lot of unnecessary bloat on the verbose logging.
Unless ENABLE_LIBBLADERF_NIOS_ACCESS_LOG_VERBOSE is defined, the
following functions will no longer print verbose logging output:
nios_si5338_read
nios_si5338_write
nios_lms6_read
nios_lms6_write
nios_ad9361_spi_read
nios_ad9361_spi_write
nios_adi_axi_read
nios_adi_axi_write
nios_rffe_control_read
nios_rffe_control_write",Terrible! But understandable. Carry on. :),True,{'LAUGH': ['https://github.com/rtucker']}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,648,2018-09-20T22:08:56Z,2018-09-24T17:15:51Z,2018-09-24T17:16:02Z,MERGED,True,67,24,2,https://github.com/rtucker,host: improve handling of LIBUSB_ERROR_ACCESS during probe,2,[],https://github.com/Nuand/bladeRF/pull/648,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/648,"In the Windows world, libusb_open() fails if the device is already open.  This results in a misleading error if a user does, say, bladeRF-cli -e probe.
As a workaround, lusb_probe now passes back the data it does have (backend, USB bus, USB address), and sets the serial number to ""ANY"".  bladeRF-cli's probe command now looks for this and handles it.
Fixes #641","In the Windows world, libusb_open() fails if the device is already open.  This results in a misleading error if a user does, say, bladeRF-cli -e probe.
As a workaround, lusb_probe now passes back the data it does have (backend, USB bus, USB address), and sets the serial number to ""ANY"".  bladeRF-cli's probe command now looks for this and handles it.
Fixes #641",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,648,2018-09-20T22:08:56Z,2018-09-24T17:15:51Z,2018-09-24T17:16:02Z,MERGED,True,67,24,2,https://github.com/rtucker,host: improve handling of LIBUSB_ERROR_ACCESS during probe,2,[],https://github.com/Nuand/bladeRF/pull/648,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/648#issuecomment-423354426,"In the Windows world, libusb_open() fails if the device is already open.  This results in a misleading error if a user does, say, bladeRF-cli -e probe.
As a workaround, lusb_probe now passes back the data it does have (backend, USB bus, USB address), and sets the serial number to ""ANY"".  bladeRF-cli's probe command now looks for this and handles it.
Fixes #641",Will have a test windows build for this shortly,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,648,2018-09-20T22:08:56Z,2018-09-24T17:15:51Z,2018-09-24T17:16:02Z,MERGED,True,67,24,2,https://github.com/rtucker,host: improve handling of LIBUSB_ERROR_ACCESS during probe,2,[],https://github.com/Nuand/bladeRF/pull/648,https://github.com/rtucker,3,https://github.com/Nuand/bladeRF/pull/648#issuecomment-423358346,"In the Windows world, libusb_open() fails if the device is already open.  This results in a misleading error if a user does, say, bladeRF-cli -e probe.
As a workaround, lusb_probe now passes back the data it does have (backend, USB bus, USB address), and sets the serial number to ""ANY"".  bladeRF-cli's probe command now looks for this and handles it.
Fixes #641","https://www.dropbox.com/s/lb1n3mvw3fvg628/bladeRF-win-installer-2018.09-pre0-2018092003-rtucker-fix-issue641-clean.exe?dl=0 is the windows build
md5sum: a2dc6ab7ad5c96fbe55e86b8d2c73ecd
sha256sum: 3842cac7427e66f0545bc4a30e0805a9fdef8b5552f6e9262b77058bf9f45260",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,649,2018-09-20T23:25:49Z,2018-09-21T16:10:00Z,2018-09-21T16:10:01Z,MERGED,True,0,3,1,https://github.com/mdtopham,Memory deallocation fix,2,[],https://github.com/Nuand/bladeRF/pull/649,https://github.com/mdtopham,1,https://github.com/Nuand/bladeRF/pull/649,"parse.c is releasing memory for strings, after it assigns the memory location to a struct. This results in the memory potentially being overwritten by subsequent allocations before it's referenced.
Fixes #643","parse.c is releasing memory for strings, after it assigns the memory location to a struct. This results in the memory potentially being overwritten by subsequent allocations before it's referenced.
Fixes #643",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,649,2018-09-20T23:25:49Z,2018-09-21T16:10:00Z,2018-09-21T16:10:01Z,MERGED,True,0,3,1,https://github.com/mdtopham,Memory deallocation fix,2,[],https://github.com/Nuand/bladeRF/pull/649,https://github.com/bglod,2,https://github.com/Nuand/bladeRF/pull/649#issuecomment-423542920,"parse.c is releasing memory for strings, after it assigns the memory location to a struct. This results in the memory potentially being overwritten by subsequent allocations before it's referenced.
Fixes #643","I'm sure @rtucker will want to review this further before accepting, but in the mean time, please squash these two commits together. Thanks!
Edit: also please add a description (such as the one in this PR) to the commit message.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,649,2018-09-20T23:25:49Z,2018-09-21T16:10:00Z,2018-09-21T16:10:01Z,MERGED,True,0,3,1,https://github.com/mdtopham,Memory deallocation fix,2,[],https://github.com/Nuand/bladeRF/pull/649,https://github.com/mdtopham,3,https://github.com/Nuand/bladeRF/pull/649#issuecomment-423569271,"parse.c is releasing memory for strings, after it assigns the memory location to a struct. This results in the memory potentially being overwritten by subsequent allocations before it's referenced.
Fixes #643","I'll see what I can do about that. (I thought the PR would help with that, turns out it doesn't)

probably this evening",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,649,2018-09-20T23:25:49Z,2018-09-21T16:10:00Z,2018-09-21T16:10:01Z,MERGED,True,0,3,1,https://github.com/mdtopham,Memory deallocation fix,2,[],https://github.com/Nuand/bladeRF/pull/649,https://github.com/rtucker,4,https://github.com/Nuand/bladeRF/pull/649#issuecomment-423588537,"parse.c is releasing memory for strings, after it assigns the memory location to a struct. This results in the memory potentially being overwritten by subsequent allocations before it's referenced.
Fixes #643","No sweat, I can squash it down in the merge :)
This looks good to me -- I suspect there's likely some other shenanigans going on with memory in parse.c as well, but that's a project for another day.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,650,2018-09-20T23:59:10Z,2018-11-12T23:35:05Z,2018-11-12T23:35:05Z,CLOSED,False,23,3,2,https://github.com/mdtopham,Configuration enhancement,3,[],https://github.com/Nuand/bladeRF/pull/650,https://github.com/mdtopham,1,https://github.com/Nuand/bladeRF/pull/650,Added rx_biastee_en and tx_biastee_en as keys for config file handling.,Added rx_biastee_en and tx_biastee_en as keys for config file handling.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,650,2018-09-20T23:59:10Z,2018-11-12T23:35:05Z,2018-11-12T23:35:05Z,CLOSED,False,23,3,2,https://github.com/mdtopham,Configuration enhancement,3,[],https://github.com/Nuand/bladeRF/pull/650,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/650#issuecomment-423595730,Added rx_biastee_en and tx_biastee_en as keys for config file handling.,"Greetings :)  Thanks for the PR!!  This is useful.
A couple quick things:


Do you have an CAA on file with us?  If not, please fill out either the Entity (if you're a corporate entity) or Individual Contributor Assignment Agreement at https://github.com/Nuand/bladeRF/tree/master/legal/CAA and send us a scanned copy via e-mail.


Please reformat to use four-space indentation... running the file through clang-format (using the .clang-format at the root of the repository) will ensure the formatting is consistent overall and is highly recommended.  Also you probably want to rebase against master and/or yank the 067f2fc commit from this PR :)


I'm not sure rx_biastee_en and tx_biastee_en are the best names for those?  We've been tending to have config key names match their bladeRF-cli equivalents.  Maybe biastee_rx and biastee_tx ?


(In the ideal case, I'd want biastee rx on and/or biastee tx on to be valid, i.e. without the underscore.  However, the parsing is not built for that right now.)
Thanks!  -rt",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,650,2018-09-20T23:59:10Z,2018-11-12T23:35:05Z,2018-11-12T23:35:05Z,CLOSED,False,23,3,2,https://github.com/mdtopham,Configuration enhancement,3,[],https://github.com/Nuand/bladeRF/pull/650,https://github.com/mdtopham,3,https://github.com/Nuand/bladeRF/pull/650#issuecomment-423600754,Added rx_biastee_en and tx_biastee_en as keys for config file handling.,Not yet. I'll address that as soon as I can.,True,{'THUMBS_UP': ['https://github.com/rtucker']}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,650,2018-09-20T23:59:10Z,2018-11-12T23:35:05Z,2018-11-12T23:35:05Z,CLOSED,False,23,3,2,https://github.com/mdtopham,Configuration enhancement,3,[],https://github.com/Nuand/bladeRF/pull/650,https://github.com/rtucker,4,https://github.com/Nuand/bladeRF/pull/650#issuecomment-424379509,Added rx_biastee_en and tx_biastee_en as keys for config file handling.,CAA received!  ✅,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,651,2018-09-21T21:08:13Z,2018-09-24T18:54:58Z,2018-09-24T18:55:01Z,MERGED,True,7,0,1,https://github.com/rtucker,host: bladerf1: skip init if BLADERF_FORCE_NO_FPGA_PRESENT,1,[],https://github.com/Nuand/bladeRF/pull/651,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/651,"On the bladerf2, we have a comparatively long initialization process,
and thus we skip the init if we're ""just"" loading an FPGA, e.g. with
the -l option to bladeRF-cli.
This adds the same bypass to bladerf1.","On the bladerf2, we have a comparatively long initialization process,
and thus we skip the init if we're ""just"" loading an FPGA, e.g. with
the -l option to bladeRF-cli.
This adds the same bypass to bladerf1.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,652,2018-09-24T17:09:57Z,2018-09-24T18:53:24Z,2018-09-24T18:53:28Z,MERGED,True,117,52,3,https://github.com/rtucker,hdl: bladerf1: timing improvements,4,[],https://github.com/Nuand/bladeRF/pull/652,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/652,"Improves timing closure probability of bladerf1 hosted builds by adding registers and synchronizers.
This affects the following components:

command_uart: rs232_sout is now registered
tx_*_fifo: fixed the set_false_paths in the SDC
rx mux: lms_rx_enable_qualified is now synchronized into the rx_clock domain
discretes: fx3_ctl and fx3_uart_cts are now registered into the fx3_pclk_pll domain; xb_gpio_dir and dac_csx are registered in the 80MHz domain

With this and #642, we are reliably passing timing.  (Hooray!)
Fixes #395","Improves timing closure probability of bladerf1 hosted builds by adding registers and synchronizers.
This affects the following components:

command_uart: rs232_sout is now registered
tx_*_fifo: fixed the set_false_paths in the SDC
rx mux: lms_rx_enable_qualified is now synchronized into the rx_clock domain
discretes: fx3_ctl and fx3_uart_cts are now registered into the fx3_pclk_pll domain; xb_gpio_dir and dac_csx are registered in the 80MHz domain

With this and #642, we are reliably passing timing.  (Hooray!)
Fixes #395",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,656,2018-09-24T21:25:50Z,2018-09-26T16:43:18Z,2018-09-26T16:43:21Z,MERGED,True,88,25,10,https://github.com/rtucker,host: add bladerf_trigger_signal values for J51-1 (bladerf2) and mini_exp[1] (generic),3,[],https://github.com/Nuand/bladeRF/pull/656,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/656,"This adds two new values for the bladerf_trigger_signal enum,
BLADERF_TRIGGER_J51_1 and BLADERF_TRIGGER_MINI_EXP_1, as well
as the necessary backend processing to make them work.
It turns out that it doesn't actually matter which one is chosen;
they all behave identically and interchangeably once they're passed
to the Nios interface functions.
The reason for this change is to reduce confusion, as the bladeRF
x40/x115 use J71-4 for mini_exp[1] and the bladeRF xA4/xA9 use
J51-1.
Also adds relevant bladeRF-cli and Python support.
Fixes #630
Fixes #631","This adds two new values for the bladerf_trigger_signal enum,
BLADERF_TRIGGER_J51_1 and BLADERF_TRIGGER_MINI_EXP_1, as well
as the necessary backend processing to make them work.
It turns out that it doesn't actually matter which one is chosen;
they all behave identically and interchangeably once they're passed
to the Nios interface functions.
The reason for this change is to reduce confusion, as the bladeRF
x40/x115 use J71-4 for mini_exp[1] and the bladeRF xA4/xA9 use
J51-1.
Also adds relevant bladeRF-cli and Python support.
Fixes #630
Fixes #631",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,657,2018-09-24T21:38:43Z,2018-09-26T16:43:43Z,2018-09-26T16:43:49Z,MERGED,True,4,11,1,https://github.com/rtucker,host: matlab: fix tx_gain property handling in simulink,1,[],https://github.com/Nuand/bladeRF/pull/657,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/657,"processTunedPropertiesImpl() was not updated during the migration
from tx_vga1+tx_vga2 to tx_gain.
h/t mando238
Fixes #654","processTunedPropertiesImpl() was not updated during the migration
from tx_vga1+tx_vga2 to tx_gain.
h/t mando238
Fixes #654",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,657,2018-09-24T21:38:43Z,2018-09-26T16:43:43Z,2018-09-26T16:43:49Z,MERGED,True,4,11,1,https://github.com/rtucker,host: matlab: fix tx_gain property handling in simulink,1,[],https://github.com/Nuand/bladeRF/pull/657,https://github.com/mando238,2,https://github.com/Nuand/bladeRF/pull/657#issuecomment-424147209,"processTunedPropertiesImpl() was not updated during the migration
from tx_vga1+tx_vga2 to tx_gain.
h/t mando238
Fixes #654","NP, Glad to see this fix has already been worked into the next release.",True,{'THUMBS_UP': ['https://github.com/rtucker']}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,658,2018-09-24T22:53:37Z,2018-09-26T16:44:05Z,2018-09-26T16:44:08Z,MERGED,True,14,2,1,https://github.com/rtucker,"host: libbladerf/bladerf2: implement bladerf_{set,get}_stream_timeout",1,[],https://github.com/Nuand/bladeRF/pull/658,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/658,"These were somehow not implemented, but were pretty easy copies from bladerf1.c","These were somehow not implemented, but were pretty easy copies from bladerf1.c",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,659,2018-09-24T22:53:59Z,2018-09-26T19:35:22Z,2018-09-26T19:35:24Z,MERGED,True,38,0,3,https://github.com/rtucker,host: libbladeRF/sync: extend transfer timeout to match stream timeout,1,[],https://github.com/Nuand/bladeRF/pull/659,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/659,"In a case where we have a long stream timeout, e.g. when using
triggered receive, the long stream timeout is being rendered
ineffective by the per-transfer timeout, which defaults to
1000 ms.
This adds two functions to async, for setting and getting the
transfer timeout:
int async_set_transfer_timeout(struct bladerf_stream *stream,
                               unsigned int transfer_timeout_ms);
int async_get_transfer_timeout(struct bladerf_stream *stream,
                               unsigned int *transfer_timeout_ms);

This also calls async_set_transfer_timeout in sync_worker_init,
setting it to either the BULK_TIMEOUT_MS from usb.h (1000 ms)
or the timeout_ms for the stream (user-specified), whichever is
longer.
Fixes #655","In a case where we have a long stream timeout, e.g. when using
triggered receive, the long stream timeout is being rendered
ineffective by the per-transfer timeout, which defaults to
1000 ms.
This adds two functions to async, for setting and getting the
transfer timeout:
int async_set_transfer_timeout(struct bladerf_stream *stream,
                               unsigned int transfer_timeout_ms);
int async_get_transfer_timeout(struct bladerf_stream *stream,
                               unsigned int *transfer_timeout_ms);

This also calls async_set_transfer_timeout in sync_worker_init,
setting it to either the BULK_TIMEOUT_MS from usb.h (1000 ms)
or the timeout_ms for the stream (user-specified), whichever is
longer.
Fixes #655",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,660,2018-09-25T20:32:35Z,2018-09-25T21:00:49Z,2018-09-25T21:02:43Z,MERGED,True,6,4,1,https://github.com/bglod,hdl: build: Cygwin compatibility,1,[],https://github.com/Nuand/bladeRF/pull/660,https://github.com/bglod,1,https://github.com/Nuand/bladeRF/pull/660,"The use of readlink with quartus_sh results in bogus paths when
inside a Cygwin environment. Use of readlink was determined to be
unnecessary and was removed.","The use of readlink with quartus_sh results in bogus paths when
inside a Cygwin environment. Use of readlink was determined to be
unnecessary and was removed.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,662,2018-09-25T22:18:15Z,2018-09-26T18:50:24Z,2018-09-26T18:50:28Z,MERGED,True,217,38,17,https://github.com/rtucker,Identify the last source (SPI or USB) which programmed the FPGA,3,[],https://github.com/Nuand/bladeRF/pull/662,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/662,"In a case where multiple FPGA images may be in play (e.g. host autoloading vs SPI flash autoloading), it is desirable to have more information about the source of the currently-active FPGA bitstream.
This PR adds the following features:


fx3_firmware v2.3.1

when an FPGA bitstream is loaded, set a global indicating whether it was programmed by SPI flash or USB host
adds a BLADE_USB_CMD_QUERY_FPGA_SOURCE command



libbladeRF

add bladerf_get_fpga_source() API function
add bladerf_fpga_source enum
add capability BLADERF_CAP_FW_FPGA_SOURCE, which is active when firmware version >= 2.3.1



bladeRF-cli

identify the source of the currently-running FPGA image, if known, in response to the 'version' command



Fixes #646","In a case where multiple FPGA images may be in play (e.g. host autoloading vs SPI flash autoloading), it is desirable to have more information about the source of the currently-active FPGA bitstream.
This PR adds the following features:


fx3_firmware v2.3.1

when an FPGA bitstream is loaded, set a global indicating whether it was programmed by SPI flash or USB host
adds a BLADE_USB_CMD_QUERY_FPGA_SOURCE command



libbladeRF

add bladerf_get_fpga_source() API function
add bladerf_fpga_source enum
add capability BLADERF_CAP_FW_FPGA_SOURCE, which is active when firmware version >= 2.3.1



bladeRF-cli

identify the source of the currently-running FPGA image, if known, in response to the 'version' command



Fixes #646",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,663,2018-09-25T23:35:26Z,2018-09-26T16:44:51Z,2018-09-26T16:44:55Z,MERGED,True,5,2,1,https://github.com/rtucker,fx3: don't stop flash->fpga autoload on USB reset,1,[],https://github.com/Nuand/bladeRF/pull/663,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/663,"When libbladeRF is built with ENABLE_USB_DEV_RESET_ON_OPEN, a
USB port reset is performed on open, to work around some xHCI
controller bugs.
This hits the CyFxbladeRFApplnUSBEventCB() callback with an
event type of CY_U3P_USB_EVENT_RESET, which is then dispatched
to StopApplication(), which calls NuandRFLink.stop() or
NuandFpgaConfig.stop() or does nothing, depending on what the
glAppMode is.
Unfortunately, if the FX3 is loading an FPGA bitstream from the
SPI flash to the FPGA, NuandFpgaConfig.stop() also stops that
dead, and bladeRFAppThread_Entry() progresses forward and we end
up with an unconfigured FPGA. In that case, libbladeRF will then
go through the FPGA autoloading process.
This is essentially a race condition: which FPGA image is loaded,
if any, depends on the time between plugging in the bladeRF and
opening it. Kinda gross.
A reasonable workaround for this is implemented thus: if there's
a valid autoload image (glAutoLoadValid is true) and we haven't
yet made it through bladeRFAppThread_Entry() (glDeviceReady is
false), and we're in glAppMode == MODE_FPGA_CONFIG, then take no
action in StopApplication().
This seems to work OK with some limited power-cycle testing on
both an x40 and an xA4.
Fixes #661","When libbladeRF is built with ENABLE_USB_DEV_RESET_ON_OPEN, a
USB port reset is performed on open, to work around some xHCI
controller bugs.
This hits the CyFxbladeRFApplnUSBEventCB() callback with an
event type of CY_U3P_USB_EVENT_RESET, which is then dispatched
to StopApplication(), which calls NuandRFLink.stop() or
NuandFpgaConfig.stop() or does nothing, depending on what the
glAppMode is.
Unfortunately, if the FX3 is loading an FPGA bitstream from the
SPI flash to the FPGA, NuandFpgaConfig.stop() also stops that
dead, and bladeRFAppThread_Entry() progresses forward and we end
up with an unconfigured FPGA. In that case, libbladeRF will then
go through the FPGA autoloading process.
This is essentially a race condition: which FPGA image is loaded,
if any, depends on the time between plugging in the bladeRF and
opening it. Kinda gross.
A reasonable workaround for this is implemented thus: if there's
a valid autoload image (glAutoLoadValid is true) and we haven't
yet made it through bladeRFAppThread_Entry() (glDeviceReady is
false), and we're in glAppMode == MODE_FPGA_CONFIG, then take no
action in StopApplication().
This seems to work OK with some limited power-cycle testing on
both an x40 and an xA4.
Fixes #661",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,664,2018-09-26T19:34:18Z,2018-10-30T19:24:55Z,2018-10-30T19:24:59Z,MERGED,True,2,2,1,https://github.com/rtucker,debian: update firmware pointer to v2.3.1,1,[],https://github.com/Nuand/bladeRF/pull/664,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/664,Pending on https://www.nuand.com/fx3/bladeRF_fw_v2.3.1.img going live,Pending on https://www.nuand.com/fx3/bladeRF_fw_v2.3.1.img going live,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,665,2018-09-26T21:17:45Z,2018-09-27T18:45:17Z,2018-09-27T18:45:20Z,MERGED,True,25,1,1,https://github.com/rtucker,host: python: improve import_header.py script,1,[],https://github.com/Nuand/bladeRF/pull/665,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/665,"fixes:

Script will now look in the same dir as the input file
(e.g. ../../../libbladeRF/include/) for other headers. This
is specifically to let it find bladeRF1.h and bladeRF2.h
more expeditiously.
Create a stoplist of lines to not include in the output.
This largely consists of typedefs from pycparser's fake
system header files.","fixes:

Script will now look in the same dir as the input file
(e.g. ../../../libbladeRF/include/) for other headers. This
is specifically to let it find bladeRF1.h and bladeRF2.h
more expeditiously.
Create a stoplist of lines to not include in the output.
This largely consists of typedefs from pycparser's fake
system header files.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,667,2018-09-27T18:44:25Z,2018-09-27T18:45:28Z,2018-09-27T18:45:32Z,MERGED,True,8,0,1,https://github.com/rtucker,python: update _cdef with bladerf_get_fpga_source,1,[],https://github.com/Nuand/bladeRF/pull/667,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/667,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,668,2018-09-27T18:44:42Z,2018-09-27T18:44:53Z,2018-09-27T18:44:56Z,MERGED,True,1,0,1,https://github.com/rtucker,bladeRF-cli: fix missing return in error case,1,[],https://github.com/Nuand/bladeRF/pull/668,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/668,Fixes #666,Fixes #666,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,670,2018-10-02T19:10:01Z,2018-10-08T22:04:02Z,2018-10-08T22:04:06Z,MERGED,True,7,2,2,https://github.com/rtucker,host: libbladeRF: fix wrong get_flash_id fptr in dummy.c,2,[],https://github.com/Nuand/bladeRF/pull/670,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/670,h/t @gvanem,h/t @gvanem,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,671,2018-10-02T19:10:46Z,2018-10-08T22:04:30Z,2018-10-08T22:04:39Z,MERGED,True,2,1,2,https://github.com/rtucker,host: common: include pthread.h in nanosleep.h (#669),2,[],https://github.com/Nuand/bladeRF/pull/671,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/671,"default header sort on nanosleep.c puts nanosleep.h above pthread.h, which creates an implicit definition of struct timespec.
Fixes #669","default header sort on nanosleep.c puts nanosleep.h above pthread.h, which creates an implicit definition of struct timespec.
Fixes #669",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,678,2018-10-22T12:50:03Z,2018-10-22T15:08:04Z,2018-10-22T15:08:14Z,MERGED,True,1,1,1,https://github.com/Rusver,updated the year to 2018,1,[],https://github.com/Nuand/bladeRF/pull/678,https://github.com/Rusver,1,https://github.com/Nuand/bladeRF/pull/678,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,678,2018-10-22T12:50:03Z,2018-10-22T15:08:04Z,2018-10-22T15:08:14Z,MERGED,True,1,1,1,https://github.com/Rusver,updated the year to 2018,1,[],https://github.com/Nuand/bladeRF/pull/678,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/678#issuecomment-431863022,,"Good catch, thanks :)",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,681,2018-10-24T18:06:21Z,2018-10-24T18:07:50Z,2018-10-24T18:07:54Z,MERGED,True,1,0,1,https://github.com/rtucker,hdl: bladerf-micro: add false path for pwr_status,1,[],https://github.com/Nuand/bladeRF/pull/681,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/681,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,682,2018-10-24T19:26:18Z,2018-10-26T19:56:52Z,2018-10-26T19:56:55Z,MERGED,True,42,13,1,https://github.com/rtucker,"host: bladeRF-cli: print ranges on sample rate, bandwidth, frequency",1,[],https://github.com/Nuand/bladeRF/pull/682,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/682,"When printing bandwidth, frequency, and sample rate, display the
supported ranges in parantheses after the current value.","When printing bandwidth, frequency, and sample rate, display the
supported ranges in parantheses after the current value.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,683,2018-10-26T18:17:06Z,2018-10-26T20:02:03Z,2018-10-26T20:02:06Z,MERGED,True,1,0,1,https://github.com/rtucker,hdl: bladerf-micro: weak pull-up on fx3_uart_rxd (#679),1,[],https://github.com/Nuand/bladeRF/pull/683,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/683,"Add a weak pull-up on fx3_uart_rxd
This is a bus used for both FPGA-to-FX3 UART data and FX3-to-Flash
SPI data, and without something driving it, it tends to float around
0.55 volts (which is very much a low/asserted signal for the UART).
When the FX3 SPI interface has the bus, it puts the FPGA into reset
via fx3_ctl(7), and fx3_uart_rxd goes high-Z accordingly.
I suspect what we're running into is a race condition between the FX3
reconfiguring the pin to UART mode and bringing the FPGA out of reset,
and the FPGA shifting from high-Z to high/idle, given:

All of the ""junk bytes"" seen so far have been all ones followed by
all zeroes, e.g. 0xF0, 0xFC, etc
Being low for 5 clocks and then going high is indistinguishable from
a start bit followed by 0xF0 followed by a stop bit.

Thus, by maintaining a constant weak pull-up on this bus, we can
ensure it's a logic high when idle.
There are possible side effects when the bus is in its SPI MOSI role,
but I believe they are minor. The FX3 is not expecting a pull-up/down
on this signal, and this is a critical pin for flash access. But,
C5's R_pu is 25 kohms, which means sinking 1.4 mA to pull it low, and
the FX3's absolute maximum output current is 20 mA, so I think we are
good here.
Fixes #679","Add a weak pull-up on fx3_uart_rxd
This is a bus used for both FPGA-to-FX3 UART data and FX3-to-Flash
SPI data, and without something driving it, it tends to float around
0.55 volts (which is very much a low/asserted signal for the UART).
When the FX3 SPI interface has the bus, it puts the FPGA into reset
via fx3_ctl(7), and fx3_uart_rxd goes high-Z accordingly.
I suspect what we're running into is a race condition between the FX3
reconfiguring the pin to UART mode and bringing the FPGA out of reset,
and the FPGA shifting from high-Z to high/idle, given:

All of the ""junk bytes"" seen so far have been all ones followed by
all zeroes, e.g. 0xF0, 0xFC, etc
Being low for 5 clocks and then going high is indistinguishable from
a start bit followed by 0xF0 followed by a stop bit.

Thus, by maintaining a constant weak pull-up on this bus, we can
ensure it's a logic high when idle.
There are possible side effects when the bus is in its SPI MOSI role,
but I believe they are minor. The FX3 is not expecting a pull-up/down
on this signal, and this is a critical pin for flash access. But,
C5's R_pu is 25 kohms, which means sinking 1.4 mA to pull it low, and
the FX3's absolute maximum output current is 20 mA, so I think we are
good here.
Fixes #679",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,689,2018-11-12T18:11:00Z,2018-11-12T23:13:59Z,2018-11-12T23:14:07Z,MERGED,True,2937,14865,33,https://github.com/rtucker,Move vendor library code for ad936x RFIC to /thirdparty; use git submodule,13,[],https://github.com/Nuand/bladeRF/pull/689,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/689,"This PR creates a git submodule for the analogdevicesinc/no-OS code, moving it from host/libraries/libbladeRF/src/driver/thirdparty/adi/ to thirdparty/analogdevicesinc/no-OS and adjusting the build process accordingly.
The build process will handle the git submodule init / git submodule update as required, or it may be done manually before the build.  It will then copy the necessary files to the build tree, apply a series of patches for local modifications, and then build it as libad936x.
There are no changes to the build steps, although the build will fail if git submodule init/update needs to happen but can't (e.g. if github is not reachable).","This PR creates a git submodule for the analogdevicesinc/no-OS code, moving it from host/libraries/libbladeRF/src/driver/thirdparty/adi/ to thirdparty/analogdevicesinc/no-OS and adjusting the build process accordingly.
The build process will handle the git submodule init / git submodule update as required, or it may be done manually before the build.  It will then copy the necessary files to the build tree, apply a series of patches for local modifications, and then build it as libad936x.
There are no changes to the build steps, although the build will fail if git submodule init/update needs to happen but can't (e.g. if github is not reachable).",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,689,2018-11-12T18:11:00Z,2018-11-12T23:13:59Z,2018-11-12T23:14:07Z,MERGED,True,2937,14865,33,https://github.com/rtucker,Move vendor library code for ad936x RFIC to /thirdparty; use git submodule,13,[],https://github.com/Nuand/bladeRF/pull/689,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/689#issuecomment-437985384,"This PR creates a git submodule for the analogdevicesinc/no-OS code, moving it from host/libraries/libbladeRF/src/driver/thirdparty/adi/ to thirdparty/analogdevicesinc/no-OS and adjusting the build process accordingly.
The build process will handle the git submodule init / git submodule update as required, or it may be done manually before the build.  It will then copy the necessary files to the build tree, apply a series of patches for local modifications, and then build it as libad936x.
There are no changes to the build steps, although the build will fail if git submodule init/update needs to happen but can't (e.g. if github is not reachable).","Ubuntu PPA build fails:
-- libad936x: Attempting to initialize missing submodule
-- Found Git: /usr/bin/git (found version ""2.19.1"") 
fatal: not a git repository (or any of the parent directories): .git
fatal: not a git repository (or any of the parent directories): .git
CMake Error at host/common/thirdparty/ad936x/CMakeLists.txt:138 (message):
  Directory
  /<<BUILDDIR>>/bladerf-2018.10-rc1+1SNAPSHOT20181112182555/host/common/thirdparty/ad936x/../../../../thirdparty/analogdevicesinc/no-OS_local/../no-OS/ad9361/sw
  was not found.  It appears that this submodule has not been properly
  initialized.  Please run 'git submodule init' and 'git submodule update',
  and then re-run cmake.


-- Configuring incomplete, errors occurred!
See also ""/<<BUILDDIR>>/bladerf-2018.10-rc1+1SNAPSHOT20181112182555/obj-x86_64-linux-gnu/CMakeFiles/CMakeOutput.log"".
See also ""/<<BUILDDIR>>/bladerf-2018.10-rc1+1SNAPSHOT20181112182555/obj-x86_64-linux-gnu/CMakeFiles/CMakeError.log"".",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,689,2018-11-12T18:11:00Z,2018-11-12T23:13:59Z,2018-11-12T23:14:07Z,MERGED,True,2937,14865,33,https://github.com/rtucker,Move vendor library code for ad936x RFIC to /thirdparty; use git submodule,13,[],https://github.com/Nuand/bladeRF/pull/689,https://github.com/rtucker,3,https://github.com/Nuand/bladeRF/pull/689#issuecomment-438009196,"This PR creates a git submodule for the analogdevicesinc/no-OS code, moving it from host/libraries/libbladeRF/src/driver/thirdparty/adi/ to thirdparty/analogdevicesinc/no-OS and adjusting the build process accordingly.
The build process will handle the git submodule init / git submodule update as required, or it may be done manually before the build.  It will then copy the necessary files to the build tree, apply a series of patches for local modifications, and then build it as libad936x.
There are no changes to the build steps, although the build will fail if git submodule init/update needs to happen but can't (e.g. if github is not reachable).","Updated PPA build script to pull and extract the no-OS tree, put ad9361/sw/* in the right place, and then re-collect it into a new bladerf_*.orig.tar.gz.
Also, turns out that patches need to be applied in the correct order, and for some reason the Launchpad build farms don't return file(GLOB) in alphabetical order.  Fixed in 542985b.  (Note: this also impacts the docker parallel builds)
Will revert 36cf335 and modify it to reflect the fact that we are indeed putting thirdparty/ stuff in the tarball.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,689,2018-11-12T18:11:00Z,2018-11-12T23:13:59Z,2018-11-12T23:14:07Z,MERGED,True,2937,14865,33,https://github.com/rtucker,Move vendor library code for ad936x RFIC to /thirdparty; use git submodule,13,[],https://github.com/Nuand/bladeRF/pull/689,https://github.com/rtucker,4,https://github.com/Nuand/bladeRF/pull/689#issuecomment-438031156,"This PR creates a git submodule for the analogdevicesinc/no-OS code, moving it from host/libraries/libbladeRF/src/driver/thirdparty/adi/ to thirdparty/analogdevicesinc/no-OS and adjusting the build process accordingly.
The build process will handle the git submodule init / git submodule update as required, or it may be done manually before the build.  It will then copy the necessary files to the build tree, apply a series of patches for local modifications, and then build it as libad936x.
There are no changes to the build steps, although the build will fail if git submodule init/update needs to happen but can't (e.g. if github is not reachable).","at 454eba1:
macOS 10.14.1: good
FreeBSD 11.2-RELEASE-p4: good
Windows 10 Pro 1803: good
Linux Arch, CentOS 7, Debian Jessie/Stretch, Fedora, OpenSUSE, Ubuntu Trusty/Xenial/Bionic/Cosmic: all good",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,697,2018-11-12T22:17:59Z,2018-11-12T22:20:34Z,2018-11-12T22:20:36Z,MERGED,True,34,26,7,https://github.com/rtucker,various clang-scan fixes,7,[],https://github.com/Nuand/bladeRF/pull/697,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/697,Fixed 7 files with clang-scan warnings.,Fixed 7 files with clang-scan warnings.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,698,2018-11-12T22:57:44Z,2018-11-12T23:18:04Z,2018-11-12T23:18:07Z,MERGED,True,25,4,1,https://github.com/rtucker,libbladeRF: bladerf1: improve AGC-unavailable messaging (fixes #686),1,[],https://github.com/Nuand/bladeRF/pull/698,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/698,"New messages have a lower severity, explain what will happen
instead (manual gain control), and include an info message with
guidance for solving the issue.","New messages have a lower severity, explain what will happen
instead (manual gain control), and include an info message with
guidance for solving the issue.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,699,2018-11-12T23:11:43Z,2018-11-12T23:18:17Z,2018-11-12T23:18:20Z,MERGED,True,2,0,2,https://github.com/rtucker,libbladeRF: bladerf_load_fpga: release mutex on error (fixes #680),1,[],https://github.com/Nuand/bladeRF/pull/699,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/699,"In the event dev->backend->load_fpga fails, we need to unlock
the mutex or else we're gonna have a bad time tearing everything
down.","In the event dev->backend->load_fpga fails, we need to unlock
the mutex or else we're gonna have a bad time tearing everything
down.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,700,2018-11-12T23:31:52Z,2018-11-12T23:35:05Z,2018-11-15T23:31:27Z,MERGED,True,33,1,2,https://github.com/rtucker,"libbladeRF: add biastee_rx, biastee_tx config file options",3,[],https://github.com/Nuand/bladeRF/pull/700,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/700,"Adds configuration file options for controlling the bias tee supplies.
This PR replaces and closes #650, originally by @mdtopham","Adds configuration file options for controlling the bias tee supplies.
This PR replaces and closes #650, originally by @mdtopham",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,701,2018-11-13T00:02:25Z,2018-11-26T21:16:11Z,2018-11-26T21:16:15Z,MERGED,True,28,1,4,https://github.com/rtucker,hdl: nios: parameterize nios2 RAM size by platform/size,1,[],https://github.com/Nuand/bladeRF/pull/701,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/701,"On xA4/xA9, we can have a larger memory footprint, and we need it for additional features.","On xA4/xA9, we can have a larger memory footprint, and we need it for additional features.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,703,2018-11-16T19:25:08Z,2018-11-16T19:34:32Z,2018-11-16T19:34:35Z,MERGED,True,23,0,1,https://github.com/rtucker,host: bladerf1: fix apportioning of overall gain,1,[],https://github.com/Nuand/bladeRF/pull/703,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/703,"_apportion_gain did not pay heed to the step size of the gain
range, causing it to end up with invalid values for LNA and
RXVGA2.
We now ensure that the allocation mod  is 0, so that
other, more flexible gain stages can be used to pick up the
remainder.","_apportion_gain did not pay heed to the step size of the gain
range, causing it to end up with invalid values for LNA and
RXVGA2.
We now ensure that the allocation mod  is 0, so that
other, more flexible gain stages can be used to pick up the
remainder.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,704,2018-11-16T21:01:36Z,2018-11-16T21:01:42Z,2018-11-16T21:01:53Z,MERGED,True,27,15,1,https://github.com/rtucker,host: bladerf2: fix overeager FIR filter setting in set_sample_rate,1,[],https://github.com/Nuand/bladeRF/pull/704,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/704,"If we've already done the FIR filter change for low sample rates,
we don't need to do it again when changing to another low sample
rate.","If we've already done the FIR filter change for low sample rates,
we don't need to do it again when changing to another low sample
rate.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,706,2018-11-19T18:22:33Z,2018-11-19T18:23:05Z,2019-01-07T21:50:42Z,MERGED,True,846,541,14,https://github.com/rtucker,host: test_ctrl: fixup for bladerf2,8,[],https://github.com/Nuand/bladeRF/pull/706,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/706,"Most sub-tests of libbladeRF_test_ctrl pass, except for threads (see #705).","Most sub-tests of libbladeRF_test_ctrl pass, except for threads (see #705).",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,707,2018-11-19T21:14:53Z,2018-11-19T21:15:00Z,2018-11-19T21:15:03Z,MERGED,True,352,309,14,https://github.com/rtucker,host: libbladeRF_test: fix build failures on Windows,4,[],https://github.com/Nuand/bladeRF/pull/707,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/707,Cleans up build failures introduced by #706,Cleans up build failures introduced by #706,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,708,2018-11-20T23:15:15Z,2018-11-26T23:03:46Z,2018-11-26T23:03:49Z,MERGED,True,3982,4719,19,https://github.com/rtucker,bladerf2: refactoring and code cleanup,6,[],https://github.com/Nuand/bladeRF/pull/708,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/708,"General documentation cleanup, function name adjustments, merging of redundant structures, etc. Move ad936x.h, params.c, and config.h into more general locations. Create macros for common boilerplate.
fpga_common/ad936x_helpers:

Contains wrappers for AD936x RFIC functionality.

fpga_common/bladerf2_common:

Contains bladeRF2-specific helper functions and constants.

fpga_common/ad936x_params:

Reformat (no more tabs, phew)
Move ina219 shunt const to bladerf2_common

host/common/range:

Move functions and macros for handling bladerf_range structs

../libbladeRF/include/bladeRF2.h:

Explicitly index RX/TX FIR enums
Update references to ad936x_params.c

../libbladeRF/src/board/bladerf2/common:

New macros for boilerplate:

WITH_MUTEX: wrap around locked blocks
CHECK_STATUS: calls function, checks return code
CHECK_AD936X: calls function, checks return code, translates from AD936x to libbladeRF error codes
CHECK_*_LOCKED: above, but unlocks mutex before erroring
NULL_CHECK: checks a var for null


Move helper functions into here

../libbladeRF/src/board/bladerf2/bladerf2.c:

Use new macros
Code style fixes
Remove redundant code","General documentation cleanup, function name adjustments, merging of redundant structures, etc. Move ad936x.h, params.c, and config.h into more general locations. Create macros for common boilerplate.
fpga_common/ad936x_helpers:

Contains wrappers for AD936x RFIC functionality.

fpga_common/bladerf2_common:

Contains bladeRF2-specific helper functions and constants.

fpga_common/ad936x_params:

Reformat (no more tabs, phew)
Move ina219 shunt const to bladerf2_common

host/common/range:

Move functions and macros for handling bladerf_range structs

../libbladeRF/include/bladeRF2.h:

Explicitly index RX/TX FIR enums
Update references to ad936x_params.c

../libbladeRF/src/board/bladerf2/common:

New macros for boilerplate:

WITH_MUTEX: wrap around locked blocks
CHECK_STATUS: calls function, checks return code
CHECK_AD936X: calls function, checks return code, translates from AD936x to libbladeRF error codes
CHECK_*_LOCKED: above, but unlocks mutex before erroring
NULL_CHECK: checks a var for null


Move helper functions into here

../libbladeRF/src/board/bladerf2/bladerf2.c:

Use new macros
Code style fixes
Remove redundant code",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,709,2018-11-26T20:21:39Z,2018-11-26T21:05:50Z,2018-11-26T21:05:55Z,MERGED,True,2,1,1,https://github.com/rtucker,host: libbladeRF_test: fix decimal const warning on i386,1,[],https://github.com/Nuand/bladeRF/pull/709,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/709,"Fixes the following error:
error: this decimal constant is unsigned only in ISO C90 [-Werror]
which was introduced by #706","Fixes the following error:
error: this decimal constant is unsigned only in ISO C90 [-Werror]
which was introduced by #706",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,710,2018-11-26T20:55:15Z,2018-11-26T21:03:47Z,2018-11-26T23:45:51Z,MERGED,True,1680,160,32,https://github.com/bglod,Add Quick Retune Support for bladeRF2,23,[],https://github.com/Nuand/bladeRF/pull/710,https://github.com/bglod,1,https://github.com/Nuand/bladeRF/pull/710,"Adds quick retune support for bladeRF2. Does not change bladeRF1's quick retune -- the bladeRF1 tune timing results (below) are only shown for comparison purposes. Same machine and CPU load (~idle) for all tests.
bladeRF2 with NiosII/e (economy):
$ libbladeRF_test_tune_timing
Re-tuning with fixed frequency...
  Host tuning:    0.010427s
Re-tuning with random frequencies...
  Host tuning:    0.052832s
Performing quick-tune...
  Host tuning:    0.000286s

bladeRF2 with NiosII/f (fast):
$ libbladeRF_test_tune_timing
Re-tuning with fixed frequency...
  Host tuning:    0.006821s
Re-tuning with random frequencies...
  Host tuning:    0.035587s
Performing quick-tune...
  Host tuning:    0.000156s

bladeRF1 with NiosII/e (economy):
$ libbladeRF_test_tune_timing
Re-tuning with fixed frequency...
  Host tuning:    0.006182s
  FPGA tuning:    0.000830s
  Speedup factor: 7.447510
Re-tuning with random frequencies...
  Host tuning:    0.006418s
  FPGA tuning:    0.000828s
  Speedup factor: 7.747480

Performing quick-tune...
  Host tuning:    0.000293s
  FPGA tuning:    0.000301s
  Speedup factor: 0.973974

bladeRF1 with NiosII/f (fast):
$ libbladeRF_test_tune_timing
Re-tuning with fixed frequency...
  Host tuning:    0.004813s
  FPGA tuning:    0.000532s
  Speedup factor: 9.038678
Re-tuning with random frequencies...
  Host tuning:    0.005036s
  FPGA tuning:    0.000536s
  Speedup factor: 9.388289

Performing quick-tune...
  Host tuning:    0.000161s
  FPGA tuning:    0.000161s
  Speedup factor: 1.001102","Adds quick retune support for bladeRF2. Does not change bladeRF1's quick retune -- the bladeRF1 tune timing results (below) are only shown for comparison purposes. Same machine and CPU load (~idle) for all tests.
bladeRF2 with NiosII/e (economy):
$ libbladeRF_test_tune_timing
Re-tuning with fixed frequency...
  Host tuning:    0.010427s
Re-tuning with random frequencies...
  Host tuning:    0.052832s
Performing quick-tune...
  Host tuning:    0.000286s

bladeRF2 with NiosII/f (fast):
$ libbladeRF_test_tune_timing
Re-tuning with fixed frequency...
  Host tuning:    0.006821s
Re-tuning with random frequencies...
  Host tuning:    0.035587s
Performing quick-tune...
  Host tuning:    0.000156s

bladeRF1 with NiosII/e (economy):
$ libbladeRF_test_tune_timing
Re-tuning with fixed frequency...
  Host tuning:    0.006182s
  FPGA tuning:    0.000830s
  Speedup factor: 7.447510
Re-tuning with random frequencies...
  Host tuning:    0.006418s
  FPGA tuning:    0.000828s
  Speedup factor: 7.747480

Performing quick-tune...
  Host tuning:    0.000293s
  FPGA tuning:    0.000301s
  Speedup factor: 0.973974

bladeRF1 with NiosII/f (fast):
$ libbladeRF_test_tune_timing
Re-tuning with fixed frequency...
  Host tuning:    0.004813s
  FPGA tuning:    0.000532s
  Speedup factor: 9.038678
Re-tuning with random frequencies...
  Host tuning:    0.005036s
  FPGA tuning:    0.000536s
  Speedup factor: 9.388289

Performing quick-tune...
  Host tuning:    0.000161s
  FPGA tuning:    0.000161s
  Speedup factor: 1.001102",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,711,2018-11-28T22:16:37Z,2018-12-06T19:45:25Z,2018-12-06T19:45:30Z,MERGED,True,4381,299,43,https://github.com/rtucker,hdl: bladerf2: RFIC control via Nios,24,[],https://github.com/Nuand/bladeRF/pull/711,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/711,"This PR implements FPGA-based control of the AD936x RFIC on the bladeRF 2.0 micro.  It is the FPGA side of #712.
It adds a new packet target to 16x64, and dispatches those to a queuing handler in devices_rfic.c.
Initially, this is a faster method of doing RFIC control (albeit with some loss of rarely-used features), but it should be possible to implement headless/standalone systems based around this.
Note: this expands the Nios RAM footprint from 32 kB to 128 kB.","This PR implements FPGA-based control of the AD936x RFIC on the bladeRF 2.0 micro.  It is the FPGA side of #712.
It adds a new packet target to 16x64, and dispatches those to a queuing handler in devices_rfic.c.
Initially, this is a faster method of doing RFIC control (albeit with some loss of rarely-used features), but it should be possible to implement headless/standalone systems based around this.
Note: this expands the Nios RAM footprint from 32 kB to 128 kB.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,711,2018-11-28T22:16:37Z,2018-12-06T19:45:25Z,2018-12-06T19:45:30Z,MERGED,True,4381,299,43,https://github.com/rtucker,hdl: bladerf2: RFIC control via Nios,24,[],https://github.com/Nuand/bladeRF/pull/711,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/711#issuecomment-443046991,"This PR implements FPGA-based control of the AD936x RFIC on the bladeRF 2.0 micro.  It is the FPGA side of #712.
It adds a new packet target to 16x64, and dispatches those to a queuing handler in devices_rfic.c.
Initially, this is a faster method of doing RFIC control (albeit with some loss of rarely-used features), but it should be possible to implement headless/standalone systems based around this.
Note: this expands the Nios RAM footprint from 32 kB to 128 kB.",need to implement ad9361_tx_fastlock_store / ad9361_rx_fastlock_store for compatibility with quick retune,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,711,2018-11-28T22:16:37Z,2018-12-06T19:45:25Z,2018-12-06T19:45:30Z,MERGED,True,4381,299,43,https://github.com/rtucker,hdl: bladerf2: RFIC control via Nios,24,[],https://github.com/Nuand/bladeRF/pull/711,https://github.com/rtucker,3,https://github.com/Nuand/bladeRF/pull/711#issuecomment-444286962,"This PR implements FPGA-based control of the AD936x RFIC on the bladeRF 2.0 micro.  It is the FPGA side of #712.
It adds a new packet target to 16x64, and dispatches those to a queuing handler in devices_rfic.c.
Initially, this is a faster method of doing RFIC control (albeit with some loss of rarely-used features), but it should be possible to implement headless/standalone systems based around this.
Note: this expands the Nios RAM footprint from 32 kB to 128 kB.","Added the necessary plumbing for quick retunes to work w/ FPGA-based RFIC control.
Ran into a couple challenges...
Doing direct SPI writes essentially invalidates the ad9361_rf_phy state.  This isn't really a problem with host-based RFIC control, because the next bladerf2_open() will hard reset and re-initialize the AD9361.  However, when we're running in the FPGA, there's no need to re-initialize, since the state isn't lost on bladerf2_close().
This manifests itself as libbladeRF_test_quick_tune failing on subsequent runs, seemingly by not setting the TX port on the '9361 correctly, so that only half of the frequencies work.  Or none of them.  Generally not all of them.  Also, bladerf2_set_frequency() would start blocking for longer and longer times on each call.  (Traced it down to blocking on AD9361 calibration...?)
So, a couple workarounds!


After doing a profile_activate, frequency reads will fail until the next ""normal"" frequency write. This is because we don't actually know what the tuned frequency is at that point: we only know the last frequency that was set using the library functions.


Initialization is now a three-state situation: ""on"", the running state; ""standby"", which inhibits RF (and also resets the frequency if invalid); and ""off"", which frees the ad9361_rf_phy struct and puts the '9361 into hard reset.  On bladerf2_close(), libbladeRF will put the RFIC control into ""standby"" mode, unless bladerf2_get_quick_tune() was called at some point.  If it was, it will put the RFIC into ""off"" mode, forcing a complete reinitialization on the next bladerf2_open().


I believe this is a reasonable tradeoff for now, as keeping the ad9361_rf_phy struct updated is rather complicated.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,712,2018-11-28T22:21:54Z,2018-12-12T21:42:53Z,2018-12-12T21:42:59Z,MERGED,True,2529,783,22,https://github.com/rtucker,host: bladerf2: RFIC control via FPGA,13,[],https://github.com/Nuand/bladeRF/pull/712,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/712,"This PR implements FPGA-based control of the AD936x RFIC on the bladeRF 2.0 micro.  It is the host side of #711.
A general refactoring is done to split low-level RFIC control into rfic_host.c and rfic_fpga.c, with bladerf2.c largely acting as a dispatcher to those two.
Switching between host and FPGA control is possible with bladerf_set_tuning_mode(), and the library should do the proper de-initialization and re-initialization when this is done.
When using FPGA-based control, the RF subsystem is kept initialized after a bladerf_close() and will not be reinitialized by a bladerf_open(), but other components (e.g. bias tees) will be reset to their defaults on a bladerf_open().","This PR implements FPGA-based control of the AD936x RFIC on the bladeRF 2.0 micro.  It is the host side of #711.
A general refactoring is done to split low-level RFIC control into rfic_host.c and rfic_fpga.c, with bladerf2.c largely acting as a dispatcher to those two.
Switching between host and FPGA control is possible with bladerf_set_tuning_mode(), and the library should do the proper de-initialization and re-initialization when this is done.
When using FPGA-based control, the RF subsystem is kept initialized after a bladerf_close() and will not be reinitialized by a bladerf_open(), but other components (e.g. bias tees) will be reset to their defaults on a bladerf_open().",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,712,2018-11-28T22:21:54Z,2018-12-12T21:42:53Z,2018-12-12T21:42:59Z,MERGED,True,2529,783,22,https://github.com/rtucker,host: bladerf2: RFIC control via FPGA,13,[],https://github.com/Nuand/bladeRF/pull/712,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/712#issuecomment-443046841,"This PR implements FPGA-based control of the AD936x RFIC on the bladeRF 2.0 micro.  It is the host side of #711.
A general refactoring is done to split low-level RFIC control into rfic_host.c and rfic_fpga.c, with bladerf2.c largely acting as a dispatcher to those two.
Switching between host and FPGA control is possible with bladerf_set_tuning_mode(), and the library should do the proper de-initialization and re-initialization when this is done.
When using FPGA-based control, the RF subsystem is kept initialized after a bladerf_close() and will not be reinitialized by a bladerf_open(), but other components (e.g. bias tees) will be reset to their defaults on a bladerf_open().","bladerf2_get_quick_tune fails out on the call to ad9361_*_fastlock_store, unsurprisingly.  i'll need to handle this.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,713,2018-12-06T19:08:45Z,2018-12-06T19:09:21Z,2018-12-06T19:09:24Z,MERGED,True,134,92,1,https://github.com/rtucker,host: bladerf2: fix double-mutexing in low-samplerate-mode,1,[],https://github.com/Nuand/bladeRF/pull/713,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/713,"During the recent refactor, the RFIC FIR filter functions got
wrapped in a MUTEX_LOCK.  This is incompatible with their use
by bladerf2_set_sample_rate, which is called within a MUTEX_LOCK.
🤦‍♀️","During the recent refactor, the RFIC FIR filter functions got
wrapped in a MUTEX_LOCK.  This is incompatible with their use
by bladerf2_set_sample_rate, which is called within a MUTEX_LOCK.
🤦‍♀️",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,714,2018-12-07T03:06:09Z,2018-12-07T03:07:28Z,2018-12-07T03:07:30Z,MERGED,True,135,121,2,https://github.com/rtucker,"host: bladeRF-cli: ADDING_COMMANDS: convert to markdown, freshen",1,[],https://github.com/Nuand/bladeRF/pull/714,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/714,"clean up formatting
fix typos
expand discussion of generate.bash","clean up formatting
fix typos
expand discussion of generate.bash",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,715,2018-12-07T03:07:14Z,2018-12-07T03:08:09Z,2018-12-07T03:08:11Z,MERGED,True,151,164,3,https://github.com/rtucker,"host: bladeRF-cli: cmd.c: refactor, code formatting/cleanup",2,[],https://github.com/Nuand/bladeRF/pull/715,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/715,"Refactor/simplify the command declarations
Sort the commands","Refactor/simplify the command declarations
Sort the commands",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,716,2018-12-12T23:44:42Z,2018-12-12T23:44:52Z,2018-12-12T23:44:56Z,MERGED,True,17,13,2,https://github.com/rtucker,fix build errors,2,[],https://github.com/Nuand/bladeRF/pull/716,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/716,"windows, amirite","windows, amirite",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,717,2018-12-18T01:27:00Z,2018-12-18T01:28:09Z,2019-01-07T21:50:05Z,MERGED,True,19,9,5,https://github.com/rtucker,hdl: bladerf-micro FPGA tuning mode TX fixes,5,[],https://github.com/Nuand/bladeRF/pull/717,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/717,"Fixes:

TX DAC clock is 1/2 the expected rate
TX gain level could not be set","Fixes:

TX DAC clock is 1/2 the expected rate
TX gain level could not be set",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,719,2018-12-20T00:52:23Z,2019-01-07T21:48:32Z,2019-01-07T21:48:33Z,CLOSED,False,1534,1197,13,https://github.com/rtucker,"hdl: nios: refactor devices_rfic, add functions for immediate RFIC control",9,[],https://github.com/Nuand/bladeRF/pull/719,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/719,"Adds 2 new functions, rfic_command_read_immed() and rfic_command_write_immed(), which bypass the queuing system used by the default hosted bladeRF_nios application, and immediately dispatch to the proper handler.
These are useful to simplify headless operations, as there's no longer a need to run rfic_command_work() in a loop, sequence things properly, etc.  The functions can be called, and when they return, they are either successful or failed.
Also includes:

Reorganized functions across devices_rfic, devices_rfic_cmds, and devices_rfic_queue
Clean up header file inclusion, avoid loops, etc
Consistency
Reduce state variable scope","Adds 2 new functions, rfic_command_read_immed() and rfic_command_write_immed(), which bypass the queuing system used by the default hosted bladeRF_nios application, and immediately dispatch to the proper handler.
These are useful to simplify headless operations, as there's no longer a need to run rfic_command_work() in a loop, sequence things properly, etc.  The functions can be called, and when they return, they are either successful or failed.
Also includes:

Reorganized functions across devices_rfic, devices_rfic_cmds, and devices_rfic_queue
Clean up header file inclusion, avoid loops, etc
Consistency
Reduce state variable scope",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,720,2018-12-21T00:22:49Z,2018-12-21T01:40:56Z,2018-12-21T01:40:59Z,MERGED,True,159,71,12,https://github.com/rtucker,host: fix FPGA flash region erase block count on xA9,2,[],https://github.com/Nuand/bladeRF/pull/720,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/720,"Write page counts were updated for 128 Mbit flash chips, but erase block counts were not.  This resulted in FPGA bitstream verification failing on bladeRF 2.0 micro xA9 boards, as flash writes can only turn 1s into 0s, but can't turn 0s into 1s.
Implement a bladerf_get_fpga_bytes() library call to return the expected FPGA image size.
Use the actual bitstream length to compute the number of blocks to erase.
Update bladeRF-cli flash-related functionality.","Write page counts were updated for 128 Mbit flash chips, but erase block counts were not.  This resulted in FPGA bitstream verification failing on bladeRF 2.0 micro xA9 boards, as flash writes can only turn 1s into 0s, but can't turn 0s into 1s.
Implement a bladerf_get_fpga_bytes() library call to return the expected FPGA image size.
Use the actual bitstream length to compute the number of blocks to erase.
Update bladeRF-cli flash-related functionality.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,722,2019-01-07T22:15:31Z,2019-01-07T22:50:56Z,2019-01-07T22:51:02Z,MERGED,True,77,24,3,https://github.com/rtucker,"hdl: nios: devices_rfic: add rfic_command_{write,read}_immed() commands",1,[],https://github.com/Nuand/bladeRF/pull/722,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/722,"These are intended for use within headless applications, where queuing is unnecessary, and where the command/channel aren't simply packed into the address.","These are intended for use within headless applications, where queuing is unnecessary, and where the command/channel aren't simply packed into the address.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,723,2019-01-07T22:43:44Z,2019-01-08T23:02:23Z,2019-01-08T23:02:26Z,MERGED,True,1333,1129,8,https://github.com/rtucker,"hdl: nios: devices_rfic: reorganize queue headers, move _rfic_cmd_* into own .c",2,[],https://github.com/Nuand/bladeRF/pull/723,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/723,"Move queue-related stuff into devices_rfic_queue.h
Move functions around to clean up things and make files shorter.
Pass state pointer around to reduce global variable scope.
Clean up some magic numbers and unnecessarily-verbose strings
and function declarations.","Move queue-related stuff into devices_rfic_queue.h
Move functions around to clean up things and make files shorter.
Pass state pointer around to reduce global variable scope.
Clean up some magic numbers and unnecessarily-verbose strings
and function declarations.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,723,2019-01-07T22:43:44Z,2019-01-08T23:02:23Z,2019-01-08T23:02:26Z,MERGED,True,1333,1129,8,https://github.com/rtucker,"hdl: nios: devices_rfic: reorganize queue headers, move _rfic_cmd_* into own .c",2,[],https://github.com/Nuand/bladeRF/pull/723,https://github.com/rtucker,2,https://github.com/Nuand/bladeRF/pull/723#issuecomment-452110359,"Move queue-related stuff into devices_rfic_queue.h
Move functions around to clean up things and make files shorter.
Pass state pointer around to reduce global variable scope.
Clean up some magic numbers and unnecessarily-verbose strings
and function declarations.","@bglod this PR will impact stuff you're working on... basically, it moves the _rfic_cmd_* functions into devices_rfic_cmds.c, and moves the rfic_state struct from file scope to a passed-by-reference thing (reducing the amount of magic)
let me know if you'd like me to land this now, or if you'd prefer i hold off until later!  i thought i had landed this before the holidays, but apparently i did not :o",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,723,2019-01-07T22:43:44Z,2019-01-08T23:02:23Z,2019-01-08T23:02:26Z,MERGED,True,1333,1129,8,https://github.com/rtucker,"hdl: nios: devices_rfic: reorganize queue headers, move _rfic_cmd_* into own .c",2,[],https://github.com/Nuand/bladeRF/pull/723,https://github.com/bglod,3,https://github.com/Nuand/bladeRF/pull/723#issuecomment-452483092,"Move queue-related stuff into devices_rfic_queue.h
Move functions around to clean up things and make files shorter.
Pass state pointer around to reduce global variable scope.
Clean up some magic numbers and unnecessarily-verbose strings
and function declarations.",@rtucker feel free to land it now! :),True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,724,2019-01-12T05:04:22Z,2019-01-16T22:49:42Z,2019-01-16T22:49:46Z,MERGED,True,0,3,1,https://github.com/rtucker,hdl: nios: d_r_cmds: remove unnecessary shift again,1,[],https://github.com/Nuand/bladeRF/pull/724,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/724,"This shift was excised in 9f235dd but it came back during the refactoring in 9601bcc.
h/t @skyhighwings","This shift was excised in 9f235dd but it came back during the refactoring in 9601bcc.
h/t @skyhighwings",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,725,2019-01-16T22:49:14Z,2019-01-16T22:49:54Z,2019-01-16T22:49:56Z,MERGED,True,4,2,1,https://github.com/rtucker,hdl: nios: fix debugging output in devices_rfic,1,[],https://github.com/Nuand/bladeRF/pull/725,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/725,Fix missing stringification in a couple of debug messages.,Fix missing stringification in a couple of debug messages.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,726,2019-01-18T02:06:37Z,2019-01-28T19:08:50Z,2019-01-28T19:08:52Z,MERGED,True,375,199,8,https://github.com/rtucker,"host: bladerf2_set_samplerate fix, bladeRF-cli print/set enhancements",3,[],https://github.com/Nuand/bladeRF/pull/726,https://github.com/rtucker,1,https://github.com/Nuand/bladeRF/pull/726,"bladerf2_set_sample_rate:

improved handling when setting up the FIR filters fails.

bladeRF-cli interactive help:

clean up 'print' and 'set' sections to remove extraneous newlines between rows

bladeRF-cli commands:

print hardware: now only omits rows that can't be populated, instead of returning prematurely
print hardware: remove FIR filter readback (now in 'print filter')
print filter: prints FIR filter configuration
set filter: sets FIR filter configuration","bladerf2_set_sample_rate:

improved handling when setting up the FIR filters fails.

bladeRF-cli interactive help:

clean up 'print' and 'set' sections to remove extraneous newlines between rows

bladeRF-cli commands:

print hardware: now only omits rows that can't be populated, instead of returning prematurely
print hardware: remove FIR filter readback (now in 'print filter')
print filter: prints FIR filter configuration
set filter: sets FIR filter configuration",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,727,2019-01-23T21:45:07Z,2019-01-28T19:33:15Z,2019-01-28T19:33:15Z,MERGED,True,591,0,3,https://github.com/bglod,host: examples/python: Add full duplex example,1,[],https://github.com/Nuand/bladeRF/pull/727,https://github.com/bglod,1,https://github.com/Nuand/bladeRF/pull/727,"Example usage of the bladeRF in full duplex operation with the Python3
bindings.","Example usage of the bladeRF in full duplex operation with the Python3
bindings.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,739,2019-04-05T17:25:15Z,2019-04-06T01:53:51Z,2019-04-06T02:12:24Z,CLOSED,False,135,5,9,https://github.com/henlemalick,libbladeRF: hdl: allow quicktune to control XB gpio register,1,[],https://github.com/Nuand/bladeRF/pull/739,https://github.com/henlemalick,1,https://github.com/Nuand/bladeRF/pull/739,"This commit uses the reserved field of the pkt_retune NiOS packet to encode
xb_gpio register configuration data.","This commit uses the reserved field of the pkt_retune NiOS packet to encode
xb_gpio register configuration data.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,740,2019-04-06T14:48:46Z,2022-04-20T17:05:10Z,2022-04-20T17:05:10Z,CLOSED,False,60,23,4,https://github.com/Eugene-1984,load_sc16q11 python function introduced for multiple channels,3,[],https://github.com/Nuand/bladeRF/pull/740,https://github.com/Eugene-1984,1,https://github.com/Nuand/bladeRF/pull/740,"load_sc16q11 python function introduced to read sc16q11 as a numpy.ndarray. Multiple channels are supported. Additionally other two python files are slightly refactored to better correspond to PEP8 specification. sc16q11 is assumed to store sample for multiple channels in form of pairs such as (for X and Y channels): Xi_1, Xq_1, Yi_1, Yq_1, Xi_2, Xq_2, Yi_2, Yq_2, ... Xi_N, Xq_N, Yi_N, Yq_N","load_sc16q11 python function introduced to read sc16q11 as a numpy.ndarray. Multiple channels are supported. Additionally other two python files are slightly refactored to better correspond to PEP8 specification. sc16q11 is assumed to store sample for multiple channels in form of pairs such as (for X and Y channels): Xi_1, Xq_1, Yi_1, Yq_1, Xi_2, Xq_2, Yi_2, Yq_2, ... Xi_N, Xq_N, Yi_N, Yq_N",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,740,2019-04-06T14:48:46Z,2022-04-20T17:05:10Z,2022-04-20T17:05:10Z,CLOSED,False,60,23,4,https://github.com/Eugene-1984,load_sc16q11 python function introduced for multiple channels,3,[],https://github.com/Nuand/bladeRF/pull/740,https://github.com/warnes,2,https://github.com/Nuand/bladeRF/pull/740#issuecomment-1104153349,"load_sc16q11 python function introduced to read sc16q11 as a numpy.ndarray. Multiple channels are supported. Additionally other two python files are slightly refactored to better correspond to PEP8 specification. sc16q11 is assumed to store sample for multiple channels in form of pairs such as (for X and Y channels): Xi_1, Xq_1, Yi_1, Yq_1, Xi_2, Xq_2, Yi_2, Yq_2, ... Xi_N, Xq_N, Yi_N, Yq_N",Suggestion:  Close the PR because it was included in #850.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,754,2019-09-12T10:36:06Z,2022-03-15T09:27:15Z,2022-03-15T09:27:22Z,CLOSED,False,16,16,1,https://github.com/xavierarteaga,libbladeRF: Fixes CLang tidy warnings due to unsigned operator,1,[],https://github.com/Nuand/bladeRF/pull/754,https://github.com/xavierarteaga,1,https://github.com/Nuand/bladeRF/pull/754,"Some Macros in libbladeRF.h such as #define BLADERF_META_FLAG_RX_HW_UNDERFLOW (1 << 0) give a CLang warning when included in a project.
Could it be possible to have the constant numbers defined as unsigned integer #define BLADERF_META_FLAG_RX_HW_UNDERFLOW (1U << 0U)?
Thanks.","Some Macros in libbladeRF.h such as #define BLADERF_META_FLAG_RX_HW_UNDERFLOW (1 << 0) give a CLang warning when included in a project.
Could it be possible to have the constant numbers defined as unsigned integer #define BLADERF_META_FLAG_RX_HW_UNDERFLOW (1U << 0U)?
Thanks.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,765,2020-01-29T16:58:40Z,2022-03-15T00:24:32Z,2022-03-15T00:24:32Z,CLOSED,False,2,2,1,https://github.com/vbursucianu,Documentation Update: FPGA series correction,1,[],https://github.com/Nuand/bladeRF/pull/765,https://github.com/vbursucianu,1,https://github.com/Nuand/bladeRF/pull/765,"This document can confuse people with the BladeRF 2.0 because it has a Cyclone V FPGA. By Removing the IV, this document becomes valid for both versions of the bladeRF.","This document can confuse people with the BladeRF 2.0 because it has a Cyclone V FPGA. By Removing the IV, this document becomes valid for both versions of the bladeRF.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,766,2020-01-29T21:25:20Z,2022-03-15T00:24:32Z,2022-03-15T00:24:32Z,CLOSED,False,1784,14,15,https://github.com/vbursucianu,Documentation Update: Added bladerf-2.0 references.,7,[],https://github.com/Nuand/bladeRF/pull/766,https://github.com/vbursucianu,1,https://github.com/Nuand/bladeRF/pull/766,The previous version of the documentation was not mentioning the bladerf-2.0 in any way. This could confuse people whereas this script is updated or not.,The previous version of the documentation was not mentioning the bladerf-2.0 in any way. This could confuse people whereas this script is updated or not.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,769,2020-01-31T06:03:51Z,2022-03-15T00:24:32Z,2022-03-15T00:24:32Z,CLOSED,False,4,2,1,https://github.com/vbursucianu,Patch for minor issue #768,2,[],https://github.com/Nuand/bladeRF/pull/769,https://github.com/vbursucianu,1,https://github.com/Nuand/bladeRF/pull/769,"This line of code doens't work on Windows and is not needed. Plus, SOPC is not available since Quartus II. Probably this line could be completely removed.","This line of code doens't work on Windows and is not needed. Plus, SOPC is not available since Quartus II. Probably this line could be completely removed.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,773,2020-02-22T20:03:57Z,2022-04-20T17:09:36Z,2022-04-20T17:09:36Z,CLOSED,False,1,1,1,https://github.com/rikardfalkeborn,libbladeRF: Fix return value in error path,1,[],https://github.com/Nuand/bladeRF/pull/773,https://github.com/rikardfalkeborn,1,https://github.com/Nuand/bladeRF/pull/773,"Returning a negative value from a function with bool as return value
is the same as returning true. Change to false to indicate error.","Returning a negative value from a function with bool as return value
is the same as returning true. Change to false to indicate error.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,773,2020-02-22T20:03:57Z,2022-04-20T17:09:36Z,2022-04-20T17:09:36Z,CLOSED,False,1,1,1,https://github.com/rikardfalkeborn,libbladeRF: Fix return value in error path,1,[],https://github.com/Nuand/bladeRF/pull/773,https://github.com/warnes,2,https://github.com/Nuand/bladeRF/pull/773#issuecomment-1104153548,"Returning a negative value from a function with bool as return value
is the same as returning true. Change to false to indicate error.",Suggestion:  Close the PR because it was included in #850.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,773,2020-02-22T20:03:57Z,2022-04-20T17:09:36Z,2022-04-20T17:09:36Z,CLOSED,False,1,1,1,https://github.com/rikardfalkeborn,libbladeRF: Fix return value in error path,1,[],https://github.com/Nuand/bladeRF/pull/773,https://github.com/rikardfalkeborn,3,https://github.com/Nuand/bladeRF/pull/773#issuecomment-1104196754,"Returning a negative value from a function with bool as return value
is the same as returning true. Change to false to indicate error.",Agreed. Thanks.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,808,2021-02-15T14:17:13Z,2021-09-30T00:22:48Z,2021-09-30T00:22:48Z,MERGED,True,6,1,1,https://github.com/merturk,Update _bladerf.py,1,[],https://github.com/Nuand/bladeRF/pull/808,https://github.com/merturk,1,https://github.com/Nuand/bladeRF/pull/808,Python binding fix for macOS.,Python binding fix for macOS.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,809,2021-02-18T18:43:23Z,2021-08-09T06:52:10Z,2021-08-09T06:52:10Z,MERGED,True,1,1,1,https://github.com/lenhart,added project() line to CMakeLists.txt to get rid of cmake warning,1,[],https://github.com/Nuand/bladeRF/pull/809,https://github.com/lenhart,1,https://github.com/Nuand/bladeRF/pull/809,"Adding a cmake project line to CMakeLists.txt gets rid of following error:
I set the name to bladeRF which of course is easily changeable if requested
Cheers!
CMake Warning (dev) in CMakeLists.txt:
  No project() command is present.  The top-level CMakeLists.txt file must
  contain a literal, direct call to the project() command.  Add a line of
  code such as

    project(ProjectName)

  near the top of the file, but after cmake_minimum_required().

  CMake is pretending there is a ""project(Project)"" command on the first
  line.
This warning is for project developers.  Use -Wno-dev to suppress it.","Adding a cmake project line to CMakeLists.txt gets rid of following error:
I set the name to bladeRF which of course is easily changeable if requested
Cheers!
CMake Warning (dev) in CMakeLists.txt:
  No project() command is present.  The top-level CMakeLists.txt file must
  contain a literal, direct call to the project() command.  Add a line of
  code such as

    project(ProjectName)

  near the top of the file, but after cmake_minimum_required().

  CMake is pretending there is a ""project(Project)"" command on the first
  line.
This warning is for project developers.  Use -Wno-dev to suppress it.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,821,2021-06-30T22:12:34Z,2021-08-09T06:49:06Z,2021-08-09T06:49:06Z,MERGED,True,1,1,1,https://github.com/MartinHerren,[ConfigFile] Fix parsing of vctcxo_tamer key,1,[],https://github.com/Nuand/bladeRF/pull/821,https://github.com/MartinHerren,1,https://github.com/Nuand/bladeRF/pull/821,"Minor fix parsing the vctcxo_tamer key from the config file.
Unfortunately this key is not supported by BladeRF 2.0 but at least it will make it usable for the original BladeRF.","Minor fix parsing the vctcxo_tamer key from the config file.
Unfortunately this key is not supported by BladeRF 2.0 but at least it will make it usable for the original BladeRF.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,821,2021-06-30T22:12:34Z,2021-08-09T06:49:06Z,2021-08-09T06:49:06Z,MERGED,True,1,1,1,https://github.com/MartinHerren,[ConfigFile] Fix parsing of vctcxo_tamer key,1,[],https://github.com/Nuand/bladeRF/pull/821,https://github.com/MartinHerren,2,https://github.com/Nuand/bladeRF/pull/821#issuecomment-872951470,"Minor fix parsing the vctcxo_tamer key from the config file.
Unfortunately this key is not supported by BladeRF 2.0 but at least it will make it usable for the original BladeRF.",This PR is included in PR #822,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,822,2021-07-02T12:12:08Z,2021-08-09T06:49:04Z,2021-08-09T06:49:04Z,MERGED,True,75,1,2,https://github.com/MartinHerren,[ConfigFile] Extend keywords to BladeRF2.0 clocking,6,[],https://github.com/Nuand/bladeRF/pull/822,https://github.com/MartinHerren,1,https://github.com/Nuand/bladeRF/pull/822,"This PR adds the clock_ref, refin_freq, clock_sel and clock_out keywords to the config file to control a BladeRF 2.0's clocking.
It also includes PR #821 which fixes a minor typo.
I also tried to extend the vctcxo_tamer keyword to make it work both for BladeRF and BladeRF 2.0, it worked fine for 'disabled' and '10MHz' settings, but the '1 PPS' couldn't be implemented as not within the 5MHz-300MHz ref clock range supported by the 2.0. So it is not part of this PR.","This PR adds the clock_ref, refin_freq, clock_sel and clock_out keywords to the config file to control a BladeRF 2.0's clocking.
It also includes PR #821 which fixes a minor typo.
I also tried to extend the vctcxo_tamer keyword to make it work both for BladeRF and BladeRF 2.0, it worked fine for 'disabled' and '10MHz' settings, but the '1 PPS' couldn't be implemented as not within the 5MHz-300MHz ref clock range supported by the 2.0. So it is not part of this PR.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,822,2021-07-02T12:12:08Z,2021-08-09T06:49:04Z,2021-08-09T06:49:04Z,MERGED,True,75,1,2,https://github.com/MartinHerren,[ConfigFile] Extend keywords to BladeRF2.0 clocking,6,[],https://github.com/Nuand/bladeRF/pull/822,https://github.com/MartinHerren,2,https://github.com/Nuand/bladeRF/pull/822#issuecomment-873058673,"This PR adds the clock_ref, refin_freq, clock_sel and clock_out keywords to the config file to control a BladeRF 2.0's clocking.
It also includes PR #821 which fixes a minor typo.
I also tried to extend the vctcxo_tamer keyword to make it work both for BladeRF and BladeRF 2.0, it worked fine for 'disabled' and '10MHz' settings, but the '1 PPS' couldn't be implemented as not within the 5MHz-300MHz ref clock range supported by the 2.0. So it is not part of this PR.","I found the doxygen file for the configfile, i'll add a commit to update the doc",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,826,2021-08-06T21:18:27Z,2021-08-09T06:48:52Z,2021-08-09T13:18:40Z,MERGED,True,11,18,1,https://github.com/realmadsci,Python binding fixes,2,[],https://github.com/Nuand/bladeRF/pull/826,https://github.com/realmadsci,1,https://github.com/Nuand/bladeRF/pull/826,"These two commits fix some pointer errors in the libbladeRF Python bindings to make several of the ""query"" type functions work correctly.","These two commits fix some pointer errors in the libbladeRF Python bindings to make several of the ""query"" type functions work correctly.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,832,2021-09-29T08:25:16Z,2022-03-25T11:47:34Z,2022-03-25T11:47:34Z,CLOSED,False,7,1,1,https://github.com/dritory,Windows and macOS support for installing python bindings,2,[],https://github.com/Nuand/bladeRF/pull/832,https://github.com/dritory,1,https://github.com/Nuand/bladeRF/pull/832,"Currently installing the python bindings crashes on Windows, because it cannot find the library distribution ""libbladerf.so"" requested at line 33 in ./host/libraries/libbladeRF_bindings/_bladerf.py. When building the Bladerf library on windows the distribution is named ""bladerf.dll"". I used bladeRF-win-installer-2021.03.exe for installing the library, and after that run python setup.py install.
I simply added an operating system check for Windows and changed the name of the library distribution accordingly.
For reference the error message this pull request is meant to fix arises when importing bladerf in python after installation:
OSError: cannot load library 'libbladeRF.so': error 0x7e.  Additionally, ctypes.util.find_library() did not manage to locate a library called 'libbladeRF.so'
This error has been reported at the forum: https://nuand.com/forums/viewtopic.php?t=9409.","Currently installing the python bindings crashes on Windows, because it cannot find the library distribution ""libbladerf.so"" requested at line 33 in ./host/libraries/libbladeRF_bindings/_bladerf.py. When building the Bladerf library on windows the distribution is named ""bladerf.dll"". I used bladeRF-win-installer-2021.03.exe for installing the library, and after that run python setup.py install.
I simply added an operating system check for Windows and changed the name of the library distribution accordingly.
For reference the error message this pull request is meant to fix arises when importing bladerf in python after installation:
OSError: cannot load library 'libbladeRF.so': error 0x7e.  Additionally, ctypes.util.find_library() did not manage to locate a library called 'libbladeRF.so'
This error has been reported at the forum: https://nuand.com/forums/viewtopic.php?t=9409.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,832,2021-09-29T08:25:16Z,2022-03-25T11:47:34Z,2022-03-25T11:47:34Z,CLOSED,False,7,1,1,https://github.com/dritory,Windows and macOS support for installing python bindings,2,[],https://github.com/Nuand/bladeRF/pull/832,https://github.com/dritory,2,https://github.com/Nuand/bladeRF/pull/832#issuecomment-929967930,"Currently installing the python bindings crashes on Windows, because it cannot find the library distribution ""libbladerf.so"" requested at line 33 in ./host/libraries/libbladeRF_bindings/_bladerf.py. When building the Bladerf library on windows the distribution is named ""bladerf.dll"". I used bladeRF-win-installer-2021.03.exe for installing the library, and after that run python setup.py install.
I simply added an operating system check for Windows and changed the name of the library distribution accordingly.
For reference the error message this pull request is meant to fix arises when importing bladerf in python after installation:
OSError: cannot load library 'libbladeRF.so': error 0x7e.  Additionally, ctypes.util.find_library() did not manage to locate a library called 'libbladeRF.so'
This error has been reported at the forum: https://nuand.com/forums/viewtopic.php?t=9409.",I added the fix for macOS aswell for completeness. See pull request #808 by @merturk,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,833,2021-10-13T05:08:50Z,,2022-06-04T05:08:37Z,OPEN,False,1344,55,66,https://github.com/umer1024,Update and rename bladerf-hosted.vhd to bladerf-hosted(Led_Blinking).vhd,31,[],https://github.com/Nuand/bladeRF/pull/833,https://github.com/umer1024,1,https://github.com/Nuand/bladeRF/pull/833,,,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,834,2021-11-02T21:55:30Z,,2022-06-04T05:08:37Z,OPEN,False,1323,56,65,https://github.com/atx,libbladeRF: Fix correction setting on bladerf2,31,[],https://github.com/Nuand/bladeRF/pull/834,https://github.com/atx,1,https://github.com/Nuand/bladeRF/pull/834,"When attempting to correct for LO leakage on our bladeRF mini, I noticed that the correction settings seem to have no effect. This PR hopefully fixes that...","When attempting to correct for LO leakage on our bladeRF mini, I noticed that the correction settings seem to have no effect. This PR hopefully fixes that...",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,842,2021-11-28T10:58:29Z,2021-11-28T20:18:24Z,2021-11-28T20:18:26Z,MERGED,True,6,1,1,https://github.com/meriac,Add support for xA5 W25Q64JV flash chip,1,[],https://github.com/Nuand/bladeRF/pull/842,https://github.com/meriac,1,https://github.com/Nuand/bladeRF/pull/842,"This fix enables flashing of the FPGA image into the nonvolatile storage of the bladeRF 2.0 micro xA5:

enable detection of WINBOND W25Q64JV chip
add debug output to enable chip ID output for debugging future misdetection issues","This fix enables flashing of the FPGA image into the nonvolatile storage of the bladeRF 2.0 micro xA5:

enable detection of WINBOND W25Q64JV chip
add debug output to enable chip ID output for debugging future misdetection issues",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,842,2021-11-28T10:58:29Z,2021-11-28T20:18:24Z,2021-11-28T20:18:26Z,MERGED,True,6,1,1,https://github.com/meriac,Add support for xA5 W25Q64JV flash chip,1,[],https://github.com/Nuand/bladeRF/pull/842,https://github.com/rghilduta,2,https://github.com/Nuand/bladeRF/pull/842#issuecomment-981145376,"This fix enables flashing of the FPGA image into the nonvolatile storage of the bladeRF 2.0 micro xA5:

enable detection of WINBOND W25Q64JV chip
add debug output to enable chip ID output for debugging future misdetection issues",This looks great. Thanks @meriac !,True,{'HOORAY': ['https://github.com/meriac']}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,846,2022-01-05T15:06:18Z,2022-02-25T00:18:58Z,2022-05-16T22:53:26Z,MERGED,True,5,2,2,https://github.com/warnes,Fix incorrect MATLAB architecture string for MacOS ,4,[],https://github.com/Nuand/bladeRF/pull/846,https://github.com/warnes,1,https://github.com/Nuand/bladeRF/pull/846,Change architecture string for MacOS on Intel CPUs to 'maci64'.  Resolves #845.,Change architecture string for MacOS on Intel CPUs to 'maci64'.  Resolves #845.,True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,848,2022-01-05T16:36:01Z,2022-02-25T00:19:30Z,2022-05-16T22:54:04Z,MERGED,True,519,65,8,https://github.com/warnes,Fix MATLAB API bindings,15,[],https://github.com/Nuand/bladeRF/pull/848,https://github.com/warnes,1,https://github.com/Nuand/bladeRF/pull/848,"MATLAB isn't automatically handling conversion of the bladerf_channel enum strings because bladerf_channel is declared as an int, rather than as an enum.
This PR adds a new static method bladeRF.str2ch to handle the conversion and uses it to wrap appropriate obj.channel and obj.module arguments in function calls.
Further, it replaces the enum strings BLADERF_CORR_LMS_DCOFF... with BLADERF_CORR_DCOFF... and
BLADERF_CORR_FPGA_PHASE... with BLADERF_CORR_PHASE... because MATLAB doesn't pick up the #define
which does so for the C code.
(This PR includes PR #846.)","MATLAB isn't automatically handling conversion of the bladerf_channel enum strings because bladerf_channel is declared as an int, rather than as an enum.
This PR adds a new static method bladeRF.str2ch to handle the conversion and uses it to wrap appropriate obj.channel and obj.module arguments in function calls.
Further, it replaces the enum strings BLADERF_CORR_LMS_DCOFF... with BLADERF_CORR_DCOFF... and
BLADERF_CORR_FPGA_PHASE... with BLADERF_CORR_PHASE... because MATLAB doesn't pick up the #define
which does so for the C code.
(This PR includes PR #846.)",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,850,2022-01-08T18:46:51Z,2022-02-25T00:18:56Z,2022-05-16T22:53:21Z,MERGED,True,1174,100,21,https://github.com/warnes,Cumulative PR  ,14,[],https://github.com/Nuand/bladeRF/pull/850,https://github.com/warnes,1,https://github.com/Nuand/bladeRF/pull/850,"This PR combines the following PRs, with a few improvements (e.g. minor cleanup, adding support for MacOS where lacking, etc.):

#740
#754
#766
#769
#773
#832
#846
#848

I didn't include:

#765 because it was a subset of #766.
#833 Because I didn't really see the point.
#834 because I wasn't sure whether it was valid from a quick inspection.","This PR combines the following PRs, with a few improvements (e.g. minor cleanup, adding support for MacOS where lacking, etc.):

#740
#754
#766
#769
#773
#832
#846
#848

I didn't include:

#765 because it was a subset of #766.
#833 Because I didn't really see the point.
#834 because I wasn't sure whether it was valid from a quick inspection.",True,{}
Nuand/bladeRF,https://github.com/Nuand/bladeRF,869,2022-05-19T14:28:40Z,,2022-06-04T05:08:37Z,OPEN,False,2,2,2,https://github.com/casaroli,fix(test_repeater): bug in termios handling,2,[],https://github.com/Nuand/bladeRF/pull/869,https://github.com/casaroli,1,https://github.com/Nuand/bladeRF/pull/869,"I got compilation error on Fedora 36 with pybombs, so it turned out that there is a bug in this code. termios_backup is a pointer so we should not use & operator for memcpy","I got compilation error on Fedora 36 with pybombs, so it turned out that there is a bug in this code. termios_backup is a pointer so we should not use & operator for memcpy",True,{}
