kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,12,2016-01-13T21:27:50Z,2016-01-19T10:47:06Z,2016-01-19T10:47:06Z,CLOSED,False,38,16,2,https://github.com/moviuro,Silence,2,[],https://github.com/kdave/btrfs-progs/pull/12,https://github.com/moviuro,1,https://github.com/kdave/btrfs-progs/pull/12,"This PR should be the first in a series of changes aiming at making btrfs(8) more script-friendly.
In here we remove the most annoying and noisy outputs.","This PR should be the first in a series of changes aiming at making btrfs(8) more script-friendly.
In here we remove the most annoying and noisy outputs.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,12,2016-01-13T21:27:50Z,2016-01-19T10:47:06Z,2016-01-19T10:47:06Z,CLOSED,False,38,16,2,https://github.com/moviuro,Silence,2,[],https://github.com/kdave/btrfs-progs/pull/12,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/12#issuecomment-171609308,"This PR should be the first in a series of changes aiming at making btrfs(8) more script-friendly.
In here we remove the most annoying and noisy outputs.","Good idea in general, however this is a user visible change and likely to break scripts. Ideally we should rework the verbose output in one go. I'll look at it after 4.4 release.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,12,2016-01-13T21:27:50Z,2016-01-19T10:47:06Z,2016-01-19T10:47:06Z,CLOSED,False,38,16,2,https://github.com/moviuro,Silence,2,[],https://github.com/kdave/btrfs-progs/pull/12,https://github.com/moviuro,3,https://github.com/kdave/btrfs-progs/pull/12#issuecomment-171624864,"This PR should be the first in a series of changes aiming at making btrfs(8) more script-friendly.
In here we remove the most annoying and noisy outputs.","My take on the issue was: commands should be silent in general. Hence ""changing"" the default behavior to a more standard one.
Also, the use of btrfs(8) in script is pretty complex because of some inconsistencies in its outputs (that's for an other PR). We could try to study who uses the verbose output in their projects (e.g. searching on github for people parsing btrfs sub create's output)
On a side note, I am working on https://github.com/moviuro/butter which hit a number of weird things that btrs-progs(8) do, hence my contributions.
Do you have any guidelines as to how I should continue to silence the commands?",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,12,2016-01-13T21:27:50Z,2016-01-19T10:47:06Z,2016-01-19T10:47:06Z,CLOSED,False,38,16,2,https://github.com/moviuro,Silence,2,[],https://github.com/kdave/btrfs-progs/pull/12,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/12#issuecomment-172569667,"This PR should be the first in a series of changes aiming at making btrfs(8) more script-friendly.
In here we remove the most annoying and noisy outputs.","My idea of the end result, regardless of the transition to the new behaviour:

a command is silent unless it would be confusing what it did, ie. a single action like 'subvol create' is silent, 'device add' would print that it does trim (because it delays the whole action)
the return code is 0 if ok, other in case of errors
all commands get --verbose, and print what it does, repeated options are more verbose
all commands get --quiet, disable everything except errors, in the example above 'device add' will not say anything about the trimming

Transition period would be counted in years (1-2), which might sound silly, but deprecation is always counted in years. Warning to users about the unexpected command silence needs to be communicated.
Incrementally we can start adding the --verbose/--quiet options right now.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,12,2016-01-13T21:27:50Z,2016-01-19T10:47:06Z,2016-01-19T10:47:06Z,CLOSED,False,38,16,2,https://github.com/moviuro,Silence,2,[],https://github.com/kdave/btrfs-progs/pull/12,https://github.com/moviuro,5,https://github.com/kdave/btrfs-progs/pull/12#issuecomment-172634413,"This PR should be the first in a series of changes aiming at making btrfs(8) more script-friendly.
In here we remove the most annoying and noisy outputs.","Okay, so let's add -q/-v everywhere we can so that btrfs(8) doesn't complain about them being unknown options.
I'd also suggest switching to getopts everywhere (remember the -- inconsistency?)",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,12,2016-01-13T21:27:50Z,2016-01-19T10:47:06Z,2016-01-19T10:47:06Z,CLOSED,False,38,16,2,https://github.com/moviuro,Silence,2,[],https://github.com/kdave/btrfs-progs/pull/12,https://github.com/kdave,6,https://github.com/kdave/btrfs-progs/pull/12#issuecomment-172788066,"This PR should be the first in a series of changes aiming at making btrfs(8) more script-friendly.
In here we remove the most annoying and noisy outputs.","Yeah, getopts should be used everywhere. I did not want to do that change just before the release. Please don't forget to send the patches to the mailinglist once you have them ready.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,12,2016-01-13T21:27:50Z,2016-01-19T10:47:06Z,2016-01-19T10:47:06Z,CLOSED,False,38,16,2,https://github.com/moviuro,Silence,2,[],https://github.com/kdave/btrfs-progs/pull/12,https://github.com/moviuro,7,https://github.com/kdave/btrfs-progs/pull/12#issuecomment-172795436,"This PR should be the first in a series of changes aiming at making btrfs(8) more script-friendly.
In here we remove the most annoying and noisy outputs.",@kdave on a related note: how to I subscribe/register?,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,12,2016-01-13T21:27:50Z,2016-01-19T10:47:06Z,2016-01-19T10:47:06Z,CLOSED,False,38,16,2,https://github.com/moviuro,Silence,2,[],https://github.com/kdave/btrfs-progs/pull/12,https://github.com/kdave,8,https://github.com/kdave/btrfs-progs/pull/12#issuecomment-172815189,"This PR should be the first in a series of changes aiming at making btrfs(8) more script-friendly.
In here we remove the most annoying and noisy outputs.",https://btrfs.wiki.kernel.org/index.php/Btrfs_mailing_list,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,13,2016-03-29T20:35:56Z,2016-03-31T22:10:09Z,2016-03-31T22:10:09Z,CLOSED,False,1,1,1,https://github.com/devimc,btrfs-progs: fix unknown type name 'u64' in gccgo,1,[],https://github.com/kdave/btrfs-progs/pull/13,https://github.com/devimc,1,https://github.com/kdave/btrfs-progs/pull/13,Signed-off-by: Julio Montes imc.coder@gmail.com,Signed-off-by: Julio Montes imc.coder@gmail.com,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,13,2016-03-29T20:35:56Z,2016-03-31T22:10:09Z,2016-03-31T22:10:09Z,CLOSED,False,1,1,1,https://github.com/devimc,btrfs-progs: fix unknown type name 'u64' in gccgo,1,[],https://github.com/kdave/btrfs-progs/pull/13,https://github.com/devimc,2,https://github.com/kdave/btrfs-progs/pull/13#issuecomment-204152787,Signed-off-by: Julio Montes imc.coder@gmail.com,Applied,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,14,2016-05-10T00:07:48Z,2016-05-12T07:36:53Z,2016-05-12T07:36:53Z,CLOSED,False,5,5,5,https://github.com/sten0,From: Nicholas D Steeves <nsteeves@gmail.com>,1,[],https://github.com/kdave/btrfs-progs/pull/14,https://github.com/sten0,1,https://github.com/kdave/btrfs-progs/pull/14,"Date: Mon, 09 May 2016 20:04:57 -0400
Trivial fix for typos in comments and strings.","Date: Mon, 09 May 2016 20:04:57 -0400
Trivial fix for typos in comments and strings.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,14,2016-05-10T00:07:48Z,2016-05-12T07:36:53Z,2016-05-12T07:36:53Z,CLOSED,False,5,5,5,https://github.com/sten0,From: Nicholas D Steeves <nsteeves@gmail.com>,1,[],https://github.com/kdave/btrfs-progs/pull/14,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/14#issuecomment-218436209,"Date: Mon, 09 May 2016 20:04:57 -0400
Trivial fix for typos in comments and strings.",Can you please fix more typos? There should be some overlap with the kernel-source typos as well so you can use the same wordlist.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,14,2016-05-10T00:07:48Z,2016-05-12T07:36:53Z,2016-05-12T07:36:53Z,CLOSED,False,5,5,5,https://github.com/sten0,From: Nicholas D Steeves <nsteeves@gmail.com>,1,[],https://github.com/kdave/btrfs-progs/pull/14,https://github.com/sten0,3,https://github.com/kdave/btrfs-progs/pull/14#issuecomment-218623536,"Date: Mon, 09 May 2016 20:04:57 -0400
Trivial fix for typos in comments and strings.","On 11 May 2016 at 07:47, kdave notifications@github.com wrote:

Can you please fix more typos? There should be some overlap with the
kernel-source typos as well so you can use the same wordlist.
Done.  I sent the patch to linux-btrfs, because I read on the wiki that
github pull requests weren't the normal way of doing things.  For future
reference, are they ok, or are mailing list patches prefered?",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,14,2016-05-10T00:07:48Z,2016-05-12T07:36:53Z,2016-05-12T07:36:53Z,CLOSED,False,5,5,5,https://github.com/sten0,From: Nicholas D Steeves <nsteeves@gmail.com>,1,[],https://github.com/kdave/btrfs-progs/pull/14,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/14#issuecomment-218682268,"Date: Mon, 09 May 2016 20:04:57 -0400
Trivial fix for typos in comments and strings.",Patches to mailinglist are preferred. Pull request can work as a preview though.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,15,2016-05-19T14:17:37Z,2016-05-23T17:53:02Z,2016-05-23T17:53:02Z,CLOSED,False,1,1,1,https://github.com/ScarabMonkey,Update btrfs-subvolume.asciidoc,1,[],https://github.com/kdave/btrfs-progs/pull/15,https://github.com/ScarabMonkey,1,https://github.com/kdave/btrfs-progs/pull/15,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,15,2016-05-19T14:17:37Z,2016-05-23T17:53:02Z,2016-05-23T17:53:02Z,CLOSED,False,1,1,1,https://github.com/ScarabMonkey,Update btrfs-subvolume.asciidoc,1,[],https://github.com/kdave/btrfs-progs/pull/15,https://github.com/ScarabMonkey,2,https://github.com/kdave/btrfs-progs/pull/15#issuecomment-220337902,,minor typo,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,15,2016-05-19T14:17:37Z,2016-05-23T17:53:02Z,2016-05-23T17:53:02Z,CLOSED,False,1,1,1,https://github.com/ScarabMonkey,Update btrfs-subvolume.asciidoc,1,[],https://github.com/kdave/btrfs-progs/pull/15,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/15#issuecomment-221045252,,"Patch applied to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,16,2016-09-17T08:36:38Z,2016-09-17T20:54:06Z,2016-11-27T12:43:43Z,CLOSED,False,3,3,1,https://github.com/adduxa,Fix typos in btrfs-subvolume documentation,1,[],https://github.com/kdave/btrfs-progs/pull/16,https://github.com/adduxa,1,https://github.com/kdave/btrfs-progs/pull/16,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,16,2016-09-17T08:36:38Z,2016-09-17T20:54:06Z,2016-11-27T12:43:43Z,CLOSED,False,3,3,1,https://github.com/adduxa,Fix typos in btrfs-subvolume documentation,1,[],https://github.com/kdave/btrfs-progs/pull/16,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/16#issuecomment-247807353,,"Applied, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,17,2016-10-13T16:32:04Z,2016-10-31T09:13:54Z,2016-10-31T09:13:55Z,CLOSED,False,106,1,4,https://github.com/LebedevRI,Travis CI,1,[],https://github.com/kdave/btrfs-progs/pull/17,https://github.com/LebedevRI,1,https://github.com/kdave/btrfs-progs/pull/17,"@kdave as requested.
This may need further refinements, but it already does work: https://travis-ci.org/LebedevRI/btrfs-progs","@kdave as requested.
This may need further refinements, but it already does work: https://travis-ci.org/LebedevRI/btrfs-progs",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,17,2016-10-13T16:32:04Z,2016-10-31T09:13:54Z,2016-10-31T09:13:55Z,CLOSED,False,106,1,4,https://github.com/LebedevRI,Travis CI,1,[],https://github.com/kdave/btrfs-progs/pull/17,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/17#issuecomment-254565357,"@kdave as requested.
This may need further refinements, but it already does work: https://travis-ci.org/LebedevRI/btrfs-progs","Thanks. I've experimented a bit, to connect it with coverity, but it does not seem to work (yet). I've managed to remove the docker dependency, as it's not necessary, any standard distro image should suffice.
NB: The coverity project had to be tied to a github account (to make it work with travis) which now looks like it's my project (btrfs-progs -> kdave/btrfs-progs). I don't like that, so I might end up just with the travis build.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,17,2016-10-13T16:32:04Z,2016-10-31T09:13:54Z,2016-10-31T09:13:55Z,CLOSED,False,106,1,4,https://github.com/LebedevRI,Travis CI,1,[],https://github.com/kdave/btrfs-progs/pull/17,https://github.com/LebedevRI,3,https://github.com/kdave/btrfs-progs/pull/17#issuecomment-254566059,"@kdave as requested.
This may need further refinements, but it already does work: https://travis-ci.org/LebedevRI/btrfs-progs","Whatever works for you.
I'm just glad to be of any help :)
(should i close this ?)",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,17,2016-10-13T16:32:04Z,2016-10-31T09:13:54Z,2016-10-31T09:13:55Z,CLOSED,False,106,1,4,https://github.com/LebedevRI,Travis CI,1,[],https://github.com/kdave/btrfs-progs/pull/17,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/17#issuecomment-254567060,"@kdave as requested.
This may need further refinements, but it already does work: https://travis-ci.org/LebedevRI/btrfs-progs",Let me keep it open as a reminder.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,17,2016-10-13T16:32:04Z,2016-10-31T09:13:54Z,2016-10-31T09:13:55Z,CLOSED,False,106,1,4,https://github.com/LebedevRI,Travis CI,1,[],https://github.com/kdave/btrfs-progs/pull/17,https://github.com/kdave,5,https://github.com/kdave/btrfs-progs/pull/17#issuecomment-257245788,"@kdave as requested.
This may need further refinements, but it already does work: https://travis-ci.org/LebedevRI/btrfs-progs",".yml added to devel, closing.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,18,2016-12-15T09:07:39Z,2017-01-03T12:58:41Z,2017-05-23T01:53:15Z,CLOSED,False,366,424,6,https://github.com/adam900710,Convert rework for 4.9,6,[],https://github.com/kdave/btrfs-progs/pull/18,https://github.com/adam900710,1,https://github.com/kdave/btrfs-progs/pull/18,"This is mainly to fix problems exposed by Chandan's fix for 64K nodesize.
The problem is, although we're still using old rollback functions, it
has quite a lot of problems to support the new behavior.


Can't rollback new convert image with new data chunk
Chunk level check can't handle newly allocated data chunk, which is not
1:1 mapped but completely valid in new behavior.
The last patch will enhance the test case to handle it.


Can't rollback real no-hole image
Since it assumes hole file extent as requirement.
And due to the possibility to enable no_holes halfway, btrfsck won't
report such error, since it's acceptable.


Too complex logical, and RW btrfs tree operations
In fact, considering how small data we need to rewrite (1M + 128K), we
don't really need to open btrfs read-write.
Just copy needed data and re-fill. Simple and easy.


Thanks Chandan, his report on failure of rollback leads to this rework.
And this is still small fixes, most of the patch are just deleting old codes.
All rollback test cases from btrfs-progs and fstests are passed.
If it'git los too large to be merged for v4.9, you could remove the following commit
from the branch, although they are completely OK, and just exposed the problem.
btrfs-progs: convert: Fix migrate_super_block() to work with 64k sectorsize
btrfs-progs: convert: Prevent accounting blocks beyond end of device","This is mainly to fix problems exposed by Chandan's fix for 64K nodesize.
The problem is, although we're still using old rollback functions, it
has quite a lot of problems to support the new behavior.


Can't rollback new convert image with new data chunk
Chunk level check can't handle newly allocated data chunk, which is not
1:1 mapped but completely valid in new behavior.
The last patch will enhance the test case to handle it.


Can't rollback real no-hole image
Since it assumes hole file extent as requirement.
And due to the possibility to enable no_holes halfway, btrfsck won't
report such error, since it's acceptable.


Too complex logical, and RW btrfs tree operations
In fact, considering how small data we need to rewrite (1M + 128K), we
don't really need to open btrfs read-write.
Just copy needed data and re-fill. Simple and easy.


Thanks Chandan, his report on failure of rollback leads to this rework.
And this is still small fixes, most of the patch are just deleting old codes.
All rollback test cases from btrfs-progs and fstests are passed.
If it'git los too large to be merged for v4.9, you could remove the following commit
from the branch, although they are completely OK, and just exposed the problem.
btrfs-progs: convert: Fix migrate_super_block() to work with 64k sectorsize
btrfs-progs: convert: Prevent accounting blocks beyond end of device",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,18,2016-12-15T09:07:39Z,2017-01-03T12:58:41Z,2017-05-23T01:53:15Z,CLOSED,False,366,424,6,https://github.com/adam900710,Convert rework for 4.9,6,[],https://github.com/kdave/btrfs-progs/pull/18,https://github.com/adam900710,2,https://github.com/kdave/btrfs-progs/pull/18#issuecomment-267889126,"This is mainly to fix problems exposed by Chandan's fix for 64K nodesize.
The problem is, although we're still using old rollback functions, it
has quite a lot of problems to support the new behavior.


Can't rollback new convert image with new data chunk
Chunk level check can't handle newly allocated data chunk, which is not
1:1 mapped but completely valid in new behavior.
The last patch will enhance the test case to handle it.


Can't rollback real no-hole image
Since it assumes hole file extent as requirement.
And due to the possibility to enable no_holes halfway, btrfsck won't
report such error, since it's acceptable.


Too complex logical, and RW btrfs tree operations
In fact, considering how small data we need to rewrite (1M + 128K), we
don't really need to open btrfs read-write.
Just copy needed data and re-fill. Simple and easy.


Thanks Chandan, his report on failure of rollback leads to this rework.
And this is still small fixes, most of the patch are just deleting old codes.
All rollback test cases from btrfs-progs and fstests are passed.
If it'git los too large to be merged for v4.9, you could remove the following commit
from the branch, although they are completely OK, and just exposed the problem.
btrfs-progs: convert: Fix migrate_super_block() to work with 64k sectorsize
btrfs-progs: convert: Prevent accounting blocks beyond end of device","The last minute v2 update has a bug which forgets to call btrfs_release_path().
And the original 2nd patch is too large.
Changelog for v3:
Patch split, most patch will be less than 150 lines, with only one patch 214 lines.
Fix assert triggered by v2 last minite update
Fix duplicated bs= option in convert-test enhancement.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,19,2016-12-28T15:31:37Z,2017-01-30T09:23:27Z,2017-01-30T09:23:28Z,CLOSED,False,1,1,1,https://github.com/ebfe,Fix ASSERT() logic when backtrace is disabled,1,[],https://github.com/kdave/btrfs-progs/pull/19,https://github.com/ebfe,1,https://github.com/kdave/btrfs-progs/pull/19,"dd2c2a4 apparently flipped the logic
of ASSERT() for the BTRFS_DISABLE_BACKTRACE case which results in bogus
assertion failures if configured with --disable-backtrace.","dd2c2a4 apparently flipped the logic
of ASSERT() for the BTRFS_DISABLE_BACKTRACE case which results in bogus
assertion failures if configured with --disable-backtrace.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,19,2016-12-28T15:31:37Z,2017-01-30T09:23:27Z,2017-01-30T09:23:28Z,CLOSED,False,1,1,1,https://github.com/ebfe,Fix ASSERT() logic when backtrace is disabled,1,[],https://github.com/kdave/btrfs-progs/pull/19,https://github.com/ebfe,2,https://github.com/kdave/btrfs-progs/pull/19#issuecomment-276014039,"dd2c2a4 apparently flipped the logic
of ASSERT() for the BTRFS_DISABLE_BACKTRACE case which results in bogus
assertion failures if configured with --disable-backtrace.",Fixed in 4.9.1.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,20,2017-01-09T16:59:11Z,2017-01-17T15:54:10Z,2017-01-18T10:02:00Z,CLOSED,False,1,1,1,https://github.com/esteve,Fix typo,1,[],https://github.com/kdave/btrfs-progs/pull/20,https://github.com/esteve,1,https://github.com/kdave/btrfs-progs/pull/20,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,20,2017-01-09T16:59:11Z,2017-01-17T15:54:10Z,2017-01-18T10:02:00Z,CLOSED,False,1,1,1,https://github.com/esteve,Fix typo,1,[],https://github.com/kdave/btrfs-progs/pull/20,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/20#issuecomment-273209187,,"Applied, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,22,2017-01-27T17:08:33Z,2017-02-01T17:42:58Z,2017-02-15T17:36:10Z,CLOSED,False,1,1,1,https://github.com/jonboulle,btrfs-progs: docs: fix typo in receive man page,1,[],https://github.com/kdave/btrfs-progs/pull/22,https://github.com/jonboulle,1,https://github.com/kdave/btrfs-progs/pull/22,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,22,2017-01-27T17:08:33Z,2017-02-01T17:42:58Z,2017-02-15T17:36:10Z,CLOSED,False,1,1,1,https://github.com/jonboulle,btrfs-progs: docs: fix typo in receive man page,1,[],https://github.com/kdave/btrfs-progs/pull/22,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/22#issuecomment-276726855,,"Applied, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,24,2017-02-17T20:12:06Z,2017-02-20T12:51:04Z,2017-02-20T12:51:04Z,CLOSED,False,1,1,1,https://github.com/eriklogtenberg,docs: fix typo in btrfs-scrub manual page,1,[],https://github.com/kdave/btrfs-progs/pull/24,https://github.com/eriklogtenberg,1,https://github.com/kdave/btrfs-progs/pull/24,"Changed ""An"" to ""A"".
Signed-off-by: Erik Logtenberg erik@logtenberg.eu","Changed ""An"" to ""A"".
Signed-off-by: Erik Logtenberg erik@logtenberg.eu",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,24,2017-02-17T20:12:06Z,2017-02-20T12:51:04Z,2017-02-20T12:51:04Z,CLOSED,False,1,1,1,https://github.com/eriklogtenberg,docs: fix typo in btrfs-scrub manual page,1,[],https://github.com/kdave/btrfs-progs/pull/24,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/24#issuecomment-281071425,"Changed ""An"" to ""A"".
Signed-off-by: Erik Logtenberg erik@logtenberg.eu","Applied, thanks",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,25,2017-02-18T10:13:26Z,2017-02-20T12:51:58Z,2017-02-20T14:37:30Z,CLOSED,False,1,1,1,https://github.com/matthiaskrgr,btrfs-progs: readme: fix link to issue tracker on github.,1,[],https://github.com/kdave/btrfs-progs/pull/25,https://github.com/matthiaskrgr,1,https://github.com/kdave/btrfs-progs/pull/25,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,25,2017-02-18T10:13:26Z,2017-02-20T12:51:58Z,2017-02-20T14:37:30Z,CLOSED,False,1,1,1,https://github.com/matthiaskrgr,btrfs-progs: readme: fix link to issue tracker on github.,1,[],https://github.com/kdave/btrfs-progs/pull/25,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/25#issuecomment-281071619,,"Applied, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,26,2017-02-22T09:12:23Z,2017-02-22T10:35:14Z,2017-02-22T10:35:14Z,CLOSED,False,2,2,1,https://github.com/Omnikron13,2 typos in btrfs-quota.asciidoc,2,[],https://github.com/kdave/btrfs-progs/pull/26,https://github.com/Omnikron13,1,https://github.com/kdave/btrfs-progs/pull/26,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,26,2017-02-22T09:12:23Z,2017-02-22T10:35:14Z,2017-02-22T10:35:14Z,CLOSED,False,2,2,1,https://github.com/Omnikron13,2 typos in btrfs-quota.asciidoc,2,[],https://github.com/kdave/btrfs-progs/pull/26,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/26#issuecomment-281631598,,"Applied, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,28,2017-03-12T17:51:57Z,2017-03-13T12:01:44Z,2017-03-13T12:01:44Z,CLOSED,False,2,0,2,https://github.com/baruchsiach,btrfs-progs: add missing limits headers,1,[],https://github.com/kdave/btrfs-progs/pull/28,https://github.com/baruchsiach,1,https://github.com/kdave/btrfs-progs/pull/28,"Build under musl libc fails because of missing PATH_MAX and XATTR_NAME_MAX
macro declarations. Add the required headers.
Signed-off-by: Baruch Siach baruch@tkos.co.il","Build under musl libc fails because of missing PATH_MAX and XATTR_NAME_MAX
macro declarations. Add the required headers.
Signed-off-by: Baruch Siach baruch@tkos.co.il",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,28,2017-03-12T17:51:57Z,2017-03-13T12:01:44Z,2017-03-13T12:01:44Z,CLOSED,False,2,0,2,https://github.com/baruchsiach,btrfs-progs: add missing limits headers,1,[],https://github.com/kdave/btrfs-progs/pull/28,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/28#issuecomment-286088350,"Build under musl libc fails because of missing PATH_MAX and XATTR_NAME_MAX
macro declarations. Add the required headers.
Signed-off-by: Baruch Siach baruch@tkos.co.il","Applied, thanks. I'd like to add build verification in musl-based environment, will open an issue.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,36,2017-03-27T12:33:44Z,2017-10-10T15:53:32Z,2017-10-10T15:53:33Z,CLOSED,False,2662,771,33,https://github.com/kdave,Tracking: lowmem repair,37,['enhancement'],https://github.com/kdave/btrfs-progs/pull/36,https://github.com/kdave,1,https://github.com/kdave/btrfs-progs/pull/36,"Tracking branch for Su Yue, git://github.com/Damenly/btrfs-progs.git lowmem_repair
This patchset can repair errors found in fs tree in lowmem mode.
This patchset request includes:

Repair inode nbytes error.
Repair dir isize error.
Repair orpahan inode item.
Repair dir item/index missing/mismatch.
Repair inode ref missing/mismatch.
Repair inode item missing.
Repair inode nlink error.
Punch file extent hole.
Let test-fsck test cases which can be repaired in lowmem mode.

All cases have been tested except fsck-test/006 since it can't be
repaired in original mode.","Tracking branch for Su Yue, git://github.com/Damenly/btrfs-progs.git lowmem_repair
This patchset can repair errors found in fs tree in lowmem mode.
This patchset request includes:

Repair inode nbytes error.
Repair dir isize error.
Repair orpahan inode item.
Repair dir item/index missing/mismatch.
Repair inode ref missing/mismatch.
Repair inode item missing.
Repair inode nlink error.
Punch file extent hole.
Let test-fsck test cases which can be repaired in lowmem mode.

All cases have been tested except fsck-test/006 since it can't be
repaired in original mode.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,36,2017-03-27T12:33:44Z,2017-10-10T15:53:32Z,2017-10-10T15:53:33Z,CLOSED,False,2662,771,33,https://github.com/kdave,Tracking: lowmem repair,37,['enhancement'],https://github.com/kdave/btrfs-progs/pull/36,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/36#issuecomment-328832543,"Tracking branch for Su Yue, git://github.com/Damenly/btrfs-progs.git lowmem_repair
This patchset can repair errors found in fs tree in lowmem mode.
This patchset request includes:

Repair inode nbytes error.
Repair dir isize error.
Repair orpahan inode item.
Repair dir item/index missing/mismatch.
Repair inode ref missing/mismatch.
Repair inode item missing.
Repair inode nlink error.
Punch file extent hole.
Let test-fsck test cases which can be repaired in lowmem mode.

All cases have been tested except fsck-test/006 since it can't be
repaired in original mode.",Branch updated.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,36,2017-03-27T12:33:44Z,2017-10-10T15:53:32Z,2017-10-10T15:53:33Z,CLOSED,False,2662,771,33,https://github.com/kdave,Tracking: lowmem repair,37,['enhancement'],https://github.com/kdave/btrfs-progs/pull/36,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/36#issuecomment-328903367,"Tracking branch for Su Yue, git://github.com/Damenly/btrfs-progs.git lowmem_repair
This patchset can repair errors found in fs tree in lowmem mode.
This patchset request includes:

Repair inode nbytes error.
Repair dir isize error.
Repair orpahan inode item.
Repair dir item/index missing/mismatch.
Repair inode ref missing/mismatch.
Repair inode item missing.
Repair inode nlink error.
Punch file extent hole.
Let test-fsck test cases which can be repaired in lowmem mode.

All cases have been tested except fsck-test/006 since it can't be
repaired in original mode.",The latest version has been pushed to devel.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,39,2017-04-07T16:22:04Z,2017-04-07T16:43:56Z,2017-04-07T19:16:20Z,CLOSED,False,1,1,1,https://github.com/gbdoin,Fix typo,1,[],https://github.com/kdave/btrfs-progs/pull/39,https://github.com/gbdoin,1,https://github.com/kdave/btrfs-progs/pull/39,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,39,2017-04-07T16:22:04Z,2017-04-07T16:43:56Z,2017-04-07T19:16:20Z,CLOSED,False,1,1,1,https://github.com/gbdoin,Fix typo,1,[],https://github.com/kdave/btrfs-progs/pull/39,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/39#issuecomment-292588428,,"Applied, thanks. I wrote some changelog, let me know if you have objectios. I want to keep the level of ""formalities"", but for such a trivial typo I won't ask you to rework the branch.",True,{'THUMBS_UP': ['https://github.com/gbdoin']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,46,2017-06-03T17:32:32Z,2017-06-05T14:48:17Z,2017-06-05T14:48:17Z,CLOSED,False,1,1,1,https://github.com/lukaslueg,Trump docs,2,[],https://github.com/kdave/btrfs-progs/pull/46,https://github.com/lukaslueg,1,https://github.com/kdave/btrfs-progs/pull/46,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,46,2017-06-03T17:32:32Z,2017-06-05T14:48:17Z,2017-06-05T14:48:17Z,CLOSED,False,1,1,1,https://github.com/lukaslueg,Trump docs,2,[],https://github.com/kdave/btrfs-progs/pull/46,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/46#issuecomment-306206943,,"The media nonsense does not need to be stored in the git history, fixed in another way.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,48,2017-06-14T05:27:30Z,2017-06-19T13:31:11Z,2017-06-20T00:06:04Z,CLOSED,False,23,23,3,https://github.com/Kasijjuf,Expand confusing abbreviation in documentation,3,[],https://github.com/kdave/btrfs-progs/pull/48,https://github.com/Kasijjuf,1,https://github.com/kdave/btrfs-progs/pull/48,"While the command interpreter may be able to disambiguate
the meaning, the reader is not helped by being forced to do so.","While the command interpreter may be able to disambiguate
the meaning, the reader is not helped by being forced to do so.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,48,2017-06-14T05:27:30Z,2017-06-19T13:31:11Z,2017-06-20T00:06:04Z,CLOSED,False,23,23,3,https://github.com/Kasijjuf,Expand confusing abbreviation in documentation,3,[],https://github.com/kdave/btrfs-progs/pull/48,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/48#issuecomment-309440044,"While the command interpreter may be able to disambiguate
the meaning, the reader is not helped by being forced to do so.","Applied, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,51,2017-06-22T01:52:59Z,2017-06-26T12:31:56Z,2017-06-26T12:31:56Z,CLOSED,False,1,1,1,https://github.com/Kasijjuf,btrfs-progs: docs: Wrong section in ref to manpage,1,[],https://github.com/kdave/btrfs-progs/pull/51,https://github.com/Kasijjuf,1,https://github.com/kdave/btrfs-progs/pull/51,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,51,2017-06-22T01:52:59Z,2017-06-26T12:31:56Z,2017-06-26T12:31:56Z,CLOSED,False,1,1,1,https://github.com/Kasijjuf,btrfs-progs: docs: Wrong section in ref to manpage,1,[],https://github.com/kdave/btrfs-progs/pull/51,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/51#issuecomment-311045714,,"Applied, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,52,2017-06-22T18:18:27Z,2017-06-26T12:34:33Z,2017-06-26T12:34:33Z,CLOSED,False,6,6,4,https://github.com/Kasijjuf,btrfs-progs: docs: replace <dev> with <device>,1,[],https://github.com/kdave/btrfs-progs/pull/52,https://github.com/Kasijjuf,1,https://github.com/kdave/btrfs-progs/pull/52,"as discussed in #50
I believe this replaces all instances of <dev>. Please confirm.","as discussed in #50
I believe this replaces all instances of <dev>. Please confirm.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,52,2017-06-22T18:18:27Z,2017-06-26T12:34:33Z,2017-06-26T12:34:33Z,CLOSED,False,6,6,4,https://github.com/Kasijjuf,btrfs-progs: docs: replace <dev> with <device>,1,[],https://github.com/kdave/btrfs-progs/pull/52,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/52#issuecomment-311046249,"as discussed in #50
I believe this replaces all instances of <dev>. Please confirm.","Applied, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,55,2017-08-11T17:55:26Z,2017-09-25T16:38:40Z,2017-09-25T16:38:40Z,CLOSED,False,163,32,1,https://github.com/rot13,"btrfs-image sanitization speed-up for ""crc collisions"" mode",6,[],https://github.com/kdave/btrfs-progs/pull/55,https://github.com/rot13,1,https://github.com/kdave/btrfs-progs/pull/55,"This set of changes makes ""crc collisions"" sanitization nearly as fast as the ""random garbage"" mode, by running CRC32C in reverse to calculate collisions.","This set of changes makes ""crc collisions"" sanitization nearly as fast as the ""random garbage"" mode, by running CRC32C in reverse to calculate collisions.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,55,2017-08-11T17:55:26Z,2017-09-25T16:38:40Z,2017-09-25T16:38:40Z,CLOSED,False,163,32,1,https://github.com/rot13,"btrfs-image sanitization speed-up for ""crc collisions"" mode",6,[],https://github.com/kdave/btrfs-progs/pull/55,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/55#issuecomment-328560512,"This set of changes makes ""crc collisions"" sanitization nearly as fast as the ""random garbage"" mode, by running CRC32C in reverse to calculate collisions.","Thanks!
I've fixed up some minor style issues and added the Author and Signed-off-by tags to the changelog. I'd like to keep some formal trace of who authored the patches so I won't bug you to resubmit the whole patchset just to add your signed-off, please do so next time. You can read more about that in https://www.kernel.org/doc/html/latest/process/submitting-patches.html#sign-your-work-the-developer-s-certificate-of-origin .",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,55,2017-08-11T17:55:26Z,2017-09-25T16:38:40Z,2017-09-25T16:38:40Z,CLOSED,False,163,32,1,https://github.com/rot13,"btrfs-image sanitization speed-up for ""crc collisions"" mode",6,[],https://github.com/kdave/btrfs-progs/pull/55,https://github.com/rot13,3,https://github.com/kdave/btrfs-progs/pull/55#issuecomment-328634487,"This set of changes makes ""crc collisions"" sanitization nearly as fast as the ""random garbage"" mode, by running CRC32C in reverse to calculate collisions.","That's perfect, thank you very much. Sorry for the missing Signed-off-by. I blame the lack of time for not getting acquainted with submission rules.
Should I close the pull request now or leave it to you to close it? I'm not familiar with github customs either :/",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,55,2017-08-11T17:55:26Z,2017-09-25T16:38:40Z,2017-09-25T16:38:40Z,CLOSED,False,163,32,1,https://github.com/rot13,"btrfs-image sanitization speed-up for ""crc collisions"" mode",6,[],https://github.com/kdave/btrfs-progs/pull/55,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/55#issuecomment-328860860,"This set of changes makes ""crc collisions"" sanitization nearly as fast as the ""random garbage"" mode, by running CRC32C in reverse to calculate collisions.","No problem. Please keep it open, I have set some labels so I can track it until it gets released. We've started using github more and there's not much settled down yet, so we'll have to find out what'll work for both sides.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,55,2017-08-11T17:55:26Z,2017-09-25T16:38:40Z,2017-09-25T16:38:40Z,CLOSED,False,163,32,1,https://github.com/rot13,"btrfs-image sanitization speed-up for ""crc collisions"" mode",6,[],https://github.com/kdave/btrfs-progs/pull/55,https://github.com/kdave,5,https://github.com/kdave/btrfs-progs/pull/55#issuecomment-331939611,"This set of changes makes ""crc collisions"" sanitization nearly as fast as the ""random garbage"" mode, by running CRC32C in reverse to calculate collisions.",Released.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,61,2017-09-09T06:05:09Z,2017-09-11T14:35:59Z,2017-12-27T09:45:51Z,CLOSED,False,0,1,1,https://github.com/uli-heller,"Removed missing header file, fixes compilation error",1,[],https://github.com/kdave/btrfs-progs/pull/61,https://github.com/uli-heller,1,https://github.com/kdave/btrfs-progs/pull/61,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,61,2017-09-09T06:05:09Z,2017-09-11T14:35:59Z,2017-12-27T09:45:51Z,CLOSED,False,0,1,1,https://github.com/uli-heller,"Removed missing header file, fixes compilation error",1,[],https://github.com/kdave/btrfs-progs/pull/61,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/61#issuecomment-328549121,,"Merged, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,64,2017-09-12T12:47:49Z,2022-02-07T17:54:32Z,2022-02-07T17:54:33Z,CLOSED,False,2067,7,13,https://github.com/kdave,Tracking: offline scrub,16,[],https://github.com/kdave/btrfs-progs/pull/64,https://github.com/kdave,1,https://github.com/kdave/btrfs-progs/pull/64,"Bring the scrub capability to the userspace tools, so it's possible to scurb an unmounted filesystem. Note: current 'btrfs check --check-csums' does not do the same thing and will become possibly obsoleted by the offline scrub functionality.","Bring the scrub capability to the userspace tools, so it's possible to scurb an unmounted filesystem. Note: current 'btrfs check --check-csums' does not do the same thing and will become possibly obsoleted by the offline scrub functionality.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,64,2017-09-12T12:47:49Z,2022-02-07T17:54:32Z,2022-02-07T17:54:33Z,CLOSED,False,2067,7,13,https://github.com/kdave,Tracking: offline scrub,16,[],https://github.com/kdave/btrfs-progs/pull/64,https://github.com/Lakshmipathi,2,https://github.com/kdave/btrfs-progs/pull/64#issuecomment-328843499,"Bring the scrub capability to the userspace tools, so it's possible to scurb an unmounted filesystem. Note: current 'btrfs check --check-csums' does not do the same thing and will become possibly obsoleted by the offline scrub functionality.","Few  months back, tested this feature. Scripts and logs are available here, if further tests needed.
https://github.com/Lakshmipathi/btrfs_offline_scrub",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,64,2017-09-12T12:47:49Z,2022-02-07T17:54:32Z,2022-02-07T17:54:33Z,CLOSED,False,2067,7,13,https://github.com/kdave,Tracking: offline scrub,16,[],https://github.com/kdave/btrfs-progs/pull/64,https://github.com/gujx2017,3,https://github.com/kdave/btrfs-progs/pull/64#issuecomment-394619414,"Bring the scrub capability to the userspace tools, so it's possible to scurb an unmounted filesystem. Note: current 'btrfs check --check-csums' does not do the same thing and will become possibly obsoleted by the offline scrub functionality.","Rebase offline scrub to v4.16.1.
https://github.com/gujx2017/btrfs-progs/tree/offline-scrub_v4.16.1",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,64,2017-09-12T12:47:49Z,2022-02-07T17:54:32Z,2022-02-07T17:54:33Z,CLOSED,False,2067,7,13,https://github.com/kdave,Tracking: offline scrub,16,[],https://github.com/kdave/btrfs-progs/pull/64,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/64#issuecomment-1031750563,"Bring the scrub capability to the userspace tools, so it's possible to scurb an unmounted filesystem. Note: current 'btrfs check --check-csums' does not do the same thing and will become possibly obsoleted by the offline scrub functionality.","We may implement offline scrub, but we'll start from scratch as there have been too many changes since.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,65,2017-09-12T16:32:06Z,2017-10-06T16:52:44Z,2017-10-10T15:53:59Z,CLOSED,False,365,112,6,https://github.com/kdave,Tracking: extent buffer caching,7,['enhancement'],https://github.com/kdave/btrfs-progs/pull/65,https://github.com/kdave,1,https://github.com/kdave/btrfs-progs/pull/65,Add extent_buffer caching support. This will speedup check.,Add extent_buffer caching support. This will speedup check.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,65,2017-09-12T16:32:06Z,2017-10-06T16:52:44Z,2017-10-10T15:53:59Z,CLOSED,False,365,112,6,https://github.com/kdave,Tracking: extent buffer caching,7,['enhancement'],https://github.com/kdave/btrfs-progs/pull/65,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/65#issuecomment-328909129,Add extent_buffer caching support. This will speedup check.,Right now crashes on fsck/003-shift-offsets,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,65,2017-09-12T16:32:06Z,2017-10-06T16:52:44Z,2017-10-10T15:53:59Z,CLOSED,False,365,112,6,https://github.com/kdave,Tracking: extent buffer caching,7,['enhancement'],https://github.com/kdave/btrfs-progs/pull/65,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/65#issuecomment-334810679,Add extent_buffer caching support. This will speedup check.,Released in 4.13.2.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,66,2017-09-12T17:08:19Z,2017-12-07T19:16:23Z,2017-12-07T19:16:23Z,CLOSED,False,1296,855,9,https://github.com/kdave,Tracking: mkfs --rootdir rework (v3),11,['enhancement'],https://github.com/kdave/btrfs-progs/pull/66,https://github.com/kdave,1,https://github.com/kdave/btrfs-progs/pull/66,"The mkfs --rootdir uses own chunk allocation and writes to the forbidden areas. This patchset builds on top of existing  mkfs code. The behaviour regarding final image size may change, a fallback option for minimizing the result will be provided.","The mkfs --rootdir uses own chunk allocation and writes to the forbidden areas. This patchset builds on top of existing  mkfs code. The behaviour regarding final image size may change, a fallback option for minimizing the result will be provided.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,66,2017-09-12T17:08:19Z,2017-12-07T19:16:23Z,2017-12-07T19:16:23Z,CLOSED,False,1296,855,9,https://github.com/kdave,Tracking: mkfs --rootdir rework (v3),11,['enhancement'],https://github.com/kdave/btrfs-progs/pull/66,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/66#issuecomment-345817635,"The mkfs --rootdir uses own chunk allocation and writes to the forbidden areas. This patchset builds on top of existing  mkfs code. The behaviour regarding final image size may change, a fallback option for minimizing the result will be provided.",Updated to v3,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,66,2017-09-12T17:08:19Z,2017-12-07T19:16:23Z,2017-12-07T19:16:23Z,CLOSED,False,1296,855,9,https://github.com/kdave,Tracking: mkfs --rootdir rework (v3),11,['enhancement'],https://github.com/kdave/btrfs-progs/pull/66,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/66#issuecomment-347565829,"The mkfs --rootdir uses own chunk allocation and writes to the forbidden areas. This patchset builds on top of existing  mkfs code. The behaviour regarding final image size may change, a fallback option for minimizing the result will be provided.",Partially merged.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,66,2017-09-12T17:08:19Z,2017-12-07T19:16:23Z,2017-12-07T19:16:23Z,CLOSED,False,1296,855,9,https://github.com/kdave,Tracking: mkfs --rootdir rework (v3),11,['enhancement'],https://github.com/kdave/btrfs-progs/pull/66,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/66#issuecomment-350062087,"The mkfs --rootdir uses own chunk allocation and writes to the forbidden areas. This patchset builds on top of existing  mkfs code. The behaviour regarding final image size may change, a fallback option for minimizing the result will be provided.",Merged to devel.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,69,2017-10-01T19:22:46Z,2018-07-16T17:11:33Z,2019-03-18T19:19:01Z,CLOSED,False,155,66,8,https://github.com/speed47,Enhanced progress indicator,2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/69,https://github.com/speed47,1,https://github.com/kdave/btrfs-progs/pull/69,"I've been forking btrfs-progs locally in 2015 to add an enhanced progress indicator, as the current "".oOo.""-style progress indicator is not really helpful to see the check progression for a multi-Tb filesystem. I posted about it on the ML and it was added in the integration branch at some point, but was forgotten there (including by me) before being merged.
I rebased it against current master, and reworked it a bit to make it better than the 2015 version. The "".oOo."" progress indicator is replaced with a count of the walked items (depending on the ""thing"" being inspected, this way if the walks stops or there's an infinite loop somewhere, you'll notice), adds an elapsed time indicator, and a step counter (currently 7).
As code paths differ, it has been tested in normal and lowmem mode, and on FS with and without qgroups. It has also been tested under valgrind.
The first commit is a single-line fix on the task_period_start function I stumbled upon while creating this patch.
Here's how the output looks like on a 22 Tb 5-disk RAID1 FS:
# btrfs check -p /dev/mapper/luks-ST10000VN0004-XXXXXXXX
Opening filesystem to check...
Checking filesystem on /dev/mapper/luks-ST10000VN0004-XXXXXXXX
UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
[1/7] checking extents           (0:20:21 elapsed, 950958 items checked)
[2/7] checking root items        (0:01:29 elapsed, 15121 items checked)
[3/7] checking free space cache  (0:00:11 elapsed, 4928 items checked)
[4/7] checking fs roots          (0:51:31 elapsed, 600892 items checked)
[5/7] checking csums             (0:14:35 elapsed, 754522 items checked)
[6/7] checking root refs         (0:00:00 elapsed, 232 items checked)
[7/7] checking quota groups skipped (not enabled on this FS)
found 5286458060800 bytes used, no error found

Any comments about the patch are welcome (code-related or on the progress output itself).
If needed or wanted, I can also send it to the ML.","I've been forking btrfs-progs locally in 2015 to add an enhanced progress indicator, as the current "".oOo.""-style progress indicator is not really helpful to see the check progression for a multi-Tb filesystem. I posted about it on the ML and it was added in the integration branch at some point, but was forgotten there (including by me) before being merged.
I rebased it against current master, and reworked it a bit to make it better than the 2015 version. The "".oOo."" progress indicator is replaced with a count of the walked items (depending on the ""thing"" being inspected, this way if the walks stops or there's an infinite loop somewhere, you'll notice), adds an elapsed time indicator, and a step counter (currently 7).
As code paths differ, it has been tested in normal and lowmem mode, and on FS with and without qgroups. It has also been tested under valgrind.
The first commit is a single-line fix on the task_period_start function I stumbled upon while creating this patch.
Here's how the output looks like on a 22 Tb 5-disk RAID1 FS:
# btrfs check -p /dev/mapper/luks-ST10000VN0004-XXXXXXXX
Opening filesystem to check...
Checking filesystem on /dev/mapper/luks-ST10000VN0004-XXXXXXXX
UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
[1/7] checking extents           (0:20:21 elapsed, 950958 items checked)
[2/7] checking root items        (0:01:29 elapsed, 15121 items checked)
[3/7] checking free space cache  (0:00:11 elapsed, 4928 items checked)
[4/7] checking fs roots          (0:51:31 elapsed, 600892 items checked)
[5/7] checking csums             (0:14:35 elapsed, 754522 items checked)
[6/7] checking root refs         (0:00:00 elapsed, 232 items checked)
[7/7] checking quota groups skipped (not enabled on this FS)
found 5286458060800 bytes used, no error found

Any comments about the patch are welcome (code-related or on the progress output itself).
If needed or wanted, I can also send it to the ML.",True,"{'THUMBS_UP': ['https://github.com/Lakshmipathi', 'https://github.com/Damenly']}"
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,69,2017-10-01T19:22:46Z,2018-07-16T17:11:33Z,2019-03-18T19:19:01Z,CLOSED,False,155,66,8,https://github.com/speed47,Enhanced progress indicator,2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/69,https://github.com/speed47,2,https://github.com/kdave/btrfs-progs/pull/69#issuecomment-364663452,"I've been forking btrfs-progs locally in 2015 to add an enhanced progress indicator, as the current "".oOo.""-style progress indicator is not really helpful to see the check progression for a multi-Tb filesystem. I posted about it on the ML and it was added in the integration branch at some point, but was forgotten there (including by me) before being merged.
I rebased it against current master, and reworked it a bit to make it better than the 2015 version. The "".oOo."" progress indicator is replaced with a count of the walked items (depending on the ""thing"" being inspected, this way if the walks stops or there's an infinite loop somewhere, you'll notice), adds an elapsed time indicator, and a step counter (currently 7).
As code paths differ, it has been tested in normal and lowmem mode, and on FS with and without qgroups. It has also been tested under valgrind.
The first commit is a single-line fix on the task_period_start function I stumbled upon while creating this patch.
Here's how the output looks like on a 22 Tb 5-disk RAID1 FS:
# btrfs check -p /dev/mapper/luks-ST10000VN0004-XXXXXXXX
Opening filesystem to check...
Checking filesystem on /dev/mapper/luks-ST10000VN0004-XXXXXXXX
UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
[1/7] checking extents           (0:20:21 elapsed, 950958 items checked)
[2/7] checking root items        (0:01:29 elapsed, 15121 items checked)
[3/7] checking free space cache  (0:00:11 elapsed, 4928 items checked)
[4/7] checking fs roots          (0:51:31 elapsed, 600892 items checked)
[5/7] checking csums             (0:14:35 elapsed, 754522 items checked)
[6/7] checking root refs         (0:00:00 elapsed, 232 items checked)
[7/7] checking quota groups skipped (not enabled on this FS)
found 5286458060800 bytes used, no error found

Any comments about the patch are welcome (code-related or on the progress output itself).
If needed or wanted, I can also send it to the ML.","Rebased the patch against latest master to fix conflicts.
I also made a 20 seconds terminal recording of what it looks like, the FS is a test one of only 8 Gb, so the btrfs check is of course pretty fast, and that's not for such tiny FS that the progress indicator is really useful, but it still gives a rough idea of the output : https://asciinema.org/a/YkpaGGIih3WSe0mWtnt4qVACd",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,69,2017-10-01T19:22:46Z,2018-07-16T17:11:33Z,2019-03-18T19:19:01Z,CLOSED,False,155,66,8,https://github.com/speed47,Enhanced progress indicator,2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/69,https://github.com/Damenly,3,https://github.com/kdave/btrfs-progs/pull/69#issuecomment-402378724,"I've been forking btrfs-progs locally in 2015 to add an enhanced progress indicator, as the current "".oOo.""-style progress indicator is not really helpful to see the check progression for a multi-Tb filesystem. I posted about it on the ML and it was added in the integration branch at some point, but was forgotten there (including by me) before being merged.
I rebased it against current master, and reworked it a bit to make it better than the 2015 version. The "".oOo."" progress indicator is replaced with a count of the walked items (depending on the ""thing"" being inspected, this way if the walks stops or there's an infinite loop somewhere, you'll notice), adds an elapsed time indicator, and a step counter (currently 7).
As code paths differ, it has been tested in normal and lowmem mode, and on FS with and without qgroups. It has also been tested under valgrind.
The first commit is a single-line fix on the task_period_start function I stumbled upon while creating this patch.
Here's how the output looks like on a 22 Tb 5-disk RAID1 FS:
# btrfs check -p /dev/mapper/luks-ST10000VN0004-XXXXXXXX
Opening filesystem to check...
Checking filesystem on /dev/mapper/luks-ST10000VN0004-XXXXXXXX
UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
[1/7] checking extents           (0:20:21 elapsed, 950958 items checked)
[2/7] checking root items        (0:01:29 elapsed, 15121 items checked)
[3/7] checking free space cache  (0:00:11 elapsed, 4928 items checked)
[4/7] checking fs roots          (0:51:31 elapsed, 600892 items checked)
[5/7] checking csums             (0:14:35 elapsed, 754522 items checked)
[6/7] checking root refs         (0:00:00 elapsed, 232 items checked)
[7/7] checking quota groups skipped (not enabled on this FS)
found 5286458060800 bytes used, no error found

Any comments about the patch are welcome (code-related or on the progress output itself).
If needed or wanted, I can also send it to the ML.","Hi, @speed47  your patches look nice to me.
Since cmds-check.c was split into files under btrfs-progs/check/, could you rebase them to master again and send them to ML. So we can have some reviews.
Thanks!",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,69,2017-10-01T19:22:46Z,2018-07-16T17:11:33Z,2019-03-18T19:19:01Z,CLOSED,False,155,66,8,https://github.com/speed47,Enhanced progress indicator,2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/69,https://github.com/speed47,4,https://github.com/kdave/btrfs-progs/pull/69#issuecomment-402536714,"I've been forking btrfs-progs locally in 2015 to add an enhanced progress indicator, as the current "".oOo.""-style progress indicator is not really helpful to see the check progression for a multi-Tb filesystem. I posted about it on the ML and it was added in the integration branch at some point, but was forgotten there (including by me) before being merged.
I rebased it against current master, and reworked it a bit to make it better than the 2015 version. The "".oOo."" progress indicator is replaced with a count of the walked items (depending on the ""thing"" being inspected, this way if the walks stops or there's an infinite loop somewhere, you'll notice), adds an elapsed time indicator, and a step counter (currently 7).
As code paths differ, it has been tested in normal and lowmem mode, and on FS with and without qgroups. It has also been tested under valgrind.
The first commit is a single-line fix on the task_period_start function I stumbled upon while creating this patch.
Here's how the output looks like on a 22 Tb 5-disk RAID1 FS:
# btrfs check -p /dev/mapper/luks-ST10000VN0004-XXXXXXXX
Opening filesystem to check...
Checking filesystem on /dev/mapper/luks-ST10000VN0004-XXXXXXXX
UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
[1/7] checking extents           (0:20:21 elapsed, 950958 items checked)
[2/7] checking root items        (0:01:29 elapsed, 15121 items checked)
[3/7] checking free space cache  (0:00:11 elapsed, 4928 items checked)
[4/7] checking fs roots          (0:51:31 elapsed, 600892 items checked)
[5/7] checking csums             (0:14:35 elapsed, 754522 items checked)
[6/7] checking root refs         (0:00:00 elapsed, 232 items checked)
[7/7] checking quota groups skipped (not enabled on this FS)
found 5286458060800 bytes used, no error found

Any comments about the patch are welcome (code-related or on the progress output itself).
If needed or wanted, I can also send it to the ML.","Rebased the patch against current master.
I'll post to the ML shortly!",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,69,2017-10-01T19:22:46Z,2018-07-16T17:11:33Z,2019-03-18T19:19:01Z,CLOSED,False,155,66,8,https://github.com/speed47,Enhanced progress indicator,2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/69,https://github.com/kdave,5,https://github.com/kdave/btrfs-progs/pull/69#issuecomment-405318823,"I've been forking btrfs-progs locally in 2015 to add an enhanced progress indicator, as the current "".oOo.""-style progress indicator is not really helpful to see the check progression for a multi-Tb filesystem. I posted about it on the ML and it was added in the integration branch at some point, but was forgotten there (including by me) before being merged.
I rebased it against current master, and reworked it a bit to make it better than the 2015 version. The "".oOo."" progress indicator is replaced with a count of the walked items (depending on the ""thing"" being inspected, this way if the walks stops or there's an infinite loop somewhere, you'll notice), adds an elapsed time indicator, and a step counter (currently 7).
As code paths differ, it has been tested in normal and lowmem mode, and on FS with and without qgroups. It has also been tested under valgrind.
The first commit is a single-line fix on the task_period_start function I stumbled upon while creating this patch.
Here's how the output looks like on a 22 Tb 5-disk RAID1 FS:
# btrfs check -p /dev/mapper/luks-ST10000VN0004-XXXXXXXX
Opening filesystem to check...
Checking filesystem on /dev/mapper/luks-ST10000VN0004-XXXXXXXX
UUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
[1/7] checking extents           (0:20:21 elapsed, 950958 items checked)
[2/7] checking root items        (0:01:29 elapsed, 15121 items checked)
[3/7] checking free space cache  (0:00:11 elapsed, 4928 items checked)
[4/7] checking fs roots          (0:51:31 elapsed, 600892 items checked)
[5/7] checking csums             (0:14:35 elapsed, 754522 items checked)
[6/7] checking root refs         (0:00:00 elapsed, 232 items checked)
[7/7] checking quota groups skipped (not enabled on this FS)
found 5286458060800 bytes used, no error found

Any comments about the patch are welcome (code-related or on the progress output itself).
If needed or wanted, I can also send it to the ML.","Merged to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,71,2017-10-07T06:56:26Z,2017-10-07T06:57:03Z,2017-10-07T07:10:36Z,CLOSED,False,0,0,0,https://github.com/Lakshmipathi,Merge pull request #1 from kdave/master,1,[],https://github.com/kdave/btrfs-progs/pull/71,https://github.com/Lakshmipathi,1,https://github.com/kdave/btrfs-progs/pull/71,update,update,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,71,2017-10-07T06:56:26Z,2017-10-07T06:57:03Z,2017-10-07T07:10:36Z,CLOSED,False,0,0,0,https://github.com/Lakshmipathi,Merge pull request #1 from kdave/master,1,[],https://github.com/kdave/btrfs-progs/pull/71,https://github.com/Lakshmipathi,2,https://github.com/kdave/btrfs-progs/pull/71#issuecomment-334915736,update,"open (then closed) PR by mistake, please ignore.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,73,2017-10-24T22:56:01Z,2017-11-20T16:53:20Z,2017-11-20T16:53:20Z,CLOSED,False,5,0,1,https://github.com/firegurafiku,btrfs-progs: defrag: add a brief warning about ref-link breakage,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/73,https://github.com/firegurafiku,1,https://github.com/kdave/btrfs-progs/pull/73,"There is a warning in btrfs-filesystem(8) saying that running 'defrag'
in Linux will almost certainly break ref-links, with much data potentially
being physically duplicated.

However, many users tend to read man pages *after* trying to run things
on their own risk and may miss this important information. This commit
adds a brief copy of this warning into the command built-in help message
where it has good chances to be spotted before user is stuck with
a crowded filesystem.

(Signed-off-by)

If think it's a documentation-only change, so I decided to skip the mailing list routine. I'm new to Btrfs; in case I misunderstood something, feel free to reject the PR.
BTW, could someone please answer https://unix.stackexchange.com/questions/400225?","There is a warning in btrfs-filesystem(8) saying that running 'defrag'
in Linux will almost certainly break ref-links, with much data potentially
being physically duplicated.

However, many users tend to read man pages *after* trying to run things
on their own risk and may miss this important information. This commit
adds a brief copy of this warning into the command built-in help message
where it has good chances to be spotted before user is stuck with
a crowded filesystem.

(Signed-off-by)

If think it's a documentation-only change, so I decided to skip the mailing list routine. I'm new to Btrfs; in case I misunderstood something, feel free to reject the PR.
BTW, could someone please answer https://unix.stackexchange.com/questions/400225?",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,73,2017-10-24T22:56:01Z,2017-11-20T16:53:20Z,2017-11-20T16:53:20Z,CLOSED,False,5,0,1,https://github.com/firegurafiku,btrfs-progs: defrag: add a brief warning about ref-link breakage,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/73,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/73#issuecomment-339319894,"There is a warning in btrfs-filesystem(8) saying that running 'defrag'
in Linux will almost certainly break ref-links, with much data potentially
being physically duplicated.

However, many users tend to read man pages *after* trying to run things
on their own risk and may miss this important information. This commit
adds a brief copy of this warning into the command built-in help message
where it has good chances to be spotted before user is stuck with
a crowded filesystem.

(Signed-off-by)

If think it's a documentation-only change, so I decided to skip the mailing list routine. I'm new to Btrfs; in case I misunderstood something, feel free to reject the PR.
BTW, could someone please answer https://unix.stackexchange.com/questions/400225?","Pull requests are ok for documentation (this is mentioned in README, I could make it more visible though). The text added to the command help looks ok, short enough and points to the manual page. Merged to devel.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,73,2017-10-24T22:56:01Z,2017-11-20T16:53:20Z,2017-11-20T16:53:20Z,CLOSED,False,5,0,1,https://github.com/firegurafiku,btrfs-progs: defrag: add a brief warning about ref-link breakage,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/73,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/73#issuecomment-345757491,"There is a warning in btrfs-filesystem(8) saying that running 'defrag'
in Linux will almost certainly break ref-links, with much data potentially
being physically duplicated.

However, many users tend to read man pages *after* trying to run things
on their own risk and may miss this important information. This commit
adds a brief copy of this warning into the command built-in help message
where it has good chances to be spotted before user is stuck with
a crowded filesystem.

(Signed-off-by)

If think it's a documentation-only change, so I decided to skip the mailing list routine. I'm new to Btrfs; in case I misunderstood something, feel free to reject the PR.
BTW, could someone please answer https://unix.stackexchange.com/questions/400225?",Released.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,75,2017-10-27T11:51:36Z,2017-10-27T11:53:32Z,2017-10-27T11:53:32Z,CLOSED,False,4007,1908,38,https://github.com/kdave,test,62,[],https://github.com/kdave/btrfs-progs/pull/75,https://github.com/kdave,1,https://github.com/kdave/btrfs-progs/pull/75,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,75,2017-10-27T11:51:36Z,2017-10-27T11:53:32Z,2017-10-27T11:53:32Z,CLOSED,False,4007,1908,38,https://github.com/kdave,test,62,[],https://github.com/kdave/btrfs-progs/pull/75,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/75#issuecomment-339950750,,End of test.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,80,2017-11-26T05:53:06Z,2017-11-27T18:00:05Z,2017-11-27T18:00:05Z,CLOSED,False,4,2,1,https://github.com/TopView,Update btrfs-subvolume.asciidoc,2,[],https://github.com/kdave/btrfs-progs/pull/80,https://github.com/TopView,1,https://github.com/kdave/btrfs-progs/pull/80,"To simplify, I suggest moving the 'writable/readonly' issue only to the -r line, instead of having it introduced in two places.","To simplify, I suggest moving the 'writable/readonly' issue only to the -r line, instead of having it introduced in two places.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,80,2017-11-26T05:53:06Z,2017-11-27T18:00:05Z,2017-11-27T18:00:05Z,CLOSED,False,4,2,1,https://github.com/TopView,Update btrfs-subvolume.asciidoc,2,[],https://github.com/kdave/btrfs-progs/pull/80,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/80#issuecomment-347269196,"To simplify, I suggest moving the 'writable/readonly' issue only to the -r line, instead of having it introduced in two places.","Merged, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,81,2017-11-29T01:15:03Z,2017-12-07T19:03:04Z,2017-12-07T19:03:04Z,CLOSED,False,25,21,2,https://github.com/Faalagorn,"Fixed typo: ""allways"" to ""always""",2,[],https://github.com/kdave/btrfs-progs/pull/81,https://github.com/Faalagorn,1,https://github.com/kdave/btrfs-progs/pull/81,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,81,2017-11-29T01:15:03Z,2017-12-07T19:03:04Z,2017-12-07T19:03:04Z,CLOSED,False,25,21,2,https://github.com/Faalagorn,"Fixed typo: ""allways"" to ""always""",2,[],https://github.com/kdave/btrfs-progs/pull/81,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/81#issuecomment-350062947,,"Merged, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,83,2017-12-15T20:05:14Z,,2020-10-02T18:10:59Z,OPEN,False,15,12,2,https://github.com/Nefelim4ag,Btrfs-progrs: make defrag -c idempotent operation,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/83,https://github.com/Nefelim4ag,1,https://github.com/kdave/btrfs-progs/pull/83,"Currently -c assume that user want compress data,
but sometimes user want uncompress data.
defrag_ioctl understood comrpession type and BTRFS_DEFRAG_RANGE_COMPRESS.
Use BTRFS_DEFRAG_RANGE_COMPRESS as signal that caller want
change compression type, and set compression type to none.
So allow do:
-cnone or -cno
Signed-off-by: Timofey Titovets nefelim4ag@gmail.com","Currently -c assume that user want compress data,
but sometimes user want uncompress data.
defrag_ioctl understood comrpession type and BTRFS_DEFRAG_RANGE_COMPRESS.
Use BTRFS_DEFRAG_RANGE_COMPRESS as signal that caller want
change compression type, and set compression type to none.
So allow do:
-cnone or -cno
Signed-off-by: Timofey Titovets nefelim4ag@gmail.com",True,{'THUMBS_UP': ['https://github.com/thopiekar']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,83,2017-12-15T20:05:14Z,,2020-10-02T18:10:59Z,OPEN,False,15,12,2,https://github.com/Nefelim4ag,Btrfs-progrs: make defrag -c idempotent operation,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/83,https://github.com/Nefelim4ag,2,https://github.com/kdave/btrfs-progs/pull/83#issuecomment-352099473,"Currently -c assume that user want compress data,
but sometimes user want uncompress data.
defrag_ioctl understood comrpession type and BTRFS_DEFRAG_RANGE_COMPRESS.
Use BTRFS_DEFRAG_RANGE_COMPRESS as signal that caller want
change compression type, and set compression type to none.
So allow do:
-cnone or -cno
Signed-off-by: Timofey Titovets nefelim4ag@gmail.com","That need small in kernel updates to work (I testing patches),
the base idea is to use BTRFS_DEFRAG_RANGE_COMPRESS as flag ""we want change compression type"", instead of use compress_type for that.
Kernel part: https://www.mail-archive.com/linux-btrfs@vger.kernel.org/msg71222.html
(@@ -1363,7 +1362,7 @@ need drop of compress_type args, to not conflict with mainline).",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,86,2018-01-22T18:28:45Z,2018-01-30T18:42:53Z,2018-03-16T16:57:08Z,CLOSED,False,1,1,1,https://github.com/KaiSforza,docs: Fix typo in btrfs-filesystem manual.,1,[],https://github.com/kdave/btrfs-progs/pull/86,https://github.com/KaiSforza,1,https://github.com/kdave/btrfs-progs/pull/86,Signed-off-by: William Giokas 1007380@gmail.com,Signed-off-by: William Giokas 1007380@gmail.com,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,86,2018-01-22T18:28:45Z,2018-01-30T18:42:53Z,2018-03-16T16:57:08Z,CLOSED,False,1,1,1,https://github.com/KaiSforza,docs: Fix typo in btrfs-filesystem manual.,1,[],https://github.com/kdave/btrfs-progs/pull/86,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/86#issuecomment-361692841,Signed-off-by: William Giokas 1007380@gmail.com,"Applied, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,95,2018-02-14T08:17:49Z,2018-02-15T12:31:50Z,2018-05-08T06:12:03Z,CLOSED,False,168,33,13,https://github.com/adam900710,Asan fixes,7,[],https://github.com/kdave/btrfs-progs/pull/95,https://github.com/adam900710,1,https://github.com/kdave/btrfs-progs/pull/95,"Asan fixes for all the problems described at #92.
Rebased to devel branch, so the first patch may be a little different than the one in maillist, which is based on v4.15.","Asan fixes for all the problems described at #92.
Rebased to devel branch, so the first patch may be a little different than the one in maillist, which is based on v4.15.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,95,2018-02-14T08:17:49Z,2018-02-15T12:31:50Z,2018-05-08T06:12:03Z,CLOSED,False,168,33,13,https://github.com/adam900710,Asan fixes,7,[],https://github.com/kdave/btrfs-progs/pull/95,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/95#issuecomment-365913740,"Asan fixes for all the problems described at #92.
Rebased to devel branch, so the first patch may be a little different than the one in maillist, which is based on v4.15.","Merged, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,98,2018-02-17T15:40:20Z,2018-02-19T18:12:01Z,2018-03-21T18:10:02Z,CLOSED,False,6,0,1,https://github.com/digint,btrfs-progs: prevent incorrect use of subvol_strip_mountpoint,1,[],https://github.com/kdave/btrfs-progs/pull/98,https://github.com/digint,1,https://github.com/kdave/btrfs-progs/pull/98,"Add additional bound checks to prevent memory corruption on incorrect
usage of subvol_strip_mountpoint. Assert sane return value by properly
comparing the mount point to the full_path before stripping it off.
Mitigates issue: ""btrfs send -p"" fails if source and parent subvolumes
are on different mountpoints (memory corruption):
https://github.com/kdave/btrfs-progs/issues/96

Note that this does not properly fix this bug, but prevents a possible
security issue by unexpected usage of ""btrfs send -p"".
Signed-off-by: Axel Burri axel@tty0.ch","Add additional bound checks to prevent memory corruption on incorrect
usage of subvol_strip_mountpoint. Assert sane return value by properly
comparing the mount point to the full_path before stripping it off.
Mitigates issue: ""btrfs send -p"" fails if source and parent subvolumes
are on different mountpoints (memory corruption):
https://github.com/kdave/btrfs-progs/issues/96

Note that this does not properly fix this bug, but prevents a possible
security issue by unexpected usage of ""btrfs send -p"".
Signed-off-by: Axel Burri axel@tty0.ch",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,98,2018-02-17T15:40:20Z,2018-02-19T18:12:01Z,2018-03-21T18:10:02Z,CLOSED,False,6,0,1,https://github.com/digint,btrfs-progs: prevent incorrect use of subvol_strip_mountpoint,1,[],https://github.com/kdave/btrfs-progs/pull/98,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/98#issuecomment-366768588,"Add additional bound checks to prevent memory corruption on incorrect
usage of subvol_strip_mountpoint. Assert sane return value by properly
comparing the mount point to the full_path before stripping it off.
Mitigates issue: ""btrfs send -p"" fails if source and parent subvolumes
are on different mountpoints (memory corruption):
https://github.com/kdave/btrfs-progs/issues/96

Note that this does not properly fix this bug, but prevents a possible
security issue by unexpected usage of ""btrfs send -p"".
Signed-off-by: Axel Burri axel@tty0.ch","Applied, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,105,2018-03-11T17:12:38Z,2018-03-19T13:56:42Z,2018-03-19T13:56:53Z,CLOSED,False,1,1,1,https://github.com/Alexander198961,Fixed https://bugzilla.kernel.org/show_bug.cgi?id=199071,1,[],https://github.com/kdave/btrfs-progs/pull/105,https://github.com/Alexander198961,1,https://github.com/kdave/btrfs-progs/pull/105,"The change will fix 199071 and  now After this commit:
https://git.kernel.org/pub/scm/fs/ext2/e2fsprogs.git/commit/?id=6a081f6d2a5cff0f5a077065aab39901d54bfb61
we will have e->e_value_inum  not e->e_value_block for newer  e2fsprogs so this fix will make it compatible with e2fsprogs and resolve compile error","The change will fix 199071 and  now After this commit:
https://git.kernel.org/pub/scm/fs/ext2/e2fsprogs.git/commit/?id=6a081f6d2a5cff0f5a077065aab39901d54bfb61
we will have e->e_value_inum  not e->e_value_block for newer  e2fsprogs so this fix will make it compatible with e2fsprogs and resolve compile error",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,105,2018-03-11T17:12:38Z,2018-03-19T13:56:42Z,2018-03-19T13:56:53Z,CLOSED,False,1,1,1,https://github.com/Alexander198961,Fixed https://bugzilla.kernel.org/show_bug.cgi?id=199071,1,[],https://github.com/kdave/btrfs-progs/pull/105,https://github.com/Alexander198961,2,https://github.com/kdave/btrfs-progs/pull/105#issuecomment-372255949,"The change will fix 199071 and  now After this commit:
https://git.kernel.org/pub/scm/fs/ext2/e2fsprogs.git/commit/?id=6a081f6d2a5cff0f5a077065aab39901d54bfb61
we will have e->e_value_inum  not e->e_value_block for newer  e2fsprogs so this fix will make it compatible with e2fsprogs and resolve compile error",I will need add backwards compatible with older e2fsprogs,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,105,2018-03-11T17:12:38Z,2018-03-19T13:56:42Z,2018-03-19T13:56:53Z,CLOSED,False,1,1,1,https://github.com/Alexander198961,Fixed https://bugzilla.kernel.org/show_bug.cgi?id=199071,1,[],https://github.com/kdave/btrfs-progs/pull/105,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/105#issuecomment-374220095,"The change will fix 199071 and  now After this commit:
https://git.kernel.org/pub/scm/fs/ext2/e2fsprogs.git/commit/?id=6a081f6d2a5cff0f5a077065aab39901d54bfb61
we will have e->e_value_inum  not e->e_value_block for newer  e2fsprogs so this fix will make it compatible with e2fsprogs and resolve compile error","Your fix would break on < 1.44.0, so we cannot copy the change from e2fsprogs. There's a different fix that simply drops the variable, referenced in #110.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,106,2018-03-12T07:16:59Z,2018-03-13T00:23:15Z,2018-05-08T06:11:59Z,CLOSED,False,4881,4665,15,https://github.com/adam900710,Remaing check code split,15,['enhancement'],https://github.com/kdave/btrfs-progs/pull/106,https://github.com/adam900710,1,https://github.com/kdave/btrfs-progs/pull/106,"The head is d0deb7b, with the new inline extent size fix applied as the first patch.","The head is d0deb7b, with the new inline extent size fix applied as the first patch.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,106,2018-03-12T07:16:59Z,2018-03-13T00:23:15Z,2018-05-08T06:11:59Z,CLOSED,False,4881,4665,15,https://github.com/adam900710,Remaing check code split,15,['enhancement'],https://github.com/kdave/btrfs-progs/pull/106,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/106#issuecomment-372398456,"The head is d0deb7b, with the new inline extent size fix applied as the first patch.","with the new inline extent size fix applied as the first patch

Please don't do that, it does not make sense to revert a patch that's still in devel and breaks tests. I've folded the two patches together. The rest looks ok.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,106,2018-03-12T07:16:59Z,2018-03-13T00:23:15Z,2018-05-08T06:11:59Z,CLOSED,False,4881,4665,15,https://github.com/adam900710,Remaing check code split,15,['enhancement'],https://github.com/kdave/btrfs-progs/pull/106,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/106#issuecomment-372403361,"The head is d0deb7b, with the new inline extent size fix applied as the first patch.",And the patch also breaks tests-misc/002-uuid-rewrite. I'll move that out of devel for now so I can merge the 3 patches.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,106,2018-03-12T07:16:59Z,2018-03-13T00:23:15Z,2018-05-08T06:11:59Z,CLOSED,False,4881,4665,15,https://github.com/adam900710,Remaing check code split,15,['enhancement'],https://github.com/kdave/btrfs-progs/pull/106,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/106#issuecomment-372404165,"The head is d0deb7b, with the new inline extent size fix applied as the first patch.","Aha, no there's the dependency so all patches have to be merged at once. Please send me something that passes the relevant tests.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,106,2018-03-12T07:16:59Z,2018-03-13T00:23:15Z,2018-05-08T06:11:59Z,CLOSED,False,4881,4665,15,https://github.com/adam900710,Remaing check code split,15,['enhancement'],https://github.com/kdave/btrfs-progs/pull/106,https://github.com/adam900710,5,https://github.com/kdave/btrfs-progs/pull/106#issuecomment-372505523,"The head is d0deb7b, with the new inline extent size fix applied as the first patch.","Didn't expect misc would be related, sorry for that.
I just ran check and convert and nothing wrong found.
And as you can see, such code split is very dependent on the check code base.
Folding code into previous patch would make things pretty hard to merge.
Would you please provide one stable HEAD for me to work?
Current rebase is all done manually as the moved code can't be renewed automatically.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,106,2018-03-12T07:16:59Z,2018-03-13T00:23:15Z,2018-05-08T06:11:59Z,CLOSED,False,4881,4665,15,https://github.com/adam900710,Remaing check code split,15,['enhancement'],https://github.com/kdave/btrfs-progs/pull/106,https://github.com/adam900710,6,https://github.com/kdave/btrfs-progs/pull/106#issuecomment-372512761,"The head is d0deb7b, with the new inline extent size fix applied as the first patch.","Problem located.
Since we don't modify BTRFS_MAX_INLINE_DATA_SIZE() macro in the latest fix, we need to modify all callers to do correct check.
Extra check in mkfs/rootdir.c and convert/source-reiserfs.c is missing, leading to such problem.
I'd like to push the fix first and halt the split for a while.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,106,2018-03-12T07:16:59Z,2018-03-13T00:23:15Z,2018-05-08T06:11:59Z,CLOSED,False,4881,4665,15,https://github.com/adam900710,Remaing check code split,15,['enhancement'],https://github.com/kdave/btrfs-progs/pull/106,https://github.com/kdave,7,https://github.com/kdave/btrfs-progs/pull/106#issuecomment-374218945,"The head is d0deb7b, with the new inline extent size fix applied as the first patch.",Stable head for development is hard to achieve when there are so many things in flux. The fix and code split came at a bad time. Right now I want to do a bugfix release so the code split is going to be postponed.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,106,2018-03-12T07:16:59Z,2018-03-13T00:23:15Z,2018-05-08T06:11:59Z,CLOSED,False,4881,4665,15,https://github.com/adam900710,Remaing check code split,15,['enhancement'],https://github.com/kdave/btrfs-progs/pull/106,https://github.com/adam900710,8,https://github.com/kdave/btrfs-progs/pull/106#issuecomment-374228702,"The head is d0deb7b, with the new inline extent size fix applied as the first patch.","I'm fine with that.

I could wait for a less active cycle for the remaining part.

2018年3月19日 21:53，""kdave"" <notifications@github.com>写道：
…
 Stable head for development is hard to achieve when there are so many
 things in flux. The fix and code split came at a bad time. Right now I want
 to do a bugfix release so the code split is going to be postponed.

 —
 You are receiving this because you modified the open/close state.
 Reply to this email directly, view it on GitHub
 <#106 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAcF7bH-_3plZCUejeZyPmsPuU80jdCRks5tf7hLgaJpZM4SmKiE>
 .",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,108,2018-03-13T01:58:03Z,2018-03-21T18:01:54Z,2018-05-08T06:11:38Z,CLOSED,False,155,4,8,https://github.com/adam900710,Invalid inline extent fixes,7,[],https://github.com/kdave/btrfs-progs/pull/108,https://github.com/adam900710,1,https://github.com/kdave/btrfs-progs/pull/108,"The patch is based on v4.15.1, and is designed to replace the old patch
in devel branch.
Kernel doesn't support dropping range inside inline extent, and prevents
such thing happening by limiting max inline extent size to
min(max_inline, sectorsize - 1) in cow_file_range_inline().
However btrfs-progs only inherit the BTRFS_MAX_INLINE_DATA_SIZE() macro,
which doesn't have sectorsize check.
And since btrfs-progs defaults to 16K nodesize, above macro allows large
inline extent over 15K size.
This leads to unexpected kernel behavior.
The bug exists in several parts of btrfs-progs, any tool which creates
file extent is involved, including:

btrfs-convert
mkfs --rootdir

This patchset fixes the problems in convert (both ext2 and reiserfs),
mkfs --rootdir, then add check support for both original and lowmem
mode, and finally adds 2 test cases, one for mkfs and one for convert.
For mkfs test case, it can already be exposed by misc/002, but a
pin-point test case will be much better.
Tested with test-convert, test-fsck, test-misc and test-mkfs (test cases from v4.15.1)","The patch is based on v4.15.1, and is designed to replace the old patch
in devel branch.
Kernel doesn't support dropping range inside inline extent, and prevents
such thing happening by limiting max inline extent size to
min(max_inline, sectorsize - 1) in cow_file_range_inline().
However btrfs-progs only inherit the BTRFS_MAX_INLINE_DATA_SIZE() macro,
which doesn't have sectorsize check.
And since btrfs-progs defaults to 16K nodesize, above macro allows large
inline extent over 15K size.
This leads to unexpected kernel behavior.
The bug exists in several parts of btrfs-progs, any tool which creates
file extent is involved, including:

btrfs-convert
mkfs --rootdir

This patchset fixes the problems in convert (both ext2 and reiserfs),
mkfs --rootdir, then add check support for both original and lowmem
mode, and finally adds 2 test cases, one for mkfs and one for convert.
For mkfs test case, it can already be exposed by misc/002, but a
pin-point test case will be much better.
Tested with test-convert, test-fsck, test-misc and test-mkfs (test cases from v4.15.1)",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,108,2018-03-13T01:58:03Z,2018-03-21T18:01:54Z,2018-05-08T06:11:38Z,CLOSED,False,155,4,8,https://github.com/adam900710,Invalid inline extent fixes,7,[],https://github.com/kdave/btrfs-progs/pull/108,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/108#issuecomment-375040513,"The patch is based on v4.15.1, and is designed to replace the old patch
in devel branch.
Kernel doesn't support dropping range inside inline extent, and prevents
such thing happening by limiting max inline extent size to
min(max_inline, sectorsize - 1) in cow_file_range_inline().
However btrfs-progs only inherit the BTRFS_MAX_INLINE_DATA_SIZE() macro,
which doesn't have sectorsize check.
And since btrfs-progs defaults to 16K nodesize, above macro allows large
inline extent over 15K size.
This leads to unexpected kernel behavior.
The bug exists in several parts of btrfs-progs, any tool which creates
file extent is involved, including:

btrfs-convert
mkfs --rootdir

This patchset fixes the problems in convert (both ext2 and reiserfs),
mkfs --rootdir, then add check support for both original and lowmem
mode, and finally adds 2 test cases, one for mkfs and one for convert.
For mkfs test case, it can already be exposed by misc/002, but a
pin-point test case will be much better.
Tested with test-convert, test-fsck, test-misc and test-mkfs (test cases from v4.15.1)",The V3 has been merged.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,115,2018-03-28T18:17:36Z,2018-03-28T18:54:06Z,2018-03-28T18:54:06Z,CLOSED,False,10,7,1,https://github.com/TopView,Added clarity.,1,[],https://github.com/kdave/btrfs-progs/pull/115,https://github.com/TopView,1,https://github.com/kdave/btrfs-progs/pull/115,See related notes for commit to btrfs-subvolume.asciidoc,See related notes for commit to btrfs-subvolume.asciidoc,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,116,2018-03-28T19:07:54Z,,2020-10-02T18:01:46Z,OPEN,False,12,7,1,https://github.com/TopView,Added clarity and doc of snapshot -i option,1,[],https://github.com/kdave/btrfs-progs/pull/116,https://github.com/TopView,1,https://github.com/kdave/btrfs-progs/pull/116,"Was:

snapshot [-r] <source> <dest>|[<dest>/]<name>
Create a writable/readonly snapshot of the subvolume <source> with the name
<name> in the <dest> directory.
If only <dest> is given, the subvolume will be named the basename of <source>.
If <source> is not a subvolume, btrfs returns an error. If -r is given, the snapshot will be readonly.


Is:

snapshot [-r] [-i ] <subvolume> { <subdir>/<name> | <subdir> }
Create a snapshot of a <subvolume>.  Call it <name> and place it in the <subdir>.
When only <subdir> is given, the subvolume will be named using the basename of <subvolume>.
(<subvolume> looks like a sub-directory, but is actually a btrfs subvolume rather than a subdirectory.)
-r
Make the new snapshot readonly.
-i <qgroupid>
Add the new snapshot to a qgroup (quota group). This option can be given multiple times.


RATIONALE


First I think there's no reason why the -r option usage should be formatted any differently here than for the rest of this documentation.  All other options above this are split off and in lines of their own.  This is the only option that is spelled out in the text.


Also -i documentation is added.  If you run $> btrfs subvolume snapshot you get:



btrfs subvolume snapshot: too few arguments
usage: btrfs subvolume snapshot [-r] [-i <qgroupid>] <source> <dest>|[<dest>/]<name>
Create a snapshot of the subvolume

Create a writable/readonly snapshot of the subvolume \<source> with
the name \<name> in the \<dest> directory.  If only \<dest> is given,
the subvolume will be named the basename of \<source>.

-r             create a readonly snapshot
-i \<qgroupid>  add the newly created snapshot to a qgroup. This
               option can be given multiple times.



The | and [...] leave me to wonder which happens first.  Synopsis is clarified in standard notation.



For someone learning this I think using the more exact term ""subvolume"" is more clear than simply ""source"".  Furthermore, this is in agreement with the existing usage: on line 641 in cmds-subvolume.c which says this, ""Create a snapshot of the subvolume, ...""



Likewise ""subdir"" is more clear than ""dest"".  (Check me out, but I don't think it's possible for dest to be anything other than a subdir.)  Again in cmds-subvolume.c it says, "" directory"".  Also a snapshot can't be placed in the root directory, so it has to be in a sub-directory.","Was:

snapshot [-r] <source> <dest>|[<dest>/]<name>
Create a writable/readonly snapshot of the subvolume <source> with the name
<name> in the <dest> directory.
If only <dest> is given, the subvolume will be named the basename of <source>.
If <source> is not a subvolume, btrfs returns an error. If -r is given, the snapshot will be readonly.


Is:

snapshot [-r] [-i ] <subvolume> { <subdir>/<name> | <subdir> }
Create a snapshot of a <subvolume>.  Call it <name> and place it in the <subdir>.
When only <subdir> is given, the subvolume will be named using the basename of <subvolume>.
(<subvolume> looks like a sub-directory, but is actually a btrfs subvolume rather than a subdirectory.)
-r
Make the new snapshot readonly.
-i <qgroupid>
Add the new snapshot to a qgroup (quota group). This option can be given multiple times.


RATIONALE


First I think there's no reason why the -r option usage should be formatted any differently here than for the rest of this documentation.  All other options above this are split off and in lines of their own.  This is the only option that is spelled out in the text.


Also -i documentation is added.  If you run $> btrfs subvolume snapshot you get:



btrfs subvolume snapshot: too few arguments
usage: btrfs subvolume snapshot [-r] [-i <qgroupid>] <source> <dest>|[<dest>/]<name>
Create a snapshot of the subvolume

Create a writable/readonly snapshot of the subvolume \<source> with
the name \<name> in the \<dest> directory.  If only \<dest> is given,
the subvolume will be named the basename of \<source>.

-r             create a readonly snapshot
-i \<qgroupid>  add the newly created snapshot to a qgroup. This
               option can be given multiple times.



The | and [...] leave me to wonder which happens first.  Synopsis is clarified in standard notation.



For someone learning this I think using the more exact term ""subvolume"" is more clear than simply ""source"".  Furthermore, this is in agreement with the existing usage: on line 641 in cmds-subvolume.c which says this, ""Create a snapshot of the subvolume, ...""



Likewise ""subdir"" is more clear than ""dest"".  (Check me out, but I don't think it's possible for dest to be anything other than a subdir.)  Again in cmds-subvolume.c it says, "" directory"".  Also a snapshot can't be placed in the root directory, so it has to be in a sub-directory.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,117,2018-03-28T19:20:36Z,2022-02-07T18:05:21Z,2022-02-07T18:05:21Z,CLOSED,False,8,7,1,https://github.com/TopView,Added clarity,1,['docs'],https://github.com/kdave/btrfs-progs/pull/117,https://github.com/TopView,1,https://github.com/kdave/btrfs-progs/pull/117,See related notes for commit to btrfs-subvolume.asciidoc,See related notes for commit to btrfs-subvolume.asciidoc,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,117,2018-03-28T19:20:36Z,2022-02-07T18:05:21Z,2022-02-07T18:05:21Z,CLOSED,False,8,7,1,https://github.com/TopView,Added clarity,1,['docs'],https://github.com/kdave/btrfs-progs/pull/117,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/117#issuecomment-1031760473,See related notes for commit to btrfs-subvolume.asciidoc,"Sorry I forgot about this one, now applied to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,119,2018-03-30T07:39:27Z,2018-03-30T22:21:00Z,2021-06-09T06:27:22Z,CLOSED,False,1461,479,88,https://github.com/adam900710,Btrfs image fix + eb cleanup,51,[],https://github.com/kdave/btrfs-progs/pull/119,https://github.com/adam900710,1,https://github.com/kdave/btrfs-progs/pull/119,"Fix for #118
In short, the problem is caused by some old code (read_extent_data()
from ancient btrfs check code) and offset-by-one from btrfs-image.
Which makes btrfs-image can only read from the first stripe of RAID1.
And if device of the first stripe is missing, btrfs-image will fail.
Fix the problem and add test case for it.
Along with extent buffer cleanup (refactors), which looks pretty harmless.
test-fsck, test-misc and test-mkfs passed. (test-convert is a little time consuming, but it's not related)","Fix for #118
In short, the problem is caused by some old code (read_extent_data()
from ancient btrfs check code) and offset-by-one from btrfs-image.
Which makes btrfs-image can only read from the first stripe of RAID1.
And if device of the first stripe is missing, btrfs-image will fail.
Fix the problem and add test case for it.
Along with extent buffer cleanup (refactors), which looks pretty harmless.
test-fsck, test-misc and test-mkfs passed. (test-convert is a little time consuming, but it's not related)",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,119,2018-03-30T07:39:27Z,2018-03-30T22:21:00Z,2021-06-09T06:27:22Z,CLOSED,False,1461,479,88,https://github.com/adam900710,Btrfs image fix + eb cleanup,51,[],https://github.com/kdave/btrfs-progs/pull/119,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/119#issuecomment-377636516,"Fix for #118
In short, the problem is caused by some old code (read_extent_data()
from ancient btrfs check code) and offset-by-one from btrfs-image.
Which makes btrfs-image can only read from the first stripe of RAID1.
And if device of the first stripe is missing, btrfs-image will fail.
Fix the problem and add test case for it.
Along with extent buffer cleanup (refactors), which looks pretty harmless.
test-fsck, test-misc and test-mkfs passed. (test-convert is a little time consuming, but it's not related)","Merged to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,120,2018-03-30T08:45:58Z,2018-03-30T22:19:17Z,2018-03-30T22:19:17Z,CLOSED,False,1,1,1,https://github.com/gujx2017,btrfs-progs: docs: typo fix,1,[],https://github.com/kdave/btrfs-progs/pull/120,https://github.com/gujx2017,1,https://github.com/kdave/btrfs-progs/pull/120,"Fix misstoke modify of
commit 8c5db79 (""btrfs-progs: docs: annual typo, clarity, &
grammar review & fixups"")
Signed-off-by: Gu Jinxiang gujx@cn.fujitsu.com","Fix misstoke modify of
commit 8c5db79 (""btrfs-progs: docs: annual typo, clarity, &
grammar review & fixups"")
Signed-off-by: Gu Jinxiang gujx@cn.fujitsu.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,120,2018-03-30T08:45:58Z,2018-03-30T22:19:17Z,2018-03-30T22:19:17Z,CLOSED,False,1,1,1,https://github.com/gujx2017,btrfs-progs: docs: typo fix,1,[],https://github.com/kdave/btrfs-progs/pull/120,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/120#issuecomment-377636263,"Fix misstoke modify of
commit 8c5db79 (""btrfs-progs: docs: annual typo, clarity, &
grammar review & fixups"")
Signed-off-by: Gu Jinxiang gujx@cn.fujitsu.com",I found a few more and merged them to this patch.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,124,2018-04-25T15:10:28Z,2018-05-31T12:34:43Z,2018-05-31T12:34:43Z,CLOSED,False,1,0,1,https://github.com/benkard,traverse_directory: Reset error code on continue.,1,[],https://github.com/kdave/btrfs-progs/pull/124,https://github.com/benkard,1,https://github.com/kdave/btrfs-progs/pull/124,"In case add_inode_items returned -EEXIST, traverse_directory would
handle the condition and still continue under certain circumstances, but
it would not reset the error code, leading to spurious failure later.
This patch fixes that.","In case add_inode_items returned -EEXIST, traverse_directory would
handle the condition and still continue under certain circumstances, but
it would not reset the error code, leading to spurious failure later.
This patch fixes that.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,124,2018-04-25T15:10:28Z,2018-05-31T12:34:43Z,2018-05-31T12:34:43Z,CLOSED,False,1,0,1,https://github.com/benkard,traverse_directory: Reset error code on continue.,1,[],https://github.com/kdave/btrfs-progs/pull/124,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/124#issuecomment-393515495,"In case add_inode_items returned -EEXIST, traverse_directory would
handle the condition and still continue under certain circumstances, but
it would not reset the error code, leading to spurious failure later.
This patch fixes that.","Merged to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,125,2018-04-27T18:55:59Z,2018-04-27T19:28:57Z,2018-04-27T19:29:32Z,CLOSED,False,90,8,5,https://github.com/jeffmahoney,SLE11 build fixes,3,[],https://github.com/kdave/btrfs-progs/pull/125,https://github.com/jeffmahoney,1,https://github.com/kdave/btrfs-progs/pull/125,"This patch set allows btrfs-progs to build without further patching
on a stock SLE11 SP4 install.  The major issues were:

new dependencies on e2fsprogs 1.42
use of -std=gnu90, which gcc 4.3.4 doesn't support
use of m4_chomp, introduced in autoconf 2.64.","This patch set allows btrfs-progs to build without further patching
on a stock SLE11 SP4 install.  The major issues were:

new dependencies on e2fsprogs 1.42
use of -std=gnu90, which gcc 4.3.4 doesn't support
use of m4_chomp, introduced in autoconf 2.64.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,125,2018-04-27T18:55:59Z,2018-04-27T19:28:57Z,2018-04-27T19:29:32Z,CLOSED,False,90,8,5,https://github.com/jeffmahoney,SLE11 build fixes,3,[],https://github.com/kdave/btrfs-progs/pull/125,https://github.com/jeffmahoney,2,https://github.com/kdave/btrfs-progs/pull/125#issuecomment-385071124,"This patch set allows btrfs-progs to build without further patching
on a stock SLE11 SP4 install.  The major issues were:

new dependencies on e2fsprogs 1.42
use of -std=gnu90, which gcc 4.3.4 doesn't support
use of m4_chomp, introduced in autoconf 2.64.","Since we still require autoconf 2.64, the last commit is silly. I'll resubmit without it.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,126,2018-04-30T14:32:55Z,2018-05-09T12:02:01Z,2018-05-31T12:38:24Z,CLOSED,False,146,8,7,https://github.com/jeffmahoney,Sle11 build fixes,3,[],https://github.com/kdave/btrfs-progs/pull/126,https://github.com/jeffmahoney,1,https://github.com/kdave/btrfs-progs/pull/126,"This pull request contains fixes to allow btrfs-progs to build under SLE11 (and other older releases.)
The main things are:

e2fsprogs 1.41 compatibility
autoconf 2.63 compatibility
gcc < 4.5.0 compatibilty","This pull request contains fixes to allow btrfs-progs to build under SLE11 (and other older releases.)
The main things are:

e2fsprogs 1.41 compatibility
autoconf 2.63 compatibility
gcc < 4.5.0 compatibilty",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,126,2018-04-30T14:32:55Z,2018-05-09T12:02:01Z,2018-05-31T12:38:24Z,CLOSED,False,146,8,7,https://github.com/jeffmahoney,Sle11 build fixes,3,[],https://github.com/kdave/btrfs-progs/pull/126,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/126#issuecomment-387716155,"This pull request contains fixes to allow btrfs-progs to build under SLE11 (and other older releases.)
The main things are:

e2fsprogs 1.41 compatibility
autoconf 2.63 compatibility
gcc < 4.5.0 compatibilty","Merged to devel, thanks",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,132,2018-05-07T07:44:54Z,2018-05-31T12:37:53Z,2021-06-09T06:27:27Z,CLOSED,False,236,369,41,https://github.com/adam900710,Dump tree segv fix,22,[],https://github.com/kdave/btrfs-progs/pull/132,https://github.com/adam900710,1,https://github.com/kdave/btrfs-progs/pull/132,"For Issue: #128
With test case.","For Issue: #128
With test case.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,132,2018-05-07T07:44:54Z,2018-05-31T12:37:53Z,2021-06-09T06:27:27Z,CLOSED,False,236,369,41,https://github.com/adam900710,Dump tree segv fix,22,[],https://github.com/kdave/btrfs-progs/pull/132,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/132#issuecomment-393516243,"For Issue: #128
With test case.","Merged to devel (some time ago actually), thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,135,2018-05-14T07:05:00Z,2019-05-15T15:26:16Z,2021-06-09T06:27:24Z,CLOSED,False,50,2,4,https://github.com/adam900710,btrfs-progs: Detect compressed extent without csum,3,['enhancement'],https://github.com/kdave/btrfs-progs/pull/135,https://github.com/adam900710,1,https://github.com/kdave/btrfs-progs/pull/135,"It's based on v4.16 stable branch.
James Harvey from mail list reports a strange kernel panic, whichs show
obviously kernel memory corruption, while after btrfs decompression
failure.
It turns out that, some compressed extent get corrupted on-disk, while
the inode has NODATASUM set, there is no csum to prevent corrupted
mirror being used.
Although the root cause should be buggy lzo implementation, it still
shows that btrfs is not following the behavior defined in btrfs(5):
 Note
 If nodatacow or nodatasum are enabled, compression is disabled.

So at least make btrfs check to detect such problem.
Kernel patch sent titled:
""[PATCH] btrfs: inode: Don't compress if NODATASUM or NODATACOW set""","It's based on v4.16 stable branch.
James Harvey from mail list reports a strange kernel panic, whichs show
obviously kernel memory corruption, while after btrfs decompression
failure.
It turns out that, some compressed extent get corrupted on-disk, while
the inode has NODATASUM set, there is no csum to prevent corrupted
mirror being used.
Although the root cause should be buggy lzo implementation, it still
shows that btrfs is not following the behavior defined in btrfs(5):
 Note
 If nodatacow or nodatasum are enabled, compression is disabled.

So at least make btrfs check to detect such problem.
Kernel patch sent titled:
""[PATCH] btrfs: inode: Don't compress if NODATASUM or NODATACOW set""",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,135,2018-05-14T07:05:00Z,2019-05-15T15:26:16Z,2021-06-09T06:27:24Z,CLOSED,False,50,2,4,https://github.com/adam900710,btrfs-progs: Detect compressed extent without csum,3,['enhancement'],https://github.com/kdave/btrfs-progs/pull/135,https://github.com/jamespharvey20,2,https://github.com/kdave/btrfs-progs/pull/135#issuecomment-391568533,"It's based on v4.16 stable branch.
James Harvey from mail list reports a strange kernel panic, whichs show
obviously kernel memory corruption, while after btrfs decompression
failure.
It turns out that, some compressed extent get corrupted on-disk, while
the inode has NODATASUM set, there is no csum to prevent corrupted
mirror being used.
Although the root cause should be buggy lzo implementation, it still
shows that btrfs is not following the behavior defined in btrfs(5):
 Note
 If nodatacow or nodatasum are enabled, compression is disabled.

So at least make btrfs check to detect such problem.
Kernel patch sent titled:
""[PATCH] btrfs: inode: Don't compress if NODATASUM or NODATACOW set""","If these files are in snapshots, is there any way to fix them, without deleting all the old snapshots?  Any chance of a future --repair taking care of these?  ""Fixing"" probably means if nodatacow or nodatasum are enabled, changing the data on disk to be uncompressed; and if neither are enabled now, leaving on disk compressed but generating csums.  Or, if too complicated, just changing to uncompressed in all scenarios.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,135,2018-05-14T07:05:00Z,2019-05-15T15:26:16Z,2021-06-09T06:27:24Z,CLOSED,False,50,2,4,https://github.com/adam900710,btrfs-progs: Detect compressed extent without csum,3,['enhancement'],https://github.com/kdave/btrfs-progs/pull/135,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/135#issuecomment-492702758,"It's based on v4.16 stable branch.
James Harvey from mail list reports a strange kernel panic, whichs show
obviously kernel memory corruption, while after btrfs decompression
failure.
It turns out that, some compressed extent get corrupted on-disk, while
the inode has NODATASUM set, there is no csum to prevent corrupted
mirror being used.
Although the root cause should be buggy lzo implementation, it still
shows that btrfs is not following the behavior defined in btrfs(5):
 Note
 If nodatacow or nodatasum are enabled, compression is disabled.

So at least make btrfs check to detect such problem.
Kernel patch sent titled:
""[PATCH] btrfs: inode: Don't compress if NODATASUM or NODATACOW set""",Added to devel.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,137,2018-05-15T03:12:25Z,2018-05-31T11:43:43Z,2018-05-31T11:43:50Z,CLOSED,False,34,0,6,https://github.com/Damenly,btrfs-progs: check: verify symlinks with append/immutable flags​,3,['enhancement'],https://github.com/kdave/btrfs-progs/pull/137,https://github.com/Damenly,1,https://github.com/kdave/btrfs-progs/pull/137,"Symlinks should never have append/immutable attributes.
This pull request enables check to verify such corruption.","Symlinks should never have append/immutable attributes.
This pull request enables check to verify such corruption.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,138,2018-05-15T15:57:28Z,2018-05-31T12:30:21Z,2018-05-31T12:30:22Z,CLOSED,False,1,1,1,https://github.com/digint,"btrfs-progs: fix regression preventing send -p with subvolumes mounted on ""/""",1,[],https://github.com/kdave/btrfs-progs/pull/138,https://github.com/digint,1,https://github.com/kdave/btrfs-progs/pull/138,"Fix subvol_strip_mountpoint for mnt=""/"" (len=1). In this case, skip
check for trailing slash on full_path (leading slash on full_path is
already asserted by strncmp).
Fixes: c5dc299 (""btrfs-progs: prevent incorrect use of subvol_strip_mountpoint"")
Signed-off-by: Axel Burri axel@tty0.ch","Fix subvol_strip_mountpoint for mnt=""/"" (len=1). In this case, skip
check for trailing slash on full_path (leading slash on full_path is
already asserted by strncmp).
Fixes: c5dc299 (""btrfs-progs: prevent incorrect use of subvol_strip_mountpoint"")
Signed-off-by: Axel Burri axel@tty0.ch",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,138,2018-05-15T15:57:28Z,2018-05-31T12:30:21Z,2018-05-31T12:30:22Z,CLOSED,False,1,1,1,https://github.com/digint,"btrfs-progs: fix regression preventing send -p with subvolumes mounted on ""/""",1,[],https://github.com/kdave/btrfs-progs/pull/138,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/138#issuecomment-393514453,"Fix subvol_strip_mountpoint for mnt=""/"" (len=1). In this case, skip
check for trailing slash on full_path (leading slash on full_path is
already asserted by strncmp).
Fixes: c5dc299 (""btrfs-progs: prevent incorrect use of subvol_strip_mountpoint"")
Signed-off-by: Axel Burri axel@tty0.ch","Merged to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,139,2018-05-16T21:37:22Z,,2022-06-06T17:27:42Z,OPEN,False,2532,1153,72,https://github.com/jeffmahoney,qgroups usability v3,77,"['enhancement', 'meta/split']",https://github.com/kdave/btrfs-progs/pull/139,https://github.com/jeffmahoney,1,https://github.com/kdave/btrfs-progs/pull/139,"This is v3 of the qgroups usability patchset.
Changes since v2:

Updated Reviewed-by tags were provided.
Fixed the typoed commands that I commented on in the previous posting.
Dropped the btrfs_cleanup_root_info since it's unnecessary with the
switch to libbtrfsutil.
Updated the qgroups pathname patch to use libbtrfsutil
Added a mini-filter to skip dead qgroups in 'qgroup show' output
unless -v is specified.

The most notable change is that this posting doesn't include the JSON
format patches since there was still some open discussion there.  The
plumbing for passing global options around to commands is there, so we
really just need to decide on how we want to handle alternative formats.
For some commands, the formatting library that coreutils uses will
probably work but for qgroups show to represent nested groups, it's
unsuitable.","This is v3 of the qgroups usability patchset.
Changes since v2:

Updated Reviewed-by tags were provided.
Fixed the typoed commands that I commented on in the previous posting.
Dropped the btrfs_cleanup_root_info since it's unnecessary with the
switch to libbtrfsutil.
Updated the qgroups pathname patch to use libbtrfsutil
Added a mini-filter to skip dead qgroups in 'qgroup show' output
unless -v is specified.

The most notable change is that this posting doesn't include the JSON
format patches since there was still some open discussion there.  The
plumbing for passing global options around to commands is there, so we
really just need to decide on how we want to handle alternative formats.
For some commands, the formatting library that coreutils uses will
probably work but for qgroups show to represent nested groups, it's
unsuitable.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,139,2018-05-16T21:37:22Z,,2022-06-06T17:27:42Z,OPEN,False,2532,1153,72,https://github.com/jeffmahoney,qgroups usability v3,77,"['enhancement', 'meta/split']",https://github.com/kdave/btrfs-progs/pull/139,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/139#issuecomment-688376261,"This is v3 of the qgroups usability patchset.
Changes since v2:

Updated Reviewed-by tags were provided.
Fixed the typoed commands that I commented on in the previous posting.
Dropped the btrfs_cleanup_root_info since it's unnecessary with the
switch to libbtrfsutil.
Updated the qgroups pathname patch to use libbtrfsutil
Added a mini-filter to skip dead qgroups in 'qgroup show' output
unless -v is specified.

The most notable change is that this posting doesn't include the JSON
format patches since there was still some open discussion there.  The
plumbing for passing global options around to commands is there, so we
really just need to decide on how we want to handle alternative formats.
For some commands, the formatting library that coreutils uses will
probably work but for qgroups show to represent nested groups, it's
unsuitable.","The patchset is doing several things at once, I've merged some of them over the time (command line parsing, fixes), the output --format as part of the global option rework. I'd rather track several PRs/issues so it's clear what's merged or needs to be fixed, this PR has become unwieldy.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,146,2018-09-05T11:23:15Z,2022-02-07T17:51:35Z,2022-02-07T17:51:35Z,CLOSED,False,1,1,1,https://github.com/phillxnet,btrfs-progs: docs: update remaining non-zero dev stats -s option to -c,1,['docs'],https://github.com/kdave/btrfs-progs/pull/146,https://github.com/phillxnet,1,https://github.com/kdave/btrfs-progs/pull/146,"Update the remaining erroneous entry of -s in the 'exit status' section to -c in accordance with the changes made in:
""btrfs-progs: dev stats: update option name for checking non-zero status""
Signed-off-by: Philip Guyton philip@yewtreeapps.com","Update the remaining erroneous entry of -s in the 'exit status' section to -c in accordance with the changes made in:
""btrfs-progs: dev stats: update option name for checking non-zero status""
Signed-off-by: Philip Guyton philip@yewtreeapps.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,146,2018-09-05T11:23:15Z,2022-02-07T17:51:35Z,2022-02-07T17:51:35Z,CLOSED,False,1,1,1,https://github.com/phillxnet,btrfs-progs: docs: update remaining non-zero dev stats -s option to -c,1,['docs'],https://github.com/kdave/btrfs-progs/pull/146,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/146#issuecomment-1031748011,"Update the remaining erroneous entry of -s in the 'exit status' section to -c in accordance with the changes made in:
""btrfs-progs: dev stats: update option name for checking non-zero status""
Signed-off-by: Philip Guyton philip@yewtreeapps.com","Thanks, I should have applied that long time ago sorry, now in devel.",True,{'THUMBS_UP': ['https://github.com/phillxnet']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,149,2018-10-01T15:15:08Z,2019-05-15T14:33:18Z,2019-05-15T14:33:19Z,CLOSED,False,17,17,3,https://github.com/theridane,rename create_subvolume and create_snapshot arg 'async' to 'no_wait',1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/149,https://github.com/theridane,1,https://github.com/kdave/btrfs-progs/pull/149,"Python 3.7 introduces a bunch of new keywords including async which breaks keyword arguments of two methods in btrfsutil (e.g. causing test_subvolume to fail with a syntax error).
This renames the arguments to no_wait.","Python 3.7 introduces a bunch of new keywords including async which breaks keyword arguments of two methods in btrfsutil (e.g. causing test_subvolume to fail with a syntax error).
This renames the arguments to no_wait.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,149,2018-10-01T15:15:08Z,2019-05-15T14:33:18Z,2019-05-15T14:33:19Z,CLOSED,False,17,17,3,https://github.com/theridane,rename create_subvolume and create_snapshot arg 'async' to 'no_wait',1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/149,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/149#issuecomment-492680822,"Python 3.7 introduces a bunch of new keywords including async which breaks keyword arguments of two methods in btrfsutil (e.g. causing test_subvolume to fail with a syntax error).
This renames the arguments to no_wait.",Was fixed by 5776a70 .,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,151,2018-10-15T13:03:42Z,2019-05-15T14:50:00Z,2019-05-15T14:50:00Z,CLOSED,False,1,1,1,https://github.com/Alexander198961,set up max_errors count,1,['bug'],https://github.com/kdave/btrfs-progs/pull/151,https://github.com/Alexander198961,1,https://github.com/kdave/btrfs-progs/pull/151,Try to set up max retry count to fix https://bugzilla.kernel.org/show_bug.cgi?id=200085,Try to set up max retry count to fix https://bugzilla.kernel.org/show_bug.cgi?id=200085,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,151,2018-10-15T13:03:42Z,2019-05-15T14:50:00Z,2019-05-15T14:50:00Z,CLOSED,False,1,1,1,https://github.com/Alexander198961,set up max_errors count,1,['bug'],https://github.com/kdave/btrfs-progs/pull/151,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/151#issuecomment-492687900,Try to set up max retry count to fix https://bugzilla.kernel.org/show_bug.cgi?id=200085,"Thanks, fix added to devel, with enhanced changelog.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,154,2018-11-26T04:47:29Z,2018-11-26T17:39:14Z,2018-11-26T19:20:20Z,CLOSED,False,93,93,49,https://github.com/jsoref,Spelling,77,['enhancement'],https://github.com/kdave/btrfs-progs/pull/154,https://github.com/jsoref,1,https://github.com/kdave/btrfs-progs/pull/154,"Generated by https://github.com/jsoref/spelling f; to maintain your repo, please consider fchurn
Note: I understand that the commit message style doesn't quite match. I can squish/rewrite as requested.
There are a couple of commits where I'm guessing about the corrections...","Generated by https://github.com/jsoref/spelling f; to maintain your repo, please consider fchurn
Note: I understand that the commit message style doesn't quite match. I can squish/rewrite as requested.
There are a couple of commits where I'm guessing about the corrections...",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,154,2018-11-26T04:47:29Z,2018-11-26T17:39:14Z,2018-11-26T19:20:20Z,CLOSED,False,93,93,49,https://github.com/jsoref,Spelling,77,['enhancement'],https://github.com/kdave/btrfs-progs/pull/154,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/154#issuecomment-441649280,"Generated by https://github.com/jsoref/spelling f; to maintain your repo, please consider fchurn
Note: I understand that the commit message style doesn't quite match. I can squish/rewrite as requested.
There are a couple of commits where I'm guessing about the corrections...","Thanks for the fixes, no matter how much we try not to introduce them, they keep coming. The changes would be better grouped logically, eg. documentation, CHANGES, and code. I'll do that as the separate commits make it easy to cherry-pick and squash relevant changes, so if you have further updates, please keep it as is and I'll do the final merge.",True,{'THUMBS_UP': ['https://github.com/jsoref']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,154,2018-11-26T04:47:29Z,2018-11-26T17:39:14Z,2018-11-26T19:20:20Z,CLOSED,False,93,93,49,https://github.com/jsoref,Spelling,77,['enhancement'],https://github.com/kdave/btrfs-progs/pull/154,https://github.com/jsoref,3,https://github.com/kdave/btrfs-progs/pull/154#issuecomment-441685869,"Generated by https://github.com/jsoref/spelling f; to maintain your repo, please consider fchurn
Note: I understand that the commit message style doesn't quite match. I can squish/rewrite as requested.
There are a couple of commits where I'm guessing about the corrections...","@kdave : Thanks for offering to rearrange this PR. At present, I don't have any other changes -- my script ran through the entire corpus.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,154,2018-11-26T04:47:29Z,2018-11-26T17:39:14Z,2018-11-26T19:20:20Z,CLOSED,False,93,93,49,https://github.com/jsoref,Spelling,77,['enhancement'],https://github.com/kdave/btrfs-progs/pull/154,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/154#issuecomment-441729108,"Generated by https://github.com/jsoref/spelling f; to maintain your repo, please consider fchurn
Note: I understand that the commit message style doesn't quite match. I can squish/rewrite as requested.
There are a couple of commits where I'm guessing about the corrections...","Changes grouped into commits, now pushed to devel branch. Closing.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,155,2018-11-26T06:01:39Z,2019-05-15T14:30:08Z,2021-06-09T06:27:23Z,CLOSED,False,354,29,11,https://github.com/adam900710,Check next,5,['enhancement'],https://github.com/kdave/btrfs-progs/pull/155,https://github.com/adam900710,1,https://github.com/kdave/btrfs-progs/pull/155,"Hi David,
Please merge this branch.
This small patchset contains 2 check related functionality:


Ability to repair dir item with mismatch hash
Both lowmem and original check, along with test case update.


Check qgroup limit exceed
The patch to deprecate BTRFS_QGROUP_LIMIT_RSV_RFER|EXCL is dropped
for this pull request, as it's still uncertain if it's OK or not, and
it's very easy to rebase that patch.


The patchset passes all selftest with one exception:
misc-tests/021-image-multi-devices
That test case failure is caused by poorly recovered multi-device
btrfs-image.
The problem exists from the very beginning, just recent enhanced kernel
code will refuse to mount and I'll address it later in another patchset.
There is some other check related patches, naming ""btrfs-progs: fixes of
file extent in original and lowmem check"" from Fujitsu, which is still
being updated. I'll push them in next update.
Thanks.","Hi David,
Please merge this branch.
This small patchset contains 2 check related functionality:


Ability to repair dir item with mismatch hash
Both lowmem and original check, along with test case update.


Check qgroup limit exceed
The patch to deprecate BTRFS_QGROUP_LIMIT_RSV_RFER|EXCL is dropped
for this pull request, as it's still uncertain if it's OK or not, and
it's very easy to rebase that patch.


The patchset passes all selftest with one exception:
misc-tests/021-image-multi-devices
That test case failure is caused by poorly recovered multi-device
btrfs-image.
The problem exists from the very beginning, just recent enhanced kernel
code will refuse to mount and I'll address it later in another patchset.
There is some other check related patches, naming ""btrfs-progs: fixes of
file extent in original and lowmem check"" from Fujitsu, which is still
being updated. I'll push them in next update.
Thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,158,2018-12-16T08:48:00Z,2018-12-17T22:32:23Z,2019-02-25T17:46:53Z,CLOSED,False,2,30,2,https://github.com/jondo,Mention how to find the subvolume creation time,2,[],https://github.com/kdave/btrfs-progs/pull/158,https://github.com/jondo,1,https://github.com/kdave/btrfs-progs/pull/158,"As a btrfs newbie, having the description of show list the shown fields (at least the creation time) would just have been very useful to me.","As a btrfs newbie, having the description of show list the shown fields (at least the creation time) would just have been very useful to me.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,158,2018-12-16T08:48:00Z,2018-12-17T22:32:23Z,2019-02-25T17:46:53Z,CLOSED,False,2,30,2,https://github.com/jondo,Mention how to find the subvolume creation time,2,[],https://github.com/kdave/btrfs-progs/pull/158,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/158#issuecomment-447964910,"As a btrfs newbie, having the description of show list the shown fields (at least the creation time) would just have been very useful to me.","Thanks for the suggestion, I did a few more updates in b4a2708. There's an example output in the manual page that contains the creation time, I think this should be sufficient to make the creation time easy to find.",True,{'THUMBS_UP': ['https://github.com/jondo']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,158,2018-12-16T08:48:00Z,2018-12-17T22:32:23Z,2019-02-25T17:46:53Z,CLOSED,False,2,30,2,https://github.com/jondo,Mention how to find the subvolume creation time,2,[],https://github.com/kdave/btrfs-progs/pull/158,https://github.com/jondo,3,https://github.com/kdave/btrfs-progs/pull/158#issuecomment-448024272,"As a btrfs newbie, having the description of show list the shown fields (at least the creation time) would just have been very useful to me.","Très cool, thank you!",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,160,2018-12-27T07:15:44Z,2019-02-14T12:23:59Z,2019-02-14T12:23:59Z,CLOSED,False,334,113,6,https://github.com/adam900710,Fix incorrectly created uuid tree,5,[],https://github.com/kdave/btrfs-progs/pull/160,https://github.com/adam900710,1,https://github.com/kdave/btrfs-progs/pull/160,"I hope this branch can be merged before 4.20, although the bug doesn't affect kernel, but I really hope to get rid of the changed behavior during 4.16~4.20.
Commit 2a496a5 (""btrfs-progs: mkfs: precreate the uuid tree"")
creates uuid tree at mkfs time.
However it doesn't populate uuid tree correctly nor just create an empty
root.
It uses create_tree(), which just copies the content of fs root,
containing meaningless INODE_ITEM:
v4.15 mkfs (no uuid tree creation) + kernel mount:
uuid tree key (UUID_TREE ROOT_ITEM 0)
leaf 30572544 items 1 free space 16250 generation 7 owner UUID_TREE
leaf 30572544 flags 0x1(WRITTEN) backref revision 1
fs uuid 33ecddef-fc86-481a-93ce-846b01c11376
chunk uuid 9e58f646-b0da-43ca-9c7d-8bbe3e120246
item 0 key (0x92457c59d31491be UUID_KEY_SUBVOL 0xef908b5e79aa76a1) itemoff 16275 itemsize 8
subvol_id 5
v4.19.1 mkfs (incorrect one), no kernel mount:
uuid tree key (UUID_TREE ROOT_ITEM 0)
leaf 30507008 items 2 free space 16061 generation 4 owner UUID_TREE
leaf 30507008 flags 0x1(WRITTEN) backref revision 1
fs uuid 162f5333-9b5d-4217-877c-ddaeaa79398e
chunk uuid 7bc2c5c6-a6d2-4eec-a513-142b549c6541
item 0 key (256 INODE_ITEM 0) itemoff 16123 itemsize 160
generation 3 transid 0 size 0 nbytes 16384
block group 0 mode 40755 links 1 uid 0 gid 0 rdev 0
sequence 0 flags 0x0(none)
item 1 key (256 INODE_REF 256) itemoff 16111 itemsize 12
index 0 namelen 2 name: ..
This patchset will fix it by populuating uuid tree properly, as kernel
tree checker now doesn't accept empty uuid tree.
w/ this patchset, no kernel mount:
uuid tree key (UUID_TREE ROOT_ITEM 0)
leaf 30507008 items 1 free space 16250 generation 4 owner UUID_TREE
leaf 30507008 flags 0x1(WRITTEN) backref revision 1
fs uuid ae53079e-dbbc-409b-a565-5326c7b27731
chunk uuid b5fb1bea-f20d-4af1-80f8-6ca3f0038d67
item 0 key (0x334ba6b032d89c07 UUID_KEY_SUBVOL 0x86cde09cb78bcca0) itemoff 16275 itemsize 8
subvol_id 5","I hope this branch can be merged before 4.20, although the bug doesn't affect kernel, but I really hope to get rid of the changed behavior during 4.16~4.20.
Commit 2a496a5 (""btrfs-progs: mkfs: precreate the uuid tree"")
creates uuid tree at mkfs time.
However it doesn't populate uuid tree correctly nor just create an empty
root.
It uses create_tree(), which just copies the content of fs root,
containing meaningless INODE_ITEM:
v4.15 mkfs (no uuid tree creation) + kernel mount:
uuid tree key (UUID_TREE ROOT_ITEM 0)
leaf 30572544 items 1 free space 16250 generation 7 owner UUID_TREE
leaf 30572544 flags 0x1(WRITTEN) backref revision 1
fs uuid 33ecddef-fc86-481a-93ce-846b01c11376
chunk uuid 9e58f646-b0da-43ca-9c7d-8bbe3e120246
item 0 key (0x92457c59d31491be UUID_KEY_SUBVOL 0xef908b5e79aa76a1) itemoff 16275 itemsize 8
subvol_id 5
v4.19.1 mkfs (incorrect one), no kernel mount:
uuid tree key (UUID_TREE ROOT_ITEM 0)
leaf 30507008 items 2 free space 16061 generation 4 owner UUID_TREE
leaf 30507008 flags 0x1(WRITTEN) backref revision 1
fs uuid 162f5333-9b5d-4217-877c-ddaeaa79398e
chunk uuid 7bc2c5c6-a6d2-4eec-a513-142b549c6541
item 0 key (256 INODE_ITEM 0) itemoff 16123 itemsize 160
generation 3 transid 0 size 0 nbytes 16384
block group 0 mode 40755 links 1 uid 0 gid 0 rdev 0
sequence 0 flags 0x0(none)
item 1 key (256 INODE_REF 256) itemoff 16111 itemsize 12
index 0 namelen 2 name: ..
This patchset will fix it by populuating uuid tree properly, as kernel
tree checker now doesn't accept empty uuid tree.
w/ this patchset, no kernel mount:
uuid tree key (UUID_TREE ROOT_ITEM 0)
leaf 30507008 items 1 free space 16250 generation 4 owner UUID_TREE
leaf 30507008 flags 0x1(WRITTEN) backref revision 1
fs uuid ae53079e-dbbc-409b-a565-5326c7b27731
chunk uuid b5fb1bea-f20d-4af1-80f8-6ca3f0038d67
item 0 key (0x334ba6b032d89c07 UUID_KEY_SUBVOL 0x86cde09cb78bcca0) itemoff 16275 itemsize 8
subvol_id 5",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,172,2019-05-19T07:53:37Z,2019-05-27T14:00:28Z,2019-05-27T14:00:28Z,CLOSED,False,1,1,1,https://github.com/trofi,Makefile: apply LDFLAGS to libbtrfsutil.so,1,['bug'],https://github.com/kdave/btrfs-progs/pull/172,https://github.com/trofi,1,https://github.com/kdave/btrfs-progs/pull/172,"libbtrfs.so already has user's LDFLAGS applied.
The change also applies those to libbtrfsutil.so.
Reported-by: Michał Górny
Bug: https://bugs.gentoo.org/686284","libbtrfs.so already has user's LDFLAGS applied.
The change also applies those to libbtrfsutil.so.
Reported-by: Michał Górny
Bug: https://bugs.gentoo.org/686284",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,172,2019-05-19T07:53:37Z,2019-05-27T14:00:28Z,2019-05-27T14:00:28Z,CLOSED,False,1,1,1,https://github.com/trofi,Makefile: apply LDFLAGS to libbtrfsutil.so,1,['bug'],https://github.com/kdave/btrfs-progs/pull/172,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/172#issuecomment-496222625,"libbtrfs.so already has user's LDFLAGS applied.
The change also applies those to libbtrfsutil.so.
Reported-by: Michał Górny
Bug: https://bugs.gentoo.org/686284","Added to devel, thanks. I've added an extra variable for the libbtrfsutil, but the user-specified LDFLAGS will be passed the same way.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,176,2019-05-27T03:07:39Z,2019-05-27T13:48:50Z,2019-05-27T13:48:50Z,CLOSED,False,5,1,1,https://github.com/JPEWdev,btrfs-progs: Pass CFLAGS and LDFLAGS to Python,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/176,https://github.com/JPEWdev,1,https://github.com/kdave/btrfs-progs/pull/176,"Adds Make variables EXTRA_PYTHON_CFLAGS and EXTRA_PYTHON_LDFLAGS which
can be used to pass CFLAGS and LDFLAGS respectively when building the
Python library.
This is required to support reproducible builds, as there are often
compiler and linker flags that must be passed in order to generate
reproducible output (e.g. -fdebug-prefix-map)
Signed-off-by: Joshua Watt JPEWhacker@gmail.com","Adds Make variables EXTRA_PYTHON_CFLAGS and EXTRA_PYTHON_LDFLAGS which
can be used to pass CFLAGS and LDFLAGS respectively when building the
Python library.
This is required to support reproducible builds, as there are often
compiler and linker flags that must be passed in order to generate
reproducible output (e.g. -fdebug-prefix-map)
Signed-off-by: Joshua Watt JPEWhacker@gmail.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,176,2019-05-27T03:07:39Z,2019-05-27T13:48:50Z,2019-05-27T13:48:50Z,CLOSED,False,5,1,1,https://github.com/JPEWdev,btrfs-progs: Pass CFLAGS and LDFLAGS to Python,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/176,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/176#issuecomment-496219152,"Adds Make variables EXTRA_PYTHON_CFLAGS and EXTRA_PYTHON_LDFLAGS which
can be used to pass CFLAGS and LDFLAGS respectively when building the
Python library.
This is required to support reproducible builds, as there are often
compiler and linker flags that must be passed in order to generate
reproducible output (e.g. -fdebug-prefix-map)
Signed-off-by: Joshua Watt JPEWhacker@gmail.com","Added to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,177,2019-06-04T19:50:48Z,2019-06-19T20:07:26Z,2020-10-02T18:07:17Z,CLOSED,False,32,14,1,https://github.com/gkowal,btrfs-progs: scrub: show the scrubbing rate and estimated time to finish,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/177,https://github.com/gkowal,1,https://github.com/kdave/btrfs-progs/pull/177,"The estimation is based on the allocated bytes, so it might be
overestimated.
Example output for running scrub:
scrub status for xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
scrub started at Fri May 31 15:56:57 2019, running for 0:04:31
total 62.55GiB scrubbed at rate 236.37MiB/s, time left: 0:12:31
no errors found
Signed-off-by: Grzegorz Kowal grzegorz@amuncode.org","The estimation is based on the allocated bytes, so it might be
overestimated.
Example output for running scrub:
scrub status for xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
scrub started at Fri May 31 15:56:57 2019, running for 0:04:31
total 62.55GiB scrubbed at rate 236.37MiB/s, time left: 0:12:31
no errors found
Signed-off-by: Grzegorz Kowal grzegorz@amuncode.org",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,177,2019-06-04T19:50:48Z,2019-06-19T20:07:26Z,2020-10-02T18:07:17Z,CLOSED,False,32,14,1,https://github.com/gkowal,btrfs-progs: scrub: show the scrubbing rate and estimated time to finish,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/177,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/177#issuecomment-501838879,"The estimation is based on the allocated bytes, so it might be
overestimated.
Example output for running scrub:
scrub status for xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
scrub started at Fri May 31 15:56:57 2019, running for 0:04:31
total 62.55GiB scrubbed at rate 236.37MiB/s, time left: 0:12:31
no errors found
Signed-off-by: Grzegorz Kowal grzegorz@amuncode.org","I think the numbers match, scrub needs to go through all physical copies and this is sotred in the total and used _bytes in dev info.
Naturally the IO performance can vary so the average speed can be off if it's based on just one measurement, but as it is now I think it's ok.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,177,2019-06-04T19:50:48Z,2019-06-19T20:07:26Z,2020-10-02T18:07:17Z,CLOSED,False,32,14,1,https://github.com/gkowal,btrfs-progs: scrub: show the scrubbing rate and estimated time to finish,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/177,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/177#issuecomment-502208600,"The estimation is based on the allocated bytes, so it might be
overestimated.
Example output for running scrub:
scrub status for xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
scrub started at Fri May 31 15:56:57 2019, running for 0:04:31
total 62.55GiB scrubbed at rate 236.37MiB/s, time left: 0:12:31
no errors found
Signed-off-by: Grzegorz Kowal grzegorz@amuncode.org","So the device info value 'total_used' cannot be used because it's the chunk size and not the amount of data used in the chunks. Ie. the same what's printed in 'fi df' as total, while we're interested in 'used'. This can be obtained by get_df.
I've reworked the output too so now it looks a bit more readable and adds some fancy stuff:
UUID:             bf8720e0-606b-4065-8320-b48df2e8e669
Scrub started:    Fri Jun 14 19:49:47 2019
Status:           running
Duration:         0:14:11
Time left:        0:04:04
ETA:              Fri Jun 14 19:53:51 2019
Total to scrub:   182.55GiB
Bytes scrubbed:   141.80GiB
Rate:             170.63MiB/s
Error summary:    csum=7
  Corrected:      0
  Uncorrectable:  7
  Unverified:     0

For the reference, this is 'fi df':
Data, single: total=261.00GiB, used=179.91GiB
System, single: total=32.00MiB, used=48.00KiB
Metadata, single: total=5.00GiB, used=2.64GiB
GlobalReserve, single: total=375.23MiB, used=0.00B

I've run it several times, the average time is 18 minutes and the estimate is not bad, usually off by one or two minutes.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,177,2019-06-04T19:50:48Z,2019-06-19T20:07:26Z,2020-10-02T18:07:17Z,CLOSED,False,32,14,1,https://github.com/gkowal,btrfs-progs: scrub: show the scrubbing rate and estimated time to finish,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/177,https://github.com/gkowal,4,https://github.com/kdave/btrfs-progs/pull/177#issuecomment-502319147,"The estimation is based on the allocated bytes, so it might be
overestimated.
Example output for running scrub:
scrub status for xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
scrub started at Fri May 31 15:56:57 2019, running for 0:04:31
total 62.55GiB scrubbed at rate 236.37MiB/s, time left: 0:12:31
no errors found
Signed-off-by: Grzegorz Kowal grzegorz@amuncode.org","I thought that even the overestimated time left using the size of allocated chunks is better than nothing, and was planning to find out later how to get the used space.
Anyway, on an active filesystem, the info about the used space does not guarantee more precise estimation of the time left, since not only the current I/O activity can affect the estimation but also a situation can occur in which some already scrubbed data might be removed during the scrubbing process. This would potentially result in a negative time left at the end of scrubbing, since the total bytes to scrub would decrease because of the removed space, while it would still be counted in the scrubbed bytes. I am not an expert, so maybe it is not completely true. Still, any estimate, even a rough one is more useful than no estimate at all.
BTW, the new output is indeed much more readable.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,177,2019-06-04T19:50:48Z,2019-06-19T20:07:26Z,2020-10-02T18:07:17Z,CLOSED,False,32,14,1,https://github.com/gkowal,btrfs-progs: scrub: show the scrubbing rate and estimated time to finish,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/177,https://github.com/kdave,5,https://github.com/kdave/btrfs-progs/pull/177#issuecomment-503727124,"The estimation is based on the allocated bytes, so it might be
overestimated.
Example output for running scrub:
scrub status for xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
scrub started at Fri May 31 15:56:57 2019, running for 0:04:31
total 62.55GiB scrubbed at rate 236.37MiB/s, time left: 0:12:31
no errors found
Signed-off-by: Grzegorz Kowal grzegorz@amuncode.org","I'll merge your patch as it works so you get the credit, and then add my that update the output and calculations.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,181,2019-06-12T03:52:11Z,2020-03-20T07:22:36Z,2020-10-16T06:03:04Z,CLOSED,False,734,674,29,https://github.com/unquietwiki,"Fixes merge for #59, #174, and #175",17,['enhancement'],https://github.com/kdave/btrfs-progs/pull/181,https://github.com/unquietwiki,1,https://github.com/kdave/btrfs-progs/pull/181,"@kdave this seems like a lot; but honestly, I've made worse commits to other projects. The only one that I'm actually iffy on is the utils.c changes: the fallthrough method I borrowed appears to be a port of what happens in C++17, but might still need yours/their sign off.

#59 ""fix""
#175 patch from @elliotclee
#174 fixes: without the other two included, it's kinda silly.","@kdave this seems like a lot; but honestly, I've made worse commits to other projects. The only one that I'm actually iffy on is the utils.c changes: the fallthrough method I borrowed appears to be a port of what happens in C++17, but might still need yours/their sign off.

#59 ""fix""
#175 patch from @elliotclee
#174 fixes: without the other two included, it's kinda silly.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,181,2019-06-12T03:52:11Z,2020-03-20T07:22:36Z,2020-10-16T06:03:04Z,CLOSED,False,734,674,29,https://github.com/unquietwiki,"Fixes merge for #59, #174, and #175",17,['enhancement'],https://github.com/kdave/btrfs-progs/pull/181,https://github.com/unquietwiki,2,https://github.com/kdave/btrfs-progs/pull/181#issuecomment-501110814,"@kdave this seems like a lot; but honestly, I've made worse commits to other projects. The only one that I'm actually iffy on is the utils.c changes: the fallthrough method I borrowed appears to be a port of what happens in C++17, but might still need yours/their sign off.

#59 ""fix""
#175 patch from @elliotclee
#174 fixes: without the other two included, it's kinda silly.",And I've been using this changeset live on a ~90TB recovery effort. My problem so far has been getting my NFS target to absorb the amount of data I'm throwing at it! 💯,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,181,2019-06-12T03:52:11Z,2020-03-20T07:22:36Z,2020-10-16T06:03:04Z,CLOSED,False,734,674,29,https://github.com/unquietwiki,"Fixes merge for #59, #174, and #175",17,['enhancement'],https://github.com/kdave/btrfs-progs/pull/181,https://github.com/unquietwiki,3,https://github.com/kdave/btrfs-progs/pull/181#issuecomment-506245378,"@kdave this seems like a lot; but honestly, I've made worse commits to other projects. The only one that I'm actually iffy on is the utils.c changes: the fallthrough method I borrowed appears to be a port of what happens in C++17, but might still need yours/their sign off.

#59 ""fix""
#175 patch from @elliotclee
#174 fixes: without the other two included, it's kinda silly.",@kdave Checking back on this: memory usage on my restore project has been pretty consistent; not seeing any major memory leakage. I do notice it's a lot more responsive to restore onto an SMB mount than an NFS mount (keeps overloading the latter).,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,181,2019-06-12T03:52:11Z,2020-03-20T07:22:36Z,2020-10-16T06:03:04Z,CLOSED,False,734,674,29,https://github.com/unquietwiki,"Fixes merge for #59, #174, and #175",17,['enhancement'],https://github.com/kdave/btrfs-progs/pull/181,https://github.com/unquietwiki,4,https://github.com/kdave/btrfs-progs/pull/181#issuecomment-549561420,"@kdave this seems like a lot; but honestly, I've made worse commits to other projects. The only one that I'm actually iffy on is the utils.c changes: the fallthrough method I borrowed appears to be a port of what happens in C++17, but might still need yours/their sign off.

#59 ""fix""
#175 patch from @elliotclee
#174 fixes: without the other two included, it's kinda silly.","@kdave did any of these changes make it into 5.3.x ? I saw there was mention of ""printf fixes"" that I do recall working on.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,181,2019-06-12T03:52:11Z,2020-03-20T07:22:36Z,2020-10-16T06:03:04Z,CLOSED,False,734,674,29,https://github.com/unquietwiki,"Fixes merge for #59, #174, and #175",17,['enhancement'],https://github.com/kdave/btrfs-progs/pull/181,https://github.com/kdave,5,https://github.com/kdave/btrfs-progs/pull/181#issuecomment-549745780,"@kdave this seems like a lot; but honestly, I've made worse commits to other projects. The only one that I'm actually iffy on is the utils.c changes: the fallthrough method I borrowed appears to be a port of what happens in C++17, but might still need yours/their sign off.

#59 ""fix""
#175 patch from @elliotclee
#174 fixes: without the other two included, it's kinda silly.","#175 has been merged, the other two partially so fart",True,{'ROCKET': ['https://github.com/unquietwiki']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,181,2019-06-12T03:52:11Z,2020-03-20T07:22:36Z,2020-10-16T06:03:04Z,CLOSED,False,734,674,29,https://github.com/unquietwiki,"Fixes merge for #59, #174, and #175",17,['enhancement'],https://github.com/kdave/btrfs-progs/pull/181,https://github.com/unquietwiki,6,https://github.com/kdave/btrfs-progs/pull/181#issuecomment-549908750,"@kdave this seems like a lot; but honestly, I've made worse commits to other projects. The only one that I'm actually iffy on is the utils.c changes: the fallthrough method I borrowed appears to be a port of what happens in C++17, but might still need yours/their sign off.

#59 ""fix""
#175 patch from @elliotclee
#174 fixes: without the other two included, it's kinda silly.","@kdave thanks! If you need me to do any more work on this, I can try to make that happen.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,181,2019-06-12T03:52:11Z,2020-03-20T07:22:36Z,2020-10-16T06:03:04Z,CLOSED,False,734,674,29,https://github.com/unquietwiki,"Fixes merge for #59, #174, and #175",17,['enhancement'],https://github.com/kdave/btrfs-progs/pull/181,https://github.com/unquietwiki,7,https://github.com/kdave/btrfs-progs/pull/181#issuecomment-709816357,"@kdave this seems like a lot; but honestly, I've made worse commits to other projects. The only one that I'm actually iffy on is the utils.c changes: the fallthrough method I borrowed appears to be a port of what happens in C++17, but might still need yours/their sign off.

#59 ""fix""
#175 patch from @elliotclee
#174 fixes: without the other two included, it's kinda silly.","Hey @kdave did you need anything else from https://github.com/unquietwiki/btrfs-progs , or can I delete my copy? I figure you have what you needed. Thanks!",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,182,2019-06-18T18:38:31Z,2019-07-02T12:47:58Z,2020-10-11T14:45:16Z,CLOSED,False,3,3,1,https://github.com/pjw91,restore: Fix input buffer handling,1,[],https://github.com/kdave/btrfs-progs/pull/182,https://github.com/pjw91,1,https://github.com/kdave/btrfs-progs/pull/182,"fgets consumes n-1 bytes from input buffer.
When a user types y\n, the newline is left in the buffer.
As a result, the next fgets uses that \n as answer without waiting for the user to type.
This patch also fix a bug that dereference the ret without checking if it's NULL.","fgets consumes n-1 bytes from input buffer.
When a user types y\n, the newline is left in the buffer.
As a result, the next fgets uses that \n as answer without waiting for the user to type.
This patch also fix a bug that dereference the ret without checking if it's NULL.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,182,2019-06-18T18:38:31Z,2019-07-02T12:47:58Z,2020-10-11T14:45:16Z,CLOSED,False,3,3,1,https://github.com/pjw91,restore: Fix input buffer handling,1,[],https://github.com/kdave/btrfs-progs/pull/182,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/182#issuecomment-507661641,"fgets consumes n-1 bytes from input buffer.
When a user types y\n, the newline is left in the buffer.
As a result, the next fgets uses that \n as answer without waiting for the user to type.
This patch also fix a bug that dereference the ret without checking if it's NULL.","Added to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,188,2019-06-28T17:09:18Z,2021-07-26T11:36:16Z,2021-07-26T11:36:16Z,CLOSED,False,37,12,1,https://github.com/intelfx,"restore: fix ""looping"" prompts, add `--looping` for unattended restores",2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/188,https://github.com/intelfx,1,https://github.com/kdave/btrfs-progs/pull/188,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,188,2019-06-28T17:09:18Z,2021-07-26T11:36:16Z,2021-07-26T11:36:16Z,CLOSED,False,37,12,1,https://github.com/intelfx,"restore: fix ""looping"" prompts, add `--looping` for unattended restores",2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/188,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/188#issuecomment-515421256,,"The looping caused by bad input buffer handling has been fixed by 064341d, I'm leaving this open for the new option.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,188,2019-06-28T17:09:18Z,2021-07-26T11:36:16Z,2021-07-26T11:36:16Z,CLOSED,False,37,12,1,https://github.com/intelfx,"restore: fix ""looping"" prompts, add `--looping` for unattended restores",2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/188,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/188#issuecomment-886624528,,The looping has been removed in 5.13. If there's ever need and real example where the loop detection really helps we can revive that. Thanks.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,190,2019-07-07T18:07:15Z,2019-07-26T10:59:20Z,2019-07-26T10:59:20Z,CLOSED,False,2,5,1,https://github.com/gkowal,Scrub status fixes,2,[],https://github.com/kdave/btrfs-progs/pull/190,https://github.com/gkowal,1,https://github.com/kdave/btrfs-progs/pull/190,"ETA is calculated  in a wrong way. It should be just current time in seconds + sec_left, independently if the job was resumed or not.
Also status lines for resumed jobs have wrong alignment.","ETA is calculated  in a wrong way. It should be just current time in seconds + sec_left, independently if the job was resumed or not.
Also status lines for resumed jobs have wrong alignment.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,190,2019-07-07T18:07:15Z,2019-07-26T10:59:20Z,2019-07-26T10:59:20Z,CLOSED,False,2,5,1,https://github.com/gkowal,Scrub status fixes,2,[],https://github.com/kdave/btrfs-progs/pull/190,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/190#issuecomment-515410057,"ETA is calculated  in a wrong way. It should be just current time in seconds + sec_left, independently if the job was resumed or not.
Also status lines for resumed jobs have wrong alignment.","Merged, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,191,2019-07-08T14:40:37Z,2020-01-03T00:32:46Z,2020-01-03T00:32:46Z,CLOSED,False,147,27,2,https://github.com/gkowal,Show user filesystem usage by block type and profile,4,['enhancement'],https://github.com/kdave/btrfs-progs/pull/191,https://github.com/gkowal,1,https://github.com/kdave/btrfs-progs/pull/191,"This pull request provides the following changes.


Filesystem usage stats by device are shown only after specifying a new option -d.


Filesystem usage stats show now the user usage stats, which contrary to device usage depend on the RAID profiles, as total size, used sizes by group type (data, metadata, and  system) and their total. By specifying optional -P flag, stats per RAID profile are shown for each group type (which might be useful for inspection of filesystems with chunks of mixed profiles).


btrfs-filesystem man page has been updated to describe new flags.


Example output for btrfs filesystem usage -P:
Overall:
    Device size:                  10.92TiB
    Device allocated:              5.92TiB
    Device unallocated:            5.00TiB
    Device data used:              5.91TiB
    Device metadata used:         11.92GiB
    Device system used:          672.00KiB
    Device total used:             5.92TiB
    Device missing:                  0.00B
    User total size:               5.46TiB
    User data used:                2.95TiB
        raid10:                    2.95TiB
    User metadata used:            7.00GiB
        raid10:                    7.00GiB
    User system used:             64.00MiB
        raid10:                   64.00MiB
    User total used:               2.96TiB
    User free (estimated):         2.50TiB      (min: 2.50TiB)
    Data ratio:                       2.00
    Metadata ratio:                   2.00
    Global reserve:              512.00MiB      (used: 0.00B)","This pull request provides the following changes.


Filesystem usage stats by device are shown only after specifying a new option -d.


Filesystem usage stats show now the user usage stats, which contrary to device usage depend on the RAID profiles, as total size, used sizes by group type (data, metadata, and  system) and their total. By specifying optional -P flag, stats per RAID profile are shown for each group type (which might be useful for inspection of filesystems with chunks of mixed profiles).


btrfs-filesystem man page has been updated to describe new flags.


Example output for btrfs filesystem usage -P:
Overall:
    Device size:                  10.92TiB
    Device allocated:              5.92TiB
    Device unallocated:            5.00TiB
    Device data used:              5.91TiB
    Device metadata used:         11.92GiB
    Device system used:          672.00KiB
    Device total used:             5.92TiB
    Device missing:                  0.00B
    User total size:               5.46TiB
    User data used:                2.95TiB
        raid10:                    2.95TiB
    User metadata used:            7.00GiB
        raid10:                    7.00GiB
    User system used:             64.00MiB
        raid10:                   64.00MiB
    User total used:               2.96TiB
    User free (estimated):         2.50TiB      (min: 2.50TiB)
    Data ratio:                       2.00
    Metadata ratio:                   2.00
    Global reserve:              512.00MiB      (used: 0.00B)",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,191,2019-07-08T14:40:37Z,2020-01-03T00:32:46Z,2020-01-03T00:32:46Z,CLOSED,False,147,27,2,https://github.com/gkowal,Show user filesystem usage by block type and profile,4,['enhancement'],https://github.com/kdave/btrfs-progs/pull/191,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/191#issuecomment-515424292,"This pull request provides the following changes.


Filesystem usage stats by device are shown only after specifying a new option -d.


Filesystem usage stats show now the user usage stats, which contrary to device usage depend on the RAID profiles, as total size, used sizes by group type (data, metadata, and  system) and their total. By specifying optional -P flag, stats per RAID profile are shown for each group type (which might be useful for inspection of filesystems with chunks of mixed profiles).


btrfs-filesystem man page has been updated to describe new flags.


Example output for btrfs filesystem usage -P:
Overall:
    Device size:                  10.92TiB
    Device allocated:              5.92TiB
    Device unallocated:            5.00TiB
    Device data used:              5.91TiB
    Device metadata used:         11.92GiB
    Device system used:          672.00KiB
    Device total used:             5.92TiB
    Device missing:                  0.00B
    User total size:               5.46TiB
    User data used:                2.95TiB
        raid10:                    2.95TiB
    User metadata used:            7.00GiB
        raid10:                    7.00GiB
    User system used:             64.00MiB
        raid10:                   64.00MiB
    User total used:               2.96TiB
    User free (estimated):         2.50TiB      (min: 2.50TiB)
    Data ratio:                       2.00
    Metadata ratio:                   2.00
    Global reserve:              512.00MiB      (used: 0.00B)","The per-blockgroup data are printed after the summary, for non-root it's the summary numbers, like:
$ btrfs fi us mnt
WARNING: cannot read detailed chunk info, per-device usage will not be shown, run as root
Overall:
    Device size:                  12.00GiB
    Device allocated:              3.08GiB
    Device unallocated:            8.92GiB
    Device missing:                  0.00B
    Used:                          1.00MiB
    Free (estimated):              5.46GiB      (min: 5.46GiB)
    Data ratio:                       2.00
    Metadata ratio:                   2.00
    Global reserve:               16.00MiB      (used: 0.00B)

Data,RAID1: Size:1.00GiB, Used:384.00KiB

Metadata,RAID1: Size:512.00MiB, Used:112.00KiB

System,RAID1: Size:40.00MiB, Used:16.00KiB

With root it's:
Data,RAID1: Size:1.00GiB, Used:384.00KiB
   /dev/loop0      1.00GiB
   /dev/loop1      1.00GiB

Metadata,RAID1: Size:512.00MiB, Used:112.00KiB
   /dev/loop0    512.00MiB
   /dev/loop1    256.00MiB
   /dev/loop2    256.00MiB

System,RAID1: Size:8.00MiB, Used:16.00KiB
   /dev/loop1      8.00MiB
   /dev/loop2      8.00MiB

Unallocated:
   /dev/loop0      2.50GiB
   /dev/loop1      2.74GiB
   /dev/loop2      3.74GiB

but I think you want the summary by type, not by device. Your patches remove the 'Used:' field, that can break scripts that could rely on it, so we need to combine the enhanced per type data with that.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,197,2019-08-11T22:48:20Z,2019-09-25T18:51:58Z,2019-09-25T20:36:20Z,CLOSED,False,29,29,12,https://github.com/neheb,btrfs-progs: Fix printf formats,1,[],https://github.com/kdave/btrfs-progs/pull/197,https://github.com/neheb,1,https://github.com/kdave/btrfs-progs/pull/197,"sizeof returns size_t, not unsigned long.
Signed-off-by: Rosen Penev rosenp@gmail.com","sizeof returns size_t, not unsigned long.
Signed-off-by: Rosen Penev rosenp@gmail.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,197,2019-08-11T22:48:20Z,2019-09-25T18:51:58Z,2019-09-25T20:36:20Z,CLOSED,False,29,29,12,https://github.com/neheb,btrfs-progs: Fix printf formats,1,[],https://github.com/kdave/btrfs-progs/pull/197,https://github.com/neheb,2,https://github.com/kdave/btrfs-progs/pull/197#issuecomment-520268982,"sizeof returns size_t, not unsigned long.
Signed-off-by: Rosen Penev rosenp@gmail.com",cppcheck found a lot more than GCC's -Wformat=2.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,197,2019-08-11T22:48:20Z,2019-09-25T18:51:58Z,2019-09-25T20:36:20Z,CLOSED,False,29,29,12,https://github.com/neheb,btrfs-progs: Fix printf formats,1,[],https://github.com/kdave/btrfs-progs/pull/197,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/197#issuecomment-535161487,"sizeof returns size_t, not unsigned long.
Signed-off-by: Rosen Penev rosenp@gmail.com","Thanks for the fixes and the review, added to devel.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,203,2019-09-10T16:15:27Z,2019-09-12T18:21:12Z,2019-09-12T18:21:12Z,CLOSED,False,4,3,1,https://github.com/xnox,asciidoctor v2.0.0 droped docbook45 backend.,2,[],https://github.com/kdave/btrfs-progs/pull/203,https://github.com/xnox,1,https://github.com/kdave/btrfs-progs/pull/203,"See https://github.com/asciidoctor/asciidoctor/releases/tag/v2.0.0
Signed-off-by: Dimitri John Ledkov xnox@ubuntu.com","See https://github.com/asciidoctor/asciidoctor/releases/tag/v2.0.0
Signed-off-by: Dimitri John Ledkov xnox@ubuntu.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,203,2019-09-10T16:15:27Z,2019-09-12T18:21:12Z,2019-09-12T18:21:12Z,CLOSED,False,4,3,1,https://github.com/xnox,asciidoctor v2.0.0 droped docbook45 backend.,2,[],https://github.com/kdave/btrfs-progs/pull/203,https://github.com/CyberShadow,2,https://github.com/kdave/btrfs-progs/pull/203#issuecomment-530018824,"See https://github.com/asciidoctor/asciidoctor/releases/tag/v2.0.0
Signed-off-by: Dimitri John Ledkov xnox@ubuntu.com",See also: #201,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,203,2019-09-10T16:15:27Z,2019-09-12T18:21:12Z,2019-09-12T18:21:12Z,CLOSED,False,4,3,1,https://github.com/xnox,asciidoctor v2.0.0 droped docbook45 backend.,2,[],https://github.com/kdave/btrfs-progs/pull/203,https://github.com/xnox,3,https://github.com/kdave/btrfs-progs/pull/203#issuecomment-530018987,"See https://github.com/asciidoctor/asciidoctor/releases/tag/v2.0.0
Signed-off-by: Dimitri John Ledkov xnox@ubuntu.com",ah! true.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,203,2019-09-10T16:15:27Z,2019-09-12T18:21:12Z,2019-09-12T18:21:12Z,CLOSED,False,4,3,1,https://github.com/xnox,asciidoctor v2.0.0 droped docbook45 backend.,2,[],https://github.com/kdave/btrfs-progs/pull/203,https://github.com/xnox,4,https://github.com/kdave/btrfs-progs/pull/203#issuecomment-530023013,"See https://github.com/asciidoctor/asciidoctor/releases/tag/v2.0.0
Signed-off-by: Dimitri John Ledkov xnox@ubuntu.com",@CyberShadow but i don't understand.... DocBook v5 does not use DTBs and xmlto tries to validate one... which makes no sense. Are you thinking to fix xmlto to skip DTB validation for DocBook v5?,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,203,2019-09-10T16:15:27Z,2019-09-12T18:21:12Z,2019-09-12T18:21:12Z,CLOSED,False,4,3,1,https://github.com/xnox,asciidoctor v2.0.0 droped docbook45 backend.,2,[],https://github.com/kdave/btrfs-progs/pull/203,https://github.com/kdave,5,https://github.com/kdave/btrfs-progs/pull/203#issuecomment-530945730,"See https://github.com/asciidoctor/asciidoctor/releases/tag/v2.0.0
Signed-off-by: Dimitri John Ledkov xnox@ubuntu.com","Skipping the validation seems to be ok, fix merged, thanks. I've slightly changed it so XMLTO is set in one place and the extra options are added when asciidoctor is used.
There's a new message ""stripped namespace before processing"" but it seems harmless.",True,{'HOORAY': ['https://github.com/xnox']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,204,2019-09-19T10:13:44Z,2019-09-25T18:21:18Z,2019-09-25T18:21:26Z,CLOSED,False,8,2,1,https://github.com/dennisszhou,doc: update btrfs man page to explain compression level support,1,[],https://github.com/kdave/btrfs-progs/pull/204,https://github.com/dennisszhou,1,https://github.com/kdave/btrfs-progs/pull/204,"As of 5.1, btrfs now supports compression levels for zstd. Let users
know about this in the man page.
Signed-off-by: Dennis Zhou dennis@kernel.org","As of 5.1, btrfs now supports compression levels for zstd. Let users
know about this in the man page.
Signed-off-by: Dennis Zhou dennis@kernel.org",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,204,2019-09-19T10:13:44Z,2019-09-25T18:21:18Z,2019-09-25T18:21:26Z,CLOSED,False,8,2,1,https://github.com/dennisszhou,doc: update btrfs man page to explain compression level support,1,[],https://github.com/kdave/btrfs-progs/pull/204,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/204#issuecomment-535148994,"As of 5.1, btrfs now supports compression levels for zstd. Let users
know about this in the man page.
Signed-off-by: Dennis Zhou dennis@kernel.org","Added to devel, with minor update, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,206,2019-09-22T12:36:21Z,2019-09-25T18:14:58Z,2019-09-25T18:14:58Z,CLOSED,False,1,1,1,https://github.com/ffontaine,kerncompat.h: define BTRFS_DISABLE_BACKTRACE when building with uClibc,1,[],https://github.com/kdave/btrfs-progs/pull/206,https://github.com/ffontaine,1,https://github.com/kdave/btrfs-progs/pull/206,"uClibc does not provide backtrace() nor <execinfo.h>. When building
btrfs-progs, passing --disable-backtrace is enough to make it build with
uClibc. But once btrfs-progs is installed and another program/library
includes kerncompat.h, it fails to build with uClibc, because
BTRFS_DISABLE_BACKTRACE is not defined.
The most correct fix for this would be to have kerncompat.h generated
from kerncompat.h.in during the btrfs-progs build process, and tuned
depending on autoconf/automake variables. But as a quick fix that
follows the current strategy, we simply tweak the existing GLIBC
conditional. Indeed, uClibc pretends to be glibc and defines GLIBC,
but it does not replace it completely, hence the need to define
BTRFS_DISABLE_BACKTRACE when GLIBC is not defined or when
UCLIBC is defined.
Signed-off-by: Thomas Petazzoni thomas.petazzoni@free-electrons.com
[Retrieved from:
https://git.buildroot.net/buildroot/tree/package/btrfs-progs/0002-kerncompat.h-define-BTRFS_DISABLE_BACKTRACE-when-bui.patch]
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","uClibc does not provide backtrace() nor <execinfo.h>. When building
btrfs-progs, passing --disable-backtrace is enough to make it build with
uClibc. But once btrfs-progs is installed and another program/library
includes kerncompat.h, it fails to build with uClibc, because
BTRFS_DISABLE_BACKTRACE is not defined.
The most correct fix for this would be to have kerncompat.h generated
from kerncompat.h.in during the btrfs-progs build process, and tuned
depending on autoconf/automake variables. But as a quick fix that
follows the current strategy, we simply tweak the existing GLIBC
conditional. Indeed, uClibc pretends to be glibc and defines GLIBC,
but it does not replace it completely, hence the need to define
BTRFS_DISABLE_BACKTRACE when GLIBC is not defined or when
UCLIBC is defined.
Signed-off-by: Thomas Petazzoni thomas.petazzoni@free-electrons.com
[Retrieved from:
https://git.buildroot.net/buildroot/tree/package/btrfs-progs/0002-kerncompat.h-define-BTRFS_DISABLE_BACKTRACE-when-bui.patch]
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,206,2019-09-22T12:36:21Z,2019-09-25T18:14:58Z,2019-09-25T18:14:58Z,CLOSED,False,1,1,1,https://github.com/ffontaine,kerncompat.h: define BTRFS_DISABLE_BACKTRACE when building with uClibc,1,[],https://github.com/kdave/btrfs-progs/pull/206,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/206#issuecomment-535146303,"uClibc does not provide backtrace() nor <execinfo.h>. When building
btrfs-progs, passing --disable-backtrace is enough to make it build with
uClibc. But once btrfs-progs is installed and another program/library
includes kerncompat.h, it fails to build with uClibc, because
BTRFS_DISABLE_BACKTRACE is not defined.
The most correct fix for this would be to have kerncompat.h generated
from kerncompat.h.in during the btrfs-progs build process, and tuned
depending on autoconf/automake variables. But as a quick fix that
follows the current strategy, we simply tweak the existing GLIBC
conditional. Indeed, uClibc pretends to be glibc and defines GLIBC,
but it does not replace it completely, hence the need to define
BTRFS_DISABLE_BACKTRACE when GLIBC is not defined or when
UCLIBC is defined.
Signed-off-by: Thomas Petazzoni thomas.petazzoni@free-electrons.com
[Retrieved from:
https://git.buildroot.net/buildroot/tree/package/btrfs-progs/0002-kerncompat.h-define-BTRFS_DISABLE_BACKTRACE-when-bui.patch]
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","I'd rather avoid to generate the file from the .in template, so the quick fix shall be the permanent one. Thanks for forwarding the patch.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,211,2019-09-26T18:35:15Z,2019-11-19T17:08:07Z,2019-11-19T17:08:07Z,CLOSED,False,5,1,1,https://github.com/ffontaine,Makefile: install static library and headers in install-static,1,[],https://github.com/kdave/btrfs-progs/pull/211,https://github.com/ffontaine,1,https://github.com/kdave/btrfs-progs/pull/211,"Currently, the install-static target only installs the statically
compiled tools. However, some programs outside of btrfs-progs (for
example docker) link with the btrfs libraries. If such programs want to
link statically against the btrfs-progs library, then this library
should be installed by ""install-static"". Indeed, ""make install"" cannot
be used if the support for shared library is not enabled.
Signed-off-by: Thomas Petazzoni thomas.petazzoni@free-electrons.com
[Gustavo: Rebase for btrfs-progs 4.7.2]
Signed-off-by: Gustavo Zacarias gustavo@zacarias.com.ar
[Vincent: Rebase for btrfs-progs 4.10]
Signed-off-by: Vicente Olivert Riera Vincent.Riera@imgtec.com
[baruch: Rebase for btrfs-progs 4.16]
Signed-off-by: Baruch Siach baruch@tkos.co.il
[Retrieved from:
https://git.buildroot.net/buildroot/tree/package/btrfs-progs/0001-Makefile-install-static-library-and-headers-in-insta.patch]
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Currently, the install-static target only installs the statically
compiled tools. However, some programs outside of btrfs-progs (for
example docker) link with the btrfs libraries. If such programs want to
link statically against the btrfs-progs library, then this library
should be installed by ""install-static"". Indeed, ""make install"" cannot
be used if the support for shared library is not enabled.
Signed-off-by: Thomas Petazzoni thomas.petazzoni@free-electrons.com
[Gustavo: Rebase for btrfs-progs 4.7.2]
Signed-off-by: Gustavo Zacarias gustavo@zacarias.com.ar
[Vincent: Rebase for btrfs-progs 4.10]
Signed-off-by: Vicente Olivert Riera Vincent.Riera@imgtec.com
[baruch: Rebase for btrfs-progs 4.16]
Signed-off-by: Baruch Siach baruch@tkos.co.il
[Retrieved from:
https://git.buildroot.net/buildroot/tree/package/btrfs-progs/0001-Makefile-install-static-library-and-headers-in-insta.patch]
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,211,2019-09-26T18:35:15Z,2019-11-19T17:08:07Z,2019-11-19T17:08:07Z,CLOSED,False,5,1,1,https://github.com/ffontaine,Makefile: install static library and headers in install-static,1,[],https://github.com/kdave/btrfs-progs/pull/211,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/211#issuecomment-555608380,"Currently, the install-static target only installs the statically
compiled tools. However, some programs outside of btrfs-progs (for
example docker) link with the btrfs libraries. If such programs want to
link statically against the btrfs-progs library, then this library
should be installed by ""install-static"". Indeed, ""make install"" cannot
be used if the support for shared library is not enabled.
Signed-off-by: Thomas Petazzoni thomas.petazzoni@free-electrons.com
[Gustavo: Rebase for btrfs-progs 4.7.2]
Signed-off-by: Gustavo Zacarias gustavo@zacarias.com.ar
[Vincent: Rebase for btrfs-progs 4.10]
Signed-off-by: Vicente Olivert Riera Vincent.Riera@imgtec.com
[baruch: Rebase for btrfs-progs 4.16]
Signed-off-by: Baruch Siach baruch@tkos.co.il
[Retrieved from:
https://git.buildroot.net/buildroot/tree/package/btrfs-progs/0001-Makefile-install-static-library-and-headers-in-insta.patch]
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Applied, thanks. I've also added a comment to the makefile what files gets installed.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,215,2019-10-23T07:47:45Z,2019-10-23T22:24:33Z,2019-10-24T00:12:40Z,CLOSED,False,1,1,1,https://github.com/onokatio,Makefile: fix #214 missing volumes.o,1,['bug'],https://github.com/kdave/btrfs-progs/pull/215,https://github.com/onokatio,1,https://github.com/kdave/btrfs-progs/pull/215,"#214
The problem to fix
extent_io.o depends volumes.o, but it's missing from Makefile.
Whait I did
add volumes.o to libbtrfs_objects
Checks
Snapper in my environment didn't run because the problem.
But after this fix, I confirm that it runs successfully.","#214
The problem to fix
extent_io.o depends volumes.o, but it's missing from Makefile.
Whait I did
add volumes.o to libbtrfs_objects
Checks
Snapper in my environment didn't run because the problem.
But after this fix, I confirm that it runs successfully.",True,{'THUMBS_UP': ['https://github.com/julien-noblet']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,215,2019-10-23T07:47:45Z,2019-10-23T22:24:33Z,2019-10-24T00:12:40Z,CLOSED,False,1,1,1,https://github.com/onokatio,Makefile: fix #214 missing volumes.o,1,['bug'],https://github.com/kdave/btrfs-progs/pull/215,https://github.com/maximbaz,2,https://github.com/kdave/btrfs-progs/pull/215#issuecomment-545457661,"#214
The problem to fix
extent_io.o depends volumes.o, but it's missing from Makefile.
Whait I did
add volumes.o to libbtrfs_objects
Checks
Snapper in my environment didn't run because the problem.
But after this fix, I confirm that it runs successfully.","This doesn't fix #214 for me, or not fully anyway.
In 5.3:
❯ snapper --version
snapper: symbol lookup error: /usr/lib/libbtrfs.so.0: undefined symbol: write_raid56_with_parity

❯ ldd -r /usr/lib/libbtrfs.so.0
	linux-vdso.so.1 (0x00007ffe17ade000)
	libuuid.so.1 => /usr/lib/libuuid.so.1 (0x00007f3af32a3000)
	libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007f3af3281000)
	libc.so.6 => /usr/lib/libc.so.6 (0x00007f3af30ba000)
	/usr/lib64/ld-linux-x86-64.so.2 (0x00007f3af32ec000)
undefined symbol: write_raid56_with_parity	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_map_block	(/usr/lib/libbtrfs.so.0)
undefined symbol: total_memory	(/usr/lib/libbtrfs.so.0)

With this patch applied:
❯ snapper --version
snapper: symbol lookup error: /usr/lib/libbtrfs.so.0: undefined symbol: btrfs_alloc_path

❯ ldd -r /usr/lib/libbtrfs.so.0
	linux-vdso.so.1 (0x00007ffeeb877000)
	libuuid.so.1 => /usr/lib/libuuid.so.1 (0x00007fc983fce000)
	libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007fc983fac000)
	libc.so.6 => /usr/lib/libc.so.6 (0x00007fc983de5000)
	/usr/lib64/ld-linux-x86-64.so.2 (0x00007fc98401c000)
undefined symbol: btrfs_alloc_path	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_next_sibling_tree_block	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_init_path	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_insert_empty_items	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_start_transaction	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_free_path	(/usr/lib/libbtrfs.so.0)
undefined symbol: raid6_gen_syndrome	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_mark_buffer_dirty	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_insert_item	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_release_path	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_set_buffer_uptodate	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_search_slot	(/usr/lib/libbtrfs.so.0)
undefined symbol: read_whole_eb	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_previous_item	(/usr/lib/libbtrfs.so.0)
undefined symbol: raid5_gen_result	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_find_create_tree_block	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_commit_transaction	(/usr/lib/libbtrfs.so.0)
undefined symbol: total_memory	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_read_dev_super	(/usr/lib/libbtrfs.so.0)
undefined symbol: div_factor	(/usr/lib/libbtrfs.so.0)",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,215,2019-10-23T07:47:45Z,2019-10-23T22:24:33Z,2019-10-24T00:12:40Z,CLOSED,False,1,1,1,https://github.com/onokatio,Makefile: fix #214 missing volumes.o,1,['bug'],https://github.com/kdave/btrfs-progs/pull/215,https://github.com/julien-noblet,3,https://github.com/kdave/btrfs-progs/pull/215#issuecomment-545461756,"#214
The problem to fix
extent_io.o depends volumes.o, but it's missing from Makefile.
Whait I did
add volumes.o to libbtrfs_objects
Checks
Snapper in my environment didn't run because the problem.
But after this fix, I confirm that it runs successfully.",It look like there is a lot of thing missing in libbtrfs_objects & libbtrfs_headers.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,215,2019-10-23T07:47:45Z,2019-10-23T22:24:33Z,2019-10-24T00:12:40Z,CLOSED,False,1,1,1,https://github.com/onokatio,Makefile: fix #214 missing volumes.o,1,['bug'],https://github.com/kdave/btrfs-progs/pull/215,https://github.com/julien-noblet,4,https://github.com/kdave/btrfs-progs/pull/215#issuecomment-545477666,"#214
The problem to fix
extent_io.o depends volumes.o, but it's missing from Makefile.
Whait I did
add volumes.o to libbtrfs_objects
Checks
Snapper in my environment didn't run because the problem.
But after this fix, I confirm that it runs successfully.",Please have a look to #216,True,{'THUMBS_UP': ['https://github.com/onokatio']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,216,2019-10-23T14:41:43Z,2019-10-25T17:17:48Z,2019-10-25T17:17:48Z,CLOSED,False,7,4,1,https://github.com/julien-noblet,Makefile: fix#214 libbtrfs : missing objects,2,[],https://github.com/kdave/btrfs-progs/pull/216,https://github.com/julien-noblet,1,https://github.com/kdave/btrfs-progs/pull/216,Should Fix #214,Should Fix #214,True,{'THUMBS_UP': ['https://github.com/onokatio']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,216,2019-10-23T14:41:43Z,2019-10-25T17:17:48Z,2019-10-25T17:17:48Z,CLOSED,False,7,4,1,https://github.com/julien-noblet,Makefile: fix#214 libbtrfs : missing objects,2,[],https://github.com/kdave/btrfs-progs/pull/216,https://github.com/maximbaz,2,https://github.com/kdave/btrfs-progs/pull/216#issuecomment-545493451,Should Fix #214,"Believe it or not, even this doesn't fully fix the issue for me...
❯ snapper --version
snapper: symbol lookup error: /usr/lib/libbtrfs.so.0: undefined symbol: add_to_free_space_tree

❯ ldd -r /usr/lib/libbtrfs.so.0
	linux-vdso.so.1 (0x00007ffde03d7000)
	libuuid.so.1 => /usr/lib/libuuid.so.1 (0x00007f29fda0d000)
	libblkid.so.1 => /usr/lib/libblkid.so.1 (0x00007f29fd9b7000)
	libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007f29fd995000)
	libc.so.6 => /usr/lib/libc.so.6 (0x00007f29fd7ce000)
	/usr/lib64/ld-linux-x86-64.so.2 (0x00007f29fda9b000)
undefined symbol: add_to_free_space_tree	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_util_is_subvolume	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_add_corrupt_extent_record	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_insert_inode_ref	(/usr/lib/libbtrfs.so.0)
undefined symbol: btrfs_insert_inode	(/usr/lib/libbtrfs.so.0)
undefined symbol: remove_from_free_space_tree	(/usr/lib/libbtrfs.so.0)",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,216,2019-10-23T14:41:43Z,2019-10-25T17:17:48Z,2019-10-25T17:17:48Z,CLOSED,False,7,4,1,https://github.com/julien-noblet,Makefile: fix#214 libbtrfs : missing objects,2,[],https://github.com/kdave/btrfs-progs/pull/216,https://github.com/julien-noblet,3,https://github.com/kdave/btrfs-progs/pull/216#issuecomment-545504935,Should Fix #214,"@maximbaz You're right, there is a lot of thing to add 😢
Can you retry with this patch?",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,216,2019-10-23T14:41:43Z,2019-10-25T17:17:48Z,2019-10-25T17:17:48Z,CLOSED,False,7,4,1,https://github.com/julien-noblet,Makefile: fix#214 libbtrfs : missing objects,2,[],https://github.com/kdave/btrfs-progs/pull/216,https://github.com/maximbaz,4,https://github.com/kdave/btrfs-progs/pull/216#issuecomment-545523411,Should Fix #214,"Fix confirmed (on Arch Linux), thank you very much!
❯ snapper --version
snapper 0.8.4

❯ ldd -r /usr/lib/libbtrfs.so.0
	linux-vdso.so.1 (0x00007ffce7659000)
	libuuid.so.1 => /usr/lib/libuuid.so.1 (0x00007f308a4f2000)
	libblkid.so.1 => /usr/lib/libblkid.so.1 (0x00007f308a49c000)
	libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007f308a47a000)
	libc.so.6 => /usr/lib/libc.so.6 (0x00007f308a2b3000)
	/usr/lib64/ld-linux-x86-64.so.2 (0x00007f308a5a1000)",True,{'HOORAY': ['https://github.com/onokatio']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,216,2019-10-23T14:41:43Z,2019-10-25T17:17:48Z,2019-10-25T17:17:48Z,CLOSED,False,7,4,1,https://github.com/julien-noblet,Makefile: fix#214 libbtrfs : missing objects,2,[],https://github.com/kdave/btrfs-progs/pull/216,https://github.com/kdave,5,https://github.com/kdave/btrfs-progs/pull/216#issuecomment-545687093,Should Fix #214,"Thanks, the fix needs to be a bit more convoluted so the newly added .o files don't add new exported symbols. The branch v5.3.x contains all the patches and unless I find more issues, that's going to be released in a day or so.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,216,2019-10-23T14:41:43Z,2019-10-25T17:17:48Z,2019-10-25T17:17:48Z,CLOSED,False,7,4,1,https://github.com/julien-noblet,Makefile: fix#214 libbtrfs : missing objects,2,[],https://github.com/kdave/btrfs-progs/pull/216,https://github.com/kdave,6,https://github.com/kdave/btrfs-progs/pull/216#issuecomment-546438030,Should Fix #214,"And I did find more, the CI environment reported missing reallocarray so one more file had to be added to the object list. All fixed in 5.3.1.",True,{'HOORAY': ['https://github.com/julien-noblet']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,217,2019-10-24T11:23:05Z,2019-11-19T17:43:43Z,2019-11-20T11:44:09Z,CLOSED,False,3515,285,52,https://github.com/unguul,Added `btrfs replace` example for replacing an online drive,37,[],https://github.com/kdave/btrfs-progs/pull/217,https://github.com/unguul,1,https://github.com/kdave/btrfs-progs/pull/217,Added example for replacing an online drive in a healthy state with a bigger one.,Added example for replacing an online drive in a healthy state with a bigger one.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,217,2019-10-24T11:23:05Z,2019-11-19T17:43:43Z,2019-11-20T11:44:09Z,CLOSED,False,3515,285,52,https://github.com/unguul,Added `btrfs replace` example for replacing an online drive,37,[],https://github.com/kdave/btrfs-progs/pull/217,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/217#issuecomment-555624303,Added example for replacing an online drive in a healthy state with a bigger one.,"Added to devel, thanks. I did some minor formatting edits.",True,{'THUMBS_UP': ['https://github.com/unguul']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,220,2019-11-13T03:13:01Z,2019-11-19T16:52:30Z,2019-11-19T16:56:17Z,CLOSED,False,1,0,1,https://github.com/marcosps,Documentation: btrfs-subvolume: Clarify the default list sort order,1,[],https://github.com/kdave/btrfs-progs/pull/220,https://github.com/marcosps,1,https://github.com/kdave/btrfs-progs/pull/220,"By default, ""btrfs subvolume list"" will show the subvolumes sorted by
subovlume id, in ascending order. Make this explicit in subvolume man
page.
Signed-off-by: Marcos Paulo de Souza mpdesouza@suse.com","By default, ""btrfs subvolume list"" will show the subvolumes sorted by
subovlume id, in ascending order. Make this explicit in subvolume man
page.
Signed-off-by: Marcos Paulo de Souza mpdesouza@suse.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,220,2019-11-13T03:13:01Z,2019-11-19T16:52:30Z,2019-11-19T16:56:17Z,CLOSED,False,1,0,1,https://github.com/marcosps,Documentation: btrfs-subvolume: Clarify the default list sort order,1,[],https://github.com/kdave/btrfs-progs/pull/220,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/220#issuecomment-555601080,"By default, ""btrfs subvolume list"" will show the subvolumes sorted by
subovlume id, in ascending order. Make this explicit in subvolume man
page.
Signed-off-by: Marcos Paulo de Souza mpdesouza@suse.com","Applied, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,226,2019-12-24T23:28:46Z,2020-03-03T16:57:49Z,2020-03-04T18:46:55Z,CLOSED,False,1,1,1,https://github.com/automorphism88,btrfs-progs: Fix typo,1,[],https://github.com/kdave/btrfs-progs/pull/226,https://github.com/automorphism88,1,https://github.com/kdave/btrfs-progs/pull/226,Noticed this spelling error when I ran btrfs property list earlier today and grepped the source to find the culprit.,Noticed this spelling error when I ran btrfs property list earlier today and grepped the source to find the culprit.,True,{'THUMBS_UP': ['https://github.com/marcosps']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,226,2019-12-24T23:28:46Z,2020-03-03T16:57:49Z,2020-03-04T18:46:55Z,CLOSED,False,1,1,1,https://github.com/automorphism88,btrfs-progs: Fix typo,1,[],https://github.com/kdave/btrfs-progs/pull/226,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/226#issuecomment-594055670,Noticed this spelling error when I ran btrfs property list earlier today and grepped the source to find the culprit.,"Merged to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,229,2020-01-04T20:07:00Z,,2022-06-06T17:27:42Z,OPEN,False,304,56,23,https://github.com/qwerty123443,btrfs-progs: cmds: Allow setting compression level per file,27,['enhancement'],https://github.com/kdave/btrfs-progs/pull/229,https://github.com/qwerty123443,1,https://github.com/kdave/btrfs-progs/pull/229,This fixes #184,This fixes #184,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,229,2020-01-04T20:07:00Z,,2022-06-06T17:27:42Z,OPEN,False,304,56,23,https://github.com/qwerty123443,btrfs-progs: cmds: Allow setting compression level per file,27,['enhancement'],https://github.com/kdave/btrfs-progs/pull/229,https://github.com/qwerty123443,2,https://github.com/kdave/btrfs-progs/pull/229#issuecomment-570816605,This fixes #184,"I should note, this is in conjunction with kdave/btrfs-devel#6",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,229,2020-01-04T20:07:00Z,,2022-06-06T17:27:42Z,OPEN,False,304,56,23,https://github.com/qwerty123443,btrfs-progs: cmds: Allow setting compression level per file,27,['enhancement'],https://github.com/kdave/btrfs-progs/pull/229,https://github.com/L3P3,3,https://github.com/kdave/btrfs-progs/pull/229#issuecomment-645871997,This fixes #184,"What about this conflict?
On my debian bullseye machine, I cannot use this defrag -czstd:level feature, it is not yet available.
I tried to build from qwerty123443:devel branch but when running btrfs fi defrag -czstd:15 ., it says ""Invalid argument"" to each file...
Please resolve and push as soon as possible, this feature is s** on a stick!",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,231,2020-01-08T21:22:50Z,2020-01-09T13:30:12Z,2020-01-09T13:30:22Z,CLOSED,False,0,1,1,https://github.com/awilfox,Documentation: Don't erase XMLTO_EXTRA contents,1,[],https://github.com/kdave/btrfs-progs/pull/231,https://github.com/awilfox,1,https://github.com/kdave/btrfs-progs/pull/231,"XMLTO_EXTRA is defined above, and then appended to if asciidoctor is
used to generate the manual pages.  The second definition was clearing
the value of this variable, which caused builds with asciidoctor to
fail with:
    [XMLTO]  btrfs-ioctl.3
xmlto: /usr/src/packages/user/btrfs-progs/src/btrfs-progs-v5.4/Documentation/btrfs-ioctl.xml does not validate (status 3)
xmlto: Fix document syntax or use --skip-validation option
validity error : no DTD found!
Document /usr/src/packages/user/btrfs-progs/src/btrfs-progs-v5.4/Documentation/btrfs-ioctl.xml does not validate
make[1]: *** [Makefile:114: btrfs-ioctl.3] Error 13

Fixes: 669f561 (""btrfs-progs: docs: use docbook5 backend for asciidoctor"")","XMLTO_EXTRA is defined above, and then appended to if asciidoctor is
used to generate the manual pages.  The second definition was clearing
the value of this variable, which caused builds with asciidoctor to
fail with:
    [XMLTO]  btrfs-ioctl.3
xmlto: /usr/src/packages/user/btrfs-progs/src/btrfs-progs-v5.4/Documentation/btrfs-ioctl.xml does not validate (status 3)
xmlto: Fix document syntax or use --skip-validation option
validity error : no DTD found!
Document /usr/src/packages/user/btrfs-progs/src/btrfs-progs-v5.4/Documentation/btrfs-ioctl.xml does not validate
make[1]: *** [Makefile:114: btrfs-ioctl.3] Error 13

Fixes: 669f561 (""btrfs-progs: docs: use docbook5 backend for asciidoctor"")",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,231,2020-01-08T21:22:50Z,2020-01-09T13:30:12Z,2020-01-09T13:30:22Z,CLOSED,False,0,1,1,https://github.com/awilfox,Documentation: Don't erase XMLTO_EXTRA contents,1,[],https://github.com/kdave/btrfs-progs/pull/231,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/231#issuecomment-572561636,"XMLTO_EXTRA is defined above, and then appended to if asciidoctor is
used to generate the manual pages.  The second definition was clearing
the value of this variable, which caused builds with asciidoctor to
fail with:
    [XMLTO]  btrfs-ioctl.3
xmlto: /usr/src/packages/user/btrfs-progs/src/btrfs-progs-v5.4/Documentation/btrfs-ioctl.xml does not validate (status 3)
xmlto: Fix document syntax or use --skip-validation option
validity error : no DTD found!
Document /usr/src/packages/user/btrfs-progs/src/btrfs-progs-v5.4/Documentation/btrfs-ioctl.xml does not validate
make[1]: *** [Makefile:114: btrfs-ioctl.3] Error 13

Fixes: 669f561 (""btrfs-progs: docs: use docbook5 backend for asciidoctor"")","Thanks, added to devel.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,235,2020-01-27T10:44:11Z,2020-03-03T16:55:50Z,2020-03-04T18:46:46Z,CLOSED,False,2,2,1,https://github.com/polluks,Fixed typos,1,[],https://github.com/kdave/btrfs-progs/pull/235,https://github.com/polluks,1,https://github.com/kdave/btrfs-progs/pull/235,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,235,2020-01-27T10:44:11Z,2020-03-03T16:55:50Z,2020-03-04T18:46:46Z,CLOSED,False,2,2,1,https://github.com/polluks,Fixed typos,1,[],https://github.com/kdave/btrfs-progs/pull/235,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/235#issuecomment-594054690,,"Merged to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,244,2020-04-18T19:30:23Z,2020-04-22T13:25:18Z,2020-04-22T13:25:34Z,CLOSED,False,13,0,1,https://github.com/unguul,Added example on deleting a subvolume,1,[],https://github.com/kdave/btrfs-progs/pull/244,https://github.com/unguul,1,https://github.com/kdave/btrfs-progs/pull/244,Perhaps a rather trivial example but I find it helpful to see usage examples. Maybe it will help others.,Perhaps a rather trivial example but I find it helpful to see usage examples. Maybe it will help others.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,244,2020-04-18T19:30:23Z,2020-04-22T13:25:18Z,2020-04-22T13:25:34Z,CLOSED,False,13,0,1,https://github.com/unguul,Added example on deleting a subvolume,1,[],https://github.com/kdave/btrfs-progs/pull/244,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/244#issuecomment-617777528,Perhaps a rather trivial example but I find it helpful to see usage examples. Maybe it will help others.,"Absolutely, we need more examples, thanks.",True,{'THUMBS_UP': ['https://github.com/unguul']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,245,2020-04-18T19:44:58Z,2020-04-22T13:00:06Z,2020-04-22T13:00:11Z,CLOSED,False,8,7,1,https://github.com/unguul,Improved asciidoc syntax to fix rendering issues,1,[],https://github.com/kdave/btrfs-progs/pull/245,https://github.com/unguul,1,https://github.com/kdave/btrfs-progs/pull/245,"The drive replacement example doesn't render correctly in Google Chrome. This PR should fix that. Unfortunately, the Github preview rendering doesn't seem to care so much about the syntax so it renders ok.","The drive replacement example doesn't render correctly in Google Chrome. This PR should fix that. Unfortunately, the Github preview rendering doesn't seem to care so much about the syntax so it renders ok.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,245,2020-04-18T19:44:58Z,2020-04-22T13:00:06Z,2020-04-22T13:00:11Z,CLOSED,False,8,7,1,https://github.com/unguul,Improved asciidoc syntax to fix rendering issues,1,[],https://github.com/kdave/btrfs-progs/pull/245,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/245#issuecomment-617764203,"The drive replacement example doesn't render correctly in Google Chrome. This PR should fix that. Unfortunately, the Github preview rendering doesn't seem to care so much about the syntax so it renders ok.","The manual page and html rendering looks ok, the github rendering does not have a visual separation of the example but that's a minor issue. Merged to devel, thanks.",True,{'THUMBS_UP': ['https://github.com/unguul']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,253,2020-05-22T05:16:59Z,2020-05-28T18:17:12Z,2020-05-28T18:17:16Z,CLOSED,False,5,0,1,https://github.com/cezarmathe,libbtrfsutil: Fix btrfs_util_delete_subvolume docs,1,[],https://github.com/kdave/btrfs-progs/pull/253,https://github.com/cezarmathe,1,https://github.com/kdave/btrfs-progs/pull/253,"Added ""This requires appropriate privilege (CAP_SYS_ADMIN)."".
Fixes #252","Added ""This requires appropriate privilege (CAP_SYS_ADMIN)."".
Fixes #252",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,253,2020-05-22T05:16:59Z,2020-05-28T18:17:12Z,2020-05-28T18:17:16Z,CLOSED,False,5,0,1,https://github.com/cezarmathe,libbtrfsutil: Fix btrfs_util_delete_subvolume docs,1,[],https://github.com/kdave/btrfs-progs/pull/253,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/253#issuecomment-635514186,"Added ""This requires appropriate privilege (CAP_SYS_ADMIN)."".
Fixes #252","Patch to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,256,2020-06-01T08:04:29Z,2020-10-02T16:02:45Z,2020-10-02T16:02:53Z,CLOSED,False,1,1,1,https://github.com/Rafostar,Make scrub summary easier to read,2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/256,https://github.com/Rafostar,1,https://github.com/kdave/btrfs-progs/pull/256,Currently most btrfs commands separate their output with empty lines which makes them more human readable. The scrub cmd when used with -d arg to show per device information does not. It makes it harder to find values for current disk because they are not separated from each other. This commit adds an empty line after each device summary to make it match other btrfs cmd outputs.,Currently most btrfs commands separate their output with empty lines which makes them more human readable. The scrub cmd when used with -d arg to show per device information does not. It makes it harder to find values for current disk because they are not separated from each other. This commit adds an empty line after each device summary to make it match other btrfs cmd outputs.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,256,2020-06-01T08:04:29Z,2020-10-02T16:02:45Z,2020-10-02T16:02:53Z,CLOSED,False,1,1,1,https://github.com/Rafostar,Make scrub summary easier to read,2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/256,https://github.com/Rafostar,2,https://github.com/kdave/btrfs-progs/pull/256#issuecomment-636684305,Currently most btrfs commands separate their output with empty lines which makes them more human readable. The scrub cmd when used with -d arg to show per device information does not. It makes it harder to find values for current disk because they are not separated from each other. This commit adds an empty line after each device summary to make it match other btrfs cmd outputs.,"This is current output of btrfs scrub status -d /mnt:
UUID:             781bb184-35cf-41ef-9597-60b0c8a052df
scrub device /dev/sdb (id 1) status
Scrub started:    Mon Jun  1 09:28:24 2020
Status:           running
Duration:         0:36:18
Time left:        2:52:29
ETA:              Mon Jun  1 12:57:13 2020
Total to scrub:   80.00GiB
Bytes scrubbed:   13.91GiB
Rate:             6.54MiB/s
Error summary:    no errors found
scrub device /dev/sdc (id 2) status
Scrub started:    Mon Jun  1 09:28:24 2020
Status:           running
Duration:         0:36:18
Time left:        3:17:08
ETA:              Mon Jun  1 13:21:52 2020
Total to scrub:   80.00GiB
Bytes scrubbed:   12.44GiB
Rate:             5.85MiB/s
Error summary:    no errors found
scrub device /dev/sdd (id 3) status
Scrub started:    Mon Jun  1 09:28:24 2020
Status:           running
Duration:         0:36:18
Time left:        3:32:15
ETA:              Mon Jun  1 13:36:59 2020
Total to scrub:   81.01GiB
Bytes scrubbed:   11.83GiB
Rate:             5.56MiB/s
Error summary:    no errors found

And this is with this commit:
UUID:             7b21ba31-724a-4c21-9f33-73a01c2a6e4d
scrub device /dev/sdb (id 1) status
Scrub started:    Mon Jun  1 09:28:24 2020
Status:           running
Duration:         0:36:18
Time left:        2:52:29
ETA:              Mon Jun  1 12:57:13 2020
Total to scrub:   80.00GiB
Bytes scrubbed:   13.91GiB
Rate:             6.54MiB/s
Error summary:    no errors found

scrub device /dev/sdc (id 2) status
Scrub started:    Mon Jun  1 09:28:24 2020
Status:           running
Duration:         0:36:18
Time left:        3:17:08
ETA:              Mon Jun  1 13:21:52 2020
Total to scrub:   80.00GiB
Bytes scrubbed:   12.44GiB
Rate:             5.85MiB/s
Error summary:    no errors found

scrub device /dev/sdd (id 3) status
Scrub started:    Mon Jun  1 09:28:24 2020
Status:           running
Duration:         0:36:18
Time left:        3:32:15
ETA:              Mon Jun  1 13:36:59 2020
Total to scrub:   81.01GiB
Bytes scrubbed:   11.83GiB
Rate:             5.56MiB/s
Error summary:    no errors found


Having separated disks in scrub makes them much more user friendly.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,256,2020-06-01T08:04:29Z,2020-10-02T16:02:45Z,2020-10-02T16:02:53Z,CLOSED,False,1,1,1,https://github.com/Rafostar,Make scrub summary easier to read,2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/256,https://github.com/Rafostar,3,https://github.com/kdave/btrfs-progs/pull/256#issuecomment-636690729,Currently most btrfs commands separate their output with empty lines which makes them more human readable. The scrub cmd when used with -d arg to show per device information does not. It makes it harder to find values for current disk because they are not separated from each other. This commit adds an empty line after each device summary to make it match other btrfs cmd outputs.,For now I have put the empty line inside print_scrub_dev function. Not sure if you would prefer it inside this function or in the loops that call this function? We can also move it to before that per disk print function which would also add a separator after UUID and terminal output would not end with an empty line at the end...,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,256,2020-06-01T08:04:29Z,2020-10-02T16:02:45Z,2020-10-02T16:02:53Z,CLOSED,False,1,1,1,https://github.com/Rafostar,Make scrub summary easier to read,2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/256,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/256#issuecomment-637032439,Currently most btrfs commands separate their output with empty lines which makes them more human readable. The scrub cmd when used with -d arg to show per device information does not. It makes it harder to find values for current disk because they are not separated from each other. This commit adds an empty line after each device summary to make it match other btrfs cmd outputs.,"It looks good with the blank line and after UUID it would make the 1st device section visibly separated, for clarity.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,256,2020-06-01T08:04:29Z,2020-10-02T16:02:45Z,2020-10-02T16:02:53Z,CLOSED,False,1,1,1,https://github.com/Rafostar,Make scrub summary easier to read,2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/256,https://github.com/Rafostar,5,https://github.com/kdave/btrfs-progs/pull/256#issuecomment-637072985,Currently most btrfs commands separate their output with empty lines which makes them more human readable. The scrub cmd when used with -d arg to show per device information does not. It makes it harder to find values for current disk because they are not separated from each other. This commit adds an empty line after each device summary to make it match other btrfs cmd outputs.,"@kdave
I updated the commit to place empty line before printing ""scrub device"" info (this should also add empty line after UUID like you wanted). I also changed this single line letter case in another commit, cause for some reason it was the only line in scrub status that did not start from capital letter.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,256,2020-06-01T08:04:29Z,2020-10-02T16:02:45Z,2020-10-02T16:02:53Z,CLOSED,False,1,1,1,https://github.com/Rafostar,Make scrub summary easier to read,2,['enhancement'],https://github.com/kdave/btrfs-progs/pull/256,https://github.com/kdave,6,https://github.com/kdave/btrfs-progs/pull/256#issuecomment-702818135,Currently most btrfs commands separate their output with empty lines which makes them more human readable. The scrub cmd when used with -d arg to show per device information does not. It makes it harder to find values for current disk because they are not separated from each other. This commit adds an empty line after each device summary to make it match other btrfs cmd outputs.,"Merged to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,284,2020-08-14T05:38:06Z,2020-09-07T15:02:10Z,2020-09-07T15:02:10Z,CLOSED,False,1,1,1,https://github.com/gandalf3,Fix typo in btrfs restore,1,[],https://github.com/kdave/btrfs-progs/pull/284,https://github.com/gandalf3,1,https://github.com/kdave/btrfs-progs/pull/284,mirros -> mirrors,mirros -> mirrors,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,284,2020-08-14T05:38:06Z,2020-09-07T15:02:10Z,2020-09-07T15:02:10Z,CLOSED,False,1,1,1,https://github.com/gandalf3,Fix typo in btrfs restore,1,[],https://github.com/kdave/btrfs-progs/pull/284,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/284#issuecomment-688379699,mirros -> mirrors,"Thanks, added to devel.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,287,2020-08-23T15:23:54Z,2020-10-02T15:55:58Z,2020-10-02T15:55:59Z,CLOSED,False,1119,1128,114,https://github.com/Forza-tng,Update btrfs-man5.asciidoc,36,[],https://github.com/kdave/btrfs-progs/pull/287,https://github.com/Forza-tng,1,https://github.com/kdave/btrfs-progs/pull/287,Added filesystem limits: minimum filesystem size.,Added filesystem limits: minimum filesystem size.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,287,2020-08-23T15:23:54Z,2020-10-02T15:55:58Z,2020-10-02T15:55:59Z,CLOSED,False,1119,1128,114,https://github.com/Forza-tng,Update btrfs-man5.asciidoc,36,[],https://github.com/kdave/btrfs-progs/pull/287,https://github.com/Forza-tng,2,https://github.com/kdave/btrfs-progs/pull/287#issuecomment-678787800,Added filesystem limits: minimum filesystem size.,"OK so I did some testing. I get two different minimum device size messages depending on if I use --mixed or not. Perhaps the Filesystem Limits should mention this too?
# mkfs.btrfs  loop.img
btrfs-progs v5.7
See http://btrfs.wiki.kernel.org for more information.

ERROR: 'loop.img' is too small to make a usable filesystem
ERROR: minimum size for each btrfs device is 114294784

# mkfs.btrfs --mixed loop.img
btrfs-progs v5.7
See http://btrfs.wiki.kernel.org for more information.

ERROR: 'loop.img' is too small to make a usable filesystem
ERROR: minimum size for each btrfs device is 16777216",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,287,2020-08-23T15:23:54Z,2020-10-02T15:55:58Z,2020-10-02T15:55:59Z,CLOSED,False,1119,1128,114,https://github.com/Forza-tng,Update btrfs-man5.asciidoc,36,[],https://github.com/kdave/btrfs-progs/pull/287,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/287#issuecomment-688381499,Added filesystem limits: minimum filesystem size.,Yes it would be better to make it clear when it depends on some other option.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,287,2020-08-23T15:23:54Z,2020-10-02T15:55:58Z,2020-10-02T15:55:59Z,CLOSED,False,1119,1128,114,https://github.com/Forza-tng,Update btrfs-man5.asciidoc,36,[],https://github.com/kdave/btrfs-progs/pull/287,https://github.com/Forza-tng,4,https://github.com/kdave/btrfs-progs/pull/287#issuecomment-688421666,Added filesystem limits: minimum filesystem size.,"Yes it would be better to make it clear when it depends on some other option.

I updated the file. I hope I have not made a mistake with how git works. :)",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,287,2020-08-23T15:23:54Z,2020-10-02T15:55:58Z,2020-10-02T15:55:59Z,CLOSED,False,1119,1128,114,https://github.com/Forza-tng,Update btrfs-man5.asciidoc,36,[],https://github.com/kdave/btrfs-progs/pull/287,https://github.com/kdave,5,https://github.com/kdave/btrfs-progs/pull/287#issuecomment-702814494,Added filesystem limits: minimum filesystem size.,"Merged to devel with some changes, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,299,2020-09-15T15:21:05Z,2020-10-02T16:24:56Z,2020-10-02T16:24:56Z,CLOSED,False,59,15,8,https://github.com/realwakka,btrfs-progs: Support json format in device stats,5,[],https://github.com/kdave/btrfs-progs/pull/299,https://github.com/realwakka,1,https://github.com/kdave/btrfs-progs/pull/299,This implements #291,This implements #291,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,299,2020-09-15T15:21:05Z,2020-10-02T16:24:56Z,2020-10-02T16:24:56Z,CLOSED,False,59,15,8,https://github.com/realwakka,btrfs-progs: Support json format in device stats,5,[],https://github.com/kdave/btrfs-progs/pull/299,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/299#issuecomment-702829277,This implements #291,"I've replied to the mailinglist, as it stands this PR can't be merged, sorry.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,301,2020-09-22T15:59:47Z,2020-10-02T16:11:41Z,2020-10-02T16:11:41Z,CLOSED,False,56,0,1,https://github.com/realwakka,btrfs-progs: Add examples in btrfs-qgroup documentation,1,[],https://github.com/kdave/btrfs-progs/pull/301,https://github.com/realwakka,1,https://github.com/kdave/btrfs-progs/pull/301,"This patch adds examples section in btrfs-qgroup documentation.
The example make a quota group that has two subvolumes as children.
Signed-off-by: Sidong Yang realwakka@gmail.com","This patch adds examples section in btrfs-qgroup documentation.
The example make a quota group that has two subvolumes as children.
Signed-off-by: Sidong Yang realwakka@gmail.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,301,2020-09-22T15:59:47Z,2020-10-02T16:11:41Z,2020-10-02T16:11:41Z,CLOSED,False,56,0,1,https://github.com/realwakka,btrfs-progs: Add examples in btrfs-qgroup documentation,1,[],https://github.com/kdave/btrfs-progs/pull/301,https://github.com/realwakka,2,https://github.com/kdave/btrfs-progs/pull/301#issuecomment-698912902,"This patch adds examples section in btrfs-qgroup documentation.
The example make a quota group that has two subvolumes as children.
Signed-off-by: Sidong Yang realwakka@gmail.com",@adam900710 Should I submit this with mailing list? I sent this PR cause there is a README that it's okay to send PR when updating docs.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,301,2020-09-22T15:59:47Z,2020-10-02T16:11:41Z,2020-10-02T16:11:41Z,CLOSED,False,56,0,1,https://github.com/realwakka,btrfs-progs: Add examples in btrfs-qgroup documentation,1,[],https://github.com/kdave/btrfs-progs/pull/301,https://github.com/adam900710,3,https://github.com/kdave/btrfs-progs/pull/301#issuecomment-698941791,"This patch adds examples section in btrfs-qgroup documentation.
The example make a quota group that has two subvolumes as children.
Signed-off-by: Sidong Yang realwakka@gmail.com","Not sure, but I guess if the README says so, doc update PR should be no problem.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,301,2020-09-22T15:59:47Z,2020-10-02T16:11:41Z,2020-10-02T16:11:41Z,CLOSED,False,56,0,1,https://github.com/realwakka,btrfs-progs: Add examples in btrfs-qgroup documentation,1,[],https://github.com/kdave/btrfs-progs/pull/301,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/301#issuecomment-702822804,"This patch adds examples section in btrfs-qgroup documentation.
The example make a quota group that has two subvolumes as children.
Signed-off-by: Sidong Yang realwakka@gmail.com","Yes docs PRs are ok because there's usually nothing that would require others to see (via mails), also because documentation can be added by non-programmers so the PR should be easy way to contribute.
Merged to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,315,2020-11-27T14:09:45Z,2020-12-01T17:58:23Z,2020-12-01T19:55:47Z,CLOSED,False,1,0,1,https://github.com/zdzichu,"btrfs-progs: docs: add info about ""single"" profile requirements for swapfile",1,[],https://github.com/kdave/btrfs-progs/pull/315,https://github.com/zdzichu,1,https://github.com/kdave/btrfs-progs/pull/315,"The limitation is there since first commit implementing swapfiles support.
Signed-off-by: Tomasz Torcz tomek@pipebreaker.pl","The limitation is there since first commit implementing swapfiles support.
Signed-off-by: Tomasz Torcz tomek@pipebreaker.pl",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,315,2020-11-27T14:09:45Z,2020-12-01T17:58:23Z,2020-12-01T19:55:47Z,CLOSED,False,1,0,1,https://github.com/zdzichu,"btrfs-progs: docs: add info about ""single"" profile requirements for swapfile",1,[],https://github.com/kdave/btrfs-progs/pull/315,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/315#issuecomment-736718063,"The limitation is there since first commit implementing swapfiles support.
Signed-off-by: Tomasz Torcz tomek@pipebreaker.pl","* filesystem - must be only single device                                                                                                                                                                            
* swapfile - the containing subvolume cannot be snapshotted                                                                                                                                                          
* swapfile - must be preallocated                                                                                                                                                                                    
* swapfile - must be nodatacow (ie. also nodatasum)                                                                                                                                                                  
* swapfile - must not be compressed

The 'single' requirement is the fist in the list, should it be ephasized? The list of things are meant for specifict things 'filesystem' and for the 'swpafile' itself.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,315,2020-11-27T14:09:45Z,2020-12-01T17:58:23Z,2020-12-01T19:55:47Z,CLOSED,False,1,0,1,https://github.com/zdzichu,"btrfs-progs: docs: add info about ""single"" profile requirements for swapfile",1,[],https://github.com/kdave/btrfs-progs/pull/315,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/315#issuecomment-736719000,"The limitation is there since first commit implementing swapfiles support.
Signed-off-by: Tomasz Torcz tomek@pipebreaker.pl","Oh right, single device vs single profile, so with 'swapfile' -> 'filesystem' it would add the missing information.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,315,2020-11-27T14:09:45Z,2020-12-01T17:58:23Z,2020-12-01T19:55:47Z,CLOSED,False,1,0,1,https://github.com/zdzichu,"btrfs-progs: docs: add info about ""single"" profile requirements for swapfile",1,[],https://github.com/kdave/btrfs-progs/pull/315,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/315#issuecomment-736719975,"The limitation is there since first commit implementing swapfiles support.
Signed-off-by: Tomasz Torcz tomek@pipebreaker.pl","With the minor update merged to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,315,2020-11-27T14:09:45Z,2020-12-01T17:58:23Z,2020-12-01T19:55:47Z,CLOSED,False,1,0,1,https://github.com/zdzichu,"btrfs-progs: docs: add info about ""single"" profile requirements for swapfile",1,[],https://github.com/kdave/btrfs-progs/pull/315,https://github.com/zdzichu,5,https://github.com/kdave/btrfs-progs/pull/315#issuecomment-736782305,"The limitation is there since first commit implementing swapfiles support.
Signed-off-by: Tomasz Torcz tomek@pipebreaker.pl","Yeah, I've encountered this message on my single-device, data-DUP-profile device.
Thanks for merging.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,321,2020-12-07T21:29:35Z,2021-01-14T19:01:15Z,2021-01-14T19:01:15Z,CLOSED,False,459,46,21,https://github.com/esemeniuc,Grammer and typo fix for fsck,12,[],https://github.com/kdave/btrfs-progs/pull/321,https://github.com/esemeniuc,1,https://github.com/kdave/btrfs-progs/pull/321,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,321,2020-12-07T21:29:35Z,2021-01-14T19:01:15Z,2021-01-14T19:01:15Z,CLOSED,False,459,46,21,https://github.com/esemeniuc,Grammer and typo fix for fsck,12,[],https://github.com/kdave/btrfs-progs/pull/321,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/321#issuecomment-760403780,,"Merged to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,331,2021-01-20T02:54:54Z,2021-03-10T20:06:40Z,2021-03-10T20:06:44Z,CLOSED,False,752,722,35,https://github.com/neheb,fix wrong printf formats,1,[],https://github.com/kdave/btrfs-progs/pull/331,https://github.com/neheb,1,https://github.com/kdave/btrfs-progs/pull/331,Signed-off-by: Rosen Penev rosenp@gmail.com,Signed-off-by: Rosen Penev rosenp@gmail.com,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,331,2021-01-20T02:54:54Z,2021-03-10T20:06:40Z,2021-03-10T20:06:44Z,CLOSED,False,752,722,35,https://github.com/neheb,fix wrong printf formats,1,[],https://github.com/kdave/btrfs-progs/pull/331,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/331#issuecomment-796004286,Signed-off-by: Rosen Penev rosenp@gmail.com,"What's the reason to use the PRIu64 spec everywhere? It's from C99 so it's standardized but otherwise is there anything wrong with using plain %llu specifiers? Personally I'm not used to it and find it harder to read, eg. with connection with other additional formatting characters.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,331,2021-01-20T02:54:54Z,2021-03-10T20:06:40Z,2021-03-10T20:06:44Z,CLOSED,False,752,722,35,https://github.com/neheb,fix wrong printf formats,1,[],https://github.com/kdave/btrfs-progs/pull/331,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/331#issuecomment-796007160,Signed-off-by: Rosen Penev rosenp@gmail.com,"In mkfs/main.c there's
- /* Don't pollute ret for >0 case */
+ /* Don't po"" PRIu64 ""te ret for >0 case */

So this has been obviously scripted and not reviewed, changing comments causes no harm but that I spotted just by accident.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,331,2021-01-20T02:54:54Z,2021-03-10T20:06:40Z,2021-03-10T20:06:44Z,CLOSED,False,752,722,35,https://github.com/neheb,fix wrong printf formats,1,[],https://github.com/kdave/btrfs-progs/pull/331,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/331#issuecomment-796009806,Signed-off-by: Rosen Penev rosenp@gmail.com,"So what I think should be changed is %Lu in place of %llu, and all the (unsigned long long) casts dropped unless necessary, and also type mismatches %lu instead of %zu.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,345,2021-02-25T19:00:13Z,2021-03-09T15:59:42Z,2021-03-09T15:59:42Z,CLOSED,False,1,1,1,https://github.com/kmorozow,Fix typo in documentation,1,[],https://github.com/kdave/btrfs-progs/pull/345,https://github.com/kmorozow,1,https://github.com/kdave/btrfs-progs/pull/345,There is a misspelling in documentation,There is a misspelling in documentation,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,345,2021-02-25T19:00:13Z,2021-03-09T15:59:42Z,2021-03-09T15:59:42Z,CLOSED,False,1,1,1,https://github.com/kmorozow,Fix typo in documentation,1,[],https://github.com/kdave/btrfs-progs/pull/345,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/345#issuecomment-794086566,There is a misspelling in documentation,"I'm sorry, I was not aware of your pull request and fixed the typo in another commit 2aeaea4. As it's been released I can't replace the patch.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,351,2021-03-08T16:50:33Z,2021-03-09T15:50:10Z,2021-11-27T12:27:41Z,CLOSED,False,3,3,1,https://github.com/pierre-labastie,Remove quotes around $SUDO_HELPER,1,[],https://github.com/kdave/btrfs-progs/pull/351,https://github.com/pierre-labastie,1,https://github.com/kdave/btrfs-progs/pull/351,"When running the tests as root, SUDO_HELPER is empty, so that run_check """" dd ... is run, and it fails because the empty command is not found.","When running the tests as root, SUDO_HELPER is empty, so that run_check """" dd ... is run, and it fails because the empty command is not found.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,351,2021-03-08T16:50:33Z,2021-03-09T15:50:10Z,2021-11-27T12:27:41Z,CLOSED,False,3,3,1,https://github.com/pierre-labastie,Remove quotes around $SUDO_HELPER,1,[],https://github.com/kdave/btrfs-progs/pull/351,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/351#issuecomment-794074483,"When running the tests as root, SUDO_HELPER is empty, so that run_check """" dd ... is run, and it fails because the empty command is not found.","Thanks, merged to devel.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,356,2021-03-11T21:35:57Z,2021-03-18T20:48:35Z,2021-03-18T20:48:35Z,CLOSED,False,3,3,1,https://github.com/jaakristioja,btrfs-progs: check: Fixed 2 typos in code comment + 1 typo in warning,1,[],https://github.com/kdave/btrfs-progs/pull/356,https://github.com/jaakristioja,1,https://github.com/kdave/btrfs-progs/pull/356,Signed-off-by: Jaak Ristioja jaak@ristioja.ee,Signed-off-by: Jaak Ristioja jaak@ristioja.ee,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,356,2021-03-11T21:35:57Z,2021-03-18T20:48:35Z,2021-03-18T20:48:35Z,CLOSED,False,3,3,1,https://github.com/jaakristioja,btrfs-progs: check: Fixed 2 typos in code comment + 1 typo in warning,1,[],https://github.com/kdave/btrfs-progs/pull/356,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/356#issuecomment-802286801,Signed-off-by: Jaak Ristioja jaak@ristioja.ee,"Merged, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,360,2021-04-06T14:40:06Z,2021-04-16T18:19:32Z,2021-04-16T18:19:33Z,CLOSED,False,1,1,1,https://github.com/L3P3,btrfs-progs: check: fixed segmentation fault,1,[],https://github.com/kdave/btrfs-progs/pull/360,https://github.com/L3P3,1,https://github.com/kdave/btrfs-progs/pull/360,"I tested it, it actually fixes #296, repairing my filesystem seems to work again.
Thanks a lot to the original author of that line for quick answer!","I tested it, it actually fixes #296, repairing my filesystem seems to work again.
Thanks a lot to the original author of that line for quick answer!",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,360,2021-04-06T14:40:06Z,2021-04-16T18:19:32Z,2021-04-16T18:19:33Z,CLOSED,False,1,1,1,https://github.com/L3P3,btrfs-progs: check: fixed segmentation fault,1,[],https://github.com/kdave/btrfs-progs/pull/360,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/360#issuecomment-821403956,"I tested it, it actually fixes #296, repairing my filesystem seems to work again.
Thanks a lot to the original author of that line for quick answer!","Fixed in devel by patch sent to the mailinglist, closing.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,379,2021-06-22T17:30:56Z,2021-06-22T17:38:58Z,2021-06-22T17:38:59Z,CLOSED,False,1062,285,35,https://github.com/darkling,Doc fixes,28,[],https://github.com/kdave/btrfs-progs/pull/379,https://github.com/darkling,1,https://github.com/kdave/btrfs-progs/pull/379,"Minor fixes for spelling, idiom and readability.","Minor fixes for spelling, idiom and readability.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,379,2021-06-22T17:30:56Z,2021-06-22T17:38:58Z,2021-06-22T17:38:59Z,CLOSED,False,1062,285,35,https://github.com/darkling,Doc fixes,28,[],https://github.com/kdave/btrfs-progs/pull/379,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/379#issuecomment-866192802,"Minor fixes for spelling, idiom and readability.","Added to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,385,2021-07-19T03:39:42Z,2021-07-26T11:30:47Z,2021-07-26T11:30:52Z,CLOSED,False,1,0,1,https://github.com/wangmingyu84,fix error for undefined macro on musl,1,[],https://github.com/kdave/btrfs-progs/pull/385,https://github.com/wangmingyu84,1,https://github.com/kdave/btrfs-progs/pull/385,"Fixes the following compilation errors with musl that does not have
NAME_MAX defined:
'NAME_MAX' undeclared (first use in this function)
Signed-off-by: Wang Mingyu wangmy@cn.fujitsu.com","Fixes the following compilation errors with musl that does not have
NAME_MAX defined:
'NAME_MAX' undeclared (first use in this function)
Signed-off-by: Wang Mingyu wangmy@cn.fujitsu.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,385,2021-07-19T03:39:42Z,2021-07-26T11:30:47Z,2021-07-26T11:30:52Z,CLOSED,False,1,0,1,https://github.com/wangmingyu84,fix error for undefined macro on musl,1,[],https://github.com/kdave/btrfs-progs/pull/385,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/385#issuecomment-886621035,"Fixes the following compilation errors with musl that does not have
NAME_MAX defined:
'NAME_MAX' undeclared (first use in this function)
Signed-off-by: Wang Mingyu wangmy@cn.fujitsu.com","I lost track of this pull request that also sends a fix and created #386, now fixed in devel. Your fix works but NAME_MAX is defined in linux/limits.h and should be used as a file with the direct definition.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,387,2021-07-22T11:49:05Z,2021-07-26T11:33:48Z,2021-07-26T11:33:58Z,CLOSED,False,1,1,1,https://github.com/er888kh,Fixed a typo,1,['docs'],https://github.com/kdave/btrfs-progs/pull/387,https://github.com/er888kh,1,https://github.com/kdave/btrfs-progs/pull/387,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,387,2021-07-22T11:49:05Z,2021-07-26T11:33:48Z,2021-07-26T11:33:58Z,CLOSED,False,1,1,1,https://github.com/er888kh,Fixed a typo,1,['docs'],https://github.com/kdave/btrfs-progs/pull/387,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/387#issuecomment-886622987,,"Applied to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,401,2021-09-14T17:30:04Z,2021-11-12T14:47:48Z,2021-11-13T17:44:53Z,CLOSED,False,18,2,1,https://github.com/maharmstone,btrfs-progs: check: add check for too many csum entries,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/401,https://github.com/maharmstone,1,https://github.com/kdave/btrfs-progs/pull/401,"My tool ntfs2btrfs has been creating btrfs volumes in a way that the kernel doesn't like, but which isn't picked up by btrfs check - see maharmstone/ntfs2btrfs#23 for the details, including a backtrace. This patch adds a check for when a csum item contains too many entries - effectively it ensures that there's always at least sizeof(struct btrfs_item) bytes free in the tree, otherwise btrfs_del_csums can throw an error.
max_entries is the value of the __MAX_CSUM_ITEMS macro in fs/btrfs/file-item.c.","My tool ntfs2btrfs has been creating btrfs volumes in a way that the kernel doesn't like, but which isn't picked up by btrfs check - see maharmstone/ntfs2btrfs#23 for the details, including a backtrace. This patch adds a check for when a csum item contains too many entries - effectively it ensures that there's always at least sizeof(struct btrfs_item) bytes free in the tree, otherwise btrfs_del_csums can throw an error.
max_entries is the value of the __MAX_CSUM_ITEMS macro in fs/btrfs/file-item.c.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,401,2021-09-14T17:30:04Z,2021-11-12T14:47:48Z,2021-11-13T17:44:53Z,CLOSED,False,18,2,1,https://github.com/maharmstone,btrfs-progs: check: add check for too many csum entries,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/401,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/401#issuecomment-967172797,"My tool ntfs2btrfs has been creating btrfs volumes in a way that the kernel doesn't like, but which isn't picked up by btrfs check - see maharmstone/ntfs2btrfs#23 for the details, including a backtrace. This patch adds a check for when a csum item contains too many entries - effectively it ensures that there's always at least sizeof(struct btrfs_item) bytes free in the tree, otherwise btrfs_del_csums can throw an error.
max_entries is the value of the __MAX_CSUM_ITEMS macro in fs/btrfs/file-item.c.","Thanks for the fix and sorry for late reply, I did not notice the pull request. Patch added to devel. As a side note, I'll mention the ntfs2btrfs tool in btrfs-convert page.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,401,2021-09-14T17:30:04Z,2021-11-12T14:47:48Z,2021-11-13T17:44:53Z,CLOSED,False,18,2,1,https://github.com/maharmstone,btrfs-progs: check: add check for too many csum entries,1,['enhancement'],https://github.com/kdave/btrfs-progs/pull/401,https://github.com/maharmstone,3,https://github.com/kdave/btrfs-progs/pull/401#issuecomment-968106982,"My tool ntfs2btrfs has been creating btrfs volumes in a way that the kernel doesn't like, but which isn't picked up by btrfs check - see maharmstone/ntfs2btrfs#23 for the details, including a backtrace. This patch adds a check for when a csum item contains too many entries - effectively it ensures that there's always at least sizeof(struct btrfs_item) bytes free in the tree, otherwise btrfs_del_csums can throw an error.
max_entries is the value of the __MAX_CSUM_ITEMS macro in fs/btrfs/file-item.c.",Cheers Dave,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/ffontaine,1,https://github.com/kdave/btrfs-progs/pull/433,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1009023389,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","I verify builds on musl and haven't seen this error yet, is it something new? Or does it need some packages installed? https://github.com/kdave/btrfs-progs/blob/master/ci/images/ci-musl-x86_64/Dockerfile build from this.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1009024602,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Removing the include produces this warning on non-musl build:
make[1]: Nothing to be done for 'all'.
common/utils.c: In function ‘total_memory’:
common/utils.c:1214:13: warning: implicit declaration of function ‘sysinfo’ [-Wimplicit-function-declaration]
 1214 |         if (sysinfo(&si) < 0) {
      |",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1009027886,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","According to eg. giampaolo/psutil#872, installing linux-headers fixed the issue, do you have it installed? (It is present on the docker CI image.)",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/ffontaine,5,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1009164012,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","linux-headers are installed.
Build failure is raised with musl on old ""kernel"" (i.e kernel without torvalds/linux@a85cbe6).
Would it be more acceptable to replace <sys/sysinfo.h> by <linux/sysinfo.h>?
If not, I'll keep this patch on buildroot side.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/kdave,6,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1009172193,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","linux/sysinfo.h only declares the structure, so the warning is still there as sys/sysinfo.h declares the function sysinfo. We could do some configure-time magic to detect it, or a simple ""ifdef MUSL"" for the include should work too.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/kdave,7,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1009194512,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","There don't seem to be an easy way to detect musl, so I'll go with the simplest fix and ifdef GLIBC the include of sys/sysinfo.h, this is what linux/kerne.h does, this works on musl without explict inclusion of the sys path.
Can you please test this?
diff --git a/common/utils.c b/common/utils.c
index 29825f6ee15b..192ec2ffdb27 100644
--- a/common/utils.c
+++ b/common/utils.c
@@ -24,7 +24,9 @@
 #include <sys/mount.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#ifdef __GLIBC__
 #include <sys/sysinfo.h>
+#endif
 #include <uuid/uuid.h>
 #include <fcntl.h>
 #include <unistd.h>",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/kdave,8,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1009215725,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","It's not that simple, now the CI build fails because the sys/sysinfo.h must be included, but it must not on your setup. This could be determined by a compilation check that does not produce the warnings about missing sysinfo.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/kdave,9,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1009229037,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","This seems to work on glibc build and CI/musl build. As linux/const.h is now included directly, the only other include is the sysinfo.h, so dropping the include here fixes the double definition, but please test it in your setup too.
--- a/kerncompat.h
+++ b/kerncompat.h
@@ -28,7 +28,6 @@
 #include <assert.h>
 #include <stddef.h>
 #include <linux/types.h>
-#include <linux/kernel.h>
 #include <linux/const.h>
 #include <stdint.h>",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/ffontaine,10,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1009421741,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Commit b28f7bd and a2511aa are indeed fixing the issue. I'm closing this PR, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/ffontaine,11,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1011894767,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Unfortunately, both commits have the unexpected effect of raising a build failure with kernel < 5.11 because __ALIGN_KERNEL is not defined anymore:
/tmp/instance-1/output-1/host/opt/ext-toolchain/bin/../lib/gcc/powerpc64-buildroot-linux-gnu/9.3.0/../../../../powerpc64-buildroot-linux-gnu/bin/ld: kernel-shared/volumes.o: in function `create_chunk':
volumes.c:(.text+0x17f8): undefined reference to `__ALIGN_KERNEL'",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/kdave,12,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1012149229,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","That can be fixed by ifdefs and local definition if it's not defined but the order will matter, kerncompat.h is usually the first one while in const.h the macro __ALIGN_KERNEL is defined unconditionally.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/kdave,13,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1012154886,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","... or just copy & rename. Fix pushed to devel, please let me know if it works for you now.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,433,2022-01-09T17:35:18Z,2022-01-10T22:46:52Z,2022-01-13T14:21:29Z,CLOSED,False,0,1,1,https://github.com/ffontaine,common/utils.c: drop include on sys/sysinfo.h,1,[],https://github.com/kdave/btrfs-progs/pull/433,https://github.com/ffontaine,14,https://github.com/kdave/btrfs-progs/pull/433#issuecomment-1012180970,"Drop include on sys/sysinfo.h to avoid the following build failure on musl:
In file included from /usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:4,
                 from ./kerncompat.h:31,
                 from common/utils.c:42:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:7:8: error: redefinition of 'struct sysinfo'
    7 | struct sysinfo {
      |        ^~~~~~~
In file included from common/utils.c:27:
/usr/lfs/hdd_v1/rc-buildroot-test/scripts/instance-0/output-1/host/i586-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
   10 | struct sysinfo {
      |        ^~~~~~~

Fixes:

http://autobuild.buildroot.org/results/16f44fb9dea72a7079e8e5517e760dd79d2724cc

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","it works, thanks",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,435,2022-01-12T01:20:45Z,2022-02-07T17:18:17Z,2022-02-07T17:18:24Z,CLOSED,False,1,2,1,https://github.com/dathide,Fix incorrect statement,1,['docs'],https://github.com/kdave/btrfs-progs/pull/435,https://github.com/dathide,1,https://github.com/kdave/btrfs-progs/pull/435,"Since free-space-tree is enabled by default in kernel 5.15, it is incorrect to state that no runtime options are enabled by default.","Since free-space-tree is enabled by default in kernel 5.15, it is incorrect to state that no runtime options are enabled by default.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,435,2022-01-12T01:20:45Z,2022-02-07T17:18:17Z,2022-02-07T17:18:24Z,CLOSED,False,1,2,1,https://github.com/dathide,Fix incorrect statement,1,['docs'],https://github.com/kdave/btrfs-progs/pull/435,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/435#issuecomment-1031716234,"Since free-space-tree is enabled by default in kernel 5.15, it is incorrect to state that no runtime options are enabled by default.","I've applied the fix from #437, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,436,2022-01-12T01:39:12Z,2022-02-01T17:40:58Z,2022-02-01T17:40:58Z,CLOSED,False,1,2,1,https://github.com/dathide,Remove incorrect statement,1,[],https://github.com/kdave/btrfs-progs/pull/436,https://github.com/dathide,1,https://github.com/kdave/btrfs-progs/pull/436,"Since 5.15, there is a runtime feature that is enabled by default, meaning this statement is incorrect.","Since 5.15, there is a runtime feature that is enabled by default, meaning this statement is incorrect.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,437,2022-01-12T01:41:33Z,2022-02-07T17:16:48Z,2022-02-07T17:16:48Z,CLOSED,False,1,2,1,https://github.com/dathide,Remove incorrect statement,1,['docs'],https://github.com/kdave/btrfs-progs/pull/437,https://github.com/dathide,1,https://github.com/kdave/btrfs-progs/pull/437,"Since 5.15 enables a runtime feature, this statement is incorrect.","Since 5.15 enables a runtime feature, this statement is incorrect.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,437,2022-01-12T01:41:33Z,2022-02-07T17:16:48Z,2022-02-07T17:16:48Z,CLOSED,False,1,2,1,https://github.com/dathide,Remove incorrect statement,1,['docs'],https://github.com/kdave/btrfs-progs/pull/437,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/437#issuecomment-1031714652,"Since 5.15 enables a runtime feature, this statement is incorrect.","Applied to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,442,2022-01-29T09:05:41Z,2022-02-07T17:12:12Z,2022-02-07T18:40:16Z,CLOSED,False,6795,6797,75,https://github.com/jtagcat,docs: compression/zstd: direct maps note,23,['docs'],https://github.com/kdave/btrfs-progs/pull/442,https://github.com/jtagcat,1,https://github.com/kdave/btrfs-progs/pull/442,"(info few months old) higher levels: upstream and library has levels 1..22.
https://btrfs.wiki.kernel.org/index.php?title=Talk:Compression&diff=0&oldid=33545

mapping to the upstream levels 1 to 15

Where did you get that infobit? I'm taking your word for it.
Also, is readthedocs staged to replace the wiki at some point?","(info few months old) higher levels: upstream and library has levels 1..22.
https://btrfs.wiki.kernel.org/index.php?title=Talk:Compression&diff=0&oldid=33545

mapping to the upstream levels 1 to 15

Where did you get that infobit? I'm taking your word for it.
Also, is readthedocs staged to replace the wiki at some point?",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,442,2022-01-29T09:05:41Z,2022-02-07T17:12:12Z,2022-02-07T18:40:16Z,CLOSED,False,6795,6797,75,https://github.com/jtagcat,docs: compression/zstd: direct maps note,23,['docs'],https://github.com/kdave/btrfs-progs/pull/442,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/442#issuecomment-1031706544,"(info few months old) higher levels: upstream and library has levels 1..22.
https://btrfs.wiki.kernel.org/index.php?title=Talk:Compression&diff=0&oldid=33545

mapping to the upstream levels 1 to 15

Where did you get that infobit? I'm taking your word for it.
Also, is readthedocs staged to replace the wiki at some point?","mapping to the upstream levels 1 to 15



Where did you get that infobit? I'm taking your word for it.

In the sources, https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/zstd.c#n27
#define ZSTD_BTRFS_MAX_LEVEL 15
And there's no translation between the user requested and zstd levels. Initial workspaces are created in
zstd_calc_ws_mem_sizes for each level and then per request the one available is selected.

Also, is readthedocs staged to replace the wiki at some point?

Yes, though people are used to it and there are random pages linking to it so it won't go away completely. For contents that's not suitable for project documentation the wiki will be a good place, like the news or some community links.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,442,2022-01-29T09:05:41Z,2022-02-07T17:12:12Z,2022-02-07T18:40:16Z,CLOSED,False,6795,6797,75,https://github.com/jtagcat,docs: compression/zstd: direct maps note,23,['docs'],https://github.com/kdave/btrfs-progs/pull/442,https://github.com/kdave,3,https://github.com/kdave/btrfs-progs/pull/442#issuecomment-1031709882,"(info few months old) higher levels: upstream and library has levels 1..22.
https://btrfs.wiki.kernel.org/index.php?title=Talk:Compression&diff=0&oldid=33545

mapping to the upstream levels 1 to 15

Where did you get that infobit? I'm taking your word for it.
Also, is readthedocs staged to replace the wiki at some point?","Patch applied to devel with a slightly updated changelog, thanks.",True,{'HEART': ['https://github.com/jtagcat']}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,443,2022-02-05T15:31:03Z,2022-02-07T16:51:17Z,2022-02-07T16:51:17Z,CLOSED,False,2,0,1,https://github.com/ffontaine,mkfs/main.c: fix build without zoned,1,[],https://github.com/kdave/btrfs-progs/pull/443,https://github.com/ffontaine,1,https://github.com/kdave/btrfs-progs/pull/443,"Fix the following build failure raised when zoned is disabled since version 5.16.1 and 88895a9:
mkfs/main.o: In function `main':
main.c:(.text.startup+0xc90): undefined reference to `zoned_profile_supported'

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Fix the following build failure raised when zoned is disabled since version 5.16.1 and 88895a9:
mkfs/main.o: In function `main':
main.c:(.text.startup+0xc90): undefined reference to `zoned_profile_supported'

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,443,2022-02-05T15:31:03Z,2022-02-07T16:51:17Z,2022-02-07T16:51:17Z,CLOSED,False,2,0,1,https://github.com/ffontaine,mkfs/main.c: fix build without zoned,1,[],https://github.com/kdave/btrfs-progs/pull/443,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/443#issuecomment-1031687493,"Fix the following build failure raised when zoned is disabled since version 5.16.1 and 88895a9:
mkfs/main.o: In function `main':
main.c:(.text.startup+0xc90): undefined reference to `zoned_profile_supported'

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Thanks, it's been fixed in a different way via #445. There should be a stub for the zoned related helpers in the respective sections in kernel-shared/zoned.h, instead of the inline ifdefs.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,454,2022-03-16T06:01:56Z,2022-04-06T05:21:57Z,2022-04-06T05:21:57Z,CLOSED,False,97,2,5,https://github.com/martinetd,btrfs-progs: prop: add datacow inode property,1,[],https://github.com/kdave/btrfs-progs/pull/454,https://github.com/martinetd,1,https://github.com/kdave/btrfs-progs/pull/454,"Hello.
The btrfs property documentation states that it is an unified and
user-friendly method to tune btrfs properties instead of chattr,
so let's add something for datacow as well.

A few remarks:

please tell me if you prefer this sent on linux-btrfs@vger list, I don't mind either workflow but I saw other open PRs here and you seem to use github issues at least.
naming: I wasn't sure whether to name it datacow with yes/no, or making it ""nodatacow"" with true/false (readonly uses true/false so it might make more sense to use the later), I've picked datacow to avoid double-negation for ease of understanding but happy to change it to anything
documentation: I got a bit confused with the rst and asciidoc file, as things got ""converted"" to rst recently but the asciidoc file didn't get removed. Should I have updated both?

Thanks!","Hello.
The btrfs property documentation states that it is an unified and
user-friendly method to tune btrfs properties instead of chattr,
so let's add something for datacow as well.

A few remarks:

please tell me if you prefer this sent on linux-btrfs@vger list, I don't mind either workflow but I saw other open PRs here and you seem to use github issues at least.
naming: I wasn't sure whether to name it datacow with yes/no, or making it ""nodatacow"" with true/false (readonly uses true/false so it might make more sense to use the later), I've picked datacow to avoid double-negation for ease of understanding but happy to change it to anything
documentation: I got a bit confused with the rst and asciidoc file, as things got ""converted"" to rst recently but the asciidoc file didn't get removed. Should I have updated both?

Thanks!",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,454,2022-03-16T06:01:56Z,2022-04-06T05:21:57Z,2022-04-06T05:21:57Z,CLOSED,False,97,2,5,https://github.com/martinetd,btrfs-progs: prop: add datacow inode property,1,[],https://github.com/kdave/btrfs-progs/pull/454,https://github.com/martinetd,2,https://github.com/kdave/btrfs-progs/pull/454#issuecomment-1089832406,"Hello.
The btrfs property documentation states that it is an unified and
user-friendly method to tune btrfs properties instead of chattr,
so let's add something for datacow as well.

A few remarks:

please tell me if you prefer this sent on linux-btrfs@vger list, I don't mind either workflow but I saw other open PRs here and you seem to use github issues at least.
naming: I wasn't sure whether to name it datacow with yes/no, or making it ""nodatacow"" with true/false (readonly uses true/false so it might make more sense to use the later), I've picked datacow to avoid double-negation for ease of understanding but happy to change it to anything
documentation: I got a bit confused with the rst and asciidoc file, as things got ""converted"" to rst recently but the asciidoc file didn't get removed. Should I have updated both?

Thanks!",Continuing on mailing list: https://lore.kernel.org/all/20220324042235.1483914-1-asmadeus@codewreck.org/T/#u,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,456,2022-03-16T18:05:53Z,2022-04-25T16:57:32Z,2022-04-25T16:57:44Z,CLOSED,False,50,0,2,https://github.com/maharmstone,btrfs-progs: check: add check for overlong xattr names,1,['check'],https://github.com/kdave/btrfs-progs/pull/456,https://github.com/maharmstone,1,https://github.com/kdave/btrfs-progs/pull/456,"While working on my Windows driver, I found that it was inadvertently allowing users to create xattrs with names longer than 255 bytes, which wasn't being picked up by btrfs-check.
If the Linux driver encounters a file with an invalid xattr like this, it makes the whole directory it's in inaccessible. If it's the root directory, it'll refuse to mount the filesystem entirely.","While working on my Windows driver, I found that it was inadvertently allowing users to create xattrs with names longer than 255 bytes, which wasn't being picked up by btrfs-check.
If the Linux driver encounters a file with an invalid xattr like this, it makes the whole directory it's in inaccessible. If it's the root directory, it'll refuse to mount the filesystem entirely.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,456,2022-03-16T18:05:53Z,2022-04-25T16:57:32Z,2022-04-25T16:57:44Z,CLOSED,False,50,0,2,https://github.com/maharmstone,btrfs-progs: check: add check for overlong xattr names,1,['check'],https://github.com/kdave/btrfs-progs/pull/456,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/456#issuecomment-1108815773,"While working on my Windows driver, I found that it was inadvertently allowing users to create xattrs with names longer than 255 bytes, which wasn't being picked up by btrfs-check.
If the Linux driver encounters a file with an invalid xattr like this, it makes the whole directory it's in inaccessible. If it's the root directory, it'll refuse to mount the filesystem entirely.","Applied to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,462,2022-04-14T17:30:41Z,,2022-06-06T17:27:42Z,OPEN,False,298,253,21,https://github.com/boryas,discourage seeding remount workflow,11,[],https://github.com/kdave/btrfs-progs/pull/462,https://github.com/boryas,1,https://github.com/kdave/btrfs-progs/pull/462,"Don't want to erase it entirely from the doc, since it is the ideal way to use it ultimately. However, the bug is significant, so I think it's our responsibility to encourage users that can use umount/mount (e.g. in an initrd, not for root fs) to use it.","Don't want to erase it entirely from the doc, since it is the ideal way to use it ultimately. However, the bug is significant, so I think it's our responsibility to encourage users that can use umount/mount (e.g. in an initrd, not for root fs) to use it.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,469,2022-05-19T20:12:28Z,2022-05-20T17:35:43Z,2022-05-20T17:35:44Z,CLOSED,False,4,0,1,https://github.com/Forza-tng,Clarification on mixed profile,1,[],https://github.com/kdave/btrfs-progs/pull/469,https://github.com/Forza-tng,1,https://github.com/kdave/btrfs-progs/pull/469,"It is not possible to use mixed profile together with other profiles. The current wording is not clear about this, so let's add a clarification note.","It is not possible to use mixed profile together with other profiles. The current wording is not clear about this, so let's add a clarification note.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,469,2022-05-19T20:12:28Z,2022-05-20T17:35:43Z,2022-05-20T17:35:44Z,CLOSED,False,4,0,1,https://github.com/Forza-tng,Clarification on mixed profile,1,[],https://github.com/kdave/btrfs-progs/pull/469,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/469#issuecomment-1133154638,"It is not possible to use mixed profile together with other profiles. The current wording is not clear about this, so let's add a clarification note.","Merged, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,474,2022-05-24T14:00:14Z,2022-05-24T17:24:50Z,2022-05-24T17:24:58Z,CLOSED,False,29,11,4,https://github.com/rossburton,btrfs-progs: add option to disable LZO support,1,[],https://github.com/kdave/btrfs-progs/pull/474,https://github.com/rossburton,1,https://github.com/kdave/btrfs-progs/pull/474,"LZO as a compression format is pretty archaic these days, there are
better algorithsm in all metrics for compression and decompression, and
lzo hasn't had a new release since 2017.
Add an option to disable LZO (defaulting to enabled), and respect it in
cmds/restore.c.
Signed-off-by: Ross Burton ross.burton@arm.com","LZO as a compression format is pretty archaic these days, there are
better algorithsm in all metrics for compression and decompression, and
lzo hasn't had a new release since 2017.
Add an option to disable LZO (defaulting to enabled), and respect it in
cmds/restore.c.
Signed-off-by: Ross Burton ross.burton@arm.com",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,474,2022-05-24T14:00:14Z,2022-05-24T17:24:50Z,2022-05-24T17:24:58Z,CLOSED,False,29,11,4,https://github.com/rossburton,btrfs-progs: add option to disable LZO support,1,[],https://github.com/kdave/btrfs-progs/pull/474,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/474#issuecomment-1136111668,"LZO as a compression format is pretty archaic these days, there are
better algorithsm in all metrics for compression and decompression, and
lzo hasn't had a new release since 2017.
Add an option to disable LZO (defaulting to enabled), and respect it in
cmds/restore.c.
Signed-off-by: Ross Burton ross.burton@arm.com",I don't mind adding it but I don't think it's a good idea to remove support for the compression namely for the restore command as it's a rescue tool and that should cover more rather then less of possible features. I understand that minimizing dependencies is a good thing or that in controlled environments it makes sense to remove what's not used. For a generic distro I'm strongly against using the option.,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,474,2022-05-24T14:00:14Z,2022-05-24T17:24:50Z,2022-05-24T17:24:58Z,CLOSED,False,29,11,4,https://github.com/rossburton,btrfs-progs: add option to disable LZO support,1,[],https://github.com/kdave/btrfs-progs/pull/474,https://github.com/rossburton,3,https://github.com/kdave/btrfs-progs/pull/474#issuecomment-1136115804,"LZO as a compression format is pretty archaic these days, there are
better algorithsm in all metrics for compression and decompression, and
lzo hasn't had a new release since 2017.
Add an option to disable LZO (defaulting to enabled), and respect it in
cmds/restore.c.
Signed-off-by: Ross Burton ross.burton@arm.com","Sure, that's why this is an opt-in disable, I don't expect you to remove it entirely.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,474,2022-05-24T14:00:14Z,2022-05-24T17:24:50Z,2022-05-24T17:24:58Z,CLOSED,False,29,11,4,https://github.com/rossburton,btrfs-progs: add option to disable LZO support,1,[],https://github.com/kdave/btrfs-progs/pull/474,https://github.com/kdave,4,https://github.com/kdave/btrfs-progs/pull/474#issuecomment-1136232955,"LZO as a compression format is pretty archaic these days, there are
better algorithsm in all metrics for compression and decompression, and
lzo hasn't had a new release since 2017.
Add an option to disable LZO (defaulting to enabled), and respect it in
cmds/restore.c.
Signed-off-by: Ross Burton ross.burton@arm.com","Merged to devel, thanks. I've added list of the supported compression to the help text.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,477,2022-05-29T09:31:20Z,2022-05-30T19:59:38Z,2022-05-30T20:04:09Z,CLOSED,False,1,1,1,https://github.com/frukto,fix typo,1,[],https://github.com/kdave/btrfs-progs/pull/477,https://github.com/frukto,1,https://github.com/kdave/btrfs-progs/pull/477,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,477,2022-05-29T09:31:20Z,2022-05-30T19:59:38Z,2022-05-30T20:04:09Z,CLOSED,False,1,1,1,https://github.com/frukto,fix typo,1,[],https://github.com/kdave/btrfs-progs/pull/477,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/477#issuecomment-1141446691,,"Applied to devel, thanks.",True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,478,2022-05-29T16:01:06Z,2022-05-30T20:03:35Z,2022-05-30T20:03:41Z,CLOSED,False,4,4,1,https://github.com/frukto,make description of list output more clear,1,[],https://github.com/kdave/btrfs-progs/pull/478,https://github.com/frukto,1,https://github.com/kdave/btrfs-progs/pull/478,,,True,{}
kdave/btrfs-progs,https://github.com/kdave/btrfs-progs,478,2022-05-29T16:01:06Z,2022-05-30T20:03:35Z,2022-05-30T20:03:41Z,CLOSED,False,4,4,1,https://github.com/frukto,make description of list output more clear,1,[],https://github.com/kdave/btrfs-progs/pull/478,https://github.com/kdave,2,https://github.com/kdave/btrfs-progs/pull/478#issuecomment-1141448513,,"Added to devel, thanks.",True,{}
