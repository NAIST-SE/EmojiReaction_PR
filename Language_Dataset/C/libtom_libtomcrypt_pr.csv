libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/106,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt","The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-174184608,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt",fine like that?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/iainmeikle,3,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-174185457,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt",Looks good to me after a very quick glance. Thank you very much for your time and effort in resolving this. Do you want me to close the issue?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/coveralls,4,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-249368896,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt",Coverage decreased (-1.6%) to 85.703% when pulling 908f35f on fix/106 into 6ad5225 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-279838225,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt","Sorry for my late response.
I did try the changes proposed in #106 but frankly, I had quite hard times with them.
1/ I am pretty sure that having a new build option LTC_BASE64_STRICT is not a good idea. It will IMO inevitably end up with different libtomcrypt builds around with decode_base64 behaving differently so that if you want to have control over what it is actually doing you will have to use decode_base64_ex anyway. I think that build options/defines should be used only for including/excluding some parts of libtomcrypt not changing the behaviour.
2/ providing that the old decode_base64 was sort of relaxed implementation it would be less surprising to introduce decode_base64_strict
3/ according to my testing current #106 implementation does not accept white spaces \n, \r, \t and   if the strictness is turned off. Which is probably fine if we want to strictly follow RFC but the old/current decode_base64 happily ignores whitespaces (which is handy).",True,{'THUMBS_UP': ['https://github.com/rofl0r']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-280069206,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt","Sorry for my late response.

No worries.

1/ ... I think that build options/defines should be used only for including/excluding some parts of libtomcrypt not changing the behaviour.

True, I'll change that.

2/ providing that the old decode_base64 was sort of relaxed implementation it would be less surprising to introduce decode_base64_strict

Fine by me. (this should also solve 3)
It's base64_decode() so base64_strict_decode() okay?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-280153431,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt",base64_strict_decode() is absolutely clear and ok,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/coveralls,8,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-280620191,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt",Coverage increased (+0.03%) to 87.33% when pulling 6f639ca on fix/106 into 8fc1af1 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/coveralls,9,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-280631689,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt",Coverage increased (+0.03%) to 87.33% when pulling 5f4f0bd on fix/106 into 08aabc7 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-280845665,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt","The latest changes looks fine.
I only think that this line should be implemented as more forgiving in relaxed mode:
if (y == 1 || map != map_base64url || is_strict == 1) return CRYPT_INVALID_PACKET;
My interpretation of ""relaxed"" mode is that the trailing ""="" are completely optional for both base64url and base64.
For example:
if ((y == 1 || map != map_base64url) && is_strict == 1) return CRYPT_INVALID_PACKET;",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/sjaeckel,11,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-281136658,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt","My interpretation of ""relaxed"" mode is that the trailing ""="" are completely optional for both base64url and base64.

May I ask you to provide a patch that implements your interpretation?
And also supports these new testcases? (At least the first 3 would be mandatory)
diff --git a/testprof/base64_test.c b/testprof/base64_test.c
index 40c3ea9..ddefba8 100644
--- a/testprof/base64_test.c
+++ b/testprof/base64_test.c
@@ -40,6 +40,12 @@ int base64_test(void)
          {""vuiSPKIl8PiR5O-rC4z9_xTQKZ0="", 1},
          {""vuiS*PKIl8P*iR5O-rC4*z9_xTQKZ0"", 0},
          {""vuiS*PKIl8P*iR5O-rC4*z9_xTQKZ0="", 0},
+         {""vuiS*PKIl8P*iR5O-rC4*z9_xTQKZ0=="", 0},
+         {""vuiS*PKIl8P*iR5O-rC4*z9_xTQKZ0==="", 0},
+         {""vuiS*PKIl8P*iR5O-rC4*z9_xTQKZ0===="", 0},
+         {""vuiS*=PKIl8P*iR5O-rC4*z9_xTQKZ0="", 0},
+         {""vuiS*==PKIl8P*iR5O-rC4*z9_xTQKZ0="", 0},
+         {""vuiS*===PKIl8P*iR5O-rC4*z9_xTQKZ0="", 0},
    };
 
    for (x = 0; x < sizeof(cases)/sizeof(cases[0]); ++x) {

Thanks",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-281185611,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt","Trouble seems to be with base64_decode and for example Zm9vYmE= vs. Zm9vYmE which I expect both to decode in relaxed mode to fooba.
I'll try to prepare and add my fix to fix/106",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-281197063,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt",My last commit b16e5da should be correct (at least it passes all my relaxed scenarios).,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,106,2016-01-23T12:22:53Z,2017-02-28T00:28:45Z,2017-06-19T08:24:52Z,MERGED,True,137,33,4,https://github.com/sjaeckel,_base64_decode_internal not compliant with RFC4648,10,[],https://github.com/libtom/libtomcrypt/pull/106,https://github.com/karel-m,14,https://github.com/libtom/libtomcrypt/pull/106#issuecomment-281380302,"The _base64_decode_internal function is not compliant with RFC4648. RFC4648 states in 3.3:
Implementations MUST reject the encoded data if it contains
characters outside the base alphabet when interpreting base-encoded
data, unless the specification referring to this document explicitly
states otherwise.
Please find attached a version which is compliant with 3.3 of RFC4648. If there is a need for this behaviour as part of other referencing standards then an appropriate pre-processor directive or configuration parameter should be added.
base64_decode.txt",Providing that we more or less keep the old relaxed base64_decode there is IMO no need to wait with this fix for 2.0 milestone.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,111,2016-03-14T20:59:19Z,2016-03-15T13:49:17Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,1,https://github.com/eduardsui,DH keys were 16 bits longer,2,[],https://github.com/libtom/libtomcrypt/pull/111,https://github.com/eduardsui,1,https://github.com/libtom/libtomcrypt/pull/111,"While implementing TLS using libtomcrypt I noticed that MS Schannel (msie, edge) doesn't work with DHE keys if the size isn't exactly 2048/4096 bits. ""DH-2048"" and ""DH-4096"" are 16 bits longer.","While implementing TLS using libtomcrypt I noticed that MS Schannel (msie, edge) doesn't work with DHE keys if the size isn't exactly 2048/4096 bits. ""DH-2048"" and ""DH-4096"" are 16 bits longer.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,111,2016-03-14T20:59:19Z,2016-03-15T13:49:17Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,1,https://github.com/eduardsui,DH keys were 16 bits longer,2,[],https://github.com/libtom/libtomcrypt/pull/111,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/111#issuecomment-197201225,"While implementing TLS using libtomcrypt I noticed that MS Schannel (msie, edge) doesn't work with DHE keys if the size isn't exactly 2048/4096 bits. ""DH-2048"" and ""DH-4096"" are 16 bits longer.",Why was this closed?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,111,2016-03-14T20:59:19Z,2016-03-15T13:49:17Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,1,https://github.com/eduardsui,DH keys were 16 bits longer,2,[],https://github.com/libtom/libtomcrypt/pull/111,https://github.com/eduardsui,3,https://github.com/libtom/libtomcrypt/pull/111#issuecomment-197207164,"While implementing TLS using libtomcrypt I noticed that MS Schannel (msie, edge) doesn't work with DHE keys if the size isn't exactly 2048/4096 bits. ""DH-2048"" and ""DH-4096"" are 16 bits longer.","I managed to make an workaround, and I’m not sure that is really a bug. However, the DH prime is 16-24 bits longer for all structures.
For example, P length for a 256 byte (2048) key is 259 bytes (2072 bits). However, p is correct, but when testing TLS with MS SChannel, if the key and P are not exactly 2048 bits, will cause a ""generic error"". With any other implementation it works (openssl, nss, etc).
I solved it by modifying dh_make_key, to accept custom prime and generator. See https://github.com/eduardsui/tlslayer/blob/master/tlslayer.c, private_tls_dh_make_key (line 2490).
I could push the new function into libtomcrypt, if it helps.
The bottom line is that my changes removed the extra bits from he beginning of P, but I'm not sure that after update P is prime anymore (seems to be, but I'm not sure).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,111,2016-03-14T20:59:19Z,2016-03-15T13:49:17Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,1,https://github.com/eduardsui,DH keys were 16 bits longer,2,[],https://github.com/libtom/libtomcrypt/pull/111,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/111#issuecomment-197216203,"While implementing TLS using libtomcrypt I noticed that MS Schannel (msie, edge) doesn't work with DHE keys if the size isn't exactly 2048/4096 bits. ""DH-2048"" and ""DH-4096"" are 16 bits longer.","Ad

modifying dh_make_key, to accept custom prime and generator

it would be IMO nice enhancement to libtomcrypt. I did something similar for EC in my branch https://github.com/libtom/libtomcrypt/tree/miko-ecc-enhancements (support for custom curve parameters). I am only using more ECC than DSA so improving dh_make_key was not such a big priority for me.
Maybe worth creating a separate issue, at least for not losing the link to Eduard's private_tls_dh_make_key idea.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,115,2016-04-01T07:28:06Z,2016-04-02T23:46:24Z,2017-02-21T20:07:03Z,MERGED,True,16,16,2,https://github.com/fperrad,install without USER and GROUP,1,[],https://github.com/libtom/libtomcrypt/pull/115,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/115,"like in libtommath.
really more friendly for packaging.","like in libtommath.
really more friendly for packaging.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,115,2016-04-01T07:28:06Z,2016-04-02T23:46:24Z,2017-02-21T20:07:03Z,MERGED,True,16,16,2,https://github.com/fperrad,install without USER and GROUP,1,[],https://github.com/libtom/libtomcrypt/pull/115,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/115#issuecomment-204292490,"like in libtommath.
really more friendly for packaging.",Coverage remained the same at 86.9% when pulling 5d5694d on fperrad:install into 912eff4 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,115,2016-04-01T07:28:06Z,2016-04-02T23:46:24Z,2017-02-21T20:07:03Z,MERGED,True,16,16,2,https://github.com/fperrad,install without USER and GROUP,1,[],https://github.com/libtom/libtomcrypt/pull/115,https://github.com/rofl0r,3,https://github.com/libtom/libtomcrypt/pull/115#issuecomment-204399987,"like in libtommath.
really more friendly for packaging.",+1,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,121,2016-06-28T04:37:49Z,2017-02-27T17:14:09Z,2017-02-27T17:14:10Z,MERGED,True,44,43,22,https://github.com/mattkelly,Fix all warnings from -Wcast-align,1,[],https://github.com/libtom/libtomcrypt/pull/121,https://github.com/mattkelly,1,https://github.com/libtom/libtomcrypt/pull/121,"This fixes a very large amount of annoying warnings generated by -Wcast-align. Building with clang-207.0.31 on OS X.
Example of warnings that are fixed in ccm_memory.c:
src/encauth/ccm/ccm_memory.c:259:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:259:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:19: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~


This is the cleanest trick I could think of to get it to work. Suggestions welcome.","This fixes a very large amount of annoying warnings generated by -Wcast-align. Building with clang-207.0.31 on OS X.
Example of warnings that are fixed in ccm_memory.c:
src/encauth/ccm/ccm_memory.c:259:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:259:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:19: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~


This is the cleanest trick I could think of to get it to work. Suggestions welcome.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,121,2016-06-28T04:37:49Z,2017-02-27T17:14:09Z,2017-02-27T17:14:10Z,MERGED,True,44,43,22,https://github.com/mattkelly,Fix all warnings from -Wcast-align,1,[],https://github.com/libtom/libtomcrypt/pull/121,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/121#issuecomment-228946545,"This fixes a very large amount of annoying warnings generated by -Wcast-align. Building with clang-207.0.31 on OS X.
Example of warnings that are fixed in ccm_memory.c:
src/encauth/ccm/ccm_memory.c:259:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:259:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:19: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~


This is the cleanest trick I could think of to get it to work. Suggestions welcome.",Coverage remained the same at 87.299% when pulling 1c7c776 on mattkelly:fix-clang-cast-align-warnings into bb56ef0 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,121,2016-06-28T04:37:49Z,2017-02-27T17:14:09Z,2017-02-27T17:14:10Z,MERGED,True,44,43,22,https://github.com/mattkelly,Fix all warnings from -Wcast-align,1,[],https://github.com/libtom/libtomcrypt/pull/121,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/121#issuecomment-282507874,"This fixes a very large amount of annoying warnings generated by -Wcast-align. Building with clang-207.0.31 on OS X.
Example of warnings that are fixed in ccm_memory.c:
src/encauth/ccm/ccm_memory.c:259:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:259:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:19: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~


This is the cleanest trick I could think of to get it to work. Suggestions welcome.","I confirm that I am able to reproduce the above-mentioned warnings with clang and -Wcast-align (gcc with -Wcast-align does not warn about anything).
As for the solution the trick with (whatever_long_type*)(void*)(..) seems to be a de facto standard how to handle these clang warning.
👍 from me
Please rebase this PR to the latest develop + fix also testprof/store_test.c",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,121,2016-06-28T04:37:49Z,2017-02-27T17:14:09Z,2017-02-27T17:14:10Z,MERGED,True,44,43,22,https://github.com/mattkelly,Fix all warnings from -Wcast-align,1,[],https://github.com/libtom/libtomcrypt/pull/121,https://github.com/coveralls,4,https://github.com/libtom/libtomcrypt/pull/121#issuecomment-282562063,"This fixes a very large amount of annoying warnings generated by -Wcast-align. Building with clang-207.0.31 on OS X.
Example of warnings that are fixed in ccm_memory.c:
src/encauth/ccm/ccm_memory.c:259:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:259:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:19: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~


This is the cleanest trick I could think of to get it to work. Suggestions welcome.",Coverage remained the same at 87.237% when pulling 213b3cc on mattkelly:fix-clang-cast-align-warnings into d777f9d on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,121,2016-06-28T04:37:49Z,2017-02-27T17:14:09Z,2017-02-27T17:14:10Z,MERGED,True,44,43,22,https://github.com/mattkelly,Fix all warnings from -Wcast-align,1,[],https://github.com/libtom/libtomcrypt/pull/121,https://github.com/coveralls,5,https://github.com/libtom/libtomcrypt/pull/121#issuecomment-282564168,"This fixes a very large amount of annoying warnings generated by -Wcast-align. Building with clang-207.0.31 on OS X.
Example of warnings that are fixed in ccm_memory.c:
src/encauth/ccm/ccm_memory.c:259:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:259:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:19: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~


This is the cleanest trick I could think of to get it to work. Suggestions welcome.",Coverage remained the same at 87.237% when pulling e187f4c on mattkelly:fix-clang-cast-align-warnings into d777f9d on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,121,2016-06-28T04:37:49Z,2017-02-27T17:14:09Z,2017-02-27T17:14:10Z,MERGED,True,44,43,22,https://github.com/mattkelly,Fix all warnings from -Wcast-align,1,[],https://github.com/libtom/libtomcrypt/pull/121,https://github.com/mattkelly,6,https://github.com/libtom/libtomcrypt/pull/121#issuecomment-282564224,"This fixes a very large amount of annoying warnings generated by -Wcast-align. Building with clang-207.0.31 on OS X.
Example of warnings that are fixed in ccm_memory.c:
src/encauth/ccm/ccm_memory.c:259:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:259:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:19: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~


This is the cleanest trick I could think of to get it to work. Suggestions welcome.","Rebased onto develop, fixed testprof/store_test.c, and fixed some new occurrences of the warning in ccm_memory_ex.c and cbc_decrypt.c.
I think this is ready for merging.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,121,2016-06-28T04:37:49Z,2017-02-27T17:14:09Z,2017-02-27T17:14:10Z,MERGED,True,44,43,22,https://github.com/mattkelly,Fix all warnings from -Wcast-align,1,[],https://github.com/libtom/libtomcrypt/pull/121,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/121#issuecomment-282590132,"This fixes a very large amount of annoying warnings generated by -Wcast-align. Building with clang-207.0.31 on OS X.
Example of warnings that are fixed in ccm_memory.c:
src/encauth/ccm/ccm_memory.c:259:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:259:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:19: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~


This is the cleanest trick I could think of to get it to work. Suggestions welcome.","looks good
@sjaeckel do you agree with merging this PR?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,121,2016-06-28T04:37:49Z,2017-02-27T17:14:09Z,2017-02-27T17:14:10Z,MERGED,True,44,43,22,https://github.com/mattkelly,Fix all warnings from -Wcast-align,1,[],https://github.com/libtom/libtomcrypt/pull/121,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/121#issuecomment-282599677,"This fixes a very large amount of annoying warnings generated by -Wcast-align. Building with clang-207.0.31 on OS X.
Example of warnings that are fixed in ccm_memory.c:
src/encauth/ccm/ccm_memory.c:259:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:259:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:260:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&ct[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:55: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:279:87: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&pt[y+z])) = *((LTC_FAST_TYPE*)(&ct[y+z])) ^ *((LTC_FAST_TYPE*)(&CTRPAD[z]));
                                                                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:23: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:280:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                    *((LTC_FAST_TYPE*)(&PAD[z]))  ^= *((LTC_FAST_TYPE*)(&pt[y+z]));
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:19: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/encauth/ccm/ccm_memory.c:369:56: warning: cast from 'unsigned char *' to 'LTC_FAST_TYPE *' (aka 'unsigned long long *') increases required
      alignment from 1 to 8 [-Wcast-align]
                *((LTC_FAST_TYPE*)(&pt_real[y+z])) = *((LTC_FAST_TYPE*)(&pt[y+z])) & fastMask;
                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~


This is the cleanest trick I could think of to get it to work. Suggestions welcome.","I pushed another commit to a branch pr/121 that suppresses some warnings generated by clang (at least on my version of clang). I'm not sure if that's the case for you as well, but if it is I'd propose to cherry-pick that commit e22a2c6 directly to develop (as it's not part of the PR itself, but I pushed it to the branch out of laziness :) and because I created it when testing these changes... )",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,124,2016-07-10T00:20:57Z,2017-02-21T10:50:59Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,2,https://github.com/zeromus,fix tiny compile error in tomcrypt_pk.h macro,4,[],https://github.com/libtom/libtomcrypt/pull/124,https://github.com/zeromus,1,https://github.com/libtom/libtomcrypt/pull/124,"An ARM compiler gives me this:
libtomcrypt\pk\asn1\der\sequence\der_decode_subject_public_key_info.c(65,4): error #188-D: enumerated type mixed with another type
Since der_decode_subject_public_key_info's parameters_type is of type 'unsigned long', an attempt to assign it to ltc_asn1_list's member 'ltc_asn1_type type' fails.
My fix solves this in a simple way by casting it at the point of assignment.
But while studying this I noticed there's no use of enum in the codebase other than a few PK-related things.  Perhaps a more appropriate solution would be to remove these enums. I mean, enums seem like an OK enough idea, but I don't know anything about the practicality of using enums in archaic C dialects like libtomcrypt conforms (thankfully!) to...","An ARM compiler gives me this:
libtomcrypt\pk\asn1\der\sequence\der_decode_subject_public_key_info.c(65,4): error #188-D: enumerated type mixed with another type
Since der_decode_subject_public_key_info's parameters_type is of type 'unsigned long', an attempt to assign it to ltc_asn1_list's member 'ltc_asn1_type type' fails.
My fix solves this in a simple way by casting it at the point of assignment.
But while studying this I noticed there's no use of enum in the codebase other than a few PK-related things.  Perhaps a more appropriate solution would be to remove these enums. I mean, enums seem like an OK enough idea, but I don't know anything about the practicality of using enums in archaic C dialects like libtomcrypt conforms (thankfully!) to...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,124,2016-07-10T00:20:57Z,2017-02-21T10:50:59Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,2,https://github.com/zeromus,fix tiny compile error in tomcrypt_pk.h macro,4,[],https://github.com/libtom/libtomcrypt/pull/124,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/124#issuecomment-231563273,"An ARM compiler gives me this:
libtomcrypt\pk\asn1\der\sequence\der_decode_subject_public_key_info.c(65,4): error #188-D: enumerated type mixed with another type
Since der_decode_subject_public_key_info's parameters_type is of type 'unsigned long', an attempt to assign it to ltc_asn1_list's member 'ltc_asn1_type type' fails.
My fix solves this in a simple way by casting it at the point of assignment.
But while studying this I noticed there's no use of enum in the codebase other than a few PK-related things.  Perhaps a more appropriate solution would be to remove these enums. I mean, enums seem like an OK enough idea, but I don't know anything about the practicality of using enums in archaic C dialects like libtomcrypt conforms (thankfully!) to...",Coverage remained the same at 87.299% when pulling 2ff4944 on zeromus:patch-1 into 6ad5225 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,124,2016-07-10T00:20:57Z,2017-02-21T10:50:59Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,2,https://github.com/zeromus,fix tiny compile error in tomcrypt_pk.h macro,4,[],https://github.com/libtom/libtomcrypt/pull/124,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/124#issuecomment-236356902,"An ARM compiler gives me this:
libtomcrypt\pk\asn1\der\sequence\der_decode_subject_public_key_info.c(65,4): error #188-D: enumerated type mixed with another type
Since der_decode_subject_public_key_info's parameters_type is of type 'unsigned long', an attempt to assign it to ltc_asn1_list's member 'ltc_asn1_type type' fails.
My fix solves this in a simple way by casting it at the point of assignment.
But while studying this I noticed there's no use of enum in the codebase other than a few PK-related things.  Perhaps a more appropriate solution would be to remove these enums. I mean, enums seem like an OK enough idea, but I don't know anything about the practicality of using enums in archaic C dialects like libtomcrypt conforms (thankfully!) to...","The error is somehow correct, but I don't like the patch.
The correct way would be by casting parameters_type to ltc_asn1_type in pk\asn1\der\sequence\der_decode_subject_public_key_info.c:65
The same in der_encode_subject_public_key_info.c:53",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,124,2016-07-10T00:20:57Z,2017-02-21T10:50:59Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,2,https://github.com/zeromus,fix tiny compile error in tomcrypt_pk.h macro,4,[],https://github.com/libtom/libtomcrypt/pull/124,https://github.com/coveralls,4,https://github.com/libtom/libtomcrypt/pull/124#issuecomment-236410021,"An ARM compiler gives me this:
libtomcrypt\pk\asn1\der\sequence\der_decode_subject_public_key_info.c(65,4): error #188-D: enumerated type mixed with another type
Since der_decode_subject_public_key_info's parameters_type is of type 'unsigned long', an attempt to assign it to ltc_asn1_list's member 'ltc_asn1_type type' fails.
My fix solves this in a simple way by casting it at the point of assignment.
But while studying this I noticed there's no use of enum in the codebase other than a few PK-related things.  Perhaps a more appropriate solution would be to remove these enums. I mean, enums seem like an OK enough idea, but I don't know anything about the practicality of using enums in archaic C dialects like libtomcrypt conforms (thankfully!) to...",Coverage remained the same at 87.299% when pulling 3f64baf on zeromus:patch-1 into 6ad5225 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,124,2016-07-10T00:20:57Z,2017-02-21T10:50:59Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,2,https://github.com/zeromus,fix tiny compile error in tomcrypt_pk.h macro,4,[],https://github.com/libtom/libtomcrypt/pull/124,https://github.com/zeromus,5,https://github.com/libtom/libtomcrypt/pull/124#issuecomment-236410167,"An ARM compiler gives me this:
libtomcrypt\pk\asn1\der\sequence\der_decode_subject_public_key_info.c(65,4): error #188-D: enumerated type mixed with another type
Since der_decode_subject_public_key_info's parameters_type is of type 'unsigned long', an attempt to assign it to ltc_asn1_list's member 'ltc_asn1_type type' fails.
My fix solves this in a simple way by casting it at the point of assignment.
But while studying this I noticed there's no use of enum in the codebase other than a few PK-related things.  Perhaps a more appropriate solution would be to remove these enums. I mean, enums seem like an OK enough idea, but I don't know anything about the practicality of using enums in archaic C dialects like libtomcrypt conforms (thankfully!) to...","My way, it's at least recorded somewhere that the expected type of Type in the macro is an ltc_asn1_type.  I still think it would be better to ditch this one enum when the enums arent used anywhere else. But as you wish, here it is done your way",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,124,2016-07-10T00:20:57Z,2017-02-21T10:50:59Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,2,https://github.com/zeromus,fix tiny compile error in tomcrypt_pk.h macro,4,[],https://github.com/libtom/libtomcrypt/pull/124,https://github.com/coveralls,6,https://github.com/libtom/libtomcrypt/pull/124#issuecomment-236410341,"An ARM compiler gives me this:
libtomcrypt\pk\asn1\der\sequence\der_decode_subject_public_key_info.c(65,4): error #188-D: enumerated type mixed with another type
Since der_decode_subject_public_key_info's parameters_type is of type 'unsigned long', an attempt to assign it to ltc_asn1_list's member 'ltc_asn1_type type' fails.
My fix solves this in a simple way by casting it at the point of assignment.
But while studying this I noticed there's no use of enum in the codebase other than a few PK-related things.  Perhaps a more appropriate solution would be to remove these enums. I mean, enums seem like an OK enough idea, but I don't know anything about the practicality of using enums in archaic C dialects like libtomcrypt conforms (thankfully!) to...",Coverage remained the same at 87.299% when pulling 823748a on zeromus:patch-1 into 6ad5225 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,124,2016-07-10T00:20:57Z,2017-02-21T10:50:59Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,2,https://github.com/zeromus,fix tiny compile error in tomcrypt_pk.h macro,4,[],https://github.com/libtom/libtomcrypt/pull/124,https://github.com/coveralls,7,https://github.com/libtom/libtomcrypt/pull/124#issuecomment-236410753,"An ARM compiler gives me this:
libtomcrypt\pk\asn1\der\sequence\der_decode_subject_public_key_info.c(65,4): error #188-D: enumerated type mixed with another type
Since der_decode_subject_public_key_info's parameters_type is of type 'unsigned long', an attempt to assign it to ltc_asn1_list's member 'ltc_asn1_type type' fails.
My fix solves this in a simple way by casting it at the point of assignment.
But while studying this I noticed there's no use of enum in the codebase other than a few PK-related things.  Perhaps a more appropriate solution would be to remove these enums. I mean, enums seem like an OK enough idea, but I don't know anything about the practicality of using enums in archaic C dialects like libtomcrypt conforms (thankfully!) to...",Coverage remained the same at 87.299% when pulling 823748a on zeromus:patch-1 into 6ad5225 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,124,2016-07-10T00:20:57Z,2017-02-21T10:50:59Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,2,https://github.com/zeromus,fix tiny compile error in tomcrypt_pk.h macro,4,[],https://github.com/libtom/libtomcrypt/pull/124,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/124#issuecomment-236525464,"An ARM compiler gives me this:
libtomcrypt\pk\asn1\der\sequence\der_decode_subject_public_key_info.c(65,4): error #188-D: enumerated type mixed with another type
Since der_decode_subject_public_key_info's parameters_type is of type 'unsigned long', an attempt to assign it to ltc_asn1_list's member 'ltc_asn1_type type' fails.
My fix solves this in a simple way by casting it at the point of assignment.
But while studying this I noticed there's no use of enum in the codebase other than a few PK-related things.  Perhaps a more appropriate solution would be to remove these enums. I mean, enums seem like an OK enough idea, but I don't know anything about the practicality of using enums in archaic C dialects like libtomcrypt conforms (thankfully!) to...","My way, it's at least recorded somewhere that the expected type of Type in the macro is an ltc_asn1_type.

My way the compiler reminds you and not some deeply hidden typecast...

I still think it would be better to ditch this one enum when the enums arent used anywhere else. But as you wish, here it is done your way

I think we should use the enum value as well in the API Functions.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,124,2016-07-10T00:20:57Z,2017-02-21T10:50:59Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,2,https://github.com/zeromus,fix tiny compile error in tomcrypt_pk.h macro,4,[],https://github.com/libtom/libtomcrypt/pull/124,https://github.com/zeromus,9,https://github.com/libtom/libtomcrypt/pull/124#issuecomment-237128912,"An ARM compiler gives me this:
libtomcrypt\pk\asn1\der\sequence\der_decode_subject_public_key_info.c(65,4): error #188-D: enumerated type mixed with another type
Since der_decode_subject_public_key_info's parameters_type is of type 'unsigned long', an attempt to assign it to ltc_asn1_list's member 'ltc_asn1_type type' fails.
My fix solves this in a simple way by casting it at the point of assignment.
But while studying this I noticed there's no use of enum in the codebase other than a few PK-related things.  Perhaps a more appropriate solution would be to remove these enums. I mean, enums seem like an OK enough idea, but I don't know anything about the practicality of using enums in archaic C dialects like libtomcrypt conforms (thankfully!) to...","OK, I'll do it yet again through the API. I still think it's weird to use enums in this one place and nowhere else. Does it just so happen it doesnt make sense anywhere else, or is this part of a new masterplan to use enums all over?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,124,2016-07-10T00:20:57Z,2017-02-21T10:50:59Z,2017-02-21T20:07:03Z,CLOSED,False,2,2,2,https://github.com/zeromus,fix tiny compile error in tomcrypt_pk.h macro,4,[],https://github.com/libtom/libtomcrypt/pull/124,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/124#issuecomment-237173885,"An ARM compiler gives me this:
libtomcrypt\pk\asn1\der\sequence\der_decode_subject_public_key_info.c(65,4): error #188-D: enumerated type mixed with another type
Since der_decode_subject_public_key_info's parameters_type is of type 'unsigned long', an attempt to assign it to ltc_asn1_list's member 'ltc_asn1_type type' fails.
My fix solves this in a simple way by casting it at the point of assignment.
But while studying this I noticed there's no use of enum in the codebase other than a few PK-related things.  Perhaps a more appropriate solution would be to remove these enums. I mean, enums seem like an OK enough idea, but I don't know anything about the practicality of using enums in archaic C dialects like libtomcrypt conforms (thankfully!) to...","Noooo :-D Don't do that now, I only meant that we should do it, not that we do it now.
And if we do it, we do it all-over.... and also it'd make sense before having a 2.0 out...
But that should be another PR",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,125,2016-07-14T20:39:20Z,2016-07-30T09:56:19Z,2017-02-21T20:07:03Z,CLOSED,False,8,8,1,https://github.com/MMI,Fix to make xcode toolchain happy.,1,[],https://github.com/libtom/libtomcrypt/pull/125,https://github.com/MMI,1,https://github.com/libtom/libtomcrypt/pull/125,"[Housekeeping from open-sourcing BitKeeper]
BitKeeper developers on Macs using current xcode compilers would see things like:
/usr/include/tomcrypt_macros.h: In function 'RORc':
/usr/include/tomcrypt_macros.h:275: error impossible contraint in 'asm' 

In the BitKeeper copy of the code, we have been carrying around a change c/o wscott@bitkeeper.com, with the following comment:
x86 only allows variable shifts and rotates with the CL register.
Change the inline asm to use CL explicitly and update the constraints to
reflect that.
N.B. This problem seems to have been fixed in a different way in the develop branch.","[Housekeeping from open-sourcing BitKeeper]
BitKeeper developers on Macs using current xcode compilers would see things like:
/usr/include/tomcrypt_macros.h: In function 'RORc':
/usr/include/tomcrypt_macros.h:275: error impossible contraint in 'asm' 

In the BitKeeper copy of the code, we have been carrying around a change c/o wscott@bitkeeper.com, with the following comment:
x86 only allows variable shifts and rotates with the CL register.
Change the inline asm to use CL explicitly and update the constraints to
reflect that.
N.B. This problem seems to have been fixed in a different way in the develop branch.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,125,2016-07-14T20:39:20Z,2016-07-30T09:56:19Z,2017-02-21T20:07:03Z,CLOSED,False,8,8,1,https://github.com/MMI,Fix to make xcode toolchain happy.,1,[],https://github.com/libtom/libtomcrypt/pull/125,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/125#issuecomment-236356664,"[Housekeeping from open-sourcing BitKeeper]
BitKeeper developers on Macs using current xcode compilers would see things like:
/usr/include/tomcrypt_macros.h: In function 'RORc':
/usr/include/tomcrypt_macros.h:275: error impossible contraint in 'asm' 

In the BitKeeper copy of the code, we have been carrying around a change c/o wscott@bitkeeper.com, with the following comment:
x86 only allows variable shifts and rotates with the CL register.
Change the inline asm to use CL explicitly and update the constraints to
reflect that.
N.B. This problem seems to have been fixed in a different way in the develop branch.",your patch just makes the implementation of RORc equal to the one of ROR... that's not a good patch... you can have the same behavior by defining LTC_NO_ROLC,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,125,2016-07-14T20:39:20Z,2016-07-30T09:56:19Z,2017-02-21T20:07:03Z,CLOSED,False,8,8,1,https://github.com/MMI,Fix to make xcode toolchain happy.,1,[],https://github.com/libtom/libtomcrypt/pull/125,https://github.com/MMI,3,https://github.com/libtom/libtomcrypt/pull/125#issuecomment-237284350,"[Housekeeping from open-sourcing BitKeeper]
BitKeeper developers on Macs using current xcode compilers would see things like:
/usr/include/tomcrypt_macros.h: In function 'RORc':
/usr/include/tomcrypt_macros.h:275: error impossible contraint in 'asm' 

In the BitKeeper copy of the code, we have been carrying around a change c/o wscott@bitkeeper.com, with the following comment:
x86 only allows variable shifts and rotates with the CL register.
Change the inline asm to use CL explicitly and update the constraints to
reflect that.
N.B. This problem seems to have been fixed in a different way in the develop branch.","Sweet, thanks! I have verified that defining LTC_NO_ROLC allows me to build bitkeeper in MacOS-land without our patched version of tomcrypt.
-g

On Jul 30, 2016, at 05:56 , Steffen Jaeckel notifications@github.com wrote:
your patch just makes the implementation of RORc equal to the one of ROR... that's not a good patch... you can have the same behavior by defining LTC_NO_ROLC
—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,127,2016-09-16T08:16:34Z,2016-09-24T13:14:05Z,2017-02-21T20:07:04Z,CLOSED,False,34,8,2,https://github.com/matswebjorn,Add function declarations to remove compile warning,1,[],https://github.com/libtom/libtomcrypt/pull/127,https://github.com/matswebjorn,1,https://github.com/libtom/libtomcrypt/pull/127,"Current tomcrypt generates the following compile warning
/xxx/tomcrypt/src/modes/xts/xts_test.c:27:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_encrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:34:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_encrypt = orig; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c: In function ‘_xts_test_accel_xts_decrypt’: /xxx/tomcrypt/src/modes/xts/xts_test.c:51:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_decrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:58:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_decrypt = orig; ^
accel_xts_encrypt and accel_xts_decrypt needs a proper function definition to eliminate this warning which is needed to get a clean compile","Current tomcrypt generates the following compile warning
/xxx/tomcrypt/src/modes/xts/xts_test.c:27:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_encrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:34:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_encrypt = orig; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c: In function ‘_xts_test_accel_xts_decrypt’: /xxx/tomcrypt/src/modes/xts/xts_test.c:51:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_decrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:58:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_decrypt = orig; ^
accel_xts_encrypt and accel_xts_decrypt needs a proper function definition to eliminate this warning which is needed to get a clean compile",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,127,2016-09-16T08:16:34Z,2016-09-24T13:14:05Z,2017-02-21T20:07:04Z,CLOSED,False,34,8,2,https://github.com/matswebjorn,Add function declarations to remove compile warning,1,[],https://github.com/libtom/libtomcrypt/pull/127,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/127#issuecomment-247546105,"Current tomcrypt generates the following compile warning
/xxx/tomcrypt/src/modes/xts/xts_test.c:27:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_encrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:34:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_encrypt = orig; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c: In function ‘_xts_test_accel_xts_decrypt’: /xxx/tomcrypt/src/modes/xts/xts_test.c:51:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_decrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:58:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_decrypt = orig; ^
accel_xts_encrypt and accel_xts_decrypt needs a proper function definition to eliminate this warning which is needed to get a clean compile",Coverage decreased (-1.6%) to 85.675% when pulling 636dbf8 on matswebjorn:develop into 6ad5225 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,127,2016-09-16T08:16:34Z,2016-09-24T13:14:05Z,2017-02-21T20:07:04Z,CLOSED,False,34,8,2,https://github.com/matswebjorn,Add function declarations to remove compile warning,1,[],https://github.com/libtom/libtomcrypt/pull/127,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/127#issuecomment-247552446,"Current tomcrypt generates the following compile warning
/xxx/tomcrypt/src/modes/xts/xts_test.c:27:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_encrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:34:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_encrypt = orig; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c: In function ‘_xts_test_accel_xts_decrypt’: /xxx/tomcrypt/src/modes/xts/xts_test.c:51:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_decrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:58:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_decrypt = orig; ^
accel_xts_encrypt and accel_xts_decrypt needs a proper function definition to eliminate this warning which is needed to get a clean compile",Srsly -Wpedantic?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,127,2016-09-16T08:16:34Z,2016-09-24T13:14:05Z,2017-02-21T20:07:04Z,CLOSED,False,34,8,2,https://github.com/matswebjorn,Add function declarations to remove compile warning,1,[],https://github.com/libtom/libtomcrypt/pull/127,https://github.com/matswebjorn,4,https://github.com/libtom/libtomcrypt/pull/127#issuecomment-249032595,"Current tomcrypt generates the following compile warning
/xxx/tomcrypt/src/modes/xts/xts_test.c:27:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_encrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:34:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_encrypt = orig; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c: In function ‘_xts_test_accel_xts_decrypt’: /xxx/tomcrypt/src/modes/xts/xts_test.c:51:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_decrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:58:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_decrypt = orig; ^
accel_xts_encrypt and accel_xts_decrypt needs a proper function definition to eliminate this warning which is needed to get a clean compile","Yes, srsly",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,127,2016-09-16T08:16:34Z,2016-09-24T13:14:05Z,2017-02-21T20:07:04Z,CLOSED,False,34,8,2,https://github.com/matswebjorn,Add function declarations to remove compile warning,1,[],https://github.com/libtom/libtomcrypt/pull/127,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/127#issuecomment-249135182,"Current tomcrypt generates the following compile warning
/xxx/tomcrypt/src/modes/xts/xts_test.c:27:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_encrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:34:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_encrypt = orig; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c: In function ‘_xts_test_accel_xts_decrypt’: /xxx/tomcrypt/src/modes/xts/xts_test.c:51:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_decrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:58:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_decrypt = orig; ^
accel_xts_encrypt and accel_xts_decrypt needs a proper function definition to eliminate this warning which is needed to get a clean compile","Hi,
I see your point but your patch is dealing with -Wpedantic warnings only in accel_xts_encrypt + accel_xts_decrypt; which probably solves your use case, however, there are other places that throw ISO C forbids ... when compiled with -Wpedantic.
Therefore  👎 from me to this patch.
First we should decide whether we want a clean build with -Wpedantic and if yes then fix all warnings not just some of them. Anyway it would be better to open a separated issue named like Avoiding -Wpedantic warnings or so.
-- Karel",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,127,2016-09-16T08:16:34Z,2016-09-24T13:14:05Z,2017-02-21T20:07:04Z,CLOSED,False,34,8,2,https://github.com/matswebjorn,Add function declarations to remove compile warning,1,[],https://github.com/libtom/libtomcrypt/pull/127,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/127#issuecomment-249364247,"Current tomcrypt generates the following compile warning
/xxx/tomcrypt/src/modes/xts/xts_test.c:27:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_encrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:34:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_encrypt = orig; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c: In function ‘_xts_test_accel_xts_decrypt’: /xxx/tomcrypt/src/modes/xts/xts_test.c:51:17: warning: ISO C forbids initialization between function pointer and ‘void *’ [-Wpedantic] void *orig = cipher_descriptor[xts.cipher].accel_xts_decrypt; ^ /xxx/tomcrypt/src/modes/xts/xts_test.c:58:52: warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic] cipher_descriptor[xts.cipher].accel_xts_decrypt = orig; ^
accel_xts_encrypt and accel_xts_decrypt needs a proper function definition to eliminate this warning which is needed to get a clean compile",Thanks @karel-m for it pointing out correctly.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,129,2016-09-28T18:20:21Z,2016-10-02T18:51:01Z,2017-02-21T20:07:04Z,MERGED,True,5,0,1,https://github.com/sjaeckel,"GCM counter incrementation isn't stopped at 2^32 blocks, which breaks GCM",1,[],https://github.com/libtom/libtomcrypt/pull/129,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/129,"As reported privately by @rjamet

https://github.com/libtom/libtomcrypt_p/blob/develop/src/encauth/gcm/gcm_process.c#L60
I haven't found a check that the encrypted plaintext is shorter than 2^32 blocks? If there's one, then it's fine. Otherwise, the counter will continue, and that causes IV reuse. In CTR or so it isn't so bad (the attacker can get a xor of plaintexts), but in GCM, if the plaintext is controlled by the attacker, this allows forging authentication tags: see 3. in http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/Joux_comments.
Instead, GCM should just throw after (2^32)-1 blocks / (2^39)-256 bits as per http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-spec.pdf p18.","As reported privately by @rjamet

https://github.com/libtom/libtomcrypt_p/blob/develop/src/encauth/gcm/gcm_process.c#L60
I haven't found a check that the encrypted plaintext is shorter than 2^32 blocks? If there's one, then it's fine. Otherwise, the counter will continue, and that causes IV reuse. In CTR or so it isn't so bad (the attacker can get a xor of plaintexts), but in GCM, if the plaintext is controlled by the attacker, this allows forging authentication tags: see 3. in http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/Joux_comments.
Instead, GCM should just throw after (2^32)-1 blocks / (2^39)-256 bits as per http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-spec.pdf p18.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,129,2016-09-28T18:20:21Z,2016-10-02T18:51:01Z,2017-02-21T20:07:04Z,MERGED,True,5,0,1,https://github.com/sjaeckel,"GCM counter incrementation isn't stopped at 2^32 blocks, which breaks GCM",1,[],https://github.com/libtom/libtomcrypt/pull/129,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/129#issuecomment-250257911,"As reported privately by @rjamet

https://github.com/libtom/libtomcrypt_p/blob/develop/src/encauth/gcm/gcm_process.c#L60
I haven't found a check that the encrypted plaintext is shorter than 2^32 blocks? If there's one, then it's fine. Otherwise, the counter will continue, and that causes IV reuse. In CTR or so it isn't so bad (the attacker can get a xor of plaintexts), but in GCM, if the plaintext is controlled by the attacker, this allows forging authentication tags: see 3. in http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/Joux_comments.
Instead, GCM should just throw after (2^32)-1 blocks / (2^39)-256 bits as per http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-spec.pdf p18.",Coverage decreased (-1.6%) to 85.676% when pulling 7d418b3 on fix/gcm_counter_reuse into 6ad5225 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,129,2016-09-28T18:20:21Z,2016-10-02T18:51:01Z,2017-02-21T20:07:04Z,MERGED,True,5,0,1,https://github.com/sjaeckel,"GCM counter incrementation isn't stopped at 2^32 blocks, which breaks GCM",1,[],https://github.com/libtom/libtomcrypt/pull/129,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/129#issuecomment-250275315,"As reported privately by @rjamet

https://github.com/libtom/libtomcrypt_p/blob/develop/src/encauth/gcm/gcm_process.c#L60
I haven't found a check that the encrypted plaintext is shorter than 2^32 blocks? If there's one, then it's fine. Otherwise, the counter will continue, and that causes IV reuse. In CTR or so it isn't so bad (the attacker can get a xor of plaintexts), but in GCM, if the plaintext is controlled by the attacker, this allows forging authentication tags: see 3. in http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/Joux_comments.
Instead, GCM should just throw after (2^32)-1 blocks / (2^39)-256 bits as per http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-spec.pdf p18.",@fperrad what does your linter say? :-),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,129,2016-09-28T18:20:21Z,2016-10-02T18:51:01Z,2017-02-21T20:07:04Z,MERGED,True,5,0,1,https://github.com/sjaeckel,"GCM counter incrementation isn't stopped at 2^32 blocks, which breaks GCM",1,[],https://github.com/libtom/libtomcrypt/pull/129,https://github.com/fperrad,4,https://github.com/libtom/libtomcrypt/pull/129#issuecomment-250677070,"As reported privately by @rjamet

https://github.com/libtom/libtomcrypt_p/blob/develop/src/encauth/gcm/gcm_process.c#L60
I haven't found a check that the encrypted plaintext is shorter than 2^32 blocks? If there's one, then it's fine. Otherwise, the counter will continue, and that causes IV reuse. In CTR or so it isn't so bad (the attacker can get a xor of plaintexts), but in GCM, if the plaintext is controlled by the attacker, this allows forging authentication tags: see 3. in http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/Joux_comments.
Instead, GCM should just throw after (2^32)-1 blocks / (2^39)-256 bits as per http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-spec.pdf p18.",@sjaeckel the commit in fix/gcm_counter_reuse looks good for my linter.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,129,2016-09-28T18:20:21Z,2016-10-02T18:51:01Z,2017-02-21T20:07:04Z,MERGED,True,5,0,1,https://github.com/sjaeckel,"GCM counter incrementation isn't stopped at 2^32 blocks, which breaks GCM",1,[],https://github.com/libtom/libtomcrypt/pull/129,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/129#issuecomment-250988055,"As reported privately by @rjamet

https://github.com/libtom/libtomcrypt_p/blob/develop/src/encauth/gcm/gcm_process.c#L60
I haven't found a check that the encrypted plaintext is shorter than 2^32 blocks? If there's one, then it's fine. Otherwise, the counter will continue, and that causes IV reuse. In CTR or so it isn't so bad (the attacker can get a xor of plaintexts), but in GCM, if the plaintext is controlled by the attacker, this allows forging authentication tags: see 3. in http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/Joux_comments.
Instead, GCM should just throw after (2^32)-1 blocks / (2^39)-256 bits as per http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-spec.pdf p18.",@karel-m sounds reasonable to check for all encauth modes,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,130,2016-09-30T14:34:29Z,2016-10-07T14:03:12Z,2017-02-21T20:07:04Z,CLOSED,False,0,0,0,https://github.com/matswebjorn,Fix release build,0,[],https://github.com/libtom/libtomcrypt/pull/130,https://github.com/matswebjorn,1,https://github.com/libtom/libtomcrypt/pull/130,"In tomcrypt_custom.h LTC_NO_PROTOTYPES may be redefined depending on if more than one of XMALLOC, XREALLOC, XCALLOC ... has been defined. Code needs to undefine macro before defining it again to avoid compiler warnings
Unfortunately unintentionally my previous commit ""Add function declarations to remove compile warning"" got into this branch :-(","In tomcrypt_custom.h LTC_NO_PROTOTYPES may be redefined depending on if more than one of XMALLOC, XREALLOC, XCALLOC ... has been defined. Code needs to undefine macro before defining it again to avoid compiler warnings
Unfortunately unintentionally my previous commit ""Add function declarations to remove compile warning"" got into this branch :-(",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,130,2016-09-30T14:34:29Z,2016-10-07T14:03:12Z,2017-02-21T20:07:04Z,CLOSED,False,0,0,0,https://github.com/matswebjorn,Fix release build,0,[],https://github.com/libtom/libtomcrypt/pull/130,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/130#issuecomment-250763399,"In tomcrypt_custom.h LTC_NO_PROTOTYPES may be redefined depending on if more than one of XMALLOC, XREALLOC, XCALLOC ... has been defined. Code needs to undefine macro before defining it again to avoid compiler warnings
Unfortunately unintentionally my previous commit ""Add function declarations to remove compile warning"" got into this branch :-(",Coverage decreased (-1.6%) to 85.675% when pulling 883daf3 on matswebjorn:fix-release-build into 6ad5225 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,130,2016-09-30T14:34:29Z,2016-10-07T14:03:12Z,2017-02-21T20:07:04Z,CLOSED,False,0,0,0,https://github.com/matswebjorn,Fix release build,0,[],https://github.com/libtom/libtomcrypt/pull/130,https://github.com/rofl0r,3,https://github.com/libtom/libtomcrypt/pull/130#issuecomment-250784256,"In tomcrypt_custom.h LTC_NO_PROTOTYPES may be redefined depending on if more than one of XMALLOC, XREALLOC, XCALLOC ... has been defined. Code needs to undefine macro before defining it again to avoid compiler warnings
Unfortunately unintentionally my previous commit ""Add function declarations to remove compile warning"" got into this branch :-(","Unfortunately unintentionally my previous commit ""Add function declarations to remove compile warning"" got into this branch :-(

you can undo the unintentional commit locally, and then force-push to fix it.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,130,2016-09-30T14:34:29Z,2016-10-07T14:03:12Z,2017-02-21T20:07:04Z,CLOSED,False,0,0,0,https://github.com/matswebjorn,Fix release build,0,[],https://github.com/libtom/libtomcrypt/pull/130,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/130#issuecomment-250988309,"In tomcrypt_custom.h LTC_NO_PROTOTYPES may be redefined depending on if more than one of XMALLOC, XREALLOC, XCALLOC ... has been defined. Code needs to undefine macro before defining it again to avoid compiler warnings
Unfortunately unintentionally my previous commit ""Add function declarations to remove compile warning"" got into this branch :-(","you can undo the unintentional commit locally, and then force-push to fix it.

the easiest way is to

check-out the fix-release-build branch
do a git rebase -i develop, in the editor that pops up remove the line with the commit, finish the rebase by closing the file
git push -f",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,130,2016-09-30T14:34:29Z,2016-10-07T14:03:12Z,2017-02-21T20:07:04Z,CLOSED,False,0,0,0,https://github.com/matswebjorn,Fix release build,0,[],https://github.com/libtom/libtomcrypt/pull/130,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/130#issuecomment-252424349,"In tomcrypt_custom.h LTC_NO_PROTOTYPES may be redefined depending on if more than one of XMALLOC, XREALLOC, XCALLOC ... has been defined. Code needs to undefine macro before defining it again to avoid compiler warnings
Unfortunately unintentionally my previous commit ""Add function declarations to remove compile warning"" got into this branch :-(",#132,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,132,2016-10-07T14:11:18Z,2017-02-23T10:08:17Z,2017-02-23T10:08:17Z,CLOSED,False,19,9,1,https://github.com/matswebjorn,Fix compile warning on free build,1,[],https://github.com/libtom/libtomcrypt/pull/132,https://github.com/matswebjorn,1,https://github.com/libtom/libtomcrypt/pull/132,"The definition of LTC_NO_PROTOTYPES in tomcrypt_custom.h will generate warnings if more than one of XMALLOC, XREALLOC, ... is defined. LTC_NO_PROTOTYPES must be undefined before it is redefined.","The definition of LTC_NO_PROTOTYPES in tomcrypt_custom.h will generate warnings if more than one of XMALLOC, XREALLOC, ... is defined. LTC_NO_PROTOTYPES must be undefined before it is redefined.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,132,2016-10-07T14:11:18Z,2017-02-23T10:08:17Z,2017-02-23T10:08:17Z,CLOSED,False,19,9,1,https://github.com/matswebjorn,Fix compile warning on free build,1,[],https://github.com/libtom/libtomcrypt/pull/132,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/132#issuecomment-252265919,"The definition of LTC_NO_PROTOTYPES in tomcrypt_custom.h will generate warnings if more than one of XMALLOC, XREALLOC, ... is defined. LTC_NO_PROTOTYPES must be undefined before it is redefined.",Coverage remained the same at 85.676% when pulling d48b2c8 on matswebjorn:fix-release-build into f784793 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,132,2016-10-07T14:11:18Z,2017-02-23T10:08:17Z,2017-02-23T10:08:17Z,CLOSED,False,19,9,1,https://github.com/matswebjorn,Fix compile warning on free build,1,[],https://github.com/libtom/libtomcrypt/pull/132,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/132#issuecomment-252424332,"The definition of LTC_NO_PROTOTYPES in tomcrypt_custom.h will generate warnings if more than one of XMALLOC, XREALLOC, ... is defined. LTC_NO_PROTOTYPES must be undefined before it is redefined.","and please don't create a new PR this time, update this one.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,132,2016-10-07T14:11:18Z,2017-02-23T10:08:17Z,2017-02-23T10:08:17Z,CLOSED,False,19,9,1,https://github.com/matswebjorn,Fix compile warning on free build,1,[],https://github.com/libtom/libtomcrypt/pull/132,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/132#issuecomment-281308059,"The definition of LTC_NO_PROTOTYPES in tomcrypt_custom.h will generate warnings if more than one of XMALLOC, XREALLOC, ... is defined. LTC_NO_PROTOTYPES must be undefined before it is redefined.",fine like that?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,132,2016-10-07T14:11:18Z,2017-02-23T10:08:17Z,2017-02-23T10:08:17Z,CLOSED,False,19,9,1,https://github.com/matswebjorn,Fix compile warning on free build,1,[],https://github.com/libtom/libtomcrypt/pull/132,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/132#issuecomment-281447738,"The definition of LTC_NO_PROTOTYPES in tomcrypt_custom.h will generate warnings if more than one of XMALLOC, XREALLOC, ... is defined. LTC_NO_PROTOTYPES must be undefined before it is redefined.","I only suggest this little improvement to fix/132 branch
c046b78",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,132,2016-10-07T14:11:18Z,2017-02-23T10:08:17Z,2017-02-23T10:08:17Z,CLOSED,False,19,9,1,https://github.com/matswebjorn,Fix compile warning on free build,1,[],https://github.com/libtom/libtomcrypt/pull/132,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/132#issuecomment-281457593,"The definition of LTC_NO_PROTOTYPES in tomcrypt_custom.h will generate warnings if more than one of XMALLOC, XREALLOC, ... is defined. LTC_NO_PROTOTYPES must be undefined before it is redefined.","I only suggest this little improvement to fix/132 branch
c046b78

That looks good, I added another comment to the comment of @rofl0r on 8dc3e0e",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,133,2016-10-10T19:56:33Z,2017-02-21T15:36:19Z,2017-10-09T16:16:39Z,MERGED,True,6,0,2,https://github.com/karel-m,DSA: properly handle FIPS 186-4 (4.6 + 4.7),2,[],https://github.com/libtom/libtomcrypt/pull/133,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/133,"DSA code does not use min(N,outlen) as required by FIPS 186-4 4.7 (for verify) and similarly 4.7 (for sign).
Credits: originally reported by Eberhard Mattes in private e-mail conversation","DSA code does not use min(N,outlen) as required by FIPS 186-4 4.7 (for verify) and similarly 4.7 (for sign).
Credits: originally reported by Eberhard Mattes in private e-mail conversation",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,133,2016-10-10T19:56:33Z,2017-02-21T15:36:19Z,2017-10-09T16:16:39Z,MERGED,True,6,0,2,https://github.com/karel-m,DSA: properly handle FIPS 186-4 (4.6 + 4.7),2,[],https://github.com/libtom/libtomcrypt/pull/133,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/133#issuecomment-252818521,"DSA code does not use min(N,outlen) as required by FIPS 186-4 4.7 (for verify) and similarly 4.7 (for sign).
Credits: originally reported by Eberhard Mattes in private e-mail conversation",Coverage increased (+0.003%) to 85.679% when pulling f53566b on karel-m:fix-dsa-FIPS186-4 into f784793 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,133,2016-10-10T19:56:33Z,2017-02-21T15:36:19Z,2017-10-09T16:16:39Z,MERGED,True,6,0,2,https://github.com/karel-m,DSA: properly handle FIPS 186-4 (4.6 + 4.7),2,[],https://github.com/libtom/libtomcrypt/pull/133,https://github.com/coveralls,3,https://github.com/libtom/libtomcrypt/pull/133#issuecomment-281220038,"DSA code does not use min(N,outlen) as required by FIPS 186-4 4.7 (for verify) and similarly 4.7 (for sign).
Credits: originally reported by Eberhard Mattes in private e-mail conversation",Coverage increased (+0.002%) to 87.302% when pulling 489ccdb on karel-m:fix-dsa-FIPS186-4 into 08aabc7 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,133,2016-10-10T19:56:33Z,2017-02-21T15:36:19Z,2017-10-09T16:16:39Z,MERGED,True,6,0,2,https://github.com/karel-m,DSA: properly handle FIPS 186-4 (4.6 + 4.7),2,[],https://github.com/libtom/libtomcrypt/pull/133,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/133#issuecomment-281308719,"DSA code does not use min(N,outlen) as required by FIPS 186-4 4.7 (for verify) and similarly 4.7 (for sign).
Credits: originally reported by Eberhard Mattes in private e-mail conversation","fine to rebase, merge & close",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,133,2016-10-10T19:56:33Z,2017-02-21T15:36:19Z,2017-10-09T16:16:39Z,MERGED,True,6,0,2,https://github.com/karel-m,DSA: properly handle FIPS 186-4 (4.6 + 4.7),2,[],https://github.com/libtom/libtomcrypt/pull/133,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/133#issuecomment-281382851,"DSA code does not use min(N,outlen) as required by FIPS 186-4 4.7 (for verify) and similarly 4.7 (for sign).
Credits: originally reported by Eberhard Mattes in private e-mail conversation",please always merge with --no-ff (if you merge by hand you can also close the PR by adding the appropriate comment to the merge),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,133,2016-10-10T19:56:33Z,2017-02-21T15:36:19Z,2017-10-09T16:16:39Z,MERGED,True,6,0,2,https://github.com/karel-m,DSA: properly handle FIPS 186-4 (4.6 + 4.7),2,[],https://github.com/libtom/libtomcrypt/pull/133,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/133#issuecomment-281385615,"DSA code does not use min(N,outlen) as required by FIPS 186-4 4.7 (for verify) and similarly 4.7 (for sign).
Credits: originally reported by Eberhard Mattes in private e-mail conversation","I apologize, I did the merge via GitHub big green magic merge button.
The next time it'll be better to leave it up to you.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,133,2016-10-10T19:56:33Z,2017-02-21T15:36:19Z,2017-10-09T16:16:39Z,MERGED,True,6,0,2,https://github.com/karel-m,DSA: properly handle FIPS 186-4 (4.6 + 4.7),2,[],https://github.com/libtom/libtomcrypt/pull/133,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/133#issuecomment-281392454,"DSA code does not use min(N,outlen) as required by FIPS 186-4 4.7 (for verify) and similarly 4.7 (for sign).
Credits: originally reported by Eberhard Mattes in private e-mail conversation","Hey no worries! I thought that's the default behavior... ah wait did you click on ""rebase and merge""? that's a bit ambiguous I'd say as their meaning of 'merge' is 'close the PR' IIUC",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,134,2016-10-28T20:19:45Z,2017-02-05T10:19:41Z,2017-02-21T20:07:04Z,CLOSED,False,1,17,1,https://github.com/mpherg,Remove reference to public domain software,1,['invalid'],https://github.com/libtom/libtomcrypt/pull/134,https://github.com/mpherg,1,https://github.com/libtom/libtomcrypt/pull/134,"""Public domain"" isn't a license, and it causes all sorts of problems for
lawyers if we want to use it. Remove public domain and just leave the WTF
license, which I believe is what the author is really concerned about.","""Public domain"" isn't a license, and it causes all sorts of problems for
lawyers if we want to use it. Remove public domain and just leave the WTF
license, which I believe is what the author is really concerned about.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,134,2016-10-28T20:19:45Z,2017-02-05T10:19:41Z,2017-02-21T20:07:04Z,CLOSED,False,1,17,1,https://github.com/mpherg,Remove reference to public domain software,1,['invalid'],https://github.com/libtom/libtomcrypt/pull/134,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/134#issuecomment-257020977,"""Public domain"" isn't a license, and it causes all sorts of problems for
lawyers if we want to use it. Remove public domain and just leave the WTF
license, which I believe is what the author is really concerned about.",Coverage remained the same at 85.676% when pulling 5ee881c on mpherg:develop into f784793 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,134,2016-10-28T20:19:45Z,2017-02-05T10:19:41Z,2017-02-21T20:07:04Z,CLOSED,False,1,17,1,https://github.com/mpherg,Remove reference to public domain software,1,['invalid'],https://github.com/libtom/libtomcrypt/pull/134,https://github.com/mpherg,3,https://github.com/libtom/libtomcrypt/pull/134#issuecomment-257022080,"""Public domain"" isn't a license, and it causes all sorts of problems for
lawyers if we want to use it. Remove public domain and just leave the WTF
license, which I believe is what the author is really concerned about.",Or you could simply use the unlicense.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,134,2016-10-28T20:19:45Z,2017-02-05T10:19:41Z,2017-02-21T20:07:04Z,CLOSED,False,1,17,1,https://github.com/mpherg,Remove reference to public domain software,1,['invalid'],https://github.com/libtom/libtomcrypt/pull/134,https://github.com/Scarletts,4,https://github.com/libtom/libtomcrypt/pull/134#issuecomment-267214374,"""Public domain"" isn't a license, and it causes all sorts of problems for
lawyers if we want to use it. Remove public domain and just leave the WTF
license, which I believe is what the author is really concerned about.","@mpherg The author of that article has changed his mind:

I admit that I have argued for years against the ""public domain"" as an open source license, but in
retrospect, considering the minimal risk to developers and users relying on such software and the evident popularity of that ""license"", I changed my mind. One can't stand in the way of a fire hose of free public domain software, even if it doesn't come with a better FOSS license that I trust more.

Source
from djb's page on public domain
I would conclude that this is controversial, but there's also been controversy around the legal interpretation of fairly clear open source licenses... better just to wait for the ridiculous copyright system to fall apart, no? :)
If you trust the WTFPL, the public domain declaration is irrelevant anyway, so this is a non-issue.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,134,2016-10-28T20:19:45Z,2017-02-05T10:19:41Z,2017-02-21T20:07:04Z,CLOSED,False,1,17,1,https://github.com/mpherg,Remove reference to public domain software,1,['invalid'],https://github.com/libtom/libtomcrypt/pull/134,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/134#issuecomment-277509313,"""Public domain"" isn't a license, and it causes all sorts of problems for
lawyers if we want to use it. Remove public domain and just leave the WTF
license, which I believe is what the author is really concerned about.","If you trust the WTFPL, the public domain declaration is irrelevant anyway, so this is a non-issue.

therefor closing this as non-issue",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,134,2016-10-28T20:19:45Z,2017-02-05T10:19:41Z,2017-02-21T20:07:04Z,CLOSED,False,1,17,1,https://github.com/mpherg,Remove reference to public domain software,1,['invalid'],https://github.com/libtom/libtomcrypt/pull/134,https://github.com/mpherg,6,https://github.com/libtom/libtomcrypt/pull/134#issuecomment-277522090,"""Public domain"" isn't a license, and it causes all sorts of problems for
lawyers if we want to use it. Remove public domain and just leave the WTF
license, which I believe is what the author is really concerned about.",Unfortunately our lawyers disagree with this interpretation of public domain. I guess we will have to find some other library.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,134,2016-10-28T20:19:45Z,2017-02-05T10:19:41Z,2017-02-21T20:07:04Z,CLOSED,False,1,17,1,https://github.com/mpherg,Remove reference to public domain software,1,['invalid'],https://github.com/libtom/libtomcrypt/pull/134,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/134#issuecomment-277524300,"""Public domain"" isn't a license, and it causes all sorts of problems for
lawyers if we want to use it. Remove public domain and just leave the WTF
license, which I believe is what the author is really concerned about.","Why can't you just use the WTFPL license? Therefor it's dual licensed...
...or even just take it and re-license it under whatever license you want... as in:


click on ""fork""


modify the LICENSE file in your own fork of the project


refer your lawyers to this fork",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,134,2016-10-28T20:19:45Z,2017-02-05T10:19:41Z,2017-02-21T20:07:04Z,CLOSED,False,1,17,1,https://github.com/mpherg,Remove reference to public domain software,1,['invalid'],https://github.com/libtom/libtomcrypt/pull/134,https://github.com/tomstdenis,8,https://github.com/libtom/libtomcrypt/pull/134#issuecomment-277525859,"""Public domain"" isn't a license, and it causes all sorts of problems for
lawyers if we want to use it. Remove public domain and just leave the WTF
license, which I believe is what the author is really concerned about.","This reminds me of dealing with Sandisk about 10 years ago.  They also didn't like the public domain license.  So I told them for a $5000 fee I'd license it to them under a proprietary license.  They surprisingly didn't accept that.
The ""public domain"" really is a thing in the USA.  Works that have aged out their copyright terms are license free and within the public's domain.
Or do you argue that Hamlet is a copyrighted text?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,134,2016-10-28T20:19:45Z,2017-02-05T10:19:41Z,2017-02-21T20:07:04Z,CLOSED,False,1,17,1,https://github.com/mpherg,Remove reference to public domain software,1,['invalid'],https://github.com/libtom/libtomcrypt/pull/134,https://github.com/mpherg,9,https://github.com/libtom/libtomcrypt/pull/134#issuecomment-277536648,"""Public domain"" isn't a license, and it causes all sorts of problems for
lawyers if we want to use it. Remove public domain and just leave the WTF
license, which I believe is what the author is really concerned about.","Our lawyers argue that if the work is in the public domain (even with a dual licensing model), the author (i.e. copyright holder) may at some future date choose to apply a restrictive or proprietary license, and thus leave users (my company, for instance) at risk. This risk exists until a license is applied.
In the end this is your work and you can do whatever you want with it, and I respect that. Thanks for the consideration.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,134,2016-10-28T20:19:45Z,2017-02-05T10:19:41Z,2017-02-21T20:07:04Z,CLOSED,False,1,17,1,https://github.com/mpherg,Remove reference to public domain software,1,['invalid'],https://github.com/libtom/libtomcrypt/pull/134,https://github.com/mpherg,10,https://github.com/libtom/libtomcrypt/pull/134#issuecomment-277536779,"""Public domain"" isn't a license, and it causes all sorts of problems for
lawyers if we want to use it. Remove public domain and just leave the WTF
license, which I believe is what the author is really concerned about.","And your copyright hasn't expired yet, unless you have been dead for 70 years (https://www.copyright.gov/help/faq/faq-duration.html). Hamlet is a bit older.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,137,2016-11-26T00:20:16Z,2016-11-26T00:32:57Z,2017-02-21T20:07:04Z,CLOSED,False,102,10,13,https://github.com/n3npq,update,4,[],https://github.com/libtom/libtomcrypt/pull/137,https://github.com/n3npq,1,https://github.com/libtom/libtomcrypt/pull/137,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,137,2016-11-26T00:20:16Z,2016-11-26T00:32:57Z,2017-02-21T20:07:04Z,CLOSED,False,102,10,13,https://github.com/n3npq,update,4,[],https://github.com/libtom/libtomcrypt/pull/137,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/137#issuecomment-263035330,,Coverage remained the same at 85.676% when pulling 88dfeda on rpm5:develop into f784793 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,141,2017-01-27T00:11:03Z,2017-02-17T14:14:30Z,2017-02-21T20:07:04Z,CLOSED,False,5,1,1,https://github.com/coachroebuck,Ignore those warnings related to '@param' inside comments. We probabl…,1,[],https://github.com/libtom/libtomcrypt/pull/141,https://github.com/coachroebuck,1,https://github.com/libtom/libtomcrypt/pull/141,…y don't care about them.,…y don't care about them.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,141,2017-01-27T00:11:03Z,2017-02-17T14:14:30Z,2017-02-21T20:07:04Z,CLOSED,False,5,1,1,https://github.com/coachroebuck,Ignore those warnings related to '@param' inside comments. We probabl…,1,[],https://github.com/libtom/libtomcrypt/pull/141,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/141#issuecomment-280622761,…y don't care about them.,Do you plan to fix this PR or can I close it?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,141,2017-01-27T00:11:03Z,2017-02-17T14:14:30Z,2017-02-21T20:07:04Z,CLOSED,False,5,1,1,https://github.com/coachroebuck,Ignore those warnings related to '@param' inside comments. We probabl…,1,[],https://github.com/libtom/libtomcrypt/pull/141,https://github.com/coachroebuck,3,https://github.com/libtom/libtomcrypt/pull/141#issuecomment-280660393,…y don't care about them.,"You can close this. I had removed those #pragma statements for work-related reasons related to our iOS app. Once I received that build alert, I realized there was a build configuration setting that I should review instead.
Sorry I kept this branch hanging for a while.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,142,2017-02-24T15:32:19Z,2017-02-24T15:35:20Z,2017-06-27T12:22:20Z,MERGED,True,2203,2202,186,https://github.com/karel-m,Fix/85 part1,7,[],https://github.com/libtom/libtomcrypt/pull/142,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/142,first part of changes related to #85,first part of changes related to #85,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,142,2017-02-24T15:32:19Z,2017-02-24T15:35:20Z,2017-06-27T12:22:20Z,MERGED,True,2203,2202,186,https://github.com/karel-m,Fix/85 part1,7,[],https://github.com/libtom/libtomcrypt/pull/142,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/142#issuecomment-282325373,first part of changes related to #85,Coverage remained the same at 87.237% when pulling 58353f5 on fix/85-part1 into ecb2402 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,143,2017-02-24T18:04:29Z,2017-02-24T18:04:47Z,2017-06-27T12:22:20Z,MERGED,True,13,13,7,https://github.com/karel-m,Fix/85 part2,5,[],https://github.com/libtom/libtomcrypt/pull/143,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/143,second subset of changes,second subset of changes,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,144,2017-02-24T20:14:13Z,2017-02-28T00:17:19Z,2017-06-27T12:22:20Z,MERGED,True,5,4,1,https://github.com/karel-m,fix coverity finding: dsa_import double free,2,[],https://github.com/libtom/libtomcrypt/pull/144,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/144,@sjaeckel agree?,@sjaeckel agree?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,144,2017-02-24T20:14:13Z,2017-02-28T00:17:19Z,2017-06-27T12:22:20Z,MERGED,True,5,4,1,https://github.com/karel-m,fix coverity finding: dsa_import double free,2,[],https://github.com/libtom/libtomcrypt/pull/144,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/144#issuecomment-282398564,@sjaeckel agree?,Coverage decreased (-0.02%) to 87.213% when pulling c0b3a74 on fix/coverity-dsa_import-double-free into 824f3af on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,144,2017-02-24T20:14:13Z,2017-02-28T00:17:19Z,2017-06-27T12:22:20Z,MERGED,True,5,4,1,https://github.com/karel-m,fix coverity finding: dsa_import double free,2,[],https://github.com/libtom/libtomcrypt/pull/144,https://github.com/coveralls,3,https://github.com/libtom/libtomcrypt/pull/144#issuecomment-282506283,@sjaeckel agree?,Coverage decreased (-0.02%) to 87.213% when pulling bebbf0a on fix/coverity-dsa_import-double-free into 824f3af on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,144,2017-02-24T20:14:13Z,2017-02-28T00:17:19Z,2017-06-27T12:22:20Z,MERGED,True,5,4,1,https://github.com/karel-m,fix coverity finding: dsa_import double free,2,[],https://github.com/libtom/libtomcrypt/pull/144,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/144#issuecomment-282593912,@sjaeckel agree?,"just FYI: while playing with clang when checking #121 I have also tried clang's static analyzer which also identified this issue:
src/pk/dsa/dsa_import.c:128:4: warning: Attempt to free released memory
   XFREE(tmpbuf);
   ^~~~~~~~~~~~~
./src/headers/tomcrypt_custom.h:15:18: note: expanded from macro 'XFREE'
#define XFREE    free
                 ^
1 warning generated.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,144,2017-02-24T20:14:13Z,2017-02-28T00:17:19Z,2017-06-27T12:22:20Z,MERGED,True,5,4,1,https://github.com/karel-m,fix coverity finding: dsa_import double free,2,[],https://github.com/libtom/libtomcrypt/pull/144,https://github.com/coveralls,5,https://github.com/libtom/libtomcrypt/pull/144#issuecomment-282901404,@sjaeckel agree?,Coverage decreased (-0.02%) to 87.213% when pulling faa18e7 on fix/coverity-dsa_import-double-free into 6499c70 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,145,2017-02-24T20:23:27Z,2017-02-25T19:44:47Z,2017-06-27T12:22:20Z,MERGED,True,1,1,1,https://github.com/karel-m,fix coverity finding: cbc_decrypt out-of-bound read,1,[],https://github.com/libtom/libtomcrypt/pull/145,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/145,@sjaeckel agree?,@sjaeckel agree?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,145,2017-02-24T20:23:27Z,2017-02-25T19:44:47Z,2017-06-27T12:22:20Z,MERGED,True,1,1,1,https://github.com/karel-m,fix coverity finding: cbc_decrypt out-of-bound read,1,[],https://github.com/libtom/libtomcrypt/pull/145,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/145#issuecomment-282400301,@sjaeckel agree?,Coverage remained the same at 87.237% when pulling 21ed3d8 on fix/coverity-cbc_decrypt-out-of-bounds-read into 824f3af on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,145,2017-02-24T20:23:27Z,2017-02-25T19:44:47Z,2017-06-27T12:22:20Z,MERGED,True,1,1,1,https://github.com/karel-m,fix coverity finding: cbc_decrypt out-of-bound read,1,[],https://github.com/libtom/libtomcrypt/pull/145,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/145#issuecomment-282478072,@sjaeckel agree?,"IIUC that's not really a false positive, it's something that could happen in case that code is hit by a cipher with a bigger block length than 16 which:

is currently not implemented
I'm not aware of to even exist as publicly known cipher okay e.g. rijndael could do 32, but still it's not implemented (yet)

I'm somehow against that patch as it increases the used stack without any benefit.
I'd prefer the approach to add a check here",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,145,2017-02-24T20:23:27Z,2017-02-25T19:44:47Z,2017-06-27T12:22:20Z,MERGED,True,1,1,1,https://github.com/karel-m,fix coverity finding: cbc_decrypt out-of-bound read,1,[],https://github.com/libtom/libtomcrypt/pull/145,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/145#issuecomment-282480873,@sjaeckel agree?,"Like this?
- if (cbc->blocklen < 1 || cbc->blocklen > (int)sizeof(cbc->IV)) {
+ if (cbc->blocklen < 1 || cbc->blocklen > (int)sizeof(cbc->IV)  || cbc->blocklen > (int)sizeof(tmp)) {",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,145,2017-02-24T20:23:27Z,2017-02-25T19:44:47Z,2017-06-27T12:22:20Z,MERGED,True,1,1,1,https://github.com/karel-m,fix coverity finding: cbc_decrypt out-of-bound read,1,[],https://github.com/libtom/libtomcrypt/pull/145,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/145#issuecomment-282504375,@sjaeckel agree?,"changed, I'll wait for travis-ci results and then merge",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,145,2017-02-24T20:23:27Z,2017-02-25T19:44:47Z,2017-06-27T12:22:20Z,MERGED,True,1,1,1,https://github.com/karel-m,fix coverity finding: cbc_decrypt out-of-bound read,1,[],https://github.com/libtom/libtomcrypt/pull/145,https://github.com/coveralls,6,https://github.com/libtom/libtomcrypt/pull/145#issuecomment-282505775,@sjaeckel agree?,Coverage remained the same at 87.237% when pulling 7246ab5 on fix/coverity-cbc_decrypt-out-of-bounds-read into 7c2cc07 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,146,2017-02-25T12:22:42Z,2017-02-25T12:23:04Z,2017-06-27T12:22:20Z,MERGED,True,2,2,2,https://github.com/karel-m,Fix for #85 (part3),1,[],https://github.com/libtom/libtomcrypt/pull/146,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/146,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,147,2017-02-25T14:36:43Z,2017-02-28T19:01:49Z,2017-06-27T12:21:56Z,CLOSED,False,44,31,4,https://github.com/fperrad,sanitize some Perl scripts,1,[],https://github.com/libtom/libtomcrypt/pull/147,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/147,(Perl4 is gone),(Perl4 is gone),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,147,2017-02-25T14:36:43Z,2017-02-28T19:01:49Z,2017-06-27T12:21:56Z,CLOSED,False,44,31,4,https://github.com/fperrad,sanitize some Perl scripts,1,[],https://github.com/libtom/libtomcrypt/pull/147,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/147#issuecomment-282490337,(Perl4 is gone),Coverage remained the same at 87.237% when pulling 38f56e3 on fperrad:perlcritic into 7c2cc07 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,147,2017-02-25T14:36:43Z,2017-02-28T19:01:49Z,2017-06-27T12:21:56Z,CLOSED,False,44,31,4,https://github.com/fperrad,sanitize some Perl scripts,1,[],https://github.com/libtom/libtomcrypt/pull/147,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/147#issuecomment-282503943,(Perl4 is gone),"👍 from me
I would consistently use in all *.pl files the first script line:
#!/usr/bin/env perl",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,147,2017-02-25T14:36:43Z,2017-02-28T19:01:49Z,2017-06-27T12:21:56Z,CLOSED,False,44,31,4,https://github.com/fperrad,sanitize some Perl scripts,1,[],https://github.com/libtom/libtomcrypt/pull/147,https://github.com/coveralls,4,https://github.com/libtom/libtomcrypt/pull/147#issuecomment-282511402,(Perl4 is gone),Coverage remained the same at 87.237% when pulling 85f445a on fperrad:perlcritic into d777f9d on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,147,2017-02-25T14:36:43Z,2017-02-28T19:01:49Z,2017-06-27T12:21:56Z,CLOSED,False,44,31,4,https://github.com/fperrad,sanitize some Perl scripts,1,[],https://github.com/libtom/libtomcrypt/pull/147,https://github.com/coveralls,5,https://github.com/libtom/libtomcrypt/pull/147#issuecomment-282958242,(Perl4 is gone),Coverage remained the same at 87.275% when pulling 6ad472b on fperrad:perlcritic into 8141ca6 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,147,2017-02-25T14:36:43Z,2017-02-28T19:01:49Z,2017-06-27T12:21:56Z,CLOSED,False,44,31,4,https://github.com/fperrad,sanitize some Perl scripts,1,[],https://github.com/libtom/libtomcrypt/pull/147,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/147#issuecomment-283131121,(Perl4 is gone),rebased + merged into develop,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,148,2017-02-25T15:27:11Z,2017-02-28T22:08:09Z,2017-06-27T12:21:46Z,CLOSED,False,7,2,2,https://github.com/fperrad,use static functions where appropriate,2,[],https://github.com/libtom/libtomcrypt/pull/148,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/148,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,148,2017-02-25T15:27:11Z,2017-02-28T22:08:09Z,2017-06-27T12:21:46Z,CLOSED,False,7,2,2,https://github.com/fperrad,use static functions where appropriate,2,[],https://github.com/libtom/libtomcrypt/pull/148,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/148#issuecomment-282493637,,Coverage remained the same at 87.237% when pulling d25a30d on fperrad:20170225_lint into 7c2cc07 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,148,2017-02-25T15:27:11Z,2017-02-28T22:08:09Z,2017-06-27T12:21:46Z,CLOSED,False,7,2,2,https://github.com/fperrad,use static functions where appropriate,2,[],https://github.com/libtom/libtomcrypt/pull/148,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/148#issuecomment-282503559,,"I agree with fixing chc.c as the static is clearly missing here.
The situation with dsa_make_key.c is interesting:

dsa_make_params and dsa_make_key_ex are really used only in this .c file
but the comments before those functions indicate that they were designed to be a part of API
looking at git blame I have to admit that the current code in dsa_make_key.c is mostly mime (just to make it clear whom to blame)
IMO dsa_make_params and dsa_make_key_ex  should be added to tomcrypt_pk.h therefore I am not for making them static
anyway, good catch",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,148,2017-02-25T15:27:11Z,2017-02-28T22:08:09Z,2017-06-27T12:21:46Z,CLOSED,False,7,2,2,https://github.com/fperrad,use static functions where appropriate,2,[],https://github.com/libtom/libtomcrypt/pull/148,https://github.com/coveralls,4,https://github.com/libtom/libtomcrypt/pull/148#issuecomment-282512373,,Coverage remained the same at 87.237% when pulling 11e3080 on fperrad:20170225_lint into d777f9d on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,148,2017-02-25T15:27:11Z,2017-02-28T22:08:09Z,2017-06-27T12:21:46Z,CLOSED,False,7,2,2,https://github.com/fperrad,use static functions where appropriate,2,[],https://github.com/libtom/libtomcrypt/pull/148,https://github.com/coveralls,5,https://github.com/libtom/libtomcrypt/pull/148#issuecomment-282962390,,Coverage remained the same at 87.275% when pulling 5ad344c on fperrad:20170225_lint into 8141ca6 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,148,2017-02-25T15:27:11Z,2017-02-28T22:08:09Z,2017-06-27T12:21:46Z,CLOSED,False,7,2,2,https://github.com/fperrad,use static functions where appropriate,2,[],https://github.com/libtom/libtomcrypt/pull/148,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/148#issuecomment-283069410,,@fperrad can you do the changes as proposed by @karel-m or should we?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,148,2017-02-25T15:27:11Z,2017-02-28T22:08:09Z,2017-06-27T12:21:46Z,CLOSED,False,7,2,2,https://github.com/fperrad,use static functions where appropriate,2,[],https://github.com/libtom/libtomcrypt/pull/148,https://github.com/fperrad,7,https://github.com/libtom/libtomcrypt/pull/148#issuecomment-283103961,,done,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,148,2017-02-25T15:27:11Z,2017-02-28T22:08:09Z,2017-06-27T12:21:46Z,CLOSED,False,7,2,2,https://github.com/fperrad,use static functions where appropriate,2,[],https://github.com/libtom/libtomcrypt/pull/148,https://github.com/coveralls,8,https://github.com/libtom/libtomcrypt/pull/148#issuecomment-283109560,,Coverage remained the same at 87.307% when pulling ae3398e on fperrad:20170225_lint into b44aa8f on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,148,2017-02-25T15:27:11Z,2017-02-28T22:08:09Z,2017-06-27T12:21:46Z,CLOSED,False,7,2,2,https://github.com/fperrad,use static functions where appropriate,2,[],https://github.com/libtom/libtomcrypt/pull/148,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/148#issuecomment-283140862,,"I have created #154 where I want to move further discussion about dsa_* functions.
I vote for merging this PR as it is now.",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,148,2017-02-25T15:27:11Z,2017-02-28T22:08:09Z,2017-06-27T12:21:46Z,CLOSED,False,7,2,2,https://github.com/fperrad,use static functions where appropriate,2,[],https://github.com/libtom/libtomcrypt/pull/148,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/148#issuecomment-283176835,,rebased-merged-pushed closing,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/109,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/r4f4,2,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-191821844,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","Just to complement, I can compile the lib successfully on a ppc64le machine (little-endian). So a high probability of an endiannes bug.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/ngothan,3,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-194350183,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","i created a patch which fixes the above issue. it built fine now with the patch on s390/s390x/ppc64/ppc64le. It would be great if the patch can be included in next release. Thanks
diff -up libtomcrypt-912eff4949f46c0b426d2180429a6fa4c1144f1d/src/headers/tomcrypt_cfg.h.than libtomcrypt-912eff4949f46c0b426d2180429a6fa4c1144f1d/src/headers/tomcrypt_cfg.h
--- libtomcrypt-912eff4949f46c0b426d2180429a6fa4c1144f1d/src/headers/tomcrypt_cfg.h.than        2016-01-23 13:11:30.000000000 -0500
+++ libtomcrypt-912eff4949f46c0b426d2180429a6fa4c1144f1d/src/headers/tomcrypt_cfg.h     2016-03-09 10:16:36.520161395 -0500
@@ -55,6 +55,23 @@ LTC_EXPORT int   LTC_CALL XSTRCMP(const

use the portable [slower] macros.
*/

+#if defined(powerpc64)
+#define ENDIAN_64BITWORD
+#if BYTE_ORDER == ORDER_BIG_ENDIAN
+#define ENDIAN_BIG
+#else
+#define ENDIAN_LITTLE
+#endif
+#endif
+
+#if defined(s390x)
+#define ENDIAN_64BITWORD
+#define ENDIAN_BIG
+#elif defined(s390)
+#define ENDIAN_32BITWORD
+#define ENDIAN_BIG
+#endif
+
/* detect x86-32 machines somewhat _/
#if !defined(STRICT_ANSI) && !defined(x86_64) && !defined(_WIN64) && ((defined(MSC_VER) && defined(WIN32)) || (defined(GNUC) && (defined(DJGPP) || defined(CYGWIN) || defined(MINGW32) || defined(i386))))
#define ENDIAN_LITTLE
@@ -94,7 +111,7 @@ LTC_EXPORT int   LTC_CALL XSTRCMP(const
/ this is the ""32-bit at least"" data type

Re-define it to suit your platform but it must be at least 32-bits
*/
-#if defined(x86_64) || (defined(sparc) && defined(arch64))
+#if defined(x86_64) || defined(powerpc64) || defined(s390x) || (defined(sparc) && defined(arch64))
typedef unsigned ulong32;
#else
typedef unsigned long ulong32;",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/ngothan,4,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-194351754,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","attach the patch file
libtomcrypt-big-endian.txt",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/sebastianas,5,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-194465771,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","On 2016-03-09 07:37:53 [-0800], ngothan wrote:

i created a patch which fixes the above issue. it built fine now with the patch on s390/s390x/ppc64/ppc64le. It would be great if the patch can be included in next release. Thanks
diff -up libtomcrypt-912eff4949f46c0b426d2180429a6fa4c1144f1d/src/headers/tomcrypt_cfg.h.than libtomcrypt-912eff4949f46c0b426d2180429a6fa4c1144f1d/src/headers/tomcrypt_cfg.h
--- libtomcrypt-912eff4949f46c0b426d2180429a6fa4c1144f1d/src/headers/tomcrypt_cfg.h.than        2016-01-23 13:11:30.000000000 -0500
+++ libtomcrypt-912eff4949f46c0b426d2180429a6fa4c1144f1d/src/headers/tomcrypt_cfg.h     2016-03-09 10:16:36.520161395 -0500
@@ -55,6 +55,23 @@ LTC_EXPORT int   LTC_CALL XSTRCMP(const

use the portable [slower] macros.
*/

+#if defined(powerpc64)
+#define ENDIAN_64BITWORD
+#if BYTE_ORDER == ORDER_BIG_ENDIAN
+#define ENDIAN_BIG
+#else
+#define ENDIAN_LITTLE
+#endif
+#endif

While this is not wrong, instead of this magic for each architecture
over and over we could use
#if __WORDSIZE == 64

# define ENDIAN_64BITWORD

#elif __WORDSIZE == 32

# define ENDIAN_32BITWORD

#else

# error missing __WORDSIZE

#endif

#if BYTE_ORDER == ORDER_BIG_ENDIAN

# define ENDIAN_BIG

#elif BYTE_ORDER == ORDER_LITTLE_ENDIAN

# define ENDIAN_LITTLE

#else

# error missing BYTE_ORDER

#endif





+#if defined(s390x)
+#define ENDIAN_64BITWORD
+#define ENDIAN_BIG
+#elif defined(s390)
+#define ENDIAN_32BITWORD
+#define ENDIAN_BIG
+#endif

wouldn't this just work?
Sebastian",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/wasser19641,6,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-194726703,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","Hi Sebastian,
yes, using WORDSIZE and __BYTE_ORDER  should work too.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/sharkcz,7,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-194731952,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","please see https://bugzilla.redhat.com/show_bug.cgi?id=962091#c48 for recommended endianity checks, #include <endian.h> is required for the checks to work on all arches",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-194740180,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","Before introducing dependency on #include <endian.h> I would prefer some kind of research/testing on non-Linux platforms and non-gcc compilers.
It reminds me the discussion in libtommath where we have introduced dependency on #include <stdint.h> which does not work on older MS Visual Studio (OK, not a big issue, but still).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/sebastianas,9,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-194819489,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","On 2016-03-10 00:52:34 [-0800], karel-m wrote:

Before introducing dependency on #include <endian.h> I would prefer some kind of research/testing on non-Linux platforms and non-gcc compilers.

this can be done best by people not using gcc and / or Linux. And they
are probably little_endian :)

It reminds me the discussion in libtommath where we have introduced dependency on #include <stdint.h> which does not work on older MS Visual Studio (OK, not a big issue, but still).

This is part of C99 and you know how old that is.
Sebastian",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-281932463,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","Sorry for the long delay
@ngothan did you also run the tests?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/ngothan,11,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-281998235,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","@sjaeckel
yes, i did last time. the tests worked fine.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-282012036,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","I would like to propose alternative approach which I pushed as fix/109-alternative-approach - see https://github.com/libtom/libtomcrypt/tree/fix/109-alternative-approach
The changes in this branch handle not only this issue but also many other bug reports I got for my libtomcrypt perl bindings, mostly compile/test failures on exotic platforms and/or exotic compilers.
I have also tried to make tomcrypt_cfg.h a bit better arranged so that it should be more obvious what is going on.
Can anybody with access to ppc64/S390 platform please test also the above-mentioned branch?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/sjaeckel,13,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-282017635,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","Oh, I also started a fix for this problem and am currently busy validating it (at least on qemu-system-ppc64 for now). I pushed my WIP to the branch fix/109",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/karel-m,14,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-282025825,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","@sjackel if your fix/109 was started from scratch I would like to ask you to have a look at my alternative approach branch as it is already sort of battle-tested as I am already using it in my perl bindings for some time and it was proved to be working correctly for many exotic platform-compiler combinations (to many/most of them I do not have an access, thus it would not be easy to revalidate the new implementation).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/karel-m,15,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-282812773,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()",I have rebased fix/109-alternative-approach  on current develop,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/sjaeckel,16,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-282814123,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","I have rebased fix/109-alternative-approach on current develop

You rebased & squashed your latest state of the branch on current develop, didn't check before force-pushing and overwrote the rebase I did right before and the additional commit I added 😆
Never mind, I just pushed again 😄",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/karel-m,17,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-282817105,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","I am very sorry, it was not intentional.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/sjaeckel,18,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-282904559,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()",Fine like that for all people involved?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/karel-m,19,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-282973738,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()",Just small ANSI C related cosmetics in efdc452,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/karel-m,20,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-283419063,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","All my tests of these changes on exotic platforms/compilers passed - HPUX (PA-RISC + HP C compiler), AIX (POWER + IBM C compiler), MS Windows (32/64bit MSVC, 32/64bit gcc), cygwin (32/64bit, gcc/clang).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/sjaeckel,21,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-283419842,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","All my tests of these changes on exotic platforms/compilers passed - HPUX (PA-RISC + HP C compiler), AIX (POWER + IBM C compiler), MS Windows (32/64bit MSVC, 32/64bit gcc), cygwin (32/64bit, gcc/clang).

you ran testme.sh on those platforms or some other tests?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/karel-m,22,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-283438024,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","Well, no. I have created a dev version of my perl binding with changes from this PR http://cpan.metacpan.org/authors/id/M/MI/MIK/CryptX-0.044_010.tar.gz and built+test this perl module(s).
It is only a simple -DLTC_SOURCE -DLTC_NO_TEST -DLTC_NO_PROTOTYPES -DLTM_DESC build, but the test suite is much more complex than what we have in libtomcrypt (like 20000+ tests) and it reliably fails in case of endianness troubles.
I am waiting for a feedback from Solaris/SPARC - DCIT/perl-CryptX#30 (t/checksum.t failure is exactly the indication of wrong endianness detection).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/karel-m,23,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-285467456,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()","rebased + pushed with --force
@sjaeckel please review this PR",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/karel-m,24,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-286469104,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()",@sjaeckel can we rebase&merge this PR as it is now?,True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,109,2017-02-27T00:41:33Z,2017-03-14T17:18:45Z,2017-03-14T17:18:52Z,MERGED,True,139,68,4,https://github.com/sjaeckel,crc32 test fails on ppc64 BE (tomcrypt_cfg.h facelift),1,[],https://github.com/libtom/libtomcrypt/pull/109,https://github.com/coveralls,25,https://github.com/libtom/libtomcrypt/pull/109#issuecomment-286480480,"When compiling libtomcrypt on ppc64 big-endian, I get the following result below when running the tests. It might be an endianness-related issue.
./test
build ==
LibTomCrypt 1.17 (Tom St Denis, tomstdenis@gmail.com)
LibTomCrypt is public domain software.
Endianness: neutral
Clean stack: disabled
Ciphers built-in:
Blowfish
RC2
RC5
RC6
Safer+
Safer
Rijndael
XTEA
Twofish (tables)
DES
CAST5
Noekeon
Skipjack
Khazad
Anubis  (tweaked)
KSEED
KASUMI
MULTI2
Camellia
Hashes built-in:
SHA-512
SHA-384
SHA-512/256
SHA-256
SHA-512/224
SHA-224
TIGER
SHA1
MD5
MD4
MD2
RIPEMD128
RIPEMD160
RIPEMD256
RIPEMD320
WHIRLPOOL
CHC_HASH
Block Chaining Modes:
CFB
OFB
ECB
CBC
CTR
LRW (tables)
F8
XTS
MACs:
HMAC
OMAC
PMAC
PELICAN
XCBC
F9
ENC + AUTH modes:
EAX
OCB
OCB3
CCM
GCM (tables)
PRNG:
Yarrow (LTC_YARROW_AES=2)
SPRNG
RC4
Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
SOBER128
PK Algs:
RSA (with blinding and CRT hardening)
DH
ECC (with blinding)
DSA
Compiler:
GCC compiler 6.0.0 20160227 (Red Hat 6.0.0-0.13).
Various others:  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTM_DESC  LTC_ECC_SHAMIR
MP_DIGIT_BIT = 28
store_test....passed
misc_test.....crc32 fail! Is: 0x0 Should: 0xef7673b3
Algorithm failed test vectors. (5)
misc_test.c:18:crc32_test()",Coverage remained the same at 87.319% when pulling e09a56d on fix/109-alternative-approach into 44f29d8 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,135,2017-02-27T19:12:03Z,2017-02-28T19:17:27Z,2017-02-28T19:21:56Z,MERGED,True,84,19,6,https://github.com/sjaeckel,RC2 does not support 40bit encryption,6,[],https://github.com/libtom/libtomcrypt/pull/135,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/135,"Originally reported here: DCIT/perl-CryptX#25 by @nlitsme (a user of my perl binding to libtomcrypt).
The fix looks like this DCIT/perl-CryptX@d5a49f8 + DCIT/perl-CryptX@0b0d21b
Currently in libtomcrypt we support RC2 key sizes 64-1024bits, in theory RC2 can handle 8-1024bits.","Originally reported here: DCIT/perl-CryptX#25 by @nlitsme (a user of my perl binding to libtomcrypt).
The fix looks like this DCIT/perl-CryptX@d5a49f8 + DCIT/perl-CryptX@0b0d21b
Currently in libtomcrypt we support RC2 key sizes 64-1024bits, in theory RC2 can handle 8-1024bits.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,135,2017-02-27T19:12:03Z,2017-02-28T19:17:27Z,2017-02-28T19:21:56Z,MERGED,True,84,19,6,https://github.com/sjaeckel,RC2 does not support 40bit encryption,6,[],https://github.com/libtom/libtomcrypt/pull/135,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/135#issuecomment-282815088,"Originally reported here: DCIT/perl-CryptX#25 by @nlitsme (a user of my perl binding to libtomcrypt).
The fix looks like this DCIT/perl-CryptX@d5a49f8 + DCIT/perl-CryptX@0b0d21b
Currently in libtomcrypt we support RC2 key sizes 64-1024bits, in theory RC2 can handle 8-1024bits.","I added a simple doc patch + rebased on develop.
@sjaeckel do agree with merging 178d2b0 to develop?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,135,2017-02-27T19:12:03Z,2017-02-28T19:17:27Z,2017-02-28T19:21:56Z,MERGED,True,84,19,6,https://github.com/sjaeckel,RC2 does not support 40bit encryption,6,[],https://github.com/libtom/libtomcrypt/pull/135,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/135#issuecomment-282817652,"Originally reported here: DCIT/perl-CryptX#25 by @nlitsme (a user of my perl binding to libtomcrypt).
The fix looks like this DCIT/perl-CryptX@d5a49f8 + DCIT/perl-CryptX@0b0d21b
Currently in libtomcrypt we support RC2 key sizes 64-1024bits, in theory RC2 can handle 8-1024bits.",did you test your changes?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,135,2017-02-27T19:12:03Z,2017-02-28T19:17:27Z,2017-02-28T19:21:56Z,MERGED,True,84,19,6,https://github.com/sjaeckel,RC2 does not support 40bit encryption,6,[],https://github.com/libtom/libtomcrypt/pull/135,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/135#issuecomment-282819859,"Originally reported here: DCIT/perl-CryptX#25 by @nlitsme (a user of my perl binding to libtomcrypt).
The fix looks like this DCIT/perl-CryptX@d5a49f8 + DCIT/perl-CryptX@0b0d21b
Currently in libtomcrypt we support RC2 key sizes 64-1024bits, in theory RC2 can handle 8-1024bits.","Yes (except the crypt.tex)
I have this patch in my perl bindings some time - here is the original report DCIT/perl-CryptX#25 with a short discussion",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,135,2017-02-27T19:12:03Z,2017-02-28T19:17:27Z,2017-02-28T19:21:56Z,MERGED,True,84,19,6,https://github.com/sjaeckel,RC2 does not support 40bit encryption,6,[],https://github.com/libtom/libtomcrypt/pull/135,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/135#issuecomment-282825928,"Originally reported here: DCIT/perl-CryptX#25 by @nlitsme (a user of my perl binding to libtomcrypt).
The fix looks like this DCIT/perl-CryptX@d5a49f8 + DCIT/perl-CryptX@0b0d21b
Currently in libtomcrypt we support RC2 key sizes 64-1024bits, in theory RC2 can handle 8-1024bits.","Yes (except the crypt.tex)
I have this patch in my perl bindings some time - here is the original report DCIT/perl-CryptX#25 with a short discussion

Okay, then either I did an error when copying the testvector or I don't know what else is wrong...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,135,2017-02-27T19:12:03Z,2017-02-28T19:17:27Z,2017-02-28T19:21:56Z,MERGED,True,84,19,6,https://github.com/sjaeckel,RC2 does not support 40bit encryption,6,[],https://github.com/libtom/libtomcrypt/pull/135,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/135#issuecomment-282844982,"Originally reported here: DCIT/perl-CryptX#25 by @nlitsme (a user of my perl binding to libtomcrypt).
The fix looks like this DCIT/perl-CryptX@d5a49f8 + DCIT/perl-CryptX@0b0d21b
Currently in libtomcrypt we support RC2 key sizes 64-1024bits, in theory RC2 can handle 8-1024bits.","Unfortunately I can confirm, in fact there are 3 failing test rfc2268 vectors:

Key length (bytes) = 7 / Effective key length (bits) = 64
Key length (bytes) = 16 / Effective key length (bits) = 64
Key length (bytes) = 33 / Effective key length (bits) = 129",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,135,2017-02-27T19:12:03Z,2017-02-28T19:17:27Z,2017-02-28T19:21:56Z,MERGED,True,84,19,6,https://github.com/sjaeckel,RC2 does not support 40bit encryption,6,[],https://github.com/libtom/libtomcrypt/pull/135,https://github.com/coveralls,7,https://github.com/libtom/libtomcrypt/pull/135#issuecomment-282911331,"Originally reported here: DCIT/perl-CryptX#25 by @nlitsme (a user of my perl binding to libtomcrypt).
The fix looks like this DCIT/perl-CryptX@d5a49f8 + DCIT/perl-CryptX@0b0d21b
Currently in libtomcrypt we support RC2 key sizes 64-1024bits, in theory RC2 can handle 8-1024bits.",Coverage increased (+0.007%) to 87.282% when pulling 60c36b9 on fix/135 into 8141ca6 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,135,2017-02-27T19:12:03Z,2017-02-28T19:17:27Z,2017-02-28T19:21:56Z,MERGED,True,84,19,6,https://github.com/sjaeckel,RC2 does not support 40bit encryption,6,[],https://github.com/libtom/libtomcrypt/pull/135,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/135#issuecomment-283088132,"Originally reported here: DCIT/perl-CryptX#25 by @nlitsme (a user of my perl binding to libtomcrypt).
The fix looks like this DCIT/perl-CryptX@d5a49f8 + DCIT/perl-CryptX@0b0d21b
Currently in libtomcrypt we support RC2 key sizes 64-1024bits, in theory RC2 can handle 8-1024bits.","@sjackel this can be merged, right?",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,135,2017-02-27T19:12:03Z,2017-02-28T19:17:27Z,2017-02-28T19:21:56Z,MERGED,True,84,19,6,https://github.com/sjaeckel,RC2 does not support 40bit encryption,6,[],https://github.com/libtom/libtomcrypt/pull/135,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/135#issuecomment-283136380,"Originally reported here: DCIT/perl-CryptX#25 by @nlitsme (a user of my perl binding to libtomcrypt).
The fix looks like this DCIT/perl-CryptX@d5a49f8 + DCIT/perl-CryptX@0b0d21b
Currently in libtomcrypt we support RC2 key sizes 64-1024bits, in theory RC2 can handle 8-1024bits.",@sjaeckel One more tiny change 05f85c3 (added to develop) - is it correct?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,149,2017-02-28T00:34:03Z,2017-02-28T19:30:16Z,2017-06-27T12:21:14Z,MERGED,True,1,0,1,https://github.com/sjaeckel,Add clang to the travis build matrix,1,[],https://github.com/libtom/libtomcrypt/pull/149,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/149,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,149,2017-02-28T00:34:03Z,2017-02-28T19:30:16Z,2017-06-27T12:21:14Z,MERGED,True,1,0,1,https://github.com/sjaeckel,Add clang to the travis build matrix,1,[],https://github.com/libtom/libtomcrypt/pull/149,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/149#issuecomment-282916687,,Coverage remained the same at 87.275% when pulling 3f39b2a on feature/travis_clang into 8141ca6 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,150,2017-02-28T10:32:40Z,2017-02-28T10:38:33Z,2017-06-27T12:21:14Z,MERGED,True,15,11,7,https://github.com/karel-m,"conversion related troubles (int, size_t, ptrdiff_t ..)",1,[],https://github.com/libtom/libtomcrypt/pull/150,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/150,"The warnings fixed by this PR:
src\hashes\helper\hash_filehandle.c(53) : warning C4267: 'function' : conversion from 'size_t' to 'unsigned long', possible loss of data
src\mac\f9\f9_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\omac\omac_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\pmac\pmac_file.c(60) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\xcbc\xcbc_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\misc\base64\base64_encode.c(78) : warning C4244: '=' : conversion from '__int64' to 'unsigned long', possible loss of data
src\pk\asn1\der\set\der_encode_setof.c(143) : warning C4244: '=' : conversion from 'ptrdiff_t' to 'unsigned long', possible loss of data","The warnings fixed by this PR:
src\hashes\helper\hash_filehandle.c(53) : warning C4267: 'function' : conversion from 'size_t' to 'unsigned long', possible loss of data
src\mac\f9\f9_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\omac\omac_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\pmac\pmac_file.c(60) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\xcbc\xcbc_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\misc\base64\base64_encode.c(78) : warning C4244: '=' : conversion from '__int64' to 'unsigned long', possible loss of data
src\pk\asn1\der\set\der_encode_setof.c(143) : warning C4244: '=' : conversion from 'ptrdiff_t' to 'unsigned long', possible loss of data",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,150,2017-02-28T10:32:40Z,2017-02-28T10:38:33Z,2017-06-27T12:21:14Z,MERGED,True,15,11,7,https://github.com/karel-m,"conversion related troubles (int, size_t, ptrdiff_t ..)",1,[],https://github.com/libtom/libtomcrypt/pull/150,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/150#issuecomment-283005285,"The warnings fixed by this PR:
src\hashes\helper\hash_filehandle.c(53) : warning C4267: 'function' : conversion from 'size_t' to 'unsigned long', possible loss of data
src\mac\f9\f9_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\omac\omac_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\pmac\pmac_file.c(60) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\xcbc\xcbc_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\misc\base64\base64_encode.c(78) : warning C4244: '=' : conversion from '__int64' to 'unsigned long', possible loss of data
src\pk\asn1\der\set\der_encode_setof.c(143) : warning C4244: '=' : conversion from 'ptrdiff_t' to 'unsigned long', possible loss of data",you can at least wait until the first build is successfully finished before merging and closing 😆,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,150,2017-02-28T10:32:40Z,2017-02-28T10:38:33Z,2017-06-27T12:21:14Z,MERGED,True,15,11,7,https://github.com/karel-m,"conversion related troubles (int, size_t, ptrdiff_t ..)",1,[],https://github.com/libtom/libtomcrypt/pull/150,https://github.com/coveralls,3,https://github.com/libtom/libtomcrypt/pull/150#issuecomment-283007409,"The warnings fixed by this PR:
src\hashes\helper\hash_filehandle.c(53) : warning C4267: 'function' : conversion from 'size_t' to 'unsigned long', possible loss of data
src\mac\f9\f9_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\omac\omac_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\pmac\pmac_file.c(60) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\xcbc\xcbc_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\misc\base64\base64_encode.c(78) : warning C4244: '=' : conversion from '__int64' to 'unsigned long', possible loss of data
src\pk\asn1\der\set\der_encode_setof.c(143) : warning C4244: '=' : conversion from 'ptrdiff_t' to 'unsigned long', possible loss of data",Coverage increased (+0.03%) to 87.307% when pulling 88412a9 on pr/conversion-related-troubles into 8141ca6 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,150,2017-02-28T10:32:40Z,2017-02-28T10:38:33Z,2017-06-27T12:21:14Z,MERGED,True,15,11,7,https://github.com/karel-m,"conversion related troubles (int, size_t, ptrdiff_t ..)",1,[],https://github.com/libtom/libtomcrypt/pull/150,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/150#issuecomment-283007634,"The warnings fixed by this PR:
src\hashes\helper\hash_filehandle.c(53) : warning C4267: 'function' : conversion from 'size_t' to 'unsigned long', possible loss of data
src\mac\f9\f9_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\omac\omac_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\pmac\pmac_file.c(60) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\xcbc\xcbc_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\misc\base64\base64_encode.c(78) : warning C4244: '=' : conversion from '__int64' to 'unsigned long', possible loss of data
src\pk\asn1\der\set\der_encode_setof.c(143) : warning C4244: '=' : conversion from 'ptrdiff_t' to 'unsigned long', possible loss of data","On my god, now I see it.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,150,2017-02-28T10:32:40Z,2017-02-28T10:38:33Z,2017-06-27T12:21:14Z,MERGED,True,15,11,7,https://github.com/karel-m,"conversion related troubles (int, size_t, ptrdiff_t ..)",1,[],https://github.com/libtom/libtomcrypt/pull/150,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/150#issuecomment-283008000,"The warnings fixed by this PR:
src\hashes\helper\hash_filehandle.c(53) : warning C4267: 'function' : conversion from 'size_t' to 'unsigned long', possible loss of data
src\mac\f9\f9_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\omac\omac_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\pmac\pmac_file.c(60) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\xcbc\xcbc_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\misc\base64\base64_encode.c(78) : warning C4244: '=' : conversion from '__int64' to 'unsigned long', possible loss of data
src\pk\asn1\der\set\der_encode_setof.c(143) : warning C4244: '=' : conversion from 'ptrdiff_t' to 'unsigned long', possible loss of data",But failure like this https://travis-ci.org/libtom/libtomcrypt/jobs/206129946 is perhaps not my fault,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,150,2017-02-28T10:32:40Z,2017-02-28T10:38:33Z,2017-06-27T12:21:14Z,MERGED,True,15,11,7,https://github.com/karel-m,"conversion related troubles (int, size_t, ptrdiff_t ..)",1,[],https://github.com/libtom/libtomcrypt/pull/150,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/150#issuecomment-283009300,"The warnings fixed by this PR:
src\hashes\helper\hash_filehandle.c(53) : warning C4267: 'function' : conversion from 'size_t' to 'unsigned long', possible loss of data
src\mac\f9\f9_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\omac\omac_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\pmac\pmac_file.c(60) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\mac\xcbc\xcbc_file.c(59) : warning C4267: '=' : conversion from 'size_t' to 'int', possible loss of data
src\misc\base64\base64_encode.c(78) : warning C4244: '=' : conversion from '__int64' to 'unsigned long', possible loss of data
src\pk\asn1\der\set\der_encode_setof.c(143) : warning C4244: '=' : conversion from 'ptrdiff_t' to 'unsigned long', possible loss of data","But failure like this https://travis-ci.org/libtom/libtomcrypt/jobs/206129946 is perhaps not my fault

sure it isn't, I always restart failed jobs like that manually
[edit] it's possible that it was your ""fault"" as you closed the PR before the job was finished and now the references are gone
but never mind, develop will be built and we'll see if it fails.[/edit]",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,151,2017-02-28T15:14:52Z,2017-02-28T15:41:06Z,2017-06-27T12:21:14Z,MERGED,True,7,3,1,https://github.com/karel-m,move declarations at the block beginning (ANSI C),1,[],https://github.com/libtom/libtomcrypt/pull/151,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/151,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,151,2017-02-28T15:14:52Z,2017-02-28T15:41:06Z,2017-06-27T12:21:14Z,MERGED,True,7,3,1,https://github.com/karel-m,move declarations at the block beginning (ANSI C),1,[],https://github.com/libtom/libtomcrypt/pull/151,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/151#issuecomment-283070720,,Coverage remained the same at 87.307% when pulling efbd73f on pr/adler32-declaration-block-beginning into 6596746 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,152,2017-02-28T15:35:42Z,2017-02-28T19:27:03Z,2017-06-27T12:21:14Z,MERGED,True,25,6,3,https://github.com/karel-m,better handling wchar_t when __WCHAR_MAX__ is 0xFFFF (2 bytes only),1,[],https://github.com/libtom/libtomcrypt/pull/152,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/152,"On platforms with 2byte only wchar_t (0x0000 .. 0xFFFF) the current version emits the following warnings:
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_encode_utf8_string.c -o src/pk/asn1/der/utf8/der_encode_utf8_string.o
src/pk/asn1/der/utf8/der_encode_utf8_string.c:40:31: warning: comparison of constant 131071 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
       if (in[x] < 0 || in[x] > 0x1FFFF) {
                        ~~~~~ ^ ~~~~~~~
1 warning generated.
   * clang src/pk/asn1/der/utf8/der_length_utf8_string.o
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_length_utf8_string.c -o src/pk/asn1/der/utf8/der_length_utf8_string.o
src/pk/asn1/der/utf8/der_length_utf8_string.c:53:30: warning: comparison of constant 1114111 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
      if (in[x] < 0 || in[x] > 0x10FFFF) {
                       ~~~~~ ^ ~~~~~~~~
1 warning generated.

Or with older gcc:
pk/asn1/der/utf8/der_encode_utf8_string.c: In function `der_encode_utf8_string':
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_utf8_charsize':
pk/asn1/der/utf8/der_length_utf8_string.c:30: warning: comparison is always true due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_length_utf8_string':
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type

Please also note that in the original code there was an inconsistency:
if (in[x] < 0 || in[x] > 0x1FFFF)
vs.
if (in[x] < 0 || in[x] > 0x10FFFF)

IMO 0x10FFFF is correct.","On platforms with 2byte only wchar_t (0x0000 .. 0xFFFF) the current version emits the following warnings:
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_encode_utf8_string.c -o src/pk/asn1/der/utf8/der_encode_utf8_string.o
src/pk/asn1/der/utf8/der_encode_utf8_string.c:40:31: warning: comparison of constant 131071 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
       if (in[x] < 0 || in[x] > 0x1FFFF) {
                        ~~~~~ ^ ~~~~~~~
1 warning generated.
   * clang src/pk/asn1/der/utf8/der_length_utf8_string.o
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_length_utf8_string.c -o src/pk/asn1/der/utf8/der_length_utf8_string.o
src/pk/asn1/der/utf8/der_length_utf8_string.c:53:30: warning: comparison of constant 1114111 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
      if (in[x] < 0 || in[x] > 0x10FFFF) {
                       ~~~~~ ^ ~~~~~~~~
1 warning generated.

Or with older gcc:
pk/asn1/der/utf8/der_encode_utf8_string.c: In function `der_encode_utf8_string':
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_utf8_charsize':
pk/asn1/der/utf8/der_length_utf8_string.c:30: warning: comparison is always true due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_length_utf8_string':
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type

Please also note that in the original code there was an inconsistency:
if (in[x] < 0 || in[x] > 0x1FFFF)
vs.
if (in[x] < 0 || in[x] > 0x10FFFF)

IMO 0x10FFFF is correct.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,152,2017-02-28T15:35:42Z,2017-02-28T19:27:03Z,2017-06-27T12:21:14Z,MERGED,True,25,6,3,https://github.com/karel-m,better handling wchar_t when __WCHAR_MAX__ is 0xFFFF (2 bytes only),1,[],https://github.com/libtom/libtomcrypt/pull/152,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/152#issuecomment-283076447,"On platforms with 2byte only wchar_t (0x0000 .. 0xFFFF) the current version emits the following warnings:
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_encode_utf8_string.c -o src/pk/asn1/der/utf8/der_encode_utf8_string.o
src/pk/asn1/der/utf8/der_encode_utf8_string.c:40:31: warning: comparison of constant 131071 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
       if (in[x] < 0 || in[x] > 0x1FFFF) {
                        ~~~~~ ^ ~~~~~~~
1 warning generated.
   * clang src/pk/asn1/der/utf8/der_length_utf8_string.o
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_length_utf8_string.c -o src/pk/asn1/der/utf8/der_length_utf8_string.o
src/pk/asn1/der/utf8/der_length_utf8_string.c:53:30: warning: comparison of constant 1114111 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
      if (in[x] < 0 || in[x] > 0x10FFFF) {
                       ~~~~~ ^ ~~~~~~~~
1 warning generated.

Or with older gcc:
pk/asn1/der/utf8/der_encode_utf8_string.c: In function `der_encode_utf8_string':
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_utf8_charsize':
pk/asn1/der/utf8/der_length_utf8_string.c:30: warning: comparison is always true due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_length_utf8_string':
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type

Please also note that in the original code there was an inconsistency:
if (in[x] < 0 || in[x] > 0x1FFFF)
vs.
if (in[x] < 0 || in[x] > 0x10FFFF)

IMO 0x10FFFF is correct.","IMO 0x10FFFF is correct.

That's true... and it shows how well-tested this part of the code is ;-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,152,2017-02-28T15:35:42Z,2017-02-28T19:27:03Z,2017-06-27T12:21:14Z,MERGED,True,25,6,3,https://github.com/karel-m,better handling wchar_t when __WCHAR_MAX__ is 0xFFFF (2 bytes only),1,[],https://github.com/libtom/libtomcrypt/pull/152,https://github.com/coveralls,3,https://github.com/libtom/libtomcrypt/pull/152#issuecomment-283077196,"On platforms with 2byte only wchar_t (0x0000 .. 0xFFFF) the current version emits the following warnings:
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_encode_utf8_string.c -o src/pk/asn1/der/utf8/der_encode_utf8_string.o
src/pk/asn1/der/utf8/der_encode_utf8_string.c:40:31: warning: comparison of constant 131071 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
       if (in[x] < 0 || in[x] > 0x1FFFF) {
                        ~~~~~ ^ ~~~~~~~
1 warning generated.
   * clang src/pk/asn1/der/utf8/der_length_utf8_string.o
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_length_utf8_string.c -o src/pk/asn1/der/utf8/der_length_utf8_string.o
src/pk/asn1/der/utf8/der_length_utf8_string.c:53:30: warning: comparison of constant 1114111 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
      if (in[x] < 0 || in[x] > 0x10FFFF) {
                       ~~~~~ ^ ~~~~~~~~
1 warning generated.

Or with older gcc:
pk/asn1/der/utf8/der_encode_utf8_string.c: In function `der_encode_utf8_string':
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_utf8_charsize':
pk/asn1/der/utf8/der_length_utf8_string.c:30: warning: comparison is always true due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_length_utf8_string':
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type

Please also note that in the original code there was an inconsistency:
if (in[x] < 0 || in[x] > 0x1FFFF)
vs.
if (in[x] < 0 || in[x] > 0x10FFFF)

IMO 0x10FFFF is correct.",Coverage increased (+0.002%) to 87.309% when pulling 3e90f07 on pr/wchar-troubles-max-FFFF into 6596746 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,152,2017-02-28T15:35:42Z,2017-02-28T19:27:03Z,2017-06-27T12:21:14Z,MERGED,True,25,6,3,https://github.com/karel-m,better handling wchar_t when __WCHAR_MAX__ is 0xFFFF (2 bytes only),1,[],https://github.com/libtom/libtomcrypt/pull/152,https://github.com/coveralls,4,https://github.com/libtom/libtomcrypt/pull/152#issuecomment-283086537,"On platforms with 2byte only wchar_t (0x0000 .. 0xFFFF) the current version emits the following warnings:
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_encode_utf8_string.c -o src/pk/asn1/der/utf8/der_encode_utf8_string.o
src/pk/asn1/der/utf8/der_encode_utf8_string.c:40:31: warning: comparison of constant 131071 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
       if (in[x] < 0 || in[x] > 0x1FFFF) {
                        ~~~~~ ^ ~~~~~~~
1 warning generated.
   * clang src/pk/asn1/der/utf8/der_length_utf8_string.o
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_length_utf8_string.c -o src/pk/asn1/der/utf8/der_length_utf8_string.o
src/pk/asn1/der/utf8/der_length_utf8_string.c:53:30: warning: comparison of constant 1114111 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
      if (in[x] < 0 || in[x] > 0x10FFFF) {
                       ~~~~~ ^ ~~~~~~~~
1 warning generated.

Or with older gcc:
pk/asn1/der/utf8/der_encode_utf8_string.c: In function `der_encode_utf8_string':
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_utf8_charsize':
pk/asn1/der/utf8/der_length_utf8_string.c:30: warning: comparison is always true due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_length_utf8_string':
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type

Please also note that in the original code there was an inconsistency:
if (in[x] < 0 || in[x] > 0x1FFFF)
vs.
if (in[x] < 0 || in[x] > 0x10FFFF)

IMO 0x10FFFF is correct.",Coverage increased (+0.002%) to 87.309% when pulling cf48a56 on pr/wchar-troubles-max-FFFF into b44aa8f on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,152,2017-02-28T15:35:42Z,2017-02-28T19:27:03Z,2017-06-27T12:21:14Z,MERGED,True,25,6,3,https://github.com/karel-m,better handling wchar_t when __WCHAR_MAX__ is 0xFFFF (2 bytes only),1,[],https://github.com/libtom/libtomcrypt/pull/152,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/152#issuecomment-283146823,"On platforms with 2byte only wchar_t (0x0000 .. 0xFFFF) the current version emits the following warnings:
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_encode_utf8_string.c -o src/pk/asn1/der/utf8/der_encode_utf8_string.o
src/pk/asn1/der/utf8/der_encode_utf8_string.c:40:31: warning: comparison of constant 131071 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
       if (in[x] < 0 || in[x] > 0x1FFFF) {
                        ~~~~~ ^ ~~~~~~~
1 warning generated.
   * clang src/pk/asn1/der/utf8/der_length_utf8_string.o
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_length_utf8_string.c -o src/pk/asn1/der/utf8/der_length_utf8_string.o
src/pk/asn1/der/utf8/der_length_utf8_string.c:53:30: warning: comparison of constant 1114111 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
      if (in[x] < 0 || in[x] > 0x10FFFF) {
                       ~~~~~ ^ ~~~~~~~~
1 warning generated.

Or with older gcc:
pk/asn1/der/utf8/der_encode_utf8_string.c: In function `der_encode_utf8_string':
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_utf8_charsize':
pk/asn1/der/utf8/der_length_utf8_string.c:30: warning: comparison is always true due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_length_utf8_string':
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type

Please also note that in the original code there was an inconsistency:
if (in[x] < 0 || in[x] > 0x1FFFF)
vs.
if (in[x] < 0 || in[x] > 0x10FFFF)

IMO 0x10FFFF is correct.",would you mind waiting if the build succeeds before merging?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,152,2017-02-28T15:35:42Z,2017-02-28T19:27:03Z,2017-06-27T12:21:14Z,MERGED,True,25,6,3,https://github.com/karel-m,better handling wchar_t when __WCHAR_MAX__ is 0xFFFF (2 bytes only),1,[],https://github.com/libtom/libtomcrypt/pull/152,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/152#issuecomment-283147274,"On platforms with 2byte only wchar_t (0x0000 .. 0xFFFF) the current version emits the following warnings:
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_encode_utf8_string.c -o src/pk/asn1/der/utf8/der_encode_utf8_string.o
src/pk/asn1/der/utf8/der_encode_utf8_string.c:40:31: warning: comparison of constant 131071 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
       if (in[x] < 0 || in[x] > 0x1FFFF) {
                        ~~~~~ ^ ~~~~~~~
1 warning generated.
   * clang src/pk/asn1/der/utf8/der_length_utf8_string.o
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_length_utf8_string.c -o src/pk/asn1/der/utf8/der_length_utf8_string.o
src/pk/asn1/der/utf8/der_length_utf8_string.c:53:30: warning: comparison of constant 1114111 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
      if (in[x] < 0 || in[x] > 0x10FFFF) {
                       ~~~~~ ^ ~~~~~~~~
1 warning generated.

Or with older gcc:
pk/asn1/der/utf8/der_encode_utf8_string.c: In function `der_encode_utf8_string':
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_utf8_charsize':
pk/asn1/der/utf8/der_length_utf8_string.c:30: warning: comparison is always true due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_length_utf8_string':
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type

Please also note that in the original code there was an inconsistency:
if (in[x] < 0 || in[x] > 0x1FFFF)
vs.
if (in[x] < 0 || in[x] > 0x10FFFF)

IMO 0x10FFFF is correct.",resp. at least build locally before pushing...,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,152,2017-02-28T15:35:42Z,2017-02-28T19:27:03Z,2017-06-27T12:21:14Z,MERGED,True,25,6,3,https://github.com/karel-m,better handling wchar_t when __WCHAR_MAX__ is 0xFFFF (2 bytes only),1,[],https://github.com/libtom/libtomcrypt/pull/152,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/152#issuecomment-283180044,"On platforms with 2byte only wchar_t (0x0000 .. 0xFFFF) the current version emits the following warnings:
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_encode_utf8_string.c -o src/pk/asn1/der/utf8/der_encode_utf8_string.o
src/pk/asn1/der/utf8/der_encode_utf8_string.c:40:31: warning: comparison of constant 131071 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
       if (in[x] < 0 || in[x] > 0x1FFFF) {
                        ~~~~~ ^ ~~~~~~~
1 warning generated.
   * clang src/pk/asn1/der/utf8/der_length_utf8_string.o
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_length_utf8_string.c -o src/pk/asn1/der/utf8/der_length_utf8_string.o
src/pk/asn1/der/utf8/der_length_utf8_string.c:53:30: warning: comparison of constant 1114111 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
      if (in[x] < 0 || in[x] > 0x10FFFF) {
                       ~~~~~ ^ ~~~~~~~~
1 warning generated.

Or with older gcc:
pk/asn1/der/utf8/der_encode_utf8_string.c: In function `der_encode_utf8_string':
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_utf8_charsize':
pk/asn1/der/utf8/der_length_utf8_string.c:30: warning: comparison is always true due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_length_utf8_string':
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type

Please also note that in the original code there was an inconsistency:
if (in[x] < 0 || in[x] > 0x1FFFF)
vs.
if (in[x] < 0 || in[x] > 0x10FFFF)

IMO 0x10FFFF is correct.",sorry fixed by 50aedb0,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,152,2017-02-28T15:35:42Z,2017-02-28T19:27:03Z,2017-06-27T12:21:14Z,MERGED,True,25,6,3,https://github.com/karel-m,better handling wchar_t when __WCHAR_MAX__ is 0xFFFF (2 bytes only),1,[],https://github.com/libtom/libtomcrypt/pull/152,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/152#issuecomment-283182792,"On platforms with 2byte only wchar_t (0x0000 .. 0xFFFF) the current version emits the following warnings:
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_encode_utf8_string.c -o src/pk/asn1/der/utf8/der_encode_utf8_string.o
src/pk/asn1/der/utf8/der_encode_utf8_string.c:40:31: warning: comparison of constant 131071 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
       if (in[x] < 0 || in[x] > 0x1FFFF) {
                        ~~~~~ ^ ~~~~~~~
1 warning generated.
   * clang src/pk/asn1/der/utf8/der_length_utf8_string.o
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_length_utf8_string.c -o src/pk/asn1/der/utf8/der_length_utf8_string.o
src/pk/asn1/der/utf8/der_length_utf8_string.c:53:30: warning: comparison of constant 1114111 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
      if (in[x] < 0 || in[x] > 0x10FFFF) {
                       ~~~~~ ^ ~~~~~~~~
1 warning generated.

Or with older gcc:
pk/asn1/der/utf8/der_encode_utf8_string.c: In function `der_encode_utf8_string':
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_utf8_charsize':
pk/asn1/der/utf8/der_length_utf8_string.c:30: warning: comparison is always true due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_length_utf8_string':
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type

Please also note that in the original code there was an inconsistency:
if (in[x] < 0 || in[x] > 0x1FFFF)
vs.
if (in[x] < 0 || in[x] > 0x10FFFF)

IMO 0x10FFFF is correct.",I meant acfd16c :-),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,152,2017-02-28T15:35:42Z,2017-02-28T19:27:03Z,2017-06-27T12:21:14Z,MERGED,True,25,6,3,https://github.com/karel-m,better handling wchar_t when __WCHAR_MAX__ is 0xFFFF (2 bytes only),1,[],https://github.com/libtom/libtomcrypt/pull/152,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/152#issuecomment-283183750,"On platforms with 2byte only wchar_t (0x0000 .. 0xFFFF) the current version emits the following warnings:
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_encode_utf8_string.c -o src/pk/asn1/der/utf8/der_encode_utf8_string.o
src/pk/asn1/der/utf8/der_encode_utf8_string.c:40:31: warning: comparison of constant 131071 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
       if (in[x] < 0 || in[x] > 0x1FFFF) {
                        ~~~~~ ^ ~~~~~~~
1 warning generated.
   * clang src/pk/asn1/der/utf8/der_length_utf8_string.o
clang -Wall -Wcast-align -Wextra -DUSE_LTM -DLTM_DESC -I../libtommath -I./testprof/ -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wno-type-limits -O3 -funroll-loops -fomit-frame-pointer -c src/pk/asn1/der/utf8/der_length_utf8_string.c -o src/pk/asn1/der/utf8/der_length_utf8_string.o
src/pk/asn1/der/utf8/der_length_utf8_string.c:53:30: warning: comparison of constant 1114111 with expression of type 'const wchar_t' (aka 'const unsigned short') is always false [-Wtautological-constant-out-of-range-compare]
      if (in[x] < 0 || in[x] > 0x10FFFF) {
                       ~~~~~ ^ ~~~~~~~~
1 warning generated.

Or with older gcc:
pk/asn1/der/utf8/der_encode_utf8_string.c: In function `der_encode_utf8_string':
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_encode_utf8_string.c:40: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_utf8_charsize':
pk/asn1/der/utf8/der_length_utf8_string.c:30: warning: comparison is always true due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c: In function `der_length_utf8_string':
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type
pk/asn1/der/utf8/der_length_utf8_string.c:53: warning: comparison is always false due to limited range of data type

Please also note that in the original code there was an inconsistency:
if (in[x] < 0 || in[x] > 0x1FFFF)
vs.
if (in[x] < 0 || in[x] > 0x10FFFF)

IMO 0x10FFFF is correct.","Well, what to say, shame on me 👎",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,153,2017-02-28T16:38:27Z,2017-02-28T18:53:04Z,2017-06-27T12:21:14Z,MERGED,True,13,9,4,https://github.com/karel-m,part of feature/doc changes from #54,1,[],https://github.com/libtom/libtomcrypt/pull/153,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/153,"extracting changes from #54 (all except readme.md crypt.tex)
already approved but we will see what travis-ci thinks about it","extracting changes from #54 (all except readme.md crypt.tex)
already approved but we will see what travis-ci thinks about it",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,153,2017-02-28T16:38:27Z,2017-02-28T18:53:04Z,2017-06-27T12:21:14Z,MERGED,True,13,9,4,https://github.com/karel-m,part of feature/doc changes from #54,1,[],https://github.com/libtom/libtomcrypt/pull/153,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/153#issuecomment-283099874,"extracting changes from #54 (all except readme.md crypt.tex)
already approved but we will see what travis-ci thinks about it",Coverage remained the same at 87.307% when pulling 6c8d00d on fix/54-part1 into b44aa8f on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,139,2017-02-28T20:26:16Z,2017-03-01T13:58:36Z,2017-10-09T16:16:11Z,MERGED,True,108,22,11,https://github.com/sjaeckel,"rand_prime undefined reference when using  CFLAGS=""-DLTM_DESC -DLTC_EASY",8,[],https://github.com/libtom/libtomcrypt/pull/139,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/139,"linker will yield 'undefined reference' to rand_prime function (math/rand_prime.c) for any ltc function referencing it - when LTC is compiled with CFLAGS=""-DLTM_DESC -DLTC_EASY.
LTC_EASY will define LTC_NO_PRNGS and rand_prime will therefore not be pulled in by cpp.","linker will yield 'undefined reference' to rand_prime function (math/rand_prime.c) for any ltc function referencing it - when LTC is compiled with CFLAGS=""-DLTM_DESC -DLTC_EASY.
LTC_EASY will define LTC_NO_PRNGS and rand_prime will therefore not be pulled in by cpp.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,139,2017-02-28T20:26:16Z,2017-03-01T13:58:36Z,2017-10-09T16:16:11Z,MERGED,True,108,22,11,https://github.com/sjaeckel,"rand_prime undefined reference when using  CFLAGS=""-DLTM_DESC -DLTC_EASY",8,[],https://github.com/libtom/libtomcrypt/pull/139,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/139#issuecomment-283254199,"linker will yield 'undefined reference' to rand_prime function (math/rand_prime.c) for any ltc function referencing it - when LTC is compiled with CFLAGS=""-DLTM_DESC -DLTC_EASY.
LTC_EASY will define LTC_NO_PRNGS and rand_prime will therefore not be pulled in by cpp.",Changes Unknown when pulling 14d6644 on fix/139 into ** on develop**.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,139,2017-02-28T20:26:16Z,2017-03-01T13:58:36Z,2017-10-09T16:16:11Z,MERGED,True,108,22,11,https://github.com/sjaeckel,"rand_prime undefined reference when using  CFLAGS=""-DLTM_DESC -DLTC_EASY",8,[],https://github.com/libtom/libtomcrypt/pull/139,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/139#issuecomment-283309348,"linker will yield 'undefined reference' to rand_prime function (math/rand_prime.c) for any ltc function referencing it - when LTC is compiled with CFLAGS=""-DLTM_DESC -DLTC_EASY.
LTC_EASY will define LTC_NO_PRNGS and rand_prime will therefore not be pulled in by cpp.",rebased on current develop + fix dde11de + pushed (with force),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,139,2017-02-28T20:26:16Z,2017-03-01T13:58:36Z,2017-10-09T16:16:11Z,MERGED,True,108,22,11,https://github.com/sjaeckel,"rand_prime undefined reference when using  CFLAGS=""-DLTM_DESC -DLTC_EASY",8,[],https://github.com/libtom/libtomcrypt/pull/139,https://github.com/coveralls,4,https://github.com/libtom/libtomcrypt/pull/139#issuecomment-283312981,"linker will yield 'undefined reference' to rand_prime function (math/rand_prime.c) for any ltc function referencing it - when LTC is compiled with CFLAGS=""-DLTM_DESC -DLTC_EASY.
LTC_EASY will define LTC_NO_PRNGS and rand_prime will therefore not be pulled in by cpp.",Coverage remained the same at 87.318% when pulling dde11de on fix/139 into 50aedb0 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,139,2017-02-28T20:26:16Z,2017-03-01T13:58:36Z,2017-10-09T16:16:11Z,MERGED,True,108,22,11,https://github.com/sjaeckel,"rand_prime undefined reference when using  CFLAGS=""-DLTM_DESC -DLTC_EASY",8,[],https://github.com/libtom/libtomcrypt/pull/139,https://github.com/coveralls,5,https://github.com/libtom/libtomcrypt/pull/139#issuecomment-283322338,"linker will yield 'undefined reference' to rand_prime function (math/rand_prime.c) for any ltc function referencing it - when LTC is compiled with CFLAGS=""-DLTM_DESC -DLTC_EASY.
LTC_EASY will define LTC_NO_PRNGS and rand_prime will therefore not be pulled in by cpp.",Coverage remained the same at 87.318% when pulling 856be9c on fix/139 into 50aedb0 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,139,2017-02-28T20:26:16Z,2017-03-01T13:58:36Z,2017-10-09T16:16:11Z,MERGED,True,108,22,11,https://github.com/sjaeckel,"rand_prime undefined reference when using  CFLAGS=""-DLTM_DESC -DLTC_EASY",8,[],https://github.com/libtom/libtomcrypt/pull/139,https://github.com/coveralls,6,https://github.com/libtom/libtomcrypt/pull/139#issuecomment-283335569,"linker will yield 'undefined reference' to rand_prime function (math/rand_prime.c) for any ltc function referencing it - when LTC is compiled with CFLAGS=""-DLTM_DESC -DLTC_EASY.
LTC_EASY will define LTC_NO_PRNGS and rand_prime will therefore not be pulled in by cpp.",Coverage remained the same at 87.318% when pulling 4f12053 on fix/139 into 50aedb0 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,155,2017-02-28T23:01:14Z,2017-03-01T14:04:15Z,2017-06-27T12:21:14Z,MERGED,True,144,43,17,https://github.com/karel-m,CRC32 move declarations at the block beginning (ANSI C),11,[],https://github.com/libtom/libtomcrypt/pull/155,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/155,Apart from moving declaration also one extra test added if (size > 4) size = 4;,Apart from moving declaration also one extra test added if (size > 4) size = 4;,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,155,2017-02-28T23:01:14Z,2017-03-01T14:04:15Z,2017-06-27T12:21:14Z,MERGED,True,144,43,17,https://github.com/karel-m,CRC32 move declarations at the block beginning (ANSI C),11,[],https://github.com/libtom/libtomcrypt/pull/155,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/155#issuecomment-283291265,Apart from moving declaration also one extra test added if (size > 4) size = 4;,Changes Unknown when pulling 421c497 on pr/crc32-declaration-block-beginning into ** on develop**.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,156,2017-03-01T14:07:57Z,2017-03-09T19:10:51Z,2017-10-09T16:16:11Z,MERGED,True,53,20,2,https://github.com/sjaeckel,Improve tests,2,[],https://github.com/libtom/libtomcrypt/pull/156,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/156,"If someone has some other suggestions to improve the tests, feel free to request them in this PR","If someone has some other suggestions to improve the tests, feel free to request them in this PR",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,156,2017-03-01T14:07:57Z,2017-03-09T19:10:51Z,2017-10-09T16:16:11Z,MERGED,True,53,20,2,https://github.com/sjaeckel,Improve tests,2,[],https://github.com/libtom/libtomcrypt/pull/156,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/156#issuecomment-283374771,"If someone has some other suggestions to improve the tests, feel free to request them in this PR",Coverage remained the same at 87.319% when pulling c2938a9 on improve/tests into d4cc790 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,156,2017-03-01T14:07:57Z,2017-03-09T19:10:51Z,2017-10-09T16:16:11Z,MERGED,True,53,20,2,https://github.com/sjaeckel,Improve tests,2,[],https://github.com/libtom/libtomcrypt/pull/156,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/156#issuecomment-283742266,"If someone has some other suggestions to improve the tests, feel free to request them in this PR",do you plan more commits or can we merge these two?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,156,2017-03-01T14:07:57Z,2017-03-09T19:10:51Z,2017-10-09T16:16:11Z,MERGED,True,53,20,2,https://github.com/sjaeckel,Improve tests,2,[],https://github.com/libtom/libtomcrypt/pull/156,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/156#issuecomment-285341186,"If someone has some other suggestions to improve the tests, feel free to request them in this PR",fine to rebase&merge,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/157,as requested in #79,as requested in #79,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/157#issuecomment-283742510,as requested in #79,Indentation is not 3-spaces,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/157#issuecomment-283934601,as requested in #79,from me this PR is ready for review / merge,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/157#issuecomment-286470601,as requested in #79,"Maybe:
- int rsa_import_pkcs8(unsigned char *in, unsigned long inlen, rsa_key *key);
+ int rsa_import_pkcs8(unsigned char *in, unsigned long inlen, unsigned char *passwd, unsigned long passwdlen, rsa_key *key);

Although the current implementation does not support encrypted (password protected) pkcs8 keys, it might be a good idea to support the password in the function call.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/coveralls,5,https://github.com/libtom/libtomcrypt/pull/157#issuecomment-290570807,as requested in #79,Coverage increased (+0.02%) to 87.579% when pulling fda8421 on feature/rsa_import_pkcs8 into 7701992 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/157#issuecomment-291270616,as requested in #79,"- int rsa_import_pkcs8(unsigned char *in, unsigned long inlen, rsa_key *key);
+ int rsa_import_pkcs8(unsigned char *in, unsigned long inlen, unsigned char *passwd, unsigned long passwdlen, rsa_key *key);


Sounds like a good idea! I don't know the details about the passwords that can be used, but if it can also be a binary stream I'd prefer to use ..., const void* passwd, unsigned long passwdlen, .... In case that it's limited to a ""string"" I'd prefer ..., const char* passwd, rsa_key* ....",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/157#issuecomment-291276379,as requested in #79,passwords are not limited to strings,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/coveralls,8,https://github.com/libtom/libtomcrypt/pull/157#issuecomment-291420476,as requested in #79,Coverage increased (+0.02%) to 87.821% when pulling 09efc63 on feature/rsa_import_pkcs8 into fbe7d22 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/157#issuecomment-304935671,as requested in #79,We can merge this one (as soon as it built) in my opinion and open a new issue for encrypted pkcs#8 files,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/157#issuecomment-304980055,as requested in #79,"I would also merge this one but there are 2 things to mention if anybody will hack on this in the future:
1/ This implementation does not support password protected keys (yes, we know it).
2/ The implementation more or less follows https://tools.ietf.org/html/rfc5208; however, it was obsoleted by https://tools.ietf.org/html/rfc5958 Which basically means that there can exist some correct/valid pkcs#8 formatted keys that my implementation cannot load - see pkcs8 related troubles in DCIT/perl-CryptX#28
I was thinking about replacing the current implementation with our ASN.1 flexi parser.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/157#issuecomment-307184503,as requested in #79,@sjaeckel could you please merge this one?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/157#issuecomment-307234152,as requested in #79,"@karel-m I added another commit, can you please review?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,157,2017-03-01T21:10:29Z,2017-06-09T09:38:36Z,2017-10-09T16:16:39Z,MERGED,True,229,20,8,https://github.com/karel-m,RSA import pkcs8,4,['feature'],https://github.com/libtom/libtomcrypt/pull/157,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/157#issuecomment-307237027,as requested in #79,Your last commit is correct,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/158,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-283587703,,Seems to be working - https://travis-ci.org/libtom/libtomcrypt/jobs/206910033,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/coveralls,3,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-283591435,,Changes Unknown when pulling 3124def on pr/check-makefiles into ** on develop**.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/coveralls,4,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-283599835,,Changes Unknown when pulling fe3e90c on pr/check-makefiles into ** on develop**.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-283702428,,"srsly, the new sorting sorts alphabetically in a different order than the previous sorting?

yes, because now we rely on perl's built-in sort (which should work more or less the same on all platforms), the old version was based on sort command which depends on locale you have set in your shell",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/coveralls,6,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-283710041,,Changes Unknown when pulling 84af9ec on pr/check-makefiles into ** on develop**.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-283741205,,is updated version fine for merge?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-284252509,,now completely new approach,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/coveralls,9,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-284256943,,Coverage remained the same at 87.319% when pulling bd59dec on pr/check-makefiles into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/coveralls,10,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-284520965,,Coverage remained the same at 87.319% when pulling 335db5a on pr/check-makefiles into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/coveralls,11,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-284834717,,Coverage remained the same at 87.319% when pulling 7046af1 on pr/check-makefiles into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/coveralls,12,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-284895357,,Coverage remained the same at 87.319% when pulling 6d7ffd3 on pr/check-makefiles into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/coveralls,13,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-284901769,,Coverage remained the same at 87.319% when pulling a7e8d73 on pr/check-makefiles into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/sjaeckel,14,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-285384778,,"regarding 7046af1: I think we should provide aes_enc for compatibility reasons, or not?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/karel-m,15,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-285400359,,"regarding 7046af1: I think we should provide aes_enc for compatibility reasons, or not?

As for MS Windows builds via *.vcproj I vote leaving out aes_enc.
And generally I would prefer not using the hack we currently use for building aes.o + aes_enc.o from a single aes.c. IMO having a separate aes_enc.c + a handy set of includes+ifdefs would be much better and will make maintenance easier. But it is perhaps worth a separate ticket.
Do you (or any other reader of this ticket) have any idea what was the motivation for aes_anc and why only AES and not generally other ciphers as well?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,158,2017-03-02T08:07:10Z,2017-03-09T19:29:28Z,2017-06-27T12:21:14Z,MERGED,True,1123,11651,15,https://github.com/karel-m,check makefiles (check_source.sh),8,[],https://github.com/libtom/libtomcrypt/pull/158,https://github.com/karel-m,16,https://github.com/libtom/libtomcrypt/pull/158#issuecomment-285452755,,I have returned the aes_enc hack to helper.pl - 6f9e427 (it is commented out so that it can be easily put back if needed),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,159,2017-03-02T10:28:13Z,2017-03-02T18:45:14Z,2017-10-09T16:16:11Z,MERGED,True,8,2,1,https://github.com/sjaeckel,travis - we need the latest libtommath,3,[],https://github.com/libtom/libtomcrypt/pull/159,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/159,"I was trying to rebase my branch with ECC enhancements (which more or less went fine).
The troubles appear with Travis-CI https://travis-ci.org/libtom/libtomcrypt/jobs/206820906
All travis builds fail as my ECC enhancements require mp_sqrtmod_prime introduced in libtommath v1.0.","I was trying to rebase my branch with ECC enhancements (which more or less went fine).
The troubles appear with Travis-CI https://travis-ci.org/libtom/libtomcrypt/jobs/206820906
All travis builds fail as my ECC enhancements require mp_sqrtmod_prime introduced in libtommath v1.0.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,159,2017-03-02T10:28:13Z,2017-03-02T18:45:14Z,2017-10-09T16:16:11Z,MERGED,True,8,2,1,https://github.com/sjaeckel,travis - we need the latest libtommath,3,[],https://github.com/libtom/libtomcrypt/pull/159,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/159#issuecomment-283623288,"I was trying to rebase my branch with ECC enhancements (which more or less went fine).
The troubles appear with Travis-CI https://travis-ci.org/libtom/libtomcrypt/jobs/206820906
All travis builds fail as my ECC enhancements require mp_sqrtmod_prime introduced in libtommath v1.0.","uhm

ar: creating libtomcrypt.a
/usr/bin/ld: BFD (GNU Binutils for Ubuntu) 2.22 internal error, aborting at ../../bfd/reloc.c line 443 in bfd_get_reloc_size
/usr/bin/ld: Please report this bug.

@dod38fr is there anything special with the libtommath1_1.0-4_amd64.deb that I have to take care of?
[edit] I applied the lmgtfy scheme which apparently solved the problem! sorry for the noise [/edit]",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,159,2017-03-02T10:28:13Z,2017-03-02T18:45:14Z,2017-10-09T16:16:11Z,MERGED,True,8,2,1,https://github.com/sjaeckel,travis - we need the latest libtommath,3,[],https://github.com/libtom/libtomcrypt/pull/159,https://github.com/coveralls,3,https://github.com/libtom/libtomcrypt/pull/159#issuecomment-283633254,"I was trying to rebase my branch with ECC enhancements (which more or less went fine).
The troubles appear with Travis-CI https://travis-ci.org/libtom/libtomcrypt/jobs/206820906
All travis builds fail as my ECC enhancements require mp_sqrtmod_prime introduced in libtommath v1.0.",Changes Unknown when pulling 2277b42 on fix/159 into ** on develop**.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,159,2017-03-02T10:28:13Z,2017-03-02T18:45:14Z,2017-10-09T16:16:11Z,MERGED,True,8,2,1,https://github.com/sjaeckel,travis - we need the latest libtommath,3,[],https://github.com/libtom/libtomcrypt/pull/159,https://github.com/dod38fr,4,https://github.com/libtom/libtomcrypt/pull/159#issuecomment-283671233,"I was trying to rebase my branch with ECC enhancements (which more or less went fine).
The troubles appear with Travis-CI https://travis-ci.org/libtom/libtomcrypt/jobs/206820906
All travis builds fail as my ECC enhancements require mp_sqrtmod_prime introduced in libtommath v1.0.","no problem with the noise ;-)
All the best",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,159,2017-03-02T10:28:13Z,2017-03-02T18:45:14Z,2017-10-09T16:16:11Z,MERGED,True,8,2,1,https://github.com/sjaeckel,travis - we need the latest libtommath,3,[],https://github.com/libtom/libtomcrypt/pull/159,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/159#issuecomment-283740948,"I was trying to rebase my branch with ECC enhancements (which more or less went fine).
The troubles appear with Travis-CI https://travis-ci.org/libtom/libtomcrypt/jobs/206820906
All travis builds fail as my ECC enhancements require mp_sqrtmod_prime introduced in libtommath v1.0.","Thanks, it works!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,159,2017-03-02T10:28:13Z,2017-03-02T18:45:14Z,2017-10-09T16:16:11Z,MERGED,True,8,2,1,https://github.com/sjaeckel,travis - we need the latest libtommath,3,[],https://github.com/libtom/libtomcrypt/pull/159,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/159#issuecomment-283741286,"I was trying to rebase my branch with ECC enhancements (which more or less went fine).
The troubles appear with Travis-CI https://travis-ci.org/libtom/libtomcrypt/jobs/206820906
All travis builds fail as my ECC enhancements require mp_sqrtmod_prime introduced in libtommath v1.0.",Then merge,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,161,2017-03-03T22:00:55Z,2017-03-15T08:05:59Z,2017-06-27T12:21:15Z,MERGED,True,629,60,5,https://github.com/karel-m,Just polished #83 (Add OpenSSL-Compatible PKCSv5#1),4,[],https://github.com/libtom/libtomcrypt/pull/161,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/161,#83 + static fix + tabs converted to spaces,#83 + static fix + tabs converted to spaces,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,161,2017-03-03T22:00:55Z,2017-03-15T08:05:59Z,2017-06-27T12:21:15Z,MERGED,True,629,60,5,https://github.com/karel-m,Just polished #83 (Add OpenSSL-Compatible PKCSv5#1),4,[],https://github.com/libtom/libtomcrypt/pull/161,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/161#issuecomment-285331152,#83 + static fix + tabs converted to spaces,There are still tests missing,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,161,2017-03-03T22:00:55Z,2017-03-15T08:05:59Z,2017-06-27T12:21:15Z,MERGED,True,629,60,5,https://github.com/karel-m,Just polished #83 (Add OpenSSL-Compatible PKCSv5#1),4,[],https://github.com/libtom/libtomcrypt/pull/161,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/161#issuecomment-285447146,#83 + static fix + tabs converted to spaces,"I have added some alg1 + alg1_openssl tests to pkcs_5_test.c. However those are not official test vectors, just the values that it gave me on my laptop.
Anyway, tests are there, once anybody have better test vectors they can be easily added.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,161,2017-03-03T22:00:55Z,2017-03-15T08:05:59Z,2017-06-27T12:21:15Z,MERGED,True,629,60,5,https://github.com/karel-m,Just polished #83 (Add OpenSSL-Compatible PKCSv5#1),4,[],https://github.com/libtom/libtomcrypt/pull/161,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/161#issuecomment-285457183,#83 + static fix + tabs converted to spaces,"Hmm, travis:
building...testing...*** stack smashing detected ***: ./test terminated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,161,2017-03-03T22:00:55Z,2017-03-15T08:05:59Z,2017-06-27T12:21:15Z,MERGED,True,629,60,5,https://github.com/karel-m,Just polished #83 (Add OpenSSL-Compatible PKCSv5#1),4,[],https://github.com/libtom/libtomcrypt/pull/161,https://github.com/coveralls,5,https://github.com/libtom/libtomcrypt/pull/161#issuecomment-286513842,#83 + static fix + tabs converted to spaces,Coverage increased (+0.09%) to 87.41% when pulling 4503868 on pr/83-polished into bbe5405 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,161,2017-03-03T22:00:55Z,2017-03-15T08:05:59Z,2017-06-27T12:21:15Z,MERGED,True,629,60,5,https://github.com/karel-m,Just polished #83 (Add OpenSSL-Compatible PKCSv5#1),4,[],https://github.com/libtom/libtomcrypt/pull/161,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/161#issuecomment-286524313,#83 + static fix + tabs converted to spaces,"@sjaeckel after rebase on the latest develop travis-ci is all green, do you agree with merging this one?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,161,2017-03-03T22:00:55Z,2017-03-15T08:05:59Z,2017-06-27T12:21:15Z,MERGED,True,629,60,5,https://github.com/karel-m,Just polished #83 (Add OpenSSL-Compatible PKCSv5#1),4,[],https://github.com/libtom/libtomcrypt/pull/161,https://github.com/coveralls,7,https://github.com/libtom/libtomcrypt/pull/161#issuecomment-286670203,#83 + static fix + tabs converted to spaces,Coverage increased (+0.09%) to 87.41% when pulling 3396513 on pr/83-polished into bbe5405 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,163,2017-03-06T09:44:31Z,2017-03-09T19:08:46Z,2017-06-27T12:21:15Z,MERGED,True,31,24,5,https://github.com/karel-m,move declaration at block beginning (+msvc 2008 tuning),4,[],https://github.com/libtom/libtomcrypt/pull/163,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/163,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,163,2017-03-06T09:44:31Z,2017-03-09T19:08:46Z,2017-06-27T12:21:15Z,MERGED,True,31,24,5,https://github.com/karel-m,move declaration at block beginning (+msvc 2008 tuning),4,[],https://github.com/libtom/libtomcrypt/pull/163,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/163#issuecomment-284356199,,Coverage remained the same at 87.319% when pulling 081ee45 on pr/xts_test-move-declaration into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,163,2017-03-06T09:44:31Z,2017-03-09T19:08:46Z,2017-06-27T12:21:15Z,MERGED,True,31,24,5,https://github.com/karel-m,move declaration at block beginning (+msvc 2008 tuning),4,[],https://github.com/libtom/libtomcrypt/pull/163,https://github.com/coveralls,3,https://github.com/libtom/libtomcrypt/pull/163#issuecomment-284504253,,Coverage remained the same at 87.319% when pulling d98978d on pr/xts_test-move-declaration into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,163,2017-03-06T09:44:31Z,2017-03-09T19:08:46Z,2017-06-27T12:21:15Z,MERGED,True,31,24,5,https://github.com/karel-m,move declaration at block beginning (+msvc 2008 tuning),4,[],https://github.com/libtom/libtomcrypt/pull/163,https://github.com/coveralls,4,https://github.com/libtom/libtomcrypt/pull/163#issuecomment-284514222,,Coverage remained the same at 87.319% when pulling 119114d on pr/xts_test-move-declaration into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,164,2017-03-06T11:23:43Z,2017-03-09T20:01:27Z,2017-06-27T12:21:15Z,MERGED,True,13,4,3,https://github.com/karel-m,fix wchar_t related warnings on Visual Studio 2008,4,[],https://github.com/libtom/libtomcrypt/pull/164,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/164,Visual Studio 2008 has WCHAR_MAX but not __WCHAR_MAX__,Visual Studio 2008 has WCHAR_MAX but not __WCHAR_MAX__,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,164,2017-03-06T11:23:43Z,2017-03-09T20:01:27Z,2017-06-27T12:21:15Z,MERGED,True,13,4,3,https://github.com/karel-m,fix wchar_t related warnings on Visual Studio 2008,4,[],https://github.com/libtom/libtomcrypt/pull/164,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/164#issuecomment-284376960,Visual Studio 2008 has WCHAR_MAX but not __WCHAR_MAX__,Coverage remained the same at 87.319% when pulling 775c938 on pr/wchar-warnings-visual-studio-2008 into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,164,2017-03-06T11:23:43Z,2017-03-09T20:01:27Z,2017-06-27T12:21:15Z,MERGED,True,13,4,3,https://github.com/karel-m,fix wchar_t related warnings on Visual Studio 2008,4,[],https://github.com/libtom/libtomcrypt/pull/164,https://github.com/coveralls,3,https://github.com/libtom/libtomcrypt/pull/164#issuecomment-285340994,Visual Studio 2008 has WCHAR_MAX but not __WCHAR_MAX__,Coverage remained the same at 87.319% when pulling a51abb1 on pr/wchar-warnings-visual-studio-2008 into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,164,2017-03-06T11:23:43Z,2017-03-09T20:01:27Z,2017-06-27T12:21:15Z,MERGED,True,13,4,3,https://github.com/karel-m,fix wchar_t related warnings on Visual Studio 2008,4,[],https://github.com/libtom/libtomcrypt/pull/164,https://github.com/coveralls,4,https://github.com/libtom/libtomcrypt/pull/164#issuecomment-285421545,Visual Studio 2008 has WCHAR_MAX but not __WCHAR_MAX__,Coverage remained the same at 87.319% when pulling 7673122 on pr/wchar-warnings-visual-studio-2008 into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,164,2017-03-06T11:23:43Z,2017-03-09T20:01:27Z,2017-06-27T12:21:15Z,MERGED,True,13,4,3,https://github.com/karel-m,fix wchar_t related warnings on Visual Studio 2008,4,[],https://github.com/libtom/libtomcrypt/pull/164,https://github.com/coveralls,5,https://github.com/libtom/libtomcrypt/pull/164#issuecomment-285464154,Visual Studio 2008 has WCHAR_MAX but not __WCHAR_MAX__,Coverage remained the same at 87.319% when pulling 11ea850 on pr/wchar-warnings-visual-studio-2008 into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/grimdoomer,1,https://github.com/libtom/libtomcrypt/pull/165,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.","Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-284457415,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.",Coverage remained the same at 87.319% when pulling 46dfb65 on grimdoomer:fix/131 into 456908e on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-284501410,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.","I would prefer not to introduce the new libtomcrypt_VS2015* files.
I believe that libtomcrypt_VS2008.sln can be easily inported & upgraded by VS2015.
We have serious troubles to keep libtomcrypt_VS2008.* working so why to increase maintenance cost even more.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/grimdoomer,4,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-284514231,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.",I removed the VS 2015 project files.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-284521266,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.","I see this (MS Visual C++ 2008):
1>------ Build started: Project: libtomcrypt, Configuration: Debug Win32 ------
1>Performing Custom Build Step
1>cl : Command line warning D9035 : option 'GX' has been deprecated and will be removed in a future release
1>cl : Command line warning D9036 : use 'EHsc' instead of 'GX'
1>cl : Command line warning D9002 : ignoring unknown option '/MLd'
1>cl : Command line warning D9024 : unrecognized source file type '(FullPath)', object file assumed
1>LINK : fatal error LNK1181: cannot open input file '(FullPath).obj'
1>cl : Command line warning D9035 : option 'GX' has been deprecated and will be removed in a future release
1>cl : Command line warning D9036 : use 'EHsc' instead of 'GX'
1>cl : Command line warning D9002 : ignoring unknown option '/MLd'
1>cl : Command line warning D9024 : unrecognized source file type '(FullPath)', object file assumed
1>LINK : fatal error LNK1181: cannot open input file '(FullPath).obj'
1>Project : error PRJ0019: A tool returned an error code from ""Performing Custom Build Step""
1>Build log was saved at ""file://d:\git\libtomcrypt\Debug\BuildLog.htm""
1>libtomcrypt - 3 error(s), 8 warning(s)
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/coveralls,6,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-284530019,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.",Coverage remained the same at 87.319% when pulling 2a5acfa on grimdoomer:fix/131 into 456908e on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/coveralls,7,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-284537566,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.",Coverage remained the same at 87.319% when pulling 2a5acfa on grimdoomer:fix/131 into 456908e on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/grimdoomer,8,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-284537796,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.","I looked deeper into the issue and it seems that VS 2008 does not support expanding %(FullPath) even though it is used as a meta data field in the project files.
I tried surrounding $(InputPath) with quotes to see if that would fix the issue with spaces in the file path but it still does not get expanded correctly and produces the same error.
I removed the custom build step on aes.c and was able to build successfully in VS 2008, so I'm now wondering why the custom build step is needed at all?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-284542274,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.","I removed the custom build step on aes.c and was able to build successfully in VS 2008, so I'm now wondering why the custom build step is needed at all?

AFAIK it is related to aes_enc.o(bj) stuff which we can perhaps ignore in MSVC builds
@sjaeckel ?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/coveralls,10,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-284547926,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.",Coverage remained the same at 87.319% when pulling 2a5acfa on grimdoomer:fix/131 into 456908e on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-284820017,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.","Could you please:
1/ remove custom build steps for aec|aes_enc (I do not think that there will be so high demand for encrypt only aes in Windows land)
2/ add a define _CRT_SECURE_NO_WARNINGS",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-284888920,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.","and
3/ add also a define LTC_NO_TEST",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/sjaeckel,13,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-285343058,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.","Not 100% sure though, but I think that custom build step became unnecessary in #37
right, that custom build step is the equivalent to makefile#L200
sure, you will be able to build, but the encrypt-only object of aes will be missing...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/karel-m,14,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-285468324,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.",@grimdoomer could you please check whether the branch fix/109-alternative-approach fixes your troubles (it contains some changes recently merged to develop + better LTC_FAST handling which should make MSVC build smoother).,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,165,2017-03-06T16:19:18Z,2017-03-15T15:30:44Z,2017-09-14T17:54:23Z,CLOSED,False,4,4,2,https://github.com/grimdoomer,Fix for issue #131 (MS Visual Studio troubles),4,[],https://github.com/libtom/libtomcrypt/pull/165,https://github.com/karel-m,15,https://github.com/libtom/libtomcrypt/pull/165#issuecomment-286779129,"Fixed the custom build step for aes.c to use the %(PreprocessorDefinitions) macro and changed $(InputFile) to ""%(FullPath)"" so that the project can be built from file paths that contain spaces. Added Visual Studio solution file for VS 2015.",closing this one as we have #168 so please move further discussion there,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/122,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.","in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/rofl0r,2,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-230167026,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.",b37376ef vs ef7673b3 is endian swapped,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-281386978,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.","@sjaeckel what do you think about this?
In my perl bindings I have implemented a fix like this: DCIT/perl-CryptX@b8bf151
I can prepare the same fix as a pull request if you agree.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-281467172,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.","... unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 }; is the same as uint32_t crc32 = 0xb37376ef; on a little endian CPU (memory-wise).
c.f. #109 and I'm pretty certain that the original implementation is correct.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-281499757,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.","If the implementation is correct than the interface must be wrong:
void crc32_finish(crc32_state *ctx, void *hash, unsigned long size)
I believed (but now I am in doubts) that void *hash is meant to be a pointer to unsigned char[4] (see crc32_test and unsigned char out[4]).
I do not see any reason for using void * instead I prefer explicitly declare it as unlong32 *hash or unsigned char *hash.
Other thing is that the test case  (crc32_test) should be a proof-of-concept correct implementation (as it was a place where people will look to see how to use/call it).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/rofl0r,6,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-281507341,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.","there's http://reveng.sourceforge.net/crc-catalogue/17plus.htm#crc.cat.crc-32 which lists check=0xcbf43926 as the checksum for the test string 123456789. i suppose that should match. more info here https://www.lammertbies.nl/comm/info/crc-calculation.html
i personally would assume a crc32 function giving me an uint32_t, not an array of 4bytes, however that's not what i see for example here: https://github.com/rofl0r/libulz/blob/master/src/crc32/crc32c.c#L143 . here the output seems to be arranged to produce an endian-independent value, however that is a CRC32-C impl (castagnoli variant).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-281508353,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.","Other thing is consistency between interfaces for crc32 and adler32
Both have pretty similar:
void adler32_finish(adler32_state *ctx, void *hash, unsigned long size)
void crc32_finish(crc32_state *ctx, void *hash, unsigned long size)
but the interpretation of hash output is different
//crc32_test - expected HEX value ""B37376EF""
const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };

//adler32_test - expected HEX value ""1BE804BA""
const unsigned char adler32[] = { 0x1b, 0xe8, 0x04, 0xba };
for test vectors try:

http://www.miniwebtool.com/crc32-checksum-calculator/
http://www.miniwebtool.com/adler32-checksum-calculator/",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-281517756,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.","but the interpretation of hash output is different...

oh yeah, that's pretty bad...
nonetheless I think we should keep the crc implementation and adjust the adler implementation, okay?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-281632535,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.","I am open to both ways (changing crc32 or changing adler 32).

First of all we should define what the output is (ulong32, 4 unsigned chars
in LE order, 4 unsigned chars in BE order etc.) and change ""void *""
accordingly.

BTW what is the crc32/adler32 interface in other libraries?

My patch was based on byte order of commonly used hexadecimal
representation.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-283443073,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.","I will try to reword the problem which should be perhaps named adler32 vs. crc32 inconsistency:
1/ the API
We have:
void adler32_finish(adler32_state *ctx, void *hash, unsigned long size)
void crc32_finish(crc32_state *ctx, void *hash, unsigned long size)

which is not what one can see on other places in libtomcrypt. My proposal:
void adler32_finish(adler32_state *ctx, unsigned char *out, unsigned long *outlen)
void crc32_finish(crc32_state *ctx, unsigned char *out, unsigned long *outlen)

2/ the byte order
Both functions adler32_finish and crc32_finish return 4 bytes (the implementation guarantees the same result on all platforms independant on endianness), however:

adler32_finish returns 4 bytes in big endian order AKA network byte order
crc32_finish returns 4 bytes in little endian order

My proposal: change crc32_finish to return network byte order",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/sjaeckel,11,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-283478119,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.","1/ the API
These API's didn't fit anywhere, that's why I broke with the old concepts. (Yes I know, I could've integrated them in the existing ""hashing framework""... I can't exactly remember why I didn't do that, but I somehow still don't like the idea to have them in there... why didn't I integrate them there again...?)
TBH I don't care if we write the written length back, but we definitely have to stop with that unsigned char* craziness for opaque data at one point. Therefor 👎 for unsigned char* out
...and 👍 for a PR ""change all in- and output data pointers to void*"" (just kiddin'!)
I also thought about something like the following, but apparently that's not an option if you think about integrating other checksum/nc-hashing algorithms with bigger output.
ulong32 X_finish(X_state *ctx);

2/ the byte order
👍",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-283514925,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.","Ad 2/
For ""libtomcrypt"" the correct values are IMO:

crc32: B37376EF
adler32: 1BE804BA

So in our test suit we need:

const unsigned char crc32[] = { 0xb3, 0x73, 0x76, 0xef };
const unsigned char adler32[] = { 0x1b, 0xe8, 0x04, 0xba };

Which can be achieved by  b3109cb (== merging fix/122)
Ad 1/
let's keep the current API",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/coveralls,13,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-285331170,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.",Coverage remained the same at 87.319% when pulling b3109cb on fix/122 into 456908e on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,122,2017-03-09T11:17:38Z,2017-03-09T19:33:13Z,2017-10-09T16:16:39Z,MERGED,True,2,2,1,https://github.com/sjaeckel,adler32 vs. crc32 inconsistency,1,[],https://github.com/libtom/libtomcrypt/pull/122,https://github.com/sjaeckel,14,https://github.com/libtom/libtomcrypt/pull/122#issuecomment-285341953,"in crc32_test we have:
{
   const void* in = ""libtomcrypt"";
   const unsigned char crc32[] = { 0xef, 0x76, 0x73, 0xb3 };
   ....
}
However the correct CRC32 from ""libtomcrypt"" string is IMHO b37376ef not ef7673b3.
By which I mean the actual CRC32 implementation seems to be somehow incorrect not crc32_test.",fine to rebase&merge,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,166,2017-03-15T11:50:28Z,2017-03-15T12:08:22Z,2017-06-27T12:21:15Z,MERGED,True,4,4,1,https://github.com/fperrad,more linting,1,[],https://github.com/libtom/libtomcrypt/pull/166,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/166,fix a recent commit 0e9b3da,fix a recent commit 0e9b3da,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,166,2017-03-15T11:50:28Z,2017-03-15T12:08:22Z,2017-06-27T12:21:15Z,MERGED,True,4,4,1,https://github.com/fperrad,more linting,1,[],https://github.com/libtom/libtomcrypt/pull/166,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/166#issuecomment-286722972,fix a recent commit 0e9b3da,thanks,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,166,2017-03-15T11:50:28Z,2017-03-15T12:08:22Z,2017-06-27T12:21:15Z,MERGED,True,4,4,1,https://github.com/fperrad,more linting,1,[],https://github.com/libtom/libtomcrypt/pull/166,https://github.com/coveralls,3,https://github.com/libtom/libtomcrypt/pull/166#issuecomment-286723791,fix a recent commit 0e9b3da,Coverage remained the same at 87.41% when pulling 937f186 on fperrad:20170315_lint into bda8019 on libtom:develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,167,2017-03-15T12:10:28Z,2017-03-15T14:22:41Z,2017-06-27T12:21:15Z,MERGED,True,27,26,8,https://github.com/karel-m,avoid C++ style comments,1,[],https://github.com/libtom/libtomcrypt/pull/167,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/167,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,167,2017-03-15T12:10:28Z,2017-03-15T14:22:41Z,2017-06-27T12:21:15Z,MERGED,True,27,26,8,https://github.com/karel-m,avoid C++ style comments,1,[],https://github.com/libtom/libtomcrypt/pull/167,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/167#issuecomment-286735214,,Coverage remained the same at 87.41% when pulling 6b82b31 on pr/avoid-cpp-style-comments into db32cc3 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,168,2017-03-15T15:29:28Z,2017-03-29T07:07:59Z,2017-10-09T16:16:39Z,MERGED,True,325,1709,12,https://github.com/karel-m,Improving MS Windows builds (msvc),1,[],https://github.com/libtom/libtomcrypt/pull/168,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/168,"I have cleaned the MSVC builds in this PR.
Important changes:
1/ now we only support visual studio 2008 (and higher)
2/ libtomcrypt_VS2008.vcproj now supports both 32/64 bit build targets
3/ project files for VS2005 and VC6 were deleted (they were not working properly anyway)
4/ I have also slightly polished makefiles used on MS Windows
5/ couple of fixes to silence some MSVC compiler warnings (mostly cosmetics)
@grimdoomer can you please try to load libtomcrypt_VS2008.vcproj from this branch to your visual studio?
This PR supersedes #131 and #165","I have cleaned the MSVC builds in this PR.
Important changes:
1/ now we only support visual studio 2008 (and higher)
2/ libtomcrypt_VS2008.vcproj now supports both 32/64 bit build targets
3/ project files for VS2005 and VC6 were deleted (they were not working properly anyway)
4/ I have also slightly polished makefiles used on MS Windows
5/ couple of fixes to silence some MSVC compiler warnings (mostly cosmetics)
@grimdoomer can you please try to load libtomcrypt_VS2008.vcproj from this branch to your visual studio?
This PR supersedes #131 and #165",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,168,2017-03-15T15:29:28Z,2017-03-29T07:07:59Z,2017-10-09T16:16:39Z,MERGED,True,325,1709,12,https://github.com/karel-m,Improving MS Windows builds (msvc),1,[],https://github.com/libtom/libtomcrypt/pull/168,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/168#issuecomment-286786703,"I have cleaned the MSVC builds in this PR.
Important changes:
1/ now we only support visual studio 2008 (and higher)
2/ libtomcrypt_VS2008.vcproj now supports both 32/64 bit build targets
3/ project files for VS2005 and VC6 were deleted (they were not working properly anyway)
4/ I have also slightly polished makefiles used on MS Windows
5/ couple of fixes to silence some MSVC compiler warnings (mostly cosmetics)
@grimdoomer can you please try to load libtomcrypt_VS2008.vcproj from this branch to your visual studio?
This PR supersedes #131 and #165",Coverage remained the same at 87.41% when pulling 96d8891 on pr/msvc-cleanup into 6df6874 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,168,2017-03-15T15:29:28Z,2017-03-29T07:07:59Z,2017-10-09T16:16:39Z,MERGED,True,325,1709,12,https://github.com/karel-m,Improving MS Windows builds (msvc),1,[],https://github.com/libtom/libtomcrypt/pull/168,https://github.com/grimdoomer,3,https://github.com/libtom/libtomcrypt/pull/168#issuecomment-287265843,"I have cleaned the MSVC builds in this PR.
Important changes:
1/ now we only support visual studio 2008 (and higher)
2/ libtomcrypt_VS2008.vcproj now supports both 32/64 bit build targets
3/ project files for VS2005 and VC6 were deleted (they were not working properly anyway)
4/ I have also slightly polished makefiles used on MS Windows
5/ couple of fixes to silence some MSVC compiler warnings (mostly cosmetics)
@grimdoomer can you please try to load libtomcrypt_VS2008.vcproj from this branch to your visual studio?
This PR supersedes #131 and #165","@karel-m  Sure, on vacation at the moment, give me a few days and I will get back to you.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,168,2017-03-15T15:29:28Z,2017-03-29T07:07:59Z,2017-10-09T16:16:39Z,MERGED,True,325,1709,12,https://github.com/karel-m,Improving MS Windows builds (msvc),1,[],https://github.com/libtom/libtomcrypt/pull/168,https://github.com/grimdoomer,4,https://github.com/libtom/libtomcrypt/pull/168#issuecomment-289983085,"I have cleaned the MSVC builds in this PR.
Important changes:
1/ now we only support visual studio 2008 (and higher)
2/ libtomcrypt_VS2008.vcproj now supports both 32/64 bit build targets
3/ project files for VS2005 and VC6 were deleted (they were not working properly anyway)
4/ I have also slightly polished makefiles used on MS Windows
5/ couple of fixes to silence some MSVC compiler warnings (mostly cosmetics)
@grimdoomer can you please try to load libtomcrypt_VS2008.vcproj from this branch to your visual studio?
This PR supersedes #131 and #165",@karel-m builds successfully on windows from a file path containing spaces.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,168,2017-03-15T15:29:28Z,2017-03-29T07:07:59Z,2017-10-09T16:16:39Z,MERGED,True,325,1709,12,https://github.com/karel-m,Improving MS Windows builds (msvc),1,[],https://github.com/libtom/libtomcrypt/pull/168,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/168#issuecomment-289999629,"I have cleaned the MSVC builds in this PR.
Important changes:
1/ now we only support visual studio 2008 (and higher)
2/ libtomcrypt_VS2008.vcproj now supports both 32/64 bit build targets
3/ project files for VS2005 and VC6 were deleted (they were not working properly anyway)
4/ I have also slightly polished makefiles used on MS Windows
5/ couple of fixes to silence some MSVC compiler warnings (mostly cosmetics)
@grimdoomer can you please try to load libtomcrypt_VS2008.vcproj from this branch to your visual studio?
This PR supersedes #131 and #165","thanks @grimdoomer
Rebased on current develop, I'll wait for travis-ci and merge it.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,168,2017-03-15T15:29:28Z,2017-03-29T07:07:59Z,2017-10-09T16:16:39Z,MERGED,True,325,1709,12,https://github.com/karel-m,Improving MS Windows builds (msvc),1,[],https://github.com/libtom/libtomcrypt/pull/168,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/168#issuecomment-290002576,"I have cleaned the MSVC builds in this PR.
Important changes:
1/ now we only support visual studio 2008 (and higher)
2/ libtomcrypt_VS2008.vcproj now supports both 32/64 bit build targets
3/ project files for VS2005 and VC6 were deleted (they were not working properly anyway)
4/ I have also slightly polished makefiles used on MS Windows
5/ couple of fixes to silence some MSVC compiler warnings (mostly cosmetics)
@grimdoomer can you please try to load libtomcrypt_VS2008.vcproj from this branch to your visual studio?
This PR supersedes #131 and #165","travis-ci ignoring this branch, so simply merging",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,169,2017-03-15T20:31:13Z,2017-03-15T22:14:41Z,2017-10-09T16:16:40Z,MERGED,True,39,17,7,https://github.com/karel-m,Improved source checks,1,[],https://github.com/libtom/libtomcrypt/pull/169,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/169,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,169,2017-03-15T20:31:13Z,2017-03-15T22:14:41Z,2017-10-09T16:16:40Z,MERGED,True,39,17,7,https://github.com/karel-m,Improved source checks,1,[],https://github.com/libtom/libtomcrypt/pull/169,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/169#issuecomment-286886505,,👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,169,2017-03-15T20:31:13Z,2017-03-15T22:14:41Z,2017-10-09T16:16:40Z,MERGED,True,39,17,7,https://github.com/karel-m,Improved source checks,1,[],https://github.com/libtom/libtomcrypt/pull/169,https://github.com/coveralls,3,https://github.com/libtom/libtomcrypt/pull/169#issuecomment-286890499,,Coverage remained the same at 87.41% when pulling 00d9570 on pr/more-src-checks into 6df6874 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/171,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539","Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",True,"{'THUMBS_UP': ['https://github.com/rofl0r', 'https://github.com/sjaeckel']}"
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-288367682,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539","as it's a stream cipher, would it make sense to integrate it in the prng environment as all the other stream ciphers?
or should we think about integrating resp. how to integrate the stream ciphers in the crypt environment?
or should we provide an alternative environment or re-think the entire approach?


what do you think about this?


In my opinion we shouldn't introduce new algorithms with unsigned char* for in- or output data.
diff --git a/src/ciphers/chacha/chacha_crypt.c b/src/ciphers/chacha/chacha_crypt.c
index 1ac3aa7..359e485 100644
--- a/src/ciphers/chacha/chacha_crypt.c
+++ b/src/ciphers/chacha/chacha_crypt.c
@@ -51,10 +51,11 @@ static void _chacha_block(unsigned char *output, const ulong32 *input, int round
    @param out     [out] The ciphertext (or plaintext), length inlen
    @return CRYPT_OK if successful
 */
-int chacha_crypt(chacha_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out)
+int chacha_crypt(chacha_state *st, const void *pin, unsigned long inlen, unsigned char *out)
 {
    unsigned char buf[64];
    unsigned long i, j;
+   const unsigned char *in = pin;
 
    if (inlen == 0) return CRYPT_OK;
    if (st->ksleft > 0) {
diff --git a/src/ciphers/chacha/chacha_test.c b/src/ciphers/chacha/chacha_test.c
index d678e93..7218425 100644
--- a/src/ciphers/chacha/chacha_test.c
+++ b/src/ciphers/chacha/chacha_test.c
@@ -41,16 +41,16 @@ int chacha_test(void)
    /* crypt piece by piece */
    chacha_setup(&st, k, sizeof(k), 20);
    chacha_ivctr32(&st, n, sizeof(n), 1);
-   chacha_crypt(&st, (unsigned char*)pt,      35,       out);
-   chacha_crypt(&st, (unsigned char*)pt + 35, 35,       out + 35);
-   chacha_crypt(&st, (unsigned char*)pt + 70,  5,       out + 70);
-   chacha_crypt(&st, (unsigned char*)pt + 75,  5,       out + 75);
-   chacha_crypt(&st, (unsigned char*)pt + 80, len - 80, out + 80);
+   chacha_crypt(&st, pt,      35,       out);
+   chacha_crypt(&st, pt + 35, 35,       out + 35);
+   chacha_crypt(&st, pt + 70,  5,       out + 70);
+   chacha_crypt(&st, pt + 75,  5,       out + 75);
+   chacha_crypt(&st, pt + 80, len - 80, out + 80);
    if (compare_testvector(out, len, ct, sizeof(ct), ""CHACHA-TV1"", 1) != 0) return CRYPT_FAIL_TESTVECTOR;
    /* crypt in one go */
    chacha_setup(&st, k, sizeof(k), 20);
    chacha_ivctr32(&st, n, sizeof(n), 1);
-   chacha_crypt(&st, (unsigned char*)pt, len, out);
+   chacha_crypt(&st, pt, len, out);
    if (compare_testvector(out, len, ct, sizeof(ct), ""CHACHA-TV2"", 1) != 0) return CRYPT_FAIL_TESTVECTOR;
    /* crypt in one go - using chacha_ivctr64() */
    chacha_setup(&st, k, sizeof(k), 20);
diff --git a/src/headers/tomcrypt_cipher.h b/src/headers/tomcrypt_cipher.h
index f26115d..e38d680 100644
--- a/src/headers/tomcrypt_cipher.h
+++ b/src/headers/tomcrypt_cipher.h
@@ -819,7 +819,7 @@ typedef struct {
 int chacha_setup(chacha_state *st, const unsigned char *key, unsigned long keylen, int rounds);
 int chacha_ivctr32(chacha_state *st, const unsigned char *iv, unsigned long ivlen, ulong32 counter);
 int chacha_ivctr64(chacha_state *st, const unsigned char *iv, unsigned long ivlen, ulong64 counter);
-int chacha_crypt(chacha_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
+int chacha_crypt(chacha_state *st, const void *pin, unsigned long inlen, unsigned char *out);
 int chacha_keystream(chacha_state *st, unsigned char *out, unsigned long *outlen);
 int chacha_test(void);
 #endif /* LTC_CHACHA */",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-288410657,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",Ad unsigned char* vs. void * I am not against that change but I prefer to make a BIG SWITCH and change all such cases in the whole libtomcrypt. Not just in a single function.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-288578673,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539","Ad moving chacha implementation under prng:
It would be probably logical to have all stream cipher in one place, however I am not a fan of the idea of having stream ciphers in prng in general. It is IMO very confusing for newcomers and frankly speaking if you want to use RC4 or SOBER128 for encrypting/decrypting your first impression might be that libtomcrypt is not supporting it (users will be looking for a simple rc4_setup(key) > rc4_crypt(in, out) > rc4_crypt(in, out) > ...  interface which we do not have).
We can create src/stream and I can move src/cipher/chacha/* to src/stream/chacha/*
What I would like more than current state of RC4 + SOBER128

having src/stream/rc4.c and * having src/stream/sober128.c which will provide cipher_setup/cipher_crypt interface
and turning src/prngs/rc4.c and src/prngs/sober128.c into thin wrappers around the functions from previous point",True,{'THUMBS_UP': ['https://github.com/rofl0r']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-288643096,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",Let's move size_t discussion to  #175 and unsigned char* vs. void * to #174 so that they do not block this PR.,True,"{'THUMBS_UP': ['https://github.com/sjaeckel', 'https://github.com/rofl0r']}"
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-288721556,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539","We have the following:
/* by definition of poly1305 maclen is always 16 */
int poly1305_done(poly_state *st, unsigned char *mac, unsigned long *maclen);
int poly1305_memory(const unsigned char *key, unsigned long keylen, const unsigned char *in, unsigned long inlen, unsigned char *mac, unsigned long *maclen);
int poly1305_memory_multi(const unsigned char *key, unsigned long keylen, unsigned char *mac, unsigned long *maclen, const unsigned char *in,  unsigned long inlen, ...);
int poly1305_file(const char *fname, const unsigned char *key, unsigned long keylen, unsigned char *mac, unsigned long *maclen);
What's the best practice in these cases?

int poly1305_done(poly_state *st, unsigned char *mac, unsigned long *maclen) ?
int poly1305_done(poly_state *st, unsigned char *mac, unsigned long maclen) ?
int poly1305_done(poly_state *st, unsigned char *mac) ?
int poly1305_done(poly_state *st, unsigned char mac[16]) ?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-288725209,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539","I'd say 1.
int poly1305_done(poly_state *st, unsigned char *mac, unsigned long *maclen)
also I'd prefer


to use the established error codes CRYPT_INVALID_ARG for invalid buffer sizes like the maclen and CRYPT_INVALID_KEYSIZE in e.g. chacha_setup() et. al.


to be less strict on these buffer sizes


so in poly1305_done() it'd become
if (*maclen < 16) return CRYPT_INVALID_ARG;
...
*maclen = 16;
return...

instead of
if (*maclen != 16) return CRYPT_ERROR;",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-288826393,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",Ad unsigned long outlen vs. unsigned long *outlen there 3 more places I have found where we are not consistent (I'll create a separate issue),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/buggywhip,9,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-288944744,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539","On Mar 22, 2017, at 5:13 PM, karel-m ***@***.***> wrote:
 Ad moving chacha implementation under prng:
 It would be probably logical to have all stream cipher in one place, however I am not a fan of the idea of having stream ciphers in prng in general.

Agreed.  IMO all stream ciphers would be better served under src/stream/, not under prng.

Many algorithms can be used in ways to produce output normally the province of other classes of algorithms, but without a formal ontology, a ""typical""/""traditional"" organization structure is probably best.

And it can get really messy trying to classify authenticated encryption.  ...a unique classification by itself?  ...a mode?  Arrgghh.  :-/",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-289319191,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539","Rebased & squashed into 1 commit, travis-ci all green. I propose merging to develop.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290065813,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",@sjaeckel do you (dis)agree with merging this one?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/coveralls,12,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290180086,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",Coverage decreased (-0.04%) to 87.44% when pulling 6ca293d on pr/chacha20poly1305 into 4bcd484 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290446240,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539","AFAIK the only unusual magic here is in chacha_prng_add_entropy, either initially (before make_ready) and later (kind of rekey operation).
The implementation (namely the rekey operation) is based on chacha-based arc4random implemented in OpenBSD/FreeBSD (I do not have a link handy but you can easily google it).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,14,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290447944,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539","Seeing:
diff --git a/src/ciphers/chacha/chacha_test.c b/src/ciphers/chacha/chacha_test.c

I am in doubts whether you have pulled (you might need pull --force) the latest version as I have moved src/ciphers/chacha to src/stream/chacha.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/sjaeckel,15,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290450260,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539","I am in doubts whether you have pulled (you might need pull --force) the latest version as I have moved src/ciphers/chacha to src/stream/chacha.

simply s/ciphers/stream/g in the diff and applying the patch is successful",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/coveralls,16,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290507082,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",Coverage increased (+0.2%) to 87.666% when pulling e969a10 on pr/chacha20poly1305 into 4bcd484 on develop.,True,{'HOORAY': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/coveralls,17,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290529910,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",Coverage increased (+0.2%) to 87.666% when pulling cd5e4e8 on pr/chacha20poly1305 into 4bcd484 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,18,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290533504,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",BTW do we have a fixed file which I can use as an input in a test for poly1305_file(..)?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/sjaeckel,19,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290534767,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539","BTW do we have a fixed file which I can use as an input in a test for poly1305_file(..)?

we don't have tests for any of the ***_file() API's... we can leave it like that I'd say... or use one of the testvector files?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,20,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290535976,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539","test vector files are sometimes changing (see sha3)
I was thinking about creating let's say testprof/fixed-test-file.txt with 10000 bytes of random text.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,21,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290536773,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",You are perhaps right the *_file functions need a facelift anyway (to use the same read buffer style) which is worth a separate PR where we can add more tests as well.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/coveralls,22,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290544286,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",Coverage increased (+0.2%) to 87.666% when pulling e57ca44 on pr/chacha20poly1305 into 4bcd484 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/coveralls,23,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290561084,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",Coverage increased (+0.2%) to 87.739% when pulling b6648e5 on pr/chacha20poly1305 into 7701992 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/coveralls,24,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290625075,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",Coverage increased (+0.2%) to 87.739% when pulling 5b40b62 on pr/chacha20poly1305 into 7701992 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/karel-m,25,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290997757,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",@sjaeckel can I merge this PR?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/coveralls,26,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-290998045,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",Coverage increased (+0.2%) to 87.799% when pulling 08a028a on pr/chacha20poly1305 into 6844275 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,171,2017-03-21T18:52:00Z,2017-04-03T19:21:21Z,2017-10-09T16:16:40Z,MERGED,True,1933,73,38,https://github.com/karel-m,RFC 7539 - ChaCha20 and Poly1305,18,[],https://github.com/libtom/libtomcrypt/pull/171,https://github.com/coveralls,27,https://github.com/libtom/libtomcrypt/pull/171#issuecomment-291243680,"Basically the reference implementation adopted to our C macros and our calling conventions.
https://tools.ietf.org/html/rfc7539",Coverage increased (+0.2%) to 87.799% when pulling 2520e6c on pr/chacha20poly1305 into 6844275 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,172,2017-03-22T18:02:17Z,2017-06-12T21:08:10Z,2017-10-09T16:16:11Z,MERGED,True,18,9,4,https://github.com/sjaeckel,Run tests for tomsfastmath,5,['enhancement'],https://github.com/libtom/libtomcrypt/pull/172,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/172,"the latest tfm version has fp_rand() available, so we can test this now
as there is currently no static library of tfm it's also nice as this also adds a test of the makefile.shared","the latest tfm version has fp_rand() available, so we can test this now
as there is currently no static library of tfm it's also nice as this also adds a test of the makefile.shared",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,172,2017-03-22T18:02:17Z,2017-06-12T21:08:10Z,2017-10-09T16:16:11Z,MERGED,True,18,9,4,https://github.com/sjaeckel,Run tests for tomsfastmath,5,['enhancement'],https://github.com/libtom/libtomcrypt/pull/172,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/172#issuecomment-301400697,"the latest tfm version has fp_rand() available, so we can test this now
as there is currently no static library of tfm it's also nice as this also adds a test of the makefile.shared",@sjaeckel would this one work after rebasing this PR (I mean with re-worked makefile.shared)?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,172,2017-03-22T18:02:17Z,2017-06-12T21:08:10Z,2017-10-09T16:16:11Z,MERGED,True,18,9,4,https://github.com/sjaeckel,Run tests for tomsfastmath,5,['enhancement'],https://github.com/libtom/libtomcrypt/pull/172,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/172#issuecomment-301417030,"the latest tfm version has fp_rand() available, so we can test this now
as there is currently no static library of tfm it's also nice as this also adds a test of the makefile.shared","Right, I didn't explain yet why this one breaks... libtom/tomsfastmath@fb62c9c fp_rand() wasn't exported in the version of tfm that is currently available in debian testing
So regarding your question: nope it wouldn't, as there's no updated tfm yet as debian is still stuck in code freeze.
But I'm working on a temporary solution...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,172,2017-03-22T18:02:17Z,2017-06-12T21:08:10Z,2017-10-09T16:16:11Z,MERGED,True,18,9,4,https://github.com/sjaeckel,Run tests for tomsfastmath,5,['enhancement'],https://github.com/libtom/libtomcrypt/pull/172,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/172#issuecomment-307918131,"the latest tfm version has fp_rand() available, so we can test this now
as there is currently no static library of tfm it's also nice as this also adds a test of the makefile.shared",👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/173,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF","SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-288580691,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF","I am extremely strongly against creating dependency on stdint.h.
I lost this battle in libtommath and the result is that I have to keep a specially patched tommath.h for my perl bindings which is a pain for me. Frankly we did not gain anything in libtommath by starting using stdint.h.
And please do not give me those stories about how old is C99. It was a week ago when I was trying to improve libtomcrypt's Visual C builds. And guess what, on Visual Studio 2008 Express there is no stdint.h so tommath.h hit me again.
In short: either me or stdint.h 😃",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/rofl0r,3,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-288595539,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF","using size_t does not necessarily mean including stdint.h. since you're a fan of ifdef hacks over configure tests you could hardcode a list of CPP defines which define HAVE_STDINT_H and only use it there, for the other platforms fall back to typedefing it to unsigned long, or unsigned long long on windows64 bit.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-288642826,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF",Let's move size_t discussion to  #175 so that it does not block this PR,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-288882550,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF",Regarding 4abbf45 wouldn't it make sense to have a separate sha3_shake hash descriptor so we can re-use the hash helpers?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-288943318,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF","unfortunately sha3_shake_done does not fit into ltc_hash_descriptor because it is missing the outlen (SHAKE functions are designed in a way that they give the output as long as you ask.
int (*done)(hash_state *hash, unsigned char *out);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-288965371,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF","Kind of outlen inconsistency we have here:
int hash_memory(int hash, const unsigned char *in,  unsigned long inlen, unsigned char *out, unsigned long *outlen);
int sha3_shake_memory(int num, const unsigned char *in, unsigned long inlen, unsigned char *out, unsigned long outlen);
The thing is that hash_memory gives you the output as long as the hashsize is, whereas sha3_shake_memory gives you the output as long as you have requested by outlen param. So these functions are a bit different in their nature, sha3_shake_memory is more like hkdf or prng->read where we use outlen not *outlen.
But providing that we have a separate outlen related issue #176 I propose to discuss/solve it rather there than to block this PR. When we decide to change outlen to *outlen it is trivial to change the implementation.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/coveralls,8,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-289317607,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF",Coverage increased (+0.06%) to 87.475% when pulling 95c94bf on pr/sha3 into 7885c91 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-289318697,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF","Rebased & squashed into 1 commit, travis-ci all green. I propose merging to develop.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-289882055,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF",I'd prefer to have sha3_shake_memory() already with *outlen then it's fine by me to merge,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-290001798,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF","sha3_shake_memory changed
Should I also change int sha3_shake_done(hash_state *md, unsigned char *out, unsigned long outlen) to *outlen? By ""normal"" hashes we have no outlen - like int sha3_done(hash_state *md, unsigned char *hash)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/coveralls,12,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-290006320,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF",Coverage increased (+0.07%) to 87.478% when pulling 9c92c0a on pr/sha3 into 7885c91 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/sjaeckel,13,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-290056490,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF","Should I also change int sha3_shake_done(hash_state *md, unsigned char *out, unsigned long outlen) to *outlen? By ""normal"" hashes we have no outlen - like int sha3_done(hash_state *md, unsigned char *hash)

I also thought about that, but as there's no reference I'd say we keep it like that.
btw. I also had the idea why can't we provide a sha3_shake_set_outlen(hash_state *md, unsigned long outlen), then we could have sha3_shake_done(hash_state *md, unsigned char *hash) :)
but it was just an idea and as there's no way to properly integrate this in the 'hashing framework' I think it doesn't make sense to squeeze the sha3 shake API in there",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,173,2017-03-22T20:27:48Z,2017-03-29T11:46:05Z,2017-10-09T16:16:40Z,MERGED,True,2933,54,19,https://github.com/karel-m,SHA3,1,[],https://github.com/libtom/libtomcrypt/pull/173,https://github.com/coveralls,14,https://github.com/libtom/libtomcrypt/pull/173#issuecomment-290067580,"SHAKE128 and SHAKE256 need to be added - I only do not know yet how to do it (they do not fit well to our hash machinery).
The implementation is based on https://github.com/brainhub/SHA3IUF",Coverage increased (+0.07%) to 87.478% when pulling c6a0362 on pr/sha3 into 1b81848 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,177,2017-03-26T17:31:23Z,2017-03-26T21:47:43Z,2017-06-27T12:21:15Z,MERGED,True,5,5,3,https://github.com/sjaeckel,Add -Wdeclaration-after-statement to travis-ci tests,2,[],https://github.com/libtom/libtomcrypt/pull/177,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/177,"@sjaeckel could you please add -Wdeclaration-after-statement to travis builds/tests?
For me develop seems to be happy with -Wdeclaration-after-statement.","@sjaeckel could you please add -Wdeclaration-after-statement to travis builds/tests?
For me develop seems to be happy with -Wdeclaration-after-statement.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,177,2017-03-26T17:31:23Z,2017-03-26T21:47:43Z,2017-06-27T12:21:15Z,MERGED,True,5,5,3,https://github.com/sjaeckel,Add -Wdeclaration-after-statement to travis-ci tests,2,[],https://github.com/libtom/libtomcrypt/pull/177,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/177#issuecomment-289310752,"@sjaeckel could you please add -Wdeclaration-after-statement to travis builds/tests?
For me develop seems to be happy with -Wdeclaration-after-statement.",Coverage remained the same at 87.41% when pulling 862a027 on pr/177 into 7885c91 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,178,2017-03-26T21:18:43Z,2017-04-21T20:58:01Z,2017-10-09T16:16:40Z,CLOSED,False,24,6,1,https://github.com/karel-m,RC4 PRNG - broken import/export,3,[],https://github.com/libtom/libtomcrypt/pull/178,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/178,"IMO a bug.
I have run into this when thinking about the idea of src/stream/rc4 (mentioned in #171)","IMO a bug.
I have run into this when thinking about the idea of src/stream/rc4 (mentioned in #171)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,178,2017-03-26T21:18:43Z,2017-04-21T20:58:01Z,2017-10-09T16:16:40Z,CLOSED,False,24,6,1,https://github.com/karel-m,RC4 PRNG - broken import/export,3,[],https://github.com/libtom/libtomcrypt/pull/178,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/178#issuecomment-289318803,"IMO a bug.
I have run into this when thinking about the idea of src/stream/rc4 (mentioned in #171)",Just to make it clear - what I have committed is just a failing test not a fix.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,178,2017-03-26T21:18:43Z,2017-04-21T20:58:01Z,2017-10-09T16:16:40Z,CLOSED,False,24,6,1,https://github.com/karel-m,RC4 PRNG - broken import/export,3,[],https://github.com/libtom/libtomcrypt/pull/178,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/178#issuecomment-289415468,"IMO a bug.
I have run into this when thinking about the idea of src/stream/rc4 (mentioned in #171)","as a prng it's still fine ;-)
IIRC that was the point in this import/export functionality
if we make it a stream cipher, there won't be a import/export, right?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,178,2017-03-26T21:18:43Z,2017-04-21T20:58:01Z,2017-10-09T16:16:40Z,CLOSED,False,24,6,1,https://github.com/karel-m,RC4 PRNG - broken import/export,3,[],https://github.com/libtom/libtomcrypt/pull/178,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/178#issuecomment-289417249,"IMO a bug.
I have run into this when thinking about the idea of src/stream/rc4 (mentioned in #171)","Import/export is possible with stream cipher based PRNG, see my recent https://github.com/libtom/libtomcrypt/blob/pr/chacha20poly1305/src/prngs/chacha.c (we have src/stream/chacha.c = stream cipher and src/prngs/chacha.c = chacha based PRNG).
My plan is to update rc4 stuff to the style I have used in chacha implementation (I will commit it to this PR after #171 got it to develop).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,178,2017-03-26T21:18:43Z,2017-04-21T20:58:01Z,2017-10-09T16:16:40Z,CLOSED,False,24,6,1,https://github.com/karel-m,RC4 PRNG - broken import/export,3,[],https://github.com/libtom/libtomcrypt/pull/178,https://github.com/coveralls,5,https://github.com/libtom/libtomcrypt/pull/178#issuecomment-289539943,"IMO a bug.
I have run into this when thinking about the idea of src/stream/rc4 (mentioned in #171)",Coverage increased (+0.07%) to 87.482% when pulling 5d174f8 on pr/rc4-prng into 7885c91 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,178,2017-03-26T21:18:43Z,2017-04-21T20:58:01Z,2017-10-09T16:16:40Z,CLOSED,False,24,6,1,https://github.com/karel-m,RC4 PRNG - broken import/export,3,[],https://github.com/libtom/libtomcrypt/pull/178,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/178#issuecomment-289570740,"IMO a bug.
I have run into this when thinking about the idea of src/stream/rc4 (mentioned in #171)","So it seems that export/import is not working as I would expect by neither PRNG. Maybe I expect too much or I simply missed the idea behind export/import.
Is there anybody among readers of this PR who is using PRNG export/import?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,178,2017-03-26T21:18:43Z,2017-04-21T20:58:01Z,2017-10-09T16:16:40Z,CLOSED,False,24,6,1,https://github.com/karel-m,RC4 PRNG - broken import/export,3,[],https://github.com/libtom/libtomcrypt/pull/178,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/178#issuecomment-289878699,"IMO a bug.
I have run into this when thinking about the idea of src/stream/rc4 (mentioned in #171)","So it seems that export/import is not working as I would expect by neither PRNG. Maybe I expect too much or I simply missed the idea behind export/import.

IIRC I asked tom once about the same thing and he then said that this behavior is by design.
I think as it's a PRNG it doesn't really matter if the import does an exact recovery of the exported state... a.k.a. it is a successful import as long as it returns random data after the import (with a different internal state than no initialization/seeding)... :-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,178,2017-03-26T21:18:43Z,2017-04-21T20:58:01Z,2017-10-09T16:16:40Z,CLOSED,False,24,6,1,https://github.com/karel-m,RC4 PRNG - broken import/export,3,[],https://github.com/libtom/libtomcrypt/pull/178,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/178#issuecomment-289905574,"IMO a bug.
I have run into this when thinking about the idea of src/stream/rc4 (mentioned in #171)","If you put it that way I tend to propose dropping export/import functions from prngs because:

export is the same as read (some amount of random bytes)
import is equivalent to calling add_entropy (the bytes from previous step) + make_ready

IMO export / import should work as ""save current state"" & ""return later exactly to the saved point"" otherwise they do no make much sense (at least to me).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,178,2017-03-26T21:18:43Z,2017-04-21T20:58:01Z,2017-10-09T16:16:40Z,CLOSED,False,24,6,1,https://github.com/karel-m,RC4 PRNG - broken import/export,3,[],https://github.com/libtom/libtomcrypt/pull/178,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/178#issuecomment-296303986,"IMO a bug.
I have run into this when thinking about the idea of src/stream/rc4 (mentioned in #171)","I am withdrawing this PR as according the doc import/export was not meant to be like ""save current state"" & ""return later exactly to the saved point"".
It was probably intended to be similar to e.g. RAND_load_file / RAND_write_file https://wiki.openssl.org/index.php/Manual:RAND_load_file(3)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,179,2017-03-27T17:33:38Z,2017-03-28T20:56:36Z,2017-06-27T12:20:11Z,MERGED,True,419,13,9,https://github.com/karel-m,New rotate_test - fix for #6,4,[],https://github.com/libtom/libtomcrypt/pull/179,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/179,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,179,2017-03-27T17:33:38Z,2017-03-28T20:56:36Z,2017-06-27T12:20:11Z,MERGED,True,419,13,9,https://github.com/karel-m,New rotate_test - fix for #6,4,[],https://github.com/libtom/libtomcrypt/pull/179,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/179#issuecomment-289533060,,Coverage remained the same at 87.41% when pulling e5aa2bd on fix/6 into 7532b89 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,179,2017-03-27T17:33:38Z,2017-03-28T20:56:36Z,2017-06-27T12:20:11Z,MERGED,True,419,13,9,https://github.com/karel-m,New rotate_test - fix for #6,4,[],https://github.com/libtom/libtomcrypt/pull/179,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/179#issuecomment-289565476,,"NO_ASM (-DLTC_NO_ASM -O2, makefile IGNORE_SPEED=1)...
building...build  NO_ASM failed! printing gcc_2.txt now for convenience
ar: creating libtomcrypt.a
rotate_test.c: In function ‘rotate_test’:
rotate_test.c:11:4: warning: left shift count >= width of type [enabled by default]
rotate_test.c:44:4: warning: left shift count >= width of type [enabled by default]
rotate_test.c:142:4: warning: right shift count >= width of type [enabled by default]
rotate_test.c:207:4: warning: left shift count >= width of type [enabled by default]
rotate_test.c:240:4: warning: left shift count >= width of type [enabled by default]
rotate_test.c:338:4: warning: right shift count >= width of type [enabled by default]

All of them are rotate by 0.
One of LTC_NO_ASM macros:
#define RORc(x, y) ( ((((ulong32)(x)&0xFFFFFFFFUL)>>(ulong32)((y)&31)) | \
        ((ulong32)(x)<<(ulong32)(32-((y)&31)))) & 0xFFFFFFFFUL)

Warning is probably caused by (32-((y)&31)) part.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,179,2017-03-27T17:33:38Z,2017-03-28T20:56:36Z,2017-06-27T12:20:11Z,MERGED,True,419,13,9,https://github.com/karel-m,New rotate_test - fix for #6,4,[],https://github.com/libtom/libtomcrypt/pull/179,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/179#issuecomment-289581577,,"So now it compiles without a warning, but rotating by zero fails on LTC_NO_ASM builds.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,179,2017-03-27T17:33:38Z,2017-03-28T20:56:36Z,2017-06-27T12:20:11Z,MERGED,True,419,13,9,https://github.com/karel-m,New rotate_test - fix for #6,4,[],https://github.com/libtom/libtomcrypt/pull/179,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/179#issuecomment-289820640,,"I guess that for LTC_NO_ASM we need something like
- (ulong32)(x)<<(ulong32)(32-((y)&31))
+ (ulong32)(x)<<(ulong32)((32-((y)&31))&31)",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,179,2017-03-27T17:33:38Z,2017-03-28T20:56:36Z,2017-06-27T12:20:11Z,MERGED,True,419,13,9,https://github.com/karel-m,New rotate_test - fix for #6,4,[],https://github.com/libtom/libtomcrypt/pull/179,https://github.com/coveralls,6,https://github.com/libtom/libtomcrypt/pull/179#issuecomment-289882723,,Coverage remained the same at 87.41% when pulling 8518b56 on fix/6 into 7532b89 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,179,2017-03-27T17:33:38Z,2017-03-28T20:56:36Z,2017-06-27T12:20:11Z,MERGED,True,419,13,9,https://github.com/karel-m,New rotate_test - fix for #6,4,[],https://github.com/libtom/libtomcrypt/pull/179,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/179#issuecomment-289894356,,👍  Please merge this one,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,181,2017-03-29T18:55:48Z,2017-03-30T14:59:44Z,2017-06-27T12:20:11Z,MERGED,True,59,10,4,https://github.com/karel-m,demos/test facelift,1,[],https://github.com/libtom/libtomcrypt/pull/181,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/181,"1/ improved output
store_test..........passed      0.349ms
rotate_test.........passed      0.018ms
misc_test...........passed      0.105ms
cipher_hash_test....passed     25.858ms
mac_test............passed      1.177ms
modes_test..........passed      0.534ms
der_tests...........passed   3330.180ms
pkcs_1_test.........passed      1.682ms
pkcs_1_pss_test.....passed     11.723ms
pkcs_1_oaep_test....passed     11.650ms
pkcs_1_emsa_test....passed     16.571ms
pkcs_1_eme_test.....passed     15.493ms
rsa_test............passed    984.707ms
dh_test.............passed   1016.586ms
ecc_tests...........passed  13611.960ms
dsa_test............passed     99.954ms
katja_test..........nop

SUCCESS: passed=16 failed=0 nop=1 duration=19.1sec

2/ you can run a single test like this
$ ./test cipher_hash_test
...
cipher_hash_test....passed     24.953ms

SUCCESS: passed=1 failed=0 nop=0 duration=0.0sec","1/ improved output
store_test..........passed      0.349ms
rotate_test.........passed      0.018ms
misc_test...........passed      0.105ms
cipher_hash_test....passed     25.858ms
mac_test............passed      1.177ms
modes_test..........passed      0.534ms
der_tests...........passed   3330.180ms
pkcs_1_test.........passed      1.682ms
pkcs_1_pss_test.....passed     11.723ms
pkcs_1_oaep_test....passed     11.650ms
pkcs_1_emsa_test....passed     16.571ms
pkcs_1_eme_test.....passed     15.493ms
rsa_test............passed    984.707ms
dh_test.............passed   1016.586ms
ecc_tests...........passed  13611.960ms
dsa_test............passed     99.954ms
katja_test..........nop

SUCCESS: passed=16 failed=0 nop=1 duration=19.1sec

2/ you can run a single test like this
$ ./test cipher_hash_test
...
cipher_hash_test....passed     24.953ms

SUCCESS: passed=1 failed=0 nop=0 duration=0.0sec",True,{'HEART': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,181,2017-03-29T18:55:48Z,2017-03-30T14:59:44Z,2017-06-27T12:20:11Z,MERGED,True,59,10,4,https://github.com/karel-m,demos/test facelift,1,[],https://github.com/libtom/libtomcrypt/pull/181,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/181#issuecomment-290235812,"1/ improved output
store_test..........passed      0.349ms
rotate_test.........passed      0.018ms
misc_test...........passed      0.105ms
cipher_hash_test....passed     25.858ms
mac_test............passed      1.177ms
modes_test..........passed      0.534ms
der_tests...........passed   3330.180ms
pkcs_1_test.........passed      1.682ms
pkcs_1_pss_test.....passed     11.723ms
pkcs_1_oaep_test....passed     11.650ms
pkcs_1_emsa_test....passed     16.571ms
pkcs_1_eme_test.....passed     15.493ms
rsa_test............passed    984.707ms
dh_test.............passed   1016.586ms
ecc_tests...........passed  13611.960ms
dsa_test............passed     99.954ms
katja_test..........nop

SUCCESS: passed=16 failed=0 nop=1 duration=19.1sec

2/ you can run a single test like this
$ ./test cipher_hash_test
...
cipher_hash_test....passed     24.953ms

SUCCESS: passed=1 failed=0 nop=0 duration=0.0sec",Coverage remained the same at 87.478% when pulling 4b0f061 on pr/demo-test-facelift into 4bcd484 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,182,2017-03-30T20:50:15Z,2017-03-31T18:22:38Z,2017-06-27T12:20:11Z,MERGED,True,540,10,24,https://github.com/sjaeckel,add GeneralizedTime DER processing,8,[],https://github.com/libtom/libtomcrypt/pull/182,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/182,"This implementation is a bit hairy as I couldn't find how exactly to implement this.
IIUC the reference should be in the standard X.690
But if I look at this, this or this I don't really know what to do 😆","This implementation is a bit hairy as I couldn't find how exactly to implement this.
IIUC the reference should be in the standard X.690
But if I look at this, this or this I don't really know what to do 😆",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,182,2017-03-30T20:50:15Z,2017-03-31T18:22:38Z,2017-06-27T12:20:11Z,MERGED,True,540,10,24,https://github.com/sjaeckel,add GeneralizedTime DER processing,8,[],https://github.com/libtom/libtomcrypt/pull/182,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/182#issuecomment-290556441,"This implementation is a bit hairy as I couldn't find how exactly to implement this.
IIUC the reference should be in the standard X.690
But if I look at this, this or this I don't really know what to do 😆","which spec did you look at?
damn, I was off-by-10 ... it's x.680 not x.690 ...
and ugh... that fractional time will be super ugly to implement if we follow x.680...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,182,2017-03-30T20:50:15Z,2017-03-31T18:22:38Z,2017-06-27T12:20:11Z,MERGED,True,540,10,24,https://github.com/sjaeckel,add GeneralizedTime DER processing,8,[],https://github.com/libtom/libtomcrypt/pull/182,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/182#issuecomment-290622544,"This implementation is a bit hairy as I couldn't find how exactly to implement this.
IIUC the reference should be in the standard X.690
But if I look at this, this or this I don't really know what to do 😆","Yes ""a time of day, to any of the precisions defined in ISO 8601"" sounds scary.
Ad fractions you probably mean ""Decimal fractions may be added to any of the three time elements. However, a fraction may only be added to the lowest order time element in the representation."" - I think that we can for now ignore fractions of hours/minutes.
The other approach might be to turn/* possible encodings are .. comment into /* currently supported encodings are .. and exactly document what we can/cannot parse and leave the implementation as it is.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,182,2017-03-30T20:50:15Z,2017-03-31T18:22:38Z,2017-06-27T12:20:11Z,MERGED,True,540,10,24,https://github.com/sjaeckel,add GeneralizedTime DER processing,8,[],https://github.com/libtom/libtomcrypt/pull/182,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/182#issuecomment-290642265,"This implementation is a bit hairy as I couldn't find how exactly to implement this.
IIUC the reference should be in the standard X.690
But if I look at this, this or this I don't really know what to do 😆","According to https://tools.ietf.org/html/rfc5280#section-4.1.2.5.2 the current implementation is sufficient for parsing X509 certificates (validity dates).
So as I proposed above: document exactly what we can + cannot handle and leave the implementation as it is.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,182,2017-03-30T20:50:15Z,2017-03-31T18:22:38Z,2017-06-27T12:20:11Z,MERGED,True,540,10,24,https://github.com/sjaeckel,add GeneralizedTime DER processing,8,[],https://github.com/libtom/libtomcrypt/pull/182,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/182#issuecomment-290692178,"This implementation is a bit hairy as I couldn't find how exactly to implement this.
IIUC the reference should be in the standard X.690
But if I look at this, this or this I don't really know what to do 😆","uhm, I'd propose to even remove the fractional seconds support as I can't think of a neat way to implement signaling .004 in an unsigned...
For now I'd have these ideas, where I'd prefer 2 if you think we should go for it...:

store it in reverse order 400 means .004
store it bitmasked, e.g. 6 bits zero, 10 bits accuracy, would allow us to have 63 leading zeros and fractional seconds up to 1023 ... bits 15-10 zeroes, bits 9-0 fractional seconds",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,182,2017-03-30T20:50:15Z,2017-03-31T18:22:38Z,2017-06-27T12:20:11Z,MERGED,True,540,10,24,https://github.com/sjaeckel,add GeneralizedTime DER processing,8,[],https://github.com/libtom/libtomcrypt/pull/182,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/182#issuecomment-290703906,"This implementation is a bit hairy as I couldn't find how exactly to implement this.
IIUC the reference should be in the standard X.690
But if I look at this, this or this I don't really know what to do 😆","I agree that we can completely drop fractional second support as RFC5280 says ""GeneralizedTime values MUST NOT include fractional seconds.""
Ad implementation I would simply store nanoseconds (if we can afford one ""ulong32"") like:
- unsigned fs, /* fractional seconds */
+ ulong32  ns, /* nano second */
but I have not think too much about consequences.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,182,2017-03-30T20:50:15Z,2017-03-31T18:22:38Z,2017-06-27T12:20:11Z,MERGED,True,540,10,24,https://github.com/sjaeckel,add GeneralizedTime DER processing,8,[],https://github.com/libtom/libtomcrypt/pull/182,https://github.com/coveralls,7,https://github.com/libtom/libtomcrypt/pull/182#issuecomment-290768710,"This implementation is a bit hairy as I couldn't find how exactly to implement this.
IIUC the reference should be in the standard X.690
But if I look at this, this or this I don't really know what to do 😆",Coverage increased (+0.06%) to 87.62% when pulling 78a3243 on feature/generalizedtime into 7701992 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,184,2017-04-03T20:29:23Z,2017-04-21T15:20:41Z,2017-10-09T16:16:40Z,MERGED,True,255,109,15,https://github.com/karel-m,Facelift of *_file functions,3,[],https://github.com/libtom/libtomcrypt/pull/184,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/184,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,184,2017-04-03T20:29:23Z,2017-04-21T15:20:41Z,2017-10-09T16:16:40Z,MERGED,True,255,109,15,https://github.com/karel-m,Facelift of *_file functions,3,[],https://github.com/libtom/libtomcrypt/pull/184,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/184#issuecomment-291265052,,"Cosmetic observation - the order of params (key, filename vs. filename, key) varies a bit by different MACs:
hmac_file(hashid, fname, key, 32, buf, &len);
omac_file(cipherid, key, 32, fname, buf, &len);
pmac_file(cipherid, key, 32, fname, buf, &len);
xcbc_file(cipherid, key, 32, fname, buf, &len);
f9_file(cipherid, key, 32, fname, buf, &len);
poly1305_file(fname, key, 32, buf, &len);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,184,2017-04-03T20:29:23Z,2017-04-21T15:20:41Z,2017-10-09T16:16:40Z,MERGED,True,255,109,15,https://github.com/karel-m,Facelift of *_file functions,3,[],https://github.com/libtom/libtomcrypt/pull/184,https://github.com/coveralls,3,https://github.com/libtom/libtomcrypt/pull/184#issuecomment-291278065,,Coverage increased (+0.9%) to 88.666% when pulling 9e49f10 on pr/file-related-tests into 5199b54 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,184,2017-04-03T20:29:23Z,2017-04-21T15:20:41Z,2017-10-09T16:16:40Z,MERGED,True,255,109,15,https://github.com/karel-m,Facelift of *_file functions,3,[],https://github.com/libtom/libtomcrypt/pull/184,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/184#issuecomment-292985759,,"Cosmetic observation - the order of params (key, filename vs. filename, key) varies a bit by different MACs:
hmac_file(hashid, fname, key, 32, buf, &len);
omac_file(cipherid, key, 32, fname, buf, &len);
pmac_file(cipherid, key, 32, fname, buf, &len);
xcbc_file(cipherid, key, 32, fname, buf, &len);
f9_file(cipherid, key, 32, fname, buf, &len);
poly1305_file(fname, key, 32, buf, &len);


choose whatever you think suits best, is not that much work (also in regards of API changes of existing functions) and fits in the pattern XX_file(<inputs>, <outputs>) :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,184,2017-04-03T20:29:23Z,2017-04-21T15:20:41Z,2017-10-09T16:16:40Z,MERGED,True,255,109,15,https://github.com/karel-m,Facelift of *_file functions,3,[],https://github.com/libtom/libtomcrypt/pull/184,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/184#issuecomment-296153994,,@sjaeckel is this PR ok for merging?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,184,2017-04-03T20:29:23Z,2017-04-21T15:20:41Z,2017-10-09T16:16:40Z,MERGED,True,255,109,15,https://github.com/karel-m,Facelift of *_file functions,3,[],https://github.com/libtom/libtomcrypt/pull/184,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/184#issuecomment-296198022,,"Now it should be back to:
hmac_file(hashid, fname, key, 32, buf, &len);
omac_file(cipherid, key, 32, fname, buf, &len);
pmac_file(cipherid, key, 32, fname, buf, &len);
xcbc_file(cipherid, key, 32, fname, buf, &len);
f9_file(cipherid, key, 32, fname, buf, &len);
poly1305_file(fname, key, 32, buf, &len);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,184,2017-04-03T20:29:23Z,2017-04-21T15:20:41Z,2017-10-09T16:16:40Z,MERGED,True,255,109,15,https://github.com/karel-m,Facelift of *_file functions,3,[],https://github.com/libtom/libtomcrypt/pull/184,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/184#issuecomment-296202877,,rebased and reorganised into 3 commits,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,185,2017-04-03T20:56:13Z,2017-04-03T22:47:18Z,2017-06-27T12:20:12Z,MERGED,True,48,48,9,https://github.com/karel-m,chacha_prng > chacha20_prng,2,[],https://github.com/libtom/libtomcrypt/pull/185,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/185,forgotten cosmetics related to #171,forgotten cosmetics related to #171,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,185,2017-04-03T20:56:13Z,2017-04-03T22:47:18Z,2017-06-27T12:20:12Z,MERGED,True,48,48,9,https://github.com/karel-m,chacha_prng > chacha20_prng,2,[],https://github.com/libtom/libtomcrypt/pull/185,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/185#issuecomment-291283988,forgotten cosmetics related to #171,Coverage remained the same at 87.799% when pulling eefb8dc on pr/chacha_prng-chacha20_prng into 5199b54 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/186,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-291330307,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.",Coverage increased (+0.2%) to 87.996% when pulling f32a26f on pr/stream_rc4_sober128 into fbe7d22 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-292578925,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.",@fperrad could you please run your lint tool on branch pr/stream_rc4_sober128?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/fperrad,4,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-292632845,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.",I found some misuse of compare_testvector (see #188) in src/prngs/rc4.c & src/prngs/sober128.c,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-292810386,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","I have moved mutex to prng_state + added mutext related code to all 3 stream cipher based prngs (I'm not sure if it was a good idea, but it would not be too much work to remove it in the future).
It was necessary to also update some already existing mutex code as it was not working (namely yarrow). Current develop hangs during ./test if you build it with LTC_PTHREAD. Frankly I am not sure if somebody uses LTC_PTHREAD-enabled builds.
Looking at our prngs stuff it might be a good idea to simplify it a bit:

drop export method - see also #178
drop import method - see also #178
drop ready method
change add_entropy so that during the first call (""non-ready"" state) it does: 1/ current add_entropy + 2/ current ready; on subsequent calls (""ready"" state) it does re-keying or re-seeding using supplied extra bytes passed to add_entropy

Currently all stream cipher based prngs implement import/export in a ways that import resumes the state exactly as it was at the time of export (which is not according the documentation) - should I change it?
Anyway the changes in this PR are getting a bit bigger that I expected. My main motivation is to have separate stream cipher API, the facelift of prngs is (for me) just a side product.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-296397793,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","Considering our last chat about avoiding unnecessary API breakage I should
perhaps return back the original rc4/sober128 prng related names e.g.
rc4_prng_read (new) >> rc4_read (original). That means finding a new name
for stream API's rc4_done which will collide (e.g. rc4_destroy).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-296487419,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.",Ad read functions and if (outlen == 0 || prng == NULL || out == NULL) return 0; - we cannot use LTC_ARGCHK as return 0 is the only way how to indicate troubles.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-296576469,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","Considering our last chat about avoiding unnecessary API breakage I should
perhaps return back the original rc4/sober128 prng related names e.g.
rc4_prng_read (new) >> rc4_read (original). That means finding a new name
for stream API's rc4_done which will collide (e.g. rc4_destroy).

true, I'd propose to leave the prng API's as is and rename the stream API's to e.g. rc4_stream_XX()",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-296702287,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","Is the following change in defines an API breakage?

LTC_RC4 was used for RC4 prng, now it means RC4 stream cipher
LTC_RC4_PRNG is new and used for RC4 prng
the same for LTC_SOBER128 / LTC_SOBER128_PRNG

Or should I rather use LTC_RC4 + LTC_RC4_STREAM?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-296723565,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","c.f. dfda0e9 don't rename them to destroy, that's why I proposed to rename them to rc4_stream_XX() as in rc4_stream_done() which won't clash with rc4_done()",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/sjaeckel,11,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-296723710,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","Or should I rather use LTC_RC4 + LTC_RC4_STREAM?

yep",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-296724690,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","You mean that in src/stream all functions will be like
<something>_stream_<something>?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/sjaeckel,13,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-296725922,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","You mean that in src/stream all functions will be like
stream

at least the ones that would clash",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/karel-m,14,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-296773262,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","Ad defines - now we have:

LTC_RC4_STREAM (stream cipher) + LTC_RC4 (prng)
LTC_SOBER128_STREAM (stream cipher) + LTC_SOBER128 (prng)
LTC_CHACHA_STREAM (stream cipher) + LTC_CHACHA20_PRNG (prng) Q1: should I rename it to shorter LTC_CHACHA20?

Ad *_done - now we have:

sober128_stream_done + rc4_stream_done (to avoid collisions with prngs' *_done functions
however we have chacha_done - Q2: should I rename it too to chacha_stream_done?

Ad other stream functions:

they are now without _stream_ part e.g. rc4_setup, chacha_setup, sober128_setup ...
Q3: should I rename them all (chacha, rc4, sober128) to <something>_stream_<something>?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/sjaeckel,15,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-296799475,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","Q1: should I rename it to shorter LTC_CHACHA20?

yes, LTC_CHACHA20 and LTC_CHACHA20_PRNG

Q2: should I rename it too to chacha_stream_done?

no

Q3: should I rename them all (chacha, rc4, sober128) to stream?

I'd say only rc4 and sober128 - {rc4,sober128}_stream_<something> but chacha20_<something>",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/karel-m,16,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-296800247,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","yes, LTC_CHACHA20 and LTC_CHACHA20_PRNG

Perhaps LTC_CHACHA (for stream cipher) instead of LTC_CHACHA20 as number of rounds is not hardcoded",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/sjaeckel,17,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-296802621,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.","Perhaps LTC_CHACHA (for stream cipher) instead of LTC_CHACHA20 as number of rounds is not hardcoded

true",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/karel-m,18,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-297107445,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.",@sjaeckel is there anything left from your comments on this PR?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,186,2017-04-03T22:46:06Z,2017-04-29T13:50:38Z,2017-10-09T16:16:40Z,MERGED,True,1256,835,30,https://github.com/karel-m,Move rc4 + sober128 to src/stream/,15,[],https://github.com/libtom/libtomcrypt/pull/186,https://github.com/karel-m,19,https://github.com/libtom/libtomcrypt/pull/186#issuecomment-298058628,"The basic idea is to have rc4 + sober128 stream API in src/stream like we have with chacha:
int rc4_setup(rc4_state *st, const unsigned char *key, unsigned long keylen);
int rc4_crypt(rc4_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int rc4_keystream(rc4_state *st, unsigned char *out, unsigned long outlen);
int rc4_done(rc4_state *st);

int sober128_setup(sober128_state *st, const unsigned char *key, unsigned long keylen);
int sober128_setiv(sober128_state *st, const unsigned char *iv, unsigned long ivlen);
int sober128_crypt(sober128_state *st, const unsigned char *in, unsigned long inlen, unsigned char *out);
int sober128_keystream(sober128_state *st, unsigned char *out, unsigned long outlen);
int sober128_done(sober128_state *st);

The idea of having stream cipher in src/stream/ first appeared in #171
The main trouble with this PR is that quite significant (and backwards incompatible) changes need to be applied to original rc4/sober128 PRNG code.
The code in the PR is not ready for review yet but as usual any feedback welcome.",@sjaeckel ping,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/187,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex","This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/coveralls,2,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-291490441,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex",Coverage decreased (-0.2%) to 87.605% when pulling c666bc4 on pr/ecc-asn1-part into fbe7d22 on develop.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-291507129,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex",IIUC this implements context-specific tag encoding differently than in the flexi decoder (it's stored in tag and we currently use the used field to store). Should we then also adjust the flexi decoder or is this not the same?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-291589374,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex","Ad context-specific tag encoding - when I added tag I probably did not notice that used might already exist for the same reason.
I am in no way an expert at ASN.1, when I created the patch back in 2014 the only goal was to be able to load/save EC keys which I somehow managed. But some parts are rather hacks/workarounds.
If you want some testing keys, go to https://github.com/DCIT/perl-CryptX/tree/master/t/data and take any of ECC related *.der files.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-292020236,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex","Ad context-specific tag encoding - when I added tag I probably did not notice that used might already exist for the same reason.

As of the comment on the used field we could just re-use it instead of adding tag. Most likely it'd make sense to rename it to something else. Initially it was just kind of a hack so the struct definition won't change. As I don't see a way to somehow mangle the optional part without changing the struct I think a rename would be fine.

I am in no way an expert at ASN.1, when I created the patch back in 2014 the only goal was to be able to load/save EC keys which I somehow managed. But some parts are rather hacks/workarounds.
If you want some testing keys, go to https://github.com/DCIT/perl-CryptX/tree/master/t/data and take any of ECC related *.der files.

I'm also no expert at ASN.1 but I'll have a look when I have the time.
Would it probably make sense to split this PR up into two parts? One with the changes for tag and one for optional and 'the rest'?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-310203999,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex",Now rebased on top of ECC enhancements part 1 (curves y^2 = x^3 + ax + b) #236,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-331559929,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex","UPDATE: this PR adds the following functions to the public API
int  ecc_export_openssl(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_openssl(const unsigned char *in, unsigned long inlen, ecc_key *key);
int  ecc_import_pkcs8(const unsigned char *in,  unsigned long inlen, const void *pwd, unsigned long pwdlen, ecc_key *key);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-352743234,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex","@sjaeckel I want to load the following ASN.1 structure using your new API:
  private key format: http://tools.ietf.org/html/rfc5915
  
  ECPrivateKey ::= SEQUENCE {                                    # SEQUENCE
   version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),  # INTEGER       :01
   privateKey     OCTET STRING,                                  # OCTET STRING
   [0] ECParameters                                              # see above
   [1] publicKey                                                 # BIT STRING
  }

This seems to fail:
   LTC_SET_ASN1(seq_priv, 0, LTC_ASN1_SHORT_INTEGER,     &pkver,   1UL);
   LTC_SET_ASN1(seq_priv, 1, LTC_ASN1_OCTET_STRING,      bin_k,    (unsigned long)ECC_MAXSIZE);
   LTC_SET_ASN1(seq_priv, 2, LTC_ASN1_OBJECT_IDENTIFIER, curveoid, 16UL);
   LTC_SET_ASN1(seq_priv, 3, LTC_ASN1_RAW_BIT_STRING,    bin_xy,   (unsigned long)8*(2*ECC_MAXSIZE+2));
   
   LTC_SET_ASN1_IDENTIFIER(seq_priv, 2, LTC_ASN1_CL_CONTEXT_SPECIFIC, LTC_ASN1_PC_CONSTRUCTED, 0x0000); /* context specific 0 */
   LTC_SET_ASN1_IDENTIFIER(seq_priv, 3, LTC_ASN1_CL_CONTEXT_SPECIFIC, LTC_ASN1_PC_CONSTRUCTED, 0x0001); /* context specific 1 */

   err = der_decode_sequence(in, inlen, seq_priv, 4);
What is the right way?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-352766761,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex","@sjaeckel here is the ASN1 which I am trying to load:
   static const unsigned char short_pri[] = { /* private + long public, curve by OID */
      0x30, 0x74, 0x02, 0x01, 0x01, 0x04, 0x20, 0x0c, 0xf1, 0xad, 0x2f, 0x03, 0xf7, 0x91, 0x1b, 0xba,
      0x03, 0xcf, 0x23, 0x37, 0xc8, 0xf2, 0xf7, 0x36, 0xce, 0x65, 0xf1, 0x84, 0x2d, 0x7d, 0x9f, 0x5f,
      0x9e, 0x21, 0xd9, 0x5e, 0x49, 0xbd, 0x23, 0xa0, 0x07, 0x06, 0x05, 0x2b, 0x81, 0x04, 0x00, 0x0a,
      0xa1, 0x44, 0x03, 0x42, 0x00, 0x04, 0x2a, 0xf9, 0x0b, 0xda, 0xbe, 0x71, 0x66, 0x9e, 0xd1, 0xcf,
      0x12, 0xd0, 0x24, 0xaf, 0xba, 0xb6, 0x7f, 0xfb, 0x96, 0x27, 0x3e, 0x2f, 0xbd, 0x1e, 0xd5, 0xf9,
      0x8d, 0x6c, 0x73, 0x9d, 0xc5, 0x16, 0x91, 0xbd, 0xb2, 0xb9, 0x1b, 0x40, 0x10, 0x5a, 0xb7, 0x6c,
      0x6e, 0x32, 0x5b, 0xf7, 0x63, 0x62, 0x94, 0x24, 0x24, 0xdb, 0xec, 0x3f, 0x8b, 0xe5, 0x6e, 0x4b,
      0x64, 0x37, 0x31, 0x24, 0x79, 0x4d
   };
$ openssl asn1parse -inform der -in short_pri.der
    0:d=0  hl=2 l= 116 cons: SEQUENCE
    2:d=1  hl=2 l=   1 prim: INTEGER           :01
    5:d=1  hl=2 l=  32 prim: OCTET STRING      [HEX DUMP]:0CF1AD2F03F7911BBA03CF2337C8F2F736CE65F1842D7D9F5F9E21D95E49BD23
   39:d=1  hl=2 l=   7 cons: cont [ 0 ]
   41:d=2  hl=2 l=   5 prim: OBJECT            :secp256k1
   48:d=1  hl=2 l=  68 cons: cont [ 1 ]
   50:d=2  hl=2 l=  66 prim: BIT STRING",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-353796181,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex","Can you please read the doc and give feedback if it is sufficient to fix the issue?
My patch to ecc_import_openssl() has this summary:
$ git diff --stat src/pk/ecc/ecc_import_openssl.c
 src/pk/ecc/ecc_import_openssl.c | 17 ++++++++++-------
 1 file changed, 10 insertions(+), 7 deletions(-)

I can also patch it but I'd like to know if the doc is good enough to understand what to do.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-394180423,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex","@sjaeckel we should rebase this one onto a develop
I have created a branch pr/ecc-asn1-part-BACKUP because AFAIK you have some uncommitted stuff related to this PR.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-394180737,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex","IIUC that's only 1 commit which is left
and I've already rebased locally, so go ahead",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-394181160,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex","Don't you have some pkcs8 changes/improvements locally?
I have not done any coding in this PR/branche since you have asked me whether you can work on pkcs8. Therefore I think it would be better if you push --force your local changes.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/sjaeckel,14,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-394183098,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex","Don't you have some pkcs8 changes/improvements locally?

yeah, but nothing ready for publishing yet as I didn't really have the time ...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/karel-m,15,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-394188093,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex","OK, now rebased.
Is it worth splitting this PR into:

ecc_export_openssl + ecc_import_openssl + ecc_import_x509 (which is IMO ready for being merged into develop, except maybe a discussion whether the name _openssl  is proper here or we can find something better)
ecc_import_pkcs8 (here are definitely some opportunities for improvement + I think the rsa_import_pkcs8 deserves a similar facelift as well)

?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/karel-m,16,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-394449439,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex",@sjaeckel could you please review: ecc_export_openssl + ecc_import_openssl + ecc_import_x509?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,187,2017-04-04T08:59:41Z,2018-06-11T17:13:22Z,2018-06-11T17:13:22Z,MERGED,True,889,20,12,https://github.com/karel-m,ECC-step3: extra import/export (ASN.1 related),3,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/187,https://github.com/karel-m,17,https://github.com/libtom/libtomcrypt/pull/187#issuecomment-395546934,"This PR was extracted from #65
I have written this code in 2014 (just an excuse in case it starts to seem that I am not completely sure what these changes are good for).
The main reason for this patch was ASN.1 support for importing/exporting EC keys which are stored in ASN.1 structures using esoteric stuff like context specific tags and optional items in ASN.1 sequences.
You will notice on the first sight the ugly duplication in API that I have introduced (to keep backwards compatibility of ""non *_ex"" functions):
der_decode_subject_public_key_info
der_decode_subject_public_key_info_ex

and
der_length_sequence
der_length_sequence_ex",@sjaeckel I have moved pkcs8 stuff to #403 - could you please review/approve what's left in this PR? (ecc_export_openssl + ecc_import_openssl + ecc_import_x509),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,188,2017-04-05T07:42:12Z,2017-04-06T20:46:24Z,2017-06-27T12:20:12Z,MERGED,True,8,8,3,https://github.com/fperrad,misuse of compare_testvector,1,[],https://github.com/libtom/libtomcrypt/pull/188,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/188,"compare_testvector has two different definitions see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_misc.h#L102-L109
When the macro definition is used, the comparison compare_testvector() != 0 is wrong.
When the function definition is used, the comparison is useless.
So, this commit removes the comparison.","compare_testvector has two different definitions see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_misc.h#L102-L109
When the macro definition is used, the comparison compare_testvector() != 0 is wrong.
When the function definition is used, the comparison is useless.
So, this commit removes the comparison.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,188,2017-04-05T07:42:12Z,2017-04-06T20:46:24Z,2017-06-27T12:20:12Z,MERGED,True,8,8,3,https://github.com/fperrad,misuse of compare_testvector,1,[],https://github.com/libtom/libtomcrypt/pull/188,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/188#issuecomment-291785173,"compare_testvector has two different definitions see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_misc.h#L102-L109
When the macro definition is used, the comparison compare_testvector() != 0 is wrong.
When the function definition is used, the comparison is useless.
So, this commit removes the comparison.",very true,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,188,2017-04-05T07:42:12Z,2017-04-06T20:46:24Z,2017-06-27T12:20:12Z,MERGED,True,8,8,3,https://github.com/fperrad,misuse of compare_testvector,1,[],https://github.com/libtom/libtomcrypt/pull/188,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/188#issuecomment-291791359,"compare_testvector has two different definitions see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_misc.h#L102-L109
When the macro definition is used, the comparison compare_testvector() != 0 is wrong.
When the function definition is used, the comparison is useless.
So, this commit removes the comparison.","I just thought would it make sense to add this patch instead?
diff --git a/src/headers/tomcrypt_misc.h b/src/headers/tomcrypt_misc.h
index 91f87c5..76f4f6b 100644
--- a/src/headers/tomcrypt_misc.h
+++ b/src/headers/tomcrypt_misc.h
@@ -105,7 +105,7 @@ void print_hex(const char* what, const void* v, const unsigned long l);
 int compare_testvector(const void* is, const unsigned long is_len, const void* should, const unsigned long should_len, const
 #else
 #define compare_testvector(is, is_len, should, should_len, what, which) \
-   (((is_len) != (should_len)) || (XMEMCMP((is), (should), (is_len)) != 0))
+   ((((is_len) != (should_len)) || (XMEMCMP((is), (should), (is_len)) != 0)) ? 1 : 0)
 #endif
 
 /* $Source$ */",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,188,2017-04-05T07:42:12Z,2017-04-06T20:46:24Z,2017-06-27T12:20:12Z,MERGED,True,8,8,3,https://github.com/fperrad,misuse of compare_testvector,1,[],https://github.com/libtom/libtomcrypt/pull/188,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/188#issuecomment-291990397,"compare_testvector has two different definitions see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_misc.h#L102-L109
When the macro definition is used, the comparison compare_testvector() != 0 is wrong.
When the function definition is used, the comparison is useless.
So, this commit removes the comparison.","The macro compare_testvector should be fixed as proposed by @sjaeckel anyway.
Using if (compare_testvector(..)) vs. if(compare_testvector(..) != 0) is just a matter of taste. Its nature is similar to XMEMCMP which we use in both ways if (XMEMCMP(..)) as well as if (XMEMCMP(..) != 0). I think we can leave out != 0 in these cases.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,189,2017-04-06T22:21:00Z,2017-04-07T08:35:12Z,2017-06-27T12:20:12Z,MERGED,True,10,10,10,https://github.com/fperrad,remove suspicious ;,1,[],https://github.com/libtom/libtomcrypt/pull/189,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/189,,,True,{'THUMBS_UP': ['https://github.com/karel-m']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,190,2017-04-07T10:18:40Z,2017-04-07T16:49:48Z,2017-06-27T12:20:12Z,MERGED,True,2,3,2,https://github.com/fperrad,chacha: more linting,2,[],https://github.com/libtom/libtomcrypt/pull/190,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/190,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/ksherlock,1,https://github.com/libtom/libtomcrypt/pull/191,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)",True,{'HOORAY': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-292725386,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","Looks good, do you plan to add blake2b as well?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/ksherlock,3,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-292741171,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)",I have added blake2b as well.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-292810714,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","Ad Travis-CI failures e.g. https://travis-ci.org/libtom/libtomcrypt/jobs/220116643
you have to move all declaration at the block beginning like this:
 static inline int blake2s_init0(hash_state *md)
 {
+   int i;
    XMEMSET(&md->blake2s, 0, sizeof(struct blake2s_state));
 
-   for (int i = 0; i < 8; ++i)
+   for (i = 0; i < 8; ++i)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/ksherlock,5,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-292814129,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","It has been updated.
Thanks,
Kelvin",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-292850280,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","One more place that needs a fix
src/hashes/blake2s.c: In function ‘blake2s_init0’:
src/hashes/blake2s.c:153:4: error: ‘for’ loop initial declarations are only allowed in C99 mode
src/hashes/blake2s.c:153:4: note: use option -std=c99 or -std=gnu99 to compile your code",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-293079544,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","Would it be complicated to extend blake2b_init / blake2s_init to something like blake2b_init(hash_state *md, unsigned long outlen, unsigned char *key, unsigned long keylen) (for unkeyed hashes: key == NULL, keylen == 0) ?
It'll allow us to introduce something like src/mac/blake2smac.c + src/mac/blake2bmac.c (BLAKE2 in ""keyed hash"" mode as mentioned in the RFC) which can utilize extended blake2b_init.",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/ksherlock,8,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-293083421,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)",not complicated at all. I took that out of the code originally since none of the other hashes have anything like that but I was looking at the HMAC stuff earlier today and thought I decided I should probably add it back.  Would you prefer a blake2x_init function that does everything or a separate blake2x_init_key function with the key parameters?,True,{'HOORAY': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-293086474,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","I was thinking about changing blake2[sb]_init as we use it as far as I see only in blake2[sb].c files. We will obviously need to change related parts like:
- int blake2b_160_init(hash_state *md) { return blake2b_init(md, 20); }
+ int blake2b_160_init(hash_state *md) { return blake2b_init(md, 20, NULL, 0); }

But I am not strongly against separate blake2[sb]_init_key functions. Before you start perhaps wait for @sjaeckel's point of view.
The next step would be creating something like src/mac/blake2[sb]mac/blake2[sb]mac.c with:
int blake2smac_init(blake2smac_state *st, unsigned long outlen, const unsigned char *key, unsigned long keylen);
int blake2smac_process(blake2smac_state *st, const unsigned char *in, unsigned long inlen);
int blake2smac_done(blake2smac_state *st, unsigned char *mac, unsigned long *maclen);

And to make it complete we need:
src/mac/blake2[sb]mac/blake2[sb]mac_file.c 
src/mac/blake2[sb]mac/blake2[sb]mac_memory.c 
src/mac/blake2[sb]mac/blake2[sb]mac_memory_multi.c 
src/mac/blake2[sb]mac/blake2[sb]mac_test.c",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-293093035,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","I was thinking about changing blake2[sb]_init as we use it as far as I see only in blake2[sb].c files. We will obviously need to change related parts like:
- int blake2b_160_init(hash_state *md) { return blake2b_init(md, 20); }
+ int blake2b_160_init(hash_state *md) { return blake2b_init(md, 20, NULL, 0); }

But I am not strongly against separate blake2[sb]_init_key functions. Before you start perhaps wait for @sjaeckel's point of view.

sounds fine by me, it doesn't look like a blake2[sb]_init_key is needed as blake2[sb]_init would be yet another wrapper.

The next step would be creating something like src/mac/blake2[sb]mac/blake2[sb]mac.c with:
int blake2smac_init(blake2smac_state *st, unsigned long outlen, const unsigned char *key, unsigned long keylen);
int blake2smac_process(blake2smac_state *st, const unsigned char *in, unsigned long inlen);
int blake2smac_done(blake2smac_state *st, unsigned char *mac, unsigned long *maclen);

And to make it complete we need:
src/mac/blake2[sb]mac/blake2[sb]mac_file.c 
src/mac/blake2[sb]mac/blake2[sb]mac_memory.c 
src/mac/blake2[sb]mac/blake2[sb]mac_memory_multi.c 
src/mac/blake2[sb]mac/blake2[sb]mac_test.c 


also sounds fine by me, I'd just put them in src/mac/blake2/blake2[sb]mac_[file,memory,...].c
please have a look at #184 regarding the structure & API signatures used.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-293154483,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","Yes, having both BLAKE2 based MACs in src/mac/blake2/*.c looks better.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-294831519,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","please also add this patch and then we're ready to merge
diff --git a/demos/hashsum.c b/demos/hashsum.c
index 8f94af5..9951a85 100644
--- a/demos/hashsum.c
+++ b/demos/hashsum.c
@@ -105,6 +105,18 @@ void register_algs(void)
 #ifdef LTC_WHIRLPOOL
   register_hash (&whirlpool_desc);
 #endif
+#ifdef LTC_BLAKE2S
+  register_hash (&blake2s_128_desc);
+  register_hash (&blake2s_160_desc);
+  register_hash (&blake2s_224_desc);
+  register_hash (&blake2s_256_desc);
+#endif
+#ifdef LTC_BLAKE2B
+  register_hash (&blake2b_160_desc);
+  register_hash (&blake2b_256_desc);
+  register_hash (&blake2b_384_desc);
+  register_hash (&blake2b_512_desc);
+#endif
 #ifdef LTC_CHC_HASH
   register_hash(&chc_desc);
   if ((err = chc_register(register_cipher(&aes_enc_desc))) != CRYPT_OK) {
diff --git a/src/hashes/blake2b.c b/src/hashes/blake2b.c
index 3e7dd10..55409cc 100644
--- a/src/hashes/blake2b.c
+++ b/src/hashes/blake2b.c
@@ -489,6 +489,16 @@ int blake2b_256_test(void)
         0x31, 0x71, 0xef, 0x3f, 0xee, 0x98, 0x57, 0x9b,
         0x94, 0x96, 0x4e, 0x3b, 0xb1, 0xcb, 0x3e, 0x42,
         0x72, 0x62, 0xc8, 0xc0, 0x68, 0xd5, 0x23, 0x19 } },
+    { ""12345678901234567890123456789012345678901234567890""
+      ""12345678901234567890123456789012345678901234567890""
+      ""12345678901234567890123456789012345678901234567890""
+      ""12345678901234567890123456789012345678901234567890""
+      ""12345678901234567890123456789012345678901234567890""
+      ""12345678901234567890123456789012345678901234567890"",
+      { 0x0f, 0x6e, 0x01, 0x8d, 0x38, 0xd6, 0x3f, 0x08,
+        0x4d, 0x58, 0xe3, 0x0c, 0x90, 0xfb, 0xa2, 0x41,
+        0x5f, 0xca, 0x17, 0xfa, 0x66, 0x26, 0x49, 0xf3,
+        0x8a, 0x30, 0x41, 0x7c, 0x57, 0xcd, 0xa8, 0x14 } },
 
     { NULL, { 0 } }
   };
diff --git a/src/hashes/blake2s.c b/src/hashes/blake2s.c
index 1c4164e..dbb1414 100644
--- a/src/hashes/blake2s.c
+++ b/src/hashes/blake2s.c
@@ -382,6 +382,16 @@ int blake2s_256_test(void)
         0xe1, 0xa7, 0x2b, 0xa3, 0x4e, 0xeb, 0x45, 0x2f,
         0x37, 0x45, 0x8b, 0x20, 0x9e, 0xd6, 0x3a, 0x29,
         0x4d, 0x99, 0x9b, 0x4c, 0x86, 0x67, 0x59, 0x82 } },
+    { ""12345678901234567890123456789012345678901234567890""
+      ""12345678901234567890123456789012345678901234567890""
+      ""12345678901234567890123456789012345678901234567890""
+      ""12345678901234567890123456789012345678901234567890""
+      ""12345678901234567890123456789012345678901234567890""
+      ""12345678901234567890123456789012345678901234567890"",
+      { 0xa3, 0x78, 0x8b, 0x5b, 0x59, 0xee, 0xe4, 0x41,
+        0x95, 0x23, 0x58, 0x00, 0xa4, 0xf9, 0xfa, 0x41,
+        0x86, 0x0c, 0x7b, 0x1c, 0x35, 0xa2, 0x42, 0x70,
+        0x50, 0x80, 0x79, 0x56, 0xe3, 0xbe, 0x31, 0x74 } },
 
     { NULL, { 0 } }
   };",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-294948293,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","Ad blake2b_160 vs. blake2b-160 I prefer the underscore variant as can be
seen in my recent sha3_nnn addition. But the fact is that sha512 family
uses a dash. We should be definitely consistent.

Before merge test vectors should be regenerated via tv_gen.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/sjaeckel,14,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-294949781,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","I don't think it should be a personal preference, so I just use the notation that is used in the standards... therefore - and not _
:-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/karel-m,15,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-294957920,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","And what about zeroing md always (not only #ifdef LTC_CLEAN_STACK) as
mentioned in my comment?

Especially if we'll use the same routines for BLAKE2 based MACs, the MD
will contain key related material.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/sjaeckel,16,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-294976376,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","And what about zeroing md always (not only #ifdef LTC_CLEAN_STACK) as
mentioned in my comment?

true, I missed that",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/sjaeckel,17,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-295672622,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","you need something like this
make tv_gen
./tv_gen
mv *_tv.txt notes/
git add notes/
git commit -m ""update testvectors""

@karel-m should we add something like the following to helper.pl?
for f in demos/tv_gen.c demos/hashsum.c testprof/x86_prof.c ; do for h in $(rgrep ltc_hash_desc ./src/hashes/ | awk '{print $4}'); do rgrep -q $h $f || echo $h not in $f ; done ; done
...which immediately shows
rmd320_desc not in demos/tv_gen.c
sha512_224_desc not in demos/tv_gen.c
sha512_256_desc not in demos/tv_gen.c
rmd256_desc not in demos/tv_gen.c
sha3_224_desc not in demos/hashsum.c
sha3_256_desc not in demos/hashsum.c
sha3_384_desc not in demos/hashsum.c
sha3_512_desc not in demos/hashsum.c
rmd320_desc not in demos/hashsum.c
sha512_224_desc not in demos/hashsum.c
sha512_256_desc not in demos/hashsum.c
rmd256_desc not in demos/hashsum.c",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/sjaeckel,18,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-295751802,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)","I don't know how you created these testvectors, but the ones you pushed fail on my machine as well 😮
What's the architecture&OS you're working on?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/ksherlock,19,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-295777252,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)",The hash_sizes in blakes2-160 and blake2s-224 were a little off. hmac_tv.txt should be a little more consistent now.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/karel-m,20,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-295846198,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)",👍 I am for merging,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,191,2017-04-08T03:54:26Z,2017-04-20T19:03:15Z,2017-10-09T16:18:39Z,MERGED,True,4610,204,18,https://github.com/ksherlock,Add BLAKE2[sb] hash,29,[],https://github.com/libtom/libtomcrypt/pull/191,https://github.com/sjaeckel,21,https://github.com/libtom/libtomcrypt/pull/191#issuecomment-295860971,"Hi,
This adds the blake2s hash (https://blake2.net, https://www.ietf.org/rfc/rfc7693.txt) based on the reference implementation (https://github.com/BLAKE2/BLAKE2/blob/master/ref/blake2s-ref.c)",thx @ksherlock & @karel-m for the good review process,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,193,2017-04-21T14:01:04Z,2017-04-24T22:11:46Z,2017-06-27T12:20:12Z,MERGED,True,1643,308,32,https://github.com/karel-m,BLAKE2 based MACs,8,[],https://github.com/libtom/libtomcrypt/pull/193,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/193,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,193,2017-04-21T14:01:04Z,2017-04-24T22:11:46Z,2017-06-27T12:20:12Z,MERGED,True,1643,308,32,https://github.com/karel-m,BLAKE2 based MACs,8,[],https://github.com/libtom/libtomcrypt/pull/193,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/193#issuecomment-296199011,,TODO: use test vectors from https://github.com/BLAKE2/BLAKE2,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,193,2017-04-21T14:01:04Z,2017-04-24T22:11:46Z,2017-06-27T12:20:12Z,MERGED,True,1643,308,32,https://github.com/karel-m,BLAKE2 based MACs,8,[],https://github.com/libtom/libtomcrypt/pull/193,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/193#issuecomment-296258609,,can you add the memory functions to multi.c please and rebase? :),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,193,2017-04-21T14:01:04Z,2017-04-24T22:11:46Z,2017-06-27T12:20:12Z,MERGED,True,1643,308,32,https://github.com/karel-m,BLAKE2 based MACs,8,[],https://github.com/libtom/libtomcrypt/pull/193,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/193#issuecomment-296259599,,"TODO: use test vectors from https://github.com/BLAKE2/BLAKE2

uhm sure, but then please make it optional to run all of them (as already done for the RSA testvectors).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,193,2017-04-21T14:01:04Z,2017-04-24T22:11:46Z,2017-06-27T12:20:12Z,MERGED,True,1643,308,32,https://github.com/karel-m,BLAKE2 based MACs,8,[],https://github.com/libtom/libtomcrypt/pull/193,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/193#issuecomment-296284112,,"can you add the memory functions to multi.c

I am not sure what you mean, something has to be fixed in blake2bmac_memory_multi.c / blake2smac_memory_multi.c?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,193,2017-04-21T14:01:04Z,2017-04-24T22:11:46Z,2017-06-27T12:20:12Z,MERGED,True,1643,308,32,https://github.com/karel-m,BLAKE2 based MACs,8,[],https://github.com/libtom/libtomcrypt/pull/193,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/193#issuecomment-296365142,,"can you add the memory functions to multi.c

I am not sure what you mean, something has to be fixed in blake2bmac_memory_multi.c / blake2smac_memory_multi.c?

nope, I meant adding the functions to demos/multi.c",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,193,2017-04-21T14:01:04Z,2017-04-24T22:11:46Z,2017-06-27T12:20:12Z,MERGED,True,1643,308,32,https://github.com/karel-m,BLAKE2 based MACs,8,[],https://github.com/libtom/libtomcrypt/pull/193,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/193#issuecomment-296456523,,@sjaeckel what about to turn demos/multi.c into testprof/multi_test.c?,True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,193,2017-04-21T14:01:04Z,2017-04-24T22:11:46Z,2017-06-27T12:20:12Z,MERGED,True,1643,308,32,https://github.com/karel-m,BLAKE2 based MACs,8,[],https://github.com/libtom/libtomcrypt/pull/193,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/193#issuecomment-296485310,,"One maybe important difference related to blake2[bs]mac_memory + blake2[bs]mac_memory_multi functions - the parameter unsigned long *maclen must be set exactly to the required size as is is used not only by blake2[bs]mac_done functions but also by blake2[bs]mac_init functions.
When calling other MAC's *_memory functions you can pass a ""longer"" values in unsigned long *maclen which will be set to the actual value of the output length.
We can add an extra parameter (e.g. blake2len) to all blake2[sb]mac_memory.c + blake2[sb]mac_memory_multi.c",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,193,2017-04-21T14:01:04Z,2017-04-24T22:11:46Z,2017-06-27T12:20:12Z,MERGED,True,1643,308,32,https://github.com/karel-m,BLAKE2 based MACs,8,[],https://github.com/libtom/libtomcrypt/pull/193,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/193#issuecomment-296549743,,"One maybe important difference related to blake2[bs]mac_memory + blake2[bs]mac_memory_multi functions - the parameter unsigned long *maclen must be set exactly to the required size as is is used not only by blake2[bs]mac_done functions but also by blake2[bs]mac_init functions.
When calling other MAC's *_memory functions you can pass a ""longer"" values in unsigned long *maclen which will be set to the actual value of the output length.
We can add an extra parameter (e.g. blake2len) to all blake2[sb]mac_memory.c + blake2[sb]mac_memory_multi.c

I think that's perfectly fine! Which reminds me that we just have to write documentation... for all the changes/new features...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,193,2017-04-21T14:01:04Z,2017-04-24T22:11:46Z,2017-06-27T12:20:12Z,MERGED,True,1643,308,32,https://github.com/karel-m,BLAKE2 based MACs,8,[],https://github.com/libtom/libtomcrypt/pull/193,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/193#issuecomment-296773677,,"So, are we ready for merging here?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,194,2017-04-21T15:06:25Z,2017-04-21T19:21:20Z,2017-06-27T12:20:12Z,MERGED,True,1611,0,5,https://github.com/karel-m,helper.pl --check-hashes + related fixes,1,[],https://github.com/libtom/libtomcrypt/pull/194,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/194,as proposed in #191 (comment),as proposed in #191 (comment),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,195,2017-04-23T15:42:11Z,2017-04-23T21:24:11Z,2017-06-27T12:20:12Z,MERGED,True,62,26,6,https://github.com/sjaeckel,improve hashsum,4,[],https://github.com/libtom/libtomcrypt/pull/195,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/195,... and run hashsum for all hashes,... and run hashsum for all hashes,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,196,2017-04-24T17:05:18Z,2017-04-24T21:07:53Z,2017-06-27T12:20:12Z,MERGED,True,13,1,1,https://github.com/ksherlock,Add missing hash descriptors to the crypt.tex,1,[],https://github.com/libtom/libtomcrypt/pull/196,https://github.com/ksherlock,1,https://github.com/libtom/libtomcrypt/pull/196,"also, sha-1 no longer recommended.","also, sha-1 no longer recommended.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,196,2017-04-24T17:05:18Z,2017-04-24T21:07:53Z,2017-06-27T12:20:12Z,MERGED,True,13,1,1,https://github.com/ksherlock,Add missing hash descriptors to the crypt.tex,1,[],https://github.com/libtom/libtomcrypt/pull/196,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/196#issuecomment-296757247,"also, sha-1 no longer recommended.",can you please rebase on top of feature/doc and force-push,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,200,2017-04-29T16:04:35Z,2017-05-01T12:08:59Z,2017-06-27T12:20:12Z,MERGED,True,1,1,1,https://github.com/fperrad,LTC_PTHREAD: some linting,1,[],https://github.com/libtom/libtomcrypt/pull/200,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/200,"the macro LTC_MUTEX_TYPE already contains a semicolon
see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L552","the macro LTC_MUTEX_TYPE already contains a semicolon
see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L552",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,200,2017-04-29T16:04:35Z,2017-05-01T12:08:59Z,2017-06-27T12:20:12Z,MERGED,True,1,1,1,https://github.com/fperrad,LTC_PTHREAD: some linting,1,[],https://github.com/libtom/libtomcrypt/pull/200,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/200#issuecomment-298198233,"the macro LTC_MUTEX_TYPE already contains a semicolon
see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L552","I'd say that this is the wrong fix - we should remove the semicolon from the define of LTC_MUTEX_TYPE (and also remove all the other semicolons related to LTX_MUTEX).
Any other opinions?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,200,2017-04-29T16:04:35Z,2017-05-01T12:08:59Z,2017-06-27T12:20:12Z,MERGED,True,1,1,1,https://github.com/fperrad,LTC_PTHREAD: some linting,1,[],https://github.com/libtom/libtomcrypt/pull/200,https://github.com/fperrad,3,https://github.com/libtom/libtomcrypt/pull/200#issuecomment-298215146,"the macro LTC_MUTEX_TYPE already contains a semicolon
see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L552","See the definition when no LTC_PTHREAD, https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L562
The macros in tomcrypt_custom.h are correct.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,200,2017-04-29T16:04:35Z,2017-05-01T12:08:59Z,2017-06-27T12:20:12Z,MERGED,True,1,1,1,https://github.com/fperrad,LTC_PTHREAD: some linting,1,[],https://github.com/libtom/libtomcrypt/pull/200,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/200#issuecomment-298216168,"the macro LTC_MUTEX_TYPE already contains a semicolon
see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L552","The reason why I don't like that patch is that you suddenly have lines in your source code which aren't terminated by a semicolon.

it looks strange and like an error
https://www.securecoding.cert.org/confluence/display/c/PRE11-C.+Do+not+conclude+macro+definitions+with+a+semicolon",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,200,2017-04-29T16:04:35Z,2017-05-01T12:08:59Z,2017-06-27T12:20:12Z,MERGED,True,1,1,1,https://github.com/fperrad,LTC_PTHREAD: some linting,1,[],https://github.com/libtom/libtomcrypt/pull/200,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/200#issuecomment-298217608,"the macro LTC_MUTEX_TYPE already contains a semicolon
see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L552",@fperrad was it just LTC_MUTEX_TYPE that throws this warning? Looking at other macros like LTC_MUTEX_LOCK I would expect the same warning complaining about double ;.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,200,2017-04-29T16:04:35Z,2017-05-01T12:08:59Z,2017-06-27T12:20:12Z,MERGED,True,1,1,1,https://github.com/fperrad,LTC_PTHREAD: some linting,1,[],https://github.com/libtom/libtomcrypt/pull/200,https://github.com/fperrad,6,https://github.com/libtom/libtomcrypt/pull/200#issuecomment-298220280,"the macro LTC_MUTEX_TYPE already contains a semicolon
see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L552","PRE11-C is a rule concerning the use of macro in function.
The use of a macro could not always looks like a function call, especially outside a function.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,200,2017-04-29T16:04:35Z,2017-05-01T12:08:59Z,2017-06-27T12:20:12Z,MERGED,True,1,1,1,https://github.com/fperrad,LTC_PTHREAD: some linting,1,[],https://github.com/libtom/libtomcrypt/pull/200,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/200#issuecomment-298222971,"the macro LTC_MUTEX_TYPE already contains a semicolon
see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L552","PRE11-C is a rule concerning the use of macro in function.

uhm okay, that's not mentioned anywhere but if you say so...

@fperrad was it just LTC_MUTEX_TYPE that throws this warning? Looking at other macros like LTC_MUTEX_LOCK I would expect the same warning complaining about double ;.

and? TBH I would've expected the same",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,200,2017-04-29T16:04:35Z,2017-05-01T12:08:59Z,2017-06-27T12:20:12Z,MERGED,True,1,1,1,https://github.com/fperrad,LTC_PTHREAD: some linting,1,[],https://github.com/libtom/libtomcrypt/pull/200,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/200#issuecomment-298224509,"the macro LTC_MUTEX_TYPE already contains a semicolon
see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L552","An argument for ""not having ;"" in LTC_MUTEX_* macro definitions might be consistency with tomcrypt_macros.h where we also do not use ;",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,200,2017-04-29T16:04:35Z,2017-05-01T12:08:59Z,2017-06-27T12:20:12Z,MERGED,True,1,1,1,https://github.com/fperrad,LTC_PTHREAD: some linting,1,[],https://github.com/libtom/libtomcrypt/pull/200,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/200#issuecomment-298225692,"the macro LTC_MUTEX_TYPE already contains a semicolon
see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L552","mutex.patch.txt
what does your linter say after applying this patch?
for both configurations... with and without LTC_PTHREAD",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,200,2017-04-29T16:04:35Z,2017-05-01T12:08:59Z,2017-06-27T12:20:12Z,MERGED,True,1,1,1,https://github.com/fperrad,LTC_PTHREAD: some linting,1,[],https://github.com/libtom/libtomcrypt/pull/200,https://github.com/fperrad,10,https://github.com/libtom/libtomcrypt/pull/200#issuecomment-298245939,"the macro LTC_MUTEX_TYPE already contains a semicolon
see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L552","Your patch is OK with LTC_PTHREAD defined,
but KO without LTC_PTHREAD
                                _
LTC_MUTEX_PROTO(ltc_cipher_mutex);
src/headers/tomcrypt_cipher.h  938  Error 19: Useless Declaration
                              _
LTC_MUTEX_PROTO(ltc_hash_mutex);
src/headers/tomcrypt_hash.h  465  Error 19: Useless Declaration
                      _
   LTC_MUTEX_TYPE(lock);   /* lock */
src/headers/tomcrypt_prng.h  69  Error 19: Useless Declaration
                              _
LTC_MUTEX_PROTO(ltc_prng_mutex);
src/headers/tomcrypt_prng.h  203  Error 19: Useless Declaration
                               _
LTC_MUTEX_GLOBAL(ltc_hash_mutex);
src/misc/crypt/crypt_hash_descriptor.c  22  Error 19: Useless Declaration


These 3 macros LTC_MUTEX_PROTO, LTC_MUTEX_TYPE and LTC_MUTEX_GLOBAL are used outside C function.
The refactor of LTC_MUTEX_INIT, LTC_MUTEX_LOCK and LTC_MUTEX_UNLOCK is correct.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,200,2017-04-29T16:04:35Z,2017-05-01T12:08:59Z,2017-06-27T12:20:12Z,MERGED,True,1,1,1,https://github.com/fperrad,LTC_PTHREAD: some linting,1,[],https://github.com/libtom/libtomcrypt/pull/200,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/200#issuecomment-298322924,"the macro LTC_MUTEX_TYPE already contains a semicolon
see https://github.com/libtom/libtomcrypt/blob/develop/src/headers/tomcrypt_custom.h#L552",I suggest to merge the proposed 1-line patch patch and discuss the further improvements in a separate issue as it seems that current develop is broken on MSVC (#204) and this 1-line patch can fix it.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,201,2017-04-29T17:59:56Z,2017-04-30T07:43:47Z,2017-06-27T12:20:12Z,MERGED,True,7,8,7,https://github.com/karel-m,lint fixes discussed in #199,1,[],https://github.com/libtom/libtomcrypt/pull/201,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/201,see #199,see #199,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,202,2017-04-30T08:37:13Z,2017-05-01T20:07:52Z,2017-06-27T12:20:12Z,MERGED,True,2,2,2,https://github.com/fperrad,more linting,1,[],https://github.com/libtom/libtomcrypt/pull/202,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/202,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,202,2017-04-30T08:37:13Z,2017-05-01T20:07:52Z,2017-06-27T12:20:12Z,MERGED,True,2,2,2,https://github.com/fperrad,more linting,1,[],https://github.com/libtom/libtomcrypt/pull/202,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/202#issuecomment-298220746,,"Ad Unusual use of a Boolean expression  👍
The stuff related to dh_static goes back to 2bdebb3 and here is the discussion/reasons #37 why it is as it is.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,202,2017-04-30T08:37:13Z,2017-05-01T20:07:52Z,2017-06-27T12:20:12Z,MERGED,True,2,2,2,https://github.com/fperrad,more linting,1,[],https://github.com/libtom/libtomcrypt/pull/202,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/202#issuecomment-298223501,,The stuff related to dh also isn't mentioned anywhere in the linter-outputs in #199 ...,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,202,2017-04-30T08:37:13Z,2017-05-01T20:07:52Z,2017-06-27T12:20:12Z,MERGED,True,2,2,2,https://github.com/fperrad,more linting,1,[],https://github.com/libtom/libtomcrypt/pull/202,https://github.com/fperrad,4,https://github.com/libtom/libtomcrypt/pull/202#issuecomment-298411660,,rebased with only Unusual use of a Boolean expression,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,203,2017-04-30T11:52:30Z,2017-05-04T14:03:58Z,2017-06-27T12:20:13Z,MERGED,True,250,55,4,https://github.com/sjaeckel,Improve hashsum,8,[],https://github.com/libtom/libtomcrypt/pull/203,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/203,"Improved hashsum to be minimally compatible for creating hash-files that can be verified by the {shaX,md5,...}sum family resp. to verify files which were created with one of these tools","Improved hashsum to be minimally compatible for creating hash-files that can be verified by the {shaX,md5,...}sum family resp. to verify files which were created with one of these tools",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,203,2017-04-30T11:52:30Z,2017-05-04T14:03:58Z,2017-06-27T12:20:13Z,MERGED,True,250,55,4,https://github.com/sjaeckel,Improve hashsum,8,[],https://github.com/libtom/libtomcrypt/pull/203,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/203#issuecomment-298257609,"Improved hashsum to be minimally compatible for creating hash-files that can be verified by the {shaX,md5,...}sum family resp. to verify files which were created with one of these tools","I agree with renaming crypt to ltcrypt, I would even agree with renaming hashsum to lthash (or something like that).
Using /usr/local/ instead of /usr/ is also a good idea.
I am only not sure whether ltcrypt is worth installing at all as its is nowadays IMO a bit weak. It does only a plain encryption without an integrity check, and considering the fact that the key/password is entered by the user from terminal, one would expect utilizing pbkdf2, not only a plain sha256. Looking at the arsenal we have in src/authenc it would be better to reimplement ltcrypt with e.g. GCM or ChaCha20Poly1305.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,204,2017-05-01T11:33:25Z,2017-05-01T11:42:46Z,2017-09-14T17:54:23Z,CLOSED,False,1,1,1,https://github.com/momo5502,fix MSVC compile errors,1,[],https://github.com/libtom/libtomcrypt/pull/204,https://github.com/momo5502,1,https://github.com/libtom/libtomcrypt/pull/204,The semicolon after the LTC_MUTEX_TYPE macro causes compile errors if LTC_PTHREAD is not defined,The semicolon after the LTC_MUTEX_TYPE macro causes compile errors if LTC_PTHREAD is not defined,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,204,2017-05-01T11:33:25Z,2017-05-01T11:42:46Z,2017-09-14T17:54:23Z,CLOSED,False,1,1,1,https://github.com/momo5502,fix MSVC compile errors,1,[],https://github.com/libtom/libtomcrypt/pull/204,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/204#issuecomment-298322207,The semicolon after the LTC_MUTEX_TYPE macro causes compile errors if LTC_PTHREAD is not defined,this is duplicate to #200,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,204,2017-05-01T11:33:25Z,2017-05-01T11:42:46Z,2017-09-14T17:54:23Z,CLOSED,False,1,1,1,https://github.com/momo5502,fix MSVC compile errors,1,[],https://github.com/libtom/libtomcrypt/pull/204,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/204#issuecomment-298325135,The semicolon after the LTC_MUTEX_TYPE macro causes compile errors if LTC_PTHREAD is not defined,now fixed in develop,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,205,2017-05-01T20:02:25Z,2017-05-03T15:06:28Z,2017-06-27T12:20:13Z,MERGED,True,20,15,2,https://github.com/karel-m,SHAKE (SHA3 related) big endian fix,8,[],https://github.com/libtom/libtomcrypt/pull/205,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/205,"BIG ENDIAN strikes again.
A good news is that this is the only thing from all recent additions that failed on a BE machine.","BIG ENDIAN strikes again.
A good news is that this is the only thing from all recent additions that failed on a BE machine.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,205,2017-05-01T20:02:25Z,2017-05-03T15:06:28Z,2017-06-27T12:20:13Z,MERGED,True,20,15,2,https://github.com/karel-m,SHAKE (SHA3 related) big endian fix,8,[],https://github.com/libtom/libtomcrypt/pull/205,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/205#issuecomment-298455347,"BIG ENDIAN strikes again.
A good news is that this is the only thing from all recent additions that failed on a BE machine.","FYI I just tried the patch on big endian PPC64 qemu and the test fails with or without your patch...
I'm also getting this
src/hashes/sha3.c: In function ‘sha3_shake_done’:
src/hashes/sha3.c:273:19: warning: declaration of ‘i’ shadows a previous local [-Wshadow]
          unsigned i;
                   ^
src/hashes/sha3.c:259:18: note: shadowed declaration is here
    unsigned long i = 0;",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,205,2017-05-01T20:02:25Z,2017-05-03T15:06:28Z,2017-06-27T12:20:13Z,MERGED,True,20,15,2,https://github.com/karel-m,SHAKE (SHA3 related) big endian fix,8,[],https://github.com/libtom/libtomcrypt/pull/205,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/205#issuecomment-298499417,"BIG ENDIAN strikes again.
A good news is that this is the only thing from all recent additions that failed on a BE machine.",I have run my tests on HP-UX. Unfortunately it were not libtomcrypt's tests as I am not able to convince the HP_UX's make to consume our makefiles (not even makefile.unix). I'll try to investigate more.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,205,2017-05-01T20:02:25Z,2017-05-03T15:06:28Z,2017-06-27T12:20:13Z,MERGED,True,20,15,2,https://github.com/karel-m,SHAKE (SHA3 related) big endian fix,8,[],https://github.com/libtom/libtomcrypt/pull/205,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/205#issuecomment-298509498,"BIG ENDIAN strikes again.
A good news is that this is the only thing from all recent additions that failed on a BE machine.","I liked 150fb6b better, but nevermind (I also think it was missing a reset of i) :)
Did you investigate that patch yourself? Or did you find it somewhere else?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,205,2017-05-01T20:02:25Z,2017-05-03T15:06:28Z,2017-06-27T12:20:13Z,MERGED,True,20,15,2,https://github.com/karel-m,SHAKE (SHA3 related) big endian fix,8,[],https://github.com/libtom/libtomcrypt/pull/205,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/205#issuecomment-298519351,"BIG ENDIAN strikes again.
A good news is that this is the only thing from all recent additions that failed on a BE machine.","Did you investigate that patch yourself? Or did you find it somewhere else?

The patch is basically the same stuff that we already use in sha3_done - https://github.com/libtom/libtomcrypt/blob/develop/src/hashes/sha3.c#L241 It was only missing in sha3_shake_done. The original code is here - https://github.com/brainhub/SHA3IUF/blob/master/sha3.c#L297 (it was just adopted to our macros and ulong* types).
So the latest 3f01f2c fails on your PPC64@qemu as well, right?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,205,2017-05-01T20:02:25Z,2017-05-03T15:06:28Z,2017-06-27T12:20:13Z,MERGED,True,20,15,2,https://github.com/karel-m,SHAKE (SHA3 related) big endian fix,8,[],https://github.com/libtom/libtomcrypt/pull/205,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/205#issuecomment-298532729,"BIG ENDIAN strikes again.
A good news is that this is the only thing from all recent additions that failed on a BE machine.","I'll check it in the evening, gotta do some $work.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,205,2017-05-01T20:02:25Z,2017-05-03T15:06:28Z,2017-06-27T12:20:13Z,MERGED,True,20,15,2,https://github.com/karel-m,SHAKE (SHA3 related) big endian fix,8,[],https://github.com/libtom/libtomcrypt/pull/205,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/205#issuecomment-298543465,"BIG ENDIAN strikes again.
A good news is that this is the only thing from all recent additions that failed on a BE machine.","# ./test
build == git-1.17-795-gcb66e08
...
cipher_hash_test....SHAKE256('') failed
Algorithm failed test vectors. (5) - sha3_shake
cipher_hash_test.c:34:sha3_shake_test()
# uname -m
ppc64

FYI I patched the build to include the git revision",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,205,2017-05-01T20:02:25Z,2017-05-03T15:06:28Z,2017-06-27T12:20:13Z,MERGED,True,20,15,2,https://github.com/karel-m,SHAKE (SHA3 related) big endian fix,8,[],https://github.com/libtom/libtomcrypt/pull/205,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/205#issuecomment-298745987,"BIG ENDIAN strikes again.
A good news is that this is the only thing from all recent additions that failed on a BE machine.",The latest version works fine for me on AIX @ PowerPC and HP-UX @ PA-RISC.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,205,2017-05-01T20:02:25Z,2017-05-03T15:06:28Z,2017-06-27T12:20:13Z,MERGED,True,20,15,2,https://github.com/karel-m,SHAKE (SHA3 related) big endian fix,8,[],https://github.com/libtom/libtomcrypt/pull/205,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/205#issuecomment-298876342,"BIG ENDIAN strikes again.
A good news is that this is the only thing from all recent additions that failed on a BE machine.","It also works fine for me on qemu ppc64 and qemu sparc64.
Please fix comments, rebase, squash together & merge.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,207,2017-05-01T21:18:16Z,2017-05-02T07:17:17Z,2017-06-27T12:20:13Z,MERGED,True,127,70,4,https://github.com/karel-m,PKCS #1 v1.5 padding - No ASN.1,2,[],https://github.com/libtom/libtomcrypt/pull/207,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/207,Kind of a forgotten branch feature/pkcs1ssl (author: @sjaeckel). I am creating this PR just to not let it fall on the floor.,Kind of a forgotten branch feature/pkcs1ssl (author: @sjaeckel). I am creating this PR just to not let it fall on the floor.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,207,2017-05-01T21:18:16Z,2017-05-02T07:17:17Z,2017-06-27T12:20:13Z,MERGED,True,127,70,4,https://github.com/karel-m,PKCS #1 v1.5 padding - No ASN.1,2,[],https://github.com/libtom/libtomcrypt/pull/207,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/207#issuecomment-298436422,Kind of a forgotten branch feature/pkcs1ssl (author: @sjaeckel). I am creating this PR just to not let it fall on the floor.,rebased & pushed with force,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,207,2017-05-01T21:18:16Z,2017-05-02T07:17:17Z,2017-06-27T12:20:13Z,MERGED,True,127,70,4,https://github.com/karel-m,PKCS #1 v1.5 padding - No ASN.1,2,[],https://github.com/libtom/libtomcrypt/pull/207,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/207#issuecomment-298449373,Kind of a forgotten branch feature/pkcs1ssl (author: @sjaeckel). I am creating this PR just to not let it fall on the floor.,"cool! true, I forgot that one
thanks for the tests
fine by me to merge",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/208,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-298732030,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","I definitely support the idea of improving our makefiles.
I have committed some extra changes:
1/ removing the need for testprof/makefile*
2/ completely rewritten makefile.unix
The makefile.unix is intended to work with ""any make"" on ""any UNIX"" (providing that it works on the old HP-UX box I use for testing, it should work anywhere) and contains some ideas that might be usable in other makefiles.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-298734827,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared",Basically makefile.unix more or less works on AIX as well; although the build did not finished due to troubles mentioned in #209,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-298743188,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","One thing I am not sure about is whether makefile.unix should support building dynamic libraries.
Now it contains ""some"" support for building libtomcrypt*.so (without the need for libtool) but it might be better to use only makefile.shared for building dynamic libraries.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-299399778,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","@sjaeckel I have slightly updated zipup target in the main makefile
Couple of related ideas:
1/ could we move the special scripts related to travis/coverage/coverity & co. to a dedicated subdir like github / gh / travis / ci (or whatever) so that we can easily exclude them during making a release tarball?
2/ similarly we can perhaps move crypt.tex + Doxyfile to doc (or maybe not)
3/ now, with utilising git archive there is an option to replace the old:
# $Source$
# $Revision$
# $Date$

with something like:
# git commit: $Format:%h$ $Format:%ai$

See makefile where I have changed it.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-299400933,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","And
4/ could you please have a look at the other targets in the main makefile and kill the obsolete one?
Some of them do not even make sense to me like perlcritic - what is the gain here?

make perlcritic
perlcritic *.pl

not even a single keystroke",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-299455086,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","1/ could we move the special scripts related to travis/coverage/coverity & co. to a dedicated subdir like github / gh / travis / ci (or whatever) so that we can easily exclude them during making a release tarball?

TBH I don't want to exclude anything from the tarballs besides build output (well the created doc should be in there... :) )
I always liked the tarballs tom pushed out where everything is included

2/ similarly we can perhaps move crypt.tex + Doxyfile to doc (or maybe not)

👍

3/ now, with utilising git archive there is an option to replace the old:
# $Source$
# $Revision$
# $Date$

with something like:
# git commit: $Format:%h$ $Format:%ai$

See makefile where I have changed it.

also there's no support to print the tag... that's why we created https://github.com/sjaeckel/expsrc in my old company... it's no beauty but does the job...

4/ could you please have a look at the other targets in the main makefile and kill the obsolete one?
Some of them do not even make sense to me like perlcritic - what is the gain here?

make perlcritic
perlcritic *.pl

not even a single keystroke

OK",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-299493719,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","I don't want to exclude anything from the tarballs besides build output

I left the following in .gitattributes (but feel free to comment it out)
/.gitattributes export-ignore
/.gitignore     export-ignore",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-299524618,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared",I'm out of ideas...,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-299528615,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared",okay it's an issue of the make version...,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-299531838,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared",Maybe makefile + makefile.shared + makefile.include should have a comment at the beginning that they are written for GNU make,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-299895656,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","Ad the magic related to -Itestprof:

I am fine with having all GNU make specific kung-fu in makefile + makefile.shared + makefile.included
On the other hand I strongly prefer to have makefile.unix free from any sophisticated makefile syntax even if it means that the makefile is kind of suboptimal
the same applies to makefile.mingw where we do not have usual UNIX utilities like ls

For makefile.unix, makefile.mingw and makefile.msvc I suggest returning back to having -Itestprof in all CFLAGS. It is suboptimal but it makes makefiles significantly simpler. Providing that Travis-CI will utilize mostly makefile + makefile.shared it should catch any header related troubles",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-300311482,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","Apart from small comments above I have 2 questions:
1/ do makefile.common + makefile.include need to be separate files?
2/ do we want to replace the old $Source$ stuff with # git commit: $Format:%h$ $Format:%ai$?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/sjaeckel,14,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-300449174,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","2/ do we want to replace the old $Source$ stuff with # git commit: $Format:%h$ $Format:%ai$?

What do you think about:
$Source$    ->  ?
$Revision$  ->  git commit:  $Format:%H$
$Date$      ->  commit time: $Format:%ai$
new         ->  ref:         $Format:%D$

%D creates something like HEAD -> <branch you're currently one>, tag: <tag on this commit>
regarding $Source$: how do we get this one filled up with the filepath? probably we could also drop it...",True,{'THUMBS_UP': ['https://github.com/karel-m']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/sjaeckel,15,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-300917295,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared",any more comments or ready to merge?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/karel-m,16,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-300919007,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","I have only a question regarding naming convention:

make zipup creates crypt-1.18.tar.xz
after unpacking there is a dir libtomcrypt-1.18
PDF remains crypt.pdf (and is installed into /usr/local/share/doc/libtomcrypt/pdf

Which is basically ""as it always was"" but what about to align these names to e.g. tomcrypt-1.18*?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/sjaeckel,17,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-300920949,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","Which is basically ""as it always was"" but what about to align these names to e.g. tomcrypt-1.18*?

I also thought about that, but I'd prefer to leave that up to the point where we give people real work when updating isn't a drop-in replacement anymore.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,208,2017-05-02T08:47:52Z,2017-05-11T21:56:48Z,2017-10-09T16:16:12Z,MERGED,True,828,1265,30,https://github.com/sjaeckel,"Re-work, improve & fix makefiles",51,[],https://github.com/libtom/libtomcrypt/pull/208,https://github.com/karel-m,18,https://github.com/libtom/libtomcrypt/pull/208#issuecomment-300922407,"add a version string (either from git or the one that is written in the makefile) to the output of test
fix compilation of tests with makefile.shared
fix compilation on Mac with makefile.shared","OK, do merge, please.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,210,2017-05-02T19:37:42Z,2017-05-05T17:58:15Z,2017-06-27T12:20:13Z,MERGED,True,8,4,2,https://github.com/karel-m,"IBM xlc compiler does not like ""static inline"" (related to #209)",2,[],https://github.com/libtom/libtomcrypt/pull/210,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/210,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,210,2017-05-02T19:37:42Z,2017-05-05T17:58:15Z,2017-06-27T12:20:13Z,MERGED,True,8,4,2,https://github.com/karel-m,"IBM xlc compiler does not like ""static inline"" (related to #209)",2,[],https://github.com/libtom/libtomcrypt/pull/210,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/210#issuecomment-299494744,,How did I manage this: coverage decreased (-0.4%) to 90.026% by bcce9e0 ?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,210,2017-05-02T19:37:42Z,2017-05-05T17:58:15Z,2017-06-27T12:20:13Z,MERGED,True,8,4,2,https://github.com/karel-m,"IBM xlc compiler does not like ""static inline"" (related to #209)",2,[],https://github.com/libtom/libtomcrypt/pull/210,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/210#issuecomment-299525139,,as all jobs have this decrease I get the impression coveralls changed something internally...,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,211,2017-05-05T09:53:44Z,2017-05-11T16:10:09Z,2017-10-09T16:16:40Z,MERGED,True,159,143,17,https://github.com/karel-m,Windows: fix various compiler warnings,8,[],https://github.com/libtom/libtomcrypt/pull/211,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/211,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,211,2017-05-05T09:53:44Z,2017-05-11T16:10:09Z,2017-10-09T16:16:40Z,MERGED,True,159,143,17,https://github.com/karel-m,Windows: fix various compiler warnings,8,[],https://github.com/libtom/libtomcrypt/pull/211,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/211#issuecomment-300222848,,Now contains also fixes related to #212 and #213,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,211,2017-05-05T09:53:44Z,2017-05-11T16:10:09Z,2017-10-09T16:16:40Z,MERGED,True,159,143,17,https://github.com/karel-m,Windows: fix various compiler warnings,8,[],https://github.com/libtom/libtomcrypt/pull/211,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/211#issuecomment-300226870,,did I already mention my opinion about windows compatibility? m(,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,211,2017-05-05T09:53:44Z,2017-05-11T16:10:09Z,2017-10-09T16:16:40Z,MERGED,True,159,143,17,https://github.com/karel-m,Windows: fix various compiler warnings,8,[],https://github.com/libtom/libtomcrypt/pull/211,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/211#issuecomment-300270326,,"I have to admit that this time I went really really deep the rabbit hole and tried to compile libtomcrypt with Visual C++ 6.0 (approx. 1998) but most warnings are thrown by Visual C++ 2008 as well.
Yes, MSVC compilers (and basically the platform itself) are a bit ""special""; on the other hand you probably remember the fun we had with HP cc and/or IBM xlc compilers.
Any idea why coverage/coveralls is still pending?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,211,2017-05-05T09:53:44Z,2017-05-11T16:10:09Z,2017-10-09T16:16:40Z,MERGED,True,159,143,17,https://github.com/karel-m,Windows: fix various compiler warnings,8,[],https://github.com/libtom/libtomcrypt/pull/211,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/211#issuecomment-300281172,,"Any idea why coverage/coveralls is still pending?

lemurheavy/coveralls-public#967",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,211,2017-05-05T09:53:44Z,2017-05-11T16:10:09Z,2017-10-09T16:16:40Z,MERGED,True,159,143,17,https://github.com/karel-m,Windows: fix various compiler warnings,8,[],https://github.com/libtom/libtomcrypt/pull/211,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/211#issuecomment-300556739,,"mingw + gcc 7.1 with -Wall -Wextra thows many misleading-indentation warnings:
gcc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Wall -Wextra -Isrc/headers -Itestprof -DLTC_SOURCE -c testprof/der_tests.c -o testprof/der_tests.o
testprof/der_tests.c: In function 'der_tests':
testprof/der_tests.c:1169:13: warning: this 'for' clause does not guard... [-Wmisleading-indentation]
             for (zz = 0; zz < z; zz++) fprintf(stderr, ""%02x "", buf[2][zz]); fprintf(stderr, ""\n"");
             ^~~
testprof/der_tests.c:1169:78: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'for'
             for (zz = 0; zz < z; zz++) fprintf(stderr, ""%02x "", buf[2][zz]); fprintf(stderr, ""\n"");
                                                                              ^~~~~~~
testprof/der_tests.c:1170:13: warning: this 'for' clause does not guard... [-Wmisleading-indentation]
             for (z = 0; z < x; z++) fprintf(stderr, ""%02x "", buf[0][z]); fprintf(stderr, ""\n"");
             ^~~
testprof/der_tests.c:1170:74: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'for'
             for (z = 0; z < x; z++) fprintf(stderr, ""%02x "", buf[0][z]); fprintf(stderr, ""\n"");
                                                                          ^~~~~~~
testprof/der_tests.c:1171:13: warning: this 'for' clause does not guard... [-Wmisleading-indentation]
             for (z = 0; z < y; z++) fprintf(stderr, ""%02x "", buf[1][z]); fprintf(stderr, ""\n"");
             ^~~
testprof/der_tests.c:1171:74: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'for'
             for (z = 0; z < y; z++) fprintf(stderr, ""%02x "", buf[1][z]); fprintf(stderr, ""\n"");
                                                                          ^~~~~~~
testprof/der_tests.c:1283:11: warning: this 'for' clause does not guard... [-Wmisleading-indentation]
           for (x = 0; x < z; x++) fprintf(stderr, ""%lu\n"", oid[0][x]); fprintf(stderr, ""\n\n Got \n\n"");
           ^~~
testprof/der_tests.c:1283:72: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'for'
           for (x = 0; x < z; x++) fprintf(stderr, ""%lu\n"", oid[0][x]); fprintf(stderr, ""\n\n Got \n\n"");
                                                                        ^~~~~~~
testprof/der_tests.c:1333:1: warning: this 'for' clause does not guard... [-Wmisleading-indentation]
 for (y = 0; y < x; y++) fprintf(stderr, ""%02x "", buf[0][y]); printf(""\n"");
 ^~~
testprof/der_tests.c:1333:62: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'for'
 for (y = 0; y < x; y++) fprintf(stderr, ""%02x "", buf[0][y]); printf(""\n"");
                                                              ^~~~~~
testprof/der_tests.c:1363:1: warning: this 'for' clause does not guard... [-Wmisleading-indentation]
 for (y = 0; y < x; y++) fprintf(stderr, ""%02x "", buf[0][y]); printf(""\n"");
 ^~~
testprof/der_tests.c:1363:62: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'for'
 for (y = 0; y < x; y++) fprintf(stderr, ""%02x "", buf[0][y]); printf(""\n"");
                                                              ^~~~~~
testprof/der_tests.c:1397:9: warning: this 'for' clause does not guard... [-Wmisleading-indentation]
         for (y = 0; y < x; y++) fprintf(stderr, ""%02x "", (unsigned)utf8_buf[y]); fprintf(stderr, ""\n"");
         ^~~
testprof/der_tests.c:1397:82: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'for'
         for (y = 0; y < x; y++) fprintf(stderr, ""%02x "", (unsigned)utf8_buf[y]); fprintf(stderr, ""\n"");
                                                                                  ^~~~~~~
testprof/der_tests.c:1405:9: warning: this 'for' clause does not guard... [-Wmisleading-indentation]
         for (x = 0; x < y; x++) fprintf(stderr, ""%04lx "", (unsigned long)utf8_out[x]); fprintf(stderr, ""\n"");
         ^~~
testprof/der_tests.c:1405:88: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'for'
         for (x = 0; x < y; x++) fprintf(stderr, ""%04lx "", (unsigned long)utf8_out[x]); fprintf(stderr, ""\n"");
                                                                                        ^~~~~~~
testprof/der_tests.c:1414:9: warning: this 'for' clause does not guard... [-Wmisleading-indentation]
         for (y = 0; y < x; y++) fprintf(stderr, ""%02x "", (unsigned)utf8_buf[y]); fprintf(stderr, ""\n"");
         ^~~
testprof/der_tests.c:1414:82: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'for'
         for (y = 0; y < x; y++) fprintf(stderr, ""%02x "", (unsigned)utf8_buf[y]); fprintf(stderr, ""\n"");
                                                                                  ^~~~~~~
testprof/der_tests.c:1422:9: warning: this 'for' clause does not guard... [-Wmisleading-indentation]
         for (x = 0; x < y; x++) fprintf(stderr, ""%04lx "", (unsigned long)utf8_out[x]); fprintf(stderr, ""\n"");
         ^~~
testprof/der_tests.c:1422:88: note: ...this statement, but the latter is misleadingly indented as if it were guarded by the 'for'
         for (x = 0; x < y; x++) fprintf(stderr, ""%04lx "", (unsigned long)utf8_out[x]); fprintf(stderr, ""\n"");
                                                                                        ^~~~~~~

fixed by recently pushed commit",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,214,2017-05-08T16:17:47Z,2017-05-11T17:29:47Z,2017-10-09T16:16:12Z,CLOSED,False,1,1,1,https://github.com/sjaeckel,use codecov.io instead of coveralls for code coverage,1,[],https://github.com/libtom/libtomcrypt/pull/214,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/214,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,214,2017-05-08T16:17:47Z,2017-05-11T17:29:47Z,2017-10-09T16:16:12Z,CLOSED,False,1,1,1,https://github.com/sjaeckel,use codecov.io instead of coveralls for code coverage,1,[],https://github.com/libtom/libtomcrypt/pull/214,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/214#issuecomment-300860398,,not needed for now with the latest changes where we're able to re-use the lcov info to feed coveralls,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,215,2017-05-09T19:44:33Z,2017-05-10T17:36:20Z,2017-10-09T16:16:40Z,MERGED,True,6,10,3,https://github.com/karel-m,Another fixes related to  #199,3,[],https://github.com/libtom/libtomcrypt/pull/215,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/215,see #199,see #199,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,218,2017-05-11T18:37:51Z,2017-05-11T20:55:40Z,2017-06-27T12:19:09Z,MERGED,True,12,8,7,https://github.com/karel-m,Clang static analyzer warnings/errors - related to #217,1,[],https://github.com/libtom/libtomcrypt/pull/218,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/218,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/219,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.","I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/219#issuecomment-301400350,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.","Copy of my comments from another issue:
ad common.c and related stuff
Most of all I do not like the way we already mix 3 IMO separate things:

the library
the tests
the utilities/demos

The proposed common.(c|h) makes IMO tests and demos even more (inter)linked.
In my opinion:

If you look at x86_prof.c it already is a set of misc functions shared by several *_test.c files. So perhaps we can rename it  to common.c and add some extra stuff, maybe also merge test_driver.c into the new common.c.
The library (== ./src/) should be just a library (== all that goes to libtomcrypt.a). As I mentioned somewhere else I do not like having <whatever>_test function in ""production"" .a library
For example I do not like the part #if defined(LTC_TEST) && defined(LTC_TEST_DBG) in tomcrypt_misc.h - this kind of stuff should be only in testprof/tomcrypt_test.h and all <whatever>_test.c files should include tomcrypt_test.h.
Simply all test stuff should go to libtomcrypt_prof.a and should be declared in tomcrypt_test.h and ideally should be located in ./testprof/ (we might consider renaming all of them to ./tests/ + libtomcrypt_tests.a + libtomcrypt_tests.h) - all of those should be used only for make test && ./test (libtomcrypt_prof.a should not be installed, not even as a separate target make install_test)
Therefore I also think that ./demos/test.c + ./demos/timing.c should better be placed in ./testprof/ not in ./demos/
I prefer the stuff in ./demos to be only simple utilities (mostly implemented in a single .c file) which are linked only with the main library (libtomcrypt.a), not with the test library, and do not use anything from ./testprof/ dir (namely tomcrypt_test.h)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/219#issuecomment-301415216,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.","If you look at x86_prof.c it already is a set of misc functions shared by several *_test.c files. So perhaps we can rename it  to common.c and add some extra stuff, maybe also merge test_driver.c into the new common.c.


Sure, sounds perfectly fine!
We'd have to find a compromise for the shared code parts of the demo's and the stuff in testprof/ (c.f. my answer to your last point)


The library (== ./src/) should be just a library (== all that goes to libtomcrypt.a). As I mentioned somewhere else I do not like having <whatever>_test function in ""production"" .a library


As I also already mentioned there, I'm totally against removing the self-test functionality of the algorithms from the production library.
Why? Sometimes it's simply required by standardization to run these tests on device start-up (IIRC e.g. PCI).


For example I do not like the part #if defined(LTC_TEST) && defined(LTC_TEST_DBG) in tomcrypt_misc.h - this kind of stuff should be only in testprof/tomcrypt_test.h and all <whatever>_test.c files should include tomcrypt_test.h.


True. As I'd prefer to have the self-tests inside the main lib I propose to move these two functions to the main lib as well. (Then we should also start to think about a list of exported symbols as done in tfm as I doubt it's useful to export print_hex() or we'd have a copy of print_hex() in the tests and declare it static in the main lib and only use it from compare_testvector()).


Simply all test stuff should go to libtomcrypt_prof.a and should be declared in tomcrypt_test.h and ideally should be located in ./testprof/ (we might consider renaming all of them to ./tests/ + libtomcrypt_tests.a + libtomcrypt_tests.h) - all of those should be used only for make test && ./test (libtomcrypt_prof.a should not be installed, not even as a separate target make install_test)


Also sounds perfectly fine.


Therefore I also think that ./demos/test.c + ./demos/timing.c should better be placed in ./testprof/ not in ./demos/


True, I thought the same multiple times.


I prefer the stuff in ./demos to be only simple utilities (mostly implemented in a single .c file) which are linked only with the main library (libtomcrypt.a), not with the test library, and do not use anything from ./testprof/ dir (namely tomcrypt_test.h)


Also very true. I still think that a common part could be useful to share code like the registration of ciphers, but I don't think it'd be useful to add something like crypt_register_all_ciphers() to the main library as it's simply not required for the applications that use the library.
And some additions:

I thought about removing libtomcrypt_prof.a as it's only used by demo and timing and we could simply link the two binaries against the sources of the tests (then we could also think about leaving make install_test as it'd only additionally install the two binaries).
Removing the self-tests is currently not a way to go as:

all algorithms have the test() functions in their descriptors and if we remove the functionality from the library we should also remove these functions from the descriptors which would break API/ABI more than we want for now, yadda yadda
if we work hard to code something together I could think of a way to have either a libtomcrypt_testable.a which has the same (or similar) descriptors as the current version or a second libtomcrypt_tests.a which provides only the self-tests and still has a useable API (e.g. int crypt_test_cipher(ltc_cipher_descriptor*) but TBH I don't like it as:
a. I think it tears core-functionality apart which should be together (the algorithms and the self-tests) and if someone wants the library without self-tests, well then he should re-build it like that.
b. providing crypt_test_cipher() instead of having the tests inside the descriptor means we'd solve dependency-resolving by code and not by structure and that's against the nature of computing in my opinion",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/219#issuecomment-306550734,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.","For example I do not like the part #if defined(LTC_TEST) && defined(LTC_TEST_DBG) in tomcrypt_misc.h - this kind of stuff should be only in testprof/tomcrypt_test.h and all <whatever>_test.c files should include tomcrypt_test.h.


True. As I'd prefer to have the self-tests inside the main lib I propose to move these two functions to the main lib as well. (Then we should also start to think about a list of exported symbols as done in tfm as I doubt it's useful to export print_hex() or we'd have a copy of print_hex() in the tests and declare it static in the main lib and only use it from compare_testvector()).


Moved compare_testvector() to misc and duplicated print_hex().




Simply all test stuff should go to libtomcrypt_prof.a and should be declared in tomcrypt_test.h and ideally should be located in ./testprof/ (we might consider renaming all of them to ./tests/ + libtomcrypt_tests.a + libtomcrypt_tests.h) - all of those should be used only for make test && ./test (libtomcrypt_prof.a should not be installed, not even as a separate target make install_test)


Also sounds perfectly fine.


Therefore I also think that ./demos/test.c + ./demos/timing.c should better be placed in ./testprof/ not in ./demos/


True, I thought the same multiple times.


I prefer the stuff in ./demos to be only simple utilities (mostly implemented in a single .c file) which are linked only with the main library (libtomcrypt.a), not with the test library, and do not use anything from ./testprof/ dir (namely tomcrypt_test.h)


Also very true. I still think that a common part could be useful to share code like the registration of ciphers, but I don't think it'd be useful to add something like crypt_register_all_ciphers() to the main library as it's simply not required for the applications that use the library.
And some additions:

I thought about removing libtomcrypt_prof.a as it's only used by demo and timing and we could simply link the two binaries against the sources of the tests (then we could also think about leaving make install_test as it'd only additionally install the two binaries).



Renamed ./testprof/ to ./tests/
Moved all timing tests to demo/timing.c
Removed libtomcrypt_prof library and simply link all tests together

Additionally

Added a build-run with debugging options enabled",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/219#issuecomment-306882004,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.",What about renaming der_tests > der_test to keep *_test names consistent?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/219#issuecomment-306883019,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.",Sure,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/219#issuecomment-306883086,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.","Ad ecc_test:

we have tests/ecc_test.c but it contains int ecc_tests(void) { return CRYPT_NOP; }
then we have src/pk/ecc/ecc_test.c which contains int ecc_test(void)

I am for moving all ECC tests to tests/ecc_test.c",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/219#issuecomment-306916753,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.","Ad compare_testvector
The following part of ccm_test.c should be IMO converted to compare_testvector
      if (XMEMCMP(buf, tests[x].ct, tests[x].ptlen)) {
#if defined(LTC_TEST_DBG)
         printf(""\n%d: x=%lu y=%lu\n"", __LINE__, x, y);
         print_hex(""ct is    "", buf, tests[x].ptlen);
         print_hex(""ct should"", tests[x].ct, tests[x].ptlen);
#endif
         return CRYPT_FAIL_TESTVECTOR;
      }
Similarly in hmac_test.c
        if(XMEMCMP(digest, cases[i].digest, (size_t)hash_descriptor[hash].hashsize) != 0)  {
            failed++;
#ifdef LTC_TEST_DBG
          {
            printf(""\nHMAC-%s test %s: Failed\n"", cases[i].algo, cases[i].num);
            print_hex(""is"", digest, hash_descriptor[hash].hashsize);
            print_hex(""should"", cases[i].digest, hash_descriptor[hash].hashsize);
            return CRYPT_FAIL_TESTVECTOR;
          } 
And pkcs_5_test.c
        else if(XMEMCMP(DK, cases_5_2[i].DK, (size_t)cases_5_2[i].dkLen) != 0) {
            printf(""\nPKCS#5_2 test #%d: Failed/3\n"", i);
#ifdef LTC_TEST_DBG
            print_hex(""is"", DK, cases_5_2[i].dkLen);
            print_hex(""should"", cases_5_2[i].DK, cases_5_2[i].dkLen);
#endif
            ++failed; 

And xts_test.c
            if (XMEMCMP(OUT, tests[i].CTX, tests[i].PTLEN)) {
#ifdef LTC_TEST_DBG
               printf(""\nTestcase #%d with original length %lu and half of it ""
                      ""%lu\n"",
                      i, tests[i].PTLEN, len);
               printf(""\nencrypt\n"");
               print_hex(""should"", tests[i].CTX, tests[i].PTLEN);
               print_hex(""is"", OUT, tests[i].PTLEN);
#endif 

And rsa_test.c
   if (len != sizeof(openssl_public_rsa) || memcmp(buf, openssl_public_rsa, len)) {
      fprintf(stderr, ""RSA(public) SSL public X.509 export failed to match OpenSSL output\n"");
      print_hex(""should"", openssl_public_rsa, sizeof(openssl_public_rsa));
      print_hex(""is"", buf, len);
      return 1;
   } 
And base64_test.c probably can be without print_hex as compare_testvector already has printing capabilities
   if (compare_testvector(tmp, l2, in, l2, ""relaxed base64 decoding"", -1)) {
       print_hex(""input "", out, l1);
       return 1;
   } 
In the end there is no reason to use print_hex from ./src/* and it can be left out from tomcrypt_misc.h.
On top of that I would change the corresponding part of tomcrypt_misc.h to simple:
int compare_testvector(const void* is, const unsigned long is_len, const void* should, const unsigned long should_len, const char* what, int which); 
And move all #if .. magic to compare_testvector.c like:
int compare_testvector(const void* is, const unsigned long is_len, const void* should, const unsigned long should_len, const char* what, int which)
{
   int res = 0;
   if(is_len != should_len)
      res = is_len > should_len ? -1 : 1;
   else
      res = XMEMCMP(is, should, MAX(is_len, should_len));

#if defined(LTC_TEST) && defined(LTC_TEST_DBG) 
   if (res != 0) {
      fprintf(stderr, ""Testvector #%i of %s failed:\n"", which, what);
      _print_hex(""SHOULD"", should, should_len);
      _print_hex(""IS    "", is, is_len);
   }
#endif

   return res;
}",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/219#issuecomment-306917998,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.","Just a summary why I do not like using tests/common.c + tests/common.h from demo/*.c

I consider tests/* to be something we need to run the test suite
Whereas demo/* is something we have prepared for our users to quickly get the basic idea how to use libtomcrypt
I would prefer to have in demo/*.c only C files, which can be compiled and linked with ""pure"" libtomcrypt (+libtommath)
The files demo/*.c should be something that anybody can just copy & paste & hack and quickly have some working code (which we made a bit complicated)

I do not like it, but it is not a blocker for me. I only want you to know :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/219#issuecomment-306918389,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.","Ad crypt_register_all_ciphers mentioned earlier in this thread

it might be (sometimes) handy
see https://metacpan.org/source/MIK/CryptX-0.047/CryptX.xs#L287",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/sjaeckel,11,https://github.com/libtom/libtomcrypt/pull/219#issuecomment-306926942,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.","Ad ecc_test:
...
I am for moving all ECC tests to tests/ecc_test.c

We shouldn't do that as we said we'd like to keep compatibility at a max and that would remove an existing API function. Also it's not the case that tests/ecc_test.c only invokes the tests from src/pk/ecc/ecc_test.c but extends them.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/219#issuecomment-307069929,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.","Ad compare_testvector

Removed all invocations of print_hex() in the library and made compare_testvector() always a function


I would prefer to have in demo/*.c only C files, which can be compiled and linked with ""pure"" libtomcrypt (+libtommath)
The files demo/*.c should be something that anybody can just copy & paste & hack and quickly have some working code (which we made a bit complicated)


These points got me, cleaned it up.

Ad crypt_register_all_ciphers mentioned earlier in this thread

Added register_all_{ciphers,hashes,prngs}()",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,219,2017-05-12T10:35:51Z,2017-06-08T21:30:28Z,2017-06-08T21:30:31Z,MERGED,True,3080,2746,73,https://github.com/sjaeckel,Introduce testprof/common.c,30,['enhancement'],https://github.com/libtom/libtomcrypt/pull/219,https://github.com/sjaeckel,13,https://github.com/libtom/libtomcrypt/pull/219#issuecomment-307070189,"I introduced testprof/common.c which is included in the test library and can also be used by the demos.
The target was to remove duplicate code from the demos and tests.",FYI I modified all the posix-make usages again as $? doesn't exactly behave as I thought...,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,220,2017-05-21T15:06:44Z,2017-05-22T19:50:04Z,2017-06-27T12:19:09Z,MERGED,True,110,138,20,https://github.com/ksherlock,replace XMEMCMP with compare_testvector,2,[],https://github.com/libtom/libtomcrypt/pull/220,https://github.com/ksherlock,1,https://github.com/libtom/libtomcrypt/pull/220,plus some other minor consistency changes in the hash testing code.,plus some other minor consistency changes in the hash testing code.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,221,2017-05-22T17:59:54Z,2017-05-24T07:46:03Z,2017-06-27T12:19:09Z,MERGED,True,1,1,1,https://github.com/ksherlock,echo -n portability,1,[],https://github.com/libtom/libtomcrypt/pull/221,https://github.com/ksherlock,1,https://github.com/libtom/libtomcrypt/pull/221,"There seem to be two theories on  preventing echo from printing a trailing newline; -n or \c embedded at the end of the text (possibly with a -e to activate it).

OS X sh: \c (sh is actually bash, but behavior is different due to compile time configuration and the POSIXLY_CORRECT environment variable
OS X bash: -e \c or -n
OS X /bin/echo: -n
AIX sh: \c
AIX /bin/echo: \c
Linux sh: -e \c or -n
Linux /bin/echo -e \c or -n

The OS X/BSD man page recommends using printf (which is available on AIX, OS X, and Linux) to avoid newlines.","There seem to be two theories on  preventing echo from printing a trailing newline; -n or \c embedded at the end of the text (possibly with a -e to activate it).

OS X sh: \c (sh is actually bash, but behavior is different due to compile time configuration and the POSIXLY_CORRECT environment variable
OS X bash: -e \c or -n
OS X /bin/echo: -n
AIX sh: \c
AIX /bin/echo: \c
Linux sh: -e \c or -n
Linux /bin/echo -e \c or -n

The OS X/BSD man page recommends using printf (which is available on AIX, OS X, and Linux) to avoid newlines.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,221,2017-05-22T17:59:54Z,2017-05-24T07:46:03Z,2017-06-27T12:19:09Z,MERGED,True,1,1,1,https://github.com/ksherlock,echo -n portability,1,[],https://github.com/libtom/libtomcrypt/pull/221,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/221#issuecomment-303202611,"There seem to be two theories on  preventing echo from printing a trailing newline; -n or \c embedded at the end of the text (possibly with a -e to activate it).

OS X sh: \c (sh is actually bash, but behavior is different due to compile time configuration and the POSIXLY_CORRECT environment variable
OS X bash: -e \c or -n
OS X /bin/echo: -n
AIX sh: \c
AIX /bin/echo: \c
Linux sh: -e \c or -n
Linux /bin/echo -e \c or -n

The OS X/BSD man page recommends using printf (which is available on AIX, OS X, and Linux) to avoid newlines.","can you please rebase & force-push
btw. I gave you write-access to the repo, you can push directly to the libtom repo instead of your fork if you want to open another PR!
Then I could now just do the rebase for you and merge directly :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,221,2017-05-22T17:59:54Z,2017-05-24T07:46:03Z,2017-06-27T12:19:09Z,MERGED,True,1,1,1,https://github.com/ksherlock,echo -n portability,1,[],https://github.com/libtom/libtomcrypt/pull/221,https://github.com/ksherlock,3,https://github.com/libtom/libtomcrypt/pull/221#issuecomment-303225995,"There seem to be two theories on  preventing echo from printing a trailing newline; -n or \c embedded at the end of the text (possibly with a -e to activate it).

OS X sh: \c (sh is actually bash, but behavior is different due to compile time configuration and the POSIXLY_CORRECT environment variable
OS X bash: -e \c or -n
OS X /bin/echo: -n
AIX sh: \c
AIX /bin/echo: \c
Linux sh: -e \c or -n
Linux /bin/echo -e \c or -n

The OS X/BSD man page recommends using printf (which is available on AIX, OS X, and Linux) to avoid newlines.","It's been re-based and re-pushed.  I'll try pushing directly next time.
Thanks.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,217,2017-05-22T21:14:30Z,2017-06-14T07:19:20Z,2017-10-09T16:16:12Z,MERGED,True,37,7,3,https://github.com/sjaeckel,Travis-CI: clang static analyzer,12,['enhancement'],https://github.com/libtom/libtomcrypt/pull/217,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/217,"lulz @ the conversion from issue to PR
... it changes the author of the initial comment... @karel-m wrote all this...
------------------
Although I am not sure how to do it I believe that it might be possible to utilize clang static analyzer in our automated travis builds.
Manually you can start it like:
scan-build make -f makefile.unix all

Current develop throws following warnings
/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/ciphers/anubis.o   -c -o src/ciphers/anubis.o src/ciphers/anubis.c
src/ciphers/anubis.c:1001:27: warning: The left operand of '^' is a garbage value
      kappa[0] = inter[0] ^ rc[r];
                 ~~~~~~~~ ^
1 warning generated.

/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/encauth/ccm/ccm_memory.o   -c -o src/encauth/ccm/ccm_memory.o src/encauth/ccm/ccm_memory.c
src/encauth/ccm/ccm_memory.c:148:17: warning: Call to 'malloc' has an allocation size of 0 bytes
      pt_work = XMALLOC(ptlen);
                ^~~~~~~~~~~~~~
./src/headers/tomcrypt_custom.h:6:18: note: expanded from macro 'XMALLOC'
#define XMALLOC  malloc
                 ^
1 warning generated.

/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/pk/asn1/der/utctime/der_decode_utctime.o   -c -o src/pk/asn1/der/utctime/der_decode_utctime.o src/pk/asn1/der/utctime/der_decode_utctime.c
src/pk/asn1/der/utctime/der_decode_utctime.c:88:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->YY, 100);
    ^~~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:9: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
        ^~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:88:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->YY, 100);
    ^~~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:34: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
                                 ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:89:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->MM, 13);
    ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:9: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
        ^~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:89:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->MM, 13);
    ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:34: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
                                 ^~~~~~~~~~~~~~~~~~~~~
4 warnings generated.","lulz @ the conversion from issue to PR
... it changes the author of the initial comment... @karel-m wrote all this...
------------------
Although I am not sure how to do it I believe that it might be possible to utilize clang static analyzer in our automated travis builds.
Manually you can start it like:
scan-build make -f makefile.unix all

Current develop throws following warnings
/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/ciphers/anubis.o   -c -o src/ciphers/anubis.o src/ciphers/anubis.c
src/ciphers/anubis.c:1001:27: warning: The left operand of '^' is a garbage value
      kappa[0] = inter[0] ^ rc[r];
                 ~~~~~~~~ ^
1 warning generated.

/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/encauth/ccm/ccm_memory.o   -c -o src/encauth/ccm/ccm_memory.o src/encauth/ccm/ccm_memory.c
src/encauth/ccm/ccm_memory.c:148:17: warning: Call to 'malloc' has an allocation size of 0 bytes
      pt_work = XMALLOC(ptlen);
                ^~~~~~~~~~~~~~
./src/headers/tomcrypt_custom.h:6:18: note: expanded from macro 'XMALLOC'
#define XMALLOC  malloc
                 ^
1 warning generated.

/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/pk/asn1/der/utctime/der_decode_utctime.o   -c -o src/pk/asn1/der/utctime/der_decode_utctime.o src/pk/asn1/der/utctime/der_decode_utctime.c
src/pk/asn1/der/utctime/der_decode_utctime.c:88:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->YY, 100);
    ^~~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:9: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
        ^~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:88:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->YY, 100);
    ^~~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:34: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
                                 ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:89:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->MM, 13);
    ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:9: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
        ^~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:89:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->MM, 13);
    ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:34: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
                                 ^~~~~~~~~~~~~~~~~~~~~
4 warnings generated.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,217,2017-05-22T21:14:30Z,2017-06-14T07:19:20Z,2017-10-09T16:16:12Z,MERGED,True,37,7,3,https://github.com/sjaeckel,Travis-CI: clang static analyzer,12,['enhancement'],https://github.com/libtom/libtomcrypt/pull/217,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/217#issuecomment-300872626,"lulz @ the conversion from issue to PR
... it changes the author of the initial comment... @karel-m wrote all this...
------------------
Although I am not sure how to do it I believe that it might be possible to utilize clang static analyzer in our automated travis builds.
Manually you can start it like:
scan-build make -f makefile.unix all

Current develop throws following warnings
/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/ciphers/anubis.o   -c -o src/ciphers/anubis.o src/ciphers/anubis.c
src/ciphers/anubis.c:1001:27: warning: The left operand of '^' is a garbage value
      kappa[0] = inter[0] ^ rc[r];
                 ~~~~~~~~ ^
1 warning generated.

/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/encauth/ccm/ccm_memory.o   -c -o src/encauth/ccm/ccm_memory.o src/encauth/ccm/ccm_memory.c
src/encauth/ccm/ccm_memory.c:148:17: warning: Call to 'malloc' has an allocation size of 0 bytes
      pt_work = XMALLOC(ptlen);
                ^~~~~~~~~~~~~~
./src/headers/tomcrypt_custom.h:6:18: note: expanded from macro 'XMALLOC'
#define XMALLOC  malloc
                 ^
1 warning generated.

/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/pk/asn1/der/utctime/der_decode_utctime.o   -c -o src/pk/asn1/der/utctime/der_decode_utctime.o src/pk/asn1/der/utctime/der_decode_utctime.c
src/pk/asn1/der/utctime/der_decode_utctime.c:88:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->YY, 100);
    ^~~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:9: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
        ^~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:88:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->YY, 100);
    ^~~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:34: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
                                 ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:89:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->MM, 13);
    ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:9: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
        ^~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:89:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->MM, 13);
    ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:34: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
                                 ^~~~~~~~~~~~~~~~~~~~~
4 warnings generated.","Another warnings in tests
rsa_test.c:533:6: warning: Value stored to 'cnt' is never read
     cnt = rsa_get_size(&key);
     ^     ~~~~~~~~~~~~~~~~~~

x86_prof.c:1489:7: warning: Potential leak of memory pointed to by 'buf'
      fprintf(stderr, ""Warning the MAC tests requires AES and SHA1 to operate... so sorry\n"");
      ^~~~~~~",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,217,2017-05-22T21:14:30Z,2017-06-14T07:19:20Z,2017-10-09T16:16:12Z,MERGED,True,37,7,3,https://github.com/sjaeckel,Travis-CI: clang static analyzer,12,['enhancement'],https://github.com/libtom/libtomcrypt/pull/217,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/217#issuecomment-300875648,"lulz @ the conversion from issue to PR
... it changes the author of the initial comment... @karel-m wrote all this...
------------------
Although I am not sure how to do it I believe that it might be possible to utilize clang static analyzer in our automated travis builds.
Manually you can start it like:
scan-build make -f makefile.unix all

Current develop throws following warnings
/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/ciphers/anubis.o   -c -o src/ciphers/anubis.o src/ciphers/anubis.c
src/ciphers/anubis.c:1001:27: warning: The left operand of '^' is a garbage value
      kappa[0] = inter[0] ^ rc[r];
                 ~~~~~~~~ ^
1 warning generated.

/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/encauth/ccm/ccm_memory.o   -c -o src/encauth/ccm/ccm_memory.o src/encauth/ccm/ccm_memory.c
src/encauth/ccm/ccm_memory.c:148:17: warning: Call to 'malloc' has an allocation size of 0 bytes
      pt_work = XMALLOC(ptlen);
                ^~~~~~~~~~~~~~
./src/headers/tomcrypt_custom.h:6:18: note: expanded from macro 'XMALLOC'
#define XMALLOC  malloc
                 ^
1 warning generated.

/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/pk/asn1/der/utctime/der_decode_utctime.o   -c -o src/pk/asn1/der/utctime/der_decode_utctime.o src/pk/asn1/der/utctime/der_decode_utctime.c
src/pk/asn1/der/utctime/der_decode_utctime.c:88:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->YY, 100);
    ^~~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:9: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
        ^~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:88:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->YY, 100);
    ^~~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:34: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
                                 ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:89:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->MM, 13);
    ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:9: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
        ^~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:89:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->MM, 13);
    ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:34: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
                                 ^~~~~~~~~~~~~~~~~~~~~
4 warnings generated.","And in demos
   * /usr/bin/../libexec/ccc-analyzer demos/tv_gen.o
demos/tv_gen.c:738:29: warning: Division by zero
             key[z] = tag[z % len];
                          ~~^~~~~

   * /usr/bin/../libexec/ccc-analyzer demos/hashsum.o
In file included from ./src/headers/tomcrypt.h:9:0,
                 from demos/hashsum.c:10:
demos/hashsum.c: In function ‘check_file’:
demos/hashsum.c:107:16: error: array subscript has type ‘char’ [-Werror=char-subscripts]
             if(iscntrl(space[n])) {
                ^",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,217,2017-05-22T21:14:30Z,2017-06-14T07:19:20Z,2017-10-09T16:16:12Z,MERGED,True,37,7,3,https://github.com/sjaeckel,Travis-CI: clang static analyzer,12,['enhancement'],https://github.com/libtom/libtomcrypt/pull/217,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/217#issuecomment-300914983,"lulz @ the conversion from issue to PR
... it changes the author of the initial comment... @karel-m wrote all this...
------------------
Although I am not sure how to do it I believe that it might be possible to utilize clang static analyzer in our automated travis builds.
Manually you can start it like:
scan-build make -f makefile.unix all

Current develop throws following warnings
/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/ciphers/anubis.o   -c -o src/ciphers/anubis.o src/ciphers/anubis.c
src/ciphers/anubis.c:1001:27: warning: The left operand of '^' is a garbage value
      kappa[0] = inter[0] ^ rc[r];
                 ~~~~~~~~ ^
1 warning generated.

/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/encauth/ccm/ccm_memory.o   -c -o src/encauth/ccm/ccm_memory.o src/encauth/ccm/ccm_memory.c
src/encauth/ccm/ccm_memory.c:148:17: warning: Call to 'malloc' has an allocation size of 0 bytes
      pt_work = XMALLOC(ptlen);
                ^~~~~~~~~~~~~~
./src/headers/tomcrypt_custom.h:6:18: note: expanded from macro 'XMALLOC'
#define XMALLOC  malloc
                 ^
1 warning generated.

/usr/bin/../libexec/ccc-analyzer -c -I./testprof/ -I./src/headers/ -DLTC_SOURCE -O2  -o src/pk/asn1/der/utctime/der_decode_utctime.o   -c -o src/pk/asn1/der/utctime/der_decode_utctime.o src/pk/asn1/der/utctime/der_decode_utctime.c
src/pk/asn1/der/utctime/der_decode_utctime.c:88:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->YY, 100);
    ^~~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:9: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
        ^~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:88:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->YY, 100);
    ^~~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:34: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
                                 ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:89:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->MM, 13);
    ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:9: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
        ^~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:89:5: warning: Function call argument is an uninitialized value
    DECODE_V(out->MM, 13);
    ^~~~~~~~~~~~~~~~~~~~~
src/pk/asn1/der/utctime/der_decode_utctime.c:38:34: note: expanded from macro 'DECODE_V'
   y  = char_to_int(buf[x])*10 + char_to_int(buf[x+1]); \
                                 ^~~~~~~~~~~~~~~~~~~~~
4 warnings generated.",Warnings fixed and fixes merged to develop but I am leaving this issue open as we might want to try to add scan-build make .. to travis. IMO it would be better to merge improve/makefiles first.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,222,2017-05-29T13:00:16Z,2017-05-29T16:18:58Z,2017-06-27T12:19:09Z,MERGED,True,2,2,1,https://github.com/bmwiedemann,sort input files,1,[],https://github.com/libtom/libtomcrypt/pull/222,https://github.com/bmwiedemann,1,https://github.com/libtom/libtomcrypt/pull/222,"when building packages (e.g. for openSUSE Linux)
(random) filesystem order of input files
influences ordering of functions in the output,
thus without the patch, builds (in disposable VMs) would differ.
See https://reproducible-builds.org/ for why this matters.","when building packages (e.g. for openSUSE Linux)
(random) filesystem order of input files
influences ordering of functions in the output,
thus without the patch, builds (in disposable VMs) would differ.
See https://reproducible-builds.org/ for why this matters.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,224,2017-06-08T20:26:10Z,2017-06-09T12:13:04Z,2017-06-09T12:13:07Z,MERGED,True,2,4,2,https://github.com/karel-m,Do not expose dsa_make_params as a public API,1,[],https://github.com/libtom/libtomcrypt/pull/224,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/224,see #154,see #154,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,225,2017-06-08T21:10:42Z,2017-06-12T15:12:33Z,2017-06-12T15:22:07Z,MERGED,True,352,186,5,https://github.com/karel-m,Better DH primes,11,[],https://github.com/libtom/libtomcrypt/pull/225,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/225,see #114,see #114,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,225,2017-06-08T21:10:42Z,2017-06-12T15:12:33Z,2017-06-12T15:22:07Z,MERGED,True,352,186,5,https://github.com/karel-m,Better DH primes,11,[],https://github.com/libtom/libtomcrypt/pull/225,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/225#issuecomment-307438548,see #114,"Always when I looked at that code I stumble over the part #ifdef FAST_PK...
I then remembered that the key exchange with private keys sized the same as the ""group in use"" takes literally forever.
Here are some rough before-after figures of the patch...
old:
DH- 768 make_key    took         1163691 cycles
DH- 768 encrypt_key took         2282943 cycles
DH-1024 make_key    took         2643969 cycles
DH-1024 encrypt_key took         5262858 cycles
DH-1536 make_key    took         6996373 cycles
DH-1536 encrypt_key took        13618535 cycles
DH-2048 make_key    took        15096687 cycles
DH-2048 encrypt_key took        29983803 cycles
DH-3072 make_key    took        44939087 cycles
DH-3072 encrypt_key took        88671579 cycles
DH-4096 make_key    took        98002323 cycles
DH-4096 encrypt_key took       198535119 cycles
DH-6144 make_key    took       319184797 cycles
DH-6144 encrypt_key took       641200605 cycles
DH-8192 make_key    took       733965242 cycles
DH-8192 encrypt_key took      1473450067 cycles

new:
DH- 768 make_key    took          311645 cycles
DH- 768 encrypt_key took          634360 cycles
DH-1024 make_key    took          586470 cycles
DH-1024 encrypt_key took         1045533 cycles
DH-1536 make_key    took          897783 cycles
DH-1536 encrypt_key took         1953797 cycles
DH-2048 make_key    took         1855046 cycles
DH-2048 encrypt_key took         3875457 cycles
DH-3072 make_key    took         4994607 cycles
DH-3072 encrypt_key took         9962571 cycles
DH-4096 make_key    took         7907908 cycles
DH-4096 encrypt_key took        16360227 cycles
DH-6144 make_key    took        20385462 cycles
DH-6144 encrypt_key took        40276083 cycles
DH-8192 make_key    took        36967311 cycles
DH-8192 encrypt_key took        80216481 cycles",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,225,2017-06-08T21:10:42Z,2017-06-12T15:12:33Z,2017-06-12T15:22:07Z,MERGED,True,352,186,5,https://github.com/karel-m,Better DH primes,11,[],https://github.com/libtom/libtomcrypt/pull/225,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/225#issuecomment-307440750,see #114,"regarding the removal of tom's old primes: I somehow liked them, especially since https://www.schneier.com/blog/archives/2015/10/breaking_diffie.html ...
...but to have a real mitigation for that we must provide a way to generate your own group at runtime which is currently not possible.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,225,2017-06-08T21:10:42Z,2017-06-12T15:12:33Z,2017-06-12T15:22:07Z,MERGED,True,352,186,5,https://github.com/karel-m,Better DH primes,11,[],https://github.com/libtom/libtomcrypt/pull/225,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/225#issuecomment-307443668,see #114,"I cherry-picked a8ec58f from #198
If you think that commit is wrong we can discuss that.
The duplicate commit will be dropped as soon as one of this PR and #198 is merged and the other is rebased on top.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,225,2017-06-08T21:10:42Z,2017-06-12T15:12:33Z,2017-06-12T15:22:07Z,MERGED,True,352,186,5,https://github.com/karel-m,Better DH primes,11,[],https://github.com/libtom/libtomcrypt/pull/225,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/225#issuecomment-307554864,see #114,"I think it would be better to rename keysize like this:
- int dh_make_key(prng_state *prng, int wprng, int keysize, dh_key *key)
+ int dh_make_key(prng_state *prng, int wprng, int groupsize, dh_key *key)
Next, I would simplify calculating the key size like this:
   switch (groupsize) {
      case 96:   keysize = 30; break;   /*  768-bit => key size 240-bit */
      case 128:  keysize = 30; break;   /* 1024-bit => key size 240-bit */
      case 192:  keysize = 30; break;   /* 1536-bit => key size 240-bit */
      case 256:  keysize = 40; break;   /* 2048-bit => key size 320-bit */
      case 384:  keysize = 52; break;   /* 3072-bit => key size 416-bit */
      case 512:  keysize = 60; break;   /* 4096-bit => key size 480-bit */
      case 768:  keysize = 67; break;   /* 6144-bit => key size 536-bit */
      case 1024: keysize = 77; break;   /* 8192-bit => key size 616-bit */
      default: return CRYPT_INVALID_KEYSIZE;
   }",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,225,2017-06-08T21:10:42Z,2017-06-12T15:12:33Z,2017-06-12T15:22:07Z,MERGED,True,352,186,5,https://github.com/karel-m,Better DH primes,11,[],https://github.com/libtom/libtomcrypt/pull/225,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/225#issuecomment-307554922,see #114,Fine by me,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,225,2017-06-08T21:10:42Z,2017-06-12T15:12:33Z,2017-06-12T15:22:07Z,MERGED,True,352,186,5,https://github.com/karel-m,Better DH primes,11,[],https://github.com/libtom/libtomcrypt/pull/225,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/225#issuecomment-307555281,see #114,While we are hacking on dh_make_key we should perhaps also fix #119,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,225,2017-06-08T21:10:42Z,2017-06-12T15:12:33Z,2017-06-12T15:22:07Z,MERGED,True,352,186,5,https://github.com/karel-m,Better DH primes,11,[],https://github.com/libtom/libtomcrypt/pull/225,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/225#issuecomment-307655568,see #114,@ltv511 could you please also review as you opened #119,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,225,2017-06-08T21:10:42Z,2017-06-12T15:12:33Z,2017-06-12T15:22:07Z,MERGED,True,352,186,5,https://github.com/karel-m,Better DH primes,11,[],https://github.com/libtom/libtomcrypt/pull/225,https://github.com/lukevalenta,9,https://github.com/libtom/libtomcrypt/pull/225#issuecomment-307775928,see #114,"@sjaeckel As long as only safe primes are used for DH key exchange in LTC (which is currently the case AFAIK), the added checks for 1 and p-1 should be sufficient!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,198,2017-06-08T21:31:55Z,2017-06-12T16:44:01Z,2017-10-09T16:16:11Z,MERGED,True,225,83,13,https://github.com/sjaeckel,Travis-CI: a new build with -DLTC_PTHREAD,11,[],https://github.com/libtom/libtomcrypt/pull/198,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/198,"This was originally raised by @karel-m but the issue to PR conversion changed the original author :-)
@sjaeckel could you please add a new travis build with defined -DLTC_PTHREAD, so that we at least basically test the MUTEX related code in prngs?","This was originally raised by @karel-m but the issue to PR conversion changed the original author :-)
@sjaeckel could you please add a new travis build with defined -DLTC_PTHREAD, so that we at least basically test the MUTEX related code in prngs?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,198,2017-06-08T21:31:55Z,2017-06-12T16:44:01Z,2017-10-09T16:16:11Z,MERGED,True,225,83,13,https://github.com/sjaeckel,Travis-CI: a new build with -DLTC_PTHREAD,11,[],https://github.com/libtom/libtomcrypt/pull/198,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/198#issuecomment-298171079,"This was originally raised by @karel-m but the issue to PR conversion changed the original author :-)
@sjaeckel could you please add a new travis build with defined -DLTC_PTHREAD, so that we at least basically test the MUTEX related code in prngs?","👍 good idea, I'll do that",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,198,2017-06-08T21:31:55Z,2017-06-12T16:44:01Z,2017-10-09T16:16:11Z,MERGED,True,225,83,13,https://github.com/sjaeckel,Travis-CI: a new build with -DLTC_PTHREAD,11,[],https://github.com/libtom/libtomcrypt/pull/198,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/198#issuecomment-304414556,"This was originally raised by @karel-m but the issue to PR conversion changed the original author :-)
@sjaeckel could you please add a new travis build with defined -DLTC_PTHREAD, so that we at least basically test the MUTEX related code in prngs?","done, waiting for #219",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,198,2017-06-08T21:31:55Z,2017-06-12T16:44:01Z,2017-10-09T16:16:11Z,MERGED,True,225,83,13,https://github.com/sjaeckel,Travis-CI: a new build with -DLTC_PTHREAD,11,[],https://github.com/libtom/libtomcrypt/pull/198,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/198#issuecomment-307814260,"This was originally raised by @karel-m but the issue to PR conversion changed the original author :-)
@sjaeckel could you please add a new travis build with defined -DLTC_PTHREAD, so that we at least basically test the MUTEX related code in prngs?",is this one fine?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,226,2017-06-09T08:03:58Z,2017-06-13T10:17:16Z,2017-06-13T10:17:16Z,MERGED,True,4,4,4,https://github.com/fperrad,some linting,3,[],https://github.com/libtom/libtomcrypt/pull/226,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/226,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,226,2017-06-09T08:03:58Z,2017-06-13T10:17:16Z,2017-06-13T10:17:16Z,MERGED,True,4,4,4,https://github.com/fperrad,some linting,3,[],https://github.com/libtom/libtomcrypt/pull/226,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/226#issuecomment-307857372,,"👍 @sjaeckel if you find it also OK, please do merge",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,226,2017-06-09T08:03:58Z,2017-06-13T10:17:16Z,2017-06-13T10:17:16Z,MERGED,True,4,4,4,https://github.com/fperrad,some linting,3,[],https://github.com/libtom/libtomcrypt/pull/226,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/226#issuecomment-307931315,,"Please rebase and I'll merge ASAP
and please push to this repo and not your fork the next time, then I could do the rebase for you",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,226,2017-06-09T08:03:58Z,2017-06-13T10:17:16Z,2017-06-13T10:17:16Z,MERGED,True,4,4,4,https://github.com/fperrad,some linting,3,[],https://github.com/libtom/libtomcrypt/pull/226,https://github.com/fperrad,4,https://github.com/libtom/libtomcrypt/pull/226#issuecomment-308019654,,rebased,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/227,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-308078871,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","How far can we go in breaking DH API? (currently only in develop for some time, not released yet)

As it wasn't in 1.17 we can do whatever is necessary

Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)

I guess that's why there's the library versionTM included in the header... but I doubt someone's using that functionality as DH was removed in 1.06. I'm not even sure if these functions make sense anymore... I think it'd be more useful to ex-/import the keys from/to a standard format...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-308090505,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","The question is what's the standard format for exporting/importing DH keys?

If we want to have our custom format I would prefer some simple ASN.1
sequence than the custom bignum dump we currently use in our DH code.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-308112864,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","For the public key we have SubjectPublicKeyInfo https://tools.ietf.org/html/rfc3279#section-2.3.3
For the private key I'd propose something like
Sequence {
  SubjectPublicKeyInfo publicKey
  Integer privateKey
}

I think we should also provide a way to import DHParam's as generated by OpenSSL at one point even if it's trivial :)
Sequence {
  Integer prime
  Integer group
}

If it's too much work, remove the ex-/import ;-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-308463550,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","Here is my proposal of new DH related formats:
1/ key format used by dh_export / dh_import
Considering the fact that we want to allow custom DH group params (via dh_make_key_ex) we also need to be able to export base + prime.
private key
   der_encode_sequence_multi(out, outlen,
                             LTC_ASN1_BIT_STRING, 1UL, flags,     /* flags[0] = 1 for type == PK_PRIVATE */
                             LTC_ASN1_INTEGER,    1UL, key->base,
                             LTC_ASN1_INTEGER,    1UL, key->prime,
                             LTC_ASN1_INTEGER,    1UL, key->x,    /* no need to export key->y as we can compute it during import */
                             LTC_ASN1_EOL,        0UL, NULL);
public key
   der_encode_sequence_multi(out, outlen,
                             LTC_ASN1_BIT_STRING, 1UL, flags,     /* flags[0] = 0 for type == PK_PUBLIC */
                             LTC_ASN1_INTEGER,    1UL, key->base,
                             LTC_ASN1_INTEGER,    1UL, key->prime,
                             LTC_ASN1_INTEGER,    1UL, key->y,
                             LTC_ASN1_EOL,        0UL, NULL);
2/ dh_sign_hash / dh_verify_hash (this one is the easiest)
   der_encode_sequence_multi(out, outlen,
                             LTC_ASN1_INTEGER,    1UL, a,
                             LTC_ASN1_INTEGER,    1UL, b,
                             LTC_ASN1_EOL,        0UL, NULL);
3/ dh_encrypt_key / dh_decrypt_key
   der_encode_sequence_multi(out, outlen,
                             LTC_ASN1_OBJECT_IDENTIFIER, hash_descriptor[hash].OIDlen, hash_descriptor[hash].OID,
                             LTC_ASN1_OCTET_STRING,      pubkeysize,                   pub_expt, /* public key */
                             LTC_ASN1_OCTET_STRING,      inlen,                        skey,     /* encrypted data */
                             LTC_ASN1_EOL,               0UL,                          NULL);
The pub_expt is an exported public key and it is desirable to keep it as short as possible.
Unfortunately the proposed changes to dh_export / dh_import are making the exported data longer, much longer, as it includes prime (up to 1000 bytes) and base.
So we perhaps need something like:

dh_export_raw / dh_import_raw
which will export the key with the output as short as possible
it means exporting only the public key->y or private key->x as a raw binary data

The interface might look like:

dh_export_raw(unsigned char *out, unsigned long *outlen, int type, dh_key *key)
dh_import_raw(const unsigned char *in, unsigned long inlen, int type, char *prime_hex, char *base_hex, dh_key *key)

After switching DH formats to ASN.1 as proposed above we can get rid of dh_static.h + dh_static.c (macros OUTPUT_BIGNUM/INPUT_BIGNUM & co. will not be needed anymore).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-308826042,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","Here is my proposal of new DH related formats:
1/ key format used by dh_export / dh_import
Considering the fact that we want to allow custom DH group params (via dh_make_key_ex) we also need to be able to export base + prime.
private key
   der_encode_sequence_multi(out, outlen,
                             LTC_ASN1_BIT_STRING, 1UL, flags,     /* flags[0] = 1 for type == PK_PRIVATE */
                             LTC_ASN1_INTEGER,    1UL, key->base,
                             LTC_ASN1_INTEGER,    1UL, key->prime,
                             LTC_ASN1_INTEGER,    1UL, key->x,    /* no need to export key->y as we can compute it during import */
                             LTC_ASN1_EOL,        0UL, NULL);

as there's no standard way to do this, fine by me.

public key
   der_encode_sequence_multi(out, outlen,
                             LTC_ASN1_BIT_STRING, 1UL, flags,     /* flags[0] = 0 for type == PK_PUBLIC */
                             LTC_ASN1_INTEGER,    1UL, key->base,
                             LTC_ASN1_INTEGER,    1UL, key->prime,
                             LTC_ASN1_INTEGER,    1UL, key->y,
                             LTC_ASN1_EOL,        0UL, NULL);

I just realized that for the SubjectPublicKeyInfo we'd need q       INTEGER,           -- factor of p-1... can we get that somehow?
If you think it's too much work it's fine as you did it.

2/ dh_sign_hash / dh_verify_hash (this one is the easiest)
   der_encode_sequence_multi(out, outlen,
                             LTC_ASN1_INTEGER,    1UL, a,
                             LTC_ASN1_INTEGER,    1UL, b,
                             LTC_ASN1_EOL,        0UL, NULL);
3/ dh_encrypt_key / dh_decrypt_key
   der_encode_sequence_multi(out, outlen,
                             LTC_ASN1_OBJECT_IDENTIFIER, hash_descriptor[hash].OIDlen, hash_descriptor[hash].OID,
                             LTC_ASN1_OCTET_STRING,      pubkeysize,                   pub_expt, /* public key */
                             LTC_ASN1_OCTET_STRING,      inlen,                        skey,     /* encrypted data */
                             LTC_ASN1_EOL,               0UL,                          NULL);



The pub_expt is an exported public key and it is desirable to keep it as short as possible.
Unfortunately the proposed changes to dh_export / dh_import are making the exported data longer, much longer, as it includes prime (up to 1000 bytes) and base.

If you really care about the size how about using a compressed format for the modp groups? We could use OID 1.3.6.1.4.1.272.4.26.5.1.22 to indicate the group.
something like:
flags ::= BIT STRING[2] -- [0] : 0=public, 1=private; [1] : 0=plain, 1=compressed

modpGroup ::= SEQUENCE {
      ipsecPeerIkeGroup OBJECT IDENTIFIER ::= {
         iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1) 272 bibo(4) ipsec(26) 
         ipsecPeerTable(5) ipsecPeerEntry(1) ipsecPeerIkeGroup(22) },
      group INTEGER }

CompressedDHKey ::= SEQUENCE {
   group modpGroup,
   xy INTEGER -- either x or y depending on flag[0]
}


So we perhaps need something like:

dh_export_raw / dh_import_raw
which will export the key with the output as short as possible
it means exporting only the public key->y or private key->x as a raw binary data

The interface might look like:

dh_export_raw(unsigned char *out, unsigned long *outlen, int type, dh_key *key)
dh_import_raw(const unsigned char *in, unsigned long inlen, int type, char *prime_hex, char *base_hex, dh_key *key)

After switching DH formats to ASN.1 as proposed above we can get rid of dh_static.h + dh_static.c (macros OUTPUT_BIGNUM/INPUT_BIGNUM & co. will not be needed anymore).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-308853704,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","The formats above as well as the the implementation is heavily inspired by what we have in ecc_*.
As for the formats I'd keep what I have already committed&pushed. The idea with OID does not fit quite well as we want to allow using/generating keys with custom DH parameters (without assigned OID).
But I am not that strongly against format changes (if they make sense).
As for the API changes:
Old functions:
int dh_export(out, outlen, type, key);
int dh_import(in, inlen, key);
int dh_make_key(prng, wprng, groupsize, key);
void dh_free(key);
int dh_shared_secret(dh_key private_key, dh_key public_key, out, outlen);
int dh_encrypt_key(in, keylen, out, outlen, prng, wprng, hash, dh_key key);
int dh_decrypt_key(in, inlen, out, outlen, key);
int dh_sign_hash(in, inlen, out, outlen, prng, wprng, key);
int dh_verify_hash(sig, siglen, hash, hashlen, stat, key);
Renamed functions:
void dh_groupsizes(low, high);
int dh_get_groupsize(key);
Newly added functions:
int dh_groupsize_to_keysize(groupsize);
int dh_make_key_ex(prng, wprng, prime_hex, base_hex, key);
int dh_check_pubkey(key);
int dh_export_raw(out, outlen, type, key);
int dh_import_raw(in, inlen, type, prime_hex, base_hex, key);
The whole src/pk/dh/* was completely re-worked (no dh_static.* functions split into a separate *.c files). Therefore for review simply go to https://github.com/libtom/libtomcrypt/tree/pr/dh_make_key_ex/src/pk/dh and check the new files.
And on top of all of that - Travis-CI is green :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-308953234,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","The formats above as well as the the implementation is heavily inspired by what we have in ecc_*.

I see.

...The idea with OID does not fit quite well as we want to allow using/generating keys with custom DH parameters (without assigned OID).

well that's for sure.
I guessed most of the implementations will use one of the standard groups, therefore it would make sense to implement something as proposed above.

int dh_export_raw(out, outlen, type, key);
int dh_import_raw(in, inlen, type, prime_hex, base_hex, key);

This API doesn't make sense in my opinion as I can't see a way to import what you exported, besides if you store your prime and base somewhere else... (c.f. the list a bit further down)

And on top of all of that - Travis-CI is green :)

Looks like we need a travis job that checks if API changes/new API's are also reflected in the documentation :-P
Generally good work, I would've expected a bit more established-standards compliance when it comes to contact with the outside world. I.e.

expecting an ASN.1 sequence as created by openssl dhparams as input to dh_make_key_ex(). Then we could also use the same as parameter to dh_import_raw()
exporting the public key as SubjectPublicKeyInfo (if possible, c.f. #227 (comment))
what's dh_{de,en}crypt_key() again for? correct me if I'm wrong... I guess it does its job fine, but as it's kind of a ltc-private protocol it doesn't really make sense to have it in this library which normally only provides primitives, or?

I realized most of these things only when you started working on it (I shouldn't have taken it for granted the way it was).
I'm sure you won't like my proposal as you put a lot of effort in there, but how about limiting DH for now to its basic functionality?
int dh_make_key(prng_state *prng, int wprng, int groupsize, dh_key *key);
void dh_free(dh_key *key);

int dh_export(unsigned char *out, unsigned long *outlen, int type, dh_key *key);
int dh_import(const unsigned char *in, unsigned long inlen, dh_key *key);

int dh_shared_secret(dh_key        *private_key, dh_key        *public_key,
                     unsigned char *out,         unsigned long *outlen);

I also think that

we should add a ""version INTEGER -- currently only 0"" as first field to the exported DH keys
we should start using local header files for internal functions (e.g. dh_check_pubkey()), but I'll add that to #228

TBH thanks for starting working on this, I only realized now how non-sensical some parts of it really are (and now I also realized what tom meant when he dropped dh because it was a PITA to maintain...)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309036543,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","expecting an ASN.1 sequence as created by openssl dhparams as input to dh_make_key_ex(). Then we could also use the same as parameter to dh_import_raw()

This one was easy, see dh_make_key_dhparam.

exporting the public key as SubjectPublicKeyInfo

According to https://tools.ietf.org/html/rfc3279#section-2.3.3 we need q (factor of p-1) which we do not have and I do not know about a way how to get it (and unfortunately it is mandatory). FYI q is not even a part of dhparam generated by openssl. Which means that we are not able to follow rfc3279 when exporting public DH keys. Having non-standard SubjectPublicKeyInfo-based format is basically the same as having completely proprietary format.

what's dh_{de,en}crypt_key() again for?

Well, I agree that these are a bit unusual but we have something similar in ecc_* so why not to have them here.

how about limiting DH for now to its basic functionality?

I am not using DH that much myself; however for my perl bindings I need nearly all of the functions I have implemented, including dh_make_key_ex, dh_export_raw, dh_import_raw, dh_check_pubkey. I can imagine that we ""replace"" dh_import_raw with something like dh_import_radix (like already existing rsa_import_radix + dsa_import_radix), but I basically need them. @lkinley is the user (and contributor) of perl module Crypt::PK::DH so he can perhaps say a bit more about his use case(s).
Here are links to ""raw"" import/export I have in my perl bindings

https://metacpan.org/pod/Crypt::PK::DH#import_key_raw
https://metacpan.org/pod/Crypt::PK::DH#export_key_raw

BTW ecc_import_raw and ecc_export_raw are also part on my ECC enhancements as i need them for:

https://metacpan.org/pod/Crypt::PK::ECC#import_key_raw
https://metacpan.org/pod/Crypt::PK::ECC#export_key_raw",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309050464,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","expecting an ASN.1 sequence as created by openssl dhparams as input to dh_make_key_ex(). Then we could also use the same as parameter to dh_import_raw()

This one was easy, see dh_make_key_dhparam.

True, feel free to squash the fixups together and force-push :-D


exporting the public key as SubjectPublicKeyInfo

According to https://tools.ietf.org/html/rfc3279#section-2.3.3 we need q (factor of p-1) which we do not have and I do not know about a way how to get it (and unfortunately it is mandatory). FYI q is not even a part of dhparam generated by openssl. Which means that we are not able to follow rfc3279 when exporting public DH keys. Having non-standard SubjectPublicKeyInfo-based format is basically the same as having completely proprietary format.

IIUC it boils down to using the DSA key-generation where we get q...
I came to the conclusion when I saw that openssl dhparam offers an option -dsaparam which simply converts the DSA key and suddenly the DH key has 3 INTEGERs...


what's dh_{de,en}crypt_key() again for?

Well, I agree that these are a bit unusual but we have something similar in ecc_* so why not to have them here.

It's the same with ecc_verify_hash() where we have now a ecc_verify_hash_raw() because the old version was way too special...
I don't think dh_{de,en}crypt_key() are useful and therefor I'd say we remove them if @lkinley doesn't need them.


how about limiting DH for now to its basic functionality?

I am not using DH that much myself; however for my perl bindings I need nearly all of the functions I have implemented, including dh_make_key_ex, dh_export_raw, dh_import_raw, dh_check_pubkey. I can imagine that we ""replace"" dh_import_raw with something like dh_import_radix (like already existing rsa_import_radix + dsa_import_radix), but I basically need them. @lkinley is the user (and contributor) of perl module Crypt::PK::DH so he can perhaps say a bit more about his use case(s).

I couldn't find a reference to e.g. dh_check_pubkey() but I also didn't search very hard...
dh_make_key_ex() seems to be only required because the MODP groups aren't in ltc yet... yeah sure you could also pass the two strings as parameters in your generate_key function but please correct me if I'm wrong I doubt there's any software that originally exports its groups as hex-string...
{ex,im}port_raw() are perfectly fine.
@lkinley can you please say which API's you really need?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/lkinley,11,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309053395,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","I am using Crypt::PK::DH in the module Net::SSH::Perl for the key exchange portion of the SSH protocol.  To implement the various Kex methods, it needs to be able to specify the p and g values.
With group 1, 14, 16 and 18 key exchange, the p and g values are static.  In group exchange, the SSH server generates p and g and sends them to the client.
I need:

generate DH from p, g
export raw public key
import raw public key
generate shared secret using imported raw public key",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309054318,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)",You also wanted a pubkey validation for some reason or not?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,13,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309054604,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","You also wanted a pubkey validation for some reason or not?

I think the validation is better placed internally (as it's already done now)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/lkinley,14,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309055135,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","Yes, I believe the pub key validity is checked on import.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,15,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309208040,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","As of #227 (comment) I think we can safely remove

dh_{de,en}crypt_key()
dh_{sign,verify}_hash()
most of the utility functions away from the public API, but we can do that in the context of #228

Btw. how about moving dh_{de,en}crypt_key() & dh_{sign,verify}_hash() to a demo?

we should add a ""version INTEGER -- currently only 0"" as first field to the exported DH keys

what do you think about that? it'd allow easier implementation later-on of e.g. the compressed approach",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,16,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309296811,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","I really do need dh_import_raw or dh_import_radix.
Providing the fact that there is no standardized way for storing/exporting DH keys, what would you recommend libtomcrypt users who want to import a public key to derive a shared secret via DH? According to your proposal we will offer only dh_import which is able to import only our proprietary format.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,17,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309360114,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","we should add a ""version INTEGER -- currently only 0"" as first field to the exported DH keys

done",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,18,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309360219,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","I think we can safely remove dh_{de,en}crypt_key() , dh_{sign,verify}_hash()

done",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,19,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309372099,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","I really do need dh_import_raw or dh_import_radix.

sure, if you need it go for it",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,20,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309468218,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","looks like we can remove addmod() and submod() again from the ltc_mp (if you don't want to move dh_{de,en}crypt_key() & dh_{sign,verify}_hash() to a demo)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,21,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309477807,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","... if you don't want to move dh_{de,en}crypt_key() & dh_{sign,verify}_hash() to a demo

I am not against this idea, but maybe later, not in this PR.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,22,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309531413,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","I am still not sure about the interface of dh_import_raw
Now we have
int dh_import_raw(unsigned char *in, unsigned long inlen, int type,
                  const char *prime_hex, const char *base_hex, dh_key *key)
Wouldn't it be better (more consistent) to change it to passing prime/base as raw octects:
int dh_import_raw(unsigned char *in,    unsigned long inlen,
                  unsigned char *prime, unsigned long primelen,
                  unsigned char *base,  unsigned long baselen,
                  int type, dh_key *key)
?
If there is a demand for importing hexadecimals we can introduce dh_import_radix (similar to rsa_import_radix and dsa_import_radix)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,23,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309535748,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","I am still not sure about the interface of dh_import_raw

Thanks for mentioning that, I had the same thought multiple times.
How about this?
int dh_import_radix(int radix,
                    unsigned char *in,    unsigned long inlen,
                    unsigned char *prime, unsigned long primelen,
                    unsigned char *base,  unsigned long baselen,
                    int type, dh_key *key)
{
  if (radix == 256) {
    /* import with mp_read_unsigned_bin() */
  } else {
    /* import with mp_read_radix() */
  }
}",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,24,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309562408,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)",You idea of enhanced dh_import_radix sounds interesting,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,25,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309569550,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","You idea of enhanced dh_import_radix sounds interesting

We could also do the same for dsa and rsa...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,26,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309596922,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","Currently it is:
int dh_export_radix(int radix,
                    void *out, unsigned long *outlen,
                    int type, dh_key *key);
int dh_import_radix(int radix,
                    void *in,    unsigned long inlen,
                    void *prime, unsigned long primelen,
                    void *base,  unsigned long baselen,
                    int type, dh_key *key);
where radix can be 2..64 or 256",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,27,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309646360,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","And also radix-ified dh_make_key_ex
int dh_make_key_ex(prng_state *prng, int wprng, int radix,
                   void *prime, unsigned long primelen,
                   void *base,  unsigned long baselen,
                   dh_key *key);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,28,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309668248,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","Should I apply the new radix style also to:
int rsa_import_radix(int radix, char *N, char *e, char *d, char *p, char *q, char *dP, char *dQ, char *qP, rsa_key *key);
int dsa_import_radix(int radix, char *p, char *q, char *g, char *x, char *y, dsa_key *key);
int dsa_make_key_ex(prng_state *prng, int wprng, int group_size, int modulus_size, dsa_key *key, char* p_hex, char* q_hex, char* g_hex);
? (all of these will be new in 1.18)
It will nearly double the number of arguments.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,29,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309674046,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","Should I apply the new radix style also to:
int rsa_import_radix(int radix, char *N, char *e, char *d, char *p, char *q, char *dP, char *dQ, char *qP, rsa_key *key);
int dsa_import_radix(int radix, char *p, char *q, char *g, char *x, char *y, dsa_key *key);
int dsa_make_key_ex(prng_state *prng, int wprng, int group_size, int modulus_size, dsa_key *key, char* p_hex, char* q_hex, char* g_hex);
? (all of these will be new in 1.18)
It will nearly double the number of arguments.

I thought the same...
I also thought that 1 radix is pretty unflexible, you e.g. wouldn't be able to store dh prime and base as hex string and the public/private part as binary...
how about this?
typedef struct {
  void* p;
  unsigned long len;
  int radix;
} ltc_pk_part;",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,30,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309679721,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","Well, this does not look nice:
int rsa_import_radix(int radix, 
                     void *N,  unsigned long Nlen,
                     void *e,  unsigned long elen,
                     void *d,  unsigned long dlen,
                     void *p,  unsigned long plen,
                     void *q,  unsigned long qlen,
                     void *dP, unsigned long dPlen,
                     void *dQ, unsigned long dQlen,
                     void *qP, unsigned long qPlen,
                     rsa_key *key);
But the struct approach would make it more complicated for the caller.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,31,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309721206,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","int rsa_import_radix(int radix, 
                     void *N,  unsigned long Nlen,
                     void *e,  unsigned long elen,
                     void *d,  unsigned long dlen,
                     void *p,  unsigned long plen,
                     void *q,  unsigned long qlen,
                     void *dP, unsigned long dPlen,
                     void *dQ, unsigned long dQlen,
                     void *qP, unsigned long qPlen,
                     rsa_key *key);

true, that's ugly... but I don't have a better idea than the struct approach

But the struct approach would make it more complicated for the caller.

we could help by providing something like
#define PK_PART_HEX(s) &((ltc_pk_part){s, 0, 16})
#define PK_PART_DEC(s) &((ltc_pk_part){s, 0, 10})",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,32,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309815448,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","@sjaeckel I am out of ideas here, feel free to rebase this PR on develop and commit the unfinished/upolished radix related stuff here",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,33,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309823477,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","I am out of ideas here

me too

feel free to rebase this PR on develop and commit the unfinished/upolished radix related stuff here

I don't want to have unfinished stuff in a potential RC
does someone of you have a good idea how to solve #227 (comment) ff.? @lkinley @rofl0r @sebastianas",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,34,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-309841596,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","I don't want to have unfinished stuff in a potential RC

btw. I think we should wait with the RC until this PR is ready
AND I think it's very good that we spotted this now, thanks @karel-m for starting this up",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,35,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-310298447,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","Does it make sense to extract everything except:

dh_export_radix
dh_import_radix
dh_make_key_ex

into a separate PR so that it can be merged to develop?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,36,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-310302362,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","Does it make sense to extract everything except:

dh_export_radix
dh_import_radix
dh_make_key_ex

into a separate PR so that it can be merged to develop?

sounds like a good idea to me",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,37,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-311457909,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)",I'm going to rebase this on top of #238 and add the necessary functions,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,38,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-311466456,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","I'm going to rebase this on top of #238 and add the necessary functions

no problem, go ahead",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/sjaeckel,39,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-311471256,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)","done! @karel-m can you quickly review please?
I'll merge then to #238 and we do a proper review there",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,227,2017-06-12T20:41:03Z,2017-06-27T20:25:00Z,2017-11-10T17:02:53Z,MERGED,True,581,117,11,https://github.com/karel-m,DH facelift part 2 (dh_make_key_ex & co.),8,['enhancement'],https://github.com/libtom/libtomcrypt/pull/227,https://github.com/karel-m,40,https://github.com/libtom/libtomcrypt/pull/227#issuecomment-311473966,"The idea of dh_make_key_ex (which allows using custom DH group params) was suggested and implemented by @lkinley as a contribution to my libtomcrypt perl bindings.
It is simply about adding:
int dh_make_key_ex(prng_state *prng, int wprng, char *prime_hex, char *base_hex, dh_key *key)
Unfortunately the implementation turned into a bunch of troubles&workarounds like changes to dh_key structure changes (incompatible) to import/export format etc.
Some questions:

How far can we go in breaking DH API? (currently only in develop for some time, not released yet)
Is the format used for DH key export/import intended to compatible with some specification? (this PR changed it in an incompatible way)",At the first sight it looks good. I have to go through it more carefully but it would be better to have it all in one PR with RSA/DSA changes.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,229,2017-06-14T15:00:59Z,2017-06-15T08:31:15Z,2017-06-27T12:19:09Z,MERGED,True,184,80,14,https://github.com/sjaeckel,First general clean-up,8,[],https://github.com/libtom/libtomcrypt/pull/229,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/229,"Update doc a bit
Fix build on Mac OS
Fix dsa_make_params() #230
Improve math descriptors
use zeromem() instead of memset() to clean prng buffers","Update doc a bit
Fix build on Mac OS
Fix dsa_make_params() #230
Improve math descriptors
use zeromem() instead of memset() to clean prng buffers",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,229,2017-06-14T15:00:59Z,2017-06-15T08:31:15Z,2017-06-27T12:19:09Z,MERGED,True,184,80,14,https://github.com/sjaeckel,First general clean-up,8,[],https://github.com/libtom/libtomcrypt/pull/229,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/229#issuecomment-308630917,"Update doc a bit
Fix build on Mac OS
Fix dsa_make_params() #230
Improve math descriptors
use zeromem() instead of memset() to clean prng buffers",👍 please merge,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,230,2017-06-14T22:53:49Z,2017-06-22T10:44:33Z,2017-10-09T16:16:12Z,MERGED,True,29,9,6,https://github.com/sjaeckel,Fix number of Miller-Rabin rounds,2,[],https://github.com/libtom/libtomcrypt/pull/230,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/230,"FIPS 180-4 defines a specific number of rounds of MR for DSA primes, c.f. FIPS-186-4 - Appendix C.3 - table C.1.
gmp also has an estimation which number is appropriate, c.f. doc of mpz_probab_prime_p() here
This PR implements these recommendations.","FIPS 180-4 defines a specific number of rounds of MR for DSA primes, c.f. FIPS-186-4 - Appendix C.3 - table C.1.
gmp also has an estimation which number is appropriate, c.f. doc of mpz_probab_prime_p() here
This PR implements these recommendations.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,230,2017-06-14T22:53:49Z,2017-06-22T10:44:33Z,2017-10-09T16:16:12Z,MERGED,True,29,9,6,https://github.com/sjaeckel,Fix number of Miller-Rabin rounds,2,[],https://github.com/libtom/libtomcrypt/pull/230,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/230#issuecomment-308630363,"FIPS 180-4 defines a specific number of rounds of MR for DSA primes, c.f. FIPS-186-4 - Appendix C.3 - table C.1.
gmp also has an estimation which number is appropriate, c.f. doc of mpz_probab_prime_p() here
This PR implements these recommendations.","The first thing I want to point out: currently mp_prime_is_prime(num,t,result) does t M-R rounds with the first t primes (2,3,5,7..); however, it is considered better to uses t randomly chosen bases between 2 and num-2 (see FIPS 184-4 C.3.1). So it is not just about the number of rounds.
Next, the pure M-R test might not be the best we can have today (I mean combining M-R with Lucas & co.). Couple of years ago I wanted to improve primality tests in libtomcrypt. Here is the related discussion https://rt.cpan.org/Public/Bug/Display.html?id=89400 It is not an easy task and it has impact not only to libtomcrypt but also to libtommath.
Some abandoned/untested code:

https://github.com/DCIT/perl-CryptX/blob/better-primes/src/ltm/bn_mp_prime_is_prime.c
https://github.com/DCIT/perl-CryptX/blob/better-primes/src/ltm/bn_mp_prime_miller_rabin_random.c

To sum up, I want to say that this rabbit hole is pretty deep.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,230,2017-06-14T22:53:49Z,2017-06-22T10:44:33Z,2017-10-09T16:16:12Z,MERGED,True,29,9,6,https://github.com/sjaeckel,Fix number of Miller-Rabin rounds,2,[],https://github.com/libtom/libtomcrypt/pull/230,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/230#issuecomment-308673894,"FIPS 180-4 defines a specific number of rounds of MR for DSA primes, c.f. FIPS-186-4 - Appendix C.3 - table C.1.
gmp also has an estimation which number is appropriate, c.f. doc of mpz_probab_prime_p() here
This PR implements these recommendations.","The first thing I want to point out: currently mp_prime_is_prime(num,t,result) does t M-R rounds with the first t primes (2,3,5,7..); however, it is considered better to uses t randomly chosen bases between 2 and num-2 (see FIPS 184-4 C.3.1). So it is not just about the number of rounds.

Yeah, I saw the same thing but then I thought... well as long as nobody complains... but I also estimated how long it'll take to implement and then decided it's currently too long for me.

Next, the pure M-R test might not be the best we can have today (I mean combining M-R with Lucas & co.). Couple of years ago I wanted to improve primality tests in libtomcrypt. Here is the related discussion https://rt.cpan.org/Public/Bug/Display.html?id=89400 It is not an easy task and it has impact not only to libtomcrypt but also to libtommath.

Especially the fact that it would have impact on ltm made me think, why not simply implement it via ltc_mp primitives in ltc? It's most likely a lot of effort, but less effort that adding it to ltm, tfm and gmp, as gmp has AFAICS also only MR for primality tests!?! I didn't look at the code, but the doc gave me the impression.

Some abandoned/untested code:

https://github.com/DCIT/perl-CryptX/blob/better-primes/src/ltm/bn_mp_prime_is_prime.c
https://github.com/DCIT/perl-CryptX/blob/better-primes/src/ltm/bn_mp_prime_miller_rabin_random.c

To sum up, I want to say that this rabbit hole is pretty deep.

In the end I came multiple times back to the ltm fork of @czurnieden ... I think https://github.com/czurnieden/libtommath could be another good starting point
Regarding this PR:
I just wanted to implement the recommendations when I saw them and I think we should work on the primality testing, but for now it's out of scope. We should probably discuss the entire primality thing in another issue that this one.
I also thought about adding a function similar to ltm's mp_prime_rabin_miller_trials() with an API like
int miller_rabin_rounds(void* mpi, int type) where type would be one of DSA_MR, DSA_MR_LUCAS for now (or something like that...).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,230,2017-06-14T22:53:49Z,2017-06-22T10:44:33Z,2017-10-09T16:16:12Z,MERGED,True,29,9,6,https://github.com/sjaeckel,Fix number of Miller-Rabin rounds,2,[],https://github.com/libtom/libtomcrypt/pull/230,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/230#issuecomment-309537011,"FIPS 180-4 defines a specific number of rounds of MR for DSA primes, c.f. FIPS-186-4 - Appendix C.3 - table C.1.
gmp also has an estimation which number is appropriate, c.f. doc of mpz_probab_prime_p() here
This PR implements these recommendations.",any ideas how we should go on with this?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,230,2017-06-14T22:53:49Z,2017-06-22T10:44:33Z,2017-10-09T16:16:12Z,MERGED,True,29,9,6,https://github.com/sjaeckel,Fix number of Miller-Rabin rounds,2,[],https://github.com/libtom/libtomcrypt/pull/230,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/230#issuecomment-309677566,"FIPS 180-4 defines a specific number of rounds of MR for DSA primes, c.f. FIPS-186-4 - Appendix C.3 - table C.1.
gmp also has an estimation which number is appropriate, c.f. doc of mpz_probab_prime_p() here
This PR implements these recommendations.","The trouble is that FIPS-186-4 Appendix C.3 is talking about Miller-Rabin probabilistic primality tests using randomly chosen bases between 2 and n-2.
GMP's mpz_probab_prime_p is using Miller-Rabin with a deterministic sequence of bases, a[j] = j^2 + j + 41 using Euler's polynomial (doc says it is primality test found in Knuth's Seminumerical Algorithms book).
However LTC currently user Miller-Rabin with fixed t bases (first t primes) - I have only found this reference in HAC - Ch. 4 Public-Key Parameter (unfortunately it does not say much about how good or bad it is).
4.28  Remark (fixed bases in Miller-Rabin) If a1 and a2 are strong liars for n, their product
a1a2 is very likely, but not certain, to also be a strong liar for n. A strategy that is some-
times employed is to fix the bases a in the Miller-Rabin algorithm to be the first few primes
(composite bases are ignored because of the preceding statement), instead of choosing them
at random.

We are mixing rounds from FIPS (probabilistic tests using randomly chosen bases) and our rounds (deterministic, first t primes).
I am not able to say that increasing MR rounds (for our deterministic test with first t primes) from 8 to 35 is ok. Looking at libtommath's ltm_prime_tab 35 wouldn't work for MP_8BIT.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,230,2017-06-14T22:53:49Z,2017-06-22T10:44:33Z,2017-10-09T16:16:12Z,MERGED,True,29,9,6,https://github.com/sjaeckel,Fix number of Miller-Rabin rounds,2,[],https://github.com/libtom/libtomcrypt/pull/230,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/230#issuecomment-309691449,"FIPS 180-4 defines a specific number of rounds of MR for DSA primes, c.f. FIPS-186-4 - Appendix C.3 - table C.1.
gmp also has an estimation which number is appropriate, c.f. doc of mpz_probab_prime_p() here
This PR implements these recommendations.","We are mixing rounds from FIPS (probabilistic tests using randomly chosen bases) and our rounds (deterministic, first t primes).
I am not able to say that increasing MR rounds (for our deterministic test with first t primes) from 8 to 35 is ok.

I'm definitely sure that it's 'ok', but I'm not sure if it's enough.

Looking at libtommath's ltm_prime_tab 35 wouldn't work for MP_8BIT

We shouldn't care about MP_8BIT, it's only there ""for educational reasons"".",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,230,2017-06-14T22:53:49Z,2017-06-22T10:44:33Z,2017-10-09T16:16:12Z,MERGED,True,29,9,6,https://github.com/sjaeckel,Fix number of Miller-Rabin rounds,2,[],https://github.com/libtom/libtomcrypt/pull/230,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/230#issuecomment-310213196,"FIPS 180-4 defines a specific number of rounds of MR for DSA primes, c.f. FIPS-186-4 - Appendix C.3 - table C.1.
gmp also has an estimation which number is appropriate, c.f. doc of mpz_probab_prime_p() here
This PR implements these recommendations.","I'm definitely sure that it's 'ok',

Well, so do merge. It is definitely not making things worse.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,233,2017-06-19T12:09:05Z,2017-06-20T15:51:17Z,2017-10-09T16:16:12Z,MERGED,True,1903,1904,466,https://github.com/sjaeckel,Second general clean-up,12,[],https://github.com/libtom/libtomcrypt/pull/233,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/233,"Use the same header/footer for all files
Fix some open issues","Use the same header/footer for all files
Fix some open issues",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,233,2017-06-19T12:09:05Z,2017-06-20T15:51:17Z,2017-10-09T16:16:12Z,MERGED,True,1903,1904,466,https://github.com/sjaeckel,Second general clean-up,12,[],https://github.com/libtom/libtomcrypt/pull/233,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/233#issuecomment-309435725,"Use the same header/footer for all files
Fix some open issues","There are still some old URLs
$ find src tests demos -type f | xargs grep libtom.org
tests/no_prng.c: * http://libtom.org
demos/constants.c: * Tom St Denis, tomstdenis@gmail.com, http://libtom.org
demos/sizes.c: * Tom St Denis, tomstdenis@gmail.com, http://libtom.org",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,233,2017-06-19T12:09:05Z,2017-06-20T15:51:17Z,2017-10-09T16:16:12Z,MERGED,True,1903,1904,466,https://github.com/sjaeckel,Second general clean-up,12,[],https://github.com/libtom/libtomcrypt/pull/233,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/233#issuecomment-309436237,"Use the same header/footer for all files
Fix some open issues","We should perhaps also remove Tom's email from:
src/misc/crypt/crypt.c:   ""LibTomCrypt "" SCRYPT "" (Tom St Denis, tomstdenis@gmail.com)\n""",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,233,2017-06-19T12:09:05Z,2017-06-20T15:51:17Z,2017-10-09T16:16:12Z,MERGED,True,1903,1904,466,https://github.com/sjaeckel,Second general clean-up,12,[],https://github.com/libtom/libtomcrypt/pull/233,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/233#issuecomment-309667116,"Use the same header/footer for all files
Fix some open issues",👍 I am for merging (just small cosmetics in helper.pl - see my comment),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,234,2017-06-20T18:04:32Z,2017-06-22T14:01:14Z,2017-06-22T14:01:17Z,MERGED,True,214,408,61,https://github.com/sjaeckel,Third general clean-up,14,[],https://github.com/libtom/libtomcrypt/pull/234,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/234,"fix potential timing attacks in rsa, eax, ocb and ocb3
use compare_testvector() in all the algorithm tests
use _function() pattern for (most of the) static functions
improve ./test","fix potential timing attacks in rsa, eax, ocb and ocb3
use compare_testvector() in all the algorithm tests
use _function() pattern for (most of the) static functions
improve ./test",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,234,2017-06-20T18:04:32Z,2017-06-22T14:01:14Z,2017-06-22T14:01:17Z,MERGED,True,214,408,61,https://github.com/sjaeckel,Third general clean-up,14,[],https://github.com/libtom/libtomcrypt/pull/234,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/234#issuecomment-310213828,"fix potential timing attacks in rsa, eax, ocb and ocb3
use compare_testvector() in all the algorithm tests
use _function() pattern for (most of the) static functions
improve ./test","Could you please introduce in this cleanup round XMEMMOVE?
#ifndef XMEMMOVE
#define XMEMMOVE memmove
#endif 
and
--- a/helper.pl
+++ b/helper.pl
@@ -51,6 +51,7 @@ sub check_source {
       push @{$troubles->{unwanted_memset}},  $lineno if $file =~ /^src\/.*\.c$/ && $l =~ /\bmemset\s*\(/;
       push @{$troubles->{unwanted_memcpy}},  $lineno if $file =~ /^src\/.*\.c$/ && $l =~ /\bmemcpy\s*\(/;
       push @{$troubles->{unwanted_memcmp}},  $lineno if $file =~ /^src\/.*\.c$/ && $l =~ /\bmemcmp\s*\(/;
+      push @{$troubles->{unwanted_memmove}}, $lineno if $file =~ /^src\/.*\.c$/ && $l =~ /\bmemmove\s*\(/;
       push @{$troubles->{unwanted_strcmp}},  $lineno if $file =~ /^src\/.*\.c$/ && $l =~ /\bstrcmp\s*\(/;
       push @{$troubles->{unwanted_clock}},   $lineno if $file =~ /^src\/.*\.c$/ && $l =~ /\bclock\s*\(/;
       push @{$troubles->{unwanted_qsort}},   $lineno if $file =~ /^src\/.*\.c$/ && $l =~ /\bqsort\s*\(/;",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,234,2017-06-20T18:04:32Z,2017-06-22T14:01:14Z,2017-06-22T14:01:17Z,MERGED,True,214,408,61,https://github.com/sjaeckel,Third general clean-up,14,[],https://github.com/libtom/libtomcrypt/pull/234,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/234#issuecomment-310290604,"fix potential timing attacks in rsa, eax, ocb and ocb3
use compare_testvector() in all the algorithm tests
use _function() pattern for (most of the) static functions
improve ./test","Could you please introduce in this cleanup round XMEMMOVE?

sure, even if there's no invocation (yet ;-) )",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,234,2017-06-20T18:04:32Z,2017-06-22T14:01:14Z,2017-06-22T14:01:17Z,MERGED,True,214,408,61,https://github.com/sjaeckel,Third general clean-up,14,[],https://github.com/libtom/libtomcrypt/pull/234,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/234#issuecomment-310295482,"fix potential timing attacks in rsa, eax, ocb and ocb3
use compare_testvector() in all the algorithm tests
use _function() pattern for (most of the) static functions
improve ./test","Another minor thing that needs to be cleaned up.
During ./testme.sh ""makefile -j8"" ""-Wall -Wextra -Werror -DUSE_LTM -DLTM_DESC -I../libtommath"" ../libtommath/libtommath.a
I see:
NOTEST (Build Only, -DLTC_NO_TEST, makefile -j8)...
building...build NOTEST failed see gcc_2.txt for more information
src/modes/xts/xts_test.c:13:12: error: ‘_xts_test_accel_xts_encrypt’ defined but not used [-Werror=unused-function]
 static int _xts_test_accel_xts_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long blocks,
            ^
src/modes/xts/xts_test.c:40:12: error: ‘_xts_test_accel_xts_decrypt’ defined but not used [-Werror=unused-function]
 static int _xts_test_accel_xts_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long blocks,
            ^
cc1: all warnings being treated as errors",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,234,2017-06-20T18:04:32Z,2017-06-22T14:01:14Z,2017-06-22T14:01:17Z,MERGED,True,214,408,61,https://github.com/sjaeckel,Third general clean-up,14,[],https://github.com/libtom/libtomcrypt/pull/234,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/234#issuecomment-310366602,"fix potential timing attacks in rsa, eax, ocb and ocb3
use compare_testvector() in all the algorithm tests
use _function() pattern for (most of the) static functions
improve ./test","1/ Ad makefile.mingw + makefile.msvc:
I am not sure whether DESTDIR concept make sense for MS Windows paths. For example: make -f makefile.mingw DESTDIR=c:\builddir\ PREFIX=c:\installdir means that ""$(DESTDIR)$(PREFIX)\bin"" will expand to ""c:\builddir\c:\installdir\bin"" which is obviously invalid. I propose reverting also use DESTDIR in makefile.m{ingw,svc}.
2/ Ad static function names: you have excluded src/ciphers, src/hashes and src/stream/sober128 - do you plan to fix those later?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,234,2017-06-20T18:04:32Z,2017-06-22T14:01:14Z,2017-06-22T14:01:17Z,MERGED,True,214,408,61,https://github.com/sjaeckel,Third general clean-up,14,[],https://github.com/libtom/libtomcrypt/pull/234,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/234#issuecomment-310368305,"fix potential timing attacks in rsa, eax, ocb and ocb3
use compare_testvector() in all the algorithm tests
use _function() pattern for (most of the) static functions
improve ./test","1/ Ad makefile.mingw + makefile.msvc:
I am not sure whether DESTDIR concept make sense for MS Windows paths. For example: make -f makefile.mingw DESTDIR=c:\builddir\ PREFIX=c:\installdir means that ""$(DESTDIR)$(PREFIX)\bin"" will expand to ""c:\builddir\c:\installdir\bin"" which is obviously invalid. I propose reverting also use DESTDIR in makefile.m{ingw,svc}.

makes sense...

2/ Ad static function names: you have excluded src/ciphers, src/hashes and src/stream/sober128 - do you plan to fix those later?

not sure yet (when and what) 😄 volunteers are always welcome ;-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,235,2017-06-21T10:12:33Z,2017-06-21T12:33:38Z,2017-06-21T12:33:41Z,MERGED,True,176,143,4,https://github.com/karel-m,ECC ecc_sign+verify_hash_raw > ecc_sign+verify_hash_rfc7518,7,[],https://github.com/libtom/libtomcrypt/pull/235,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/235,related to #228 point 7/,related to #228 point 7/,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/236,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format",True,{'HOORAY': ['https://github.com/J08nY']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-310212612,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","A note (#65 (comment)) related to this PR:

We need a ltm-1.0 package backported to trusty to fix these build failures.
I had to remove the ltm from sid in #217 as I couldn't update clang otherwise...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-310333471,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","Another note related to this PR:
We will need sqrtmod_prime() in tfm and gmp before this can be merged.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-313369079,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","A note (#65 (comment)) related to this PR:

We need a ltm-1.0 package backported to trusty to fix these build failures.
I had to remove the ltm from sid in #217 as I couldn't update clang otherwise...


done",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-314246411,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","Some thoughts about applying similar API ideas as we did in RSA, DSA, DH.
This is what we have in 1.18-rc1 (and probably want to keep it for backwards compatibility):
void ecc_sizes(int *low, int *high);
int ecc_get_size(ecc_key *key);
int ecc_make_key(prng_state *prng, int wprng, int keysize, ecc_key *key);
int ecc_make_key_ex(prng_state *prng, int wprng, ecc_key *key, const ltc_ecc_set_type *dp);
void ecc_free(ecc_key *key);
int ecc_export(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int ecc_import(const unsigned char *in, unsigned long inlen, ecc_key *key);
int ecc_import_ex(const unsigned char *in, unsigned long inlen, ecc_key *key, const ltc_ecc_set_type *dp);
int ecc_ansi_x963_export(ecc_key *key, unsigned char *out, unsigned long *outlen);
int ecc_ansi_x963_import(const unsigned char *in, unsigned long inlen, ecc_key *key);
int ecc_ansi_x963_import_ex(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);
int ecc_shared_secret(ecc_key *private_key, ecc_key *public_key, unsigned char *out, unsigned long *outlen);
int ecc_encrypt_key(const unsigned char *in, unsigned long inlen, unsigned char *out, unsigned long *outlen, prng_state *prng, int wprng, int hash, ecc_key *key);
int ecc_decrypt_key(const unsigned char *in, unsigned long inlen, unsigned char *out, unsigned long *outlen, ecc_key *key);
int ecc_sign_hash_rfc7518(const unsigned char *in, unsigned long inlen, unsigned char *out, unsigned long *outlen, prng_state *prng, int wprng, ecc_key *key);
int ecc_sign_hash(const unsigned char *in, unsigned long inlen, unsigned char *out, unsigned long *outlen, prng_state *prng, int wprng, ecc_key *key);
int ecc_verify_hash_rfc7518(const unsigned char *sig, unsigned long siglen, const unsigned char *hash, unsigned long hashlen, int *stat, ecc_key *key);
int ecc_verify_hash(const unsigned char *sig, unsigned long siglen, const unsigned char *hash, unsigned long hashlen, int *stat, ecc_key *key);
I propose the following new additions to public API in the ""next"" (UPDATED):
int ecc_set_dp(const ltc_ecc_set_type *set, ecc_key *key);
int ecc_set_dp_name(const char *curve_name, ecc_key *key);
int ecc_set_key(const unsigned char *in, unsigned long inlen, int type, ecc_key *key);
int ecc_generate_key(prng_state *prng, int wprng, ecc_key *key);
int ecc_export_key(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-315848296,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","This PR was re-factored as proposed here: #236 (comment)
Currently it is ready only for API review (I did my best to keep the API as much backwards compatible as possible).
Definitely needs at least one more pass to check/add more LTC_ARGCHK's + check whether we correctly free what has to be freed etc.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-331204805,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","Just for record - the idea:
int ecc_get_set(const char *curve_name, const ltc_ecc_set_type** dp);
/* or */
const ltc_ecc_set_type* ecc_get_set(const char *curve_name);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-331476974,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","UPDATE: the latest version of this PR adds the following to the public API
int  ecc_get_set_by_name(const char* name, const ltc_ecc_set_type** dp);
int  ecc_set_dp(const ltc_ecc_set_type *set, ecc_key *key);
int  ecc_generate_key(prng_state *prng, int wprng, ecc_key *key);
int  ecc_set_key(const unsigned char *in, unsigned long inlen, int type, ecc_key *key);
int  ecc_get_key(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-335528807,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format",closing this one? AFAICT it is still unmerged.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-335529008,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","sorry, already reopened",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-343287491,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","@sjaeckel could you please have a look at API additions proposed in #236 (comment) ? Just the API, no need to go through the implementation at the moment.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/buggywhip,12,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-348213975,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","Sent fm iTouch
 On Nov 30, 2017, at 12:48 AM, Steffen Jaeckel ***@***.***> wrote:

 To me it looks like it's not needed as a user will normally not identify the curve by its size but by its name.

Definitely agree!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-348707163,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","this feels like a too big PR to review properly

Yes it is big but the nature of this change is simply quite complex.
I suggest firstly focus on reviewing newly added functions (like proper naming, calling conventions ...) + changes to the publicly ""visible"" structs.
After that I can write the updated documentation (which can reveal couple of API gotchas).
And in the end we can polish implementation details.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/sjaeckel,14,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-348810540,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","Yes it is big but the nature of this change is simply quite complex.
I suggest firstly focus on reviewing newly added functions (like proper naming, calling conventions ...) + changes to the publicly ""visible"" structs.
After that I can write the updated documentation (which can reveal couple of API gotchas).
And in the end we can polish implementation details.

sounds like a plan, we should probably now first finish #309 , I'll add documentation soon, but I think from a coding PoV it's fine. Then we go on with this one.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,15,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-376647535,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","Ad alternative names - what about to change the curve struct like this:
typedef struct {
   const char *names[6]; /* HERE IS THE CHANGE!!! */
   const char *prime;
   const char *A;
   const char *B;
   const char *order;
   const char *Gx;
   const char *Gy;
   unsigned long cofactor;
   unsigned long oid[16];
   unsigned long oidlen;
} ltc_ecc_curve;
and later use this:
{
  /* curve name */ { ""SECP192R1"", ""NISTP192"", ""PRIME192V1"", NULL, NULL, NULL },
  /* prime      */ ""FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF"",
  /* A          */ ""FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC"",
  /* B          */ ""64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1"",
  /* order      */ ""FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831"",
  /* Gx         */ ""188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012"",
  /* Gy         */ ""07192B95FFC8DA78631011ED6B24CDD573F977A11E794811"",
  /* cofactor   */ 1,
  /* OID        */ { 1,2,840,10045,3,1,1 }, 7
}",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,16,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-376650034,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format",BTW this PR has broken LTC_MECC_FP support 😞,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/sjaeckel,17,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-376685883,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","BTW this PR has broken LTC_MECC_FP support

unfixable?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,18,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-376687264,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","unfixable?

we are missing order in ltc_ecc_fp_mul2add params as ""standard"" mul2add does not need it",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/sjaeckel,19,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-376708123,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","we are missing order in ltc_ecc_fp_mul2add params as ""standard"" mul2add does not need it

how about adding it as an argument to ltc_ecc_fp_add_point() and call that one (from one of our API's) before any of fp_mul2add() or fp_mulmod() are called?
BUT I've no clue how widely LTC_MECC_FP is even used and if we should bother investing a lot of time...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/buggywhip,20,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-377753890,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","We have  ecc_get_curve_by_name() but ought we also have ecc_get_curve_by_oid() using the dotted string form of OID?
int ecc_get_curve_by_oid(const char* oid, const ltc_ecc_curve** cu);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/buggywhip,21,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-377755333,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format",Ought we have a mechanical process to confirm that a name only appears once in a list of all names that appear in all curves?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/buggywhip,22,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-377755677,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","I like the idea of supporting synonymous names for the same curve but am bothered by including the potentially ambiguous names like P-256 and ECC-256, past history notwithstanding. I'd much prefer developers change over to the standard-based names like secp256r1 or prime256v1.  Failing that, the doc should be crystal clear that P-XXX and ECC-XXX are only supported for reasons of backward compatibility.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,23,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-377791619,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","ad int ecc_get_curve_by_oid(const char* oid, const ltc_ecc_curve** cu);
with current implementation you can call:
err = ecc_get_curve_by_name(""1.3.132.0.31"", &curve);
I know that the name is a bit misleading but we can explain it in documentation.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/sjaeckel,24,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-378262856,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","I know that the name is a bit misleading but we can explain it in documentation.

how about renaming it to ecc_get_curve(const char *id, const ltc_ecc_curve **cu)?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/buggywhip,25,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-379498377,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","err = ecc_get_curve_by_name(""1.3.132.0.31"", &curve);
I know that the name is a bit misleading but we can explain it in documentation.

how about renaming it to ecc_get_curve(const char *id, const ltc_ecc_curve **cu)?

For me the doc should be sufficient.    ...and I kinda like the shorter name.  But I'd like to suggest we extend the arg id to identifier which can more readily encompass and associate both name and OID.
   ecc_get_curve(const char *identifier, const ltc_ecc_curve **cu)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,26,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-379498598,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","In the end I have decided for:
int ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu);",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/buggywhip,27,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-379498685,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","In the end I have decided for:

 int ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu);
I just saw that.  Bingo!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,28,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-379895838,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format",@fperrad could you please check (const params + usual stuff) with your linter pr/ecc-non-asn1-part branch?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/fperrad,29,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-380170092,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","@karel-m here, the harvest:
--- Module:   src/pk/ecc/ecc_verify_hash.c (C)
                                                  _
   if ((err = mp_add_d(a, 3, a_plus3)) != CRYPT_OK) {
src/pk/ecc/ecc_verify_hash.c  46  Info 838: Previously assigned value to variable 'err' has not been used

--- Module:   src/pk/ecc/ltc_ecc_verify_key.c (C)
                        _
   prime = key->dp.prime;
src/pk/ecc/ltc_ecc_verify_key.c  30  Info 838: Previously assigned value to variable 'prime' has not been used
                        _
   order = key->dp.order;
src/pk/ecc/ltc_ecc_verify_key.c  31  Info 838: Previously assigned value to variable 'order' has not been used
                    _
   a     = key->dp.A;
src/pk/ecc/ltc_ecc_verify_key.c  32  Info 838: Previously assigned value to variable 'a' has not been used

src/pk/ecc/ecc_sign_hash.c  120  Info 818: Pointer parameter 'key' (line 21) could be declared as pointing to const
src/pk/ecc/ltc_ecc_points.c  56  Info 818: Pointer parameter 'p' (line 49) could be declared as pointing to const
src/pk/ecc/ltc_ecc_points.c  65  Info 818: Pointer parameter 'dst' (line 58) could be declared as pointing to const
src/pk/ecc/ecc_get_key.c  54  Info 818: Pointer parameter 'key' (line 22) could be declared as pointing to const
src/pk/ecc/ecc_ansi_x963_export.c  62  Info 818: Pointer parameter 'key' (line 25) could be declared as pointing to const
src/pk/ecc/ecc_export.c  65  Info 818: Pointer parameter 'key' (line 27) could be declared as pointing to const
src/pk/ecc/ecc_verify_hash.c  160  Info 818: Pointer parameter 'key' (line 21) could be declared as pointing to const
src/pk/ecc/ecc_get_size.c  30  Info 818: Pointer parameter 'key' (line 24) could be declared as pointing to const
src/pk/ecc/ecc_shared_secret.c  70  Info 818: Pointer parameter 'private_key' (line 27) could be declared as pointing to const
src/pk/ecc/ecc_shared_secret.c  70  Info 818: Pointer parameter 'public_key' (line 27) could be declared as pointing to const
src/pk/ecc/ltc_ecc_verify_key.c  67  Info 818: Pointer parameter 'key' (line 22) could be declared as pointing to const",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,30,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-380194778,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","@fperrad I have fixed all of them except:
src/pk/ecc/ltc_ecc_points.c  56  Info 818: Pointer parameter 'p' (line 49) could be declared as pointing to const
src/pk/ecc/ltc_ecc_points.c  65  Info 818: Pointer parameter 'dst' (line 58) could be declared as pointing to const

These look like false positives. Please re-run the check again.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/fperrad,31,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-380205476,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","I agree look like false positive.
There are 2 new ones:
src/pk/ecc/ecc_decrypt_key.c  136  Info 818: Pointer parameter 'key' (line 30) could be declared as pointing to const
src/pk/ecc/ecc_encrypt_key.c  129  Info 818: Pointer parameter 'key' (line 34) could be declared as pointing to const",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/fperrad,32,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-380393534,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","I missed this one:
Info 765: external '_curve_names' (line 17, file src/pk/ecc/ecc_get_curve.c) could be made static",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,33,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-385036624,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format",Should I start working on doc update or do we plan more changes to API / struct & co.  ?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/sjaeckel,34,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-385082075,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format",Go for the docs! 👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/sjaeckel,35,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-386133141,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format",And feel free to squash again :),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,36,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-386887017,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","FYI: I have tried to build dropbear with the API changes included in this PR. Unfortunately we are going to break dropbear build quite severely. I'll try to investigate whether we can somehow lower the impact.
Or maybe we should simply submit a patch for dropbear alongside the release of this new API.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/sjaeckel,37,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-386911830,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","FYI: I have tried to build dropbear with the API changes included in this PR. Unfortunately we are going to break dropbear build quite severely. I'll try to investigate whether we can somehow lower the impact.
Or maybe we should simply submit a patch for dropbear alongside the release of this new API.

I'll have a look and probably @mkj can add his two cents as well :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/mkj,38,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-387091368,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","I'm fine with updating Dropbear to work with the new API - I've only had a quick look over it so far though. ecc_set_key() can replace Dropbear's buf_get_ecc_raw_pubkey(), and places Dropbear uses key->dp will use ltc_ecc_curve instead.
My main concern is how the ABI breakage happens if people have built Dropbear using system libtomcrypt on Debian - I guess the shared library version number will bump?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,39,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-388652025,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","@mkj my first draft (not in a pull-request quality yet) is here karel-m/dropbear@4530ff6
Ad ABI breakage we definitely will bump ABI & SO versions (as it turned out it is necessary even with smaller API changes than this one)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,236,2017-06-21T20:28:24Z,2018-05-23T07:30:39Z,2018-06-03T18:15:24Z,MERGED,True,6915,1112,55,https://github.com/karel-m,ECC-step2: curves y^2 = x^3 + ax + b,2,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/236,https://github.com/karel-m,40,https://github.com/libtom/libtomcrypt/pull/236#issuecomment-391136231,"While hacking on ecc_sign+verify_hash_rfc7518 earlier today I realized that it would be possible to extract from my branch miko-ecc-enhancements the crucial part implementing generalized elliptic curves y^2 = x^3 + ax + b (current develop branch supports only y^2 = x^3 - 3x + b).
The API changes comprise of the following new functions:
int  ecc_export_raw(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
int  ecc_import_raw(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);

ltc_ecc_set_type* ecc_dp_find_by_oid(unsigned long *oid, unsigned long oidsize);
ltc_ecc_set_type* ecc_dp_find_by_name(char *curve_name);
ltc_ecc_set_type* ecc_dp_find_by_params(char *hex_prime, char *hex_A, char *hex_B, char *hex_order, char *hex_Gx, char *hex_Gy, unsigned long cofactor);
These are missing due to #187

ecc_export_full - export EC key in OpenSSL compatible format
ecc_import_full - import EC key in OpenSSL compatible format
ecc_import_pkcs8 - import EC key in PKCS#8 format","Great I'll squash it to a single commit and merge to develop.
I'll open a separate PR for doc changes",True,{'HOORAY': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,237,2017-06-22T07:55:47Z,2017-06-22T12:16:36Z,2017-06-22T12:39:55Z,MERGED,True,992,1387,19,https://github.com/karel-m,DH facelift part 1,7,[],https://github.com/libtom/libtomcrypt/pull/237,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/237,as mentioned in #227,as mentioned in #227,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,237,2017-06-22T07:55:47Z,2017-06-22T12:16:36Z,2017-06-22T12:39:55Z,MERGED,True,992,1387,19,https://github.com/karel-m,DH facelift part 1,7,[],https://github.com/libtom/libtomcrypt/pull/237,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/237#issuecomment-310363035,as mentioned in #227,"pff, thou shalt wait for the okay of travis",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/238,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/buggywhip,2,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-310388971,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","If it were me I would...

Keep LTC lean.  Don't load routines up with a bunch of internal radix conversions and extra arguments.

Instead, support the most likely or most convenient radix for the function.  Then, if a user has data in other radices let them convert using a set of [to be?] provided utility functions.



.
…
 On Jun 22, 2017, at 3:16 AM, Steffen Jaeckel ***@***.***> wrote:

 In order to resolve #227 <#227> and /8 of #228 <#228> I propose this as a possible solution.

 This evolved from #227 (comment) <#227 (comment)> ff.

 Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.

 First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
 Second there were issues (e.g. #136 <#136> ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 <#97> )
 Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.

 Thanks for your comments.

 You can view, comment on, or merge this pull request online at:

   #238 <#238>
 Commit Summary

 use ltc_pk_part in rsa_import_radix()
 use compare_testvector() in rsa_test()
 also test binary import
 File Changes

 M src/headers/tomcrypt_pk.h <https://github.com/libtom/libtomcrypt/pull/238/files#diff-0> (12)
 M src/pk/rsa/rsa_import_radix.c <https://github.com/libtom/libtomcrypt/pull/238/files#diff-1> (34)
 M tests/rsa_test.c <https://github.com/libtom/libtomcrypt/pull/238/files#diff-2> (54)
 Patch Links:

 https://github.com/libtom/libtomcrypt/pull/238.patch <https://github.com/libtom/libtomcrypt/pull/238.patch>
 https://github.com/libtom/libtomcrypt/pull/238.diff <https://github.com/libtom/libtomcrypt/pull/238.diff>
 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub <#238>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AAzofteXxMpI5oc2jIE_SHgQ0eNtjR2vks5sGj71gaJpZM4OCFn3>.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-310404449,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","The most universal is IMO binary/raw format; however, it will end up like this:
int rsa_import_bin(unsigned char *N,  unsigned long Nlen,
                   unsigned char *e,  unsigned long elen,
                   unsigned char *d,  unsigned long dlen,
                   unsigned char *p,  unsigned long plen,
                   unsigned char *q,  unsigned long qlen,
                   unsigned char *dP, unsigned long dPlen,
                   unsigned char *dQ, unsigned long dQlen,
                   unsigned char *qP, unsigned long qPlen,
                   rsa_key *key);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/buggywhip,4,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-310424894,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","On Jun 22, 2017, at 7:53 AM, karel-m ***@***.***> wrote:
 The most universal is IMO binary/raw format; however, it will end up like this:

 int rsa_import_bin(unsigned char *N,  unsigned long Nlen,
                    unsigned char *e,  unsigned long elen,
                    unsigned char *d,  unsigned long dlen,
                    unsigned char *p,  unsigned long plen,
                    unsigned char *q,  unsigned long qlen,
                    unsigned char *dP, unsigned long dPlen,
                    unsigned char *dQ, unsigned long dQlen,
                    unsigned char *qP, unsigned long qPlen,
                    rsa_key *key);
Tough call.

The above appears messy but it is arguably the cleanest.  ...and in the spirit of lean, keeping it, IMO, makes sense.  If we want to provide additional helper/wrapper functions for PEM/DER and/or mixed radices I'm okay with that.  ...or perhaps just a set of base conversion utilities?

My concern was driven in part because I have seen some params expressed in decimal, some hex, and yes, base64 all in the same set.  Ugh.  But who's responsibility is it to clean that mess up?  A set of simple base conversion utilities can address this and a host of other issues.

That said, I defer to you as you are doing the heavy lifting.  I'm just the sidewalk super. ;-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-310469685,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","As for the simplicity the ""bin"" approach might make sense. We can leave converting dec, hex, base64 or whatever to LTC users.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-311346772,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","I just had a chat with @sebastianas and he had a good idea!
how about orienting on the OpenSSL API?
int RSA_set0_key(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d);
int RSA_set0_factors(RSA *r, BIGNUM *p, BIGNUM *q);
int RSA_set0_crt_params(RSA *r,BIGNUM *dmp1, BIGNUM *dmq1, BIGNUM *iqmp);


all these functions expect binary input data, conversion is up to the user
data pointers are const, the user has to eventually free himself

int rsa_set_key(const unsigned char *N,  unsigned long Nlen,
                const unsigned char *e,  unsigned long elen,
                const unsigned char *d,  unsigned long dlen, /* is NULL for public keys */
                rsa_key *key);
int rsa_set_factors(const unsigned char *p,  unsigned long plen,
                    const unsigned char *q,  unsigned long qlen,
                    rsa_key *key);
int rsa_set_crt_params(const unsigned char *dP, unsigned long dPlen,
                       const unsigned char *dQ, unsigned long dQlen,
                       const unsigned char *qP, unsigned long qPlen,
                       rsa_key *key);

int dh_set_pg(const unsigned char *p, unsigned long plen,
              const unsigned char *g, unsigned long glen,
              dh_key *key);
/* here we can support either one or both */
int dh_set_key(const unsigned char *pub, unsigned long publen,
               const unsigned char *priv, unsigned long privlen,
               dh_key *key);

int dsa_set_pqg(const unsigned char *p,  unsigned long plen,
                const unsigned char *q,  unsigned long qlen,
                const unsigned char *g,  unsigned long glen,
                dsa_key *key);
/* here we can support either one or both */
int dsa_set_key(const unsigned char *pub, unsigned long publen,
                const unsigned char *priv, unsigned long privlen,
                dsa_key *key);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-311433210,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","how about orienting on the OpenSSL API?

It looks fine.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-311433498,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","It looks fine.

alright, I'll add the rest",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-311434272,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","BTW the following API is also a bit insane (I know, it is my commit 2014-01-27)
int dsa_make_key_ex(prng_state *prng, int wprng, int group_size, int modulus_size, 
                    dsa_key *key, char* p_hex, char* q_hex, char* g_hex)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-311438789,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","We should perhaps keep DH and DSA API in a similar style

dh_make_key vs. dsa_make_key
dh_make_key_dhparam vs. dsa_make_key_dsaparam
dh_set_pg vs. dsa_set_pqg
dh_set_key vs. dsa_set_key",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/sjaeckel,11,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-311439051,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","We should perhaps keep DH and DSA API in a similar style

that was my intention",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-312735097,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","1/ The new seems to cover all my use cases relater to DSA/DH/RSA, which is a great.
2/ I am not sure about the names dsa_make_key_ex and dh_make_key. Up to now the function named *_make_key were sort of ""all-in-one-go"" functions that you simply call and as a result you get the key. The two cases in question are however just the final part of key generation that do not work in one go.
It would be IMO better to name them:
- dsa_make_key_ex
+ dsa_generate_key    (or shorter dsa_gen_key)

- dh_make_key
+ dh_generate_key    (or shorter dh_gen_key)
We might want (maybe later) introduce dh_make_key as a simple wrapper around dh_set_pg_groupsize + dh_generate_key (in ""all-in-one-go"" style).
3/ Ad radix_to_bin - why do we have const void *in and not const char *in?
4/ I am not sure if I like the idea of *_KEY_INITIALIZER

it is a bit inconsistent as it is used just by DH and DSA (not RSA)
I think it is destined to be easily forgotten by users
a simple dsa_key key; might (sometimes) set the whole structure to ""all-zeroes"" which migh be hard distinguish from correct dsa_key key = LTC_DSA_KEY_INITIALIZER;

Considering the fact that the ""custom"" keys have to be created by calling 2 functions in given order - like:
dh_set_pg(p, plen, g, glen, key);
dh_set_key(pub, publen, priv, privlen, key);
//OR
dsa_set_pqg(p, plen, q, qlen, g, glen, key);
dsa_set_key(pub, publen, priv, privlen, key);
we can IMO simply initialize the keys in dh_set_pg* or dsa_set_pqg* or not?
If you think that *_KEY_INITIALIZER is a good idea we should perhaps add something like PK_INTIALIZED (non zero) and use define like: #define LTC_DSA_KEY_INITIALIZER { PK_INITIALIZED, 0, NULL, NULL, NULL, NULL, NULL } so that we can easily detect uninitialized key structure.
5/ dh_set.c
I would prefer to have at least dh_set_pg_dhparam in a separate file as when using static linking all the ASN.1 will got linked even if I use just a simple non-ASN.1 dh_set_pg
6/ question related to mp_cleanup_multi
Is it intended as a new best practice to call mp_cleanup_multi instead of mp_clear_multi?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-312735860,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.",The 5/ also applies to dsa_set.c,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/sjaeckel,14,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-312819663,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","1/ The new seems to cover all my use cases relater to DSA/DH/RSA, which is a great.

that's perfect!

2/ I am not sure about the names dsa_make_key_ex and dh_make_key. Up to now the function named *_make_key were sort of ""all-in-one-go"" functions that you simply call and as a result you get the key. The two cases in question are however just the final part of key generation that do not work in one go.
It would be IMO better to name them:
- dsa_make_key_ex
+ dsa_generate_key    (or shorter dsa_gen_key)

- dh_make_key
+ dh_generate_key    (or shorter dh_gen_key)

you're right! done

We might want (maybe later) introduce dh_make_key as a simple wrapper around dh_set_pg_groupsize + dh_generate_key (in ""all-in-one-go"" style).

ah, the user can do that, 1.17 had no dh_make_key() ;-) and I would've removed dsa_make_key() if it wouldn't break the API

3/ Ad radix_to_bin - why do we have const void *in and not const char *in?

because I prefer void* over char* or unsigned char* where it's not 100% clear what the input is a type of. I could perfectly think of someone having their own MPI provider where mp_read_radix() has support for a radix that's not stored as a string anymore.

4/ I am not sure if I like the idea of *_KEY_INITIALIZER

I also wasn't sure if I should like it or not, therefore I removed it. All the PK algos lived without it until now so let's keep it like that.

5/ dh_set.c
I would prefer to have at least dh_set_pg_dhparam in a separate file as when using static linking all the ASN.1 will got linked even if I use just a simple non-ASN.1 dh_set_pg

done

6/ question related to mp_cleanup_multi
Is it intended as a new best practice to call mp_cleanup_multi instead of mp_clear_multi?

I think it's an easy and safe method to prevent use-after-free -> yes, we should treat is as the new best practice",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/sjaeckel,15,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-312857624,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","Regarding rand_bn_range() I've still a patch locally which I'm not sure if it'd make sense... @karel-m do we need this?
diff --git a/src/math/rand_bn.c b/src/math/rand_bn.c
index 3d4f10c..2916da1 100755
--- a/src/math/rand_bn.c
+++ b/src/math/rand_bn.c
@@ -53,5 +53,5 @@ cleanup:
 /**
-  Generate a random number N in a range: 1 <= N < upper
+  Generate a random number N in a range: lower < N < upper
 */
-int rand_bn_range(void *N, void *limit, prng_state *prng, int wprng)
+int rand_bn_range(void *N, ltc_mp_digit lower, void *upper, prng_state *prng, int wprng)
 {",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/karel-m,16,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-312940325,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","Ad radix_to_bin - if we are going to use void * instead of char * then we should perhaps pass also inlen like:
- int radix_to_bin(const void *in, int radix, void *out, size_t* len);
+ int radix_to_bin(const void *in, size_t inlen int radix, void *out, size_t* outlen);
BTW what about to add bin_to_radix as well?
Ad rand_bn_range - after thinking a bit about your idea of having:
int rand_bn_range(void *N, ltc_mp_digit lower, void *upper, prng_state *prng, int wprng)
I think that we should rename the current function to:
int rand_bn_limit(void *N, void *limit, prng_state *prng, int wprng)
I am not sure whether we should add rand_bn_range(N, lower, upper, prng, wprng).
The rest is OK from my point of view. Although I have not checked whether the test suite of my perl bindings passes after this API facelift, IMO it would better to check it with the whole 1.18-RC.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/sjaeckel,17,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-312976306,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","I'd leave radix_to_bin() as it is.
I don't see a case for bin_to_radix() (yet?).
How about rand_bn_upto() ?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/karel-m,18,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-313011040,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","I'd leave radix_to_bin() as it is.

Then in must be a NUL-terminated string (or NUL-terminater buffer), right?

How about rand_bn_upto() ?

Yes.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/sjaeckel,19,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-313028701,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","Then in must be a NUL-terminated string (or NUL-terminater buffer), right?

Yep, the read_radix() implementation has to detect the end of the stream.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,238,2017-06-22T10:16:20Z,2017-07-05T09:33:17Z,2017-07-05T09:33:21Z,MERGED,True,1713,777,36,https://github.com/sjaeckel,Re-factor X_import_radix() etc. API's,39,[],https://github.com/libtom/libtomcrypt/pull/238,https://github.com/karel-m,20,https://github.com/libtom/libtomcrypt/pull/238#issuecomment-313031055,"In order to resolve #227 and /8 of #228 I propose this as a possible solution.
This evolved from #227 (comment) ff.
Short summary: we want to be able to pass a huge (enough) number and combination of parameters to import functions and we're trying to find a nice way to do that.
First there was rsa_import() et. al which used standardized and/or proprietary formats to {ex,im}port asymmetric keys
Second there were issues (e.g. #136 ) where this wasn't enough and rsa_import_radix() was introduced as an evolution of a newly introduced rsa_import_hex() (c.f. #97 )
Third here we are as we realized that one radix is sometimes not enough, where you e.g. have one part of a key as hex string and another part as binary data.
Thanks for your comments.","OK, I would at least put that information in comment like:
-    @param in    The input
+    @param in    The input (NUL-terminated buffer)


the read_radix() implementation has to detect the end of the stream.

Yes, but libtomcrypt's interface should be independent on underlying implementation.
As for bin_to_radix I also do not have a use case right now. I was just thinking about making them both accessible from my perl bindings. We can skip it.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,239,2017-06-22T11:25:36Z,2017-07-05T10:46:59Z,2017-07-05T10:47:02Z,MERGED,True,20,163,4,https://github.com/karel-m,ASN.1 changes extracted from ECC stuff,2,[],https://github.com/libtom/libtomcrypt/pull/239,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/239,"As mentioned in #187 (comment)
The motivation is to make rebasing of ECC branches a bit smoother.","As mentioned in #187 (comment)
The motivation is to make rebasing of ECC branches a bit smoother.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,239,2017-06-22T11:25:36Z,2017-07-05T10:46:59Z,2017-07-05T10:47:02Z,MERGED,True,20,163,4,https://github.com/karel-m,ASN.1 changes extracted from ECC stuff,2,[],https://github.com/libtom/libtomcrypt/pull/239,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/239#issuecomment-313055762,"As mentioned in #187 (comment)
The motivation is to make rebasing of ECC branches a bit smoother.","IMO der_length_sequence_ex can be private, for internal use only. Please,
change it, I am only on email till Saturday.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,240,2017-06-22T18:31:51Z,2017-06-23T08:06:13Z,2017-06-23T08:06:13Z,MERGED,True,2,2,2,https://github.com/fperrad,more linting,1,[],https://github.com/libtom/libtomcrypt/pull/240,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/240,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,241,2017-06-23T06:00:18Z,2017-06-27T18:05:00Z,2017-06-27T18:05:56Z,MERGED,True,46,31,9,https://github.com/sjaeckel,Fourth general clean-up,9,[],https://github.com/libtom/libtomcrypt/pull/241,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/241,"fix issues detected by coverity
fix potential issue in rsa_exptmod()
""hide"" new internal functions
final fix of #232
minor clean-ups","fix issues detected by coverity
fix potential issue in rsa_exptmod()
""hide"" new internal functions
final fix of #232
minor clean-ups",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,241,2017-06-23T06:00:18Z,2017-06-27T18:05:00Z,2017-06-27T18:05:56Z,MERGED,True,46,31,9,https://github.com/sjaeckel,Fourth general clean-up,9,[],https://github.com/libtom/libtomcrypt/pull/241,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/241#issuecomment-310588436,"fix issues detected by coverity
fix potential issue in rsa_exptmod()
""hide"" new internal functions
final fix of #232
minor clean-ups","It is unrelated, but could you please fix makefile.unix in this part:
	-@rm -f test tv_gen hashsum crypt small timing
	-@rm -f test.exe tv_gen.exe hashsum.exe crypt.exe small.exe timing.exe

s/crypt/ltcrypt/",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,241,2017-06-23T06:00:18Z,2017-06-27T18:05:00Z,2017-06-27T18:05:56Z,MERGED,True,46,31,9,https://github.com/sjaeckel,Fourth general clean-up,9,[],https://github.com/libtom/libtomcrypt/pull/241,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/241#issuecomment-311313538,"fix issues detected by coverity
fix potential issue in rsa_exptmod()
""hide"" new internal functions
final fix of #232
minor clean-ups","The blake2 modifications were done after the original code triggered a ""Memory - illegal accesses  (OVERRUN)"" warning in coverity. It's true that the XMEMCPY() in the if (inlen > fill) case could've been called with an invalid pointer, but fill would have had the value 0. But still that was a violation IIUC and coverity also doesn't complain anymore now that it's changed.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,242,2017-06-26T20:32:09Z,2017-06-27T17:17:03Z,2017-09-14T17:54:24Z,CLOSED,False,2,2,1,https://github.com/karel-m,fix warning: missing braces around initializer (gcc3),1,[],https://github.com/libtom/libtomcrypt/pull/242,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/242,"just cosmetics
the warning was:
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Werror -Wall -Isrc/headers -Itests -DLTC_SOURCE -c demos/timing.c -o demos/timing.o
demos/timing.c: In function `time_rsa':
demos/timing.c:700: warning: missing braces around initializer
demos/timing.c:700: warning: (near initialization for `buf[0]')
demos/timing.c: In function `time_ecc':
demos/timing.c:926: warning: missing braces around initializer
demos/timing.c:926: warning: (near initialization for `buf[0]')
*** Error code 1","just cosmetics
the warning was:
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Werror -Wall -Isrc/headers -Itests -DLTC_SOURCE -c demos/timing.c -o demos/timing.o
demos/timing.c: In function `time_rsa':
demos/timing.c:700: warning: missing braces around initializer
demos/timing.c:700: warning: (near initialization for `buf[0]')
demos/timing.c: In function `time_ecc':
demos/timing.c:926: warning: missing braces around initializer
demos/timing.c:926: warning: (near initialization for `buf[0]')
*** Error code 1",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,242,2017-06-26T20:32:09Z,2017-06-27T17:17:03Z,2017-09-14T17:54:24Z,CLOSED,False,2,2,1,https://github.com/karel-m,fix warning: missing braces around initializer (gcc3),1,[],https://github.com/libtom/libtomcrypt/pull/242,https://github.com/rofl0r,2,https://github.com/libtom/libtomcrypt/pull/242#issuecomment-311196353,"just cosmetics
the warning was:
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Werror -Wall -Isrc/headers -Itests -DLTC_SOURCE -c demos/timing.c -o demos/timing.o
demos/timing.c: In function `time_rsa':
demos/timing.c:700: warning: missing braces around initializer
demos/timing.c:700: warning: (near initialization for `buf[0]')
demos/timing.c: In function `time_ecc':
demos/timing.c:926: warning: missing braces around initializer
demos/timing.c:926: warning: (near initialization for `buf[0]')
*** Error code 1","that warning is incorrect: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53119
{0} is the universal zero initializer in C. I even backported the patch in the bug report to older GCCs for use in sabotage linux, however not yet for gcc 3.4.6.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,242,2017-06-26T20:32:09Z,2017-06-27T17:17:03Z,2017-09-14T17:54:24Z,CLOSED,False,2,2,1,https://github.com/karel-m,fix warning: missing braces around initializer (gcc3),1,[],https://github.com/libtom/libtomcrypt/pull/242,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/242#issuecomment-311308022,"just cosmetics
the warning was:
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Werror -Wall -Isrc/headers -Itests -DLTC_SOURCE -c demos/timing.c -o demos/timing.o
demos/timing.c: In function `time_rsa':
demos/timing.c:700: warning: missing braces around initializer
demos/timing.c:700: warning: (near initialization for `buf[0]')
demos/timing.c: In function `time_ecc':
demos/timing.c:926: warning: missing braces around initializer
demos/timing.c:926: warning: (near initialization for `buf[0]')
*** Error code 1","that warning is incorrect

I guess this can be closed?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,242,2017-06-26T20:32:09Z,2017-06-27T17:17:03Z,2017-09-14T17:54:24Z,CLOSED,False,2,2,1,https://github.com/karel-m,fix warning: missing braces around initializer (gcc3),1,[],https://github.com/libtom/libtomcrypt/pull/242,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/242#issuecomment-311425270,"just cosmetics
the warning was:
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Werror -Wall -Isrc/headers -Itests -DLTC_SOURCE -c demos/timing.c -o demos/timing.o
demos/timing.c: In function `time_rsa':
demos/timing.c:700: warning: missing braces around initializer
demos/timing.c:700: warning: (near initialization for `buf[0]')
demos/timing.c: In function `time_ecc':
demos/timing.c:926: warning: missing braces around initializer
demos/timing.c:926: warning: (near initialization for `buf[0]')
*** Error code 1","ok, closing",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,243,2017-07-08T16:26:55Z,2017-07-09T15:34:05Z,2017-07-11T09:01:07Z,MERGED,True,1,1,13,https://github.com/karel-m,Fix: chmod -x,3,[],https://github.com/libtom/libtomcrypt/pull/243,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/243,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,245,2017-07-09T17:45:10Z,2017-07-11T13:30:58Z,2017-07-11T13:30:58Z,CLOSED,False,1,1,1,https://github.com/fperrad,Some linting,1,[],https://github.com/libtom/libtomcrypt/pull/245,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/245,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,245,2017-07-09T17:45:10Z,2017-07-11T13:30:58Z,2017-07-11T13:30:58Z,CLOSED,False,1,1,1,https://github.com/fperrad,Some linting,1,[],https://github.com/libtom/libtomcrypt/pull/245,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/245#issuecomment-314016124,,Looks like we can either have clean linting or doxygen documentation ;-),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,245,2017-07-09T17:45:10Z,2017-07-11T13:30:58Z,2017-07-11T13:30:58Z,CLOSED,False,1,1,1,https://github.com/fperrad,Some linting,1,[],https://github.com/libtom/libtomcrypt/pull/245,https://github.com/fperrad,3,https://github.com/libtom/libtomcrypt/pull/245#issuecomment-314197800,,"Well, rebased with only the 2nd commit.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,245,2017-07-09T17:45:10Z,2017-07-11T13:30:58Z,2017-07-11T13:30:58Z,CLOSED,False,1,1,1,https://github.com/fperrad,Some linting,1,[],https://github.com/libtom/libtomcrypt/pull/245,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/245#issuecomment-314198541,,I forgot to mention that it was okay! You can add it again! Looks like the latest changes to the doxygen config made it compatible,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,245,2017-07-09T17:45:10Z,2017-07-11T13:30:58Z,2017-07-11T13:30:58Z,CLOSED,False,1,1,1,https://github.com/fperrad,Some linting,1,[],https://github.com/libtom/libtomcrypt/pull/245,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/245#issuecomment-314444042,,Merged in c6b93ae,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,246,2017-07-09T19:56:11Z,2017-07-10T21:26:13Z,2017-07-10T21:26:23Z,MERGED,True,24,0,3,https://github.com/karel-m,GCM allow skipping gcm_add_aad and gcm_process,1,[],https://github.com/libtom/libtomcrypt/pull/246,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/246,"This patch is a by-product of fixing issues related to my perl bindings:

DCIT/perl-CryptX#36
DCIT/perl-CryptX#37

Current implementation strictly requires to call gcm_add_aad and gcm_process even if there is no AAD and no plain/cipher text to process.
With this patch you can skip calling gcm_add_aad if you do not want to add any additional authenticated data (and similarly  gcm_process).
No need to add this to 1.18","This patch is a by-product of fixing issues related to my perl bindings:

DCIT/perl-CryptX#36
DCIT/perl-CryptX#37

Current implementation strictly requires to call gcm_add_aad and gcm_process even if there is no AAD and no plain/cipher text to process.
With this patch you can skip calling gcm_add_aad if you do not want to add any additional authenticated data (and similarly  gcm_process).
No need to add this to 1.18",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,246,2017-07-09T19:56:11Z,2017-07-10T21:26:13Z,2017-07-10T21:26:23Z,MERGED,True,24,0,3,https://github.com/karel-m,GCM allow skipping gcm_add_aad and gcm_process,1,[],https://github.com/libtom/libtomcrypt/pull/246,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/246#issuecomment-314189010,"This patch is a by-product of fixing issues related to my perl bindings:

DCIT/perl-CryptX#36
DCIT/perl-CryptX#37

Current implementation strictly requires to call gcm_add_aad and gcm_process even if there is no AAD and no plain/cipher text to process.
With this patch you can skip calling gcm_add_aad if you do not want to add any additional authenticated data (and similarly  gcm_process).
No need to add this to 1.18","we could also put that one in 1.18
if you want to, then please rebase on top of the release/1.18.0 branch, set the release/1.18.0 as target branch and merge
if you don't care if it's in, simply merge and it'll be in the next release",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,247,2017-07-10T09:52:05Z,2017-07-13T12:34:06Z,2017-07-13T12:34:09Z,MERGED,True,42,39,6,https://github.com/sjaeckel,introduce LTC_CFLAGS and LTC_LDFLAGS,3,[],https://github.com/libtom/libtomcrypt/pull/247,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/247,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,247,2017-07-10T09:52:05Z,2017-07-13T12:34:06Z,2017-07-13T12:34:09Z,MERGED,True,42,39,6,https://github.com/sjaeckel,introduce LTC_CFLAGS and LTC_LDFLAGS,3,[],https://github.com/libtom/libtomcrypt/pull/247,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/247#issuecomment-314092284,,"Could you please also patch in this PR makefile.unix + makefile.mingw like this:
- LTC_CFLAGS  = $(CFLAGS) -Isrc/headers -Itests -DLTC_SOURCE 
+ LTC_CFLAGS  = -Isrc/headers -Itests -DLTC_SOURCE $(CFLAGS)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,247,2017-07-10T09:52:05Z,2017-07-13T12:34:06Z,2017-07-13T12:34:09Z,MERGED,True,42,39,6,https://github.com/sjaeckel,introduce LTC_CFLAGS and LTC_LDFLAGS,3,[],https://github.com/libtom/libtomcrypt/pull/247,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/247#issuecomment-314374724,,@buggywhip can you please check if that works for you so we can merge this & create an RC2,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,247,2017-07-10T09:52:05Z,2017-07-13T12:34:06Z,2017-07-13T12:34:09Z,MERGED,True,42,39,6,https://github.com/sjaeckel,introduce LTC_CFLAGS and LTC_LDFLAGS,3,[],https://github.com/libtom/libtomcrypt/pull/247,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/247#issuecomment-314887904,,"The trouble might IMO still happen when building tests/*.o see:
~/libtomcrypt$ CFLAGS=""-DUSE_LTM -DLTM_DESC -I/usr/local/include"" EXTRALIBS=""-L/usr/local/lib -ltommath"" make V=1 tests/ecc_test.o
gcc -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE -Wextra -Wsystem-headers -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wdeclaration-after-statement -W
no-type-limits -O3 -funroll-loops -fomit-frame-pointer -DGIT_VERSION=\""git-v1.18.0-rc1-20-ga949ef5\"" -DUSE_LTM -DLTM_DESC -I/usr/local/include -Itests -c tests/ecc_test.c -o tests/ecc_test.o

The sequence ... -DUSE_LTM -DLTM_DESC -I/usr/local/include -Itests -c tests/ecc_test.c ... is wrong as -Itests should be somewhere at the beginning, we cannot use CFLAGS += -Itests.
Possible workaroung might be to unconditionally put -Itests in LTC_CFLAGS like:
- LTC_CFLAGS += -I./src/headers/ -Wall -Wsign-compare -Wshadow -DLTC_SOURCE
+ LTC_CFLAGS += -I./src/headers/ -Itests -Wall -Wsign-compare -Wshadow -DLTC_SOURCE",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,247,2017-07-10T09:52:05Z,2017-07-13T12:34:06Z,2017-07-13T12:34:09Z,MERGED,True,42,39,6,https://github.com/sjaeckel,introduce LTC_CFLAGS and LTC_LDFLAGS,3,[],https://github.com/libtom/libtomcrypt/pull/247,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/247#issuecomment-314893639,,"My suggestion to extend README.md:
Building
If you have libtommath installed on your system:
CFLAGS=""-DUSE_LTM -DLTM_DESC"" EXTRALIBS=""-ltommath"" make all

For building a shared library use:
CFLAGS=""-DUSE_LTM -DLTM_DESC"" EXTRALIBS=""-ltommath"" make -f makefile.shared all

If you have libtommath in non-standard location:
CFLAGS=""-DUSE_LTM -DLTM_DESC -I/opt/devel/ltm"" EXTRALIBS=""/opt/devel/ltm/libtommath.a"" make all

On unusual UNIX platforms, or if you do not have GNU make, have a look at makefile.unix.
On MS Windows try libtomcrypt_VS2008.sln (Visual Studio) or makefile.mingw or makefile.msvc.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,247,2017-07-10T09:52:05Z,2017-07-13T12:34:06Z,2017-07-13T12:34:09Z,MERGED,True,42,39,6,https://github.com/sjaeckel,introduce LTC_CFLAGS and LTC_LDFLAGS,3,[],https://github.com/libtom/libtomcrypt/pull/247,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/247#issuecomment-314894367,,"My suggestion to extend README.md:

simply add it to README.md and open a PR :-)
if you add ""[skip ci]"" in a single line in the commit message travis won't be triggered",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,247,2017-07-10T09:52:05Z,2017-07-13T12:34:06Z,2017-07-13T12:34:09Z,MERGED,True,42,39,6,https://github.com/sjaeckel,introduce LTC_CFLAGS and LTC_LDFLAGS,3,[],https://github.com/libtom/libtomcrypt/pull/247,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/247#issuecomment-314894903,,"CFLAGS=""-DUSE_LTM -DLTM_DESC"" EXTRALIBS=""-ltommath"" make all

btw. with this patch these two become equivalent
CFLAGS=""foo"" make
make CFLAGS=""foo""",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,247,2017-07-10T09:52:05Z,2017-07-13T12:34:06Z,2017-07-13T12:34:09Z,MERGED,True,42,39,6,https://github.com/sjaeckel,introduce LTC_CFLAGS and LTC_LDFLAGS,3,[],https://github.com/libtom/libtomcrypt/pull/247,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/247#issuecomment-314895607,,"with this patch these two become equivalent

great, for some reason I like more make CFLAGS=xyz form",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,247,2017-07-10T09:52:05Z,2017-07-13T12:34:06Z,2017-07-13T12:34:09Z,MERGED,True,42,39,6,https://github.com/sjaeckel,introduce LTC_CFLAGS and LTC_LDFLAGS,3,[],https://github.com/libtom/libtomcrypt/pull/247,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/247#issuecomment-314895800,,"Possible workaroung might be to unconditionally put -Itests in LTC_CFLAGS like:

as already said before that's no possibility, I want at least the two CI build steps to be clean (but with the latest commit that's also out of discussion now)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,247,2017-07-10T09:52:05Z,2017-07-13T12:34:06Z,2017-07-13T12:34:09Z,MERGED,True,42,39,6,https://github.com/sjaeckel,introduce LTC_CFLAGS and LTC_LDFLAGS,3,[],https://github.com/libtom/libtomcrypt/pull/247,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/247#issuecomment-314900234,,According to my testing the last version of this PR should work even if you have an old libtomcrypt's headers installed on your system. I am for merging and releasing RC2.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,249,2017-07-10T22:14:56Z,2017-07-11T08:36:10Z,2017-07-11T13:27:47Z,MERGED,True,37,50,5,https://github.com/karel-m,dh_set_key + dsa_set_key,2,[],https://github.com/libtom/libtomcrypt/pull/249,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/249,see #248,see #248,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,249,2017-07-10T22:14:56Z,2017-07-11T08:36:10Z,2017-07-11T13:27:47Z,MERGED,True,37,50,5,https://github.com/karel-m,dh_set_key + dsa_set_key,2,[],https://github.com/libtom/libtomcrypt/pull/249,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/249#issuecomment-314374007,see #248,"Now the API is at least consistent on the DH part where we have dh_export_key() and dh_set_key() with the same signature. DSA still misses that part, but I also don't know if that's really relevant.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,249,2017-07-10T22:14:56Z,2017-07-11T08:36:10Z,2017-07-11T13:27:47Z,MERGED,True,37,50,5,https://github.com/karel-m,dh_set_key + dsa_set_key,2,[],https://github.com/libtom/libtomcrypt/pull/249,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/249#issuecomment-314379501,see #248,"DSA still misses that part, but I also don't know if that's really relevant.

You mean missing dsa_export_key()? Well, it would be consistent, but I personally do not need it at the moment. The dsa_set_key() I use in my perl bindings when importing DSA keys in SSH format (first I extract the raw values which I pass later to dsa_set_key).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,250,2017-07-12T21:17:30Z,2017-07-17T16:34:53Z,2017-07-17T16:34:55Z,MERGED,True,169,64,5,https://github.com/karel-m,README building instructions,7,[],https://github.com/libtom/libtomcrypt/pull/250,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/250,,,True,{'THUMBS_UP': ['https://github.com/rofl0r']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,250,2017-07-12T21:17:30Z,2017-07-17T16:34:53Z,2017-07-17T16:34:55Z,MERGED,True,169,64,5,https://github.com/karel-m,README building instructions,7,[],https://github.com/libtom/libtomcrypt/pull/250,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/250#issuecomment-315038003,,"A question: Why do we need both -DUSE_LTM and -DLTM_DESC?
The USE_LTM seems to be used just in some tests and demos.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,250,2017-07-12T21:17:30Z,2017-07-17T16:34:53Z,2017-07-17T16:34:55Z,MERGED,True,169,64,5,https://github.com/karel-m,README building instructions,7,[],https://github.com/libtom/libtomcrypt/pull/250,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/250#issuecomment-315040039,,"A question: Why do we need both -DUSE_LTM and -DLTM_DESC?

true, strictly speaking -DUSE_{LTM,TFM,GMP} is only required when building test, tv_gen and timing",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,250,2017-07-12T21:17:30Z,2017-07-17T16:34:53Z,2017-07-17T16:34:55Z,MERGED,True,169,64,5,https://github.com/karel-m,README building instructions,7,[],https://github.com/libtom/libtomcrypt/pull/250,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/250#issuecomment-315046715,,"Wouldn't it simplify things a bit if we replace USE_{LTM,TFM,GMP} with {LTM,TFM,GMP}_DESC in test, tv_gen and timing?
Or if we add to tomcrypt_test.h something like:
#if defined(LTM_DESC)
#define USE_LTM
#elif defined(TFM_DESC)
#define USE_TFM
#elif defined(GMP_DESC)
#define USE_GMP
#else
#error no math lib
#endif",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,250,2017-07-12T21:17:30Z,2017-07-17T16:34:53Z,2017-07-17T16:34:55Z,MERGED,True,169,64,5,https://github.com/karel-m,README building instructions,7,[],https://github.com/libtom/libtomcrypt/pull/250,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/250#issuecomment-315047805,,"Wouldn't it simplify things a bit if we replace USE_{LTM,TFM,GMP} with {LTM,TFM,GMP}_DESC in test, tv_gen and timing?

and then you can't build the library against ltm and tfm anymore and run the tests against tfm... I (currently) don't see a better way than the one implemented.
""You want to build the tests? Then choose a math library to run the tests with.""",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,250,2017-07-12T21:17:30Z,2017-07-17T16:34:53Z,2017-07-17T16:34:55Z,MERGED,True,169,64,5,https://github.com/karel-m,README building instructions,7,[],https://github.com/libtom/libtomcrypt/pull/250,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/250#issuecomment-315078863,,@rofl0r fine like that?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,250,2017-07-12T21:17:30Z,2017-07-17T16:34:53Z,2017-07-17T16:34:55Z,MERGED,True,169,64,5,https://github.com/karel-m,README building instructions,7,[],https://github.com/libtom/libtomcrypt/pull/250,https://github.com/rofl0r,7,https://github.com/libtom/libtomcrypt/pull/250#issuecomment-315221241,,LGTM! the only thing i wondered when reading the instructions was what those mentioned binaries would be...,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,250,2017-07-12T21:17:30Z,2017-07-17T16:34:53Z,2017-07-17T16:34:55Z,MERGED,True,169,64,5,https://github.com/karel-m,README building instructions,7,[],https://github.com/libtom/libtomcrypt/pull/250,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/250#issuecomment-315295915,,"the only thing i wondered when reading the instructions was what those mentioned binaries would be...

sorry, what do you mean?
Edit: ah, do you mean the word binaries? yeah probably apps,  tools or utils or... suggest something? that falls in the category of the two hard problems of computer science...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,250,2017-07-12T21:17:30Z,2017-07-17T16:34:53Z,2017-07-17T16:34:55Z,MERGED,True,169,64,5,https://github.com/karel-m,README building instructions,7,[],https://github.com/libtom/libtomcrypt/pull/250,https://github.com/rofl0r,9,https://github.com/libtom/libtomcrypt/pull/250#issuecomment-315350023,,"no, i mean, i wondered what those binaries are and do, since the only practical thing i can think of is something like the ""openssl"" binary, ssh-keygen, etc.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,250,2017-07-12T21:17:30Z,2017-07-17T16:34:53Z,2017-07-17T16:34:55Z,MERGED,True,169,64,5,https://github.com/karel-m,README building instructions,7,[],https://github.com/libtom/libtomcrypt/pull/250,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/250#issuecomment-315350475,,"...those binaries are and do, since the only practical thing i can think of is something like the ""openssl"" binary, ssh-keygen, etc.

exactly, I especially like hashsum I think it's pretty unique in its supported hashes and it's install-worthy in my opinion
the others are... well ... demos :-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,250,2017-07-12T21:17:30Z,2017-07-17T16:34:53Z,2017-07-17T16:34:55Z,MERGED,True,169,64,5,https://github.com/karel-m,README building instructions,7,[],https://github.com/libtom/libtomcrypt/pull/250,https://github.com/sjaeckel,11,https://github.com/libtom/libtomcrypt/pull/250#issuecomment-315731625,,I guess we can merge this!?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,250,2017-07-12T21:17:30Z,2017-07-17T16:34:53Z,2017-07-17T16:34:55Z,MERGED,True,169,64,5,https://github.com/karel-m,README building instructions,7,[],https://github.com/libtom/libtomcrypt/pull/250,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/250#issuecomment-315799488,,"I guess we can merge this!?


IMO yes",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,253,2017-07-14T18:00:25Z,2017-07-14T18:41:10Z,2017-07-14T18:41:13Z,MERGED,True,4,4,3,https://github.com/karel-m,Fix MS Windows/64bit related warnings,1,[],https://github.com/libtom/libtomcrypt/pull/253,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/253,see #251,see #251,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,255,2017-08-01T08:18:43Z,2017-08-01T09:44:27Z,2017-09-22T08:48:31Z,CLOSED,False,1,2,1,https://github.com/stapelberg,Fix crypt.tex with newer TeXLive (thanks Norbert Preining),1,[],https://github.com/libtom/libtomcrypt/pull/255,https://github.com/stapelberg,1,https://github.com/libtom/libtomcrypt/pull/255,See https://lists.debian.org/debian-tex-maint/2017/08/msg00000.html for details,See https://lists.debian.org/debian-tex-maint/2017/08/msg00000.html for details,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,255,2017-08-01T08:18:43Z,2017-08-01T09:44:27Z,2017-09-22T08:48:31Z,CLOSED,False,1,2,1,https://github.com/stapelberg,Fix crypt.tex with newer TeXLive (thanks Norbert Preining),1,[],https://github.com/libtom/libtomcrypt/pull/255,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/255#issuecomment-319322742,See https://lists.debian.org/debian-tex-maint/2017/08/msg00000.html for details,Already fixed in 749873c (waiting on the release branch to be merged back to develop),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,255,2017-08-01T08:18:43Z,2017-08-01T09:44:27Z,2017-09-22T08:48:31Z,CLOSED,False,1,2,1,https://github.com/stapelberg,Fix crypt.tex with newer TeXLive (thanks Norbert Preining),1,[],https://github.com/libtom/libtomcrypt/pull/255,https://github.com/stapelberg,3,https://github.com/libtom/libtomcrypt/pull/255#issuecomment-319324730,See https://lists.debian.org/debian-tex-maint/2017/08/msg00000.html for details,I see only the second hunk in the commit you referenced. Could you also apply the first one please?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,256,2017-08-02T17:11:09Z,2017-08-07T14:03:39Z,2017-10-09T16:16:13Z,MERGED,True,737,704,20,https://github.com/sjaeckel,OCB3 is not according to RFC7253,8,[],https://github.com/libtom/libtomcrypt/pull/256,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/256,"While documenting OCB3 I realized that the implementation is not according to draft-irtf-cfrg-ocb-03 (which later on became rfc7253) as stated in dfb4ec3 but to draft-irtf-cfrg-ocb-02.
Changing the implementation would also require to change the API, therefore I'm unsure if we should patch it:

'at all' - because not much people seem to use it as nobody complained yet
'in the next version' - so we get 1.18.0 out (TBH I'd be fine to even remove it from the release)
'now' - because I don't like to publish draft versions of algorithms","While documenting OCB3 I realized that the implementation is not according to draft-irtf-cfrg-ocb-03 (which later on became rfc7253) as stated in dfb4ec3 but to draft-irtf-cfrg-ocb-02.
Changing the implementation would also require to change the API, therefore I'm unsure if we should patch it:

'at all' - because not much people seem to use it as nobody complained yet
'in the next version' - so we get 1.18.0 out (TBH I'd be fine to even remove it from the release)
'now' - because I don't like to publish draft versions of algorithms",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,256,2017-08-02T17:11:09Z,2017-08-07T14:03:39Z,2017-10-09T16:16:13Z,MERGED,True,737,704,20,https://github.com/sjaeckel,OCB3 is not according to RFC7253,8,[],https://github.com/libtom/libtomcrypt/pull/256,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/256#issuecomment-319686353,"While documenting OCB3 I realized that the implementation is not according to draft-irtf-cfrg-ocb-03 (which later on became rfc7253) as stated in dfb4ec3 but to draft-irtf-cfrg-ocb-02.
Changing the implementation would also require to change the API, therefore I'm unsure if we should patch it:

'at all' - because not much people seem to use it as nobody complained yet
'in the next version' - so we get 1.18.0 out (TBH I'd be fine to even remove it from the release)
'now' - because I don't like to publish draft versions of algorithms",My vote goes for 2. + we remove it from v1.18.0 as I'm also not happy with the quality of the code.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,256,2017-08-02T17:11:09Z,2017-08-07T14:03:39Z,2017-10-09T16:16:13Z,MERGED,True,737,704,20,https://github.com/sjaeckel,OCB3 is not according to RFC7253,8,[],https://github.com/libtom/libtomcrypt/pull/256,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/256#issuecomment-319692577,"While documenting OCB3 I realized that the implementation is not according to draft-irtf-cfrg-ocb-03 (which later on became rfc7253) as stated in dfb4ec3 but to draft-irtf-cfrg-ocb-02.
Changing the implementation would also require to change the API, therefore I'm unsure if we should patch it:

'at all' - because not much people seem to use it as nobody complained yet
'in the next version' - so we get 1.18.0 out (TBH I'd be fine to even remove it from the release)
'now' - because I don't like to publish draft versions of algorithms","Yes, remove it from 1.18 (or at least disable by default like we do it with
katja).

Considering the fact that there were 7 (seven) drafts before rfc7253, it is
not so important whether our (well, my) code follows draft 2 or 3, we need
to comply with the final rfc.

I can hack on this issue, but I would appretiate if you can post how you
think the API should look like (I have not look into the rfc yet).

I am also open to remove ocb3 completely (for ever) as I am not using it
anymore. But maybe let's first check how much work it will need to fix.

Other question is: do we want to keep both OCB and OCB3 in long term?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,256,2017-08-02T17:11:09Z,2017-08-07T14:03:39Z,2017-10-09T16:16:13Z,MERGED,True,737,704,20,https://github.com/sjaeckel,OCB3 is not according to RFC7253,8,[],https://github.com/libtom/libtomcrypt/pull/256,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/256#issuecomment-319713765,"While documenting OCB3 I realized that the implementation is not according to draft-irtf-cfrg-ocb-03 (which later on became rfc7253) as stated in dfb4ec3 but to draft-irtf-cfrg-ocb-02.
Changing the implementation would also require to change the API, therefore I'm unsure if we should patch it:

'at all' - because not much people seem to use it as nobody complained yet
'in the next version' - so we get 1.18.0 out (TBH I'd be fine to even remove it from the release)
'now' - because I don't like to publish draft versions of algorithms","Yes, remove it from 1.18 (or at least disable by default like we do it with
katja).

Okay. I'm still not sure whether we should disable it by default or remove it (c.f. the rest of the reply).

Considering the fact that there were 7 (seven) drafts before rfc7253, it is
not so important whether our (well, my) code follows draft 2 or 3, we need
to comply with the final rfc.

According to http://web.cs.ucdavis.edu/~rogaway/ocb/news/ there was the last algorithmic change from draft-2 to draft-3.

I can hack on this issue, but I would appretiate if you can post how you
think the API should look like (I have not look into the rfc yet).
I am also open to remove ocb3 completely (for ever) as I am not using it
anymore. But maybe let's first check how much work it will need to fix.

The change is minimal (the taglen has to be known on init), c.f. fix/256

Other question is: do we want to keep both OCB and OCB3 in long term?

There's also still this licensing thing with all versions of OCB... http://web.cs.ucdavis.edu/~rogaway/ocb/license.htm
I'd say as ltc is an academics-inspired project we should keep it. (This changed from the first point after I implemented the patch :-) )",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,256,2017-08-02T17:11:09Z,2017-08-07T14:03:39Z,2017-10-09T16:16:13Z,MERGED,True,737,704,20,https://github.com/sjaeckel,OCB3 is not according to RFC7253,8,[],https://github.com/libtom/libtomcrypt/pull/256,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/256#issuecomment-319791857,"While documenting OCB3 I realized that the implementation is not according to draft-irtf-cfrg-ocb-03 (which later on became rfc7253) as stated in dfb4ec3 but to draft-irtf-cfrg-ocb-02.
Changing the implementation would also require to change the API, therefore I'm unsure if we should patch it:

'at all' - because not much people seem to use it as nobody complained yet
'in the next version' - so we get 1.18.0 out (TBH I'd be fine to even remove it from the release)
'now' - because I don't like to publish draft versions of algorithms","Do we support empty aad (aad==NULL, aadlen==0) and empty plaintext
(pt==NULL, ptlen==0)?

To be honest, I still have not read the RFC so I am not sure if empty
plaintext is legal here.

I'll be able to do the review no sooner than during the coming weekend.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,256,2017-08-02T17:11:09Z,2017-08-07T14:03:39Z,2017-10-09T16:16:13Z,MERGED,True,737,704,20,https://github.com/sjaeckel,OCB3 is not according to RFC7253,8,[],https://github.com/libtom/libtomcrypt/pull/256,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/256#issuecomment-319797314,"While documenting OCB3 I realized that the implementation is not according to draft-irtf-cfrg-ocb-03 (which later on became rfc7253) as stated in dfb4ec3 but to draft-irtf-cfrg-ocb-02.
Changing the implementation would also require to change the API, therefore I'm unsure if we should patch it:

'at all' - because not much people seem to use it as nobody complained yet
'in the next version' - so we get 1.18.0 out (TBH I'd be fine to even remove it from the release)
'now' - because I don't like to publish draft versions of algorithms","We should perhaps add all test vectors from RFC 7253 - Appendix A, some of
them test empty pt/aad that I've mentioned above.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,256,2017-08-02T17:11:09Z,2017-08-07T14:03:39Z,2017-10-09T16:16:13Z,MERGED,True,737,704,20,https://github.com/sjaeckel,OCB3 is not according to RFC7253,8,[],https://github.com/libtom/libtomcrypt/pull/256,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/256#issuecomment-319941952,"While documenting OCB3 I realized that the implementation is not according to draft-irtf-cfrg-ocb-03 (which later on became rfc7253) as stated in dfb4ec3 but to draft-irtf-cfrg-ocb-02.
Changing the implementation would also require to change the API, therefore I'm unsure if we should patch it:

'at all' - because not much people seem to use it as nobody complained yet
'in the next version' - so we get 1.18.0 out (TBH I'd be fine to even remove it from the release)
'now' - because I don't like to publish draft versions of algorithms","Do we support empty aad (aad==NULL, aadlen==0)

done in b2448c5

and empty plaintext (pt==NULL, ptlen==0)?

done in 868c5a8

We should perhaps add all test vectors from RFC 7253 - Appendix A, some of them test empty pt/aad that I've mentioned above.

ours do that as well, I added the test of the RFC with the 96bit tag
I don't think it's worth the effort adding all the tests from the RFC...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,256,2017-08-02T17:11:09Z,2017-08-07T14:03:39Z,2017-10-09T16:16:13Z,MERGED,True,737,704,20,https://github.com/sjaeckel,OCB3 is not according to RFC7253,8,[],https://github.com/libtom/libtomcrypt/pull/256,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/256#issuecomment-320675219,"While documenting OCB3 I realized that the implementation is not according to draft-irtf-cfrg-ocb-03 (which later on became rfc7253) as stated in dfb4ec3 but to draft-irtf-cfrg-ocb-02.
Changing the implementation would also require to change the API, therefore I'm unsure if we should patch it:

'at all' - because not much people seem to use it as nobody complained yet
'in the next version' - so we get 1.18.0 out (TBH I'd be fine to even remove it from the release)
'now' - because I don't like to publish draft versions of algorithms","I have one more ocb3_done related issue which I've found out when switching my perl bindings to the new OCB3 API.
I'll send it as a separate PR today evening (just want you to know if you plan to release the next RC).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,261,2017-08-07T15:24:27Z,2017-08-08T06:46:32Z,2017-08-08T06:46:34Z,MERGED,True,46,34,14,https://github.com/sjaeckel,make it possible to 'make all' w/o an MPI provider,1,[],https://github.com/libtom/libtomcrypt/pull/261,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/261,"As there were issues where people mentioned that make all can't build w/o MPI provider I decided to fix it like that.
Feel free to add your comments. ideas and/or opinions to this PR.","As there were issues where people mentioned that make all can't build w/o MPI provider I decided to fix it like that.
Feel free to add your comments. ideas and/or opinions to this PR.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,261,2017-08-07T15:24:27Z,2017-08-08T06:46:32Z,2017-08-08T06:46:34Z,MERGED,True,46,34,14,https://github.com/sjaeckel,make it possible to 'make all' w/o an MPI provider,1,[],https://github.com/libtom/libtomcrypt/pull/261,https://github.com/buggywhip,2,https://github.com/libtom/libtomcrypt/pull/261#issuecomment-320707995,"As there were issues where people mentioned that make all can't build w/o MPI provider I decided to fix it like that.
Feel free to add your comments. ideas and/or opinions to this PR.","Built cleanly with ""make -j5 -f makefile.shared all"".  ./timing ran indicating NO for pk dependent timings.  Sweet!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,261,2017-08-07T15:24:27Z,2017-08-08T06:46:32Z,2017-08-08T06:46:34Z,MERGED,True,46,34,14,https://github.com/sjaeckel,make it possible to 'make all' w/o an MPI provider,1,[],https://github.com/libtom/libtomcrypt/pull/261,https://github.com/buggywhip,3,https://github.com/libtom/libtomcrypt/pull/261#issuecomment-320753128,"As there were issues where people mentioned that make all can't build w/o MPI provider I decided to fix it like that.
Feel free to add your comments. ideas and/or opinions to this PR.","On 7Aug, 2017, at 11:22 AM, karel-m ***@***.***> wrote:

 @karel-m approved this pull request.

 👍

 —

I'm not so sure.  I did a make clean on libtomcrypt-improve-test_without_mpi, built fresh with
     make -j5 -f makefile.shared  CFLAGS=""-DUSE_TFM -DTFM_DESC -I/usr/local/include""  EXTRALIBS=/usr/local/lib/libtfm.a  all
and then reran ./timing.  Funny that it again bypassed the pk timing tests.

Timing Multiplying:
 128 bits:        28 cycles
 256 bits:        71 cycles
 384 bits:       138 cycles
 512 bits:       235 cycles
 640 bits:       377 cycles
 768 bits:       523 cycles
 896 bits:       718 cycles
1024 bits:       947 cycles
1152 bits:      1477 cycles
1280 bits:      1473 cycles
1408 bits:      2149 cycles
1536 bits:      2145 cycles
Timing Squaring:
 128 bits:        27 cycles
 256 bits:        54 cycles
 384 bits:       106 cycles
 512 bits:       161 cycles
 640 bits:       226 cycles
 768 bits:       329 cycles
 896 bits:       445 cycles
1024 bits:       572 cycles
1152 bits:       877 cycles
1280 bits:       865 cycles
1408 bits:      1224 cycles
1536 bits:      1217 cycles
NO RSA
NO DSA
NO ECC
NO DH
NO Katja",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,261,2017-08-07T15:24:27Z,2017-08-08T06:46:32Z,2017-08-08T06:46:34Z,MERGED,True,46,34,14,https://github.com/sjaeckel,make it possible to 'make all' w/o an MPI provider,1,[],https://github.com/libtom/libtomcrypt/pull/261,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/261#issuecomment-320754024,"As there were issues where people mentioned that make all can't build w/o MPI provider I decided to fix it like that.
Feel free to add your comments. ideas and/or opinions to this PR.","I'm not so sure.  I did a make clean on libtomcrypt-improve-test_without_mpi, built fresh with
make -j5 -f makefile.shared  CFLAGS=""-DUSE_TFM -DTFM_DESC -I/usr/local/include""  EXTRALIBS=/usr/local/lib/libtfm.a  all
and then reran ./timing.  Funny that it again bypassed the pk timing tests.

fixed",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,262,2017-08-07T15:50:01Z,2017-08-07T19:07:26Z,2017-08-07T19:07:31Z,MERGED,True,55,307,8,https://github.com/karel-m,ocb3_done taglen fix,4,[],https://github.com/libtom/libtomcrypt/pull/262,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/262,"With this patch ocb3_done(&ocb, tag, &len) accepts len greater that tag_len value used in ocb3_init.","With this patch ocb3_done(&ocb, tag, &len) accepts len greater that tag_len value used in ocb3_init.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,262,2017-08-07T15:50:01Z,2017-08-07T19:07:26Z,2017-08-07T19:07:31Z,MERGED,True,55,307,8,https://github.com/karel-m,ocb3_done taglen fix,4,[],https://github.com/libtom/libtomcrypt/pull/262,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/262#issuecomment-320705518,"With this patch ocb3_done(&ocb, tag, &len) accepts len greater that tag_len value used in ocb3_init.",You mean a better (strict) taglen check in ocb3_init?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,262,2017-08-07T15:50:01Z,2017-08-07T19:07:26Z,2017-08-07T19:07:31Z,MERGED,True,55,307,8,https://github.com/karel-m,ocb3_done taglen fix,4,[],https://github.com/libtom/libtomcrypt/pull/262,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/262#issuecomment-320706143,"With this patch ocb3_done(&ocb, tag, &len) accepts len greater that tag_len value used in ocb3_init.","You mean a better (strict) taglen check in ocb3_init

yep, before this patch it was implicitly limited by the fact that there's no block cipher with more than 128bit blocksize...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,263,2017-08-07T22:14:19Z,2017-08-11T11:27:24Z,2017-10-09T16:16:13Z,MERGED,True,706,154,10,https://github.com/karel-m,missing items in crypt sizes,17,[],https://github.com/libtom/libtomcrypt/pull/263,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/263,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,263,2017-08-07T22:14:19Z,2017-08-11T11:27:24Z,2017-10-09T16:16:13Z,MERGED,True,706,154,10,https://github.com/karel-m,missing items in crypt sizes,17,[],https://github.com/libtom/libtomcrypt/pull/263,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/263#issuecomment-320891883,,I thought it'd probably make sense to check this in helper.pl but somehow it seems to be not really trivial...,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,263,2017-08-07T22:14:19Z,2017-08-11T11:27:24Z,2017-10-09T16:16:13Z,MERGED,True,706,154,10,https://github.com/karel-m,missing items in crypt sizes,17,[],https://github.com/libtom/libtomcrypt/pull/263,https://github.com/buggywhip,3,https://github.com/libtom/libtomcrypt/pull/263#issuecomment-321010864,,"[I wasn't able to upload zip files here so I sent them to you via email.]
""Here are 2 zip files, one for sizes, the other for constants.  Each has an old/current .c, a new .c, and a diff file.  The new files compile without warnings and a run of the demo pgms ./sizes, ./constants, and demo_dynamic.py each show what I would expect.  I still want to run some enhanced demo pgms over the next day or so.""",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,263,2017-08-07T22:14:19Z,2017-08-11T11:27:24Z,2017-10-09T16:16:13Z,MERGED,True,706,154,10,https://github.com/karel-m,missing items in crypt sizes,17,[],https://github.com/libtom/libtomcrypt/pull/263,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/263#issuecomment-321173324,,once @buggywhip is fine with these changes I propose to merge it to release/1.18.0 and create RC3,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,263,2017-08-07T22:14:19Z,2017-08-11T11:27:24Z,2017-10-09T16:16:13Z,MERGED,True,706,154,10,https://github.com/karel-m,missing items in crypt sizes,17,[],https://github.com/libtom/libtomcrypt/pull/263,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/263#issuecomment-321173764,,👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,263,2017-08-07T22:14:19Z,2017-08-11T11:27:24Z,2017-10-09T16:16:13Z,MERGED,True,706,154,10,https://github.com/karel-m,missing items in crypt sizes,17,[],https://github.com/libtom/libtomcrypt/pull/263,https://github.com/buggywhip,6,https://github.com/libtom/libtomcrypt/pull/263#issuecomment-321179636,,"On 9Aug, 2017, at 12:13 AM, karel-m ***@***.***> wrote:

 once @buggywhip <https://github.com/buggywhip> is fine with these changes I propose to merge it to release/1.18.0 and create RC4

I have just a couple of things to check in perhaps the next hour or two.  In the meantime...


I'd like to add the following constant to demos/crypt_constants.c near line 30.
    _C_STRINGIFY(CRYPT_OK),


Question:  What do you think about adding a function added to LTC that when called with an error code, it would return a string, a phrase indicating the nature of the error?  ...something along the lines of the comments to the errors found in the enum in tomcrypt.h.  (CRYPT_UNUSED1 and CRYPT_UNUSED2 might return ""Reserved"", and values not in the table might get some sort of ""error code not found"" string.)  Errors returned to Python are just a [meaningless?] number.  Your thots?


Here is a complete replacement for demos.demo_dynamic.py




That's my list.  Like I said, just a couple more things to check.

RC4, ""real soon now""?  :-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,263,2017-08-07T22:14:19Z,2017-08-11T11:27:24Z,2017-10-09T16:16:13Z,MERGED,True,706,154,10,https://github.com/karel-m,missing items in crypt sizes,17,[],https://github.com/libtom/libtomcrypt/pull/263,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/263#issuecomment-321180041,,There's error_to_string (),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,263,2017-08-07T22:14:19Z,2017-08-11T11:27:24Z,2017-10-09T16:16:13Z,MERGED,True,706,154,10,https://github.com/karel-m,missing items in crypt sizes,17,[],https://github.com/libtom/libtomcrypt/pull/263,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/263#issuecomment-321211746,,"What's missing is a function to return a string saying what the code means. Such a function might be useful to both C and Python app developers.

as already said, there's https://github.com/libtom/libtomcrypt/blob/develop/src/misc/error_to_string.c (already since ltc 1.00 :-) )",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,263,2017-08-07T22:14:19Z,2017-08-11T11:27:24Z,2017-10-09T16:16:13Z,MERGED,True,706,154,10,https://github.com/karel-m,missing items in crypt sizes,17,[],https://github.com/libtom/libtomcrypt/pull/263,https://github.com/buggywhip,9,https://github.com/libtom/libtomcrypt/pull/263#issuecomment-321213000,,"On 9Aug, 2017, at 3:02 AM, Steffen Jaeckel ***@***.***> wrote:

 What's missing is a function to return a string saying what the code means. Such a function might be useful to both C and Python app developers.

 as already said, there's https://github.com/libtom/libtomcrypt/blob/develop/src/misc/error_to_string.c <https://github.com/libtom/libtomcrypt/blob/develop/src/misc/error_to_string.c>
Mea culpa, I completely missed that.

BTW, it looks good.  Tx.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,263,2017-08-07T22:14:19Z,2017-08-11T11:27:24Z,2017-10-09T16:16:13Z,MERGED,True,706,154,10,https://github.com/karel-m,missing items in crypt sizes,17,[],https://github.com/libtom/libtomcrypt/pull/263,https://github.com/buggywhip,10,https://github.com/libtom/libtomcrypt/pull/263#issuecomment-321372682,,Nope!  will send separately.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,197,2017-08-08T18:14:21Z,2017-09-20T13:14:54Z,2017-09-20T13:15:08Z,MERGED,True,1159,220,25,https://github.com/sjaeckel,Update documentation,31,[],https://github.com/libtom/libtomcrypt/pull/197,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/197,"Follow-up of #54
Anything else missing?
Someone volunteering?
If yes, please leave a comment and I'll add you to the list-item

 adler32, crc32 @sjaeckel
 base64 URL, strict
 blake2 hash
 blake2 mac
 chacha stream
 poly1305 mac
 chacha20poly1305 authenc
 dsa_set_pqg(), dsa_set_pqg_dsaparam(), dsa_generate_pqg(), dsa_set_key(), dsa_generate_key()
 der_sequence_shrink() @sjaeckel
 der_X_generalizedtime() @sjaeckel
 review DH + dh_set_pg(), dh_set_pg_dhparam(), dh_set_key() @sjaeckel
 ecc_sign_hash_rfc7518(), ecc_verify_hash_rfc7518()
 mem_neq @sjaeckel
 ocb3
 prng changes @sjaeckel
 rand_bn_bits() rand_bn_upto() @sjaeckel
 rc2_setup_ex()
 rsa_get_size(), rsa_sign_saltlen_get_max_ex(), rsa_import_x509(), rsa_import_pkcs8(), rsa_set_key(), rsa_set_factors(), rsa_set_crt_params() @sjaeckel
 sha3 hash
 sha3 shake (which is a bit special)
 stream cipher API
 PKCS#1 v1.5 + LTC_PKCS_1_V1_5_NA1 @sjaeckel
 fix #54 (review)
 add build instructions to README.md
 review ""Configuring and Building the Library"" @sjaeckel
 update libtomcrypt summary at http://www.libtom.net/LibTomCrypt/
 final check for any XXX-TODO in crypt.tex
 update CHANGES file
 delete TODO file (we have github for these)","Follow-up of #54
Anything else missing?
Someone volunteering?
If yes, please leave a comment and I'll add you to the list-item

 adler32, crc32 @sjaeckel
 base64 URL, strict
 blake2 hash
 blake2 mac
 chacha stream
 poly1305 mac
 chacha20poly1305 authenc
 dsa_set_pqg(), dsa_set_pqg_dsaparam(), dsa_generate_pqg(), dsa_set_key(), dsa_generate_key()
 der_sequence_shrink() @sjaeckel
 der_X_generalizedtime() @sjaeckel
 review DH + dh_set_pg(), dh_set_pg_dhparam(), dh_set_key() @sjaeckel
 ecc_sign_hash_rfc7518(), ecc_verify_hash_rfc7518()
 mem_neq @sjaeckel
 ocb3
 prng changes @sjaeckel
 rand_bn_bits() rand_bn_upto() @sjaeckel
 rc2_setup_ex()
 rsa_get_size(), rsa_sign_saltlen_get_max_ex(), rsa_import_x509(), rsa_import_pkcs8(), rsa_set_key(), rsa_set_factors(), rsa_set_crt_params() @sjaeckel
 sha3 hash
 sha3 shake (which is a bit special)
 stream cipher API
 PKCS#1 v1.5 + LTC_PKCS_1_V1_5_NA1 @sjaeckel
 fix #54 (review)
 add build instructions to README.md
 review ""Configuring and Building the Library"" @sjaeckel
 update libtomcrypt summary at http://www.libtom.net/LibTomCrypt/
 final check for any XXX-TODO in crypt.tex
 update CHANGES file
 delete TODO file (we have github for these)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,197,2017-08-08T18:14:21Z,2017-09-20T13:14:54Z,2017-09-20T13:15:08Z,MERGED,True,1159,220,25,https://github.com/sjaeckel,Update documentation,31,[],https://github.com/libtom/libtomcrypt/pull/197,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/197#issuecomment-330662570,"Follow-up of #54
Anything else missing?
Someone volunteering?
If yes, please leave a comment and I'll add you to the list-item

 adler32, crc32 @sjaeckel
 base64 URL, strict
 blake2 hash
 blake2 mac
 chacha stream
 poly1305 mac
 chacha20poly1305 authenc
 dsa_set_pqg(), dsa_set_pqg_dsaparam(), dsa_generate_pqg(), dsa_set_key(), dsa_generate_key()
 der_sequence_shrink() @sjaeckel
 der_X_generalizedtime() @sjaeckel
 review DH + dh_set_pg(), dh_set_pg_dhparam(), dh_set_key() @sjaeckel
 ecc_sign_hash_rfc7518(), ecc_verify_hash_rfc7518()
 mem_neq @sjaeckel
 ocb3
 prng changes @sjaeckel
 rand_bn_bits() rand_bn_upto() @sjaeckel
 rc2_setup_ex()
 rsa_get_size(), rsa_sign_saltlen_get_max_ex(), rsa_import_x509(), rsa_import_pkcs8(), rsa_set_key(), rsa_set_factors(), rsa_set_crt_params() @sjaeckel
 sha3 hash
 sha3 shake (which is a bit special)
 stream cipher API
 PKCS#1 v1.5 + LTC_PKCS_1_V1_5_NA1 @sjaeckel
 fix #54 (review)
 add build instructions to README.md
 review ""Configuring and Building the Library"" @sjaeckel
 update libtomcrypt summary at http://www.libtom.net/LibTomCrypt/
 final check for any XXX-TODO in crypt.tex
 update CHANGES file
 delete TODO file (we have github for these)",just added chacha20poly1305 doc,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,197,2017-08-08T18:14:21Z,2017-09-20T13:14:54Z,2017-09-20T13:15:08Z,MERGED,True,1159,220,25,https://github.com/sjaeckel,Update documentation,31,[],https://github.com/libtom/libtomcrypt/pull/197,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/197#issuecomment-330670551,"Follow-up of #54
Anything else missing?
Someone volunteering?
If yes, please leave a comment and I'll add you to the list-item

 adler32, crc32 @sjaeckel
 base64 URL, strict
 blake2 hash
 blake2 mac
 chacha stream
 poly1305 mac
 chacha20poly1305 authenc
 dsa_set_pqg(), dsa_set_pqg_dsaparam(), dsa_generate_pqg(), dsa_set_key(), dsa_generate_key()
 der_sequence_shrink() @sjaeckel
 der_X_generalizedtime() @sjaeckel
 review DH + dh_set_pg(), dh_set_pg_dhparam(), dh_set_key() @sjaeckel
 ecc_sign_hash_rfc7518(), ecc_verify_hash_rfc7518()
 mem_neq @sjaeckel
 ocb3
 prng changes @sjaeckel
 rand_bn_bits() rand_bn_upto() @sjaeckel
 rc2_setup_ex()
 rsa_get_size(), rsa_sign_saltlen_get_max_ex(), rsa_import_x509(), rsa_import_pkcs8(), rsa_set_key(), rsa_set_factors(), rsa_set_crt_params() @sjaeckel
 sha3 hash
 sha3 shake (which is a bit special)
 stream cipher API
 PKCS#1 v1.5 + LTC_PKCS_1_V1_5_NA1 @sjaeckel
 fix #54 (review)
 add build instructions to README.md
 review ""Configuring and Building the Library"" @sjaeckel
 update libtomcrypt summary at http://www.libtom.net/LibTomCrypt/
 final check for any XXX-TODO in crypt.tex
 update CHANGES file
 delete TODO file (we have github for these)",added blake2 mac + poly1305 mac,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,197,2017-08-08T18:14:21Z,2017-09-20T13:14:54Z,2017-09-20T13:15:08Z,MERGED,True,1159,220,25,https://github.com/sjaeckel,Update documentation,31,[],https://github.com/libtom/libtomcrypt/pull/197,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/197#issuecomment-330834519,"Follow-up of #54
Anything else missing?
Someone volunteering?
If yes, please leave a comment and I'll add you to the list-item

 adler32, crc32 @sjaeckel
 base64 URL, strict
 blake2 hash
 blake2 mac
 chacha stream
 poly1305 mac
 chacha20poly1305 authenc
 dsa_set_pqg(), dsa_set_pqg_dsaparam(), dsa_generate_pqg(), dsa_set_key(), dsa_generate_key()
 der_sequence_shrink() @sjaeckel
 der_X_generalizedtime() @sjaeckel
 review DH + dh_set_pg(), dh_set_pg_dhparam(), dh_set_key() @sjaeckel
 ecc_sign_hash_rfc7518(), ecc_verify_hash_rfc7518()
 mem_neq @sjaeckel
 ocb3
 prng changes @sjaeckel
 rand_bn_bits() rand_bn_upto() @sjaeckel
 rc2_setup_ex()
 rsa_get_size(), rsa_sign_saltlen_get_max_ex(), rsa_import_x509(), rsa_import_pkcs8(), rsa_set_key(), rsa_set_factors(), rsa_set_crt_params() @sjaeckel
 sha3 hash
 sha3 shake (which is a bit special)
 stream cipher API
 PKCS#1 v1.5 + LTC_PKCS_1_V1_5_NA1 @sjaeckel
 fix #54 (review)
 add build instructions to README.md
 review ""Configuring and Building the Library"" @sjaeckel
 update libtomcrypt summary at http://www.libtom.net/LibTomCrypt/
 final check for any XXX-TODO in crypt.tex
 update CHANGES file
 delete TODO file (we have github for these)","@sjaeckel now it's up to you. I do not plan more commits here.
I think we should merge this PR into release/1.18.0 and polish the rest there.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,264,2017-08-09T07:47:18Z,2017-08-09T07:53:19Z,2017-10-09T16:16:41Z,MERGED,True,24,27,18,https://github.com/karel-m,fix doxygen warnings (as mentioned in #228),1,[],https://github.com/libtom/libtomcrypt/pull/264,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/264,"No code changes (thus no Travis-CI), just comments.
@sjaeckel once you find it OK, please do the merge","No code changes (thus no Travis-CI), just comments.
@sjaeckel once you find it OK, please do the merge",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,264,2017-08-09T07:47:18Z,2017-08-09T07:53:19Z,2017-10-09T16:16:41Z,MERGED,True,24,27,18,https://github.com/karel-m,fix doxygen warnings (as mentioned in #228),1,[],https://github.com/libtom/libtomcrypt/pull/264,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/264#issuecomment-321180865,"No code changes (thus no Travis-CI), just comments.
@sjaeckel once you find it OK, please do the merge",👍 merge,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,266,2017-08-13T12:56:09Z,2017-08-13T16:16:56Z,2017-08-13T16:17:03Z,MERGED,True,9,13,5,https://github.com/karel-m,Fix lint issues,2,[],https://github.com/libtom/libtomcrypt/pull/266,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/266,see #199 (comment),see #199 (comment),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,266,2017-08-13T12:56:09Z,2017-08-13T16:16:56Z,2017-08-13T16:17:03Z,MERGED,True,9,13,5,https://github.com/karel-m,Fix lint issues,2,[],https://github.com/libtom/libtomcrypt/pull/266,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/266#issuecomment-322051274,see #199 (comment),👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,270,2017-08-16T09:54:04Z,2017-08-16T11:42:22Z,2017-08-16T11:42:29Z,MERGED,True,3,2,2,https://github.com/sjaeckel,Minor changes,2,[],https://github.com/libtom/libtomcrypt/pull/270,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/270,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,271,2017-08-17T06:53:47Z,2017-08-17T08:11:31Z,2017-08-17T11:20:18Z,MERGED,True,0,4,2,https://github.com/buggywhip,Rel 1.18 sm demo cleanup,2,[],https://github.com/libtom/libtomcrypt/pull/271,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/271,removed 2 comment lines fm each of demos/demo-dynamic.py and .py3,removed 2 comment lines fm each of demos/demo-dynamic.py and .py3,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,272,2017-08-18T04:22:45Z,2017-08-20T01:19:01Z,2017-09-14T17:54:24Z,MERGED,True,94,378,2,https://github.com/buggywhip,Update demos demo dynamic.py,4,[],https://github.com/libtom/libtomcrypt/pull/272,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/272,demos/demo_dynamic.py3 now runs under both python 2 and python3 so there is no longer a reason for two versions.  demo_dynamic.py3 was deleted and demo_dynamic.py3 was renamed demo_dynamic.py.,demos/demo_dynamic.py3 now runs under both python 2 and python3 so there is no longer a reason for two versions.  demo_dynamic.py3 was deleted and demo_dynamic.py3 was renamed demo_dynamic.py.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,272,2017-08-18T04:22:45Z,2017-08-20T01:19:01Z,2017-09-14T17:54:24Z,MERGED,True,94,378,2,https://github.com/buggywhip,Update demos demo dynamic.py,4,[],https://github.com/libtom/libtomcrypt/pull/272,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/272#issuecomment-323277786,demos/demo_dynamic.py3 now runs under both python 2 and python3 so there is no longer a reason for two versions.  demo_dynamic.py3 was deleted and demo_dynamic.py3 was renamed demo_dynamic.py.,Cool 👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,276,2017-08-24T20:38:53Z,2017-08-28T15:28:31Z,2017-09-14T17:54:24Z,MERGED,True,259,265,3,https://github.com/karel-m,GCM zero size IV,1,[],https://github.com/libtom/libtomcrypt/pull/276,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/276,see #273,see #273,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,276,2017-08-24T20:38:53Z,2017-08-28T15:28:31Z,2017-09-14T17:54:24Z,MERGED,True,259,265,3,https://github.com/karel-m,GCM zero size IV,1,[],https://github.com/libtom/libtomcrypt/pull/276,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/276#issuecomment-325109593,see #273,good find! 👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,276,2017-08-24T20:38:53Z,2017-08-28T15:28:31Z,2017-09-14T17:54:24Z,MERGED,True,259,265,3,https://github.com/karel-m,GCM zero size IV,1,[],https://github.com/libtom/libtomcrypt/pull/276,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/276#issuecomment-325285414,see #273,"I see what you mean, but all those extra (duplicate) if (gcm->mode == LTC_GCM_MODE_IV) { .. } where added in #246 - GCM allow skipping gcm_add_aad and gcm_process.
After #246 it is legal to completely skip gcm_add_aad and/or gcm_process therefore zero IV size has to be checked IMO in all 3 places (gcm_add_aad, gcm_process, gcm_done).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,276,2017-08-24T20:38:53Z,2017-08-28T15:28:31Z,2017-09-14T17:54:24Z,MERGED,True,259,265,3,https://github.com/karel-m,GCM zero size IV,1,[],https://github.com/libtom/libtomcrypt/pull/276,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/276#issuecomment-325339667,see #273,"okay, but these two checks are then either on the wrong place or they can be removed.
These checks are both in the state gcm->mode == LTC_GCM_MODE_IV immediately before a call to gcm_add_aad(). gcm_add_aad() has in the state gcm->mode == LTC_GCM_MODE_IV as first line the same check, therefore these two checks can be removed. Or am I wrong?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,276,2017-08-24T20:38:53Z,2017-08-28T15:28:31Z,2017-09-14T17:54:24Z,MERGED,True,259,265,3,https://github.com/karel-m,GCM zero size IV,1,[],https://github.com/libtom/libtomcrypt/pull/276,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/276#issuecomment-325340898,see #273,"I just ran the perl-CryptX wycheproof tests with the following patch and the GCM ones were still okay
diff --git a/src/ltc/encauth/gcm/gcm_done.c b/src/ltc/encauth/gcm/gcm_done.c
index 0baaf52..ffd551e 100644
--- a/src/ltc/encauth/gcm/gcm_done.c
+++ b/src/ltc/encauth/gcm/gcm_done.c
@@ -43,4 +43,2 @@ int gcm_done(gcm_state *gcm,
    if (gcm->mode == LTC_GCM_MODE_IV) {
-      /* IV length must be > 0 */
-      if (gcm->buflen == 0 && gcm->totlen == 0) return CRYPT_ERROR;
       /* let's process the IV */
diff --git a/src/ltc/encauth/gcm/gcm_process.c b/src/ltc/encauth/gcm/gcm_process.c
index 60a69aa..b1ec20c 100644
--- a/src/ltc/encauth/gcm/gcm_process.c
+++ b/src/ltc/encauth/gcm/gcm_process.c
@@ -55,4 +55,2 @@ int gcm_process(gcm_state *gcm,
    if (gcm->mode == LTC_GCM_MODE_IV) {
-      /* IV length must be > 0 */
-      if (gcm->buflen == 0 && gcm->totlen == 0) return CRYPT_ERROR;
       /* let's process the IV */",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,276,2017-08-24T20:38:53Z,2017-08-28T15:28:31Z,2017-09-14T17:54:24Z,MERGED,True,259,265,3,https://github.com/karel-m,GCM zero size IV,1,[],https://github.com/libtom/libtomcrypt/pull/276,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/276#issuecomment-325341512,see #273,"Oh, you are right.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,277,2017-08-24T21:32:26Z,2017-08-29T20:13:35Z,2017-09-14T17:54:24Z,MERGED,True,28,17,8,https://github.com/karel-m,RSA wycheproof tests,2,[],https://github.com/libtom/libtomcrypt/pull/277,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/277,see #275,see #275,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,277,2017-08-24T21:32:26Z,2017-08-29T20:13:35Z,2017-09-14T17:54:24Z,MERGED,True,28,17,8,https://github.com/karel-m,RSA wycheproof tests,2,[],https://github.com/libtom/libtomcrypt/pull/277,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/277#issuecomment-325347729,see #275,"Looks like this patch fixes the two remaining failing RSA vectors
diff --git a/src/ltc/pk/asn1/der/sequence/der_decode_sequence_ex.c b/src/ltc/pk/asn1/der/sequence/der_decode_sequence_ex.c
index 0d50e86..3100b86 100644
--- a/src/ltc/pk/asn1/der/sequence/der_decode_sequence_ex.c
+++ b/src/ltc/pk/asn1/der/sequence/der_decode_sequence_ex.c
@@ -326,3 +326,8 @@ int der_decode_sequence_ex(const unsigned char *in, unsigned long  inlen,
    }
-   err = CRYPT_OK;
+
+   if (inlen == 0) {
+      err = CRYPT_OK;
+   } else {
+      err = CRYPT_PK_INVALID_SIZE;
+   }",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,277,2017-08-24T21:32:26Z,2017-08-29T20:13:35Z,2017-09-14T17:54:24Z,MERGED,True,28,17,8,https://github.com/karel-m,RSA wycheproof tests,2,[],https://github.com/libtom/libtomcrypt/pull/277,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/277#issuecomment-325362318,see #275,"But it seems that we somehow count on the old behaviour because with this patch ltc tests fail like this:
rotate_test.........passed      0.058ms
misc_test...........passed      0.250ms
mpi_test............passed      1.383ms
cipher_hash_test....passed     59.643ms
mac_test............passed     11.625ms
modes_test..........passed      1.541ms
der_test............passed   5800.408ms
pkcs_1_test.........passed      5.248ms
pkcs_1_pss_test.....passed     26.930ms
pkcs_1_oaep_test....passed     28.231ms
pkcs_1_emsa_test....passed     37.601ms
pkcs_1_eme_test.....passed     36.417ms
rsa_test............Invalid sized parameter. (22)
tests/rsa_test.c:189:rsa_import(openssl_private_rsa, sizeof(openssl_private_rsa), &key)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,277,2017-08-24T21:32:26Z,2017-08-29T20:13:35Z,2017-09-14T17:54:24Z,MERGED,True,28,17,8,https://github.com/karel-m,RSA wycheproof tests,2,[],https://github.com/libtom/libtomcrypt/pull/277,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/277#issuecomment-325472949,see #275,"Your patch is IMO correct, we need to fix rsa_import and other places where we rely on the old (current) behaviour.
The trouble makers are places where we try to parse only a partial part (the first few items) of ASN.1 sequence.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,277,2017-08-24T21:32:26Z,2017-08-29T20:13:35Z,2017-09-14T17:54:24Z,MERGED,True,28,17,8,https://github.com/karel-m,RSA wycheproof tests,2,[],https://github.com/libtom/libtomcrypt/pull/277,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/277#issuecomment-325626830,see #275,"yep, that boils down to:
diff --git a/src/pk/asn1/der/sequence/der_decode_sequence_ex.c b/src/pk/asn1/der/sequence/der_decode_sequence_ex.c
index 9addfa5..8a6755e 100644
--- a/src/pk/asn1/der/sequence/der_decode_sequence_ex.c
+++ b/src/pk/asn1/der/sequence/der_decode_sequence_ex.c
@@ -312,3 +312,8 @@ int der_decode_sequence_ex(const unsigned char *in, unsigned long  inlen,
    }
-   err = CRYPT_OK;
+
+   if (inlen == 0) {
+      err = CRYPT_OK;
+   } else {
+      err = CRYPT_PK_INVALID_SIZE;
+   }
 
diff --git a/src/pk/dh/dh_import.c b/src/pk/dh/dh_import.c
index 66778eb..c86f2b5 100644
--- a/src/pk/dh/dh_import.c
+++ b/src/pk/dh/dh_import.c
@@ -39,3 +39,3 @@ int dh_import(const unsigned char *in, unsigned long inlen, dh_key *key)
                                    LTC_ASN1_EOL, 0UL, NULL);
-   if (err != CRYPT_OK) {
+   if (err != CRYPT_OK && err != CRYPT_PK_INVALID_SIZE) {
       goto error;
diff --git a/src/pk/dsa/dsa_decrypt_key.c b/src/pk/dsa/dsa_decrypt_key.c
index bee276a..806ef3e 100644
--- a/src/pk/dsa/dsa_decrypt_key.c
+++ b/src/pk/dsa/dsa_decrypt_key.c
@@ -48,4 +48,4 @@ int dsa_decrypt_key(const unsigned char *in,  unsigned long  inlen,
    LTC_SET_ASN1(decode, 0, LTC_ASN1_OBJECT_IDENTIFIER, hashOID, sizeof(hashOID)/sizeof(hashOID[0]));
-
-   if ((err = der_decode_sequence(in, inlen, decode, 1)) != CRYPT_OK) {
+   err = der_decode_sequence(in, inlen, decode, 1);
+   if (err != CRYPT_OK && err != CRYPT_PK_INVALID_SIZE) {
       return err;
diff --git a/src/pk/dsa/dsa_import.c b/src/pk/dsa/dsa_import.c
index d71cdd5..5db6963 100644
--- a/src/pk/dsa/dsa_import.c
+++ b/src/pk/dsa/dsa_import.c
@@ -41,5 +41,6 @@ int dsa_import(const unsigned char *in, unsigned long inlen, dsa_key *key)
    /* try to match the old libtomcrypt format */
-   if ((err = der_decode_sequence_multi(in, inlen,
-                                  LTC_ASN1_BIT_STRING, 1UL, flags,
-                                  LTC_ASN1_EOL, 0UL, NULL)) == CRYPT_OK) {
+   err = der_decode_sequence_multi(in, inlen, LTC_ASN1_BIT_STRING, 1UL, flags,
+                                              LTC_ASN1_EOL,        0UL, NULL);
+
+   if (err == CRYPT_OK || err == CRYPT_PK_INVALID_SIZE) {
        /* private key */
diff --git a/src/pk/ecc/ecc_decrypt_key.c b/src/pk/ecc/ecc_decrypt_key.c
index e0d3fd3..4a16de9 100644
--- a/src/pk/ecc/ecc_decrypt_key.c
+++ b/src/pk/ecc/ecc_decrypt_key.c
@@ -54,4 +54,4 @@ int ecc_decrypt_key(const unsigned char *in,  unsigned long  inlen,
    LTC_SET_ASN1(decode, 0, LTC_ASN1_OBJECT_IDENTIFIER, hashOID, sizeof(hashOID)/sizeof(hashOID[0]));
-
-   if ((err = der_decode_sequence(in, inlen, decode, 1)) != CRYPT_OK) {
+   err = der_decode_sequence(in, inlen, decode, 1);
+   if (err != CRYPT_OK && err != CRYPT_PK_INVALID_SIZE) {
       return err;
diff --git a/src/pk/ecc/ecc_import.c b/src/pk/ecc/ecc_import.c
index 7c0afed..034c9bd 100644
--- a/src/pk/ecc/ecc_import.c
+++ b/src/pk/ecc/ecc_import.c
@@ -107,5 +107,5 @@ int ecc_import_ex(const unsigned char *in, unsigned long inlen, ecc_key *key, co
    /* find out what type of key it is */
-   if ((err = der_decode_sequence_multi(in, inlen,
-                                  LTC_ASN1_BIT_STRING, 1UL, flags,
-                                  LTC_ASN1_EOL,        0UL, NULL)) != CRYPT_OK) {
+   err = der_decode_sequence_multi(in, inlen, LTC_ASN1_BIT_STRING, 1UL, flags,
+                                              LTC_ASN1_EOL,        0UL, NULL);
+   if (err != CRYPT_OK && err != CRYPT_PK_INVALID_SIZE) {
       goto done;
diff --git a/src/pk/rsa/rsa_import.c b/src/pk/rsa/rsa_import.c
index a6be18d..fbae39b 100644
--- a/src/pk/rsa/rsa_import.c
+++ b/src/pk/rsa/rsa_import.c
@@ -68,5 +68,6 @@ int rsa_import(const unsigned char *in, unsigned long inlen, rsa_key *key)
    /* not SSL public key, try to match against PKCS #1 standards */
-   if ((err = der_decode_sequence_multi(in, inlen,
-                                  LTC_ASN1_INTEGER, 1UL, key->N,
-                                  LTC_ASN1_EOL,     0UL, NULL)) != CRYPT_OK) {
+   err = der_decode_sequence_multi(in, inlen, LTC_ASN1_INTEGER, 1UL, key->N,
+                                              LTC_ASN1_EOL,     0UL, NULL);
+
+   if (err != CRYPT_OK && err != CRYPT_PK_INVALID_SIZE) {
       goto LBL_ERR;",True,{'THUMBS_UP': ['https://github.com/karel-m']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,277,2017-08-24T21:32:26Z,2017-08-29T20:13:35Z,2017-09-14T17:54:24Z,MERGED,True,28,17,8,https://github.com/karel-m,RSA wycheproof tests,2,[],https://github.com/libtom/libtomcrypt/pull/277,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/277#issuecomment-325739379,see #275,"Travis-CI is green, merge?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,278,2017-08-24T22:40:25Z,2017-09-10T12:00:55Z,2017-09-14T17:54:24Z,MERGED,True,13,6,1,https://github.com/karel-m,DSA wycheproof tests,2,[],https://github.com/libtom/libtomcrypt/pull/278,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/278,see #274,see #274,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,278,2017-08-24T22:40:25Z,2017-09-10T12:00:55Z,2017-09-14T17:54:24Z,MERGED,True,13,6,1,https://github.com/karel-m,DSA wycheproof tests,2,[],https://github.com/libtom/libtomcrypt/pull/278,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/278#issuecomment-325824734,see #274,As for the our DSA vs. wycheproof this PR is complete from my side.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,279,2017-08-26T10:26:53Z,2017-08-28T07:14:26Z,2017-09-14T17:54:24Z,MERGED,True,8,2,3,https://github.com/sjaeckel,Yet another clean-up and bugfix PR,3,[],https://github.com/libtom/libtomcrypt/pull/279,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/279,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/280,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-325824547,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","Well, it turned out that the case when ltc is on ""signing"" side is OK. So this PR is complete.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-328355614,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.",@sjaeckel ping,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-328598665,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","We could e.g. have an internal (say LTC_SOURCE protected) dsa_check_key() which is then called from within dsa_verify_key(), dsa_set_pqg_dsaparam() and dsa_set_pqg() (and probably others that I missed?). This one would then only have these trivial checks without all the more complex stuff.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-328665973,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.",something like this?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-328672230,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","Do we really need such extensive tests? (the 2 exptmod's?)
Besides that I realized that the name verify_key() is nonsense, therefore I've pushed my proposal to the pr/fix-dsa-cdf-2 branch. What do you think?

Can we make dsa_int_validate_key() a bit less computational expensive by moving the 2 exptmods to dsa_validate_key()?
Wouldn't it make sense to use LTC_MILLER_RABIN_REPS for the prime checks?
With your last commit you removed stuff that you added in the commit before (in dsa_set_pqg())
a. Was that accidental or itentional?
b. The 'newly added' was three mp_cmp_d() whereas dsa_verify_key_ex() has only two + a different logic, can you please check back which is correct!?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-328674282,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.",we should perhaps keep the name dsa_verify_key as it is part of 1.17 API,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-328674981,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","we should perhaps keep the name dsa_verify_key as it is part of 1.17 API

damn, sorry - sure
I'll just update the branch",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-328675058,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","With your last commit you removed stuff that you added in the commit before (in dsa_set_pqg())

The thing is that at the end of dsa_set_pqg() we do not have a complete key, therefore we cannot do the key check/validation.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-328675286,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","The thing is that at the end of dsa_set_pqg() we do not have a complete key, therefore we cannot do the key check/validation.

but it looks to me like part of it was required for the cdf tests to pass, right?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/sjaeckel,11,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-328676474,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","I'll just update the branch

pushed",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-328677203,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","What we need is to avoid loading/setting/creating a DSA key with p or g or q (not sure what was the main trouble maker) with value 0.
It would be better to check it in dsa_set_pqg but it is IMO fine to do it a bit later during dsa_set_key (where we have the key complete).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-328737794,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.",I have slightly updated your pr/fix-dsa-cdf-2 - which works and can be merged,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/sjaeckel,14,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-328890437,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","What we need is to avoid loading/setting/creating a DSA key with p or g or q (not sure what was the main trouble maker) with value 0.

Okay, but the different parts of the implementation I saw had checks for {p,g,q} > 1 |p| > 1 and I don't know what else. Reading quickly through FIPS 186-4 I couldn't determine what is the correct approach so can you please check again what we really have to do?
I think it'd make sense to have 2 private functions dsa_int_validate_group_params() and dsa_int_validate_key() and 1 API function dsa_verify_key(). This allows us to correctly verify each step of the key import/generation.
Flow could be something like this:
int dsa_verify_key() {
 check_prime(q);
 check_prime(p);
 return dsa_int_validate_key();
}

int dsa_int_validate_group_params() {
 ...
}

int dsa_int_validate_key() {
 if (dsa_int_validate_group_params()) return;
 ...
}

What do you think?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/karel-m,15,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-329414855,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.",I'll check FIPS 186-4 but meanwhile another approach for dsa_int_validate_*,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/karel-m,16,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-329523893,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.",@sjaeckel could you please review this PR again?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/karel-m,17,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-329548317,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","Oh sorry, I should perhaps wait for Travis-CI",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/sjaeckel,18,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-329548590,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","Too late, the build's going to fail ;)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,280,2017-08-29T22:13:17Z,2017-09-14T17:10:14Z,2017-09-14T17:54:24Z,MERGED,True,180,50,5,https://github.com/karel-m,DSA cdf tests,15,[],https://github.com/libtom/libtomcrypt/pull/280,https://github.com/sjaeckel,19,https://github.com/libtom/libtomcrypt/pull/280#issuecomment-329548673,"Another crypto test bench https://github.com/kudelskisecurity/cdf
Good news - our RSA implementation seems to pass. But we have couple of DSA related troubles.
The first commit fixes failures when ltc is on ""validating"" side. There are still some failures when ltc is on ""signing"" side, I'll try to analyze those later.","but nvm, as the merge will be built as well...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,282,2017-08-31T03:02:03Z,2017-08-31T17:08:50Z,2017-09-14T17:54:24Z,CLOSED,False,17,5,3,https://github.com/apjanke,special makefiles: add targets for sizes and constants demos,3,[],https://github.com/libtom/libtomcrypt/pull/282,https://github.com/apjanke,1,https://github.com/libtom/libtomcrypt/pull/282,"How about adding the sizes and constants demos to the generic makefile.unix, to keep it on par with the main makefile?
I tested this on macOS 10.12.6, and it seems to work.
[~/local/repos/libtomcrypt on ⇄ develop ±]
$ make -f makefile.unix EXTRALIBS=/usr/local/lib/libtommath.a sizes
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Isrc/headers -Itests -DLTC_SOURCE -c demos/sizes.c -o demos/sizes.o
cc demos/sizes.o libtomcrypt.a  /usr/local/lib/libtommath.a -o sizes
[~/local/repos/libtomcrypt on ⇄ develop ±]
$ ./sizes

  size of 'ecc_key' is 48

  need to allocate 1151 bytes

  supported sizes:

ltc_hash_descriptor,208
hash_state,416
[...]
$ make -f makefile.unix EXTRALIBS=/usr/local/lib/libtommath.a constants
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Isrc/headers -Itests -DLTC_SOURCE -c demos/constants.c -o demos/constants.o
cc demos/constants.o libtomcrypt.a  /usr/local/lib/libtommath.a -o constants
[~/local/repos/libtomcrypt on ⇄ add-sizes-and-constants-demo-targets ±]
$ ./constants

  CTR_COUNTER_BIG_ENDIAN is 4096

  need to allocate 627 bytes

  supported constants:

PK_PUBLIC,0
PK_PRIVATE,1
PKA_RSA,0
[...]","How about adding the sizes and constants demos to the generic makefile.unix, to keep it on par with the main makefile?
I tested this on macOS 10.12.6, and it seems to work.
[~/local/repos/libtomcrypt on ⇄ develop ±]
$ make -f makefile.unix EXTRALIBS=/usr/local/lib/libtommath.a sizes
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Isrc/headers -Itests -DLTC_SOURCE -c demos/sizes.c -o demos/sizes.o
cc demos/sizes.o libtomcrypt.a  /usr/local/lib/libtommath.a -o sizes
[~/local/repos/libtomcrypt on ⇄ develop ±]
$ ./sizes

  size of 'ecc_key' is 48

  need to allocate 1151 bytes

  supported sizes:

ltc_hash_descriptor,208
hash_state,416
[...]
$ make -f makefile.unix EXTRALIBS=/usr/local/lib/libtommath.a constants
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Isrc/headers -Itests -DLTC_SOURCE -c demos/constants.c -o demos/constants.o
cc demos/constants.o libtomcrypt.a  /usr/local/lib/libtommath.a -o constants
[~/local/repos/libtomcrypt on ⇄ add-sizes-and-constants-demo-targets ±]
$ ./constants

  CTR_COUNTER_BIG_ENDIAN is 4096

  need to allocate 627 bytes

  supported constants:

PK_PUBLIC,0
PK_PRIVATE,1
PKA_RSA,0
[...]",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,282,2017-08-31T03:02:03Z,2017-08-31T17:08:50Z,2017-09-14T17:54:24Z,CLOSED,False,17,5,3,https://github.com/apjanke,special makefiles: add targets for sizes and constants demos,3,[],https://github.com/libtom/libtomcrypt/pull/282,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/282#issuecomment-326205262,"How about adding the sizes and constants demos to the generic makefile.unix, to keep it on par with the main makefile?
I tested this on macOS 10.12.6, and it seems to work.
[~/local/repos/libtomcrypt on ⇄ develop ±]
$ make -f makefile.unix EXTRALIBS=/usr/local/lib/libtommath.a sizes
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Isrc/headers -Itests -DLTC_SOURCE -c demos/sizes.c -o demos/sizes.o
cc demos/sizes.o libtomcrypt.a  /usr/local/lib/libtommath.a -o sizes
[~/local/repos/libtomcrypt on ⇄ develop ±]
$ ./sizes

  size of 'ecc_key' is 48

  need to allocate 1151 bytes

  supported sizes:

ltc_hash_descriptor,208
hash_state,416
[...]
$ make -f makefile.unix EXTRALIBS=/usr/local/lib/libtommath.a constants
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Isrc/headers -Itests -DLTC_SOURCE -c demos/constants.c -o demos/constants.o
cc demos/constants.o libtomcrypt.a  /usr/local/lib/libtommath.a -o constants
[~/local/repos/libtomcrypt on ⇄ add-sizes-and-constants-demo-targets ±]
$ ./constants

  CTR_COUNTER_BIG_ENDIAN is 4096

  need to allocate 627 bytes

  supported constants:

PK_PUBLIC,0
PK_PRIVATE,1
PKA_RSA,0
[...]",Looks good. We will need similar updates to makefile.mingw and makefile.msvc as well.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,282,2017-08-31T03:02:03Z,2017-08-31T17:08:50Z,2017-09-14T17:54:24Z,CLOSED,False,17,5,3,https://github.com/apjanke,special makefiles: add targets for sizes and constants demos,3,[],https://github.com/libtom/libtomcrypt/pull/282,https://github.com/apjanke,3,https://github.com/libtom/libtomcrypt/pull/282#issuecomment-326234060,"How about adding the sizes and constants demos to the generic makefile.unix, to keep it on par with the main makefile?
I tested this on macOS 10.12.6, and it seems to work.
[~/local/repos/libtomcrypt on ⇄ develop ±]
$ make -f makefile.unix EXTRALIBS=/usr/local/lib/libtommath.a sizes
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Isrc/headers -Itests -DLTC_SOURCE -c demos/sizes.c -o demos/sizes.o
cc demos/sizes.o libtomcrypt.a  /usr/local/lib/libtommath.a -o sizes
[~/local/repos/libtomcrypt on ⇄ develop ±]
$ ./sizes

  size of 'ecc_key' is 48

  need to allocate 1151 bytes

  supported sizes:

ltc_hash_descriptor,208
hash_state,416
[...]
$ make -f makefile.unix EXTRALIBS=/usr/local/lib/libtommath.a constants
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Isrc/headers -Itests -DLTC_SOURCE -c demos/constants.c -o demos/constants.o
cc demos/constants.o libtomcrypt.a  /usr/local/lib/libtommath.a -o constants
[~/local/repos/libtomcrypt on ⇄ add-sizes-and-constants-demo-targets ±]
$ ./constants

  CTR_COUNTER_BIG_ENDIAN is 4096

  need to allocate 627 bytes

  supported constants:

PK_PUBLIC,0
PK_PRIVATE,1
PKA_RSA,0
[...]","Added updates for makefile.mingw and makefile.msvc too. I don't have the setup to test them, though.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,282,2017-08-31T03:02:03Z,2017-08-31T17:08:50Z,2017-09-14T17:54:24Z,CLOSED,False,17,5,3,https://github.com/apjanke,special makefiles: add targets for sizes and constants demos,3,[],https://github.com/libtom/libtomcrypt/pull/282,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/282#issuecomment-326361215,"How about adding the sizes and constants demos to the generic makefile.unix, to keep it on par with the main makefile?
I tested this on macOS 10.12.6, and it seems to work.
[~/local/repos/libtomcrypt on ⇄ develop ±]
$ make -f makefile.unix EXTRALIBS=/usr/local/lib/libtommath.a sizes
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Isrc/headers -Itests -DLTC_SOURCE -c demos/sizes.c -o demos/sizes.o
cc demos/sizes.o libtomcrypt.a  /usr/local/lib/libtommath.a -o sizes
[~/local/repos/libtomcrypt on ⇄ develop ±]
$ ./sizes

  size of 'ecc_key' is 48

  need to allocate 1151 bytes

  supported sizes:

ltc_hash_descriptor,208
hash_state,416
[...]
$ make -f makefile.unix EXTRALIBS=/usr/local/lib/libtommath.a constants
cc -O2 -DUSE_LTM -DLTM_DESC -I../libtommath -Isrc/headers -Itests -DLTC_SOURCE -c demos/constants.c -o demos/constants.o
cc demos/constants.o libtomcrypt.a  /usr/local/lib/libtommath.a -o constants
[~/local/repos/libtomcrypt on ⇄ add-sizes-and-constants-demo-targets ±]
$ ./constants

  CTR_COUNTER_BIG_ENDIAN is 4096

  need to allocate 627 bytes

  supported constants:

PK_PUBLIC,0
PK_PRIVATE,1
PKA_RSA,0
[...]",merged,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/apjanke,1,https://github.com/libtom/libtomcrypt/pull/283,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.","Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/buggywhip,2,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-326243987,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.","What about ltc_math_descriptor ltc_mp = { }; ?

basic make, makefile.unix...  no errors, no warnings.  :-)

might fix these too

demos/timing.c:709:35: warning: suggest braces around initialization of subobject [-Wmissing-braces]
   unsigned char buf[2][2048] = { 0 };
                                  ^
                                  {}
demos/timing.c:945:34: warning: suggest braces around initialization of subobject [-Wmissing-braces]
   unsigned char buf[2][256] = { 0 };
                                 ^
                                 {}",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-326244856,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.","Grr, the form ltc_math_descriptor ltc_mp = { }; does warn when compiled with gcc3
src/misc/crypt/crypt_ltc_mp_descriptor.c:11: warning: missing initializer
src/misc/crypt/crypt_ltc_mp_descriptor.c:11: warning: (near initialization for `ltc_mp.name')

ping @rofl0r - what is the best way here in your opinion?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/apjanke,4,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-326245433,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.","might fix these too

How about in a separate PR to fix #259? It's not Mac-specific, so it doesn't seem to fit well in this PR.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/rofl0r,5,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-326338456,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.","= {} is C++ syntax, not valid C. it will probably fail when one has -std=c99 in CFLAGS, or -pedantic with GCC & co, but definitely on a purely standard-conforming compiler.
= {0} is the right way to zero-initialize, and if clang warns about it, that's a bug (and should be reported and fixed, just as was done with GCC).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-326356358,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.",Could you please change it to = { 0 } so that we see Travis-CI results?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-326372093,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.",And also please remove the part broken on Mac OSX - use makefile.unix instead from README.md,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/apjanke,8,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-328206004,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.","Done.
Sorry for the slow response; it's crunch time at work for me right now.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-328211411,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.","Cool, looks good to me 👍",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-328338126,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.","We should silence clang warning. What about adding the following to src/misc/crypt/crypt_ltc_mp_descriptor.c ?
#ifdef __clang__
#pragma clang diagnostic ignored ""-Wmissing-field-initializers""
#endif",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/sjaeckel,11,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-328547233,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.","uhm, I guess the most appropriate fix would be
diff --git a/makefile_include.mk b/makefile_include.mk
index 792f63e..f422135 100644
--- a/makefile_include.mk
+++ b/makefile_include.mk
@@ -104,3 +104,3 @@ endif # COMPILE_DEBUG
 ifneq ($(findstring clang,$(CC)),)
-LTC_CFLAGS += -Wno-typedef-redefinition -Wno-tautological-compare -Wno-builtin-requires-header
+LTC_CFLAGS += -Wno-typedef-redefinition -Wno-tautological-compare -Wno-builtin-requires-header -Wno-missing-field-initializers
 endif",True,{'THUMBS_UP': ['https://github.com/karel-m']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-328661003,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.",I am for merging together with #283 (comment),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/sjaeckel,13,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-328664788,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.","@apjanke can you please apply above-mentioned patch, rebase and force-push, then we can merge. thx",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,283,2017-08-31T08:25:25Z,2017-09-14T15:18:04Z,2017-09-14T17:54:24Z,CLOSED,False,3,8,3,https://github.com/apjanke,initialize ltc_mp to fix build on clang/macOS,1,[],https://github.com/libtom/libtomcrypt/pull/283,https://github.com/karel-m,14,https://github.com/libtom/libtomcrypt/pull/283#issuecomment-329515455,"Fixes #281.
This adds an initializer to the ltc_tmp definition to force it to be allocated by all compilers. Seems like clang on macOS is leaving it unallocated, leading to link failures when building a program that actually tries to use it.",merged,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,284,2017-08-31T09:19:09Z,2017-08-31T16:53:53Z,2017-09-14T17:54:25Z,MERGED,True,2,2,1,https://github.com/apjanke,Fix typos in makefile.shared help,1,[],https://github.com/libtom/libtomcrypt/pull/284,https://github.com/apjanke,1,https://github.com/libtom/libtomcrypt/pull/284,"This fixes a couple typos in the ""help"" info in makefile.shared.
It protects commas using variable substitution; otherwise, they are interpreted as separating function parameters. It also fixes a typo for ""pkg-config"".
Before comma protection:
$ make -f makefile.shared help
...
install -- Installs the library
...
uninstall -- Uninstalls the library

After comma protection:
$ make -f makefile.shared help
...
install -- Installs the library, headers and pkd-config file
...
uninstall -- Uninstalls the library, headers and pkd-config file

This approach is recommended by the GNU Make manual: https://www.gnu.org/software/make/manual/html_node/Syntax-of-Functions.html.
And then a fix to a typo for ""pkg-config"":
install -- Installs the library, headers and pkg-config file
...
uninstall -- Uninstalls the library, headers and pkg-config file","This fixes a couple typos in the ""help"" info in makefile.shared.
It protects commas using variable substitution; otherwise, they are interpreted as separating function parameters. It also fixes a typo for ""pkg-config"".
Before comma protection:
$ make -f makefile.shared help
...
install -- Installs the library
...
uninstall -- Uninstalls the library

After comma protection:
$ make -f makefile.shared help
...
install -- Installs the library, headers and pkd-config file
...
uninstall -- Uninstalls the library, headers and pkd-config file

This approach is recommended by the GNU Make manual: https://www.gnu.org/software/make/manual/html_node/Syntax-of-Functions.html.
And then a fix to a typo for ""pkg-config"":
install -- Installs the library, headers and pkg-config file
...
uninstall -- Uninstalls the library, headers and pkg-config file",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,286,2017-09-01T16:25:16Z,2017-09-01T18:15:53Z,2017-09-14T17:54:25Z,MERGED,True,1,1,1,https://github.com/karel-m,Fix DSA dependency on RSA,1,[],https://github.com/libtom/libtomcrypt/pull/286,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/286,see #285,see #285,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,286,2017-09-01T16:25:16Z,2017-09-01T18:15:53Z,2017-09-14T17:54:25Z,MERGED,True,1,1,1,https://github.com/karel-m,Fix DSA dependency on RSA,1,[],https://github.com/libtom/libtomcrypt/pull/286,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/286#issuecomment-326625670,see #285,👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,288,2017-09-14T18:33:55Z,2017-09-14T21:05:11Z,2017-09-19T11:27:40Z,MERGED,True,4,0,1,https://github.com/karel-m,Fix scan-build bug/warning in tv_gen ,1,[],https://github.com/libtom/libtomcrypt/pull/288,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/288,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,289,2017-09-14T19:43:43Z,2017-09-15T04:47:09Z,2017-09-19T11:27:41Z,MERGED,True,1,1,1,https://github.com/karel-m,scan-build --status-bugs,1,[],https://github.com/libtom/libtomcrypt/pull/289,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/289,Travis-CI is expected to fail,Travis-CI is expected to fail,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,289,2017-09-14T19:43:43Z,2017-09-15T04:47:09Z,2017-09-19T11:27:41Z,MERGED,True,1,1,1,https://github.com/karel-m,scan-build --status-bugs,1,[],https://github.com/libtom/libtomcrypt/pull/289,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/289#issuecomment-329608930,Travis-CI is expected to fail,"Good, failed as expected https://travis-ci.org/libtom/libtomcrypt/jobs/275612218",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,290,2017-09-15T08:17:28Z,2017-09-19T11:24:14Z,2017-09-19T11:27:41Z,MERGED,True,14,13,8,https://github.com/karel-m,Add -Wwrite-strings (char* vs. const char*),2,[],https://github.com/libtom/libtomcrypt/pull/290,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/290,"This PR fixes warnings which appeared after turning on -Wwrite-strings.
But frankly, I am not sure whether we want or need to apply this.","This PR fixes warnings which appeared after turning on -Wwrite-strings.
But frankly, I am not sure whether we want or need to apply this.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,290,2017-09-15T08:17:28Z,2017-09-19T11:24:14Z,2017-09-19T11:27:41Z,MERGED,True,14,13,8,https://github.com/karel-m,Add -Wwrite-strings (char* vs. const char*),2,[],https://github.com/libtom/libtomcrypt/pull/290,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/290#issuecomment-329999057,"This PR fixes warnings which appeared after turning on -Wwrite-strings.
But frankly, I am not sure whether we want or need to apply this.","But frankly, I am not sure whether we want or need to apply this.

somehow you're right, we should probably wait until the release is done to apply this... not sure though... also in regards to ABI breakage...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,290,2017-09-15T08:17:28Z,2017-09-19T11:24:14Z,2017-09-19T11:27:41Z,MERGED,True,14,13,8,https://github.com/karel-m,Add -Wwrite-strings (char* vs. const char*),2,[],https://github.com/libtom/libtomcrypt/pull/290,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/290#issuecomment-329999231,"This PR fixes warnings which appeared after turning on -Wwrite-strings.
But frankly, I am not sure whether we want or need to apply this.",@lvc could you please already tell us how this would influence our score? :-),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,290,2017-09-15T08:17:28Z,2017-09-19T11:24:14Z,2017-09-19T11:27:41Z,MERGED,True,14,13,8,https://github.com/karel-m,Add -Wwrite-strings (char* vs. const char*),2,[],https://github.com/libtom/libtomcrypt/pull/290,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/290#issuecomment-330044315,"This PR fixes warnings which appeared after turning on -Wwrite-strings.
But frankly, I am not sure whether we want or need to apply this.",As for the API breakage I have doubts about changes in ltc_ecc_set_type the rest IMO should not cause big troubles.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,290,2017-09-15T08:17:28Z,2017-09-19T11:24:14Z,2017-09-19T11:27:41Z,MERGED,True,14,13,8,https://github.com/karel-m,Add -Wwrite-strings (char* vs. const char*),2,[],https://github.com/libtom/libtomcrypt/pull/290,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/290#issuecomment-330144828,"This PR fixes warnings which appeared after turning on -Wwrite-strings.
But frankly, I am not sure whether we want or need to apply this.","Suggestion: let's merge to release/1.18.0 the changes in tests/* + changes in <name>_test() functions. These are not going to break anything. After that we can discuss what will be left.
@sjaeckel what do you think?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,290,2017-09-15T08:17:28Z,2017-09-19T11:24:14Z,2017-09-19T11:27:41Z,MERGED,True,14,13,8,https://github.com/karel-m,Add -Wwrite-strings (char* vs. const char*),2,[],https://github.com/libtom/libtomcrypt/pull/290,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/290#issuecomment-330145981,"This PR fixes warnings which appeared after turning on -Wwrite-strings.
But frankly, I am not sure whether we want or need to apply this.","K, then split the commits up please.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,290,2017-09-15T08:17:28Z,2017-09-19T11:24:14Z,2017-09-19T11:27:41Z,MERGED,True,14,13,8,https://github.com/karel-m,Add -Wwrite-strings (char* vs. const char*),2,[],https://github.com/libtom/libtomcrypt/pull/290,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/290#issuecomment-330146740,"This PR fixes warnings which appeared after turning on -Wwrite-strings.
But frankly, I am not sure whether we want or need to apply this.","Done #292
Once we have OK from Travis-CI I'll merge #292 to release/1.18.0.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,290,2017-09-15T08:17:28Z,2017-09-19T11:24:14Z,2017-09-19T11:27:41Z,MERGED,True,14,13,8,https://github.com/karel-m,Add -Wwrite-strings (char* vs. const char*),2,[],https://github.com/libtom/libtomcrypt/pull/290,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/290#issuecomment-330183339,"This PR fixes warnings which appeared after turning on -Wwrite-strings.
But frankly, I am not sure whether we want or need to apply this.","Merged & rebased.
Now looking at the rest I think it is pretty safe to also merge:

changes to ltc_dh_set_type (DH is completely new in 1.18)
changes to crypt_argchk",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/291,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330043764,,"In the latest release of my libtomcrypt perl bindings (based on the latest release/1.18.0 branch) I turned on wycheproof tests (for RSA, DSA, ECDH) which mostly pass except the test type=DSAVer/SHA224 tcId=55 comment='appending unused 0's' expected-result=invalid e.g.

http://www.cpantesters.org/cpan/report/77dce23e-9a70-11e7-af1e-236b50cc459e
http://www.cpantesters.org/cpan/report/e6371e2e-9a21-11e7-8929-daabf0ac1f1e
both happened on ARM architecture

So I have decided to add this ""sometimes failing"" test to libtomcrypt's dsa_test(). It passes fine on my laptop; however, travis-ci is not quite happy about it.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330149498,,"Update: the troubles with Travis-CI turned out to be TFM related. It seems that radix_to_bin does not work correctly with TFM - when passed a hexadecimal string of 1676 characters it returns CRYPT_OK but the binary output is only 576 bytes (instead of expected 838).
Anyway I am for merging this extra DSA test and see whether somebody will report a failure on ARM or not.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330307542,,"looks like this happened with gcc and clang...
/cc @sebastianas",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330353221,,Those failures happened on ARM-32bit-LE. Can anybody checkout pr/dsa-test-wycheproof and build & run ./test on this architecture?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/ksherlock,6,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330415548,,"$ uname -a
Linux qnap 3.2.0-4-orion5x #1 Debian 3.2.84-1 armv5tel GNU/Linux

$ git branch
  develop
* pr/dsa-test-wycheproof

$ ./test
build == git-v1.18.0-rc3-48-ge2b6631
LibTomCrypt 1.18.0-rc3 (www.libtom.net)
LibTomCrypt is public domain software.


Endianness: little (32-bit words)
Clean stack: disabled
Ciphers built-in:
   Blowfish
   RC2
   RC5
   RC6
   Safer+
   Safer
   Rijndael
   XTEA
   Twofish (tables)
   DES
   CAST5
   Noekeon
   Skipjack
   Khazad
   Anubis  (tweaked)
   KSEED
   KASUMI
   MULTI2
   Camellia
Stream ciphers built-in:
   ChaCha
   RC4
   SOBER128

Hashes built-in:
   SHA3
   SHA-512
   SHA-384
   SHA-512/256
   SHA-256
   SHA-512/224
   SHA-224
   TIGER
   SHA1
   MD5
   MD4
   MD2
   RIPEMD128
   RIPEMD160
   RIPEMD256
   RIPEMD320
   WHIRLPOOL
   BLAKE2S
   BLAKE2B
   CHC_HASH

Block Chaining Modes:
   CFB
   OFB
   ECB
   CBC
   CTR
   LRW (tables) 
   F8
   XTS

MACs:
   HMAC
   OMAC
   PMAC
   PELICAN
   XCBC
   F9
   POLY1305
   BLAKE2S MAC
   BLAKE2B MAC

ENC + AUTH modes:
   EAX
   OCB
   OCB3
   CCM
   GCM (tables) 
   CHACHA20POLY1305

PRNG:
   Yarrow (LTC_YARROW_AES=2)
   SPRNG
   RC4
   ChaCha20
   Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
   SOBER128

PK Algs:
   RSA (with blinding and CRT hardening)
   DH
   ECC (with blinding)
   DSA

MPI (Math):
   LTC_MPI
   LTC_MILLER_RABIN_REPS=35

Compiler:
   GCC compiler 7.2.0.

Various others:  ARGTYPE=0  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTC_FILE_READ_BUFSIZE=8192  LTC_ECC_SHAMIR 

math provider = libtommath
MP_DIGIT_BIT = 28

store_test..........passed      0.037ms
rotate_test.........passed      0.038ms
misc_test...........passed      1.920ms
mpi_test............passed     26.823ms
cipher_hash_test....passed    424.496ms
mac_test............passed    220.373ms
modes_test..........passed     42.537ms
der_test............passed  59097.761ms
pkcs_1_test.........passed     44.507ms
pkcs_1_pss_test.....passed    630.505ms
pkcs_1_oaep_test....passed    627.422ms
pkcs_1_emsa_test....passed    829.914ms
pkcs_1_eme_test.....passed    828.633ms
rsa_test............passed  67807.963ms
dh_test.............passed 990140.469ms
ecc_tests...........passed 721116.053ms
dsa_test............passed  15634.199ms
katja_test..........nop
file_test...........passed      3.515ms
multi_test..........passed      1.390ms
prng_test...........passed     53.802ms

SUCCESS: passed=20 failed=0 nop=1 duration=1857.6sec real=1857.5sec",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330432394,,And with TFM?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330445004,,"SUCCESS: passed=20 failed=0

Thanks, although a failure would have been more valuable in this case 😃
Ad TFM: the failures from my perl bindings are from LTC+LTM; the trouble with radix_to_bin() was ""fixed"" by switching from hex to Base64. In other words TFM should be fine.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330469490,,"mh okay

do you still have the failing testcase of TFM?
what @ksherlock tested was armv5, we need a test on armv6 as used in your tests",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330486296,,"do you still have the failing testcase of TFM?

#294

we need a test on armv6 as used in your tests

I have installed Raspbian GNU/Linux 9.1 (stretch) in QEMU:
$ uname -a
Linux raspberrypi 4.4.13+ #12 Thu Sep 15 12:00:26 CEST 2016 armv6l GNU/Linux

but no failure (neither with this PR nor with my perl bindings).
I'll try to contact the guys running those perl cpan smokers and ask for more details.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330584420,,"More info about perl bindings failure
# Testing CryptX 0.053_001, Perl 5.026000 linux /srv/smoker/perl5/perlbrew/perls/perl-5.26.0/bin/perl
# osname       = linux
# myarchname   = armv6l-linux
# myuname      = linux smoker 3.18.0-trunk-rpi #1 preempt raspbian 3.18.5-1~exp1+rpi19+stretch (2015-10-14) armv6l gnulinux 
# intsize      = 4
# longsize     = 4
# longlongsize = 8
# ptrsize      = 4
# byteorder    = 1234
# 
# LibTomCrypt 1.18.0-rc2 (www.libtom.net)
# LibTomCrypt is public domain software.
# 
# 
# Endianness: little (32-bit words)
# Clean stack: disabled
# Ciphers built-in:
#    Blowfish
#    RC2
#    RC5
#    RC6
#    Safer+
#    Safer
#    Rijndael
#    XTEA
#    Twofish (tables)
#    DES
#    CAST5
#    Noekeon
#    Skipjack
#    Khazad
#    Anubis  (tweaked)
#    KSEED
#    KASUMI
#    MULTI2
#    Camellia
# Stream ciphers built-in:
#    ChaCha
#    RC4
#    SOBER128
# 
# Hashes built-in:
#    SHA3
#    SHA-512
#    SHA-384
#    SHA-512/256
#    SHA-256
#    SHA-512/224
#    SHA-224
#    TIGER
#    SHA1
#    MD5
#    MD4
#    MD2
#    RIPEMD128
#    RIPEMD160
#    RIPEMD256
#    RIPEMD320
#    WHIRLPOOL
#    BLAKE2S
#    BLAKE2B
#    CHC_HASH
# 
# Block Chaining Modes:
#    CFB
#    OFB
#    ECB
#    CBC
#    CTR
#    LRW (tables) 
#    F8
#    XTS
# 
# MACs:
#    HMAC
#    OMAC
#    PMAC
#    PELICAN
#    XCBC
#    F9
#    POLY1305
#    BLAKE2S MAC
#    BLAKE2B MAC
# 
# ENC + AUTH modes:
#    EAX
#    OCB
#    OCB3
#    CCM
#    GCM (tables) 
#    CHACHA20POLY1305
# 
# PRNG:
#    Yarrow (LTC_YARROW_AES=2)
#    SPRNG
#    RC4
#    ChaCha20
#    Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
#    SOBER128
# 
# PK Algs:
#    RSA (with blinding and CRT hardening)
#    DH
#    ECC (with blinding)
#    DSA
# 
# MPI (Math):
#    LTC_MPI
#    LTM_DESC
#    LTC_MILLER_RABIN_REPS=35
# 
# Compiler:
#    GCC compiler 7.2.0.
# 
# Various others:  ARGTYPE=0  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_FILE_READ_BUFSIZE=8192  LTC_NO_TEST  LTC_ECC_SHAMIR 
# 
# MP_PROVIDER  = LibTomMath
# MP_DIGIT_BIT = 28
# 

It was Raspberry Pi 1B, running Raspbian and a perl-brewed perl 5.26.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330685694,,@ksherlock I have update pr/dsa-test-wycheproof - could you please pull the latest version and run it again?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/ksherlock,13,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330718381,,"$ git branch -v
  develop                e1fcd3a add hashsum multi-hash option
* pr/dsa-test-wycheproof e9a9d61 sha256 was wrong, use sha224

$ ./test
build == git-v1.18.0-rc3-48-ge2b6631
LibTomCrypt 1.18.0-rc3 (www.libtom.net)
LibTomCrypt is public domain software.


Endianness: little (32-bit words)
Clean stack: disabled
Ciphers built-in:
   Blowfish
   RC2
   RC5
   RC6
   Safer+
   Safer
   Rijndael
   XTEA
   Twofish (tables)
   DES
   CAST5
   Noekeon
   Skipjack
   Khazad
   Anubis  (tweaked)
   KSEED
   KASUMI
   MULTI2
   Camellia
Stream ciphers built-in:
   ChaCha
   RC4
   SOBER128

Hashes built-in:
   SHA3
   SHA-512
   SHA-384
   SHA-512/256
   SHA-256
   SHA-512/224
   SHA-224
   TIGER
   SHA1
   MD5
   MD4
   MD2
   RIPEMD128
   RIPEMD160
   RIPEMD256
   RIPEMD320
   WHIRLPOOL
   BLAKE2S
   BLAKE2B
   CHC_HASH

Block Chaining Modes:
   CFB
   OFB
   ECB
   CBC
   CTR
   LRW (tables) 
   F8
   XTS

MACs:
   HMAC
   OMAC
   PMAC
   PELICAN
   XCBC
   F9
   POLY1305
   BLAKE2S MAC
   BLAKE2B MAC

ENC + AUTH modes:
   EAX
   OCB
   OCB3
   CCM
   GCM (tables) 
   CHACHA20POLY1305

PRNG:
   Yarrow (LTC_YARROW_AES=2)
   SPRNG
   RC4
   ChaCha20
   Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
   SOBER128

PK Algs:
   RSA (with blinding and CRT hardening)
   DH
   ECC (with blinding)
   DSA

MPI (Math):
   LTC_MPI
   LTC_MILLER_RABIN_REPS=35

Compiler:
   GCC compiler 7.2.0.

Various others:  ARGTYPE=0  ADLER32  BASE64  BASE64-URL-SAFE  CRC32  DER  LTC_DER_MAX_PUBKEY_SIZE=4096  PKCS#1  PKCS#5  HKDF  LTC_DEVRANDOM  LTC_TRY_URANDOM_FIRST  LTC_RNG_GET_BYTES  LTC_RNG_MAKE_PRNG  LTC_HASH_HELPERS  LTC_TEST  LTC_FILE_READ_BUFSIZE=8192  LTC_ECC_SHAMIR 

math provider = libtommath
MP_DIGIT_BIT = 28

store_test..........passed      0.040ms
rotate_test.........passed      0.038ms
misc_test...........passed      1.900ms
mpi_test............passed     21.129ms
cipher_hash_test....passed    430.671ms
mac_test............passed    221.902ms
modes_test..........passed     42.324ms
der_test............passed  59094.050ms
pkcs_1_test.........passed     43.177ms
pkcs_1_pss_test.....passed    627.941ms
pkcs_1_oaep_test....passed    628.664ms
pkcs_1_emsa_test....passed    864.495ms
pkcs_1_eme_test.....passed    830.470ms
rsa_test............passed  63525.862ms
dh_test.............passed 997150.779ms
ecc_tests...........passed 695970.022ms
dsa_test............passed  26096.888ms
katja_test..........nop
file_test...........passed      3.610ms
multi_test..........passed      1.791ms
prng_test...........passed     52.794ms

SUCCESS: passed=20 failed=0 nop=1 duration=1845.7sec real=1845.6sec",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,291,2017-09-17T11:14:56Z,2017-09-20T11:23:52Z,2017-09-20T11:23:55Z,MERGED,True,80,6,2,https://github.com/karel-m,Add dsa_wycheproof_test,2,[],https://github.com/libtom/libtomcrypt/pull/291,https://github.com/karel-m,14,https://github.com/libtom/libtomcrypt/pull/291#issuecomment-330806176,,TL;DR fixed by 155e29d - let's see what's Travis' opinion.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,292,2017-09-18T07:30:30Z,2017-09-18T10:34:14Z,2017-09-19T11:27:41Z,MERGED,True,80,80,25,https://github.com/karel-m,Partial changes from #290,1,[],https://github.com/libtom/libtomcrypt/pull/292,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/292,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,294,2017-09-19T09:35:07Z,2017-09-19T10:14:48Z,2017-09-22T07:38:18Z,CLOSED,False,28,0,1,https://github.com/karel-m,TFM + radix to bin fails for long inputs,1,[],https://github.com/libtom/libtomcrypt/pull/294,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/294,mpi_test passes with LTM but fails with TFM,mpi_test passes with LTM but fails with TFM,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,294,2017-09-19T09:35:07Z,2017-09-19T10:14:48Z,2017-09-22T07:38:18Z,CLOSED,False,28,0,1,https://github.com/karel-m,TFM + radix to bin fails for long inputs,1,[],https://github.com/libtom/libtomcrypt/pull/294,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/294#issuecomment-330486618,mpi_test passes with LTM but fails with TFM,Thx,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,294,2017-09-19T09:35:07Z,2017-09-19T10:14:48Z,2017-09-22T07:38:18Z,CLOSED,False,28,0,1,https://github.com/karel-m,TFM + radix to bin fails for long inputs,1,[],https://github.com/libtom/libtomcrypt/pull/294,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/294#issuecomment-330494779,mpi_test passes with LTM but fails with TFM,"...
576 * 8 = 4608 = 4096+(8*DIGIT_BIT)
TFM default max size has been hit (again...)
should we probably increase the default size...?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,294,2017-09-19T09:35:07Z,2017-09-19T10:14:48Z,2017-09-22T07:38:18Z,CLOSED,False,28,0,1,https://github.com/karel-m,TFM + radix to bin fails for long inputs,1,[],https://github.com/libtom/libtomcrypt/pull/294,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/294#issuecomment-330499002,mpi_test passes with LTM but fails with TFM,"IMO we should at least return CRYPT_ERROR not CRYPT_OK.
Perhaps TFM's fp_read_radix needs some overflow detection.
Anyway, not a libtomcrypt bug.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,294,2017-09-19T09:35:07Z,2017-09-19T10:14:48Z,2017-09-22T07:38:18Z,CLOSED,False,28,0,1,https://github.com/karel-m,TFM + radix to bin fails for long inputs,1,[],https://github.com/libtom/libtomcrypt/pull/294,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/294#issuecomment-330508392,mpi_test passes with LTM but fails with TFM,We should probably re-write radix_to_bin() to be independent of the MPI provider...,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,296,2017-09-21T14:22:18Z,2017-09-21T18:46:42Z,2017-10-02T12:57:57Z,MERGED,True,32,18,10,https://github.com/sjaeckel,General clean-up 3,7,[],https://github.com/libtom/libtomcrypt/pull/296,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/296,Next (and hopefully last) general clean-up,Next (and hopefully last) general clean-up,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,296,2017-09-21T14:22:18Z,2017-09-21T18:46:42Z,2017-10-02T12:57:57Z,MERGED,True,32,18,10,https://github.com/sjaeckel,General clean-up 3,7,[],https://github.com/libtom/libtomcrypt/pull/296,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/296#issuecomment-331195392,Next (and hopefully last) general clean-up,looks like my changes in hashsum broke coverage.sh,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,296,2017-09-21T14:22:18Z,2017-09-21T18:46:42Z,2017-10-02T12:57:57Z,MERGED,True,32,18,10,https://github.com/sjaeckel,General clean-up 3,7,[],https://github.com/libtom/libtomcrypt/pull/296,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/296#issuecomment-331195541,Next (and hopefully last) general clean-up,"I'd put LTC_PK_MAX_RETRIES here:
#if defined(LTC_MECC) || defined(LTC_MRSA) || defined(LTC_MDSA) || defined(LTC_MKAT)
   /* Include the MPI functionality?  (required by the PK algorithms) */
   #define LTC_MPI
   #ifndef LTC_PK_MAX_RETRIES
      /* iterations limit for retry-loops */
      #define LTC_PK_MAX_RETRIES  20
   #endif
#endif",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,296,2017-09-21T14:22:18Z,2017-09-21T18:46:42Z,2017-10-02T12:57:57Z,MERGED,True,32,18,10,https://github.com/sjaeckel,General clean-up 3,7,[],https://github.com/libtom/libtomcrypt/pull/296,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/296#issuecomment-331197746,Next (and hopefully last) general clean-up,"Do we care about warnings in demos/openssl-enc.c?
Try:
make V=1 CFLAGS=""-Wall -Wextra -Wwrite-strings -Werror -DLTM_DESC -I../libtommath"" EXTRALIBS=../libtommath/libtommath.a all",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,296,2017-09-21T14:22:18Z,2017-09-21T18:46:42Z,2017-10-02T12:57:57Z,MERGED,True,32,18,10,https://github.com/sjaeckel,General clean-up 3,7,[],https://github.com/libtom/libtomcrypt/pull/296,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/296#issuecomment-331198435,Next (and hopefully last) general clean-up,"The fix is easy:
diff --git a/demos/openssl-enc.c b/demos/openssl-enc.c
index 21121017..3aca04f4 100644
--- a/demos/openssl-enc.c
+++ b/demos/openssl-enc.c
@@ -89,7 +89,7 @@ union paddable {
  * Output:       <no return>
  * Side Effects: print messages and barf (does exit(3))
  */
-void barf(char *pname, char *err)
+void barf(const char *pname, const char *err)
 {
    printf(""Usage: %s <enc|dec> infile outfile passphrase [salt]\n"", pname);
    printf(""\n"");",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,296,2017-09-21T14:22:18Z,2017-09-21T18:46:42Z,2017-10-02T12:57:57Z,MERGED,True,32,18,10,https://github.com/sjaeckel,General clean-up 3,7,[],https://github.com/libtom/libtomcrypt/pull/296,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/296#issuecomment-331199936,Next (and hopefully last) general clean-up,"The LTC_PK_MAX_RETRIES is sort of unaligned:
PRNG:
   Yarrow (LTC_YARROW_AES=2)
   SPRNG
   RC4
   ChaCha20
   Fortuna (LTC_FORTUNA_POOLS=32, LTC_FORTUNA_WD=10)
   SOBER128

PK Crypto:
   RSA (with blinding and CRT hardening)
   DH
   ECC (with blinding)
   DSA
 LTC_PK_MAX_RETRIES=20
MPI (Math):
   LTC_MPI
   LTM_DESC
   LTC_MILLER_RABIN_REPS=35

Compiler:
   CYGWIN Detected.
   GCC compiler 5.4.0.
   x86-64 detected.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/297,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-331467198,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","btw. I think we should push this to next, I just wanted to get rid of the patches locally :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-333480666,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","@sjaeckel consider cherry-picking small changes in tomcrypt_misc.h to RC5
https://github.com/libtom/libtomcrypt/pull/297/files#diff-4e531399a5202dc48f92ed35d3860159",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-335622001,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip",I am for merging this one to develop,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/buggywhip,5,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-335623025,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","On 10Oct, 2017, at 3:04 PM, karel-m ***@***.***> wrote:

 I am for merging this one to develop

I agree.  (I have been doing this without issue for a while now.)


.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-335692998,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip",what do you think about including init_mpi() in the library? probably then call it crypt_mpi_init() but I'd leave the other init_X() in there for now,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/buggywhip,7,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-335697527,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","On 10Oct, 2017, at 11:07 PM, Steffen Jaeckel ***@***.***> wrote:

 what do you think about including init_mpi() in the library? probably then call it crypt_mpi_init() but I'd leave the other init_X() in there for now

I like the idea.  It would allow for more than just LTM, TFM, and GMP.  :-))

...but then we'd either need a way 1) statically, at least a partial compile and relink, which is not that far off fm what we have now, or 2) dynamically populate and load a DESC and then make the call to its init.  ...in C.  ...but then this is computer science [fiction?], right?  ;-)

Play with it some to see what your real problems would be.


.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-335726165,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","what do you think about including init_mpi() in the library

I do not think init_mpi(""ltm""); is a significant improvement comparing to init_LTM();",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-335729968,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","I'd say we should just leave the concept as it is now, I like it and it allows already for more than just the supplied MPI providers, you just have to provider your own version of the ltc_math_descriptor.

I do not think init_mpi(""ltm""); is a significant improvement comparing to init_LTM();

yeah, it isn't a significant improvement but it would then be as it should've been the way to go in the first place.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/buggywhip,10,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-335734083,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","On 11Oct, 2017, at 1:22 AM, Steffen Jaeckel ***@***.***> wrote:

 you just have to provide your own version of the ltc_math_descriptor.

...and and a linkable init function.


.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/sjaeckel,11,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-335736524,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","...and and a linkable init function.

what do you mean?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/buggywhip,12,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-336105077,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","...and and a linkable init function.
what do you mean?

Won't you need the equivalent of init_LTM() as found in misc/crypt/crypt_init.c to copy the DESC to ltc_mp?  And will it not need to be linked in?
The alternative is to try for a binding at run time (""dynamic"") which IIRC has special challenges of its own.  For example, the arg to init_mpi() would need more than the simple equivalent of ""LTM"".  That arg would need to provide sufficient info to find the dynamic/shared MP library so it could be loaded.  Yes/no?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/sjaeckel,13,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-336105634,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","IIUC you can go the way as OP-TEE did https://github.com/OP-TEE/optee_os/blob/master/core/lib/libtomcrypt/src/mpa_desc.c and simply define your own variable of type ltc_math_descriptor called ltc_mp and the linker will use that one
then you don't even have to call anything to init",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/buggywhip,14,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-336105876,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","That said....
While the dynamic approach is appealing, I believe it is too complex for what I think will be the typical use case.  IMO the developer will know which MP she wants to use and will likely have the sources to populate a DESC and create a init_XXX().  Much simpler?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/buggywhip,15,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-336106328,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","then you don't even have to call anything to init

Hmmm...  a new trick?  ;-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/sjaeckel,16,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-336109834,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","Hmmm... a new trick? ;-)

nah, that's the job of the linker: it resolves symbols for you... :)
(more or less) easy example:

take src/math/ltm_desc.c and c&p lines 15-506 into test/test.c
now change const ltc_math_descriptor ltm_desc to ltc_math_descriptor ltc_mp in test/test.c
add #undef LTC_SOURCE before the first include of test/test.c
rebuild test and see :)

I won't even try to explain how&why this works as @rofl0r can certainly explain the details/important parts better",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,297,2017-09-22T14:31:29Z,2017-10-18T06:47:11Z,2017-10-18T06:48:14Z,MERGED,True,172,88,18,https://github.com/sjaeckel,Improve MPI provider selection,6,[],https://github.com/libtom/libtomcrypt/pull/297,https://github.com/karel-m,17,https://github.com/libtom/libtomcrypt/pull/297#issuecomment-336944420,"With this patch you can build the library with -DLTM_DESC -DTFM_DESC -DGMP_DESC and then select the MPI provider at runtime of the tools test and timing
I was lazy regarding the parameter parsing and therefore you have to pass the MPI provider as 2nd argument... Running all tests or timings requires you to execute ./test _ gmp or something like that where arg1 matches for all cases... :)
Regarding the static init_mpi() function: I already thought about replacing the three functions by this single one /cc @buggywhip","What about some doc update?

obviously something about crypt_mp_init
perhaps also a new chapter about deprecated functions",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,298,2017-09-24T11:13:57Z,2017-09-27T19:34:31Z,2017-10-02T12:57:57Z,MERGED,True,32,16,10,https://github.com/sjaeckel,initialize 'flags' etc. to invalid values before trying to decode,2,[],https://github.com/libtom/libtomcrypt/pull/298,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/298,"I'm not sure if that's really required, but I'm just putting this here to get your opinion.","I'm not sure if that's really required, but I'm just putting this here to get your opinion.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,298,2017-09-24T11:13:57Z,2017-09-27T19:34:31Z,2017-10-02T12:57:57Z,MERGED,True,32,16,10,https://github.com/sjaeckel,initialize 'flags' etc. to invalid values before trying to decode,2,[],https://github.com/libtom/libtomcrypt/pull/298,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/298#issuecomment-331941127,"I'm not sure if that's really required, but I'm just putting this here to get your opinion.","didn't merge this PR as I'm doubting its usefulness...

When I was looking at the changes in this PR the only scenario that come to my mind was a case when something deep in the ASN.1 stuff returns CRYPT_PK_INVALID_SIZE which we will falsely consider as OK/expected (like in case when there are extra input data at the end of parsing ASN.1 sequence).
But it can be handled for example by a new error code like CRYPT_SEQ_DATA_TOO_LONG which will be guaranteed just for the case ""extra input data at the end of parsing ASN.1 sequence"".",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,298,2017-09-24T11:13:57Z,2017-09-27T19:34:31Z,2017-10-02T12:57:57Z,MERGED,True,32,16,10,https://github.com/sjaeckel,initialize 'flags' etc. to invalid values before trying to decode,2,[],https://github.com/libtom/libtomcrypt/pull/298,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/298#issuecomment-331991158,"I'm not sure if that's really required, but I'm just putting this here to get your opinion.",The name CRYPT_INPUT_TOO_LONG sounds good 👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,298,2017-09-24T11:13:57Z,2017-09-27T19:34:31Z,2017-10-02T12:57:57Z,MERGED,True,32,16,10,https://github.com/sjaeckel,initialize 'flags' etc. to invalid values before trying to decode,2,[],https://github.com/libtom/libtomcrypt/pull/298,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/298#issuecomment-332431148,"I'm not sure if that's really required, but I'm just putting this here to get your opinion.","I just want to confirm that I approve also the latest version of this PR.
@sjaeckel merge this depending on your plan of the next steps in the release process. IMO if there is a RC5 than I am for merging this into it. But it could also wait for the next.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,299,2017-09-26T18:09:41Z,2017-09-27T19:33:30Z,2017-10-02T12:57:57Z,MERGED,True,4,1,1,https://github.com/karel-m,libtool + cygwin,1,[],https://github.com/libtom/libtomcrypt/pull/299,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/299,"While hacking on SONAME issue (discussed off-github) I found out that successful building of a shared library on cygwin requires to pass -no-undefined param to libtool.
If there is a RC5 than this should be merged. But it can also wait for the next.","While hacking on SONAME issue (discussed off-github) I found out that successful building of a shared library on cygwin requires to pass -no-undefined param to libtool.
If there is a RC5 than this should be merged. But it can also wait for the next.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,299,2017-09-26T18:09:41Z,2017-09-27T19:33:30Z,2017-10-02T12:57:57Z,MERGED,True,4,1,1,https://github.com/karel-m,libtool + cygwin,1,[],https://github.com/libtom/libtomcrypt/pull/299,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/299#issuecomment-332430300,"While hacking on SONAME issue (discussed off-github) I found out that successful building of a shared library on cygwin requires to pass -no-undefined param to libtool.
If there is a RC5 than this should be merged. But it can also wait for the next.",@sjaeckel please merge this yourself depending on your plan of the next steps in the release process,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,301,2017-09-28T00:27:44Z,2017-09-29T16:29:25Z,2017-10-02T12:57:57Z,CLOSED,False,1,1,1,https://github.com/rswindell,Fixes large heap over-allocation in rsa_import,2,[],https://github.com/libtom/libtomcrypt/pull/301,https://github.com/rswindell,1,https://github.com/libtom/libtomcrypt/pull/301,"Bug-fix: MAX_RSA_SIZE is the maximum RSA key size in bits (as commented in tomcrypt_custom.h), so the proper conversion to bytes (as the argument value to XCALLOC) would be to divide by 8 (bits per byte), not multiply by 8. This excessive allocation of heap memory (32 Kbytes instead of 512 bytes) is readily apparent in memory-constrained environments.","Bug-fix: MAX_RSA_SIZE is the maximum RSA key size in bits (as commented in tomcrypt_custom.h), so the proper conversion to bytes (as the argument value to XCALLOC) would be to divide by 8 (bits per byte), not multiply by 8. This excessive allocation of heap memory (32 Kbytes instead of 512 bytes) is readily apparent in memory-constrained environments.",True,"{'THUMBS_UP': ['https://github.com/mattkelly', 'https://github.com/diamondo25']}"
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,301,2017-09-28T00:27:44Z,2017-09-29T16:29:25Z,2017-10-02T12:57:57Z,CLOSED,False,1,1,1,https://github.com/rswindell,Fixes large heap over-allocation in rsa_import,2,[],https://github.com/libtom/libtomcrypt/pull/301,https://github.com/mattkelly,2,https://github.com/libtom/libtomcrypt/pull/301#issuecomment-332701197,"Bug-fix: MAX_RSA_SIZE is the maximum RSA key size in bits (as commented in tomcrypt_custom.h), so the proper conversion to bytes (as the argument value to XCALLOC) would be to divide by 8 (bits per byte), not multiply by 8. This excessive allocation of heap memory (32 Kbytes instead of 512 bytes) is readily apparent in memory-constrained environments.","Hah, nice find!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,301,2017-09-28T00:27:44Z,2017-09-29T16:29:25Z,2017-10-02T12:57:57Z,CLOSED,False,1,1,1,https://github.com/rswindell,Fixes large heap over-allocation in rsa_import,2,[],https://github.com/libtom/libtomcrypt/pull/301,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/301#issuecomment-332804229,"Bug-fix: MAX_RSA_SIZE is the maximum RSA key size in bits (as commented in tomcrypt_custom.h), so the proper conversion to bytes (as the argument value to XCALLOC) would be to divide by 8 (bits per byte), not multiply by 8. This excessive allocation of heap memory (32 Kbytes instead of 512 bytes) is readily apparent in memory-constrained environments.","especially since der_decode_subject_public_key_info() will also allocate 32k ;)
Edit: ...which is also nonsense IIUC",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,301,2017-09-28T00:27:44Z,2017-09-29T16:29:25Z,2017-10-02T12:57:57Z,CLOSED,False,1,1,1,https://github.com/rswindell,Fixes large heap over-allocation in rsa_import,2,[],https://github.com/libtom/libtomcrypt/pull/301,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/301#issuecomment-332805173,"Bug-fix: MAX_RSA_SIZE is the maximum RSA key size in bits (as commented in tomcrypt_custom.h), so the proper conversion to bytes (as the argument value to XCALLOC) would be to divide by 8 (bits per byte), not multiply by 8. This excessive allocation of heap memory (32 Kbytes instead of 512 bytes) is readily apparent in memory-constrained environments.","LTC_DER_MAX_PUBKEY_SIZE isn't enough in der_decode_subject_public_key_info(), but at least we shouldn't need LTC_DER_MAX_PUBKEY_SIZE * 8... there's probably a way to find out what we really need to allocate...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,301,2017-09-28T00:27:44Z,2017-09-29T16:29:25Z,2017-10-02T12:57:57Z,CLOSED,False,1,1,1,https://github.com/rswindell,Fixes large heap over-allocation in rsa_import,2,[],https://github.com/libtom/libtomcrypt/pull/301,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/301#issuecomment-332805388,"Bug-fix: MAX_RSA_SIZE is the maximum RSA key size in bits (as commented in tomcrypt_custom.h), so the proper conversion to bytes (as the argument value to XCALLOC) would be to divide by 8 (bits per byte), not multiply by 8. This excessive allocation of heap memory (32 Kbytes instead of 512 bytes) is readily apparent in memory-constrained environments.","there's probably a way to find out what we really need to allocate

I guess the easiest would be to use inlen",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,301,2017-09-28T00:27:44Z,2017-09-29T16:29:25Z,2017-10-02T12:57:57Z,CLOSED,False,1,1,1,https://github.com/rswindell,Fixes large heap over-allocation in rsa_import,2,[],https://github.com/libtom/libtomcrypt/pull/301,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/301#issuecomment-332818846,"Bug-fix: MAX_RSA_SIZE is the maximum RSA key size in bits (as commented in tomcrypt_custom.h), so the proper conversion to bytes (as the argument value to XCALLOC) would be to divide by 8 (bits per byte), not multiply by 8. This excessive allocation of heap memory (32 Kbytes instead of 512 bytes) is readily apparent in memory-constrained environments.","Could you please add a test case to tests/rsa_test.c which will make a key
of size MAX_RSA_SIZE/8 and then export-priv, import-priv, export-pub,
import-pub.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,301,2017-09-28T00:27:44Z,2017-09-29T16:29:25Z,2017-10-02T12:57:57Z,CLOSED,False,1,1,1,https://github.com/rswindell,Fixes large heap over-allocation in rsa_import,2,[],https://github.com/libtom/libtomcrypt/pull/301,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/301#issuecomment-332845342,"Bug-fix: MAX_RSA_SIZE is the maximum RSA key size in bits (as commented in tomcrypt_custom.h), so the proper conversion to bytes (as the argument value to XCALLOC) would be to divide by 8 (bits per byte), not multiply by 8. This excessive allocation of heap memory (32 Kbytes instead of 512 bytes) is readily apparent in memory-constrained environments.","export-priv, import-priv, export-pub, import-pub

+ export-pub&PK_STD, import-pub",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,301,2017-09-28T00:27:44Z,2017-09-29T16:29:25Z,2017-10-02T12:57:57Z,CLOSED,False,1,1,1,https://github.com/rswindell,Fixes large heap over-allocation in rsa_import,2,[],https://github.com/libtom/libtomcrypt/pull/301,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/301#issuecomment-332848569,"Bug-fix: MAX_RSA_SIZE is the maximum RSA key size in bits (as commented in tomcrypt_custom.h), so the proper conversion to bytes (as the argument value to XCALLOC) would be to divide by 8 (bits per byte), not multiply by 8. This excessive allocation of heap memory (32 Kbytes instead of 512 bytes) is readily apparent in memory-constrained environments.","As for the actual fix, Steffen's inlen idea is IMO better e.g.

tmpbuf = XMALLOC(inlen);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,301,2017-09-28T00:27:44Z,2017-09-29T16:29:25Z,2017-10-02T12:57:57Z,CLOSED,False,1,1,1,https://github.com/rswindell,Fixes large heap over-allocation in rsa_import,2,[],https://github.com/libtom/libtomcrypt/pull/301,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/301#issuecomment-332874600,"Bug-fix: MAX_RSA_SIZE is the maximum RSA key size in bits (as commented in tomcrypt_custom.h), so the proper conversion to bytes (as the argument value to XCALLOC) would be to divide by 8 (bits per byte), not multiply by 8. This excessive allocation of heap memory (32 Kbytes instead of 512 bytes) is readily apparent in memory-constrained environments.","Btw I tried it out and needs some more tweaking! MALLOC(inlen) isn't enough, that fails",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,301,2017-09-28T00:27:44Z,2017-09-29T16:29:25Z,2017-10-02T12:57:57Z,CLOSED,False,1,1,1,https://github.com/rswindell,Fixes large heap over-allocation in rsa_import,2,[],https://github.com/libtom/libtomcrypt/pull/301,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/301#issuecomment-333065702,"Bug-fix: MAX_RSA_SIZE is the maximum RSA key size in bits (as commented in tomcrypt_custom.h), so the proper conversion to bytes (as the argument value to XCALLOC) would be to divide by 8 (bits per byte), not multiply by 8. This excessive allocation of heap memory (32 Kbytes instead of 512 bytes) is readily apparent in memory-constrained environments.","I've pushed the fix to the fix/pr/301 branch, tests still missing.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,301,2017-09-28T00:27:44Z,2017-09-29T16:29:25Z,2017-10-02T12:57:57Z,CLOSED,False,1,1,1,https://github.com/rswindell,Fixes large heap over-allocation in rsa_import,2,[],https://github.com/libtom/libtomcrypt/pull/301,https://github.com/sjaeckel,11,https://github.com/libtom/libtomcrypt/pull/301#issuecomment-333174082,"Bug-fix: MAX_RSA_SIZE is the maximum RSA key size in bits (as commented in tomcrypt_custom.h), so the proper conversion to bytes (as the argument value to XCALLOC) would be to divide by 8 (bits per byte), not multiply by 8. This excessive allocation of heap memory (32 Kbytes instead of 512 bytes) is readily apparent in memory-constrained environments.",Closed in favor of #302,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,302,2017-09-29T16:28:58Z,2017-10-02T12:05:59Z,2017-10-02T12:57:57Z,MERGED,True,86,58,16,https://github.com/sjaeckel,re-work PK crypto im- & export,19,[],https://github.com/libtom/libtomcrypt/pull/302,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/302,"well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?","well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?",True,{'HOORAY': ['https://github.com/rswindell']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,302,2017-09-29T16:28:58Z,2017-10-02T12:05:59Z,2017-10-02T12:57:57Z,MERGED,True,86,58,16,https://github.com/sjaeckel,re-work PK crypto im- & export,19,[],https://github.com/libtom/libtomcrypt/pull/302,https://github.com/buggywhip,2,https://github.com/libtom/libtomcrypt/pull/302#issuecomment-333202460,"well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?","On 29Sep, 2017, at 9:29 AM, Steffen Jaeckel ***@***.***> wrote:

 After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?
Not really, but note that it is currently set to 4096.  Given recent interest in post-quantum resistance with longer key lengths, folks may want to play with 8192 and 15360.  ...but given space and time, not for long. ;-)

That said, checking inputs for reasonableness is not a bad idea.  The question then becomes what should be the limit?  Everybody will have a different opinion but I consider 8192 another ""reasonable"" number.  (A higher or lower number can always set it at compile time.)
…
-----

Also on the subject of key lengths, a few lines further down in tomcrypt_custom.h, LTC_DER_MAX_PUBKEY_SIZE is set to 1024.  FIPS.186-4 now defines longer DSA key lengths.
    http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf
This might cause DSA key import problems in pk/dsa/dsa_import.c",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,302,2017-09-29T16:28:58Z,2017-10-02T12:05:59Z,2017-10-02T12:57:57Z,MERGED,True,86,58,16,https://github.com/sjaeckel,re-work PK crypto im- & export,19,[],https://github.com/libtom/libtomcrypt/pull/302,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/302#issuecomment-333212585,"well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?","I have doubts about `der_decode_raw_bit_string`:

1/ Ad `blen/8 > *outlen` - what if `blen` is not multiple of 8? And the
part `*outlen = blen;` perhaps also needs a fix.

2/ To me it seems like we are (falsely) assuming that `out[]` is
zero-initialized, we are setting just 1-bits.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,302,2017-09-29T16:28:58Z,2017-10-02T12:05:59Z,2017-10-02T12:57:57Z,MERGED,True,86,58,16,https://github.com/sjaeckel,re-work PK crypto im- & export,19,[],https://github.com/libtom/libtomcrypt/pull/302,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/302#issuecomment-333262088,"well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?","Not really, but note that it is currently set to 4096.  Given recent interest in post-quantum resistance with longer key lengths, folks may want to play with 8192 and 15360.  ...but given space and time, not for long. ;-)

yeah, I would basically just remove the limits, so someone could create arbitrary sized RSA keys

That said, checking inputs for reasonableness is not a bad idea.  The question then becomes what should be the limit?  Everybody will have a different opinion but I consider 8192 another ""reasonable"" number.  (A higher or lower number can always set it at compile time.)

I also think that sanity checking is useful at one point but I'm not sure if this library is the correct point where someone should hit an error because he chose an insane (from the library's view) value.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,302,2017-09-29T16:28:58Z,2017-10-02T12:05:59Z,2017-10-02T12:57:57Z,MERGED,True,86,58,16,https://github.com/sjaeckel,re-work PK crypto im- & export,19,[],https://github.com/libtom/libtomcrypt/pull/302,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/302#issuecomment-333263982,"well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?",probably keeping MIN_RSA_SIZE but increasing it to 2048 is a good idea,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,302,2017-09-29T16:28:58Z,2017-10-02T12:05:59Z,2017-10-02T12:57:57Z,MERGED,True,86,58,16,https://github.com/sjaeckel,re-work PK crypto im- & export,19,[],https://github.com/libtom/libtomcrypt/pull/302,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/302#issuecomment-333284399,"well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?","Ad (MAX|MIN)_RSA_SIZE I am for removing them completely.

Looking at der_decode_raw_bit_string once again:

outlen [in/out] The number of *bits* stored

So perhaps the original comparison with just `blen` was correct.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,302,2017-09-29T16:28:58Z,2017-10-02T12:05:59Z,2017-10-02T12:57:57Z,MERGED,True,86,58,16,https://github.com/sjaeckel,re-work PK crypto im- & export,19,[],https://github.com/libtom/libtomcrypt/pull/302,https://github.com/rofl0r,7,https://github.com/libtom/libtomcrypt/pull/302#issuecomment-333299143,"well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?","probably keeping MIN_RSA_SIZE but increasing it to 2048 is a good idea

wouldn't that prevent usage of 1024 bit keys ? i can imagine there are still some users of such keys, which may not have the option to change them.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,302,2017-09-29T16:28:58Z,2017-10-02T12:05:59Z,2017-10-02T12:57:57Z,MERGED,True,86,58,16,https://github.com/sjaeckel,re-work PK crypto im- & export,19,[],https://github.com/libtom/libtomcrypt/pull/302,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/302#issuecomment-333301161,"well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?","wouldn't that prevent usage of 1024 bit keys ? i can imagine there are still some users of such keys, which may not have the option to change them.

well it would prevent the creation of fresh 1024 bit keys but importing would still be feasible.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,302,2017-09-29T16:28:58Z,2017-10-02T12:05:59Z,2017-10-02T12:57:57Z,MERGED,True,86,58,16,https://github.com/sjaeckel,re-work PK crypto im- & export,19,[],https://github.com/libtom/libtomcrypt/pull/302,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/302#issuecomment-333301284,"well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?","So perhaps the original comparison with just blen was correct.

yeah you're right... now the API is completely inconsistent..",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,302,2017-09-29T16:28:58Z,2017-10-02T12:05:59Z,2017-10-02T12:57:57Z,MERGED,True,86,58,16,https://github.com/sjaeckel,re-work PK crypto im- & export,19,[],https://github.com/libtom/libtomcrypt/pull/302,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/302#issuecomment-333301812,"well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?",">> wouldn't that prevent usage of 1024 bit keys ? i can imagine there are
>> still some users of such keys, which may not have the option to change them.
>
> well it would prevent the creation of fresh 1024 bit keys but importing
> would still be feasible.
We do not have an ambition to prevent ltc users from weak crypo at many
other places. The recommended minimum should be mentioned with a loud
warning in the doc, not compiled into the library.

Enforcing min/max limits make sense to me only if those are limits of our
RSA make key implementation.",True,{'THUMBS_UP': ['https://github.com/rofl0r']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,302,2017-09-29T16:28:58Z,2017-10-02T12:05:59Z,2017-10-02T12:57:57Z,MERGED,True,86,58,16,https://github.com/sjaeckel,re-work PK crypto im- & export,19,[],https://github.com/libtom/libtomcrypt/pull/302,https://github.com/rswindell,11,https://github.com/libtom/libtomcrypt/pull/302#issuecomment-333348104,"well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?","For what it's worth, rsa_import() is now working in a (very) memory-constrained environment. Thanks for all your fixes!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,302,2017-09-29T16:28:58Z,2017-10-02T12:05:59Z,2017-10-02T12:57:57Z,MERGED,True,86,58,16,https://github.com/sjaeckel,re-work PK crypto im- & export,19,[],https://github.com/libtom/libtomcrypt/pull/302,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/302#issuecomment-333372953,"well this turned out to become a bigger one with some real bugfixes as well...
This mostly removes MAX_RSA_SIZE from the code, only rsa_make_key() still checks for it.
After some thinking I'd even propose to remove MIN_RSA_SIZEand MAX_RSA_SIZE entirely! Somebody against it?","According to my testing this PR introduces the following valgrind warnings:
==2355== 256 bytes in 1 blocks are indirectly lost in loss record 1 of 13
==2355==    at 0x4C2BBAF: malloc (vg_replace_malloc.c:299)
==2355==    by 0x1C3688: mp_init (in /home/noroot/libtomcrypt/test)
==2355==    by 0x18B069: init (ltm_desc.c:53)
==2355==    by 0x18C421: ltc_init_multi (multi.c:22)
==2355==    by 0x1A6370: rsa_make_key (rsa_make_key.c:70)
==2355==    by 0x126E7B: _rsa_issue_301 (rsa_test.c:319)
==2355==    by 0x12719A: rsa_test (rsa_test.c:368)
==2355==    by 0x1295F8: main (test.c:392)

==2355== 768 bytes in 1 blocks are indirectly lost in loss record 3 of 13
==2355==    at 0x4C2DDCF: realloc (vg_replace_malloc.c:785)
==2355==    by 0x1C35AC: mp_grow (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C74BF: s_mp_add (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C5CC3: mp_sub (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C8A3C: fast_mp_invmod (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C3838: mp_invmod (in /home/noroot/libtomcrypt/test)
==2355==    by 0x18C001: invmod (ltm_desc.c:350)
==2355==    by 0x1A64CB: rsa_make_key (rsa_make_key.c:84)
==2355==    by 0x126E7B: _rsa_issue_301 (rsa_test.c:319)
==2355==    by 0x12719A: rsa_test (rsa_test.c:368)
==2355==    by 0x1295F8: main (test.c:392)

==2355== 768 bytes in 1 blocks are indirectly lost in loss record 4 of 13
==2355==    at 0x4C2DDCF: realloc (vg_replace_malloc.c:785)
==2355==    by 0x1C35AC: mp_grow (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C2453: mp_copy (in /home/noroot/libtomcrypt/test)
==2355==    by 0x18B19E: copy (ltm_desc.c:77)
==2355==    by 0x1A64EF: rsa_make_key (rsa_make_key.c:86)
==2355==    by 0x126E7B: _rsa_issue_301 (rsa_test.c:319)
==2355==    by 0x12719A: rsa_test (rsa_test.c:368)
==2355==    by 0x1295F8: main (test.c:392)

==2355== 768 bytes in 1 blocks are indirectly lost in loss record 5 of 13
==2355==    at 0x4C2DDCF: realloc (vg_replace_malloc.c:785)
==2355==    by 0x1C35AC: mp_grow (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C2453: mp_copy (in /home/noroot/libtomcrypt/test)
==2355==    by 0x18B19E: copy (ltm_desc.c:77)
==2355==    by 0x1A6513: rsa_make_key (rsa_make_key.c:87)
==2355==    by 0x126E7B: _rsa_issue_301 (rsa_test.c:319)
==2355==    by 0x12719A: rsa_test (rsa_test.c:368)
==2355==    by 0x1295F8: main (test.c:392)

==2355== 1,024 bytes in 1 blocks are indirectly lost in loss record 7 of 13
==2355==    at 0x4C2DDCF: realloc (vg_replace_malloc.c:785)
==2355==    by 0x1C35AC: mp_grow (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C74BF: s_mp_add (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C2046: mp_add (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C3BE4: mp_invmod_slow (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C3851: mp_invmod (in /home/noroot/libtomcrypt/test)
==2355==    by 0x18C001: invmod (ltm_desc.c:350)
==2355==    by 0x1A63C9: rsa_make_key (rsa_make_key.c:75)
==2355==    by 0x126E7B: _rsa_issue_301 (rsa_test.c:319)
==2355==    by 0x12719A: rsa_test (rsa_test.c:368)
==2355==    by 0x1295F8: main (test.c:392)

==2355== 1,024 bytes in 1 blocks are indirectly lost in loss record 8 of 13
==2355==    at 0x4C2DDCF: realloc (vg_replace_malloc.c:785)
==2355==    by 0x1C35AC: mp_grow (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C8FF9: fast_s_mp_mul_digs (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C4DCE: mp_mul (in /home/noroot/libtomcrypt/test)
==2355==    by 0x18B951: mul (ltm_desc.c:242)
==2355==    by 0x1A63F2: rsa_make_key (rsa_make_key.c:76)
==2355==    by 0x126E7B: _rsa_issue_301 (rsa_test.c:319)
==2355==    by 0x12719A: rsa_test (rsa_test.c:368)
==2355==    by 0x1295F8: main (test.c:392)

==2355== 1,024 bytes in 1 blocks are indirectly lost in loss record 9 of 13
==2355==    at 0x4C2BBAF: malloc (vg_replace_malloc.c:299)
==2355==    by 0x1C3737: mp_init_size (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C3637: mp_init_copy (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C27FA: mp_div (in /home/noroot/libtomcrypt/test)
==2355==    by 0x18BAA4: divide (ltm_desc.c:265)
==2355==    by 0x1A6470: rsa_make_key (rsa_make_key.c:82)
==2355==    by 0x126E7B: _rsa_issue_301 (rsa_test.c:319)
==2355==    by 0x12719A: rsa_test (rsa_test.c:368)
==2355==    by 0x1295F8: main (test.c:392)

==2355== 1,024 bytes in 1 blocks are indirectly lost in loss record 10 of 13
==2355==    at 0x4C2BBAF: malloc (vg_replace_malloc.c:299)
==2355==    by 0x1C3737: mp_init_size (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C3637: mp_init_copy (in /home/noroot/libtomcrypt/test)
==2355==    by 0x1C27FA: mp_div (in /home/noroot/libtomcrypt/test)
==2355==    by 0x18BAA4: divide (ltm_desc.c:265)
==2355==    by 0x1A64A2: rsa_make_key (rsa_make_key.c:83)
==2355==    by 0x126E7B: _rsa_issue_301 (rsa_test.c:319)
==2355==    by 0x12719A: rsa_test (rsa_test.c:368)
==2355==    by 0x1295F8: main (test.c:392)

==2355== 6,848 (192 direct, 6,656 indirect) bytes in 8 blocks are definitely lost in loss record 13 of 13
==2355==    at 0x4C2DBC5: calloc (vg_replace_malloc.c:711)
==2355==    by 0x18B03D: init (ltm_desc.c:48)
==2355==    by 0x18C421: ltc_init_multi (multi.c:22)
==2355==    by 0x1A6370: rsa_make_key (rsa_make_key.c:70)
==2355==    by 0x126E7B: _rsa_issue_301 (rsa_test.c:319)
==2355==    by 0x12719A: rsa_test (rsa_test.c:368)
==2355==    by 0x1295F8: main (test.c:392)

The remaining 4 are DSA related and are unfortunately already present in release/1.18.0.
Steps to reproduce:
make -f makefile.unix clean
make -f makefile.unix CFLAGS=""-g -DUSE_LTM -DLTM_DESC -I../libtommath"" EXTRALIBS=""../libtommath/libtommath.a"" test
valgrind --error-exitcode=666 --leak-check=full --show-leak-kinds=all --errors-for-leak-kinds=all ./test",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,304,2017-10-01T13:41:05Z,2017-10-01T15:24:09Z,2017-10-02T12:57:57Z,MERGED,True,1,0,1,https://github.com/karel-m,missing dsa_free,1,[],https://github.com/libtom/libtomcrypt/pull/304,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/304,see #303,see #303,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,308,2017-10-07T09:36:48Z,2017-10-07T22:57:48Z,2017-10-10T16:04:14Z,MERGED,True,7,7,8,https://github.com/karel-m,Aviod duplicit rc4.c sober128.c,3,[],https://github.com/libtom/libtomcrypt/pull/308,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/308,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,308,2017-10-07T09:36:48Z,2017-10-07T22:57:48Z,2017-10-10T16:04:14Z,MERGED,True,7,7,8,https://github.com/karel-m,Aviod duplicit rc4.c sober128.c,3,[],https://github.com/libtom/libtomcrypt/pull/308,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/308#issuecomment-334948540,,"@sjaeckel thanks for fixing helper.pl
I am leaving the merge up to you, but I think this change is safe for merging into 1.18.0",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,308,2017-10-07T09:36:48Z,2017-10-07T22:57:48Z,2017-10-10T16:04:14Z,MERGED,True,7,7,8,https://github.com/karel-m,Aviod duplicit rc4.c sober128.c,3,[],https://github.com/libtom/libtomcrypt/pull/308,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/308#issuecomment-334951503,,"Yep
Go for the merge",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/309,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-347848866,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","I would like to have also the following commit as a part of this PR 6bb9661
I am not sure if it is worth to rename couple of things here to be more correct e.g.

 enum public_key_algorithms >  enum built_in_oids
constants PKA_DSA > LTC_OID_DSA
maybe pk_get_oid >der_get_oid
but I am not sure",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-348825451,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","I would like to have also the following commit as a part of this PR 6bb9661

I first thought why not, now I think this change belongs to #187 as this would add code here which isn't used anywhere yet.

I am not sure if it is worth to rename couple of things here to be more correct e.g.
enum public_key_algorithms > enum built_in_oids

I think we should keep it like that as long there's not really a need and it still kinda completely represents the functionality :)

constants PKA_DSA > LTC_OID_DSA

Do you see the need to make this public?

maybe pk_get_oid >der_get_oid

OID doesn't belong to DER, it's a general ASN.1 feature and it's spec'ed in X.660. As nobody knows X.660 (compared to X.509) I would propose to move src/misc/pk_get_oid.c to src/pk/asn1/oid/oid_XXX.c (oid_by_pka() for now?... and still keep it private...)

but I am not sure

me neither",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-350570048,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","OK, let's solve OID stuff later. To move forward we should polish/finetune and merge this PR to develop.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-350788059,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","OK, let's solve OID stuff later. To move forward we should polish/finetune and merge this PR to develop.

yep, so let's get #335 ready and merged so we can finish this one",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-352471626,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!",@sjaeckel could you please rebase pr/ecc-asn1-part-minimal on the latest develop?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-352550016,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","@sjaeckel could you please rebase pr/ecc-asn1-part-minimal on the latest develop?

done, doc&some tests still missing but hopefully I'll finish that in the next days",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-352556260,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","Thank you, I have also rebased other ECC branches so that now we have the following chain:
develop > pr/ecc-asn1-part-minimal (AKA ECC-step1 #309) > pr/ecc-non-asn1-part (AKA ECC-step2 #236) > pr/ecc-asn1-part (AKA ECC-step-3 #187)
I still need to adjust the new import/export functions in ""ECC-step-3 #187"" to your new API (I mean ecc_import_openssl, ecc_export_openssl and ecc_import_pkcs8).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-353875270,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","That should be it, please feel free to review.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-354174629,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","@sjaeckel the following simple ASN1 sequence somehow confuses der_decode_sequence (crash).
void *x, *y;
ltc_asn1_list seq[2];
unsigned char der[] = {
  0x30,0x41,0x02,0x84,0x7f,0xff,0xff,0xff,0x1e,0x41,0xb4,0x79,0xad,0x57,0x69,
  0x05,0xb9,0x60,0xfe,0x14,0xea,0xdb,0x91,0xb0,0xcc,0xf3,0x48,0x43,0xda,0xb9,
  0x16,0x17,0x3b,0xb8,0xc9,0xcd,0x02,0x1d,0x00,0xad,0xe6,0x59,0x88,0xd2,0x37,
  0xd3,0x0f,0x9e,0xf4,0x1d,0xd4,0x24,0xa4,0xe1,0xc8,0xf1,0x69,0x67,0xcf,0x33,
  0x65,0x81,0x3f,0xe8,0x78,0x62,0x36
};
mp_init_multi(&x, &y, NULL);
LTC_SET_ASN1(seq, 0, LTC_ASN1_INTEGER, x, 1UL);
LTC_SET_ASN1(seq, 1, LTC_ASN1_INTEGER, y, 1UL);
der_decode_sequence(der, sizeof(der), seq, 2);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-354175898,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","What about to simplify this:
LTC_SET_ASN1(&ecparam, 0, LTC_ASN1_OBJECT_IDENTIFIER, dp.oid, dp.oidlen);
LTC_SET_ASN1(&pub_xy,  0, LTC_ASN1_RAW_BIT_STRING, bin_xy,    len_xy);
LTC_SET_ASN1(seq_priv, 0, LTC_ASN1_SHORT_INTEGER,  &one,      1);
LTC_SET_ASN1(seq_priv, 1, LTC_ASN1_OCTET_STRING,   bin_k,     len_k);
LTC_SET_ASN1(seq_priv, 2, LTC_ASN1_CUSTOM_TYPE,    &ecparams, 1);
LTC_SET_ASN1(seq_priv, 3, LTC_ASN1_CUSTOM_TYPE,    &pub_xy,   1);
LTC_SET_ASN1_IDENTIFIER(seq_priv, 2, LTC_ASN1_CL_CONTEXT_SPECIFIC, LTC_ASN1_PC_CONSTRUCTED, 0);
LTC_SET_ASN1_IDENTIFIER(seq_priv, 3, LTC_ASN1_CL_CONTEXT_SPECIFIC, LTC_ASN1_PC_CONSTRUCTED, 1);

to something like:
LTC_SET_ASN1       (seq_priv, 0, LTC_ASN1_SHORT_INTEGER,  &one,      1);
LTC_SET_ASN1       (seq_priv, 1, LTC_ASN1_OCTET_STRING,   bin_k,     len_k);
LTC_SET_ASN1_CUSTOM(seq_priv, 2, LTC_ASN1_OBJECT_IDENTIFIER, dp.oid, dp.oidlen, &ecparam, LTC_ASN1_CL_CONTEXT_SPECIFIC, LTC_ASN1_PC_CONSTRUCTED, 0);
LTC_SET_ASN1_CUSTOM(seq_priv, 3, LTC_ASN1_RAW_BIT_STRING, bin_xy, len_xy, &pub_xy, LTC_ASN1_CL_CONTEXT_SPECIFIC, LTC_ASN1_PC_CONSTRUCTED, 1);

I would also prefer shorter names for macros/constants (e.g. LTC_ASN1_CL_CONTEXT_SPECIFIC, LTC_ASN1_PC_CONSTRUCTED)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-354277377,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","@sjaeckel the following simple ASN1 sequence somehow confuses der_decode_sequence (crash).

I'll have a look into the crash, that shouldn't happen, but even dumpasn1 hangs in an endless loop when trying to decode this and openssl asn1parse errors-out...

I would also prefer shorter names for macros/constants (e.g. LTC_ASN1_CL_CONTEXT_SPECIFIC, LTC_ASN1_PC_CONSTRUCTED)

proposals? TBH I prefer speaking macros/enum names instead of cryptic abbreviations, but probably someone else can come up with something better... and regarding the length... well auto-completion does the typing for me in these cases...
regarding LTC_SET_ASN1_CUSTOM - I'll add that",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/sjaeckel,13,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-354279179,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","regarding LTC_SET_ASN1_CUSTOM - I'll add that

I'll see what's possible, but I guess it will still be something like
...
LTC_SET_ASN1       (custom, 0, LTC_ASN1_OBJECT_IDENTIFIER, dp.oid, dp.oidlen);
LTC_SET_ASN1_CUSTOM(seq_priv, 2,LTC_ASN1_CL_CONTEXT_SPECIFIC, LTC_ASN1_PC_CONSTRUCTED, 0, &custom[0]);
...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/karel-m,14,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-354322388,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","Ad the ugly ASN1 sequence - it is an invalid DSA signature from wycheproof test suite, ASN.1 parser should simply reject it (BTW the current develop rejects it as expected).
Ad LTC_SET_ASN1_CUSTOM - it make sense to add only if it makes things easier/shorter, I'll try to think it over in more details. Anyway I have switched my EC improvements to the API that is currently available in this PR and it works.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/karel-m,15,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-354506475,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","My quick&dirty hack:
diff --git a/src/ltc/pk/asn1/der/general/der_decode_asn1_length.c b/src/ltc/pk/asn1/der/general/der_decode_asn1_length.c
index 2d40ef0..dc7a5be 100644
--- a/src/ltc/pk/asn1/der/general/der_decode_asn1_length.c
+++ b/src/ltc/pk/asn1/der/general/der_decode_asn1_length.c
@@ -57,6 +57,7 @@ int der_decode_asn1_length(const unsigned char *in, unsigned long *inlen, unsign
          offset += real_len;
       }
    }
+   if (offset + *outlen > *inlen) return CRYPT_BUFFER_OVERFLOW;
    *inlen = offset;

    return CRYPT_OK;
diff --git a/src/ltc/pk/asn1/der/object_identifier/der_decode_object_identifier.c b/src/ltc/pk/asn1/der/object_identifier/der_decode_object_identifier.c
index 530aa91..9f48dbc 100644
--- a/src/ltc/pk/asn1/der/object_identifier/der_decode_object_identifier.c
+++ b/src/ltc/pk/asn1/der/object_identifier/der_decode_object_identifier.c
@@ -56,7 +56,7 @@ int der_decode_object_identifier(const unsigned char *in,    unsigned long  inle
    }
    x += y;

-   if (len < 1 || (len + x) > inlen) {
+   if (len < 1 || len > inlen - x) {
       return CRYPT_INVALID_PACKET;
    }",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/karel-m,16,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-354512737,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","Another ugly sequence (again from wycheproof) of 2 integers + 2 extra zero bytes that should be rejected as CRYPT_INPUT_TOO_LONG; however it is accepted:
0x30,0x45,0x02,0x21,0x00,0xb7,0xba,0xba,0xe9,0x33,0x2b,0x54,0xb8,0xa3,0xa0,0x5b,0x70,0x04,0x57,
0x98,0x21,0xa8,0x87,0xa1,0xb2,0x14,0x65,0xf7,0xdb,0x8a,0x3d,0x49,0x1b,0x39,0xfd,0x2c,0x3f,0x02,
0x20,0x74,0x72,0x91,0xdd,0x2f,0x3f,0x44,0xaf,0x7a,0xce,0x68,0xea,0x33,0x43,0x1d,0x6f,0x94,0xe4,
0x18,0xc1,0x06,0xa6,0xe7,0x62,0x85,0xcd,0x59,0xf4,0x32,0x60,0xec,0xce,0x00,0x00",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,309,2017-10-11T19:16:34Z,2018-02-25T22:34:09Z,2018-02-26T11:56:49Z,MERGED,True,2926,1056,85,https://github.com/karel-m,ECC-step1: ASN.1 changes required for future ECC enhancements,18,"['feature', 'enhancement']",https://github.com/libtom/libtomcrypt/pull/309,https://github.com/karel-m,17,https://github.com/libtom/libtomcrypt/pull/309#issuecomment-354735638,"[edited by @sjaeckel]

 documentation added/updated
 tests added/updated
 add tests for choice with custom-type
 add tests for custom-types with other types
 new/changed file headers fixed/updated
 re-work OID handling will be done later(c.f. #309 (comment))

This breaks backwards compatibility as it removes LTC_ASN1_CONSTRUCTED and LTC_ASN1_CONTEXT_SPECIFIC which were somehow nonsense anyways...
Please review as there's some new code, biggest parts of the der_*_custom_type.c files are c&p from sequence.
If you don't like some of the naming feel free to propose something better!
All comments very welcome!","@sjaeckel please have a look at the der_toolong_test  tests in der_test.c
The new tests are related to CRYPT_INPUT_TOO_LONG scenario which is IMO still not handled correctly.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,310,2017-10-12T15:20:05Z,2017-10-12T17:41:53Z,2017-12-05T17:24:42Z,MERGED,True,1,1,1,https://github.com/karel-m,proper 1.18.0 date in changes,1,[],https://github.com/libtom/libtomcrypt/pull/310,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/310,just cosmetics,just cosmetics,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,310,2017-10-12T15:20:05Z,2017-10-12T17:41:53Z,2017-12-05T17:24:42Z,MERGED,True,1,1,1,https://github.com/karel-m,proper 1.18.0 date in changes,1,[],https://github.com/libtom/libtomcrypt/pull/310,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/310#issuecomment-336188825,just cosmetics,"dammit, again :(",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,310,2017-10-12T15:20:05Z,2017-10-12T17:41:53Z,2017-12-05T17:24:42Z,MERGED,True,1,1,1,https://github.com/karel-m,proper 1.18.0 date in changes,1,[],https://github.com/libtom/libtomcrypt/pull/310,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/310#issuecomment-336190052,just cosmetics,btw changes like that could go directly to develop and can be marked with '[skip ci]',True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,310,2017-10-12T15:20:05Z,2017-10-12T17:41:53Z,2017-12-05T17:24:42Z,MERGED,True,1,1,1,https://github.com/karel-m,proper 1.18.0 date in changes,1,[],https://github.com/libtom/libtomcrypt/pull/310,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/310#issuecomment-336213045,just cosmetics,"What about adding something like:
--- a/makefile_include.mk
+++ b/makefile_include.mk
@@ -458,6 +458,8 @@ zipup: $(call print-help,zipup,Prepare the archives for a release) doc/crypt.pdf
        cp doc/crypt.pdf libtomcrypt-$(VERSION)/doc/crypt.pdf
        tar -c libtomcrypt-$(VERSION)/ | xz -6e -c - > crypt-$(VERSION).tar.xz
        zip -9rq crypt-$(VERSION).zip libtomcrypt-$(VERSION)
+       @echo 'fixme check'
+       -@(find libtomcrypt-$(VERSION)/ -type f | xargs grep 'FIXM[E]') && echo '############## BEWARE: the ""fixme"" marker found !!! ##############'
        rm -rf libtomcrypt-$(VERSION)
        gpg -b -a crypt-$(VERSION).tar.xz
        gpg -b -a crypt-$(VERSION).zip",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,310,2017-10-12T15:20:05Z,2017-10-12T17:41:53Z,2017-12-05T17:24:42Z,MERGED,True,1,1,1,https://github.com/karel-m,proper 1.18.0 date in changes,1,[],https://github.com/libtom/libtomcrypt/pull/310,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/310#issuecomment-336213449,just cosmetics,I thought the same!,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,311,2017-10-12T16:17:42Z,2017-10-18T06:48:14Z,2017-10-18T06:59:23Z,CLOSED,False,237,102,21,https://github.com/sjaeckel,Improve travis build,10,[],https://github.com/libtom/libtomcrypt/pull/311,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/311,Introduce a new meta_build where we build several things in one spin-up of a travis instance,Introduce a new meta_build where we build several things in one spin-up of a travis instance,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,311,2017-10-12T16:17:42Z,2017-10-18T06:48:14Z,2017-10-18T06:59:23Z,CLOSED,False,237,102,21,https://github.com/sjaeckel,Improve travis build,10,[],https://github.com/libtom/libtomcrypt/pull/311,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/311#issuecomment-337477073,Introduce a new meta_build where we build several things in one spin-up of a travis instance,closed? what about meta_builds.sh?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,311,2017-10-12T16:17:42Z,2017-10-18T06:48:14Z,2017-10-18T06:59:23Z,CLOSED,False,237,102,21,https://github.com/sjaeckel,Improve travis build,10,[],https://github.com/libtom/libtomcrypt/pull/311,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/311#issuecomment-337477337,Introduce a new meta_build where we build several things in one spin-up of a travis instance,github closed this when I deleted the base branch and somehow I can't re-open... @github,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,311,2017-10-12T16:17:42Z,2017-10-18T06:48:14Z,2017-10-18T06:59:23Z,CLOSED,False,237,102,21,https://github.com/sjaeckel,Improve travis build,10,[],https://github.com/libtom/libtomcrypt/pull/311,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/311#issuecomment-337478109,Introduce a new meta_build where we build several things in one spin-up of a travis instance,try to rebase on develop locally and push --force,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,311,2017-10-12T16:17:42Z,2017-10-18T06:48:14Z,2017-10-18T06:59:23Z,CLOSED,False,237,102,21,https://github.com/sjaeckel,Improve travis build,10,[],https://github.com/libtom/libtomcrypt/pull/311,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/311#issuecomment-337478512,Introduce a new meta_build where we build several things in one spin-up of a travis instance,did that already (did it now once again) but the reopen button is greyed out,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,312,2017-10-16T16:29:18Z,2017-10-18T05:08:05Z,2017-10-18T05:08:08Z,MERGED,True,449,16,18,https://github.com/karel-m,IDEA cipher,3,[],https://github.com/libtom/libtomcrypt/pull/312,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/312,"Adding the old IDEA cipher
Checklist


 documentation is added or updated
 tests are added or updated","Adding the old IDEA cipher
Checklist


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,312,2017-10-16T16:29:18Z,2017-10-18T05:08:05Z,2017-10-18T05:08:08Z,MERGED,True,449,16,18,https://github.com/karel-m,IDEA cipher,3,[],https://github.com/libtom/libtomcrypt/pull/312,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/312#issuecomment-337049479,"Adding the old IDEA cipher
Checklist


 documentation is added or updated
 tests are added or updated","The other thing is that nowadays it seems to be a better practice to avoid the code where jumps/ifs are decided on the key value (or its part). Here it IMO might mean to find out ""if-less"" version of _MUL macro; however, I am afraid we do not care (yet) too much about this sort of side-channel attacks at a few more places.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,312,2017-10-16T16:29:18Z,2017-10-18T05:08:05Z,2017-10-18T05:08:08Z,MERGED,True,449,16,18,https://github.com/karel-m,IDEA cipher,3,[],https://github.com/libtom/libtomcrypt/pull/312,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/312#issuecomment-337149134,"Adding the old IDEA cipher
Checklist


 documentation is added or updated
 tests are added or updated","nowadays it seems to be a better practice to avoid the code where jumps/ifs are decided on the key value (or its part)

sure, that's to prevent timing analysis ...and if you ever want to dig into that topic we're going to have a hard time I guess... whereas the burn_stack() approach prevents some other function stumbling over some memory that contains (part of) your keys. So I think it's perfectly fine to continue supporting it and we should probably even think about enabling it per default",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,312,2017-10-16T16:29:18Z,2017-10-18T05:08:05Z,2017-10-18T05:08:08Z,MERGED,True,449,16,18,https://github.com/karel-m,IDEA cipher,3,[],https://github.com/libtom/libtomcrypt/pull/312,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/312#issuecomment-337195464,"Adding the old IDEA cipher
Checklist


 documentation is added or updated
 tests are added or updated","...and if you ever want to dig into that topic

well, no 😃",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,312,2017-10-16T16:29:18Z,2017-10-18T05:08:05Z,2017-10-18T05:08:08Z,MERGED,True,449,16,18,https://github.com/karel-m,IDEA cipher,3,[],https://github.com/libtom/libtomcrypt/pull/312,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/312#issuecomment-337203354,"Adding the old IDEA cipher
Checklist


 documentation is added or updated
 tests are added or updated","that way you can use burn_stack everywhere without littering all the code with ugly ifdefs, and have the ifdef contained in a single place only.

sounds like a good idea, probably #7 is a good task where we can look into that!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,314,2017-10-18T05:10:40Z,2017-10-18T15:24:18Z,2017-12-05T17:24:42Z,MERGED,True,1199,29,21,https://github.com/karel-m,Serpent cipher,4,[],https://github.com/libtom/libtomcrypt/pull/314,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/314,"Another retro cipher
Checklist

 documentation is added or updated
 tests are added or updated","Another retro cipher
Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,315,2017-10-18T07:12:19Z,2017-10-20T13:44:42Z,2017-10-20T13:44:45Z,MERGED,True,233,103,14,https://github.com/sjaeckel,Improve/travis build,14,[],https://github.com/libtom/libtomcrypt/pull/315,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/315,Follow-up of #311,Follow-up of #311,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,315,2017-10-18T07:12:19Z,2017-10-20T13:44:42Z,2017-10-20T13:44:45Z,MERGED,True,233,103,14,https://github.com/sjaeckel,Improve/travis build,14,[],https://github.com/libtom/libtomcrypt/pull/315,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/315#issuecomment-337629158,Follow-up of #311,What about moving travis-ci related scripts to ./ci/*.sh subdir or rename them like ci_*.sh?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,316,2017-10-18T20:38:08Z,2017-10-19T05:29:06Z,2017-12-05T17:24:42Z,MERGED,True,19,14,4,https://github.com/karel-m,register_all_* should return CRYPT_OK on success,1,[],https://github.com/libtom/libtomcrypt/pull/316,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/316,"TODO:

there seems to be no documentation for register_all_ciphers, register_all_hashes and register_all_prngs","TODO:

there seems to be no documentation for register_all_ciphers, register_all_hashes and register_all_prngs",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,317,2017-10-19T15:47:36Z,2017-10-22T09:04:41Z,2017-12-05T17:24:42Z,MERGED,True,444,76,14,https://github.com/karel-m,Base32,4,[],https://github.com/libtom/libtomcrypt/pull/317,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/317,"Checklist

 documentation is added or updated
 tests are added or updated","Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,318,2017-10-21T03:40:06Z,2017-10-24T20:28:55Z,2017-12-05T17:24:42Z,MERGED,True,497,6,18,https://github.com/buggywhip,Add salsa20,5,[],https://github.com/libtom/libtomcrypt/pull/318,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/318,"Checklist


 documentation is added or updated
 tests are added or updated  (will be added soon)","Checklist


 documentation is added or updated
 tests are added or updated  (will be added soon)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,318,2017-10-21T03:40:06Z,2017-10-24T20:28:55Z,2017-12-05T17:24:42Z,MERGED,True,497,6,18,https://github.com/buggywhip,Add salsa20,5,[],https://github.com/libtom/libtomcrypt/pull/318,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/318#issuecomment-338607645,"Checklist


 documentation is added or updated
 tests are added or updated  (will be added soon)","Looks good, I would only add a simple test case for salsa20_keystream to salsa20_test() (with other stream ciphers we do not test ""keystream"" functions as they are called during prngs tests).
According to my testing it passes all test vectors from:

http://www.ecrypt.eu.org/stream/svn/viewcvs.cgi/ecrypt/trunk/submissions/salsa20/reduced/12-rounds/verified.test-vectors?rev=161&view=markup
http://www.ecrypt.eu.org/stream/svn/viewcvs.cgi/ecrypt/trunk/submissions/salsa20/reduced/8-rounds/verified.test-vectors?rev=161&view=markup
http://www.ecrypt.eu.org/stream/svn/viewcvs.cgi/ecrypt/trunk/submissions/salsa20/full/verified.test-vectors?rev=161&view=markup",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,318,2017-10-21T03:40:06Z,2017-10-24T20:28:55Z,2017-12-05T17:24:42Z,MERGED,True,497,6,18,https://github.com/buggywhip,Add salsa20,5,[],https://github.com/libtom/libtomcrypt/pull/318,https://github.com/rofl0r,3,https://github.com/libtom/libtomcrypt/pull/318#issuecomment-338610064,"Checklist


 documentation is added or updated
 tests are added or updated  (will be added soon)","not that my opinion matters, though in most projects people would try to refactor their commits so each one encapsulates a logic change, while at the same trying to produce meaningful commit messages. so in the end, you could read the commit history like a good book, well explaining why things are as they are. a good example for such practice is https://git.musl-libc.org/cgit/musl/log/",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,318,2017-10-21T03:40:06Z,2017-10-24T20:28:55Z,2017-12-05T17:24:42Z,MERGED,True,497,6,18,https://github.com/buggywhip,Add salsa20,5,[],https://github.com/libtom/libtomcrypt/pull/318,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/318#issuecomment-338648009,"Checklist


 documentation is added or updated
 tests are added or updated  (will be added soon)","Good point, try git rebase develop -i and squash all commits into one (or two)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,319,2017-10-25T14:01:08Z,,2021-04-10T12:26:34Z,OPEN,False,563,88,14,https://github.com/sjaeckel,[PoC/RFC] Add SIV,4,['feature'],https://github.com/libtom/libtomcrypt/pull/319,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/319,"Checklist


 documentation is added or updated
 tests are added or updated

This is a PoC/RFC for adding the enc+auth mode RFC5297 SIV - Synthetic Initialization Vector.
Feel free to tear it apart, improvements on the API welcome.
I had to decide how to process the AD's

incremental
by passing a vararg
by passing an array of pointers

1 wasn't really an option AFAIU the RFC
whether 2 or 3 I was like ¯\_(ツ)_/¯ so I went for 3
I didn't really look if it would make sense to have the context exposed so we could split the processing up in init()->add_ad()->{en,de}crypt()->done()","Checklist


 documentation is added or updated
 tests are added or updated

This is a PoC/RFC for adding the enc+auth mode RFC5297 SIV - Synthetic Initialization Vector.
Feel free to tear it apart, improvements on the API welcome.
I had to decide how to process the AD's

incremental
by passing a vararg
by passing an array of pointers

1 wasn't really an option AFAIU the RFC
whether 2 or 3 I was like ¯\_(ツ)_/¯ so I went for 3
I didn't really look if it would make sense to have the context exposed so we could split the processing up in init()->add_ad()->{en,de}crypt()->done()",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,319,2017-10-25T14:01:08Z,,2021-04-10T12:26:34Z,OPEN,False,563,88,14,https://github.com/sjaeckel,[PoC/RFC] Add SIV,4,['feature'],https://github.com/libtom/libtomcrypt/pull/319,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/319#issuecomment-339362633,"Checklist


 documentation is added or updated
 tests are added or updated

This is a PoC/RFC for adding the enc+auth mode RFC5297 SIV - Synthetic Initialization Vector.
Feel free to tear it apart, improvements on the API welcome.
I had to decide how to process the AD's

incremental
by passing a vararg
by passing an array of pointers

1 wasn't really an option AFAIU the RFC
whether 2 or 3 I was like ¯\_(ツ)_/¯ so I went for 3
I didn't really look if it would make sense to have the context exposed so we could split the processing up in init()->add_ad()->{en,de}crypt()->done()","Does this enable implementation of AES-GCM-SIV?
https://tools.ietf.org/html/draft-irtf-cfrg-gcmsiv-06",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,319,2017-10-25T14:01:08Z,,2021-04-10T12:26:34Z,OPEN,False,563,88,14,https://github.com/sjaeckel,[PoC/RFC] Add SIV,4,['feature'],https://github.com/libtom/libtomcrypt/pull/319,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/319#issuecomment-339370578,"Checklist


 documentation is added or updated
 tests are added or updated

This is a PoC/RFC for adding the enc+auth mode RFC5297 SIV - Synthetic Initialization Vector.
Feel free to tear it apart, improvements on the API welcome.
I had to decide how to process the AD's

incremental
by passing a vararg
by passing an array of pointers

1 wasn't really an option AFAIU the RFC
whether 2 or 3 I was like ¯\_(ツ)_/¯ so I went for 3
I didn't really look if it would make sense to have the context exposed so we could split the processing up in init()->add_ad()->{en,de}crypt()->done()","I haven't looked at that draft yet but this PR implements the ""predecessor""",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,319,2017-10-25T14:01:08Z,,2021-04-10T12:26:34Z,OPEN,False,563,88,14,https://github.com/sjaeckel,[PoC/RFC] Add SIV,4,['feature'],https://github.com/libtom/libtomcrypt/pull/319,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/319#issuecomment-339411544,"Checklist


 documentation is added or updated
 tests are added or updated

This is a PoC/RFC for adding the enc+auth mode RFC5297 SIV - Synthetic Initialization Vector.
Feel free to tear it apart, improvements on the API welcome.
I had to decide how to process the AD's

incremental
by passing a vararg
by passing an array of pointers

1 wasn't really an option AFAIU the RFC
whether 2 or 3 I was like ¯\_(ツ)_/¯ so I went for 3
I didn't really look if it would make sense to have the context exposed so we could split the processing up in init()->add_ad()->{en,de}crypt()->done()",I've read a bit through the ML and I think we should wait until the RFC is finished to prevent something like #256.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,319,2017-10-25T14:01:08Z,,2021-04-10T12:26:34Z,OPEN,False,563,88,14,https://github.com/sjaeckel,[PoC/RFC] Add SIV,4,['feature'],https://github.com/libtom/libtomcrypt/pull/319,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/319#issuecomment-342004534,"Checklist


 documentation is added or updated
 tests are added or updated

This is a PoC/RFC for adding the enc+auth mode RFC5297 SIV - Synthetic Initialization Vector.
Feel free to tear it apart, improvements on the API welcome.
I had to decide how to process the AD's

incremental
by passing a vararg
by passing an array of pointers

1 wasn't really an option AFAIU the RFC
whether 2 or 3 I was like ¯\_(ツ)_/¯ so I went for 3
I didn't really look if it would make sense to have the context exposed so we could split the processing up in init()->add_ad()->{en,de}crypt()->done()","Okay I played a bit with the implementation and I'm going to add an incremental add_AD() function.
Also there should be a siv_memory() function which has to support multiple AD's in one function call. I think I'll go the varargs way for that as it's already used as a pattern in the library whereas the array of pointers isn't. Any better ideas?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,319,2017-10-25T14:01:08Z,,2021-04-10T12:26:34Z,OPEN,False,563,88,14,https://github.com/sjaeckel,[PoC/RFC] Add SIV,4,['feature'],https://github.com/libtom/libtomcrypt/pull/319,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/319#issuecomment-342005549,"Checklist


 documentation is added or updated
 tests are added or updated

This is a PoC/RFC for adding the enc+auth mode RFC5297 SIV - Synthetic Initialization Vector.
Feel free to tear it apart, improvements on the API welcome.
I had to decide how to process the AD's

incremental
by passing a vararg
by passing an array of pointers

1 wasn't really an option AFAIU the RFC
whether 2 or 3 I was like ¯\_(ツ)_/¯ so I went for 3
I didn't really look if it would make sense to have the context exposed so we could split the processing up in init()->add_ad()->{en,de}crypt()->done()",Just FYI - there is a bunch of AES-GCM-SIV test vectors in wycheproof test suite (look for aes_gcm_siv_test.json).,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,319,2017-10-25T14:01:08Z,,2021-04-10T12:26:34Z,OPEN,False,563,88,14,https://github.com/sjaeckel,[PoC/RFC] Add SIV,4,['feature'],https://github.com/libtom/libtomcrypt/pull/319,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/319#issuecomment-342312308,"Checklist


 documentation is added or updated
 tests are added or updated

This is a PoC/RFC for adding the enc+auth mode RFC5297 SIV - Synthetic Initialization Vector.
Feel free to tear it apart, improvements on the API welcome.
I had to decide how to process the AD's

incremental
by passing a vararg
by passing an array of pointers

1 wasn't really an option AFAIU the RFC
whether 2 or 3 I was like ¯\_(ツ)_/¯ so I went for 3
I didn't really look if it would make sense to have the context exposed so we could split the processing up in init()->add_ad()->{en,de}crypt()->done()","ust FYI - there is a bunch of AES-GCM-SIV test vectors in wycheproof test suite

thanks, but they don't help me now as this is only AES-SIV :)
I found those:
https://github.com/randombit/botan/blob/master/src/tests/data/aead/siv.vec
https://github.com/cryptomator/siv-mode/blob/master/src/test/resources/testcases.txt (attention, the file has 17mb ... you probably shouldn't click on the link ;) )
and I planned to hand-pick some of the cryptomator/siv-mode",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,319,2017-10-25T14:01:08Z,,2021-04-10T12:26:34Z,OPEN,False,563,88,14,https://github.com/sjaeckel,[PoC/RFC] Add SIV,4,['feature'],https://github.com/libtom/libtomcrypt/pull/319,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/319#issuecomment-817128803,"Checklist


 documentation is added or updated
 tests are added or updated

This is a PoC/RFC for adding the enc+auth mode RFC5297 SIV - Synthetic Initialization Vector.
Feel free to tear it apart, improvements on the API welcome.
I had to decide how to process the AD's

incremental
by passing a vararg
by passing an array of pointers

1 wasn't really an option AFAIU the RFC
whether 2 or 3 I was like ¯\_(ツ)_/¯ so I went for 3
I didn't really look if it would make sense to have the context exposed so we could split the processing up in init()->add_ad()->{en,de}crypt()->done()","Now exists as RFC8452 (April 2019):

AES-GCM-SIV: Nonce Misuse-Resistant Authenticated Encryption
https://tools.ietf.org/html/rfc8452",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,320,2017-11-01T14:31:29Z,2017-11-03T16:01:52Z,2017-12-05T17:24:43Z,MERGED,True,0,3,1,https://github.com/diamondo25,Remove duplicate prototypes,1,[],https://github.com/libtom/libtomcrypt/pull/320,https://github.com/diamondo25,1,https://github.com/libtom/libtomcrypt/pull/320,"Compiler started complaining about double definitions, so I removed those.","Compiler started complaining about double definitions, so I removed those.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,321,2017-11-01T14:36:49Z,2017-11-03T16:08:31Z,2017-11-03T16:08:31Z,CLOSED,False,1,1,1,https://github.com/diamondo25,Fix LTC_TEST_DBG not defined warning (-Wundef),1,[],https://github.com/libtom/libtomcrypt/pull/321,https://github.com/diamondo25,1,https://github.com/libtom/libtomcrypt/pull/321,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,321,2017-11-01T14:36:49Z,2017-11-03T16:08:31Z,2017-11-03T16:08:31Z,CLOSED,False,1,1,1,https://github.com/diamondo25,Fix LTC_TEST_DBG not defined warning (-Wundef),1,[],https://github.com/libtom/libtomcrypt/pull/321,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/321#issuecomment-341338926,,"Could you please also fix in this PR the following issue in demos/*.c related to -Wundef?
-#if _POSIX_C_SOURCE >= 200112L
+#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE >= 200112L
It is on 3 places.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,321,2017-11-01T14:36:49Z,2017-11-03T16:08:31Z,2017-11-03T16:08:31Z,CLOSED,False,1,1,1,https://github.com/diamondo25,Fix LTC_TEST_DBG not defined warning (-Wundef),1,[],https://github.com/libtom/libtomcrypt/pull/321,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/321#issuecomment-341749441,,merged,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,322,2017-11-02T21:56:48Z,2017-11-20T22:35:56Z,2017-12-04T02:44:25Z,MERGED,True,1015,9,14,https://github.com/buggywhip,add sosemanuk,2,['feature'],https://github.com/libtom/libtomcrypt/pull/322,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/322,"Checklist


 documentation is added or updated
 tests are added or updated","Checklist


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,322,2017-11-02T21:56:48Z,2017-11-20T22:35:56Z,2017-12-04T02:44:25Z,MERGED,True,1015,9,14,https://github.com/buggywhip,add sosemanuk,2,['feature'],https://github.com/libtom/libtomcrypt/pull/322,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/322#issuecomment-341821785,"Checklist


 documentation is added or updated
 tests are added or updated","Larry, here is my re-definition of LTC_INLINE which should work also with your code:
#if defined(__GNUC__) || defined(__xlc__)
   #define LTC_INLINE __inline__
#elif defined(_MSC_VER) || defined(__HP_cc)
   #define LTC_INLINE __inline
#elif defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
   #define LTC_INLINE inline
#else
   #define LTC_INLINE
#endif
It should replace current LTC_INLINE in tomcrypt_cfg.h.
Tested with: gcc (v 3.x-7.x, also with -std=c90), clang, MSVC, IBM xlc (AIX), HP cc (HP-UX).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,322,2017-11-02T21:56:48Z,2017-11-20T22:35:56Z,2017-12-04T02:44:25Z,MERGED,True,1015,9,14,https://github.com/buggywhip,add sosemanuk,2,['feature'],https://github.com/libtom/libtomcrypt/pull/322,https://github.com/buggywhip,3,https://github.com/libtom/libtomcrypt/pull/322#issuecomment-342002754,"Checklist


 documentation is added or updated
 tests are added or updated","On 5Nov, 2017, at 10:49 AM, karel-m ***@***.***> wrote:

 If IV is not required we can either allow ""not calling"" sosemanuk_setiv or we have to check in sosemanuk_crypt that sosemanuk_setiv was called.

Instead, consider...

I defined Sosemanuk in my Python wrapper as a class so this is easy, but the following behavior can be emulated in C with a flag in the context/state.

I allow you to pass in the key and the IV during setup(), actually, when you instantiate an instance.  If you fail to pass an IV, I default to 0.  As the final step in setup(), I call the method setiv().  If you want to call setiv() separately you may.

If you want to reuse the key/instance for a subsequent crypt you should call setiv().  If you call setiv() without an argument, again I default to 0.

I'd like to suggest such for LTC and be applied to all the streams.  ...and perhaps to the blocks later.  ...with RC4 being a special case.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,322,2017-11-02T21:56:48Z,2017-11-20T22:35:56Z,2017-12-04T02:44:25Z,MERGED,True,1015,9,14,https://github.com/buggywhip,add sosemanuk,2,['feature'],https://github.com/libtom/libtomcrypt/pull/322,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/322#issuecomment-342005338,"Checklist


 documentation is added or updated
 tests are added or updated","I think that the following is a quite simple approach similar to what we do in salsa20_*:

in sosemanuk_setup set ss->ptr = NULL
the proper value of ss->ptr is set during sosemanuk_setiv
in sosemanuk_crypt check  LTC_ARGCHK(ss->ptr != NULL)

As you probably know I am not convinced that a unified API for stream ciphers will give us some benefits. You are trying to unify API for ciphers - without IV, with IV, with IV+counter, some have rounds parameter etc. - which might make sense on higher level (like your python bindings or my perl bindings) but it can still be quite easily implemented with our current ltc interface.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,322,2017-11-02T21:56:48Z,2017-11-20T22:35:56Z,2017-12-04T02:44:25Z,MERGED,True,1015,9,14,https://github.com/buggywhip,add sosemanuk,2,['feature'],https://github.com/libtom/libtomcrypt/pull/322,https://github.com/buggywhip,5,https://github.com/libtom/libtomcrypt/pull/322#issuecomment-342008175,"Checklist


 documentation is added or updated
 tests are added or updated","On 5Nov, 2017, at 3:21 AM, karel-m ***@***.***> wrote:

 @karel-m commented on this pull request.

 In src/stream/sosemanuk/sosemanuk.c <#322 (comment)>:

 > +    } while (0)
 +
 +    /*
 +     * Last Serpent round. Contrary to the ""true"" Serpent, we keep
 +     * the linear transformation for that last round.
 +     */
 +#define FSF(zc, S, i0, i1, i2, i3, i4, o0, o1, o2, o3)  do { \
 +        KA(zc, r ## i0, r ## i1, r ## i2, r ## i3); \
 +        S(r ## i0, r ## i1, r ## i2, r ## i3, r ## i4); \
 +        SERPENT_LT(r ## o0, r ## o1, r ## o2, r ## o3); \
 +        KA(zc + 4, r ## o0, r ## o1, r ## o2, r ## o3); \
 +    } while (0)
 +
 +    ulong32 r0, r1, r2, r3, r4;
 +    unsigned char ivtmp[16];
 +
    LTC_ARGCHK(ss != NULL);
    LTC_ARGCHK(iv != NULL);
    LTC_ARGCHK(iv_len > 0); // or not?
The Sosemanuk spec calls for an IV of 128 bits; the spec is silent on other sizes.  The eSTREAM reference implementation truncates the IV if longer than 16 bytes and pads with nulls out to 16.

I can accept padding to 16 if something short was submitted but am uncomfortable with truncating.  It could be the tip of a larger problem.  Thus I submit...

    LTC_ARGCHK(ss != NULL);
    LTC_ARGCHK(iv != NULL);
    LTC_ARGCHK(iv_len > 0 && iv_len <= 16);

and

    if (iv_len >= sizeof(ivtmp)) {
        XMEMCPY(ivtmp, iv, sizeof(ivtmp));
    } else {
        if (iv_len > 0)
            XMEMCPY(ivtmp, iv, iv_len);
        XMEMSET(ivtmp + iv_len, 0, (sizeof(ivtmp)) - iv_len);
    }

becomes simply

    XMEMCPY(ivtmp, iv, iv_len);
    XMEMSET(ivtmp + iv_len, 0, (sizeof(ivtmp)) - iv_len);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/TrinityCoder,1,https://github.com/libtom/libtomcrypt/pull/324,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-343164742,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","There's a huge bunch of functions that could use a const*, probably @fperrad can create a list from its linter?
I guess this could be the start of tackling the API improvements :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-343253703,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","I agree that we should handle this consistently at least over all rsa_*, ecc_*, dh_*, dsa_*",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/fperrad,4,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-343274120,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","Here a first list (151 items).
Note: this kind of work is incremental, when the first founds are fixed, the linter could find the next ones.
src/pk/dh/dh_shared_secret.c  74  Info 818: Pointer parameter 'private_key' (line 22) could be declared as pointing to const
src/pk/dh/dh.c  231  Info 818: Pointer parameter 'key' (line 227) could be declared as pointing to const
src/pk/dh/dh_export.c  56  Info 818: Pointer parameter 'key' (line 22) could be declared as pointing to const
src/pk/dh/dh_export_key.c  41  Info 818: Pointer parameter 'key' (line 22) could be declared as pointing to const
src/pk/dh/dh_check_pubkey.c  59  Info 818: Pointer parameter 'key' (line 19) could be declared as pointing to const
src/pk/rsa/rsa_export.c  91  Info 818: Pointer parameter 'key' (line 26) could be declared as pointing to const
src/pk/rsa/rsa_exptmod.c  176  Info 818: Pointer parameter 'key' (line 31) could be declared as pointing to const
src/pk/rsa/rsa_get_size.c  34  Info 818: Pointer parameter 'key' (line 23) could be declared as pointing to const
src/pk/asn1/der/object_identifier/der_length_object_identifier.c  81  Info 818: Pointer parameter 'words' (line 38) could be declared as pointing to const
src/pk/asn1/der/generalizedtime/der_length_generalizedtime.c  52  Info 818: Pointer parameter 'gtime' (line 25) could be declared as pointing to const
src/pk/asn1/der/sequence/der_length_sequence.c  187  Info 818: Pointer parameter 'list' (line 31) could be declared as pointing to const
src/pk/asn1/der/utctime/der_length_utctime.c  38  Info 818: Pointer parameter 'utctime' (line 24) could be declared as pointing to const
src/pk/asn1/der/set/der_encode_set.c  101  Info 818: Pointer parameter 'list' (line 72) could be declared as pointing to const
src/pk/ecc/ecc_free.c  32  Info 818: Pointer parameter 'key' (line 28) could be declared as pointing to const
src/pk/ecc/ecc_sign_hash.c  126  Info 818: Pointer parameter 'key' (line 21) could be declared as pointing to const
src/pk/ecc/ltc_ecc_projective_dbl_point.c  140  Info 818: Pointer parameter 'P' (line 32) could be declared as pointing to const
src/pk/ecc/ltc_ecc_projective_dbl_point.c  140  Info 818: Pointer parameter 'R' (line 32) could be declared as pointing to const
src/pk/ecc/ecc_import.c  70  Info 818: Pointer parameter 'key' (line 24) could be declared as pointing to const
src/pk/ecc/ecc_ansi_x963_export.c  71  Info 818: Pointer parameter 'key' (line 30) could be declared as pointing to const
src/pk/ecc/ecc_ansi_x963_import.c  96  Info 818: Pointer parameter 'dp' (line 34) could be declared as pointing to const
src/pk/ecc/ltc_ecc_mulmod_timing.c  156  Info 818: Pointer parameter 'G' (line 35) could be declared as pointing to const
src/pk/ecc/ltc_ecc_projective_add_point.c  187  Info 818: Pointer parameter 'Q' (line 33) could be declared as pointing to const
src/pk/ecc/ecc_export.c  74  Info 818: Pointer parameter 'key' (line 32) could be declared as pointing to const
src/pk/ecc/ltc_ecc_map.c  67  Info 818: Pointer parameter 'P' (line 31) could be declared as pointing to const
src/pk/ecc/ecc_verify_hash.c  160  Info 818: Pointer parameter 'key' (line 21) could be declared as pointing to const
src/pk/ecc/ecc_get_size.c  36  Info 818: Pointer parameter 'key' (line 29) could be declared as pointing to const
src/pk/ecc/ltc_ecc_mul2add.c  199  Info 818: Pointer parameter 'A' (line 35) could be declared as pointing to const
src/pk/ecc/ltc_ecc_mul2add.c  199  Info 818: Pointer parameter 'B' (line 36) could be declared as pointing to const
src/pk/ecc/ecc_shared_secret.c  87  Info 818: Pointer parameter 'private_key' (line 32) could be declared as pointing to const
src/pk/dsa/dsa_sign_hash.c  105  Info 818: Pointer parameter 'key' (line 31) could be declared as pointing to const
src/pk/dsa/dsa_verify_key.c  95  Info 818: Pointer parameter 'key' (line 50) could be declared as pointing to const
src/pk/dsa/dsa_verify_key.c  130  Info 818: Pointer parameter 'key' (line 104) could be declared as pointing to const
src/pk/dsa/dsa_verify_key.c  193  Info 818: Pointer parameter 'key' (line 139) could be declared as pointing to const
src/pk/dsa/dsa_export.c  109  Info 818: Pointer parameter 'key' (line 26) could be declared as pointing to const
src/pk/dsa/dsa_shared_secret.c  64  Info 818: Pointer parameter 'public_key' (line 28) could be declared as pointing to const
src/pk/dsa/dsa_verify_hash.c  83  Info 818: Pointer parameter 'key' (line 31) could be declared as pointing to const
src/modes/cbc/cbc_getiv.c  38  Info 818: Pointer parameter 'cbc' (line 25) could be declared as pointing to const
src/modes/lrw/lrw_getiv.c  38  Info 818: Pointer parameter 'lrw' (line 25) could be declared as pointing to const
src/modes/ctr/ctr_getiv.c  38  Info 818: Pointer parameter 'ctr' (line 25) could be declared as pointing to const
src/modes/cfb/cfb_getiv.c  38  Info 818: Pointer parameter 'cfb' (line 25) could be declared as pointing to const
src/modes/xts/xts_test.c  39  Info 818: Pointer parameter 'skey1' (line 15) could be declared as pointing to const
src/modes/xts/xts_test.c  39  Info 818: Pointer parameter 'skey2' (line 15) could be declared as pointing to const
src/modes/xts/xts_test.c  66  Info 818: Pointer parameter 'skey1' (line 42) could be declared as pointing to const
src/modes/xts/xts_test.c  66  Info 818: Pointer parameter 'skey2' (line 42) could be declared as pointing to const
src/modes/f8/f8_getiv.c  38  Info 818: Pointer parameter 'f8' (line 25) could be declared as pointing to const
src/modes/ofb/ofb_getiv.c  38  Info 818: Pointer parameter 'ofb' (line 25) could be declared as pointing to const
src/hashes/sha3.c  300  Info 818: Pointer parameter 'outlen' (line 289) could be declared as pointing to const
src/hashes/md5.c  214  Info 818: Pointer parameter 'buf' (line 101) could be declared as pointing to const
src/hashes/chc/chc.c  154  Info 818: Pointer parameter 'buf' (line 130) could be declared as pointing to const
src/hashes/rmd128.c  253  Info 818: Pointer parameter 'buf' (line 84) could be declared as pointing to const
src/hashes/rmd256.c  262  Info 818: Pointer parameter 'buf' (line 78) could be declared as pointing to const
src/hashes/whirl/whirl.c  108  Info 818: Pointer parameter 'buf' (line 58) could be declared as pointing to const
src/hashes/sha2/sha512.c  155  Info 818: Pointer parameter 'buf' (line 94) could be declared as pointing to const
src/hashes/sha2/sha256.c  187  Info 818: Pointer parameter 'buf' (line 69) could be declared as pointing to const
src/hashes/rmd320.c  325  Info 818: Pointer parameter 'buf' (line 99) could be declared as pointing to const
src/hashes/sha1.c  146  Info 818: Pointer parameter 'buf' (line 45) could be declared as pointing to const
src/hashes/md4.c  155  Info 818: Pointer parameter 'buf' (line 76) could be declared as pointing to const
src/hashes/tiger.c  587  Info 818: Pointer parameter 'x' (line 577) could be declared as pointing to const
src/hashes/tiger.c  639  Info 818: Pointer parameter 'buf' (line 613) could be declared as pointing to const
src/hashes/rmd160.c  311  Info 818: Pointer parameter 'buf' (line 104) could be declared as pointing to const
src/stream/sober128/sober128_stream.c  36  Info 818: Pointer parameter 'b' (line 31) could be declared as pointing to const
src/stream/sober128/sober128_stream.c  86  Info 818: Pointer parameter 'c' (line 81) could be declared as pointing to const
src/prngs/fortuna.c  395  Info 818: Pointer parameter 'prng' (line 331) could be declared as pointing to const
src/math/ltm_desc.c  71  Info 818: Pointer parameter 'a' (line 66) could be declared as pointing to const
src/math/ltm_desc.c  78  Info 818: Pointer parameter 'a' (line 73) could be declared as pointing to const
src/math/ltm_desc.c  99  Info 818: Pointer parameter 'a' (line 95) could be declared as pointing to const
src/math/ltm_desc.c  129  Info 818: Pointer parameter 'a' (line 117) could be declared as pointing to const
src/math/ltm_desc.c  129  Info 818: Pointer parameter 'b' (line 117) could be declared as pointing to const
src/math/ltm_desc.c  142  Info 818: Pointer parameter 'a' (line 131) could be declared as pointing to const
src/math/ltm_desc.c  148  Info 818: Pointer parameter 'a' (line 144) could be declared as pointing to const
src/math/ltm_desc.c  154  Info 818: Pointer parameter 'a' (line 150) could be declared as pointing to const
src/math/ltm_desc.c  179  Info 818: Pointer parameter 'a' (line 174) could be declared as pointing to const
src/math/ltm_desc.c  186  Info 818: Pointer parameter 'a' (line 182) could be declared as pointing to const
src/math/ltm_desc.c  194  Info 818: Pointer parameter 'a' (line 189) could be declared as pointing to const
src/math/ltm_desc.c  202  Info 818: Pointer parameter 'b' (line 197) could be declared as pointing to const
src/math/ltm_desc.c  211  Info 818: Pointer parameter 'a' (line 205) could be declared as pointing to const
src/math/ltm_desc.c  211  Info 818: Pointer parameter 'b' (line 205) could be declared as pointing to const
src/math/ltm_desc.c  218  Info 818: Pointer parameter 'a' (line 213) could be declared as pointing to const
src/math/ltm_desc.c  227  Info 818: Pointer parameter 'a' (line 221) could be declared as pointing to const
src/math/ltm_desc.c  227  Info 818: Pointer parameter 'b' (line 221) could be declared as pointing to const
src/math/ltm_desc.c  234  Info 818: Pointer parameter 'a' (line 229) could be declared as pointing to const
src/math/ltm_desc.c  243  Info 818: Pointer parameter 'a' (line 237) could be declared as pointing to const
src/math/ltm_desc.c  243  Info 818: Pointer parameter 'b' (line 237) could be declared as pointing to const
src/math/ltm_desc.c  250  Info 818: Pointer parameter 'a' (line 245) could be declared as pointing to const
src/math/ltm_desc.c  258  Info 818: Pointer parameter 'a' (line 253) could be declared as pointing to const
src/math/ltm_desc.c  266  Info 818: Pointer parameter 'a' (line 261) could be declared as pointing to const
src/math/ltm_desc.c  266  Info 818: Pointer parameter 'b' (line 261) could be declared as pointing to const
src/math/ltm_desc.c  273  Info 818: Pointer parameter 'a' (line 268) could be declared as pointing to const
src/math/ltm_desc.c  289  Info 818: Pointer parameter 'a' (line 276) could be declared as pointing to const
src/math/ltm_desc.c  298  Info 818: Pointer parameter 'a' (line 292) could be declared as pointing to const
src/math/ltm_desc.c  298  Info 818: Pointer parameter 'b' (line 292) could be declared as pointing to const
src/math/ltm_desc.c  307  Info 818: Pointer parameter 'a' (line 301) could be declared as pointing to const
src/math/ltm_desc.c  307  Info 818: Pointer parameter 'b' (line 301) could be declared as pointing to const
src/math/ltm_desc.c  316  Info 818: Pointer parameter 'a' (line 309) could be declared as pointing to const
src/math/ltm_desc.c  316  Info 818: Pointer parameter 'b' (line 309) could be declared as pointing to const
src/math/ltm_desc.c  316  Info 818: Pointer parameter 'c' (line 309) could be declared as pointing to const
src/math/ltm_desc.c  325  Info 818: Pointer parameter 'a' (line 318) could be declared as pointing to const
src/math/ltm_desc.c  325  Info 818: Pointer parameter 'b' (line 318) could be declared as pointing to const
src/math/ltm_desc.c  325  Info 818: Pointer parameter 'c' (line 318) could be declared as pointing to const
src/math/ltm_desc.c  334  Info 818: Pointer parameter 'a' (line 327) could be declared as pointing to const
src/math/ltm_desc.c  334  Info 818: Pointer parameter 'b' (line 327) could be declared as pointing to const
src/math/ltm_desc.c  334  Info 818: Pointer parameter 'c' (line 327) could be declared as pointing to const
src/math/ltm_desc.c  342  Info 818: Pointer parameter 'a' (line 336) could be declared as pointing to const
src/math/ltm_desc.c  342  Info 818: Pointer parameter 'b' (line 336) could be declared as pointing to const
src/math/ltm_desc.c  351  Info 818: Pointer parameter 'a' (line 345) could be declared as pointing to const
src/math/ltm_desc.c  351  Info 818: Pointer parameter 'b' (line 345) could be declared as pointing to const
src/math/ltm_desc.c  367  Info 818: Pointer parameter 'a' (line 354) could be declared as pointing to const
src/math/ltm_desc.c  375  Info 818: Pointer parameter 'b' (line 370) could be declared as pointing to const
src/math/ltm_desc.c  384  Info 818: Pointer parameter 'b' (line 378) could be declared as pointing to const
src/math/ltm_desc.c  384  Info 818: Pointer parameter 'c' (line 378) could be declared as pointing to const
src/math/ltm_desc.c  399  Info 818: Pointer parameter 'a' (line 392) could be declared as pointing to const
src/math/ltm_desc.c  399  Info 818: Pointer parameter 'b' (line 392) could be declared as pointing to const
src/math/ltm_desc.c  399  Info 818: Pointer parameter 'c' (line 392) could be declared as pointing to const
src/math/ltm_desc.c  412  Info 818: Pointer parameter 'a' (line 401) could be declared as pointing to const
src/ciphers/kasumi.c  121  Info 818: Pointer parameter 'key' (line 99) could be declared as pointing to const
src/ciphers/kasumi.c  137  Info 818: Pointer parameter 'key' (line 123) could be declared as pointing to const
src/ciphers/cast5.c  571  Info 818: Pointer parameter 'skey' (line 539) could be declared as pointing to const
src/ciphers/cast5.c  625  Info 818: Pointer parameter 'skey' (line 592) could be declared as pointing to const
src/ciphers/camellia.c  206  Info 818: Pointer parameter 'in' (line 196) could be declared as pointing to const
src/ciphers/camellia.c  531  Info 818: Pointer parameter 'skey' (line 439) could be declared as pointing to const
src/ciphers/camellia.c  626  Info 818: Pointer parameter 'skey' (line 533) could be declared as pointing to const
src/ciphers/serpent.c  531  Info 818: Pointer parameter 'k' (line 491) could be declared as pointing to const
src/ciphers/serpent.c  572  Info 818: Pointer parameter 'k' (line 533) could be declared as pointing to const
src/ciphers/twofish/twofish.c  268  Info 818: Pointer parameter 'M' (line 240) could be declared as pointing to const
src/ciphers/idea.c  145  Info 818: Pointer parameter 'm_key' (line 107) could be declared as pointing to const
src/ciphers/des.c  1607  Info 818: Pointer parameter 'skey' (line 1595) could be declared as pointing to const
src/ciphers/des.c  1628  Info 818: Pointer parameter 'skey' (line 1616) could be declared as pointing to const
src/ciphers/des.c  1652  Info 818: Pointer parameter 'skey' (line 1637) could be declared as pointing to const
src/ciphers/des.c  1675  Info 818: Pointer parameter 'skey' (line 1661) could be declared as pointing to const
src/ciphers/skipjack.c  120  Info 818: Pointer parameter 'key' (line 110) could be declared as pointing to const
src/ciphers/skipjack.c  132  Info 818: Pointer parameter 'key' (line 122) could be declared as pointing to const
src/ciphers/multi2.c  30  Info 818: Pointer parameter 'k' (line 23) could be declared as pointing to const
src/ciphers/multi2.c  42  Info 818: Pointer parameter 'k' (line 32) could be declared as pointing to const
src/ciphers/multi2.c  50  Info 818: Pointer parameter 'k' (line 44) could be declared as pointing to const
src/ciphers/multi2.c  78  Info 818: Pointer parameter 'dk' (line 52) could be declared as pointing to const
src/ciphers/blowfish.c  432  Info 818: Pointer parameter 'skey' (line 391) could be declared as pointing to const
src/ciphers/blowfish.c  493  Info 818: Pointer parameter 'skey' (line 453) could be declared as pointing to const
src/ciphers/xtea.c  101  Info 818: Pointer parameter 'skey' (line 74) could be declared as pointing to const
src/ciphers/xtea.c  137  Info 818: Pointer parameter 'skey' (line 110) could be declared as pointing to const
src/ciphers/khazad.c  751  Info 818: Pointer parameter 'skey' (line 744) could be declared as pointing to const
src/ciphers/khazad.c  767  Info 818: Pointer parameter 'skey' (line 760) could be declared as pointing to const
src/ciphers/anubis.c  1128  Info 818: Pointer parameter 'roundKey' (line 1038) could be declared as pointing to const
src/ciphers/kseed.c  248  Info 818: Pointer parameter 'K' (line 239) could be declared as pointing to const
src/ciphers/noekeon.c  146  Info 818: Pointer parameter 'skey' (line 113) could be declared as pointing to const
src/ciphers/noekeon.c  199  Info 818: Pointer parameter 'skey' (line 167) could be declared as pointing to const
src/ciphers/safer/saferp.c  396  Info 818: Pointer parameter 'skey' (line 341) could be declared as pointing to const
src/ciphers/safer/saferp.c  460  Info 818: Pointer parameter 'skey' (line 405) could be declared as pointing to const
src/encauth/gcm/gcm_mult_h.c  52  Info 818: Pointer parameter 'gcm' (line 22) could be declared as pointing to const
src/encauth/eax/eax_decrypt_verify_memory.c  103  Info 818: Pointer parameter 'tag' (line 41) could be declared as pointing to const
src/misc/adler32.c  107  Info 818: Pointer parameter 'ctx' (line 82) could be declared as pointing to const
src/misc/crc32.c  178  Info 818: Pointer parameter 'ctx' (line 162) could be declared as pointing to const",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-343279558,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","151 items

damn 😆",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/rofl0r,6,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-343282220,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.",@TrinityCoder go go go xD,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/TrinityCoder,7,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-343480332,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","@rofl0r OK, I will start with the list provided by @fperrad and will look forward to see what comes next :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-345675034,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.",I just realized that we have to be careful when changing this in the 3 different implementations of ltc_math_descriptor... I'd say you can probably leave them out or the code will most likely become splattered by casts back to non-const because ltm doesn't have a release with const* arguments yet and tfm doesn't even have it implemted...,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/TrinityCoder,9,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-354917102,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","Thanks @sjaeckel for the comment and sorry for taking long to reply.
CURRENT STATUS
I have taken a look at all those errors coming from the Travis build, and the main problem is probably in errors similar to this one (which actually counts for the majority of error log):
""makefile V=1""        ""-DUSE_LTM -DLTM_DESC"" ""-ltommath""
...
PTHREAD (-DLTC_PTHREAD -O2, makefile V=1 IGNORE_SPEED=1)...
building...build  PTHREAD failed! printing gcc_2.txt now for convenience
src/math/ltm_desc.c: In function ‘neg’:
src/math/ltm_desc.c:70:4: warning: passing argument 1 of ‘mp_neg’ discards ‘const’ qualifier from pointer target type [enabled by default]
    return mpi_to_ltc_error(mp_neg(a, b));
    ^
In file included from src/math/ltm_desc.c:15:0:
/usr/include/tommath.h:299:5: note: expected ‘struct mp_int *’ but argument is of type ‘const void *’
 int mp_neg(mp_int *a, mp_int *b);
     ^
These errors arise because now we are correctly passing const pointers inside our code,
but we have not changed anything in i. e. libtommath itself, which also uses the ""incorrect""
non-const pointer approach...
SOLUTION
Let me think a few minutes about this...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/rofl0r,10,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-354923399,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","tommath.h:299:5: note: expected ‘struct mp_int *’ but argument is of type ‘const void *’
this doesn't look like its only due to addition of const",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/TrinityCoder,11,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-354928048,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","@sjaeckel Sorry for requesting a review a few minutes ago; it was a missclick
@rofl0r Yes you are right, this error appears as well, I know about it and I will fix it",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-355019144,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","Cool, thanks for continuing work on this!
As already mentioned here, I think we can leave the math descriptors as they are for now.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/sjaeckel,13,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-357744626,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","@sjaeckel Sorry for requesting a review a few minutes ago; it was a missclick

No problem :) I removed myself from the reviewers list, can you please add me again as soon as you think it should be reviewed!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/TrinityCoder,14,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-357746583,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","@sjaeckel Yes, I will try to fix all the functions (except the math descriptor ones...) and immediately tag you for review :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/sjaeckel,15,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-366036557,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","@fperrad could you please merge this locally into develop and update your list w/o src/math/*_desc.c?
@TrinityCoder when you have the time to continue:

can you please rebase on top of develop and squash the commits together into one
revert the modifications to doc/crypt.tex

thx",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/fperrad,16,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-366346654,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","Here the second list (79 items)
src/pk/rsa/rsa_sign_saltlen_get.c  41  Info 818: Pointer parameter 'key' (line 25) could be declared as pointing to const
src/pk/rsa/rsa_exptmod.c  176  Info 818: Pointer parameter 'key' (line 31) could be declared as pointing to const
src/pk/asn1/der/object_identifier/der_encode_object_identifier.c  103  Info 818: Pointer parameter 'words' (line 25) could be declared as pointing to const
src/pk/asn1/der/generalizedtime/der_encode_generalizedtime.c  102  Info 818: Pointer parameter 'gtime' (line 40) could be declared as pointing to const
src/pk/asn1/der/utctime/der_encode_utctime.c  75  Info 818: Pointer parameter 'utctime' (line 31) could be declared as pointing to const
src/pk/ecc/ecc_free.c  32  Info 818: Pointer parameter 'key' (line 28) could be declared as pointing to const
src/pk/ecc/ecc_sign_hash.c  126  Info 818: Pointer parameter 'key' (line 21) could be declared as pointing to const
src/pk/ecc/ltc_ecc_projective_dbl_point.c  140  Info 818: Pointer parameter 'P' (line 32) could be declared as pointing to const
src/pk/ecc/ltc_ecc_projective_dbl_point.c  140  Info 818: Pointer parameter 'R' (line 32) could be declared as pointing to const
src/pk/ecc/ecc_import.c  70  Info 818: Pointer parameter 'key' (line 24) could be declared as pointing to const
src/pk/ecc/ecc_ansi_x963_export.c  71  Info 818: Pointer parameter 'key' (line 30) could be declared as pointing to const
src/pk/ecc/ecc_ansi_x963_import.c  96  Info 818: Pointer parameter 'dp' (line 34) could be declared as pointing to const
src/pk/ecc/ltc_ecc_mulmod_timing.c  156  Info 818: Pointer parameter 'G' (line 35) could be declared as pointing to const
src/pk/ecc/ltc_ecc_projective_add_point.c  187  Info 818: Pointer parameter 'Q' (line 33) could be declared as pointing to const
src/pk/ecc/ecc_export.c  74  Info 818: Pointer parameter 'key' (line 32) could be declared as pointing to const
src/pk/ecc/ltc_ecc_map.c  67  Info 818: Pointer parameter 'P' (line 31) could be declared as pointing to const
src/pk/ecc/ecc_verify_hash.c  160  Info 818: Pointer parameter 'key' (line 21) could be declared as pointing to const
src/pk/ecc/ltc_ecc_mul2add.c  199  Info 818: Pointer parameter 'A' (line 35) could be declared as pointing to const
src/pk/ecc/ltc_ecc_mul2add.c  199  Info 818: Pointer parameter 'B' (line 36) could be declared as pointing to const
src/pk/ecc/ecc_shared_secret.c  87  Info 818: Pointer parameter 'private_key' (line 32) could be declared as pointing to const
src/pk/dsa/dsa_sign_hash.c  105  Info 818: Pointer parameter 'key' (line 31) could be declared as pointing to const
src/pk/dsa/dsa_verify_key.c  95  Info 818: Pointer parameter 'key' (line 50) could be declared as pointing to const
src/pk/dsa/dsa_verify_key.c  130  Info 818: Pointer parameter 'key' (line 104) could be declared as pointing to const
src/pk/dsa/dsa_verify_key.c  193  Info 818: Pointer parameter 'key' (line 139) could be declared as pointing to const
src/pk/dsa/dsa_export.c  109  Info 818: Pointer parameter 'key' (line 26) could be declared as pointing to const
src/pk/dsa/dsa_shared_secret.c  64  Info 818: Pointer parameter 'public_key' (line 28) could be declared as pointing to const
src/pk/dsa/dsa_verify_hash.c  83  Info 818: Pointer parameter 'key' (line 31) could be declared as pointing to const
src/modes/cbc/cbc_getiv.c  38  Info 818: Pointer parameter 'cbc' (line 25) could be declared as pointing to const
src/modes/lrw/lrw_getiv.c  38  Info 818: Pointer parameter 'lrw' (line 25) could be declared as pointing to const
src/modes/ctr/ctr_getiv.c  38  Info 818: Pointer parameter 'ctr' (line 25) could be declared as pointing to const
src/modes/cfb/cfb_getiv.c  38  Info 818: Pointer parameter 'cfb' (line 25) could be declared as pointing to const
src/modes/xts/xts_test.c  39  Info 818: Pointer parameter 'skey1' (line 15) could be declared as pointing to const
src/modes/xts/xts_test.c  39  Info 818: Pointer parameter 'skey2' (line 15) could be declared as pointing to const
src/modes/xts/xts_test.c  66  Info 818: Pointer parameter 'skey1' (line 42) could be declared as pointing to const
src/modes/xts/xts_test.c  66  Info 818: Pointer parameter 'skey2' (line 42) could be declared as pointing to const
src/modes/f8/f8_getiv.c  38  Info 818: Pointer parameter 'f8' (line 25) could be declared as pointing to const
src/modes/ofb/ofb_getiv.c  38  Info 818: Pointer parameter 'ofb' (line 25) could be declared as pointing to const
src/hashes/chc/chc.c  154  Info 818: Pointer parameter 'buf' (line 130) could be declared as pointing to const
src/hashes/tiger.c  587  Info 818: Pointer parameter 'x' (line 577) could be declared as pointing to const
src/stream/sober128/sober128_stream.c  86  Info 818: Pointer parameter 'c' (line 81) could be declared as pointing to const
src/stream/sosemanuk/sosemanuk.c  330  Info 818: Pointer parameter 'key' (line 204) could be declared as pointing to const
src/stream/sosemanuk/sosemanuk.c  448  Info 818: Pointer parameter 'iv' (line 344) could be declared as pointing to const
src/prngs/fortuna.c  396  Info 818: Pointer parameter 'prng' (line 332) could be declared as pointing to const
src/ciphers/kasumi.c  121  Info 818: Pointer parameter 'key' (line 99) could be declared as pointing to const
src/ciphers/kasumi.c  137  Info 818: Pointer parameter 'key' (line 123) could be declared as pointing to const
src/ciphers/cast5.c  571  Info 818: Pointer parameter 'skey' (line 539) could be declared as pointing to const
src/ciphers/cast5.c  625  Info 818: Pointer parameter 'skey' (line 592) could be declared as pointing to const
src/ciphers/camellia.c  531  Info 818: Pointer parameter 'skey' (line 439) could be declared as pointing to const
src/ciphers/camellia.c  626  Info 818: Pointer parameter 'skey' (line 533) could be declared as pointing to const
src/ciphers/serpent.c  598  Info 818: Pointer parameter 'skey' (line 591) could be declared as pointing to const
src/ciphers/serpent.c  607  Info 818: Pointer parameter 'skey' (line 600) could be declared as pointing to const
src/ciphers/idea.c  165  Info 818: Pointer parameter 'skey' (line 158) could be declared as pointing to const
src/ciphers/idea.c  174  Info 818: Pointer parameter 'skey' (line 167) could be declared as pointing to const
src/ciphers/des.c  1607  Info 818: Pointer parameter 'skey' (line 1595) could be declared as pointing to const
src/ciphers/des.c  1628  Info 818: Pointer parameter 'skey' (line 1616) could be declared as pointing to const
src/ciphers/des.c  1652  Info 818: Pointer parameter 'skey' (line 1637) could be declared as pointing to const
src/ciphers/des.c  1675  Info 818: Pointer parameter 'skey' (line 1661) could be declared as pointing to const
src/ciphers/skipjack.c  187  Info 818: Pointer parameter 'skey' (line 144) could be declared as pointing to const
src/ciphers/skipjack.c  255  Info 818: Pointer parameter 'skey' (line 208) could be declared as pointing to const
src/ciphers/multi2.c  78  Info 818: Pointer parameter 'k' (line 52) could be declared as pointing to const
src/ciphers/multi2.c  90  Info 818: Pointer parameter 'uk' (line 80) could be declared as pointing to const
src/ciphers/multi2.c  105  Info 818: Pointer parameter 'uk' (line 92) could be declared as pointing to const
src/ciphers/blowfish.c  432  Info 818: Pointer parameter 'skey' (line 391) could be declared as pointing to const
src/ciphers/blowfish.c  493  Info 818: Pointer parameter 'skey' (line 453) could be declared as pointing to const
src/ciphers/xtea.c  101  Info 818: Pointer parameter 'skey' (line 74) could be declared as pointing to const
src/ciphers/xtea.c  137  Info 818: Pointer parameter 'skey' (line 110) could be declared as pointing to const
src/ciphers/khazad.c  751  Info 818: Pointer parameter 'skey' (line 744) could be declared as pointing to const
src/ciphers/khazad.c  767  Info 818: Pointer parameter 'skey' (line 760) could be declared as pointing to const
src/ciphers/anubis.c  1128  Info 818: Pointer parameter 'roundKey' (line 1038) could be declared as pointing to const
src/ciphers/kseed.c  270  Info 818: Pointer parameter 'skey' (line 257) could be declared as pointing to const
src/ciphers/kseed.c  292  Info 818: Pointer parameter 'skey' (line 279) could be declared as pointing to const
src/ciphers/noekeon.c  146  Info 818: Pointer parameter 'skey' (line 113) could be declared as pointing to const
src/ciphers/noekeon.c  199  Info 818: Pointer parameter 'skey' (line 167) could be declared as pointing to const
src/ciphers/safer/saferp.c  396  Info 818: Pointer parameter 'skey' (line 341) could be declared as pointing to const
src/ciphers/safer/saferp.c  460  Info 818: Pointer parameter 'skey' (line 405) could be declared as pointing to const
src/encauth/gcm/gcm_mult_h.c  52  Info 818: Pointer parameter 'gcm' (line 22) could be declared as pointing to const
src/encauth/eax/eax_decrypt_verify_memory.c  103  Info 818: Pointer parameter 'tag' (line 41) could be declared as pointing to const
src/misc/adler32.c  107  Info 818: Pointer parameter 'ctx' (line 82) could be declared as pointing to const
src/misc/crc32.c  178  Info 818: Pointer parameter 'ctx' (line 162) could be declared as pointing to const",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/karel-m,17,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-366444865,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","Please avoid changes to src/pk/ecc/* It would be better to handle these
after merging pr/ecc-* branches",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/sjaeckel,18,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-366446153,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","Please avoid changes to src/pk/ecc/* It would be better to handle these after merging pr/ecc-* branches

👍",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/sjaeckel,19,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-376356038,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.",@fperrad can you please check again :),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/fperrad,20,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-376627069,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","Here the third list (32 items)
src/pk/rsa/rsa_sign_hash.c  140  Info 818: Pointer parameter 'key' (line 37) could be declared as pointing to const
src/pk/rsa/rsa_encrypt_key.c  94  Info 818: Pointer parameter 'key' (line 36) could be declared as pointing to const
src/pk/rsa/rsa_verify_hash.c  187  Info 818: Pointer parameter 'key' (line 35) could be declared as pointing to const
src/pk/rsa/rsa_decrypt_key.c  97  Info 818: Pointer parameter 'key' (line 36) could be declared as pointing to const
src/pk/asn1/der/sequence/der_decode_sequence_multi.c  132  Info 818: Pointer parameter 'a1' (line 29) could be declared as pointing to const
src/pk/asn1/der/sequence/der_decode_sequence_multi.c  132  Info 818: Pointer parameter 'a2' (line 29) could be declared as pointing to const
src/pk/ecc/ecc_free.c  32  Info 818: Pointer parameter 'key' (line 28) could be declared as pointing to const
src/pk/ecc/ecc_sign_hash.c  126  Info 818: Pointer parameter 'key' (line 21) could be declared as pointing to const
src/pk/ecc/ltc_ecc_projective_dbl_point.c  140  Info 818: Pointer parameter 'P' (line 32) could be declared as pointing to const
src/pk/ecc/ltc_ecc_projective_dbl_point.c  140  Info 818: Pointer parameter 'R' (line 32) could be declared as pointing to const
src/pk/ecc/ecc_import.c  70  Info 818: Pointer parameter 'key' (line 24) could be declared as pointing to const
src/pk/ecc/ecc_ansi_x963_export.c  71  Info 818: Pointer parameter 'key' (line 30) could be declared as pointing to const
src/pk/ecc/ecc_ansi_x963_import.c  96  Info 818: Pointer parameter 'dp' (line 34) could be declared as pointing to const
src/pk/ecc/ltc_ecc_mulmod_timing.c  156  Info 818: Pointer parameter 'G' (line 35) could be declared as pointing to const
src/pk/ecc/ltc_ecc_projective_add_point.c  187  Info 818: Pointer parameter 'Q' (line 33) could be declared as pointing to const
src/pk/ecc/ecc_export.c  74  Info 818: Pointer parameter 'key' (line 32) could be declared as pointing to const
src/pk/ecc/ltc_ecc_map.c  67  Info 818: Pointer parameter 'P' (line 31) could be declared as pointing to const
src/pk/ecc/ecc_verify_hash.c  160  Info 818: Pointer parameter 'key' (line 21) could be declared as pointing to const
src/pk/ecc/ecc_get_size.c  36  Info 818: Pointer parameter 'key' (line 29) could be declared as pointing to const
src/pk/ecc/ltc_ecc_mul2add.c  199  Info 818: Pointer parameter 'A' (line 35) could be declared as pointing to const
src/pk/ecc/ltc_ecc_mul2add.c  199  Info 818: Pointer parameter 'B' (line 36) could be declared as pointing to const
src/pk/ecc/ecc_shared_secret.c  87  Info 818: Pointer parameter 'private_key' (line 32) could be declared as pointing to const
src/pk/dsa/dsa_decrypt_key.c  132  Info 818: Pointer parameter 'key' (line 29) could be declared as pointing to const
src/pk/dsa/dsa_encrypt_key.c  122  Info 818: Pointer parameter 'key' (line 33) could be declared as pointing to const
src/modes/xts/xts_test.c  39  Info 818: Pointer parameter 'skey1' (line 15) could be declared as pointing to const
src/modes/xts/xts_test.c  39  Info 818: Pointer parameter 'skey2' (line 15) could be declared as pointing to const
src/modes/xts/xts_test.c  66  Info 818: Pointer parameter 'skey1' (line 42) could be declared as pointing to const
src/modes/xts/xts_test.c  66  Info 818: Pointer parameter 'skey2' (line 42) could be declared as pointing to const
src/modes/xts/xts_decrypt.c  49  Info 818: Pointer parameter 'xts' (line 17) could be declared as pointing to const
src/modes/xts/xts_encrypt.c  51  Info 818: Pointer parameter 'xts' (line 17) could be declared as pointing to const
src/ciphers/multi2.c  78  Info 818: Pointer parameter 'k' (line 52) could be declared as pointing to const
src/misc/padding/padding_depad.c  88  Info 818: Pointer parameter 'data' (line 23) could be declared as pointing to const",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/sjaeckel,21,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-376642841,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","regarding src/pk/asn1/der/sequence/der_decode_sequence_multi.c  132  Info 818: Pointer parameter 'a1' (line 29) could be declared as pointing to const I'm not sure if that's a good idea, as the c standard defines that the va_list arguments of the corresponding functions aren't const...
and as already mentioned, the ecc stuff will be fixed after the ecc re-work",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/sjaeckel,22,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-376643561,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.",and @fperrad can you check again please? :),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/fperrad,23,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-376785997,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","Here the fourth list (16+2 items)
src/pk/ecc/ecc_free.c  32  Info 818: Pointer parameter 'key' (line 28) could be declared as pointing to const
src/pk/ecc/ecc_sign_hash.c  126  Info 818: Pointer parameter 'key' (line 21) could be declared as pointing to const
src/pk/ecc/ltc_ecc_projective_dbl_point.c  140  Info 818: Pointer parameter 'P' (line 32) could be declared as pointing to const
src/pk/ecc/ltc_ecc_projective_dbl_point.c  140  Info 818: Pointer parameter 'R' (line 32) could be declared as pointing to const
src/pk/ecc/ecc_import.c  70  Info 818: Pointer parameter 'key' (line 24) could be declared as pointing to const
src/pk/ecc/ecc_ansi_x963_export.c  71  Info 818: Pointer parameter 'key' (line 30) could be declared as pointing to const
src/pk/ecc/ecc_ansi_x963_import.c  96  Info 818: Pointer parameter 'dp' (line 34) could be declared as pointing to const
src/pk/ecc/ltc_ecc_mulmod_timing.c  156  Info 818: Pointer parameter 'G' (line 35) could be declared as pointing to const
src/pk/ecc/ltc_ecc_projective_add_point.c  187  Info 818: Pointer parameter 'Q' (line 33) could be declared as pointing to const
src/pk/ecc/ecc_export.c  74  Info 818: Pointer parameter 'key' (line 32) could be declared as pointing to const
src/pk/ecc/ltc_ecc_map.c  67  Info 818: Pointer parameter 'P' (line 31) could be declared as pointing to const
src/pk/ecc/ecc_verify_hash.c  160  Info 818: Pointer parameter 'key' (line 21) could be declared as pointing to const
src/pk/ecc/ecc_get_size.c  36  Info 818: Pointer parameter 'key' (line 29) could be declared as pointing to const
src/pk/ecc/ltc_ecc_mul2add.c  199  Info 818: Pointer parameter 'A' (line 35) could be declared as pointing to const
src/pk/ecc/ltc_ecc_mul2add.c  199  Info 818: Pointer parameter 'B' (line 36) could be declared as pointing to const
src/pk/ecc/ecc_shared_secret.c  87  Info 818: Pointer parameter 'private_key' (line 32) could be declared as pointing to const
src/pk/dsa/dsa_decrypt_key.c  132  Info 818: Pointer parameter 'key' (line 29) could be declared as pointing to const
src/pk/dsa/dsa_encrypt_key.c  122  Info 818: Pointer parameter 'key' (line 33) could be declared as pointing to const",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/sjaeckel,24,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-376789615,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.",@fperrad and hopefully the last iteration :),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/karel-m,25,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-379557296,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.",@sjaeckel could we merge this PR into develop?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/sjaeckel,26,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-379590935,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.","after @fperrad checked a last time, yes",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,324,2017-11-09T04:14:25Z,2018-04-09T09:58:38Z,2018-04-09T09:58:38Z,MERGED,True,347,335,86,https://github.com/TrinityCoder,Added missing 'const' qualifier to many functions' parameters ,2,['improve API'],https://github.com/libtom/libtomcrypt/pull/324,https://github.com/fperrad,27,https://github.com/libtom/libtomcrypt/pull/324#issuecomment-379620360,"I have found several functions taking non-cost pointers, while the only thing they do is return size of some keys.
I believe that functions like these really should take their arguments as const rsa_key* to preserve const-correctness and not being forced to write (i. e. in C++) things like
inline int GetKeySize() const { return ::rsa_get_size(const_cast<rsa_key*>(&key_)); }
If someone comes across another function(s) which should have const parameter but do not, you can write here and we can fix them all at once instead of splitting that into several commits.
Thanks!
EDIT: As was pointed out by several commenters, there are many more functions in which
a non-const pointer parameter is not used to change the pointed-to object, therefore the pointer can be declared as a const pointer. See below for the full discussion.",good for me (src/pk/ecc currently excluded).,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,325,2017-11-09T14:33:46Z,2017-11-09T18:44:29Z,2017-11-09T18:44:35Z,MERGED,True,6,11,3,https://github.com/sjaeckel,Statically allocated key in hmac_state,1,[],https://github.com/libtom/libtomcrypt/pull/325,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/325,New PR for #63,New PR for #63,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,326,2017-11-09T18:49:06Z,2017-11-09T23:41:51Z,2017-11-10T07:29:29Z,MERGED,True,3,3,1,https://github.com/karel-m,fixes #323 ccm_process fails to process input buffer longer than 256,1,['bug'],https://github.com/libtom/libtomcrypt/pull/326,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/326,see #323,see #323,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,326,2017-11-09T18:49:06Z,2017-11-09T23:41:51Z,2017-11-10T07:29:29Z,MERGED,True,3,3,1,https://github.com/karel-m,fixes #323 ccm_process fails to process input buffer longer than 256,1,['bug'],https://github.com/libtom/libtomcrypt/pull/326,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/326#issuecomment-343321369,see #323,ping @jforissier,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,326,2017-11-09T18:49:06Z,2017-11-09T23:41:51Z,2017-11-10T07:29:29Z,MERGED,True,3,3,1,https://github.com/karel-m,fixes #323 ccm_process fails to process input buffer longer than 256,1,['bug'],https://github.com/libtom/libtomcrypt/pull/326,https://github.com/jforissier,3,https://github.com/libtom/libtomcrypt/pull/326#issuecomment-343395592,see #323,@sjaeckel thanks for the heads up!,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,327,2017-11-10T16:04:10Z,2017-11-20T13:25:46Z,2017-11-20T13:25:49Z,MERGED,True,14,1,2,https://github.com/sjaeckel,Fix ccm_memory() cleaning user-supplied key,2,['bug'],https://github.com/libtom/libtomcrypt/pull/327,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/327,"tests are added or updated

This fixes a segfault caused by ccm_memory() with LTC_CLEAN_STACK enabled.","tests are added or updated

This fixes a segfault caused by ccm_memory() with LTC_CLEAN_STACK enabled.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,328,2017-11-22T09:38:46Z,2017-11-22T17:00:52Z,2017-12-05T17:23:21Z,MERGED,True,3,3,1,https://github.com/fperrad,sosemanuk: some linting,2,[],https://github.com/libtom/libtomcrypt/pull/328,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/328,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,329,2017-11-26T22:13:52Z,2017-12-05T16:41:45Z,2017-12-05T17:23:22Z,MERGED,True,969,1193,4,https://github.com/karel-m,Correct SHA3 block sizes,2,[],https://github.com/libtom/libtomcrypt/pull/329,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/329,"Checklist

 tests are added or updated","Checklist

 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,329,2017-11-26T22:13:52Z,2017-12-05T16:41:45Z,2017-12-05T17:23:22Z,MERGED,True,969,1193,4,https://github.com/karel-m,Correct SHA3 block sizes,2,[],https://github.com/libtom/libtomcrypt/pull/329,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/329#issuecomment-348799401,"Checklist

 tests are added or updated","As this PR would lead (again) to a bump of the major ABI version I thought about investing some time to implement a work-around or at least catch the corner cases so the ABI version could be kept the same.
As I'm not sure if that's worth the effort, I thought probably one of you guys @rofl0r @stapelberg @sebastianas or someone else who reads this can give their opinion resp. technical reasoning which way we should go...
Thanks in advance!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,329,2017-11-26T22:13:52Z,2017-12-05T16:41:45Z,2017-12-05T17:23:22Z,MERGED,True,969,1193,4,https://github.com/karel-m,Correct SHA3 block sizes,2,[],https://github.com/libtom/libtomcrypt/pull/329,https://github.com/stapelberg,3,https://github.com/libtom/libtomcrypt/pull/329#issuecomment-348812119,"Checklist

 tests are added or updated","As per https://codesearch.debian.net/search?q=sha3_%5B0-9%5D%2B_desc&perpkg=1, no software in Debian seems to use sha3_[0-9]+_desc, so this should be an easy transition.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,329,2017-11-26T22:13:52Z,2017-12-05T16:41:45Z,2017-12-05T17:23:22Z,MERGED,True,969,1193,4,https://github.com/karel-m,Correct SHA3 block sizes,2,[],https://github.com/libtom/libtomcrypt/pull/329,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/329#issuecomment-348812917,"Checklist

 tests are added or updated",Looking at my own code I am in doubts whether increasing MAXBLOCKSIZE is really necessary.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,329,2017-11-26T22:13:52Z,2017-12-05T16:41:45Z,2017-12-05T17:23:22Z,MERGED,True,969,1193,4,https://github.com/karel-m,Correct SHA3 block sizes,2,[],https://github.com/libtom/libtomcrypt/pull/329,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/329#issuecomment-348821933,"Checklist

 tests are added or updated","Looking at my own code I am in doubts whether increasing MAXBLOCKSIZE is really necessary.
View changes

the ABI bump is necessary because of the changed size of hmac_state (and all the other typedefs which contain MAXBLOCKSIZE) therefore your hack unfortunately doesn't really help...

As per https://codesearch.debian.net/search?q=sha3_%5B0-9%5D%2B_desc&perpkg=1, no software in Debian seems to use sha3_[0-9]+_desc, so this should be an easy transition.

thanks for the info!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,330,2017-11-28T16:15:23Z,2017-11-29T08:52:40Z,2017-12-05T17:23:22Z,MERGED,True,2,2,1,https://github.com/J08nY,Fix docs build in Sosemanuk section.,1,[],https://github.com/libtom/libtomcrypt/pull/330,https://github.com/J08nY,1,https://github.com/libtom/libtomcrypt/pull/330,"The latex build of doc/crypt.tex is currently broken by unescaped _ characters in the Sosemanuk section of it, this fixes the docs.","The latex build of doc/crypt.tex is currently broken by unescaped _ characters in the Sosemanuk section of it, this fixes the docs.",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,330,2017-11-28T16:15:23Z,2017-11-29T08:52:40Z,2017-12-05T17:23:22Z,MERGED,True,2,2,1,https://github.com/J08nY,Fix docs build in Sosemanuk section.,1,[],https://github.com/libtom/libtomcrypt/pull/330,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/330#issuecomment-347615190,"The latex build of doc/crypt.tex is currently broken by unescaped _ characters in the Sosemanuk section of it, this fixes the docs.","We should really build the docs in CI...
thx for this PR btw :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,331,2017-11-28T20:13:02Z,2017-11-28T21:48:30Z,2017-11-28T21:48:30Z,CLOSED,False,2,0,1,https://github.com/J08nY,"Compile static library with fPIC, so it can be linked into a shared one.",1,[],https://github.com/libtom/libtomcrypt/pull/331,https://github.com/J08nY,1,https://github.com/libtom/libtomcrypt/pull/331,"When linking a static version of libtomcrypt into a shared library on an x86-64 system, gcc is unable to relocate parts of libtomcrypt, because it was not built with -fPIC enabled.
For example:
/usr/bin/ld: ./libtomcrypt.a(crypt_find_prng.o): relocation R_X86_64_PC32 against symbol `prng_descriptor' can not be used when making a shared object; recompile with -fPIC


This should fix said error(which cannot be solved from the user of the static lib easily), and hopefully not break anything else. However, I know very little of linkers so take this with a grain of salt.","When linking a static version of libtomcrypt into a shared library on an x86-64 system, gcc is unable to relocate parts of libtomcrypt, because it was not built with -fPIC enabled.
For example:
/usr/bin/ld: ./libtomcrypt.a(crypt_find_prng.o): relocation R_X86_64_PC32 against symbol `prng_descriptor' can not be used when making a shared object; recompile with -fPIC


This should fix said error(which cannot be solved from the user of the static lib easily), and hopefully not break anything else. However, I know very little of linkers so take this with a grain of salt.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,331,2017-11-28T20:13:02Z,2017-11-28T21:48:30Z,2017-11-28T21:48:30Z,CLOSED,False,2,0,1,https://github.com/J08nY,"Compile static library with fPIC, so it can be linked into a shared one.",1,[],https://github.com/libtom/libtomcrypt/pull/331,https://github.com/rofl0r,2,https://github.com/libtom/libtomcrypt/pull/331#issuecomment-347673708,"When linking a static version of libtomcrypt into a shared library on an x86-64 system, gcc is unable to relocate parts of libtomcrypt, because it was not built with -fPIC enabled.
For example:
/usr/bin/ld: ./libtomcrypt.a(crypt_find_prng.o): relocation R_X86_64_PC32 against symbol `prng_descriptor' can not be used when making a shared object; recompile with -fPIC


This should fix said error(which cannot be solved from the user of the static lib easily), and hopefully not break anything else. However, I know very little of linkers so take this with a grain of salt.","using -fPIC by default has a cost, especially on i386, so its not desirable to have it always on. imo it's the choice of the user building the library whether he wants it or not, and if so, he just adds -fPIC to his CFLAGS when compiling libtom.",True,{'THUMBS_UP': ['https://github.com/J08nY']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,331,2017-11-28T20:13:02Z,2017-11-28T21:48:30Z,2017-11-28T21:48:30Z,CLOSED,False,2,0,1,https://github.com/J08nY,"Compile static library with fPIC, so it can be linked into a shared one.",1,[],https://github.com/libtom/libtomcrypt/pull/331,https://github.com/J08nY,3,https://github.com/libtom/libtomcrypt/pull/331#issuecomment-347674688,"When linking a static version of libtomcrypt into a shared library on an x86-64 system, gcc is unable to relocate parts of libtomcrypt, because it was not built with -fPIC enabled.
For example:
/usr/bin/ld: ./libtomcrypt.a(crypt_find_prng.o): relocation R_X86_64_PC32 against symbol `prng_descriptor' can not be used when making a shared object; recompile with -fPIC


This should fix said error(which cannot be solved from the user of the static lib easily), and hopefully not break anything else. However, I know very little of linkers so take this with a grain of salt.","Ah, makes sense.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,332,2017-12-05T06:23:36Z,2017-12-05T20:20:07Z,2017-12-05T20:20:38Z,MERGED,True,38,35,2,https://github.com/buggywhip,sosemanuk updated comments and doc,4,[],https://github.com/libtom/libtomcrypt/pull/332,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/332,"Checklist


 documentation is added or updated
 tests are added or updated  (n/a)","Checklist


 documentation is added or updated
 tests are added or updated  (n/a)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,334,2017-12-06T06:22:16Z,2017-12-18T12:16:33Z,2018-04-23T07:48:30Z,MERGED,True,572,28,12,https://github.com/buggywhip,Add Rabbit stream cipher,2,['feature'],https://github.com/libtom/libtomcrypt/pull/334,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/334,"Checklist


 documentation is added or updated
 tests are added or updated","Checklist


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,334,2017-12-06T06:22:16Z,2017-12-18T12:16:33Z,2018-04-23T07:48:30Z,MERGED,True,572,28,12,https://github.com/buggywhip,Add Rabbit stream cipher,2,['feature'],https://github.com/libtom/libtomcrypt/pull/334,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/334#issuecomment-350499436,"Checklist


 documentation is added or updated
 tests are added or updated","There is no gain in starting using uint32_t instead of ulong32 and uint8_t instead of unsigned char.
This is what I wrote half a year ago (something similar I have also written off-github to you).
I am extremely strongly against creating dependency on stdint.h. (unless there is an option to define something like -DLTC_WITHOUT_STDINT_H)
I lost this battle in libtommath and the result is that I have to keep a specially patched tommath.h for my perl bindings which is a pain for me. Frankly we did not gain anything in libtommath by starting using stdint.h.
And please do not give me those stories about how old is C99, on my Visual Studio 2008 there is no stdint.h so it only forces me to keep my stdint.h-less fork of libtomcrypt (as I already have to do with libtommath).
In short: either me or stdint.h 😃",True,{'THUMBS_UP': ['https://github.com/rofl0r']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,334,2017-12-06T06:22:16Z,2017-12-18T12:16:33Z,2018-04-23T07:48:30Z,MERGED,True,572,28,12,https://github.com/buggywhip,Add Rabbit stream cipher,2,['feature'],https://github.com/libtom/libtomcrypt/pull/334,https://github.com/buggywhip,3,https://github.com/libtom/libtomcrypt/pull/334#issuecomment-350512058,"Checklist


 documentation is added or updated
 tests are added or updated","Funny, earlier this morning I was thinking the 'add Rabbit' PR was overloaded with <stdint.h> issues that might be better served by a separate PR.
 I have to keep a specially patched tommath.h for my perl bindings which is a pain for me.

Interesting, I didn't realize and it confirms.  Thanks.


I propose changing Rabbit back to ulong32 as doing so would NOT cause an immediate problem.  It has seemingly worked well for some time now.  Further, I propose a new PR to discuss <stdint.h> issues and how best to address them.  ..or not.

I contend it is far more important to add Rabbit than it is to hang <stdint.h> on this poor bunny's tail.  ;-)


.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,334,2017-12-06T06:22:16Z,2017-12-18T12:16:33Z,2018-04-23T07:48:30Z,MERGED,True,572,28,12,https://github.com/buggywhip,Add Rabbit stream cipher,2,['feature'],https://github.com/libtom/libtomcrypt/pull/334,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/334#issuecomment-350541824,"Checklist


 documentation is added or updated
 tests are added or updated","I lost this battle in libtommath and the result is that I have to keep a specially patched tommath.h for my perl bindings which is a pain for me. Frankly we did not gain anything in libtommath by starting using stdint.h.
And please do not give me those stories about how old is C99, on my Visual Studio 2008 there is no stdint.h so it only forces me to keep my stdint.h-less fork of libtomcrypt (as I already have to do with libtommath).

I still don't get it why you don't create your own stdint.h in e.g. perl-CryptX/src/win32 and add this to your Include path when required...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,334,2017-12-06T06:22:16Z,2017-12-18T12:16:33Z,2018-04-23T07:48:30Z,MERGED,True,572,28,12,https://github.com/buggywhip,Add Rabbit stream cipher,2,['feature'],https://github.com/libtom/libtomcrypt/pull/334,https://github.com/buggywhip,5,https://github.com/libtom/libtomcrypt/pull/334#issuecomment-350794159,"Checklist


 documentation is added or updated
 tests are added or updated","+#define SWAP32(v) \
 cannot we just used already existing macro BSWAP?

perhaps, but I prefer we keep '32' as part of the name.  ...but it might not matter as Steffen is suggesting changing another macro, the only usage of SWAP32.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,334,2017-12-06T06:22:16Z,2017-12-18T12:16:33Z,2018-04-23T07:48:30Z,MERGED,True,572,28,12,https://github.com/buggywhip,Add Rabbit stream cipher,2,['feature'],https://github.com/libtom/libtomcrypt/pull/334,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/334#issuecomment-350808448,"Checklist


 documentation is added or updated
 tests are added or updated","but it might not matter as Steffen is suggesting changing another macro, the only usage of SWAP32.

no, that's another one",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,334,2017-12-06T06:22:16Z,2017-12-18T12:16:33Z,2018-04-23T07:48:30Z,MERGED,True,572,28,12,https://github.com/buggywhip,Add Rabbit stream cipher,2,['feature'],https://github.com/libtom/libtomcrypt/pull/334,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/334#issuecomment-351644963,"Checklist


 documentation is added or updated
 tests are added or updated","It seems that the following two cases give different results:
1/ skip rabbit_setiv
rabbit_setup(&st, k, k_len);
rabbit_crypt(&st, pt, pt_len, ct);
2/ call rabbit_setiv with zero length IV
rabbit_setup(&st, k, k_len);
rabbit_setiv(&st, zero, 0);
rabbit_crypt(&st, pt, pt_len, ct);
I am not sure what specification says about ""no-IV"" case. I found this when checking interoperability with another rabbit perl module (Crypt::Rabbit) which uses approach 1/.
We should clarify ""no-IV"" case in the documentation.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,334,2017-12-06T06:22:16Z,2017-12-18T12:16:33Z,2018-04-23T07:48:30Z,MERGED,True,572,28,12,https://github.com/buggywhip,Add Rabbit stream cipher,2,['feature'],https://github.com/libtom/libtomcrypt/pull/334,https://github.com/buggywhip,8,https://github.com/libtom/libtomcrypt/pull/334#issuecomment-351678020,"Checklist


 documentation is added or updated
 tests are added or updated","On 14Dec, 2017, at 12:43 AM, karel-m ***@***.***> wrote:

 It seems that the following two cases give different results:

 1/ skip rabbit_setiv

 rabbit_setup(&st, k, k_len);
 rabbit_crypt(&st, pt, pt_len, ct);
 2/ call rabbit_setiv with zero length IV

 rabbit_setup(&st, k, k_len);
 rabbit_setiv(&st, zero, 0);
 rabbit_crypt(&st, pt, pt_len, ct);
 I am not sure what specification says about ""no-IV"" case. I found this when checking interoperability with another rabbit perl module (Crypt::Rabbit) which uses approach 1/.

 We should clarify ""no-IV"" case in the documentation.

Good observation, and yes, you WILL get different answers when you skip the call vs making the call passing zeros.  This is because calling setiv() doesn't just load an IV, it also scrambles the state variables.  The LTC implementation started life as the eSTREAM reference implementation and looking again at the LTC code and the original reference code, neither supports conditional execution of the state scrambling logic based on a zero valued iv.  Passing zero and skipping the call WILL give different results.

Next, Rabbit state maintains two contexts: master and work.  setiv() in the reference implementation is where the master context with its partially scrambled key gets copied into the work context.  Without a call to setiv() another implementation will, at a minimum, need to perform that copy somewhere else.  ...and don't forget the additional scrambling.  Results will most likely deviate fm the designer's intent.

Rereading the paper submitted to eSTREAM, http://www.ecrypt.eu.org/stream/p3ciphers/rabbit/rabbit_p3.pdf, I find on page 3 the ambiguous phrase ""...takes a 128- bit secret key and a 64-bit IV (if desired) as input..."".  Beyond that the specification is silent WRT skipping the call vs passing zeros.

Also, looking at the 89 test vectors submitted to eSTREAM, there are no test cases without an iv although the vast majority of those cases had iv values of zero.  One might assume, on the basis of these vectors, there is an expectation to call setiv() even if only to pass a zero value.

Finally, the security of Rabbit is likely affected.  setiv() has setup logic that further scrambles the key independent of the value of an iv.  ...that wouldn't take place without the call.

Without additional information to the contrary I conclude a call to setiv() is mandatory.

Next questions:  Fidelity or interoperability?  What do the authors say?  How do other implementations behave?  How are folks actually using it?  ???

And until, I submit the doc for setiv() in crypt.tex should be extended to say, ""Set the IV using \textit{rabbit\_setiv() with a 64-bit IV, even when the value is zero.""",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,334,2017-12-06T06:22:16Z,2017-12-18T12:16:33Z,2018-04-23T07:48:30Z,MERGED,True,572,28,12,https://github.com/buggywhip,Add Rabbit stream cipher,2,['feature'],https://github.com/libtom/libtomcrypt/pull/334,https://github.com/buggywhip,9,https://github.com/libtom/libtomcrypt/pull/334#issuecomment-351679793,"Checklist


 documentation is added or updated
 tests are added or updated","On 14Dec, 2017, at 2:56 AM, Larry Bugbee ***@***.***> wrote:

 Also, looking at the 89 test vectors submitted to eSTREAM, there are no test cases without an iv although the vast majority of those cases had iv values of zero.  One might assume, on the basis of these vectors, there is an expectation to call setiv() even if only to pass a zero value.
After all that I forgot to mention that all 89 test vectors passed WITH a call to setiv() passing zero.  ...mandatory for fidelity.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,334,2017-12-06T06:22:16Z,2017-12-18T12:16:33Z,2018-04-23T07:48:30Z,MERGED,True,572,28,12,https://github.com/buggywhip,Add Rabbit stream cipher,2,['feature'],https://github.com/libtom/libtomcrypt/pull/334,https://github.com/buggywhip,10,https://github.com/libtom/libtomcrypt/pull/334#issuecomment-351693209,"Checklist


 documentation is added or updated
 tests are added or updated","Sorry, there's more.

There are TWO sets of test vectors available fm eSTREAM.  One is available at
http://www.ecrypt.eu.org/stream/svn/viewcvs.cgi/ecrypt/trunk/submissions/sosemanuk/unverified.test-vectors?rev=210.  These are the 89 vectors mentioned previously.

The second set is packaged inside the source code ZIP file available at http://www.ecrypt.eu.org/stream/e2-rabbit.html.  Of this set of 6 vectors, 3 have a key and an expected value, but no IV.  Here one might infer you can run without the call to setiv().  (One side note: one of the 6 vectors is in error.  The 3rd line of out1 should read ""96 D6 73 16 88 D1 68 DA 51 D4 0C 70 C3 A1 16 F4"", not ""EF 9A 69 71 8B 82 49 A1 A7 3C 5A 6E 5B 90 45 95"".)
…
-----

And then there is the **Informational** RFC4503 (https://tools.ietf.org/html/rfc4503).  In section 2.4 it says, ""After the key setup, the resulting inner state is saved as a master state. Then the IV setup is run to obtain the first encryption starting state.""  This suggests making the call, but then section 3.2 says, in part, ""It is possible to run Rabbit without the IV setup.""  ...operative word, ""possible"".

So, while technically you can run Rabbit without the call to setiv(), this ambiguity is not conducive to good interoperability.
-----

Since LTC is a provider of primitives, I believe we should support both modes of operation and ensure there are no side effects beyond those encountered in the reference implementation.  ...that our doc highlight this distinction/ambiguity so users of Rabbit know to be sure all are on the same wavelength.  Personally, I think we should encourage they ""always call setiv()"".  ...that skipping the IV call should be reserved for protocol designers and closed systems.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,334,2017-12-06T06:22:16Z,2017-12-18T12:16:33Z,2018-04-23T07:48:30Z,MERGED,True,572,28,12,https://github.com/buggywhip,Add Rabbit stream cipher,2,['feature'],https://github.com/libtom/libtomcrypt/pull/334,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/334#issuecomment-351858099,"Checklist


 documentation is added or updated
 tests are added or updated","I am for supporting both cases:

rabbit_setup + rabbit_crypt
rabbit_setup + rabbit_setiv(&st, NULL, 0) + rabbit_crypt

Note that rabbit_setiv(&st, NULL, 0) does not work now, it requires 2 changes I propose above.
Once we allow skipping rabbit_setiv we should make sure that rabbit_setup initializes the whole state (currently it for example does not set st->unused = 0). We should perhaps even add a test for ""skip setiv"" scenario so that we see valgring & co. results.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,334,2017-12-06T06:22:16Z,2017-12-18T12:16:33Z,2018-04-23T07:48:30Z,MERGED,True,572,28,12,https://github.com/buggywhip,Add Rabbit stream cipher,2,['feature'],https://github.com/libtom/libtomcrypt/pull/334,https://github.com/karel-m,12,https://github.com/libtom/libtomcrypt/pull/334#issuecomment-351990736,"Checklist


 documentation is added or updated
 tests are added or updated","- XMEMCPY(tmpiv, iv, ivlen);
+ if (iv && ivlen > 0) XMEMCPY(tmpiv, iv, ivlen);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,335,2017-12-06T23:08:19Z,2017-12-16T23:43:36Z,2018-01-23T13:07:15Z,MERGED,True,244,186,18,https://github.com/sjaeckel,Minor cleanup,12,[],https://github.com/libtom/libtomcrypt/pull/335,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/335,"Minor cleanup&lil'feature PR
The only thing really worth a review is the newly introduced copy_or_zeromem()
The rest is just cosmetics.
Reviews are as always very welcome!","Minor cleanup&lil'feature PR
The only thing really worth a review is the newly introduced copy_or_zeromem()
The rest is just cosmetics.
Reviews are as always very welcome!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,335,2017-12-06T23:08:19Z,2017-12-16T23:43:36Z,2018-01-23T13:07:15Z,MERGED,True,244,186,18,https://github.com/sjaeckel,Minor cleanup,12,[],https://github.com/libtom/libtomcrypt/pull/335,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/335#issuecomment-350498698,"Minor cleanup&lil'feature PR
The only thing really worth a review is the newly introduced copy_or_zeromem()
The rest is just cosmetics.
Reviews are as always very welcome!","Ad copy_or_zeromem

I am not sure if we want it to be part of public API
if it'll will be part of public API then the name is quite mysterious (I do not have a better name)
if copy_or_zeromem is handy in CCM then it should be perhaps also used in other encauth cases",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,335,2017-12-06T23:08:19Z,2017-12-16T23:43:36Z,2018-01-23T13:07:15Z,MERGED,True,244,186,18,https://github.com/sjaeckel,Minor cleanup,12,[],https://github.com/libtom/libtomcrypt/pull/335,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/335#issuecomment-350543807,"Minor cleanup&lil'feature PR
The only thing really worth a review is the newly introduced copy_or_zeromem()
The rest is just cosmetics.
Reviews are as always very welcome!","if copy_or_zeromem is handy in CCM then it should be perhaps also used in other encauth cases

I factored this out as I use it in my SIV PR as well, but I thought it doesn't really belong there, so I created this PR with other changes that belong to the features introduced there

I am not sure if we want it to be part of public API

I'll make it private for now

if it'll will be part of public API then the name is quite mysterious (I do not have a better name)

I think the name is okay'ish... probably one of the following would be better, not sure though:

mem_copy_or_zero
memcpy_or_zero
copy_or_zero
copy_or_clean",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,335,2017-12-06T23:08:19Z,2017-12-16T23:43:36Z,2018-01-23T13:07:15Z,MERGED,True,244,186,18,https://github.com/sjaeckel,Minor cleanup,12,[],https://github.com/libtom/libtomcrypt/pull/335,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/335#issuecomment-350558783,"Minor cleanup&lil'feature PR
The only thing really worth a review is the newly introduced copy_or_zeromem()
The rest is just cosmetics.
Reviews are as always very welcome!",If you make it private then no need to care about the name.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,335,2017-12-06T23:08:19Z,2017-12-16T23:43:36Z,2018-01-23T13:07:15Z,MERGED,True,244,186,18,https://github.com/sjaeckel,Minor cleanup,12,[],https://github.com/libtom/libtomcrypt/pull/335,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/335#issuecomment-350768661,"Minor cleanup&lil'feature PR
The only thing really worth a review is the newly introduced copy_or_zeromem()
The rest is just cosmetics.
Reviews are as always very welcome!","If you make it private then no need to care about the name.

well I prefer to have a proper name now so we don't have to think about it in case we want to make it public ;)
Edit: I think the current name is fine and represents what the function does. Therefore we could even make it public.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,335,2017-12-06T23:08:19Z,2017-12-16T23:43:36Z,2018-01-23T13:07:15Z,MERGED,True,244,186,18,https://github.com/sjaeckel,Minor cleanup,12,[],https://github.com/libtom/libtomcrypt/pull/335,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/335#issuecomment-350812003,"Minor cleanup&lil'feature PR
The only thing really worth a review is the newly introduced copy_or_zeromem()
The rest is just cosmetics.
Reviews are as always very welcome!","IIUC we are doing: ""copy src to dest or zero dest (all that in constant time)"" which sounds to me more like copy_or_zero_dest but I can live with copy_or_zeromem as well - I leave it up to you.
Another thing (UPDATED):
- coz &= 0x1;
+ if (coz != 0) coz = 1;
so that unexpected/accidental coz = 2 means zeromem (accidentally zeroing is better that copying)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,337,2017-12-07T13:54:27Z,2017-12-10T11:35:01Z,2018-01-23T13:07:15Z,MERGED,True,7,0,6,https://github.com/sjaeckel,prevent undefined behavior with LTC_PTHREAD,1,[],https://github.com/libtom/libtomcrypt/pull/337,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/337,"While reading through through man pthread_mutex_init I stumbled over this:
""Attempting to initialize an already initialized mutex results in undefined behavior.""
This patch should prevent this undefined behavior.","While reading through through man pthread_mutex_init I stumbled over this:
""Attempting to initialize an already initialized mutex results in undefined behavior.""
This patch should prevent this undefined behavior.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,337,2017-12-07T13:54:27Z,2017-12-10T11:35:01Z,2018-01-23T13:07:15Z,MERGED,True,7,0,6,https://github.com/sjaeckel,prevent undefined behavior with LTC_PTHREAD,1,[],https://github.com/libtom/libtomcrypt/pull/337,https://github.com/rofl0r,2,https://github.com/libtom/libtomcrypt/pull/337#issuecomment-350544095,"While reading through through man pthread_mutex_init I stumbled over this:
""Attempting to initialize an already initialized mutex results in undefined behavior.""
This patch should prevent this undefined behavior.","now that i think about it, it seems curious that you need mutexes at all. you pass a struct containing the entire context to each of the prng function, so this seems quite thread-safe to me.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,337,2017-12-07T13:54:27Z,2017-12-10T11:35:01Z,2018-01-23T13:07:15Z,MERGED,True,7,0,6,https://github.com/sjaeckel,prevent undefined behavior with LTC_PTHREAD,1,[],https://github.com/libtom/libtomcrypt/pull/337,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/337#issuecomment-352221896,"While reading through through man pthread_mutex_init I stumbled over this:
""Attempting to initialize an already initialized mutex results in undefined behavior.""
This patch should prevent this undefined behavior.","... so this seems quite thread-safe to me

really? even in case you're sharing one prng state in multiple threads?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,337,2017-12-07T13:54:27Z,2017-12-10T11:35:01Z,2018-01-23T13:07:15Z,MERGED,True,7,0,6,https://github.com/sjaeckel,prevent undefined behavior with LTC_PTHREAD,1,[],https://github.com/libtom/libtomcrypt/pull/337,https://github.com/rofl0r,4,https://github.com/libtom/libtomcrypt/pull/337#issuecomment-352258613,"While reading through through man pthread_mutex_init I stumbled over this:
""Attempting to initialize an already initialized mutex results in undefined behavior.""
This patch should prevent this undefined behavior.","if you share state among threads you must of course protect it with locks if you modify it, but this is the first time i see the library doing the locking ""for you"". it is generally considered to be the responsibility of the library user to prevent concurrent updates.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,337,2017-12-07T13:54:27Z,2017-12-10T11:35:01Z,2018-01-23T13:07:15Z,MERGED,True,7,0,6,https://github.com/sjaeckel,prevent undefined behavior with LTC_PTHREAD,1,[],https://github.com/libtom/libtomcrypt/pull/337,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/337#issuecomment-352260936,"While reading through through man pthread_mutex_init I stumbled over this:
""Attempting to initialize an already initialized mutex results in undefined behavior.""
This patch should prevent this undefined behavior.","but this is the first time i see the library doing the locking ""for you""

well that's already in there for a long time, there are also some static mutexes for e.g. the cipher/hash/prng registry or in the ecc code for the tables... just look it up...
I also think that it's up to the library-user to take care of that, but as it's not enabled by default he already does that by compiling ltc with pthread-support ;)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,339,2018-01-11T17:10:58Z,2018-01-14T21:31:25Z,2018-01-23T13:07:15Z,MERGED,True,43,29,6,https://github.com/sjaeckel,Minor improvements,2,[],https://github.com/libtom/libtomcrypt/pull/339,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/339,"These are some changes pulled out from #309 to be merged asap, so we can finish 1.18.1.","These are some changes pulled out from #309 to be merged asap, so we can finish 1.18.1.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,341,2018-01-21T23:51:03Z,2018-03-23T21:00:57Z,2018-03-23T21:01:00Z,MERGED,True,136,172,9,https://github.com/sjaeckel,Review of prngs,7,['enhancement'],https://github.com/libtom/libtomcrypt/pull/341,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/341,"I had a look at the prng's at one point and forgot about these changes.
Regarding the last commit in the row ""add possibility to seed PRNG as if it's imported"" - I'm not 100% sure if that's a good approach or if it makes things too complicated & complex, but I wanted to put it up for discussion.
Thanks for your feedback to all of these changes.","I had a look at the prng's at one point and forgot about these changes.
Regarding the last commit in the row ""add possibility to seed PRNG as if it's imported"" - I'm not 100% sure if that's a good approach or if it makes things too complicated & complex, but I wanted to put it up for discussion.
Thanks for your feedback to all of these changes.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,341,2018-01-21T23:51:03Z,2018-03-23T21:00:57Z,2018-03-23T21:01:00Z,MERGED,True,136,172,9,https://github.com/sjaeckel,Review of prngs,7,['enhancement'],https://github.com/libtom/libtomcrypt/pull/341,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/341#issuecomment-368438297,"I had a look at the prng's at one point and forgot about these changes.
Regarding the last commit in the row ""add possibility to seed PRNG as if it's imported"" - I'm not 100% sure if that's a good approach or if it makes things too complicated & complex, but I wanted to put it up for discussion.
Thanks for your feedback to all of these changes.","Ad export/import: what about turning all prngs' export functions consistently into:
int ALGNAME_prng_export(unsigned char *out, unsigned long *outlen, prng_state *prng)
{
   unsigned long len = ALGNAME_prng_desc.export_size;

   LTC_ARGCHK(prng   != NULL);
   LTC_ARGCHK(out    != NULL);
   LTC_ARGCHK(outlen != NULL);

   if (*outlen < len) {
      *outlen = len;
      return CRYPT_BUFFER_OVERFLOW;
   }

   if (ALGNAME_prng_read(out, len, prng) != len) {
      return CRYPT_ERROR_READPRNG;
   }

   *outlen = len;
   return CRYPT_OK;
}",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,341,2018-01-21T23:51:03Z,2018-03-23T21:00:57Z,2018-03-23T21:01:00Z,MERGED,True,136,172,9,https://github.com/sjaeckel,Review of prngs,7,['enhancement'],https://github.com/libtom/libtomcrypt/pull/341,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/341#issuecomment-375619849,"I had a look at the prng's at one point and forgot about these changes.
Regarding the last commit in the row ""add possibility to seed PRNG as if it's imported"" - I'm not 100% sure if that's a good approach or if it makes things too complicated & complex, but I wanted to put it up for discussion.
Thanks for your feedback to all of these changes.","Fine like that?
Regarding docs, I'll update them in the next PR regarding the PRNG's.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/342,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.","documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-359784363,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.","@karel-m Should we probably update LTC_EASY to contain GCM?
I'll open another PR then with a suggestion.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-368428404,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.",I am not using LTC_EASY at all but my opinion here is: keep LTC_EASY as it is now (without GCM),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-370019660,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.","MSVC failure:
src\encauth\gcm\gcm_file.c(20) : fatal error C1083: Cannot open include file: 'unistd.h': No such file or directory
NMAKE : fatal error U1077: 'cl' : return code '0x2'
Stop.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-370026878,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.","src\encauth\gcm\gcm_file.c(20) : fatal error C1083: Cannot open include file: 'unistd.h': No such file or directory

diff --git a/src/encauth/gcm/gcm_file.c b/src/encauth/gcm/gcm_file.c
index f3c88fb..ade1de3 100644
--- a/src/encauth/gcm/gcm_file.c
+++ b/src/encauth/gcm/gcm_file.c
@@ -19,4 +19,2 @@
 
-#include <unistd.h>
-
 /**
diff --git a/src/encauth/gcm/gcm_filehandle.c b/src/encauth/gcm/gcm_filehandle.c
index ea6fb3f..53c85d2 100644
--- a/src/encauth/gcm/gcm_filehandle.c
+++ b/src/encauth/gcm/gcm_filehandle.c
@@ -19,3 +19,7 @@
 
+#if defined(_WIN32) || defined(_WIN32_WCE)
+#define ftruncate _chsize
+#else
 #include <unistd.h>
+#endif

fine like that?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-370038596,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.","gcm_file.c fix is fine
the #ifdef IMO will not work well with gcc+mingw64

Too much I/O magic in gcm_filehandle I have to think it over",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-370043346,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.","the #ifdef IMO will not work well with gcc+mingw64

you're right, it has to be #if (defined(_WIN32) || defined(_WIN32_WCE)) && !defined(__GNUC__)

Too much I/O magic in gcm_filehandle I have to think it over

yeah, I already thought about it but couldn't find another solution.
Probably you can find something better.
It's basically the first FILE API that does en-/decryption, all the other FILE API's were for hashes or MAC's so they only had to read the file and then store some bytes...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-370043723,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.",also  mkstemp in file_test is a troublemaker when compiling with MSVC,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-370044509,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.","also mkstemp in file_test is a troublemaker when compiling with MSVC

as mentioned it's GNU only, I don't care about MSVC for that demo :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-370044630,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.","and of course ""/tmp/ltc_test_XXXXXX"" is not windows friendly as well",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-370044911,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.","Well, the thing is that it is not a demo it is a test, thus I am not able to nmake ... test & .\test.exe",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-370045157,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.","Well, the thing is that it is not a demo it is a test, thus I am not able to nmake ... test & .\test.exe

ah, right.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-370086965,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.","Here is a complete working MSVC fix:
diff --git a/src/encauth/gcm/gcm_file.c b/src/encauth/gcm/gcm_file.c
index f3c88fb3..ade1de36 100644
--- a/src/encauth/gcm/gcm_file.c
+++ b/src/encauth/gcm/gcm_file.c
@@ -17,8 +17,6 @@
 #ifdef LTC_GCM_MODE
 #ifndef LTC_NO_FILE
 
-#include <unistd.h>
-
 /**
   Process a file.
 
diff --git a/src/encauth/gcm/gcm_filehandle.c b/src/encauth/gcm/gcm_filehandle.c
index ea6fb3f9..e30fdf49 100644
--- a/src/encauth/gcm/gcm_filehandle.c
+++ b/src/encauth/gcm/gcm_filehandle.c
@@ -17,7 +17,11 @@
 #ifdef LTC_GCM_MODE
 #ifndef LTC_NO_FILE
 
+#if defined(_MSC_VER)
+#define ftruncate _chsize
+#else
 #include <unistd.h>
+#endif
 
 /**
   Process a filehandle.
diff --git a/tests/file_test.c b/tests/file_test.c
index c8ca2ece..54e9d4b2 100644
--- a/tests/file_test.c
+++ b/tests/file_test.c
@@ -9,7 +9,12 @@
 /* test file related functions */
 
 #include <tomcrypt_test.h>
+
+#if defined(_MSC_VER)
+#define unlink _unlink
+#else
 #include <unistd.h>
+#endif
 
 int file_test(void)
 {
@@ -110,13 +115,10 @@ int file_test(void)
    {
       unsigned char iv[32] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                                 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F };
-      int tmp, res;
-      char tmp_X_enc[] = ""/tmp/ltc_test_XXXXXX"";
-      char tmp_X_dec[] = ""/tmp/ltc_test_XXXXXX"";
+      int res;
+      char tmp_X_enc[] = ""tests/tempfile.enc"";
+      char tmp_X_dec[] = ""tests/tempfile.dec"";
 
-      tmp = mkstemp(tmp_X_enc);
-      if (tmp == -1) return CRYPT_FILE_NOTFOUND;
-      close(tmp);
       res = 666;
       if ((err = gcm_file(iaes,
                      key,    32,
@@ -132,12 +134,6 @@ int file_test(void)
          goto GCM_OUT_1;
       }
 
-      tmp = mkstemp(tmp_X_dec);
-      if (tmp == -1) {
-         err = CRYPT_FILE_NOTFOUND;
-         goto GCM_OUT_1;
-      }
-      close(tmp);
       res = 666;
       if ((err = gcm_file(iaes,
                      key,    32,
The rest of my comments later.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/karel-m,14,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-370253308,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.","As mentioned above the *_file API is a different story then *_file API for hashes and macs.
To be honest I do not use even existing *_file API as it has some drawbacks (e.g. on MS Windows this API does not support unicode/UTF16 filenames). We should keep in mind that ltc is a crypto library.
Other thing is that we are here in fact proposing a new format of GCM/AES encrypted file:
|ciphertext|tag-16-bytes|

For example why not to use?
|iv-16-bytes|ciphertext|tag-16-bytes|

I would even propose to support encrypting file with arbitrary length secret and deriving IV + KEY via pbkdf2 and using format like:
|pbkdf2-salt|ciphertext|tag-16-bytes|

I simply want to say that gcm_file API is perhaps something that should be rather handled on application level.
The other thing to consider here is whether it would not be better to use chacha20poly1305 instead of GCM as it has much better (== higher) limits on plain/ciphertext size.
As for the implementation I would prefer to avoid seeking because current approach does not allow to implement encrypting STDIN to STDOUT - something like:
tar cv inputdir | gzip | aesgcm -e - output.tag.gz.gcm secretkey

Which I believe can be done as there are utilities like crypt/mcrypt that support this mode.
I am for moving/incorporating gcm_filehandle.c + gcm_file.c into demos/aesgcm.c and keeping it just as a demo for now.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,342,2018-01-22T17:02:52Z,2018-03-26T14:56:25Z,2018-03-26T14:56:25Z,CLOSED,False,587,25,13,https://github.com/sjaeckel,Add new file API to GCM,6,['feature'],https://github.com/libtom/libtomcrypt/pull/342,https://github.com/sjaeckel,15,https://github.com/libtom/libtomcrypt/pull/342#issuecomment-376195522,"documentation is added or updated
 tests are added or updated

This adds two new API functions gcm_file() and gcm_filehandle() and a new demo aesgcm.
The demo is GNU only for now and real demo quality ;)
I've tried to catch error-cases as good as possible in the new API functions, please have especially a look at the error handling.",You're right! This decision&implementation should really stay on application level.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,343,2018-01-23T13:13:52Z,2018-03-25T12:12:36Z,2018-03-25T12:12:39Z,MERGED,True,594,49,16,https://github.com/sjaeckel,Add padding/depadding support,5,['feature'],https://github.com/libtom/libtomcrypt/pull/343,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/343,"documentation is added or updated
 tests are added or updated

This adds support for PKCS#7 and ISO-10126 padding schemes (under the namespace of pkcs7).","documentation is added or updated
 tests are added or updated

This adds support for PKCS#7 and ISO-10126 padding schemes (under the namespace of pkcs7).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,343,2018-01-23T13:13:52Z,2018-03-25T12:12:36Z,2018-03-25T12:12:39Z,MERGED,True,594,49,16,https://github.com/sjaeckel,Add padding/depadding support,5,['feature'],https://github.com/libtom/libtomcrypt/pull/343,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/343#issuecomment-368336556,"documentation is added or updated
 tests are added or updated

This adds support for PKCS#7 and ISO-10126 padding schemes (under the namespace of pkcs7).","The basic idea is IMO good. I would choose slightly more general API that is able to handle not only PKCS#7 padding.
I mean instead of: pkcs7_padded_length, pkcs7_pad, pkcs7_depad use something like block_padded_length, block_pad, block_depad and distinguish between padding modes by properly setting mode of flags param.
As you can see at https://en.wikipedia.org/wiki/Padding_(cryptography)#Byte_padding there is not only PKCS7:
PKCS#7          | DD DD DD DD 04 04 04 04 |                         => LTC_PAD_PKCS7
ANSI X.923      | DD DD DD DD 00 00 00 04 |                         => LTC_PAD_PKCS7_NULL
ISO 10126       | DD DD DD DD 81 A6 23 04 | aka ""randomized-pkcs7""  => LTC_PAD_PKCS7_RAND
ISO/IEC 7816-4  | DD DD DD DD 80 00 00 00 | aka ""one-and-zeroes""    => LTC_PAD_ONEANDZEROES
Zero padding    | DD DD DD DD 00 00 00 00 | aka ""null-padding""      => LTC_PAD_NULL

NOTE:  LTC_PAD_... constants are just an idea
I would personally like to see at least ""one-and-zeroes"" (on top of pkcs7) as I am supporting it in my perl bindings",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,343,2018-01-23T13:13:52Z,2018-03-25T12:12:36Z,2018-03-25T12:12:39Z,MERGED,True,594,49,16,https://github.com/sjaeckel,Add padding/depadding support,5,['feature'],https://github.com/libtom/libtomcrypt/pull/343,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/343#issuecomment-368338005,"documentation is added or updated
 tests are added or updated

This adds support for PKCS#7 and ISO-10126 padding schemes (under the namespace of pkcs7).","Thx for the feedback, very good idea!
I'd propose:
PKCS#7          | DD DD DD DD 04 04 04 04 |                         => LTC_PAD_PKCS7
ANSI X.923      | DD DD DD DD 00 00 00 04 |                         => LTC_PAD_ANSI_X923
ISO 10126       | DD DD DD DD 81 A6 23 04 | aka ""randomized-pkcs7""  => LTC_PAD_ISO_10126
ISO/IEC 7816-4  | DD DD DD DD 80 00 00 00 | aka ""one-and-zeroes""    => LTC_PAD_ISO_7816_4
Zero padding    | DD DD DD DD 00 00 00 00 | aka ""null-padding""      => LTC_PAD_ZERO

okay?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,343,2018-01-23T13:13:52Z,2018-03-25T12:12:36Z,2018-03-25T12:12:39Z,MERGED,True,594,49,16,https://github.com/sjaeckel,Add padding/depadding support,5,['feature'],https://github.com/libtom/libtomcrypt/pull/343,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/343#issuecomment-368338567,"documentation is added or updated
 tests are added or updated

This adds support for PKCS#7 and ISO-10126 padding schemes (under the namespace of pkcs7).",Sounds good.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,343,2018-01-23T13:13:52Z,2018-03-25T12:12:36Z,2018-03-25T12:12:39Z,MERGED,True,594,49,16,https://github.com/sjaeckel,Add padding/depadding support,5,['feature'],https://github.com/libtom/libtomcrypt/pull/343,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/343#issuecomment-370345097,"documentation is added or updated
 tests are added or updated

This adds support for PKCS#7 and ISO-10126 padding schemes (under the namespace of pkcs7).","Just for inspiration - libsodium API: https://download.libsodium.org/doc/helpers/padding.html
They somehow managed to live with only two functions sodium_unpad + sodium_pad",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,343,2018-01-23T13:13:52Z,2018-03-25T12:12:36Z,2018-03-25T12:12:39Z,MERGED,True,594,49,16,https://github.com/sjaeckel,Add padding/depadding support,5,['feature'],https://github.com/libtom/libtomcrypt/pull/343,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/343#issuecomment-371813444,"documentation is added or updated
 tests are added or updated

This adds support for PKCS#7 and ISO-10126 padding schemes (under the namespace of pkcs7).","Just for inspiration - libsodium API: https://download.libsodium.org/doc/helpers/padding.html

-int padding_padded_length(unsigned long *length, unsigned long mode);
-int padding_pad(unsigned char *data, unsigned long length, unsigned long padded_length, unsigned long mode);
+int padding_pad(unsigned char *data, unsigned long length, unsigned long* padded_length, unsigned long mode);

fine like that? :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,343,2018-01-23T13:13:52Z,2018-03-25T12:12:36Z,2018-03-25T12:12:39Z,MERGED,True,594,49,16,https://github.com/sjaeckel,Add padding/depadding support,5,['feature'],https://github.com/libtom/libtomcrypt/pull/343,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/343#issuecomment-371821830,"documentation is added or updated
 tests are added or updated

This adds support for PKCS#7 and ISO-10126 padding schemes (under the namespace of pkcs7).","fine like that? :)

yes",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,350,2018-02-25T16:21:53Z,2018-02-25T19:35:50Z,2018-02-25T19:35:53Z,MERGED,True,45,0,8,https://github.com/sjaeckel,Fix warnings in `XMAC_file()` functions when compiling with `LTC_NO_FILE`.,1,[],https://github.com/libtom/libtomcrypt/pull/350,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/350,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,351,2018-02-26T08:54:30Z,2018-02-26T11:55:42Z,2018-03-28T07:39:12Z,MERGED,True,1,1,1,https://github.com/karel-m,LTC_EASY & time_cipher_lrw,1,[],https://github.com/libtom/libtomcrypt/pull/351,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/351,"The compiler warning/error was:
demos/timing.c: In function ‘time_cipher_lrw’:
demos/timing.c:469:73: error: ‘return’ with a value, in function returning void [-Werror]
 static void time_cipher_lrw(void) { fprintf(stderr, ""NO LRW\n""); return 0; }
                                                                         ^
demos/timing.c:469:13: note: declared here
 static void time_cipher_lrw(void) { fprintf(stderr, ""NO LRW\n""); return 0; }
             ^~~~~~~~~~~~~~~","The compiler warning/error was:
demos/timing.c: In function ‘time_cipher_lrw’:
demos/timing.c:469:73: error: ‘return’ with a value, in function returning void [-Werror]
 static void time_cipher_lrw(void) { fprintf(stderr, ""NO LRW\n""); return 0; }
                                                                         ^
demos/timing.c:469:13: note: declared here
 static void time_cipher_lrw(void) { fprintf(stderr, ""NO LRW\n""); return 0; }
             ^~~~~~~~~~~~~~~",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,352,2018-02-28T08:33:35Z,2018-03-01T07:48:00Z,2018-03-28T07:39:12Z,MERGED,True,14,7,3,https://github.com/fperrad,some linting after ecc-asn1-minimal-part merge,3,[],https://github.com/libtom/libtomcrypt/pull/352,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/352,"here, some warnings which need analysis :
--- Module:   src/pk/asn1/der/general/der_encode_asn1_length.c (C)
                                             _
      } else if (len <= 0xffffffffffffffffULL) {
src/pk/asn1/der/general/der_encode_asn1_length.c  97  Warning 685: Relational operator '<=' always evaluates to 'true'

--- Module:   src/pk/asn1/der/general/der_encode_asn1_identifier.c (C)
                                                                              _
      if (id->class < LTC_ASN1_CL_UNIVERSAL || id->class > LTC_ASN1_CL_PRIVATE) {
src/pk/asn1/der/general/der_encode_asn1_identifier.c  45  Warning 685: Relational operator '>' always evaluates to 'false'
                                                                            _
      if (id->pc < LTC_ASN1_PC_PRIMITIVE || id->pc > LTC_ASN1_PC_CONSTRUCTED) {
src/pk/asn1/der/general/der_encode_asn1_identifier.c  48  Warning 685: Relational operator '>' always evaluates to 'false'

--- Module:   src/misc/base32/base32_decode.c (C)
                                    _
#...  { if (!(id <= BASE32_CROCKFORD)) { crypt_argchk(""id <= BASE32_CROCKFORD"",
   LTC_ARGCHK(id <= BASE32_CROCKFORD);
src/misc/base32/base32_decode.c  63  Warning 685: Relational operator '<=' always evaluates to 'true'","here, some warnings which need analysis :
--- Module:   src/pk/asn1/der/general/der_encode_asn1_length.c (C)
                                             _
      } else if (len <= 0xffffffffffffffffULL) {
src/pk/asn1/der/general/der_encode_asn1_length.c  97  Warning 685: Relational operator '<=' always evaluates to 'true'

--- Module:   src/pk/asn1/der/general/der_encode_asn1_identifier.c (C)
                                                                              _
      if (id->class < LTC_ASN1_CL_UNIVERSAL || id->class > LTC_ASN1_CL_PRIVATE) {
src/pk/asn1/der/general/der_encode_asn1_identifier.c  45  Warning 685: Relational operator '>' always evaluates to 'false'
                                                                            _
      if (id->pc < LTC_ASN1_PC_PRIMITIVE || id->pc > LTC_ASN1_PC_CONSTRUCTED) {
src/pk/asn1/der/general/der_encode_asn1_identifier.c  48  Warning 685: Relational operator '>' always evaluates to 'false'

--- Module:   src/misc/base32/base32_decode.c (C)
                                    _
#...  { if (!(id <= BASE32_CROCKFORD)) { crypt_argchk(""id <= BASE32_CROCKFORD"",
   LTC_ARGCHK(id <= BASE32_CROCKFORD);
src/misc/base32/base32_decode.c  63  Warning 685: Relational operator '<=' always evaluates to 'true'",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,352,2018-02-28T08:33:35Z,2018-03-01T07:48:00Z,2018-03-28T07:39:12Z,MERGED,True,14,7,3,https://github.com/fperrad,some linting after ecc-asn1-minimal-part merge,3,[],https://github.com/libtom/libtomcrypt/pull/352,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/352#issuecomment-369167004,"here, some warnings which need analysis :
--- Module:   src/pk/asn1/der/general/der_encode_asn1_length.c (C)
                                             _
      } else if (len <= 0xffffffffffffffffULL) {
src/pk/asn1/der/general/der_encode_asn1_length.c  97  Warning 685: Relational operator '<=' always evaluates to 'true'

--- Module:   src/pk/asn1/der/general/der_encode_asn1_identifier.c (C)
                                                                              _
      if (id->class < LTC_ASN1_CL_UNIVERSAL || id->class > LTC_ASN1_CL_PRIVATE) {
src/pk/asn1/der/general/der_encode_asn1_identifier.c  45  Warning 685: Relational operator '>' always evaluates to 'false'
                                                                            _
      if (id->pc < LTC_ASN1_PC_PRIMITIVE || id->pc > LTC_ASN1_PC_CONSTRUCTED) {
src/pk/asn1/der/general/der_encode_asn1_identifier.c  48  Warning 685: Relational operator '>' always evaluates to 'false'

--- Module:   src/misc/base32/base32_decode.c (C)
                                    _
#...  { if (!(id <= BASE32_CROCKFORD)) { crypt_argchk(""id <= BASE32_CROCKFORD"",
   LTC_ARGCHK(id <= BASE32_CROCKFORD);
src/misc/base32/base32_decode.c  63  Warning 685: Relational operator '<=' always evaluates to 'true'","src/pk/asn1/der/general/der_encode_asn1_length.c  97  Warning 685: Relational operator '<=' always evaluates to 'true'

that's true, so I would propose:
diff --git a/src/pk/asn1/der/general/der_encode_asn1_length.c b/src/pk/asn1/der/general/der_encode_asn1_length.c
index 456503c..0d871af 100644
--- a/src/pk/asn1/der/general/der_encode_asn1_length.c
+++ b/src/pk/asn1/der/general/der_encode_asn1_length.c
@@ -65,2 +65,11 @@ int der_encode_asn1_length(unsigned long len, unsigned char *out, unsigned long
          out[x++] = (unsigned char)(len&255);
+      #if ULONG_MAX != ULLONG_MAX
+      } else {
+         out[x++] = 0x84;
+         out[x++] = (unsigned char)((len>>24UL)&255);
+         out[x++] = (unsigned char)((len>>16UL)&255);
+         out[x++] = (unsigned char)((len>>8UL)&255);
+         out[x++] = (unsigned char)(len&255);
+      }
+      #else
       } else if (len <= 0xffffffffUL) {
@@ -71,3 +80,2 @@ int der_encode_asn1_length(unsigned long len, unsigned char *out, unsigned long
          out[x++] = (unsigned char)(len&255);
-   #if ULONG_MAX == ULLONG_MAX
       } else if (len <= 0xffffffffffULL) {
@@ -96,3 +104,3 @@ int der_encode_asn1_length(unsigned long len, unsigned char *out, unsigned long
          out[x++] = (unsigned char)(len&255);
-      } else if (len <= 0xffffffffffffffffULL) {
+      } else {
          out[x++] = 0x88;
@@ -106,6 +114,4 @@ int der_encode_asn1_length(unsigned long len, unsigned char *out, unsigned long
          out[x++] = (unsigned char)(len&255);
-   #endif
-      } else {
-         return CRYPT_INPUT_TOO_LONG;
       }
+      #endif
    }

The other three are both right and false positive in my opinion, as C wouldn't prevent you from doing e.g. id->class = (typeof(id->class))0xf00;. -> keep the code as it is",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,352,2018-02-28T08:33:35Z,2018-03-01T07:48:00Z,2018-03-28T07:39:12Z,MERGED,True,14,7,3,https://github.com/fperrad,some linting after ecc-asn1-minimal-part merge,3,[],https://github.com/libtom/libtomcrypt/pull/352,https://github.com/fperrad,3,https://github.com/libtom/libtomcrypt/pull/352#issuecomment-369183582,"here, some warnings which need analysis :
--- Module:   src/pk/asn1/der/general/der_encode_asn1_length.c (C)
                                             _
      } else if (len <= 0xffffffffffffffffULL) {
src/pk/asn1/der/general/der_encode_asn1_length.c  97  Warning 685: Relational operator '<=' always evaluates to 'true'

--- Module:   src/pk/asn1/der/general/der_encode_asn1_identifier.c (C)
                                                                              _
      if (id->class < LTC_ASN1_CL_UNIVERSAL || id->class > LTC_ASN1_CL_PRIVATE) {
src/pk/asn1/der/general/der_encode_asn1_identifier.c  45  Warning 685: Relational operator '>' always evaluates to 'false'
                                                                            _
      if (id->pc < LTC_ASN1_PC_PRIMITIVE || id->pc > LTC_ASN1_PC_CONSTRUCTED) {
src/pk/asn1/der/general/der_encode_asn1_identifier.c  48  Warning 685: Relational operator '>' always evaluates to 'false'

--- Module:   src/misc/base32/base32_decode.c (C)
                                    _
#...  { if (!(id <= BASE32_CROCKFORD)) { crypt_argchk(""id <= BASE32_CROCKFORD"",
   LTC_ARGCHK(id <= BASE32_CROCKFORD);
src/misc/base32/base32_decode.c  63  Warning 685: Relational operator '<=' always evaluates to 'true'",good for me.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,352,2018-02-28T08:33:35Z,2018-03-01T07:48:00Z,2018-03-28T07:39:12Z,MERGED,True,14,7,3,https://github.com/fperrad,some linting after ecc-asn1-minimal-part merge,3,[],https://github.com/libtom/libtomcrypt/pull/352,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/352#issuecomment-369377808,"here, some warnings which need analysis :
--- Module:   src/pk/asn1/der/general/der_encode_asn1_length.c (C)
                                             _
      } else if (len <= 0xffffffffffffffffULL) {
src/pk/asn1/der/general/der_encode_asn1_length.c  97  Warning 685: Relational operator '<=' always evaluates to 'true'

--- Module:   src/pk/asn1/der/general/der_encode_asn1_identifier.c (C)
                                                                              _
      if (id->class < LTC_ASN1_CL_UNIVERSAL || id->class > LTC_ASN1_CL_PRIVATE) {
src/pk/asn1/der/general/der_encode_asn1_identifier.c  45  Warning 685: Relational operator '>' always evaluates to 'false'
                                                                            _
      if (id->pc < LTC_ASN1_PC_PRIMITIVE || id->pc > LTC_ASN1_PC_CONSTRUCTED) {
src/pk/asn1/der/general/der_encode_asn1_identifier.c  48  Warning 685: Relational operator '>' always evaluates to 'false'

--- Module:   src/misc/base32/base32_decode.c (C)
                                    _
#...  { if (!(id <= BASE32_CROCKFORD)) { crypt_argchk(""id <= BASE32_CROCKFORD"",
   LTC_ARGCHK(id <= BASE32_CROCKFORD);
src/misc/base32/base32_decode.c  63  Warning 685: Relational operator '<=' always evaluates to 'true'","good for me.

can you then please just take the patch and apply&commit it?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,353,2018-03-02T08:32:31Z,2018-03-23T14:15:31Z,2018-03-23T14:15:35Z,MERGED,True,474,276,29,https://github.com/sjaeckel,Minor improvements,10,"['enhancement', 'improve API', 'bug']",https://github.com/libtom/libtomcrypt/pull/353,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/353,Preparation for further work,Preparation for further work,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,353,2018-03-02T08:32:31Z,2018-03-23T14:15:31Z,2018-03-23T14:15:35Z,MERGED,True,474,276,29,https://github.com/sjaeckel,Minor improvements,10,"['enhancement', 'improve API', 'bug']",https://github.com/libtom/libtomcrypt/pull/353,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/353#issuecomment-371298798,Preparation for further work,Idea: what about to turn scan_hex into src/misc/base16/base16_decode.c + adding also base16_encode.c?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/RektInator,1,https://github.com/libtom/libtomcrypt/pull/355,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371308691,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","What troubles do you exactly have?
The class works fine for me with VS2008 and VS2017.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/RektInator,3,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371336685,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","I am using VS2017 (using the latest windows SDK), this is what I get when I include tomcrypt.h:
1>\deps\libtomcrypt\src\headers\tomcrypt_pk.h(548): error C2236: unexpected token 'class'. Did you forget a ';'?
1>\deps\libtomcrypt\src\headers\tomcrypt_pk.h(548): error C2332: 'class': missing tag name
1>\deps\libtomcrypt\src\headers\tomcrypt_pk.h(548): warning C4201: nonstandard extension used: nameless struct/union
1>\deps\libtomcrypt\src\headers\tomcrypt_pk.h(548): error C2027: use of undefined type 'ltc_asn1_list_::'
Renaming class -> asnclass fixed the issue for me.
NOTE: Previous updates and the master branch work fine.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371393057,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","Are you including <libtomcrypt.h> into a C++ project?
Just asking - although not heavily tested it should work (to some extent).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371409929,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","I was able to reproduce with g++
In file included from src/headers/tomcrypt.h:88:0,
                 from cpp-demo.cpp:9:
src/headers/tomcrypt_pk.h:548:24: error: expected identifier before ‘;’ token
    ltc_asn1_class class;
                        ^
src/headers/tomcrypt_pk.h:548:24: error: multiple types in one declaration
src/headers/tomcrypt_pk.h:548:24: error: declaration does not declare anything [-fpermissive]

and with clang++
In file included from cpp-demo.cpp:9:
In file included from src/headers/tomcrypt.h:88:
src/headers/tomcrypt_pk.h:548:19: error: declaration of anonymous class must be a definition
   ltc_asn1_class class;
                  ^
src/headers/tomcrypt_pk.h:548:4: warning: declaration does not declare anything [-Wmissing-declarations]
   ltc_asn1_class class;
   ^~~~~~~~~~~~~~

so, yes, we should rename it",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/RektInator,6,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371643452,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","Yeah, I am indeed using libtom in a C++ project.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371746057,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","thx for updating the doc, can you please rename it to klass instead? :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371747192,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated",👍 for klass,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/RektInator,9,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371794110,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated",Alrigthy :P,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371807865,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","... and please rebase on top of develop ... sorry I only realized now that there was another PR merged already ... :-) (I canceled the travis build as the rebase will trigger a new build anyway)
If you plan to open another PR feel free to say in advance, then I can give you write-access to the repository.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/RektInator,11,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371837168,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","I will create a new pull request, based on latest develop.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371838082,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","I will create a new pull request, based on latest develop.

there's no need
if you don't have a remote for the original repo
git remote add libtom https://github.com/libtom/libtomcrypt.git
git fetch libtom

then
git checkout develop
git rebase libtom/develop
git push -f",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/RektInator,13,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371839188,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","@sjaeckel Done, thanks for the explanation ^^",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/sjaeckel,14,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371839589,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated",now you did a merge somewhere in between :D,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/sjaeckel,15,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371844452,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated",now there are two merges in there :>,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/RektInator,16,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371846014,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","I will do a hard reset to commit 249d469 and re-push the changes, that should do it, right?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/sjaeckel,17,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371847537,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","You can do a git reset --hard 0fb3c882339b7f8a558215c32e8f74c569534082, then force-push and that should be it.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/RektInator,18,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371848376,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","Alright, it should work now :P",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,355,2018-03-06T18:42:49Z,2018-03-10T09:43:15Z,2018-03-28T07:39:12Z,MERGED,True,11,11,5,https://github.com/RektInator,renamed class -> klass,1,[],https://github.com/libtom/libtomcrypt/pull/355,https://github.com/sjaeckel,19,https://github.com/libtom/libtomcrypt/pull/355#issuecomment-371855042,"Compilation errors fixed with msvc, causes keyword issues.

Checklist


 documentation is added or updated
 tests are added or updated","also fine :)
thx!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,356,2018-03-07T16:24:18Z,2018-03-08T08:58:47Z,2018-03-28T07:39:12Z,MERGED,True,2326,24,13,https://github.com/karel-m,Keccak,2,['feature'],https://github.com/libtom/libtomcrypt/pull/356,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/356,"Checklist

 documentation is added or updated
 tests are added or updated","Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,356,2018-03-07T16:24:18Z,2018-03-08T08:58:47Z,2018-03-28T07:39:12Z,MERGED,True,2326,24,13,https://github.com/karel-m,Keccak,2,['feature'],https://github.com/libtom/libtomcrypt/pull/356,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/356#issuecomment-371265078,"Checklist

 documentation is added or updated
 tests are added or updated","The original request (from a user of my perl bindings) with some reasoning why it may be a good idea to add keccak.
On 07.03.2018 1:57, Ross Anderson wrote:

Hi Karel
I wonder if you could possibly add the Keccak hash function to CryptX.
This is the type of hash that Ethereum uses. I understand it is closely related to the SHA3 hash that you already support. It seems Ethereum though was developed before the SHA3 standard was finalized, so they used the underlying Keccak function.
https://ethereum.stackexchange.com/questions/550/which-cryptographic-hash-function-does-ethereum-use
There are the following functions :-
Keccak-224
Keccak-256
Keccak-384
Keccak-512
There is an example Keccak hash online calculator at :-
http://emn178.github.io/online-tools/keccak_256.html
As Ethereum is very popular and many other cryptocurrencies use its 'ERC20' feature I think this would be a great addition to your library.
Many thanks once again
Kind regards
Ross Anderson",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,357,2018-03-07T22:36:57Z,2018-03-08T06:10:52Z,2018-03-28T07:39:12Z,MERGED,True,1,1,1,https://github.com/karel-m,MSVC fix warning: signed/unsigned mismatch,1,[],https://github.com/libtom/libtomcrypt/pull/357,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/357,"The warning was:
src\pk\asn1\der\general\der_encode_asn1_identifier.c(33) : warning C4018: '>=' : signed/unsigned mismatch","The warning was:
src\pk\asn1\der\general\der_encode_asn1_identifier.c(33) : warning C4018: '>=' : signed/unsigned mismatch",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,358,2018-03-10T10:37:36Z,2018-03-10T21:42:35Z,2018-03-28T07:39:12Z,MERGED,True,15,4,3,https://github.com/sjaeckel,Travis/build debug,2,[],https://github.com/libtom/libtomcrypt/pull/358,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/358,Fixup of #355 and add new test-build to prevent this to happen in the future,Fixup of #355 and add new test-build to prevent this to happen in the future,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,359,2018-03-16T18:20:38Z,2018-03-27T00:25:26Z,2018-03-28T07:39:12Z,MERGED,True,60,33,1,https://github.com/vchong,ltc: ctr: improve performance,2,['enhancement'],https://github.com/libtom/libtomcrypt/pull/359,https://github.com/vchong,1,https://github.com/libtom/libtomcrypt/pull/359,"When accel_ctr_encrypt() is not used, accel_ecb_encrypt() is used via
ecb_encrypt() instead. The accel_ecb_encrypt() is frequently called at
every single block process. VFP assembly code called from the
accel_ecb_encrypt() is protected by
tomcrypt_arm_neon_enable()/disable(). FIQ enable/disable and VFP
register save/restore (64bitx32 registers!) to/from memory are done in
the tomcrypt_arm_neon_enable()/disable(). These overhead exist in each
single block process cause the degradation of system performance
eventually. Cases where h/w accelerated AES-CTR did not show any effects
or showed less performance than pure software processing have been
observed.
This patch resolves the issue by increasing utilization rate of
accel_ctr_encrypt().
Signed-off-by: Tetsuya Yoshizaki yoshizaki.tetsuya@socionext.com
Signed-off-by: Victor Chong victor.chong@linaro.org","When accel_ctr_encrypt() is not used, accel_ecb_encrypt() is used via
ecb_encrypt() instead. The accel_ecb_encrypt() is frequently called at
every single block process. VFP assembly code called from the
accel_ecb_encrypt() is protected by
tomcrypt_arm_neon_enable()/disable(). FIQ enable/disable and VFP
register save/restore (64bitx32 registers!) to/from memory are done in
the tomcrypt_arm_neon_enable()/disable(). These overhead exist in each
single block process cause the degradation of system performance
eventually. Cases where h/w accelerated AES-CTR did not show any effects
or showed less performance than pure software processing have been
observed.
This patch resolves the issue by increasing utilization rate of
accel_ctr_encrypt().
Signed-off-by: Tetsuya Yoshizaki yoshizaki.tetsuya@socionext.com
Signed-off-by: Victor Chong victor.chong@linaro.org",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,359,2018-03-16T18:20:38Z,2018-03-27T00:25:26Z,2018-03-28T07:39:12Z,MERGED,True,60,33,1,https://github.com/vchong,ltc: ctr: improve performance,2,['enhancement'],https://github.com/libtom/libtomcrypt/pull/359,https://github.com/vchong,2,https://github.com/libtom/libtomcrypt/pull/359#issuecomment-373802948,"When accel_ctr_encrypt() is not used, accel_ecb_encrypt() is used via
ecb_encrypt() instead. The accel_ecb_encrypt() is frequently called at
every single block process. VFP assembly code called from the
accel_ecb_encrypt() is protected by
tomcrypt_arm_neon_enable()/disable(). FIQ enable/disable and VFP
register save/restore (64bitx32 registers!) to/from memory are done in
the tomcrypt_arm_neon_enable()/disable(). These overhead exist in each
single block process cause the degradation of system performance
eventually. Cases where h/w accelerated AES-CTR did not show any effects
or showed less performance than pure software processing have been
observed.
This patch resolves the issue by increasing utilization rate of
accel_ctr_encrypt().
Signed-off-by: Tetsuya Yoshizaki yoshizaki.tetsuya@socionext.com
Signed-off-by: Victor Chong victor.chong@linaro.org",Based on OP-TEE/optee_os#2176 with mods to fit the structure here.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,363,2018-03-23T22:37:53Z,2018-04-10T02:23:20Z,2018-04-10T02:23:23Z,MERGED,True,189,36,7,https://github.com/sjaeckel,Improve Fortuna PRNG,5,"['enhancement', 'bug']",https://github.com/libtom/libtomcrypt/pull/363,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/363,"documentation is added or updated
 tests are added or updated

This updates the Fortuna implementation to be more in-line with the original specification.
It adds the fortuna_add_random_event() function, an alternative to fortuna_add_entropy() and makes fortuna_update_seed() public.
Additionally it fixes a bug in the reseed rate-limit which should only happen after pool0_len >= 64 AND rate-limit expired which was an OR before, c.f. Chapter 9.5.5 of [1].
Or simplified as stated by @tyzoid in IRC, the new behavior is ""...if we've got enough entropy in the buffer, and it's been long enough that we probably should reseed, then we will do so"" whereas the old buggy behavior was ""...pretty much constantly reseeding with an empty buffer"".","documentation is added or updated
 tests are added or updated

This updates the Fortuna implementation to be more in-line with the original specification.
It adds the fortuna_add_random_event() function, an alternative to fortuna_add_entropy() and makes fortuna_update_seed() public.
Additionally it fixes a bug in the reseed rate-limit which should only happen after pool0_len >= 64 AND rate-limit expired which was an OR before, c.f. Chapter 9.5.5 of [1].
Or simplified as stated by @tyzoid in IRC, the new behavior is ""...if we've got enough entropy in the buffer, and it's been long enough that we probably should reseed, then we will do so"" whereas the old buggy behavior was ""...pretty much constantly reseeding with an empty buffer"".",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,363,2018-03-23T22:37:53Z,2018-04-10T02:23:20Z,2018-04-10T02:23:23Z,MERGED,True,189,36,7,https://github.com/sjaeckel,Improve Fortuna PRNG,5,"['enhancement', 'bug']",https://github.com/libtom/libtomcrypt/pull/363,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/363#issuecomment-376458815,"documentation is added or updated
 tests are added or updated

This updates the Fortuna implementation to be more in-line with the original specification.
It adds the fortuna_add_random_event() function, an alternative to fortuna_add_entropy() and makes fortuna_update_seed() public.
Additionally it fixes a bug in the reseed rate-limit which should only happen after pool0_len >= 64 AND rate-limit expired which was an OR before, c.f. Chapter 9.5.5 of [1].
Or simplified as stated by @tyzoid in IRC, the new behavior is ""...if we've got enough entropy in the buffer, and it's been long enough that we probably should reseed, then we will do so"" whereas the old buggy behavior was ""...pretty much constantly reseeding with an empty buffer"".","Not that I am against this PR, I only need more time for review, stay tuned.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/364,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?",True,{'HOORAY': ['https://github.com/exploide']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/eduardsui,2,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-401398364,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?",Any news about this? Is really useful in TLS 1.3 key share.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-401948742,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","@karel-m @eduardsui & whoever else feels like... you're all welcome to review, after I've got the OK on the API I'll finish&add the docs.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-403549264,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","@sjaeckel is the branch feature/curve25519 anyhow special? I am unable to do git checkout.
$ git fetch origin
$ git checkout feature/curve25519
error: pathspec 'feature/curve25519' did not match any file(s) known to git.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-403718276,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","@sjaeckel is the branch feature/curve25519 anyhow special? I am unable to do git checkout.

~/tmp $ git clone https://github.com/libtom/libtomcrypt
Cloning into 'libtomcrypt'...
remote: Counting objects: 17259, done.
remote: Compressing objects: 100% (79/79), done.
remote: Total 17259 (delta 45), reused 74 (delta 33), pack-reused 17145
Receiving objects: 100% (17259/17259), 19.89 MiB | 1.72 MiB/s, done.
Resolving deltas: 100% (13064/13064), done.
Checking connectivity... done.
~/tmp $ cd libtomcrypt/
~/tmp/libtomcrypt $ git co feature/curve25519
Branch feature/curve25519 set up to track remote branch feature/curve25519 from origin.
Switched to a new branch 'feature/curve25519'
~/tmp/libtomcrypt $ git config alias.co
checkout

not that I'm aware of",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-409286701,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?",*ping*,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-413031123,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","First of all some link to documents we might want to follow:

https://tools.ietf.org/html/rfc7748 - Elliptic Curves for Security (X25519 and X448)
https://tools.ietf.org/html/rfc8032 - Edwards-Curve Digital Signature Algorithm (EdDSA)
https://tools.ietf.org/html/rfc8410 - priv/pub key formats (ASN.1)
https://tools.ietf.org/html/rfc8411 - related to OIDs
https://tools.ietf.org/html/rfc8418 - EC Diffie-Hellman with X25519 and X448
https://tools.ietf.org/html/rfc8419 - EdDSA - Cryptographic Message Syntax (CMS)

We are not going to deal with Curve448 in this PR but we should keep it in mind so that in the future the maths stuff can be shared between 25519/448.
Ad 25519 API I am not sure about naming convention:

ed25519_sign
ed25519_verify
x25519_shared_secret

In our old ecc_* world we use

ecc_sign_hash (despite the fact that industry standard name here is ""ecdsa"")
ecc_verify_hash
ecc_shared_secret (despite the fact that industry standard name here is ""ecdh"")

So why not this:

ec25519_sign_hash  (+ later perhaps also ec448_sigh_hash)
ec25519_verify_hash
ec25519_shared_secret

Things are IMO getting more tricky with signatures. According to EdDSA/rfc8032 there are:

ed25519_sign_ph = Pre-Hashed-EdDSA
ed25519_sign = Pure-EdDSA
ed25519_sign_ctx  = some odd stuff

The Pre-Hashed-EdDSA fits well our current interface ec25519_sign_hash / ec25519_verify_hash. However, the Pure-EdDSA IMO will need init-update-done style API like: ec25519_sign_init / ec25519_sign_update / ec25519_sign_done (+ similar set of functions for verification). We can of course decide to only support Pure-EdDSA created in ""one-go"" (e.g. ec25519_sign_pure).
As for the keys we will probably need some import/export functions supporting ASN.1 defined in rfc8410. Considering our recently face-lifted ecc API I would prefer renaming ed25519_export / ed25519_import to something like:
int  ec25519_set_key(const unsigned char *in, unsigned long inlen, int type, ecc_key *key);
int  ec25519_get_key(unsigned char *out, unsigned long *outlen, int type, const ecc_key *key);
And maybe rename ed25519_set_key to ec25519_set_keypair.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-413036343,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","An interesting/surprising quote from https://tools.ietf.org/html/rfc8410#section-4
Both [RFC7748] and [RFC8032] define the public key value as being a
byte string.  It should be noted that the public key is computed
differently for each of these documents; thus, the same private key
will not produce the same public key.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-419344127,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","An interesting/surprising quote from https://tools.ietf.org/html/rfc8410#section-4

that's exactly the reason why there's a separate ed25519_X() and x25519_X() API ...
... I was too lazy to include the key conversion :-) ...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/karel-m,10,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-419350092,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","As for the keys they need to be very carefully documented as it is really a mess.
Here are some IMO useful links related to ec25519 keys:

https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/ (discussion only about ed25519)
jedisct1/libsodium#77 (this is interesting as it is a request + discussion about unifying ed25519 / x25519 - which I have mentioned above)
https://signal.org/docs/specifications/xeddsa/ (this is how signal handles eddsa/eddh with the same key)
https://moderncrypto.org/mail-archive/curves/2015/000376.html (a thread about unifying ed25519/x25519 public keys)

Slightly OT: as for the actual implementation I have found:

https://tweetnacl.cr.yp.to/software.html
it implements Curve25519 and Ed25519 and looks simple / concise (= maintainable)
to me it looks like a slightly better candidate to include into libtomcrypt than the current reference implementation",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/sjaeckel,11,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-482168501,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","Alright, I've made the move to tweetnacl. (that was easier than I expected :-) )
Regarding the key conversion I'm not 100% sure where we should head to... this is all pretty unclear to me until now, AFAIU everything is possible (ed->x and x->ed conversion) but it's not sure if you really should do it in one way or the other regarding cryptographic security...
You're proposing to provide an ec25519 API where I'm not sure if that's really useful as we don't really know what the user wants to do and what its environment is... especially since everyone seems to say ""if you can afford it, use an Ed key for signatures and an X key for shared secret"".
In case we add it it'd mean that we have sign+verify+shared_secret in ec25519 space, but we still have to provide make_key+import+export+set_keypair in Ed and X space!
I'd be fine to provide API functions to do the conversion, but for now I tend to stay with only two different API's.
Your thoughts? Everybody's welcome to comment on this :-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-499378462,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","@karel-m do you probably have the time to look at this in the next few days?
Regarding the things you mentioned:

tweetnacl: that was a good idea to move away to this implementation!
ec25519 API: see my comment above, I've moved tweetnacl already to the correct folder, so there's at least only 3 of them when we add ec25519 API's...
key conversion: also see my comment above, I currently don't need it and I think it can be added at a later point of time.
other EdDSA modes: as you proposed they're going to get different API's and as I currently also don't need this functionality it can be added later when required/requested.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-499863836,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","Unfortunately I am do not have enough time to make a thorough check but after a quick skim I like it; although I might have some suggestions later.
I am for merging this into develop + creating a new issue tracking TODOs related to curve25519 (doc update, check interoperability with other libs, key conversion etc.)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/sjaeckel,14,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-499864717,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","thanks!

although I might have some suggestions later.

I'm looking forward to that!

doc update

I will do now and merge afterwards (if I don't do it now, I'll do it never :D )

check interoperability with other libs

will add an issue

key conversion

will add an issue",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,364,2018-03-25T13:43:22Z,2019-06-09T20:22:39Z,2019-06-09T20:22:43Z,MERGED,True,2279,101,30,https://github.com/sjaeckel,Add curve25519,12,['feature'],https://github.com/libtom/libtomcrypt/pull/364,https://github.com/sjaeckel,15,https://github.com/libtom/libtomcrypt/pull/364#issuecomment-500229337,"documentation is added or updated will be done in an upcoming PR
 tests are added or updated

This adds a LTC API on top of the original curve25519 (ed25519&X25519) implementations of djb.
The PR is based on top of the feature/curve25519_originals branch which contains the original sources + their amalgamation.
This PR contains all the changes that I've made to the original sources + the new API.
As soon as we agree on the API I'll add docs.
[Edit]
btw. I've changed the base-branch to feature/curve25519_originals so this review contains only the major changes to the sources&added functions
should I also open a PR for feature/curve25519_originals or do we simply change the target branch to develop before merging?","While starting to add the documentation, I already stumbled over some parts but I will open a separate PR soon with some API changes&additions + documentation",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,365,2018-03-25T17:48:07Z,2018-03-27T21:18:16Z,2018-03-28T07:39:12Z,MERGED,True,158,52,4,https://github.com/karel-m,Make base64_decode relaxed mode less relaxed,6,['bug'],https://github.com/libtom/libtomcrypt/pull/365,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/365,"Checklist

 documentation is added or updated
 tests are added or updated","Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,365,2018-03-25T17:48:07Z,2018-03-27T21:18:16Z,2018-03-28T07:39:12Z,MERGED,True,158,52,4,https://github.com/karel-m,Make base64_decode relaxed mode less relaxed,6,['bug'],https://github.com/libtom/libtomcrypt/pull/365,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/365#issuecomment-376001618,"Checklist

 documentation is added or updated
 tests are added or updated","@sjaeckel wrote off-list:
I think we should try to keep this super relaxed mode if possible, as that's the one that is compatible with the old 1.17 behavior, right?

IMO the current super relaxed mode may be dangerous when you are decoding data from external sources (e.g. from a user request) because we are ""able"" to decode nearly any invalid input data. I am open to discussion what other characters should be ignored in relaxed mode.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,365,2018-03-25T17:48:07Z,2018-03-27T21:18:16Z,2018-03-28T07:39:12Z,MERGED,True,158,52,4,https://github.com/karel-m,Make base64_decode relaxed mode less relaxed,6,['bug'],https://github.com/libtom/libtomcrypt/pull/365,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/365#issuecomment-376202601,"Checklist

 documentation is added or updated
 tests are added or updated","IMO the current super relaxed mode may be dangerous when you are decoding data from external sources (e.g. from a user request)...

I fully agree! ... and that's also what is said in RFC 4648 ...
But I also think that we shouldn't break existing code or at least give the possibility to enable the old behavior if required... so we've several options I guess...

add a new API function base64_insane_decode() and fix the original
add a new API function base64_sane_decode() and keep the original
add a way to set the level of sanity checking...
a. globally via a global
b. globally via base64_set_decode_sanity()
c. on the API level via exporting the sanity parameter
d. at compile time
or a combination of some of the above or something else I didn't think of?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,365,2018-03-25T17:48:07Z,2018-03-27T21:18:16Z,2018-03-28T07:39:12Z,MERGED,True,158,52,4,https://github.com/karel-m,Make base64_decode relaxed mode less relaxed,6,['bug'],https://github.com/libtom/libtomcrypt/pull/365,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/365#issuecomment-376277990,"Checklist

 documentation is added or updated
 tests are added or updated",From the options above I prefer base64_sane_decode() approach,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,365,2018-03-25T17:48:07Z,2018-03-27T21:18:16Z,2018-03-28T07:39:12Z,MERGED,True,158,52,4,https://github.com/karel-m,Make base64_decode relaxed mode less relaxed,6,['bug'],https://github.com/libtom/libtomcrypt/pull/365,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/365#issuecomment-376280096,"Checklist

 documentation is added or updated
 tests are added or updated","From the options above I prefer base64_sane_decode() approach

👍
base64_sane_decode() shall it be
so we have now 3 possible values enum(insane, relaxed, strict) where the default base64_decode() is insane :D",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,365,2018-03-25T17:48:07Z,2018-03-27T21:18:16Z,2018-03-28T07:39:12Z,MERGED,True,158,52,4,https://github.com/karel-m,Make base64_decode relaxed mode less relaxed,6,['bug'],https://github.com/libtom/libtomcrypt/pull/365,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/365#issuecomment-376303430,"Checklist

 documentation is added or updated
 tests are added or updated",base64_sane_decode or base64_relaxed_decode?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,365,2018-03-25T17:48:07Z,2018-03-27T21:18:16Z,2018-03-28T07:39:12Z,MERGED,True,158,52,4,https://github.com/karel-m,Make base64_decode relaxed mode less relaxed,6,['bug'],https://github.com/libtom/libtomcrypt/pull/365,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/365#issuecomment-376314313,"Checklist

 documentation is added or updated
 tests are added or updated",I think base64_sane_decode() is more appropriate as base64_relaxed_decode() is basically lying because base64_decode() is more relaxed...,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,365,2018-03-25T17:48:07Z,2018-03-27T21:18:16Z,2018-03-28T07:39:12Z,MERGED,True,158,52,4,https://github.com/karel-m,Make base64_decode relaxed mode less relaxed,6,['bug'],https://github.com/libtom/libtomcrypt/pull/365,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/365#issuecomment-376456557,"Checklist

 documentation is added or updated
 tests are added or updated",@sjaeckel please review again,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,365,2018-03-25T17:48:07Z,2018-03-27T21:18:16Z,2018-03-28T07:39:12Z,MERGED,True,158,52,4,https://github.com/karel-m,Make base64_decode relaxed mode less relaxed,6,['bug'],https://github.com/libtom/libtomcrypt/pull/365,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/365#issuecomment-376643716,"Checklist

 documentation is added or updated
 tests are added or updated",Is it ok?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,366,2018-03-25T18:01:19Z,2018-03-26T19:06:44Z,2018-03-28T07:39:13Z,MERGED,True,51,49,9,https://github.com/karel-m,base64 - use `char *` for Base64 strings,2,['enhancement'],https://github.com/libtom/libtomcrypt/pull/366,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/366,"Checklist

 documentation is added or updated
 tests are added or updated","Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,367,2018-03-25T20:20:45Z,2018-03-26T14:41:26Z,2018-03-28T07:39:13Z,MERGED,True,13,12,2,https://github.com/karel-m,base32_encode - make the output NUL-terminated,1,[],https://github.com/libtom/libtomcrypt/pull/367,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/367,"Checklist

 documentation is added or updated
 tests are added or updated

This makes base32_encode behaviour consistent with base64_encode - the output (Base32 string) is NUL-terminated.","Checklist

 documentation is added or updated
 tests are added or updated

This makes base32_encode behaviour consistent with base64_encode - the output (Base32 string) is NUL-terminated.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,368,2018-03-26T13:47:49Z,2018-03-27T10:58:19Z,2018-03-28T07:39:13Z,MERGED,True,37,21,4,https://github.com/sjaeckel,Improve base16,3,['enhancement'],https://github.com/libtom/libtomcrypt/pull/368,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/368,"documentation is added or updated
 tests are added or updated

c.f. #361 (comment)
This also fixes the index of crypt.pdf :)","documentation is added or updated
 tests are added or updated

c.f. #361 (comment)
This also fixes the index of crypt.pdf :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,368,2018-03-26T13:47:49Z,2018-03-27T10:58:19Z,2018-03-28T07:39:13Z,MERGED,True,37,21,4,https://github.com/sjaeckel,Improve base16,3,['enhancement'],https://github.com/libtom/libtomcrypt/pull/368,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/368#issuecomment-376175334,"documentation is added or updated
 tests are added or updated

c.f. #361 (comment)
This also fixes the index of crypt.pdf :)","I think we should reject invalid input in base16_decode, like accept only 0-9a-fA-F. IIUC current implementation decodes any input into something.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,369,2018-03-26T14:59:39Z,2018-03-27T17:39:14Z,2018-03-28T07:39:13Z,MERGED,True,443,2,5,https://github.com/sjaeckel,Add aesgcm demo,2,['feature'],https://github.com/libtom/libtomcrypt/pull/369,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/369,This is a follow-up of #342,This is a follow-up of #342,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,369,2018-03-26T14:59:39Z,2018-03-27T17:39:14Z,2018-03-28T07:39:13Z,MERGED,True,443,2,5,https://github.com/sjaeckel,Add aesgcm demo,2,['feature'],https://github.com/libtom/libtomcrypt/pull/369,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/369#issuecomment-376458439,This is a follow-up of #342,"This is basically fine, I only prefer that  demos/*.c are self-containing demos so that a libtomcrypt user can simply cut&paste&tweak the code.  What about putting all the stuff into demos/aesgcm.c?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,369,2018-03-26T14:59:39Z,2018-03-27T17:39:14Z,2018-03-28T07:39:13Z,MERGED,True,443,2,5,https://github.com/sjaeckel,Add aesgcm demo,2,['feature'],https://github.com/libtom/libtomcrypt/pull/369,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/369#issuecomment-376487892,This is a follow-up of #342,"This is basically fine, I only prefer that demos/*.c are self-containing demos so that a libtomcrypt user can simply cut&paste&tweak the code. What about putting all the stuff into demos/aesgcm.c?

as this originates in a PR which tried to introduce those as new API functions I thought it'd make sense to leave them separated.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,369,2018-03-26T14:59:39Z,2018-03-27T17:39:14Z,2018-03-28T07:39:13Z,MERGED,True,443,2,5,https://github.com/sjaeckel,Add aesgcm demo,2,['feature'],https://github.com/libtom/libtomcrypt/pull/369,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/369#issuecomment-376500773,This is a follow-up of #342,"OK, I'll leave it up to you.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,369,2018-03-26T14:59:39Z,2018-03-27T17:39:14Z,2018-03-28T07:39:13Z,MERGED,True,443,2,5,https://github.com/sjaeckel,Add aesgcm demo,2,['feature'],https://github.com/libtom/libtomcrypt/pull/369,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/369#issuecomment-376505480,This is a follow-up of #342,"I liked your points regarding the output-format and algorithm selection, so I thought it could probably be refactored at one point into a more general solution for all AEAD algorithms :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,369,2018-03-26T14:59:39Z,2018-03-27T17:39:14Z,2018-03-28T07:39:13Z,MERGED,True,443,2,5,https://github.com/sjaeckel,Add aesgcm demo,2,['feature'],https://github.com/libtom/libtomcrypt/pull/369,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/369#issuecomment-376509799,This is a follow-up of #342,"a more general solution for all AEAD algorithms

Keep in mind that not all AEAD algs are suitable for file encryption due to max. size limit. GCM has limit approx. 2^39, ChaCha20Poly1305 has limit AFAIK 2^64 (or a little bit more), the other AEAD algorithms are IMO unusable for large file encryption.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,369,2018-03-26T14:59:39Z,2018-03-27T17:39:14Z,2018-03-28T07:39:13Z,MERGED,True,443,2,5,https://github.com/sjaeckel,Add aesgcm demo,2,['feature'],https://github.com/libtom/libtomcrypt/pull/369,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/369#issuecomment-376537761,This is a follow-up of #342,"Keep in mind that not all AEAD algs are suitable for file encryption due to max. size limit




algo
max AE




OCB3
2^48 blocks (2^55 bits or 4 petabytes)


CCM
2^64 blocks


GCM
2^39 - 256 bits


EAX
?


ChaCha20Poly1305
2^64 blocks



true, you shouldn't use them for really large files... and we should think about creating a table with a summary of this, but this reminds me of #216 :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,370,2018-03-27T23:08:16Z,2018-03-28T07:17:30Z,2018-04-23T07:44:44Z,CLOSED,False,7,7,2,https://github.com/karel-m,fix base64_encode to properly add NUL termination,1,[],https://github.com/libtom/libtomcrypt/pull/370,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/370,this one is really interesting,this one is really interesting,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,370,2018-03-27T23:08:16Z,2018-03-28T07:17:30Z,2018-04-23T07:44:44Z,CLOSED,False,7,7,2,https://github.com/karel-m,fix base64_encode to properly add NUL termination,1,[],https://github.com/libtom/libtomcrypt/pull/370,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/370#issuecomment-376706341,this one is really interesting,"True, very nice one!
it's somehow a nice mix of ""NUL-termination"" and ""return actual length in length-pointer""
and I like especially the following use-case in the version before this fix...
p = malloc(1234);
base64_encode(..., foo, &bar);
p = realloc(p, bar);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,370,2018-03-27T23:08:16Z,2018-03-28T07:17:30Z,2018-04-23T07:44:44Z,CLOSED,False,7,7,2,https://github.com/karel-m,fix base64_encode to properly add NUL termination,1,[],https://github.com/libtom/libtomcrypt/pull/370,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/370#issuecomment-376706585,this one is really interesting,"The fix will probably break a lot of code.
For consistency it might be better not to add terminating NUL byte in all base(16|32|64)_encode functions.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,370,2018-03-27T23:08:16Z,2018-03-28T07:17:30Z,2018-04-23T07:44:44Z,CLOSED,False,7,7,2,https://github.com/karel-m,fix base64_encode to properly add NUL termination,1,[],https://github.com/libtom/libtomcrypt/pull/370,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/370#issuecomment-376707647,this one is really interesting,"Or we can ""break"" for consistency base(16|32)_encode in the same way as base64_encode.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,370,2018-03-27T23:08:16Z,2018-03-28T07:17:30Z,2018-04-23T07:44:44Z,CLOSED,False,7,7,2,https://github.com/karel-m,fix base64_encode to properly add NUL termination,1,[],https://github.com/libtom/libtomcrypt/pull/370,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/370#issuecomment-376769287,this one is really interesting,I think it would be better to apply #370 instead of this PR.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,370,2018-03-27T23:08:16Z,2018-03-28T07:17:30Z,2018-04-23T07:44:44Z,CLOSED,False,7,7,2,https://github.com/karel-m,fix base64_encode to properly add NUL termination,1,[],https://github.com/libtom/libtomcrypt/pull/370,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/370#issuecomment-376786448,this one is really interesting,closed in favor of #371,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,371,2018-03-28T05:47:22Z,2018-03-28T07:30:57Z,2018-03-28T07:39:13Z,MERGED,True,7,9,5,https://github.com/karel-m,consistent NUL byte handling in baseNN_encode,1,[],https://github.com/libtom/libtomcrypt/pull/371,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/371,alternative to #370,alternative to #370,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,371,2018-03-28T05:47:22Z,2018-03-28T07:30:57Z,2018-03-28T07:39:13Z,MERGED,True,7,9,5,https://github.com/karel-m,consistent NUL byte handling in baseNN_encode,1,[],https://github.com/libtom/libtomcrypt/pull/371,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/371#issuecomment-376786729,alternative to #370,can you please add a sentence regarding this behavior in the doc of base16/32/64?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,373,2018-03-30T00:02:00Z,2018-04-13T07:42:47Z,2018-04-13T07:42:50Z,MERGED,True,47,1,6,https://github.com/sjaeckel,implement DER recursion limit,1,['enhancement'],https://github.com/libtom/libtomcrypt/pull/373,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/373,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,373,2018-03-30T00:02:00Z,2018-04-13T07:42:47Z,2018-04-13T07:42:50Z,MERGED,True,47,1,6,https://github.com/sjaeckel,implement DER recursion limit,1,['enhancement'],https://github.com/libtom/libtomcrypt/pull/373,https://github.com/buggywhip,2,https://github.com/libtom/libtomcrypt/pull/373#issuecomment-377583036,,Looks good.  I like the default limit (30) being customizable in tomcrypt_custom.h.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,373,2018-03-30T00:02:00Z,2018-04-13T07:42:47Z,2018-04-13T07:42:50Z,MERGED,True,47,1,6,https://github.com/sjaeckel,implement DER recursion limit,1,['enhancement'],https://github.com/libtom/libtomcrypt/pull/373,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/373#issuecomment-378265297,,"I'm not sure if this should only be applied to der_decode_sequence_flexi() as the parameters of der_decode_sequence() are constructed by a developer and I don't know if we really should prevent someone from shooting his own foot... Also this would remove the inconsistency of der_decode_sequence() vs. der_encode_sequence() that exists after this patch, where we can encode deeper-constructed elements than we can decode.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,373,2018-03-30T00:02:00Z,2018-04-13T07:42:47Z,2018-04-13T07:42:50Z,MERGED,True,47,1,6,https://github.com/sjaeckel,implement DER recursion limit,1,['enhancement'],https://github.com/libtom/libtomcrypt/pull/373,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/373#issuecomment-379499448,,"Have you considered:
int der_decode_custom_type_ex(const unsigned char *in, unsigned long inlen,
                                     ltc_asn1_list *root,
                                     ltc_asn1_list *list, unsigned long outlen,
                                     unsigned int max_depth,
                                     unsigned int flags)
?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,373,2018-03-30T00:02:00Z,2018-04-13T07:42:47Z,2018-04-13T07:42:50Z,MERGED,True,47,1,6,https://github.com/sjaeckel,implement DER recursion limit,1,['enhancement'],https://github.com/libtom/libtomcrypt/pull/373,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/373#issuecomment-379711722,,"can you please give your opinion on my previous comment?

Have you considered:
int der_decode_custom_type_ex(const unsigned char *in, unsigned long inlen,
ltc_asn1_list *root,
ltc_asn1_list *list, unsigned long outlen,
unsigned int max_depth,
unsigned int flags)
?

I thought about it, but I think then we could also do it like:
diff --git a/src/headers/tomcrypt_pk.h b/src/headers/tomcrypt_pk.h
index f312acd..3b1bc58 100644
--- a/src/headers/tomcrypt_pk.h
+++ b/src/headers/tomcrypt_pk.h
@@ -637,4 +637,4 @@ int der_decode_sequence_ex(const unsigned char *in, unsigned long  inlen,
 
-#define der_decode_sequence(in, inlen, list, outlen) der_decode_sequence_ex(in, inlen, list, outlen, LTC_DER_SEQ_SEQUENCE | LTC_DER_SEQ_RELAXED)
-#define der_decode_sequence_strict(in, inlen, list, outlen) der_decode_sequence_ex(in, inlen, list, outlen, LTC_DER_SEQ_SEQUENCE | LTC_DER_SEQ_STRICT)
+#define der_decode_sequence(in, inlen, list, outlen) der_decode_sequence_ex(in, inlen, list, outlen, ((LTC_DER_MAX_RECURSION << 8) & LTC_DER_SEQ_DEPTH) | LTC_DER_SEQ_SEQUENCE | LTC_DER_SEQ_RELAXED)
+#define der_decode_sequence_strict(in, inlen, list, outlen) der_decode_sequence_ex(in, inlen, list, outlen, ((LTC_DER_MAX_RECURSION << 8) & LTC_DER_SEQ_DEPTH) | LTC_DER_SEQ_SEQUENCE | LTC_DER_SEQ_STRICT)
 
@@ -682,3 +682,3 @@ extern const unsigned long der_asn1_type_to_identifier_map_sz;
 /* SET */
-#define der_decode_set(in, inlen, list, outlen) der_decode_sequence_ex(in, inlen, list, outlen, LTC_DER_SEQ_SET)
+#define der_decode_set(in, inlen, list, outlen) der_decode_sequence_ex(in, inlen, list, outlen, ((LTC_DER_MAX_RECURSION << 8) & LTC_DER_SEQ_DEPTH) |LTC_DER_SEQ_SET)
 #define der_length_set der_length_sequence
diff --git a/src/pk/asn1/der/custom_type/der_decode_custom_type.c b/src/pk/asn1/der/custom_type/der_decode_custom_type.c
index ebf180f..c7cf7f6 100644
--- a/src/pk/asn1/der/custom_type/der_decode_custom_type.c
+++ b/src/pk/asn1/der/custom_type/der_decode_custom_type.c
@@ -29,3 +29,3 @@ int der_decode_custom_type(const unsigned char *in, unsigned long  inlen,
    LTC_ARGCHK(root != NULL);
-   return der_decode_custom_type_ex(in, inlen, root, NULL, 0, LTC_DER_SEQ_ORDERED | LTC_DER_SEQ_RELAXED);
+   return der_decode_custom_type_ex(in, inlen, root, NULL, 0, ((LTC_DER_MAX_RECURSION << 8) & LTC_DER_SEQ_DEPTH) | LTC_DER_SEQ_ORDERED | LTC_DER_SEQ_RELAXED);
 }
@@ -143,3 +143,3 @@ int der_decode_custom_type_ex(const unsigned char *in,   unsigned long  inlen,
    depth = (flags & LTC_DER_SEQ_DEPTH) >> 8;
-   if (depth > LTC_DER_MAX_RECURSION) {
+   if (depth == 0) {
       err = CRYPT_PK_ASN1_ERROR;
@@ -147,3 +147,3 @@ int der_decode_custom_type_ex(const unsigned char *in,   unsigned long  inlen,
    }
-   depth++;
+   depth--;
    flags &= ~LTC_DER_SEQ_DEPTH;

so the caller has to pass-in the max-depth on usage of der_decode_custom_type_ex() resp. der_decode_sequence_ex() (which simply forwards flags)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,373,2018-03-30T00:02:00Z,2018-04-13T07:42:47Z,2018-04-13T07:42:50Z,MERGED,True,47,1,6,https://github.com/sjaeckel,implement DER recursion limit,1,['enhancement'],https://github.com/libtom/libtomcrypt/pull/373,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/373#issuecomment-379895348,,"I'm not sure if this should only be applied to der_decode_sequence_flexi() as the parameters of der_decode_sequence() are constructed by a developer and ...

I would only handle max depth check in der_decode_sequence_flexi where it is clearly a must.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,374,2018-04-06T08:20:30Z,2018-04-08T00:56:21Z,2018-04-08T00:56:24Z,MERGED,True,12,0,1,https://github.com/sjaeckel,fix aesgcm on cygwin,1,['bug'],https://github.com/libtom/libtomcrypt/pull/374,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/374,This fixes #372,This fixes #372,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,375,2018-04-08T12:32:59Z,2018-04-08T14:22:05Z,2018-04-08T14:22:09Z,MERGED,True,3,1,1,https://github.com/karel-m,Fix -Wunused-const-variable in aes_tab.c,1,[],https://github.com/libtom/libtomcrypt/pull/375,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/375,"Fixes gcc (6 or higher) warnings/erros when using -Werror -Wunused-const-variable
In file included from src/ciphers/aes/aes.c:90:0:
src/ciphers/aes/aes_tab.c:98:22: error: Te4 defined but not used [-Werror=unused-const-variable=]
 static const ulong32 Te4[256] = {
                      ^~~
In file included from src/ciphers/aes/aes.c:90:0:
src/ciphers/aes/aes_tab.c:98:22: error: Te4 defined but not used [-Werror=unused-const-variable=]
 static const ulong32 Te4[256] = {
                      ^~~
In file included from src/mac/pelican/pelican.c:21:0:
src/mac/pelican/../../ciphers/aes/aes_tab.c:1020:22: error: rcon defined but not used [-Werror=unused-const-variable=]
 static const ulong32 rcon[] = {
                      ^~~~","Fixes gcc (6 or higher) warnings/erros when using -Werror -Wunused-const-variable
In file included from src/ciphers/aes/aes.c:90:0:
src/ciphers/aes/aes_tab.c:98:22: error: Te4 defined but not used [-Werror=unused-const-variable=]
 static const ulong32 Te4[256] = {
                      ^~~
In file included from src/ciphers/aes/aes.c:90:0:
src/ciphers/aes/aes_tab.c:98:22: error: Te4 defined but not used [-Werror=unused-const-variable=]
 static const ulong32 Te4[256] = {
                      ^~~
In file included from src/mac/pelican/pelican.c:21:0:
src/mac/pelican/../../ciphers/aes/aes_tab.c:1020:22: error: rcon defined but not used [-Werror=unused-const-variable=]
 static const ulong32 rcon[] = {
                      ^~~~",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,377,2018-04-08T16:06:20Z,2018-04-09T06:53:21Z,2018-04-09T06:53:24Z,MERGED,True,0,1,1,https://github.com/karel-m,clang-tidy: readability-redundant-control-flow,1,[],https://github.com/libtom/libtomcrypt/pull/377,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/377,"the warning was:
libtomcrypt/src/math/multi.c:70:4: warning: redundant return statement at the end of a function with a void return type [readability-redundant-control-flow]
   return;
   ^","the warning was:
libtomcrypt/src/math/multi.c:70:4: warning: redundant return statement at the end of a function with a void return type [readability-redundant-control-flow]
   return;
   ^",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,378,2018-04-08T16:30:25Z,2018-04-09T06:55:33Z,2018-04-09T06:55:36Z,MERGED,True,2,2,2,https://github.com/karel-m,clang-tidy: misc-suspicious-string-compare,1,[],https://github.com/libtom/libtomcrypt/pull/378,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/378,"The warning was:
src/pk/rsa/rsa_import_pkcs8.c:117:7: warning: function 'memcmp' is called without explicitly comparing result [misc-suspicious-string-compare]
      XMEMCMP(rsaoid.OID, alg_seq[0].data, rsaoid.OIDlen * sizeof(rsaoid.OID[0]))) {
      ^
                                                                                  != 0
src/headers/tomcrypt_custom.h:37:18: note: expanded from macro 'XMEMCMP'
#define XMEMCMP  memcmp
                 ^
src/pk/asn1/x509/x509_decode_subject_public_key_info.c:96:9: warning: function 'memcmp' is called without explicitly comparing result [misc-suspicious-string-compare]
        XMEMCMP(oid.OID, alg_id[0].data, oid.OIDlen * sizeof(oid.OID[0]))) {
        ^
                                                                          != 0
src/headers/tomcrypt_custom.h:37:18: note: expanded from macro 'XMEMCMP'
#define XMEMCMP  memcmp","The warning was:
src/pk/rsa/rsa_import_pkcs8.c:117:7: warning: function 'memcmp' is called without explicitly comparing result [misc-suspicious-string-compare]
      XMEMCMP(rsaoid.OID, alg_seq[0].data, rsaoid.OIDlen * sizeof(rsaoid.OID[0]))) {
      ^
                                                                                  != 0
src/headers/tomcrypt_custom.h:37:18: note: expanded from macro 'XMEMCMP'
#define XMEMCMP  memcmp
                 ^
src/pk/asn1/x509/x509_decode_subject_public_key_info.c:96:9: warning: function 'memcmp' is called without explicitly comparing result [misc-suspicious-string-compare]
        XMEMCMP(oid.OID, alg_id[0].data, oid.OIDlen * sizeof(oid.OID[0]))) {
        ^
                                                                          != 0
src/headers/tomcrypt_custom.h:37:18: note: expanded from macro 'XMEMCMP'
#define XMEMCMP  memcmp",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,379,2018-04-08T17:35:36Z,2018-04-09T06:56:54Z,2018-04-09T06:56:57Z,MERGED,True,5,5,4,https://github.com/karel-m,clang-tidy: misc-misplaced-widening-cast,1,[],https://github.com/libtom/libtomcrypt/pull/379,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/379,"The warning was:
src/misc/copy_or_zeromem.c:28:29: warning: either cast from 'int' to 'LTC_FAST_TYPE' (aka 'unsigned long long') is ineffective, or there is loss of precision before the conversion [misc-misplaced-widening-cast]
   LTC_FAST_TYPE fastMask = ~0; /* initialize fastMask at all ones */
                            ^
src/pk/dsa/dsa_export.c:72:34: warning: either cast from 'int' to 'unsigned long' is ineffective, or there is loss of precision before the conversion [misc-misplaced-widening-cast]
          unsigned long tmplen = (mp_count_bits(key->y) / 8) + 8;
                                 ^
src/pk/dsa/dsa_generate_pqg.c:75:7: warning: either cast from 'int' to 'unsigned long' is ineffective, or there is loss of precision before the conversion [misc-misplaced-widening-cast]
  L = modulus_size * 8;
      ^
src/pk/dsa/dsa_generate_pqg.c:76:7: warning: either cast from 'int' to 'unsigned long' is ineffective, or there is loss of precision before the conversion [misc-misplaced-widening-cast]
  N = group_size * 8;
      ^
src/pk/rsa/rsa_export.c:61:20: warning: either cast from 'int' to 'unsigned long' is ineffective, or there is loss of precision before the conversion [misc-misplaced-widening-cast]
          tmplen = (mp_count_bits(key->N)/8)*2+8;
                   ^","The warning was:
src/misc/copy_or_zeromem.c:28:29: warning: either cast from 'int' to 'LTC_FAST_TYPE' (aka 'unsigned long long') is ineffective, or there is loss of precision before the conversion [misc-misplaced-widening-cast]
   LTC_FAST_TYPE fastMask = ~0; /* initialize fastMask at all ones */
                            ^
src/pk/dsa/dsa_export.c:72:34: warning: either cast from 'int' to 'unsigned long' is ineffective, or there is loss of precision before the conversion [misc-misplaced-widening-cast]
          unsigned long tmplen = (mp_count_bits(key->y) / 8) + 8;
                                 ^
src/pk/dsa/dsa_generate_pqg.c:75:7: warning: either cast from 'int' to 'unsigned long' is ineffective, or there is loss of precision before the conversion [misc-misplaced-widening-cast]
  L = modulus_size * 8;
      ^
src/pk/dsa/dsa_generate_pqg.c:76:7: warning: either cast from 'int' to 'unsigned long' is ineffective, or there is loss of precision before the conversion [misc-misplaced-widening-cast]
  N = group_size * 8;
      ^
src/pk/rsa/rsa_export.c:61:20: warning: either cast from 'int' to 'unsigned long' is ineffective, or there is loss of precision before the conversion [misc-misplaced-widening-cast]
          tmplen = (mp_count_bits(key->N)/8)*2+8;
                   ^",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,381,2018-04-10T11:35:10Z,2018-04-11T09:14:50Z,2018-04-11T09:17:20Z,MERGED,True,35,35,13,https://github.com/felixdoerre,add const to the hashes' compress functions,1,[],https://github.com/libtom/libtomcrypt/pull/381,https://github.com/felixdoerre,1,https://github.com/libtom/libtomcrypt/pull/381,Adds a const qualifer to all hashes compress functions and thus removing the necessity for the const-cast in tomcrypt_hash.h,Adds a const qualifer to all hashes compress functions and thus removing the necessity for the const-cast in tomcrypt_hash.h,True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,381,2018-04-10T11:35:10Z,2018-04-11T09:14:50Z,2018-04-11T09:17:20Z,MERGED,True,35,35,13,https://github.com/felixdoerre,add const to the hashes' compress functions,1,[],https://github.com/libtom/libtomcrypt/pull/381,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/381#issuecomment-380068086,Adds a const qualifer to all hashes compress functions and thus removing the necessity for the const-cast in tomcrypt_hash.h,This should've been in #324,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,381,2018-04-10T11:35:10Z,2018-04-11T09:14:50Z,2018-04-11T09:17:20Z,MERGED,True,35,35,13,https://github.com/felixdoerre,add const to the hashes' compress functions,1,[],https://github.com/libtom/libtomcrypt/pull/381,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/381#issuecomment-380216192,Adds a const qualifer to all hashes compress functions and thus removing the necessity for the const-cast in tomcrypt_hash.h,@fperrad what does your linter say?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,382,2018-04-13T23:14:29Z,2018-05-31T11:51:55Z,2018-05-31T19:51:42Z,MERGED,True,22,3,1,https://github.com/ararslan,Make the build logic more robust for BSD systems,1,[],https://github.com/libtom/libtomcrypt/pull/382,https://github.com/ararslan,1,https://github.com/libtom/libtomcrypt/pull/382,"This properly sets MAKE (when undefined) on BSDs to gmake rather than make, which refers to the incompatible BSD Make. Further, it betters detection of Clang as the default compiler, which is the case on FreeBSD 11.0+ and OpenBSD 6.0+.
This has been verified to work on FreeBSD with gmake and gmake -f makefile.shared.
Companion to libtom/libtommath#108.","This properly sets MAKE (when undefined) on BSDs to gmake rather than make, which refers to the incompatible BSD Make. Further, it betters detection of Clang as the default compiler, which is the case on FreeBSD 11.0+ and OpenBSD 6.0+.
This has been verified to work on FreeBSD with gmake and gmake -f makefile.shared.
Companion to libtom/libtommath#108.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,382,2018-04-13T23:14:29Z,2018-05-31T11:51:55Z,2018-05-31T19:51:42Z,MERGED,True,22,3,1,https://github.com/ararslan,Make the build logic more robust for BSD systems,1,[],https://github.com/libtom/libtomcrypt/pull/382,https://github.com/ararslan,2,https://github.com/libtom/libtomcrypt/pull/382#issuecomment-382412744,"This properly sets MAKE (when undefined) on BSDs to gmake rather than make, which refers to the incompatible BSD Make. Further, it betters detection of Clang as the default compiler, which is the case on FreeBSD 11.0+ and OpenBSD 6.0+.
This has been verified to work on FreeBSD with gmake and gmake -f makefile.shared.
Companion to libtom/libtommath#108.","I tried this out on my Mac, both with make and make -f makefile.shared. The default compiler is correctly detected as Clang, and tests pass with both make invocations. As an aside, Travis supports macOS, so you could add that to your testing matrix if you wanted.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,382,2018-04-13T23:14:29Z,2018-05-31T11:51:55Z,2018-05-31T19:51:42Z,MERGED,True,22,3,1,https://github.com/ararslan,Make the build logic more robust for BSD systems,1,[],https://github.com/libtom/libtomcrypt/pull/382,https://github.com/rofl0r,3,https://github.com/libtom/libtomcrypt/pull/382#issuecomment-383411487,"This properly sets MAKE (when undefined) on BSDs to gmake rather than make, which refers to the incompatible BSD Make. Further, it betters detection of Clang as the default compiler, which is the case on FreeBSD 11.0+ and OpenBSD 6.0+.
This has been verified to work on FreeBSD with gmake and gmake -f makefile.shared.
Companion to libtom/libtommath#108.","The default compiler is correctly detected as Clang

that's not how it works. in a properly configured environment, the default compiler is detected as follows:

if CC env var is set, this denotes the compiler to use
if CC is not set, a command called cc will be used (or c99 if the compilee wants to use C99 features)

that means that a properly configured system should have symlinks /usr/bin/cc -> /usr/bin/clang or whatever in place.
no makefile should ever do bogus stuff like using uname to decide which OS it runs on and then use an if-else abomination to check whether MAC uses clang or gcc.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,382,2018-04-13T23:14:29Z,2018-05-31T11:51:55Z,2018-05-31T19:51:42Z,MERGED,True,22,3,1,https://github.com/ararslan,Make the build logic more robust for BSD systems,1,[],https://github.com/libtom/libtomcrypt/pull/382,https://github.com/ararslan,4,https://github.com/libtom/libtomcrypt/pull/382#issuecomment-383419942,"This properly sets MAKE (when undefined) on BSDs to gmake rather than make, which refers to the incompatible BSD Make. Further, it betters detection of Clang as the default compiler, which is the case on FreeBSD 11.0+ and OpenBSD 6.0+.
This has been verified to work on FreeBSD with gmake and gmake -f makefile.shared.
Companion to libtom/libtommath#108.","That's not what this does. Currently, the logic here says ""if your $(CC) is cc, we assume it's GCC and prepend the cross-compilation stuff."" This is incorrect for systems that use Clang as the default compiler. This PR changes that to ""if you didn't specify CC, we'll check whether it refers to GCC or Clang, then prepend the cross-compilation stuff appropriately."" The problem with just using $(CC) as-is is that most cross compilation toolchains that I've seen have gcc or clang as part of the executable name rather than cc.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,382,2018-04-13T23:14:29Z,2018-05-31T11:51:55Z,2018-05-31T19:51:42Z,MERGED,True,22,3,1,https://github.com/ararslan,Make the build logic more robust for BSD systems,1,[],https://github.com/libtom/libtomcrypt/pull/382,https://github.com/rofl0r,5,https://github.com/libtom/libtomcrypt/pull/382#issuecomment-383426016,"This properly sets MAKE (when undefined) on BSDs to gmake rather than make, which refers to the incompatible BSD Make. Further, it betters detection of Clang as the default compiler, which is the case on FreeBSD 11.0+ and OpenBSD 6.0+.
This has been verified to work on FreeBSD with gmake and gmake -f makefile.shared.
Companion to libtom/libtommath#108.","That's not what this does

yeah, i'm talking about how it should be according to conventions",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,382,2018-04-13T23:14:29Z,2018-05-31T11:51:55Z,2018-05-31T19:51:42Z,MERGED,True,22,3,1,https://github.com/ararslan,Make the build logic more robust for BSD systems,1,[],https://github.com/libtom/libtomcrypt/pull/382,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/382#issuecomment-383713782,"This properly sets MAKE (when undefined) on BSDs to gmake rather than make, which refers to the incompatible BSD Make. Further, it betters detection of Clang as the default compiler, which is the case on FreeBSD 11.0+ and OpenBSD 6.0+.
This has been verified to work on FreeBSD with gmake and gmake -f makefile.shared.
Companion to libtom/libtommath#108.","@rofl0r okay, so how should we solve this? resp. do we have to do anything?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,382,2018-04-13T23:14:29Z,2018-05-31T11:51:55Z,2018-05-31T19:51:42Z,MERGED,True,22,3,1,https://github.com/ararslan,Make the build logic more robust for BSD systems,1,[],https://github.com/libtom/libtomcrypt/pull/382,https://github.com/rofl0r,7,https://github.com/libtom/libtomcrypt/pull/382#issuecomment-384756059,"This properly sets MAKE (when undefined) on BSDs to gmake rather than make, which refers to the incompatible BSD Make. Further, it betters detection of Clang as the default compiler, which is the case on FreeBSD 11.0+ and OpenBSD 6.0+.
This has been verified to work on FreeBSD with gmake and gmake -f makefile.shared.
Companion to libtom/libtommath#108.","looking into one of my cross-compiler builds:
$ ls -la ~/musl-cross-make-6.3.0/mips-linux-musl/bin | grep cc | head -n 1
lrwxrwxrwx    1 rofl     rofl            19 Jan 21  2017 mips-linux-musl-cc -> mips-linux-musl-gcc

that means what i said above applies also to CROSS_COMPILE scenarios i.e.: there should be a $(CROSS_COMPILE)cc which is a symlink to either $(CROSS_COMPILE)gcc or $(CROSS_COMPILE)clang.
so:

if $(CC) is set, we always use it like that
if $(CROSS_COMPILE) is set but not $(CC), CC becomes $(CROSS_COMPILE)cc
if neither $(CROSS_COMPILE) nor $(CC) are set CC becomes cc

or simplified (pseudocode):
if isempty(CC)
  CC:=$(CROSS_COMPILE)cc
fi",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,382,2018-04-13T23:14:29Z,2018-05-31T11:51:55Z,2018-05-31T19:51:42Z,MERGED,True,22,3,1,https://github.com/ararslan,Make the build logic more robust for BSD systems,1,[],https://github.com/libtom/libtomcrypt/pull/382,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/382#issuecomment-385084948,"This properly sets MAKE (when undefined) on BSDs to gmake rather than make, which refers to the incompatible BSD Make. Further, it betters detection of Clang as the default compiler, which is the case on FreeBSD 11.0+ and OpenBSD 6.0+.
This has been verified to work on FreeBSD with gmake and gmake -f makefile.shared.
Companion to libtom/libtommath#108.","if isempty(CC)
CC:=$(CROSS_COMPILE)cc
fi


this would require to set CC and CROSS_COMPILE in case I want to cross-compile or not?
while searching for the reason why this is even there I realized that none of my cross-compilation toolchains has a $(CROSS_COMPILE)cc symlink, they all only have $(CROSS_COMPILE)gcc ...",True,{'THUMBS_UP': ['https://github.com/ararslan']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,382,2018-04-13T23:14:29Z,2018-05-31T11:51:55Z,2018-05-31T19:51:42Z,MERGED,True,22,3,1,https://github.com/ararslan,Make the build logic more robust for BSD systems,1,[],https://github.com/libtom/libtomcrypt/pull/382,https://github.com/rofl0r,9,https://github.com/libtom/libtomcrypt/pull/382#issuecomment-385111304,"This properly sets MAKE (when undefined) on BSDs to gmake rather than make, which refers to the incompatible BSD Make. Further, it betters detection of Clang as the default compiler, which is the case on FreeBSD 11.0+ and OpenBSD 6.0+.
This has been verified to work on FreeBSD with gmake and gmake -f makefile.shared.
Companion to libtom/libtommath#108.","this would require to set CC and CROSS_COMPILE in case I want to cross-compile or not?

no, CROSS_COMPILE is user set, you shouldnt try to set it if not given

while searching for the reason why this is even there I realized that none of my cross-compilation toolchains has a $(CROSS_COMPILE)cc symlink, they all only have $(CROSS_COMPILE)gcc

that's odd. where did you get your cross toolchains from ?
EDIT: anyway, even if there are some toolchains out there that don't set $(CROSS_COMPILE)cc as a symlink to the right compiler, we should lobby them into doing it, as this takes away the entire need for system-specific and non-crosscompile-compatible uname hacks.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,382,2018-04-13T23:14:29Z,2018-05-31T11:51:55Z,2018-05-31T19:51:42Z,MERGED,True,22,3,1,https://github.com/ararslan,Make the build logic more robust for BSD systems,1,[],https://github.com/libtom/libtomcrypt/pull/382,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/382#issuecomment-385163684,"This properly sets MAKE (when undefined) on BSDs to gmake rather than make, which refers to the incompatible BSD Make. Further, it betters detection of Clang as the default compiler, which is the case on FreeBSD 11.0+ and OpenBSD 6.0+.
This has been verified to work on FreeBSD with gmake and gmake -f makefile.shared.
Companion to libtom/libtommath#108.","no, CROSS_COMPILE is user set, you shouldnt try to set it if not given

sorry - that's what I meant by I, the user, not the libtom maintainer :)

that's odd. where did you get your cross toolchains from ?
EDIT: anyway, even if there are some toolchains out there that don't set $(CROSS_COMPILE)cc as a symlink to the right compiler, we should lobby them into doing it, as this takes away the entire need for system-specific and non-crosscompile-compatible uname hacks.

well I haven't seen any cross toolchain that provides a cc ... I've some from linaro, some from debian/ubuntu packages, some in yocto...
Edit: oh, I just found one, buildroot seems to provide a $(CROSS_COMPILE)cc
... and yes it's a good idea to 'lobby them into doing it' but for now that's not real yet and so we should go with one of those 'temporary solutions'^TM that lets us anyways do what we want :)",True,{'THUMBS_UP': ['https://github.com/ararslan']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,383,2018-04-28T20:51:53Z,2018-05-05T15:59:27Z,2018-05-05T15:59:30Z,MERGED,True,47,18,5,https://github.com/karel-m,new fortuna: fix getting current time,3,[],https://github.com/libtom/libtomcrypt/pull/383,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/383,"Initially there was missing #include <windows.h> but it turned out that ns - ms conversion was not correct (fixed and explained in comments).
But there is still one issue related to the fact that prng->fortuna.wd is only unsigned long (which means 32bit on MS Windows) but we are assigning into it a number of 100ms intervals since 1 Jan 1970.
MSVC warns conversion from 'ulong64' to 'unsigned long', possible loss of data here:
unsigned long now = _fortuna_current_time();","Initially there was missing #include <windows.h> but it turned out that ns - ms conversion was not correct (fixed and explained in comments).
But there is still one issue related to the fact that prng->fortuna.wd is only unsigned long (which means 32bit on MS Windows) but we are assigning into it a number of 100ms intervals since 1 Jan 1970.
MSVC warns conversion from 'ulong64' to 'unsigned long', possible loss of data here:
unsigned long now = _fortuna_current_time();",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,383,2018-04-28T20:51:53Z,2018-05-05T15:59:27Z,2018-05-05T15:59:30Z,MERGED,True,47,18,5,https://github.com/karel-m,new fortuna: fix getting current time,3,[],https://github.com/libtom/libtomcrypt/pull/383,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/383#issuecomment-385269235,"Initially there was missing #include <windows.h> but it turned out that ns - ms conversion was not correct (fixed and explained in comments).
But there is still one issue related to the fact that prng->fortuna.wd is only unsigned long (which means 32bit on MS Windows) but we are assigning into it a number of 100ms intervals since 1 Jan 1970.
MSVC warns conversion from 'ulong64' to 'unsigned long', possible loss of data here:
unsigned long now = _fortuna_current_time();","I have experienced another fortuna related trouble on CentOS 6
libtomcrypt.a(fortuna.o): In function `_fortuna_reseed':
fortuna.c:(.text+0xa72): undefined reference to `clock_gettime'
libtomcrypt.a(fortuna.o): In function `fortuna_ready':
fortuna.c:(.text+0x16c6): undefined reference to `clock_gettime'

It turns out that using clock_gettime requires linking with -lrt on Centos 6 (= RHEL6). Therefore I switched to gettimeofday (I know it is perhaps not preferred nowadays  but it does not introduce any linking troubles).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,383,2018-04-28T20:51:53Z,2018-05-05T15:59:27Z,2018-05-05T15:59:30Z,MERGED,True,47,18,5,https://github.com/karel-m,new fortuna: fix getting current time,3,[],https://github.com/libtom/libtomcrypt/pull/383,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/383#issuecomment-385269944,"Initially there was missing #include <windows.h> but it turned out that ns - ms conversion was not correct (fixed and explained in comments).
But there is still one issue related to the fact that prng->fortuna.wd is only unsigned long (which means 32bit on MS Windows) but we are assigning into it a number of 100ms intervals since 1 Jan 1970.
MSVC warns conversion from 'ulong64' to 'unsigned long', possible loss of data here:
unsigned long now = _fortuna_current_time();",@sjaeckel should we change prng->fortuna.wd from unsigned long to ulong64 ?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,383,2018-04-28T20:51:53Z,2018-05-05T15:59:27Z,2018-05-05T15:59:30Z,MERGED,True,47,18,5,https://github.com/karel-m,new fortuna: fix getting current time,3,[],https://github.com/libtom/libtomcrypt/pull/383,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/383#issuecomment-385756873,"Initially there was missing #include <windows.h> but it turned out that ns - ms conversion was not correct (fixed and explained in comments).
But there is still one issue related to the fact that prng->fortuna.wd is only unsigned long (which means 32bit on MS Windows) but we are assigning into it a number of 100ms intervals since 1 Jan 1970.
MSVC warns conversion from 'ulong64' to 'unsigned long', possible loss of data here:
unsigned long now = _fortuna_current_time();","@sjaeckel should we change prng->fortuna.wd from unsigned long to ulong64 ?

why not!

Therefore I switched to gettimeofday

man gettimeofday says The  time  returned  by gettimeofday() is affected by discontinuous jumps in the system time (e.g., if the system administrator manually changes the system time). ... I'd really prefer to have it as a fall-back, not as the default, especially since that's caused by some soon end-of-life distribution ...
man clock_gettime says Link with -lrt (only for glibc versions before 2.17). therefore I think we can safely add something like this in tomcrypt_custom.h:
#if defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE >= 200112L
#if defined(__GLIBC_PREREQ)
#if __GLIBC_PREREQ(2, 17)
#define LTC_CLOCK_GETTIME
#endif /* __GLIBC_PREREQ(2, 17) */
#else
/* here we catch all POSIX-compatible, but non-glibc systems */
#define LTC_CLOCK_GETTIME
#endif /* defined(__linux__) && defined(__GLIBC_PREREQ) */
#endif /* defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE >= 200112L */

probably @rofl0r can verify if that's okay as he's using musl as libc IIRC :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,383,2018-04-28T20:51:53Z,2018-05-05T15:59:27Z,2018-05-05T15:59:30Z,MERGED,True,47,18,5,https://github.com/karel-m,new fortuna: fix getting current time,3,[],https://github.com/libtom/libtomcrypt/pull/383,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/383#issuecomment-386564330,"Initially there was missing #include <windows.h> but it turned out that ns - ms conversion was not correct (fixed and explained in comments).
But there is still one issue related to the fact that prng->fortuna.wd is only unsigned long (which means 32bit on MS Windows) but we are assigning into it a number of 100ms intervals since 1 Jan 1970.
MSVC warns conversion from 'ulong64' to 'unsigned long', possible loss of data here:
unsigned long now = _fortuna_current_time();",@sjaeckel  can I merge this pr?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,385,2018-05-02T20:48:00Z,2018-05-02T21:46:32Z,2018-05-02T21:46:41Z,CLOSED,False,0,0,0,https://github.com/buggywhip,Add x salsa20,13,[],https://github.com/libtom/libtomcrypt/pull/385,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/385,"Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated","Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,386,2018-05-03T10:33:25Z,2018-05-04T05:17:53Z,2018-05-04T05:17:56Z,MERGED,True,4,4,2,https://github.com/karel-m,"fix #384 ""const"" related warnings",1,[],https://github.com/libtom/libtomcrypt/pull/386,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/386,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,387,2018-05-03T23:40:50Z,2018-05-31T23:42:09Z,2018-05-31T23:42:25Z,MERGED,True,324,25,13,https://github.com/buggywhip,Add XSalsa20,2,[],https://github.com/libtom/libtomcrypt/pull/387,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/387,"Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated","Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,387,2018-05-03T23:40:50Z,2018-05-31T23:42:09Z,2018-05-31T23:42:25Z,MERGED,True,324,25,13,https://github.com/buggywhip,Add XSalsa20,2,[],https://github.com/libtom/libtomcrypt/pull/387,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/387#issuecomment-386530645,"Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated","Hi Larry,
some cosmetics - this:
/* ref:         HEAD -> develop */
/* git commit:  af67321bf3cde1a470c679e459ebb8189e38c9bd */
/* commit time: 2018-04-13 09:42:47 +0200 *

should be replaced with:
/* ref:         $Format:%D$ */
/* git commit:  $Format:%H$ */
/* commit time: $Format:%ai$ */

The xsalsa20_ivctr64 looks to me like a candidate for misuse (with potential security consequences). I'd leave it out till somebody comes with a reasonable use case.
I am not sure whether to introduce xsalsa20_state; I think using salsa20_state with xsalsa20_* functions is ok.
The last doubt I have (for now) is related to unsigned char *subkey - is it necessary?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,387,2018-05-03T23:40:50Z,2018-05-31T23:42:09Z,2018-05-31T23:42:25Z,MERGED,True,324,25,13,https://github.com/buggywhip,Add XSalsa20,2,[],https://github.com/libtom/libtomcrypt/pull/387,https://github.com/buggywhip,3,https://github.com/libtom/libtomcrypt/pull/387#issuecomment-386544723,"Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated","should be replaced with:

 /* ref:         $Format:%D$ */
 /* git commit:  $Format:%H$ */
 /* commit time: $Format:%ai$ */
will do
 The xsalsa20_ivctr64 looks to me like a candidate for misuse (with potential security consequences). I'd leave it out till somebody comes with a reasonable use case.

I too struggled with the security implications.  It was that or try to keep parallel APIs.  I won't feel bad if we yank it.
 I am not sure whether to introduce xsalsa20_state; I think using salsa20_state with xsalsa20_*functions is ok.

And you can because xsalsa20_state is defined to salsa20_state in the same way we map xsalsa20_crypt(), _keystream(), and _done() to their salsa20 counterparts.  I suggest, however, keeping xsalsa20_state to reduce confusion.
 The last doubt I have (for now) is related to unsigned char *subkey - is it necessary?

Not really so long as the user doesn't want a hybrid xsalsa/salsa where the subkey is used more like an ephemeral key.  sha256(key+nonce) can accomplish that but the doubleround function is lightweight and more attractive for smaller devices.  I can argue this both ways; it comes down to what is our objective?

I will wait a few days.  Others might want to chime in.


I have one additional concern.  The ""#define xsalsa20_state salsa20_state"" appears to kill getting xsalsa20_state_size fm misc/crypt/crypt_sizes.c.  I still want to play with it some more but python users might just have to remember to use salsa20_state.  ...but all the xsalsa mappings work just fine elsewhere.  Confusing?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,387,2018-05-03T23:40:50Z,2018-05-31T23:42:09Z,2018-05-31T23:42:25Z,MERGED,True,324,25,13,https://github.com/buggywhip,Add XSalsa20,2,[],https://github.com/libtom/libtomcrypt/pull/387,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/387#issuecomment-386577580,"Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated","Ad crypt_sizes.c maybe
#ifdef LTC_SALSA20
    _SZ_STRINGIFY_T(salsa20_state),
#endif
#ifdef LTC_XSALSA20
    _SZ_STRINGIFY_T(xsalsa20_state),
#endif",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,387,2018-05-03T23:40:50Z,2018-05-31T23:42:09Z,2018-05-31T23:42:25Z,MERGED,True,324,25,13,https://github.com/buggywhip,Add XSalsa20,2,[],https://github.com/libtom/libtomcrypt/pull/387,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/387#issuecomment-386886524,"Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated","I still do not see a use case for subkey. How can one reuse the value?
I am for: xsalsa20_setup(&st, key, key_len, nonce, nonce_len, rounds)
If there is a demand for subkey we can introduce xsalsa20_setup_ex(&st, key, key_len, nonce, nonce_len, rounds, &subkey, &subkeylen)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,387,2018-05-03T23:40:50Z,2018-05-31T23:42:09Z,2018-05-31T23:42:25Z,MERGED,True,324,25,13,https://github.com/buggywhip,Add XSalsa20,2,[],https://github.com/libtom/libtomcrypt/pull/387,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/387#issuecomment-386908681,"Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated","I still do not see a use case for subkey. How can one reuse the value?

very good point!

I am for: xsalsa20_setup(&st, key, key_len, nonce, nonce_len, rounds)

👍",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,387,2018-05-03T23:40:50Z,2018-05-31T23:42:09Z,2018-05-31T23:42:25Z,MERGED,True,324,25,13,https://github.com/buggywhip,Add XSalsa20,2,[],https://github.com/libtom/libtomcrypt/pull/387,https://github.com/buggywhip,7,https://github.com/libtom/libtomcrypt/pull/387#issuecomment-386921886,"Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated","On 6May, 2018, at 12:56 PM, Steffen Jaeckel ***@***.***> wrote:
 I still do not see a use case for subkey. How can one reuse the value?

 very good point!

I can see using the ""hashed"" subkey in various situations, none of which couldn't be satisfied with another hash function.  The only redeeming value might be the doubleround's space and time.

I doubt we would ever see a request for two reasons: XSalsa's low adoption and library ""shoppers"" will simply move on.  (My usage was predominately prototyping; I'd carve out the pieces I needed and augment with custom code.)

An alternative would be to implement Karel's xsalsa20_setup_ex(&st, key, key_len, nonce, nonce_len, rounds, &subkey, &subkeylen) now.  ...but as a ""shopper"" I'd be much more interested in XChaCha20 with all the bells and whistles.
 I am for: xsalsa20_setup(&st, key, key_len, nonce, nonce_len, rounds)

 👍

All that said...  Clearly this will be the most frequent use case and is *much* cleaner.

Done.  (offline I'll keep the existing code should we change our mind)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,387,2018-05-03T23:40:50Z,2018-05-31T23:42:09Z,2018-05-31T23:42:25Z,MERGED,True,324,25,13,https://github.com/buggywhip,Add XSalsa20,2,[],https://github.com/libtom/libtomcrypt/pull/387,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/387#issuecomment-392452432,"Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated","Providing the check with #error LTC_XSALSA20 requires LTC_SALSA20 in tomcrypt_custom.h I think we do not need any of these:
-#ifdef LTC_SALSA20
+#if defined(LTC_SALSA20) || defined(LTC_XSALSA20)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,387,2018-05-03T23:40:50Z,2018-05-31T23:42:09Z,2018-05-31T23:42:25Z,MERGED,True,324,25,13,https://github.com/buggywhip,Add XSalsa20,2,[],https://github.com/libtom/libtomcrypt/pull/387,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/387#issuecomment-392659035,"Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated","Larry, there is one more #if defined(LTC_SALSA20) || defined(LTC_XSALSA20) in salsa20_ivctr64.c that can be IMO reverted.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,387,2018-05-03T23:40:50Z,2018-05-31T23:42:09Z,2018-05-31T23:42:25Z,MERGED,True,324,25,13,https://github.com/buggywhip,Add XSalsa20,2,[],https://github.com/libtom/libtomcrypt/pull/387,https://github.com/buggywhip,10,https://github.com/libtom/libtomcrypt/pull/387#issuecomment-392671496,"Add XSalsa20 to the suite of stream ciphers.
Checklist

 documentation is added or updated
 tests are added or updated","On 28May, 2018, at 11:49 PM, karel-m ***@***.***> wrote:

 @karel-m approved this pull request.

 Looks good to me. Just please squash it into 2 commits: 1/ update makefiles + 2/ xsalsa20

Thanks, will do after one more doc update to add one sentence:

""If you define \textit{LTC_XSalsa20} to include \textit{XSalsa20} in a minimal
\textit{libtomcrypt} library build, you must also define \textit{LTC_Salsa20}.""

I'll push it tomorrow.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,388,2018-05-04T10:49:11Z,2018-05-04T14:42:03Z,2018-05-05T16:00:12Z,MERGED,True,1,1,1,https://github.com/karel-m,do --check-all in check_source.sh,1,[],https://github.com/libtom/libtomcrypt/pull/388,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/388,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,389,2018-05-06T20:48:09Z,2018-05-07T06:18:32Z,2018-05-07T06:18:35Z,MERGED,True,1,5,1,https://github.com/karel-m,avoid calling exit() in sosemanuk_setup,1,[],https://github.com/libtom/libtomcrypt/pull/389,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/389,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,390,2018-05-09T21:56:41Z,2018-05-24T15:08:28Z,2018-05-24T15:08:33Z,MERGED,True,184,148,8,https://github.com/sjaeckel,Fixes and improvements,4,[],https://github.com/libtom/libtomcrypt/pull/390,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/390,Some fixes and improvements I came across,Some fixes and improvements I came across,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,392,2018-05-19T15:51:20Z,2018-05-20T08:29:57Z,2018-05-20T13:52:00Z,MERGED,True,9,9,1,https://github.com/orbea,makefile.shared: Respect LIBTOOL.,1,[],https://github.com/libtom/libtomcrypt/pull/392,https://github.com/orbea,1,https://github.com/libtom/libtomcrypt/pull/392,"I am using the libtool implementation called slibtool which seems to work just fine with libtomcrypt.
https://git.midipix.org/cgit.cgi/slibtool
https://git.midipix.org/cgit.cgi/slibtool/plain/README
he problem is that the standard way to use slibtool is to export LIBTOOL in MAKEFLAGS.
export MAKEFLAGS='LIBTOOL=slibtool'

Which will work with almost all autotools builds. However libtomcrypt doesn't respect this variable and wants LT instead.
If the makefile.shared can use LIBTOOL instead of LT this would make it a lot easier for anyone that doesn't want the default libtool.
Please see PR libtom/libtommath#114 for more information.
On a side note, libtomcrypt is a good example of how slibtool is faster than libtool, with an AMD FX(tm)-6350 Six-Core cpu using -j6 and make -f makefile.shared.
GNU libtool
real	0m43.242s
user	2m9.735s
sys	0m38.435s

slibtool
real	0m12.180s
user	0m42.789s
sys	0m10.406s","I am using the libtool implementation called slibtool which seems to work just fine with libtomcrypt.
https://git.midipix.org/cgit.cgi/slibtool
https://git.midipix.org/cgit.cgi/slibtool/plain/README
he problem is that the standard way to use slibtool is to export LIBTOOL in MAKEFLAGS.
export MAKEFLAGS='LIBTOOL=slibtool'

Which will work with almost all autotools builds. However libtomcrypt doesn't respect this variable and wants LT instead.
If the makefile.shared can use LIBTOOL instead of LT this would make it a lot easier for anyone that doesn't want the default libtool.
Please see PR libtom/libtommath#114 for more information.
On a side note, libtomcrypt is a good example of how slibtool is faster than libtool, with an AMD FX(tm)-6350 Six-Core cpu using -j6 and make -f makefile.shared.
GNU libtool
real	0m43.242s
user	2m9.735s
sys	0m38.435s

slibtool
real	0m12.180s
user	0m42.789s
sys	0m10.406s",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,392,2018-05-19T15:51:20Z,2018-05-20T08:29:57Z,2018-05-20T13:52:00Z,MERGED,True,9,9,1,https://github.com/orbea,makefile.shared: Respect LIBTOOL.,1,[],https://github.com/libtom/libtomcrypt/pull/392,https://github.com/rofl0r,2,https://github.com/libtom/libtomcrypt/pull/392#issuecomment-390435557,"I am using the libtool implementation called slibtool which seems to work just fine with libtomcrypt.
https://git.midipix.org/cgit.cgi/slibtool
https://git.midipix.org/cgit.cgi/slibtool/plain/README
he problem is that the standard way to use slibtool is to export LIBTOOL in MAKEFLAGS.
export MAKEFLAGS='LIBTOOL=slibtool'

Which will work with almost all autotools builds. However libtomcrypt doesn't respect this variable and wants LT instead.
If the makefile.shared can use LIBTOOL instead of LT this would make it a lot easier for anyone that doesn't want the default libtool.
Please see PR libtom/libtommath#114 for more information.
On a side note, libtomcrypt is a good example of how slibtool is faster than libtool, with an AMD FX(tm)-6350 Six-Core cpu using -j6 and make -f makefile.shared.
GNU libtool
real	0m43.242s
user	2m9.735s
sys	0m38.435s

slibtool
real	0m12.180s
user	0m42.789s
sys	0m10.406s","hah. proof that the libtool abomination only slows down your build by a huge factor and adds possible issues, while providing zero benefit.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,393,2018-05-23T07:53:10Z,2018-07-06T11:44:18Z,2018-07-06T11:44:22Z,MERGED,True,484,199,1,https://github.com/karel-m,ECC doc update,4,[],https://github.com/libtom/libtomcrypt/pull/393,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/393,"Add doc for changes introduced in 24c0eb8

 new ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu)
 new ecc_set_dp(const ltc_ecc_curve *cu, ecc_key *key)
 new ecc_generate_key(prng_state *prng, int wprng, ecc_key *key)
 new ecc_set_key(const unsigned char *in, unsigned long inlen, int type, ecc_key *key)
 new ecc_get_key(unsigned char *out, unsigned long *outlen, int type, const ecc_key *key)
 new ecc_get_oid_str(char *out, unsigned long *outlen, const ecc_key *key)
 obsolete: ltc_ecc_set_type (replaced by ltc_ecc_curve)

From the last part of ECC changes:

 new ecc_export_openssl
 new ecc_import_openssl
 new ecc_import_x509

It will take some time.","Add doc for changes introduced in 24c0eb8

 new ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu)
 new ecc_set_dp(const ltc_ecc_curve *cu, ecc_key *key)
 new ecc_generate_key(prng_state *prng, int wprng, ecc_key *key)
 new ecc_set_key(const unsigned char *in, unsigned long inlen, int type, ecc_key *key)
 new ecc_get_key(unsigned char *out, unsigned long *outlen, int type, const ecc_key *key)
 new ecc_get_oid_str(char *out, unsigned long *outlen, const ecc_key *key)
 obsolete: ltc_ecc_set_type (replaced by ltc_ecc_curve)

From the last part of ECC changes:

 new ecc_export_openssl
 new ecc_import_openssl
 new ecc_import_x509

It will take some time.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,393,2018-05-23T07:53:10Z,2018-07-06T11:44:18Z,2018-07-06T11:44:22Z,MERGED,True,484,199,1,https://github.com/karel-m,ECC doc update,4,[],https://github.com/libtom/libtomcrypt/pull/393,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/393#issuecomment-391281327,"Add doc for changes introduced in 24c0eb8

 new ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu)
 new ecc_set_dp(const ltc_ecc_curve *cu, ecc_key *key)
 new ecc_generate_key(prng_state *prng, int wprng, ecc_key *key)
 new ecc_set_key(const unsigned char *in, unsigned long inlen, int type, ecc_key *key)
 new ecc_get_key(unsigned char *out, unsigned long *outlen, int type, const ecc_key *key)
 new ecc_get_oid_str(char *out, unsigned long *outlen, const ecc_key *key)
 obsolete: ltc_ecc_set_type (replaced by ltc_ecc_curve)

From the last part of ECC changes:

 new ecc_export_openssl
 new ecc_import_openssl
 new ecc_import_x509

It will take some time.","I allowed myself to kill your travis build as it only changes docs that aren't built anyways :)
Btw. I think [skip ci] is useful in cases like that",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,393,2018-05-23T07:53:10Z,2018-07-06T11:44:18Z,2018-07-06T11:44:22Z,MERGED,True,484,199,1,https://github.com/karel-m,ECC doc update,4,[],https://github.com/libtom/libtomcrypt/pull/393,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/393#issuecomment-401531186,"Add doc for changes introduced in 24c0eb8

 new ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu)
 new ecc_set_dp(const ltc_ecc_curve *cu, ecc_key *key)
 new ecc_generate_key(prng_state *prng, int wprng, ecc_key *key)
 new ecc_set_key(const unsigned char *in, unsigned long inlen, int type, ecc_key *key)
 new ecc_get_key(unsigned char *out, unsigned long *outlen, int type, const ecc_key *key)
 new ecc_get_oid_str(char *out, unsigned long *outlen, const ecc_key *key)
 obsolete: ltc_ecc_set_type (replaced by ltc_ecc_curve)

From the last part of ECC changes:

 new ecc_export_openssl
 new ecc_import_openssl
 new ecc_import_x509

It will take some time.","@sjaeckel ping
It would be nice to have the doc updated as there are questions related to the new ecc API e.g. #419",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,393,2018-05-23T07:53:10Z,2018-07-06T11:44:18Z,2018-07-06T11:44:22Z,MERGED,True,484,199,1,https://github.com/karel-m,ECC doc update,4,[],https://github.com/libtom/libtomcrypt/pull/393,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/393#issuecomment-402233448,"Add doc for changes introduced in 24c0eb8

 new ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu)
 new ecc_set_dp(const ltc_ecc_curve *cu, ecc_key *key)
 new ecc_generate_key(prng_state *prng, int wprng, ecc_key *key)
 new ecc_set_key(const unsigned char *in, unsigned long inlen, int type, ecc_key *key)
 new ecc_get_key(unsigned char *out, unsigned long *outlen, int type, const ecc_key *key)
 new ecc_get_oid_str(char *out, unsigned long *outlen, const ecc_key *key)
 obsolete: ltc_ecc_set_type (replaced by ltc_ecc_curve)

From the last part of ECC changes:

 new ecc_export_openssl
 new ecc_import_openssl
 new ecc_import_x509

It will take some time.","I think I'm done with it.
Feel free to have another look over it and/or merge please :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,393,2018-05-23T07:53:10Z,2018-07-06T11:44:18Z,2018-07-06T11:44:22Z,MERGED,True,484,199,1,https://github.com/karel-m,ECC doc update,4,[],https://github.com/libtom/libtomcrypt/pull/393,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/393#issuecomment-402234319,"Add doc for changes introduced in 24c0eb8

 new ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu)
 new ecc_set_dp(const ltc_ecc_curve *cu, ecc_key *key)
 new ecc_generate_key(prng_state *prng, int wprng, ecc_key *key)
 new ecc_set_key(const unsigned char *in, unsigned long inlen, int type, ecc_key *key)
 new ecc_get_key(unsigned char *out, unsigned long *outlen, int type, const ecc_key *key)
 new ecc_get_oid_str(char *out, unsigned long *outlen, const ecc_key *key)
 obsolete: ltc_ecc_set_type (replaced by ltc_ecc_curve)

From the last part of ECC changes:

 new ecc_export_openssl
 new ecc_import_openssl
 new ecc_import_x509

It will take some time.","Ah, I forgot that I've added some comments/questions, can you please comment on them before merging?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,393,2018-05-23T07:53:10Z,2018-07-06T11:44:18Z,2018-07-06T11:44:22Z,MERGED,True,484,199,1,https://github.com/karel-m,ECC doc update,4,[],https://github.com/libtom/libtomcrypt/pull/393,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/393#issuecomment-402283039,"Add doc for changes introduced in 24c0eb8

 new ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu)
 new ecc_set_dp(const ltc_ecc_curve *cu, ecc_key *key)
 new ecc_generate_key(prng_state *prng, int wprng, ecc_key *key)
 new ecc_set_key(const unsigned char *in, unsigned long inlen, int type, ecc_key *key)
 new ecc_get_key(unsigned char *out, unsigned long *outlen, int type, const ecc_key *key)
 new ecc_get_oid_str(char *out, unsigned long *outlen, const ecc_key *key)
 obsolete: ltc_ecc_set_type (replaced by ltc_ecc_curve)

From the last part of ECC changes:

 new ecc_export_openssl
 new ecc_import_openssl
 new ecc_import_x509

It will take some time.","Ad ecc_set_curve instead of ecc_set_dp - I am for renaming. I'll update the doc to use ecc_set_curve and create a separate PR with the actual renaming.
Ad ecc_make_key_ex I'll move it to Legacy Key Generation",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,393,2018-05-23T07:53:10Z,2018-07-06T11:44:18Z,2018-07-06T11:44:22Z,MERGED,True,484,199,1,https://github.com/karel-m,ECC doc update,4,[],https://github.com/libtom/libtomcrypt/pull/393,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/393#issuecomment-402439184,"Add doc for changes introduced in 24c0eb8

 new ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu)
 new ecc_set_dp(const ltc_ecc_curve *cu, ecc_key *key)
 new ecc_generate_key(prng_state *prng, int wprng, ecc_key *key)
 new ecc_set_key(const unsigned char *in, unsigned long inlen, int type, ecc_key *key)
 new ecc_get_key(unsigned char *out, unsigned long *outlen, int type, const ecc_key *key)
 new ecc_get_oid_str(char *out, unsigned long *outlen, const ecc_key *key)
 obsolete: ltc_ecc_set_type (replaced by ltc_ecc_curve)

From the last part of ECC changes:

 new ecc_export_openssl
 new ecc_import_openssl
 new ecc_import_x509

It will take some time.",@sjaeckel please have a look at the last two commits,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,395,2018-05-31T12:41:55Z,2018-06-03T15:48:31Z,2018-06-03T15:48:33Z,MERGED,True,900,773,463,https://github.com/sjaeckel,Add a new header file for private functions,5,[],https://github.com/libtom/libtomcrypt/pull/395,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/395,"This adds tomcrypt_private.h with all the declarations that were protected by LTC_SOURCE before.
Additionally this makes blake2[sb]_init() private.
I'd accompany that change by marking both functions as deprecated in the upcoming 1.18.2 release.
[Edit]: I just realized we can't simply deprecate them w/o having our source complain as well on compilation... I'll have to think about it a bit more...","This adds tomcrypt_private.h with all the declarations that were protected by LTC_SOURCE before.
Additionally this makes blake2[sb]_init() private.
I'd accompany that change by marking both functions as deprecated in the upcoming 1.18.2 release.
[Edit]: I just realized we can't simply deprecate them w/o having our source complain as well on compilation... I'll have to think about it a bit more...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,395,2018-05-31T12:41:55Z,2018-06-03T15:48:31Z,2018-06-03T15:48:33Z,MERGED,True,900,773,463,https://github.com/sjaeckel,Add a new header file for private functions,5,[],https://github.com/libtom/libtomcrypt/pull/395,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/395#issuecomment-393812768,"This adds tomcrypt_private.h with all the declarations that were protected by LTC_SOURCE before.
Additionally this makes blake2[sb]_init() private.
I'd accompany that change by marking both functions as deprecated in the upcoming 1.18.2 release.
[Edit]: I just realized we can't simply deprecate them w/o having our source complain as well on compilation... I'll have to think about it a bit more...","consider also changing makefile_include.mk like this:
- install -p -m 644 $(HEADERS) $(DESTDIR)$(INCPATH)
+ install -p -m 644 $(HEADERS_PUB) $(DESTDIR)$(INCPATH)",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,395,2018-05-31T12:41:55Z,2018-06-03T15:48:31Z,2018-06-03T15:48:33Z,MERGED,True,900,773,463,https://github.com/sjaeckel,Add a new header file for private functions,5,[],https://github.com/libtom/libtomcrypt/pull/395,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/395#issuecomment-393813228,"This adds tomcrypt_private.h with all the declarations that were protected by LTC_SOURCE before.
Additionally this makes blake2[sb]_init() private.
I'd accompany that change by marking both functions as deprecated in the upcoming 1.18.2 release.
[Edit]: I just realized we can't simply deprecate them w/o having our source complain as well on compilation... I'll have to think about it a bit more...","One more LTC_SOURCE to eliminate is in doc/Doxyfile
PREDEFINED             = LTC_SOURCE \
                         LTM_DESC \
                         GMP_DESC \
                         TFM_DESC",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,395,2018-05-31T12:41:55Z,2018-06-03T15:48:31Z,2018-06-03T15:48:33Z,MERGED,True,900,773,463,https://github.com/sjaeckel,Add a new header file for private functions,5,[],https://github.com/libtom/libtomcrypt/pull/395,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/395#issuecomment-394081832,"This adds tomcrypt_private.h with all the declarations that were protected by LTC_SOURCE before.
Additionally this makes blake2[sb]_init() private.
I'd accompany that change by marking both functions as deprecated in the upcoming 1.18.2 release.
[Edit]: I just realized we can't simply deprecate them w/o having our source complain as well on compilation... I'll have to think about it a bit more...","I'd accompany that change by marking both functions as deprecated in the upcoming 1.18.2 release.
[Edit]: I just realized we can't simply deprecate them w/o having our source complain as well on compilation... I'll have to think about it a bit more...

regarding the deprecation I think we shouldn't do that in 1.18.2 but only in develop (as already done for the math initializers). To prevent warnings in our internal code I'd leave the blake2[sb]_init() API as deprecated public and make it call the newly added _blake2[sb]_init() which contain the implementation. Okay?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,395,2018-05-31T12:41:55Z,2018-06-03T15:48:31Z,2018-06-03T15:48:33Z,MERGED,True,900,773,463,https://github.com/sjaeckel,Add a new header file for private functions,5,[],https://github.com/libtom/libtomcrypt/pull/395,https://github.com/ksherlock,5,https://github.com/libtom/libtomcrypt/pull/395#issuecomment-394085604,"This adds tomcrypt_private.h with all the declarations that were protected by LTC_SOURCE before.
Additionally this makes blake2[sb]_init() private.
I'd accompany that change by marking both functions as deprecated in the upcoming 1.18.2 release.
[Edit]: I just realized we can't simply deprecate them w/o having our source complain as well on compilation... I'll have to think about it a bit more...","I'm probably the only one, but I use blake2s_init() function from user code to generate hashes with non-standard digest sizes (128, 160, 224, and 256 are the most common but it can generate digests of 8-512 bits. There's also a configurable key parameter).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,395,2018-05-31T12:41:55Z,2018-06-03T15:48:31Z,2018-06-03T15:48:33Z,MERGED,True,900,773,463,https://github.com/sjaeckel,Add a new header file for private functions,5,[],https://github.com/libtom/libtomcrypt/pull/395,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/395#issuecomment-394087644,"This adds tomcrypt_private.h with all the declarations that were protected by LTC_SOURCE before.
Additionally this makes blake2[sb]_init() private.
I'd accompany that change by marking both functions as deprecated in the upcoming 1.18.2 release.
[Edit]: I just realized we can't simply deprecate them w/o having our source complain as well on compilation... I'll have to think about it a bit more...","Oh okay, then we'll leave them in the public API!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,397,2018-06-01T19:09:39Z,2018-06-02T10:16:02Z,2018-06-02T10:16:02Z,MERGED,True,3,3,2,https://github.com/fperrad,xsalsa20: some linting,2,[],https://github.com/libtom/libtomcrypt/pull/397,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/397,follow merge of PR #387,follow merge of PR #387,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,398,2018-06-02T11:37:06Z,2018-06-04T06:55:08Z,2018-06-04T06:55:32Z,MERGED,True,7,6,4,https://github.com/sjaeckel,Improve base16 api,2,[],https://github.com/libtom/libtomcrypt/pull/398,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/398,"As said in the commit-message:
probably we want to add more options in the future

I could think of support for some options of `xxd` resp. `hexdump`

e.g. the little-endian encoding of 2**n byte values","As said in the commit-message:
probably we want to add more options in the future

I could think of support for some options of `xxd` resp. `hexdump`

e.g. the little-endian encoding of 2**n byte values",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,398,2018-06-02T11:37:06Z,2018-06-04T06:55:08Z,2018-06-04T06:55:32Z,MERGED,True,7,6,4,https://github.com/sjaeckel,Improve base16 api,2,[],https://github.com/libtom/libtomcrypt/pull/398,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/398#issuecomment-394252662,"As said in the commit-message:
probably we want to add more options in the future

I could think of support for some options of `xxd` resp. `hexdump`

e.g. the little-endian encoding of 2**n byte values",I have merged this one so that I can continue with merging #400,True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,399,2018-06-03T15:52:06Z,2018-06-03T18:49:49Z,2018-06-03T18:50:50Z,MERGED,True,46,1062,21,https://github.com/sjaeckel,Remove katja,2,[],https://github.com/libtom/libtomcrypt/pull/399,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/399,as mentioned in #394,as mentioned in #394,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,399,2018-06-03T15:52:06Z,2018-06-03T18:49:49Z,2018-06-03T18:50:50Z,MERGED,True,46,1062,21,https://github.com/sjaeckel,Remove katja,2,[],https://github.com/libtom/libtomcrypt/pull/399,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/399#issuecomment-394172281,as mentioned in #394,"there are more katja and/or LTC_MKAT in:

src/misc/crypt/crypt.c
src/misc/crypt/crypt_sizes.c
src/misc/crypt/crypt_constants.c
src/headers/tomcrypt_custom.h
tests/tomcrypt_test.h
tests/test.c
demos/timing.c",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,399,2018-06-03T15:52:06Z,2018-06-03T18:49:49Z,2018-06-03T18:50:50Z,MERGED,True,46,1062,21,https://github.com/sjaeckel,Remove katja,2,[],https://github.com/libtom/libtomcrypt/pull/399,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/399#issuecomment-394177400,as mentioned in #394,"there are more katja and/or LTC_MKAT in:

should be gone :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,400,2018-06-03T17:50:47Z,2018-06-04T09:49:24Z,2018-06-04T09:49:27Z,MERGED,True,129,129,6,https://github.com/karel-m,avoid anonymous union,1,[],https://github.com/libtom/libtomcrypt/pull/400,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/400,"The following compiler does not like anonymous union:

cc: HP C/aC++ B3910B A.06.28.02 [Mar 09 2016]
operating system: HP-UX 11.31/64 U  ia64 hp Integrity rx2800 i2/64 Itanium(R) 9320/1361(4) ia64

Originally reported & patched by @Tux - see DCIT/perl-CryptX#44","The following compiler does not like anonymous union:

cc: HP C/aC++ B3910B A.06.28.02 [Mar 09 2016]
operating system: HP-UX 11.31/64 U  ia64 hp Integrity rx2800 i2/64 Itanium(R) 9320/1361(4) ia64

Originally reported & patched by @Tux - see DCIT/perl-CryptX#44",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,401,2018-06-05T14:49:06Z,2018-06-10T15:27:55Z,2018-06-10T15:28:00Z,MERGED,True,1,1,1,https://github.com/karel-m,fix der_length_custom_type - incorrect length of length,1,[],https://github.com/libtom/libtomcrypt/pull/401,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/401,"The bug was identified when trying to load the following DER:
3081a8
   020101
   040e20df177a6f7e4bb9fecbd2d75b57
   a07f
      307d
         020101
         301a
            06072a8648ce3d0101
            020f00db7c2abf62e35e668076bead208b
         3037
            040edb7c2abf62e35e668076bead2088
            040e659ef8ba043916eede8911702b22
            03150000f50b028e4d696e676875615175290472783fb1
         040f0209487239995a5ee76b55f9c2f098
         020f00db7c2abf62e35e7628dfac6561c5
         020101
   a112
      03100003a635105c5717812580408a3fd5ac

The interesting bit is the custom type a07f...020101 which is 129 bytes long; however der_length_custom_type calculated 130 (7f = 127 is the length of the payload, but the implementation calculated the length from the payload + id-byte a0 - which is in total 128 - which does not fit to 1 length-byte - which creates the difference 129 vs. 130).","The bug was identified when trying to load the following DER:
3081a8
   020101
   040e20df177a6f7e4bb9fecbd2d75b57
   a07f
      307d
         020101
         301a
            06072a8648ce3d0101
            020f00db7c2abf62e35e668076bead208b
         3037
            040edb7c2abf62e35e668076bead2088
            040e659ef8ba043916eede8911702b22
            03150000f50b028e4d696e676875615175290472783fb1
         040f0209487239995a5ee76b55f9c2f098
         020f00db7c2abf62e35e7628dfac6561c5
         020101
   a112
      03100003a635105c5717812580408a3fd5ac

The interesting bit is the custom type a07f...020101 which is 129 bytes long; however der_length_custom_type calculated 130 (7f = 127 is the length of the payload, but the implementation calculated the length from the payload + id-byte a0 - which is in total 128 - which does not fit to 1 length-byte - which creates the difference 129 vs. 130).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,402,2018-06-05T15:02:14Z,2018-06-10T17:06:25Z,2018-06-10T17:06:28Z,MERGED,True,3,4,1,https://github.com/karel-m,fix ecc_set_key - no check of private key input buffer size,1,[],https://github.com/libtom/libtomcrypt/pull/402,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/402,"When trying to load the following EC / DER key (generated by openssl):
3081be
   0201 01
   0415 00c78b055db0706fd86b5a15e14b9e51f0043d18f9
   a074
      3072
         0201 01
         3020
            0607 2a8648ce3d0101
            0215 00fffffffffffffffffffffffffffffffeffffac73
            3006
              0401 00
              0401 07
            0429 043b4c382ce37aa192a4019e763036f4f5dd4d7ebb938cf935318fdced6bc28286531733c3f03c4fee
            0215 0100000000000000000001b8fa16dfab9aca16b6b3
            0201 01
   a12c
      032a 00040ca9f03d79907c97538177a3027970abefa351073a73120e1b5d2dab02dde37c118a44f8cb267b56

I have found out that the private key:

0415 = LTC_ASN1_RAW_BIT_STRING
value 00c78b055db0706fd86b5a15e14b9e51f0043d18f9 (21 bytes)

is for some reason 1 byte longer (21 bytes) than the curve size (20 bytes).
Therefore I have removed the test inlen <= key->dp.size (not sure if this is not too relaxed, perhaps we can check whether key->k < prime or something like that)","When trying to load the following EC / DER key (generated by openssl):
3081be
   0201 01
   0415 00c78b055db0706fd86b5a15e14b9e51f0043d18f9
   a074
      3072
         0201 01
         3020
            0607 2a8648ce3d0101
            0215 00fffffffffffffffffffffffffffffffeffffac73
            3006
              0401 00
              0401 07
            0429 043b4c382ce37aa192a4019e763036f4f5dd4d7ebb938cf935318fdced6bc28286531733c3f03c4fee
            0215 0100000000000000000001b8fa16dfab9aca16b6b3
            0201 01
   a12c
      032a 00040ca9f03d79907c97538177a3027970abefa351073a73120e1b5d2dab02dde37c118a44f8cb267b56

I have found out that the private key:

0415 = LTC_ASN1_RAW_BIT_STRING
value 00c78b055db0706fd86b5a15e14b9e51f0043d18f9 (21 bytes)

is for some reason 1 byte longer (21 bytes) than the curve size (20 bytes).
Therefore I have removed the test inlen <= key->dp.size (not sure if this is not too relaxed, perhaps we can check whether key->k < prime or something like that)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,403,2018-06-07T20:00:54Z,2018-06-11T17:58:31Z,2018-06-12T06:44:38Z,CLOSED,False,1995,64,12,https://github.com/karel-m,Improved pkcs8 support (OBSOLETE),4,[],https://github.com/libtom/libtomcrypt/pull/403,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/403,go to #404,go to #404,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/404,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-403097128,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","When factoring-out the relevant pkcs#8 parts into an own module, I'll put it in src/pk/asn1/pkcs8? or do you think it should go somewhere else?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-403104622,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","I am also not sure, perhaps
src/misc/pbes/pbes1_decrypt.c
src/misc/pbes/pbes2_pbkdf2_decrypt.c         (or just pbes2_decrypt.c)
src/pk/asn1/pkcs8/der_decode_pkcs8_flexi.c",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-425726005,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests",@sjaeckel do you have any plans with your ideas from refactor/pr/pkcs8-improved (in libtomcrypt_p)?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-426914704,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests",I'm working on it ;),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427025790,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests",I've force-pushed pr/pkcs8-improved and created pr/pkcs8-improved-original which points to your original latest version,True,{'THUMBS_UP': ['https://github.com/karel-m']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427071178,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","so either we disable the PKCS#8 API's in the LTC_EASY build or we'd need the entire chain PKCS#8+PBES+PKCS#5+PKCS#12+PADDING ... what do you think?
... I just realized that all the PKCS options are enabled anyways for LTC_EASY ... so it'd be only the PADDING",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427114412,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests",Adding PADDING to LTC_EASY is IMO ok.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427121052,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","clang-tidy:
src/pk/ecc/ecc_import_pkcs8.c:29:41: error: statement should be inside braces [google-readability-braces-around-statements,-warnings-as-errors]
   if (flexi->type != LTC_ASN1_SEQUENCE)
                                        ^
                                         {
src/pk/ecc/ecc_import_pkcs8.c:33:44: error: statement should be inside braces [google-readability-braces-around-statements,-warnings-as-errors]
      if (!LTC_ASN1_IS_TYPE(cur, check->t))
                                           ^
                                            {
clang-tidy FAILED!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427125809,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","clang-tidy FAILED!


fixed locally, waiting for more review!?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427127605,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","It looks good, but while testing with my perl test suit (which passed all pkcs8 EC/RSA tests) it turned out that the latest ECDSA changes broke some wycheproof tests - now I am trying to fix them.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427129222,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","Okay, then I'll force-push so you can base your changes on top of that (if there are some to come)
btw @rmw42 you're also welcome to review if you feel like it :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/sjaeckel,13,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427148442,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","Do you probably have the time to create the missing test-vectors for pbes1 (sha1 with 3des), pbes2 (RC2 with weird key sizes) and encrypted cases for rsa?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/rmw42,14,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427166109,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","btw @rmw42 you're also welcome to review if you feel like it :)

Cheers! Not sure I'd even know where to start - haven't had any dealings with PKCS#8 ^_^;;",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/sjaeckel,15,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427167894,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","... haven't had any dealings with PKCS#8 ^_^;;

neither did I of your SSH stuff ;)
...also I meant more in regards to the code or obvious bugs, not functionality
[edit] and no worries if you don't review, your contributions are already more than enough!",True,{'THUMBS_UP': ['https://github.com/rmw42']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/karel-m,16,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427182497,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","Do you probably have the time to create the missing test-vectors for pbes1 (sha1 with 3des), pbes2 (RC2 with weird key sizes) and encrypted cases for rsa?

I'll do it over the weekend.",True,{'HOORAY': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/karel-m,17,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427497301,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests",RSA + encrypted pkcs8 tests added,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/sjaeckel,18,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427564760,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","RSA + encrypted pkcs8 tests added

awesome, thanks :)
also especially for the docs!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/karel-m,19,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427565020,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests",I think it is ready for rebase & merge (after merging #438),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/sjaeckel,20,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427567005,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests",Do we have to wait for #438 or can I also merge now?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/sjaeckel,21,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427570513,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","I just created testvectors for PBES2 RC2-40 and RC2-64 and they can't be handled... dunno yet why :(
rc2_keys.zip",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/karel-m,22,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427586100,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","Looks like we can load a key created like this:
openssl pkcs8 -topk8 -inform PEM -outform DER -passout pass:secret -in ../test.key \
-v2 rc2 -v2prf hmacWithSHA1 -out key_pkcs8_pbkdf2_sha1_rc2_cbc.der

But cannot load a key created like this:
openssl pkcs8 -topk8 -inform PEM -outform DER -passout pass:secret -in ../test.key \
-v2 rc2 -v2prf hmacWithSHA256 -out key_pkcs8_pbkdf2_sha256_rc2_cbc.der",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/karel-m,23,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427587402,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests",It looks link we incorrectly handle hmacWithSHA256  as in pbes_decrypt there is arg->type.h = sha1,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,404,2018-06-11T18:19:55Z,2018-10-07T09:40:31Z,2018-10-07T09:40:35Z,MERGED,True,1532,152,45,https://github.com/karel-m,Improved pkcs8 support,30,[],https://github.com/libtom/libtomcrypt/pull/404,https://github.com/sjaeckel,24,https://github.com/libtom/libtomcrypt/pull/404#issuecomment-427606255,"This is a re-created #403 which got closed and for some mysterious reasons cannot be re-opened. We should share the new ECC+pcks8 with RSA as the old rsa_import_pkcs8 does not support password protected keys.

 ecc_import_pkcs8
 rsa_import_pkcs8
 documentation
 further tests","got it! PBKDF2-params is specified in rfc2898 as follows and we didn't handle the optional keyLength...
   PBKDF2-params ::= SEQUENCE {
       salt CHOICE {
           specified OCTET STRING,
           otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}
       },
       iterationCount INTEGER (1..MAX),
       keyLength INTEGER (1..MAX) OPTIONAL,
       prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT
       algid-hmacWithSHA1 }",True,{'THUMBS_UP': ['https://github.com/karel-m']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,405,2018-06-11T22:05:38Z,2018-06-12T06:17:49Z,2018-06-12T06:18:05Z,MERGED,True,3,3,1,https://github.com/karel-m,fix ecc_import_openssl - bin_seed size,1,[],https://github.com/libtom/libtomcrypt/pull/405,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/405,related to yesterdays' ecc_import_openssl re-factoring,related to yesterdays' ecc_import_openssl re-factoring,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,406,2018-06-15T04:11:21Z,2018-06-19T09:45:39Z,2018-06-19T09:45:50Z,MERGED,True,1,5,1,https://github.com/buggywhip,Sosemanuk - remove what is effectively a NOP,2,[],https://github.com/libtom/libtomcrypt/pull/406,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/406,"prior return stmt was a failed attempt to initialize the remaining bytes of the state which is also negated by the policy of enforcing a call to sosemanuk_setiv() before calling sosemanuk_crypt().

Checklist


 documentation is added or updated
 tests are added or updated","prior return stmt was a failed attempt to initialize the remaining bytes of the state which is also negated by the policy of enforcing a call to sosemanuk_setiv() before calling sosemanuk_crypt().

Checklist


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,408,2018-06-17T11:01:06Z,2018-06-19T07:30:52Z,2020-09-24T09:35:58Z,MERGED,True,10,7,1,https://github.com/karel-m,ecc_sign_hash blinding CVE-2018-12437,1,[],https://github.com/libtom/libtomcrypt/pull/408,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/408,Fix for #407 aka CVE-2018-12437,Fix for #407 aka CVE-2018-12437,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,408,2018-06-17T11:01:06Z,2018-06-19T07:30:52Z,2020-09-24T09:35:58Z,MERGED,True,10,7,1,https://github.com/karel-m,ecc_sign_hash blinding CVE-2018-12437,1,[],https://github.com/libtom/libtomcrypt/pull/408,https://github.com/rofl0r,2,https://github.com/libtom/libtomcrypt/pull/408#issuecomment-397872739,Fix for #407 aka CVE-2018-12437,"out of curiosity, could you describe what exactly your fix does, @karel-m ?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,408,2018-06-17T11:01:06Z,2018-06-19T07:30:52Z,2020-09-24T09:35:58Z,MERGED,True,10,7,1,https://github.com/karel-m,ecc_sign_hash blinding CVE-2018-12437,1,[],https://github.com/libtom/libtomcrypt/pull/408,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/408#issuecomment-397873112,Fix for #407 aka CVE-2018-12437,"Sorry, here are some details from off-github communication.
Original disclosure:
NCC Group Security Advisory
https://www.nccgroup.trust
--------------------------------------------

Side Channel Based ECDSA Key Extraction in Libtomcrypt

Vendor: Libtomcrypt
Systems Affected: ECDSA signature generation 
Author: Keegan Ryan <keegan.ryan@nccgroup.trust>
Risk: Medium

Summary:
--------
An attacker capable of triggering signatures and mounting a side channel
attack against a victim can extract an ECDSA key in a practical amount of time.
The full attack can take only a few minutes on a modern system. We also suggest
countermeasures that can be applied to DSA and ECDSA signature generation to
protect against this attack.

Other cryptographic libraries are similarly affected, so eventual public
disclosure of this issue and release of a corresponding paper should be
coordinated with these parties as well.

Due to the number of affected libraries, we have not developed a working proof
of concept for Libtomcrypt, but we have developed a working proof
of concept for a library with a similar code pattern.

Location:
---------
When computing a DSA or ECDSA signature, the signer calculates
    r = x[kG]
    s = k^-1(m + rx)
over a finite field. Our attack targets non-constant time operations in
the addition step
    m + (rx).

Impact:
-------
An attacker can use this attack to extract an ECDSA private key from a victim,
and the requirements for the attacker are realistic. Consider a HTTPS server
running in a VM in a cloud environment. An unprivileged running in a colocated
VM can initiate a connection to the server to trigger a signature and use a
side channel to leak the desired information about the signature.

Details:
--------
This attack applies a known cryptanalytic technique in a new and unique way and
shows that the needed information is exposed by Libtomcrypt via well-known side channel
techniques.

In particular, we use the leaked information to construct an instance of the
Hidden Number Problem (HNP). The HNP has been used before in cryptanalytic
side channel attacks, but typically these attacks seek to leak bits of k during
the exponentiation step of computing r. Various methods exist to solve the HNP
efficiently, including a method based on highly efficient lattice reduction
algorithms.

The HNP problem can be stated as follows:
Given finite field of prime order q, unknown x \in F_q, and a series of
multipliers t_i and approximations u_i to x*t_i, recover the value of x.
Approximations can be written as
    |(t_i * x mod q) - u_i| < q * 2 ^ -l.
That is, when u_i is close to x*t_i, the absolute value on the left hand side is
small. If we can formulate our cryptanalytic attack in this way, we can use
HNP solvers to recover the value of x.

We are targeting the step of adding m to the product rx. In Libtomcrypt's ECDSA signing
code, rx has been reduced modulo q (although this is not the case in the DSA
code). We wish for our side channel to leak whether m + (rx mod q) is less than q or
not (here we are referring to addition within Z, not within Fq).

This is possible because of the non-constant time implementation of _ecc_sign_hash.
This function contains the following code snippet:

  /* find s = (e + xr)/k */
  if ((err = mp_invmod(pubkey.k, p, pubkey.k)) != CRYPT_OK)         { goto error; } /* k = 1/k */
  if ((err = mp_mulmod(key->k, r, p, s)) != CRYPT_OK)               { goto error; } /* s = xr */
  if ((err = mp_add(e, s, s)) != CRYPT_OK)                          { goto error; } /* s = e +  xr */
  if ((err = mp_mod(s, p, s)) != CRYPT_OK)                          { goto error; } /* s = e +  xr */
  if ((err = mp_mulmod(s, pubkey.k, p, s)) != CRYPT_OK)             { goto error; } /* s = (e + xr)/k */

It is clear that at each step the result is reduced modulo the curve order. This is done
with a call to mp_mod, which depends on the implementation but in libtommath does not
return in constant time.

Assume that the side channel indicates that e + xr > p. Thus we know (in our terms):
    m + (rx mod q) < q
	(rx mod q) < q - m
	|(rx mod q) - (q - m) / 2| < (q - m) / 2
The relationship to the HNP is obvious. Under our assumptions, the attacker knows
the value of m and the signature (r, s), so the attacker knows the HNP multiplier
r, approximation (q-m)/2, and bound (q-m)/2. After collecting several approximations
of this type, the attacker can use an HNP solver to calculate x, the private key.

This is a simplified view of the attack. In reality, there are limitations to the
bounds that HNP solvers can tolerate, the side channel may have errors, and it is
possible that the attacker can observe m but not control it. These obstacles can be
overcome with slight modifications to the procedure, but the fundamental idea is
the same.

The cryptanalysis has been implemented in a separate proof of concept and another
similar library has been successfully targeted using Flush+Reload to leak the desired
side-channel information. In that PoC, we demonstrate an unprivileged attacker recovering
a 256 bit ECDSA private key from a colocated process. Due to the number of libraries
with the same leaky code pattern, we have not developed a proof of concept for all
libraries, but we believe it would be straightforward to adapt the attack to compromise
this library.

Recommendation:
---------------
There are two approaches to mitigating this issues, and using both will help defend
against this sort of issue. Though both address slightly different risks, we believe
the first countermeasure is effective against a greater range of threats and its
implementation should be prioritized.

The first approach is to make modular arithmetic for computing the final value of s
branchless. Thus by ensuring there is no difference in code executed when
m + (rx mod q) < q, many side channels will be useless for recovering this data.
This will protect against currently known variations of Prime+Probe, Flush+Reload,
Spectre v1, and more. Since the time needed to compute s is dwarfed by the exponentiation
step in computing r, we believe that making such code constant time is unlikely to
incur a significant performance penalty. Additionally, although this work only
targets the modular addition, it is possible that the same information could be leaked
through modular multiplication, and making all operations involved in computing s
constant time would give greater assurance that the needed information is not being leaked.

The second approach is to use a blinding value for the sum. Even with constant time code
in place, it is theoretically possible that a side channel (such as power analysis under
a Hamming distance model) could distinguish between constant time code subtracting 0 from
the sum and subtracting q. To address this possibility, we recommend introducing a random
blinding multiplier b \in [1, q-1]. Instead of computing the reduced sum:

    (m + (r * x mod q) mod q)    and revealing if    m + (r * x mod q) < q
    
we propose computing

    (b^-1 * ((b * m mod q) + (b * r * x mod q)) mod q)    and revealing if    (bm mod q) + (brx mod q) < q.

Under these assumptions, the countermeasure is provably secure (although it does not
address if the side channel reveals different information).

Finally, we note that the countermeasures should also be applied to the DSA signature
generation algorithm. Since the sign function in dsa_sign_hash.c does not reduce the product r*x
before adding m, the DSA implementation is not vulnerable to this current attack. However,
this implementation may be vulnerable to future variants, and it would be better to protect
it at the same time as the ECDSA function.

Vendor Communication:
---------------------


About NCC Group:
--------------------
NCC Group is a global expert in cyber security and risk mitigation, 
working with businesses to protect their brand, value and reputation 
against the ever-evolving threat landscape. Our Security Consulting 
services leverage our extensive knowledge of current security 
vulnerabilities, penetration testing techniques and software development 
best practices to enable organizations to secure their applications 
against ever-present threats. At NCC Group we can boast unrivaled talent 
and recognized world-class security expertise. Bringing together best in 
class security consultancies iSEC Partners, Intrepidus Group, Matasano, 
NCC Group and NGS we have created one of the largest, most respected 
security consultancies in the world.

My patch is (I believe) trying to implement The second approach is to use a blinding value for the sum. mentioned above.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,408,2018-06-17T11:01:06Z,2018-06-19T07:30:52Z,2020-09-24T09:35:58Z,MERGED,True,10,7,1,https://github.com/karel-m,ecc_sign_hash blinding CVE-2018-12437,1,[],https://github.com/libtom/libtomcrypt/pull/408,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/408#issuecomment-397873312,Fix for #407 aka CVE-2018-12437,"And to make it clear what the change is about - here is the old (vulnerable) style:
/* find s = (e + xr)/k */
if ((err = mp_invmod(pubkey.k, p, pubkey.k)) != CRYPT_OK)    { goto error; } /* k = 1/k */
if ((err = mp_mulmod(key->k, r, p, s)) != CRYPT_OK)          { goto error; } /* s = xr */
if ((err = mp_add(e, s, s)) != CRYPT_OK)                     { goto error; } /* s = e +  xr */
if ((err = mp_mod(s, p, s)) != CRYPT_OK)                     { goto error; } /* s = e +  xr */
if ((err = mp_mulmod(s, pubkey.k, p, s)) != CRYPT_OK)        { goto error; } /* s = (e + xr)/k */

And the new (hopefully fixed) style:
if ((err = rand_bn_upto(b, p, prng, wprng)) != CRYPT_OK)     { goto error; } /* b = blinding value */
/* find s = (e + xr)/k */
if ((err = mp_mulmod(pubkey.k, b, p, pubkey.k)) != CRYPT_OK) { goto error; } /* k = kb */
if ((err = mp_invmod(pubkey.k, p, pubkey.k)) != CRYPT_OK)    { goto error; } /* k = 1/kb */
if ((err = mp_mulmod(key->k, r, p, s)) != CRYPT_OK)          { goto error; } /* s = xr */
if ((err = mp_mulmod(pubkey.k, s, p, s)) != CRYPT_OK)        { goto error; } /* s = xr/kb */
if ((err = mp_mulmod(pubkey.k, e, p, e)) != CRYPT_OK)        { goto error; } /* e = e/kb */
if ((err = mp_add(e, s, s)) != CRYPT_OK)                     { goto error; } /* s = e/kb + xr/kb */
if ((err = mp_mulmod(s, b, p, s)) != CRYPT_OK)               { goto error; } /* s = b(e/kb + xr/kb) = (e + xr)/k */",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,408,2018-06-17T11:01:06Z,2018-06-19T07:30:52Z,2020-09-24T09:35:58Z,MERGED,True,10,7,1,https://github.com/karel-m,ecc_sign_hash blinding CVE-2018-12437,1,[],https://github.com/libtom/libtomcrypt/pull/408,https://github.com/rofl0r,5,https://github.com/libtom/libtomcrypt/pull/408#issuecomment-397873775,Fix for #407 aka CVE-2018-12437,thanks! 👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,408,2018-06-17T11:01:06Z,2018-06-19T07:30:52Z,2020-09-24T09:35:58Z,MERGED,True,10,7,1,https://github.com/karel-m,ecc_sign_hash blinding CVE-2018-12437,1,[],https://github.com/libtom/libtomcrypt/pull/408,https://github.com/DerDakon,6,https://github.com/libtom/libtomcrypt/pull/408#issuecomment-698233716,Fix for #407 aka CVE-2018-12437,"I wonder if this is the same as CVE-2018-0495, which is the entry that e.g. libgcrypt used and that is linked from nccgroup.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,410,2018-06-21T20:13:33Z,,2018-07-16T08:40:40Z,OPEN,False,56,68,2,https://github.com/karel-m,fix or drop LTC_MECC_FP,1,[],https://github.com/libtom/libtomcrypt/pull/410,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/410,"In the branch pr/fix-LTC_MECC_FP I have tried (unsuccessfully) to fix LTC_MECC_FP support.
The fix does not work but before I invest more time into it I want to ask whether the LTC_MECC_FP is worth to keep, or whether it could be removed.","In the branch pr/fix-LTC_MECC_FP I have tried (unsuccessfully) to fix LTC_MECC_FP support.
The fix does not work but before I invest more time into it I want to ask whether the LTC_MECC_FP is worth to keep, or whether it could be removed.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,410,2018-06-21T20:13:33Z,,2018-07-16T08:40:40Z,OPEN,False,56,68,2,https://github.com/karel-m,fix or drop LTC_MECC_FP,1,[],https://github.com/libtom/libtomcrypt/pull/410,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/410#issuecomment-402236202,"In the branch pr/fix-LTC_MECC_FP I have tried (unsuccessfully) to fix LTC_MECC_FP support.
The fix does not work but before I invest more time into it I want to ask whether the LTC_MECC_FP is worth to keep, or whether it could be removed.","Just a question beforehand: I'm not 100% sure, but AFAIU LTC_MECC_FP makes timing attacks even easier, right?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,413,2018-06-22T07:56:26Z,2018-06-22T08:12:45Z,2018-06-22T08:12:53Z,CLOSED,False,2,1,1,https://github.com/karel-m,fix #411 buffer overflow in crypt_list_all_constants,1,[],https://github.com/libtom/libtomcrypt/pull/413,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/413,see #411,see #411,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,413,2018-06-22T07:56:26Z,2018-06-22T08:12:45Z,2018-06-22T08:12:53Z,CLOSED,False,2,1,1,https://github.com/karel-m,fix #411 buffer overflow in crypt_list_all_constants,1,[],https://github.com/libtom/libtomcrypt/pull/413,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/413#issuecomment-399357442,see #411,I was just finished with refactoring those two functions when you opened the PR :D,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,413,2018-06-22T07:56:26Z,2018-06-22T08:12:45Z,2018-06-22T08:12:53Z,CLOSED,False,2,1,1,https://github.com/karel-m,fix #411 buffer overflow in crypt_list_all_constants,1,[],https://github.com/libtom/libtomcrypt/pull/413,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/413#issuecomment-399357987,see #411,"No problem, feel free to drop my changes and use your re-factored code :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,414,2018-06-22T08:03:59Z,2018-06-22T09:33:16Z,2018-06-22T09:33:22Z,MERGED,True,22,36,4,https://github.com/sjaeckel,Fix/411,3,[],https://github.com/libtom/libtomcrypt/pull/414,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/414,"This also fixes #411 and fixes #380
... and re-factors how the strings are built up ...
dupes the fix done in #413 :)","This also fixes #411 and fixes #380
... and re-factors how the strings are built up ...
dupes the fix done in #413 :)",True,{'THUMBS_UP': ['https://github.com/rofl0r']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,414,2018-06-22T08:03:59Z,2018-06-22T09:33:16Z,2018-06-22T09:33:22Z,MERGED,True,22,36,4,https://github.com/sjaeckel,Fix/411,3,[],https://github.com/libtom/libtomcrypt/pull/414,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/414#issuecomment-399359436,"This also fixes #411 and fixes #380
... and re-factors how the strings are built up ...
dupes the fix done in #413 :)","char number[32], *ptr; >>  warning: unused variable ‘number’ [-Wunused-variable]",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,414,2018-06-22T08:03:59Z,2018-06-22T09:33:16Z,2018-06-22T09:33:22Z,MERGED,True,22,36,4,https://github.com/sjaeckel,Fix/411,3,[],https://github.com/libtom/libtomcrypt/pull/414,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/414#issuecomment-399360503,"This also fixes #411 and fixes #380
... and re-factors how the strings are built up ...
dupes the fix done in #413 :)","char number[32], *ptr; >> warning: unused variable ‘number’ [-Wunused-variable]

yeah and some other sloppy mistakes also already fixed...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,414,2018-06-22T08:03:59Z,2018-06-22T09:33:16Z,2018-06-22T09:33:22Z,MERGED,True,22,36,4,https://github.com/sjaeckel,Fix/411,3,[],https://github.com/libtom/libtomcrypt/pull/414,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/414#issuecomment-399361919,"This also fixes #411 and fixes #380
... and re-factors how the strings are built up ...
dupes the fix done in #413 :)",Looks good - BTW: it also fixes #380,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,414,2018-06-22T08:03:59Z,2018-06-22T09:33:16Z,2018-06-22T09:33:22Z,MERGED,True,22,36,4,https://github.com/sjaeckel,Fix/411,3,[],https://github.com/libtom/libtomcrypt/pull/414,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/414#issuecomment-399362546,"This also fixes #411 and fixes #380
... and re-factors how the strings are built up ...
dupes the fix done in #413 :)","Looks good - BTW: it also fixes #380

that's why I didn't only fix the bug ;)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,415,2018-06-22T21:57:25Z,2018-07-03T20:45:29Z,2018-07-03T20:45:35Z,MERGED,True,230,189,33,https://github.com/karel-m,fix clang-tidy warning: readability-else-after-return,2,[],https://github.com/libtom/libtomcrypt/pull/415,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/415,"The warnings:
libtomcrypt/src/ciphers/blowfish.c:583:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 56) {
     ^~~~~~~~
libtomcrypt/src/ciphers/cast5.c:710:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 16) {
     ^~~~~~~~
libtomcrypt/src/ciphers/kasumi.c:246:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/khazad.c:846:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/noekeon.c:317:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/rc2.c:404:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 128) {
     ^~~~~~~~
libtomcrypt/src/ciphers/rc5.c:311:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 128) {
     ^~~~~~~~
libtomcrypt/src/ciphers/rc6.c:321:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 128) {
     ^~~~~~~~
libtomcrypt/src/ciphers/skipjack.c:333:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 10) {
     ^~~~~~~~
libtomcrypt/src/misc/error_to_string.c:71:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/aes/aes.c:731:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize < 32) {
     ^~~~~~~~
libtomcrypt/src/ciphers/safer/safer.c:361:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/safer/safer.c:372:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/twofish/twofish.c:697:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize < 32) {
     ^~~~~~~~
libtomcrypt/src/mac/hmac/hmac_test.c:617:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (tested == 0) {
      ^~~~~~~~
libtomcrypt/src/misc/base64/base64_decode.c:109:11: warning: do not use 'else' after 'return' [readability-else-after-return]
          else
          ^~~~
libtomcrypt/src/misc/base64/base64_decode.c:115:11: warning: do not use 'else' after 'continue' [readability-else-after-return]
          else
          ^~~~
libtomcrypt/src/misc/hkdf/hkdf.c:33:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/misc/hkdf/hkdf_test.c:281:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (tested == 0) {
      ^~~~~~~~
libtomcrypt/src/modes/cbc/cbc_decrypt.c:61:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/modes/cbc/cbc_encrypt.c:55:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/modes/ecb/ecb_decrypt.c:42:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/modes/ecb/ecb_encrypt.c:42:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/pk/dh/dh_generate_key.c:22:4: warning: do not use 'else' after 'return' [readability-else-after-return]
   else if (groupsize <= 192) {
   ^~~~~~~~
libtomcrypt/src/pk/dsa/dsa_export.c:58:7: warning: do not use 'else' after 'return' [readability-else-after-return]
      else {
      ^~~~~~
libtomcrypt/src/pk/dsa/dsa_export.c:97:7: warning: do not use 'else' after 'return' [readability-else-after-return]
      else {
      ^~~~~~
libtomcrypt/src/pk/ecc/ecc_get_curve.c:213:4: warning: do not use 'else' after 'return' [readability-else-after-return]
   else
   ^~~~
libtomcrypt/src/pk/rsa/rsa_export.c:55:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/stream/rabbit/rabbit.c:300:8: warning: do not use 'else' after 'return' [readability-else-after-return]
     } else {
       ^~~~~~
libtomcrypt/src/pk/asn1/der/general/der_decode_asn1_length.c:44:9: warning: do not use 'else' after 'return' [readability-else-after-return]
      } else if (real_len > sizeof(decoded_len)) {
        ^~~~~~~~
libtomcrypt/src/pk/asn1/der/general/der_encode_asn1_identifier.c:44:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/pk/asn1/der/generalizedtime/der_decode_generalizedtime.c:115:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (buf[x] == '.') {
      ^~~~~~~~
libtomcrypt/src/pk/asn1/der/generalizedtime/der_decode_generalizedtime.c:130:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (buf[x] == '+' || buf[x] == '-') {
      ^~~~~~~~
libtomcrypt/src/pk/asn1/der/set/der_encode_set.c:36:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/pk/asn1/der/utctime/der_decode_utctime.c:98:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (buf[x] == '+' || buf[x] == '-') {
      ^~~~~~~~
libtomcrypt/src/pk/asn1/der/utctime/der_decode_utctime.c:111:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (buf[x] == '+' || buf[x] == '-') {
      ^~~~~~~~
libtomcrypt/src/pk/asn1/der/utf8/der_length_utf8_string.c:26:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (c <= 0x7FF) {
     ^~~~~~~~","The warnings:
libtomcrypt/src/ciphers/blowfish.c:583:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 56) {
     ^~~~~~~~
libtomcrypt/src/ciphers/cast5.c:710:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 16) {
     ^~~~~~~~
libtomcrypt/src/ciphers/kasumi.c:246:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/khazad.c:846:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/noekeon.c:317:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/rc2.c:404:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 128) {
     ^~~~~~~~
libtomcrypt/src/ciphers/rc5.c:311:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 128) {
     ^~~~~~~~
libtomcrypt/src/ciphers/rc6.c:321:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 128) {
     ^~~~~~~~
libtomcrypt/src/ciphers/skipjack.c:333:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 10) {
     ^~~~~~~~
libtomcrypt/src/misc/error_to_string.c:71:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/aes/aes.c:731:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize < 32) {
     ^~~~~~~~
libtomcrypt/src/ciphers/safer/safer.c:361:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/safer/safer.c:372:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/twofish/twofish.c:697:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize < 32) {
     ^~~~~~~~
libtomcrypt/src/mac/hmac/hmac_test.c:617:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (tested == 0) {
      ^~~~~~~~
libtomcrypt/src/misc/base64/base64_decode.c:109:11: warning: do not use 'else' after 'return' [readability-else-after-return]
          else
          ^~~~
libtomcrypt/src/misc/base64/base64_decode.c:115:11: warning: do not use 'else' after 'continue' [readability-else-after-return]
          else
          ^~~~
libtomcrypt/src/misc/hkdf/hkdf.c:33:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/misc/hkdf/hkdf_test.c:281:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (tested == 0) {
      ^~~~~~~~
libtomcrypt/src/modes/cbc/cbc_decrypt.c:61:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/modes/cbc/cbc_encrypt.c:55:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/modes/ecb/ecb_decrypt.c:42:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/modes/ecb/ecb_encrypt.c:42:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/pk/dh/dh_generate_key.c:22:4: warning: do not use 'else' after 'return' [readability-else-after-return]
   else if (groupsize <= 192) {
   ^~~~~~~~
libtomcrypt/src/pk/dsa/dsa_export.c:58:7: warning: do not use 'else' after 'return' [readability-else-after-return]
      else {
      ^~~~~~
libtomcrypt/src/pk/dsa/dsa_export.c:97:7: warning: do not use 'else' after 'return' [readability-else-after-return]
      else {
      ^~~~~~
libtomcrypt/src/pk/ecc/ecc_get_curve.c:213:4: warning: do not use 'else' after 'return' [readability-else-after-return]
   else
   ^~~~
libtomcrypt/src/pk/rsa/rsa_export.c:55:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/stream/rabbit/rabbit.c:300:8: warning: do not use 'else' after 'return' [readability-else-after-return]
     } else {
       ^~~~~~
libtomcrypt/src/pk/asn1/der/general/der_decode_asn1_length.c:44:9: warning: do not use 'else' after 'return' [readability-else-after-return]
      } else if (real_len > sizeof(decoded_len)) {
        ^~~~~~~~
libtomcrypt/src/pk/asn1/der/general/der_encode_asn1_identifier.c:44:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/pk/asn1/der/generalizedtime/der_decode_generalizedtime.c:115:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (buf[x] == '.') {
      ^~~~~~~~
libtomcrypt/src/pk/asn1/der/generalizedtime/der_decode_generalizedtime.c:130:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (buf[x] == '+' || buf[x] == '-') {
      ^~~~~~~~
libtomcrypt/src/pk/asn1/der/set/der_encode_set.c:36:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/pk/asn1/der/utctime/der_decode_utctime.c:98:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (buf[x] == '+' || buf[x] == '-') {
      ^~~~~~~~
libtomcrypt/src/pk/asn1/der/utctime/der_decode_utctime.c:111:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (buf[x] == '+' || buf[x] == '-') {
      ^~~~~~~~
libtomcrypt/src/pk/asn1/der/utf8/der_length_utf8_string.c:26:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (c <= 0x7FF) {
     ^~~~~~~~",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,415,2018-06-22T21:57:25Z,2018-07-03T20:45:29Z,2018-07-03T20:45:35Z,MERGED,True,230,189,33,https://github.com/karel-m,fix clang-tidy warning: readability-else-after-return,2,[],https://github.com/libtom/libtomcrypt/pull/415,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/415#issuecomment-402286930,"The warnings:
libtomcrypt/src/ciphers/blowfish.c:583:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 56) {
     ^~~~~~~~
libtomcrypt/src/ciphers/cast5.c:710:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 16) {
     ^~~~~~~~
libtomcrypt/src/ciphers/kasumi.c:246:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/khazad.c:846:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/noekeon.c:317:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/rc2.c:404:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 128) {
     ^~~~~~~~
libtomcrypt/src/ciphers/rc5.c:311:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 128) {
     ^~~~~~~~
libtomcrypt/src/ciphers/rc6.c:321:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 128) {
     ^~~~~~~~
libtomcrypt/src/ciphers/skipjack.c:333:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize > 10) {
     ^~~~~~~~
libtomcrypt/src/misc/error_to_string.c:71:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/aes/aes.c:731:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize < 32) {
     ^~~~~~~~
libtomcrypt/src/ciphers/safer/safer.c:361:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/safer/safer.c:372:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/ciphers/twofish/twofish.c:697:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (*keysize < 32) {
     ^~~~~~~~
libtomcrypt/src/mac/hmac/hmac_test.c:617:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (tested == 0) {
      ^~~~~~~~
libtomcrypt/src/misc/base64/base64_decode.c:109:11: warning: do not use 'else' after 'return' [readability-else-after-return]
          else
          ^~~~
libtomcrypt/src/misc/base64/base64_decode.c:115:11: warning: do not use 'else' after 'continue' [readability-else-after-return]
          else
          ^~~~
libtomcrypt/src/misc/hkdf/hkdf.c:33:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/misc/hkdf/hkdf_test.c:281:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (tested == 0) {
      ^~~~~~~~
libtomcrypt/src/modes/cbc/cbc_decrypt.c:61:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/modes/cbc/cbc_encrypt.c:55:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/modes/ecb/ecb_decrypt.c:42:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/modes/ecb/ecb_encrypt.c:42:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/pk/dh/dh_generate_key.c:22:4: warning: do not use 'else' after 'return' [readability-else-after-return]
   else if (groupsize <= 192) {
   ^~~~~~~~
libtomcrypt/src/pk/dsa/dsa_export.c:58:7: warning: do not use 'else' after 'return' [readability-else-after-return]
      else {
      ^~~~~~
libtomcrypt/src/pk/dsa/dsa_export.c:97:7: warning: do not use 'else' after 'return' [readability-else-after-return]
      else {
      ^~~~~~
libtomcrypt/src/pk/ecc/ecc_get_curve.c:213:4: warning: do not use 'else' after 'return' [readability-else-after-return]
   else
   ^~~~
libtomcrypt/src/pk/rsa/rsa_export.c:55:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/stream/rabbit/rabbit.c:300:8: warning: do not use 'else' after 'return' [readability-else-after-return]
     } else {
       ^~~~~~
libtomcrypt/src/pk/asn1/der/general/der_decode_asn1_length.c:44:9: warning: do not use 'else' after 'return' [readability-else-after-return]
      } else if (real_len > sizeof(decoded_len)) {
        ^~~~~~~~
libtomcrypt/src/pk/asn1/der/general/der_encode_asn1_identifier.c:44:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/pk/asn1/der/generalizedtime/der_decode_generalizedtime.c:115:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (buf[x] == '.') {
      ^~~~~~~~
libtomcrypt/src/pk/asn1/der/generalizedtime/der_decode_generalizedtime.c:130:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (buf[x] == '+' || buf[x] == '-') {
      ^~~~~~~~
libtomcrypt/src/pk/asn1/der/set/der_encode_set.c:36:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^~~~~~
libtomcrypt/src/pk/asn1/der/utctime/der_decode_utctime.c:98:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (buf[x] == '+' || buf[x] == '-') {
      ^~~~~~~~
libtomcrypt/src/pk/asn1/der/utctime/der_decode_utctime.c:111:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (buf[x] == '+' || buf[x] == '-') {
      ^~~~~~~~
libtomcrypt/src/pk/asn1/der/utf8/der_length_utf8_string.c:26:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else if (c <= 0x7FF) {
     ^~~~~~~~","would you mind adding a script to the repo (probably in .ci/) that can be run on request to re-analyze all those warnings?

see .ci/clang-tidy.sh",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,416,2018-06-22T22:21:59Z,2018-07-03T20:37:35Z,2018-07-03T21:39:07Z,MERGED,True,1,0,1,https://github.com/karel-m,fix clang-tidy warning: readability-non-const-parameter,1,[],https://github.com/libtom/libtomcrypt/pull/416,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/416,"The warning:
libtomcrypt/src/prngs/sprng.c:105:33: warning: pointer parameter 'out' can be pointer to const [readability-non-const-parameter]
int sprng_export(unsigned char *out, unsigned long *outlen, prng_state *prng)
                 ~~~~~~~~       ^
                 const","The warning:
libtomcrypt/src/prngs/sprng.c:105:33: warning: pointer parameter 'out' can be pointer to const [readability-non-const-parameter]
int sprng_export(unsigned char *out, unsigned long *outlen, prng_state *prng)
                 ~~~~~~~~       ^
                 const",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,417,2018-06-22T23:44:42Z,2018-07-03T20:35:56Z,2018-07-03T20:36:00Z,MERGED,True,174,174,12,https://github.com/karel-m,fix clang-tidy warning: inconsistent-declaration-parameter-name,1,[],https://github.com/libtom/libtomcrypt/pull/417,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/417,see #376,see #376,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,418,2018-06-25T02:58:17Z,2018-07-06T05:49:55Z,2018-07-10T05:33:28Z,CLOSED,False,555,188,24,https://github.com/buggywhip,stream cipher refinements,16,[],https://github.com/libtom/libtomcrypt/pull/418,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/418,"This PR addresses several issues found while reviewing the stream ciphers.  The current focus is on Salsa20/XSalsa20 and Sosemanuk, but the intent is, if in agreement, to extend the following to all stream ciphers.  ...and perhaps block ciphers and hash functions.
1- flow control between the cipher's functions: enforce the calling of setiv() before calling crypt(), enforce the calling of setup() before calling setiv(), etc.  The proper sequences vary for Salsa20, XSalsa20, and RC4 for example.


2- ""one call"" helper functions to support the [frequent] needs to crypt small, in-memory data with a single call.  See Salsa20 and Sosemanuk in doc/crypt.tex.
3- an alternate and preferred way to get a cipher's state size.  See bottom of Dynamic Language section in doc/crypt.tex.
4- miscellaneous small ""corrections""
Checklist


[ x ] documentation is added or updated
 tests will be added or updated","This PR addresses several issues found while reviewing the stream ciphers.  The current focus is on Salsa20/XSalsa20 and Sosemanuk, but the intent is, if in agreement, to extend the following to all stream ciphers.  ...and perhaps block ciphers and hash functions.
1- flow control between the cipher's functions: enforce the calling of setiv() before calling crypt(), enforce the calling of setup() before calling setiv(), etc.  The proper sequences vary for Salsa20, XSalsa20, and RC4 for example.


2- ""one call"" helper functions to support the [frequent] needs to crypt small, in-memory data with a single call.  See Salsa20 and Sosemanuk in doc/crypt.tex.
3- an alternate and preferred way to get a cipher's state size.  See bottom of Dynamic Language section in doc/crypt.tex.
4- miscellaneous small ""corrections""
Checklist


[ x ] documentation is added or updated
 tests will be added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,418,2018-06-25T02:58:17Z,2018-07-06T05:49:55Z,2018-07-10T05:33:28Z,CLOSED,False,555,188,24,https://github.com/buggywhip,stream cipher refinements,16,[],https://github.com/libtom/libtomcrypt/pull/418,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/418#issuecomment-400088783,"This PR addresses several issues found while reviewing the stream ciphers.  The current focus is on Salsa20/XSalsa20 and Sosemanuk, but the intent is, if in agreement, to extend the following to all stream ciphers.  ...and perhaps block ciphers and hash functions.
1- flow control between the cipher's functions: enforce the calling of setiv() before calling crypt(), enforce the calling of setup() before calling setiv(), etc.  The proper sequences vary for Salsa20, XSalsa20, and RC4 for example.


2- ""one call"" helper functions to support the [frequent] needs to crypt small, in-memory data with a single call.  See Salsa20 and Sosemanuk in doc/crypt.tex.
3- an alternate and preferred way to get a cipher's state size.  See bottom of Dynamic Language section in doc/crypt.tex.
4- miscellaneous small ""corrections""
Checklist


[ x ] documentation is added or updated
 tests will be added or updated","Larry, there are IMO too much things combined in one PR.
1/ Things related to st->status

I see the point, looks more or less reasonable

2/ The <something>_onecall stuff

here it needs some discussion
not that I am against but I am not sure whether there is a demand for this (I do not have a use case but others may have)
naming convention - we already use *_memory style for encauth functions of similar kind
these functions have to be in a separate .c files otherwise you get a bunch of useless bloat linked to your executable when using static library
if we want to support this we should provide it for all stream ciphers

3/ Ad <something>_state_size

thing like this IMO does not quite fit into libtomcrypt API
having a special functions like salsa20_state_size, xsalsa20_state_size, sosemanuk_state_size for 3 ""somehow chosen"" structs simply does not look right to me
do not we already have crypt_get_size for this?

4/ Renaming sosemanuk_state *ss > sosemanuk_state *st

this will become a merge conflict with my PR #417 (or vice versa)
not a big deal, just want you to know

And my comments to the code ... well, later :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,418,2018-06-25T02:58:17Z,2018-07-06T05:49:55Z,2018-07-10T05:33:28Z,CLOSED,False,555,188,24,https://github.com/buggywhip,stream cipher refinements,16,[],https://github.com/libtom/libtomcrypt/pull/418,https://github.com/buggywhip,3,https://github.com/libtom/libtomcrypt/pull/418#issuecomment-400502136,"This PR addresses several issues found while reviewing the stream ciphers.  The current focus is on Salsa20/XSalsa20 and Sosemanuk, but the intent is, if in agreement, to extend the following to all stream ciphers.  ...and perhaps block ciphers and hash functions.
1- flow control between the cipher's functions: enforce the calling of setiv() before calling crypt(), enforce the calling of setup() before calling setiv(), etc.  The proper sequences vary for Salsa20, XSalsa20, and RC4 for example.


2- ""one call"" helper functions to support the [frequent] needs to crypt small, in-memory data with a single call.  See Salsa20 and Sosemanuk in doc/crypt.tex.
3- an alternate and preferred way to get a cipher's state size.  See bottom of Dynamic Language section in doc/crypt.tex.
4- miscellaneous small ""corrections""
Checklist


[ x ] documentation is added or updated
 tests will be added or updated","there are IMO too much things combined in one PR.

I agree.  I will start over by canceling/deleting this PR/branch and resubmitting one for each topic.
     1- stream ciphers - call order mgmt using st->status
     2- stream ciphers - *_memory single function calls
     3- stream ciphers - *_state_size functions

And eventually, I'd like to see these concepts extended to block ciphers and hash functions where applicable.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,418,2018-06-25T02:58:17Z,2018-07-06T05:49:55Z,2018-07-10T05:33:28Z,CLOSED,False,555,188,24,https://github.com/buggywhip,stream cipher refinements,16,[],https://github.com/libtom/libtomcrypt/pull/418,https://github.com/buggywhip,4,https://github.com/libtom/libtomcrypt/pull/418#issuecomment-400503173,"This PR addresses several issues found while reviewing the stream ciphers.  The current focus is on Salsa20/XSalsa20 and Sosemanuk, but the intent is, if in agreement, to extend the following to all stream ciphers.  ...and perhaps block ciphers and hash functions.
1- flow control between the cipher's functions: enforce the calling of setiv() before calling crypt(), enforce the calling of setup() before calling setiv(), etc.  The proper sequences vary for Salsa20, XSalsa20, and RC4 for example.


2- ""one call"" helper functions to support the [frequent] needs to crypt small, in-memory data with a single call.  See Salsa20 and Sosemanuk in doc/crypt.tex.
3- an alternate and preferred way to get a cipher's state size.  See bottom of Dynamic Language section in doc/crypt.tex.
4- miscellaneous small ""corrections""
Checklist


[ x ] documentation is added or updated
 tests will be added or updated","2/ The <something>_onecall stuff

 here it needs some discussion
 not that I am against but I am not sure whether there is a demand for this (I do not have a use case but others may have)
I do.  I write a lot of small[er] programs and virtually all my *cryptions are on small data, be the written in Python or C.  A single helper function call as part of the called library is much preferred.
 naming convention - we already use *_memory style for encauth functions of similar kind
I wasn't aware.  I've adopted the *_memory() convention.
 these functions have to be in a separate .c files otherwise you get a bunch of useless bloat linked to your executable when using static library
I moved the _onecall() functions to misc/crypt/crypt_helper_functions and renamed them _memory().  Building crypt_helper_functions.c is controlled by a #define for LTC_HELPER_FUNCTIONS and each function is likewise controlled by the define for that cipher.  Is there some other reason separate files are required?
 if we want to support this we should provide it for all stream ciphers
part of the original plan",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,418,2018-06-25T02:58:17Z,2018-07-06T05:49:55Z,2018-07-10T05:33:28Z,CLOSED,False,555,188,24,https://github.com/buggywhip,stream cipher refinements,16,[],https://github.com/libtom/libtomcrypt/pull/418,https://github.com/buggywhip,5,https://github.com/libtom/libtomcrypt/pull/418#issuecomment-400503200,"This PR addresses several issues found while reviewing the stream ciphers.  The current focus is on Salsa20/XSalsa20 and Sosemanuk, but the intent is, if in agreement, to extend the following to all stream ciphers.  ...and perhaps block ciphers and hash functions.
1- flow control between the cipher's functions: enforce the calling of setiv() before calling crypt(), enforce the calling of setup() before calling setiv(), etc.  The proper sequences vary for Salsa20, XSalsa20, and RC4 for example.


2- ""one call"" helper functions to support the [frequent] needs to crypt small, in-memory data with a single call.  See Salsa20 and Sosemanuk in doc/crypt.tex.
3- an alternate and preferred way to get a cipher's state size.  See bottom of Dynamic Language section in doc/crypt.tex.
4- miscellaneous small ""corrections""
Checklist


[ x ] documentation is added or updated
 tests will be added or updated","3/ Ad <something>_state_size

 thing like this IMO does not quite fit into libtomcrypt API
 having a special functions like salsa20_state_size, xsalsa20_state_size, sosemanuk_state_size for 3 ""somehow chosen"" structs simply does not look right to me
 do not we already have crypt_get_size for this?
We do but these new functions make LTC much easier to use with languages like Python.  From the dynamic language section in crypt.tex:
 These new functions greatly simplify the supporting code needed
 in the calling programs.  Using Python as an example, this new
 function instantiates `sosemanuk_state` with one line.

     import ctypes
     ...
     LTC = ctypes.CDLL('libtomcrypt.dylib')
     ...
     state = ctypes.c_buffer(LTC.sosemanuk_state_size())

 replaces

     import ctypes
     ...
     LTC = ctypes.CDLL('libtomcrypt.dylib')
     ...
     def _get_size(name):
         size = ctypes.c_int(0)
         rc = LTC.crypt_get_size(bytes(name), byref(size))
         if rc != 0:
             raise Exception('LTC.crypt_get_size(%s) rc = %d' % (name, rc))
         return size.value
     ...
     state = ctypes.c_buffer(_get_size(b'sosemanuk_state'))
Salsa, XSalsa, and Sosemanuk were the first round.  I submitted one for each of the other streams.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,418,2018-06-25T02:58:17Z,2018-07-06T05:49:55Z,2018-07-10T05:33:28Z,CLOSED,False,555,188,24,https://github.com/buggywhip,stream cipher refinements,16,[],https://github.com/libtom/libtomcrypt/pull/418,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/418#issuecomment-400562452,"This PR addresses several issues found while reviewing the stream ciphers.  The current focus is on Salsa20/XSalsa20 and Sosemanuk, but the intent is, if in agreement, to extend the following to all stream ciphers.  ...and perhaps block ciphers and hash functions.
1- flow control between the cipher's functions: enforce the calling of setiv() before calling crypt(), enforce the calling of setup() before calling setiv(), etc.  The proper sequences vary for Salsa20, XSalsa20, and RC4 for example.


2- ""one call"" helper functions to support the [frequent] needs to crypt small, in-memory data with a single call.  See Salsa20 and Sosemanuk in doc/crypt.tex.
3- an alternate and preferred way to get a cipher's state size.  See bottom of Dynamic Language section in doc/crypt.tex.
4- miscellaneous small ""corrections""
Checklist


[ x ] documentation is added or updated
 tests will be added or updated","1/ Things related to st->status

LGTM


2/ The _onecall stuff
...
I wasn't aware.  I've adopted the *_memory() convention.


Perfect! Please create them in the appropriate folders as single files and not in a throw-in helper c-file

3/ Ad _state_size

please don't do this!
... also I don't see the disadvantage of using your _get_sizes() ... it's 6 lines of boilerplate in your python code vs. 3 lines of code in C + 1 new API function for each size you want to export like that ...
Now please split this PR up into 3 separate ones with the topics as proposed by Karel!
I'd do them in the order 4/ - 2/ - 1/ which is IMO the order of discussion-worthyness and therefore merged the fastest so we can go on.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,418,2018-06-25T02:58:17Z,2018-07-06T05:49:55Z,2018-07-10T05:33:28Z,CLOSED,False,555,188,24,https://github.com/buggywhip,stream cipher refinements,16,[],https://github.com/libtom/libtomcrypt/pull/418,https://github.com/buggywhip,7,https://github.com/libtom/libtomcrypt/pull/418#issuecomment-402932767,"This PR addresses several issues found while reviewing the stream ciphers.  The current focus is on Salsa20/XSalsa20 and Sosemanuk, but the intent is, if in agreement, to extend the following to all stream ciphers.  ...and perhaps block ciphers and hash functions.
1- flow control between the cipher's functions: enforce the calling of setiv() before calling crypt(), enforce the calling of setup() before calling setiv(), etc.  The proper sequences vary for Salsa20, XSalsa20, and RC4 for example.


2- ""one call"" helper functions to support the [frequent] needs to crypt small, in-memory data with a single call.  See Salsa20 and Sosemanuk in doc/crypt.tex.
3- an alternate and preferred way to get a cipher's state size.  See bottom of Dynamic Language section in doc/crypt.tex.
4- miscellaneous small ""corrections""
Checklist


[ x ] documentation is added or updated
 tests will be added or updated","#418 would be better if closed, subdivided into 4 smaller, better defined subtopics, and each resubmitted",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,418,2018-06-25T02:58:17Z,2018-07-06T05:49:55Z,2018-07-10T05:33:28Z,CLOSED,False,555,188,24,https://github.com/buggywhip,stream cipher refinements,16,[],https://github.com/libtom/libtomcrypt/pull/418,https://github.com/buggywhip,8,https://github.com/libtom/libtomcrypt/pull/418#issuecomment-402933024,"This PR addresses several issues found while reviewing the stream ciphers.  The current focus is on Salsa20/XSalsa20 and Sosemanuk, but the intent is, if in agreement, to extend the following to all stream ciphers.  ...and perhaps block ciphers and hash functions.
1- flow control between the cipher's functions: enforce the calling of setiv() before calling crypt(), enforce the calling of setup() before calling setiv(), etc.  The proper sequences vary for Salsa20, XSalsa20, and RC4 for example.


2- ""one call"" helper functions to support the [frequent] needs to crypt small, in-memory data with a single call.  See Salsa20 and Sosemanuk in doc/crypt.tex.
3- an alternate and preferred way to get a cipher's state size.  See bottom of Dynamic Language section in doc/crypt.tex.
4- miscellaneous small ""corrections""
Checklist


[ x ] documentation is added or updated
 tests will be added or updated",Oops,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,418,2018-06-25T02:58:17Z,2018-07-06T05:49:55Z,2018-07-10T05:33:28Z,CLOSED,False,555,188,24,https://github.com/buggywhip,stream cipher refinements,16,[],https://github.com/libtom/libtomcrypt/pull/418,https://github.com/sjaeckel,9,https://github.com/libtom/libtomcrypt/pull/418#issuecomment-402940642,"This PR addresses several issues found while reviewing the stream ciphers.  The current focus is on Salsa20/XSalsa20 and Sosemanuk, but the intent is, if in agreement, to extend the following to all stream ciphers.  ...and perhaps block ciphers and hash functions.
1- flow control between the cipher's functions: enforce the calling of setiv() before calling crypt(), enforce the calling of setup() before calling setiv(), etc.  The proper sequences vary for Salsa20, XSalsa20, and RC4 for example.


2- ""one call"" helper functions to support the [frequent] needs to crypt small, in-memory data with a single call.  See Salsa20 and Sosemanuk in doc/crypt.tex.
3- an alternate and preferred way to get a cipher's state size.  See bottom of Dynamic Language section in doc/crypt.tex.
4- miscellaneous small ""corrections""
Checklist


[ x ] documentation is added or updated
 tests will be added or updated","#418 would be better if closed, subdivided into 4 smaller, better defined subtopics, and each resubmitted

fine by me, please don't use weird characters in the branch names :D",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,421,2018-07-02T22:20:05Z,2018-07-03T20:30:42Z,2018-07-03T20:30:46Z,MERGED,True,13,10,3,https://github.com/karel-m,"fix ""make test"" built with no math provider or multiple providers",1,[],https://github.com/libtom/libtomcrypt/pull/421,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/421,"This PR fixes:

a crash when building tests linked with ltc without any math provider
a failure when building tests linked with ltc with multiple math providers (tfm is the trouble maker, any combination containing tfm fails)","This PR fixes:

a crash when building tests linked with ltc without any math provider
a failure when building tests linked with ltc with multiple math providers (tfm is the trouble maker, any combination containing tfm fails)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,422,2018-07-03T21:37:59Z,2018-07-06T15:53:13Z,2018-07-06T16:03:55Z,MERGED,True,124,75,26,https://github.com/karel-m,fix clang-tidy warning: google-readability-braces-around-statements,1,[],https://github.com/libtom/libtomcrypt/pull/422,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/422,"This is the last patch related to my clang-tidy testing. After this patch the script .ci/clang-tidy.sh should not throw any warning (at least with clang-tidy 6.0.0).
It is related to braces-around-statements for which the clang-tidy has two plugins: google-readability-braces-around-statements and readability-braces-around-statements.
I have chosen less restrictive google-readability-braces-around-statements.
It allows one line statements without braces:
if (something) some_func(1,2,3);
But does not allow:
if (something)
   some_func(1,2,3);
Which should be rewritten as:
if (something) {
   some_func(1,2,3);
}","This is the last patch related to my clang-tidy testing. After this patch the script .ci/clang-tidy.sh should not throw any warning (at least with clang-tidy 6.0.0).
It is related to braces-around-statements for which the clang-tidy has two plugins: google-readability-braces-around-statements and readability-braces-around-statements.
I have chosen less restrictive google-readability-braces-around-statements.
It allows one line statements without braces:
if (something) some_func(1,2,3);
But does not allow:
if (something)
   some_func(1,2,3);
Which should be rewritten as:
if (something) {
   some_func(1,2,3);
}",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,422,2018-07-03T21:37:59Z,2018-07-06T15:53:13Z,2018-07-06T16:03:55Z,MERGED,True,124,75,26,https://github.com/karel-m,fix clang-tidy warning: google-readability-braces-around-statements,1,[],https://github.com/libtom/libtomcrypt/pull/422,https://github.com/rofl0r,2,https://github.com/libtom/libtomcrypt/pull/422#issuecomment-403075122,"This is the last patch related to my clang-tidy testing. After this patch the script .ci/clang-tidy.sh should not throw any warning (at least with clang-tidy 6.0.0).
It is related to braces-around-statements for which the clang-tidy has two plugins: google-readability-braces-around-statements and readability-braces-around-statements.
I have chosen less restrictive google-readability-braces-around-statements.
It allows one line statements without braces:
if (something) some_func(1,2,3);
But does not allow:
if (something)
   some_func(1,2,3);
Which should be rewritten as:
if (something) {
   some_func(1,2,3);
}","advantage of
if (something)
   some_func(1,2,3);
is that you can put a breakpoint on the second line",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,422,2018-07-03T21:37:59Z,2018-07-06T15:53:13Z,2018-07-06T16:03:55Z,MERGED,True,124,75,26,https://github.com/karel-m,fix clang-tidy warning: google-readability-braces-around-statements,1,[],https://github.com/libtom/libtomcrypt/pull/422,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/422#issuecomment-403076729,"This is the last patch related to my clang-tidy testing. After this patch the script .ci/clang-tidy.sh should not throw any warning (at least with clang-tidy 6.0.0).
It is related to braces-around-statements for which the clang-tidy has two plugins: google-readability-braces-around-statements and readability-braces-around-statements.
I have chosen less restrictive google-readability-braces-around-statements.
It allows one line statements without braces:
if (something) some_func(1,2,3);
But does not allow:
if (something)
   some_func(1,2,3);
Which should be rewritten as:
if (something) {
   some_func(1,2,3);
}","I have changed:
if (something)
   some_func(1,2,3);

into:
if (something) {
   some_func(1,2,3);
}

So this advantage still applies.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,423,2018-07-03T22:09:37Z,2018-07-06T11:39:52Z,2018-07-06T11:39:56Z,MERGED,True,73,73,19,https://github.com/karel-m,rename ecc_set_dp >> ecc_set_curve + ecc_get_curve >> ecc_find_curve,3,[],https://github.com/libtom/libtomcrypt/pull/423,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/423,"as discussed in #393
Now we have similarly named:

int  ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu);
int  ecc_set_curve(const ltc_ecc_curve *cu, ecc_key *key);

I am not sure whether ecc_get_curve is proper here, maybe ecc_find_curve would be better?","as discussed in #393
Now we have similarly named:

int  ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu);
int  ecc_set_curve(const ltc_ecc_curve *cu, ecc_key *key);

I am not sure whether ecc_get_curve is proper here, maybe ecc_find_curve would be better?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,423,2018-07-03T22:09:37Z,2018-07-06T11:39:52Z,2018-07-06T11:39:56Z,MERGED,True,73,73,19,https://github.com/karel-m,rename ecc_set_dp >> ecc_set_curve + ecc_get_curve >> ecc_find_curve,3,[],https://github.com/libtom/libtomcrypt/pull/423,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/423#issuecomment-402358543,"as discussed in #393
Now we have similarly named:

int  ecc_get_curve(const char* name_or_oid, const ltc_ecc_curve** cu);
int  ecc_set_curve(const ltc_ecc_curve *cu, ecc_key *key);

I am not sure whether ecc_get_curve is proper here, maybe ecc_find_curve would be better?",find is indeed better 👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,426,2018-07-05T20:31:07Z,2018-07-06T16:37:55Z,2018-07-06T16:37:59Z,MERGED,True,285,92,11,https://github.com/sjaeckel,Feature/pkcs12,4,[],https://github.com/libtom/libtomcrypt/pull/426,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/426,"documentation is added or updated
 tests are added or updated

add pkcs#12 API factored-out from #404
[Edit] unfortunately I couldn't find any testvectors, does someone have some?","documentation is added or updated
 tests are added or updated

add pkcs#12 API factored-out from #404
[Edit] unfortunately I couldn't find any testvectors, does someone have some?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,426,2018-07-05T20:31:07Z,2018-07-06T16:37:55Z,2018-07-06T16:37:59Z,MERGED,True,285,92,11,https://github.com/sjaeckel,Feature/pkcs12,4,[],https://github.com/libtom/libtomcrypt/pull/426,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/426#issuecomment-403075673,"documentation is added or updated
 tests are added or updated

add pkcs#12 API factored-out from #404
[Edit] unfortunately I couldn't find any testvectors, does someone have some?",I would keep these two functions in tomcrypt_private.h. At least for now.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,426,2018-07-05T20:31:07Z,2018-07-06T16:37:55Z,2018-07-06T16:37:59Z,MERGED,True,285,92,11,https://github.com/sjaeckel,Feature/pkcs12,4,[],https://github.com/libtom/libtomcrypt/pull/426,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/426#issuecomment-403082897,"documentation is added or updated
 tests are added or updated

add pkcs#12 API factored-out from #404
[Edit] unfortunately I couldn't find any testvectors, does someone have some?","I would keep these two functions in tomcrypt_private.h. At least for now.

good idea! done",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,427,2018-07-06T06:38:02Z,2018-07-10T05:12:07Z,2018-07-12T01:21:49Z,CLOSED,False,103,103,4,https://github.com/buggywhip,rename sosemanuk_state *ss > sosemanuk_state *st,14,[],https://github.com/libtom/libtomcrypt/pull/427,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/427,"for consistency across all stream ciphers, rename sosemanuk_state *ss to sosemanuk_state *st  for the yet unreleased Sosemanuk
Checklist

 documentation is added or updated
 tests are added or updated","for consistency across all stream ciphers, rename sosemanuk_state *ss to sosemanuk_state *st  for the yet unreleased Sosemanuk
Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,427,2018-07-06T06:38:02Z,2018-07-10T05:12:07Z,2018-07-12T01:21:49Z,CLOSED,False,103,103,4,https://github.com/buggywhip,rename sosemanuk_state *ss > sosemanuk_state *st,14,[],https://github.com/libtom/libtomcrypt/pull/427,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/427#issuecomment-402946464,"for consistency across all stream ciphers, rename sosemanuk_state *ss to sosemanuk_state *st  for the yet unreleased Sosemanuk
Checklist

 documentation is added or updated
 tests are added or updated","Larry, did you used the latest develop as the base for this PR?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,427,2018-07-06T06:38:02Z,2018-07-10T05:12:07Z,2018-07-12T01:21:49Z,CLOSED,False,103,103,4,https://github.com/buggywhip,rename sosemanuk_state *ss > sosemanuk_state *st,14,[],https://github.com/libtom/libtomcrypt/pull/427,https://github.com/buggywhip,3,https://github.com/libtom/libtomcrypt/pull/427#issuecomment-402946776,"for consistency across all stream ciphers, rename sosemanuk_state *ss to sosemanuk_state *st  for the yet unreleased Sosemanuk
Checklist

 documentation is added or updated
 tests are added or updated",yes and I noticed someone had already performed the name change on sober128_state.  Thank you!,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,427,2018-07-06T06:38:02Z,2018-07-10T05:12:07Z,2018-07-12T01:21:49Z,CLOSED,False,103,103,4,https://github.com/buggywhip,rename sosemanuk_state *ss > sosemanuk_state *st,14,[],https://github.com/libtom/libtomcrypt/pull/427,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/427#issuecomment-403098381,"for consistency across all stream ciphers, rename sosemanuk_state *ss to sosemanuk_state *st  for the yet unreleased Sosemanuk
Checklist

 documentation is added or updated
 tests are added or updated","rebase please, not merging back :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,427,2018-07-06T06:38:02Z,2018-07-10T05:12:07Z,2018-07-12T01:21:49Z,CLOSED,False,103,103,4,https://github.com/buggywhip,rename sosemanuk_state *ss > sosemanuk_state *st,14,[],https://github.com/libtom/libtomcrypt/pull/427,https://github.com/buggywhip,5,https://github.com/libtom/libtomcrypt/pull/427#issuecomment-403099125,"for consistency across all stream ciphers, rename sosemanuk_state *ss to sosemanuk_state *st  for the yet unreleased Sosemanuk
Checklist

 documentation is added or updated
 tests are added or updated",I thought I only committed a resolved conflict.  ...a merge?  ???,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,427,2018-07-06T06:38:02Z,2018-07-10T05:12:07Z,2018-07-12T01:21:49Z,CLOSED,False,103,103,4,https://github.com/buggywhip,rename sosemanuk_state *ss > sosemanuk_state *st,14,[],https://github.com/libtom/libtomcrypt/pull/427,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/427#issuecomment-403099334,"for consistency across all stream ciphers, rename sosemanuk_state *ss to sosemanuk_state *st  for the yet unreleased Sosemanuk
Checklist

 documentation is added or updated
 tests are added or updated",w/o merge there's normally no conflict :),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,427,2018-07-06T06:38:02Z,2018-07-10T05:12:07Z,2018-07-12T01:21:49Z,CLOSED,False,103,103,4,https://github.com/buggywhip,rename sosemanuk_state *ss > sosemanuk_state *st,14,[],https://github.com/libtom/libtomcrypt/pull/427,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/427#issuecomment-403140663,"for consistency across all stream ciphers, rename sosemanuk_state *ss to sosemanuk_state *st  for the yet unreleased Sosemanuk
Checklist

 documentation is added or updated
 tests are added or updated","IMO it looks more or less good, just squash it into one commit",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,427,2018-07-06T06:38:02Z,2018-07-10T05:12:07Z,2018-07-12T01:21:49Z,CLOSED,False,103,103,4,https://github.com/buggywhip,rename sosemanuk_state *ss > sosemanuk_state *st,14,[],https://github.com/libtom/libtomcrypt/pull/427,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/427#issuecomment-403313390,"for consistency across all stream ciphers, rename sosemanuk_state *ss to sosemanuk_state *st  for the yet unreleased Sosemanuk
Checklist

 documentation is added or updated
 tests are added or updated","Another approach how to make it just a single commit:
git checkout develop
git pull
git checkout streams-make_state_names_consistent
git diff develop > tmp.diff
git reset develop --hard
patch -i tmp.diff -p 1
git commit -am 'rename sosemanuk_state *ss > sosemanuk_state *st'
git push --force",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,428,2018-07-07T17:55:50Z,2018-07-09T09:32:36Z,2018-07-09T09:32:40Z,MERGED,True,46,44,5,https://github.com/karel-m,fix -Wmissing-declarations -Wmissing-prototypes -Wmissing-noreturn,2,[],https://github.com/libtom/libtomcrypt/pull/428,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/428,partly fixes #424,partly fixes #424,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,429,2018-07-10T07:48:01Z,2018-09-07T14:49:26Z,2018-09-07T14:49:30Z,MERGED,True,246,195,15,https://github.com/sjaeckel,Remove oid_st,9,[],https://github.com/libtom/libtomcrypt/pull/429,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/429,"documentation is added or updated
 tests are added or updated

This is the first PR in order to resolve #362
In this PR we get rid of the only internally used struct oid_st.","documentation is added or updated
 tests are added or updated

This is the first PR in order to resolve #362
In this PR we get rid of the only internally used struct oid_st.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,430,2018-07-16T08:39:06Z,2018-09-07T09:57:38Z,2018-09-07T09:57:44Z,MERGED,True,39,4,3,https://github.com/sjaeckel,Fix OID issues,4,[],https://github.com/libtom/libtomcrypt/pull/430,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/430,"This fixes

the decoding of OID's in the root-node 2
the possibility to encode OID's with a root-node of 3","This fixes

the decoding of OID's in the root-node 2
the possibility to encode OID's with a root-node of 3",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,431,2018-07-30T05:20:19Z,2018-09-21T19:03:37Z,2018-10-04T14:37:30Z,MERGED,True,518,44,21,https://github.com/buggywhip,Streams - add single call crypt functions,2,[],https://github.com/libtom/libtomcrypt/pull/431,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/431,"Added single-call crypt functions to each of the stream ciphers using the <cipher>_memory() naming convention.
Checklist

 documentation is added or updated
 tests are added or updated","Added single-call crypt functions to each of the stream ciphers using the <cipher>_memory() naming convention.
Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,431,2018-07-30T05:20:19Z,2018-09-21T19:03:37Z,2018-10-04T14:37:30Z,MERGED,True,518,44,21,https://github.com/buggywhip,Streams - add single call crypt functions,2,[],https://github.com/libtom/libtomcrypt/pull/431,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/431#issuecomment-419851395,"Added single-call crypt functions to each of the stream ciphers using the <cipher>_memory() naming convention.
Checklist

 documentation is added or updated
 tests are added or updated",I took the freedom to rebase everything on top of develop and clean up the duplicate commits :),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,431,2018-07-30T05:20:19Z,2018-09-21T19:03:37Z,2018-10-04T14:37:30Z,MERGED,True,518,44,21,https://github.com/buggywhip,Streams - add single call crypt functions,2,[],https://github.com/libtom/libtomcrypt/pull/431,https://github.com/buggywhip,3,https://github.com/libtom/libtomcrypt/pull/431#issuecomment-419854225,"Added single-call crypt functions to each of the stream ciphers using the <cipher>_memory() naming convention.
Checklist

 documentation is added or updated
 tests are added or updated","On 10Sep, 2018, at 2:37 AM, Steffen Jaeckel ***@***.***> wrote:

 I took the freedom to rebase everything on top of develop and clean up the duplicate commits :)

Thanks.  ...but the git log graph looks funny.  ...and certainly not like it was after my rebase/squash.  ???  May I assume it is fixable?  ...how?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,431,2018-07-30T05:20:19Z,2018-09-21T19:03:37Z,2018-10-04T14:37:30Z,MERGED,True,518,44,21,https://github.com/buggywhip,Streams - add single call crypt functions,2,[],https://github.com/libtom/libtomcrypt/pull/431,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/431#issuecomment-420066545,"Added single-call crypt functions to each of the stream ciphers using the <cipher>_memory() naming convention.
Checklist

 documentation is added or updated
 tests are added or updated","I think we should include these xx_memory() implementations in the single c files where there's only a single file for now!

I am for keeping xx_memory() always in a separate .c file. It has obvious advantages (smaller code) when using static linking.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,431,2018-07-30T05:20:19Z,2018-09-21T19:03:37Z,2018-10-04T14:37:30Z,MERGED,True,518,44,21,https://github.com/buggywhip,Streams - add single call crypt functions,2,[],https://github.com/libtom/libtomcrypt/pull/431,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/431#issuecomment-420158399,"Added single-call crypt functions to each of the stream ciphers using the <cipher>_memory() naming convention.
Checklist

 documentation is added or updated
 tests are added or updated","Good point I didn't think about!
So let's keep it like that.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,433,2018-08-14T02:32:51Z,2018-09-07T06:24:03Z,2020-12-16T15:33:48Z,MERGED,True,11,6,1,https://github.com/orbea,makefile.shared: Support rlibtool.,1,[],https://github.com/libtom/libtomcrypt/pull/433,https://github.com/orbea,1,https://github.com/libtom/libtomcrypt/pull/433,"When building libtomcrypt with rlibtool instead of libtool it will fail when rlibtool fails to parse the generated libtool which does not exist.
Since rlibtool should be the default choice for most slibtool users in the future this patch will use slibtool-shared instead of rlibtool which will correctly build the shared library.
This could also help build the shared library on additional targets and hosts where the stock libtool does not have shared libraries enabled.","When building libtomcrypt with rlibtool instead of libtool it will fail when rlibtool fails to parse the generated libtool which does not exist.
Since rlibtool should be the default choice for most slibtool users in the future this patch will use slibtool-shared instead of rlibtool which will correctly build the shared library.
This could also help build the shared library on additional targets and hosts where the stock libtool does not have shared libraries enabled.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,433,2018-08-14T02:32:51Z,2018-09-07T06:24:03Z,2020-12-16T15:33:48Z,MERGED,True,11,6,1,https://github.com/orbea,makefile.shared: Support rlibtool.,1,[],https://github.com/libtom/libtomcrypt/pull/433,https://github.com/orbea,2,https://github.com/libtom/libtomcrypt/pull/433#issuecomment-412734358,"When building libtomcrypt with rlibtool instead of libtool it will fail when rlibtool fails to parse the generated libtool which does not exist.
Since rlibtool should be the default choice for most slibtool users in the future this patch will use slibtool-shared instead of rlibtool which will correctly build the shared library.
This could also help build the shared library on additional targets and hosts where the stock libtool does not have shared libraries enabled.","If this is acceptable I can make a PR for libtommath too.
The slibtool devs added the rlibtool symlink to address the issue of being able to dynamically determine if shared libraries or static archives should be built, but since libtommath doesn't use autotools it has no way of determining this and will fail requiring the older slibtool-shared symlink.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,433,2018-08-14T02:32:51Z,2018-09-07T06:24:03Z,2020-12-16T15:33:48Z,MERGED,True,11,6,1,https://github.com/orbea,makefile.shared: Support rlibtool.,1,[],https://github.com/libtom/libtomcrypt/pull/433,https://github.com/rofl0r,3,https://github.com/libtom/libtomcrypt/pull/433#issuecomment-412743322,"When building libtomcrypt with rlibtool instead of libtool it will fail when rlibtool fails to parse the generated libtool which does not exist.
Since rlibtool should be the default choice for most slibtool users in the future this patch will use slibtool-shared instead of rlibtool which will correctly build the shared library.
This could also help build the shared library on additional targets and hosts where the stock libtool does not have shared libraries enabled.",couldn't we just remove use of libtool completely ? i can't think of a single reason why it should be used.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,433,2018-08-14T02:32:51Z,2018-09-07T06:24:03Z,2020-12-16T15:33:48Z,MERGED,True,11,6,1,https://github.com/orbea,makefile.shared: Support rlibtool.,1,[],https://github.com/libtom/libtomcrypt/pull/433,https://github.com/orbea,4,https://github.com/libtom/libtomcrypt/pull/433#issuecomment-412748920,"When building libtomcrypt with rlibtool instead of libtool it will fail when rlibtool fails to parse the generated libtool which does not exist.
Since rlibtool should be the default choice for most slibtool users in the future this patch will use slibtool-shared instead of rlibtool which will correctly build the shared library.
This could also help build the shared library on additional targets and hosts where the stock libtool does not have shared libraries enabled.",I have no complaints with that.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,433,2018-08-14T02:32:51Z,2018-09-07T06:24:03Z,2020-12-16T15:33:48Z,MERGED,True,11,6,1,https://github.com/orbea,makefile.shared: Support rlibtool.,1,[],https://github.com/libtom/libtomcrypt/pull/433,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/433#issuecomment-412749678,"When building libtomcrypt with rlibtool instead of libtool it will fail when rlibtool fails to parse the generated libtool which does not exist.
Since rlibtool should be the default choice for most slibtool users in the future this patch will use slibtool-shared instead of rlibtool which will correctly build the shared library.
This could also help build the shared library on additional targets and hosts where the stock libtool does not have shared libraries enabled.","If we can replace those {r,s,}libtool features like so versioning etc. sure, why not.
Feel free to open a PR and we'll have a look",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,433,2018-08-14T02:32:51Z,2018-09-07T06:24:03Z,2020-12-16T15:33:48Z,MERGED,True,11,6,1,https://github.com/orbea,makefile.shared: Support rlibtool.,1,[],https://github.com/libtom/libtomcrypt/pull/433,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/433#issuecomment-419156216,"When building libtomcrypt with rlibtool instead of libtool it will fail when rlibtool fails to parse the generated libtool which does not exist.
Since rlibtool should be the default choice for most slibtool users in the future this patch will use slibtool-shared instead of rlibtool which will correctly build the shared library.
This could also help build the shared library on additional targets and hosts where the stock libtool does not have shared libraries enabled.","If we can replace those {r,s,}libtool features like so versioning etc. sure, why not.
Feel free to open a PR and we'll have a look

As it doesn't seem like someone will open that PR I'll merge this one.
FYI I've rebased the commit on top of develop as it was based on master.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,435,2018-09-08T09:52:36Z,2018-09-08T15:00:55Z,2018-09-08T15:00:55Z,MERGED,True,2,2,2,https://github.com/fperrad,some lintings,2,[],https://github.com/libtom/libtomcrypt/pull/435,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/435,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,1,https://github.com/libtom/libtomcrypt/pull/436,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,2,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-420211638,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Hmm... some of the builds are failing :(
I'm using:
make CFLAGS=""-DUSE_LTM -DLTM_DESC -I../libtommath"" EXTRALIBS=""../libtommath/libtommath.a""
locally on MacOS, with the latest LTM from GitHub... do some of the other maths providers not support ltc_mp.ecc_mul2add?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-420227330,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","do some of the other maths providers not support ltc_mp.ecc_mul2add?

good guess, but it's the missing sqrtmod_prime() implementation of tfm ... :-\",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,4,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-420231859,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Aha! Cheers... is there a standard workaround for that, then? The logic is the same as for compressed points, which seem to require sqrtmod_prime.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,5,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-420232009,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Oh...
#ifndef USE_TFM
      /* XXX-FIXME: TFM does not support sqrtmod_prime */
      /* export compressed public key */",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,6,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-420302592,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Well, only two failures now... can't tell what the problem is from Travis CI... stdout looks to show successful completion of the tests, but then a SIGSEGV is reported after it's exited :(",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,7,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-420422237,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Ahh... ltc_mp.ecc_mul2add is missing if built with:
EASY (-DLTC_EASY -O2, makefile V=1 IGNORE_SPEED=1)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-420570202,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","It looks like:
1/ the whole ecc_recovery_key should be inside #ifdef LTC_ECC_SHAMIR
2/ or we might consider adding #define LTC_ECC_SHAMIR into LTC_EASY",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,9,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-420681621,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Sure, happy to... just let me know what you want me to do...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-420789016,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Chapter 17.7.10 of the docs says: 1/ (IIUC)
I say: I don't care - but for sure I'm too lazy to re-write that Chapter and re-think all this and I don't know who's even using LTC_EASY so I'd also go for 1/ :)",True,{'THUMBS_UP': ['https://github.com/rmw42']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,11,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-420916201,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Sorry... the MacOS build of clang doesn't seem to do -Wunused-variable by default, so I missed those build errors :(",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-420917700,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Sorry... the MacOS build of clang doesn't seem to do -Wunused-variable by default, so I missed those build errors :(

No worries, that's why we have travis :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,13,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-420921054,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Fixed those two code review issues, squashed that and all post-makefile (ad8b15b) commits into a single commit.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,14,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-421349633,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","OK, have made those fixes... I'll wait for @karel-m's review as well, and can then squash the commit(s) if desired",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/karel-m,15,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-421479766,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","The signatures in the wild would be from Bitcoin/Ethereum, which is close
to the RFC7518 format. If that were to be supported, though, it'd also make
sense for ecc_sign_hash() to be able to create such signatures, which is
probably a rather bigger change than this pull request.

Considering the fact that the ecc related changes between libtomcrypt 1.18 > 1.19 will be quite huge it is IMO a good time for changing/extending ecc API so that it better handles different ecc signature types (if we want it it should happen before 1.19).
I may be wrong, but is not such a big change.
First, we need in tomcrypt_pk.h something like:
enum ecc_signature_type {
   LTC_ECCSIG_ANSIX962, /* ASN1 encoded, ANSI X9.62 */
   LTC_ECCSIG_RFC7518,  /* raw R, S values */
   LTC_ECCSIG_ETH,      /* raw R, S, V values */
};
Then:

rename _ecc_sign_hash > ecc_sign_hash_ex (new API function)
rename _ecc_verify_hash > ecc_verify_hash_ex (new API function)
after that ecc_verify_hash, ecc_verify_hash_rfc7518, ecc_sign_hash and ecc_sign_hash_rfc7518 can be turned into a simple #define ..
and you can return back int sigformat to your _ecc_recover_key that can be renamed to ecc_recover_key

I think, that it can go to this PR (for sure as a separate commit).
BTW: the name ecc_recover_key is not bad but it is basically a key import function; any ideas for ecc_import_<something> name?",True,{'THUMBS_UP': ['https://github.com/rmw42']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/karel-m,16,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-421483608,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","I did a quick skim - basically looks good, couple of comment added to the code. I'll look at it more carefully over the weekend.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,17,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-421538073,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","BTW: the name ecc_recover_key is not bad but it is basically a key import function; any ideas for ecc_import_<something> name?

I can see your point, but ""import"" implies that there's a symmetrical ""export""... this is really a side-effect of how ECDSA works, cancelling out the witness instead of the private key in order to find the public key.
I'm not sure ""recover"" is the best term, but it's the one that's used elsewhere (e.g. the ecrecover function in Solidity), and it conveys that it's bringing back something that's been lost...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,18,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-421539185,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Code review changes are in. I'll get on with the broader change for adding a new signature format today, since it seems like that's worth having.
I'll squash the code review changes when I commit that, to keep it tidy.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,19,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-421560047,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Lots of squashing... commit 6cb796a is everything up to this morning, the makefiles (commit aceb17b) are moved to just after this, and then commit 27b5035 is the new stuff for extended signature format handling.
ecc_sign_hash_ex() now takes the signature format and an (optional) pointer-to-int to store the recovery ID, for signature formats which discard it. This is passed as NULL by the macros.
I've tidied up ecc_sign_hash.c and ecc_verify_hash.c where I've touched them, to address the code review issues previously identified with ecc_recover_key.c. Hopefully all three are consistent now.
I've included a bunch of tests around key recovery. I took a signature example from the ethereum/go-ethereum project to verify compatibility, but then replaced it with a newly-generated equivalent test to avoid even the slightest sniff of LGPL code. Also added a bunch of random generate/sign/verify/recover tests for all the different curves.
I've also updated the docs to add the _ex versions of the methods.
Let me know what you think! :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,20,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-421560675,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","PS - Don't ask me what the private key for the new test was. It was randomly generated, and I forgot to print it out... Guess it proves that the public key is recovered without cheating ;-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,21,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-421561644,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated",Oops... ecc_free(&privkey) in the test but privkey wasn't used that early. Not caught in some build settings :(,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/karel-m,22,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-421795391,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Great work.
I am considering adding also something like:
   /* SSH + ECDSA signature format defined by RFC5656 */
   LTC_ECCSIG_RFC5656 = 0x3

I am pretty sure that dropbear guys (libtomcrypt prominent consumers) will appreciate it as nowadays they have to implement a quite ugly kung-fu around ECDSA sign/verify.
The SSH signature encoding is defined here https://tools.ietf.org/html/rfc5656#section-3.1.2 Technically it looks like:
ecdsa-sha2-<curvename><mpint_r><mpint_s>

There are basically 2 gotchas:
1/ we need to map ltc_ecc_dp->oid to <curvename>
2/ the bigint encoding (used for <mpint_r><mpint_s> part) is slightly special - see https://tools.ietf.org/html/rfc4251#section-5 (scroll to ""mpint"")
But if you start to feel that I am pushing you too far, just let me know. We can leave the SSH/ECDSA signature format for a separate PR.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,23,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-421815515,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","But if you start to feel that I am pushing you too far, just let me know. We can leave the SSH/ECDSA signature format for a separate PR.

I think that would definitely be better as a separate PR.
I'm happy to do the work, and the mpint format rules look very similar to ASN.1 DER (e.g. the mandatory zero prefix if the top bit is set in an unsigned value), but I don't know how long the curve name lookups will take to implement, and I've no idea where to find examples of this signature.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,24,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-422687686,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated",Is there anything else I need to do for this PR?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,25,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-423799372,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Rebased to current root/develop branch, squashed signature format/code review commits.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,26,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425633190,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Is there anything else you need me to do here?
I've got the suggested SSH+ECDSA stuff about half done in another branch, but it needs to be rebased for a pull request.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/karel-m,27,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425663085,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Ad LTC_ECCSIG_ETH27 - I would like to see it slightly more general; not strictly tied to secp256k1. Simply an ""ethereum-like"" format that stores: R (left zero-padded to the curve size), S (left zero-padded to the curve size) and 1 byte with recovery_id + 27. @rmw42  could you please change it in this way?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,28,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425663887,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Ad LTC_ECCSIG_ETH27 - I would like to see it slightly more general; not strictly tied to secp256k1. Simply an ""ethereum-like"" format that stores: R (left zero-padded to the curve size), S (left zero-padded to the curve size) and 1 byte with recovery_id + 27. @rmw42 could you please change it in this way?

What would use this? This is literally a new signature format that you're defining here, not one which exists anywhere in the world today.
I can see the point in a general-purpose (V,R,S) format, so that applications can get the recovery ID in a single blob of data, but IMHO that shouldn't have the ""+27"" hack in there.",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/karel-m,29,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425664485,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","I can see the point in a general-purpose (V,R,S) format, so that applications can get the recovery ID in a single blob of data, but IMHO that shouldn't have the ""+27"" hack in there.

That is why we have ""27"" in LTC_ECCSIG_ETH27 (which should be read as LTC_ECCSIG_WITH_RECOVERYID_AND_PLUS27_HACK_AS_USED_BY_ETHEREUM)
I am not aware on any more widely used ecc signature format containing recovery_id therefore I would stick to the ethereum-style format but keep it relaxed as for the underlying curve (providing that we are sure that recovery id always fits to 0..228)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/sjaeckel,30,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425664688,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","I am not aware on any more widely used ecc signature format containing recovery_id therefore I would stick to the ethereum-style format but keep it relaxed as for the underlying curve (providing that we are sure that recovery id always fits to 0..228)

TBH I wouldn't start to define a new protocol if there's no real use to it and would prefer to stick with this single implementation instead of a generalized imaginative new format which e.g. already has this +27 special case, overflows and what else comes up then...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,31,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425667958,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","For the signature format, how's this for a compromise?
I can add another entry to the enum, corresponding to an extended X9.62 (which seems to be the dominant signature format), containing SEQ{INT(r), INT(s), INT(v)} with the raw recovery value (no +27) and no restrictions on which curves can be used. Since ASN.1 includes length information, this doesn't rely on implicit size calculations based on the size of a curve, unlike the raw formats.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/karel-m,32,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425670777,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","No, that goes too far. I would stay with LTC_ECCSIG_ETH27 in one of the following variants:
1/ we will accept any curve
2/ we will accept only curves with cofactor == 1
3/ we will accept only SECP256K
In any case we should enforce the chosen limitation consistently for LTC_ECCSIG_ETH27 in ecc_sign_hash_ex , ecc_verify_hash_ex and ecc_recovery_key. Currently you check it only in ecc_sign_hash_ex.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,33,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425671544,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","OK, I'll add the curve OID checks to ecc_verify_hash_ex and ecc_recover_key, then. This format really doesn't exist for anything other than secp256k1. Sound good?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/karel-m,34,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425672965,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Perhaps consider utilising:
if ((err = ecc_get_oid_str(oid, &oidlen, key)) != CRYPT_OK) goto ...;
if (XSTRCMP(oid, ""1.3.132.0.10"") != 0) goto ...;",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,35,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425673598,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Yeah, that might be better... but since the same check is done in three places, it might be better as a separate comparison function along side things like pk_oid_num_to_str.
Since there's a bunch of curve<->OID stuff needed for the SSH+ECDSA changes, how about we leave it as-is for this PR and I make the changes in that branch?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/karel-m,36,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425673817,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","Ok, leave it as it is",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,37,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425701803,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated","OK, I think that's everything that was discussed... have I missed anything? Or is this PR now good to go?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/sjaeckel,38,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425724595,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated",👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,436,2018-09-11T09:10:12Z,2018-09-30T14:28:22Z,2018-09-30T14:34:40Z,MERGED,True,720,150,11,https://github.com/rmw42,Implement ecc_recover_key to recover public key from hash+signature,3,[],https://github.com/libtom/libtomcrypt/pull/436,https://github.com/rmw42,39,https://github.com/libtom/libtomcrypt/pull/436#issuecomment-425725015,"This patch implements ECC public key recovery from hash+signature.
There are only a small number of possible public keys, typically 2, corresponding to the 'r' value in an elliptic-curve signature. These can be represented by a single parity bit - as with X9.62 compressed keys - in addition to the signature, rather than pre-sharing the public key. This is used in Bitcoin/Ethereum to avoid an explicit representation of the public key, saving space in messages.
ecc_recover_key() takes a signature and message hash and an additional ""recovery ID"" value to specify which of the possible public keys to recover. Parameters are very similar to ecc_verify_hash(), but the public key is the output rather than an input.
See https://crypto.stackexchange.com/questions/18105/how-does-recovering-the-public-key-from-an-ecdsa-signature-work for the underlying maths.
Cheers,
Russ
Checklist

 documentation is added or updated
 tests are added or updated",Yay! Cheers :),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,437,2018-09-18T02:56:19Z,2018-09-28T01:52:41Z,2018-09-28T01:52:41Z,CLOSED,False,1,1,1,https://github.com/imays76,Fixed errors with Android by not using asm code in Android.,1,[],https://github.com/libtom/libtomcrypt/pull/437,https://github.com/imays76,1,https://github.com/libtom/libtomcrypt/pull/437,"Checklist


 tests are added or updated","Checklist


 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,437,2018-09-18T02:56:19Z,2018-09-28T01:52:41Z,2018-09-28T01:52:41Z,CLOSED,False,1,1,1,https://github.com/imays76,Fixed errors with Android by not using asm code in Android.,1,[],https://github.com/libtom/libtomcrypt/pull/437,https://github.com/rofl0r,2,https://github.com/libtom/libtomcrypt/pull/437#issuecomment-422429793,"Checklist


 tests are added or updated","maybe you post more details and the errors you got ? android can also be compiled on x86, btw...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,437,2018-09-18T02:56:19Z,2018-09-28T01:52:41Z,2018-09-28T01:52:41Z,CLOSED,False,1,1,1,https://github.com/imays76,Fixed errors with Android by not using asm code in Android.,1,[],https://github.com/libtom/libtomcrypt/pull/437,https://github.com/imays76,3,https://github.com/libtom/libtomcrypt/pull/437#issuecomment-422689790,"Checklist


 tests are added or updated","Many of Android devices have ARM CPU.
The problem I encountered was already several years ago and I don't remember what is the detailed problem. Maybe it is a compile error.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,437,2018-09-18T02:56:19Z,2018-09-28T01:52:41Z,2018-09-28T01:52:41Z,CLOSED,False,1,1,1,https://github.com/imays76,Fixed errors with Android by not using asm code in Android.,1,[],https://github.com/libtom/libtomcrypt/pull/437,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/437#issuecomment-422703350,"Checklist


 tests are added or updated","maybe you post more details and the errors you got ? android can also be compiled on x86, btw...

thanks for asking that question

Many of Android devices have ARM CPU.

but you're aware that this part of the code you've touched would only be used in Android for x86!?

The problem I encountered was already several years ago and I don't remember what is the detailed problem. Maybe it is a compile error.

Maybe this PR shouldn't be merged until you have more details on how to reproduce a failure and how this patch fixes that issue. Okay?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,1,https://github.com/libtom/libtomcrypt/pull/438,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,2,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-426537658,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated",@karel-m As promised :),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-426583587,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated",Great job!,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-426586171,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","And 2 warnings:
src/misc/ssh/ssh_test.c:59:5: error: no previous prototype for ‘_ssh_encoding_test’ [-Werror=missing-prototypes]
 int _ssh_encoding_test(void)
     ^~~~~~~~~~~~~~~~~~
src/misc/ssh/ssh_test.c:154:5: error: no previous prototype for ‘_ssh_decoding_test’ [-Werror=missing-prototypes]
 int _ssh_decoding_test(void)
     ^~~~~~~~~~~~~~~~~~",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,5,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-426745716,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","Great job!

Cheers! :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,6,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-426770273,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","Fixes in, and building now... hopefully that's all acceptable. Let me know if I missed anything! :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-426808951,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","gcc-7.3 with -Wformat=2
src/pk/ecc/ecc_ssh_ecdsa_encode_name.c: In function ‘ecc_ssh_ecdsa_encode_name’:
src/pk/ecc/ecc_ssh_ecdsa_encode_name.c:47:4: error: format not a string literal, argument types not checked [-Werror=format-nonliteral]
    size = snprintf(buffer, *buflen, pattern, oidstr);
    ^~~~

Can we somehow avoid this warning?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-426825041,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated",clang-tidy is without warnings 👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,9,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-426909757,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","gcc-7.3 with -Wformat=2
src/pk/ecc/ecc_ssh_ecdsa_encode_name.c: In function ‘ecc_ssh_ecdsa_encode_name’:
src/pk/ecc/ecc_ssh_ecdsa_encode_name.c:47:4: error: format not a string literal, argument types not checked [-Werror=format-nonliteral]
    size = snprintf(buffer, *buflen, pattern, oidstr);
    ^~~~

Can we somehow avoid this warning?

Ah, damn, an I thought I was being so clever changing the format string... well, if it has to be a literal, I can get rid of pattern entirely, use four snprintf() calls in the different branches of the if but leave the buffer length check as-is at the end...
Give me 5 minutes ;-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,10,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-427119856,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","in case of CRYPT_BUFFER_OVERFLOW we should return required buffer length

Done. I've refactored so it always returns the buffer length (i.e. string length + 1).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,11,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-427307965,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","I added a new check in ssh_decode_sequence_multi to ensure we don't read past the end of the buffer, which caught a bug in the name-list decoding tests (I'd used sizeof(string) instead of sizeof(nlist3) - copy/paste bug).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,12,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-427309581,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","OK, I've rebased to current develop branch (might need to do so again with the ecc_verify_hash_ex reversion), and I think that's all the things we've discussed... if there are any more issues, please let me know 😄",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,13,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-427749357,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","I've updated the length-check to remove one of the switches and keep track of the length remaining, rather than the end pointer, and rebased to the develop branch to fix the merge issues around cherry-picking pk_oid_cmp_with_ulong.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/sjaeckel,14,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-427773031,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated",@mkj did you have a look at this?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,15,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-427946552,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","Unrelated to the patch, I'm curious where SSH signature encoding is being used externally to the SSH protocol?

I don't think it is used anywhere else... @karel-m asked for this so you could avoid having to transform another signature format in Dropbear.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/karel-m,16,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-428096108,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","@mkj the idea was mine. During my (unfinished) work - karel-m/dropbear@4530ff6 - on a PR adopting Dropbear to the new libtomcrypt ecc_* stuff I saw the dark magic in dropbear's ecc.c related to ECDSA signatures which lead me to the idea that libtomcrypt should do a better job supporting our ""prominent customer"" (= dropbear).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/mkj,17,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-428196876,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","Ah right. I'm not sure it really makes sense for libtomcrypt to be parsing SSH packets when it's alongside another parser anyway.
I think it would work fine if there were just a
int ecc_verify_hash_raw(void *r, void *s,
    const unsigned char *hash, unsigned long hashlen,
    int *stat, const ecc_key *key)

etc which could be called? Dropbear needs to do some work outside anyway to know which hash_desc to use.
Currently Dropbear's bundled libtomcrypt skips LTC_DER since it isn't necessary (I just treat them as opaque blobs in a few places) - it avoids some code size. It would be nice to avoid having to pull that in too, maybe the dropbear_ecc_curve.oid in the new branch should just be a long array to memcmp()?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/sjaeckel,18,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-428355084,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","maybe the dropbear_ecc_curve.oid in the new branch should just be a long array to memcmp()?

The plan is to make all OID appearances per default string-based (providing still the possibility to use the ulong-array approach to de-/encode via the DER API). Would that be fine for you as well?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,19,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-429263231,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated",Rebased to current develop branch,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/karel-m,20,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-429538583,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","Ad @mkj 's comments

I think it would work fine if there were just a int ecc_verify_hash_raw(void *r, void *s, ...)

I do not like this. This will expose internal libtomcrypt guts (pointers to bignum structures) which we do not have yet in any public API function. Plus there is of course a completely new bunch of troubles related to the fact that math provider is not always libtommath.

Currently Dropbear's bundled libtomcrypt skips LTC_DER since it isn't necessary...

This is a valid point. The current all-in-one ecc_sign_hash_ex and ecc_verify_hash_ex forces anyone using ECDSA to link the whole ASN.1 stuff to their binary even if they are using just RFC 7518 or RFC 5656 (ssh2) signature format. IMO it is worth rethinking in a separate PR.
@sjaeckel can we merge this PR? (to me it looks good)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,21,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-429539032,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated","The current all-in-one ecc_sign_hash_ex and ecc_verify_hash_ex forces anyone using ECDSA to link the whole ASN.1 stuff to their binary

We could put that branch of the conditional on #ifdef LTC_DER so LTC_ECCSIG_ANSIX962 is only available as a signature format if the library is built with DER support and returns an error otherwise.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/karel-m,22,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-429539887,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated",This will not handle a static linking scenario when you have a static library built with all ASN.1/DER support but you want to just use RFC 7518 ECDSA signatures. I think we should somehow split ecc_sign_hash_ex.c and ecc_verify_hash_ex.c into more .c files.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,438,2018-10-02T21:22:21Z,2018-10-13T15:51:30Z,2018-10-14T07:36:05Z,MERGED,True,995,240,23,https://github.com/rmw42,LTC_ECCSIG_RFC5656 SSH+ECDSA signature format,4,[],https://github.com/libtom/libtomcrypt/pull/438,https://github.com/rmw42,23,https://github.com/libtom/libtomcrypt/pull/438#issuecomment-429603617,"Implementation of SSH+ECDSA signature format for ECC signatures as defined in RFC5656.
Includes a SSH data model encode/decode (gated on #define LTC_SSH), and OID string<->Curve comparison helper function (also used for secp256k1 checks for LTC_ECCSIG_ETH27)
Checklist

 documentation is added or updated
 tests are added or updated",Cheers! 👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,440,2018-10-03T09:51:25Z,2018-10-04T10:49:59Z,2018-10-04T10:49:59Z,CLOSED,False,511,0,2,https://github.com/t0p4,Update package to hunter,2,[],https://github.com/libtom/libtomcrypt/pull/440,https://github.com/t0p4,1,https://github.com/libtom/libtomcrypt/pull/440,Update package to hunter,Update package to hunter,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,440,2018-10-03T09:51:25Z,2018-10-04T10:49:59Z,2018-10-04T10:49:59Z,CLOSED,False,511,0,2,https://github.com/t0p4,Update package to hunter,2,[],https://github.com/libtom/libtomcrypt/pull/440,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/440#issuecomment-426972646,Update package to hunter,"Sorry, but we're (currently) not interested in managing yet another tool to build this library.
c.f. #391",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,442,2018-10-04T15:24:26Z,2018-10-04T17:52:35Z,2018-10-06T00:10:26Z,MERGED,True,199,200,9,https://github.com/karel-m,Rename macro 'byte' to 'LTC_BYTE',2,[],https://github.com/libtom/libtomcrypt/pull/442,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/442,see #439,see #439,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,442,2018-10-04T15:24:26Z,2018-10-04T17:52:35Z,2018-10-06T00:10:26Z,MERGED,True,199,200,9,https://github.com/karel-m,Rename macro 'byte' to 'LTC_BYTE',2,[],https://github.com/libtom/libtomcrypt/pull/442,https://github.com/mika314,2,https://github.com/libtom/libtomcrypt/pull/442#issuecomment-427529755,see #439,"Thank you, for quick response.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,443,2018-10-04T21:26:38Z,2018-10-05T10:32:50Z,2018-10-05T10:32:52Z,MERGED,True,55,2,2,https://github.com/karel-m,Less strict ecc_verify_hash_ex (as it was before ecc_recover_key),1,[],https://github.com/libtom/libtomcrypt/pull/443,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/443,"The recent ECDSA related changes (ecc_recover_key & co.) made ecc_verify_hash_ex a little bit more stricter (I know, it was my idea).
However, it turned out that 2 tests from wycheproof test suite started to fail.
Both cases were in category ""acceptable"" (so basically it is fine to reject them but also to accept them).
The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501

So with this PR we will accept the ""acceptable"" signature as we did before ecc_recover_key.
I have added both failing test cases to ecc_test.c","The recent ECDSA related changes (ecc_recover_key & co.) made ecc_verify_hash_ex a little bit more stricter (I know, it was my idea).
However, it turned out that 2 tests from wycheproof test suite started to fail.
Both cases were in category ""acceptable"" (so basically it is fine to reject them but also to accept them).
The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501

So with this PR we will accept the ""acceptable"" signature as we did before ecc_recover_key.
I have added both failing test cases to ecc_test.c",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,443,2018-10-04T21:26:38Z,2018-10-05T10:32:50Z,2018-10-05T10:32:52Z,MERGED,True,55,2,2,https://github.com/karel-m,Less strict ecc_verify_hash_ex (as it was before ecc_recover_key),1,[],https://github.com/libtom/libtomcrypt/pull/443,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/443#issuecomment-427175661,"The recent ECDSA related changes (ecc_recover_key & co.) made ecc_verify_hash_ex a little bit more stricter (I know, it was my idea).
However, it turned out that 2 tests from wycheproof test suite started to fail.
Both cases were in category ""acceptable"" (so basically it is fine to reject them but also to accept them).
The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501

So with this PR we will accept the ""acceptable"" signature as we did before ecc_recover_key.
I have added both failing test cases to ecc_test.c",Cc: @rmw42,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,443,2018-10-04T21:26:38Z,2018-10-05T10:32:50Z,2018-10-05T10:32:52Z,MERGED,True,55,2,2,https://github.com/karel-m,Less strict ecc_verify_hash_ex (as it was before ecc_recover_key),1,[],https://github.com/libtom/libtomcrypt/pull/443,https://github.com/rmw42,3,https://github.com/libtom/libtomcrypt/pull/443#issuecomment-427177897,"The recent ECDSA related changes (ecc_recover_key & co.) made ecc_verify_hash_ex a little bit more stricter (I know, it was my idea).
However, it turned out that 2 tests from wycheproof test suite started to fail.
Both cases were in category ""acceptable"" (so basically it is fine to reject them but also to accept them).
The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501

So with this PR we will accept the ""acceptable"" signature as we did before ecc_recover_key.
I have added both failing test cases to ecc_test.c","Ah... this is the checking the length of the r/s values, rather than just dividing the buffer length in 2? Fair enough. There's no great solution in a format which doesn't mark the lengths :(",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,443,2018-10-04T21:26:38Z,2018-10-05T10:32:50Z,2018-10-05T10:32:52Z,MERGED,True,55,2,2,https://github.com/karel-m,Less strict ecc_verify_hash_ex (as it was before ecc_recover_key),1,[],https://github.com/libtom/libtomcrypt/pull/443,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/443#issuecomment-427179315,"The recent ECDSA related changes (ecc_recover_key & co.) made ecc_verify_hash_ex a little bit more stricter (I know, it was my idea).
However, it turned out that 2 tests from wycheproof test suite started to fail.
Both cases were in category ""acceptable"" (so basically it is fine to reject them but also to accept them).
The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501

So with this PR we will accept the ""acceptable"" signature as we did before ecc_recover_key.
I have added both failing test cases to ecc_test.c","The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501


I just thought that this check could then still be done after the mp_read_unsigned_bin() or would this be redundant with the ""check for zero"" tests after init of r and s?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,443,2018-10-04T21:26:38Z,2018-10-05T10:32:50Z,2018-10-05T10:32:52Z,MERGED,True,55,2,2,https://github.com/karel-m,Less strict ecc_verify_hash_ex (as it was before ecc_recover_key),1,[],https://github.com/libtom/libtomcrypt/pull/443,https://github.com/rmw42,5,https://github.com/libtom/libtomcrypt/pull/443#issuecomment-427181122,"The recent ECDSA related changes (ecc_recover_key & co.) made ecc_verify_hash_ex a little bit more stricter (I know, it was my idea).
However, it turned out that 2 tests from wycheproof test suite started to fail.
Both cases were in category ""acceptable"" (so basically it is fine to reject them but also to accept them).
The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501

So with this PR we will accept the ""acceptable"" signature as we did before ecc_recover_key.
I have added both failing test cases to ecc_test.c","A rather more radical solution would be to throw the test out entirely, and consider every possible partition of the input string, one by one. That way we make no assumptions at all about the padded size of r and s, and could support 0501 or 0000050001 or 05000000000000000001...
Would probably want to be a flags parameter to ecc_verify_hash_ex_ex, for strict/normal/ludicrously_flexible... and I can't see any reason why anyone would want that functionality...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,443,2018-10-04T21:26:38Z,2018-10-05T10:32:50Z,2018-10-05T10:32:52Z,MERGED,True,55,2,2,https://github.com/karel-m,Less strict ecc_verify_hash_ex (as it was before ecc_recover_key),1,[],https://github.com/libtom/libtomcrypt/pull/443,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/443#issuecomment-427181901,"The recent ECDSA related changes (ecc_recover_key & co.) made ecc_verify_hash_ex a little bit more stricter (I know, it was my idea).
However, it turned out that 2 tests from wycheproof test suite started to fail.
Both cases were in category ""acceptable"" (so basically it is fine to reject them but also to accept them).
The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501

So with this PR we will accept the ""acceptable"" signature as we did before ecc_recover_key.
I have added both failing test cases to ecc_test.c",I do not have a strong opinion on this. Let's give it a day or two to think it over.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,443,2018-10-04T21:26:38Z,2018-10-05T10:32:50Z,2018-10-05T10:32:52Z,MERGED,True,55,2,2,https://github.com/karel-m,Less strict ecc_verify_hash_ex (as it was before ecc_recover_key),1,[],https://github.com/libtom/libtomcrypt/pull/443,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/443#issuecomment-427182107,"The recent ECDSA related changes (ecc_recover_key & co.) made ecc_verify_hash_ex a little bit more stricter (I know, it was my idea).
However, it turned out that 2 tests from wycheproof test suite started to fail.
Both cases were in category ""acceptable"" (so basically it is fine to reject them but also to accept them).
The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501

So with this PR we will accept the ""acceptable"" signature as we did before ecc_recover_key.
I have added both failing test cases to ecc_test.c","I do not have a strong opinion on this. Let's give it a day or two to think it over.

IMO it's good as it is now",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,443,2018-10-04T21:26:38Z,2018-10-05T10:32:50Z,2018-10-05T10:32:52Z,MERGED,True,55,2,2,https://github.com/karel-m,Less strict ecc_verify_hash_ex (as it was before ecc_recover_key),1,[],https://github.com/libtom/libtomcrypt/pull/443,https://github.com/rmw42,8,https://github.com/libtom/libtomcrypt/pull/443#issuecomment-427182522,"The recent ECDSA related changes (ecc_recover_key & co.) made ecc_verify_hash_ex a little bit more stricter (I know, it was my idea).
However, it turned out that 2 tests from wycheproof test suite started to fail.
Both cases were in category ""acceptable"" (so basically it is fine to reject them but also to accept them).
The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501

So with this PR we will accept the ""acceptable"" signature as we did before ecc_recover_key.
I have added both failing test cases to ecc_test.c","Yeah, agreed. I'd say there's a problem with wycheproof but, until/unless they fix it, the test needs to be the way it is now.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,443,2018-10-04T21:26:38Z,2018-10-05T10:32:50Z,2018-10-05T10:32:52Z,MERGED,True,55,2,2,https://github.com/karel-m,Less strict ecc_verify_hash_ex (as it was before ecc_recover_key),1,[],https://github.com/libtom/libtomcrypt/pull/443,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/443#issuecomment-427184805,"The recent ECDSA related changes (ecc_recover_key & co.) made ecc_verify_hash_ex a little bit more stricter (I know, it was my idea).
However, it turned out that 2 tests from wycheproof test suite started to fail.
Both cases were in category ""acceptable"" (so basically it is fine to reject them but also to accept them).
The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501

So with this PR we will accept the ""acceptable"" signature as we did before ecc_recover_key.
I have added both failing test cases to ecc_test.c",In fact there is newer wycheproof test suite than I am using - https://github.com/google/wycheproof,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,443,2018-10-04T21:26:38Z,2018-10-05T10:32:50Z,2018-10-05T10:32:52Z,MERGED,True,55,2,2,https://github.com/karel-m,Less strict ecc_verify_hash_ex (as it was before ecc_recover_key),1,[],https://github.com/libtom/libtomcrypt/pull/443,https://github.com/rmw42,10,https://github.com/libtom/libtomcrypt/pull/443#issuecomment-427186755,"The recent ECDSA related changes (ecc_recover_key & co.) made ecc_verify_hash_ex a little bit more stricter (I know, it was my idea).
However, it turned out that 2 tests from wycheproof test suite started to fail.
Both cases were in category ""acceptable"" (so basically it is fine to reject them but also to accept them).
The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501

So with this PR we will accept the ""acceptable"" signature as we did before ecc_recover_key.
I have added both failing test cases to ecc_test.c","In fact there is newer wycheproof test suite than I am using - https://github.com/google/wycheproof

It's still got that test in there, though :(",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,443,2018-10-04T21:26:38Z,2018-10-05T10:32:50Z,2018-10-05T10:32:52Z,MERGED,True,55,2,2,https://github.com/karel-m,Less strict ecc_verify_hash_ex (as it was before ecc_recover_key),1,[],https://github.com/libtom/libtomcrypt/pull/443,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/443#issuecomment-427188981,"The recent ECDSA related changes (ecc_recover_key & co.) made ecc_verify_hash_ex a little bit more stricter (I know, it was my idea).
However, it turned out that 2 tests from wycheproof test suite started to fail.
Both cases were in category ""acceptable"" (so basically it is fine to reject them but also to accept them).
The 100% correct signature looks like this (hexa):
00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001

The ""acceptable"" signature looks like this (hexa):
0501

So with this PR we will accept the ""acceptable"" signature as we did before ecc_recover_key.
I have added both failing test cases to ecc_test.c",BTW my quick check - there is at least 20 new ECDSA edge-cases that we do not implement correctly 😞,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,444,2018-10-04T21:49:00Z,2018-10-05T05:05:30Z,2018-10-13T16:59:09Z,MERGED,True,4,19,6,https://github.com/karel-m,Remove unused macros,1,[],https://github.com/libtom/libtomcrypt/pull/444,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/444,"Mentioned in #424
-Wunused-macros
src/ciphers/anubis.c:38:0: warning: macro ""MAX_KEYSIZEB"" is not used [-Wunused-macros]
 #define MAX_KEYSIZEB    (4*MAX_N)

src/ciphers/anubis.c:39:0: warning: macro ""BLOCKSIZE"" is not used [-Wunused-macros]
 #define BLOCKSIZE       128

src/ciphers/anubis.c:35:0: warning: macro ""MIN_ROUNDS"" is not used [-Wunused-macros]
 #define MIN_ROUNDS      (8 + MIN_N)

src/ciphers/anubis.c:40:0: warning: macro ""BLOCKSIZEB"" is not used [-Wunused-macros]
 #define BLOCKSIZEB      (BLOCKSIZE/8)

src/ciphers/anubis.c:36:0: warning: macro ""MAX_ROUNDS"" is not used [-Wunused-macros]
 #define MAX_ROUNDS      (8 + MAX_N)

src/ciphers/anubis.c:37:0: warning: macro ""MIN_KEYSIZEB"" is not used [-Wunused-macros]
 #define MIN_KEYSIZEB    (4*MIN_N)

src/ciphers/anubis.c:33:0: warning: macro ""MIN_N"" is not used [-Wunused-macros]
 #define MIN_N           4

src/ciphers/khazad.c:33:0: warning: macro ""KEYSIZE"" is not used [-Wunused-macros]
 #define KEYSIZE      128

src/ciphers/khazad.c:35:0: warning: macro ""BLOCKSIZE"" is not used [-Wunused-macros]
 #define BLOCKSIZE   64

src/ciphers/khazad.c:36:0: warning: macro ""BLOCKSIZEB"" is not used [-Wunused-macros]
 #define BLOCKSIZEB   (BLOCKSIZE/8)

src/ciphers/khazad.c:34:0: warning: macro ""KEYSIZEB"" is not used [-Wunused-macros]
 #define KEYSIZEB   (KEYSIZE/8)

src/ciphers/twofish/twofish.c:40:0: warning: macro ""MDS_POLY"" is not used [-Wunused-macros]
 #define MDS_POLY          0x169

src/mac/hmac/hmac_test.c:18:0: warning: macro ""LTC_HMAC_BLOCKSIZE"" is not used [-Wunused-macros]
 #define LTC_HMAC_BLOCKSIZE hash_descriptor[hash].blocksize

src/stream/sober128/sober128_stream.c:24:0: warning: macro ""FOLD"" is not used [-Wunused-macros]
 #define FOLD                      N /* how many iterations of folding to do */

src/stream/sober128/sober128_stream.c:29:0: warning: macro ""B"" is not used [-Wunused-macros]
 #define B(x,i) ((unsigned char)(((x) >> (8*i)) & 0xFF))","Mentioned in #424
-Wunused-macros
src/ciphers/anubis.c:38:0: warning: macro ""MAX_KEYSIZEB"" is not used [-Wunused-macros]
 #define MAX_KEYSIZEB    (4*MAX_N)

src/ciphers/anubis.c:39:0: warning: macro ""BLOCKSIZE"" is not used [-Wunused-macros]
 #define BLOCKSIZE       128

src/ciphers/anubis.c:35:0: warning: macro ""MIN_ROUNDS"" is not used [-Wunused-macros]
 #define MIN_ROUNDS      (8 + MIN_N)

src/ciphers/anubis.c:40:0: warning: macro ""BLOCKSIZEB"" is not used [-Wunused-macros]
 #define BLOCKSIZEB      (BLOCKSIZE/8)

src/ciphers/anubis.c:36:0: warning: macro ""MAX_ROUNDS"" is not used [-Wunused-macros]
 #define MAX_ROUNDS      (8 + MAX_N)

src/ciphers/anubis.c:37:0: warning: macro ""MIN_KEYSIZEB"" is not used [-Wunused-macros]
 #define MIN_KEYSIZEB    (4*MIN_N)

src/ciphers/anubis.c:33:0: warning: macro ""MIN_N"" is not used [-Wunused-macros]
 #define MIN_N           4

src/ciphers/khazad.c:33:0: warning: macro ""KEYSIZE"" is not used [-Wunused-macros]
 #define KEYSIZE      128

src/ciphers/khazad.c:35:0: warning: macro ""BLOCKSIZE"" is not used [-Wunused-macros]
 #define BLOCKSIZE   64

src/ciphers/khazad.c:36:0: warning: macro ""BLOCKSIZEB"" is not used [-Wunused-macros]
 #define BLOCKSIZEB   (BLOCKSIZE/8)

src/ciphers/khazad.c:34:0: warning: macro ""KEYSIZEB"" is not used [-Wunused-macros]
 #define KEYSIZEB   (KEYSIZE/8)

src/ciphers/twofish/twofish.c:40:0: warning: macro ""MDS_POLY"" is not used [-Wunused-macros]
 #define MDS_POLY          0x169

src/mac/hmac/hmac_test.c:18:0: warning: macro ""LTC_HMAC_BLOCKSIZE"" is not used [-Wunused-macros]
 #define LTC_HMAC_BLOCKSIZE hash_descriptor[hash].blocksize

src/stream/sober128/sober128_stream.c:24:0: warning: macro ""FOLD"" is not used [-Wunused-macros]
 #define FOLD                      N /* how many iterations of folding to do */

src/stream/sober128/sober128_stream.c:29:0: warning: macro ""B"" is not used [-Wunused-macros]
 #define B(x,i) ((unsigned char)(((x) >> (8*i)) & 0xFF))",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,445,2018-10-07T13:01:50Z,2018-10-08T13:34:50Z,2018-10-08T13:34:50Z,MERGED,True,4,4,3,https://github.com/fperrad,pbes: some linting,3,[],https://github.com/libtom/libtomcrypt/pull/445,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/445,"another point : the definition of oid_to_pbes is duplicated
https://github.com/libtom/libtomcrypt/blob/develop/src/misc/pbes/pbes1.c#L59-L62
https://github.com/libtom/libtomcrypt/blob/develop/src/misc/pbes/pbes2.c#L40-L43","another point : the definition of oid_to_pbes is duplicated
https://github.com/libtom/libtomcrypt/blob/develop/src/misc/pbes/pbes1.c#L59-L62
https://github.com/libtom/libtomcrypt/blob/develop/src/misc/pbes/pbes2.c#L40-L43",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,445,2018-10-07T13:01:50Z,2018-10-08T13:34:50Z,2018-10-08T13:34:50Z,MERGED,True,4,4,3,https://github.com/fperrad,pbes: some linting,3,[],https://github.com/libtom/libtomcrypt/pull/445,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/445#issuecomment-427679406,"another point : the definition of oid_to_pbes is duplicated
https://github.com/libtom/libtomcrypt/blob/develop/src/misc/pbes/pbes1.c#L59-L62
https://github.com/libtom/libtomcrypt/blob/develop/src/misc/pbes/pbes2.c#L40-L43","another point : the definition of oid_to_pbes is duplicated

right, it's nowhere used besides the two files w/o any usage possibility outside, so I thought it doesn't really belong in a header file... (besides probably src/misc/pbes.h which would be against our currently unwritten rules :) )",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,445,2018-10-07T13:01:50Z,2018-10-08T13:34:50Z,2018-10-08T13:34:50Z,MERGED,True,4,4,3,https://github.com/fperrad,pbes: some linting,3,[],https://github.com/libtom/libtomcrypt/pull/445,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/445#issuecomment-427679902,"another point : the definition of oid_to_pbes is duplicated
https://github.com/libtom/libtomcrypt/blob/develop/src/misc/pbes/pbes1.c#L59-L62
https://github.com/libtom/libtomcrypt/blob/develop/src/misc/pbes/pbes2.c#L40-L43",I understand that most likely @eduardsui could have some problems when he re-creates his amalgamation... and otherwise it's perfectly fine to re-define a typedef if the second is exactly the same :P,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,446,2018-10-07T15:53:14Z,,2021-04-11T12:04:27Z,OPEN,False,195,5,6,https://github.com/karel-m,Wycheproof failing ECC tests,2,[],https://github.com/libtom/libtomcrypt/pull/446,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/446,"Let's have a valid signature like:
  0x30,0x45,0x02,0x20,0x2b,0xa3,0xa8,0xbe,0x6b,0x94,0xd5,0xec,0x80,0xa6,0xd9,0xd1,0x19,0x0a,
  0x43,0x6e,0xff,0xe5,0x0d,0x85,0xa1,0xee,0xe8,0x59,0xb8,0xcc,0x6a,0xf9,0xbd,0x5c,0x2e,0x18,
  0x02,0x21,0x00,0xb3,0x29,0xf4,0x79,0xa2,0xbb,0xd0,0xa5,0xc3,0x84,0xee,0x14,0x93,0xb1,0xf5,
  0x18,0x6a,0x87,0x13,0x9c,0xac,0x5d,0xf4,0x08,0x7c,0x13,0x4b,0x49,0x15,0x68,0x47,0xdb,

Now let's patch the first 0x30 to 0x31 like:
  0x31,0x45,0x02,0x20,0x2b,0xa3,0xa8,0xbe,0x6b,0x94,0xd5,0xec,0x80,0xa6,0xd9,0xd1,0x19,0x0a,
  0x43,0x6e,0xff,0xe5,0x0d,0x85,0xa1,0xee,0xe8,0x59,0xb8,0xcc,0x6a,0xf9,0xbd,0x5c,0x2e,0x18,
  0x02,0x21,0x00,0xb3,0x29,0xf4,0x79,0xa2,0xbb,0xd0,0xa5,0xc3,0x84,0xee,0x14,0x93,0xb1,0xf5,
  0x18,0x6a,0x87,0x13,0x9c,0xac,0x5d,0xf4,0x08,0x7c,0x13,0x4b,0x49,0x15,0x68,0x47,0xdb,

We still verify the patched signature whereas wycheproof says that the patched signature should be considered invalid.
This PR contains just a failing test not the fix.","Let's have a valid signature like:
  0x30,0x45,0x02,0x20,0x2b,0xa3,0xa8,0xbe,0x6b,0x94,0xd5,0xec,0x80,0xa6,0xd9,0xd1,0x19,0x0a,
  0x43,0x6e,0xff,0xe5,0x0d,0x85,0xa1,0xee,0xe8,0x59,0xb8,0xcc,0x6a,0xf9,0xbd,0x5c,0x2e,0x18,
  0x02,0x21,0x00,0xb3,0x29,0xf4,0x79,0xa2,0xbb,0xd0,0xa5,0xc3,0x84,0xee,0x14,0x93,0xb1,0xf5,
  0x18,0x6a,0x87,0x13,0x9c,0xac,0x5d,0xf4,0x08,0x7c,0x13,0x4b,0x49,0x15,0x68,0x47,0xdb,

Now let's patch the first 0x30 to 0x31 like:
  0x31,0x45,0x02,0x20,0x2b,0xa3,0xa8,0xbe,0x6b,0x94,0xd5,0xec,0x80,0xa6,0xd9,0xd1,0x19,0x0a,
  0x43,0x6e,0xff,0xe5,0x0d,0x85,0xa1,0xee,0xe8,0x59,0xb8,0xcc,0x6a,0xf9,0xbd,0x5c,0x2e,0x18,
  0x02,0x21,0x00,0xb3,0x29,0xf4,0x79,0xa2,0xbb,0xd0,0xa5,0xc3,0x84,0xee,0x14,0x93,0xb1,0xf5,
  0x18,0x6a,0x87,0x13,0x9c,0xac,0x5d,0xf4,0x08,0x7c,0x13,0x4b,0x49,0x15,0x68,0x47,0xdb,

We still verify the patched signature whereas wycheproof says that the patched signature should be considered invalid.
This PR contains just a failing test not the fix.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,446,2018-10-07T15:53:14Z,,2021-04-11T12:04:27Z,OPEN,False,195,5,6,https://github.com/karel-m,Wycheproof failing ECC tests,2,[],https://github.com/libtom/libtomcrypt/pull/446,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/446#issuecomment-427664744,"Let's have a valid signature like:
  0x30,0x45,0x02,0x20,0x2b,0xa3,0xa8,0xbe,0x6b,0x94,0xd5,0xec,0x80,0xa6,0xd9,0xd1,0x19,0x0a,
  0x43,0x6e,0xff,0xe5,0x0d,0x85,0xa1,0xee,0xe8,0x59,0xb8,0xcc,0x6a,0xf9,0xbd,0x5c,0x2e,0x18,
  0x02,0x21,0x00,0xb3,0x29,0xf4,0x79,0xa2,0xbb,0xd0,0xa5,0xc3,0x84,0xee,0x14,0x93,0xb1,0xf5,
  0x18,0x6a,0x87,0x13,0x9c,0xac,0x5d,0xf4,0x08,0x7c,0x13,0x4b,0x49,0x15,0x68,0x47,0xdb,

Now let's patch the first 0x30 to 0x31 like:
  0x31,0x45,0x02,0x20,0x2b,0xa3,0xa8,0xbe,0x6b,0x94,0xd5,0xec,0x80,0xa6,0xd9,0xd1,0x19,0x0a,
  0x43,0x6e,0xff,0xe5,0x0d,0x85,0xa1,0xee,0xe8,0x59,0xb8,0xcc,0x6a,0xf9,0xbd,0x5c,0x2e,0x18,
  0x02,0x21,0x00,0xb3,0x29,0xf4,0x79,0xa2,0xbb,0xd0,0xa5,0xc3,0x84,0xee,0x14,0x93,0xb1,0xf5,
  0x18,0x6a,0x87,0x13,0x9c,0xac,0x5d,0xf4,0x08,0x7c,0x13,0x4b,0x49,0x15,0x68,0x47,0xdb,

We still verify the patched signature whereas wycheproof says that the patched signature should be considered invalid.
This PR contains just a failing test not the fix.","I have added one more wycheproof failing test labeled ""Edge case for Shamir multiplication"" - in this case we reject a signature that is valid (which is less dangerous).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,446,2018-10-07T15:53:14Z,,2021-04-11T12:04:27Z,OPEN,False,195,5,6,https://github.com/karel-m,Wycheproof failing ECC tests,2,[],https://github.com/libtom/libtomcrypt/pull/446,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/446#issuecomment-427686048,"Let's have a valid signature like:
  0x30,0x45,0x02,0x20,0x2b,0xa3,0xa8,0xbe,0x6b,0x94,0xd5,0xec,0x80,0xa6,0xd9,0xd1,0x19,0x0a,
  0x43,0x6e,0xff,0xe5,0x0d,0x85,0xa1,0xee,0xe8,0x59,0xb8,0xcc,0x6a,0xf9,0xbd,0x5c,0x2e,0x18,
  0x02,0x21,0x00,0xb3,0x29,0xf4,0x79,0xa2,0xbb,0xd0,0xa5,0xc3,0x84,0xee,0x14,0x93,0xb1,0xf5,
  0x18,0x6a,0x87,0x13,0x9c,0xac,0x5d,0xf4,0x08,0x7c,0x13,0x4b,0x49,0x15,0x68,0x47,0xdb,

Now let's patch the first 0x30 to 0x31 like:
  0x31,0x45,0x02,0x20,0x2b,0xa3,0xa8,0xbe,0x6b,0x94,0xd5,0xec,0x80,0xa6,0xd9,0xd1,0x19,0x0a,
  0x43,0x6e,0xff,0xe5,0x0d,0x85,0xa1,0xee,0xe8,0x59,0xb8,0xcc,0x6a,0xf9,0xbd,0x5c,0x2e,0x18,
  0x02,0x21,0x00,0xb3,0x29,0xf4,0x79,0xa2,0xbb,0xd0,0xa5,0xc3,0x84,0xee,0x14,0x93,0xb1,0xf5,
  0x18,0x6a,0x87,0x13,0x9c,0xac,0x5d,0xf4,0x08,0x7c,0x13,0x4b,0x49,0x15,0x68,0x47,0xdb,

We still verify the patched signature whereas wycheproof says that the patched signature should be considered invalid.
This PR contains just a failing test not the fix.",Added to more cases (both ASN.1 length encoding) when we accept signature that wycheproof guys consider invalid.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,447,2018-10-07T16:56:19Z,2018-10-13T16:50:49Z,2018-10-13T16:50:55Z,MERGED,True,10,9,2,https://github.com/karel-m,Make LTC_ECCSIG_RFC7518 strict (again) ,1,[],https://github.com/libtom/libtomcrypt/pull/447,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/447,"This is basically a revert of my PR - Less strict ecc_verify_hash_ex (as it was before ecc_recover_key) #443
It enforces the strict verification mode for LTC_ECCSIG_RFC7518 but allow relaxed variant via LTC_ECCSIG_RFC7518_RELAXED.
I have changed my mind after investigation the latest wycheproof test suit. it seems that since approx. a yar ago wycheproof guys (=google) did change the status of some ""acceptable"" cases to ""invalid"". In other words what is declared today as ""acceptable"" is a candidate for tomorrow's ""invalid"".
So my new proposal is either enforce the strict length validation (the size of the signature should always be twice the number of bytes of the size of the order) or this PR.
Cc: @sjaeckel @rmw42","This is basically a revert of my PR - Less strict ecc_verify_hash_ex (as it was before ecc_recover_key) #443
It enforces the strict verification mode for LTC_ECCSIG_RFC7518 but allow relaxed variant via LTC_ECCSIG_RFC7518_RELAXED.
I have changed my mind after investigation the latest wycheproof test suit. it seems that since approx. a yar ago wycheproof guys (=google) did change the status of some ""acceptable"" cases to ""invalid"". In other words what is declared today as ""acceptable"" is a candidate for tomorrow's ""invalid"".
So my new proposal is either enforce the strict length validation (the size of the signature should always be twice the number of bytes of the size of the order) or this PR.
Cc: @sjaeckel @rmw42",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,447,2018-10-07T16:56:19Z,2018-10-13T16:50:49Z,2018-10-13T16:50:55Z,MERGED,True,10,9,2,https://github.com/karel-m,Make LTC_ECCSIG_RFC7518 strict (again) ,1,[],https://github.com/libtom/libtomcrypt/pull/447,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/447#issuecomment-427683185,"This is basically a revert of my PR - Less strict ecc_verify_hash_ex (as it was before ecc_recover_key) #443
It enforces the strict verification mode for LTC_ECCSIG_RFC7518 but allow relaxed variant via LTC_ECCSIG_RFC7518_RELAXED.
I have changed my mind after investigation the latest wycheproof test suit. it seems that since approx. a yar ago wycheproof guys (=google) did change the status of some ""acceptable"" cases to ""invalid"". In other words what is declared today as ""acceptable"" is a candidate for tomorrow's ""invalid"".
So my new proposal is either enforce the strict length validation (the size of the signature should always be twice the number of bytes of the size of the order) or this PR.
Cc: @sjaeckel @rmw42",changed to the strict approach,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,450,2018-10-14T12:41:36Z,,2021-04-12T10:13:16Z,OPEN,False,758,374,29,https://github.com/karel-m,An attempt to fix #449 (ECDSA forcing DER/ASN.1),9,[],https://github.com/libtom/libtomcrypt/pull/450,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/450,"This PR is incomplete (as I am not sure if it is the proper fix).
Cc: @sjaeckel  @rmw42
TODO:

 update doc
 add a test case with eth27 signature format","This PR is incomplete (as I am not sure if it is the proper fix).
Cc: @sjaeckel  @rmw42
TODO:

 update doc
 add a test case with eth27 signature format",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,450,2018-10-14T12:41:36Z,,2021-04-12T10:13:16Z,OPEN,False,758,374,29,https://github.com/karel-m,An attempt to fix #449 (ECDSA forcing DER/ASN.1),9,[],https://github.com/libtom/libtomcrypt/pull/450,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/450#issuecomment-481802024,"This PR is incomplete (as I am not sure if it is the proper fix).
Cc: @sjaeckel  @rmw42
TODO:

 update doc
 add a test case with eth27 signature format",so we wait now until the two missing points are done?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,450,2018-10-14T12:41:36Z,,2021-04-12T10:13:16Z,OPEN,False,758,374,29,https://github.com/karel-m,An attempt to fix #449 (ECDSA forcing DER/ASN.1),9,[],https://github.com/libtom/libtomcrypt/pull/450,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/450#issuecomment-481833021,"This PR is incomplete (as I am not sure if it is the proper fix).
Cc: @sjaeckel  @rmw42
TODO:

 update doc
 add a test case with eth27 signature format","If you agree with the proposed split, which I assume you do, I (or any other volunteer) have to update doc and tests.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,450,2018-10-14T12:41:36Z,,2021-04-12T10:13:16Z,OPEN,False,758,374,29,https://github.com/karel-m,An attempt to fix #449 (ECDSA forcing DER/ASN.1),9,[],https://github.com/libtom/libtomcrypt/pull/450,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/450#issuecomment-481833260,"This PR is incomplete (as I am not sure if it is the proper fix).
Cc: @sjaeckel  @rmw42
TODO:

 update doc
 add a test case with eth27 signature format",👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,451,2018-10-14T17:14:01Z,2018-10-29T06:28:56Z,2018-10-29T06:29:00Z,MERGED,True,97,8,7,https://github.com/karel-m,Wycheproof failing GCM test - invalid/modified tag,5,[],https://github.com/libtom/libtomcrypt/pull/451,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/451,"The wycheproof GCM test in question:
{
  ""tcId"" : 16,
  ""comment"" : ""Flipped bit 0 in tag"",
  ""key"" : ""000102030405060708090a0b0c0d0e0f"",
  ""iv"" : ""505152535455565758595a5b"",
  ""aad"" : """",
  ""msg"" : ""202122232425262728292a2b2c2d2e2f"",
  ""ct"" : ""eb156d081ed6b6b55f4612f021d87b39"",
  ""tag"" : ""d9847dbc326a06e988c77ad3863e6083"",
  ""result"" : ""invalid"",
  ""flags"" : []
},

The trouble is that we do not reject invalid tag d9847dbc326a06e988c77ad3863e6083, corresponding valid tag has the first byte d8.","The wycheproof GCM test in question:
{
  ""tcId"" : 16,
  ""comment"" : ""Flipped bit 0 in tag"",
  ""key"" : ""000102030405060708090a0b0c0d0e0f"",
  ""iv"" : ""505152535455565758595a5b"",
  ""aad"" : """",
  ""msg"" : ""202122232425262728292a2b2c2d2e2f"",
  ""ct"" : ""eb156d081ed6b6b55f4612f021d87b39"",
  ""tag"" : ""d9847dbc326a06e988c77ad3863e6083"",
  ""result"" : ""invalid"",
  ""flags"" : []
},

The trouble is that we do not reject invalid tag d9847dbc326a06e988c77ad3863e6083, corresponding valid tag has the first byte d8.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,451,2018-10-14T17:14:01Z,2018-10-29T06:28:56Z,2018-10-29T06:29:00Z,MERGED,True,97,8,7,https://github.com/karel-m,Wycheproof failing GCM test - invalid/modified tag,5,[],https://github.com/libtom/libtomcrypt/pull/451,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/451#issuecomment-433340258,"The wycheproof GCM test in question:
{
  ""tcId"" : 16,
  ""comment"" : ""Flipped bit 0 in tag"",
  ""key"" : ""000102030405060708090a0b0c0d0e0f"",
  ""iv"" : ""505152535455565758595a5b"",
  ""aad"" : """",
  ""msg"" : ""202122232425262728292a2b2c2d2e2f"",
  ""ct"" : ""eb156d081ed6b6b55f4612f021d87b39"",
  ""tag"" : ""d9847dbc326a06e988c77ad3863e6083"",
  ""result"" : ""invalid"",
  ""flags"" : []
},

The trouble is that we do not reject invalid tag d9847dbc326a06e988c77ad3863e6083, corresponding valid tag has the first byte d8.","Exactly the same trouble with ChaCha20Poly1305 - failing test (one of them):
        {
          ""tcId"" : 62,
          ""comment"" : ""Flipped bit 0 in tag expected tag:a3e3fdf9fba6861b5ad2607f40b7f447"",
          ""key"" : ""00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff"",
          ""iv"" : ""000102030405060708090a0b"",
          ""aad"" : ""616164"",
          ""msg"" : """",
          ""ct"" : """",
          ""tag"" : ""a2e3fdf9fba6861b5ad2607f40b7f447"",
          ""result"" : ""invalid"",
          ""flags"" : []
        },",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,451,2018-10-14T17:14:01Z,2018-10-29T06:28:56Z,2018-10-29T06:29:00Z,MERGED,True,97,8,7,https://github.com/karel-m,Wycheproof failing GCM test - invalid/modified tag,5,[],https://github.com/libtom/libtomcrypt/pull/451,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/451#issuecomment-433426988,"The wycheproof GCM test in question:
{
  ""tcId"" : 16,
  ""comment"" : ""Flipped bit 0 in tag"",
  ""key"" : ""000102030405060708090a0b0c0d0e0f"",
  ""iv"" : ""505152535455565758595a5b"",
  ""aad"" : """",
  ""msg"" : ""202122232425262728292a2b2c2d2e2f"",
  ""ct"" : ""eb156d081ed6b6b55f4612f021d87b39"",
  ""tag"" : ""d9847dbc326a06e988c77ad3863e6083"",
  ""result"" : ""invalid"",
  ""flags"" : []
},

The trouble is that we do not reject invalid tag d9847dbc326a06e988c77ad3863e6083, corresponding valid tag has the first byte d8.","@sjaeckel a question for you (pls answer without looking into doc and/or code)
Let us have the following code:
      err = gcm_memory(idx, key, sizeof(key), iv, sizeof(iv), NULL, 0,
                       pt, sizeof(ct), ct, tag, &taglen, GCM_DECRYPT);
Do you expect that the caller should fill the tag + taglen before calling gcm_memory (which will handle the tag validation and return CRYPT_OK only if the tag is correct) OR do you expect that gcm_memory will only calculate the tag and store it into tag + taglen (so that the tag validation is caller's job)?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,451,2018-10-14T17:14:01Z,2018-10-29T06:28:56Z,2018-10-29T06:29:00Z,MERGED,True,97,8,7,https://github.com/karel-m,Wycheproof failing GCM test - invalid/modified tag,5,[],https://github.com/libtom/libtomcrypt/pull/451,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/451#issuecomment-433431949,"The wycheproof GCM test in question:
{
  ""tcId"" : 16,
  ""comment"" : ""Flipped bit 0 in tag"",
  ""key"" : ""000102030405060708090a0b0c0d0e0f"",
  ""iv"" : ""505152535455565758595a5b"",
  ""aad"" : """",
  ""msg"" : ""202122232425262728292a2b2c2d2e2f"",
  ""ct"" : ""eb156d081ed6b6b55f4612f021d87b39"",
  ""tag"" : ""d9847dbc326a06e988c77ad3863e6083"",
  ""result"" : ""invalid"",
  ""flags"" : []
},

The trouble is that we do not reject invalid tag d9847dbc326a06e988c77ad3863e6083, corresponding valid tag has the first byte d8.","ah the good ol' gcm_memory() API
TBH I've no clue, I'd have to have a look in the code or docs... Btw. there's still #307 ;)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,451,2018-10-14T17:14:01Z,2018-10-29T06:28:56Z,2018-10-29T06:29:00Z,MERGED,True,97,8,7,https://github.com/karel-m,Wycheproof failing GCM test - invalid/modified tag,5,[],https://github.com/libtom/libtomcrypt/pull/451,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/451#issuecomment-433433174,"The wycheproof GCM test in question:
{
  ""tcId"" : 16,
  ""comment"" : ""Flipped bit 0 in tag"",
  ""key"" : ""000102030405060708090a0b0c0d0e0f"",
  ""iv"" : ""505152535455565758595a5b"",
  ""aad"" : """",
  ""msg"" : ""202122232425262728292a2b2c2d2e2f"",
  ""ct"" : ""eb156d081ed6b6b55f4612f021d87b39"",
  ""tag"" : ""d9847dbc326a06e988c77ad3863e6083"",
  ""result"" : ""invalid"",
  ""flags"" : []
},

The trouble is that we do not reject invalid tag d9847dbc326a06e988c77ad3863e6083, corresponding valid tag has the first byte d8.","did I already mention that this is super inconsistent with e.g. ccm_memory() :)
(or the other AEAD algos which don't have a xx_memory() function...)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,451,2018-10-14T17:14:01Z,2018-10-29T06:28:56Z,2018-10-29T06:29:00Z,MERGED,True,97,8,7,https://github.com/karel-m,Wycheproof failing GCM test - invalid/modified tag,5,[],https://github.com/libtom/libtomcrypt/pull/451,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/451#issuecomment-433435815,"The wycheproof GCM test in question:
{
  ""tcId"" : 16,
  ""comment"" : ""Flipped bit 0 in tag"",
  ""key"" : ""000102030405060708090a0b0c0d0e0f"",
  ""iv"" : ""505152535455565758595a5b"",
  ""aad"" : """",
  ""msg"" : ""202122232425262728292a2b2c2d2e2f"",
  ""ct"" : ""eb156d081ed6b6b55f4612f021d87b39"",
  ""tag"" : ""d9847dbc326a06e988c77ad3863e6083"",
  ""result"" : ""invalid"",
  ""flags"" : []
},

The trouble is that we do not reject invalid tag d9847dbc326a06e988c77ad3863e6083, corresponding valid tag has the first byte d8.","Yes, it is a mess. And BTW I have a security hole in my perl bindings DCIT/perl-CryptX#47 as I was expecting that it validates the tag (which it doesn't).
What is the proper fix?
I tend to like more two separate functions: gcm_decrypt_verify_memory + gcm_encrypt_authenticate_memory as we have with EAX and completely DEPRECATE gcm_memory",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,451,2018-10-14T17:14:01Z,2018-10-29T06:28:56Z,2018-10-29T06:29:00Z,MERGED,True,97,8,7,https://github.com/karel-m,Wycheproof failing GCM test - invalid/modified tag,5,[],https://github.com/libtom/libtomcrypt/pull/451,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/451#issuecomment-433443663,"The wycheproof GCM test in question:
{
  ""tcId"" : 16,
  ""comment"" : ""Flipped bit 0 in tag"",
  ""key"" : ""000102030405060708090a0b0c0d0e0f"",
  ""iv"" : ""505152535455565758595a5b"",
  ""aad"" : """",
  ""msg"" : ""202122232425262728292a2b2c2d2e2f"",
  ""ct"" : ""eb156d081ed6b6b55f4612f021d87b39"",
  ""tag"" : ""d9847dbc326a06e988c77ad3863e6083"",
  ""result"" : ""invalid"",
  ""flags"" : []
},

The trouble is that we do not reject invalid tag d9847dbc326a06e988c77ad3863e6083, corresponding valid tag has the first byte d8.","BTW the doc for gcm_memory does not help at all.
A possible ""fix"" may be just updating doc and declare the current behaviour, IMO slightly unexpected, as a feature. Or can we afford an API breakage here?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,451,2018-10-14T17:14:01Z,2018-10-29T06:28:56Z,2018-10-29T06:29:00Z,MERGED,True,97,8,7,https://github.com/karel-m,Wycheproof failing GCM test - invalid/modified tag,5,[],https://github.com/libtom/libtomcrypt/pull/451,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/451#issuecomment-433451098,"The wycheproof GCM test in question:
{
  ""tcId"" : 16,
  ""comment"" : ""Flipped bit 0 in tag"",
  ""key"" : ""000102030405060708090a0b0c0d0e0f"",
  ""iv"" : ""505152535455565758595a5b"",
  ""aad"" : """",
  ""msg"" : ""202122232425262728292a2b2c2d2e2f"",
  ""ct"" : ""eb156d081ed6b6b55f4612f021d87b39"",
  ""tag"" : ""d9847dbc326a06e988c77ad3863e6083"",
  ""result"" : ""invalid"",
  ""flags"" : []
},

The trouble is that we do not reject invalid tag d9847dbc326a06e988c77ad3863e6083, corresponding valid tag has the first byte d8.","Yes, it is a mess. And BTW I have a security hole in my perl bindings DCIT/perl-CryptX#47 as I as expecting that it validates the tag (which it doesn't).

ooops

What is the proper fix?

very good question!
we did put some effort into cleaning-up the API of ccm_memory() in #73 / #76
we could re-use that pattern?
Otherwise I'd be fine with two separate functions, but should we then change that in CCM as well?!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,451,2018-10-14T17:14:01Z,2018-10-29T06:28:56Z,2018-10-29T06:29:00Z,MERGED,True,97,8,7,https://github.com/karel-m,Wycheproof failing GCM test - invalid/modified tag,5,[],https://github.com/libtom/libtomcrypt/pull/451,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/451#issuecomment-433456350,"The wycheproof GCM test in question:
{
  ""tcId"" : 16,
  ""comment"" : ""Flipped bit 0 in tag"",
  ""key"" : ""000102030405060708090a0b0c0d0e0f"",
  ""iv"" : ""505152535455565758595a5b"",
  ""aad"" : """",
  ""msg"" : ""202122232425262728292a2b2c2d2e2f"",
  ""ct"" : ""eb156d081ed6b6b55f4612f021d87b39"",
  ""tag"" : ""d9847dbc326a06e988c77ad3863e6083"",
  ""result"" : ""invalid"",
  ""flags"" : []
},

The trouble is that we do not reject invalid tag d9847dbc326a06e988c77ad3863e6083, corresponding valid tag has the first byte d8.",I have the code aligning gcm_memory and chacha20poly1305_memory to the ccm_memory behaviour (== adding tag validation to decrypt mode) nearly ready. I'll finish it & push it and after that we can decide what next.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,452,2018-10-14T20:44:21Z,2018-10-29T06:25:56Z,2018-10-29T06:25:59Z,MERGED,True,2142,342,5,https://github.com/karel-m,Wycheproof failing CCM test - invalid tag len,4,[],https://github.com/libtom/libtomcrypt/pull/452,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/452,"The wycheproof CCM test in question:
{
  ""ivSize"" : 96,
  ""keySize"" : 128,
  ""tagSize"" : 40,
  ""type"" : ""AeadTest"",
  ""tests"" : [
    {
      ""tcId"" : 480,
      ""comment"" : ""Invalid tag size"",
      ""key"" : ""000102030405060708090a0b0c0d0e0f"",
      ""iv"" : """",
      ""aad"" : """",
      ""msg"" : """",
      ""ct"" : ""d3dab1ee494cc229099d6cac7df14add"",
      ""tag"" : ""231a2d8f6a"",
      ""result"" : ""invalid"",
      ""flags"" : []
    }
  ]
},

The trouble is that taglen should be from ( 4, 6, 8, 10, 12, 14, 16 ) - if I understand correctly https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38c.pdf
Which means that any attempt to decrypt+validate using a tag with invalid taglen should be rejected","The wycheproof CCM test in question:
{
  ""ivSize"" : 96,
  ""keySize"" : 128,
  ""tagSize"" : 40,
  ""type"" : ""AeadTest"",
  ""tests"" : [
    {
      ""tcId"" : 480,
      ""comment"" : ""Invalid tag size"",
      ""key"" : ""000102030405060708090a0b0c0d0e0f"",
      ""iv"" : """",
      ""aad"" : """",
      ""msg"" : """",
      ""ct"" : ""d3dab1ee494cc229099d6cac7df14add"",
      ""tag"" : ""231a2d8f6a"",
      ""result"" : ""invalid"",
      ""flags"" : []
    }
  ]
},

The trouble is that taglen should be from ( 4, 6, 8, 10, 12, 14, 16 ) - if I understand correctly https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38c.pdf
Which means that any attempt to decrypt+validate using a tag with invalid taglen should be rejected",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,452,2018-10-14T20:44:21Z,2018-10-29T06:25:56Z,2018-10-29T06:25:59Z,MERGED,True,2142,342,5,https://github.com/karel-m,Wycheproof failing CCM test - invalid tag len,4,[],https://github.com/libtom/libtomcrypt/pull/452,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/452#issuecomment-433452877,"The wycheproof CCM test in question:
{
  ""ivSize"" : 96,
  ""keySize"" : 128,
  ""tagSize"" : 40,
  ""type"" : ""AeadTest"",
  ""tests"" : [
    {
      ""tcId"" : 480,
      ""comment"" : ""Invalid tag size"",
      ""key"" : ""000102030405060708090a0b0c0d0e0f"",
      ""iv"" : """",
      ""aad"" : """",
      ""msg"" : """",
      ""ct"" : ""d3dab1ee494cc229099d6cac7df14add"",
      ""tag"" : ""231a2d8f6a"",
      ""result"" : ""invalid"",
      ""flags"" : []
    }
  ]
},

The trouble is that taglen should be from ( 4, 6, 8, 10, 12, 14, 16 ) - if I understand correctly https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38c.pdf
Which means that any attempt to decrypt+validate using a tag with invalid taglen should be rejected",Thanks for additional polishing. Can we merge this one?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,453,2018-10-15T01:52:41Z,,2018-11-30T20:24:15Z,OPEN,False,2420,1399,32,https://github.com/buggywhip,Stream functions in separate files,2,[],https://github.com/libtom/libtomcrypt/pull/453,https://github.com/buggywhip,1,https://github.com/libtom/libtomcrypt/pull/453,"Some stream ciphers had multiple functions in a file.  This PR breaks each callable function out into separate files.  Common declarations and some definitions unique to that cipher will be found in a separate local .h file for that cipher.  Some guards were added to avoid warnings.  Leading underscores were added to the names of sober128's helper functions.
Checklist

[ N/A ] documentation is added or updated
[ N/A ] tests are added or updated","Some stream ciphers had multiple functions in a file.  This PR breaks each callable function out into separate files.  Common declarations and some definitions unique to that cipher will be found in a separate local .h file for that cipher.  Some guards were added to avoid warnings.  Leading underscores were added to the names of sober128's helper functions.
Checklist

[ N/A ] documentation is added or updated
[ N/A ] tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,453,2018-10-15T01:52:41Z,,2018-11-30T20:24:15Z,OPEN,False,2420,1399,32,https://github.com/buggywhip,Stream functions in separate files,2,[],https://github.com/libtom/libtomcrypt/pull/453,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/453#issuecomment-436420441,"Some stream ciphers had multiple functions in a file.  This PR breaks each callable function out into separate files.  Common declarations and some definitions unique to that cipher will be found in a separate local .h file for that cipher.  Some guards were added to avoid warnings.  Leading underscores were added to the names of sober128's helper functions.
Checklist

[ N/A ] documentation is added or updated
[ N/A ] tests are added or updated","I suggest just keeping separate NN_memory, NN_test, NN_keystream and perhaps NN_done like:
Old style                         This PR                                  Karel's suggestion 
================================= =======================================  ====================================
rabbit/rabbit.c                                                            rabbit/rabbit.c
                                  rabbit/rabbit_common.h                  
                                  rabbit/rabbit_setup.c                   
                                  rabbit/rabbit_setiv.c                   
                                  rabbit/rabbit_crypt.c                   
                                  rabbit/rabbit_done.c                    +rabbit/rabbit_done.c
                                  rabbit/rabbit_keystream.c               +rabbit/rabbit_keystream.c
rabbit/rabbit_memory.c            rabbit/rabbit_memory.c                   rabbit/rabbit_memory.c
                                  rabbit/rabbit_test.c                    +rabbit/rabbit_test.c
================================= =======================================  ====================================
rc4/rc4_stream.c                                                           rc4/rc4_stream.c
                                  rc4/rc4_stream_setup.c                  
                                  rc4/rc4_stream_crypt.c                   
                                  rc4/rc4_stream_done.c                   +rc4/rc4_stream_done.c
                                  rc4/rc4_stream_keystream.c              +rc4/rc4_stream_keystream.c
rc4/rc4_stream_memory.c           rc4/rc4_stream_memory.c                  rc4/rc4_stream_memory.c
rc4/rc4_test.c                    rc4/rc4_test.c                           rc4/rc4_test.c
================================= =======================================  ====================================
sober128/sober128_stream.c                                                 sober128/sober128_stream.c
                                  sober128/sober128_stream_common.h       
                                  sober128/sober128_stream_setup.c        
                                  sober128/sober128_stream_setiv.c        
                                  sober128/sober128_stream_crypt.c        
                                  sober128/sober128_stream_done.c         +sober128/sober128_stream_done.c
                                  sober128/sober128_stream_keystream.c    +sober128/sober128_stream_keystream.c
sober128/sober128_stream_memory.c sober128/sober128_stream_memory.c        sober128/sober128_stream_memory.c
sober128/sober128_test.c          sober128/sober128_test.c                 sober128/sober128_test.c
sober128/sober128tab.c            sober128/sober128tab.c                   sober128/sober128tab.c
================================= =======================================  ====================================
sosemanuk/sosemanuk.c                                                      sosemanuk/sosemanuk.c
                                  sosemanuk/sosemanuk_common.h            
                                  sosemanuk/sosemanuk_setup.c             
                                  sosemanuk/sosemanuk_setiv.c             
                                  sosemanuk/sosemanuk_crypt.c             
                                  sosemanuk/sosemanuk_done.c              +sosemanuk/sosemanuk_done.c
                                  sosemanuk/sosemanuk_keystream.c         +sosemanuk/sosemanuk_keystream.c
sosemanuk/sosemanuk_memory.c      sosemanuk/sosemanuk_memory.c             sosemanuk/sosemanuk_memory.c
sosemanuk/sosemanuk_test.c        sosemanuk/sosemanuk_test.c               sosemanuk/sosemanuk_test.c
================================= =======================================  ====================================",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,453,2018-10-15T01:52:41Z,,2018-11-30T20:24:15Z,OPEN,False,2420,1399,32,https://github.com/buggywhip,Stream functions in separate files,2,[],https://github.com/libtom/libtomcrypt/pull/453,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/453#issuecomment-436420932,"Some stream ciphers had multiple functions in a file.  This PR breaks each callable function out into separate files.  Common declarations and some definitions unique to that cipher will be found in a separate local .h file for that cipher.  Some guards were added to avoid warnings.  Leading underscores were added to the names of sober128's helper functions.
Checklist

[ N/A ] documentation is added or updated
[ N/A ] tests are added or updated",plus perhaps also get rid of sober128tab.c,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,453,2018-10-15T01:52:41Z,,2018-11-30T20:24:15Z,OPEN,False,2420,1399,32,https://github.com/buggywhip,Stream functions in separate files,2,[],https://github.com/libtom/libtomcrypt/pull/453,https://github.com/buggywhip,4,https://github.com/libtom/libtomcrypt/pull/453#issuecomment-437647532,"Some stream ciphers had multiple functions in a file.  This PR breaks each callable function out into separate files.  Common declarations and some definitions unique to that cipher will be found in a separate local .h file for that cipher.  Some guards were added to avoid warnings.  Leading underscores were added to the names of sober128's helper functions.
Checklist

[ N/A ] documentation is added or updated
[ N/A ] tests are added or updated","On 6Nov, 2018, at 1:47 PM, karel-m ***@***.***> wrote:
 I suggest just keeping separate NN_memory, NN_test, NN_keystream and perhaps NN_done like:

[snip]

After careful consideration I'm leaning toward each callable function in its own file for reasons of consistency.  IMO there is not sufficient advantage to combining some functions, each cipher differently, when some optional and sometine required functions need to be called out for linking individually.  For example, the inconsistent model for...

streams combining _setup(), setiv(), and _crypt(): rabbit, sober128, sosemanuk
streams combining _setup(),and _crypt():           rc4
streams combining none:                            chacha, (x)salsa20

...requires calling out what you need that wasn't combined.  Confusing.

Implementing the PR as written makes the decision rule consistent, ""if you call it, link it"".",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,453,2018-10-15T01:52:41Z,,2018-11-30T20:24:15Z,OPEN,False,2420,1399,32,https://github.com/buggywhip,Stream functions in separate files,2,[],https://github.com/libtom/libtomcrypt/pull/453,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/453#issuecomment-443328616,"Some stream ciphers had multiple functions in a file.  This PR breaks each callable function out into separate files.  Common declarations and some definitions unique to that cipher will be found in a separate local .h file for that cipher.  Some guards were added to avoid warnings.  Leading underscores were added to the names of sober128's helper functions.
Checklist

[ N/A ] documentation is added or updated
[ N/A ] tests are added or updated","I see your point but to me this is ""over-consistent"" for no (or very little) gain.
Anyway, I am strongly against introducing new headers - <something>_common.h. I suggest either to merge those .c files sharing the same <something>_common.h header (which I prefer) or perhaps to use tomcrypt_private.h (but I somehow feel that @sjaeckel might not like it as it may not comply with the original tomcrypt_private.h idea).",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,454,2018-10-15T09:26:54Z,2018-10-29T06:27:26Z,2018-10-29T06:27:30Z,MERGED,True,10,1,2,https://github.com/karel-m,Wycheproof failing PKCS7 depadding test,2,[],https://github.com/libtom/libtomcrypt/pull/454,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/454,"The wycheproof failing test:
        {
          ""tcId"" : 29,
          ""comment"" : ""zero padding"",
          ""key"" : ""db4f3e5e3795cc09a073fa6a81e5a6bc"",
          ""iv"" : ""23468aa734f5f0f19827316ff168e94f"",
          ""msg"" : ""3031323334353637383941424344454647"",
          ""ct"" : ""fbcbdfdaaf17980be939c0b243266ecb1188ff22f6563f6173440547d1e0dfd8"",
          ""result"" : ""invalid"",
          ""flags"" : [
            ""BadPadding""
          ]
        },

After decryption the last block looks like this (hex):
47,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00

Which is expected to fail when using LTC_PAD_PKCS7 depadding.","The wycheproof failing test:
        {
          ""tcId"" : 29,
          ""comment"" : ""zero padding"",
          ""key"" : ""db4f3e5e3795cc09a073fa6a81e5a6bc"",
          ""iv"" : ""23468aa734f5f0f19827316ff168e94f"",
          ""msg"" : ""3031323334353637383941424344454647"",
          ""ct"" : ""fbcbdfdaaf17980be939c0b243266ecb1188ff22f6563f6173440547d1e0dfd8"",
          ""result"" : ""invalid"",
          ""flags"" : [
            ""BadPadding""
          ]
        },

After decryption the last block looks like this (hex):
47,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00

Which is expected to fail when using LTC_PAD_PKCS7 depadding.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,455,2018-10-25T08:49:23Z,2018-10-25T10:09:08Z,2018-10-25T10:09:08Z,CLOSED,False,549,16,12,https://github.com/ChaoWeiAtGit,Add SM4 block cipher,1,[],https://github.com/libtom/libtomcrypt/pull/455,https://github.com/ChaoWeiAtGit,1,https://github.com/libtom/libtomcrypt/pull/455,"SM4(formerly SMS4) is a block cipher used in the Chinese
National Standard for Wireless LAN WAPI (Wired Authentication
and Privacy Infrastructure).
--from wikipedia

Checklist


 documentation is added or updated
 tests are added or updated","SM4(formerly SMS4) is a block cipher used in the Chinese
National Standard for Wireless LAN WAPI (Wired Authentication
and Privacy Infrastructure).
--from wikipedia

Checklist


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,456,2018-10-25T14:35:03Z,2018-10-25T14:42:55Z,2018-10-25T14:47:13Z,MERGED,True,1,1,1,https://github.com/dinamicoplus,Fix RSA Encryption Example,1,[],https://github.com/libtom/libtomcrypt/pull/456,https://github.com/dinamicoplus,1,https://github.com/libtom/libtomcrypt/pull/456,"RSA Encryption Example is missing a closing comment bracket */

Checklist


 documentation is added or updated
 tests are added or updated","RSA Encryption Example is missing a closing comment bracket */

Checklist


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,456,2018-10-25T14:35:03Z,2018-10-25T14:42:55Z,2018-10-25T14:47:13Z,MERGED,True,1,1,1,https://github.com/dinamicoplus,Fix RSA Encryption Example,1,[],https://github.com/libtom/libtomcrypt/pull/456,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/456#issuecomment-433079274,"RSA Encryption Example is missing a closing comment bracket */

Checklist


 documentation is added or updated
 tests are added or updated",As the docs aren't built on travis I tested and approved the PR on my machine :),True,{'HEART': ['https://github.com/dinamicoplus']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,457,2018-10-26T01:17:32Z,,2021-12-27T11:12:30Z,OPEN,False,847,16,20,https://github.com/ChaoWeiAtGit,Add SM4 block cipher,1,[],https://github.com/libtom/libtomcrypt/pull/457,https://github.com/ChaoWeiAtGit,1,https://github.com/libtom/libtomcrypt/pull/457,"SM4 (formerly SMS4)[1] is a block cipher used in the Chinese
National Standard for Wireless LAN WAPI (Wired Authentication
and Privacy Infrastructure).
--from wikipedia

Checklist


 documentation is added or updated
 tests are added or updated","SM4 (formerly SMS4)[1] is a block cipher used in the Chinese
National Standard for Wireless LAN WAPI (Wired Authentication
and Privacy Infrastructure).
--from wikipedia

Checklist


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,457,2018-10-26T01:17:32Z,,2021-12-27T11:12:30Z,OPEN,False,847,16,20,https://github.com/ChaoWeiAtGit,Add SM4 block cipher,1,[],https://github.com/libtom/libtomcrypt/pull/457,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/457#issuecomment-536325280,"SM4 (formerly SMS4)[1] is a block cipher used in the Chinese
National Standard for Wireless LAN WAPI (Wired Authentication
and Privacy Infrastructure).
--from wikipedia

Checklist


 documentation is added or updated
 tests are added or updated",Just for record: standardisation of SM4 seems to got stuck https://tools.ietf.org/html/draft-ribose-cfrg-sm4-10,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,457,2018-10-26T01:17:32Z,,2021-12-27T11:12:30Z,OPEN,False,847,16,20,https://github.com/ChaoWeiAtGit,Add SM4 block cipher,1,[],https://github.com/libtom/libtomcrypt/pull/457,https://github.com/hustliyilin,3,https://github.com/libtom/libtomcrypt/pull/457#issuecomment-1001513949,"SM4 (formerly SMS4)[1] is a block cipher used in the Chinese
National Standard for Wireless LAN WAPI (Wired Authentication
and Privacy Infrastructure).
--from wikipedia

Checklist


 documentation is added or updated
 tests are added or updated","Just for record: standardisation of SM4 seems to got stuck https://tools.ietf.org/html/draft-ribose-cfrg-sm4-10

@karel-m  SM4 has become an ISO/IEC standard in 2021, see https://www.iso.org/standard/81564.html for details.
Besides, linux kernel and openssl also support SM4, so maybe this pr is suitable for libtom/libtomcrypt",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,459,2018-10-26T15:42:31Z,2018-10-27T08:46:54Z,2018-10-29T06:30:33Z,MERGED,True,2,2,1,https://github.com/karel-m,Avoid LTC_ARGCHK in void functions,1,[],https://github.com/libtom/libtomcrypt/pull/459,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/459,"By default LTC_ARGCHK never returns (it aborts).
However, with ARGTYPE == 4 it calls return CRYPT_INVALID_ARG which causes compiler warnings.","By default LTC_ARGCHK never returns (it aborts).
However, with ARGTYPE == 4 it calls return CRYPT_INVALID_ARG which causes compiler warnings.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,459,2018-10-26T15:42:31Z,2018-10-27T08:46:54Z,2018-10-29T06:30:33Z,MERGED,True,2,2,1,https://github.com/karel-m,Avoid LTC_ARGCHK in void functions,1,[],https://github.com/libtom/libtomcrypt/pull/459,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/459#issuecomment-433463652,"By default LTC_ARGCHK never returns (it aborts).
However, with ARGTYPE == 4 it calls return CRYPT_INVALID_ARG which causes compiler warnings.",that's why there's also LTC_ARGCHKVD() :),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,459,2018-10-26T15:42:31Z,2018-10-27T08:46:54Z,2018-10-29T06:30:33Z,MERGED,True,2,2,1,https://github.com/karel-m,Avoid LTC_ARGCHK in void functions,1,[],https://github.com/libtom/libtomcrypt/pull/459,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/459#issuecomment-433486285,"By default LTC_ARGCHK never returns (it aborts).
However, with ARGTYPE == 4 it calls return CRYPT_INVALID_ARG which causes compiler warnings.",Fixed,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,459,2018-10-26T15:42:31Z,2018-10-27T08:46:54Z,2018-10-29T06:30:33Z,MERGED,True,2,2,1,https://github.com/karel-m,Avoid LTC_ARGCHK in void functions,1,[],https://github.com/libtom/libtomcrypt/pull/459,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/459#issuecomment-433511388,"By default LTC_ARGCHK never returns (it aborts).
However, with ARGTYPE == 4 it calls return CRYPT_INVALID_ARG which causes compiler warnings.",Approved,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,463,2018-10-29T10:33:21Z,2018-10-29T12:04:53Z,2018-10-29T12:04:56Z,MERGED,True,4,3,2,https://github.com/karel-m,Avoid using LOAD32H/STORE32H with unsigned long,1,[],https://github.com/libtom/libtomcrypt/pull/463,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/463,"Fix for #460
Cc: @rmw42","Fix for #460
Cc: @rmw42",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,464,2018-10-29T17:59:20Z,2018-10-29T19:33:06Z,2018-10-29T19:33:06Z,MERGED,True,121,121,1,https://github.com/fperrad,fix indentation,1,[],https://github.com/libtom/libtomcrypt/pull/464,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/464,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,465,2018-11-07T08:26:04Z,2018-11-07T12:35:58Z,2018-11-07T12:36:01Z,MERGED,True,11,48,10,https://github.com/karel-m,ecc_test cleanup,2,[],https://github.com/libtom/libtomcrypt/pull/465,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/465,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,465,2018-11-07T08:26:04Z,2018-11-07T12:35:58Z,2018-11-07T12:36:01Z,MERGED,True,11,48,10,https://github.com/karel-m,ecc_test cleanup,2,[],https://github.com/libtom/libtomcrypt/pull/465,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/465#issuecomment-436545593,,approved,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,473,2018-12-17T12:29:50Z,2018-12-17T14:44:03Z,2019-09-25T23:01:24Z,MERGED,True,4,0,1,https://github.com/sjaeckel,fix compilation of padding_pad,1,[],https://github.com/libtom/libtomcrypt/pull/473,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/473,c.f. #472,c.f. #472,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,476,2018-12-29T21:43:24Z,2019-04-10T15:05:59Z,2019-04-10T15:06:04Z,MERGED,True,87,49,18,https://github.com/sjaeckel,Fix issue #474,18,[],https://github.com/libtom/libtomcrypt/pull/476,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/476,...and some more other related and unrelated things were cleaned up.,...and some more other related and unrelated things were cleaned up.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,477,2019-01-19T21:42:46Z,,2019-01-19T21:42:46Z,OPEN,False,204,29,10,https://github.com/rmw42,Feature/rfc6979,2,[],https://github.com/libtom/libtomcrypt/pull/477,https://github.com/rmw42,1,https://github.com/libtom/libtomcrypt/pull/477,"WORK IN PROGRESS
Partial implementation for issue #441 - still not working correctly, assumes SHA256 for the hash as no clear way to pass it in to ecc_sign_hash()
Checklist

 documentation is added or updated
 tests are added or updated","WORK IN PROGRESS
Partial implementation for issue #441 - still not working correctly, assumes SHA256 for the hash as no clear way to pass it in to ecc_sign_hash()
Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,481,2019-04-18T07:26:17Z,2019-05-08T15:19:57Z,2019-05-08T15:19:57Z,MERGED,True,1,1,1,https://github.com/RektInator,fixed compile issue on msvc++,1,[],https://github.com/libtom/libtomcrypt/pull/481,https://github.com/RektInator,1,https://github.com/libtom/libtomcrypt/pull/481,This pull request fixes compilation issues on Microsoft Visual Studio with the C++ compiler.,This pull request fixes compilation issues on Microsoft Visual Studio with the C++ compiler.,True,"{'THUMBS_UP': ['https://github.com/rxyyy', 'https://github.com/shit-ware', 'https://github.com/tomxmm0']}"
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,483,2019-05-25T10:58:32Z,2019-06-02T20:19:44Z,2019-06-02T20:19:48Z,MERGED,True,167,111,10,https://github.com/sjaeckel,Improve/x509,4,[],https://github.com/libtom/libtomcrypt/pull/483,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/483,"This factors-out the core part of rsa_import_x509() so it can be reused later, e.g. #364","This factors-out the core part of rsa_import_x509() so it can be reused later, e.g. #364",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,483,2019-05-25T10:58:32Z,2019-06-02T20:19:44Z,2019-06-02T20:19:48Z,MERGED,True,167,111,10,https://github.com/sjaeckel,Improve/x509,4,[],https://github.com/libtom/libtomcrypt/pull/483,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/483#issuecomment-495933616,"This factors-out the core part of rsa_import_x509() so it can be reused later, e.g. #364",Can it be reused in already existing ecc_import_x509 as well?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,483,2019-05-25T10:58:32Z,2019-06-02T20:19:44Z,2019-06-02T20:19:48Z,MERGED,True,167,111,10,https://github.com/sjaeckel,Improve/x509,4,[],https://github.com/libtom/libtomcrypt/pull/483,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/483#issuecomment-495987777,"This factors-out the core part of rsa_import_x509() so it can be reused later, e.g. #364","Can it be reused in already existing ecc_import_x509 as well?

fine like that? :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,483,2019-05-25T10:58:32Z,2019-06-02T20:19:44Z,2019-06-02T20:19:48Z,MERGED,True,167,111,10,https://github.com/sjaeckel,Improve/x509,4,[],https://github.com/libtom/libtomcrypt/pull/483,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/483#issuecomment-498053642,"This factors-out the core part of rsa_import_x509() so it can be reused later, e.g. #364",ping @karel-m,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,484,2019-06-03T02:20:47Z,2019-06-03T07:31:02Z,2019-06-03T07:31:02Z,MERGED,True,1,1,1,https://github.com/fperrad,fix indentation,1,[],https://github.com/libtom/libtomcrypt/pull/484,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/484,after merge of #483,after merge of #483,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,485,2019-06-03T07:36:22Z,2019-06-05T07:24:19Z,2019-06-05T07:24:22Z,MERGED,True,22,16,5,https://github.com/sjaeckel,Minor fixes,2,[],https://github.com/libtom/libtomcrypt/pull/485,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/485,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,488,2019-06-06T13:07:45Z,2019-06-09T09:39:20Z,2019-06-09T09:39:23Z,MERGED,True,14,1,1,https://github.com/sjaeckel,Update ltm,2,[],https://github.com/libtom/libtomcrypt/pull/488,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/488,This fixes #487,This fixes #487,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,489,2019-06-06T18:49:13Z,2019-06-09T09:40:52Z,2019-06-09T09:40:55Z,MERGED,True,1,1,1,https://github.com/karel-m,Fix gcc 8.3 warning (stringop-truncation),1,[],https://github.com/libtom/libtomcrypt/pull/489,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/489,"Warning related to ssh_encode_sequence_multi.c
In file included from src/headers/tomcrypt.h:22,
                 from src/headers/tomcrypt_private.h:10,
                 from src/misc/ssh/ssh_encode_sequence_multi.c:9:
src/misc/ssh/ssh_encode_sequence_multi.c: In function 'ssh_encode_sequence_multi':
src/headers/tomcrypt_custom.h:49:18: error: 'strncpy' output truncated before terminating nul copying as many bytes from a string as its length [-Werror=stringop-truncation]
 #define XSTRNCPY strncpy
src/misc/ssh/ssh_encode_sequence_multi.c:124:13: note: in expansion of macro 'XSTRNCPY'
             XSTRNCPY((char *)out, sdata, size);
             ^~~~~~~~
src/misc/ssh/ssh_encode_sequence_multi.c:121:20: note: length computed here
             size = strlen(sdata);
                    ^~~~~~~~~~~~~","Warning related to ssh_encode_sequence_multi.c
In file included from src/headers/tomcrypt.h:22,
                 from src/headers/tomcrypt_private.h:10,
                 from src/misc/ssh/ssh_encode_sequence_multi.c:9:
src/misc/ssh/ssh_encode_sequence_multi.c: In function 'ssh_encode_sequence_multi':
src/headers/tomcrypt_custom.h:49:18: error: 'strncpy' output truncated before terminating nul copying as many bytes from a string as its length [-Werror=stringop-truncation]
 #define XSTRNCPY strncpy
src/misc/ssh/ssh_encode_sequence_multi.c:124:13: note: in expansion of macro 'XSTRNCPY'
             XSTRNCPY((char *)out, sdata, size);
             ^~~~~~~~
src/misc/ssh/ssh_encode_sequence_multi.c:121:20: note: length computed here
             size = strlen(sdata);
                    ^~~~~~~~~~~~~",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/490,"Follow-up of #364

 documentation is added or updated
 tests are added or updated","Follow-up of #364

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500329283,"Follow-up of #364

 documentation is added or updated
 tests are added or updated","src/pk/ec25519/tweetnacl.c:42:5: warning: no previous prototype for ‘crypto_verify_32’ [-Wmissing-prototypes]
 int crypto_verify_32(const u8 *x,const u8 *y)
     ^~~~~~~~~~~~~~~~",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500329727,"Follow-up of #364

 documentation is added or updated
 tests are added or updated",This function is defined above in the same file ... would it help to make it static?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500333773,"Follow-up of #364

 documentation is added or updated
 tests are added or updated","yes static helps:
static int crypto_verify_32(const u8 *x,const u8 *y)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500334088,"Follow-up of #364

 documentation is added or updated
 tests are added or updated",👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500335329,"Follow-up of #364

 documentation is added or updated
 tests are added or updated",Do we plan to add an option to load a private key via x25519_import and/or ed25519_import?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500337022,"Follow-up of #364

 documentation is added or updated
 tests are added or updated","Some warnings from clang-tidy
src/headers/tomcrypt_private.h:305:5: error: function 'crypto_sign' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name,-warnings-as-errors]
int crypto_sign(
    ^
src/pk/ec25519/tweetnacl.c:385:5: note: the definition seen here
int crypto_sign(u8 *sm,u64 *smlen,const u8 *m,u64 n,const u8 *sk,const u8 *pk)
    ^
src/headers/tomcrypt_private.h:305:5: note: differing parameters are named here: ('mlen'), in definition: ('n')
int crypto_sign(
    ^
src/headers/tomcrypt_private.h:309:5: error: function 'crypto_sign_open' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name,-warnings-as-errors]
int crypto_sign_open(
    ^
src/pk/ec25519/tweetnacl.c:453:5: note: the definition seen here
int crypto_sign_open(int *stat, u8 *m,u64 *mlen,const u8 *sm,u64 n,const u8 *pk)
    ^
src/headers/tomcrypt_private.h:309:5: note: differing parameters are named here: ('smlen'), in definition: ('n')
int crypto_sign_open(
    ^
src/pk/ed25519/ed25519_import.c:38:6: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
   } else {
     ^~~~~~
src/pk/x25519/x25519_import.c:48:6: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
   } else {
     ^~~~~~",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/karel-m,8,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500338855,"Follow-up of #364

 documentation is added or updated
 tests are added or updated","We should perhaps choose some other prefix than crypto_ for the following private functions:
crypto_sign
crypto_sign_open
crypto_sign_keypair
crypto_sk_to_pk
crypto_scalarmult
crypto_scalarmult_base

Like crypto25519_ or  ec25519_ or something that indicates relation to Curve25519.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500482367,"Follow-up of #364

 documentation is added or updated
 tests are added or updated","Do we plan to add an option to load a private key via x25519_import and/or ed25519_import?

If I understand correctly to import a private key I have to call:
err = ed25519_set_key(privkey_ptr, 32, NULL, 0, &key) ;

right?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500483102,"Follow-up of #364

 documentation is added or updated
 tests are added or updated","Yep
Either like that or via the pkcs#8 import",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500499750,"Follow-up of #364

 documentation is added or updated
 tests are added or updated","OK, we can fix the final key import/export/conversion interface later. I think changes from this PR should go to develop.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500570594,"Follow-up of #364

 documentation is added or updated
 tests are added or updated","we can fix the final key import/export/conversion interface later

any proposals on what should be changed of the current API?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500580496,"Follow-up of #364

 documentation is added or updated
 tests are added or updated","I was thinking about a set of import related functions like:

ed25519_import_pkcs8
ed25519_import_x509
ed25519_import_openssl (= current ed25519_import + PK_STD)
ed25519_import_raw (= current ed25519_set_key)

But I have to think it over.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/karel-m,14,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500588122,"Follow-up of #364

 documentation is added or updated
 tests are added or updated","And perhaps ed25519_export should allow to export (convert) keys in format acceptable by x25519_import e.g. via a special flag PK_PUBLIC | PK_X25519 or PK_PRIVATE | PK_X25519.
Ideally in a way interoperable with https://libsodium.gitbook.io/doc/advanced/ed25519-curve25519",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,490,2019-06-09T20:49:57Z,2019-06-10T19:53:52Z,2019-06-11T06:00:57Z,MERGED,True,828,569,28,https://github.com/sjaeckel,Improve curve25519,15,[],https://github.com/libtom/libtomcrypt/pull/490,https://github.com/sjaeckel,15,https://github.com/libtom/libtomcrypt/pull/490#issuecomment-500698878,"Follow-up of #364

 documentation is added or updated
 tests are added or updated","ed25519_import_pkcs8


ed25519_import_x509



they're already there!?



ed25519_import_openssl (= current ed25519_import + PK_STD)


ed25519_import_raw (= current ed25519_set_key)



if you think it's really worth it, sure...
I had the raw import functionality initially in  *25519_import() but then I realized that it's ambiguous as you don't know if it's a private or public key, so I removed that again in favor of *25519_set_key

And perhaps ed25519_export should allow to export (convert) keys in format acceptable by x25519_import e.g. via a special flag PK_PUBLIC | PK_X25519 or PK_PRIVATE | PK_X25519.

fine by me
how about ed25519_convert_to_x25519(const *edkey, *xkey)?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,491,2019-06-10T21:59:44Z,2019-06-11T05:55:23Z,2019-06-11T05:55:23Z,MERGED,True,3,3,3,https://github.com/fperrad,some linting,1,[],https://github.com/libtom/libtomcrypt/pull/491,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/491,after merge of #364 & #490,after merge of #364 & #490,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,493,2019-08-02T09:55:02Z,2019-09-04T11:44:48Z,2019-09-04T11:45:57Z,MERGED,True,8,0,1,https://github.com/jbech-linaro,check range in _rijndael_ecb_ functions,1,[],https://github.com/libtom/libtomcrypt/pull/493,https://github.com/jbech-linaro,1,https://github.com/libtom/libtomcrypt/pull/493,"There is no check that the 'skey' structure has been properly
initialized. For example, the skey->rijndael.Nr is assumed to contain a
positive number corresponding to the number of AES rounds to perform. In
_rijndael_ecb_encrypt the skey->rijndael.Nr is subtracted by two, which
can result in an integer underflow if the structure hasn't been
initialized correctly.
By clamping the value for skey->rijndael.Nr into the valid rounds for
AES we can return an error instead of ending up reading outside the
boundaries (of skey->rijndael.eK).
I've also been running the tests
./testme.sh ""makefile -j8"" ""-DUSE_LTM -DLTM_DESC -I../libtommath"" ../libtommath/libtommath.a test
And I couldn't spot any errors, full log can be found here.","There is no check that the 'skey' structure has been properly
initialized. For example, the skey->rijndael.Nr is assumed to contain a
positive number corresponding to the number of AES rounds to perform. In
_rijndael_ecb_encrypt the skey->rijndael.Nr is subtracted by two, which
can result in an integer underflow if the structure hasn't been
initialized correctly.
By clamping the value for skey->rijndael.Nr into the valid rounds for
AES we can return an error instead of ending up reading outside the
boundaries (of skey->rijndael.eK).
I've also been running the tests
./testme.sh ""makefile -j8"" ""-DUSE_LTM -DLTM_DESC -I../libtommath"" ../libtommath/libtommath.a test
And I couldn't spot any errors, full log can be found here.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,493,2019-08-02T09:55:02Z,2019-09-04T11:44:48Z,2019-09-04T11:45:57Z,MERGED,True,8,0,1,https://github.com/jbech-linaro,check range in _rijndael_ecb_ functions,1,[],https://github.com/libtom/libtomcrypt/pull/493,https://github.com/jbech-linaro,2,https://github.com/libtom/libtomcrypt/pull/493#issuecomment-517672133,"There is no check that the 'skey' structure has been properly
initialized. For example, the skey->rijndael.Nr is assumed to contain a
positive number corresponding to the number of AES rounds to perform. In
_rijndael_ecb_encrypt the skey->rijndael.Nr is subtracted by two, which
can result in an integer underflow if the structure hasn't been
initialized correctly.
By clamping the value for skey->rijndael.Nr into the valid rounds for
AES we can return an error instead of ending up reading outside the
boundaries (of skey->rijndael.eK).
I've also been running the tests
./testme.sh ""makefile -j8"" ""-DUSE_LTM -DLTM_DESC -I../libtommath"" ../libtommath/libtommath.a test
And I couldn't spot any errors, full log can be found here.",All Travis errors seems to be related to apt-get issues.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,497,2019-09-23T09:51:15Z,2019-10-13T12:05:14Z,2019-10-13T18:21:36Z,MERGED,True,665,157,15,https://github.com/sjaeckel,Bcrypt,6,[],https://github.com/libtom/libtomcrypt/pull/497,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/497,"Add the bcrypt password-based hashing algorithm.
Add the bcrypt PBKDF algorithm as used when encrypting OpenSSH key files.
Checklist

 documentation is added or updated
 tests are added or updated","Add the bcrypt password-based hashing algorithm.
Add the bcrypt PBKDF algorithm as used when encrypting OpenSSH key files.
Checklist

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,498,2019-09-24T12:21:13Z,2019-09-29T15:33:25Z,2019-09-29T15:33:29Z,MERGED,True,41,0,3,https://github.com/sjaeckel,Add AppVeyor MSVC builds,3,[],https://github.com/libtom/libtomcrypt/pull/498,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/498,Topic says it all,Topic says it all,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,499,2019-09-25T12:30:46Z,2019-09-30T13:00:06Z,2019-09-30T13:00:10Z,MERGED,True,93,43,10,https://github.com/sjaeckel,Minor improvements,9,[],https://github.com/libtom/libtomcrypt/pull/499,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/499,"add more rotate intrinsics
speed up the build of PR's
minor changes of makefiles","add more rotate intrinsics
speed up the build of PR's
minor changes of makefiles",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,499,2019-09-25T12:30:46Z,2019-09-30T13:00:06Z,2019-09-30T13:00:10Z,MERGED,True,93,43,10,https://github.com/sjaeckel,Minor improvements,9,[],https://github.com/libtom/libtomcrypt/pull/499,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/499#issuecomment-536492090,"add more rotate intrinsics
speed up the build of PR's
minor changes of makefiles","Any idea why coverage/coveralls failed?

because my patch wasn't complete... :-)
I cherry-picked some more commits from #497 as they didn't belong there in the first place and that we can see if the difference in coverage is only by the change of the gcc version used!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,499,2019-09-25T12:30:46Z,2019-09-30T13:00:06Z,2019-09-30T13:00:10Z,MERGED,True,93,43,10,https://github.com/sjaeckel,Minor improvements,9,[],https://github.com/libtom/libtomcrypt/pull/499,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/499#issuecomment-536495364,"add more rotate intrinsics
speed up the build of PR's
minor changes of makefiles","I would say that the results of travis build 1845.1 and its coveralls results which were still on Trusty/gcc 4.8.5 vs. build 1846.1 and its coveralls results which are now on Bionic/gcc 7.4.0 indicate that the drop of coverage by 0.4% is caused by the new version of gcc, or am I mistaken?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/500,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj","While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/500#issuecomment-536313078,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj",I am for fixing the LTC_SSHDATA,True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/500#issuecomment-536313283,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj","I am for fixing the LTC_SSHDATA

currently writing the documentation on it, should be ready by tonight",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/500#issuecomment-536313921,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj","Short question, while using the API I thought it'd be useful if the signature of the decoding had a pointer of the length as argument, so we could return the processed length. What do you think?
-int ssh_decode_sequence_multi(const unsigned char *in, unsigned long inlen, ...)
+int ssh_decode_sequence_multi(const unsigned char *in, unsigned long *inlen, ...)

Yes, this would differ from the way its inspiration (DER multi) works, but it already differs by the order by which the arguments get passed...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/500#issuecomment-536324451,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj","Following our DER multi pattern is not a good idea, couple of times I was missing the information about the length of actually decoded data.
It is IMO necessary to somehow return how much input data was ""consumed"" during decoding - either by unsigned long *inlen or via an extra argument.",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/sjaeckel,6,https://github.com/libtom/libtomcrypt/pull/500#issuecomment-536327533,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj","This would be the behavior I thought about... okay?
-  @param inlen  Length of buffer to decode
+  @param inlen  [in/out] Length of buffer to decode/Remaining bytes after decoding the given sequence",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/500#issuecomment-536338379,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj","Well, I would slightly prefer reverse logic: ""Actual length of in buffer used for decoding the given sequence"" but yours: ""Remaining bytes after decoding the given sequence"" will work as well.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/500#issuecomment-536448681,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj","Well, I would slightly prefer reverse logic: ""Actual length of in buffer used for decoding the given sequence"" but yours: ""Remaining bytes after decoding the given sequence"" will work as well.

I thought from a usability context if we'd reverse the logic one has to do
decode(p, &len, multi combination 1);
tot_len -= len;
len = tot_len;
if (some recently decoded thing)
  decode(p, &len, multi variation 1);
else
  decode(p, &len, multi variation 2);
tot_len -= len;
len = tot_len;
decode(p, &len, multi combination 2);

whereas with my proposal one could do
decode(p, &len, multi combination 1);
if (some recently decoded thing)
  decode(p, &len, multi variation 1);
else
  decode(p, &len, multi variation 2);
decode(p, &len, multi combination 2);",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/500#issuecomment-536638737,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj","We already have:
/**
   ASN.1 DER Flexi(ble) decoder will decode arbitrary DER packets and create a linked list of the decoded elements.
   @param in      The input buffer
   @param inlen   [in/out] The length of the input buffer and on output the amount of decoded data
   @param out     [out] A pointer to the linked list
   @return CRYPT_OK on success.
*/
int der_decode_sequence_flexi(const unsigned char *in, unsigned long *inlen, ltc_asn1_list **out)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/500#issuecomment-536997211,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj","I went with the old way, because I realized that to do what I wanted, it'd have required too many (paradigm) changes.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/sjaeckel,11,https://github.com/libtom/libtomcrypt/pull/500#issuecomment-537411335,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj",Does someone have a reason why we shouldn't use size_t where appropriate now? I'd change that then in this PR.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/500#issuecomment-537488264,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj","Does someone have a reason why we shouldn't use size_t where appropriate now? I'd change that then in this PR.

okay, one step back, let's just stay with unsigned long for now and change to size_t all at once",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,500,2019-09-26T22:48:25Z,2019-10-16T21:16:47Z,2019-10-16T21:16:50Z,MERGED,True,219,84,10,https://github.com/sjaeckel,Fix SSH API,7,[],https://github.com/libtom/libtomcrypt/pull/500,https://github.com/karel-m,13,https://github.com/libtom/libtomcrypt/pull/500#issuecomment-537580686,"While playing around with the SSH API I realized that as it is now it is incomplete resp. broken.
When reading the RFC4251 Ch. 5 it says
   string

      Arbitrary length binary string.  Strings are allowed to contain
      arbitrary binary data, including null characters and 8-bit
      characters.  ...

which is clearly not possible as it is implemented now.
I think there are two ways this could be handled in the order of preference

fix the LTC_SSHDATA_STRING as proposed in the API description of the two c files
add a new LTC_SSHDATA_BUFFER as proposed in the header file

The disadvantage of 1. would be that it would break existing applications, but I think we can live with that for the sake of a better API.
Your thoughts?
CC @rmw42 @mkj",ad size_t we already have #175,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,503,2019-10-02T13:49:34Z,2019-10-21T09:44:05Z,2019-10-21T09:44:09Z,MERGED,True,208,261,15,https://github.com/sjaeckel,Replace (ed|x)25519_set_key by (ed|x)25519_import_raw,5,[],https://github.com/libtom/libtomcrypt/pull/503,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/503,"c.f. #502

 documentation is added or updated
 tests are added or updated","c.f. #502

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,504,2019-10-02T14:24:18Z,2019-10-12T11:11:21Z,2019-10-12T11:11:24Z,MERGED,True,141,77,14,https://github.com/sjaeckel,Minor fixes and improvements,12,[],https://github.com/libtom/libtomcrypt/pull/504,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/504,"Title says all
e.g. update to latest ltm API
@jbech-linaro do you probably have the possibility to check/time to review that the ""check ranges of more ciphers"" commit does indeed what you did in #493 for AES?","Title says all
e.g. update to latest ltm API
@jbech-linaro do you probably have the possibility to check/time to review that the ""check ranges of more ciphers"" commit does indeed what you did in #493 for AES?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,504,2019-10-02T14:24:18Z,2019-10-12T11:11:21Z,2019-10-12T11:11:24Z,MERGED,True,141,77,14,https://github.com/sjaeckel,Minor fixes and improvements,12,[],https://github.com/libtom/libtomcrypt/pull/504,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/504#issuecomment-537842049,"Title says all
e.g. update to latest ltm API
@jbech-linaro do you probably have the possibility to check/time to review that the ""check ranges of more ciphers"" commit does indeed what you did in #493 for AES?","I just asked myself if

it'd make sense to review the default rounds of all the ciphers? as e.g. as of [1] our default value of 12 rounds for RC5 can be attacked
we can even change those values? as this will break users who rely on 0 being that then-old default number of rounds...

[1] https://en.wikipedia.org/w/index.php?title=RC5&oldid=917621181#cite_note-Biryukov-1",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,505,2019-10-02T14:31:09Z,2019-10-17T20:28:19Z,2019-10-17T20:28:22Z,MERGED,True,159,60,15,https://github.com/sjaeckel,Add rsa_init() and rsa_shrink_key(),6,[],https://github.com/libtom/libtomcrypt/pull/505,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/505,"This adds two new (for now) private API functions

rsa_init() which can be used to initialize an RSA key
rsa_shrink_key() which can be used to shrink the memory usage of an RSA key if it's long lived


 documentation is added or updated
 tests are added or updated","This adds two new (for now) private API functions

rsa_init() which can be used to initialize an RSA key
rsa_shrink_key() which can be used to shrink the memory usage of an RSA key if it's long lived


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,506,2019-10-03T17:14:53Z,2019-10-11T12:30:21Z,2019-10-11T12:30:28Z,MERGED,True,398,18,17,https://github.com/sjaeckel,Add TEA blockcipher,4,[],https://github.com/libtom/libtomcrypt/pull/506,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/506,"documentation is added or updated
 tests are added or updated","documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,508,2019-10-03T17:59:34Z,2019-10-08T07:07:44Z,2019-10-08T07:29:56Z,MERGED,True,1,1,1,https://github.com/werew,Fixes #507,1,[],https://github.com/libtom/libtomcrypt/pull/508,https://github.com/werew,1,https://github.com/libtom/libtomcrypt/pull/508,,,True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,508,2019-10-03T17:59:34Z,2019-10-08T07:07:44Z,2019-10-08T07:29:56Z,MERGED,True,1,1,1,https://github.com/werew,Fixes #507,1,[],https://github.com/libtom/libtomcrypt/pull/508,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/508#issuecomment-539373846,,ping @jbech-linaro @karel-m,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,508,2019-10-03T17:59:34Z,2019-10-08T07:07:44Z,2019-10-08T07:29:56Z,MERGED,True,1,1,1,https://github.com/werew,Fixes #507,1,[],https://github.com/libtom/libtomcrypt/pull/508,https://github.com/jbech-linaro,3,https://github.com/libtom/libtomcrypt/pull/508#issuecomment-539383941,,"Thanks @sjaeckel , I'll pull this manually into OP-TEE.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,509,2019-10-08T06:17:33Z,2019-10-11T07:39:14Z,2019-10-14T21:51:15Z,MERGED,True,288,272,1,https://github.com/armcc,fix and cleanup des and 3des test cases,1,[],https://github.com/libtom/libtomcrypt/pull/509,https://github.com/armcc,1,https://github.com/libtom/libtomcrypt/pull/509,"Drop unused 'num' field from struct des_test_case.
Fix the order of arguments passed to compare_testvector() for the
""DES"" tests (actual -vs- expected buffers were swapped, leading to
misleading error messages for failing tests).
Move the 3des test vectors which were previously included in
des_test() into des3_test(). Note that these 3des test vectors
were previously guarded by LTC_TEST_EXT, so even though they
always failed when run as des tests, the failure was not seen by
default.
Minor indent fixes.

Signed-off-by: Andre McCurdy armccurdy@gmail.com

Checklist


 tests are added or updated","Drop unused 'num' field from struct des_test_case.
Fix the order of arguments passed to compare_testvector() for the
""DES"" tests (actual -vs- expected buffers were swapped, leading to
misleading error messages for failing tests).
Move the 3des test vectors which were previously included in
des_test() into des3_test(). Note that these 3des test vectors
were previously guarded by LTC_TEST_EXT, so even though they
always failed when run as des tests, the failure was not seen by
default.
Minor indent fixes.

Signed-off-by: Andre McCurdy armccurdy@gmail.com

Checklist


 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,509,2019-10-08T06:17:33Z,2019-10-11T07:39:14Z,2019-10-14T21:51:15Z,MERGED,True,288,272,1,https://github.com/armcc,fix and cleanup des and 3des test cases,1,[],https://github.com/libtom/libtomcrypt/pull/509,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/509#issuecomment-539371871,"Drop unused 'num' field from struct des_test_case.
Fix the order of arguments passed to compare_testvector() for the
""DES"" tests (actual -vs- expected buffers were swapped, leading to
misleading error messages for failing tests).
Move the 3des test vectors which were previously included in
des_test() into des3_test(). Note that these 3des test vectors
were previously guarded by LTC_TEST_EXT, so even though they
always failed when run as des tests, the failure was not seen by
default.
Minor indent fixes.

Signed-off-by: Andre McCurdy armccurdy@gmail.com

Checklist


 tests are added or updated","Thanks for the PR!


Drop unused 'num' field from struct des_test_case.
Fix the order of arguments passed to compare_testvector() for the
""DES"" tests (actual -vs- expected buffers were swapped, leading to
misleading error messages for failing tests).
Minor indent fixes.


Those 3 points are fine IMO


Move the 3des test vectors which were previously included in
des_test() into des3_test(). Note that these 3des test vectors
were previously guarded by LTC_TEST_EXT, so even though they
always failed when run as des tests, the failure was not seen by
default.


This part is misleading as they were never explicitly 3DES TV's but just ""more"" DES TV's and now you're (ab)using the fact that the same key used thrice results in the same result as a single DES round...
I think this part should be reverted. @karel-m your thoughts?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,509,2019-10-08T06:17:33Z,2019-10-11T07:39:14Z,2019-10-14T21:51:15Z,MERGED,True,288,272,1,https://github.com/armcc,fix and cleanup des and 3des test cases,1,[],https://github.com/libtom/libtomcrypt/pull/509,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/509#issuecomment-539372701,"Drop unused 'num' field from struct des_test_case.
Fix the order of arguments passed to compare_testvector() for the
""DES"" tests (actual -vs- expected buffers were swapped, leading to
misleading error messages for failing tests).
Move the 3des test vectors which were previously included in
des_test() into des3_test(). Note that these 3des test vectors
were previously guarded by LTC_TEST_EXT, so even though they
always failed when run as des tests, the failure was not seen by
default.
Minor indent fixes.

Signed-off-by: Andre McCurdy armccurdy@gmail.com

Checklist


 tests are added or updated","btw if you're already at it, feel free to re-factor the TV's in des_test() and de-duplicate them :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,509,2019-10-08T06:17:33Z,2019-10-11T07:39:14Z,2019-10-14T21:51:15Z,MERGED,True,288,272,1,https://github.com/armcc,fix and cleanup des and 3des test cases,1,[],https://github.com/libtom/libtomcrypt/pull/509,https://github.com/armcc,4,https://github.com/libtom/libtomcrypt/pull/509#issuecomment-539652366,"Drop unused 'num' field from struct des_test_case.
Fix the order of arguments passed to compare_testvector() for the
""DES"" tests (actual -vs- expected buffers were swapped, leading to
misleading error messages for failing tests).
Move the 3des test vectors which were previously included in
des_test() into des3_test(). Note that these 3des test vectors
were previously guarded by LTC_TEST_EXT, so even though they
always failed when run as des tests, the failure was not seen by
default.
Minor indent fixes.

Signed-off-by: Andre McCurdy armccurdy@gmail.com

Checklist


 tests are added or updated","Thanks for the feedback! I started looking at the extra test vectors because they failed when I enabled them. Googling the test vector values found a golang test suite that uses them for 3DES, so I just copied that approach. However, I see now that the real bug in the current LTC code is that these vectors are marked as DES decryption tests when they should be DES encryption tests... just fixing that makes the tests pass. I'll send an updated PR.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,509,2019-10-08T06:17:33Z,2019-10-11T07:39:14Z,2019-10-14T21:51:15Z,MERGED,True,288,272,1,https://github.com/armcc,fix and cleanup des and 3des test cases,1,[],https://github.com/libtom/libtomcrypt/pull/509,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/509#issuecomment-540447042,"Drop unused 'num' field from struct des_test_case.
Fix the order of arguments passed to compare_testvector() for the
""DES"" tests (actual -vs- expected buffers were swapped, leading to
misleading error messages for failing tests).
Move the 3des test vectors which were previously included in
des_test() into des3_test(). Note that these 3des test vectors
were previously guarded by LTC_TEST_EXT, so even though they
always failed when run as des tests, the failure was not seen by
default.
Minor indent fixes.

Signed-off-by: Andre McCurdy armccurdy@gmail.com

Checklist


 tests are added or updated","Thanks! Looks very good now and thx for the TDES TV's!
Now you only need to fix this travis error and we're good to go :-)
https://travis-ci.org/libtom/libtomcrypt/jobs/595904038
btw. you can install the pre-commit hooks via make install_hooks which will then run the same basic tests which failed in said build job.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,509,2019-10-08T06:17:33Z,2019-10-11T07:39:14Z,2019-10-14T21:51:15Z,MERGED,True,288,272,1,https://github.com/armcc,fix and cleanup des and 3des test cases,1,[],https://github.com/libtom/libtomcrypt/pull/509,https://github.com/armcc,6,https://github.com/libtom/libtomcrypt/pull/509#issuecomment-540762071,"Drop unused 'num' field from struct des_test_case.
Fix the order of arguments passed to compare_testvector() for the
""DES"" tests (actual -vs- expected buffers were swapped, leading to
misleading error messages for failing tests).
Move the 3des test vectors which were previously included in
des_test() into des3_test(). Note that these 3des test vectors
were previously guarded by LTC_TEST_EXT, so even though they
always failed when run as des tests, the failure was not seen by
default.
Minor indent fixes.

Signed-off-by: Andre McCurdy armccurdy@gmail.com

Checklist


 tests are added or updated",The indent issue should now be fixed but it looks like the Travis build then failed for some other reason? Should I force push the latest version again to try to re-trigger Travis?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,509,2019-10-08T06:17:33Z,2019-10-11T07:39:14Z,2019-10-14T21:51:15Z,MERGED,True,288,272,1,https://github.com/armcc,fix and cleanup des and 3des test cases,1,[],https://github.com/libtom/libtomcrypt/pull/509,https://github.com/sjaeckel,7,https://github.com/libtom/libtomcrypt/pull/509#issuecomment-540831202,"Drop unused 'num' field from struct des_test_case.
Fix the order of arguments passed to compare_testvector() for the
""DES"" tests (actual -vs- expected buffers were swapped, leading to
misleading error messages for failing tests).
Move the 3des test vectors which were previously included in
des_test() into des3_test(). Note that these 3des test vectors
were previously guarded by LTC_TEST_EXT, so even though they
always failed when run as des tests, the failure was not seen by
default.
Minor indent fixes.

Signed-off-by: Andre McCurdy armccurdy@gmail.com

Checklist


 tests are added or updated","The indent issue should now be fixed

yes, that's fixed

it looks like the Travis build then failed for some other reason

yeah, there's an issue with their infrastructure, c.f. [1] resp. [2]

Should I force push the latest version again to try to re-trigger Travis?

no need, I've just restarted the failed builds
[1] https://travis-ci.community/t/sometimes-build-fails-when-apt-is-updating-postgresql-apt-repository/4872
[2] travis-ci/travis-build#1771",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,511,2019-10-13T18:26:18Z,2019-10-17T12:50:12Z,2019-10-17T12:50:16Z,MERGED,True,142,132,59,https://github.com/sjaeckel,More fixes,5,[],https://github.com/libtom/libtomcrypt/pull/511,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/511,Just a bunch more minor fixes.,Just a bunch more minor fixes.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,512,2019-10-17T15:22:30Z,2019-10-17T20:27:33Z,2019-10-17T20:27:33Z,MERGED,True,3,3,1,https://github.com/fperrad,fix indentation,1,[],https://github.com/libtom/libtomcrypt/pull/512,https://github.com/fperrad,1,https://github.com/libtom/libtomcrypt/pull/512,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,514,2019-10-20T08:08:44Z,2019-10-20T10:45:52Z,2019-10-20T10:50:11Z,MERGED,True,1,1,1,https://github.com/karel-m,Avoid 64-bit rotation for i386 targets,1,[],https://github.com/libtom/libtomcrypt/pull/514,https://github.com/karel-m,1,https://github.com/libtom/libtomcrypt/pull/514,See #513 - patch provided by @newbluemoon,See #513 - patch provided by @newbluemoon,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,515,2019-10-20T11:05:03Z,,2019-10-29T17:41:00Z,OPEN,False,334,714,65,https://github.com/sjaeckel,[WIP/RFC] Remove prng registry,4,[],https://github.com/libtom/libtomcrypt/pull/515,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/515,"The first step into the direction of a registry-free LibTomCrypt

 documentation is added or updated
 tests are added or updated","The first step into the direction of a registry-free LibTomCrypt

 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,515,2019-10-20T11:05:03Z,,2019-10-29T17:41:00Z,OPEN,False,334,714,65,https://github.com/sjaeckel,[WIP/RFC] Remove prng registry,4,[],https://github.com/libtom/libtomcrypt/pull/515,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/515#issuecomment-544275267,"The first step into the direction of a registry-free LibTomCrypt

 documentation is added or updated
 tests are added or updated","I do support this idea; however, this is going to break a lot of things. Basically nearly all SW using libtomcrypt.
IMO this PR should be labeled LTCv2.0 and the timing of merging into develop should be carefully considered.
I'll hopefully find some time for deeper review.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,515,2019-10-20T11:05:03Z,,2019-10-29T17:41:00Z,OPEN,False,334,714,65,https://github.com/sjaeckel,[WIP/RFC] Remove prng registry,4,[],https://github.com/libtom/libtomcrypt/pull/515,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/515#issuecomment-544439716,"The first step into the direction of a registry-free LibTomCrypt

 documentation is added or updated
 tests are added or updated","I do support this idea; however, this is going to break a lot of things. Basically nearly all SW using libtomcrypt.

yep, one has to break stuff sometimes to be able to advance

IMO this PR should be labeled LTCv2.0 and the timing of merging into develop should be carefully considered.

yes it will be 2.0 and IMO the branch is called develop for a reason and contains the next version, no matter how hard it will break previous versions, so I think it should be merged as soon as it's ready.

I'll hopefully find some time for deeper review.

The most important part of this PR is the decision if desc can be put into state or whether we should do it somehow differently!?
The rest of the PR is going through the sources and adapting to the new API.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,517,2019-10-25T13:48:33Z,,2019-10-28T13:18:26Z,OPEN,False,2564,2924,7,https://github.com/FredeJ,Visualstudio solution,3,[],https://github.com/libtom/libtomcrypt/pull/517,https://github.com/FredeJ,1,https://github.com/libtom/libtomcrypt/pull/517,"Migrate the solution file to Visual Studio 15.
The goal of this is to allow libtomcrypt to be made available through vcpkg (https://github.com/microsoft/vcpkg/)","Migrate the solution file to Visual Studio 15.
The goal of this is to allow libtomcrypt to be made available through vcpkg (https://github.com/microsoft/vcpkg/)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,517,2019-10-25T13:48:33Z,,2019-10-28T13:18:26Z,OPEN,False,2564,2924,7,https://github.com/FredeJ,Visualstudio solution,3,[],https://github.com/libtom/libtomcrypt/pull/517,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/517#issuecomment-546394471,"Migrate the solution file to Visual Studio 15.
The goal of this is to allow libtomcrypt to be made available through vcpkg (https://github.com/microsoft/vcpkg/)",👎  While you are able to import the old format (VS2008) into newer Visual Studio (e.g. VS2015) it is not possible the other way around. I am for keeping VS2008 compatibility.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,517,2019-10-25T13:48:33Z,,2019-10-28T13:18:26Z,OPEN,False,2564,2924,7,https://github.com/FredeJ,Visualstudio solution,3,[],https://github.com/libtom/libtomcrypt/pull/517,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/517#issuecomment-546407593,"Migrate the solution file to Visual Studio 15.
The goal of this is to allow libtomcrypt to be made available through vcpkg (https://github.com/microsoft/vcpkg/)",@FredeJ is it an option to use the makefile.msvc for your purpose?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,517,2019-10-25T13:48:33Z,,2019-10-28T13:18:26Z,OPEN,False,2564,2924,7,https://github.com/FredeJ,Visualstudio solution,3,[],https://github.com/libtom/libtomcrypt/pull/517,https://github.com/karel-m,4,https://github.com/libtom/libtomcrypt/pull/517#issuecomment-546412324,"Migrate the solution file to Visual Studio 15.
The goal of this is to allow libtomcrypt to be made available through vcpkg (https://github.com/microsoft/vcpkg/)","No, makefile.msvc is not what I want.
The other thing is that it is not sufficient to just save the original .vcproj as .vcxproj. Somebody has also update helper.pl so that the .vcxproj file is updated when a new source file is added, deleted or renamed.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,517,2019-10-25T13:48:33Z,,2019-10-28T13:18:26Z,OPEN,False,2564,2924,7,https://github.com/FredeJ,Visualstudio solution,3,[],https://github.com/libtom/libtomcrypt/pull/517,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/517#issuecomment-546413973,"Migrate the solution file to Visual Studio 15.
The goal of this is to allow libtomcrypt to be made available through vcpkg (https://github.com/microsoft/vcpkg/)","No, makefile.msvc is not what I want.

I asked @FredeJ ;-)

The other thing is that it is not sufficient to just save the original .vcproj as .vcxproj. Somebody has also update helper.pl so that the .vcxproj file is updated when a new source file is added, deleted or renamed.

Right, I thought that was done, but apparently it wasn't.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,517,2019-10-25T13:48:33Z,,2019-10-28T13:18:26Z,OPEN,False,2564,2924,7,https://github.com/FredeJ,Visualstudio solution,3,[],https://github.com/libtom/libtomcrypt/pull/517,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/517#issuecomment-546427301,"Migrate the solution file to Visual Studio 15.
The goal of this is to allow libtomcrypt to be made available through vcpkg (https://github.com/microsoft/vcpkg/)","I will support this PR only when it keeps support for both cases:

libtomcrypt_VS2008.sln + libtomcrypt_VS2008.vcproj
libtomcrypt_VS2015.sln + libtomcrypt_VS2015.vcxproj (not sure about having .vcxproj.filters in git)

But again, somebody has to fix helper.pl so that it is able to update .vcxproj.",True,{'THUMBS_UP': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,517,2019-10-25T13:48:33Z,,2019-10-28T13:18:26Z,OPEN,False,2564,2924,7,https://github.com/FredeJ,Visualstudio solution,3,[],https://github.com/libtom/libtomcrypt/pull/517,https://github.com/FredeJ,7,https://github.com/libtom/libtomcrypt/pull/517#issuecomment-546939059,"Migrate the solution file to Visual Studio 15.
The goal of this is to allow libtomcrypt to be made available through vcpkg (https://github.com/microsoft/vcpkg/)","@sjaeckel makefile.msvc seems to be able to get me basically 95% there. I was not aware of nmake at all but was just using msbuild, which failed with the older project and solution files.
Now all I'm missing is figuring out how to build both debug and release, and both libtomcrypt and libtommath should be buildable with vcpkg :)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,517,2019-10-25T13:48:33Z,,2019-10-28T13:18:26Z,OPEN,False,2564,2924,7,https://github.com/FredeJ,Visualstudio solution,3,[],https://github.com/libtom/libtomcrypt/pull/517,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/517#issuecomment-546941576,"Migrate the solution file to Visual Studio 15.
The goal of this is to allow libtomcrypt to be made available through vcpkg (https://github.com/microsoft/vcpkg/)","@sjaeckel makefile.msvc seems to be able to get me basically 95% there

cool :)

Now all I'm missing is figuring out how to build both debug and release, and both libtomcrypt and libtommath should be buildable with vcpkg :)

uhm, pass in some CFLAGS and change the libname for the debug build? something like nmake -f makefile.msvc CFLAGS=""-MTd"" LIBMAIN_S=""tomcrypt-debug.lib""
I don't run windows, so I can't tell if it's exactly like that, but that should give you a direction",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,518,2019-10-30T05:34:47Z,2019-10-30T06:43:43Z,2019-10-30T06:43:43Z,CLOSED,False,3280,4,17,https://github.com/cntrump,add Xcode building support,1,[],https://github.com/libtom/libtomcrypt/pull/518,https://github.com/cntrump,1,https://github.com/libtom/libtomcrypt/pull/518,"documentation is added or updated
 tests are added or updated


add xcodeproj for ios/tvos/macos.
add extern “C” in every header file for fixing xcode build error when import tomcrypt.h.
output file TomCrypt.framework is staticlib type.","documentation is added or updated
 tests are added or updated


add xcodeproj for ios/tvos/macos.
add extern “C” in every header file for fixing xcode build error when import tomcrypt.h.
output file TomCrypt.framework is staticlib type.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,520,2019-11-07T18:03:26Z,,2021-04-15T17:40:28Z,OPEN,False,368,195,13,https://github.com/sjaeckel,Timing benchmark,5,[],https://github.com/libtom/libtomcrypt/pull/520,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/520,"This modifies how the timing demo of RSA and ECC work.

it updates the timing output to be easier machine-readable.
it introduces reference-keys to measure the timing.","This modifies how the timing demo of RSA and ECC work.

it updates the timing output to be easier machine-readable.
it introduces reference-keys to measure the timing.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,523,2019-11-15T10:39:42Z,2019-11-22T11:03:28Z,2019-11-22T11:03:30Z,MERGED,True,0,1,1,https://github.com/sjaeckel,remove unused `hashstate` from `hmac_state`,1,[],https://github.com/libtom/libtomcrypt/pull/523,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/523,I'm not sure how this was overlooked for so long.,I'm not sure how this was overlooked for so long.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,524,2019-11-19T14:28:39Z,,2020-10-26T06:56:21Z,OPEN,False,360,507,82,https://github.com/sjaeckel,[RFC] Make all modes use the ECB mode API,5,[],https://github.com/libtom/libtomcrypt/pull/524,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/524,"This PR implements usage of the ECB API for all other modes, MAC and AEAD algorithms that use block ciphers.
This will make all above mentioned algorithms use an eventually set ECB accelerator function.
Also it cleans up duplicated parts like cipher ID and block-length.","This PR implements usage of the ECB API for all other modes, MAC and AEAD algorithms that use block ciphers.
This will make all above mentioned algorithms use an eventually set ECB accelerator function.
Also it cleans up duplicated parts like cipher ID and block-length.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,526,2019-11-21T09:05:12Z,2019-11-22T10:43:16Z,2019-11-22T10:43:28Z,MERGED,True,10,2,1,https://github.com/sjaeckel,allow building against latest ltm,1,[],https://github.com/libtom/libtomcrypt/pull/526,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/526,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,530,2020-04-06T17:42:52Z,2020-04-06T19:06:12Z,2020-04-06T19:36:17Z,CLOSED,False,1532,2,6,https://github.com/pm-energid,Fixes for building on various platforms,13,[],https://github.com/libtom/libtomcrypt/pull/530,https://github.com/pm-energid,1,https://github.com/libtom/libtomcrypt/pull/530,"Checklist


 documentation is added or updated
 tests are added or updated","Checklist


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,530,2020-04-06T17:42:52Z,2020-04-06T19:06:12Z,2020-04-06T19:36:17Z,CLOSED,False,1532,2,6,https://github.com/pm-energid,Fixes for building on various platforms,13,[],https://github.com/libtom/libtomcrypt/pull/530,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/530#issuecomment-609980696,"Checklist


 documentation is added or updated
 tests are added or updated","IIUC this is a subset of #531 and can be closed.
Please re-open if you have further questions or comments.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,530,2020-04-06T17:42:52Z,2020-04-06T19:06:12Z,2020-04-06T19:36:17Z,CLOSED,False,1532,2,6,https://github.com/pm-energid,Fixes for building on various platforms,13,[],https://github.com/libtom/libtomcrypt/pull/530,https://github.com/pm-energid,3,https://github.com/libtom/libtomcrypt/pull/530#issuecomment-609995324,"Checklist


 documentation is added or updated
 tests are added or updated",Yes. Sorry I forgot to close it when I created #531.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,531,2020-04-06T17:46:12Z,2020-04-06T21:19:06Z,2020-04-06T23:04:49Z,CLOSED,False,2637,10,17,https://github.com/pm-energid,"Additional fixes we have made for supporting Windows, Mac OS and RTOS32 builds",27,[],https://github.com/libtom/libtomcrypt/pull/531,https://github.com/pm-energid,1,https://github.com/libtom/libtomcrypt/pull/531,"Checklist


 documentation is added or updated
 tests are added or updated","Checklist


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,531,2020-04-06T17:46:12Z,2020-04-06T21:19:06Z,2020-04-06T23:04:49Z,CLOSED,False,2637,10,17,https://github.com/pm-energid,"Additional fixes we have made for supporting Windows, Mac OS and RTOS32 builds",27,[],https://github.com/libtom/libtomcrypt/pull/531,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/531#issuecomment-610042268,"Checklist


 documentation is added or updated
 tests are added or updated","Thanks for this PR but I will close it as after review IMO nothing remains that should be merged.
The remaining patches I didn't comment on are AFAIU either NOOP's (e.g. the changes in .gitignore or the makefiles) or caused by your preference of coding/style/build-system and therefor should also not be integrated here.
Please re-open if you think I've missed something that should be merged.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,531,2020-04-06T17:46:12Z,2020-04-06T21:19:06Z,2020-04-06T23:04:49Z,CLOSED,False,2637,10,17,https://github.com/pm-energid,"Additional fixes we have made for supporting Windows, Mac OS and RTOS32 builds",27,[],https://github.com/libtom/libtomcrypt/pull/531,https://github.com/pm-energid,3,https://github.com/libtom/libtomcrypt/pull/531#issuecomment-610079887,"Checklist


 documentation is added or updated
 tests are added or updated","@sjaeckel There may be some commits/fixes other than the ones with issues you described which could be useful.
Just that I didn't have time to separate them specifically for the upstream fork for now, so I created one with all the changes we had in our fork. Maybe I can later create separate PRs for those individually.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,531,2020-04-06T17:46:12Z,2020-04-06T21:19:06Z,2020-04-06T23:04:49Z,CLOSED,False,2637,10,17,https://github.com/pm-energid,"Additional fixes we have made for supporting Windows, Mac OS and RTOS32 builds",27,[],https://github.com/libtom/libtomcrypt/pull/531,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/531#issuecomment-610081292,"Checklist


 documentation is added or updated
 tests are added or updated","Feel free to open another PR.
If possible I'd like to have one PR, with the patches topic-wise in single commits and rebased on top of develop :-)",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,533,2020-05-01T10:16:46Z,2020-07-14T16:40:47Z,2020-07-14T16:40:48Z,MERGED,True,39,25,2,https://github.com/sjaeckel,really implement DER decoding resursion limit,2,[],https://github.com/libtom/libtomcrypt/pull/533,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/533,"PR #373 did not really fix the issue of preventing a potential stack
overflow in case a lot of nested sequences have to be decoded.
Instead it only threw an error after successfully decoding all the nested
sequences.
This change fixes this and prevents the decoding.","PR #373 did not really fix the issue of preventing a potential stack
overflow in case a lot of nested sequences have to be decoded.
Instead it only threw an error after successfully decoding all the nested
sequences.
This change fixes this and prevents the decoding.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,534,2020-05-03T13:14:49Z,2020-08-03T12:01:43Z,2020-08-03T12:01:44Z,MERGED,True,1135,1144,111,https://github.com/sjaeckel,Clean up macro names and static functions,7,[],https://github.com/libtom/libtomcrypt/pull/534,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/534,This PR cleans up the names of macros and static functions as it was pointed out already multiple times that technically their names are UB,This PR cleans up the names of macros and static functions as it was pointed out already multiple times that technically their names are UB,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,535,2020-05-07T12:31:29Z,2020-05-08T12:02:00Z,2020-05-08T12:02:01Z,MERGED,True,2,2,1,https://github.com/sjaeckel,"Add ""memory"" to clobber list of `STORE/LOAD32`",1,[],https://github.com/libtom/libtomcrypt/pull/535,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/535,"c.f. cefff85
This fixes #532","c.f. cefff85
This fixes #532",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,535,2020-05-07T12:31:29Z,2020-05-08T12:02:00Z,2020-05-08T12:02:01Z,MERGED,True,2,2,1,https://github.com/sjaeckel,"Add ""memory"" to clobber list of `STORE/LOAD32`",1,[],https://github.com/libtom/libtomcrypt/pull/535,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/535#issuecomment-625347255,"c.f. cefff85
This fixes #532",@recoules fine like that?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,535,2020-05-07T12:31:29Z,2020-05-08T12:02:00Z,2020-05-08T12:02:01Z,MERGED,True,2,2,1,https://github.com/sjaeckel,"Add ""memory"" to clobber list of `STORE/LOAD32`",1,[],https://github.com/libtom/libtomcrypt/pull/535,https://github.com/recoules,3,https://github.com/libtom/libtomcrypt/pull/535#issuecomment-625759342,"c.f. cefff85
This fixes #532","Yes, it solves the issue.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,537,2020-05-29T14:41:00Z,,2021-04-11T12:09:52Z,OPEN,False,24,24,1,https://github.com/mkj,Cast STORE64H/STORE64L argument to ulong64,1,[],https://github.com/libtom/libtomcrypt/pull/537,https://github.com/mkj,1,https://github.com/libtom/libtomcrypt/pull/537,"Avoids undefined behaviour with right shift greater than 32 bits. (c99 6.5.7 ""If the value of the right operand is negative or is greater than or equal to the width of the promoted left operand, the behavior is undefined.""
I haven't reproduced it here but it was hit using STORE64H outside of libtomcrypt on BCM4706 MIPS32r2 with GCC 4.2.4  mkj/dropbear#99
The patch doesn't seem to affect code generation with -DLTC_NO_ASM on x64.","Avoids undefined behaviour with right shift greater than 32 bits. (c99 6.5.7 ""If the value of the right operand is negative or is greater than or equal to the width of the promoted left operand, the behavior is undefined.""
I haven't reproduced it here but it was hit using STORE64H outside of libtomcrypt on BCM4706 MIPS32r2 with GCC 4.2.4  mkj/dropbear#99
The patch doesn't seem to affect code generation with -DLTC_NO_ASM on x64.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,537,2020-05-29T14:41:00Z,,2021-04-11T12:09:52Z,OPEN,False,24,24,1,https://github.com/mkj,Cast STORE64H/STORE64L argument to ulong64,1,[],https://github.com/libtom/libtomcrypt/pull/537,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/537#issuecomment-687821638,"Avoids undefined behaviour with right shift greater than 32 bits. (c99 6.5.7 ""If the value of the right operand is negative or is greater than or equal to the width of the promoted left operand, the behavior is undefined.""
I haven't reproduced it here but it was hit using STORE64H outside of libtomcrypt on BCM4706 MIPS32r2 with GCC 4.2.4  mkj/dropbear#99
The patch doesn't seem to affect code generation with -DLTC_NO_ASM on x64.","IMO this cast belongs in the calling code and not in the STORE macro.
Those macro's clearly say that they store a 64bit Variable and if you pass a 32bit in there you have to cast it.
@karel-m your opinion?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,537,2020-05-29T14:41:00Z,,2021-04-11T12:09:52Z,OPEN,False,24,24,1,https://github.com/mkj,Cast STORE64H/STORE64L argument to ulong64,1,[],https://github.com/libtom/libtomcrypt/pull/537,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/537#issuecomment-817297091,"Avoids undefined behaviour with right shift greater than 32 bits. (c99 6.5.7 ""If the value of the right operand is negative or is greater than or equal to the width of the promoted left operand, the behavior is undefined.""
I haven't reproduced it here but it was hit using STORE64H outside of libtomcrypt on BCM4706 MIPS32r2 with GCC 4.2.4  mkj/dropbear#99
The patch doesn't seem to affect code generation with -DLTC_NO_ASM on x64.",I do not have strong opinion on this. But I slightly lean towards leaving the cast to the calling code as by casting in these macros we may hide some potential issues on the calling side (which now throws at least some warning).,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,538,2020-06-10T14:02:00Z,,2021-04-11T11:19:33Z,OPEN,False,9,3,1,https://github.com/mkj,Avoid zero length array with LTC_BASE64_URL unset,1,[],https://github.com/libtom/libtomcrypt/pull/538,https://github.com/mkj,1,https://github.com/libtom/libtomcrypt/pull/538,"If LTC_BASE64_URL is unset it creates a zero length array, which isn't allowed by some compilers","If LTC_BASE64_URL is unset it creates a zero length array, which isn't allowed by some compilers",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,538,2020-06-10T14:02:00Z,,2021-04-11T11:19:33Z,OPEN,False,9,3,1,https://github.com/mkj,Avoid zero length array with LTC_BASE64_URL unset,1,[],https://github.com/libtom/libtomcrypt/pull/538,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/538#issuecomment-687816599,"If LTC_BASE64_URL is unset it creates a zero length array, which isn't allowed by some compilers","I've implemented a different version of this patch. Can you please have a look whether this would also be acceptable for you?
https://github.com/libtom/libtomcrypt/tree/fix-b64-zero-length-array",True,{'THUMBS_UP': ['https://github.com/karel-m']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,538,2020-06-10T14:02:00Z,,2021-04-11T11:19:33Z,OPEN,False,9,3,1,https://github.com/mkj,Avoid zero length array with LTC_BASE64_URL unset,1,[],https://github.com/libtom/libtomcrypt/pull/538,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/538#issuecomment-817290830,"If LTC_BASE64_URL is unset it creates a zero length array, which isn't allowed by some compilers",I think @sjaeckel 's patch d20fdcc is slightly better,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,539,2020-06-17T10:57:12Z,2020-07-14T16:42:25Z,2020-07-14T16:43:18Z,MERGED,True,1120,6591,548,https://github.com/sjaeckel,Relicense,3,[],https://github.com/libtom/libtomcrypt/pull/539,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/539,"After so many complaints about the evil wording of the WTFPL and the non-applicability of the PD in most jurisdictions and a personal request by future contributors, we decided to change the license of LibTomCrypt to ""The Unlicense"" (as already done for libtommath).
Before this license change we made even sure that The Unlicense gets approved by the OSI, which is official since yesterday [1] ... just in case your legal department asks ;-)
[1] http://lists.opensource.org/pipermail/license-review_lists.opensource.org/2020-June/004890.html","After so many complaints about the evil wording of the WTFPL and the non-applicability of the PD in most jurisdictions and a personal request by future contributors, we decided to change the license of LibTomCrypt to ""The Unlicense"" (as already done for libtommath).
Before this license change we made even sure that The Unlicense gets approved by the OSI, which is official since yesterday [1] ... just in case your legal department asks ;-)
[1] http://lists.opensource.org/pipermail/license-review_lists.opensource.org/2020-June/004890.html",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,539,2020-06-17T10:57:12Z,2020-07-14T16:42:25Z,2020-07-14T16:43:18Z,MERGED,True,1120,6591,548,https://github.com/sjaeckel,Relicense,3,[],https://github.com/libtom/libtomcrypt/pull/539,https://github.com/buggywhip,2,https://github.com/libtom/libtomcrypt/pull/539#issuecomment-645391637,"After so many complaints about the evil wording of the WTFPL and the non-applicability of the PD in most jurisdictions and a personal request by future contributors, we decided to change the license of LibTomCrypt to ""The Unlicense"" (as already done for libtommath).
Before this license change we made even sure that The Unlicense gets approved by the OSI, which is official since yesterday [1] ... just in case your legal department asks ;-)
[1] http://lists.opensource.org/pipermail/license-review_lists.opensource.org/2020-June/004890.html","+1

Congratulations!!!

Sent fm iTouch
…",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,539,2020-06-17T10:57:12Z,2020-07-14T16:42:25Z,2020-07-14T16:43:18Z,MERGED,True,1120,6591,548,https://github.com/sjaeckel,Relicense,3,[],https://github.com/libtom/libtomcrypt/pull/539,https://github.com/dlegaultbbry,3,https://github.com/libtom/libtomcrypt/pull/539#issuecomment-645985476,"After so many complaints about the evil wording of the WTFPL and the non-applicability of the PD in most jurisdictions and a personal request by future contributors, we decided to change the license of LibTomCrypt to ""The Unlicense"" (as already done for libtommath).
Before this license change we made even sure that The Unlicense gets approved by the OSI, which is official since yesterday [1] ... just in case your legal department asks ;-)
[1] http://lists.opensource.org/pipermail/license-review_lists.opensource.org/2020-June/004890.html",Any hope for a new version release after this happens so we can get the new goodies officially? (25519 stuff for example),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,539,2020-06-17T10:57:12Z,2020-07-14T16:42:25Z,2020-07-14T16:43:18Z,MERGED,True,1120,6591,548,https://github.com/sjaeckel,Relicense,3,[],https://github.com/libtom/libtomcrypt/pull/539,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/539#issuecomment-658288252,"After so many complaints about the evil wording of the WTFPL and the non-applicability of the PD in most jurisdictions and a personal request by future contributors, we decided to change the license of LibTomCrypt to ""The Unlicense"" (as already done for libtommath).
Before this license change we made even sure that The Unlicense gets approved by the OSI, which is official since yesterday [1] ... just in case your legal department asks ;-)
[1] http://lists.opensource.org/pipermail/license-review_lists.opensource.org/2020-June/004890.html",@dlegaultbbry let's see if I can find the time,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,541,2020-07-22T05:39:37Z,2020-08-16T13:13:28Z,2020-08-16T13:13:28Z,MERGED,True,27,4,4,https://github.com/pattop,Minor dependency cleanups,4,[],https://github.com/libtom/libtomcrypt/pull/541,https://github.com/pattop,1,https://github.com/libtom/libtomcrypt/pull/541,"Hi,
this addresses a few minor issues I came across recently while building libtomcrypt with only Rijndael and a few hashes enabled.
Patrick","Hi,
this addresses a few minor issues I came across recently while building libtomcrypt with only Rijndael and a few hashes enabled.
Patrick",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,541,2020-07-22T05:39:37Z,2020-08-16T13:13:28Z,2020-08-16T13:13:28Z,MERGED,True,27,4,4,https://github.com/pattop,Minor dependency cleanups,4,[],https://github.com/libtom/libtomcrypt/pull/541,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/541#issuecomment-673725648,"Hi,
this addresses a few minor issues I came across recently while building libtomcrypt with only Rijndael and a few hashes enabled.
Patrick","Is it okay if I rebase those changes and force-push the source branch fixes in your fork?
I'd also like to add some modifications.
FYI I've sent you an invitation as contributor, so you can push directly to feature branches in this repo in the future.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,541,2020-07-22T05:39:37Z,2020-08-16T13:13:28Z,2020-08-16T13:13:28Z,MERGED,True,27,4,4,https://github.com/pattop,Minor dependency cleanups,4,[],https://github.com/libtom/libtomcrypt/pull/541,https://github.com/pattop,3,https://github.com/libtom/libtomcrypt/pull/541#issuecomment-673740506,"Hi,
this addresses a few minor issues I came across recently while building libtomcrypt with only Rijndael and a few hashes enabled.
Patrick","No problem, my fork is just a throwaway repo to put these patches.
Thanks for adding me as a contributor. I've got a couple more cleanups I'll submit soon.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,542,2020-07-22T06:15:37Z,,2020-08-17T00:19:48Z,OPEN,False,958,195,56,https://github.com/pattop,[RFC/POC] Static Math Library Binding,1,[],https://github.com/libtom/libtomcrypt/pull/542,https://github.com/pattop,1,https://github.com/libtom/libtomcrypt/pull/542,"Hi,
this is a very rough proof of concept to support binding math libraries statically. The primary motivation for this is building for embedded systems with LTO enabled. When using LTO static bindings allow the compiler to remove many unused code paths and thereby reduce code size.
This patch is by no means complete and serves merely as a discussion point to establish whether LibTomCrypt is open to merge support for something like this and how it might look.
The patch does build & link with static support for libtommath only. Dynamic support for all libraries should still work too.
A few things to consider:

mp_* #defines should probably be removed, but this would mean touching more source files as many mp_* function names collide with functions from libtommath. We would need to choose a new prefix (ltc_mp_?)
How should library linking be structured? The patch currently builds libtomcrypt.a (dynamic binding) and libtomcrypt_.a (static binding). A cleaner solution may be to use weak aliases in libtomcrypt.a and override them with another library to bind statically? e.g. link both libtomcrypt.a and libtomcrypt_static_.a. This is a bit more complex but avoids duplicating everything. We could also split out the dynamic binding support, but that would require current users to update their link lines.
The example implementation of ltm_static.c is far from ideal. Including ltm_desc.c and hooking up to its internals was just a quick way to hack this together.
Tests would need to be updated to include statically linked versions.

Patrick","Hi,
this is a very rough proof of concept to support binding math libraries statically. The primary motivation for this is building for embedded systems with LTO enabled. When using LTO static bindings allow the compiler to remove many unused code paths and thereby reduce code size.
This patch is by no means complete and serves merely as a discussion point to establish whether LibTomCrypt is open to merge support for something like this and how it might look.
The patch does build & link with static support for libtommath only. Dynamic support for all libraries should still work too.
A few things to consider:

mp_* #defines should probably be removed, but this would mean touching more source files as many mp_* function names collide with functions from libtommath. We would need to choose a new prefix (ltc_mp_?)
How should library linking be structured? The patch currently builds libtomcrypt.a (dynamic binding) and libtomcrypt_.a (static binding). A cleaner solution may be to use weak aliases in libtomcrypt.a and override them with another library to bind statically? e.g. link both libtomcrypt.a and libtomcrypt_static_.a. This is a bit more complex but avoids duplicating everything. We could also split out the dynamic binding support, but that would require current users to update their link lines.
The example implementation of ltm_static.c is far from ideal. Including ltm_desc.c and hooking up to its internals was just a quick way to hack this together.
Tests would need to be updated to include statically linked versions.

Patrick",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,542,2020-07-22T06:15:37Z,,2020-08-17T00:19:48Z,OPEN,False,958,195,56,https://github.com/pattop,[RFC/POC] Static Math Library Binding,1,[],https://github.com/libtom/libtomcrypt/pull/542,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/542#issuecomment-673760173,"Hi,
this is a very rough proof of concept to support binding math libraries statically. The primary motivation for this is building for embedded systems with LTO enabled. When using LTO static bindings allow the compiler to remove many unused code paths and thereby reduce code size.
This patch is by no means complete and serves merely as a discussion point to establish whether LibTomCrypt is open to merge support for something like this and how it might look.
The patch does build & link with static support for libtommath only. Dynamic support for all libraries should still work too.
A few things to consider:

mp_* #defines should probably be removed, but this would mean touching more source files as many mp_* function names collide with functions from libtommath. We would need to choose a new prefix (ltc_mp_?)
How should library linking be structured? The patch currently builds libtomcrypt.a (dynamic binding) and libtomcrypt_.a (static binding). A cleaner solution may be to use weak aliases in libtomcrypt.a and override them with another library to bind statically? e.g. link both libtomcrypt.a and libtomcrypt_static_.a. This is a bit more complex but avoids duplicating everything. We could also split out the dynamic binding support, but that would require current users to update their link lines.
The example implementation of ltm_static.c is far from ideal. Including ltm_desc.c and hooking up to its internals was just a quick way to hack this together.
Tests would need to be updated to include statically linked versions.

Patrick","I like the idea a lot, but we'd have to work a bit more on that!
FYI I already had a patch locally which renamed all mp_* defines into ltc_mp_* ... ;)
You also already added the missing direct invocations of ltc_mp.* as macros.
IMO we should have two separate builds of ltc, dynamic and static MPI provider. Either you build one or the other.
I have to think a bit more about how to accomplish this ... something in this area maybe?
First we add ltc_mp_ prefix to all macros, then we do something like the following?
diff --git a/src/math/ltm_desc.c b/src/math/ltm_desc.c
index e07badfa..b5dd9cb2 100644
--- a/src/math/ltm_desc.c
+++ b/src/math/ltm_desc.c
@@ -26,2 +26,10 @@ static const struct {
 
+#ifdef LTC_MPI_STATIC
+#define LTC_MPI_DECL_STATIC
+#define LTC_MPI_FN_STATIC(n) n
+#else
+#define LTC_MPI_DECL_STATIC static
+#define LTC_MPI_FN_STATIC(n) s_ ## n
+#endif
+
 /**
@@ -55,3 +63,3 @@ static int init_mpi(void **a)
 
-static int init(void **a)
+LTC_MPI_DECL_STATIC int LTC_MPI_FN_STATIC(ltc_mp_init)(void **a)
 {

naming is definitely not optimal yet and I'm not sure whether this is such a good idea but it could work ... and this could be done for all MPI providers in the same fashion ... or did I overlook something?
maybe @minad has a good idea?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,542,2020-07-22T06:15:37Z,,2020-08-17T00:19:48Z,OPEN,False,958,195,56,https://github.com/pattop,[RFC/POC] Static Math Library Binding,1,[],https://github.com/libtom/libtomcrypt/pull/542,https://github.com/pattop,3,https://github.com/libtom/libtomcrypt/pull/542#issuecomment-674598678,"Hi,
this is a very rough proof of concept to support binding math libraries statically. The primary motivation for this is building for embedded systems with LTO enabled. When using LTO static bindings allow the compiler to remove many unused code paths and thereby reduce code size.
This patch is by no means complete and serves merely as a discussion point to establish whether LibTomCrypt is open to merge support for something like this and how it might look.
The patch does build & link with static support for libtommath only. Dynamic support for all libraries should still work too.
A few things to consider:

mp_* #defines should probably be removed, but this would mean touching more source files as many mp_* function names collide with functions from libtommath. We would need to choose a new prefix (ltc_mp_?)
How should library linking be structured? The patch currently builds libtomcrypt.a (dynamic binding) and libtomcrypt_.a (static binding). A cleaner solution may be to use weak aliases in libtomcrypt.a and override them with another library to bind statically? e.g. link both libtomcrypt.a and libtomcrypt_static_.a. This is a bit more complex but avoids duplicating everything. We could also split out the dynamic binding support, but that would require current users to update their link lines.
The example implementation of ltm_static.c is far from ideal. Including ltm_desc.c and hooking up to its internals was just a quick way to hack this together.
Tests would need to be updated to include statically linked versions.

Patrick",Sorry I haven't been able to dedicate any more time to this yet. I haven't forgotten about it though!,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,545,2020-08-16T23:56:21Z,2020-08-29T09:30:24Z,2020-08-29T09:30:25Z,MERGED,True,2,4,2,https://github.com/pattop,Minor fix & cleanup,2,[],https://github.com/libtom/libtomcrypt/pull/545,https://github.com/pattop,1,https://github.com/libtom/libtomcrypt/pull/545,"Hi Steffen,
a couple more minor changes.
Thanks,
Patrick","Hi Steffen,
a couple more minor changes.
Thanks,
Patrick",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/546,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.","DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/sjaeckel,2,https://github.com/libtom/libtomcrypt/pull/546#issuecomment-683272067,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.","@karel-m Would something speak against implementing this as follows?
  hash = -1;
#if defined(LTC_SHA3)
  hash = register_hash(&sha3_512_desc);
#elif defined(LTC_SHA512)
  hash = register_hash(&sha512_desc);
#elif defined(LTC_SHA384)
  hash = register_hash(&sha384_desc);
#elif defined(LTC_SHA256)
  hash = register_hash(&sha256_desc);
#endif
  if (hash == -1) {
    return CRYPT_INVALID_ARG; /* no appropriate hash function found */
  }
  if (N > hash_descriptor[hash].hashsize * 8) {
    return CRYPT_INVALID_ARG; /* group_size too big */
  }",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/546#issuecomment-816609461,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.","I am looking at:
  if (group_size >= LTC_MDSA_MAX_GROUP || group_size < 1 || group_size >= modulus_size) {
    return CRYPT_INVALID_ARG;
  }

plus:
#define LTC_MDSA_MAX_GROUP 512

Which makes me think that sha512 case cannot happen. Maybe we should change: group_size > LTC_MDSA_MAX_GROUP",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/546#issuecomment-817138895,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.","I'm a bit uncertain whether this is even according to the standard what we do here ...
The implementation is according to FIPS 186-4 A.1.1.2, which states in the first step ""Check that the (L, N) pair is in the list of acceptable (L, N pairs) (see Section 4.2).""
Section 4.2 says valid pairs are only
L = 1024, N = 160
L = 2048, N = 224
L = 2048, N = 256
L = 3072, N = 256

LTC_MDSA_MAX_GROUP is 512 but according to the standard this should be (256/8)=32 as we do N = (unsigned long)group_size * 8;.
Then we should maybe also add a check for L...
or is this all intentionally left open?
... writing all this while also keeping in mind that FIPS 186-5 (which is still in draft) forbids signing with the DSA algorithm and only allows verification of DSA signatures!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/karel-m,5,https://github.com/libtom/libtomcrypt/pull/546#issuecomment-817290397,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.","Yes, 4096bit DSA is ""out of FIPS"". On the other hand OpenSSL is able to generate 4096 dsaparam and according my observation they use: L = 4096, N = 256 (although I have not find any paper recommending these values).
OpenSSL supports even 8192 dsaparam generation (with L = 8192, N = 256).
Our doc recommends: group_size = 40 and modulus_size = 512 (these are in bytes)
(EDITED) Ad L (a.k.a. modulus_size) checking - i removed my previous comment as it was wrong.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/karel-m,6,https://github.com/libtom/libtomcrypt/pull/546#issuecomment-817324218,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.",I am not sure whether LTC_MDSA_MAX_GROUP = 512 should not be rather 64 (which corresponds to SHA512),True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/karel-m,7,https://github.com/libtom/libtomcrypt/pull/546#issuecomment-817365905,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.",And maybe we should introduce LTC_MDSA_MAX_MODULUS = 512 (or 640).,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/sjaeckel,8,https://github.com/libtom/libtomcrypt/pull/546#issuecomment-817942961,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.","OpenSSL supports even 8192 dsaparam generation (with L = 8192, N = 256).

alright, so it's intentional and we should also keep it open.

I am not sure whether LTC_MDSA_MAX_GROUP = 512 should not be rather 64 (which corresponds to SHA512)

OK

And maybe we should introduce LTC_MDSA_MAX_MODULUS = 512 (or 640).

OK",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/karel-m,9,https://github.com/libtom/libtomcrypt/pull/546#issuecomment-818050979,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.",Check my last commit,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/sjaeckel,10,https://github.com/libtom/libtomcrypt/pull/546#issuecomment-819326952,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.","Is LTC_MDSA_DELTA still correct?
IIUC it would prevent usage of keys generated by OpenSSL with L = 8192, N = 256.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/karel-m,11,https://github.com/libtom/libtomcrypt/pull/546#issuecomment-819393380,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.","You mean something like this?
/* Max diff between group and modulus size in bytes (max case: L=8192bits, N=256bits) */
#define LTC_MDSA_DELTA 992

/* Max DSA group size in bytes */
#define LTC_MDSA_MAX_GROUP 64

/* Max DSA modulus size in bytes (the actual DSA size, max 8192 bits) */
#define LTC_MDSA_MAX_MODULUS 1024",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/sjaeckel,12,https://github.com/libtom/libtomcrypt/pull/546#issuecomment-819395953,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.","You mean something like this?
/* Max diff between group and modulus size in bytes (max case: L=8192bits, N=256bits) */
#define LTC_MDSA_DELTA 992

/* Max DSA group size in bytes */
#define LTC_MDSA_MAX_GROUP 64

/* Max DSA modulus size in bytes (the actual DSA size, max 8192 bits) */
#define LTC_MDSA_MAX_MODULUS 1024

yep, that looks better",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,546,2020-08-29T10:25:12Z,2021-04-14T13:52:42Z,2021-04-14T13:52:43Z,MERGED,True,17,13,3,https://github.com/sjaeckel,fix DSA dependency to SHA2,4,[],https://github.com/libtom/libtomcrypt/pull/546,https://github.com/sjaeckel,13,https://github.com/libtom/libtomcrypt/pull/546#issuecomment-819405115,"DSA had a hard dependency to the basic sha2 operations.
In case one wanted to compile e.g. only with sha256 this lead to a
compilation error.
While working on this I thought whether it wouldn't make sense to use sha3 there or at least give the possibility.",👍,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,550,2020-10-26T08:33:15Z,2020-12-21T18:34:39Z,2020-12-21T18:34:40Z,MERGED,True,156,153,16,https://github.com/sjaeckel,Patch & clean up,11,[],https://github.com/libtom/libtomcrypt/pull/550,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/550,Multiple patches and cleanups,Multiple patches and cleanups,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,554,2020-11-17T07:51:48Z,2020-11-17T13:53:59Z,2020-11-17T14:34:53Z,CLOSED,False,3830,8,18,https://github.com/cntrump,Add Xcode support,2,[],https://github.com/libtom/libtomcrypt/pull/554,https://github.com/cntrump,1,https://github.com/libtom/libtomcrypt/pull/554,,,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,554,2020-11-17T07:51:48Z,2020-11-17T13:53:59Z,2020-11-17T14:34:53Z,CLOSED,False,3830,8,18,https://github.com/cntrump,Add Xcode support,2,[],https://github.com/libtom/libtomcrypt/pull/554,https://github.com/cntrump,2,https://github.com/libtom/libtomcrypt/pull/554#issuecomment-728942579,,I am trying add Cocoapods support instead,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,554,2020-11-17T07:51:48Z,2020-11-17T13:53:59Z,2020-11-17T14:34:53Z,CLOSED,False,3830,8,18,https://github.com/cntrump,Add Xcode support,2,[],https://github.com/libtom/libtomcrypt/pull/554,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/554#issuecomment-728968444,,Doesn't conan.io already have ltc support?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,556,2020-12-08T10:44:33Z,2020-12-21T10:16:09Z,2020-12-21T10:16:09Z,MERGED,True,2,2,2,https://github.com/timgates42,"docs: fix simple typo, succes -> success",1,[],https://github.com/libtom/libtomcrypt/pull/556,https://github.com/timgates42,1,https://github.com/libtom/libtomcrypt/pull/556,"There is a small typo in src/mac/f9/f9_test.c, src/mac/xcbc/xcbc_test.c.
Should read success rather than succes.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","There is a small typo in src/mac/f9/f9_test.c, src/mac/xcbc/xcbc_test.c.
Should read success rather than succes.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,557,2020-12-21T18:46:35Z,,2021-09-01T18:56:12Z,OPEN,False,536,75,15,https://github.com/sjaeckel,Add AES-NI,5,[],https://github.com/libtom/libtomcrypt/pull/557,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/557,"documentation is added or updated
 tests are added or updated

This PR adds support for the AES-NI instructions as discussed in e.g. #480 or #551","documentation is added or updated
 tests are added or updated

This PR adds support for the AES-NI instructions as discussed in e.g. #480 or #551",True,{'HEART': ['https://github.com/MasFlam']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,557,2020-12-21T18:46:35Z,,2021-09-01T18:56:12Z,OPEN,False,536,75,15,https://github.com/sjaeckel,Add AES-NI,5,[],https://github.com/libtom/libtomcrypt/pull/557,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/557#issuecomment-816601720,"documentation is added or updated
 tests are added or updated

This PR adds support for the AES-NI instructions as discussed in e.g. #480 or #551","Basically fine.
I am just thinking about having:
aes_autodetect_desc

on top of:
aesni_desc
aes_desc

I have to think it over.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,557,2020-12-21T18:46:35Z,,2021-09-01T18:56:12Z,OPEN,False,536,75,15,https://github.com/sjaeckel,Add AES-NI,5,[],https://github.com/libtom/libtomcrypt/pull/557,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/557#issuecomment-816759541,"documentation is added or updated
 tests are added or updated

This PR adds support for the AES-NI instructions as discussed in e.g. #480 or #551","Or even:
aesni_desc      (new AES-NI)
aessw_desc      (old SW implementation aes_desc renamed to aessw_desc)
aes_desc        (aes with runtime autodetection of aessw/aesni variant)

With this all calls like find_cipher(""aes"") (we have it at many places) will choose autodetected aessw/aesni variant.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,557,2020-12-21T18:46:35Z,,2021-09-01T18:56:12Z,OPEN,False,536,75,15,https://github.com/sjaeckel,Add AES-NI,5,[],https://github.com/libtom/libtomcrypt/pull/557,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/557#issuecomment-910552156,"documentation is added or updated
 tests are added or updated

This PR adds support for the AES-NI instructions as discussed in e.g. #480 or #551","aesni_desc      (new AES-NI)
aessw_desc      (old SW implementation aes_desc renamed to aessw_desc)
aes_desc        (aes with runtime autodetection of aessw/aesni variant)

With this all calls like find_cipher(""aes"") (we have it at many places) will choose autodetected aessw/aesni variant.

I like the idea but what's the purpose of the aesni_desc? It should still check whether the CPU has support as otherwise bad things will happen.
My proposal would therefor be to make aesni the new default:
aes_desc        (aes with runtime autodetection of aessw/aesni variant)
aessw_desc      (old SW implementation aes_desc renamed to aessw_desc)

What do you think?
I'm having an early WIP about adding support for the AES instructions on ARMv8, there we could then basically use the same pattern and add a aes_arm.c which provides aes_desc and also does autodetection!?",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,557,2020-12-21T18:46:35Z,,2021-09-01T18:56:12Z,OPEN,False,536,75,15,https://github.com/sjaeckel,Add AES-NI,5,[],https://github.com/libtom/libtomcrypt/pull/557,https://github.com/sjaeckel,5,https://github.com/libtom/libtomcrypt/pull/557#issuecomment-910589301,"documentation is added or updated
 tests are added or updated

This PR adds support for the AES-NI instructions as discussed in e.g. #480 or #551","Hah, having a second look I understand your reasoning ... I have to think about it a bit more!",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,558,2020-12-24T20:43:21Z,2021-01-19T12:51:23Z,2021-01-19T12:51:23Z,MERGED,True,54,10,2,https://github.com/jamuir,"Add new utf8 test-vector, update comments explaining utf8 decoding",1,[],https://github.com/libtom/libtomcrypt/pull/558,https://github.com/jamuir,1,https://github.com/libtom/libtomcrypt/pull/558,"Description:
Minor changes to help test and clarify the way utf8 strings are
decoded.  This originated from my misunderstanding of the fix for
issue #507.  The new test-vector uses two bytes to encode each
wide-char.
The utf8 format is described here:
https://tools.ietf.org/html/rfc3629#section-3
Testing:
  $ make clean
  $ make CFLAGS=""-DUSE_LTM -DLTM_DESC -I../libtommath"" EXTRALIBS=""../libtommath/libtommath.a"" test
  $ ./test

You can confirm that the new utf8 test data is correct using python:
  >>> s=""\xD7\xA9\xD7\x9C\xD7\x95\xD7\x9D""
  >>> s.decode(""utf-8"")
  u'\u05e9\u05dc\u05d5\u05dd'


Checklist


 tests are added or updated","Description:
Minor changes to help test and clarify the way utf8 strings are
decoded.  This originated from my misunderstanding of the fix for
issue #507.  The new test-vector uses two bytes to encode each
wide-char.
The utf8 format is described here:
https://tools.ietf.org/html/rfc3629#section-3
Testing:
  $ make clean
  $ make CFLAGS=""-DUSE_LTM -DLTM_DESC -I../libtommath"" EXTRALIBS=""../libtommath/libtommath.a"" test
  $ ./test

You can confirm that the new utf8 test data is correct using python:
  >>> s=""\xD7\xA9\xD7\x9C\xD7\x95\xD7\x9D""
  >>> s.decode(""utf-8"")
  u'\u05e9\u05dc\u05d5\u05dd'


Checklist


 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,558,2020-12-24T20:43:21Z,2021-01-19T12:51:23Z,2021-01-19T12:51:23Z,MERGED,True,54,10,2,https://github.com/jamuir,"Add new utf8 test-vector, update comments explaining utf8 decoding",1,[],https://github.com/libtom/libtomcrypt/pull/558,https://github.com/jamuir,2,https://github.com/libtom/libtomcrypt/pull/558#issuecomment-761293249,"Description:
Minor changes to help test and clarify the way utf8 strings are
decoded.  This originated from my misunderstanding of the fix for
issue #507.  The new test-vector uses two bytes to encode each
wide-char.
The utf8 format is described here:
https://tools.ietf.org/html/rfc3629#section-3
Testing:
  $ make clean
  $ make CFLAGS=""-DUSE_LTM -DLTM_DESC -I../libtommath"" EXTRALIBS=""../libtommath/libtommath.a"" test
  $ ./test

You can confirm that the new utf8 test data is correct using python:
  >>> s=""\xD7\xA9\xD7\x9C\xD7\x95\xD7\x9D""
  >>> s.decode(""utf-8"")
  u'\u05e9\u05dc\u05d5\u05dd'


Checklist


 tests are added or updated",@sjaeckel : please take another look and let me know what you think.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,560,2021-02-10T20:28:41Z,2021-04-10T13:16:55Z,2021-04-10T13:16:56Z,MERGED,True,82,108,16,https://github.com/sjaeckel,Cleanup and fixes,9,[],https://github.com/libtom/libtomcrypt/pull/560,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/560,Some housekeeping and fixes,Some housekeeping and fixes,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,560,2021-02-10T20:28:41Z,2021-04-10T13:16:55Z,2021-04-10T13:16:56Z,MERGED,True,82,108,16,https://github.com/sjaeckel,Cleanup and fixes,9,[],https://github.com/libtom/libtomcrypt/pull/560,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/560#issuecomment-816575802,Some housekeeping and fixes,"The branch cleanup-and-fixes fails to build with cygwin + gcc-10.2.0
  * cc src/ciphers/camellia.o
In file included from ./src/headers/tomcrypt.h:78,
                 from ./src/headers/tomcrypt_private.h:4,
                 from src/ciphers/aes/aes.c:25:
./src/headers/tomcrypt_cfg.h:10: error: unterminated #ifndef
   10 | #ifndef TOMCRYPT_CFG_H
      |",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,560,2021-02-10T20:28:41Z,2021-04-10T13:16:55Z,2021-04-10T13:16:56Z,MERGED,True,82,108,16,https://github.com/sjaeckel,Cleanup and fixes,9,[],https://github.com/libtom/libtomcrypt/pull/560,https://github.com/sjaeckel,3,https://github.com/libtom/libtomcrypt/pull/560#issuecomment-816587080,Some housekeeping and fixes,"The branch cleanup-and-fixes fails to build with cygwin + gcc-10.2.0

what the ... 5bfa8a3 apparently uncovered that tomcrypt_cfg.h was ""broken"" for how long exactly? :D
... not really broken, but the include guards didn't do what they promised ...",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,560,2021-02-10T20:28:41Z,2021-04-10T13:16:55Z,2021-04-10T13:16:56Z,MERGED,True,82,108,16,https://github.com/sjaeckel,Cleanup and fixes,9,[],https://github.com/libtom/libtomcrypt/pull/560,https://github.com/sjaeckel,4,https://github.com/libtom/libtomcrypt/pull/560#issuecomment-817118425,Some housekeeping and fixes,@mkj do you maybe want to have a look as well?,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,563,2021-03-16T07:24:11Z,2021-12-11T07:26:49Z,2021-12-11T07:26:49Z,CLOSED,False,17098,1,10,https://github.com/mogoweb,add chinese standard GM symmetric crypto SM4.,1,[],https://github.com/libtom/libtomcrypt/pull/563,https://github.com/mogoweb,1,https://github.com/libtom/libtomcrypt/pull/563,"about chinese standard GM documents, please refer to https://github.com/guanzhi/GM-Standards.

Checklist


 documentation is added or updated
 tests are added or updated","about chinese standard GM documents, please refer to https://github.com/guanzhi/GM-Standards.

Checklist


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,563,2021-03-16T07:24:11Z,2021-12-11T07:26:49Z,2021-12-11T07:26:49Z,CLOSED,False,17098,1,10,https://github.com/mogoweb,add chinese standard GM symmetric crypto SM4.,1,[],https://github.com/libtom/libtomcrypt/pull/563,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/563#issuecomment-817291244,"about chinese standard GM documents, please refer to https://github.com/guanzhi/GM-Standards.

Checklist


 documentation is added or updated
 tests are added or updated",I am afraid the code in this PR does not comply with libtomcrypt licence.,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,563,2021-03-16T07:24:11Z,2021-12-11T07:26:49Z,2021-12-11T07:26:49Z,CLOSED,False,17098,1,10,https://github.com/mogoweb,add chinese standard GM symmetric crypto SM4.,1,[],https://github.com/libtom/libtomcrypt/pull/563,https://github.com/karel-m,3,https://github.com/libtom/libtomcrypt/pull/563#issuecomment-817292341,"about chinese standard GM documents, please refer to https://github.com/guanzhi/GM-Standards.

Checklist


 documentation is added or updated
 tests are added or updated","Plus the standardization of SM4 got stuck in 2018 https://tools.ietf.org/html/draft-ribose-cfrg-sm4-10
I vote for rejecting this PR.",True,"{'THUMBS_UP': ['https://github.com/rofl0r', 'https://github.com/tyzoid', 'https://github.com/sjaeckel']}"
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,563,2021-03-16T07:24:11Z,2021-12-11T07:26:49Z,2021-12-11T07:26:49Z,CLOSED,False,17098,1,10,https://github.com/mogoweb,add chinese standard GM symmetric crypto SM4.,1,[],https://github.com/libtom/libtomcrypt/pull/563,https://github.com/tyzoid,4,https://github.com/libtom/libtomcrypt/pull/563#issuecomment-989340066,"about chinese standard GM documents, please refer to https://github.com/guanzhi/GM-Standards.

Checklist


 documentation is added or updated
 tests are added or updated","I second @karel-m 's reasoning - rejection is the only available resolution here, unless we're willing to accept a reimplementation unencumbered by its license.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,564,2021-03-28T16:38:03Z,2021-04-09T10:30:37Z,2021-04-09T10:40:07Z,MERGED,True,1,1,1,https://github.com/Biswa96,Makefile: Fix shared library build in MinGW.,1,[],https://github.com/libtom/libtomcrypt/pull/564,https://github.com/Biswa96,1,https://github.com/libtom/libtomcrypt/pull/564,"This enables -no-undefined linker flag in mingw toolchain.
Previous related commit 9c2c9f8","This enables -no-undefined linker flag in mingw toolchain.
Previous related commit 9c2c9f8",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,564,2021-03-28T16:38:03Z,2021-04-09T10:30:37Z,2021-04-09T10:40:07Z,MERGED,True,1,1,1,https://github.com/Biswa96,Makefile: Fix shared library build in MinGW.,1,[],https://github.com/libtom/libtomcrypt/pull/564,https://github.com/karel-m,2,https://github.com/libtom/libtomcrypt/pull/564#issuecomment-816591692,"This enables -no-undefined linker flag in mingw toolchain.
Previous related commit 9c2c9f8","@sjaeckel do not forget to add/commit the above (for future generations wanting more ifs based on uname value)
Ignore my comment. I already see it.",True,{'LAUGH': ['https://github.com/sjaeckel']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,565,2021-04-07T21:56:30Z,2021-04-10T11:02:19Z,2021-04-10T11:02:19Z,MERGED,True,64,0,2,https://github.com/sjaeckel,make sure basic types are marked as UNIVERSAL&PRIMITIVE,1,[],https://github.com/libtom/libtomcrypt/pull/565,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/565,This fixes DCIT/perl-CryptX#69,This fixes DCIT/perl-CryptX#69,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,567,2021-04-11T16:24:10Z,2021-04-11T19:01:42Z,2021-04-11T19:01:42Z,MERGED,True,2,1,1,https://github.com/dcantrell,m68k platforms are big endian,1,[],https://github.com/libtom/libtomcrypt/pull/567,https://github.com/dcantrell,1,https://github.com/libtom/libtomcrypt/pull/567,"The endianness fallback in tomcrypt_cfg.h lacked a check for the gcc
define for m68k.  I discovered this while building dropbear on A/UX
3.1.1 on a Macintosh Quadra 700 (yes, in 2021).  Adding the check for
the gcc m68k define gets everything building.
Signed-off-by: David Cantrell david.l.cantrell@gmail.com","The endianness fallback in tomcrypt_cfg.h lacked a check for the gcc
define for m68k.  I discovered this while building dropbear on A/UX
3.1.1 on a Macintosh Quadra 700 (yes, in 2021).  Adding the check for
the gcc m68k define gets everything building.
Signed-off-by: David Cantrell david.l.cantrell@gmail.com",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,569,2021-05-26T12:31:32Z,2021-06-04T16:51:42Z,2021-06-04T16:51:42Z,MERGED,True,160,25,5,https://github.com/cneveux,rsa: add rsa key generate with bignumber public exponent,3,[],https://github.com/libtom/libtomcrypt/pull/569,https://github.com/cneveux,1,https://github.com/libtom/libtomcrypt/pull/569,"Function rsa_make_key() limits the RSA key generates to a public
exponent of type long (32 bits or 64 bits).
RSA standard specify that public exponent e can be between 65537 (included)
and 2^256 (excluded).
Add function rsa_make_key_bn_e to use a bignumber public exponent.
Signed-off-by: Cedric Neveux cedric.neveux@nxp.com

Checklist


 documentation is added or updated
 tests are added or updated","Function rsa_make_key() limits the RSA key generates to a public
exponent of type long (32 bits or 64 bits).
RSA standard specify that public exponent e can be between 65537 (included)
and 2^256 (excluded).
Add function rsa_make_key_bn_e to use a bignumber public exponent.
Signed-off-by: Cedric Neveux cedric.neveux@nxp.com

Checklist


 documentation is added or updated
 tests are added or updated",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,569,2021-05-26T12:31:32Z,2021-06-04T16:51:42Z,2021-06-04T16:51:42Z,MERGED,True,160,25,5,https://github.com/cneveux,rsa: add rsa key generate with bignumber public exponent,3,[],https://github.com/libtom/libtomcrypt/pull/569,https://github.com/cneveux,2,https://github.com/libtom/libtomcrypt/pull/569#issuecomment-854385936,"Function rsa_make_key() limits the RSA key generates to a public
exponent of type long (32 bits or 64 bits).
RSA standard specify that public exponent e can be between 65537 (included)
and 2^256 (excluded).
Add function rsa_make_key_bn_e to use a bignumber public exponent.
Signed-off-by: Cedric Neveux cedric.neveux@nxp.com

Checklist


 documentation is added or updated
 tests are added or updated","Cool thanks
If you rebase now on top of develop I can merge this :)

Done.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,570,2021-08-12T08:44:51Z,2021-12-09T00:25:02Z,2021-12-09T00:25:02Z,CLOSED,False,26,29,1,https://github.com/radumvlad,Updated license for last master,1,[],https://github.com/libtom/libtomcrypt/pull/570,https://github.com/radumvlad,1,https://github.com/libtom/libtomcrypt/pull/570,"Since the license was updated on develop and since there was no release for some time already, it would be nice if the latest master had this new license as well.","Since the license was updated on develop and since there was no release for some time already, it would be nice if the latest master had this new license as well.",True,{'THUMBS_UP': ['https://github.com/tyzoid']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,570,2021-08-12T08:44:51Z,2021-12-09T00:25:02Z,2021-12-09T00:25:02Z,CLOSED,False,26,29,1,https://github.com/radumvlad,Updated license for last master,1,[],https://github.com/libtom/libtomcrypt/pull/570,https://github.com/radumvlad,2,https://github.com/libtom/libtomcrypt/pull/570#issuecomment-903883833,"Since the license was updated on develop and since there was no release for some time already, it would be nice if the latest master had this new license as well.",Any opinion regarding this? :(,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,570,2021-08-12T08:44:51Z,2021-12-09T00:25:02Z,2021-12-09T00:25:02Z,CLOSED,False,26,29,1,https://github.com/radumvlad,Updated license for last master,1,[],https://github.com/libtom/libtomcrypt/pull/570,https://github.com/rofl0r,3,https://github.com/libtom/libtomcrypt/pull/570#issuecomment-909346201,"Since the license was updated on develop and since there was no release for some time already, it would be nice if the latest master had this new license as well.","dude, pls stop whining and wait patiently for a reply. this is the 4th notification i'm getting now and so is everybody else watching this repo.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,570,2021-08-12T08:44:51Z,2021-12-09T00:25:02Z,2021-12-09T00:25:02Z,CLOSED,False,26,29,1,https://github.com/radumvlad,Updated license for last master,1,[],https://github.com/libtom/libtomcrypt/pull/570,https://github.com/tyzoid,4,https://github.com/libtom/libtomcrypt/pull/570#issuecomment-989336353,"Since the license was updated on develop and since there was no release for some time already, it would be nice if the latest master had this new license as well.","Closing for now, unless another contributor wants to take this up. Given this change is already in the develop branch, the primary branch would likely follow once a release is put together.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,575,2021-12-03T05:07:13Z,,2021-12-25T14:55:50Z,OPEN,False,325,0,3,https://github.com/cntrump,Add SwiftPM support,6,[],https://github.com/libtom/libtomcrypt/pull/575,https://github.com/cntrump,1,https://github.com/libtom/libtomcrypt/pull/575,"Checklist

 documentation is added or updated
 tests are added or updated

Build library with libtommath:
swift build

Run Swift Unit tests:
swift test","Checklist

 documentation is added or updated
 tests are added or updated

Build library with libtommath:
swift build

Run Swift Unit tests:
swift test",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,575,2021-12-03T05:07:13Z,,2021-12-25T14:55:50Z,OPEN,False,325,0,3,https://github.com/cntrump,Add SwiftPM support,6,[],https://github.com/libtom/libtomcrypt/pull/575,https://github.com/cntrump,2,https://github.com/libtom/libtomcrypt/pull/575#issuecomment-985221049,"Checklist

 documentation is added or updated
 tests are added or updated

Build library with libtommath:
swift build

Run Swift Unit tests:
swift test",Depend on libtom/libtommath#518,True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,584,2022-01-21T12:47:55Z,2022-03-16T19:52:33Z,2022-03-16T19:52:34Z,MERGED,True,464,327,44,https://github.com/sjaeckel,Clean-up & minor improvements,17,[],https://github.com/libtom/libtomcrypt/pull/584,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/584,"This cleans up multiple minor things, fixes some issues and adds some minor functionality.
Please check the commit log for details.","This cleans up multiple minor things, fixes some issues and adds some minor functionality.
Please check the commit log for details.",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,586,2022-02-21T08:56:38Z,,2022-02-21T08:56:38Z,OPEN,False,785,2,5,https://github.com/mrpelotazo,Feature/cmake support,35,[],https://github.com/libtom/libtomcrypt/pull/586,https://github.com/mrpelotazo,1,https://github.com/libtom/libtomcrypt/pull/586,"Adds cmake support

build static/shared lib (configurable via BUILD_SHARED_LIBS)
cmake package generation to be used by other projects via find_package
project sources update via helper.pl
possibility to generate deb/rpm packages","Adds cmake support

build static/shared lib (configurable via BUILD_SHARED_LIBS)
cmake package generation to be used by other projects via find_package
project sources update via helper.pl
possibility to generate deb/rpm packages",True,{'THUMBS_UP': ['https://github.com/oetken']}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,587,2022-03-16T20:24:31Z,,2022-03-28T13:27:49Z,OPEN,False,3199,645,101,https://github.com/sjaeckel,Add PEM support,27,[],https://github.com/libtom/libtomcrypt/pull/587,https://github.com/sjaeckel,1,https://github.com/libtom/libtomcrypt/pull/587,"Checklist

 documentation is added or updated
 tests are added or updated

Summary
This adds support to decode most variations of PEM files.
Changes to existing public API's
The following public APIs have been changed. None of those APIs have been officially released.

ed25519_import_pkcs8()
ecc_import_pkcs8()
rsa_import_pkcs8()
x25519_import_pkcs8()

New public API's and structs


typedef struct password_ctx - a struct containing a call-back function that will be called once a password is required and the according opaque userdata pointer usually provided


typedef struct ltc_pka_key - a union containing all supported PK keys


dh_import_pkcs8()


dsa_import_pkcs8()


pem_decode()


pem_decode_filehandle()


pem_decode_openssh()


pem_decode_openssh_filehandle()


New demos

openssh-privkey - not really a usable demo, more like a historical artifact of what this started from

Details
It brings support for:

OpenSSH style private key storage, both plain and encrypted
OpenSSL style private key storage, both plain and encrypted
PKCS#8 encrypted private key storage, both plain and encrypted

All supported PK crypto algorithms can be decoded:

Curve25519 (Ed25519 & X25519)
DH
DSA
ECC
RSA","Checklist

 documentation is added or updated
 tests are added or updated

Summary
This adds support to decode most variations of PEM files.
Changes to existing public API's
The following public APIs have been changed. None of those APIs have been officially released.

ed25519_import_pkcs8()
ecc_import_pkcs8()
rsa_import_pkcs8()
x25519_import_pkcs8()

New public API's and structs


typedef struct password_ctx - a struct containing a call-back function that will be called once a password is required and the according opaque userdata pointer usually provided


typedef struct ltc_pka_key - a union containing all supported PK keys


dh_import_pkcs8()


dsa_import_pkcs8()


pem_decode()


pem_decode_filehandle()


pem_decode_openssh()


pem_decode_openssh_filehandle()


New demos

openssh-privkey - not really a usable demo, more like a historical artifact of what this started from

Details
It brings support for:

OpenSSH style private key storage, both plain and encrypted
OpenSSL style private key storage, both plain and encrypted
PKCS#8 encrypted private key storage, both plain and encrypted

All supported PK crypto algorithms can be decoded:

Curve25519 (Ed25519 & X25519)
DH
DSA
ECC
RSA",True,{}
libtom/libtomcrypt,https://github.com/libtom/libtomcrypt,588,2022-03-16T23:38:47Z,,2022-03-16T23:40:40Z,OPEN,False,482,6,3,https://github.com/assarbad,"Adding premake4.lua, minor adjustments",1,[],https://github.com/libtom/libtomcrypt/pull/588,https://github.com/assarbad,1,https://github.com/libtom/libtomcrypt/pull/588,"The premake4.lua was superficially tested for now
Spelling fix in tomcrypt_cfg.h
Using my changes to libtommath as template to fix up rng_get_bytes.c

This is just a draft at this point, I'll further hone this. But this way people can see and use it in its preliminary state.
NB: companion issue to this one: libtommath#525","The premake4.lua was superficially tested for now
Spelling fix in tomcrypt_cfg.h
Using my changes to libtommath as template to fix up rng_get_bytes.c

This is just a draft at this point, I'll further hone this. But this way people can see and use it in its preliminary state.
NB: companion issue to this one: libtommath#525",True,{}
