cossacklabs/themis,https://github.com/cossacklabs/themis,97,2016-01-21T14:37:46Z,2016-01-21T14:37:53Z,2016-01-21T14:37:53Z,MERGED,True,106,2,7,https://github.com/mnaza,Add jsthemis examples. Close #88,1,[],https://github.com/cossacklabs/themis/pull/97,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/97,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,99,2016-03-11T13:29:50Z,2016-03-11T13:54:58Z,2016-03-11T13:54:58Z,MERGED,True,1104,36,14,https://github.com/ignatk,Go wrapper for Themis,9,[],https://github.com/cossacklabs/themis/pull/99,https://github.com/ignatk,1,https://github.com/cossacklabs/themis/pull/99,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,103,2016-03-30T16:04:14Z,2016-03-30T16:06:10Z,2016-03-30T16:06:10Z,MERGED,True,9,6,13,https://github.com/ignatk,Make gothemis go get-able,3,[],https://github.com/cossacklabs/themis/pull/103,https://github.com/ignatk,1,https://github.com/cossacklabs/themis/pull/103,"Go does not provide its package manager. Instead it allows users to easily get code from ""well-known"" locations, such as GitHub using ""go get "". However, it makes certain assumptions as for code layout. This PR reorganizes gothemis code for best user experience for Go programmers by allowing them to ""go get"" the code.","Go does not provide its package manager. Instead it allows users to easily get code from ""well-known"" locations, such as GitHub using ""go get "". However, it makes certain assumptions as for code layout. This PR reorganizes gothemis code for best user experience for Go programmers by allowing them to ""go get"" the code.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,104,2016-04-01T13:44:16Z,2016-04-01T13:54:22Z,2016-04-01T13:54:22Z,MERGED,True,22,12,4,https://github.com/ignatk,gothemis: make constructors for cell and message,1,[],https://github.com/cossacklabs/themis/pull/104,https://github.com/ignatk,1,https://github.com/cossacklabs/themis/pull/104,Some struct members in message and cell are private and not visible outside of package. Constructors provide APIs for external callers to create these objects.,Some struct members in message and cell are private and not visible outside of package. Constructors provide APIs for external callers to create these objects.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,105,2016-04-13T09:41:54Z,2016-04-13T10:38:56Z,2016-04-13T10:38:57Z,MERGED,True,165,2,5,https://github.com/mnaza,secure comparator C++ wrapper,3,[],https://github.com/cossacklabs/themis/pull/105,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/105,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,105,2016-04-13T09:41:54Z,2016-04-13T10:38:56Z,2016-04-13T10:38:57Z,MERGED,True,165,2,5,https://github.com/mnaza,secure comparator C++ wrapper,3,[],https://github.com/cossacklabs/themis/pull/105,https://github.com/ignatk,2,https://github.com/cossacklabs/themis/pull/105#issuecomment-209341028,,Would be great to have some tests for this,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,105,2016-04-13T09:41:54Z,2016-04-13T10:38:56Z,2016-04-13T10:38:57Z,MERGED,True,165,2,5,https://github.com/mnaza,secure comparator C++ wrapper,3,[],https://github.com/cossacklabs/themis/pull/105,https://github.com/mnaza,3,https://github.com/cossacklabs/themis/pull/105#issuecomment-209358853,,add tests,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,107,2016-04-17T23:25:01Z,2016-04-17T23:25:58Z,2016-04-17T23:26:05Z,MERGED,True,1015,5,17,https://github.com/vixentael,update objc example; add swift example,7,[],https://github.com/cossacklabs/themis/pull/107,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/107,solve #58,solve #58,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,108,2016-04-18T00:02:47Z,2016-04-18T00:02:57Z,2016-04-18T00:03:27Z,MERGED,True,34,34,2,https://github.com/vixentael,fix typos in objc/swift examples,1,[],https://github.com/cossacklabs/themis/pull/108,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/108,just fixed typos. what could possibly go wrong? :D,just fixed typos. what could possibly go wrong? :D,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,109,2016-04-18T22:45:54Z,2016-04-18T22:46:22Z,2016-04-18T22:46:36Z,MERGED,True,1,0,1,https://github.com/vixentael,[fix] add import of ssession to objcthemis main header,1,[],https://github.com/cossacklabs/themis/pull/109,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/109,working on secure session examples,working on secure session examples,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,110,2016-04-20T00:29:27Z,2016-04-20T00:29:32Z,2016-04-20T01:00:25Z,MERGED,True,1046,8,17,https://github.com/vixentael,[add] Themis Server Swift example,4,[],https://github.com/cossacklabs/themis/pull/110,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/110,"Working with Themis Server examples: small updates for ObjC one, and written Swift one.
Add small ReadMe's.
Solving #58","Working with Themis Server examples: small updates for ObjC one, and written Swift one.
Add small ReadMe's.
Solving #58",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,111,2016-04-22T14:45:25Z,2016-04-26T14:00:30Z,2016-04-26T14:00:30Z,MERGED,True,251,0,2,https://github.com/Lagovas,add examples for themis server with golang,1,[],https://github.com/cossacklabs/themis/pull/111,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/111,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,113,2016-04-25T16:57:59Z,2016-04-25T20:08:29Z,2016-04-25T20:08:29Z,MERGED,True,87,42,4,https://github.com/ignatk,Fix gothemis for Go 1.6,2,[],https://github.com/cossacklabs/themis/pull/113,https://github.com/ignatk,1,https://github.com/cossacklabs/themis/pull/113,Should handle #112,Should handle #112,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,114,2016-05-12T13:57:49Z,2016-05-13T14:26:31Z,2016-05-13T14:26:31Z,MERGED,True,188,80,6,https://github.com/mnaza,Add makefile verbosity,2,[],https://github.com/cossacklabs/themis/pull/114,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/114,output of make:,output of make:,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,115,2016-05-13T14:26:06Z,2016-05-13T14:26:38Z,2016-11-15T08:36:41Z,MERGED,True,193,221,24,https://github.com/mnaza,Make exceptions ad errors consistent,3,[],https://github.com/cossacklabs/themis/pull/115,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/115,Closed #63,Closed #63,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,116,2016-05-13T15:07:35Z,2016-05-15T21:21:08Z,2016-05-15T21:21:08Z,MERGED,True,10,8,1,https://github.com/mnaza,Fix #102,3,[],https://github.com/cossacklabs/themis/pull/116,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/116,Fix #102,Fix #102,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,120,2016-05-24T16:46:31Z,2016-05-24T16:48:40Z,2016-05-24T16:48:40Z,MERGED,True,40,0,3,https://github.com/ignatk,Add themis jni to build system for plain Java support,2,[],https://github.com/cossacklabs/themis/pull/120,https://github.com/ignatk,1,https://github.com/cossacklabs/themis/pull/120,Prerequisite for #117,Prerequisite for #117,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,121,2016-05-24T18:00:28Z,2016-05-24T18:02:45Z,2016-05-24T18:02:45Z,MERGED,True,1,4,1,https://github.com/ignatk,Fix Circle CI build,2,[],https://github.com/cossacklabs/themis/pull/121,https://github.com/ignatk,1,https://github.com/cossacklabs/themis/pull/121,"Circle CI has weird config: if you use Java there as advertised to compile JNI code, it fails by not finding some specific headers (related to incorrect JAVA_HOME environment). However, if you override it globally, Android fails to run. So we override it only for on JNI library compile.","Circle CI has weird config: if you use Java there as advertised to compile JNI code, it fails by not finding some specific headers (related to incorrect JAVA_HOME environment). However, if you override it globally, Android fails to run. So we override it only for on JNI library compile.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,122,2016-06-21T15:27:24Z,2016-06-21T15:43:14Z,2016-06-21T15:43:14Z,MERGED,True,115,102,2,https://github.com/Lagovas,add updating state and public method GetState,1,[],https://github.com/cossacklabs/themis/pull/122,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/122,"updated onStateChanged method, added public GetState method and passed through go fmt","updated onStateChanged method, added public GetState method and passed through go fmt",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,125,2016-08-22T21:56:56Z,2016-08-22T22:17:21Z,2016-08-22T22:51:20Z,MERGED,True,2,1,1,https://github.com/bryonglodencissp,fix the memory leaks,1,[],https://github.com/cossacklabs/themis/pull/125,https://github.com/bryonglodencissp,1,https://github.com/cossacklabs/themis/pull/125,"On line no. 98 of 'themis_secure_cell.c' there is a memory leak, which is a bug
Found by https://github.com/bryongloden/cppcheck.","On line no. 98 of 'themis_secure_cell.c' there is a memory leak, which is a bug
Found by https://github.com/bryongloden/cppcheck.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,125,2016-08-22T21:56:56Z,2016-08-22T22:17:21Z,2016-08-22T22:51:20Z,MERGED,True,2,1,1,https://github.com/bryonglodencissp,fix the memory leaks,1,[],https://github.com/cossacklabs/themis/pull/125,https://github.com/ignatk,2,https://github.com/cossacklabs/themis/pull/125#issuecomment-241568402,"On line no. 98 of 'themis_secure_cell.c' there is a memory leak, which is a bug
Found by https://github.com/bryongloden/cppcheck.","Confirmed, thank you. This code, however, is from our test suite and not part of the library itself, so it is not a security issue here.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,125,2016-08-22T21:56:56Z,2016-08-22T22:17:21Z,2016-08-22T22:51:20Z,MERGED,True,2,1,1,https://github.com/bryonglodencissp,fix the memory leaks,1,[],https://github.com/cossacklabs/themis/pull/125,https://github.com/bryonglodencissp,3,https://github.com/cossacklabs/themis/pull/125#issuecomment-241569854,"On line no. 98 of 'themis_secure_cell.c' there is a memory leak, which is a bug
Found by https://github.com/bryongloden/cppcheck.","Greetings @secumod. Copy that. What would be more appropriate here? ..., which is a bug? I've found a few of these and I just started called them security bugs. Each case is different, but I'm okay with calling a memory leak a bug (and not a security bug). Thanks again.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,125,2016-08-22T21:56:56Z,2016-08-22T22:17:21Z,2016-08-22T22:51:20Z,MERGED,True,2,1,1,https://github.com/bryonglodencissp,fix the memory leaks,1,[],https://github.com/cossacklabs/themis/pull/125,https://github.com/ignatk,4,https://github.com/cossacklabs/themis/pull/125#issuecomment-241572410,"On line no. 98 of 'themis_secure_cell.c' there is a memory leak, which is a bug
Found by https://github.com/bryongloden/cppcheck.","I guess it all depends on the context of the bug/leak. Some leaks may cause security issues, some do not. This specific leak does not cause a security issue as it is not part of the library, but a test program we use in CI (so it is not part of the production code which Themis end-users will have).
If you found other leaks, they may lead to security issues, but again it all depends on the context of the bug/leak. Please, submit your findings and we will happily review them.
And thanks again for your effort and contribution.",True,{'THUMBS_UP': ['https://github.com/bryonglodencissp']}
cossacklabs/themis,https://github.com/cossacklabs/themis,126,2016-08-22T23:28:28Z,2016-08-24T21:21:03Z,2016-08-24T21:21:03Z,MERGED,True,3,3,1,https://github.com/bryonglodencissp,fix memory leak & uninitialized var,2,[],https://github.com/cossacklabs/themis/pull/126,https://github.com/bryonglodencissp,1,https://github.com/cossacklabs/themis/pull/126,"On line no. 53 of 'themis_seccure_message.c' the variable 'themis_status_t' is uninitialized. It's always good to initialize variables, because if you try to retrieve a value before it gets assigned any actual (non-garbage) value, then it results in undefined behavior.
On line no. 105 of 'themis_seccure_message.c' there is a memory leak, which is a non-security bug.
Found by https://github.com/bryongloden/cppcheck","On line no. 53 of 'themis_seccure_message.c' the variable 'themis_status_t' is uninitialized. It's always good to initialize variables, because if you try to retrieve a value before it gets assigned any actual (non-garbage) value, then it results in undefined behavior.
On line no. 105 of 'themis_seccure_message.c' there is a memory leak, which is a non-security bug.
Found by https://github.com/bryongloden/cppcheck",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,129,2016-08-24T14:23:42Z,2016-08-24T14:35:40Z,2016-08-24T14:35:46Z,MERGED,True,47,43,5,https://github.com/vixentael,Themis podspec update,2,[],https://github.com/cossacklabs/themis/pull/129,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/129,"Fixing themis.podspec (OpenSSL as static lib + update headers)
Fix #127","Fixing themis.podspec (OpenSSL as static lib + update headers)
Fix #127",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,131,2016-08-25T11:48:31Z,2016-09-04T13:28:29Z,2016-09-04T13:28:29Z,MERGED,True,3095,38,38,https://github.com/mnaza,Add boringssl support,15,[],https://github.com/cossacklabs/themis/pull/131,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/131,tested with head of chromium-stable branch of boringssl,tested with head of chromium-stable branch of boringssl,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,132,2016-08-27T11:13:06Z,2016-09-04T13:51:14Z,2016-09-04T13:51:14Z,MERGED,True,39,309697,1284,https://github.com/mnaza,for #130; correct jsthemis && remove splint,1,[],https://github.com/cossacklabs/themis/pull/132,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/132,for #130; correct jsthemis && remove splint,for #130; correct jsthemis && remove splint,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,134,2016-09-05T10:14:39Z,2016-10-03T16:55:54Z,2016-10-03T16:55:54Z,MERGED,True,43,38,1,https://github.com/Lagovas,error message in unwrap mode,1,[],https://github.com/cossacklabs/themis/pull/134,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/134,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,135,2016-10-06T09:53:34Z,2016-10-06T09:56:57Z,2016-10-06T09:56:57Z,MERGED,True,5,2,2,https://github.com/mnaza,Add declarations of callback functions fot Secure Session in gothemis,4,[],https://github.com/cossacklabs/themis/pull/135,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/135,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,136,2016-10-07T11:36:48Z,2016-10-10T06:19:26Z,2016-10-10T06:19:26Z,MERGED,True,384,0,7,https://github.com/mnaza,Close #119,2,[],https://github.com/cossacklabs/themis/pull/136,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/136,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,137,2016-10-08T10:02:30Z,2016-10-10T06:18:17Z,2016-10-10T06:18:17Z,MERGED,True,308,345,17,https://github.com/mnaza,"Rewrite jsthemis to use Nan, for building by any node.js version > 0.10",5,[],https://github.com/cossacklabs/themis/pull/137,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/137,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,138,2016-10-10T11:32:22Z,2016-10-15T18:11:41Z,2016-10-16T12:16:54Z,MERGED,True,1,72,16,https://github.com/mnaza,Comparator to mainline,2,[],https://github.com/cossacklabs/themis/pull/138,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/138,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,139,2016-10-10T11:35:40Z,2016-10-10T11:36:34Z,2016-10-10T11:36:37Z,MERGED,True,258,1,5,https://github.com/mnaza,Add secure comparator to JSThemis,3,[],https://github.com/cossacklabs/themis/pull/139,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/139,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,140,2016-10-10T12:11:49Z,2016-10-26T10:05:19Z,2016-10-26T10:05:19Z,MERGED,True,278,92,11,https://github.com/mnaza,Add go && js examples for secure comparator,2,[],https://github.com/cossacklabs/themis/pull/140,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/140,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,140,2016-10-10T12:11:49Z,2016-10-26T10:05:19Z,2016-10-26T10:05:19Z,MERGED,True,278,92,11,https://github.com/mnaza,Add go && js examples for secure comparator,2,[],https://github.com/cossacklabs/themis/pull/140,https://github.com/ignatk,2,https://github.com/cossacklabs/themis/pull/140#issuecomment-254001153,,"Please, run go fmt on *.go files",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,140,2016-10-10T12:11:49Z,2016-10-26T10:05:19Z,2016-10-26T10:05:19Z,MERGED,True,278,92,11,https://github.com/mnaza,Add go && js examples for secure comparator,2,[],https://github.com/cossacklabs/themis/pull/140,https://github.com/mnaza,3,https://github.com/cossacklabs/themis/pull/140#issuecomment-254040514,,Done,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,140,2016-10-10T12:11:49Z,2016-10-26T10:05:19Z,2016-10-26T10:05:19Z,MERGED,True,278,92,11,https://github.com/mnaza,Add go && js examples for secure comparator,2,[],https://github.com/cossacklabs/themis/pull/140,https://github.com/gene-eu-zz,4,https://github.com/cossacklabs/themis/pull/140#issuecomment-255743687,,... and?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,143,2016-10-21T13:21:27Z,2016-10-24T13:43:53Z,2016-10-24T13:43:54Z,MERGED,True,401,158,31,https://github.com/mnaza,some memory usage update ,4,[],https://github.com/cossacklabs/themis/pull/143,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/143,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,144,2016-10-29T12:23:19Z,2016-11-06T21:18:59Z,2016-11-06T21:33:55Z,CLOSED,False,17,28,3,https://github.com/valeriyvan,Minor fixes in SwiftThemisServerExample,2,[],https://github.com/cossacklabs/themis/pull/144,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/144,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,144,2016-10-29T12:23:19Z,2016-11-06T21:18:59Z,2016-11-06T21:33:55Z,CLOSED,False,17,28,3,https://github.com/valeriyvan,Minor fixes in SwiftThemisServerExample,2,[],https://github.com/cossacklabs/themis/pull/144,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/144#issuecomment-257097199,,"Thank you for the PR!
Can you specify please the Swift version you used for these changes? I'm not able to compile your changes using Xcode 8.0 and Swift 2.3
However, we're planning to migrate to Swift 3.0 soon :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,144,2016-10-29T12:23:19Z,2016-11-06T21:18:59Z,2016-11-06T21:33:55Z,CLOSED,False,17,28,3,https://github.com/valeriyvan,Minor fixes in SwiftThemisServerExample,2,[],https://github.com/cossacklabs/themis/pull/144,https://github.com/valeriyvan,3,https://github.com/cossacklabs/themis/pull/144#issuecomment-257106685,,"Can you specify please the Swift version you used for these changes?
Trailing block syntax is in Swift at least since day it was presented publicly.
I'm not able to compile your changes using Xcode 8.0 and Swift 2.3
No, xcode 8 will not compile this code as it is. Not because of PR.
Try xcode 7.3.1.
However, we're planning to migrate to Swift 3.0 soon :)
Now you see it's time to do it.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,144,2016-10-29T12:23:19Z,2016-11-06T21:18:59Z,2016-11-06T21:33:55Z,CLOSED,False,17,28,3,https://github.com/valeriyvan,Minor fixes in SwiftThemisServerExample,2,[],https://github.com/cossacklabs/themis/pull/144,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/144#issuecomment-257191344,,"Thank you, I'll take a look!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,144,2016-10-29T12:23:19Z,2016-11-06T21:18:59Z,2016-11-06T21:33:55Z,CLOSED,False,17,28,3,https://github.com/valeriyvan,Minor fixes in SwiftThemisServerExample,2,[],https://github.com/cossacklabs/themis/pull/144,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/144#issuecomment-258711501,,"Thank you, these changes now are part of #148",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,146,2016-10-31T06:52:41Z,2016-10-31T09:58:49Z,2016-10-31T09:58:49Z,MERGED,True,39,558249,1250,https://github.com/mnaza,migrate themis for Android to boringssl,7,[],https://github.com/cossacklabs/themis/pull/146,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/146,Close #133,Close #133,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,146,2016-10-31T06:52:41Z,2016-10-31T09:58:49Z,2016-10-31T09:58:49Z,MERGED,True,39,558249,1250,https://github.com/mnaza,migrate themis for Android to boringssl,7,[],https://github.com/cossacklabs/themis/pull/146,https://github.com/ignatk,2,https://github.com/cossacklabs/themis/pull/146#issuecomment-257254226,Close #133,Thanks @mnaza,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,146,2016-10-31T06:52:41Z,2016-10-31T09:58:49Z,2016-10-31T09:58:49Z,MERGED,True,39,558249,1250,https://github.com/mnaza,migrate themis for Android to boringssl,7,[],https://github.com/cossacklabs/themis/pull/146,https://github.com/ignatk,3,https://github.com/cossacklabs/themis/pull/146#issuecomment-257254496,Close #133,Thanks @mnaza,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,147,2016-11-06T19:16:02Z,2016-11-06T19:29:25Z,2016-11-06T19:54:05Z,MERGED,True,12,0,10,https://github.com/vixentael,Soter fixes,2,['core'],https://github.com/cossacklabs/themis/pull/147,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/147,Add more imports inside soter files. Because otherwise iOS wrapper can't be built.,Add more imports inside soter files. Because otherwise iOS wrapper can't be built.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,147,2016-11-06T19:16:02Z,2016-11-06T19:29:25Z,2016-11-06T19:54:05Z,MERGED,True,12,0,10,https://github.com/vixentael,Soter fixes,2,['core'],https://github.com/cossacklabs/themis/pull/147,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/147#issuecomment-258704050,Add more imports inside soter files. Because otherwise iOS wrapper can't be built.,"@mnaza I've merged this PR, just take a look if it's ok to you.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,148,2016-11-06T21:17:20Z,2016-11-06T21:28:41Z,2016-11-06T21:28:43Z,MERGED,True,506,335,20,https://github.com/vixentael,Feature/examples update,4,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/148,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/148,"Update Themis Server examples.
Update Themis Server Swift example to use Swift3 🎉.
Including changes from #144 (thank you @valeriyvan!)","Update Themis Server examples.
Update Themis Server Swift example to use Swift3 🎉.
Including changes from #144 (thank you @valeriyvan!)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,149,2016-11-06T22:08:31Z,2016-11-06T23:02:14Z,2016-11-07T09:42:46Z,MERGED,True,16,16,1,https://github.com/valeriyvan,Changes String.Encoding.utf8 for .utf8,1,[],https://github.com/cossacklabs/themis/pull/149,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/149,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,149,2016-11-06T22:08:31Z,2016-11-06T23:02:14Z,2016-11-07T09:42:46Z,MERGED,True,16,16,1,https://github.com/valeriyvan,Changes String.Encoding.utf8 for .utf8,1,[],https://github.com/cossacklabs/themis/pull/149,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/149#issuecomment-258718240,,"thank you, @valeriyvan",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,150,2016-11-06T22:31:28Z,2016-11-06T23:08:12Z,2016-11-07T09:42:44Z,CLOSED,False,67,67,1,https://github.com/valeriyvan,Removes excessive type annotations in variable and constant declarations.,1,[],https://github.com/cossacklabs/themis/pull/150,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/150,"Type inference cool Swift feature!
Quote from Swift docs:
Type inference enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide.
Because of type inference, Swift requires far fewer type declarations than languages such as C or Objective-C. Constants and variables are still explicitly typed, but much of the work of specifying their type is done for you.
Type inference is particularly useful when you declare a constant or variable with an initial value.","Type inference cool Swift feature!
Quote from Swift docs:
Type inference enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide.
Because of type inference, Swift requires far fewer type declarations than languages such as C or Objective-C. Constants and variables are still explicitly typed, but much of the work of specifying their type is done for you.
Type inference is particularly useful when you declare a constant or variable with an initial value.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,150,2016-11-06T22:31:28Z,2016-11-06T23:08:12Z,2016-11-07T09:42:44Z,CLOSED,False,67,67,1,https://github.com/valeriyvan,Removes excessive type annotations in variable and constant declarations.,1,[],https://github.com/cossacklabs/themis/pull/150,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/150#issuecomment-258718591,"Type inference cool Swift feature!
Quote from Swift docs:
Type inference enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide.
Because of type inference, Swift requires far fewer type declarations than languages such as C or Objective-C. Constants and variables are still explicitly typed, but much of the work of specifying their type is done for you.
Type inference is particularly useful when you declare a constant or variable with an initial value.","Thank you @valeriyvan. Your PR makes code shorter.
However, we prefer explicit types, because type inferences is known to slow build time.
https://thatthinginswift.com/debug-long-compile-times-swift/
https://spin.atomicobject.com/2016/04/26/swift-long-compile-time/",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,150,2016-11-06T22:31:28Z,2016-11-06T23:08:12Z,2016-11-07T09:42:44Z,CLOSED,False,67,67,1,https://github.com/valeriyvan,Removes excessive type annotations in variable and constant declarations.,1,[],https://github.com/cossacklabs/themis/pull/150,https://github.com/valeriyvan,3,https://github.com/cossacklabs/themis/pull/150#issuecomment-258781346,"Type inference cool Swift feature!
Quote from Swift docs:
Type inference enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide.
Because of type inference, Swift requires far fewer type declarations than languages such as C or Objective-C. Constants and variables are still explicitly typed, but much of the work of specifying their type is done for you.
Type inference is particularly useful when you declare a constant or variable with an initial value.","It's kind of legend like 'Java is slow'.
Article you refer to is about Swift 2.2.
You would like not to use inferences, great feature, despite your code is not affected by this slowdown in any way.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,151,2016-11-06T23:08:34Z,2016-11-07T06:56:46Z,2016-11-07T09:42:40Z,MERGED,True,23,11,2,https://github.com/valeriyvan,Adds check for malloc result. Removes excessive data copying.,2,"['O-iOS :iphone:', 'waiting for approve']",https://github.com/cossacklabs/themis/pull/151,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/151,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,151,2016-11-06T23:08:34Z,2016-11-07T06:56:46Z,2016-11-07T09:42:40Z,MERGED,True,23,11,2,https://github.com/valeriyvan,Adds check for malloc result. Removes excessive data copying.,2,"['O-iOS :iphone:', 'waiting for approve']",https://github.com/cossacklabs/themis/pull/151,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/151#issuecomment-258718684,,"@mnaza please, take a look",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,151,2016-11-06T23:08:34Z,2016-11-07T06:56:46Z,2016-11-07T09:42:40Z,MERGED,True,23,11,2,https://github.com/valeriyvan,Adds check for malloc result. Removes excessive data copying.,2,"['O-iOS :iphone:', 'waiting for approve']",https://github.com/cossacklabs/themis/pull/151,https://github.com/valeriyvan,3,https://github.com/cossacklabs/themis/pull/151#issuecomment-258719082,,"@mnaza please, take a look

I think you mean checking malloc result. Some explanation. It's C, not Objective-C. You should always expect malloc return NULL when run out of memory. And when you pass that NULL creating NSData you have crash.
Another part changing way how NSData is created is obvious, I think. +[NSData dataWithBytesNoCopy: length:] exists exact for such case when you have mallocced buffer and would like to make NSData out of it giving to NSData responsibility to free buffer on dealloc.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,151,2016-11-06T23:08:34Z,2016-11-07T06:56:46Z,2016-11-07T09:42:40Z,MERGED,True,23,11,2,https://github.com/valeriyvan,Adds check for malloc result. Removes excessive data copying.,2,"['O-iOS :iphone:', 'waiting for approve']",https://github.com/cossacklabs/themis/pull/151,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/151#issuecomment-258777150,,thank you @valeriyvan,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,153,2016-11-07T22:26:44Z,2016-11-07T23:13:08Z,2017-12-08T02:51:03Z,MERGED,True,1,1,1,https://github.com/valeriyvan,Fixes typo,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/153,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/153,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,155,2016-11-08T23:43:03Z,2016-11-09T19:54:24Z,2016-11-22T19:55:32Z,MERGED,True,1,0,1,https://github.com/valeriyvan,Fixes memory leak.,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/155,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/155,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,155,2016-11-08T23:43:03Z,2016-11-09T19:54:24Z,2016-11-22T19:55:32Z,MERGED,True,1,0,1,https://github.com/valeriyvan,Fixes memory leak.,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/155,https://github.com/mnaza,2,https://github.com/cossacklabs/themis/pull/155#issuecomment-259509535,,"Thenk You, @valeriyvan",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,156,2016-11-10T23:58:35Z,2016-11-20T21:15:05Z,2016-11-22T19:55:30Z,MERGED,True,4,4,1,https://github.com/valeriyvan,Removes useless code.,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/156,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/156,"Removes useless code which only makes illusion it's doing something useful.
If context is nill, [context bytes] will return NULL anyway, and [context length] will return 0.
So this checks just overload code and do really nothing.","Removes useless code which only makes illusion it's doing something useful.
If context is nill, [context bytes] will return NULL anyway, and [context length] will return 0.
So this checks just overload code and do really nothing.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,156,2016-11-10T23:58:35Z,2016-11-20T21:15:05Z,2016-11-22T19:55:30Z,MERGED,True,4,4,1,https://github.com/valeriyvan,Removes useless code.,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/156,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/156#issuecomment-261807365,"Removes useless code which only makes illusion it's doing something useful.
If context is nill, [context bytes] will return NULL anyway, and [context length] will return 0.
So this checks just overload code and do really nothing.",Thank you!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,157,2016-11-11T00:18:15Z,2016-11-20T20:53:06Z,2016-11-22T19:55:27Z,MERGED,True,11,11,1,https://github.com/valeriyvan,Fixes indentations in scomparator.m,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/157,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/157,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,157,2016-11-11T00:18:15Z,2016-11-20T20:53:06Z,2016-11-22T19:55:27Z,MERGED,True,11,11,1,https://github.com/valeriyvan,Fixes indentations in scomparator.m,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/157,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/157#issuecomment-261807377,,Thank you!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,158,2016-11-15T17:54:25Z,2016-11-15T18:27:07Z,2016-11-15T18:27:07Z,MERGED,True,193,195,9,https://github.com/Lagovas,Format with gofmt and fix error message,3,[],https://github.com/cossacklabs/themis/pull/158,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/158,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,159,2016-11-15T20:57:12Z,2016-11-18T16:09:07Z,2016-11-18T16:09:07Z,MERGED,True,132,28,7,https://github.com/mnaza,Gothemis parameter checks,12,[],https://github.com/cossacklabs/themis/pull/159,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/159,Add some additional checks for empty parameters passing (nil && []byte{}),Add some additional checks for empty parameters passing (nil && []byte{}),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,160,2016-11-20T21:58:04Z,2016-11-20T23:08:15Z,2016-11-22T19:55:24Z,MERGED,True,15,11,1,https://github.com/valeriyvan,Minor improvements to scell_seal.m,2,[],https://github.com/cossacklabs/themis/pull/160,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/160,"Adds check for malloc result. Removes excessive malloc inside of NSData and bytes copying.
Removes usless code which only makes illusion it's doing something usefull.","Adds check for malloc result. Removes excessive malloc inside of NSData and bytes copying.
Removes usless code which only makes illusion it's doing something usefull.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,161,2016-11-21T22:46:50Z,2016-11-22T17:13:09Z,2016-11-22T19:55:21Z,MERGED,True,1,1,1,https://github.com/valeriyvan,Returning immutable object,1,[],https://github.com/cossacklabs/themis/pull/161,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/161,In Objective-C where we too often branch by conditions similar to if [someData isKindOfClass:[NSMutableData class]] it's always does make sense from method declaring returning immutable object return not its mutable subclass but exact immutable instance as declared.,In Objective-C where we too often branch by conditions similar to if [someData isKindOfClass:[NSMutableData class]] it's always does make sense from method declaring returning immutable object return not its mutable subclass but exact immutable instance as declared.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,162,2016-11-22T17:39:27Z,2016-11-22T17:52:00Z,2016-12-12T11:15:38Z,MERGED,True,8,8,5,https://github.com/mnaza,update version number,1,[],https://github.com/cossacklabs/themis/pull/162,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/162,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,163,2016-11-22T18:17:21Z,2016-11-22T18:19:05Z,2016-11-22T20:07:39Z,MERGED,True,53,42,1,https://github.com/vixentael,Readme update,3,['enhancement'],https://github.com/cossacklabs/themis/pull/163,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/163,"Updates in ReadMe:

version update to 0.9.4
styling update (based on SwiftAlps experience)

Special thanx to @mennenia for her great design workshop and @MatejBalantic for his help & suggestions.","Updates in ReadMe:

version update to 0.9.4
styling update (based on SwiftAlps experience)

Special thanx to @mennenia for her great design workshop and @MatejBalantic for his help & suggestions.",True,{'HOORAY': ['https://github.com/mennenia']}
cossacklabs/themis,https://github.com/cossacklabs/themis,163,2016-11-22T18:17:21Z,2016-11-22T18:19:05Z,2016-11-22T20:07:39Z,MERGED,True,53,42,1,https://github.com/vixentael,Readme update,3,['enhancement'],https://github.com/cossacklabs/themis/pull/163,https://github.com/mennenia,2,https://github.com/cossacklabs/themis/pull/163#issuecomment-262351186,"Updates in ReadMe:

version update to 0.9.4
styling update (based on SwiftAlps experience)

Special thanx to @mennenia for her great design workshop and @MatejBalantic for his help & suggestions.",Yay!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,164,2016-11-22T19:59:36Z,2016-11-22T23:04:29Z,2017-12-08T02:50:59Z,MERGED,True,2,2,1,https://github.com/valeriyvan,Return immutable object,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/164,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/164,Return immutable object instead of mutable one where it's declared to return immutable.,Return immutable object instead of mutable one where it's declared to return immutable.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,164,2016-11-22T19:59:36Z,2016-11-22T23:04:29Z,2017-12-08T02:50:59Z,MERGED,True,2,2,1,https://github.com/valeriyvan,Return immutable object,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/164,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/164#issuecomment-262392597,Return immutable object instead of mutable one where it's declared to return immutable.,👍,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,165,2016-11-23T11:38:04Z,2016-11-27T20:33:28Z,2017-12-08T02:50:53Z,MERGED,True,5,5,2,https://github.com/valeriyvan, Return immutable object,1,[],https://github.com/cossacklabs/themis/pull/165,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/165,Return immutable object instead of mutable one where it's declared to return immutable.,Return immutable object instead of mutable one where it's declared to return immutable.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,165,2016-11-23T11:38:04Z,2016-11-27T20:33:28Z,2017-12-08T02:50:53Z,MERGED,True,5,5,2,https://github.com/valeriyvan, Return immutable object,1,[],https://github.com/cossacklabs/themis/pull/165,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/165#issuecomment-263145585,Return immutable object instead of mutable one where it's declared to return immutable.,thank you @valeriyvan,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,167,2016-11-24T09:08:40Z,2016-11-24T12:09:08Z,2016-11-24T12:09:08Z,MERGED,True,3,3,2,https://github.com/mnaza,Add different error code for secure session in case when get_public_k…,1,[],https://github.com/cossacklabs/themis/pull/167,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/167,…ey_by_id callback return error,…ey_by_id callback return error,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,167,2016-11-24T09:08:40Z,2016-11-24T12:09:08Z,2016-11-24T12:09:08Z,MERGED,True,3,3,2,https://github.com/mnaza,Add different error code for secure session in case when get_public_k…,1,[],https://github.com/cossacklabs/themis/pull/167,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/167#issuecomment-262757434,…ey_by_id callback return error,i think we need use this error code in gothemis session.go and return explicit error on session.unwrap when it was occured from callback,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,168,2016-11-24T10:04:47Z,2016-11-24T11:55:02Z,2016-12-12T11:15:33Z,MERGED,True,18,5,6,https://github.com/mnaza,Custom gothemis error,4,[],https://github.com/cossacklabs/themis/pull/168,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/168,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,168,2016-11-24T10:04:47Z,2016-11-24T11:55:02Z,2016-12-12T11:15:33Z,MERGED,True,18,5,6,https://github.com/mnaza,Custom gothemis error,4,[],https://github.com/cossacklabs/themis/pull/168,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/168#issuecomment-262758489,,now we should use this in our golang wrapper and return ThemisError instead errors.New,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,169,2016-11-24T12:45:30Z,2016-11-24T13:02:26Z,2016-11-24T13:02:26Z,MERGED,True,16,1,2,https://github.com/mnaza,Add custom error type in gothemis for callbacks errors,1,[],https://github.com/cossacklabs/themis/pull/169,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/169,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,173,2016-12-08T08:57:26Z,2016-12-12T11:12:52Z,2016-12-12T11:12:52Z,MERGED,True,14,16,2,https://github.com/mnaza,Unify gothemis tests,1,[],https://github.com/cossacklabs/themis/pull/173,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/173,Close #172,Close #172,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,173,2016-12-08T08:57:26Z,2016-12-12T11:12:52Z,2016-12-12T11:12:52Z,MERGED,True,14,16,2,https://github.com/mnaza,Unify gothemis tests,1,[],https://github.com/cossacklabs/themis/pull/173,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/173#issuecomment-266025043,Close #172,"@mnaza, why you decide drop absolute imports and use package namespace in tests?
i think absolute imports good, when you want to be sure that used only public interface in tests. it's good when you write code long time, you can forget export some function to public interface and test package with assumption that this function is available, using private function. its good for functional tests, when compiler will check it for you.
but using package namespace in tests allow to test private functions
on my opinion in your commit tests are more functional than unittests...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,173,2016-12-08T08:57:26Z,2016-12-12T11:12:52Z,2016-12-12T11:12:52Z,MERGED,True,14,16,2,https://github.com/mnaza,Unify gothemis tests,1,[],https://github.com/cossacklabs/themis/pull/173,https://github.com/mnaza,3,https://github.com/cossacklabs/themis/pull/173#issuecomment-266399738,Close #172,"As I can see: in different projects using different approaches, but IMHO in general case unittest must have access to private functions (interfaces) for more detail tests if necessary.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,174,2016-12-19T14:13:00Z,2016-12-19T14:19:11Z,2016-12-19T14:19:11Z,MERGED,True,86,5,6,https://github.com/mnaza,Add secure session test for phpthemis,5,[],https://github.com/cossacklabs/themis/pull/174,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/174,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,174,2016-12-19T14:13:00Z,2016-12-19T14:19:11Z,2016-12-19T14:19:11Z,MERGED,True,86,5,6,https://github.com/mnaza,Add secure session test for phpthemis,5,[],https://github.com/cossacklabs/themis/pull/174,https://github.com/mnaza,2,https://github.com/cossacklabs/themis/pull/174#issuecomment-267973389,,for #170,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,183,2017-01-30T07:27:22Z,2017-01-30T14:32:48Z,2017-01-30T14:32:48Z,MERGED,True,82,310,14,https://github.com/mnaza,"Tests correction: add coveralls.io support, add memory usage test by valgrind",23,[],https://github.com/cossacklabs/themis/pull/183,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/183,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,187,2017-02-02T17:07:58Z,2017-02-02T17:37:21Z,2017-02-02T17:37:21Z,MERGED,True,1229,699,33,https://github.com/Lagovas,pep8 refactoring for pythemis,16,[],https://github.com/cossacklabs/themis/pull/187,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/187,"refactored pythemis and examples, added some useful methods to SComparator and SSession, added deprecation warnings for old class names (old names saved for backward compatibility), also updated examples with new names usage
#185","refactored pythemis and examples, added some useful methods to SComparator and SSession, added deprecation warnings for old class names (old names saved for backward compatibility), also updated examples with new names usage
#185",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,188,2017-02-03T15:53:06Z,2017-02-03T16:05:15Z,2017-02-03T16:05:15Z,MERGED,True,231,397,6,https://github.com/Lagovas,fix and update pythemis tests,2,[],https://github.com/cossacklabs/themis/pull/188,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/188,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,189,2017-02-06T08:37:51Z,2017-02-06T10:58:30Z,2017-02-06T10:58:30Z,MERGED,True,115,121,16,https://github.com/mnaza,improve Themis crossplatform/crosslenguage error handling,13,[],https://github.com/cossacklabs/themis/pull/189,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/189,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,190,2017-02-06T16:19:28Z,2017-02-06T16:33:51Z,2017-02-06T16:33:51Z,MERGED,True,30,27,3,https://github.com/mnaza,Some Java Corrections,12,[],https://github.com/cossacklabs/themis/pull/190,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/190,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,191,2017-02-07T07:53:44Z,2017-02-07T08:02:27Z,2017-02-07T08:02:27Z,MERGED,True,1,1,1,https://github.com/mnaza,change themis_status_t to int32_t,1,[],https://github.com/cossacklabs/themis/pull/191,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/191,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,193,2017-02-16T11:41:21Z,2017-02-17T13:13:03Z,2017-02-17T13:13:03Z,CLOSED,False,164,893,18,https://github.com/mnaza,update pythemis and rubythemis wrappers versions,7,[],https://github.com/cossacklabs/themis/pull/193,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/193,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,194,2017-05-17T10:44:01Z,2017-05-17T10:46:04Z,2017-05-17T11:31:52Z,CLOSED,False,1,1,1,https://github.com/mnaza,Add magic number comment for comparator,1,[],https://github.com/cossacklabs/themis/pull/194,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/194,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,197,2017-05-18T13:41:40Z,2018-02-02T21:53:19Z,2018-02-02T21:53:19Z,MERGED,True,6935,0,45,https://github.com/mnaza,Add openssl isolated keys,4,['core'],https://github.com/cossacklabs/themis/pull/197,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/197,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,197,2017-05-18T13:41:40Z,2018-02-02T21:53:19Z,2018-02-02T21:53:19Z,MERGED,True,6935,0,45,https://github.com/mnaza,Add openssl isolated keys,4,['core'],https://github.com/cossacklabs/themis/pull/197,https://github.com/ignatk,2,https://github.com/cossacklabs/themis/pull/197#issuecomment-302407455,,Nice!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,197,2017-05-18T13:41:40Z,2018-02-02T21:53:19Z,2018-02-02T21:53:19Z,MERGED,True,6935,0,45,https://github.com/mnaza,Add openssl isolated keys,4,['core'],https://github.com/cossacklabs/themis/pull/197,https://github.com/Lagovas,3,https://github.com/cossacklabs/themis/pull/197#issuecomment-303318721,,"@mnaza you canceled build, can you rebuild?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,197,2017-05-18T13:41:40Z,2018-02-02T21:53:19Z,2018-02-02T21:53:19Z,MERGED,True,6935,0,45,https://github.com/mnaza,Add openssl isolated keys,4,['core'],https://github.com/cossacklabs/themis/pull/197,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/197#issuecomment-319125525,,"hey, team
are we going to merge this into master before 0.9.5?
what is your final decision? @mnaza
/cc @gene-eu, @storojs72",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,197,2017-05-18T13:41:40Z,2018-02-02T21:53:19Z,2018-02-02T21:53:19Z,MERGED,True,6935,0,45,https://github.com/mnaza,Add openssl isolated keys,4,['core'],https://github.com/cossacklabs/themis/pull/197,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/197#issuecomment-351386931,,This thing needs careful review :),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,197,2017-05-18T13:41:40Z,2018-02-02T21:53:19Z,2018-02-02T21:53:19Z,MERGED,True,6935,0,45,https://github.com/mnaza,Add openssl isolated keys,4,['core'],https://github.com/cossacklabs/themis/pull/197,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/197#issuecomment-362718520,,"We'll merge it to cossacklabs:keys_process_isolation branch, and update later.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,199,2017-05-21T10:11:57Z,2017-05-22T06:29:47Z,2017-05-23T05:25:00Z,MERGED,True,15,12,1,https://github.com/mnaza,Some Magic numbers correction in Comparator for #196,3,[],https://github.com/cossacklabs/themis/pull/199,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/199,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,199,2017-05-21T10:11:57Z,2017-05-22T06:29:47Z,2017-05-23T05:25:00Z,MERGED,True,15,12,1,https://github.com/mnaza,Some Magic numbers correction in Comparator for #196,3,[],https://github.com/cossacklabs/themis/pull/199,https://github.com/storojs72,2,https://github.com/cossacklabs/themis/pull/199#issuecomment-302938981,,Good. I'm waiting response from @secumod about some crypto questions and then will add useful comments to the code,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,200,2017-05-21T10:15:22Z,2017-05-23T07:51:34Z,2017-05-23T07:51:34Z,MERGED,True,174,4,5,https://github.com/mnaza,Add dist target for distribution building,8,[],https://github.com/cossacklabs/themis/pull/200,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/200,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,200,2017-05-21T10:15:22Z,2017-05-23T07:51:34Z,2017-05-23T07:51:34Z,MERGED,True,174,4,5,https://github.com/mnaza,Add dist target for distribution building,8,[],https://github.com/cossacklabs/themis/pull/200,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/200#issuecomment-303022757,,file with name pp? why so verbose?),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,200,2017-05-21T10:15:22Z,2017-05-23T07:51:34Z,2017-05-23T07:51:34Z,MERGED,True,174,4,5,https://github.com/mnaza,Add dist target for distribution building,8,[],https://github.com/cossacklabs/themis/pull/200,https://github.com/mnaza,3,https://github.com/cossacklabs/themis/pull/200#issuecomment-303022987,,Pre-processor,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,200,2017-05-21T10:15:22Z,2017-05-23T07:51:34Z,2017-05-23T07:51:34Z,MERGED,True,174,4,5,https://github.com/mnaza,Add dist target for distribution building,8,[],https://github.com/cossacklabs/themis/pull/200,https://github.com/Lagovas,4,https://github.com/cossacklabs/themis/pull/200#issuecomment-303024121,,"oh, I need extrasensory abilities to understand. what stop you to name pre_processor.sh? or just add extension .sh to show that it's script, not some binary file",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,200,2017-05-21T10:15:22Z,2017-05-23T07:51:34Z,2017-05-23T07:51:34Z,MERGED,True,174,4,5,https://github.com/mnaza,Add dist target for distribution building,8,[],https://github.com/cossacklabs/themis/pull/200,https://github.com/mnaza,5,https://github.com/cossacklabs/themis/pull/200#issuecomment-303024720,,"Agreed, for .sh, but it`s not fully preprocessor,  just pp :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,200,2017-05-21T10:15:22Z,2017-05-23T07:51:34Z,2017-05-23T07:51:34Z,MERGED,True,174,4,5,https://github.com/mnaza,Add dist target for distribution building,8,[],https://github.com/cossacklabs/themis/pull/200,https://github.com/Lagovas,6,https://github.com/cossacklabs/themis/pull/200#issuecomment-303025971,,"better to create separate folder where all files/scripts will be stored for builds and not litter root folder of repo, imho. today pp, tomorrow cc, week later -b.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,200,2017-05-21T10:15:22Z,2017-05-23T07:51:34Z,2017-05-23T07:51:34Z,MERGED,True,174,4,5,https://github.com/mnaza,Add dist target for distribution building,8,[],https://github.com/cossacklabs/themis/pull/200,https://github.com/mnaza,7,https://github.com/cossacklabs/themis/pull/200#issuecomment-303065785,,Move to separate .scripts folder,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,201,2017-05-22T08:33:28Z,2017-05-22T10:36:27Z,2017-05-23T06:15:12Z,MERGED,True,130,13,2,https://github.com/storojs72,Adding useful comments to non-trivial places in Secure Comparator,2,[],https://github.com/cossacklabs/themis/pull/201,https://github.com/storojs72,1,https://github.com/cossacklabs/themis/pull/201,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,202,2017-05-29T11:10:34Z,2017-07-03T08:08:31Z,2017-07-03T08:08:31Z,MERGED,True,78,3,4,https://github.com/mnaza,add secure_session_get_remote_id function to public interface of secure_session,7,[],https://github.com/cossacklabs/themis/pull/202,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/202,To #166,To #166,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,207,2017-06-22T13:20:46Z,2017-06-22T13:38:31Z,2017-06-22T13:38:31Z,MERGED,True,96,1,1,https://github.com/Lagovas,build deb/rpm via make + fpm,1,[],https://github.com/cossacklabs/themis/pull/207,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/207,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,209,2017-06-27T12:12:56Z,2017-06-28T04:28:44Z,2017-07-11T11:29:27Z,MERGED,True,18,10,1,https://github.com/Lagovas,add unpack_dist command to Makefile,1,[],https://github.com/cossacklabs/themis/pull/209,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/209,this command need for buildbot which will run tests in context of packed dist,this command need for buildbot which will run tests in context of packed dist,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,210,2017-06-29T12:43:35Z,2017-07-05T13:45:53Z,2017-07-11T11:29:29Z,MERGED,True,1,1,1,https://github.com/Lagovas,unify name of make command to fetch version,1,[],https://github.com/cossacklabs/themis/pull/210,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/210,it will simplify writing scripts for other our repos if all of them will use the same name of commands (make get_version dist test etc) and don't use project names in command names,it will simplify writing scripts for other our repos if all of them will use the same name of commands (make get_version dist test etc) and don't use project names in command names,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,211,2017-06-30T10:28:12Z,2017-06-30T11:12:09Z,2017-07-06T15:41:46Z,MERGED,True,6,2,1,https://github.com/vixentael,fix #205 update podspec: use correct library search path for MacOS,2,[],https://github.com/cossacklabs/themis/pull/211,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/211,link #205,link #205,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,213,2017-07-21T12:16:26Z,2017-07-21T12:16:39Z,2017-07-21T12:16:39Z,MERGED,True,109,48,1,https://github.com/Lagovas,Lagovas/update makefile,4,[],https://github.com/cossacklabs/themis/pull/213,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/213,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,216,2017-08-04T14:32:09Z,2017-08-07T07:56:35Z,2018-02-06T14:45:58Z,MERGED,True,45,38,1,https://github.com/Lagovas,use unified version of makefile,1,[],https://github.com/cossacklabs/themis/pull/216,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/216,use lsb_release instead debian_version to detect debian/stretch,use lsb_release instead debian_version to detect debian/stretch,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,217,2017-08-14T11:46:52Z,2017-08-16T15:32:39Z,2018-02-06T14:45:59Z,MERGED,True,14,6,1,https://github.com/Lagovas,add gocoveralls to circleci,13,[],https://github.com/cossacklabs/themis/pull/217,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/217,"it's for #176
@mnaza, will be great if you apply this patch on your repo and test with your circleci + coverall account because our badge from coveralls linked to your github repo","it's for #176
@mnaza, will be great if you apply this patch on your repo and test with your circleci + coverall account because our badge from coveralls linked to your github repo",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,217,2017-08-14T11:46:52Z,2017-08-16T15:32:39Z,2018-02-06T14:45:59Z,MERGED,True,14,6,1,https://github.com/Lagovas,add gocoveralls to circleci,13,[],https://github.com/cossacklabs/themis/pull/217,https://github.com/coveralls,2,https://github.com/cossacklabs/themis/pull/217#issuecomment-322510947,"it's for #176
@mnaza, will be great if you apply this patch on your repo and test with your circleci + coverall account because our badge from coveralls linked to your github repo",Changes Unknown when pulling 371b140 on Lagovas:lagovas/go-coveralls into ** on cossacklabs:master**.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,217,2017-08-14T11:46:52Z,2017-08-16T15:32:39Z,2018-02-06T14:45:59Z,MERGED,True,14,6,1,https://github.com/Lagovas,add gocoveralls to circleci,13,[],https://github.com/cossacklabs/themis/pull/217,https://github.com/coveralls,3,https://github.com/cossacklabs/themis/pull/217#issuecomment-322516881,"it's for #176
@mnaza, will be great if you apply this patch on your repo and test with your circleci + coverall account because our badge from coveralls linked to your github repo",Changes Unknown when pulling 1a9beb8 on Lagovas:lagovas/go-coveralls into ** on cossacklabs:master**.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,217,2017-08-14T11:46:52Z,2017-08-16T15:32:39Z,2018-02-06T14:45:59Z,MERGED,True,14,6,1,https://github.com/Lagovas,add gocoveralls to circleci,13,[],https://github.com/cossacklabs/themis/pull/217,https://github.com/coveralls,4,https://github.com/cossacklabs/themis/pull/217#issuecomment-322725433,"it's for #176
@mnaza, will be great if you apply this patch on your repo and test with your circleci + coverall account because our badge from coveralls linked to your github repo",Changes Unknown when pulling 1bd1d5c on Lagovas:lagovas/go-coveralls into ** on cossacklabs:master**.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,217,2017-08-14T11:46:52Z,2017-08-16T15:32:39Z,2018-02-06T14:45:59Z,MERGED,True,14,6,1,https://github.com/Lagovas,add gocoveralls to circleci,13,[],https://github.com/cossacklabs/themis/pull/217,https://github.com/coveralls,5,https://github.com/cossacklabs/themis/pull/217#issuecomment-322734817,"it's for #176
@mnaza, will be great if you apply this patch on your repo and test with your circleci + coverall account because our badge from coveralls linked to your github repo",Changes Unknown when pulling 5573115 on Lagovas:lagovas/go-coveralls into ** on cossacklabs:master**.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,217,2017-08-14T11:46:52Z,2017-08-16T15:32:39Z,2018-02-06T14:45:59Z,MERGED,True,14,6,1,https://github.com/Lagovas,add gocoveralls to circleci,13,[],https://github.com/cossacklabs/themis/pull/217,https://github.com/coveralls,6,https://github.com/cossacklabs/themis/pull/217#issuecomment-322788809,"it's for #176
@mnaza, will be great if you apply this patch on your repo and test with your circleci + coverall account because our badge from coveralls linked to your github repo",Changes Unknown when pulling 1ee1289 on Lagovas:lagovas/go-coveralls into ** on cossacklabs:master**.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,218,2017-08-14T14:13:23Z,2017-09-06T14:32:11Z,2017-09-06T14:32:11Z,CLOSED,False,65080,2407,148,https://github.com/vixentael,Using bearssl as backend provider,49,[],https://github.com/cossacklabs/themis/pull/218,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/218,"Should check carefully the changes and make sure wrappers are working as expected
#184","Should check carefully the changes and make sure wrappers are working as expected
#184",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,218,2017-08-14T14:13:23Z,2017-09-06T14:32:11Z,2017-09-06T14:32:11Z,CLOSED,False,65080,2407,148,https://github.com/vixentael,Using bearssl as backend provider,49,[],https://github.com/cossacklabs/themis/pull/218,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/218#issuecomment-327502350,"Should check carefully the changes and make sure wrappers are working as expected
#184","Closed, because this should not be merged into master.
See --> #184",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,221,2017-08-31T00:51:29Z,2017-08-31T00:52:37Z,2017-09-01T02:06:16Z,MERGED,True,70,65,5,https://github.com/vixentael,iOS: Use OpenSSL as dynamic framework in podspec,21,[],https://github.com/cossacklabs/themis/pull/221,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/221,close #128,close #128,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,224,2017-09-07T12:42:33Z,2017-09-11T11:43:43Z,2017-09-11T12:01:38Z,MERGED,True,35,6,1,https://github.com/vixentael,Fix makefile for MacOS,6,['O-macOS :computer:'],https://github.com/cossacklabs/themis/pull/224,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/224,"1. Fix missing OpenSSL headers path for MacOS.
Was:
How MacOS users should build themis now:
$ brew install openssl
$ export LDFLAGS=""-L/usr/local/opt/openssl/lib""
$ export CFLAGS=""-I/usr/local/opt/openssl/include""
$ make install

I've added path to openssl headers inside Make file, for Darwin core / MacOS only. Now users can build themis more simple:
Now:
$ brew install openssl
$ make install

2. Fix dylib building.
Was:
Error while building dylibs (themis, soter):
themis_static                  [OK]
-n link 
error: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/install_name_tool: can't open file: build/libsoter.dylib (No such file or directory)
make: *** [soter_shared] Error 1

This error cause all make install command to fail. I swapped lines: first build, then install_name_tool.
Now:
Themis builds without errors on MacOS:
$ make install
....
-n link 
themis_static                  [OK]
-n link 
soter_shared                   [OK]
-n link 
themis_shared                  [OK]
0.9.4-183-g7eaaa17
-n making dirs for install 
[OK]                         
-n install soter headers 
[OK]                         
-n install themis headers 
[OK]                         
-n install static libraries 
[OK]                         
-n install shared libraries 
[OK]

If this PR has no breaking changes for other systems, it will help solving issues like #215","1. Fix missing OpenSSL headers path for MacOS.
Was:
How MacOS users should build themis now:
$ brew install openssl
$ export LDFLAGS=""-L/usr/local/opt/openssl/lib""
$ export CFLAGS=""-I/usr/local/opt/openssl/include""
$ make install

I've added path to openssl headers inside Make file, for Darwin core / MacOS only. Now users can build themis more simple:
Now:
$ brew install openssl
$ make install

2. Fix dylib building.
Was:
Error while building dylibs (themis, soter):
themis_static                  [OK]
-n link 
error: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/install_name_tool: can't open file: build/libsoter.dylib (No such file or directory)
make: *** [soter_shared] Error 1

This error cause all make install command to fail. I swapped lines: first build, then install_name_tool.
Now:
Themis builds without errors on MacOS:
$ make install
....
-n link 
themis_static                  [OK]
-n link 
soter_shared                   [OK]
-n link 
themis_shared                  [OK]
0.9.4-183-g7eaaa17
-n making dirs for install 
[OK]                         
-n install soter headers 
[OK]                         
-n install themis headers 
[OK]                         
-n install static libraries 
[OK]                         
-n install shared libraries 
[OK]

If this PR has no breaking changes for other systems, it will help solving issues like #215",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,224,2017-09-07T12:42:33Z,2017-09-11T11:43:43Z,2017-09-11T12:01:38Z,MERGED,True,35,6,1,https://github.com/vixentael,Fix makefile for MacOS,6,['O-macOS :computer:'],https://github.com/cossacklabs/themis/pull/224,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/224#issuecomment-327837171,"1. Fix missing OpenSSL headers path for MacOS.
Was:
How MacOS users should build themis now:
$ brew install openssl
$ export LDFLAGS=""-L/usr/local/opt/openssl/lib""
$ export CFLAGS=""-I/usr/local/opt/openssl/include""
$ make install

I've added path to openssl headers inside Make file, for Darwin core / MacOS only. Now users can build themis more simple:
Now:
$ brew install openssl
$ make install

2. Fix dylib building.
Was:
Error while building dylibs (themis, soter):
themis_static                  [OK]
-n link 
error: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/install_name_tool: can't open file: build/libsoter.dylib (No such file or directory)
make: *** [soter_shared] Error 1

This error cause all make install command to fail. I swapped lines: first build, then install_name_tool.
Now:
Themis builds without errors on MacOS:
$ make install
....
-n link 
themis_static                  [OK]
-n link 
soter_shared                   [OK]
-n link 
themis_shared                  [OK]
0.9.4-183-g7eaaa17
-n making dirs for install 
[OK]                         
-n install soter headers 
[OK]                         
-n install themis headers 
[OK]                         
-n install static libraries 
[OK]                         
-n install shared libraries 
[OK]

If this PR has no breaking changes for other systems, it will help solving issues like #215","@mnaza @Lagovas update!
Now we check if brew is installed, then if openssl is installed. No absolute path anymore.
I've checked what happens if no openssl installed:

If openssl is installed via brew, making is successful.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,224,2017-09-07T12:42:33Z,2017-09-11T11:43:43Z,2017-09-11T12:01:38Z,MERGED,True,35,6,1,https://github.com/vixentael,Fix makefile for MacOS,6,['O-macOS :computer:'],https://github.com/cossacklabs/themis/pull/224,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/224#issuecomment-328504206,"1. Fix missing OpenSSL headers path for MacOS.
Was:
How MacOS users should build themis now:
$ brew install openssl
$ export LDFLAGS=""-L/usr/local/opt/openssl/lib""
$ export CFLAGS=""-I/usr/local/opt/openssl/include""
$ make install

I've added path to openssl headers inside Make file, for Darwin core / MacOS only. Now users can build themis more simple:
Now:
$ brew install openssl
$ make install

2. Fix dylib building.
Was:
Error while building dylibs (themis, soter):
themis_static                  [OK]
-n link 
error: /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/install_name_tool: can't open file: build/libsoter.dylib (No such file or directory)
make: *** [soter_shared] Error 1

This error cause all make install command to fail. I swapped lines: first build, then install_name_tool.
Now:
Themis builds without errors on MacOS:
$ make install
....
-n link 
themis_static                  [OK]
-n link 
soter_shared                   [OK]
-n link 
themis_shared                  [OK]
0.9.4-183-g7eaaa17
-n making dirs for install 
[OK]                         
-n install soter headers 
[OK]                         
-n install themis headers 
[OK]                         
-n install static libraries 
[OK]                         
-n install shared libraries 
[OK]

If this PR has no breaking changes for other systems, it will help solving issues like #215","After last edit, instead of re-define LDFLAGS and CFLAGS we use variables that allow users to define any lib/include path if they want.

If OS is MacOS and selected engine is OpenSSL/LibreSSL, then
If Brew is install and we can get OpenSSL installation path, then
Re-define CRYPTO_ENGINE_INCLUDE_PATH and CRYPTO_ENGINE_LIB_PATH.

Users are able to specify custom lib/include path via ENGINE_INCLUDE_PATH and ENGINE_LIB_PATH.
... and this PR also fixes dylib building :)
Fix for #215",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,225,2017-09-11T06:49:11Z,2017-09-11T06:49:45Z,2017-09-11T06:49:45Z,MERGED,True,2768,1472,88,https://github.com/mnaza,Update libsodium branch (with adding benchmarks tests),45,[],https://github.com/cossacklabs/themis/pull/225,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/225,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,227,2017-09-11T12:03:56Z,2017-09-11T12:04:49Z,2020-11-11T22:01:49Z,MERGED,True,86,70,8,https://github.com/vixentael,Enable bitcode for Themis iOS,3,['Bitcode 🐙'],https://github.com/cossacklabs/themis/pull/227,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/227,"Re-link podspec to 'GRKOpenSSLFramework', '1.0.1.20.4'.
Close #222","Re-link podspec to 'GRKOpenSSLFramework', '1.0.1.20.4'.
Close #222",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,228,2017-09-12T13:38:04Z,2017-09-12T13:42:10Z,2017-09-12T13:42:10Z,MERGED,True,1,67,1,https://github.com/mnaza,Correct circleci.yml for Libsodium backend,2,[],https://github.com/cossacklabs/themis/pull/228,https://github.com/mnaza,1,https://github.com/cossacklabs/themis/pull/228,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,229,2017-09-13T11:42:15Z,2017-09-13T12:03:34Z,2017-09-14T11:51:49Z,MERGED,True,668,214,25,https://github.com/vixentael,Release 0.9.5,24,[],https://github.com/cossacklabs/themis/pull/229,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/229,Hard work here,Hard work here,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,231,2017-09-20T01:50:33Z,2017-09-20T01:53:27Z,2017-09-20T01:53:27Z,MERGED,True,1782,6,19,https://github.com/vixentael,re-factor iOS wrapper tests,9,[],https://github.com/cossacklabs/themis/pull/231,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/231,"remove submodule that links tests to external repo
refactor objc wrapper tests
add swift3 wrapper tests

closes #152, #154","remove submodule that links tests to external repo
refactor objc wrapper tests
add swift3 wrapper tests

closes #152, #154",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,232,2017-09-20T02:14:34Z,2017-09-20T02:27:16Z,2017-09-20T15:39:43Z,MERGED,True,1783,6,20,https://github.com/vixentael,iOS tests,2,[],https://github.com/cossacklabs/themis/pull/232,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/232,"this PR (#231) merged to master

update iOS wrapper tests
add badge to the Readme","this PR (#231) merged to master

update iOS wrapper tests
add badge to the Readme",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,232,2017-09-20T02:14:34Z,2017-09-20T02:27:16Z,2017-09-20T15:39:43Z,MERGED,True,1783,6,20,https://github.com/vixentael,iOS tests,2,[],https://github.com/cossacklabs/themis/pull/232,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/232#issuecomment-330726768,"this PR (#231) merged to master

update iOS wrapper tests
add badge to the Readme",i wonder how to trigger bitrise hook,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,236,2017-09-29T14:38:57Z,2017-10-04T13:18:07Z,2017-10-04T14:46:15Z,MERGED,True,63,49,1,https://github.com/Lagovas,Lagovas/fix building packages,3,[],https://github.com/cossacklabs/themis/pull/236,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/236,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,238,2017-10-03T15:11:38Z,2017-10-03T15:12:25Z,2017-10-03T16:17:27Z,MERGED,True,1,1,1,https://github.com/vixentael,Fix jsthemis config for MacOS,1,['O-macOS :computer:'],https://github.com/cossacklabs/themis/pull/238,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/238,add /usr/local/lib path in jsthemis config file,add /usr/local/lib path in jsthemis config file,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,239,2017-10-04T08:33:56Z,2017-10-04T12:17:15Z,2017-10-04T14:46:13Z,MERGED,True,10,8,3,https://github.com/Lagovas,fix installing dependencies,3,[],https://github.com/cossacklabs/themis/pull/239,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/239,"drop redundant ""define"" option
up to 0.9.6-1 because published 0.9.6-0 without adding npm install && command (just with fixed library search paths) in preinstall script that fixes installing nan before building jsthemis","drop redundant ""define"" option
up to 0.9.6-1 because published 0.9.6-0 without adding npm install && command (just with fixed library search paths) in preinstall script that fixes installing nan before building jsthemis",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,239,2017-10-04T08:33:56Z,2017-10-04T12:17:15Z,2017-10-04T14:46:13Z,MERGED,True,10,8,3,https://github.com/Lagovas,fix installing dependencies,3,[],https://github.com/cossacklabs/themis/pull/239,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/239#issuecomment-334087274,"drop redundant ""define"" option
up to 0.9.6-1 because published 0.9.6-0 without adding npm install && command (just with fixed library search paths) in preinstall script that fixes installing nan before building jsthemis",LGTM,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,240,2017-10-04T15:06:25Z,2017-10-04T15:46:11Z,2017-12-06T17:50:10Z,MERGED,True,9,6,1,https://github.com/Lagovas,fix rpm version,1,[],https://github.com/cossacklabs/themis/pull/240,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/240,"use ""_"" instead ""-"" in rpm version string (because then incorrectly matched version in dependencies)","use ""_"" instead ""-"" in rpm version string (because then incorrectly matched version in dependencies)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,241,2017-10-13T14:10:59Z,2017-10-13T14:38:48Z,2017-10-13T16:07:41Z,MERGED,True,48,29,8,https://github.com/vixentael,Pythemis wrapper secure cell fixes,6,"['W-PyThemis :snake:', 'tests']",https://github.com/cossacklabs/themis/pull/241,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/241,"This PR fixes pythemis secure cell checks that were broken after #189.
Unfortunately, broken changes were missed due to poor pythemis tests: tests didn't check result code.
Changes:

update scell wrapper to use correct error code from Themis core
update pythemis, rubythemis, phpthemis tests running script (handle error code)
rename pythemis tests to match test_*.py name style, usepython -m unittest to run all tests instead of running each test files
add small scell_test.py example to illustrate scell

Next steps:
After merging this PR I'll push new pythemis package","This PR fixes pythemis secure cell checks that were broken after #189.
Unfortunately, broken changes were missed due to poor pythemis tests: tests didn't check result code.
Changes:

update scell wrapper to use correct error code from Themis core
update pythemis, rubythemis, phpthemis tests running script (handle error code)
rename pythemis tests to match test_*.py name style, usepython -m unittest to run all tests instead of running each test files
add small scell_test.py example to illustrate scell

Next steps:
After merging this PR I'll push new pythemis package",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,241,2017-10-13T14:10:59Z,2017-10-13T14:38:48Z,2017-10-13T16:07:41Z,MERGED,True,48,29,8,https://github.com/vixentael,Pythemis wrapper secure cell fixes,6,"['W-PyThemis :snake:', 'tests']",https://github.com/cossacklabs/themis/pull/241,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/241#issuecomment-336496543,"This PR fixes pythemis secure cell checks that were broken after #189.
Unfortunately, broken changes were missed due to poor pythemis tests: tests didn't check result code.
Changes:

update scell wrapper to use correct error code from Themis core
update pythemis, rubythemis, phpthemis tests running script (handle error code)
rename pythemis tests to match test_*.py name style, usepython -m unittest to run all tests instead of running each test files
add small scell_test.py example to illustrate scell

Next steps:
After merging this PR I'll push new pythemis package","package pushed
https://pypi.python.org/pypi/pythemis/0.9.5.1",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,244,2017-10-30T17:16:13Z,2017-11-01T10:23:54Z,2017-11-01T14:18:24Z,MERGED,True,130,59,3,https://github.com/vixentael,run tests from makefile,14,['infrastructure'],https://github.com/cossacklabs/themis/pull/244,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/244,"closes #243
check command

soter_test
themis_test
themispp_test

This is required test suit.
check_all command

phpthemis_test
pythemis_test
rubythemis_test
node

These tests require external dependencies, so they might fail due to outdated local configuration.","closes #243
check command

soter_test
themis_test
themispp_test

This is required test suit.
check_all command

phpthemis_test
pythemis_test
rubythemis_test
node

These tests require external dependencies, so they might fail due to outdated local configuration.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,244,2017-10-30T17:16:13Z,2017-11-01T10:23:54Z,2017-11-01T14:18:24Z,MERGED,True,130,59,3,https://github.com/vixentael,run tests from makefile,14,['infrastructure'],https://github.com/cossacklabs/themis/pull/244,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/244#issuecomment-340700809,"closes #243
check command

soter_test
themis_test
themispp_test

This is required test suit.
check_all command

phpthemis_test
pythemis_test
rubythemis_test
node

These tests require external dependencies, so they might fail due to outdated local configuration.","maybe we should refactor this makefile and make that make test will run tests (not compile them)? What about to rename test target to prepare_test (or something like this) and new check target to test? after that make test will do what expected - test current code
and I would use this updated Makefile in our circle.yml",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,244,2017-10-30T17:16:13Z,2017-11-01T10:23:54Z,2017-11-01T14:18:24Z,MERGED,True,130,59,3,https://github.com/vixentael,run tests from makefile,14,['infrastructure'],https://github.com/cossacklabs/themis/pull/244,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/244#issuecomment-340731475,"closes #243
check command

soter_test
themis_test
themispp_test

This is required test suit.
check_all command

phpthemis_test
pythemis_test
rubythemis_test
node

These tests require external dependencies, so they might fail due to outdated local configuration.","Nice idea! But then we should update Makefiles for other products to be consistent :)
I'll do it",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,244,2017-10-30T17:16:13Z,2017-11-01T10:23:54Z,2017-11-01T14:18:24Z,MERGED,True,130,59,3,https://github.com/vixentael,run tests from makefile,14,['infrastructure'],https://github.com/cossacklabs/themis/pull/244,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/244#issuecomment-340740908,"closes #243
check command

soter_test
themis_test
themispp_test

This is required test suit.
check_all command

phpthemis_test
pythemis_test
rubythemis_test
node

These tests require external dependencies, so they might fail due to outdated local configuration.","@Lagovas
compile tests:

prepare_tests_basic
prepare_tests_all

run tests:

test_basic
test

by default, make test will prepare all tests and run them
If it's ok for you, I'll update wiki",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,244,2017-10-30T17:16:13Z,2017-11-01T10:23:54Z,2017-11-01T14:18:24Z,MERGED,True,130,59,3,https://github.com/vixentael,run tests from makefile,14,['infrastructure'],https://github.com/cossacklabs/themis/pull/244,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/244#issuecomment-340751742,"closes #243
check command

soter_test
themis_test
themispp_test

This is required test suit.
check_all command

phpthemis_test
pythemis_test
rubythemis_test
node

These tests require external dependencies, so they might fail due to outdated local configuration.","@Lagovas

circle.yml updated
wiki updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,244,2017-10-30T17:16:13Z,2017-11-01T10:23:54Z,2017-11-01T14:18:24Z,MERGED,True,130,59,3,https://github.com/vixentael,run tests from makefile,14,['infrastructure'],https://github.com/cossacklabs/themis/pull/244,https://github.com/Lagovas,6,https://github.com/cossacklabs/themis/pull/244#issuecomment-340753700,"closes #243
check command

soter_test
themis_test
themispp_test

This is required test suit.
check_all command

phpthemis_test
pythemis_test
rubythemis_test
node

These tests require external dependencies, so they might fail due to outdated local configuration.","to finish this refactoring we should use new make test in our circle.yml instead of current commands:
...
- build/tests/soter_test
- build/tests/themis_test
- build/tests/themispp_test
- build/tests/pythemis_test.sh
- build/tests/phpthemis_test.sh
- build/tests/node.sh
...
what you think?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,244,2017-10-30T17:16:13Z,2017-11-01T10:23:54Z,2017-11-01T14:18:24Z,MERGED,True,130,59,3,https://github.com/vixentael,run tests from makefile,14,['infrastructure'],https://github.com/cossacklabs/themis/pull/244,https://github.com/vixentael,7,https://github.com/cossacklabs/themis/pull/244#issuecomment-340860575,"closes #243
check command

soter_test
themis_test
themispp_test

This is required test suit.
check_all command

phpthemis_test
pythemis_test
rubythemis_test
node

These tests require external dependencies, so they might fail due to outdated local configuration.","@Lagovas I think that we shouldn't use make test in circle.yml, because it's more useful to see what tests are failing.
However, I did more research & refactoring on that, and got rid of running ruby tests with sudo.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,244,2017-10-30T17:16:13Z,2017-11-01T10:23:54Z,2017-11-01T14:18:24Z,MERGED,True,130,59,3,https://github.com/vixentael,run tests from makefile,14,['infrastructure'],https://github.com/cossacklabs/themis/pull/244,https://github.com/Lagovas,8,https://github.com/cossacklabs/themis/pull/244#issuecomment-341065440,"closes #243
check command

soter_test
themis_test
themispp_test

This is required test suit.
check_all command

phpthemis_test
pythemis_test
rubythemis_test
node

These tests require external dependencies, so they might fail due to outdated local configuration.","@Lagovas I think that we shouldn't use make test in circle.yml, because it's more useful to see what tests are failing.

yeah, it's good when used public interface of Makefile (like you did now), not when used the implementation in recipes (as it was before).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,245,2017-10-30T17:18:03Z,2017-11-10T18:47:07Z,2018-01-17T18:38:02Z,CLOSED,False,81,12,9,https://github.com/vixentael,use constant time mem_cmp to compare sensitive data,1,"['enhancement', 'core']",https://github.com/cossacklabs/themis/pull/245,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/245,when checking private keys and inside secure separator,when checking private keys and inside secure separator,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,245,2017-10-30T17:18:03Z,2017-11-10T18:47:07Z,2018-01-17T18:38:02Z,CLOSED,False,81,12,9,https://github.com/vixentael,use constant time mem_cmp to compare sensitive data,1,"['enhancement', 'core']",https://github.com/cossacklabs/themis/pull/245,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/245#issuecomment-342003636,when checking private keys and inside secure separator,"@secumod can you please check my latest comment, and close issue if you feel that adding constant time mem cmp is not relevant in these cases?
#245 (comment)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,245,2017-10-30T17:18:03Z,2017-11-10T18:47:07Z,2018-01-17T18:38:02Z,CLOSED,False,81,12,9,https://github.com/vixentael,use constant time mem_cmp to compare sensitive data,1,"['enhancement', 'core']",https://github.com/cossacklabs/themis/pull/245,https://github.com/ignatk,3,https://github.com/cossacklabs/themis/pull/245#issuecomment-343421020,when checking private keys and inside secure separator,"Yes. Taking another look - seems it is not needed here, since all the parameters are public.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,245,2017-10-30T17:18:03Z,2017-11-10T18:47:07Z,2018-01-17T18:38:02Z,CLOSED,False,81,12,9,https://github.com/vixentael,use constant time mem_cmp to compare sensitive data,1,"['enhancement', 'core']",https://github.com/cossacklabs/themis/pull/245,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/245#issuecomment-343554583,when checking private keys and inside secure separator,thank you :),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,246,2017-10-30T17:22:05Z,2017-10-31T09:05:17Z,2017-10-31T13:38:43Z,MERGED,True,18,18,3,https://github.com/vixentael,fix type consistency in jni wrapper code,1,"['enhancement', 'O-Android :robot:']",https://github.com/cossacklabs/themis/pull/246,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/246,"fix warnings from jni wrapper casting types.
This is small enhancement that I felt necessary to fix during investigation of #220","fix warnings from jni wrapper casting types.
This is small enhancement that I felt necessary to fix during investigation of #220",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,246,2017-10-30T17:22:05Z,2017-10-31T09:05:17Z,2017-10-31T13:38:43Z,MERGED,True,18,18,3,https://github.com/vixentael,fix type consistency in jni wrapper code,1,"['enhancement', 'O-Android :robot:']",https://github.com/cossacklabs/themis/pull/246,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/246#issuecomment-340701099,"fix warnings from jni wrapper casting types.
This is small enhancement that I felt necessary to fix during investigation of #220",looks nice,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,247,2017-10-30T17:26:25Z,2017-10-31T13:35:55Z,2017-10-31T13:36:12Z,MERGED,True,54,76,71,https://github.com/vixentael,Rename error.h files,6,"['enhancement', 'O-iOS :iphone:', 'core']",https://github.com/cossacklabs/themis/pull/247,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/247,"Currently core has two error.h files: inside soter and inside themis folders. It might cause compiler warnings due to same names.
Moreover, objc wrapper has error.h file inside too, this cause warning while building iOS (ObjC/Swift) examples.
Previously mentioned:

#63
#219 (comment)

Changes:

rename soter/error.h to soter/soter_error.h
remove extra includes inside soter and themis
rename objcthemis/serror.h to `objcthemis/serror.h","Currently core has two error.h files: inside soter and inside themis folders. It might cause compiler warnings due to same names.
Moreover, objc wrapper has error.h file inside too, this cause warning while building iOS (ObjC/Swift) examples.
Previously mentioned:

#63
#219 (comment)

Changes:

rename soter/error.h to soter/soter_error.h
remove extra includes inside soter and themis
rename objcthemis/serror.h to `objcthemis/serror.h",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,247,2017-10-30T17:26:25Z,2017-10-31T13:35:55Z,2017-10-31T13:36:12Z,MERGED,True,54,76,71,https://github.com/vixentael,Rename error.h files,6,"['enhancement', 'O-iOS :iphone:', 'core']",https://github.com/cossacklabs/themis/pull/247,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/247#issuecomment-340704277,"Currently core has two error.h files: inside soter and inside themis folders. It might cause compiler warnings due to same names.
Moreover, objc wrapper has error.h file inside too, this cause warning while building iOS (ObjC/Swift) examples.
Previously mentioned:

#63
#219 (comment)

Changes:

rename soter/error.h to soter/soter_error.h
remove extra includes inside soter and themis
rename objcthemis/serror.h to `objcthemis/serror.h","rename soter/error.h to soter/soter_error.h

I wanted to say that maybe we should rename themis/error.h to themis/themis_error.h and I remembered that this header file used in all wrappers... Did you check that soter/error.h not used anywhere in other parts of code?

rename objcthemis/serror.h to `objcthemis/serror.h

what do you think about objcthemis/soter_error.h for consistency? or if it will do the same error then objcthemis/objc_soter_error.h?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,247,2017-10-30T17:26:25Z,2017-10-31T13:35:55Z,2017-10-31T13:36:12Z,MERGED,True,54,76,71,https://github.com/vixentael,Rename error.h files,6,"['enhancement', 'O-iOS :iphone:', 'core']",https://github.com/cossacklabs/themis/pull/247,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/247#issuecomment-340750859,"Currently core has two error.h files: inside soter and inside themis folders. It might cause compiler warnings due to same names.
Moreover, objc wrapper has error.h file inside too, this cause warning while building iOS (ObjC/Swift) examples.
Previously mentioned:

#63
#219 (comment)

Changes:

rename soter/error.h to soter/soter_error.h
remove extra includes inside soter and themis
rename objcthemis/serror.h to `objcthemis/serror.h","1

we should rename themis/error.h to themis/themis_error.h

agree, i had the same thought. renamed.
2

what do you think about objcthemis/soter_error.h for consistency?

well, i don't really like the name objcthemis/serror.h, but it's aligned with objcthemis style:

3

Did you check that soter/error.h not used anywhere in other parts of code?

I hope we have tests for that :D",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,247,2017-10-30T17:26:25Z,2017-10-31T13:35:55Z,2017-10-31T13:36:12Z,MERGED,True,54,76,71,https://github.com/vixentael,Rename error.h files,6,"['enhancement', 'O-iOS :iphone:', 'core']",https://github.com/cossacklabs/themis/pull/247,https://github.com/Lagovas,4,https://github.com/cossacklabs/themis/pull/247#issuecomment-340752026,"Currently core has two error.h files: inside soter and inside themis folders. It might cause compiler warnings due to same names.
Moreover, objc wrapper has error.h file inside too, this cause warning while building iOS (ObjC/Swift) examples.
Previously mentioned:

#63
#219 (comment)

Changes:

rename soter/error.h to soter/soter_error.h
remove extra includes inside soter and themis
rename objcthemis/serror.h to `objcthemis/serror.h",gothemis (in *.go files) uses themis/error.h and should be renamed too,True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,247,2017-10-30T17:26:25Z,2017-10-31T13:35:55Z,2017-10-31T13:36:12Z,MERGED,True,54,76,71,https://github.com/vixentael,Rename error.h files,6,"['enhancement', 'O-iOS :iphone:', 'core']",https://github.com/cossacklabs/themis/pull/247,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/247#issuecomment-340752219,"Currently core has two error.h files: inside soter and inside themis folders. It might cause compiler warnings due to same names.
Moreover, objc wrapper has error.h file inside too, this cause warning while building iOS (ObjC/Swift) examples.
Previously mentioned:

#63
#219 (comment)

Changes:

rename soter/error.h to soter/soter_error.h
remove extra includes inside soter and themis
rename objcthemis/serror.h to `objcthemis/serror.h","already did :)
thankfully, we have good tests!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,248,2017-11-01T14:40:08Z,2017-11-01T15:15:31Z,2017-11-01T15:15:52Z,MERGED,True,18,8,3,https://github.com/vixentael,Makefile: update `test` command,3,"['enhancement', 'infrastructure']",https://github.com/cossacklabs/themis/pull/248,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/248,"In order to unify commands among all products:


make install will install themis-core


make test will test themis-core


make install_all will install all themis packages using their native installation ways


make test_all will test all themis packages","In order to unify commands among all products:


make install will install themis-core


make test will test themis-core


make install_all will install all themis packages using their native installation ways


make test_all will test all themis packages",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,249,2017-11-03T11:35:21Z,2017-11-03T11:58:07Z,2017-12-06T17:50:08Z,MERGED,True,2,2,1,https://github.com/Lagovas,fix license name in rubythemis.gemspec,1,['enhancement'],https://github.com/cossacklabs/themis/pull/249,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/249,"now rubythemis builds with warning:
WARNING:  license value 'Apache 2.0' is invalid.  Use a license identifier from
http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.
Did you mean 'Apache-2.0'?
WARNING:  See http://guides.rubygems.org/specification-reference/ for help

so this commit set correct license name according to http://guides.rubygems.org/specification-reference/ and https://spdx.org/licenses/","now rubythemis builds with warning:
WARNING:  license value 'Apache 2.0' is invalid.  Use a license identifier from
http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.
Did you mean 'Apache-2.0'?
WARNING:  See http://guides.rubygems.org/specification-reference/ for help

so this commit set correct license name according to http://guides.rubygems.org/specification-reference/ and https://spdx.org/licenses/",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,250,2017-11-03T15:35:42Z,2017-11-03T16:16:18Z,2017-11-03T16:30:35Z,MERGED,True,5,1,2,https://github.com/vixentael,fix cleaning nist suit,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/250,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/250,fix clean in makefile,fix clean in makefile,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,251,2017-11-05T20:18:22Z,2017-11-06T08:40:55Z,2017-11-06T15:19:14Z,MERGED,True,53,7,5,https://github.com/vixentael,Fix android secure cell wrapper in token protect mode,4,[],https://github.com/cossacklabs/themis/pull/251,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/251,"bits and pieces while fixing android secure cell :)

uncomment tests for Secure Cell
see that tests are failing for token protect mode
fix themis_jni for token protect

extra points:

update python secure cell example (well, i just use it as reference code)","bits and pieces while fixing android secure cell :)

uncomment tests for Secure Cell
see that tests are failing for token protect mode
fix themis_jni for token protect

extra points:

update python secure cell example (well, i just use it as reference code)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,251,2017-11-05T20:18:22Z,2017-11-06T08:40:55Z,2017-11-06T15:19:14Z,MERGED,True,53,7,5,https://github.com/vixentael,Fix android secure cell wrapper in token protect mode,4,[],https://github.com/cossacklabs/themis/pull/251,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/251#issuecomment-342003313,"bits and pieces while fixing android secure cell :)

uncomment tests for Secure Cell
see that tests are failing for token protect mode
fix themis_jni for token protect

extra points:

update python secure cell example (well, i just use it as reference code)","Red one was a real current state of themis android tests :/

But now they're fixed! 🎉",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,254,2017-12-05T14:14:44Z,2017-12-05T14:17:23Z,2017-12-05T16:53:43Z,MERGED,True,6,5,1,https://github.com/Lagovas,support old golang,1,[],https://github.com/cossacklabs/themis/pull/254,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/254,#253,#253,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,255,2017-12-06T14:24:16Z,2017-12-06T14:44:37Z,2017-12-06T14:44:38Z,MERGED,True,592,440,42,https://github.com/vixentael,nullability support for iOS wrapper,6,"['enhancement', 'O-iOS :iphone:', 'W-SwiftThemis :large_orange_diamond:']",https://github.com/cossacklabs/themis/pull/255,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/255,"Add nullability support (https://useyourloaf.com/blog/using-nullable-to-annotate-objective-c/) for objcwrapper.
Update examples, update unit tests.
Make examples compatible with swift4 (close #230)","Add nullability support (https://useyourloaf.com/blog/using-nullable-to-annotate-objective-c/) for objcwrapper.
Update examples, update unit tests.
Make examples compatible with swift4 (close #230)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,256,2017-12-06T14:56:39Z,2017-12-06T14:56:46Z,2017-12-06T14:56:49Z,MERGED,True,1,1,1,https://github.com/vixentael,update podfile.lock to use latest master,1,"['O-iOS :iphone:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/256,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/256,"as part of #255
just to make sure that unit tests linked to the latest master","as part of #255
just to make sure that unit tests linked to the latest master",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,257,2017-12-08T02:49:02Z,2017-12-08T03:30:54Z,2017-12-08T14:59:09Z,MERGED,True,26,14,2,https://github.com/valeriyvan,Makes NSError** argument __autoreleasing; adds check against null,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/257,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/257,Makes NSError** argument __autoreleasing; adds check against null deference - NSError** by convension might be null if caller is not interested in error handling.,Makes NSError** argument __autoreleasing; adds check against null deference - NSError** by convension might be null if caller is not interested in error handling.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,257,2017-12-08T02:49:02Z,2017-12-08T03:30:54Z,2017-12-08T14:59:09Z,MERGED,True,26,14,2,https://github.com/valeriyvan,Makes NSError** argument __autoreleasing; adds check against null,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/257,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/257#issuecomment-350161069,Makes NSError** argument __autoreleasing; adds check against null deference - NSError** by convension might be null if caller is not interested in error handling.,"Thank you, @valeriyvan
I wonder how to trigger bitrise again 🤔
Looks like they don't support trigger-from-comment (https://github.com/bitrise-io/bitrise-webhooks)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,257,2017-12-08T02:49:02Z,2017-12-08T03:30:54Z,2017-12-08T14:59:09Z,MERGED,True,26,14,2,https://github.com/valeriyvan,Makes NSError** argument __autoreleasing; adds check against null,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/257,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/257#issuecomment-350162932,Makes NSError** argument __autoreleasing; adds check against null deference - NSError** by convension might be null if caller is not interested in error handling.,"anyway, I'll check bitrise build manually
thanx again!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,258,2017-12-08T12:16:38Z,2017-12-13T11:49:40Z,2018-02-06T14:47:02Z,MERGED,True,1441,1261,42,https://github.com/Lagovas,update soter/openssl to fix compatibility with new openssl version,30,['core'],https://github.com/cossacklabs/themis/pull/258,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/258,"due to changes in openssl 1.1.0 was changed:

using openssl structs allocated in heap instead stack because now their structs are opaque in openssl (1, 2)
pass soter fields to functions like some_func(ctx->field) instead some_func(&(ctx->field)) because now they are not public and allocated in heap
create structs using openssl functions *_create and *_new instead struct variable declaration (1)
use getters/setters to access to hidden struct fields (EVP_PKEY_type/EVP_PKEY_base_id, RSA_get0_key, RSA_get0_factors, RSA_get0_crt_params, RSA_set0_key, RSA_set0_factors, RSA_set0_crt_params)

want to ask @secumod to check at least src/soter/openssl/soter_rsa_key.c file where work with rsa keys","due to changes in openssl 1.1.0 was changed:

using openssl structs allocated in heap instead stack because now their structs are opaque in openssl (1, 2)
pass soter fields to functions like some_func(ctx->field) instead some_func(&(ctx->field)) because now they are not public and allocated in heap
create structs using openssl functions *_create and *_new instead struct variable declaration (1)
use getters/setters to access to hidden struct fields (EVP_PKEY_type/EVP_PKEY_base_id, RSA_get0_key, RSA_get0_factors, RSA_get0_crt_params, RSA_set0_key, RSA_set0_factors, RSA_set0_crt_params)

want to ask @secumod to check at least src/soter/openssl/soter_rsa_key.c file where work with rsa keys",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,258,2017-12-08T12:16:38Z,2017-12-13T11:49:40Z,2018-02-06T14:47:02Z,MERGED,True,1441,1261,42,https://github.com/Lagovas,update soter/openssl to fix compatibility with new openssl version,30,['core'],https://github.com/cossacklabs/themis/pull/258,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/258#issuecomment-350258720,"due to changes in openssl 1.1.0 was changed:

using openssl structs allocated in heap instead stack because now their structs are opaque in openssl (1, 2)
pass soter fields to functions like some_func(ctx->field) instead some_func(&(ctx->field)) because now they are not public and allocated in heap
create structs using openssl functions *_create and *_new instead struct variable declaration (1)
use getters/setters to access to hidden struct fields (EVP_PKEY_type/EVP_PKEY_base_id, RSA_get0_key, RSA_get0_factors, RSA_get0_crt_params, RSA_set0_key, RSA_set0_factors, RSA_set0_crt_params)

want to ask @secumod to check at least src/soter/openssl/soter_rsa_key.c file where work with rsa keys",should close #208 after merge,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,259,2017-12-08T15:02:16Z,2017-12-11T18:15:21Z,2017-12-11T18:17:39Z,MERGED,True,128,64,10,https://github.com/valeriyvan,"Makes NSError** argument __autoreleasing in scell_token, adds check a…",5,"['enhancement', 'O-iOS :iphone:']",https://github.com/cossacklabs/themis/pull/259,https://github.com/valeriyvan,1,https://github.com/cossacklabs/themis/pull/259,…gainst null dereference,…gainst null dereference,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,259,2017-12-08T15:02:16Z,2017-12-11T18:15:21Z,2017-12-11T18:17:39Z,MERGED,True,128,64,10,https://github.com/valeriyvan,"Makes NSError** argument __autoreleasing in scell_token, adds check a…",5,"['enhancement', 'O-iOS :iphone:']",https://github.com/cossacklabs/themis/pull/259,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/259#issuecomment-350285414,…gainst null dereference,second part of #257 ?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,259,2017-12-08T15:02:16Z,2017-12-11T18:15:21Z,2017-12-11T18:17:39Z,MERGED,True,128,64,10,https://github.com/valeriyvan,"Makes NSError** argument __autoreleasing in scell_token, adds check a…",5,"['enhancement', 'O-iOS :iphone:']",https://github.com/cossacklabs/themis/pull/259,https://github.com/valeriyvan,3,https://github.com/cossacklabs/themis/pull/259#issuecomment-350288215,…gainst null dereference,"TL DR: same fix, but for other files.
Confused by same branch name?
All NSError ** should be __autoreleasing, otherwise it might lead to appearing of zombies.
And it's better to be ready for NSError* passed to be nil. Because it's common practice ignore detailed error info which NSError provides when method signals for error with nil return value. In that case NSError provides additional information which we don't always need.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,259,2017-12-08T15:02:16Z,2017-12-11T18:15:21Z,2017-12-11T18:17:39Z,MERGED,True,128,64,10,https://github.com/valeriyvan,"Makes NSError** argument __autoreleasing in scell_token, adds check a…",5,"['enhancement', 'O-iOS :iphone:']",https://github.com/cossacklabs/themis/pull/259,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/259#issuecomment-350322172,…gainst null dereference,"yes, you're right, we should expect nil as errors.
can you please update smessage and ssession classes too? just to be consistent everywhere",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,259,2017-12-08T15:02:16Z,2017-12-11T18:15:21Z,2017-12-11T18:17:39Z,MERGED,True,128,64,10,https://github.com/valeriyvan,"Makes NSError** argument __autoreleasing in scell_token, adds check a…",5,"['enhancement', 'O-iOS :iphone:']",https://github.com/cossacklabs/themis/pull/259,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/259#issuecomment-350810653,…gainst null dereference,"Nah, our tests and examples are using themis pod from master branch, so CI can't indicate immediately that tests are failing.
I've found and fixed small issues in your PR
ad36068
b38fa55
and merged it.
Thank you a lot!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,260,2017-12-08T17:23:04Z,2017-12-11T11:11:55Z,2017-12-13T14:04:09Z,MERGED,True,359,0,7,https://github.com/vixentael,WIP: small integration test scripts,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/260,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/260,"I believe we should test how different Themis wrappers work with each other.
This is a simple example of testing Secure Cell, ruby and go.
Fun thing is that I found that results of Secure Cell in token protect mode is incompatible between ruby and go (however, it might be my own mistake).
Current state:
$ tests/_integration/integration_checks.sh
.. testing secure cell, ruby <--> ruby
ruby seal test
ruby seal with context
ruby context with context
ruby token test
ruby token with context
.. testing secure cell, go <--> go
go seal test
go seal with context
go context with context
go token test
go token with context
.. testing SECURE CELL, SEAL MODE, go <--> ruby
go-ruby test
go-ruby with context
ruby-go test
ruby-go with context
.. testing SECURE CELL, CONTEXT IMPRINT MODE, go <--> ruby
go-ruby with context
ruby-go with context
.. testing SECURE CELL, TOKEN PROTECT MODE, go <--> ruby
/Users/hdf/.rvm/gems/ruby-2.2.5/gems/rubythemis-0.9.5/lib/rubythemis.rb:332:in `decrypt': Secure Cell (Token Protect) failed decrypting: 11 (Themis::ThemisError)
	from ./tests/_integration/scell_token_string_echo.rb:45:in `<main>'","I believe we should test how different Themis wrappers work with each other.
This is a simple example of testing Secure Cell, ruby and go.
Fun thing is that I found that results of Secure Cell in token protect mode is incompatible between ruby and go (however, it might be my own mistake).
Current state:
$ tests/_integration/integration_checks.sh
.. testing secure cell, ruby <--> ruby
ruby seal test
ruby seal with context
ruby context with context
ruby token test
ruby token with context
.. testing secure cell, go <--> go
go seal test
go seal with context
go context with context
go token test
go token with context
.. testing SECURE CELL, SEAL MODE, go <--> ruby
go-ruby test
go-ruby with context
ruby-go test
ruby-go with context
.. testing SECURE CELL, CONTEXT IMPRINT MODE, go <--> ruby
go-ruby with context
ruby-go with context
.. testing SECURE CELL, TOKEN PROTECT MODE, go <--> ruby
/Users/hdf/.rvm/gems/ruby-2.2.5/gems/rubythemis-0.9.5/lib/rubythemis.rb:332:in `decrypt': Secure Cell (Token Protect) failed decrypting: 11 (Themis::ThemisError)
	from ./tests/_integration/scell_token_string_echo.rb:45:in `<main>'",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,261,2017-12-13T15:06:24Z,2017-12-13T15:24:12Z,2018-02-06T14:47:01Z,MERGED,True,25,6,4,https://github.com/Lagovas,avoid empty data,1,[],https://github.com/cossacklabs/themis/pull/261,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/261,close #242,close #242,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,262,2017-12-13T16:56:23Z,2017-12-14T11:11:19Z,2017-12-14T11:19:26Z,MERGED,True,83,44,14,https://github.com/vixentael,WIP: Preparing for release/0.9.6,10,['infrastructure'],https://github.com/cossacklabs/themis/pull/262,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/262,"Preparing for 0.9.6 release.
Updates including readme, changelog, versions of wrappers (are not pushed into package managers yet).
Do not merge until we decide to push 0.9.6 tag :)","Preparing for 0.9.6 release.
Updates including readme, changelog, versions of wrappers (are not pushed into package managers yet).
Do not merge until we decide to push 0.9.6 tag :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,263,2017-12-14T10:20:28Z,2017-12-14T10:29:11Z,2017-12-14T10:29:17Z,CLOSED,False,3,3,2,https://github.com/Lagovas,pythemis 0.9.6,1,[],https://github.com/cossacklabs/themis/pull/263,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/263,https://pypi.python.org/pypi/pythemis/0.9.6,https://pypi.python.org/pypi/pythemis/0.9.6,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,264,2017-12-14T12:04:56Z,2017-12-14T12:21:06Z,2017-12-14T12:21:37Z,MERGED,True,151,59,8,https://github.com/vixentael,update ios example to link to 0.9.6,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/264,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/264,updates-updates,updates-updates,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,265,2017-12-15T11:34:55Z,2017-12-15T11:45:17Z,2017-12-15T11:45:20Z,MERGED,True,70,68,13,https://github.com/vixentael,check sources with -Wdocumentation,2,"['enhancement', 'O-iOS :iphone:', 'core']",https://github.com/cossacklabs/themis/pull/265,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/265,"While pushing new CocoaPod, I've noticed that we have many warnings due to inconsistency of doxygen doc.
I've checked and updated some docs.
Example of warnings we had before
cc -Isrc -Isrc/wrappers/themis/ -I/usr/local/include -fPIC -DLIBRESSL -DCRYPTO_ENGINE_PATH=openssl -Werror -Wno-switch -Wdocumentation -ferror-limit=200 -I/usr/local/opt/openssl/include -c src/soter/soter_container.c -o build/obj/soter/soter_container.o
In file included from src/soter/soter_container.c:18:
In file included from src/soter/soter.h:42:
src/soter/soter_hmac.h:77:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure
   ~~~~~~~^
src/soter/soter_hmac.h:86:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure
   ~~~~~~~^
src/soter/soter_hmac.h:95:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
In file included from src/soter/soter_container.c:18:
In file included from src/soter/soter.h:43:
src/soter/soter_sym.h:140:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:150:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:158:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:188:37: error: empty paragraph passed to '@param' command [-Werror,-Wdocumentation]
 * @param [in, out] plain_data_length 
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
src/soter/soter_sym.h:189:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:198:37: error: empty paragraph passed to '@param' command [-Werror,-Wdocumentation]
 * @param [in, out] plain_data_length 
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
src/soter/soter_sym.h:199:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:207:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure.
   ~~~~~~~^
src/soter/soter_sym.h:243:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:241:16: error: parameter 'aad_data' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] aad_data pointer to buffer with AAD data
               ^~~~~~~~
src/soter/soter_sym.h:242:16: error: parameter 'aad_length' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] aad_length length of AAD data
               ^~~~~~~~~~
src/soter/soter_sym.h:242:16: note: did you mean 'data_length'?
 * @param [in] aad_length length of AAD data
               ^~~~~~~~~~
               data_length
src/soter/soter_sym.h:254:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:264:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:272:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:301:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:299:16: error: parameter 'aad_data' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] aad_data pointer to buffer with AAD data
               ^~~~~~~~
src/soter/soter_sym.h:300:16: error: parameter 'aad_length' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] aad_length length of AAD data
               ^~~~~~~~~~
src/soter/soter_sym.h:300:16: note: did you mean 'data_length'?
 * @param [in] aad_length length of AAD data
               ^~~~~~~~~~
               data_length
src/soter/soter_sym.h:311:37: error: empty paragraph passed to '@param' command [-Werror,-Wdocumentation]
 * @param [in, out] plain_data_length 
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
src/soter/soter_sym.h:312:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:308:16: error: parameter 'cipher_data' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] cipher_data pointer to data buffer to decrypt
               ^~~~~~~~~~~
src/soter/soter_sym.h:308:16: note: did you mean 'chiper_data'?
 * @param [in] cipher_data pointer to data buffer to decrypt
               ^~~~~~~~~~~
               chiper_data
src/soter/soter_sym.h:311:21: error: parameter 'plain_data_length' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in, out] plain_data_length 
                    ^~~~~~~~~~~~~~~~~
src/soter/soter_sym.h:322:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:329:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure.
   ~~~~~~~^
In file included from src/soter/soter_container.c:18:
In file included from src/soter/soter.h:45:
src/soter/soter_asym_cipher.h:64:21: error: parameter 'length' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in, out] length of cipher_data
                    ^~~~~~
src/soter/soter_asym_cipher.h:64:21: note: did you mean 'cipher_data_length'?
 * @param [in, out] length of cipher_data
                    ^~~~~~
                    cipher_data_length
src/soter/soter_asym_cipher.h:76:21: error: parameter 'length' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in, out] length of plain_data
                    ^~~~~~
src/soter/soter_asym_cipher.h:76:21: note: did you mean 'plain_data_length'?
 * @param [in, out] length of plain_data
                    ^~~~~~
                    plain_data_length
In file included from src/soter/soter_container.c:18:
In file included from src/soter/soter.h:46:
src/soter/soter_asym_ka.h:93:16: error: parameter 'asym_cipher_ctx' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] asym_cipher_ctx pointer to key agreement context previously created by soter_asym_ka_create
               ^~~~~~~~~~~~~~~
src/soter/soter_asym_ka.h:93:16: note: did you mean 'asym_ka_ctx'?
 * @param [in] asym_cipher_ctx pointer to key agreement context previously created by soter_asym_ka_create
               ^~~~~~~~~~~~~~~
               asym_ka_ctx
In file included from src/soter/soter_container.c:18:
In file included from src/soter/soter.h:47:
src/soter/soter_asym_sign.h:82:16: error: parameter 'asym_cipher_ctx' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] asym_cipher_ctx pointer to asymmetric encription/decription context previously created by soter_asym_cipher_create
               ^~~~~~~~~~~~~~~
30 errors generated.","While pushing new CocoaPod, I've noticed that we have many warnings due to inconsistency of doxygen doc.
I've checked and updated some docs.
Example of warnings we had before
cc -Isrc -Isrc/wrappers/themis/ -I/usr/local/include -fPIC -DLIBRESSL -DCRYPTO_ENGINE_PATH=openssl -Werror -Wno-switch -Wdocumentation -ferror-limit=200 -I/usr/local/opt/openssl/include -c src/soter/soter_container.c -o build/obj/soter/soter_container.o
In file included from src/soter/soter_container.c:18:
In file included from src/soter/soter.h:42:
src/soter/soter_hmac.h:77:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure
   ~~~~~~~^
src/soter/soter_hmac.h:86:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure
   ~~~~~~~^
src/soter/soter_hmac.h:95:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
In file included from src/soter/soter_container.c:18:
In file included from src/soter/soter.h:43:
src/soter/soter_sym.h:140:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:150:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:158:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:188:37: error: empty paragraph passed to '@param' command [-Werror,-Wdocumentation]
 * @param [in, out] plain_data_length 
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
src/soter/soter_sym.h:189:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:198:37: error: empty paragraph passed to '@param' command [-Werror,-Wdocumentation]
 * @param [in, out] plain_data_length 
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
src/soter/soter_sym.h:199:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:207:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure.
   ~~~~~~~^
src/soter/soter_sym.h:243:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:241:16: error: parameter 'aad_data' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] aad_data pointer to buffer with AAD data
               ^~~~~~~~
src/soter/soter_sym.h:242:16: error: parameter 'aad_length' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] aad_length length of AAD data
               ^~~~~~~~~~
src/soter/soter_sym.h:242:16: note: did you mean 'data_length'?
 * @param [in] aad_length length of AAD data
               ^~~~~~~~~~
               data_length
src/soter/soter_sym.h:254:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:264:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:272:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:301:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:299:16: error: parameter 'aad_data' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] aad_data pointer to buffer with AAD data
               ^~~~~~~~
src/soter/soter_sym.h:300:16: error: parameter 'aad_length' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] aad_length length of AAD data
               ^~~~~~~~~~
src/soter/soter_sym.h:300:16: note: did you mean 'data_length'?
 * @param [in] aad_length length of AAD data
               ^~~~~~~~~~
               data_length
src/soter/soter_sym.h:311:37: error: empty paragraph passed to '@param' command [-Werror,-Wdocumentation]
 * @param [in, out] plain_data_length 
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
src/soter/soter_sym.h:312:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:308:16: error: parameter 'cipher_data' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] cipher_data pointer to data buffer to decrypt
               ^~~~~~~~~~~
src/soter/soter_sym.h:308:16: note: did you mean 'chiper_data'?
 * @param [in] cipher_data pointer to data buffer to decrypt
               ^~~~~~~~~~~
               chiper_data
src/soter/soter_sym.h:311:21: error: parameter 'plain_data_length' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in, out] plain_data_length 
                    ^~~~~~~~~~~~~~~~~
src/soter/soter_sym.h:322:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure. 
   ~~~~~~~^
src/soter/soter_sym.h:329:11: error: empty paragraph passed to '@return' command [-Werror,-Wdocumentation]
 * @return @ref SOTER_SUCCESS on success and @ref SOTER_FAIL on failure.
   ~~~~~~~^
In file included from src/soter/soter_container.c:18:
In file included from src/soter/soter.h:45:
src/soter/soter_asym_cipher.h:64:21: error: parameter 'length' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in, out] length of cipher_data
                    ^~~~~~
src/soter/soter_asym_cipher.h:64:21: note: did you mean 'cipher_data_length'?
 * @param [in, out] length of cipher_data
                    ^~~~~~
                    cipher_data_length
src/soter/soter_asym_cipher.h:76:21: error: parameter 'length' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in, out] length of plain_data
                    ^~~~~~
src/soter/soter_asym_cipher.h:76:21: note: did you mean 'plain_data_length'?
 * @param [in, out] length of plain_data
                    ^~~~~~
                    plain_data_length
In file included from src/soter/soter_container.c:18:
In file included from src/soter/soter.h:46:
src/soter/soter_asym_ka.h:93:16: error: parameter 'asym_cipher_ctx' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] asym_cipher_ctx pointer to key agreement context previously created by soter_asym_ka_create
               ^~~~~~~~~~~~~~~
src/soter/soter_asym_ka.h:93:16: note: did you mean 'asym_ka_ctx'?
 * @param [in] asym_cipher_ctx pointer to key agreement context previously created by soter_asym_ka_create
               ^~~~~~~~~~~~~~~
               asym_ka_ctx
In file included from src/soter/soter_container.c:18:
In file included from src/soter/soter.h:47:
src/soter/soter_asym_sign.h:82:16: error: parameter 'asym_cipher_ctx' not found in the function declaration [-Werror,-Wdocumentation]
 * @param [in] asym_cipher_ctx pointer to asymmetric encription/decription context previously created by soter_asym_cipher_create
               ^~~~~~~~~~~~~~~
30 errors generated.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,266,2017-12-18T11:25:37Z,2017-12-18T12:22:36Z,2017-12-19T19:10:02Z,MERGED,True,967,696,14,https://github.com/shadinua,Ruby code refactoring,1,"['enhancement', 'W-RbThemis :diamonds:']",https://github.com/cossacklabs/themis/pull/266,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/266,"Ruby code has been refactored:

rubythemis gem (fixed incorrect error processing in GetPubKeyByIDCallback)
tests
examples","Ruby code has been refactored:

rubythemis gem (fixed incorrect error processing in GetPubKeyByIDCallback)
tests
examples",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,266,2017-12-18T11:25:37Z,2017-12-18T12:22:36Z,2017-12-19T19:10:02Z,MERGED,True,967,696,14,https://github.com/shadinua,Ruby code refactoring,1,"['enhancement', 'W-RbThemis :diamonds:']",https://github.com/cossacklabs/themis/pull/266,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/266#issuecomment-352405320,"Ruby code has been refactored:

rubythemis gem (fixed incorrect error processing in GetPubKeyByIDCallback)
tests
examples","wow, that's amazing refactoring!! I really like that you marked some functions as deprecated. I hope we won't break code compatibility between old versions of Themis.
Great work, @shadinua!
Can you please review Wiki How-to as well, probably we should update examples.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,267,2017-12-19T19:14:22Z,2017-12-19T19:57:08Z,2017-12-19T23:23:06Z,MERGED,True,4,4,1,https://github.com/shadinua,Fixed multiple openssl packages detection.,1,"['O-macOS :computer:', 'infrastructure', 'compatibility']",https://github.com/cossacklabs/themis/pull/267,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/267,Fixed incorrect openssl detection when more than one version is installed in macOS.,Fixed incorrect openssl detection when more than one version is installed in macOS.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,268,2017-12-21T13:33:22Z,2017-12-21T13:33:29Z,2017-12-21T13:33:33Z,MERGED,True,42,0,1,https://github.com/vixentael,add issue template,1,[],https://github.com/cossacklabs/themis/pull/268,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/268,"According to the Github official guidelines
https://help.github.com/articles/creating-an-issue-template-for-your-repository/","According to the Github official guidelines
https://help.github.com/articles/creating-an-issue-template-for-your-repository/",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,269,2017-12-22T18:52:31Z,2017-12-23T00:04:00Z,2018-01-17T18:17:33Z,MERGED,True,23,23,6,https://github.com/shadinua,Little grammatical corrections.,1,['enhancement'],https://github.com/cossacklabs/themis/pull/269,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/269,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,271,2017-12-27T14:55:28Z,2017-12-27T15:13:02Z,2018-02-06T14:46:53Z,MERGED,True,98,0,2,https://github.com/Lagovas,add example for secure session with buffer api,1,['core'],https://github.com/cossacklabs/themis/pull/271,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/271,"we have example for secure session where we create two thread and wrap socket with secure session using callback api
this commit adds example that use buffer api (https://github.com/cossacklabs/themis/wiki/Secure-Session-cryptosystem)","we have example for secure session where we create two thread and wrap socket with secure session using callback api
this commit adds example that use buffer api (https://github.com/cossacklabs/themis/wiki/Secure-Session-cryptosystem)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,272,2017-12-29T10:56:12Z,2017-12-29T12:06:34Z,2018-02-06T14:46:52Z,MERGED,True,44,14,2,https://github.com/Lagovas,support get_remote_id in gothemis,1,"['enhancement', 'W-GoThemis :hamster:']",https://github.com/cossacklabs/themis/pull/272,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/272,#203,#203,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/ignatk,1,https://github.com/cossacklabs/themis/pull/273,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/273#issuecomment-354445193,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235",as I see now tests running ~50 minutes and gradlew download dependencies before building (... Download https://dl.google.com/dl/android/maven2/com/android/tools/external/org-jetbrains/uast/26.0.1/uast-26.0.1.pom ...). Can we cache something of that (external archives/files/tools) to decrease time of tests?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/ignatk,3,https://github.com/cossacklabs/themis/pull/273#issuecomment-354449648,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","Most of the time is taken not by downloading dependencies, but building BoringSSL. Because of Circle CI memory limit I had to almost disable concurrent compilation, so it takes ages to compile BoringSSL for 4 architectures with 2 flavour build (Debug, Release) - totally 8 builds.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/273#issuecomment-354692908,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","Thank you @secumod! These changes are great and very welcomed!
However, could you please help me building Android tests on macOS? I've pulled your branch to init dependences, installed SDK Platform-Tools 27, SDK Build Tools 27 and CMake using Android Studio.
When executing command ./gradlew  build, I receive following error:
FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':boringssl:generateJsonModelDebug'.
> Build command failed.
  Error while executing process /Users/vxtl/Library/Android/sdk/cmake/3.6.4111459/bin/cmake with arguments {-H/Users/vxtl/projects/themis-test/mainfork/third_party/boringssl/src -B/Users/vxtl/projects/themis-test/mainfork/third_party/boringssl/.externalNativeBuild/cmake/debug/mips64 -DANDROID_ABI=mips64 -DANDROID_PLATFORM=android-21 -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=/Users/vxtl/projects/themis-test/mainfork/third_party/boringssl/build/intermediates/cmake/debug/obj/mips64 -DCMAKE_BUILD_TYPE=Debug -DANDROID_NDK=/Users/vxtl/Library/Android/sdk/ndk-bundle -DCMAKE_TOOLCHAIN_FILE=/Users/vxtl/Library/Android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DCMAKE_MAKE_PROGRAM=/Users/vxtl/Library/Android/sdk/cmake/3.6.4111459/bin/ninja -GAndroid Gradle - Ninja -DCMAKE_TOOLCHAIN_FILE=/Users/vxtl/Library/Android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_NATIVE_API_LEVEL=21 -DANDROID_TOOLCHAIN=gcc -DCMAKE_BUILD_TYPE=Release -GNinja}
  -- The C compiler identification is GNU 4.9.0
  -- Check for working C compiler: /Users/vxtl/Library/Android/sdk/ndk-bundle/toolchains/mips64el-linux-android-4.9/prebuilt/darwin-x86_64/bin/mips64el-linux-android-gcc
  -- Check for working C compiler: /Users/vxtl/Library/Android/sdk/ndk-bundle/toolchains/mips64el-linux-android-4.9/prebuilt/darwin-x86_64/bin/mips64el-linux-android-gcc -- works
  -- Detecting C compiler ABI info
  -- Detecting C compiler ABI info - done
  -- Detecting C compile features
  -- Detecting C compile features - done
  -- The CXX compiler identification is GNU 4.9.0
  -- Check for working CXX compiler: /Users/vxtl/Library/Android/sdk/ndk-bundle/toolchains/mips64el-linux-android-4.9/prebuilt/darwin-x86_64/bin/mips64el-linux-android-g++
  -- Check for working CXX compiler: /Users/vxtl/Library/Android/sdk/ndk-bundle/toolchains/mips64el-linux-android-4.9/prebuilt/darwin-x86_64/bin/mips64el-linux-android-g++ -- works
  -- Detecting CXX compiler ABI info
  -- Detecting CXX compiler ABI info - done
  -- Detecting CXX compile features
  -- Detecting CXX compile features - done
  CMake Error at CMakeLists.txt:339 (message):
    Unknown processor:mips64

This corresponds to the following line in CMakeLists.txt inside BoringSSL repo.
I found one Stack Overflow issue with similar question, but I don't think we were supposed to build BoringSSL for mips64, were we?
As far as I can say, there is no such line in CircleCI build output, I don't think that CircleCI was compiling BoringSSL for mips64.
Moreover, I've noticed that submodule is linked to master branch, but circle.yml is configured to download chromium-stable branch. However, changing submodule to use chromium-stable branch doesn't solve the issue :/",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/273#issuecomment-354694823,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","I've specified ABI version adding the following line to the thrid_party/boringssl/build.gradle file:
""-DANDROID_ABI=armeabi-v7a""
This fixed compiling mips64 problem, but I can't push to your branch.
Is it a good fix?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/ignatk,6,https://github.com/cossacklabs/themis/pull/273#issuecomment-354729288,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","Circle CI is not building mips64. AFAIK, currently if you don't specify architectures, Android build system should build x86, x86_64, armeabi-v7a and arm64.
The fact that your environment tries to build mips64 may be some override in your configs. Adding ""-DANDROID_ABI=armeabi-v7a"" is probably not a valid fix, because you are configuring boringssl build for one architecture only.
As for branches, I noticed we used to use chromium-stable, but I explicitly changed it to master for Android (and probably we should change for regular PCs) according to https://groups.google.com/a/chromium.org/forum/#!topic/security-dev/coiM8IZ8Fsc",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/vixentael,7,https://github.com/cossacklabs/themis/pull/273#issuecomment-354757058,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","Right, in my case I get incompatible target error
  [x86] SharedLibrary  : libthemis_jni.so
  /Users/vxtl/Library/Android/sdk/ndk-bundle/toolchains/x86-4.9/prebuilt/darwin-x86_64/bin/../lib/gcc/i686-linux-android/4.9.x/../../../../i686-linux-android/bin/ld: error: /Users/vxtl/projects/themis-test/mainfork/jni/../third_party/boringssl/.externalNativeBuild/cmake/debug/x86/crypto/libcrypto.a(bcm.c.o): incompatible target

How to explicitly set boringssl architecture omitting mips64?
Should I have several cmake statements for each architecture?
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 16
        externalNativeBuild {
		    cmake {
		        arguments ""-DCMAKE_TOOLCHAIN_FILE="" + android.ndkDirectory + ""/build/cmake/android.toolchain.cmake"",
		                  ""-DANDROID_NATIVE_API_LEVEL=21"",
		                  ""-DANDROID_TOOLCHAIN=gcc"",
		                  ""-DCMAKE_BUILD_TYPE=Release"",
                          ""-DANDROID_ABI=armeabi-v7a"",
		                  ""-GNinja""
		    }
            cmake {
                arguments ""-DCMAKE_TOOLCHAIN_FILE="" + android.ndkDirectory + ""/build/cmake/android.toolchain.cmake"",
                          ""-DANDROID_NATIVE_API_LEVEL=21"",
                          ""-DANDROID_TOOLCHAIN=gcc"",
                          ""-DCMAKE_BUILD_TYPE=Release"",
                          ""-DANDROID_ABI=x86"",
                          ""-GNinja""
            }
            cmake {
                arguments ""-DCMAKE_TOOLCHAIN_FILE="" + android.ndkDirectory + ""/build/cmake/android.toolchain.cmake"",
                          ""-DANDROID_NATIVE_API_LEVEL=21"",
                          ""-DANDROID_TOOLCHAIN=gcc"",
                          ""-DCMAKE_BUILD_TYPE=Release"",
                          ""-DANDROID_ABI=arm64-v8a"",
                          ""-GNinja""
            }
            cmake {
                arguments ""-DCMAKE_TOOLCHAIN_FILE="" + android.ndkDirectory + ""/build/cmake/android.toolchain.cmake"",
                          ""-DANDROID_NATIVE_API_LEVEL=21"",
                          ""-DANDROID_TOOLCHAIN=gcc"",
                          ""-DCMAKE_BUILD_TYPE=Release"",
                          ""-DANDROID_ABI=x86_64"",
                          ""-GNinja""
            }
	    }
    }",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/ignatk,8,https://github.com/cossacklabs/themis/pull/273#issuecomment-354758109,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","I would prefer to rely on defaults - as I mentioned above, check your build environment why is it building mips64. Maybe, try to upgrade Android NDK to the latest version?
See https://developer.android.com/ndk/guides/abis.html
mips and mips64 are deprecated in NDK r16, so probably you are using an older one.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/vixentael,9,https://github.com/cossacklabs/themis/pull/273#issuecomment-354759299,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","Thank you, currently I'm waiting untill local build finishes, then I'll try to update NDK.
According to the documentation:
ANDROID_ABI - specifies the target Application Binary Interface (ABI). 
This option nearly matches to the APP_ABI variable used by ndk-build tool from Android NDK. 
If not specified then set to armeabi-v7a.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/ignatk,10,https://github.com/cossacklabs/themis/pull/273#issuecomment-354759588,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","That variable is set by Android gradle build system (depending on the project config), so no need to specify it manually.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/vixentael,11,https://github.com/cossacklabs/themis/pull/273#issuecomment-355601511,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","I've updated NDK, it helped to solve the issue with building on mips64, however, I still see various error while building. I'll clean environment, themis folder and put here error log.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/vixentael,12,https://github.com/cossacklabs/themis/pull/273#issuecomment-355607601,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","Good news, I've built .aar archives successfully.
I'll run tests using connectedAndroidTest, run our example code, and merge PR after that.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/vixentael,13,https://github.com/cossacklabs/themis/pull/273#issuecomment-355608538,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","@secumod can you please review build instructions on wiki page?
I'm planning to add requirements (like installing SDK Platform-Tools 27, SDK Build Tools 27, downloading cmake via Android Studio) and short note about using submodules (like git submodule update --remote).
Please add notes about building themis_jni.dylib with new BoringSSL location
What else you would add?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/vixentael,14,https://github.com/cossacklabs/themis/pull/273#issuecomment-355697329,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","merged.
@secumod please update docs",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,273,2017-12-29T12:50:30Z,2018-01-05T23:57:58Z,2018-01-17T18:16:30Z,MERGED,True,122,72,10,https://github.com/ignatk,Simplify Android build and bring up to date,12,"['O-Android :robot:', 'infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/273,https://github.com/vixentael,15,https://github.com/cossacklabs/themis/pull/273#issuecomment-355702920,"This PR improves Themis Android build:

updates used Android build tools to latest versions
adds x86_64 build architecture (now the default for Android native code builds)
checks-in BoringSSL as a submodule to Themis as recommended by BoringSSL project: https://boringssl.googlesource.com/boringssl/+/HEAD/INCORPORATING.md
integrates BoringSSL build to main Themis build, so no separate ""build BoringSSL"" step needed
bumps API level to 21 for better support of 64 bit platforms

The PR also includes days of messing with Circle CI to ensure it does not OOM with the new build system.
Relates to #235","@secumod if I understand correctly, we run tests on Android 22. However latest version is Android 27.
Test case are written using AndroidTestCase which is deprecated since Android 24.
https://developer.android.com/reference/android/test/AndroidTestCase.html
Trying to run tests on emulator 24+, I constantly receive error:
com.android.builder.testing.ConnectedDevice > No tests found.[Nexus_27(AVD) - 8.1.0] FAILED 
No tests found. This usually means that your test classes are not in the form that your test runner expects (e.g. don't inherit from TestCase or lack @Test annotations).

I believe we should update Android Tests to target to the latest Android version. What do you think?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,276,2018-01-12T13:44:46Z,2018-01-12T17:05:20Z,2018-01-17T18:16:10Z,MERGED,True,1,1,1,https://github.com/Lagovas,fix comparison signed/unsigned,1,['core'],https://github.com/cossacklabs/themis/pull/276,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/276,"fast fix, because has compilation error with strict flags","fast fix, because has compilation error with strict flags",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,277,2018-01-13T22:19:04Z,2018-01-14T17:05:54Z,2018-01-26T09:51:43Z,MERGED,True,174,0,4,https://github.com/mozhmike,PHP integration tests,1,"['W-PHPThemis :elephant:', 'tests']",https://github.com/cossacklabs/themis/pull/277,https://github.com/mozhmike,1,https://github.com/cossacklabs/themis/pull/277,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,278,2018-01-15T15:27:55Z,2018-01-15T16:28:40Z,2018-01-15T16:28:40Z,MERGED,True,836,6,12,https://github.com/Lagovas,compilable php7 version,5,"['W-PHPThemis :elephant:', 'compatibility']",https://github.com/cossacklabs/themis/pull/278,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/278,"compilable on

$ php --version
PHP 7.2.1 (cli) (built: Jan  3 2018 06:02:01) ( NTS )
Copyright (c) 1997-2017 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2017 Zend Technologies


pass integration tests php <-> php with secure cell
splitted code into several files

It's not completed version that can be used to update unit tests. After successful run unit tests with php7 we can be sure that it works correctly","compilable on

$ php --version
PHP 7.2.1 (cli) (built: Jan  3 2018 06:02:01) ( NTS )
Copyright (c) 1997-2017 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2017 Zend Technologies


pass integration tests php <-> php with secure cell
splitted code into several files

It's not completed version that can be used to update unit tests. After successful run unit tests with php7 we can be sure that it works correctly",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,278,2018-01-15T15:27:55Z,2018-01-15T16:28:40Z,2018-01-15T16:28:40Z,MERGED,True,836,6,12,https://github.com/Lagovas,compilable php7 version,5,"['W-PHPThemis :elephant:', 'compatibility']",https://github.com/cossacklabs/themis/pull/278,https://github.com/ignatk,2,https://github.com/cossacklabs/themis/pull/278#issuecomment-357723798,"compilable on

$ php --version
PHP 7.2.1 (cli) (built: Jan  3 2018 06:02:01) ( NTS )
Copyright (c) 1997-2017 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2017 Zend Technologies


pass integration tests php <-> php with secure cell
splitted code into several files

It's not completed version that can be used to update unit tests. After successful run unit tests with php7 we can be sure that it works correctly","Cool - lack of php7 support was really holding me back in my branch to migrate to Circle CI 2.0 (as well as newer Ubuntu test-image, because newer Ubuntu provides PHP7 by default).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,278,2018-01-15T15:27:55Z,2018-01-15T16:28:40Z,2018-01-15T16:28:40Z,MERGED,True,836,6,12,https://github.com/Lagovas,compilable php7 version,5,"['W-PHPThemis :elephant:', 'compatibility']",https://github.com/cossacklabs/themis/pull/278,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/278#issuecomment-357730792,"compilable on

$ php --version
PHP 7.2.1 (cli) (built: Jan  3 2018 06:02:01) ( NTS )
Copyright (c) 1997-2017 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2017 Zend Technologies


pass integration tests php <-> php with secure cell
splitted code into several files

It's not completed version that can be used to update unit tests. After successful run unit tests with php7 we can be sure that it works correctly","Yes, that's super cool!
We'll close #178 issue after we update php5 and php7 unit tests, and probably refactor folder structure a bit, but overall, php7 support is a blast!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,279,2018-01-16T13:55:38Z,2018-01-17T20:28:21Z,2018-01-17T20:28:25Z,MERGED,True,79,9,6,https://github.com/vixentael,secure cell x32-x64 compatibility fix,6,['compatibility'],https://github.com/cossacklabs/themis/pull/279,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/279,"The problem described in #220 appears to be SecureCell incompatibility between x32 and x64 platforms. SecureCell is working correctly on both platforms, however, ciphertext calculations are platform-dependent.
Where is the problem
Message length and context length are used in encryption and decryption in every mode of SecureCell, and they are defined as size_t types (secure_cell.c#L47, secure_cell.c#L29 and below).
During encryption-decryption process sizeof(message_length) is calculated (sym_enc_message.c#L184) which is equal to sizeof(size_t).
Result of sizeof(size_t) is platform dependent: 4 bytes on x32 platforms, 8 bytes on x64 platforms.
This value is used inside soter_kdf function for calculating hmac.
Therefore, resulting ciphertext uses different amount of bytes on different platforms.
Fix
Real fix is to use platform-independent types, like uint32_t, instead of size_t. uint32_t variables are already used among many data structures themis_auth_sym_message_hdr_type and themis_sym_message_hdr_type
Changing sizeof(message_length) to sizeof(uint32_t) results in using 4 bytes on every platform, making encryption-decryption compatible among x32 and x64.
Compatibility fix
Unfortunately using 4 bytes for x64 leads to unability to decrypt messages encrypted by themis 0.9.6 x64.
Therefore on x64 platform if decrypting fails first time, we try to re-decrypt message using 8 bytes as context length for the second time.
Testing
I made manual integration testing among x32 and x64 Ubuntu 17.04 for themis 0.9.6 and 0.9.7. I encrypt data in every Secure Cell mode, write it to the files, and encrypt on another platform.
Results


fully compatible (can be encrypted and decrypted both ways)
0.9.7 х64 <-> 0.9.7 х32
0.9.7 х64 <-> 0.9.6 х32
0.9.7 х32 <-> 0.9.6 х32


almost fully compatible
0.9.7 x64 <-> 0.9.6 x64 (messages encrypted with context imprint mode can't be decrypted on 0.9.7)


not compatible
0.9.6 x64 can't decrypt messages encrypted by 0.9.7 x64/x32. Users should update to 0.9.7.
0.9.7 x32 can't decrypt messages encrypted by 0.9.6 x64. Users should update to 0.9.7.","The problem described in #220 appears to be SecureCell incompatibility between x32 and x64 platforms. SecureCell is working correctly on both platforms, however, ciphertext calculations are platform-dependent.
Where is the problem
Message length and context length are used in encryption and decryption in every mode of SecureCell, and they are defined as size_t types (secure_cell.c#L47, secure_cell.c#L29 and below).
During encryption-decryption process sizeof(message_length) is calculated (sym_enc_message.c#L184) which is equal to sizeof(size_t).
Result of sizeof(size_t) is platform dependent: 4 bytes on x32 platforms, 8 bytes on x64 platforms.
This value is used inside soter_kdf function for calculating hmac.
Therefore, resulting ciphertext uses different amount of bytes on different platforms.
Fix
Real fix is to use platform-independent types, like uint32_t, instead of size_t. uint32_t variables are already used among many data structures themis_auth_sym_message_hdr_type and themis_sym_message_hdr_type
Changing sizeof(message_length) to sizeof(uint32_t) results in using 4 bytes on every platform, making encryption-decryption compatible among x32 and x64.
Compatibility fix
Unfortunately using 4 bytes for x64 leads to unability to decrypt messages encrypted by themis 0.9.6 x64.
Therefore on x64 platform if decrypting fails first time, we try to re-decrypt message using 8 bytes as context length for the second time.
Testing
I made manual integration testing among x32 and x64 Ubuntu 17.04 for themis 0.9.6 and 0.9.7. I encrypt data in every Secure Cell mode, write it to the files, and encrypt on another platform.
Results


fully compatible (can be encrypted and decrypted both ways)
0.9.7 х64 <-> 0.9.7 х32
0.9.7 х64 <-> 0.9.6 х32
0.9.7 х32 <-> 0.9.6 х32


almost fully compatible
0.9.7 x64 <-> 0.9.6 x64 (messages encrypted with context imprint mode can't be decrypted on 0.9.7)


not compatible
0.9.6 x64 can't decrypt messages encrypted by 0.9.7 x64/x32. Users should update to 0.9.7.
0.9.7 x32 can't decrypt messages encrypted by 0.9.6 x64. Users should update to 0.9.7.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,279,2018-01-16T13:55:38Z,2018-01-17T20:28:21Z,2018-01-17T20:28:25Z,MERGED,True,79,9,6,https://github.com/vixentael,secure cell x32-x64 compatibility fix,6,['compatibility'],https://github.com/cossacklabs/themis/pull/279,https://github.com/mobrio,2,https://github.com/cossacklabs/themis/pull/279#issuecomment-358047639,"The problem described in #220 appears to be SecureCell incompatibility between x32 and x64 platforms. SecureCell is working correctly on both platforms, however, ciphertext calculations are platform-dependent.
Where is the problem
Message length and context length are used in encryption and decryption in every mode of SecureCell, and they are defined as size_t types (secure_cell.c#L47, secure_cell.c#L29 and below).
During encryption-decryption process sizeof(message_length) is calculated (sym_enc_message.c#L184) which is equal to sizeof(size_t).
Result of sizeof(size_t) is platform dependent: 4 bytes on x32 platforms, 8 bytes on x64 platforms.
This value is used inside soter_kdf function for calculating hmac.
Therefore, resulting ciphertext uses different amount of bytes on different platforms.
Fix
Real fix is to use platform-independent types, like uint32_t, instead of size_t. uint32_t variables are already used among many data structures themis_auth_sym_message_hdr_type and themis_sym_message_hdr_type
Changing sizeof(message_length) to sizeof(uint32_t) results in using 4 bytes on every platform, making encryption-decryption compatible among x32 and x64.
Compatibility fix
Unfortunately using 4 bytes for x64 leads to unability to decrypt messages encrypted by themis 0.9.6 x64.
Therefore on x64 platform if decrypting fails first time, we try to re-decrypt message using 8 bytes as context length for the second time.
Testing
I made manual integration testing among x32 and x64 Ubuntu 17.04 for themis 0.9.6 and 0.9.7. I encrypt data in every Secure Cell mode, write it to the files, and encrypt on another platform.
Results


fully compatible (can be encrypted and decrypted both ways)
0.9.7 х64 <-> 0.9.7 х32
0.9.7 х64 <-> 0.9.6 х32
0.9.7 х32 <-> 0.9.6 х32


almost fully compatible
0.9.7 x64 <-> 0.9.6 x64 (messages encrypted with context imprint mode can't be decrypted on 0.9.7)


not compatible
0.9.6 x64 can't decrypt messages encrypted by 0.9.7 x64/x32. Users should update to 0.9.7.
0.9.7 x32 can't decrypt messages encrypted by 0.9.6 x64. Users should update to 0.9.7.","I entirely appreciate the desire for a safe and minimal intervention and the fine detail of that is not my competence.
However, my understanding (which may be entirely wrong) from #220 is that x32 primarily (if not solely) occurs for the Android emulator. Similarly I would expect x64 to be the majority case in server or indeed desktop contexts.
So some thoughts/questions:
Should we not then consider x32 to be the exception that is the focus for compatibility fixing and x64 the norm?
For example does constraining x64 platforms to use 4 bytes via sizeof(uint32_t) rather than 8 result in any performance loss?
Similarly if there is a case when our compatibility strategy is to ""fail and retry with a different size"" would it not be better for that performance hit to occur in a x32 emulator rather than x64 real world devices?
Also, as I recall it the C preprocessor knows all about stuff like SIZEOF_INT so perhaps there's the opportunity for natural adaption rather than some explicit -DCOMPAT switch?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,279,2018-01-16T13:55:38Z,2018-01-17T20:28:21Z,2018-01-17T20:28:25Z,MERGED,True,79,9,6,https://github.com/vixentael,secure cell x32-x64 compatibility fix,6,['compatibility'],https://github.com/cossacklabs/themis/pull/279,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/279#issuecomment-358181035,"The problem described in #220 appears to be SecureCell incompatibility between x32 and x64 platforms. SecureCell is working correctly on both platforms, however, ciphertext calculations are platform-dependent.
Where is the problem
Message length and context length are used in encryption and decryption in every mode of SecureCell, and they are defined as size_t types (secure_cell.c#L47, secure_cell.c#L29 and below).
During encryption-decryption process sizeof(message_length) is calculated (sym_enc_message.c#L184) which is equal to sizeof(size_t).
Result of sizeof(size_t) is platform dependent: 4 bytes on x32 platforms, 8 bytes on x64 platforms.
This value is used inside soter_kdf function for calculating hmac.
Therefore, resulting ciphertext uses different amount of bytes on different platforms.
Fix
Real fix is to use platform-independent types, like uint32_t, instead of size_t. uint32_t variables are already used among many data structures themis_auth_sym_message_hdr_type and themis_sym_message_hdr_type
Changing sizeof(message_length) to sizeof(uint32_t) results in using 4 bytes on every platform, making encryption-decryption compatible among x32 and x64.
Compatibility fix
Unfortunately using 4 bytes for x64 leads to unability to decrypt messages encrypted by themis 0.9.6 x64.
Therefore on x64 platform if decrypting fails first time, we try to re-decrypt message using 8 bytes as context length for the second time.
Testing
I made manual integration testing among x32 and x64 Ubuntu 17.04 for themis 0.9.6 and 0.9.7. I encrypt data in every Secure Cell mode, write it to the files, and encrypt on another platform.
Results


fully compatible (can be encrypted and decrypted both ways)
0.9.7 х64 <-> 0.9.7 х32
0.9.7 х64 <-> 0.9.6 х32
0.9.7 х32 <-> 0.9.6 х32


almost fully compatible
0.9.7 x64 <-> 0.9.6 x64 (messages encrypted with context imprint mode can't be decrypted on 0.9.7)


not compatible
0.9.6 x64 can't decrypt messages encrypted by 0.9.7 x64/x32. Users should update to 0.9.7.
0.9.7 x32 can't decrypt messages encrypted by 0.9.6 x64. Users should update to 0.9.7.","@mobrio, actually saying, x64 code should be considered as ""broken"" implementation, and x32 as ""correct"".
The encryption-decryption code uses uint32_t structures mostly, except that variables defined as size_t. On x32 platforms sizeof(size_t) equals sizeof(uint32_t) equals 4 bytes. All calculations are respective and correct. On x64 sizeof(size_t) == sizeof(uint64_t) == 8 bytes, making the code a mix of uint_32t structures and 8-bytes long buffers :(
Android emulator was just the trigger to find this issue. It affects any x32<->x64 platforms. We believe that most users are using x64 ""broken"" themis version. That's why adding ""fail and retry with a different size"" for x64 is important: we should allows users to decrypt their data, previously encrypted by ""broken"" code. The ""double decryption"" strategy should be enabled by default, allowing users to disable it manually.
Changing data types for uint64_t, removing explicit sizeof(uint32_t) and ""double decryption"" strategy, is our ""next step"" update. However, in my opinion, we should release quick fix, set up automated integration tests (who knows how many similar issues are still undetected), detect those issues, understand the problem landscape better, and perform proper refactoring only after that.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,279,2018-01-16T13:55:38Z,2018-01-17T20:28:21Z,2018-01-17T20:28:25Z,MERGED,True,79,9,6,https://github.com/vixentael,secure cell x32-x64 compatibility fix,6,['compatibility'],https://github.com/cossacklabs/themis/pull/279,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/279#issuecomment-358181293,"The problem described in #220 appears to be SecureCell incompatibility between x32 and x64 platforms. SecureCell is working correctly on both platforms, however, ciphertext calculations are platform-dependent.
Where is the problem
Message length and context length are used in encryption and decryption in every mode of SecureCell, and they are defined as size_t types (secure_cell.c#L47, secure_cell.c#L29 and below).
During encryption-decryption process sizeof(message_length) is calculated (sym_enc_message.c#L184) which is equal to sizeof(size_t).
Result of sizeof(size_t) is platform dependent: 4 bytes on x32 platforms, 8 bytes on x64 platforms.
This value is used inside soter_kdf function for calculating hmac.
Therefore, resulting ciphertext uses different amount of bytes on different platforms.
Fix
Real fix is to use platform-independent types, like uint32_t, instead of size_t. uint32_t variables are already used among many data structures themis_auth_sym_message_hdr_type and themis_sym_message_hdr_type
Changing sizeof(message_length) to sizeof(uint32_t) results in using 4 bytes on every platform, making encryption-decryption compatible among x32 and x64.
Compatibility fix
Unfortunately using 4 bytes for x64 leads to unability to decrypt messages encrypted by themis 0.9.6 x64.
Therefore on x64 platform if decrypting fails first time, we try to re-decrypt message using 8 bytes as context length for the second time.
Testing
I made manual integration testing among x32 and x64 Ubuntu 17.04 for themis 0.9.6 and 0.9.7. I encrypt data in every Secure Cell mode, write it to the files, and encrypt on another platform.
Results


fully compatible (can be encrypted and decrypted both ways)
0.9.7 х64 <-> 0.9.7 х32
0.9.7 х64 <-> 0.9.6 х32
0.9.7 х32 <-> 0.9.6 х32


almost fully compatible
0.9.7 x64 <-> 0.9.6 x64 (messages encrypted with context imprint mode can't be decrypted on 0.9.7)


not compatible
0.9.6 x64 can't decrypt messages encrypted by 0.9.7 x64/x32. Users should update to 0.9.7.
0.9.7 x32 can't decrypt messages encrypted by 0.9.6 x64. Users should update to 0.9.7.","In latest commit I've changed code to
#ifdef SCELL_COMPAT

  // we are on x64, should sizeof(uin64_t) for backwards compatibility with themis 0.9.6 x64
  if (sizeof(size_t) == sizeof(uint64_t)) {
    if (decryption_result != THEMIS_SUCCESS && decryption_result != THEMIS_BUFFER_TOO_SMALL) {
        THEMIS_STATUS_CHECK(themis_sym_kdf(key,key_length, THEMIS_SYM_KDF_KEY_LABEL, (uint8_t*)(&encrypted_message_length), sizeof(uint64_t), NULL, 0, key_, sizeof(key_)),THEMIS_SUCCESS);
        decryption_result = themis_sym_decrypt_message_u_(key_,sizeof(key_),context,context_length,encrypted_message,encrypted_message_length,message,message_length);
    }
  }
#endif

and enable -DSCELL_COMPAT by default in Makefile.
To disable compatibility fix, users should pass NO_SCELL_COMPAT parameter into make, like this
make NO_SCELL_COMPAT=y all install",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,279,2018-01-16T13:55:38Z,2018-01-17T20:28:21Z,2018-01-17T20:28:25Z,MERGED,True,79,9,6,https://github.com/vixentael,secure cell x32-x64 compatibility fix,6,['compatibility'],https://github.com/cossacklabs/themis/pull/279,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/279#issuecomment-358390384,"The problem described in #220 appears to be SecureCell incompatibility between x32 and x64 platforms. SecureCell is working correctly on both platforms, however, ciphertext calculations are platform-dependent.
Where is the problem
Message length and context length are used in encryption and decryption in every mode of SecureCell, and they are defined as size_t types (secure_cell.c#L47, secure_cell.c#L29 and below).
During encryption-decryption process sizeof(message_length) is calculated (sym_enc_message.c#L184) which is equal to sizeof(size_t).
Result of sizeof(size_t) is platform dependent: 4 bytes on x32 platforms, 8 bytes on x64 platforms.
This value is used inside soter_kdf function for calculating hmac.
Therefore, resulting ciphertext uses different amount of bytes on different platforms.
Fix
Real fix is to use platform-independent types, like uint32_t, instead of size_t. uint32_t variables are already used among many data structures themis_auth_sym_message_hdr_type and themis_sym_message_hdr_type
Changing sizeof(message_length) to sizeof(uint32_t) results in using 4 bytes on every platform, making encryption-decryption compatible among x32 and x64.
Compatibility fix
Unfortunately using 4 bytes for x64 leads to unability to decrypt messages encrypted by themis 0.9.6 x64.
Therefore on x64 platform if decrypting fails first time, we try to re-decrypt message using 8 bytes as context length for the second time.
Testing
I made manual integration testing among x32 and x64 Ubuntu 17.04 for themis 0.9.6 and 0.9.7. I encrypt data in every Secure Cell mode, write it to the files, and encrypt on another platform.
Results


fully compatible (can be encrypted and decrypted both ways)
0.9.7 х64 <-> 0.9.7 х32
0.9.7 х64 <-> 0.9.6 х32
0.9.7 х32 <-> 0.9.6 х32


almost fully compatible
0.9.7 x64 <-> 0.9.6 x64 (messages encrypted with context imprint mode can't be decrypted on 0.9.7)


not compatible
0.9.6 x64 can't decrypt messages encrypted by 0.9.7 x64/x32. Users should update to 0.9.7.
0.9.7 x32 can't decrypt messages encrypted by 0.9.6 x64. Users should update to 0.9.7.","Added warning lines.
Created refactoring issue and describe plan there.
Waiting for tests to complete and merge this issue.
Thank you a lot for this discussion, it was very useful and strategic-minded!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,280,2018-01-17T12:02:47Z,2018-01-17T16:23:13Z,2018-02-06T14:46:52Z,MERGED,True,30,30,3,https://github.com/Lagovas,fix incorrect types of arguments,7,['W-PHPThemis :elephant:'],https://github.com/cossacklabs/themis/pull/280,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/280,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,281,2018-01-17T17:20:09Z,2018-01-17T18:14:13Z,2018-02-06T14:46:47Z,MERGED,True,14,12,3,https://github.com/Lagovas,"unify rubythemis token protect mode, uncomment integration tests",1,"['bug', 'W-RbThemis :diamonds:', 'tests']",https://github.com/cossacklabs/themis/pull/281,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/281,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,281,2018-01-17T17:20:09Z,2018-01-17T18:14:13Z,2018-02-06T14:46:47Z,MERGED,True,14,12,3,https://github.com/Lagovas,"unify rubythemis token protect mode, uncomment integration tests",1,"['bug', 'W-RbThemis :diamonds:', 'tests']",https://github.com/cossacklabs/themis/pull/281,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/281#issuecomment-358378006,,awesome catch!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,282,2018-01-17T17:51:59Z,2018-01-18T11:33:40Z,2018-02-06T14:46:42Z,MERGED,True,14,0,3,https://github.com/Lagovas,test that length of encrypted data == length of raw data,2,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'core', 'tests']",https://github.com/cossacklabs/themis/pull/282,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/282,"tested python/C tests, but didn't check locally php version update. but ci should test it","tested python/C tests, but didn't check locally php version update. but ci should test it",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,282,2018-01-17T17:51:59Z,2018-01-18T11:33:40Z,2018-02-06T14:46:42Z,MERGED,True,14,0,3,https://github.com/Lagovas,test that length of encrypted data == length of raw data,2,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'core', 'tests']",https://github.com/cossacklabs/themis/pull/282,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/282#issuecomment-358392033,"tested python/C tests, but didn't check locally php version update. but ci should test it",New test checks are always welcomed! Cool that we will check message length now,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,282,2018-01-17T17:51:59Z,2018-01-18T11:33:40Z,2018-02-06T14:46:42Z,MERGED,True,14,0,3,https://github.com/Lagovas,test that length of encrypted data == length of raw data,2,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'core', 'tests']",https://github.com/cossacklabs/themis/pull/282,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/282#issuecomment-358398113,"tested python/C tests, but didn't check locally php version update. but ci should test it",Google tells me that it should be count($arr) for php,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,283,2018-01-17T18:28:45Z,2018-01-17T20:12:16Z,2018-01-17T20:27:21Z,MERGED,True,19,14,3,https://github.com/vixentael,add token protect checks for iOS,1,"['O-iOS :iphone:', 'tests']",https://github.com/cossacklabs/themis/pull/283,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/283,"Add check that encrypted message length is equal to plaintext message length for SecureCell TokenProtect mode.
Similar to #282 but for iOS wrapper.","Add check that encrypted message length is equal to plaintext message length for SecureCell TokenProtect mode.
Similar to #282 but for iOS wrapper.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,284,2018-01-18T09:39:10Z,2018-01-18T10:56:27Z,2018-01-18T10:56:28Z,MERGED,True,118,0,8,https://github.com/mozhmike,php tests with composer setup,1,['W-PHPThemis :elephant:'],https://github.com/cossacklabs/themis/pull/284,https://github.com/mozhmike,1,https://github.com/cossacklabs/themis/pull/284,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,285,2018-01-18T12:49:03Z,2018-01-25T14:31:24Z,2018-01-26T09:51:40Z,MERGED,True,469,381,17,https://github.com/mozhmike,PHP-tests fixes,37,['W-PHPThemis :elephant:'],https://github.com/cossacklabs/themis/pull/285,https://github.com/mozhmike,1,https://github.com/cossacklabs/themis/pull/285,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,285,2018-01-18T12:49:03Z,2018-01-25T14:31:24Z,2018-01-26T09:51:40Z,MERGED,True,469,381,17,https://github.com/mozhmike,PHP-tests fixes,37,['W-PHPThemis :elephant:'],https://github.com/cossacklabs/themis/pull/285,https://github.com/mozhmike,2,https://github.com/cossacklabs/themis/pull/285#issuecomment-360060842,,"There are next problems:
lcov --directory . --capture --output-file coverage.info Capturing coverage data from . geninfo: ERROR: need tool gcov! lcov --directory . --capture --output-file coverage.info returned exit code 29
`
make test_python
...
build/tests/pythemis_test.sh
EEEEE
ERROR: test_scell (unittest.loader.ModuleImportFailure)
ImportError: Failed to import test module: test_scell
`",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,286,2018-01-19T11:41:17Z,2018-01-19T13:41:55Z,2018-02-06T14:46:33Z,MERGED,True,36,3,2,https://github.com/Lagovas,fix segfault when incorrect private key,1,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/286,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/286,"added assigning NULL to context pointer to avoid double free (https://github.com/cossacklabs/themis/blob/master/src/soter/openssl/soter_asym_cipher.c#L111)
plus regression tests","added assigning NULL to context pointer to avoid double free (https://github.com/cossacklabs/themis/blob/master/src/soter/openssl/soter_asym_cipher.c#L111)
plus regression tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,287,2018-01-19T15:45:29Z,2018-01-20T13:43:56Z,2018-01-20T13:44:08Z,MERGED,True,2,3,1,https://github.com/vixentael,small fixes in secure comparator,1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/287,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/287,fixed typo,fixed typo,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,288,2018-01-20T13:44:51Z,2018-01-21T19:49:42Z,2018-01-21T19:49:45Z,MERGED,True,218,6,15,https://github.com/vixentael,add ios secure comparator tests,6,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/288,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/288,"Based on #287
Update tests and examples","Based on #287
Update tests and examples",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,289,2018-01-22T11:05:30Z,2018-01-22T15:39:40Z,2018-02-06T14:46:26Z,MERGED,True,181,0,4,https://github.com/Lagovas,python integration tests,3,"['W-PyThemis :snake:', 'tests']",https://github.com/cossacklabs/themis/pull/289,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/289,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,290,2018-01-22T15:47:13Z,2018-01-22T16:07:57Z,2018-02-06T14:46:25Z,MERGED,True,3,1,1,https://github.com/Lagovas,fix macros redefinition,1,"['core', 'compatibility']",https://github.com/cossacklabs/themis/pull/290,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/290,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,291,2018-01-22T15:47:49Z,2018-01-25T14:23:58Z,2019-09-27T13:31:04Z,CLOSED,False,270,0,7,https://github.com/Lagovas,js integration scripts,3,"['tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/291,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/291,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,291,2018-01-22T15:47:49Z,2018-01-25T14:23:58Z,2019-09-27T13:31:04Z,CLOSED,False,270,0,7,https://github.com/Lagovas,js integration scripts,3,"['tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/291,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/291#issuecomment-360480822,,included to #293,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,292,2018-01-23T14:48:08Z,2018-01-25T15:34:15Z,2018-02-06T14:46:17Z,MERGED,True,776,462,20,https://github.com/Lagovas,cpp tests,41,"['W-ThemisPP :crossed_swords:', 'tests']",https://github.com/cossacklabs/themis/pull/292,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/292,"test cell seal + context
test cell token protect with[out] context
test cell context imprint with[out] context
fix key generator
test sign/verify via secure message
build themispp and themispp tests via cmake","test cell seal + context
test cell token protect with[out] context
test cell context imprint with[out] context
fix key generator
test sign/verify via secure message
build themispp and themispp tests via cmake",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,293,2018-01-24T16:15:48Z,2018-01-25T14:32:59Z,2019-09-27T13:31:04Z,MERGED,True,1238,114,27,https://github.com/Lagovas,smessage integration,13,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/293,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/293,"each themis module tested separately
secure messages tested in encryption and signing mode
completed other integration suits (some cross-language tests wasn't added and that why decided to split them and add table of supported links of languages)","each themis module tested separately
secure messages tested in encryption and signing mode
completed other integration suits (some cross-language tests wasn't added and that why decided to split them and add table of supported links of languages)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,294,2018-01-25T15:30:51Z,2018-01-25T17:06:05Z,2018-02-06T14:46:16Z,MERGED,True,186,186,32,https://github.com/Lagovas,move encrypt/decrypt/sign/verify scripts to tools,1,"['enhancement', 'tests']",https://github.com/cossacklabs/themis/pull/294,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/294,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,295,2018-01-26T12:18:13Z,2018-01-26T12:32:05Z,2018-02-02T22:09:13Z,MERGED,True,121,106,3,https://github.com/Lagovas,Circle20,11,"['enhancement', 'infrastructure']",https://github.com/cossacklabs/themis/pull/295,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/295,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,296,2018-01-26T20:30:46Z,2018-01-26T22:51:55Z,2018-01-26T22:52:17Z,MERGED,True,5,1,1,https://github.com/vixentael,fixing java path in makefile,4,"['O-macOS :computer:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/296,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/296,fixing java path if java not installed (broken after #295 ),fixing java path if java not installed (broken after #295 ),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,297,2018-01-28T10:33:31Z,2018-01-29T15:23:12Z,2018-01-29T15:25:21Z,MERGED,True,31,19,1,https://github.com/shadinua,Remove `install` dependencies.,5,['infrastructure'],https://github.com/cossacklabs/themis/pull/297,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/297,"When wrappers are installed in its own environment (such as Python, Ruby), they
do not require sudo as make install command. Moreover, sudo will not have
environment paths to successfully run language-specific commands
(gem, pip, etc.).
Also install_all target was removed. This target doesn't fit into logic with independent using sudo.","When wrappers are installed in its own environment (such as Python, Ruby), they
do not require sudo as make install command. Moreover, sudo will not have
environment paths to successfully run language-specific commands
(gem, pip, etc.).
Also install_all target was removed. This target doesn't fit into logic with independent using sudo.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,297,2018-01-28T10:33:31Z,2018-01-29T15:23:12Z,2018-01-29T15:25:21Z,MERGED,True,31,19,1,https://github.com/shadinua,Remove `install` dependencies.,5,['infrastructure'],https://github.com/cossacklabs/themis/pull/297,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/297#issuecomment-361087644,"When wrappers are installed in its own environment (such as Python, Ruby), they
do not require sudo as make install command. Moreover, sudo will not have
environment paths to successfully run language-specific commands
(gem, pip, etc.).
Also install_all target was removed. This target doesn't fit into logic with independent using sudo.","Sweet!
I re-read our wiki, and I believe that removing install_all and install for every wrapper won't harm users.
@shadinua please merge master to your branch and make sure that tests are passing on CircleCI.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,297,2018-01-28T10:33:31Z,2018-01-29T15:23:12Z,2018-01-29T15:25:21Z,MERGED,True,31,19,1,https://github.com/shadinua,Remove `install` dependencies.,5,['infrastructure'],https://github.com/cossacklabs/themis/pull/297,https://github.com/Lagovas,3,https://github.com/cossacklabs/themis/pull/297#issuecomment-361207199,"When wrappers are installed in its own environment (such as Python, Ruby), they
do not require sudo as make install command. Moreover, sudo will not have
environment paths to successfully run language-specific commands
(gem, pip, etc.).
Also install_all target was removed. This target doesn't fit into logic with independent using sudo.","as I understand install target was used in all *themis_install because all of them require installed libthemis core library and some of them will fail without it. and to ease installing by one command make themiscpp_install was added install target that will build and install if not exists.
but I agree, such scheme add some problems when wrappers require sudo to install
but maybe would be good to add check is installed core library before installing wrapper and print some warning and terminate installing?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,297,2018-01-28T10:33:31Z,2018-01-29T15:23:12Z,2018-01-29T15:25:21Z,MERGED,True,31,19,1,https://github.com/shadinua,Remove `install` dependencies.,5,['infrastructure'],https://github.com/cossacklabs/themis/pull/297,https://github.com/shadinua,4,https://github.com/cossacklabs/themis/pull/297#issuecomment-361228473,"When wrappers are installed in its own environment (such as Python, Ruby), they
do not require sudo as make install command. Moreover, sudo will not have
environment paths to successfully run language-specific commands
(gem, pip, etc.).
Also install_all target was removed. This target doesn't fit into logic with independent using sudo.","@vixentael, I have merged master -> shadinua/install_scripts and all tests have passed successfully.
@Lagovas, of course, it is not bad idea to add checks. Could you list all the dependencies we have to check for each of our wrappers?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,297,2018-01-28T10:33:31Z,2018-01-29T15:23:12Z,2018-01-29T15:25:21Z,MERGED,True,31,19,1,https://github.com/shadinua,Remove `install` dependencies.,5,['infrastructure'],https://github.com/cossacklabs/themis/pull/297,https://github.com/Lagovas,5,https://github.com/cossacklabs/themis/pull/297#issuecomment-361231077,"When wrappers are installed in its own environment (such as Python, Ruby), they
do not require sudo as make install command. Moreover, sudo will not have
environment paths to successfully run language-specific commands
(gem, pip, etc.).
Also install_all target was removed. This target doesn't fit into logic with independent using sudo.","of course, it is not bad idea to add checks. Could you list all the dependencies we have to check for each of our wrappers?

check that themis library installed. the easiest way to check it is check that ldconfig -p output contain */libthemis.so and */libsoter.so",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,297,2018-01-28T10:33:31Z,2018-01-29T15:23:12Z,2018-01-29T15:25:21Z,MERGED,True,31,19,1,https://github.com/shadinua,Remove `install` dependencies.,5,['infrastructure'],https://github.com/cossacklabs/themis/pull/297,https://github.com/shadinua,6,https://github.com/cossacklabs/themis/pull/297#issuecomment-361236222,"When wrappers are installed in its own environment (such as Python, Ruby), they
do not require sudo as make install command. Moreover, sudo will not have
environment paths to successfully run language-specific commands
(gem, pip, etc.).
Also install_all target was removed. This target doesn't fit into logic with independent using sudo.","Surely, it is not a big problem just to check if the system has libs. And ldconfig is just one of possible ways to do it (BTW, ldconfig only works with Linux, and also we have to write logic for other systems we support at the moment).
But, if I have correctly grasped the idea, you care about fails which might be appear if dependencies absent. So it is not enough to check only libthemis libs in this case. Should we check all dependencies for each platform/wrapper combination?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,297,2018-01-28T10:33:31Z,2018-01-29T15:23:12Z,2018-01-29T15:25:21Z,MERGED,True,31,19,1,https://github.com/shadinua,Remove `install` dependencies.,5,['infrastructure'],https://github.com/cossacklabs/themis/pull/297,https://github.com/Lagovas,7,https://github.com/cossacklabs/themis/pull/297#issuecomment-361237229,"When wrappers are installed in its own environment (such as Python, Ruby), they
do not require sudo as make install command. Moreover, sudo will not have
environment paths to successfully run language-specific commands
(gem, pip, etc.).
Also install_all target was removed. This target doesn't fit into logic with independent using sudo.","IMHO enough check that system has themis core library. core library has libssl dependency but it can't be compiled without libssl (from sources they will have compilation errors, from package manager it will download all dependencies)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,297,2018-01-28T10:33:31Z,2018-01-29T15:23:12Z,2018-01-29T15:25:21Z,MERGED,True,31,19,1,https://github.com/shadinua,Remove `install` dependencies.,5,['infrastructure'],https://github.com/cossacklabs/themis/pull/297,https://github.com/vixentael,8,https://github.com/cossacklabs/themis/pull/297#issuecomment-361279667,"When wrappers are installed in its own environment (such as Python, Ruby), they
do not require sudo as make install command. Moreover, sudo will not have
environment paths to successfully run language-specific commands
(gem, pip, etc.).
Also install_all target was removed. This target doesn't fit into logic with independent using sudo.","Thank you @shadinua!
@Lagovas you have a point! We surely will add these checks in next PRs.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,298,2018-01-29T13:27:13Z,2018-01-29T15:29:27Z,2018-01-29T15:29:30Z,MERGED,True,381,12,4,https://github.com/mozhmike,Mozh/t390 php memory leakage,30,"['W-PHPThemis :elephant:', 'tests']",https://github.com/cossacklabs/themis/pull/298,https://github.com/mozhmike,1,https://github.com/cossacklabs/themis/pull/298,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,299,2018-01-29T16:01:14Z,2018-01-30T10:15:55Z,2018-01-30T10:24:22Z,MERGED,True,44,7,3,https://github.com/vixentael,add integration tests in circleci,12,['infrastructure'],https://github.com/cossacklabs/themis/pull/299,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/299,running integration tests in circle ci,running integration tests in circle ci,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,300,2018-01-30T11:15:46Z,2018-01-30T12:43:38Z,2018-02-06T14:46:15Z,MERGED,True,32,27,3,https://github.com/Lagovas,separate pythemis install,1,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'tests']",https://github.com/cossacklabs/themis/pull/300,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/300,"explicitly use python2 and python3
install python X version if exists, don't fail if one not exists (before installing come down when python2 not exists)
same with tests, test all versions that exists (2, 3, 2+3)
plus dropped linking phpthemis.so + fixed php.ini (because has a failure when tested locally and found that it is overhead)","explicitly use python2 and python3
install python X version if exists, don't fail if one not exists (before installing come down when python2 not exists)
same with tests, test all versions that exists (2, 3, 2+3)
plus dropped linking phpthemis.so + fixed php.ini (because has a failure when tested locally and found that it is overhead)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,300,2018-01-30T11:15:46Z,2018-01-30T12:43:38Z,2018-02-06T14:46:15Z,MERGED,True,32,27,3,https://github.com/Lagovas,separate pythemis install,1,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'tests']",https://github.com/cossacklabs/themis/pull/300,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/300#issuecomment-361582098,"explicitly use python2 and python3
install python X version if exists, don't fail if one not exists (before installing come down when python2 not exists)
same with tests, test all versions that exists (2, 3, 2+3)
plus dropped linking phpthemis.so + fixed php.ini (because has a failure when tested locally and found that it is overhead)","Note for future us: Circle Ci launched & successfully run all 4 workflows, but is showing only one.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,301,2018-01-31T13:00:47Z,2018-02-01T12:15:26Z,2018-02-02T22:14:04Z,CLOSED,False,25,0,1,https://github.com/Lagovas,test php 7.0 and 7.1,2,"['W-PHPThemis :elephant:', 'tests']",https://github.com/cossacklabs/themis/pull/301,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/301,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,301,2018-01-31T13:00:47Z,2018-02-01T12:15:26Z,2018-02-02T22:14:04Z,CLOSED,False,25,0,1,https://github.com/Lagovas,test php 7.0 and 7.1,2,"['W-PHPThemis :elephant:', 'tests']",https://github.com/cossacklabs/themis/pull/301,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/301#issuecomment-361937063,,let's investigate unit / memory tests failure for php,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,301,2018-01-31T13:00:47Z,2018-02-01T12:15:26Z,2018-02-02T22:14:04Z,CLOSED,False,25,0,1,https://github.com/Lagovas,test php 7.0 and 7.1,2,"['W-PHPThemis :elephant:', 'tests']",https://github.com/cossacklabs/themis/pull/301,https://github.com/Lagovas,3,https://github.com/cossacklabs/themis/pull/301#issuecomment-362248591,,merged to #303,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,302,2018-01-31T17:56:30Z,2018-02-01T07:17:00Z,2019-09-27T13:31:05Z,MERGED,True,32,21,5,https://github.com/vixentael,update nodejs installation,8,"['tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/302,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/302,"Add jsthemis_install as separate step in makefile.
Downgrade to system nodejs version for integration tests.
Fix integration tests to be compatible with v4.2.6.","Add jsthemis_install as separate step in makefile.
Downgrade to system nodejs version for integration tests.
Fix integration tests to be compatible with v4.2.6.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,303,2018-02-01T12:15:08Z,2018-02-01T15:09:18Z,2018-02-06T14:46:01Z,MERGED,True,43,5,6,https://github.com/Lagovas,use phpunit 6.3.1 for php 7.0 and 7.1,1,"['W-PHPThemis :elephant:', 'tests']",https://github.com/cossacklabs/themis/pull/303,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/303,"use last phpunit for php7.2+
use phpunit 6.3.1 for php 7.0 and 7.1
disabled testing memory leaks in php until we fix it to stop tests failure in circleci
add php tests for php 7.0, 7.1, 7.2 via different docker images (merged code from #301 to test this PR)","use last phpunit for php7.2+
use phpunit 6.3.1 for php 7.0 and 7.1
disabled testing memory leaks in php until we fix it to stop tests failure in circleci
add php tests for php 7.0, 7.1, 7.2 via different docker images (merged code from #301 to test this PR)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,304,2018-02-01T15:33:14Z,2018-02-01T15:51:43Z,2018-02-04T21:59:13Z,MERGED,True,102,11,7,https://github.com/mozhmike,Mozh/t380 php package,35,"['W-PHPThemis :elephant:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/304,https://github.com/mozhmike,1,https://github.com/cossacklabs/themis/pull/304,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,305,2018-02-01T16:06:41Z,2018-02-01T16:18:41Z,2018-02-06T14:46:02Z,MERGED,True,219,0,7,https://github.com/Lagovas,keygen tools,2,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/305,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/305,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,306,2018-02-02T14:11:12Z,2018-02-02T15:04:04Z,2018-02-06T14:46:06Z,MERGED,True,143,846,21,https://github.com/Lagovas,Lagovas/t422 generate integration tests,2,[],https://github.com/cossacklabs/themis/pull/306,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/306,"generate scripts for integrations tests
manage for which languages generate scripts via GENERATE_LANGUAGES env variable with value like php,python,ruby","generate scripts for integrations tests
manage for which languages generate scripts via GENERATE_LANGUAGES env variable with value like php,python,ruby",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,307,2018-02-02T16:17:07Z,2018-02-02T16:23:43Z,2018-02-06T14:46:06Z,MERGED,True,3,5,2,https://github.com/Lagovas,use python2 to generate integration scripts,4,[],https://github.com/cossacklabs/themis/pull/307,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/307,dropped type annotations that not understand python2,dropped type annotations that not understand python2,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,308,2018-02-05T17:25:24Z,2018-02-06T10:09:40Z,2018-02-06T14:45:23Z,MERGED,True,8,19,1,https://github.com/mozhmike,Mozh/t380 php package,39,"['W-PHPThemis :elephant:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/308,https://github.com/mozhmike,1,https://github.com/cossacklabs/themis/pull/308,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,309,2018-02-06T09:36:35Z,2018-02-06T10:58:30Z,2018-02-06T10:58:33Z,MERGED,True,73,12,2,https://github.com/vixentael,Update changelog for 0.10.0,4,['docs :books:'],https://github.com/cossacklabs/themis/pull/309,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/309,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,310,2018-02-06T12:16:59Z,2018-02-06T13:21:48Z,2018-02-06T14:45:11Z,MERGED,True,17,16,10,https://github.com/Lagovas,update versions,10,[],https://github.com/cossacklabs/themis/pull/310,https://github.com/Lagovas,1,https://github.com/cossacklabs/themis/pull/310,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,311,2018-02-06T12:26:12Z,2018-02-06T12:53:11Z,2018-02-06T12:53:14Z,MERGED,True,218,218,15,https://github.com/vixentael,update ios examples to use 0.10.0,3,[],https://github.com/cossacklabs/themis/pull/311,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/311,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,312,2018-02-06T14:46:31Z,2018-02-06T14:47:29Z,2018-02-06T14:47:29Z,MERGED,True,5450,1751,168,https://github.com/vixentael,release 0.10.0,90,[],https://github.com/cossacklabs/themis/pull/312,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/312,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,314,2018-05-10T06:45:36Z,2018-05-10T15:33:42Z,2018-05-10T15:33:42Z,MERGED,True,1,1,1,https://github.com/movie-travel-code,Fix the misusage of short-circuit evaluation in 'soter_sign_ecdsa.c',1,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/314,https://github.com/movie-travel-code,1,https://github.com/cossacklabs/themis/pull/314,"I'm henry wong, from Qihoo360 CodeSafe Team. We found a possible null
pointer deference caused by the misusage of short-circuit evaluation. If
pkey is null, the program will continue execute EVP_PKEY_base_id(pkey),
and this will cause a null pointer dereference.
Since I'm unfamiliar with themis,  please forgive me if there is anything
wrong with my description.
Henry Wong
Qihoo360 CodeSafe Team","I'm henry wong, from Qihoo360 CodeSafe Team. We found a possible null
pointer deference caused by the misusage of short-circuit evaluation. If
pkey is null, the program will continue execute EVP_PKEY_base_id(pkey),
and this will cause a null pointer dereference.
Since I'm unfamiliar with themis,  please forgive me if there is anything
wrong with my description.
Henry Wong
Qihoo360 CodeSafe Team",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,314,2018-05-10T06:45:36Z,2018-05-10T15:33:42Z,2018-05-10T15:33:42Z,MERGED,True,1,1,1,https://github.com/movie-travel-code,Fix the misusage of short-circuit evaluation in 'soter_sign_ecdsa.c',1,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/314,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/314#issuecomment-388006658,"I'm henry wong, from Qihoo360 CodeSafe Team. We found a possible null
pointer deference caused by the misusage of short-circuit evaluation. If
pkey is null, the program will continue execute EVP_PKEY_base_id(pkey),
and this will cause a null pointer dereference.
Since I'm unfamiliar with themis,  please forgive me if there is anything
wrong with my description.
Henry Wong
Qihoo360 CodeSafe Team","Thank you! Very good catch.
We found similar line in boringssl wrapper
https://github.com/cossacklabs/themis/blob/master/src/soter/boringssl/soter_sign_ecdsa.c#L93
We plan to fix both places and to add some tests.
Please, change target branch to
https://github.com/cossacklabs/themis/tree/soter_pk_fixes
We will merge your changes into soter_pk_fixes, and add few new checks.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,315,2018-05-10T15:38:58Z,2018-05-11T09:45:32Z,2019-03-27T22:41:01Z,MERGED,True,10,3,2,https://github.com/vixentael,Refactoring if (!pkey) in 'soter_sign_ecdsa.c' for OpenSSL/BoringSSL,10,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/315,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/315,"Based on #314
We've added similar check into BoringSSL-related code.
Unfortunately we didn't find any ways to simulate NULL pKey using OpenSSL API.
Thank you @movie-travel-code!","Based on #314
We've added similar check into BoringSSL-related code.
Unfortunately we didn't find any ways to simulate NULL pKey using OpenSSL API.
Thank you @movie-travel-code!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,317,2018-08-08T10:07:00Z,2018-08-08T10:30:31Z,2018-08-08T10:30:35Z,MERGED,True,22,20,5,https://github.com/vixentael,"refresh objcthemis build files, and fix doc typos",1,"['O-iOS :iphone:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/317,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/317,"I was annoyed by clang doc check:
- WARN  | [acrawriter] xcodebuild:  Headers/Private/themis/objcthemis/skeygen.h:53:15: warning: parameter 'algorithm,' not found in the function declaration [-Wdocumentation]
- NOTE  | [acrawriter] xcodebuild:  Headers/Private/themis/objcthemis/skeygen.h:53:15: note: did you mean 'algorithm'?","I was annoyed by clang doc check:
- WARN  | [acrawriter] xcodebuild:  Headers/Private/themis/objcthemis/skeygen.h:53:15: warning: parameter 'algorithm,' not found in the function declaration [-Wdocumentation]
- NOTE  | [acrawriter] xcodebuild:  Headers/Private/themis/objcthemis/skeygen.h:53:15: note: did you mean 'algorithm'?",True,{'LAUGH': ['https://github.com/Lagovas']}
cossacklabs/themis,https://github.com/cossacklabs/themis,319,2018-08-29T18:30:16Z,2018-08-29T18:49:54Z,2018-08-29T18:49:55Z,MERGED,True,18,3,1,https://github.com/ignatk,Reinit sign context in soter tests,1,['tests'],https://github.com/cossacklabs/themis/pull/319,https://github.com/ignatk,1,https://github.com/cossacklabs/themis/pull/319,"When we verify signature (even incorrect one), usually the internal hash/digest
context is finalised and cannot be reused. OpenSSL is one exception: by default
it creates an internal copy of the digest context and finalises the copy, so the
original context can be reused, but it is not a generic case. Since Themis may
have other cryptobackends, update the test to cover more generic cases, where
internal hash context cannot be reused.","When we verify signature (even incorrect one), usually the internal hash/digest
context is finalised and cannot be reused. OpenSSL is one exception: by default
it creates an internal copy of the digest context and finalises the copy, so the
original context can be reused, but it is not a generic case. Since Themis may
have other cryptobackends, update the test to cover more generic cases, where
internal hash context cannot be reused.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,319,2018-08-29T18:30:16Z,2018-08-29T18:49:54Z,2018-08-29T18:49:55Z,MERGED,True,18,3,1,https://github.com/ignatk,Reinit sign context in soter tests,1,['tests'],https://github.com/cossacklabs/themis/pull/319,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/319#issuecomment-417061484,"When we verify signature (even incorrect one), usually the internal hash/digest
context is finalised and cannot be reused. OpenSSL is one exception: by default
it creates an internal copy of the digest context and finalises the copy, so the
original context can be reused, but it is not a generic case. Since Themis may
have other cryptobackends, update the test to cover more generic cases, where
internal hash context cannot be reused.","thank you, nice catch!
is it the only test that should be updated in such way?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,319,2018-08-29T18:30:16Z,2018-08-29T18:49:54Z,2018-08-29T18:49:55Z,MERGED,True,18,3,1,https://github.com/ignatk,Reinit sign context in soter tests,1,['tests'],https://github.com/cossacklabs/themis/pull/319,https://github.com/ignatk,3,https://github.com/cossacklabs/themis/pull/319#issuecomment-417063148,"When we verify signature (even incorrect one), usually the internal hash/digest
context is finalised and cannot be reused. OpenSSL is one exception: by default
it creates an internal copy of the digest context and finalises the copy, so the
original context can be reused, but it is not a generic case. Since Themis may
have other cryptobackends, update the test to cover more generic cases, where
internal hash context cannot be reused.","Seems so. There is hmac as well, but we don't use hmac from backends, rather we have own implementation, which uses only hash from the backend.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,321,2018-09-05T15:14:39Z,2018-09-05T16:55:14Z,2019-02-03T16:16:47Z,MERGED,True,9,4,1,https://github.com/shadinua,Added ldconfig to install target,2,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/321,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/321,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,321,2018-09-05T15:14:39Z,2018-09-05T16:55:14Z,2019-02-03T16:16:47Z,MERGED,True,9,4,1,https://github.com/shadinua,Added ldconfig to install target,2,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/321,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/321#issuecomment-418803248,,"Awesome, thank you @shadinua
This fix should prevent from issues similar to #320",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,323,2018-09-20T11:09:41Z,2018-09-20T16:07:55Z,2018-09-20T16:07:55Z,MERGED,True,11,0,1,https://github.com/storojs72,Add auth_tag value testing,1,['core'],https://github.com/cossacklabs/themis/pull/323,https://github.com/storojs72,1,https://github.com/cossacklabs/themis/pull/323,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,326,2018-10-09T14:50:34Z,2018-10-10T11:45:50Z,2019-09-27T13:31:06Z,MERGED,True,7,7,7,https://github.com/deszip,NaN ’NewInstance’ API fix,1,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/326,https://github.com/deszip,1,https://github.com/cossacklabs/themis/pull/326,"NewInstance method in NaN seems to lack version with only two arguments (argc and argv). Maybe it was removed at some time. Only three versions exist for now: Source
I've changed js wrapper to use correct version.","NewInstance method in NaN seems to lack version with only two arguments (argc and argv). Maybe it was removed at some time. Only three versions exist for now: Source
I've changed js wrapper to use correct version.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,326,2018-10-09T14:50:34Z,2018-10-10T11:45:50Z,2019-09-27T13:31:06Z,MERGED,True,7,7,7,https://github.com/deszip,NaN ’NewInstance’ API fix,1,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/326,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/326#issuecomment-428224003,"NewInstance method in NaN seems to lack version with only two arguments (argc and argv). Maybe it was removed at some time. Only three versions exist for now: Source
I've changed js wrapper to use correct version.","thank you @deszip!
so this should fix jsthemis for Node v10, right?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,326,2018-10-09T14:50:34Z,2018-10-10T11:45:50Z,2019-09-27T13:31:06Z,MERGED,True,7,7,7,https://github.com/deszip,NaN ’NewInstance’ API fix,1,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/326,https://github.com/deszip,3,https://github.com/cossacklabs/themis/pull/326#issuecomment-428224884,"NewInstance method in NaN seems to lack version with only two arguments (argc and argv). Maybe it was removed at some time. Only three versions exist for now: Source
I've changed js wrapper to use correct version.","Yep, tested on node 10.9.0",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,326,2018-10-09T14:50:34Z,2018-10-10T11:45:50Z,2019-09-27T13:31:06Z,MERGED,True,7,7,7,https://github.com/deszip,NaN ’NewInstance’ API fix,1,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/326,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/326#issuecomment-428541091,"NewInstance method in NaN seems to lack version with only two arguments (argc and argv). Maybe it was removed at some time. Only three versions exist for now: Source
I've changed js wrapper to use correct version.","Great, this PR will fix #325

Will merge to vixentael/jsthemis-fix branch first to test with Nodejs < 10.
Will merge to master next",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,326,2018-10-09T14:50:34Z,2018-10-10T11:45:50Z,2019-09-27T13:31:06Z,MERGED,True,7,7,7,https://github.com/deszip,NaN ’NewInstance’ API fix,1,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/326,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/326#issuecomment-428557537,"NewInstance method in NaN seems to lack version with only two arguments (argc and argv). Maybe it was removed at some time. Only three versions exist for now: Source
I've changed js wrapper to use correct version.","I've made new PR #327  based on these changes.
@deszip take a look!
Updated version of jsthemis@0.10.1 is available in npm.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,327,2018-10-10T12:44:15Z,2018-10-10T12:58:39Z,2019-09-27T13:31:07Z,MERGED,True,24,24,14,https://github.com/vixentael,jsthemis update (support new versions of NaN and Nodejs),2,"['installation', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/327,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/327,"Merge @deszip update for jsthemis wrapper #326  (using new NaN API for NewInstance call).
Update js examples.
Test on Node v8, Node v9, Node v10.10 and NaN versions 2.8 - 2.11.
Update package.json and publish new version of jsthemis.
Update Nodejs docs.

Should fix #325","Merge @deszip update for jsthemis wrapper #326  (using new NaN API for NewInstance call).
Update js examples.
Test on Node v8, Node v9, Node v10.10 and NaN versions 2.8 - 2.11.
Update package.json and publish new version of jsthemis.
Update Nodejs docs.

Should fix #325",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,328,2018-10-16T13:25:39Z,2018-10-16T13:33:00Z,2018-10-16T13:33:03Z,MERGED,True,10,2,1,https://github.com/vixentael,Fix PHP tests by updating SHA of installer,1,['W-PHPThemis :elephant:'],https://github.com/cossacklabs/themis/pull/328,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/328,"Composer installer was updated at some point, I've updated signature of installer and refactor installation code a bit.
Should see more user-friendly messages if installer will be updated again.","Composer installer was updated at some point, I've updated signature of installer and refactor installation code a bit.
Should see more user-friendly messages if installer will be updated again.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,328,2018-10-16T13:25:39Z,2018-10-16T13:33:00Z,2018-10-16T13:33:03Z,MERGED,True,10,2,1,https://github.com/vixentael,Fix PHP tests by updating SHA of installer,1,['W-PHPThemis :elephant:'],https://github.com/cossacklabs/themis/pull/328,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/328#issuecomment-430238342,"Composer installer was updated at some point, I've updated signature of installer and refactor installation code a bit.
Should see more user-friendly messages if installer will be updated again.","yey, PHP tests are fixed!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,329,2018-10-25T11:14:00Z,2018-10-25T11:38:43Z,2019-01-24T13:15:34Z,MERGED,True,9,2,2,https://github.com/vixentael,Allow to disable reference of AES-256-XTS for Themis iOS,18,['core'],https://github.com/cossacklabs/themis/pull/329,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/329,"Currently building Themis iOS with BoringSSL as backend leads to error:
Undefined symbols for architecture x86_64:
  ""_EVP_aes_256_xts"", referenced from:
      _algid_to_evp in libthemis.a(soter_sym.o)
ld: symbol(s) not found for architecture x86_64

AES-256-XTS implementation is missing in BoringSSL CocoaPod. BoringSSL CocoaPod is rather popular and used in thousands apps, and probably they had a reason to exclude XTS, so I won't suggest them to change their podspec.
However, Themis is not really using XTS mode (see search results), but soter_sym has two references on it (see soter/openssl/soter_sym and soter/boringssl/soter_sym).
I suggest to have a way to exclude references to EVP_aes_256_xts for Themis iOS using  #define SOTER_BORINGSSL_DISABLE_XTS.
This change won't affect other platforms, but will be used only in themis.podspec for iOS.","Currently building Themis iOS with BoringSSL as backend leads to error:
Undefined symbols for architecture x86_64:
  ""_EVP_aes_256_xts"", referenced from:
      _algid_to_evp in libthemis.a(soter_sym.o)
ld: symbol(s) not found for architecture x86_64

AES-256-XTS implementation is missing in BoringSSL CocoaPod. BoringSSL CocoaPod is rather popular and used in thousands apps, and probably they had a reason to exclude XTS, so I won't suggest them to change their podspec.
However, Themis is not really using XTS mode (see search results), but soter_sym has two references on it (see soter/openssl/soter_sym and soter/boringssl/soter_sym).
I suggest to have a way to exclude references to EVP_aes_256_xts for Themis iOS using  #define SOTER_BORINGSSL_DISABLE_XTS.
This change won't affect other platforms, but will be used only in themis.podspec for iOS.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,329,2018-10-25T11:14:00Z,2018-10-25T11:38:43Z,2019-01-24T13:15:34Z,MERGED,True,9,2,2,https://github.com/vixentael,Allow to disable reference of AES-256-XTS for Themis iOS,18,['core'],https://github.com/cossacklabs/themis/pull/329,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/329#issuecomment-433014136,"Currently building Themis iOS with BoringSSL as backend leads to error:
Undefined symbols for architecture x86_64:
  ""_EVP_aes_256_xts"", referenced from:
      _algid_to_evp in libthemis.a(soter_sym.o)
ld: symbol(s) not found for architecture x86_64

AES-256-XTS implementation is missing in BoringSSL CocoaPod. BoringSSL CocoaPod is rather popular and used in thousands apps, and probably they had a reason to exclude XTS, so I won't suggest them to change their podspec.
However, Themis is not really using XTS mode (see search results), but soter_sym has two references on it (see soter/openssl/soter_sym and soter/boringssl/soter_sym).
I suggest to have a way to exclude references to EVP_aes_256_xts for Themis iOS using  #define SOTER_BORINGSSL_DISABLE_XTS.
This change won't affect other platforms, but will be used only in themis.podspec for iOS.","Should we also add logic in the makefile, which will add SOTER_BORINGSSL_DISABLE_XTS if building Themis on iOS with BoringSSL?

Themis for iOS is not built via Makefile, so no need to change it.",True,{'THUMBS_UP': ['https://github.com/ignatk']}
cossacklabs/themis,https://github.com/cossacklabs/themis,330,2018-10-25T11:54:50Z,2018-10-30T17:57:26Z,2018-10-30T18:18:58Z,MERGED,True,684,480,23,https://github.com/vixentael,Enable BoringSSL for Themis iOS cocoapod,22,"['O-iOS :iphone:', 'core']",https://github.com/cossacklabs/themis/pull/330,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/330,"All below valid for Themis iOS/macOS wrapper and examples.
Should be merged after #223 .
I've tested Themis objcwrapper with BoringSSL iOS pod to make it possible to use Themis with BoringSSL and GRPC (as mentioned in #223).

I've updated themis.podspec to contain two subspecs: themis-openssl (default) and themis-boringssl. Now users can specify to use BoringSSL as crypto-engine for Themis in their Podfile:

  pod 'themis/themis-boringssl'

See updated spec.


iOS Themis with BoringSSL disables using XTS mode for AES, because it's not included into BoringSSL cocoapod (see #329).


iOS Themis tests are running for both themis-openssl and themis-boringssl targets.


New podspec is checked to be linted and built for iOS and macOS.","All below valid for Themis iOS/macOS wrapper and examples.
Should be merged after #223 .
I've tested Themis objcwrapper with BoringSSL iOS pod to make it possible to use Themis with BoringSSL and GRPC (as mentioned in #223).

I've updated themis.podspec to contain two subspecs: themis-openssl (default) and themis-boringssl. Now users can specify to use BoringSSL as crypto-engine for Themis in their Podfile:

  pod 'themis/themis-boringssl'

See updated spec.


iOS Themis with BoringSSL disables using XTS mode for AES, because it's not included into BoringSSL cocoapod (see #329).


iOS Themis tests are running for both themis-openssl and themis-boringssl targets.


New podspec is checked to be linted and built for iOS and macOS.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,330,2018-10-25T11:54:50Z,2018-10-30T17:57:26Z,2018-10-30T18:18:58Z,MERGED,True,684,480,23,https://github.com/vixentael,Enable BoringSSL for Themis iOS cocoapod,22,"['O-iOS :iphone:', 'core']",https://github.com/cossacklabs/themis/pull/330,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/330#issuecomment-433025136,"All below valid for Themis iOS/macOS wrapper and examples.
Should be merged after #223 .
I've tested Themis objcwrapper with BoringSSL iOS pod to make it possible to use Themis with BoringSSL and GRPC (as mentioned in #223).

I've updated themis.podspec to contain two subspecs: themis-openssl (default) and themis-boringssl. Now users can specify to use BoringSSL as crypto-engine for Themis in their Podfile:

  pod 'themis/themis-boringssl'

See updated spec.


iOS Themis with BoringSSL disables using XTS mode for AES, because it's not included into BoringSSL cocoapod (see #329).


iOS Themis tests are running for both themis-openssl and themis-boringssl targets.


New podspec is checked to be linted and built for iOS and macOS.",Do not merge until @sgammon confirms that updated Themis is compatible with GRPC :),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,330,2018-10-25T11:54:50Z,2018-10-30T17:57:26Z,2018-10-30T18:18:58Z,MERGED,True,684,480,23,https://github.com/vixentael,Enable BoringSSL for Themis iOS cocoapod,22,"['O-iOS :iphone:', 'core']",https://github.com/cossacklabs/themis/pull/330,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/330#issuecomment-433025985,"All below valid for Themis iOS/macOS wrapper and examples.
Should be merged after #223 .
I've tested Themis objcwrapper with BoringSSL iOS pod to make it possible to use Themis with BoringSSL and GRPC (as mentioned in #223).

I've updated themis.podspec to contain two subspecs: themis-openssl (default) and themis-boringssl. Now users can specify to use BoringSSL as crypto-engine for Themis in their Podfile:

  pod 'themis/themis-boringssl'

See updated spec.


iOS Themis with BoringSSL disables using XTS mode for AES, because it's not included into BoringSSL cocoapod (see #329).


iOS Themis tests are running for both themis-openssl and themis-boringssl targets.


New podspec is checked to be linted and built for iOS and macOS.",NB: after publishing podspec do not forget to update all examples to use 0.10.1.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,330,2018-10-25T11:54:50Z,2018-10-30T17:57:26Z,2018-10-30T18:18:58Z,MERGED,True,684,480,23,https://github.com/vixentael,Enable BoringSSL for Themis iOS cocoapod,22,"['O-iOS :iphone:', 'core']",https://github.com/cossacklabs/themis/pull/330,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/330#issuecomment-434400894,"All below valid for Themis iOS/macOS wrapper and examples.
Should be merged after #223 .
I've tested Themis objcwrapper with BoringSSL iOS pod to make it possible to use Themis with BoringSSL and GRPC (as mentioned in #223).

I've updated themis.podspec to contain two subspecs: themis-openssl (default) and themis-boringssl. Now users can specify to use BoringSSL as crypto-engine for Themis in their Podfile:

  pod 'themis/themis-boringssl'

See updated spec.


iOS Themis with BoringSSL disables using XTS mode for AES, because it's not included into BoringSSL cocoapod (see #329).


iOS Themis tests are running for both themis-openssl and themis-boringssl targets.


New podspec is checked to be linted and built for iOS and macOS.","I've decided to update podspec and merge it to master, because I'll switch to other tasks soon, and will forget the context.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,330,2018-10-25T11:54:50Z,2018-10-30T17:57:26Z,2018-10-30T18:18:58Z,MERGED,True,684,480,23,https://github.com/vixentael,Enable BoringSSL for Themis iOS cocoapod,22,"['O-iOS :iphone:', 'core']",https://github.com/cossacklabs/themis/pull/330,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/330#issuecomment-434401701,"All below valid for Themis iOS/macOS wrapper and examples.
Should be merged after #223 .
I've tested Themis objcwrapper with BoringSSL iOS pod to make it possible to use Themis with BoringSSL and GRPC (as mentioned in #223).

I've updated themis.podspec to contain two subspecs: themis-openssl (default) and themis-boringssl. Now users can specify to use BoringSSL as crypto-engine for Themis in their Podfile:

  pod 'themis/themis-boringssl'

See updated spec.


iOS Themis with BoringSSL disables using XTS mode for AES, because it's not included into BoringSSL cocoapod (see #329).


iOS Themis tests are running for both themis-openssl and themis-boringssl targets.


New podspec is checked to be linted and built for iOS and macOS.","iOS examples were updated to use 0.10.1 and tested.
Main test project (tests/objcthemis) will be linked to use Themis from master in a separate PR (because podspec should be merged to master first).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,330,2018-10-25T11:54:50Z,2018-10-30T17:57:26Z,2018-10-30T18:18:58Z,MERGED,True,684,480,23,https://github.com/vixentael,Enable BoringSSL for Themis iOS cocoapod,22,"['O-iOS :iphone:', 'core']",https://github.com/cossacklabs/themis/pull/330,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/330#issuecomment-434410033,"All below valid for Themis iOS/macOS wrapper and examples.
Should be merged after #223 .
I've tested Themis objcwrapper with BoringSSL iOS pod to make it possible to use Themis with BoringSSL and GRPC (as mentioned in #223).

I've updated themis.podspec to contain two subspecs: themis-openssl (default) and themis-boringssl. Now users can specify to use BoringSSL as crypto-engine for Themis in their Podfile:

  pod 'themis/themis-boringssl'

See updated spec.


iOS Themis with BoringSSL disables using XTS mode for AES, because it's not included into BoringSSL cocoapod (see #329).


iOS Themis tests are running for both themis-openssl and themis-boringssl targets.


New podspec is checked to be linted and built for iOS and macOS.",Solves #223,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,331,2018-10-30T18:07:09Z,2018-10-30T18:18:52Z,2018-10-30T18:18:56Z,MERGED,True,58,55,3,https://github.com/vixentael,Update Themis iOS tests to use fresh Themis podspec from master,1,"['O-iOS :iphone:', 'tests']",https://github.com/cossacklabs/themis/pull/331,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/331,A final PR for Themis iOS BoringSSL support (#330 #329) – I've updated Themis iOS tests to use latest podspec from master.,A final PR for Themis iOS BoringSSL support (#330 #329) – I've updated Themis iOS tests to use latest podspec from master.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,334,2018-11-01T16:18:04Z,2018-11-01T22:20:52Z,2018-11-02T14:24:56Z,MERGED,True,14,1,1,https://github.com/ignatk,soter: make sure we have the RSA private key before trying to decrypt…,1,['core'],https://github.com/cossacklabs/themis/pull/334,https://github.com/ignatk,1,https://github.com/cossacklabs/themis/pull/334,"… data
Some OpenSSL versions do not handle gracefully, when you try to do RSA
decryption with a public key (no private part in the RSA structure) and just
crash the whole process. So we add an explicit check we have the private part
before attempting the decryption.","… data
Some OpenSSL versions do not handle gracefully, when you try to do RSA
decryption with a public key (no private part in the RSA structure) and just
crash the whole process. So we add an explicit check we have the private part
before attempting the decryption.",True,"{'THUMBS_UP': ['https://github.com/Lagovas', 'https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,334,2018-11-01T16:18:04Z,2018-11-01T22:20:52Z,2018-11-02T14:24:56Z,MERGED,True,14,1,1,https://github.com/ignatk,soter: make sure we have the RSA private key before trying to decrypt…,1,['core'],https://github.com/cossacklabs/themis/pull/334,https://github.com/ignatk,2,https://github.com/cossacklabs/themis/pull/334#issuecomment-435096218,"… data
Some OpenSSL versions do not handle gracefully, when you try to do RSA
decryption with a public key (no private part in the RSA structure) and just
crash the whole process. So we add an explicit check we have the private part
before attempting the decryption.","Fixes #332
The crash.c program does not crash now, however, fails with 11 (which is just THEMIS_FAIL). So the proper SOTER_INVALID_PARAMETER error is not propagated properly.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,334,2018-11-01T16:18:04Z,2018-11-01T22:20:52Z,2018-11-02T14:24:56Z,MERGED,True,14,1,1,https://github.com/ignatk,soter: make sure we have the RSA private key before trying to decrypt…,1,['core'],https://github.com/cossacklabs/themis/pull/334,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/334#issuecomment-435111439,"… data
Some OpenSSL versions do not handle gracefully, when you try to do RSA
decryption with a public key (no private part in the RSA structure) and just
crash the whole process. So we add an explicit check we have the private part
before attempting the decryption.","@secumod thank you for this fix!
Could you please update code because tests are crashing at this point.
src/soter/openssl/soter_asym_cipher.c:249:2: error: implicit declaration of function 'RSA_get0_key' [-Werror=implicit-function-declaration]
  RSA_get0_key(rsa, NULL, NULL, &d);
  ^
cc1: all warnings being treated as errors
Makefile:294: recipe for target 'build/obj/soter/openssl/soter_asym_cipher.o' failed```",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,334,2018-11-01T16:18:04Z,2018-11-01T22:20:52Z,2018-11-02T14:24:56Z,MERGED,True,14,1,1,https://github.com/ignatk,soter: make sure we have the RSA private key before trying to decrypt…,1,['core'],https://github.com/cossacklabs/themis/pull/334,https://github.com/ignatk,4,https://github.com/cossacklabs/themis/pull/334#issuecomment-435115311,"… data
Some OpenSSL versions do not handle gracefully, when you try to do RSA
decryption with a public key (no private part in the RSA structure) and just
crash the whole process. So we add an explicit check we have the private part
before attempting the decryption.","Yes, I saw that - older OpenSSL libs (< 1.1.0) do not have this accessor function.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,334,2018-11-01T16:18:04Z,2018-11-01T22:20:52Z,2018-11-02T14:24:56Z,MERGED,True,14,1,1,https://github.com/ignatk,soter: make sure we have the RSA private key before trying to decrypt…,1,['core'],https://github.com/cossacklabs/themis/pull/334,https://github.com/ignatk,5,https://github.com/cossacklabs/themis/pull/334#issuecomment-435197452,"… data
Some OpenSSL versions do not handle gracefully, when you try to do RSA
decryption with a public key (no private part in the RSA structure) and just
crash the whole process. So we add an explicit check we have the private part
before attempting the decryption.","Thanks for testing. I guess we should decide separately, if we should fix the return codes. Any opinions @vixentael ?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,334,2018-11-01T16:18:04Z,2018-11-01T22:20:52Z,2018-11-02T14:24:56Z,MERGED,True,14,1,1,https://github.com/ignatk,soter: make sure we have the RSA private key before trying to decrypt…,1,['core'],https://github.com/cossacklabs/themis/pull/334,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/334#issuecomment-435206771,"… data
Some OpenSSL versions do not handle gracefully, when you try to do RSA
decryption with a public key (no private part in the RSA structure) and just
crash the whole process. So we add an explicit check we have the private part
before attempting the decryption.",This fix will be part of 0.11.0 which will be released eventually (I think it makes sense to fix all issues found by @ilammy before release).,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,334,2018-11-01T16:18:04Z,2018-11-01T22:20:52Z,2018-11-02T14:24:56Z,MERGED,True,14,1,1,https://github.com/ignatk,soter: make sure we have the RSA private key before trying to decrypt…,1,['core'],https://github.com/cossacklabs/themis/pull/334,https://github.com/vixentael,7,https://github.com/cossacklabs/themis/pull/334#issuecomment-435206896,"… data
Some OpenSSL versions do not handle gracefully, when you try to do RSA
decryption with a public key (no private part in the RSA structure) and just
crash the whole process. So we add an explicit check we have the private part
before attempting the decryption.","I guess we should decide separately, if we should fix the return codes.

@secumod agree, I think matching Soter and Themis error codes requires more discussion and is definitely a different issue. Shall we open a new one?",True,{'THUMBS_UP': ['https://github.com/ignatk']}
cossacklabs/themis,https://github.com/cossacklabs/themis,335,2018-11-02T13:10:24Z,2018-11-02T14:25:39Z,2018-11-02T14:25:59Z,MERGED,True,16,4,1,https://github.com/ignatk, Fix themis_gen_rsa_key_pair return logic,2,['core'],https://github.com/cossacklabs/themis/pull/335,https://github.com/ignatk,1,https://github.com/cossacklabs/themis/pull/335,"The function is ""overoptimised"": even if the private key export fails with
""buffer too small"", the overall return value will be success because of the
incorrect return logic. Make the logic same as in themis_gen_key_pair, which
works.
Fixes #333","The function is ""overoptimised"": even if the private key export fails with
""buffer too small"", the overall return value will be success because of the
incorrect return logic. Make the logic same as in themis_gen_key_pair, which
works.
Fixes #333",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,335,2018-11-02T13:10:24Z,2018-11-02T14:25:39Z,2018-11-02T14:25:59Z,MERGED,True,16,4,1,https://github.com/ignatk, Fix themis_gen_rsa_key_pair return logic,2,['core'],https://github.com/cossacklabs/themis/pull/335,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/335#issuecomment-435397100,"The function is ""overoptimised"": even if the private key export fails with
""buffer too small"", the overall return value will be success because of the
incorrect return logic. Make the logic same as in themis_gen_key_pair, which
works.
Fixes #333",Thank you! This fix will be part of 0.11.0.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,340,2018-11-18T15:39:08Z,2019-01-12T13:32:39Z,2019-01-17T20:13:13Z,MERGED,True,4973,0,38,https://github.com/ilammy,Initial Rust binding,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/340,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/340,"This adds initial Rust binding for Themis.
The code comes from here, version 0.0.2:
https://github.com/ilammy/rust-themis
I could have transferred the whole git history, but that's too much of a bother and I don't think anybody would be interested in it that much. If you wish to read the older commit messages you can always look into the original repo. Not very convenient but that's at least something.
The core repository layout is a bit different from a traditional one for Rust projects. I have moved the files into appropriate places and adapted the Cargo.toml file to that. Importantly, it now requires an include directive so that published crates include only Rust code.
Here's the current layout of Rust code:
.
├─ Cargo.toml           -  root Cargo.toml file
├─ docs/examples
│  └─ rust              -  Rust wrapper examples
├─ src/wrappers/themis
│  └─ rust              -  root of the ""themis"" crate
│     ├─ libthemis-sys  -  root of the ""libthemis-sys"" crate
│     └─ src            -  Rust wrapper source code
└─ tests
   └─ rust              -  Rust wrapper tests

The Cargo.toml file is placed in the root directory so that all usual Cargo commands work from there after a fresh checkout. They do work indeed, but the Rust binding is not integrated into the core build system. We'll improve that later.
The links throughout the docs and Cargo.toml files have been updated to point to Cossack Labs repo. I have also removed TravisCI badges because Rust wrapper is going to use CircleCI just like the other bindings.
I have kept the original README files. These are used when publishing on crates.io and contain Rust-specific instructions. The LICENSE files in Rust wrappers are also kept intact in accordance with item 4.a of the Apache 2.0 license.
As for licensing of this contribution, I'm not a lawyer, but Apache license gives the same rights to the original licensor as well as any future contributors. That's why I did not bother updating all the boilerplate comments all over the code. They still assign copyright of Rust code to ""rust-themis developers"". By submitting this code to the core repository the developers agree to keep the Apache 2.0 license for it, as per item 5 of the license. There are no separate prior agreements other than that.","This adds initial Rust binding for Themis.
The code comes from here, version 0.0.2:
https://github.com/ilammy/rust-themis
I could have transferred the whole git history, but that's too much of a bother and I don't think anybody would be interested in it that much. If you wish to read the older commit messages you can always look into the original repo. Not very convenient but that's at least something.
The core repository layout is a bit different from a traditional one for Rust projects. I have moved the files into appropriate places and adapted the Cargo.toml file to that. Importantly, it now requires an include directive so that published crates include only Rust code.
Here's the current layout of Rust code:
.
├─ Cargo.toml           -  root Cargo.toml file
├─ docs/examples
│  └─ rust              -  Rust wrapper examples
├─ src/wrappers/themis
│  └─ rust              -  root of the ""themis"" crate
│     ├─ libthemis-sys  -  root of the ""libthemis-sys"" crate
│     └─ src            -  Rust wrapper source code
└─ tests
   └─ rust              -  Rust wrapper tests

The Cargo.toml file is placed in the root directory so that all usual Cargo commands work from there after a fresh checkout. They do work indeed, but the Rust binding is not integrated into the core build system. We'll improve that later.
The links throughout the docs and Cargo.toml files have been updated to point to Cossack Labs repo. I have also removed TravisCI badges because Rust wrapper is going to use CircleCI just like the other bindings.
I have kept the original README files. These are used when publishing on crates.io and contain Rust-specific instructions. The LICENSE files in Rust wrappers are also kept intact in accordance with item 4.a of the Apache 2.0 license.
As for licensing of this contribution, I'm not a lawyer, but Apache license gives the same rights to the original licensor as well as any future contributors. That's why I did not bother updating all the boilerplate comments all over the code. They still assign copyright of Rust code to ""rust-themis developers"". By submitting this code to the core repository the developers agree to keep the Apache 2.0 license for it, as per item 5 of the license. There are no separate prior agreements other than that.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,340,2018-11-18T15:39:08Z,2019-01-12T13:32:39Z,2019-01-17T20:13:13Z,MERGED,True,4973,0,38,https://github.com/ilammy,Initial Rust binding,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/340,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/340#issuecomment-439873055,"This adds initial Rust binding for Themis.
The code comes from here, version 0.0.2:
https://github.com/ilammy/rust-themis
I could have transferred the whole git history, but that's too much of a bother and I don't think anybody would be interested in it that much. If you wish to read the older commit messages you can always look into the original repo. Not very convenient but that's at least something.
The core repository layout is a bit different from a traditional one for Rust projects. I have moved the files into appropriate places and adapted the Cargo.toml file to that. Importantly, it now requires an include directive so that published crates include only Rust code.
Here's the current layout of Rust code:
.
├─ Cargo.toml           -  root Cargo.toml file
├─ docs/examples
│  └─ rust              -  Rust wrapper examples
├─ src/wrappers/themis
│  └─ rust              -  root of the ""themis"" crate
│     ├─ libthemis-sys  -  root of the ""libthemis-sys"" crate
│     └─ src            -  Rust wrapper source code
└─ tests
   └─ rust              -  Rust wrapper tests

The Cargo.toml file is placed in the root directory so that all usual Cargo commands work from there after a fresh checkout. They do work indeed, but the Rust binding is not integrated into the core build system. We'll improve that later.
The links throughout the docs and Cargo.toml files have been updated to point to Cossack Labs repo. I have also removed TravisCI badges because Rust wrapper is going to use CircleCI just like the other bindings.
I have kept the original README files. These are used when publishing on crates.io and contain Rust-specific instructions. The LICENSE files in Rust wrappers are also kept intact in accordance with item 4.a of the Apache 2.0 license.
As for licensing of this contribution, I'm not a lawyer, but Apache license gives the same rights to the original licensor as well as any future contributors. That's why I did not bother updating all the boilerplate comments all over the code. They still assign copyright of Rust code to ""rust-themis developers"". By submitting this code to the core repository the developers agree to keep the Apache 2.0 license for it, as per item 5 of the license. There are no separate prior agreements other than that.","Yey, themis will have rust binding, that's incredible!
Thank you @ilammy, you're doing great things!
Please don't be irritated while we're reading code and asking simple questions – rust is still very new for us.

Apache 2.0 license

That's right, having Apache 2.0 license makes total sense, as you said, it gives the same rights to the original licensor as well as any future contributors.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,340,2018-11-18T15:39:08Z,2019-01-12T13:32:39Z,2019-01-17T20:13:13Z,MERGED,True,4973,0,38,https://github.com/ilammy,Initial Rust binding,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/340,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/340#issuecomment-453747781,"This adds initial Rust binding for Themis.
The code comes from here, version 0.0.2:
https://github.com/ilammy/rust-themis
I could have transferred the whole git history, but that's too much of a bother and I don't think anybody would be interested in it that much. If you wish to read the older commit messages you can always look into the original repo. Not very convenient but that's at least something.
The core repository layout is a bit different from a traditional one for Rust projects. I have moved the files into appropriate places and adapted the Cargo.toml file to that. Importantly, it now requires an include directive so that published crates include only Rust code.
Here's the current layout of Rust code:
.
├─ Cargo.toml           -  root Cargo.toml file
├─ docs/examples
│  └─ rust              -  Rust wrapper examples
├─ src/wrappers/themis
│  └─ rust              -  root of the ""themis"" crate
│     ├─ libthemis-sys  -  root of the ""libthemis-sys"" crate
│     └─ src            -  Rust wrapper source code
└─ tests
   └─ rust              -  Rust wrapper tests

The Cargo.toml file is placed in the root directory so that all usual Cargo commands work from there after a fresh checkout. They do work indeed, but the Rust binding is not integrated into the core build system. We'll improve that later.
The links throughout the docs and Cargo.toml files have been updated to point to Cossack Labs repo. I have also removed TravisCI badges because Rust wrapper is going to use CircleCI just like the other bindings.
I have kept the original README files. These are used when publishing on crates.io and contain Rust-specific instructions. The LICENSE files in Rust wrappers are also kept intact in accordance with item 4.a of the Apache 2.0 license.
As for licensing of this contribution, I'm not a lawyer, but Apache license gives the same rights to the original licensor as well as any future contributors. That's why I did not bother updating all the boilerplate comments all over the code. They still assign copyright of Rust code to ""rust-themis developers"". By submitting this code to the core repository the developers agree to keep the Apache 2.0 license for it, as per item 5 of the license. There are no separate prior agreements other than that.","Agreed to merge this PR, and to add future Rust changes (including zeroing of private keys) into next PR",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,343,2018-11-23T13:47:01Z,2018-11-26T23:13:47Z,2019-01-17T20:11:48Z,MERGED,True,62,12,7,https://github.com/ilammy,Install pkg-config files,2,"['core', 'installation']",https://github.com/cossacklabs/themis/pull/343,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/343,"pkg-config is an amazing tool for locating installed libraries and generating linkage information. It makes it trivial to link any program to a library. In the simplest case of a C program building with make one just adds these lines to their Makefile:
CFLAGS += $(shell pkg-config --cflags libthemis)
LDFLAGS += $(shell pkg-config --libs libthemis)
And it just works. No need for CMake to probe for libraries, etc.
pkg-config is also able to generate correct flags for static linkage. Static linkage is not trivial because of transitive dependencies. For example, when linking to Themis dynamically it is sufficient to add just -lthemis to linker's command line. However, for static linkage one needs to tell -static -lthemis -lsoter -lcrypto, explicitly including Soter (dependency of Themis) and SomethingSSL (dependency of Soter) into the command line. pkg-config tracks library dependencies and outputs correct flags as necessary.
Output of pkg-config is pretty straightforward so it may be used not only via directly embedding into makefiles for C programs, but by other ecosystems as well. It provides a consistent way to locate native libraries, portable across all major operating systems (yes, pkg-config is available on Windows as well).
Therefore it would be nice for Themis to include *.pc files for its libraries.
More technical details are in the commit message.","pkg-config is an amazing tool for locating installed libraries and generating linkage information. It makes it trivial to link any program to a library. In the simplest case of a C program building with make one just adds these lines to their Makefile:
CFLAGS += $(shell pkg-config --cflags libthemis)
LDFLAGS += $(shell pkg-config --libs libthemis)
And it just works. No need for CMake to probe for libraries, etc.
pkg-config is also able to generate correct flags for static linkage. Static linkage is not trivial because of transitive dependencies. For example, when linking to Themis dynamically it is sufficient to add just -lthemis to linker's command line. However, for static linkage one needs to tell -static -lthemis -lsoter -lcrypto, explicitly including Soter (dependency of Themis) and SomethingSSL (dependency of Soter) into the command line. pkg-config tracks library dependencies and outputs correct flags as necessary.
Output of pkg-config is pretty straightforward so it may be used not only via directly embedding into makefiles for C programs, but by other ecosystems as well. It provides a consistent way to locate native libraries, portable across all major operating systems (yes, pkg-config is available on Windows as well).
Therefore it would be nice for Themis to include *.pc files for its libraries.
More technical details are in the commit message.",True,"{'THUMBS_UP': ['https://github.com/vixentael', 'https://github.com/shadinua']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,343,2018-11-23T13:47:01Z,2018-11-26T23:13:47Z,2019-01-17T20:11:48Z,MERGED,True,62,12,7,https://github.com/ilammy,Install pkg-config files,2,"['core', 'installation']",https://github.com/cossacklabs/themis/pull/343,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/343#issuecomment-441492347,"pkg-config is an amazing tool for locating installed libraries and generating linkage information. It makes it trivial to link any program to a library. In the simplest case of a C program building with make one just adds these lines to their Makefile:
CFLAGS += $(shell pkg-config --cflags libthemis)
LDFLAGS += $(shell pkg-config --libs libthemis)
And it just works. No need for CMake to probe for libraries, etc.
pkg-config is also able to generate correct flags for static linkage. Static linkage is not trivial because of transitive dependencies. For example, when linking to Themis dynamically it is sufficient to add just -lthemis to linker's command line. However, for static linkage one needs to tell -static -lthemis -lsoter -lcrypto, explicitly including Soter (dependency of Themis) and SomethingSSL (dependency of Soter) into the command line. pkg-config tracks library dependencies and outputs correct flags as necessary.
Output of pkg-config is pretty straightforward so it may be used not only via directly embedding into makefiles for C programs, but by other ecosystems as well. It provides a consistent way to locate native libraries, portable across all major operating systems (yes, pkg-config is available on Windows as well).
Therefore it would be nice for Themis to include *.pc files for its libraries.
More technical details are in the commit message.","Thank you @ilammy! I think using pkg-config brings a great flexibility.
I'll merge this PR after one more 👍
P.S.

SomethingSSL
🤣",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,343,2018-11-23T13:47:01Z,2018-11-26T23:13:47Z,2019-01-17T20:11:48Z,MERGED,True,62,12,7,https://github.com/ilammy,Install pkg-config files,2,"['core', 'installation']",https://github.com/cossacklabs/themis/pull/343,https://github.com/shadinua,3,https://github.com/cossacklabs/themis/pull/343#issuecomment-441819185,"pkg-config is an amazing tool for locating installed libraries and generating linkage information. It makes it trivial to link any program to a library. In the simplest case of a C program building with make one just adds these lines to their Makefile:
CFLAGS += $(shell pkg-config --cflags libthemis)
LDFLAGS += $(shell pkg-config --libs libthemis)
And it just works. No need for CMake to probe for libraries, etc.
pkg-config is also able to generate correct flags for static linkage. Static linkage is not trivial because of transitive dependencies. For example, when linking to Themis dynamically it is sufficient to add just -lthemis to linker's command line. However, for static linkage one needs to tell -static -lthemis -lsoter -lcrypto, explicitly including Soter (dependency of Themis) and SomethingSSL (dependency of Soter) into the command line. pkg-config tracks library dependencies and outputs correct flags as necessary.
Output of pkg-config is pretty straightforward so it may be used not only via directly embedding into makefiles for C programs, but by other ecosystems as well. It provides a consistent way to locate native libraries, portable across all major operating systems (yes, pkg-config is available on Windows as well).
Therefore it would be nice for Themis to include *.pc files for its libraries.
More technical details are in the commit message.","I'll merge this PR after one more 👍

And, of course, here is one more 👍",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,345,2018-11-25T21:41:27Z,2018-11-26T21:11:50Z,2019-01-17T20:13:19Z,MERGED,True,1,0,1,https://github.com/ilammy,Use Bash as shell in Makefile,1,"['O-macOS :computer:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/345,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/345,"This issue has been bugging me for a while and I was finally triggered enough to do something about it. If one runs make on macOS then echo ignores the -n flag which suppresses newline output. Then instead of a nice output:

one sees the following monstrosity:

This is caused by multitude of factors. First of all, GNU make uses /bin/sh by default to execute shell commands. This can be overridden by setting the SHELL make variable (environment variable is ignored).
Usually on UNIX systems /bin/sh is a symlink or a drop-in replacement to some 'maximally portable POSIX shell' which resembles the original Bourne shell. On macOS /bin/sh is renamed Bash binary. I believe some other UNIX systems do so as well. When Bash is invoked as ""sh"" it enables Bourne shell compatibility mode:

If bash is invoked with the name sh, it tries to mimic the startup behavior of historical versions of sh as closely as possible, while conforming to the POSIX standard as well.
— man 1 bash

echo is normally a shell built-in (so that the shell does not execute actual /bin/echo all the time), so its options are determined by the shell and its compatibility mode. The -n option is supported by Bash and by most of echo binaries, but not by Bourne shell's echo builtin.
So, set SHELL to Bash in order to have nice behavior of the ""echo"" builtin. A more correct way would be to disable the builtin and make sure that the shell runs /bin/echo, but that's much harder to do. This can be offensive towards POSIX compatibility purists, but if they run Themis builds on a system where Bash is not available they can comment out that line and get their /bin/sh back. While we're gonna enjoy nice progress reports with correct newlines.","This issue has been bugging me for a while and I was finally triggered enough to do something about it. If one runs make on macOS then echo ignores the -n flag which suppresses newline output. Then instead of a nice output:

one sees the following monstrosity:

This is caused by multitude of factors. First of all, GNU make uses /bin/sh by default to execute shell commands. This can be overridden by setting the SHELL make variable (environment variable is ignored).
Usually on UNIX systems /bin/sh is a symlink or a drop-in replacement to some 'maximally portable POSIX shell' which resembles the original Bourne shell. On macOS /bin/sh is renamed Bash binary. I believe some other UNIX systems do so as well. When Bash is invoked as ""sh"" it enables Bourne shell compatibility mode:

If bash is invoked with the name sh, it tries to mimic the startup behavior of historical versions of sh as closely as possible, while conforming to the POSIX standard as well.
— man 1 bash

echo is normally a shell built-in (so that the shell does not execute actual /bin/echo all the time), so its options are determined by the shell and its compatibility mode. The -n option is supported by Bash and by most of echo binaries, but not by Bourne shell's echo builtin.
So, set SHELL to Bash in order to have nice behavior of the ""echo"" builtin. A more correct way would be to disable the builtin and make sure that the shell runs /bin/echo, but that's much harder to do. This can be offensive towards POSIX compatibility purists, but if they run Themis builds on a system where Bash is not available they can comment out that line and get their /bin/sh back. While we're gonna enjoy nice progress reports with correct newlines.",True,{'HOORAY': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,345,2018-11-25T21:41:27Z,2018-11-26T21:11:50Z,2019-01-17T20:13:19Z,MERGED,True,1,0,1,https://github.com/ilammy,Use Bash as shell in Makefile,1,"['O-macOS :computer:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/345,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/345#issuecomment-441491810,"This issue has been bugging me for a while and I was finally triggered enough to do something about it. If one runs make on macOS then echo ignores the -n flag which suppresses newline output. Then instead of a nice output:

one sees the following monstrosity:

This is caused by multitude of factors. First of all, GNU make uses /bin/sh by default to execute shell commands. This can be overridden by setting the SHELL make variable (environment variable is ignored).
Usually on UNIX systems /bin/sh is a symlink or a drop-in replacement to some 'maximally portable POSIX shell' which resembles the original Bourne shell. On macOS /bin/sh is renamed Bash binary. I believe some other UNIX systems do so as well. When Bash is invoked as ""sh"" it enables Bourne shell compatibility mode:

If bash is invoked with the name sh, it tries to mimic the startup behavior of historical versions of sh as closely as possible, while conforming to the POSIX standard as well.
— man 1 bash

echo is normally a shell built-in (so that the shell does not execute actual /bin/echo all the time), so its options are determined by the shell and its compatibility mode. The -n option is supported by Bash and by most of echo binaries, but not by Bourne shell's echo builtin.
So, set SHELL to Bash in order to have nice behavior of the ""echo"" builtin. A more correct way would be to disable the builtin and make sure that the shell runs /bin/echo, but that's much harder to do. This can be offensive towards POSIX compatibility purists, but if they run Themis builds on a system where Bash is not available they can comment out that line and get their /bin/sh back. While we're gonna enjoy nice progress reports with correct newlines.","Thank you @ilammy! I never thought that -n logs could be changed :D
I've tested on MacOS, works perfectly fine. If @shadinua doesn't have any considerations, let's merge it.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,345,2018-11-25T21:41:27Z,2018-11-26T21:11:50Z,2019-01-17T20:13:19Z,MERGED,True,1,0,1,https://github.com/ilammy,Use Bash as shell in Makefile,1,"['O-macOS :computer:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/345,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/345#issuecomment-441799422,"This issue has been bugging me for a while and I was finally triggered enough to do something about it. If one runs make on macOS then echo ignores the -n flag which suppresses newline output. Then instead of a nice output:

one sees the following monstrosity:

This is caused by multitude of factors. First of all, GNU make uses /bin/sh by default to execute shell commands. This can be overridden by setting the SHELL make variable (environment variable is ignored).
Usually on UNIX systems /bin/sh is a symlink or a drop-in replacement to some 'maximally portable POSIX shell' which resembles the original Bourne shell. On macOS /bin/sh is renamed Bash binary. I believe some other UNIX systems do so as well. When Bash is invoked as ""sh"" it enables Bourne shell compatibility mode:

If bash is invoked with the name sh, it tries to mimic the startup behavior of historical versions of sh as closely as possible, while conforming to the POSIX standard as well.
— man 1 bash

echo is normally a shell built-in (so that the shell does not execute actual /bin/echo all the time), so its options are determined by the shell and its compatibility mode. The -n option is supported by Bash and by most of echo binaries, but not by Bourne shell's echo builtin.
So, set SHELL to Bash in order to have nice behavior of the ""echo"" builtin. A more correct way would be to disable the builtin and make sure that the shell runs /bin/echo, but that's much harder to do. This can be offensive towards POSIX compatibility purists, but if they run Themis builds on a system where Bash is not available they can comment out that line and get their /bin/sh back. While we're gonna enjoy nice progress reports with correct newlines.","Thank you @shadinua!
So we will merge this change now, and update it during Makefile refactoring (planned, waiting in task queue) to add FreeBSD support.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,346,2018-12-06T00:22:10Z,2018-12-12T14:08:17Z,2019-01-17T20:13:38Z,MERGED,True,1,1,1,https://github.com/ilammy,Ignore ldconfig failures when installing on Linux,2,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/346,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/346,"Currently make install PREFIX=$HOME/lib/themis fails on Linux when run without superuser privileges. Installation to non-system directories should not require superuser privileges. This does not work because of an unconditional ldconfig invocation.
Linux systems generally require an ldconfig invocation after installing shared libraries in order to refresh ld.so's library cache. Themis' make install target does that unconditionally when building on Linux. It's not necessary for static libraries or when installing into non-system locations that require special configuration of the dynamic loader (rpath, LD_LIBRATY_PATH, etc.)
Note that ldconfig requires superuser privileges as it writes multiple files in /etc. However, make install is not always run with superuser privileges.
There are two basic use-cases for installing Themis:


Installation into the system directory
Typically this is used when packaging Themis library by itself. This installation requires superuser privileges anyway to copy the libraries into system locations. Usually shared libraries are installed together with static libraries.
This is typically invoked as sudo make install


Installation into a temporary directory
Typically this is used to build a local copy of Themis for use inside another project. Themis is installed into some non-system location by setting the PREFIX variable accordingly. Usually only static libraries are used. No superuser privileges needed.
This is typically invoked as make install PREFIX=$somewhere


The first use-case works fine now, but the second one is broken by ldconfig failing the build without superuser privileges.
Let's fix it in a simple and lazy way by ignoring any errors caused by ldconfig. (They are still printed out to stderr though.)
Strictly speaking, we should invoke ldconfig only after installing shared libraries. And it's only needed when installing into system locations. However, it's too complex for us to analyze EUID and PREFIX values. And it's certainly easier for the users to simply run ""make install"" all the time. Though, it's definitely possible to add a new target which will not call ldconfig:
install_static: install_soter_headers install_themis_headers \
                install_static_libs install_pkgconfig

install: install_static install_shared_libs
ifdef IS_LINUX
        @ldconfig
endif
However, there may be cases when shared libraries need to be installed into non-system locations as well. So it should be more easy to simply ignore ldconfig failures.","Currently make install PREFIX=$HOME/lib/themis fails on Linux when run without superuser privileges. Installation to non-system directories should not require superuser privileges. This does not work because of an unconditional ldconfig invocation.
Linux systems generally require an ldconfig invocation after installing shared libraries in order to refresh ld.so's library cache. Themis' make install target does that unconditionally when building on Linux. It's not necessary for static libraries or when installing into non-system locations that require special configuration of the dynamic loader (rpath, LD_LIBRATY_PATH, etc.)
Note that ldconfig requires superuser privileges as it writes multiple files in /etc. However, make install is not always run with superuser privileges.
There are two basic use-cases for installing Themis:


Installation into the system directory
Typically this is used when packaging Themis library by itself. This installation requires superuser privileges anyway to copy the libraries into system locations. Usually shared libraries are installed together with static libraries.
This is typically invoked as sudo make install


Installation into a temporary directory
Typically this is used to build a local copy of Themis for use inside another project. Themis is installed into some non-system location by setting the PREFIX variable accordingly. Usually only static libraries are used. No superuser privileges needed.
This is typically invoked as make install PREFIX=$somewhere


The first use-case works fine now, but the second one is broken by ldconfig failing the build without superuser privileges.
Let's fix it in a simple and lazy way by ignoring any errors caused by ldconfig. (They are still printed out to stderr though.)
Strictly speaking, we should invoke ldconfig only after installing shared libraries. And it's only needed when installing into system locations. However, it's too complex for us to analyze EUID and PREFIX values. And it's certainly easier for the users to simply run ""make install"" all the time. Though, it's definitely possible to add a new target which will not call ldconfig:
install_static: install_soter_headers install_themis_headers \
                install_static_libs install_pkgconfig

install: install_static install_shared_libs
ifdef IS_LINUX
        @ldconfig
endif
However, there may be cases when shared libraries need to be installed into non-system locations as well. So it should be more easy to simply ignore ldconfig failures.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,346,2018-12-06T00:22:10Z,2018-12-12T14:08:17Z,2019-01-17T20:13:38Z,MERGED,True,1,1,1,https://github.com/ilammy,Ignore ldconfig failures when installing on Linux,2,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/346,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/346#issuecomment-444895837,"Currently make install PREFIX=$HOME/lib/themis fails on Linux when run without superuser privileges. Installation to non-system directories should not require superuser privileges. This does not work because of an unconditional ldconfig invocation.
Linux systems generally require an ldconfig invocation after installing shared libraries in order to refresh ld.so's library cache. Themis' make install target does that unconditionally when building on Linux. It's not necessary for static libraries or when installing into non-system locations that require special configuration of the dynamic loader (rpath, LD_LIBRATY_PATH, etc.)
Note that ldconfig requires superuser privileges as it writes multiple files in /etc. However, make install is not always run with superuser privileges.
There are two basic use-cases for installing Themis:


Installation into the system directory
Typically this is used when packaging Themis library by itself. This installation requires superuser privileges anyway to copy the libraries into system locations. Usually shared libraries are installed together with static libraries.
This is typically invoked as sudo make install


Installation into a temporary directory
Typically this is used to build a local copy of Themis for use inside another project. Themis is installed into some non-system location by setting the PREFIX variable accordingly. Usually only static libraries are used. No superuser privileges needed.
This is typically invoked as make install PREFIX=$somewhere


The first use-case works fine now, but the second one is broken by ldconfig failing the build without superuser privileges.
Let's fix it in a simple and lazy way by ignoring any errors caused by ldconfig. (They are still printed out to stderr though.)
Strictly speaking, we should invoke ldconfig only after installing shared libraries. And it's only needed when installing into system locations. However, it's too complex for us to analyze EUID and PREFIX values. And it's certainly easier for the users to simply run ""make install"" all the time. Though, it's definitely possible to add a new target which will not call ldconfig:
install_static: install_soter_headers install_themis_headers \
                install_static_libs install_pkgconfig

install: install_static install_shared_libs
ifdef IS_LINUX
        @ldconfig
endif
However, there may be cases when shared libraries need to be installed into non-system locations as well. So it should be more easy to simply ignore ldconfig failures.","@shadinua that makes sense.
I have added the check so that ldconfig will faithfully fail if the build is run by a superuser. Errors will be ignored only for non-root users.
I have used bit more resilient way of checking the effective UID ($(id -u) = ""0""), just in case the root user is not named root.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,346,2018-12-06T00:22:10Z,2018-12-12T14:08:17Z,2019-01-17T20:13:38Z,MERGED,True,1,1,1,https://github.com/ilammy,Ignore ldconfig failures when installing on Linux,2,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/346,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/346#issuecomment-446599865,"Currently make install PREFIX=$HOME/lib/themis fails on Linux when run without superuser privileges. Installation to non-system directories should not require superuser privileges. This does not work because of an unconditional ldconfig invocation.
Linux systems generally require an ldconfig invocation after installing shared libraries in order to refresh ld.so's library cache. Themis' make install target does that unconditionally when building on Linux. It's not necessary for static libraries or when installing into non-system locations that require special configuration of the dynamic loader (rpath, LD_LIBRATY_PATH, etc.)
Note that ldconfig requires superuser privileges as it writes multiple files in /etc. However, make install is not always run with superuser privileges.
There are two basic use-cases for installing Themis:


Installation into the system directory
Typically this is used when packaging Themis library by itself. This installation requires superuser privileges anyway to copy the libraries into system locations. Usually shared libraries are installed together with static libraries.
This is typically invoked as sudo make install


Installation into a temporary directory
Typically this is used to build a local copy of Themis for use inside another project. Themis is installed into some non-system location by setting the PREFIX variable accordingly. Usually only static libraries are used. No superuser privileges needed.
This is typically invoked as make install PREFIX=$somewhere


The first use-case works fine now, but the second one is broken by ldconfig failing the build without superuser privileges.
Let's fix it in a simple and lazy way by ignoring any errors caused by ldconfig. (They are still printed out to stderr though.)
Strictly speaking, we should invoke ldconfig only after installing shared libraries. And it's only needed when installing into system locations. However, it's too complex for us to analyze EUID and PREFIX values. And it's certainly easier for the users to simply run ""make install"" all the time. Though, it's definitely possible to add a new target which will not call ldconfig:
install_static: install_soter_headers install_themis_headers \
                install_static_libs install_pkgconfig

install: install_static install_shared_libs
ifdef IS_LINUX
        @ldconfig
endif
However, there may be cases when shared libraries need to be installed into non-system locations as well. So it should be more easy to simply ignore ldconfig failures.","Thank you, guys!
Merged.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,347,2018-12-26T23:17:01Z,2019-01-03T15:11:21Z,2019-01-03T16:18:26Z,MERGED,True,40,20,8,https://github.com/ignatk,Return SOTER_INVALID_PARAMETER if the caller tries to reuse a hash context after finalising,7,"['core', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/347,https://github.com/ignatk,1,https://github.com/cossacklabs/themis/pull/347,"Also, make it easy to build Themis with embedded BoringSSL
Closes #344","Also, make it easy to build Themis with embedded BoringSSL
Closes #344",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,347,2018-12-26T23:17:01Z,2019-01-03T15:11:21Z,2019-01-03T16:18:26Z,MERGED,True,40,20,8,https://github.com/ignatk,Return SOTER_INVALID_PARAMETER if the caller tries to reuse a hash context after finalising,7,"['core', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/347,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/347#issuecomment-450166755,"Also, make it easy to build Themis with embedded BoringSSL
Closes #344","Thank you @secumod! That's an important improvement! 🙇‍♀️
@ilammy could you please take a look?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,347,2018-12-26T23:17:01Z,2019-01-03T15:11:21Z,2019-01-03T16:18:26Z,MERGED,True,40,20,8,https://github.com/ignatk,Return SOTER_INVALID_PARAMETER if the caller tries to reuse a hash context after finalising,7,"['core', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/347,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/347#issuecomment-450646102,"Also, make it easy to build Themis with embedded BoringSSL
Closes #344","I'm sorry, I was engrossed in holidays and stuff. I'll look at it more closely in the nearest time.
In general, the changes look good. However, the test code from #344 still crashes for me for some reason. I did not look at the stacktrace yet, but maybe we should opt for an explicit 'finalized' flag in Soter code, as suggested by @secumod in #344, in order to avoid calling any BoringSSL functions at all instead of relying on them to return error codes in invalid states.
I also like this new feature for using the embedded BoringSSL with just ENGINE=boringssl. It really simplifies the building process. However, it also introduces a minor issue with recently added pkg-config files. libsoter.pc file remembers relative paths to BoringSSL for static linkage purposes, and such paths  are unlikely to work after Themis installation. Though, I think this issue can be addressed separately and should not block this PR (I'm not sure at the moment what can be done about it).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,347,2018-12-26T23:17:01Z,2019-01-03T15:11:21Z,2019-01-03T16:18:26Z,MERGED,True,40,20,8,https://github.com/ignatk,Return SOTER_INVALID_PARAMETER if the caller tries to reuse a hash context after finalising,7,"['core', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/347,https://github.com/ignatk,4,https://github.com/cossacklabs/themis/pull/347#issuecomment-450726063,"Also, make it easy to build Themis with embedded BoringSSL
Closes #344","I'll recheck the test code from #344 (I just assumed my test case covered all of it). Regarding .pc files and BoringSSL: BoringSSL is not ""a general-purpose"" library according to Google. Hence, they mostly advise to embed a particular version into your application. This should not be a problem for dynamic libraries as all the needed code will be included in libsoter when generating a shared library. For static libs and linking it would probably be incorrect to ship standalone BoringSSL with our libs, because we just want ""to embed"" the code. Probably, it is worth investigating on how to just incorporate the full BoringSSL .a files into libsoter.a and just make applications link to that.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,347,2018-12-26T23:17:01Z,2019-01-03T15:11:21Z,2019-01-03T16:18:26Z,MERGED,True,40,20,8,https://github.com/ignatk,Return SOTER_INVALID_PARAMETER if the caller tries to reuse a hash context after finalising,7,"['core', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/347,https://github.com/ignatk,5,https://github.com/cossacklabs/themis/pull/347#issuecomment-450751827,"Also, make it easy to build Themis with embedded BoringSSL
Closes #344","@ilammy just retried the code from #344 with the build from this PR, but it does not crash for me - fails with 12:
user@3802e72d7e7f:/projects/issues$ ./scmp
[=] appending data to A: different
[=] appending data to B: test data
[-] begin   comparison: A
[~] proceed comparison: B
[~] proceed comparison: A
[~] proceed comparison: B
[~] proceed comparison: A
[!] comparison complete
[>] result A: (---) mismatch
[>] result B: (---) mismatch
[=] appending data to A: the same data
[*] append_secret(A) failed: 12

Can you double check on clean build, please?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,347,2018-12-26T23:17:01Z,2019-01-03T15:11:21Z,2019-01-03T16:18:26Z,MERGED,True,40,20,8,https://github.com/ignatk,Return SOTER_INVALID_PARAMETER if the caller tries to reuse a hash context after finalising,7,"['core', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/347,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/347#issuecomment-451171054,"Also, make it easy to build Themis with embedded BoringSSL
Closes #344","Can you double check on clean build, please?

Done. I'm terribly sorry, the issue is now gone for me too. The terminal I used had some environment variables set that confused the linker-loader and used an older build of Themis. After I've cleaned everything up I see the same result as you do. Sorry 🙏",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,347,2018-12-26T23:17:01Z,2019-01-03T15:11:21Z,2019-01-03T16:18:26Z,MERGED,True,40,20,8,https://github.com/ignatk,Return SOTER_INVALID_PARAMETER if the caller tries to reuse a hash context after finalising,7,"['core', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/347,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/347#issuecomment-451175711,"Also, make it easy to build Themis with embedded BoringSSL
Closes #344","Regarding embedded BoringSSL.
I've reread Google's docs and advice on this matter, gave it a thought, and it seems that we can leave this matter as is.
It should be totally fine to embed BoringSSL into dynamic libraries because then we can hide the dependency, do not export BoringSSL symbols, and avoid any conflicts.
However, making BoringSSL a part of libsoter.a seems to be a bad idea because then Themis will dictate which version of BoringSSL is going to be used by the application and will deny using OpenSSL et al. This seems to be a decision for an application developer, not the library.
I imagine two main use cases for static linkage:

an application developer builds their own copy of Themis, specifically for their project
an application developer uses Themis from their distro's repo

In the first case the developer should be able to figure out how to link against the BoringSSL used by Themis. In the second case the distro maintainer is unlikely to use BoringSSL at all, opting for disto's OpenSSL or alike.
So while 'broken' *.pc is unfortunate, I guess it should not cause any practical issues so we can leave it as is.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,347,2018-12-26T23:17:01Z,2019-01-03T15:11:21Z,2019-01-03T16:18:26Z,MERGED,True,40,20,8,https://github.com/ignatk,Return SOTER_INVALID_PARAMETER if the caller tries to reuse a hash context after finalising,7,"['core', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/347,https://github.com/ignatk,8,https://github.com/cossacklabs/themis/pull/347#issuecomment-451193576,"Also, make it easy to build Themis with embedded BoringSSL
Closes #344","That is why we should incorporate BoringSSL into libsoter.a. Themis user technically cannot use a different BoringSSL version from the one which was used to build Themis, because they will get symbol conflicts. On the other hand many users may not even care about the underlying engine: they just want to build soter/themis and link with it (that is the expected behaviour for any library I think).
So, by incorporating BoringSSL into static versions of .a libs makes the overall process transparent for the user.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,348,2019-01-10T12:05:15Z,2019-01-10T13:55:39Z,2019-01-10T13:55:49Z,MERGED,True,2,2,1,https://github.com/shadinua,Fix redirection clause,1,['bug'],https://github.com/cossacklabs/themis/pull/348,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/348,"In the clause cd - 1 > /dev/null bash interprets 1 as an argument for cd command and causes /bin/bash: line 0: cd: too many arguments error.
File descriptor 1/stdout is used by default in output redirection. Therefore, we have to either explicitly point that 1 is part of the redirection clause (cd - 1> /dev/null) or simply remove it, what I've done.","In the clause cd - 1 > /dev/null bash interprets 1 as an argument for cd command and causes /bin/bash: line 0: cd: too many arguments error.
File descriptor 1/stdout is used by default in output redirection. Therefore, we have to either explicitly point that 1 is part of the redirection clause (cd - 1> /dev/null) or simply remove it, what I've done.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,348,2019-01-10T12:05:15Z,2019-01-10T13:55:39Z,2019-01-10T13:55:49Z,MERGED,True,2,2,1,https://github.com/shadinua,Fix redirection clause,1,['bug'],https://github.com/cossacklabs/themis/pull/348,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/348#issuecomment-453103562,"In the clause cd - 1 > /dev/null bash interprets 1 as an argument for cd command and causes /bin/bash: line 0: cd: too many arguments error.
File descriptor 1/stdout is used by default in output redirection. Therefore, we have to either explicitly point that 1 is part of the redirection clause (cd - 1> /dev/null) or simply remove it, what I've done.","Thank you!
Let's merge this change, and solve Android build problem in another PR.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,349,2019-01-17T21:45:20Z,2019-01-21T09:58:35Z,2019-01-27T22:53:39Z,MERGED,True,1769,259,35,https://github.com/ilammy,Update Rust binding to v0.0.3,3,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/349,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/349,"This is a cumulative update of rust-themis to version 0.0.3 from here:
https://github.com/ilammy/rust-themis
You can see git diff v0.0.2..v0.0.3 there for detailed changes. Obviously, the diff does not apply as is and has been manually merged into this repository, taking into account previous changes and the new code layout.
Some notable changes since v0.0.2:


Secure zeroing of key material is included into this update.


Various changes related to Rust 2018 edition support and API documentation updates introduce a lot of diff clutter. Deal with it.


Vendored build is back. It is mostly intended as a hack for docs.rs support rather than an actual use-case. Absolutely worth it if you ask me, but I'm slightly biased ;)
This brings a new libthemis-src crate to contain the whole source code of Themis. It is implemented with a symbolic link to the top of the repository. Hopefully, this loop does not break anything anywhere...
For one, symlink usage has broken libthemis-src compilation (due to a bug in 3rd-party crate) so vendored build is currently failing. We'll fix this issue later.


There are some other interesting TODOs added and removed during the development. Just grep for them in you're interested.


These changes do not integrate rust-themis into the main build system. It is possible to build rust-themis alone with Cargo, but the Makefile does not know about us yet. This will be added soon.","This is a cumulative update of rust-themis to version 0.0.3 from here:
https://github.com/ilammy/rust-themis
You can see git diff v0.0.2..v0.0.3 there for detailed changes. Obviously, the diff does not apply as is and has been manually merged into this repository, taking into account previous changes and the new code layout.
Some notable changes since v0.0.2:


Secure zeroing of key material is included into this update.


Various changes related to Rust 2018 edition support and API documentation updates introduce a lot of diff clutter. Deal with it.


Vendored build is back. It is mostly intended as a hack for docs.rs support rather than an actual use-case. Absolutely worth it if you ask me, but I'm slightly biased ;)
This brings a new libthemis-src crate to contain the whole source code of Themis. It is implemented with a symbolic link to the top of the repository. Hopefully, this loop does not break anything anywhere...
For one, symlink usage has broken libthemis-src compilation (due to a bug in 3rd-party crate) so vendored build is currently failing. We'll fix this issue later.


There are some other interesting TODOs added and removed during the development. Just grep for them in you're interested.


These changes do not integrate rust-themis into the main build system. It is possible to build rust-themis alone with Cargo, but the Makefile does not know about us yet. This will be added soon.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,349,2019-01-17T21:45:20Z,2019-01-21T09:58:35Z,2019-01-27T22:53:39Z,MERGED,True,1769,259,35,https://github.com/ilammy,Update Rust binding to v0.0.3,3,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/349,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/349#issuecomment-455620116,"This is a cumulative update of rust-themis to version 0.0.3 from here:
https://github.com/ilammy/rust-themis
You can see git diff v0.0.2..v0.0.3 there for detailed changes. Obviously, the diff does not apply as is and has been manually merged into this repository, taking into account previous changes and the new code layout.
Some notable changes since v0.0.2:


Secure zeroing of key material is included into this update.


Various changes related to Rust 2018 edition support and API documentation updates introduce a lot of diff clutter. Deal with it.


Vendored build is back. It is mostly intended as a hack for docs.rs support rather than an actual use-case. Absolutely worth it if you ask me, but I'm slightly biased ;)
This brings a new libthemis-src crate to contain the whole source code of Themis. It is implemented with a symbolic link to the top of the repository. Hopefully, this loop does not break anything anywhere...
For one, symlink usage has broken libthemis-src compilation (due to a bug in 3rd-party crate) so vendored build is currently failing. We'll fix this issue later.


There are some other interesting TODOs added and removed during the development. Just grep for them in you're interested.


These changes do not integrate rust-themis into the main build system. It is possible to build rust-themis alone with Cargo, but the Makefile does not know about us yet. This will be added soon.","Overall I really like the changes, the documentation looks fantastic and it's very easy to read!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,349,2019-01-17T21:45:20Z,2019-01-21T09:58:35Z,2019-01-27T22:53:39Z,MERGED,True,1769,259,35,https://github.com/ilammy,Update Rust binding to v0.0.3,3,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/349,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/349#issuecomment-455898155,"This is a cumulative update of rust-themis to version 0.0.3 from here:
https://github.com/ilammy/rust-themis
You can see git diff v0.0.2..v0.0.3 there for detailed changes. Obviously, the diff does not apply as is and has been manually merged into this repository, taking into account previous changes and the new code layout.
Some notable changes since v0.0.2:


Secure zeroing of key material is included into this update.


Various changes related to Rust 2018 edition support and API documentation updates introduce a lot of diff clutter. Deal with it.


Vendored build is back. It is mostly intended as a hack for docs.rs support rather than an actual use-case. Absolutely worth it if you ask me, but I'm slightly biased ;)
This brings a new libthemis-src crate to contain the whole source code of Themis. It is implemented with a symbolic link to the top of the repository. Hopefully, this loop does not break anything anywhere...
For one, symlink usage has broken libthemis-src compilation (due to a bug in 3rd-party crate) so vendored build is currently failing. We'll fix this issue later.


There are some other interesting TODOs added and removed during the development. Just grep for them in you're interested.


These changes do not integrate rust-themis into the main build system. It is possible to build rust-themis alone with Cargo, but the Makefile does not know about us yet. This will be added soon.","@ilammy summarizing, are there any other changes you would like to add in this PR?
(except update SecureCell API and panic checks for context which will be part of next PR)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,349,2019-01-17T21:45:20Z,2019-01-21T09:58:35Z,2019-01-27T22:53:39Z,MERGED,True,1769,259,35,https://github.com/ilammy,Update Rust binding to v0.0.3,3,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/349,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/349#issuecomment-455899233,"This is a cumulative update of rust-themis to version 0.0.3 from here:
https://github.com/ilammy/rust-themis
You can see git diff v0.0.2..v0.0.3 there for detailed changes. Obviously, the diff does not apply as is and has been manually merged into this repository, taking into account previous changes and the new code layout.
Some notable changes since v0.0.2:


Secure zeroing of key material is included into this update.


Various changes related to Rust 2018 edition support and API documentation updates introduce a lot of diff clutter. Deal with it.


Vendored build is back. It is mostly intended as a hack for docs.rs support rather than an actual use-case. Absolutely worth it if you ask me, but I'm slightly biased ;)
This brings a new libthemis-src crate to contain the whole source code of Themis. It is implemented with a symbolic link to the top of the repository. Hopefully, this loop does not break anything anywhere...
For one, symlink usage has broken libthemis-src compilation (due to a bug in 3rd-party crate) so vendored build is currently failing. We'll fix this issue later.


There are some other interesting TODOs added and removed during the development. Just grep for them in you're interested.


These changes do not integrate rust-themis into the main build system. It is possible to build rust-themis alone with Cargo, but the Makefile does not know about us yet. This will be added soon.",@vixentael nope. I don't have anything else cooking for this PR. I believe it can be merged as is now if you and @Lagovas are okay with it.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,351,2019-01-22T14:03:36Z,2019-01-22T14:40:39Z,2019-01-22T14:40:53Z,MERGED,True,2,2,1,https://github.com/vixentael,fix typo in comment in themis.podspec,1,"['O-iOS :iphone:', 'installation']",https://github.com/cossacklabs/themis/pull/351,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/351,"shouldn't change anything tbh
thanks @deszip for pointing out","shouldn't change anything tbh
thanks @deszip for pointing out",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,352,2019-01-22T16:38:44Z,2019-01-22T19:46:21Z,2019-01-22T20:48:36Z,MERGED,True,7,8,3,https://github.com/vixentael,Update BoringSSL submodule config to use Clang and new gradle,3,"['O-Android :robot:', 'C-BoringSSL', 'installation']",https://github.com/cossacklabs/themis/pull/352,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/352,"Update BoringSSL submodule build rules (see #350) to make Themis Android wrapper great again!

Change default compiler to build BoringSSL to Clang, because Android dropped GCC, but we need to compile BoringSSL.

  CMake Error at /home/user/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake:169 (message):
   GCC is no longer supported.  See
   https://android.googlesource.com/platform/ndk/+/master/docs/ClangMigration.md.


Update gradle to build BoringSSL.

Author of these changes is @ilammy, all appreciation send to him, I'm just PR'ing them.
Together with updates in cossacklabs/android-build Dockerfile (cossacklabs/dockerfiles#1 and cossacklabs/dockerfiles#2) this change should fix Android CI builds (as soon as cossacklabs/android-build DockerImage will be recompiled on Dockerhub -> https://hub.docker.com/r/cossacklabs/android-build)","Update BoringSSL submodule build rules (see #350) to make Themis Android wrapper great again!

Change default compiler to build BoringSSL to Clang, because Android dropped GCC, but we need to compile BoringSSL.

  CMake Error at /home/user/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake:169 (message):
   GCC is no longer supported.  See
   https://android.googlesource.com/platform/ndk/+/master/docs/ClangMigration.md.


Update gradle to build BoringSSL.

Author of these changes is @ilammy, all appreciation send to him, I'm just PR'ing them.
Together with updates in cossacklabs/android-build Dockerfile (cossacklabs/dockerfiles#1 and cossacklabs/dockerfiles#2) this change should fix Android CI builds (as soon as cossacklabs/android-build DockerImage will be recompiled on Dockerhub -> https://hub.docker.com/r/cossacklabs/android-build)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,352,2019-01-22T16:38:44Z,2019-01-22T19:46:21Z,2019-01-22T20:48:36Z,MERGED,True,7,8,3,https://github.com/vixentael,Update BoringSSL submodule config to use Clang and new gradle,3,"['O-Android :robot:', 'C-BoringSSL', 'installation']",https://github.com/cossacklabs/themis/pull/352,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/352#issuecomment-456481827,"Update BoringSSL submodule build rules (see #350) to make Themis Android wrapper great again!

Change default compiler to build BoringSSL to Clang, because Android dropped GCC, but we need to compile BoringSSL.

  CMake Error at /home/user/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake:169 (message):
   GCC is no longer supported.  See
   https://android.googlesource.com/platform/ndk/+/master/docs/ClangMigration.md.


Update gradle to build BoringSSL.

Author of these changes is @ilammy, all appreciation send to him, I'm just PR'ing them.
Together with updates in cossacklabs/android-build Dockerfile (cossacklabs/dockerfiles#1 and cossacklabs/dockerfiles#2) this change should fix Android CI builds (as soon as cossacklabs/android-build DockerImage will be recompiled on Dockerhub -> https://hub.docker.com/r/cossacklabs/android-build)","Good news: Android tests are building.
Bad news: x86_64 tests are failing, because it assumes that cossacklabs/android-build image has cmake inside.
link soter_static                   [OK]
building embedded BoringSSL...
/bin/bash: cmake: command not found
src/soter/boringssl/soter.mk:39: recipe for target 'build_with_boringssl/boringssl/crypto/libcrypto.a' failed

Looking how to fix it now.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,352,2019-01-22T16:38:44Z,2019-01-22T19:46:21Z,2019-01-22T20:48:36Z,MERGED,True,7,8,3,https://github.com/vixentael,Update BoringSSL submodule config to use Clang and new gradle,3,"['O-Android :robot:', 'C-BoringSSL', 'installation']",https://github.com/cossacklabs/themis/pull/352,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/352#issuecomment-456508316,"Update BoringSSL submodule build rules (see #350) to make Themis Android wrapper great again!

Change default compiler to build BoringSSL to Clang, because Android dropped GCC, but we need to compile BoringSSL.

  CMake Error at /home/user/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake:169 (message):
   GCC is no longer supported.  See
   https://android.googlesource.com/platform/ndk/+/master/docs/ClangMigration.md.


Update gradle to build BoringSSL.

Author of these changes is @ilammy, all appreciation send to him, I'm just PR'ing them.
Together with updates in cossacklabs/android-build Dockerfile (cossacklabs/dockerfiles#1 and cossacklabs/dockerfiles#2) this change should fix Android CI builds (as soon as cossacklabs/android-build DockerImage will be recompiled on Dockerhub -> https://hub.docker.com/r/cossacklabs/android-build)","Ok, I made alternative dockerimage cossacklabs/android-build:2019.01 with changes (cossacklabs/dockerfiles#2) that should satisfy all tests. As soon as this image will be built and uploaded to DockerHub, I'll trigger tests again.
If succeed, we'll stick to cossacklabs/android-build:2019.01 as dockerimage for Themis.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,352,2019-01-22T16:38:44Z,2019-01-22T19:46:21Z,2019-01-22T20:48:36Z,MERGED,True,7,8,3,https://github.com/vixentael,Update BoringSSL submodule config to use Clang and new gradle,3,"['O-Android :robot:', 'C-BoringSSL', 'installation']",https://github.com/cossacklabs/themis/pull/352,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/352#issuecomment-456518705,"Update BoringSSL submodule build rules (see #350) to make Themis Android wrapper great again!

Change default compiler to build BoringSSL to Clang, because Android dropped GCC, but we need to compile BoringSSL.

  CMake Error at /home/user/android-sdk/ndk-bundle/build/cmake/android.toolchain.cmake:169 (message):
   GCC is no longer supported.  See
   https://android.googlesource.com/platform/ndk/+/master/docs/ClangMigration.md.


Update gradle to build BoringSSL.

Author of these changes is @ilammy, all appreciation send to him, I'm just PR'ing them.
Together with updates in cossacklabs/android-build Dockerfile (cossacklabs/dockerfiles#1 and cossacklabs/dockerfiles#2) this change should fix Android CI builds (as soon as cossacklabs/android-build DockerImage will be recompiled on Dockerhub -> https://hub.docker.com/r/cossacklabs/android-build)","Good news, all tests are passing, including Android and Desktop.",True,"{'HOORAY': ['https://github.com/ignatk', 'https://github.com/ilammy']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,353,2019-01-22T19:58:55Z,2019-01-28T16:48:04Z,2019-01-28T18:45:01Z,MERGED,True,86,38,17,https://github.com/ilammy,Teach CircleCI to build Rust wrapper,9,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/353,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/353,"Let's start checking Rust-Themis during our regular builds.
But first we have to fix a build issue with libthemis-src crate. There's a peculiar story there in commit messages. Anyway, this approach should work fine for now. Thanks for supporting symlinks, git! (No thanks to cargo package for not supporting them. I'll talk at you later.)
After that we add Rust toolchain installation into the loop and actually exercise the test suite along with other automated checks. Humans can use them too, just do tests/rust/run_tests.sh before submitting a pull request. If that fails then it's likely to be the same on the build server.
I have no idea how long this build will take on the CI. Hopefully not too long. Let's try and see... Bloated compilation times are a well-know issue with Rust. Honestly, I would not be surprised to see it taking more time than Android build. At least for the first run. Later ones may be faster due to caching, but we still have to build a metric ton of unrelated dependencies because many rustaceans seem to have been bitten by stray npm.js residents.
That's assuming the build actually works, te-he-he...","Let's start checking Rust-Themis during our regular builds.
But first we have to fix a build issue with libthemis-src crate. There's a peculiar story there in commit messages. Anyway, this approach should work fine for now. Thanks for supporting symlinks, git! (No thanks to cargo package for not supporting them. I'll talk at you later.)
After that we add Rust toolchain installation into the loop and actually exercise the test suite along with other automated checks. Humans can use them too, just do tests/rust/run_tests.sh before submitting a pull request. If that fails then it's likely to be the same on the build server.
I have no idea how long this build will take on the CI. Hopefully not too long. Let's try and see... Bloated compilation times are a well-know issue with Rust. Honestly, I would not be surprised to see it taking more time than Android build. At least for the first run. Later ones may be faster due to caching, but we still have to build a metric ton of unrelated dependencies because many rustaceans seem to have been bitten by stray npm.js residents.
That's assuming the build actually works, te-he-he...",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,353,2019-01-22T19:58:55Z,2019-01-28T16:48:04Z,2019-01-28T18:45:01Z,MERGED,True,86,38,17,https://github.com/ilammy,Teach CircleCI to build Rust wrapper,9,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/353,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/353#issuecomment-456562120,"Let's start checking Rust-Themis during our regular builds.
But first we have to fix a build issue with libthemis-src crate. There's a peculiar story there in commit messages. Anyway, this approach should work fine for now. Thanks for supporting symlinks, git! (No thanks to cargo package for not supporting them. I'll talk at you later.)
After that we add Rust toolchain installation into the loop and actually exercise the test suite along with other automated checks. Humans can use them too, just do tests/rust/run_tests.sh before submitting a pull request. If that fails then it's likely to be the same on the build server.
I have no idea how long this build will take on the CI. Hopefully not too long. Let's try and see... Bloated compilation times are a well-know issue with Rust. Honestly, I would not be surprised to see it taking more time than Android build. At least for the first run. Later ones may be faster due to caching, but we still have to build a metric ton of unrelated dependencies because many rustaceans seem to have been bitten by stray npm.js residents.
That's assuming the build actually works, te-he-he...","The last two commits do not really belong to this pull request. But we have to have a green build, so fix the tests here and now. I'm actually relieved that they are useful.
(Nice commit hash btw, 0463666 👹)",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,353,2019-01-22T19:58:55Z,2019-01-28T16:48:04Z,2019-01-28T18:45:01Z,MERGED,True,86,38,17,https://github.com/ilammy,Teach CircleCI to build Rust wrapper,9,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/353,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/353#issuecomment-457928826,"Let's start checking Rust-Themis during our regular builds.
But first we have to fix a build issue with libthemis-src crate. There's a peculiar story there in commit messages. Anyway, this approach should work fine for now. Thanks for supporting symlinks, git! (No thanks to cargo package for not supporting them. I'll talk at you later.)
After that we add Rust toolchain installation into the loop and actually exercise the test suite along with other automated checks. Humans can use them too, just do tests/rust/run_tests.sh before submitting a pull request. If that fails then it's likely to be the same on the build server.
I have no idea how long this build will take on the CI. Hopefully not too long. Let's try and see... Bloated compilation times are a well-know issue with Rust. Honestly, I would not be surprised to see it taking more time than Android build. At least for the first run. Later ones may be faster due to caching, but we still have to build a metric ton of unrelated dependencies because many rustaceans seem to have been bitten by stray npm.js residents.
That's assuming the build actually works, te-he-he...",@ilammy please ping when this PR is ready to be reviewed again :),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,353,2019-01-22T19:58:55Z,2019-01-28T16:48:04Z,2019-01-28T18:45:01Z,MERGED,True,86,38,17,https://github.com/ilammy,Teach CircleCI to build Rust wrapper,9,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/353,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/353#issuecomment-457930433,"Let's start checking Rust-Themis during our regular builds.
But first we have to fix a build issue with libthemis-src crate. There's a peculiar story there in commit messages. Anyway, this approach should work fine for now. Thanks for supporting symlinks, git! (No thanks to cargo package for not supporting them. I'll talk at you later.)
After that we add Rust toolchain installation into the loop and actually exercise the test suite along with other automated checks. Humans can use them too, just do tests/rust/run_tests.sh before submitting a pull request. If that fails then it's likely to be the same on the build server.
I have no idea how long this build will take on the CI. Hopefully not too long. Let's try and see... Bloated compilation times are a well-know issue with Rust. Honestly, I would not be surprised to see it taking more time than Android build. At least for the first run. Later ones may be faster due to caching, but we still have to build a metric ton of unrelated dependencies because many rustaceans seem to have been bitten by stray npm.js residents.
That's assuming the build actually works, te-he-he...",@vixentael @Lagovas The PR is ready for another review round.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,353,2019-01-22T19:58:55Z,2019-01-28T16:48:04Z,2019-01-28T18:45:01Z,MERGED,True,86,38,17,https://github.com/ilammy,Teach CircleCI to build Rust wrapper,9,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/353,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/353#issuecomment-458209349,"Let's start checking Rust-Themis during our regular builds.
But first we have to fix a build issue with libthemis-src crate. There's a peculiar story there in commit messages. Anyway, this approach should work fine for now. Thanks for supporting symlinks, git! (No thanks to cargo package for not supporting them. I'll talk at you later.)
After that we add Rust toolchain installation into the loop and actually exercise the test suite along with other automated checks. Humans can use them too, just do tests/rust/run_tests.sh before submitting a pull request. If that fails then it's likely to be the same on the build server.
I have no idea how long this build will take on the CI. Hopefully not too long. Let's try and see... Bloated compilation times are a well-know issue with Rust. Honestly, I would not be surprised to see it taking more time than Android build. At least for the first run. Later ones may be faster due to caching, but we still have to build a metric ton of unrelated dependencies because many rustaceans seem to have been bitten by stray npm.js residents.
That's assuming the build actually works, te-he-he...",Great job!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,354,2019-01-23T17:20:53Z,2019-01-24T13:18:39Z,2020-11-11T22:01:41Z,MERGED,True,8,0,1,https://github.com/deszip,"Podspec fix, enables bitcode for themis/themis-openssl",1,"['O-iOS :iphone:', 'installation', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/354,https://github.com/deszip,1,https://github.com/cossacklabs/themis/pull/354,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,354,2019-01-23T17:20:53Z,2019-01-24T13:18:39Z,2020-11-11T22:01:41Z,MERGED,True,8,0,1,https://github.com/deszip,"Podspec fix, enables bitcode for themis/themis-openssl",1,"['O-iOS :iphone:', 'installation', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/354,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/354#issuecomment-457192862,,"This fix enables using bitcode for themis/themis-openssl pod.
Thank you @deszip",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,355,2019-01-24T14:31:45Z,2019-01-24T14:53:43Z,2020-11-11T22:01:31Z,MERGED,True,45,34,4,https://github.com/vixentael,Update Themis.podspec to use bitcode,4,"['O-iOS :iphone:', 'installation', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/355,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/355,"Based on #354 and @deszip improvements.

podspec is updated to use bitcode only for Themis iOS with OpenSSL.
new podspec is validated and pushed
examples are updated to use themis 0.10.2","Based on #354 and @deszip improvements.

podspec is updated to use bitcode only for Themis iOS with OpenSSL.
new podspec is validated and pushed
examples are updated to use themis 0.10.2",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,355,2019-01-24T14:31:45Z,2019-01-24T14:53:43Z,2020-11-11T22:01:31Z,MERGED,True,45,34,4,https://github.com/vixentael,Update Themis.podspec to use bitcode,4,"['O-iOS :iphone:', 'installation', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/355,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/355#issuecomment-457217126,"Based on #354 and @deszip improvements.

podspec is updated to use bitcode only for Themis iOS with OpenSSL.
new podspec is validated and pushed
examples are updated to use themis 0.10.2","@deszip thank you a lot, and take a look!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,355,2019-01-24T14:31:45Z,2019-01-24T14:53:43Z,2020-11-11T22:01:31Z,MERGED,True,45,34,4,https://github.com/vixentael,Update Themis.podspec to use bitcode,4,"['O-iOS :iphone:', 'installation', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/355,https://github.com/deszip,3,https://github.com/cossacklabs/themis/pull/355#issuecomment-457224243,"Based on #354 and @deszip improvements.

podspec is updated to use bitcode only for Themis iOS with OpenSSL.
new podspec is validated and pushed
examples are updated to use themis 0.10.2",You are welcome. LGTM.,True,{'HOORAY': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,356,2019-01-27T09:49:28Z,2019-01-28T14:35:03Z,2019-01-28T18:44:32Z,MERGED,True,497,5,13,https://github.com/ilammy,Rust integration tests,5,"['tests', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/356,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/356,"Add Rust to cross-language integration test suite. This verifies that Rust wrapper does not do anything extra with the data and can interoperate with other language wrappers for Themis.
The testing tools have the same command-line interface as other language wrappers. They are added as 'examples' to Cargo.toml so they will be maintained during regular rust-themis development.
Running the wrappers during testing is a bit tricky due the way the test suite is organized. Well, there ain't a problem which cannot be solved by simply applying more duct tape or WD-40, so we use shell scripts to get around that. (Rust does not really have a go run equivalent. Though, @secumod could certainly invent some clever way to cram that into a shebang line ;)","Add Rust to cross-language integration test suite. This verifies that Rust wrapper does not do anything extra with the data and can interoperate with other language wrappers for Themis.
The testing tools have the same command-line interface as other language wrappers. They are added as 'examples' to Cargo.toml so they will be maintained during regular rust-themis development.
Running the wrappers during testing is a bit tricky due the way the test suite is organized. Well, there ain't a problem which cannot be solved by simply applying more duct tape or WD-40, so we use shell scripts to get around that. (Rust does not really have a go run equivalent. Though, @secumod could certainly invent some clever way to cram that into a shebang line ;)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,356,2019-01-27T09:49:28Z,2019-01-28T14:35:03Z,2019-01-28T18:44:32Z,MERGED,True,497,5,13,https://github.com/ilammy,Rust integration tests,5,"['tests', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/356,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/356#issuecomment-457950130,"Add Rust to cross-language integration test suite. This verifies that Rust wrapper does not do anything extra with the data and can interoperate with other language wrappers for Themis.
The testing tools have the same command-line interface as other language wrappers. They are added as 'examples' to Cargo.toml so they will be maintained during regular rust-themis development.
Running the wrappers during testing is a bit tricky due the way the test suite is organized. Well, there ain't a problem which cannot be solved by simply applying more duct tape or WD-40, so we use shell scripts to get around that. (Rust does not really have a go run equivalent. Though, @secumod could certainly invent some clever way to cram that into a shebang line ;)","@vixentael I've pushed a commit with (arguably) improved approach to building and running Rust tools. Please give it a look.
In short, I've moved around Makefile targets and replaced shell scripts with direct installation of compiled binaries into tools/rust. More detailed description is in the commit message.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,356,2019-01-27T09:49:28Z,2019-01-28T14:35:03Z,2019-01-28T18:44:32Z,MERGED,True,497,5,13,https://github.com/ilammy,Rust integration tests,5,"['tests', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/356,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/356#issuecomment-457954256,"Add Rust to cross-language integration test suite. This verifies that Rust wrapper does not do anything extra with the data and can interoperate with other language wrappers for Themis.
The testing tools have the same command-line interface as other language wrappers. They are added as 'examples' to Cargo.toml so they will be maintained during regular rust-themis development.
Running the wrappers during testing is a bit tricky due the way the test suite is organized. Well, there ain't a problem which cannot be solved by simply applying more duct tape or WD-40, so we use shell scripts to get around that. (Rust does not really have a go run equivalent. Though, @secumod could certainly invent some clever way to cram that into a shebang line ;)",I suggest to wait for @Lagovas feedback,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,356,2019-01-27T09:49:28Z,2019-01-28T14:35:03Z,2019-01-28T18:44:32Z,MERGED,True,497,5,13,https://github.com/ilammy,Rust integration tests,5,"['tests', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/356,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/356#issuecomment-458155188,"Add Rust to cross-language integration test suite. This verifies that Rust wrapper does not do anything extra with the data and can interoperate with other language wrappers for Themis.
The testing tools have the same command-line interface as other language wrappers. They are added as 'examples' to Cargo.toml so they will be maintained during regular rust-themis development.
Running the wrappers during testing is a bit tricky due the way the test suite is organized. Well, there ain't a problem which cannot be solved by simply applying more duct tape or WD-40, so we use shell scripts to get around that. (Rust does not really have a go run equivalent. Though, @secumod could certainly invent some clever way to cram that into a shebang line ;)","great job, everyone!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,357,2019-01-28T17:11:36Z,2019-01-28T17:30:24Z,2019-01-28T18:44:43Z,MERGED,True,2,2,1,https://github.com/ilammy,Make rustfmt happy,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/357,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/357,"Off to a great start! Let's fix the broken build on master.
It turned out that PR #356 uses incorrect code style. It has been merged before #353 thus the CI did not catch that. Fix code formatting to keep rustfmt happy and have a green build.
(I should really check that “Format code on commit” checkbox in my IDE... I'm sorry orz)","Off to a great start! Let's fix the broken build on master.
It turned out that PR #356 uses incorrect code style. It has been merged before #353 thus the CI did not catch that. Fix code formatting to keep rustfmt happy and have a green build.
(I should really check that “Format code on commit” checkbox in my IDE... I'm sorry orz)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,357,2019-01-28T17:11:36Z,2019-01-28T17:30:24Z,2019-01-28T18:44:43Z,MERGED,True,2,2,1,https://github.com/ilammy,Make rustfmt happy,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/357,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/357#issuecomment-458218927,"Off to a great start! Let's fix the broken build on master.
It turned out that PR #356 uses incorrect code style. It has been merged before #353 thus the CI did not catch that. Fix code formatting to keep rustfmt happy and have a green build.
(I should really check that “Format code on commit” checkbox in my IDE... I'm sorry orz)","sorry my fault, i merged PRs in a wrong order :(",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,358,2019-01-29T18:58:53Z,2019-02-02T20:30:02Z,2019-02-02T21:35:00Z,MERGED,True,373,196,12,https://github.com/ilammy, Do not use fixed user context with Secure Cell,5,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/358,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/358,"Here are a couple of changes to Secure Cell and Secure Message interface that are long overdue.

do not use the same context for all messages handled by Secure Cell
do some cosmetic method renames in Secure Message

To be specific, the SecureCell::with_key_and_context() constructor has been removed. It is replaced with the following alternatives:

SecureCell*::encrypt_with_context()
SecureCell*::decrypt_with_context()

Which should remind the user that they should provide a unique context for each individual message.
Furthermore, encrypt() and decrypt() methods of SecureCellContextImprint are removed as well to prompt the users to always use some context in context imprint mode of Secure Cell.
As for Secure Message, here we simply give the methods more fitting names. We don't have to mimic C API in naming because SecureMessage and SecureSign/SecureVerify are different entities in Rust.

While we're here, update the API to use a new feature of Rust 2018: impl Trait types. With this it is no longer necessary to introduce ad-hoc generics to accept a parameter implementing a particular trait. The code is a bit easier to read and comprehend without all those magical one-letter identifiers.
Compare
pub fn decrypt_with_context(
    &self,
    user_context: impl AsRef<[u8]>,
    message: impl AsRef<[u8]>,
    token: impl AsRef<[u8]>,
) -> Result<Vec<u8>> {
}
with
pub fn decrypt_with_context<C, M, T>(
    &self,
    user_context: C,
    message: M,
    token: T,
) -> Result<Vec<u8>>
where
    C: AsRef<[u8]>,
    M: AsRef<[u8]>,
    T: AsRef<[u8]>,
{
}
or
pub fn decrypt_with_context<C: AsRef<[u8]>, M: AsRef<[u8]>, T: AsRef<[u8]>>(
    &self,
    user_context: C,
    message: M,
    token: T,
) -> Result<Vec<u8>> {
}
All these forms use the same implementation under the hood. However, with impl Trait it is no longer possible to explicitly specify generic parameters:
cell.decrypt_with_context::<[u8; 0], &[u8], &[u8]>([], &message, &token);
It's not like one would ever need to specify them in the first place (realistically), but this is still a breaking change (technically).

These changes are grouped in a single pull request because they are both breaking changes and touch the changelog. I don't want to resolve merge conflicts later.","Here are a couple of changes to Secure Cell and Secure Message interface that are long overdue.

do not use the same context for all messages handled by Secure Cell
do some cosmetic method renames in Secure Message

To be specific, the SecureCell::with_key_and_context() constructor has been removed. It is replaced with the following alternatives:

SecureCell*::encrypt_with_context()
SecureCell*::decrypt_with_context()

Which should remind the user that they should provide a unique context for each individual message.
Furthermore, encrypt() and decrypt() methods of SecureCellContextImprint are removed as well to prompt the users to always use some context in context imprint mode of Secure Cell.
As for Secure Message, here we simply give the methods more fitting names. We don't have to mimic C API in naming because SecureMessage and SecureSign/SecureVerify are different entities in Rust.

While we're here, update the API to use a new feature of Rust 2018: impl Trait types. With this it is no longer necessary to introduce ad-hoc generics to accept a parameter implementing a particular trait. The code is a bit easier to read and comprehend without all those magical one-letter identifiers.
Compare
pub fn decrypt_with_context(
    &self,
    user_context: impl AsRef<[u8]>,
    message: impl AsRef<[u8]>,
    token: impl AsRef<[u8]>,
) -> Result<Vec<u8>> {
}
with
pub fn decrypt_with_context<C, M, T>(
    &self,
    user_context: C,
    message: M,
    token: T,
) -> Result<Vec<u8>>
where
    C: AsRef<[u8]>,
    M: AsRef<[u8]>,
    T: AsRef<[u8]>,
{
}
or
pub fn decrypt_with_context<C: AsRef<[u8]>, M: AsRef<[u8]>, T: AsRef<[u8]>>(
    &self,
    user_context: C,
    message: M,
    token: T,
) -> Result<Vec<u8>> {
}
All these forms use the same implementation under the hood. However, with impl Trait it is no longer possible to explicitly specify generic parameters:
cell.decrypt_with_context::<[u8; 0], &[u8], &[u8]>([], &message, &token);
It's not like one would ever need to specify them in the first place (realistically), but this is still a breaking change (technically).

These changes are grouped in a single pull request because they are both breaking changes and touch the changelog. I don't want to resolve merge conflicts later.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,358,2019-01-29T18:58:53Z,2019-02-02T20:30:02Z,2019-02-02T21:35:00Z,MERGED,True,373,196,12,https://github.com/ilammy, Do not use fixed user context with Secure Cell,5,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/358,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/358#issuecomment-458898811,"Here are a couple of changes to Secure Cell and Secure Message interface that are long overdue.

do not use the same context for all messages handled by Secure Cell
do some cosmetic method renames in Secure Message

To be specific, the SecureCell::with_key_and_context() constructor has been removed. It is replaced with the following alternatives:

SecureCell*::encrypt_with_context()
SecureCell*::decrypt_with_context()

Which should remind the user that they should provide a unique context for each individual message.
Furthermore, encrypt() and decrypt() methods of SecureCellContextImprint are removed as well to prompt the users to always use some context in context imprint mode of Secure Cell.
As for Secure Message, here we simply give the methods more fitting names. We don't have to mimic C API in naming because SecureMessage and SecureSign/SecureVerify are different entities in Rust.

While we're here, update the API to use a new feature of Rust 2018: impl Trait types. With this it is no longer necessary to introduce ad-hoc generics to accept a parameter implementing a particular trait. The code is a bit easier to read and comprehend without all those magical one-letter identifiers.
Compare
pub fn decrypt_with_context(
    &self,
    user_context: impl AsRef<[u8]>,
    message: impl AsRef<[u8]>,
    token: impl AsRef<[u8]>,
) -> Result<Vec<u8>> {
}
with
pub fn decrypt_with_context<C, M, T>(
    &self,
    user_context: C,
    message: M,
    token: T,
) -> Result<Vec<u8>>
where
    C: AsRef<[u8]>,
    M: AsRef<[u8]>,
    T: AsRef<[u8]>,
{
}
or
pub fn decrypt_with_context<C: AsRef<[u8]>, M: AsRef<[u8]>, T: AsRef<[u8]>>(
    &self,
    user_context: C,
    message: M,
    token: T,
) -> Result<Vec<u8>> {
}
All these forms use the same implementation under the hood. However, with impl Trait it is no longer possible to explicitly specify generic parameters:
cell.decrypt_with_context::<[u8; 0], &[u8], &[u8]>([], &message, &token);
It's not like one would ever need to specify them in the first place (realistically), but this is still a breaking change (technically).

These changes are grouped in a single pull request because they are both breaking changes and touch the changelog. I don't want to resolve merge conflicts later.",can you swap parameters order that first will be message and context the second? to be similar with other our wrappers because if someone will use themis with different languages he could do a mistake with incorrect order of parameters. just because in all other wrappers he used other order,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,358,2019-01-29T18:58:53Z,2019-02-02T20:30:02Z,2019-02-02T21:35:00Z,MERGED,True,373,196,12,https://github.com/ilammy, Do not use fixed user context with Secure Cell,5,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/358,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/358#issuecomment-458979879,"Here are a couple of changes to Secure Cell and Secure Message interface that are long overdue.

do not use the same context for all messages handled by Secure Cell
do some cosmetic method renames in Secure Message

To be specific, the SecureCell::with_key_and_context() constructor has been removed. It is replaced with the following alternatives:

SecureCell*::encrypt_with_context()
SecureCell*::decrypt_with_context()

Which should remind the user that they should provide a unique context for each individual message.
Furthermore, encrypt() and decrypt() methods of SecureCellContextImprint are removed as well to prompt the users to always use some context in context imprint mode of Secure Cell.
As for Secure Message, here we simply give the methods more fitting names. We don't have to mimic C API in naming because SecureMessage and SecureSign/SecureVerify are different entities in Rust.

While we're here, update the API to use a new feature of Rust 2018: impl Trait types. With this it is no longer necessary to introduce ad-hoc generics to accept a parameter implementing a particular trait. The code is a bit easier to read and comprehend without all those magical one-letter identifiers.
Compare
pub fn decrypt_with_context(
    &self,
    user_context: impl AsRef<[u8]>,
    message: impl AsRef<[u8]>,
    token: impl AsRef<[u8]>,
) -> Result<Vec<u8>> {
}
with
pub fn decrypt_with_context<C, M, T>(
    &self,
    user_context: C,
    message: M,
    token: T,
) -> Result<Vec<u8>>
where
    C: AsRef<[u8]>,
    M: AsRef<[u8]>,
    T: AsRef<[u8]>,
{
}
or
pub fn decrypt_with_context<C: AsRef<[u8]>, M: AsRef<[u8]>, T: AsRef<[u8]>>(
    &self,
    user_context: C,
    message: M,
    token: T,
) -> Result<Vec<u8>> {
}
All these forms use the same implementation under the hood. However, with impl Trait it is no longer possible to explicitly specify generic parameters:
cell.decrypt_with_context::<[u8; 0], &[u8], &[u8]>([], &message, &token);
It's not like one would ever need to specify them in the first place (realistically), but this is still a breaking change (technically).

These changes are grouped in a single pull request because they are both breaking changes and touch the changelog. I don't want to resolve merge conflicts later.","@Lagovas thanks for pointing this out. No idea why I did not feel weird when using that order. I have pushed a commit which changes the argument order to ""message, token, user context"" everywhere.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,358,2019-01-29T18:58:53Z,2019-02-02T20:30:02Z,2019-02-02T21:35:00Z,MERGED,True,373,196,12,https://github.com/ilammy, Do not use fixed user context with Secure Cell,5,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/358,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/358#issuecomment-459911514,"Here are a couple of changes to Secure Cell and Secure Message interface that are long overdue.

do not use the same context for all messages handled by Secure Cell
do some cosmetic method renames in Secure Message

To be specific, the SecureCell::with_key_and_context() constructor has been removed. It is replaced with the following alternatives:

SecureCell*::encrypt_with_context()
SecureCell*::decrypt_with_context()

Which should remind the user that they should provide a unique context for each individual message.
Furthermore, encrypt() and decrypt() methods of SecureCellContextImprint are removed as well to prompt the users to always use some context in context imprint mode of Secure Cell.
As for Secure Message, here we simply give the methods more fitting names. We don't have to mimic C API in naming because SecureMessage and SecureSign/SecureVerify are different entities in Rust.

While we're here, update the API to use a new feature of Rust 2018: impl Trait types. With this it is no longer necessary to introduce ad-hoc generics to accept a parameter implementing a particular trait. The code is a bit easier to read and comprehend without all those magical one-letter identifiers.
Compare
pub fn decrypt_with_context(
    &self,
    user_context: impl AsRef<[u8]>,
    message: impl AsRef<[u8]>,
    token: impl AsRef<[u8]>,
) -> Result<Vec<u8>> {
}
with
pub fn decrypt_with_context<C, M, T>(
    &self,
    user_context: C,
    message: M,
    token: T,
) -> Result<Vec<u8>>
where
    C: AsRef<[u8]>,
    M: AsRef<[u8]>,
    T: AsRef<[u8]>,
{
}
or
pub fn decrypt_with_context<C: AsRef<[u8]>, M: AsRef<[u8]>, T: AsRef<[u8]>>(
    &self,
    user_context: C,
    message: M,
    token: T,
) -> Result<Vec<u8>> {
}
All these forms use the same implementation under the hood. However, with impl Trait it is no longer possible to explicitly specify generic parameters:
cell.decrypt_with_context::<[u8; 0], &[u8], &[u8]>([], &message, &token);
It's not like one would ever need to specify them in the first place (realistically), but this is still a breaking change (technically).

These changes are grouped in a single pull request because they are both breaking changes and touch the changelog. I don't want to resolve merge conflicts later.","to be honest, i just found out that java wrapper has totally mixed up order of params as well :(
static SecureCellData protect(byte[] key, byte[] context, byte[] data, int mode)

but it's outside the scope of this PR, i'm just complaining",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,358,2019-01-29T18:58:53Z,2019-02-02T20:30:02Z,2019-02-02T21:35:00Z,MERGED,True,373,196,12,https://github.com/ilammy, Do not use fixed user context with Secure Cell,5,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/358,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/358#issuecomment-459954301,"Here are a couple of changes to Secure Cell and Secure Message interface that are long overdue.

do not use the same context for all messages handled by Secure Cell
do some cosmetic method renames in Secure Message

To be specific, the SecureCell::with_key_and_context() constructor has been removed. It is replaced with the following alternatives:

SecureCell*::encrypt_with_context()
SecureCell*::decrypt_with_context()

Which should remind the user that they should provide a unique context for each individual message.
Furthermore, encrypt() and decrypt() methods of SecureCellContextImprint are removed as well to prompt the users to always use some context in context imprint mode of Secure Cell.
As for Secure Message, here we simply give the methods more fitting names. We don't have to mimic C API in naming because SecureMessage and SecureSign/SecureVerify are different entities in Rust.

While we're here, update the API to use a new feature of Rust 2018: impl Trait types. With this it is no longer necessary to introduce ad-hoc generics to accept a parameter implementing a particular trait. The code is a bit easier to read and comprehend without all those magical one-letter identifiers.
Compare
pub fn decrypt_with_context(
    &self,
    user_context: impl AsRef<[u8]>,
    message: impl AsRef<[u8]>,
    token: impl AsRef<[u8]>,
) -> Result<Vec<u8>> {
}
with
pub fn decrypt_with_context<C, M, T>(
    &self,
    user_context: C,
    message: M,
    token: T,
) -> Result<Vec<u8>>
where
    C: AsRef<[u8]>,
    M: AsRef<[u8]>,
    T: AsRef<[u8]>,
{
}
or
pub fn decrypt_with_context<C: AsRef<[u8]>, M: AsRef<[u8]>, T: AsRef<[u8]>>(
    &self,
    user_context: C,
    message: M,
    token: T,
) -> Result<Vec<u8>> {
}
All these forms use the same implementation under the hood. However, with impl Trait it is no longer possible to explicitly specify generic parameters:
cell.decrypt_with_context::<[u8; 0], &[u8], &[u8]>([], &message, &token);
It's not like one would ever need to specify them in the first place (realistically), but this is still a breaking change (technically).

These changes are grouped in a single pull request because they are both breaking changes and touch the changelog. I don't want to resolve merge conflicts later.","if @Lagovas doesn't have any other comments, I believe this PR can be merged",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,360,2019-01-29T19:21:45Z,2019-01-29T19:42:30Z,2019-03-27T23:42:18Z,MERGED,True,3,2,1,https://github.com/vixentael,update php compose installer,1,"['W-PHPThemis :elephant:', 'infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/360,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/360,Looks like PHP installer was updated and its hash sum changed now.,Looks like PHP installer was updated and its hash sum changed now.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,360,2019-01-29T19:21:45Z,2019-01-29T19:42:30Z,2019-03-27T23:42:18Z,MERGED,True,3,2,1,https://github.com/vixentael,update php compose installer,1,"['W-PHPThemis :elephant:', 'infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/360,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/360#issuecomment-458679503,Looks like PHP installer was updated and its hash sum changed now.,Solves #359,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,361,2019-01-30T00:38:15Z,2019-02-02T00:52:57Z,2019-02-02T00:53:00Z,MERGED,True,56,1,1,https://github.com/vixentael,Android: distribute via maven,1,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/361,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/361,"Disclaimer: first time I'm trying to setup maven distribution.
I've updated build.gradle to distribute themis.aar to bintray.
Problem I've got that :boringssl target doesn't support bintrayUpload obviously. Lines 48-53 are dirty hack to avoid calling distribution target for :borinssl project.
Please advice how to manage it properly.
Repository
https://bintray.com/cossacklabs/maven/themis
Distribution

Export env variables

export BINTRAY_USER=cossacklabs
export BINTRAY_KEY=<from bintray profile / edit / API keys > 
export BINTRAY_GPG_PASSPHRASE=<passphrase to unlock private GPG key> 


Run

./gradlew clean assembleRelease bintrayUpload

Usage in Android project

Add bintray repository into your repositories from build.gradle

repositories {
        maven { url ""https://dl.bintray.com/cossacklabs/maven/"" }
}


Link to themis from app/build.gradle

dependencies {
     // ....
    implementation 'com.cossacklabs.com:themis:0.10.0'
}

Usage example: cossacklabs/themis-java-examples#2","Disclaimer: first time I'm trying to setup maven distribution.
I've updated build.gradle to distribute themis.aar to bintray.
Problem I've got that :boringssl target doesn't support bintrayUpload obviously. Lines 48-53 are dirty hack to avoid calling distribution target for :borinssl project.
Please advice how to manage it properly.
Repository
https://bintray.com/cossacklabs/maven/themis
Distribution

Export env variables

export BINTRAY_USER=cossacklabs
export BINTRAY_KEY=<from bintray profile / edit / API keys > 
export BINTRAY_GPG_PASSPHRASE=<passphrase to unlock private GPG key> 


Run

./gradlew clean assembleRelease bintrayUpload

Usage in Android project

Add bintray repository into your repositories from build.gradle

repositories {
        maven { url ""https://dl.bintray.com/cossacklabs/maven/"" }
}


Link to themis from app/build.gradle

dependencies {
     // ....
    implementation 'com.cossacklabs.com:themis:0.10.0'
}

Usage example: cossacklabs/themis-java-examples#2",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,361,2019-01-30T00:38:15Z,2019-02-02T00:52:57Z,2019-02-02T00:53:00Z,MERGED,True,56,1,1,https://github.com/vixentael,Android: distribute via maven,1,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/361,https://github.com/ignatk,2,https://github.com/cossacklabs/themis/pull/361#issuecomment-458867659,"Disclaimer: first time I'm trying to setup maven distribution.
I've updated build.gradle to distribute themis.aar to bintray.
Problem I've got that :boringssl target doesn't support bintrayUpload obviously. Lines 48-53 are dirty hack to avoid calling distribution target for :borinssl project.
Please advice how to manage it properly.
Repository
https://bintray.com/cossacklabs/maven/themis
Distribution

Export env variables

export BINTRAY_USER=cossacklabs
export BINTRAY_KEY=<from bintray profile / edit / API keys > 
export BINTRAY_GPG_PASSPHRASE=<passphrase to unlock private GPG key> 


Run

./gradlew clean assembleRelease bintrayUpload

Usage in Android project

Add bintray repository into your repositories from build.gradle

repositories {
        maven { url ""https://dl.bintray.com/cossacklabs/maven/"" }
}


Link to themis from app/build.gradle

dependencies {
     // ....
    implementation 'com.cossacklabs.com:themis:0.10.0'
}

Usage example: cossacklabs/themis-java-examples#2","TBH tasks.whenAdded was a hack as well for boringssl, so I don't think it makes it hackier",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,361,2019-01-30T00:38:15Z,2019-02-02T00:52:57Z,2019-02-02T00:53:00Z,MERGED,True,56,1,1,https://github.com/vixentael,Android: distribute via maven,1,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/361,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/361#issuecomment-458876600,"Disclaimer: first time I'm trying to setup maven distribution.
I've updated build.gradle to distribute themis.aar to bintray.
Problem I've got that :boringssl target doesn't support bintrayUpload obviously. Lines 48-53 are dirty hack to avoid calling distribution target for :borinssl project.
Please advice how to manage it properly.
Repository
https://bintray.com/cossacklabs/maven/themis
Distribution

Export env variables

export BINTRAY_USER=cossacklabs
export BINTRAY_KEY=<from bintray profile / edit / API keys > 
export BINTRAY_GPG_PASSPHRASE=<passphrase to unlock private GPG key> 


Run

./gradlew clean assembleRelease bintrayUpload

Usage in Android project

Add bintray repository into your repositories from build.gradle

repositories {
        maven { url ""https://dl.bintray.com/cossacklabs/maven/"" }
}


Link to themis from app/build.gradle

dependencies {
     // ....
    implementation 'com.cossacklabs.com:themis:0.10.0'
}

Usage example: cossacklabs/themis-java-examples#2","Well, yes, but I thought that there might be a correct way to say ""hey, these tasks do not belong to boringssl project"" :))",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,362,2019-02-03T08:08:06Z,2019-02-04T17:14:14Z,2019-02-09T18:18:35Z,MERGED,True,230,225,15,https://github.com/ilammy,Rename private key structures,3,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/362,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/362,"Let‘s use consistent naming for our key data structures in Rust code. As outlined by @vixentael in this pull request comment, wording “secret key” usually refers to symmetric keys and it is confusing in the context of asymmetric cryptography. We should use the traditional “private and public keys” terminology instead. All other language wrappers and the core library do so.
Update the structure and variable names, command-line arguments and documentation to consistently use “private keys” everywhere. Avoid jokes about private parts. This is a breaking change due to structure renaming.","Let‘s use consistent naming for our key data structures in Rust code. As outlined by @vixentael in this pull request comment, wording “secret key” usually refers to symmetric keys and it is confusing in the context of asymmetric cryptography. We should use the traditional “private and public keys” terminology instead. All other language wrappers and the core library do so.
Update the structure and variable names, command-line arguments and documentation to consistently use “private keys” everywhere. Avoid jokes about private parts. This is a breaking change due to structure renaming.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,363,2019-02-03T08:33:47Z,2019-02-05T11:41:11Z,2019-02-09T18:18:35Z,CLOSED,False,163,50,3,https://github.com/ilammy,Panic on empty input for Secure Cell,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/363,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/363,"It does not make much sense to use an empty master key for encryption, or encrypt or decrypt empty messages. Secure Cell does not allow such inputs and returns errors if the user insists. Additionally, context imprint mode of Secure Cell requires a non-empty user context.
The programmers should never really use Secure Cell in this way. If an empty key, or message, or token, or user context is used anywhere then it's most likely to be a programming error. Therefore treat it as such — like using an invalid index with a slice — and panic instead of returning an error code if we encounter empty inputs.","It does not make much sense to use an empty master key for encryption, or encrypt or decrypt empty messages. Secure Cell does not allow such inputs and returns errors if the user insists. Additionally, context imprint mode of Secure Cell requires a non-empty user context.
The programmers should never really use Secure Cell in this way. If an empty key, or message, or token, or user context is used anywhere then it's most likely to be a programming error. Therefore treat it as such — like using an invalid index with a slice — and panic instead of returning an error code if we encounter empty inputs.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,363,2019-02-03T08:33:47Z,2019-02-05T11:41:11Z,2019-02-09T18:18:35Z,CLOSED,False,163,50,3,https://github.com/ilammy,Panic on empty input for Secure Cell,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/363,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/363#issuecomment-460063847,"It does not make much sense to use an empty master key for encryption, or encrypt or decrypt empty messages. Secure Cell does not allow such inputs and returns errors if the user insists. Additionally, context imprint mode of Secure Cell requires a non-empty user context.
The programmers should never really use Secure Cell in this way. If an empty key, or message, or token, or user context is used anywhere then it's most likely to be a programming error. Therefore treat it as such — like using an invalid index with a slice — and panic instead of returning an error code if we encounter empty inputs.","Are you sure that the code should panic rather than return error if input parameters are not valid?
I've read only one chapter of Rust book about panicking, but I'm not sure how typical this behavior is for Rust-devs.
Few usage examples:


Wrong configuration. Developers sets up SecureCell without master key. On the runtime SecureCell returns panic to indicate that master key is required. Panic looks appropriate, developers add master key in code.


Data got from network. Application got master key / message from network requests and called SecureCell to decrypt message. Due to network encoding or failure, key or message might be corrupted. SecureCell responds with panic, which might be unexpected for developers and be found only during app usage.


To make sure that code works properly, developers should handle both panics and errors. Panic looks as (unexpected) additional check-to-make. Is it ok for Rust ecosystem?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,363,2019-02-03T08:33:47Z,2019-02-05T11:41:11Z,2019-02-09T18:18:35Z,CLOSED,False,163,50,3,https://github.com/ilammy,Panic on empty input for Secure Cell,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/363,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/363#issuecomment-460081977,"It does not make much sense to use an empty master key for encryption, or encrypt or decrypt empty messages. Secure Cell does not allow such inputs and returns errors if the user insists. Additionally, context imprint mode of Secure Cell requires a non-empty user context.
The programmers should never really use Secure Cell in this way. If an empty key, or message, or token, or user context is used anywhere then it's most likely to be a programming error. Therefore treat it as such — like using an invalid index with a slice — and panic instead of returning an error code if we encounter empty inputs.","Are you sure that the code should panic rather than return error if input parameters are not valid?

No, I'm not completely sure.
The approach depends on the severity of the error condition which I would like to discuss.
On panics
Libraries should rarely panic because this is a decision that affects the whole application rather than only the library code and its direct users. By panicking the library forces the whole program to handle an error in a certain way and does not give the programmer an option for different behavior.
One does not really handle panics (though there are mechanisms for that). Instead panics are to be prevented. So the idea is that the developer has to either perform necessary safety checks before calling the code that might panic, or use some other means to prevent a possible panic (e.g., iterator API makes it impossible to use invalid array indices in the first place).
Errors signaled by panics should be so severe that killing the thread justifies the prevented harm. Now, after considering your example with keys obtained externally I'm not really sure that we need to panic at all, not just in this situation. Using invalid or corrupted data is certainly a preventable error condition. It can be avoided by performing a check. It can be handled after-the-fact by inspecting the returned result. And it does not really jeopardize the process as a whole if it happens, in contrast with using an out-of-bounds array index for example.
So it seems it would be fine to leave the situation as it is now (without panics). The user is technically allowed to pass empty keys, tokens, contexts, messages to Secure Cell. However, they will get an error in result. Even if that's a configuration error then it has to be handled explicitly.
Opinions?
On further actions
One of my concerns was about the master key. It is currently possible to construct a Secure Cell with an empty master key, but the error will be reported only when the cell is actually used to encrypt or decrypt data. The construction site and the usage site may be quite distant in code and time which can make it hard to track this error.
I think it would be nice to prevent this kind of errors earlier. I'd like to change the Secure Cell constructor to return a Result instead which should be an error if the key is empty. This will force the users to handle this possible error at the construction site.
That can be done in a different pull request and this one can be closed if we choose to not add any new panics to the code.
Alternatives
Some libraries provide “dual interface”. For Secure Cell it would be an encrypt() method that returns Vec<u8> directly and panics on any error whatsoever, accompanied by its cousin try_encrypt() that returns an explicit Result<Vec<u8>> and never panics.
It looks a bit nicer in the code but I find this approach to have poor discipline. It's not that hard to add an .unwrap(), or .expect(), or even just ? to the line to handle the error in a suitable way.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,363,2019-02-03T08:33:47Z,2019-02-05T11:41:11Z,2019-02-09T18:18:35Z,CLOSED,False,163,50,3,https://github.com/ilammy,Panic on empty input for Secure Cell,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/363,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/363#issuecomment-460086677,"It does not make much sense to use an empty master key for encryption, or encrypt or decrypt empty messages. Secure Cell does not allow such inputs and returns errors if the user insists. Additionally, context imprint mode of Secure Cell requires a non-empty user context.
The programmers should never really use Secure Cell in this way. If an empty key, or message, or token, or user context is used anywhere then it's most likely to be a programming error. Therefore treat it as such — like using an invalid index with a slice — and panic instead of returning an error code if we encounter empty inputs.","The user is technically allowed to pass empty keys, tokens, contexts, messages to Secure Cell. However, they will get an error in result.

agree

I'd like to change the Secure Cell constructor to return a Result instead which should be an error if the key is empty

agree.
instead of panicking, can we add length-checks? If no token/context/masterkey/message - return Error as result?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,363,2019-02-03T08:33:47Z,2019-02-05T11:41:11Z,2019-02-09T18:18:35Z,CLOSED,False,163,50,3,https://github.com/ilammy,Panic on empty input for Secure Cell,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/363,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/363#issuecomment-460607372,"It does not make much sense to use an empty master key for encryption, or encrypt or decrypt empty messages. Secure Cell does not allow such inputs and returns errors if the user insists. Additionally, context imprint mode of Secure Cell requires a non-empty user context.
The programmers should never really use Secure Cell in this way. If an empty key, or message, or token, or user context is used anywhere then it's most likely to be a programming error. Therefore treat it as such — like using an invalid index with a slice — and panic instead of returning an error code if we encounter empty inputs.","@vixentael, I've opened a new pull request with early length checks for master key during Secure Cell construction. This one PR will be closed as there will be no expected panics in the code.
Rust-Themis already reports an error for invalid length of other parameters. The checks are actually performed by Themis core. We have tests that verify this (e.g., for message).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,364,2019-02-03T09:28:31Z,2019-02-04T14:28:33Z,2019-02-05T11:49:50Z,MERGED,True,655,1,12,https://github.com/ilammy,Fuzzing with american fuzzy lop,2,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/364,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/364,"This one has been on my mind for quite a while and finally I've managed to get it going. Let's throw a security fuzzer into the breach and see what it finds for us. (Oh boy, some crashes does it find! I've got seven of them reported in seven minutes. Based on a single input file with no other hints.)

Here we add american fuzzy lop because I like how little tweaking and configuration it requires. Basically, you feed it an example input data and it uses — high technology from 1960s — artificial intelligence (!) and machine learning (!!) to work through big data (!!!) queue of tests trying to invent ones that crash your application.
You can read user manual (of a sort) in the README. In order to run the fuzzer you need to install it first (apt get afl or similar) and then do make fuzz FUZZ_BIN=something to build and run the tools.
Implementation-wise, we make a custom build of Themis (by recursively calling make because that's the easiest way) which is instrumented by a special compiler. This allows the fuzzer to monitor the behavior of Themis and the tools and see how the input influences the control flow in the program.
Only two tools are implemented for starters:


Round-trip through a Secure Cell in sealing mode.
This makes sure that user input cannot be used to produce a secure container which crashes the application during processing.


Decrypting a container with Secure Cell in sealing mode.
This makes sure that data corruption cannot cause the application to crash when receiving messages encrypted with Secure Cell from untrusted sources.


It should be easy to add more tools in the future. For example, Secure Message could use a fuzzer for key files. Other components use the same containers as Secure Cell so fuzzing the encrypted data may not be so fruitful, but it may still be worth a shot.
I admit that error handling and memory management in the tools is a bit sloppy but that should be fine unless it crashes in unexpected places. It's just too verbose to do everything right.
Finally, we add a make fuzz step to the CI build in order to keep up with API changes. We don't run the fuzzing automatically but let's at least ensure that the tools can be compiled. (We can also check that they can handle the input data but it's not that important.)","This one has been on my mind for quite a while and finally I've managed to get it going. Let's throw a security fuzzer into the breach and see what it finds for us. (Oh boy, some crashes does it find! I've got seven of them reported in seven minutes. Based on a single input file with no other hints.)

Here we add american fuzzy lop because I like how little tweaking and configuration it requires. Basically, you feed it an example input data and it uses — high technology from 1960s — artificial intelligence (!) and machine learning (!!) to work through big data (!!!) queue of tests trying to invent ones that crash your application.
You can read user manual (of a sort) in the README. In order to run the fuzzer you need to install it first (apt get afl or similar) and then do make fuzz FUZZ_BIN=something to build and run the tools.
Implementation-wise, we make a custom build of Themis (by recursively calling make because that's the easiest way) which is instrumented by a special compiler. This allows the fuzzer to monitor the behavior of Themis and the tools and see how the input influences the control flow in the program.
Only two tools are implemented for starters:


Round-trip through a Secure Cell in sealing mode.
This makes sure that user input cannot be used to produce a secure container which crashes the application during processing.


Decrypting a container with Secure Cell in sealing mode.
This makes sure that data corruption cannot cause the application to crash when receiving messages encrypted with Secure Cell from untrusted sources.


It should be easy to add more tools in the future. For example, Secure Message could use a fuzzer for key files. Other components use the same containers as Secure Cell so fuzzing the encrypted data may not be so fruitful, but it may still be worth a shot.
I admit that error handling and memory management in the tools is a bit sloppy but that should be fine unless it crashes in unexpected places. It's just too verbose to do everything right.
Finally, we add a make fuzz step to the CI build in order to keep up with API changes. We don't run the fuzzing automatically but let's at least ensure that the tools can be compiled. (We can also check that they can handle the input data but it's not that important.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,364,2019-02-03T09:28:31Z,2019-02-04T14:28:33Z,2019-02-05T11:49:50Z,MERGED,True,655,1,12,https://github.com/ilammy,Fuzzing with american fuzzy lop,2,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/364,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/364#issuecomment-460064904,"This one has been on my mind for quite a while and finally I've managed to get it going. Let's throw a security fuzzer into the breach and see what it finds for us. (Oh boy, some crashes does it find! I've got seven of them reported in seven minutes. Based on a single input file with no other hints.)

Here we add american fuzzy lop because I like how little tweaking and configuration it requires. Basically, you feed it an example input data and it uses — high technology from 1960s — artificial intelligence (!) and machine learning (!!) to work through big data (!!!) queue of tests trying to invent ones that crash your application.
You can read user manual (of a sort) in the README. In order to run the fuzzer you need to install it first (apt get afl or similar) and then do make fuzz FUZZ_BIN=something to build and run the tools.
Implementation-wise, we make a custom build of Themis (by recursively calling make because that's the easiest way) which is instrumented by a special compiler. This allows the fuzzer to monitor the behavior of Themis and the tools and see how the input influences the control flow in the program.
Only two tools are implemented for starters:


Round-trip through a Secure Cell in sealing mode.
This makes sure that user input cannot be used to produce a secure container which crashes the application during processing.


Decrypting a container with Secure Cell in sealing mode.
This makes sure that data corruption cannot cause the application to crash when receiving messages encrypted with Secure Cell from untrusted sources.


It should be easy to add more tools in the future. For example, Secure Message could use a fuzzer for key files. Other components use the same containers as Secure Cell so fuzzing the encrypted data may not be so fruitful, but it may still be worth a shot.
I admit that error handling and memory management in the tools is a bit sloppy but that should be fine unless it crashes in unexpected places. It's just too verbose to do everything right.
Finally, we add a make fuzz step to the CI build in order to keep up with API changes. We don't run the fuzzing automatically but let's at least ensure that the tools can be compiled. (We can also check that they can handle the input data but it's not that important.)","Wow, that's really cool!
I'll play with it too :)
I believe in future we might want to add fuzzer tests in CI as well (depends on false positives number).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,364,2019-02-03T09:28:31Z,2019-02-04T14:28:33Z,2019-02-05T11:49:50Z,MERGED,True,655,1,12,https://github.com/ilammy,Fuzzing with american fuzzy lop,2,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/364,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/364#issuecomment-460069790,"This one has been on my mind for quite a while and finally I've managed to get it going. Let's throw a security fuzzer into the breach and see what it finds for us. (Oh boy, some crashes does it find! I've got seven of them reported in seven minutes. Based on a single input file with no other hints.)

Here we add american fuzzy lop because I like how little tweaking and configuration it requires. Basically, you feed it an example input data and it uses — high technology from 1960s — artificial intelligence (!) and machine learning (!!) to work through big data (!!!) queue of tests trying to invent ones that crash your application.
You can read user manual (of a sort) in the README. In order to run the fuzzer you need to install it first (apt get afl or similar) and then do make fuzz FUZZ_BIN=something to build and run the tools.
Implementation-wise, we make a custom build of Themis (by recursively calling make because that's the easiest way) which is instrumented by a special compiler. This allows the fuzzer to monitor the behavior of Themis and the tools and see how the input influences the control flow in the program.
Only two tools are implemented for starters:


Round-trip through a Secure Cell in sealing mode.
This makes sure that user input cannot be used to produce a secure container which crashes the application during processing.


Decrypting a container with Secure Cell in sealing mode.
This makes sure that data corruption cannot cause the application to crash when receiving messages encrypted with Secure Cell from untrusted sources.


It should be easy to add more tools in the future. For example, Secure Message could use a fuzzer for key files. Other components use the same containers as Secure Cell so fuzzing the encrypted data may not be so fruitful, but it may still be worth a shot.
I admit that error handling and memory management in the tools is a bit sloppy but that should be fine unless it crashes in unexpected places. It's just too verbose to do everything right.
Finally, we add a make fuzz step to the CI build in order to keep up with API changes. We don't run the fuzzing automatically but let's at least ensure that the tools can be compiled. (We can also check that they can handle the input data but it's not that important.)","Do you find way to investigate crash results?
I found that afl has crash triage tool for pointing out the crash source, but it's written for GDB (I have LLDB), and I haven't found an easy way to point LLDB to the crash.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,364,2019-02-03T09:28:31Z,2019-02-04T14:28:33Z,2019-02-05T11:49:50Z,MERGED,True,655,1,12,https://github.com/ilammy,Fuzzing with american fuzzy lop,2,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/364,https://github.com/gene-eu-zz,4,https://github.com/cossacklabs/themis/pull/364#issuecomment-460074216,"This one has been on my mind for quite a while and finally I've managed to get it going. Let's throw a security fuzzer into the breach and see what it finds for us. (Oh boy, some crashes does it find! I've got seven of them reported in seven minutes. Based on a single input file with no other hints.)

Here we add american fuzzy lop because I like how little tweaking and configuration it requires. Basically, you feed it an example input data and it uses — high technology from 1960s — artificial intelligence (!) and machine learning (!!) to work through big data (!!!) queue of tests trying to invent ones that crash your application.
You can read user manual (of a sort) in the README. In order to run the fuzzer you need to install it first (apt get afl or similar) and then do make fuzz FUZZ_BIN=something to build and run the tools.
Implementation-wise, we make a custom build of Themis (by recursively calling make because that's the easiest way) which is instrumented by a special compiler. This allows the fuzzer to monitor the behavior of Themis and the tools and see how the input influences the control flow in the program.
Only two tools are implemented for starters:


Round-trip through a Secure Cell in sealing mode.
This makes sure that user input cannot be used to produce a secure container which crashes the application during processing.


Decrypting a container with Secure Cell in sealing mode.
This makes sure that data corruption cannot cause the application to crash when receiving messages encrypted with Secure Cell from untrusted sources.


It should be easy to add more tools in the future. For example, Secure Message could use a fuzzer for key files. Other components use the same containers as Secure Cell so fuzzing the encrypted data may not be so fruitful, but it may still be worth a shot.
I admit that error handling and memory management in the tools is a bit sloppy but that should be fine unless it crashes in unexpected places. It's just too verbose to do everything right.
Finally, we add a make fuzz step to the CI build in order to keep up with API changes. We don't run the fuzzing automatically but let's at least ensure that the tools can be compiled. (We can also check that they can handle the input data but it's not that important.)","In fact, we've manually fuzzed Themis until some version, but results and methodology were rather obscure (it fruited in some bugs we've removed, but last 2 years we barely did it due to limited changes in Themis core). But if we can come up with plausible automatic scheme and add it to CI, my heart will beat calmer.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,364,2019-02-03T09:28:31Z,2019-02-04T14:28:33Z,2019-02-05T11:49:50Z,MERGED,True,655,1,12,https://github.com/ilammy,Fuzzing with american fuzzy lop,2,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/364,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/364#issuecomment-460084263,"This one has been on my mind for quite a while and finally I've managed to get it going. Let's throw a security fuzzer into the breach and see what it finds for us. (Oh boy, some crashes does it find! I've got seven of them reported in seven minutes. Based on a single input file with no other hints.)

Here we add american fuzzy lop because I like how little tweaking and configuration it requires. Basically, you feed it an example input data and it uses — high technology from 1960s — artificial intelligence (!) and machine learning (!!) to work through big data (!!!) queue of tests trying to invent ones that crash your application.
You can read user manual (of a sort) in the README. In order to run the fuzzer you need to install it first (apt get afl or similar) and then do make fuzz FUZZ_BIN=something to build and run the tools.
Implementation-wise, we make a custom build of Themis (by recursively calling make because that's the easiest way) which is instrumented by a special compiler. This allows the fuzzer to monitor the behavior of Themis and the tools and see how the input influences the control flow in the program.
Only two tools are implemented for starters:


Round-trip through a Secure Cell in sealing mode.
This makes sure that user input cannot be used to produce a secure container which crashes the application during processing.


Decrypting a container with Secure Cell in sealing mode.
This makes sure that data corruption cannot cause the application to crash when receiving messages encrypted with Secure Cell from untrusted sources.


It should be easy to add more tools in the future. For example, Secure Message could use a fuzzer for key files. Other components use the same containers as Secure Cell so fuzzing the encrypted data may not be so fruitful, but it may still be worth a shot.
I admit that error handling and memory management in the tools is a bit sloppy but that should be fine unless it crashes in unexpected places. It's just too verbose to do everything right.
Finally, we add a make fuzz step to the CI build in order to keep up with API changes. We don't run the fuzzing automatically but let's at least ensure that the tools can be compiled. (We can also check that they can handle the input data but it's not that important.)","I believe in future we might want to add fuzzer tests in CI as well (depends on false positives number).

Automation raises a whole bunch of new questions. For example, how are we going to collect the results? We'll need to salvage the test inputs with interesting behavior, get them out of the build box somehow, etc. Then there's resource allocation where fuzzing may find something interesting, but this would require a couple of hours of torture tests or something. There's little value in shallow tests that can be run in five minutes but do not yield any interesting results in years.
I agree that this is an interesting topic to pursue though.

Do you find way to investigate crash results?

I've reproduced the crashes manually and saved the input data for further investigation. I haven't looked into the cause deeply yet other than running it under debugger and confirming that the crashes are caused by some OpenSSL functions.
I have seen a bunch of helper tools to deal with reporting automatically, but did not look too deeply into that yet as well. For now the developers will have to manually pick up the tool binary from build directory, pipe the failing test case into it, and observe the results. I imagine it can be automated.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,365,2019-02-05T11:32:55Z,2019-02-05T13:53:17Z,2019-02-09T18:20:41Z,MERGED,True,148,82,8,https://github.com/ilammy,Early check for master key length in Secure Cell,3,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/365,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/365,"This PR supersedes #363 by limiting the scope to Secure Cell construction.

Enforce non-empty keys in KeyBytes

It does not really make sense to have empty key material so let's enforce this restriction globally. Add length checks to all KeyBytes constructors and have them returnResult which can be an error if the provided byte slice is empty.
from_vec() constructors are used internally to wrap key bytes that we receive from key generation functions. These should never be empty so it's okay to panic if they happen to be empty.
try_from_slice() constructors are intended for users. They can pass empty slices here, but we do check for that and return an error. The API already uses result and get_key_kind() already performs length checks so there are no breaking changes here.

Early check for master key length in Secure Cell

Secure Cell forbids empty master keys but if the user happens to use one then the error reporting may be quite delayed. The error will be apparent only they the Secure Cell is used for encryption or decryption while the key has been obtained much earlier.
We're going to perform the check earlier, on SecureCell::with_key() construction. Now this method returns a Result which will contain an error if the provided key is empty.
The users now have to check the construction result before using Secure Cell. Updated tests and documentation examples give an idea of the interface. Usually it will be enough to simply add ?, but the users may also opt for expect() or unwrap() if they know the key is not empty.","This PR supersedes #363 by limiting the scope to Secure Cell construction.

Enforce non-empty keys in KeyBytes

It does not really make sense to have empty key material so let's enforce this restriction globally. Add length checks to all KeyBytes constructors and have them returnResult which can be an error if the provided byte slice is empty.
from_vec() constructors are used internally to wrap key bytes that we receive from key generation functions. These should never be empty so it's okay to panic if they happen to be empty.
try_from_slice() constructors are intended for users. They can pass empty slices here, but we do check for that and return an error. The API already uses result and get_key_kind() already performs length checks so there are no breaking changes here.

Early check for master key length in Secure Cell

Secure Cell forbids empty master keys but if the user happens to use one then the error reporting may be quite delayed. The error will be apparent only they the Secure Cell is used for encryption or decryption while the key has been obtained much earlier.
We're going to perform the check earlier, on SecureCell::with_key() construction. Now this method returns a Result which will contain an error if the provided key is empty.
The users now have to check the construction result before using Secure Cell. Updated tests and documentation examples give an idea of the interface. Usually it will be enough to simply add ?, but the users may also opt for expect() or unwrap() if they know the key is not empty.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,366,2019-02-05T22:14:34Z,2019-02-06T10:58:11Z,2019-02-09T18:20:41Z,MERGED,True,73,22,4,https://github.com/ilammy,Simplify launching and testing fuzzing tools,6,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/366,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/366,"Miscellaneous minor tweaks and annoyance fixes in fuzzing tools that I found useful after testing and actually using fuzzing on Linux and macOS.
Use command-line arguments instead of pipes
stdin is a bit easier to use from the programming viewpoint, but it complicates debugging crashes. It is simpler to pass the input file as a command-line argument than to setup file redirection with lldb or gdb.
Teach all tools to read input from the first command-line argument, update AFL command-line to pass the input via arguments, and update readme to prefer this form.
This gives us easier time with debugger:
gdb --args build/afl/${tool} tools/afl/input/${tool}/some_input.dat

and then we can just ""run"" in gdb's command line, instead of having to setup redirection every time.
Launch trap as a separate command
We should setup signal trap as a separate shell command for it to have effect on the next one. The previous form works on macOS for some weird reason but it does not work on Linux.
Organize fuzzer output into subdirectories
Separate tool name in filesystem hierarchy makes it easier to iterate over the findings for later reporting.
Link statically against Themis
Dynamic linkage with non-system installation paths is a minefield. For example, it works incorrectly on macOS if Themis is already installed to /usr/local/lib (that's because of the ""installation path"" thingy in dylibs). On Linux dynamic linkage requires LD_LIBRARY_PATH to be correctly configured even when building the fuzzing tools.
Use static linkage instead. It turned out to be not that hard. We just have to add libsoter.a explicitly as well as LDFLAGS from outer Themis build to pull in the OpenSSL/LibreSSL/BoringSSL dependency.","Miscellaneous minor tweaks and annoyance fixes in fuzzing tools that I found useful after testing and actually using fuzzing on Linux and macOS.
Use command-line arguments instead of pipes
stdin is a bit easier to use from the programming viewpoint, but it complicates debugging crashes. It is simpler to pass the input file as a command-line argument than to setup file redirection with lldb or gdb.
Teach all tools to read input from the first command-line argument, update AFL command-line to pass the input via arguments, and update readme to prefer this form.
This gives us easier time with debugger:
gdb --args build/afl/${tool} tools/afl/input/${tool}/some_input.dat

and then we can just ""run"" in gdb's command line, instead of having to setup redirection every time.
Launch trap as a separate command
We should setup signal trap as a separate shell command for it to have effect on the next one. The previous form works on macOS for some weird reason but it does not work on Linux.
Organize fuzzer output into subdirectories
Separate tool name in filesystem hierarchy makes it easier to iterate over the findings for later reporting.
Link statically against Themis
Dynamic linkage with non-system installation paths is a minefield. For example, it works incorrectly on macOS if Themis is already installed to /usr/local/lib (that's because of the ""installation path"" thingy in dylibs). On Linux dynamic linkage requires LD_LIBRARY_PATH to be correctly configured even when building the fuzzing tools.
Use static linkage instead. It turned out to be not that hard. We just have to add libsoter.a explicitly as well as LDFLAGS from outer Themis build to pull in the OpenSSL/LibreSSL/BoringSSL dependency.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,366,2019-02-05T22:14:34Z,2019-02-06T10:58:11Z,2019-02-09T18:20:41Z,MERGED,True,73,22,4,https://github.com/ilammy,Simplify launching and testing fuzzing tools,6,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/366,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/366#issuecomment-460833056,"Miscellaneous minor tweaks and annoyance fixes in fuzzing tools that I found useful after testing and actually using fuzzing on Linux and macOS.
Use command-line arguments instead of pipes
stdin is a bit easier to use from the programming viewpoint, but it complicates debugging crashes. It is simpler to pass the input file as a command-line argument than to setup file redirection with lldb or gdb.
Teach all tools to read input from the first command-line argument, update AFL command-line to pass the input via arguments, and update readme to prefer this form.
This gives us easier time with debugger:
gdb --args build/afl/${tool} tools/afl/input/${tool}/some_input.dat

and then we can just ""run"" in gdb's command line, instead of having to setup redirection every time.
Launch trap as a separate command
We should setup signal trap as a separate shell command for it to have effect on the next one. The previous form works on macOS for some weird reason but it does not work on Linux.
Organize fuzzer output into subdirectories
Separate tool name in filesystem hierarchy makes it easier to iterate over the findings for later reporting.
Link statically against Themis
Dynamic linkage with non-system installation paths is a minefield. For example, it works incorrectly on macOS if Themis is already installed to /usr/local/lib (that's because of the ""installation path"" thingy in dylibs). On Linux dynamic linkage requires LD_LIBRARY_PATH to be correctly configured even when building the fuzzing tools.
Use static linkage instead. It turned out to be not that hard. We just have to add libsoter.a explicitly as well as LDFLAGS from outer Themis build to pull in the OpenSSL/LibreSSL/BoringSSL dependency.","A bit weird about static vs dynamic linkage, I was trying on mac and haven't experience any issues, but I'm glad that you fixed that!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,367,2019-02-06T11:29:45Z,2019-02-06T22:01:29Z,2019-02-09T18:20:41Z,MERGED,True,376,16,5,https://github.com/ilammy,Fix overflows in Secure Cell,3,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/367,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/367,"Fix a couple of bugs that caused crashes found during fuzzing added in #364.
I have been running existing fuzzing tests for about an hour on both Linux and macOS with OpenSSL and BoringSSL alike. There are no new crashes with these changes.
Admittedly, the fuzzing tests cover only Secure Cell so there may be more bugs left unturned, but let's deal with them as they come.
Avoid overflow in Secure Cell decryption in sealed mode
Corrupted secure message header or truncated message can trigger an overflow in message length computation. This integer overflow results in a segmentation fault later. Handle the overflow and return an error.
We do not have enough information to analyze the header and determine whether it is corrupted or not. So in case it is corrupted we still compute a (garbage) message length and then fail decryption if the provided buffer length is not enough.
Add some tests for Secure Cell to verify authentication context corruption. Only sealing and token protect mode have authentication context, there are no tests for context imprint mode.
Check IV and salt length for symmetric encryption
If the length values are corrupted or incorrect it may trigger a segmentation fault in cryptographic backend. Both OpenSSL and BoringSSL are affected.
We should check the length of initialization vector before passing it to EVP_EncryptInit_ex() or EVP_DecryptInit_ex() because these functions do not perform any length checks. They expect the buffers to have suitable lengths (or else they may corrupt the stack).
These functions do not check the length of keys as well, but we do those checks during key derivation.
We should also check that salt length is zero if there is no salt because PKCS5_PBKDF2_HMAC() does not check that and may crash due to NULL dereference.
Add some tests to verify this behavior. Encryption and decryption are implemented via a common function so it is enough to check only one of them.","Fix a couple of bugs that caused crashes found during fuzzing added in #364.
I have been running existing fuzzing tests for about an hour on both Linux and macOS with OpenSSL and BoringSSL alike. There are no new crashes with these changes.
Admittedly, the fuzzing tests cover only Secure Cell so there may be more bugs left unturned, but let's deal with them as they come.
Avoid overflow in Secure Cell decryption in sealed mode
Corrupted secure message header or truncated message can trigger an overflow in message length computation. This integer overflow results in a segmentation fault later. Handle the overflow and return an error.
We do not have enough information to analyze the header and determine whether it is corrupted or not. So in case it is corrupted we still compute a (garbage) message length and then fail decryption if the provided buffer length is not enough.
Add some tests for Secure Cell to verify authentication context corruption. Only sealing and token protect mode have authentication context, there are no tests for context imprint mode.
Check IV and salt length for symmetric encryption
If the length values are corrupted or incorrect it may trigger a segmentation fault in cryptographic backend. Both OpenSSL and BoringSSL are affected.
We should check the length of initialization vector before passing it to EVP_EncryptInit_ex() or EVP_DecryptInit_ex() because these functions do not perform any length checks. They expect the buffers to have suitable lengths (or else they may corrupt the stack).
These functions do not check the length of keys as well, but we do those checks during key derivation.
We should also check that salt length is zero if there is no salt because PKCS5_PBKDF2_HMAC() does not check that and may crash due to NULL dereference.
Add some tests to verify this behavior. Encryption and decryption are implemented via a common function so it is enough to check only one of them.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,368,2019-02-06T22:20:35Z,2019-02-07T12:32:35Z,2019-02-09T18:20:41Z,MERGED,True,295,0,2,https://github.com/ilammy,Crash triage tool for American Fuzzy Lop,3,['infrastructure'],https://github.com/cossacklabs/themis/pull/368,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/368,"This is a tool which helps with analysis of crashes found by running make fuzz FUZZ_BIN=... First you run fuzzing tests and then you do
./tools/afl/analyze_crashes.sh

and get a Markdown-formatted document with crash reports. If there are any crashes then the process exits with non-zero status, meaning that it can be easily plugged into a CI pipeline.
If you wish more hands-on experience then you can pass --interactive flag and break into a debugger right when crashes happen.
This tool is vaguely inspired by the one from AFL's standard issue. Our version is improved to support both Linux and macOS with their default debuggers. It is also tailored to our output format so that it provides more structured information.
(Initially I just wanted to slightly tweak the original crash triage tool, but I ended up with so many modifications that it's basically a new one.)

Yes, I admit: it's NIH syndrome up-to-eleven and a Bash scripting exercise. Yes, I believe that Markdown output is more readable. Yes, I think macOS/LLDB support is needed as the devs use it.
Currently AFL tools do not produce any crashes as the fix has been merged into master. For testing try reverting to a previous commit first, then run the fuzzer, then checkout this branch back, and finally run the analyzer.","This is a tool which helps with analysis of crashes found by running make fuzz FUZZ_BIN=... First you run fuzzing tests and then you do
./tools/afl/analyze_crashes.sh

and get a Markdown-formatted document with crash reports. If there are any crashes then the process exits with non-zero status, meaning that it can be easily plugged into a CI pipeline.
If you wish more hands-on experience then you can pass --interactive flag and break into a debugger right when crashes happen.
This tool is vaguely inspired by the one from AFL's standard issue. Our version is improved to support both Linux and macOS with their default debuggers. It is also tailored to our output format so that it provides more structured information.
(Initially I just wanted to slightly tweak the original crash triage tool, but I ended up with so many modifications that it's basically a new one.)

Yes, I admit: it's NIH syndrome up-to-eleven and a Bash scripting exercise. Yes, I believe that Markdown output is more readable. Yes, I think macOS/LLDB support is needed as the devs use it.
Currently AFL tools do not produce any crashes as the fix has been merged into master. For testing try reverting to a previous commit first, then run the fuzzer, then checkout this branch back, and finally run the analyzer.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,368,2019-02-06T22:20:35Z,2019-02-07T12:32:35Z,2019-02-09T18:20:41Z,MERGED,True,295,0,2,https://github.com/ilammy,Crash triage tool for American Fuzzy Lop,3,['infrastructure'],https://github.com/cossacklabs/themis/pull/368,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/368#issuecomment-461227741,"This is a tool which helps with analysis of crashes found by running make fuzz FUZZ_BIN=... First you run fuzzing tests and then you do
./tools/afl/analyze_crashes.sh

and get a Markdown-formatted document with crash reports. If there are any crashes then the process exits with non-zero status, meaning that it can be easily plugged into a CI pipeline.
If you wish more hands-on experience then you can pass --interactive flag and break into a debugger right when crashes happen.
This tool is vaguely inspired by the one from AFL's standard issue. Our version is improved to support both Linux and macOS with their default debuggers. It is also tailored to our output format so that it provides more structured information.
(Initially I just wanted to slightly tweak the original crash triage tool, but I ended up with so many modifications that it's basically a new one.)

Yes, I admit: it's NIH syndrome up-to-eleven and a Bash scripting exercise. Yes, I believe that Markdown output is more readable. Yes, I think macOS/LLDB support is needed as the devs use it.
Currently AFL tools do not produce any crashes as the fix has been merged into master. For testing try reverting to a previous commit first, then run the fuzzer, then checkout this branch back, and finally run the analyzer.","I think it's useful to describe expected folder structure of stored crash files somewhere in readme:
${BUILD_PATH}/afl/output/<toolname>/<foldername>/crashes/<crashid>


On my machine fuzzler finds one crash really quickly, and this is the result of analyzing crash. It looks amazingly cool!
➜ ./tools/afl/analyze_crashes.sh -i
# scell_seal_decrypt -- 2019-02-07_01-11-53

## id:000000 -- SIGSEGV

Run:

    build/afl/scell_seal_decrypt build/afl/output/scell_seal_decrypt/2019-02-07_01-11-53/crashes/id:000000,sig:11,src:000000,op:flip1,pos:35

Debugger output:

(lldb) target create ""build/afl/scell_seal_decrypt""
Current executable set to 'build/afl/scell_seal_decrypt' (x86_64).
(lldb) settings set -- target.run-args  ""build/afl/output/scell_seal_decrypt/2019-02-07_01-11-53/crashes/id:000000,sig:11,src:000000,op:flip1,pos:35""
(lldb) run
Process 3463 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x1002fa2cc)
    frame #0: 0x0000000100112aa5 libcrypto.1.0.0.dylib`gcm_ghash_clmul + 101
libcrypto.1.0.0.dylib`gcm_ghash_clmul:
->  0x100112aa5 <+101>: movdqu 0x30(%rdx), %xmm3
    0x100112aaa <+106>: movdqu 0x20(%rdx), %xmm11
    0x100112ab0 <+112>: pshufb %xmm10, %xmm3
    0x100112ab6 <+118>: pshufb %xmm10, %xmm11
Target 0: (scell_seal_decrypt) stopped.

Process 3463 launched: '/build/afl/scell_seal_decrypt' (x86_64)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,368,2019-02-06T22:20:35Z,2019-02-07T12:32:35Z,2019-02-09T18:20:41Z,MERGED,True,295,0,2,https://github.com/ilammy,Crash triage tool for American Fuzzy Lop,3,['infrastructure'],https://github.com/cossacklabs/themis/pull/368,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/368#issuecomment-461391550,"This is a tool which helps with analysis of crashes found by running make fuzz FUZZ_BIN=... First you run fuzzing tests and then you do
./tools/afl/analyze_crashes.sh

and get a Markdown-formatted document with crash reports. If there are any crashes then the process exits with non-zero status, meaning that it can be easily plugged into a CI pipeline.
If you wish more hands-on experience then you can pass --interactive flag and break into a debugger right when crashes happen.
This tool is vaguely inspired by the one from AFL's standard issue. Our version is improved to support both Linux and macOS with their default debuggers. It is also tailored to our output format so that it provides more structured information.
(Initially I just wanted to slightly tweak the original crash triage tool, but I ended up with so many modifications that it's basically a new one.)

Yes, I admit: it's NIH syndrome up-to-eleven and a Bash scripting exercise. Yes, I believe that Markdown output is more readable. Yes, I think macOS/LLDB support is needed as the devs use it.
Currently AFL tools do not produce any crashes as the fix has been merged into master. For testing try reverting to a previous commit first, then run the fuzzer, then checkout this branch back, and finally run the analyzer.",@vixentael makes sense. I've mentioned the tool in README and added an map of the build directory there.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,369,2019-02-07T11:20:05Z,2019-02-07T12:32:02Z,2019-02-09T18:20:41Z,MERGED,True,110,4,2,https://github.com/ilammy,Improve Secure Session ergonomics with STL containers,5,"['bug', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/369,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/369,"Secure Session is not designed to be copyable but it currently is in C++ wrapper due to C++ being C++. STL containers like to copy objects around by default. If a session is copied then a destructor will be called twice for the same session object (a double-free error), usually resulting in a crash. Explicitly delete copy constructor and copy-assignment operator. Now they won't be automatically generated for us by the compiler.
However, Secure Session can be moved. This is an important property for Secure Session being usable with STL containers. Implement a move constructor and move-assignment operator for it. The session that has been moved becomes uninitialized and unusable.
Implement the default constructor as well. It is not intended to be used directly, but it is required for some use-cases with STL containers (e.g., operator[]). Default-constructed objects have the same semantics as moved-out ones (i.e, they cannot be used).
Check if the session object is unusable and throw an exception if that's the case. The users should never do this, and Themis core cannot handle null session objects anyway.
Finally, add some tests to ensure that we do not crash during these operations, that Secure Session can be used with STL containers, and that it throws correct exceptions when it should throw.","Secure Session is not designed to be copyable but it currently is in C++ wrapper due to C++ being C++. STL containers like to copy objects around by default. If a session is copied then a destructor will be called twice for the same session object (a double-free error), usually resulting in a crash. Explicitly delete copy constructor and copy-assignment operator. Now they won't be automatically generated for us by the compiler.
However, Secure Session can be moved. This is an important property for Secure Session being usable with STL containers. Implement a move constructor and move-assignment operator for it. The session that has been moved becomes uninitialized and unusable.
Implement the default constructor as well. It is not intended to be used directly, but it is required for some use-cases with STL containers (e.g., operator[]). Default-constructed objects have the same semantics as moved-out ones (i.e, they cannot be used).
Check if the session object is unusable and throw an exception if that's the case. The users should never do this, and Themis core cannot handle null session objects anyway.
Finally, add some tests to ensure that we do not crash during these operations, that Secure Session can be used with STL containers, and that it throws correct exceptions when it should throw.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,369,2019-02-07T11:20:05Z,2019-02-07T12:32:02Z,2019-02-09T18:20:41Z,MERGED,True,110,4,2,https://github.com/ilammy,Improve Secure Session ergonomics with STL containers,5,"['bug', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/369,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/369#issuecomment-461397265,"Secure Session is not designed to be copyable but it currently is in C++ wrapper due to C++ being C++. STL containers like to copy objects around by default. If a session is copied then a destructor will be called twice for the same session object (a double-free error), usually resulting in a crash. Explicitly delete copy constructor and copy-assignment operator. Now they won't be automatically generated for us by the compiler.
However, Secure Session can be moved. This is an important property for Secure Session being usable with STL containers. Implement a move constructor and move-assignment operator for it. The session that has been moved becomes uninitialized and unusable.
Implement the default constructor as well. It is not intended to be used directly, but it is required for some use-cases with STL containers (e.g., operator[]). Default-constructed objects have the same semantics as moved-out ones (i.e, they cannot be used).
Check if the session object is unusable and throw an exception if that's the case. The users should never do this, and Themis core cannot handle null session objects anyway.
Finally, add some tests to ensure that we do not crash during these operations, that Secure Session can be used with STL containers, and that it throws correct exceptions when it should throw.",Woops... Move semantics is a C++11 feature. We still need to support C++03 and the build server uses C++03 by default. I've put all the shinies under an #ifdef so that we retain the C++03 support and allow moving Secure Session when C++11 is enabled.,True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,370,2019-02-07T16:12:19Z,2019-02-07T17:56:29Z,2019-02-09T18:20:41Z,MERGED,True,24,10,1,https://github.com/ilammy,Correct move construction/assignment implementation,3,"['bug', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/370,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/370,"This fixes move constructor implementation added in #369. C++ is full of footguns 😨
Secure Session stores a pointer to callback structure, therefore it must be pinned in memory. We cannot simply copy secure_session_user_callbacks_t into a different place in memory. secure_session_t will still keep a reference to the old memory location.
We have to store the callback structure on heap as well. This keeps the address constant and we can move the C++ wrapper structure correctly. Other language wrappers use mostly the same approach, keeping both secure_session_t and secure_session_user_callbacks_t allocated on heap. (JavaScript and Java are exceptions.)
Note that we have to accurately manage the objects stored in fields. We use new/delete instead of smart pointers in order to be compatible with C++03 (std::auto_ptr is broken and deprecated).","This fixes move constructor implementation added in #369. C++ is full of footguns 😨
Secure Session stores a pointer to callback structure, therefore it must be pinned in memory. We cannot simply copy secure_session_user_callbacks_t into a different place in memory. secure_session_t will still keep a reference to the old memory location.
We have to store the callback structure on heap as well. This keeps the address constant and we can move the C++ wrapper structure correctly. Other language wrappers use mostly the same approach, keeping both secure_session_t and secure_session_user_callbacks_t allocated on heap. (JavaScript and Java are exceptions.)
Note that we have to accurately manage the objects stored in fields. We use new/delete instead of smart pointers in order to be compatible with C++03 (std::auto_ptr is broken and deprecated).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,370,2019-02-07T16:12:19Z,2019-02-07T17:56:29Z,2019-02-09T18:20:41Z,MERGED,True,24,10,1,https://github.com/ilammy,Correct move construction/assignment implementation,3,"['bug', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/370,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/370#issuecomment-461491829,"This fixes move constructor implementation added in #369. C++ is full of footguns 😨
Secure Session stores a pointer to callback structure, therefore it must be pinned in memory. We cannot simply copy secure_session_user_callbacks_t into a different place in memory. secure_session_t will still keep a reference to the old memory location.
We have to store the callback structure on heap as well. This keeps the address constant and we can move the C++ wrapper structure correctly. Other language wrappers use mostly the same approach, keeping both secure_session_t and secure_session_user_callbacks_t allocated on heap. (JavaScript and Java are exceptions.)
Note that we have to accurately manage the objects stored in fields. We use new/delete instead of smart pointers in order to be compatible with C++03 (std::auto_ptr is broken and deprecated).",Could you please provide example how to move SecureSession object to / from collection?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,370,2019-02-07T16:12:19Z,2019-02-07T17:56:29Z,2019-02-09T18:20:41Z,MERGED,True,24,10,1,https://github.com/ilammy,Correct move construction/assignment implementation,3,"['bug', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/370,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/370#issuecomment-461503930,"This fixes move constructor implementation added in #369. C++ is full of footguns 😨
Secure Session stores a pointer to callback structure, therefore it must be pinned in memory. We cannot simply copy secure_session_user_callbacks_t into a different place in memory. secure_session_t will still keep a reference to the old memory location.
We have to store the callback structure on heap as well. This keeps the address constant and we can move the C++ wrapper structure correctly. Other language wrappers use mostly the same approach, keeping both secure_session_t and secure_session_user_callbacks_t allocated on heap. (JavaScript and Java are exceptions.)
Note that we have to accurately manage the objects stored in fields. We use new/delete instead of smart pointers in order to be compatible with C++03 (std::auto_ptr is broken and deprecated).","@vixentael here are some guidelines.
themispp::secure_session_t is not copyable, but it is movable. It is possible to do this:
std::unordered_map<std::vector<uint8_t>, themispp::secure_session_t> sessions;

// Construct a new session in the map:
sessions.emplace(client_id, themispp::secure_session_t(client_id, client_private_key,
        &callbacks));

// Move an existing session into the map:
themispp::secure_session_t session(client_id, client_private_key, &callbacks);
sessions.emplace(client_id, std::move(session));

// This form works as well:
themispp::secure_session_t session(client_id, client_private_key, &callbacks);
sessions[client_id] = std::move(session);

// Remove a session from the map:
themispp::secure_session_t session = std::move(sessions[client_id]);
sessions.erase(client_id);
C++03 does not have move semantics and Secure Session is still not copyable there, so it is not possible to store themispp::secure_session_t in collections as a value. One has to store pointers and manage them manually:
std::map<std::vector<uint8_t>, themispp::secure_session_t*> sessions;

// Add a session to the map:
sessions[client_id] = new themispp::secure_session_t(client_id, client_private_key,
        &callbacks);

// Remove a session from the map:
themispp::secure_session_t *session = sessions[client_id];
sessions.erase(client_id);
// Eventually don't forget to
delete session; 

// Special care needs to be taken to not copy the container, and to remove
// all session objects when the container is destroyed.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,370,2019-02-07T16:12:19Z,2019-02-07T17:56:29Z,2019-02-09T18:20:41Z,MERGED,True,24,10,1,https://github.com/ilammy,Correct move construction/assignment implementation,3,"['bug', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/370,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/370#issuecomment-461504523,"This fixes move constructor implementation added in #369. C++ is full of footguns 😨
Secure Session stores a pointer to callback structure, therefore it must be pinned in memory. We cannot simply copy secure_session_user_callbacks_t into a different place in memory. secure_session_t will still keep a reference to the old memory location.
We have to store the callback structure on heap as well. This keeps the address constant and we can move the C++ wrapper structure correctly. Other language wrappers use mostly the same approach, keeping both secure_session_t and secure_session_user_callbacks_t allocated on heap. (JavaScript and Java are exceptions.)
Note that we have to accurately manage the objects stored in fields. We use new/delete instead of smart pointers in order to be compatible with C++03 (std::auto_ptr is broken and deprecated).","these are very good examples, thank you!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,370,2019-02-07T16:12:19Z,2019-02-07T17:56:29Z,2019-02-09T18:20:41Z,MERGED,True,24,10,1,https://github.com/ilammy,Correct move construction/assignment implementation,3,"['bug', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/370,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/370#issuecomment-461505727,"This fixes move constructor implementation added in #369. C++ is full of footguns 😨
Secure Session stores a pointer to callback structure, therefore it must be pinned in memory. We cannot simply copy secure_session_user_callbacks_t into a different place in memory. secure_session_t will still keep a reference to the old memory location.
We have to store the callback structure on heap as well. This keeps the address constant and we can move the C++ wrapper structure correctly. Other language wrappers use mostly the same approach, keeping both secure_session_t and secure_session_user_callbacks_t allocated on heap. (JavaScript and Java are exceptions.)
Note that we have to accurately manage the objects stored in fields. We use new/delete instead of smart pointers in order to be compatible with C++03 (std::auto_ptr is broken and deprecated).","Oh, and the pointer to C++ callbacks (the last argument to themispp::secure_session_t constructor) also requires special attention. C++ wrapper does not take ownership over this object. It has to be alive for the whole lifetime of associated secure session, and it obviously cannot be moved in memory. Typically this means to allocate the callbacks on heap and reuse them throughout the application.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,371,2019-02-07T17:28:58Z,2019-02-07T21:40:37Z,2019-02-09T18:20:41Z,MERGED,True,3,3,1,https://github.com/ilammy,Define non-member global functions as inline,1,['W-ThemisPP :crossed_swords:'],https://github.com/cossacklabs/themis/pull/371,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/371,"ThemisPP is a header-only library. We should define freestanding functions as inline in order to trigger the one definition rule and avoid issues during linkage when multiple instances of the functions are found in different translation units.
This can happen if multiple translation units include <themispp/secure_session.hpp> which leads to weird error messages from linker:
/usr/bin/ld: /tmp/ccfnI73m.o: in function `themispp::send_callback(unsigned char const*, unsigned long, void*)':
a2.cpp:(.text+0x0): multiple definition of `themispp::send_callback(unsigned char const*, unsigned long, void*)'; /tmp/cc7vbiXX.o:a1.cpp:(.text+0x0): first defined here
/usr/bin/ld: /tmp/ccfnI73m.o: in function `themispp::receive_callback(unsigned char*, unsigned long, void*)':
a2.cpp:(.text+0xc6): multiple definition of `themispp::receive_callback(unsigned char*, unsigned long, void*)'; /tmp/cc7vbiXX.o:a1.cpp:(.text+0xc6): first defined here
/usr/bin/ld: /tmp/ccfnI73m.o: in function `themispp::get_public_key_for_id_callback(void const*, unsigned long, void*, unsigned long, void*)':
a2.cpp:(.text+0x176): multiple definition of `themispp::get_public_key_for_id_callback(void const*, unsigned long, void*, unsigned long, void*)'; /tmp/cc7vbiXX.o:a1.cpp:(.text+0x176): first defined here
collect2: error: ld returned 1 exit status

(We don't have to mark class methods in headers as inline, they are treated as inline automatically.)","ThemisPP is a header-only library. We should define freestanding functions as inline in order to trigger the one definition rule and avoid issues during linkage when multiple instances of the functions are found in different translation units.
This can happen if multiple translation units include <themispp/secure_session.hpp> which leads to weird error messages from linker:
/usr/bin/ld: /tmp/ccfnI73m.o: in function `themispp::send_callback(unsigned char const*, unsigned long, void*)':
a2.cpp:(.text+0x0): multiple definition of `themispp::send_callback(unsigned char const*, unsigned long, void*)'; /tmp/cc7vbiXX.o:a1.cpp:(.text+0x0): first defined here
/usr/bin/ld: /tmp/ccfnI73m.o: in function `themispp::receive_callback(unsigned char*, unsigned long, void*)':
a2.cpp:(.text+0xc6): multiple definition of `themispp::receive_callback(unsigned char*, unsigned long, void*)'; /tmp/cc7vbiXX.o:a1.cpp:(.text+0xc6): first defined here
/usr/bin/ld: /tmp/ccfnI73m.o: in function `themispp::get_public_key_for_id_callback(void const*, unsigned long, void*, unsigned long, void*)':
a2.cpp:(.text+0x176): multiple definition of `themispp::get_public_key_for_id_callback(void const*, unsigned long, void*, unsigned long, void*)'; /tmp/cc7vbiXX.o:a1.cpp:(.text+0x176): first defined here
collect2: error: ld returned 1 exit status

(We don't have to mark class methods in headers as inline, they are treated as inline automatically.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,372,2019-02-10T11:37:27Z,2019-02-11T11:54:24Z,2019-02-12T11:28:33Z,MERGED,True,28,2,7,https://github.com/ilammy,Add relevant badges and logos,4,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/372,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/372,"Brush up and tack some badges onto the Rust package. They will be visible in many places, like on crates.io, on docs.rs, on GitHub, and so on. First impression is important. We can add more of these things later, but they tend to slow down page loads so don't overdo it.
Also, move the rust-themis logo here (it's used by API docs). Don't link to it via my personal domain, that's a bad practice. @karenswry, please tell me if GitHub is not the best place to host the logo.","Brush up and tack some badges onto the Rust package. They will be visible in many places, like on crates.io, on docs.rs, on GitHub, and so on. First impression is important. We can add more of these things later, but they tend to slow down page loads so don't overdo it.
Also, move the rust-themis logo here (it's used by API docs). Don't link to it via my personal domain, that's a bad practice. @karenswry, please tell me if GitHub is not the best place to host the logo.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,372,2019-02-10T11:37:27Z,2019-02-11T11:54:24Z,2019-02-12T11:28:33Z,MERGED,True,28,2,7,https://github.com/ilammy,Add relevant badges and logos,4,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/372,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/372#issuecomment-462125705,"Brush up and tack some badges onto the Rust package. They will be visible in many places, like on crates.io, on docs.rs, on GitHub, and so on. First impression is important. We can add more of these things later, but they tend to slow down page loads so don't overdo it.
Also, move the rust-themis logo here (it's used by API docs). Don't link to it via my personal domain, that's a bad practice. @karenswry, please tell me if GitHub is not the best place to host the logo.",On 0.11.0 release we gonna add some Rust badges to the main Readme as well :),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,372,2019-02-10T11:37:27Z,2019-02-11T11:54:24Z,2019-02-12T11:28:33Z,MERGED,True,28,2,7,https://github.com/ilammy,Add relevant badges and logos,4,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/372,https://github.com/karenswry,3,https://github.com/cossacklabs/themis/pull/372#issuecomment-462723906,"Brush up and tack some badges onto the Rust package. They will be visible in many places, like on crates.io, on docs.rs, on GitHub, and so on. First impression is important. We can add more of these things later, but they tend to slow down page loads so don't overdo it.
Also, move the rust-themis logo here (it's used by API docs). Don't link to it via my personal domain, that's a bad practice. @karenswry, please tell me if GitHub is not the best place to host the logo.",No problem with hosting logos/visuals on GitHub. Docs here and docs on Docserver (https://docs.cossacklabs.com/) are separate instances.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,373,2019-02-11T10:25:20Z,2019-02-11T11:54:40Z,2019-02-11T15:59:37Z,MERGED,True,116,134,1,https://github.com/ilammy,Simplify transport usage in Secure Session (T963),1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/373,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/373,"Using generics avoids type erasure for SecureSessionTransport impl. This has its efficiency merits but they are quite negligible given the amount of checks and marshaling that we perform. On the other
hand, generics tend to ""poison"" the code with unnecessary <T>s which is not good for readability.
Replace generics and static dispatch with a trait object and dynamic dispatch. Note that user_context in C still keeps a pointer to an intermediate Rust struct. We have to use a struct because it is not possible to cast &mut dyn SecureSessionTransport as void*: trait objects are fat pointers in Rust.
While we're here, rename ""delegate"" into ""context"" (it's not only delegate) and ""session_ctx"" into just ""session"" to avoid confusion.
And really, mark unsafe functions as unsafe. They are used in unsafe blocks anyway.","Using generics avoids type erasure for SecureSessionTransport impl. This has its efficiency merits but they are quite negligible given the amount of checks and marshaling that we perform. On the other
hand, generics tend to ""poison"" the code with unnecessary <T>s which is not good for readability.
Replace generics and static dispatch with a trait object and dynamic dispatch. Note that user_context in C still keeps a pointer to an intermediate Rust struct. We have to use a struct because it is not possible to cast &mut dyn SecureSessionTransport as void*: trait objects are fat pointers in Rust.
While we're here, rename ""delegate"" into ""context"" (it's not only delegate) and ""session_ctx"" into just ""session"" to avoid confusion.
And really, mark unsafe functions as unsafe. They are used in unsafe blocks anyway.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,374,2019-02-11T12:05:41Z,2019-02-11T12:38:12Z,2019-02-19T19:03:17Z,MERGED,True,132,15,2,https://github.com/ilammy, Introduce TransportError type,2,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/374,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/374,"It is not very convenient to use () for Result error type. Unit type does not implement Error trait and thus cannot be used with the ? operator. It is not very convenient for users which may need to return arbitrary errors from their transport callbacks. These may be IO errors from the standard library or some custom errors.
Introduce a new type TransportError which will represent errors for transport callbacks. It is an enumeration which can hold three kinds of errors:


Arbitrary std::error::Error type
This kind allows to wrap any other error into a TransportError.    We implement a From conversion so that TransportError works with    the ? operator. This makes it very convenient to forward existing errors out of SecureSessionTransport callbacks.


Custom human-readable string
This kind is useful when you don't have an Error handy but still    want to return something more descriptive. Anything that can be    converted into a String will do.


Unspecified kind
This kind is useful to explicity say that we do not have any    detailed information on the error. It will be used in some    conversions of raw Themis errors.


Unfortunately, it's not possible to implement Error trait for TransportError because of a blanket impl on From/Into traits: it conflicts with out custom From<T: Error> implementation. Well, it's not a big deal for now, but may bite us later.
However, we do implement all other Error requirements like Display so the error should be convenient enough to use.
Note that the error itself is a struct which wraps an enumeration. This allows us to not expose enumeration variants to the user.
Also note the additional Send + Sync trait bounds on the Error impl. It is important to have these traits implemented if we want to be able to transfer errors between threads.
Update the SecureSessionTransport trait to use the new type.
Update usage in tests. Note how ? is used to forward channel errors and TransportError::new() usage for custom error reporting.","It is not very convenient to use () for Result error type. Unit type does not implement Error trait and thus cannot be used with the ? operator. It is not very convenient for users which may need to return arbitrary errors from their transport callbacks. These may be IO errors from the standard library or some custom errors.
Introduce a new type TransportError which will represent errors for transport callbacks. It is an enumeration which can hold three kinds of errors:


Arbitrary std::error::Error type
This kind allows to wrap any other error into a TransportError.    We implement a From conversion so that TransportError works with    the ? operator. This makes it very convenient to forward existing errors out of SecureSessionTransport callbacks.


Custom human-readable string
This kind is useful when you don't have an Error handy but still    want to return something more descriptive. Anything that can be    converted into a String will do.


Unspecified kind
This kind is useful to explicity say that we do not have any    detailed information on the error. It will be used in some    conversions of raw Themis errors.


Unfortunately, it's not possible to implement Error trait for TransportError because of a blanket impl on From/Into traits: it conflicts with out custom From<T: Error> implementation. Well, it's not a big deal for now, but may bite us later.
However, we do implement all other Error requirements like Display so the error should be convenient enough to use.
Note that the error itself is a struct which wraps an enumeration. This allows us to not expose enumeration variants to the user.
Also note the additional Send + Sync trait bounds on the Error impl. It is important to have these traits implemented if we want to be able to transfer errors between threads.
Update the SecureSessionTransport trait to use the new type.
Update usage in tests. Note how ? is used to forward channel errors and TransportError::new() usage for custom error reporting.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,374,2019-02-11T12:05:41Z,2019-02-11T12:38:12Z,2019-02-19T19:03:17Z,MERGED,True,132,15,2,https://github.com/ilammy, Introduce TransportError type,2,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/374,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/374#issuecomment-462313069,"It is not very convenient to use () for Result error type. Unit type does not implement Error trait and thus cannot be used with the ? operator. It is not very convenient for users which may need to return arbitrary errors from their transport callbacks. These may be IO errors from the standard library or some custom errors.
Introduce a new type TransportError which will represent errors for transport callbacks. It is an enumeration which can hold three kinds of errors:


Arbitrary std::error::Error type
This kind allows to wrap any other error into a TransportError.    We implement a From conversion so that TransportError works with    the ? operator. This makes it very convenient to forward existing errors out of SecureSessionTransport callbacks.


Custom human-readable string
This kind is useful when you don't have an Error handy but still    want to return something more descriptive. Anything that can be    converted into a String will do.


Unspecified kind
This kind is useful to explicity say that we do not have any    detailed information on the error. It will be used in some    conversions of raw Themis errors.


Unfortunately, it's not possible to implement Error trait for TransportError because of a blanket impl on From/Into traits: it conflicts with out custom From<T: Error> implementation. Well, it's not a big deal for now, but may bite us later.
However, we do implement all other Error requirements like Display so the error should be convenient enough to use.
Note that the error itself is a struct which wraps an enumeration. This allows us to not expose enumeration variants to the user.
Also note the additional Send + Sync trait bounds on the Error impl. It is important to have these traits implemented if we want to be able to transfer errors between threads.
Update the SecureSessionTransport trait to use the new type.
Update usage in tests. Note how ? is used to forward channel errors and TransportError::new() usage for custom error reporting.","Yeah, Rust has amazing ergonomics at times. While you have to spell out all these Results explicitly in the function signatures, it's very convenient to simply forward the error up the call stack using the ? operator (similar to exceptions in other languages).
However, this keeps all the benefits of strong static typing (you always know the precise type of the error, unless you explicitly erase it with something like Box<dyn Error>). And – what I think is the best feature of this error handling system – Rust does not hide an additional control flow path in the function that can return errors. In most languages with exceptions virtually any statement or expression can throw an exception. It is completely invisible in the code (and during code review). On the other hand, you will always see a ?, try!, or return if there is an early return due to an error in the Rust code.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,375,2019-02-11T12:52:02Z,2019-02-12T13:41:53Z,2019-02-19T19:03:12Z,MERGED,True,127,21,2,https://github.com/ilammy,Forward transport errors from Secure Session callbacks,5,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/375,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/375,"And one more usability improvement for Secure Session. Currently it simply ignores and loses any TransportErrors that happen inside the transport callbacks. This was fine when errors were simply () but now they can be rich, detailed errors. The users are likely to be interested in the reason why their transport callbacks fail. Let's thread the error through the C call stack and return it the caller.
This behavior is currently not tested. I'll add tests in a separate PR which will also improve existing tests for Secure Session. (And note all the breaking changes in the changelog as well.)
Add TransportError to themis::Error
We will need to return TransportErrors from Secure Session methods on failures to extend the ErrorKind enumeration to actually contain the transport error inside its ErrorKind::SessionTransportError variant.
This change has a number of implications. First of all, TransportError is not copyable. Therefore we have to let go of the Clone and Copy implementations on the ErrorKind as well as the Clone impl on Error. One should not usually copy errors anyway so this should be okay. Note that Error::kind() now returns a reference to the stored error kind instead of its copy.
Another important thing is that TransportError does not implement PartialEq as it is not possible to compare abstract errors in any meaningful way. This implies that we cannot automatically derive implementation of PartialEq for ErrorKind. We have to implement it manually. We need to compare kinds of errors here so it is okay to simply ignore the details of transport errors and treat them as equivalent.
Forward transport errors from Secure Session callbacks
Now that we are able to store TransportError inside of a themis::Error we can actually forward the error from the callback to the method call. With this the user can actually see why the transport layer has failed.
Use the provided SecureSessionContext to temporarily store the error while the control is still in the C code. Then we extract the error and return it. Such implementation does not support concurrent usage of Secure Session from multiple threads but it's not thread-safe anyway so it is fine to use this approach.
We can use negative return values to indicate implementation-specific errors in Secure Session callbacks. The C code returns them as is for us to inspect. While we're here, stop using bare constant -1 and give it a name. Also, handle the overflow with a different error kind.","And one more usability improvement for Secure Session. Currently it simply ignores and loses any TransportErrors that happen inside the transport callbacks. This was fine when errors were simply () but now they can be rich, detailed errors. The users are likely to be interested in the reason why their transport callbacks fail. Let's thread the error through the C call stack and return it the caller.
This behavior is currently not tested. I'll add tests in a separate PR which will also improve existing tests for Secure Session. (And note all the breaking changes in the changelog as well.)
Add TransportError to themis::Error
We will need to return TransportErrors from Secure Session methods on failures to extend the ErrorKind enumeration to actually contain the transport error inside its ErrorKind::SessionTransportError variant.
This change has a number of implications. First of all, TransportError is not copyable. Therefore we have to let go of the Clone and Copy implementations on the ErrorKind as well as the Clone impl on Error. One should not usually copy errors anyway so this should be okay. Note that Error::kind() now returns a reference to the stored error kind instead of its copy.
Another important thing is that TransportError does not implement PartialEq as it is not possible to compare abstract errors in any meaningful way. This implies that we cannot automatically derive implementation of PartialEq for ErrorKind. We have to implement it manually. We need to compare kinds of errors here so it is okay to simply ignore the details of transport errors and treat them as equivalent.
Forward transport errors from Secure Session callbacks
Now that we are able to store TransportError inside of a themis::Error we can actually forward the error from the callback to the method call. With this the user can actually see why the transport layer has failed.
Use the provided SecureSessionContext to temporarily store the error while the control is still in the C code. Then we extract the error and return it. Such implementation does not support concurrent usage of Secure Session from multiple threads but it's not thread-safe anyway so it is fine to use this approach.
We can use negative return values to indicate implementation-specific errors in Secure Session callbacks. The C code returns them as is for us to inspect. While we're here, stop using bare constant -1 and give it a name. Also, handle the overflow with a different error kind.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,375,2019-02-11T12:52:02Z,2019-02-12T13:41:53Z,2019-02-19T19:03:12Z,MERGED,True,127,21,2,https://github.com/ilammy,Forward transport errors from Secure Session callbacks,5,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/375,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/375#issuecomment-462721208,"And one more usability improvement for Secure Session. Currently it simply ignores and loses any TransportErrors that happen inside the transport callbacks. This was fine when errors were simply () but now they can be rich, detailed errors. The users are likely to be interested in the reason why their transport callbacks fail. Let's thread the error through the C call stack and return it the caller.
This behavior is currently not tested. I'll add tests in a separate PR which will also improve existing tests for Secure Session. (And note all the breaking changes in the changelog as well.)
Add TransportError to themis::Error
We will need to return TransportErrors from Secure Session methods on failures to extend the ErrorKind enumeration to actually contain the transport error inside its ErrorKind::SessionTransportError variant.
This change has a number of implications. First of all, TransportError is not copyable. Therefore we have to let go of the Clone and Copy implementations on the ErrorKind as well as the Clone impl on Error. One should not usually copy errors anyway so this should be okay. Note that Error::kind() now returns a reference to the stored error kind instead of its copy.
Another important thing is that TransportError does not implement PartialEq as it is not possible to compare abstract errors in any meaningful way. This implies that we cannot automatically derive implementation of PartialEq for ErrorKind. We have to implement it manually. We need to compare kinds of errors here so it is okay to simply ignore the details of transport errors and treat them as equivalent.
Forward transport errors from Secure Session callbacks
Now that we are able to store TransportError inside of a themis::Error we can actually forward the error from the callback to the method call. With this the user can actually see why the transport layer has failed.
Use the provided SecureSessionContext to temporarily store the error while the control is still in the C code. Then we extract the error and return it. Such implementation does not support concurrent usage of Secure Session from multiple threads but it's not thread-safe anyway so it is fine to use this approach.
We can use negative return values to indicate implementation-specific errors in Secure Session callbacks. The C code returns them as is for us to inspect. While we're here, stop using bare constant -1 and give it a name. Also, handle the overflow with a different error kind.",Writing tests for every single method and use case of Secure Session turned out to be useful (surprise-surpise). Then have uncovered that I have missed another place where a special error code may be returned. I guess this should be it.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,376,2019-02-12T13:49:57Z,2019-02-12T16:08:37Z,2019-02-19T19:02:50Z,MERGED,True,595,112,2,https://github.com/ilammy,Add more Secure Session tests,9,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/376,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/376,"This PR updates the tests for Secure Session with new cases.
Now we check more happy and failure paths in Secure Session. We verify that errors are correctly forwarded from transport callbacks, and that this causes the whole session to fail. We also test the session change callback. Finally, we test a couple of edge cases with empty messages.
We also make a couple of other tweaks. There are more details in individual commit messages.
Unfortunately it is not possible to write tests for buffer size overflow handling as that will require the current implementation to actually allocate a buffer of 4 GB or larger which usually segfaults. Buffer sizes are completely under control of Secure Session user though.","This PR updates the tests for Secure Session with new cases.
Now we check more happy and failure paths in Secure Session. We verify that errors are correctly forwarded from transport callbacks, and that this causes the whole session to fail. We also test the session change callback. Finally, we test a couple of edge cases with empty messages.
We also make a couple of other tweaks. There are more details in individual commit messages.
Unfortunately it is not possible to write tests for buffer size overflow handling as that will require the current implementation to actually allocate a buffer of 4 GB or larger which usually segfaults. Buffer sizes are completely under control of Secure Session user though.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,377,2019-02-13T01:05:35Z,2019-03-11T12:41:42Z,2019-03-11T12:42:33Z,MERGED,True,159,126,25,https://github.com/ilammy,Enable more compiler warnings,18,"['core', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/377,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/377,"We are security-oriented project so let's enable as many relevant flags as possible. Here are some flags that I found useful after looking through the latest lists for GCC 8 and Clang 7. (In addition to catch-all -Wall -Wextra which enable most of the warnings.)
Not all flags are supported by all modern compiler versions that are still in use. Wrap all relatively new flags into 'supported' checks which verify that the flag seems to be actually supported by the compiler. Skip all flags thar are not supported: we're not going to get any use from them anyway but this should not prevent compilation.
After that fix all the warnings which got triggered. Most of these are simply cosmetic changes, but some are quite useful, like fd44ce3 and 2cb0bdb. Hopefully the warnings will prevent more mistakes like these in the future.
(And while we're here, switch Soter and Themis makefiles for tests. This has been triggering me for a while, but Soter build commands belong to soter.mk and Themis build instruction should be located in themis.mk. I don't want to create a separate commit for this on the master branch so I've included this change into this PR.)","We are security-oriented project so let's enable as many relevant flags as possible. Here are some flags that I found useful after looking through the latest lists for GCC 8 and Clang 7. (In addition to catch-all -Wall -Wextra which enable most of the warnings.)
Not all flags are supported by all modern compiler versions that are still in use. Wrap all relatively new flags into 'supported' checks which verify that the flag seems to be actually supported by the compiler. Skip all flags thar are not supported: we're not going to get any use from them anyway but this should not prevent compilation.
After that fix all the warnings which got triggered. Most of these are simply cosmetic changes, but some are quite useful, like fd44ce3 and 2cb0bdb. Hopefully the warnings will prevent more mistakes like these in the future.
(And while we're here, switch Soter and Themis makefiles for tests. This has been triggering me for a while, but Soter build commands belong to soter.mk and Themis build instruction should be located in themis.mk. I don't want to create a separate commit for this on the master branch so I've included this change into this PR.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,377,2019-02-13T01:05:35Z,2019-03-11T12:41:42Z,2019-03-11T12:42:33Z,MERGED,True,159,126,25,https://github.com/ilammy,Enable more compiler warnings,18,"['core', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/377,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/377#issuecomment-463150959,"We are security-oriented project so let's enable as many relevant flags as possible. Here are some flags that I found useful after looking through the latest lists for GCC 8 and Clang 7. (In addition to catch-all -Wall -Wextra which enable most of the warnings.)
Not all flags are supported by all modern compiler versions that are still in use. Wrap all relatively new flags into 'supported' checks which verify that the flag seems to be actually supported by the compiler. Skip all flags thar are not supported: we're not going to get any use from them anyway but this should not prevent compilation.
After that fix all the warnings which got triggered. Most of these are simply cosmetic changes, but some are quite useful, like fd44ce3 and 2cb0bdb. Hopefully the warnings will prevent more mistakes like these in the future.
(And while we're here, switch Soter and Themis makefiles for tests. This has been triggering me for a while, but Soter build commands belong to soter.mk and Themis build instruction should be located in themis.mk. I don't want to create a separate commit for this on the master branch so I've included this change into this PR.)","If you were are wondering why the builds of this PR were are all red, here's a story for you.
Make has variables. With a whole bunch of flavors and origins (cue Bubba explaining about recursive variables, simple variables, environment variables, override variables, default variables, target variables, undefined variables, uh... that's probably it).
One important variable is CFLAGS which is used to set C compiler flags. We use it here to add new warnings and make them compiler errors, and want them to affect Themis. When we build Themis files we explicitly pass the flags to the compiler:

  
    
      themis/Makefile
    
    
         Line 293
      in
      8d47b40
    
  
  
    

        
          
           $(OBJ_PATH)/%.o: CMD = $(CC) $(CFLAGS) -c $< -o $@ 
        
    
  


An interesting thing about environment variables is that they are automatically exported to child processes (by default). Another interesting thing is that file variables are not exported (by default). And the third interesting thing is that a variable is an 'environment' variable for Make if it is set in the environment, and a 'file' variable otherwise. Our CI sets CFLAGS, developers usually don't. So on CI builds we were leaking CFLAGS so child processes (like Cargo building some native libraries for Rust) and that caused build errors due to unexpected warnings in third-party libraries.
(Unfortunately, the build is still red so there are more mysteries to uncover.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,377,2019-02-13T01:05:35Z,2019-03-11T12:41:42Z,2019-03-11T12:42:33Z,MERGED,True,159,126,25,https://github.com/ilammy,Enable more compiler warnings,18,"['core', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/377,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/377#issuecomment-463336724,"We are security-oriented project so let's enable as many relevant flags as possible. Here are some flags that I found useful after looking through the latest lists for GCC 8 and Clang 7. (In addition to catch-all -Wall -Wextra which enable most of the warnings.)
Not all flags are supported by all modern compiler versions that are still in use. Wrap all relatively new flags into 'supported' checks which verify that the flag seems to be actually supported by the compiler. Skip all flags thar are not supported: we're not going to get any use from them anyway but this should not prevent compilation.
After that fix all the warnings which got triggered. Most of these are simply cosmetic changes, but some are quite useful, like fd44ce3 and 2cb0bdb. Hopefully the warnings will prevent more mistakes like these in the future.
(And while we're here, switch Soter and Themis makefiles for tests. This has been triggering me for a while, but Soter build commands belong to soter.mk and Themis build instruction should be located in themis.mk. I don't want to create a separate commit for this on the master branch so I've included this change into this PR.)",Let's wait for #379 to be merged and rerun the CI build with that.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,377,2019-02-13T01:05:35Z,2019-03-11T12:41:42Z,2019-03-11T12:42:33Z,MERGED,True,159,126,25,https://github.com/ilammy,Enable more compiler warnings,18,"['core', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/377,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/377#issuecomment-470319127,"We are security-oriented project so let's enable as many relevant flags as possible. Here are some flags that I found useful after looking through the latest lists for GCC 8 and Clang 7. (In addition to catch-all -Wall -Wextra which enable most of the warnings.)
Not all flags are supported by all modern compiler versions that are still in use. Wrap all relatively new flags into 'supported' checks which verify that the flag seems to be actually supported by the compiler. Skip all flags thar are not supported: we're not going to get any use from them anyway but this should not prevent compilation.
After that fix all the warnings which got triggered. Most of these are simply cosmetic changes, but some are quite useful, like fd44ce3 and 2cb0bdb. Hopefully the warnings will prevent more mistakes like these in the future.
(And while we're here, switch Soter and Themis makefiles for tests. This has been triggering me for a while, but Soter build commands belong to soter.mk and Themis build instruction should be located in themis.mk. I don't want to create a separate commit for this on the master branch so I've included this change into this PR.)",Three merges of master into this branch is enough. I had to resolve merge conflicts again (mainly due to formatting) so I have simply rebased the branch onto the latest master and reapplied the changes to the new code. A couple of commits were redundant as the warnings were fixed elsewhere. There is also a new warning fix in 7f39d5d.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,377,2019-02-13T01:05:35Z,2019-03-11T12:41:42Z,2019-03-11T12:42:33Z,MERGED,True,159,126,25,https://github.com/ilammy,Enable more compiler warnings,18,"['core', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/377,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/377#issuecomment-471523318,"We are security-oriented project so let's enable as many relevant flags as possible. Here are some flags that I found useful after looking through the latest lists for GCC 8 and Clang 7. (In addition to catch-all -Wall -Wextra which enable most of the warnings.)
Not all flags are supported by all modern compiler versions that are still in use. Wrap all relatively new flags into 'supported' checks which verify that the flag seems to be actually supported by the compiler. Skip all flags thar are not supported: we're not going to get any use from them anyway but this should not prevent compilation.
After that fix all the warnings which got triggered. Most of these are simply cosmetic changes, but some are quite useful, like fd44ce3 and 2cb0bdb. Hopefully the warnings will prevent more mistakes like these in the future.
(And while we're here, switch Soter and Themis makefiles for tests. This has been triggering me for a while, but Soter build commands belong to soter.mk and Themis build instruction should be located in themis.mk. I don't want to create a separate commit for this on the master branch so I've included this change into this PR.)",🎉 Yay! 🎉,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,378,2019-02-13T18:18:52Z,2019-02-14T11:51:57Z,2019-02-19T19:04:21Z,MERGED,True,96,13,3,https://github.com/ilammy,Smart pointer constructors for Secure Session,4,['W-ThemisPP :crossed_swords:'],https://github.com/cossacklabs/themis/pull/378,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/378,"Using legacy C++03 interface of Secure Session may be a bit hard with modern practices introduced by C++11. Let's provide a more idiomatic interface where Secure Session assumes ownership over the provided instance of secure_session_callback_interface_t via smart pointers.
We do so using the shared_ptr instance. This allows both shared and unique ownership over the provided callback interface. For example, if the users need only get_public_key_for_id interface then they can share an instance of secure_session_callback_interface_t between all Secure Sessions. However, if they need to use the transport interface (send_data/receive_data) then they are likely to provide a unique instance for each Secure Session.
We keep the old non-owning constructor for backwards compatibility. However, we mark is deprecated to incite the users to move on to a more safe and idiomatic interface with smart pointers.
We still need to test the old interface so silence the relevant warning in this file.","Using legacy C++03 interface of Secure Session may be a bit hard with modern practices introduced by C++11. Let's provide a more idiomatic interface where Secure Session assumes ownership over the provided instance of secure_session_callback_interface_t via smart pointers.
We do so using the shared_ptr instance. This allows both shared and unique ownership over the provided callback interface. For example, if the users need only get_public_key_for_id interface then they can share an instance of secure_session_callback_interface_t between all Secure Sessions. However, if they need to use the transport interface (send_data/receive_data) then they are likely to provide a unique instance for each Secure Session.
We keep the old non-owning constructor for backwards compatibility. However, we mark is deprecated to incite the users to move on to a more safe and idiomatic interface with smart pointers.
We still need to test the old interface so silence the relevant warning in this file.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,378,2019-02-13T18:18:52Z,2019-02-14T11:51:57Z,2019-02-19T19:04:21Z,MERGED,True,96,13,3,https://github.com/ilammy,Smart pointer constructors for Secure Session,4,['W-ThemisPP :crossed_swords:'],https://github.com/cossacklabs/themis/pull/378,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/378#issuecomment-463336744,"Using legacy C++03 interface of Secure Session may be a bit hard with modern practices introduced by C++11. Let's provide a more idiomatic interface where Secure Session assumes ownership over the provided instance of secure_session_callback_interface_t via smart pointers.
We do so using the shared_ptr instance. This allows both shared and unique ownership over the provided callback interface. For example, if the users need only get_public_key_for_id interface then they can share an instance of secure_session_callback_interface_t between all Secure Sessions. However, if they need to use the transport interface (send_data/receive_data) then they are likely to provide a unique instance for each Secure Session.
We keep the old non-owning constructor for backwards compatibility. However, we mark is deprecated to incite the users to move on to a more safe and idiomatic interface with smart pointers.
We still need to test the old interface so silence the relevant warning in this file.",Let's wait for #379 to be merged and rerun the CI build with that.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,379,2019-02-13T19:31:34Z,2019-02-14T10:19:59Z,2019-02-19T19:04:11Z,MERGED,True,5,0,2,https://github.com/ilammy,Run C++ tests during CI builds,1,"['W-ThemisPP :crossed_swords:', 'tests']",https://github.com/cossacklabs/themis/pull/379,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/379,"Well, this is a bit embarrassing, but enable C++ tests in CI builds. They are there but somehow they were lost on the way.
We'd like to test both C++03 and C++11 flavors of ThemisPP. We will need to clean the test objects and recompile the tests for both standards we support. Add a utility Makefile target for that.","Well, this is a bit embarrassing, but enable C++ tests in CI builds. They are there but somehow they were lost on the way.
We'd like to test both C++03 and C++11 flavors of ThemisPP. We will need to clean the test objects and recompile the tests for both standards we support. Add a utility Makefile target for that.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,380,2019-02-14T13:01:07Z,2019-02-15T11:10:35Z,2019-02-19T19:02:27Z,MERGED,True,437,275,3,https://github.com/ilammy, Improve and extend Secure Session API docs,8,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/380,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/380,"I'm closing in on the API of Secure Session which looks okay for me. This PR adds more information on how to use Secure Session to API docs, and updates the interface. You can view the docs by running
cargo doc --open

Some notable changes:

constructor is now called SecureSession::new() and it panics instead of returning a Result
some other methods have been renamed for consistency with other language wrappers:

callback API: connect, negotiate, send, receive
buffer-oriented API: connect_request, negotiate_reply, wrap, unwrap


impl Traits are used instead of explicit generics

The docs currently refer to nonexistent examples of Secure Session usage. They are currently cooking in a separate branch and will be added later in a separate pull request.","I'm closing in on the API of Secure Session which looks okay for me. This PR adds more information on how to use Secure Session to API docs, and updates the interface. You can view the docs by running
cargo doc --open

Some notable changes:

constructor is now called SecureSession::new() and it panics instead of returning a Result
some other methods have been renamed for consistency with other language wrappers:

callback API: connect, negotiate, send, receive
buffer-oriented API: connect_request, negotiate_reply, wrap, unwrap


impl Traits are used instead of explicit generics

The docs currently refer to nonexistent examples of Secure Session usage. They are currently cooking in a separate branch and will be added later in a separate pull request.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,380,2019-02-14T13:01:07Z,2019-02-15T11:10:35Z,2019-02-19T19:02:27Z,MERGED,True,437,275,3,https://github.com/ilammy, Improve and extend Secure Session API docs,8,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/380,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/380#issuecomment-463623148,"I'm closing in on the API of Secure Session which looks okay for me. This PR adds more information on how to use Secure Session to API docs, and updates the interface. You can view the docs by running
cargo doc --open

Some notable changes:

constructor is now called SecureSession::new() and it panics instead of returning a Result
some other methods have been renamed for consistency with other language wrappers:

callback API: connect, negotiate, send, receive
buffer-oriented API: connect_request, negotiate_reply, wrap, unwrap


impl Traits are used instead of explicit generics

The docs currently refer to nonexistent examples of Secure Session usage. They are currently cooking in a separate branch and will be added later in a separate pull request.","constructor is now called SecureSession::new() and it panics instead of returning a Result


why panic? usually, secure session will be created in runtime (not at compile time). how users can to handle errors from constructor without abort of program?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,380,2019-02-14T13:01:07Z,2019-02-15T11:10:35Z,2019-02-19T19:02:27Z,MERGED,True,437,275,3,https://github.com/ilammy, Improve and extend Secure Session API docs,8,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/380,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/380#issuecomment-463628133,"I'm closing in on the API of Secure Session which looks okay for me. This PR adds more information on how to use Secure Session to API docs, and updates the interface. You can view the docs by running
cargo doc --open

Some notable changes:

constructor is now called SecureSession::new() and it panics instead of returning a Result
some other methods have been renamed for consistency with other language wrappers:

callback API: connect, negotiate, send, receive
buffer-oriented API: connect_request, negotiate_reply, wrap, unwrap


impl Traits are used instead of explicit generics

The docs currently refer to nonexistent examples of Secure Session usage. They are currently cooking in a separate branch and will be added later in a separate pull request.","@Lagovas, I have decided to use panics to not bother users with errors which they are unlikely to be able to handle in any meaningful way.
Rust wrapper uses Rust type system to prevent a number of errors possible with the underlying C API:

null pointers
invalid or malformed private key
invalid transport implementation

It is not possible for the user of Secure Session to compile a program which passes invalid arguments to the constructor.
Basically, the only errors that left are:

insufficient memory available
violations of Secure Session invariants
failures in underlying crypto backend

OOM is (currently) indicated by panics in Rust and there is no way to handle it. The other two cases are programming bugs in Secure Session. The users of Secure Session cannot handle these conditions. There is no meaningful action to perform for an error indication returned from the constructor other than cease usage of Secure Session in the whole application.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,380,2019-02-14T13:01:07Z,2019-02-15T11:10:35Z,2019-02-19T19:02:27Z,MERGED,True,437,275,3,https://github.com/ilammy, Improve and extend Secure Session API docs,8,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/380,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/380#issuecomment-463986194,"I'm closing in on the API of Secure Session which looks okay for me. This PR adds more information on how to use Secure Session to API docs, and updates the interface. You can view the docs by running
cargo doc --open

Some notable changes:

constructor is now called SecureSession::new() and it panics instead of returning a Result
some other methods have been renamed for consistency with other language wrappers:

callback API: connect, negotiate, send, receive
buffer-oriented API: connect_request, negotiate_reply, wrap, unwrap


impl Traits are used instead of explicit generics

The docs currently refer to nonexistent examples of Secure Session usage. They are currently cooking in a separate branch and will be added later in a separate pull request.","It turns out that I was mistaken about errors during Secure Session construction. There is one possible error which is not prevented by the type system: the client ID must be non-empty.
Therefore I'll (partially) revert the commit which replaced Result with panic. The constructor will still return a Result.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,381,2019-02-15T11:22:59Z,2019-02-15T16:40:02Z,2019-02-19T19:01:50Z,MERGED,True,314,0,4,https://github.com/ilammy,Secure Session example code,3,"['docs :books:', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/381,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/381,"Here is an example of using Secure Session to implement a minimal networking application. Don't do anything fancy: a simple echo server with fixed keys and basic error handling should be enough.
We need to illustrate the following points:

how to initiate connections and exchange data
how to use both APIs of SecureSession
how to implement SecureSessionTransport correctly

There are also some specific comments on the session termination which has to be handled on the application layer.","Here is an example of using Secure Session to implement a minimal networking application. Don't do anything fancy: a simple echo server with fixed keys and basic error handling should be enough.
We need to illustrate the following points:

how to initiate connections and exchange data
how to use both APIs of SecureSession
how to implement SecureSessionTransport correctly

There are also some specific comments on the session termination which has to be handled on the application layer.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,381,2019-02-15T11:22:59Z,2019-02-15T16:40:02Z,2019-02-19T19:01:50Z,MERGED,True,314,0,4,https://github.com/ilammy,Secure Session example code,3,"['docs :books:', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/381,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/381#issuecomment-464009036,"Here is an example of using Secure Session to implement a minimal networking application. Don't do anything fancy: a simple echo server with fixed keys and basic error handling should be enough.
We need to illustrate the following points:

how to initiate connections and exchange data
how to use both APIs of SecureSession
how to implement SecureSessionTransport correctly

There are also some specific comments on the session termination which has to be handled on the application layer.",Please give this a look to ensure that I did not write anything stupid in comments and do not teach bad practices to the users.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,382,2019-02-15T14:15:35Z,2019-02-15T16:41:02Z,2019-02-19T19:01:28Z,MERGED,True,179,33,2,https://github.com/ilammy,Catch and handle panics in SecureSessionTransport,4,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/382,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/382,We must not let Rust panic escape into C's call stack from Secure Session callbacks as it is undefined behavior. Catch panics and handle them using yet another special error code. Add tests to verify that panics are not leaked.,We must not let Rust panic escape into C's call stack from Secure Session callbacks as it is undefined behavior. Catch panics and handle them using yet another special error code. Add tests to verify that panics are not leaked.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,383,2019-02-15T14:58:20Z,2019-02-15T16:46:24Z,2019-02-19T19:01:34Z,MERGED,True,91,76,8,https://github.com/ilammy,Rust API Guidelines compliance,11,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/383,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/383,"Multiple miscellaneous small changes to honor Rust API Guidelines. See individual commits for details.
Known violations of the guidelines:


C-SERDE: We don't implement Serialize and Deserialize yet. This can be meaningful for the private and public key types, but I don't want to bother with Serde right now (it's a giant dependency to pull in). We can add that later in a minor release if someone really needs it.


C-GOOD-ERR: TransportError does not implement std::error::Error due to technical reasons. This should not impair its usability.


C-NEWTYPE-HIDE: We expose output encrypted container as simply Vec<u8> which is not super-perfect clean, but I don't want to bother the users with constant ToVec trait bounds and to_vec() calls. Plus, using newtypes for input requires premature and incomplete error checking which will be super-bothersome as well.","Multiple miscellaneous small changes to honor Rust API Guidelines. See individual commits for details.
Known violations of the guidelines:


C-SERDE: We don't implement Serialize and Deserialize yet. This can be meaningful for the private and public key types, but I don't want to bother with Serde right now (it's a giant dependency to pull in). We can add that later in a minor release if someone really needs it.


C-GOOD-ERR: TransportError does not implement std::error::Error due to technical reasons. This should not impair its usability.


C-NEWTYPE-HIDE: We expose output encrypted container as simply Vec<u8> which is not super-perfect clean, but I don't want to bother the users with constant ToVec trait bounds and to_vec() calls. Plus, using newtypes for input requires premature and incomplete error checking which will be super-bothersome as well.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,383,2019-02-15T14:58:20Z,2019-02-15T16:46:24Z,2019-02-19T19:01:34Z,MERGED,True,91,76,8,https://github.com/ilammy,Rust API Guidelines compliance,11,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/383,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/383#issuecomment-464098591,"Multiple miscellaneous small changes to honor Rust API Guidelines. See individual commits for details.
Known violations of the guidelines:


C-SERDE: We don't implement Serialize and Deserialize yet. This can be meaningful for the private and public key types, but I don't want to bother with Serde right now (it's a giant dependency to pull in). We can add that later in a minor release if someone really needs it.


C-GOOD-ERR: TransportError does not implement std::error::Error due to technical reasons. This should not impair its usability.


C-NEWTYPE-HIDE: We expose output encrypted container as simply Vec<u8> which is not super-perfect clean, but I don't want to bother the users with constant ToVec trait bounds and to_vec() calls. Plus, using newtypes for input requires premature and incomplete error checking which will be super-bothersome as well.",wow Rust guidelines are very unusual 🤔,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,383,2019-02-15T14:58:20Z,2019-02-15T16:46:24Z,2019-02-19T19:01:34Z,MERGED,True,91,76,8,https://github.com/ilammy,Rust API Guidelines compliance,11,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/383,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/383#issuecomment-464118086,"Multiple miscellaneous small changes to honor Rust API Guidelines. See individual commits for details.
Known violations of the guidelines:


C-SERDE: We don't implement Serialize and Deserialize yet. This can be meaningful for the private and public key types, but I don't want to bother with Serde right now (it's a giant dependency to pull in). We can add that later in a minor release if someone really needs it.


C-GOOD-ERR: TransportError does not implement std::error::Error due to technical reasons. This should not impair its usability.


C-NEWTYPE-HIDE: We expose output encrypted container as simply Vec<u8> which is not super-perfect clean, but I don't want to bother the users with constant ToVec trait bounds and to_vec() calls. Plus, using newtypes for input requires premature and incomplete error checking which will be super-bothersome as well.","@vixentael I don't hold these particular guidelines in absolutely high regard... Some of the check list items there are useful, but others are not so much, IMO. But hey, an incomplete check list is better than nothing. Nevertheless, I would not recommend making these guidelines official in any capacity.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,384,2019-02-18T11:22:02Z,2019-02-19T15:24:16Z,2019-09-27T13:31:07Z,MERGED,True,817,87,13,https://github.com/ilammy,Improve error reporting in JsThemis,27,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/384,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/384,"The users are confused with non-descriptive errors like Secure Message failed decrypting, let's tell them more about what's wrong:

[Attempt at producing] unified error messages
Early checks for argument types (mismatch could crash Node)
Early checks for argument domains (generally we do not accept empty inputs)

And we get this:
-Secure Message failed decrypting
+Secure Message failed to decrypt: invalid parameter: private key is empty","The users are confused with non-descriptive errors like Secure Message failed decrypting, let's tell them more about what's wrong:

[Attempt at producing] unified error messages
Early checks for argument types (mismatch could crash Node)
Early checks for argument domains (generally we do not accept empty inputs)

And we get this:
-Secure Message failed decrypting
+Secure Message failed to decrypt: invalid parameter: private key is empty",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,384,2019-02-18T11:22:02Z,2019-02-19T15:24:16Z,2019-09-27T13:31:07Z,MERGED,True,817,87,13,https://github.com/ilammy,Improve error reporting in JsThemis,27,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/384,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/384#issuecomment-464695549,"The users are confused with non-descriptive errors like Secure Message failed decrypting, let's tell them more about what's wrong:

[Attempt at producing] unified error messages
Early checks for argument types (mismatch could crash Node)
Early checks for argument domains (generally we do not accept empty inputs)

And we get this:
-Secure Message failed decrypting
+Secure Message failed to decrypt: invalid parameter: private key is empty","You can consider this WIP, but the new GitHub feature does not seem to work for us for some reason.
I plan to add more error checks to other places as well (Secure Cell and Session also do not like empty inputs, as I recall).
The error messages are changed from gerund (failed decrypting) to infinitive (failed to decrypt) so that they are more closely related to method names. For example, the method is called decrypt and you're more likely to associate this exact word in the error message with the code that you wrote.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,384,2019-02-18T11:22:02Z,2019-02-19T15:24:16Z,2019-09-27T13:31:07Z,MERGED,True,817,87,13,https://github.com/ilammy,Improve error reporting in JsThemis,27,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/384,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/384#issuecomment-464849087,"The users are confused with non-descriptive errors like Secure Message failed decrypting, let's tell them more about what's wrong:

[Attempt at producing] unified error messages
Early checks for argument types (mismatch could crash Node)
Early checks for argument domains (generally we do not accept empty inputs)

And we get this:
-Secure Message failed decrypting
+Secure Message failed to decrypt: invalid parameter: private key is empty","@vixentael, I've updated some error messages to include more instructions and information.
@Lagovas, @vixentael, error objects now contain code property with Themis status code. Status codes are exported as constants. They can be checked like in that comment.
Please review the list and naming:

  
    
      themis/src/wrappers/themis/jsthemis/errors.cpp
    
    
        Lines 30 to 43
      in
      27fe0dc
    
  
  
    

        
          
           void Errors::Init(v8::Handle<v8::Object> exports) { 
        

        
          
             ExportStatusCode(exports, ""SUCCESS"",            THEMIS_SUCCESS); 
        

        
          
             ExportStatusCode(exports, ""FAIL"",               THEMIS_FAIL); 
        

        
          
             ExportStatusCode(exports, ""INVALID_PARAMETER"",  THEMIS_INVALID_PARAMETER); 
        

        
          
             ExportStatusCode(exports, ""NO_MEMORY"",          THEMIS_NO_MEMORY); 
        

        
          
             ExportStatusCode(exports, ""BUFFER_TOO_SMALL"",   THEMIS_BUFFER_TOO_SMALL); 
        

        
          
             ExportStatusCode(exports, ""DATA_CORRUPT"",       THEMIS_DATA_CORRUPT); 
        

        
          
             ExportStatusCode(exports, ""INVALID_SIGNATURE"",  THEMIS_INVALID_SIGNATURE); 
        

        
          
             ExportStatusCode(exports, ""NOT_SUPPORTED"",      THEMIS_NOT_SUPPORTED); 
        

        
          
             ExportStatusCode(exports, ""SSESSION_KA_NOT_FINISHED"", THEMIS_SSESSION_KA_NOT_FINISHED); 
        

        
          
             ExportStatusCode(exports, ""SSESSION_TRANSPORT_ERROR"", THEMIS_SSESSION_TRANSPORT_ERROR); 
        

        
          
             ExportStatusCode(exports, ""SSESSION_GET_PUB_FOR_ID_CALLBACK_ERROR"", THEMIS_SSESSION_GET_PUB_FOR_ID_CALLBACK_ERROR); 
        

        
          
             ExportStatusCode(exports, ""SCOMPARE_NOT_READY"", THEMIS_SCOMPARE_NOT_READY); 
        

        
          
           } 
        
    
  


This is new API surface and we will have to live with these names later. I did not export all errors, only the ones which are likely to be of some use (e.g., THEMIS_SSESSION_SEND_OUTPUT_TO_PEER is not exported as it should not be visible to the users).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,384,2019-02-18T11:22:02Z,2019-02-19T15:24:16Z,2019-09-27T13:31:07Z,MERGED,True,817,87,13,https://github.com/ilammy,Improve error reporting in JsThemis,27,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/384,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/384#issuecomment-464910485,"The users are confused with non-descriptive errors like Secure Message failed decrypting, let's tell them more about what's wrong:

[Attempt at producing] unified error messages
Early checks for argument types (mismatch could crash Node)
Early checks for argument domains (generally we do not accept empty inputs)

And we get this:
-Secure Message failed decrypting
+Secure Message failed to decrypt: invalid parameter: private key is empty","This should be it. I have added the same checks to Secure Session and Secure Comparator API where appropriate. Now (I hope) all JsThemis functions validate their argument count, types, and values.
It was a surprise, but key pair construction required checks as well. It was possible to construct a key pair with empty private or public keys, but the key pairs are useful only for Secure Messages where both components have to be non-empty. Thus constructing a key pair with an empty key is considered an error now.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,384,2019-02-18T11:22:02Z,2019-02-19T15:24:16Z,2019-09-27T13:31:07Z,MERGED,True,817,87,13,https://github.com/ilammy,Improve error reporting in JsThemis,27,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/384,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/384#issuecomment-465067718,"The users are confused with non-descriptive errors like Secure Message failed decrypting, let's tell them more about what's wrong:

[Attempt at producing] unified error messages
Early checks for argument types (mismatch could crash Node)
Early checks for argument domains (generally we do not accept empty inputs)

And we get this:
-Secure Message failed decrypting
+Secure Message failed to decrypt: invalid parameter: private key is empty",Amazing news. Recently released mocha 6.0.0 does not seem to be compatible with Node version on our CI. And it breaks our JavaScript tests. I guess I'll pin the version to 5.2.0 that we have been using until now.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,384,2019-02-18T11:22:02Z,2019-02-19T15:24:16Z,2019-09-27T13:31:07Z,MERGED,True,817,87,13,https://github.com/ilammy,Improve error reporting in JsThemis,27,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/384,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/384#issuecomment-465083697,"The users are confused with non-descriptive errors like Secure Message failed decrypting, let's tell them more about what's wrong:

[Attempt at producing] unified error messages
Early checks for argument types (mismatch could crash Node)
Early checks for argument domains (generally we do not accept empty inputs)

And we get this:
-Secure Message failed decrypting
+Secure Message failed to decrypt: invalid parameter: private key is empty","During a dependency downgrade I have noticed that JsThemis triggers a deprecation warning during native addon compilation. I've replaced the deprecated method call with its recommended replacement. That also focused my attention on Secure Session callback which was missing type and length checks. Now it has checks and does not cause Node crashes.
Please let it be a green build 🤞",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,384,2019-02-18T11:22:02Z,2019-02-19T15:24:16Z,2019-09-27T13:31:07Z,MERGED,True,817,87,13,https://github.com/ilammy,Improve error reporting in JsThemis,27,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/384,https://github.com/Lagovas,7,https://github.com/cossacklabs/themis/pull/384#issuecomment-465086219,"The users are confused with non-descriptive errors like Secure Message failed decrypting, let's tell them more about what's wrong:

[Attempt at producing] unified error messages
Early checks for argument types (mismatch could crash Node)
Early checks for argument domains (generally we do not accept empty inputs)

And we get this:
-Secure Message failed decrypting
+Secure Message failed to decrypt: invalid parameter: private key is empty","This is new API surface and we will have to live with these names later. I did not export all errors, only the ones which are likely to be of some use (e.g., THEMIS_SSESSION_SEND_OUTPUT_TO_PEER is not exported as it should not be visible to the users).

As I remember THEMIS_SSESSION_SEND_OUTPUT_TO_PEER used as correct status for Secure Session handshake and tell a user that it needs to be sent to another peer",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,384,2019-02-18T11:22:02Z,2019-02-19T15:24:16Z,2019-09-27T13:31:07Z,MERGED,True,817,87,13,https://github.com/ilammy,Improve error reporting in JsThemis,27,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/384,https://github.com/ilammy,8,https://github.com/cossacklabs/themis/pull/384#issuecomment-465088211,"The users are confused with non-descriptive errors like Secure Message failed decrypting, let's tell them more about what's wrong:

[Attempt at producing] unified error messages
Early checks for argument types (mismatch could crash Node)
Early checks for argument domains (generally we do not accept empty inputs)

And we get this:
-Secure Message failed decrypting
+Secure Message failed to decrypt: invalid parameter: private key is empty","@Lagovas, JsThemis makes Secure Session more convenient for the user:

  
    
      themis/tests/jsthemis/test.js
    
    
        Lines 68 to 76
      in
      6a6b540
    
  
  
    

        
          
           data = client_session.connectRequest(); 
        

        
          
           data = server_session.unwrap(data); 
        

        
          
           data = client_session.unwrap(data); 
        

        
          
           data = server_session.unwrap(data); 
        

        
          
           assert.equal(client_session.isEstablished(), false); 
        

        
          
           data = client_session.unwrap(data); 
        

        
          
           assert.equal(data,undefined); 
        

        
          
           assert.equal(server_session.isEstablished(), true); 
        

        
          
           assert.equal(client_session.isEstablished(), true); 
        
    
  


The user is expected to send the data to the peer if the data is not undefined (of if the session is not established). JsThemis checks for THEMIS_SSESSION_SEND_OUTPUT_TO_PEER internally, this code should not be necessary for JsThemis users.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,384,2019-02-18T11:22:02Z,2019-02-19T15:24:16Z,2019-09-27T13:31:07Z,MERGED,True,817,87,13,https://github.com/ilammy,Improve error reporting in JsThemis,27,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/384,https://github.com/ilammy,9,https://github.com/cossacklabs/themis/pull/384#issuecomment-465175343,"The users are confused with non-descriptive errors like Secure Message failed decrypting, let's tell them more about what's wrong:

[Attempt at producing] unified error messages
Early checks for argument types (mismatch could crash Node)
Early checks for argument domains (generally we do not accept empty inputs)

And we get this:
-Secure Message failed decrypting
+Secure Message failed to decrypt: invalid parameter: private key is empty","Yay! Thank you, @vixentael @Lagovas, for very valuable input on this PR.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,385,2019-02-19T14:49:05Z,2019-02-20T12:04:51Z,2019-02-20T12:05:04Z,MERGED,True,365,93,9,https://github.com/ilammy,Improve error reporting in ThemisPP,9,['W-ThemisPP :crossed_swords:'],https://github.com/cossacklabs/themis/pull/385,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/385,"This is a change set similar to #384 but for ThemisPP which updates error reporting.

Added original Themis status codes to exceptions where appropriate
Added checks for empty keys and IDs where appropriate (especially Secure Message)
Updated the messages to use similar wording to JsThemis
Updated tests to verify the new behavior (some constructors throw more exceptions now)","This is a change set similar to #384 but for ThemisPP which updates error reporting.

Added original Themis status codes to exceptions where appropriate
Added checks for empty keys and IDs where appropriate (especially Secure Message)
Updated the messages to use similar wording to JsThemis
Updated tests to verify the new behavior (some constructors throw more exceptions now)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,386,2019-02-19T15:20:51Z,2019-02-19T17:08:03Z,2019-04-16T16:27:12Z,MERGED,True,58,5,2,https://github.com/ilammy,Additional safety checks for Secure Session (check if empty clientID),2,['core'],https://github.com/cossacklabs/themis/pull/386,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/386,"It turns out that Secure Session breaks in a subtle and non-obvious way if it is created with empty client ID or missing private key. The user callbacks are also not thoroughly validated and may cause a crash if the user forgets to fill them in.
Add checks for client ID and private key length as well as NULL checks for pointers involved with user context and its callbacks.","It turns out that Secure Session breaks in a subtle and non-obvious way if it is created with empty client ID or missing private key. The user callbacks are also not thoroughly validated and may cause a crash if the user forgets to fill them in.
Add checks for client ID and private key length as well as NULL checks for pointers involved with user context and its callbacks.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,387,2019-02-19T17:06:27Z,2019-02-20T12:03:20Z,2019-02-20T12:05:18Z,MERGED,True,13,0,1,https://github.com/ilammy,Add CODEOWNERS file,3,['infrastructure'],https://github.com/cossacklabs/themis/pull/387,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/387,"I've become too lazy to add people for code review manually. Let's offload some of this work to GitHub by adding a CODEOWNERS file.
Any suggestions for the list?","I've become too lazy to add people for code review manually. Let's offload some of this work to GitHub by adding a CODEOWNERS file.
Any suggestions for the list?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,388,2019-02-20T10:00:45Z,2019-02-22T12:04:15Z,2019-02-22T12:04:24Z,MERGED,True,16,114,8,https://github.com/ilammy,Remove themis_version() API,5,"['W-RbThemis :diamonds:', 'core', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/388,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/388,"As discussed in #324 and offline, remove themis_version() function and all related API for querying Themis and Soter versions at run-time. There is no replacement and this is obviously a breaking change.
This API was not really widely used and it is a bit bothersome to maintain. It is recommended to not depend on Themis version at run-time. Applications should link against a particular version of Themis during build or development (whatever is applicable to the language environment). The version should be selected by the package manager: either the system one for Themis core, or language-specific for language bindings.
themis_version() was used tests to print a version banner, that's not really important. It was also used by Rust binding to verify that FFI calls can be made, replace it with some other function. And it was also exported for Ruby programs, drop the export. The other use I'm aware of is in my Homebrew formula, that can be dealt with exactly as with Rust.
Note that the code still contains hardcoded versions in Makefile as well as in PHP and PHP7 bindings. These are going to stay for technical reasons.
Closes #324","As discussed in #324 and offline, remove themis_version() function and all related API for querying Themis and Soter versions at run-time. There is no replacement and this is obviously a breaking change.
This API was not really widely used and it is a bit bothersome to maintain. It is recommended to not depend on Themis version at run-time. Applications should link against a particular version of Themis during build or development (whatever is applicable to the language environment). The version should be selected by the package manager: either the system one for Themis core, or language-specific for language bindings.
themis_version() was used tests to print a version banner, that's not really important. It was also used by Rust binding to verify that FFI calls can be made, replace it with some other function. And it was also exported for Ruby programs, drop the export. The other use I'm aware of is in my Homebrew formula, that can be dealt with exactly as with Rust.
Note that the code still contains hardcoded versions in Makefile as well as in PHP and PHP7 bindings. These are going to stay for technical reasons.
Closes #324",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,388,2019-02-20T10:00:45Z,2019-02-22T12:04:15Z,2019-02-22T12:04:24Z,MERGED,True,16,114,8,https://github.com/ilammy,Remove themis_version() API,5,"['W-RbThemis :diamonds:', 'core', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/388,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/388#issuecomment-465563102,"As discussed in #324 and offline, remove themis_version() function and all related API for querying Themis and Soter versions at run-time. There is no replacement and this is obviously a breaking change.
This API was not really widely used and it is a bit bothersome to maintain. It is recommended to not depend on Themis version at run-time. Applications should link against a particular version of Themis during build or development (whatever is applicable to the language environment). The version should be selected by the package manager: either the system one for Themis core, or language-specific for language bindings.
themis_version() was used tests to print a version banner, that's not really important. It was also used by Rust binding to verify that FFI calls can be made, replace it with some other function. And it was also exported for Ruby programs, drop the export. The other use I'm aware of is in my Homebrew formula, that can be dealt with exactly as with Rust.
Note that the code still contains hardcoded versions in Makefile as well as in PHP and PHP7 bindings. These are going to stay for technical reasons.
Closes #324",@ilammy please grep all source and config files to check if soter.c and themis.c are not linked somewhere as exact dependencies.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,388,2019-02-20T10:00:45Z,2019-02-22T12:04:15Z,2019-02-22T12:04:24Z,MERGED,True,16,114,8,https://github.com/ilammy,Remove themis_version() API,5,"['W-RbThemis :diamonds:', 'core', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/388,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/388#issuecomment-466019073,"As discussed in #324 and offline, remove themis_version() function and all related API for querying Themis and Soter versions at run-time. There is no replacement and this is obviously a breaking change.
This API was not really widely used and it is a bit bothersome to maintain. It is recommended to not depend on Themis version at run-time. Applications should link against a particular version of Themis during build or development (whatever is applicable to the language environment). The version should be selected by the package manager: either the system one for Themis core, or language-specific for language bindings.
themis_version() was used tests to print a version banner, that's not really important. It was also used by Rust binding to verify that FFI calls can be made, replace it with some other function. And it was also exported for Ruby programs, drop the export. The other use I'm aware of is in my Homebrew formula, that can be dealt with exactly as with Rust.
Note that the code still contains hardcoded versions in Makefile as well as in PHP and PHP7 bindings. These are going to stay for technical reasons.
Closes #324","@vixentael I've reviewed the code, it seems that temis.c and soter.c are not referenced anywhere explicitly. They are included into respective libraries using wildcards in makefiles:

  
    
      themis/src/themis/themis.mk
    
    
        Lines 17 to 19
      in
      29ebf63
    
  
  
    

        
          
           THEMIS_SRC = $(wildcard $(SRC_PATH)/themis/*.c) 
        

        
          
           THEMIS_AUD_SRC = $(wildcard $(SRC_PATH)/themis/*.c) 
        

        
          
           THEMIS_AUD_SRC += $(wildcard $(SRC_PATH)/themis/*.h)",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,388,2019-02-20T10:00:45Z,2019-02-22T12:04:15Z,2019-02-22T12:04:24Z,MERGED,True,16,114,8,https://github.com/ilammy,Remove themis_version() API,5,"['W-RbThemis :diamonds:', 'core', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/388,https://github.com/Lagovas,4,https://github.com/cossacklabs/themis/pull/388#issuecomment-466020994,"As discussed in #324 and offline, remove themis_version() function and all related API for querying Themis and Soter versions at run-time. There is no replacement and this is obviously a breaking change.
This API was not really widely used and it is a bit bothersome to maintain. It is recommended to not depend on Themis version at run-time. Applications should link against a particular version of Themis during build or development (whatever is applicable to the language environment). The version should be selected by the package manager: either the system one for Themis core, or language-specific for language bindings.
themis_version() was used tests to print a version banner, that's not really important. It was also used by Rust binding to verify that FFI calls can be made, replace it with some other function. And it was also exported for Ruby programs, drop the export. The other use I'm aware of is in my Homebrew formula, that can be dealt with exactly as with Rust.
Note that the code still contains hardcoded versions in Makefile as well as in PHP and PHP7 bindings. These are going to stay for technical reasons.
Closes #324","Now when I see DEPRECATED macro I think we can use version with pre-processor to automatically remove code after some version :  ). for example DEPRECATED('msg', 0.12.0) that check with pre-processor logic that version is lower than 0.12.0 and leave code otherwise remove.
#if VERSION <= 0.12.0
  // deprecated code
#endif

https://www.slac.stanford.edu/comp/unix/gnu-info/cpp_1.html#SEC36",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,388,2019-02-20T10:00:45Z,2019-02-22T12:04:15Z,2019-02-22T12:04:24Z,MERGED,True,16,114,8,https://github.com/ilammy,Remove themis_version() API,5,"['W-RbThemis :diamonds:', 'core', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/388,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/388#issuecomment-466036734,"As discussed in #324 and offline, remove themis_version() function and all related API for querying Themis and Soter versions at run-time. There is no replacement and this is obviously a breaking change.
This API was not really widely used and it is a bit bothersome to maintain. It is recommended to not depend on Themis version at run-time. Applications should link against a particular version of Themis during build or development (whatever is applicable to the language environment). The version should be selected by the package manager: either the system one for Themis core, or language-specific for language bindings.
themis_version() was used tests to print a version banner, that's not really important. It was also used by Rust binding to verify that FFI calls can be made, replace it with some other function. And it was also exported for Ruby programs, drop the export. The other use I'm aware of is in my Homebrew formula, that can be dealt with exactly as with Rust.
Note that the code still contains hardcoded versions in Makefile as well as in PHP and PHP7 bindings. These are going to stay for technical reasons.
Closes #324","@Lagovas why don't we just remove the deprecated code from the files altogether with a new release? First we mark it deprecated (but still have to maintain it) and then completely remove the code at some later point.
Though I do see a merit of specifying the version in the deprecation attributes: we can mark the code as deprecated since some version and use that version as a reminder for us that some functionality has been deprecated for too long and should actually be removed.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,388,2019-02-20T10:00:45Z,2019-02-22T12:04:15Z,2019-02-22T12:04:24Z,MERGED,True,16,114,8,https://github.com/ilammy,Remove themis_version() API,5,"['W-RbThemis :diamonds:', 'core', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/388,https://github.com/Lagovas,6,https://github.com/cossacklabs/themis/pull/388#issuecomment-466056492,"As discussed in #324 and offline, remove themis_version() function and all related API for querying Themis and Soter versions at run-time. There is no replacement and this is obviously a breaking change.
This API was not really widely used and it is a bit bothersome to maintain. It is recommended to not depend on Themis version at run-time. Applications should link against a particular version of Themis during build or development (whatever is applicable to the language environment). The version should be selected by the package manager: either the system one for Themis core, or language-specific for language bindings.
themis_version() was used tests to print a version banner, that's not really important. It was also used by Rust binding to verify that FFI calls can be made, replace it with some other function. And it was also exported for Ruby programs, drop the export. The other use I'm aware of is in my Homebrew formula, that can be dealt with exactly as with Rust.
Note that the code still contains hardcoded versions in Makefile as well as in PHP and PHP7 bindings. These are going to stay for technical reasons.
Closes #324","to not maintain it manually and leave it for pre-processor if we will forget to remove legacy code and to provide explicit version when it will be removed. I saw that other libraries use deprecation warnings in some versions in a row and document in their releases what will be removed in a future and in which release it will be done. For example, it do django (python web framework), rust",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,388,2019-02-20T10:00:45Z,2019-02-22T12:04:15Z,2019-02-22T12:04:24Z,MERGED,True,16,114,8,https://github.com/ilammy,Remove themis_version() API,5,"['W-RbThemis :diamonds:', 'core', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/388,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/388#issuecomment-466072531,"As discussed in #324 and offline, remove themis_version() function and all related API for querying Themis and Soter versions at run-time. There is no replacement and this is obviously a breaking change.
This API was not really widely used and it is a bit bothersome to maintain. It is recommended to not depend on Themis version at run-time. Applications should link against a particular version of Themis during build or development (whatever is applicable to the language environment). The version should be selected by the package manager: either the system one for Themis core, or language-specific for language bindings.
themis_version() was used tests to print a version banner, that's not really important. It was also used by Rust binding to verify that FFI calls can be made, replace it with some other function. And it was also exported for Ruby programs, drop the export. The other use I'm aware of is in my Homebrew formula, that can be dealt with exactly as with Rust.
Note that the code still contains hardcoded versions in Makefile as well as in PHP and PHP7 bindings. These are going to stay for technical reasons.
Closes #324","Hm... For that we will need some machine-readable version first.
Then we can probably invent something like this using some advanced macrology:
THEMIS_DEPRECATED(SINCE(0,11,0), UNTIL(0,12,0), AT_MOST(0,13,0),
    ""use 'bar' instead""
)
void foo(void);
which will then cascade attributes:

expands to nothing in 0.10.0
adds deprecated attribute since 0.11.0 (compiler warning if the function is used)
adds error attribute since 0.12.0 (compiler error if the function is used)
hard compilation error since 0.13.0 if this code is not removed

But that looks like overengineering to me, TBH.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,388,2019-02-20T10:00:45Z,2019-02-22T12:04:15Z,2019-02-22T12:04:24Z,MERGED,True,16,114,8,https://github.com/ilammy,Remove themis_version() API,5,"['W-RbThemis :diamonds:', 'core', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/388,https://github.com/Lagovas,8,https://github.com/cossacklabs/themis/pull/388#issuecomment-466073409,"As discussed in #324 and offline, remove themis_version() function and all related API for querying Themis and Soter versions at run-time. There is no replacement and this is obviously a breaking change.
This API was not really widely used and it is a bit bothersome to maintain. It is recommended to not depend on Themis version at run-time. Applications should link against a particular version of Themis during build or development (whatever is applicable to the language environment). The version should be selected by the package manager: either the system one for Themis core, or language-specific for language bindings.
themis_version() was used tests to print a version banner, that's not really important. It was also used by Rust binding to verify that FFI calls can be made, replace it with some other function. And it was also exported for Ruby programs, drop the export. The other use I'm aware of is in my Homebrew formula, that can be dealt with exactly as with Rust.
Note that the code still contains hardcoded versions in Makefile as well as in PHP and PHP7 bindings. These are going to stay for technical reasons.
Closes #324","it was just thoughts about for what we can leave version) if we decided to remove version and we don't need it, it's okay to remove",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,388,2019-02-20T10:00:45Z,2019-02-22T12:04:15Z,2019-02-22T12:04:24Z,MERGED,True,16,114,8,https://github.com/ilammy,Remove themis_version() API,5,"['W-RbThemis :diamonds:', 'core', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/388,https://github.com/vixentael,9,https://github.com/cossacklabs/themis/pull/388#issuecomment-466167223,"As discussed in #324 and offline, remove themis_version() function and all related API for querying Themis and Soter versions at run-time. There is no replacement and this is obviously a breaking change.
This API was not really widely used and it is a bit bothersome to maintain. It is recommended to not depend on Themis version at run-time. Applications should link against a particular version of Themis during build or development (whatever is applicable to the language environment). The version should be selected by the package manager: either the system one for Themis core, or language-specific for language bindings.
themis_version() was used tests to print a version banner, that's not really important. It was also used by Rust binding to verify that FFI calls can be made, replace it with some other function. And it was also exported for Ruby programs, drop the export. The other use I'm aware of is in my Homebrew formula, that can be dealt with exactly as with Rust.
Note that the code still contains hardcoded versions in Makefile as well as in PHP and PHP7 bindings. These are going to stay for technical reasons.
Closes #324","@Lagovas nice catch about deprecation macros! it might be useful for us in future.
@ilammy currently let's just remove version.
LGMT to merge",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,389,2019-02-20T12:08:24Z,2019-02-25T09:01:31Z,2019-09-27T13:31:07Z,MERGED,True,1327,374,22,https://github.com/ilammy,Introduce new Secure Message API,22,"['enhancement', 'O-Android :robot:', 'core', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'W-RustThemis :crab:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/389,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/389,"The new API has more obvious naming and should be harder to misuse, with encrypt/decrypt and sign/verify API clearly named and separated.
A common mistake with the old API was for users to accidentally using sign/verify API instead of encryption by not providing a private key. New API features more strict checks and prevents this kind of mistakes.

New Secure Message API:

themis_secure_message_encrypt
themis_secure_message_decrypt
themis_secure_message_sign
themis_secure_message_verify

New key validation API:

themis_is_asym_key_valid
themis_get_asym_key_kind

Deprecated API:

themis_secure_message_wrap

Use themis_secure_message_encrypt instead if you have both private and public key
Use themis_secure_message_sign instead if you use only private key


themis_secure_message_unwrap

Use themis_secure_message_decrypt instead if you have both private and public key
Use themis_secure_message_verify instead if you use only public key



Tasks:

 Additional validation of public & private keys
 Add key validation to Secure Session as well (will be done separately)
 Move key routines into separate modules","The new API has more obvious naming and should be harder to misuse, with encrypt/decrypt and sign/verify API clearly named and separated.
A common mistake with the old API was for users to accidentally using sign/verify API instead of encryption by not providing a private key. New API features more strict checks and prevents this kind of mistakes.

New Secure Message API:

themis_secure_message_encrypt
themis_secure_message_decrypt
themis_secure_message_sign
themis_secure_message_verify

New key validation API:

themis_is_asym_key_valid
themis_get_asym_key_kind

Deprecated API:

themis_secure_message_wrap

Use themis_secure_message_encrypt instead if you have both private and public key
Use themis_secure_message_sign instead if you use only private key


themis_secure_message_unwrap

Use themis_secure_message_decrypt instead if you have both private and public key
Use themis_secure_message_verify instead if you use only public key



Tasks:

 Additional validation of public & private keys
 Add key validation to Secure Session as well (will be done separately)
 Move key routines into separate modules",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,389,2019-02-20T12:08:24Z,2019-02-25T09:01:31Z,2019-09-27T13:31:07Z,MERGED,True,1327,374,22,https://github.com/ilammy,Introduce new Secure Message API,22,"['enhancement', 'O-Android :robot:', 'core', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'W-RustThemis :crab:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/389,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/389#issuecomment-465548415,"The new API has more obvious naming and should be harder to misuse, with encrypt/decrypt and sign/verify API clearly named and separated.
A common mistake with the old API was for users to accidentally using sign/verify API instead of encryption by not providing a private key. New API features more strict checks and prevents this kind of mistakes.

New Secure Message API:

themis_secure_message_encrypt
themis_secure_message_decrypt
themis_secure_message_sign
themis_secure_message_verify

New key validation API:

themis_is_asym_key_valid
themis_get_asym_key_kind

Deprecated API:

themis_secure_message_wrap

Use themis_secure_message_encrypt instead if you have both private and public key
Use themis_secure_message_sign instead if you use only private key


themis_secure_message_unwrap

Use themis_secure_message_decrypt instead if you have both private and public key
Use themis_secure_message_verify instead if you use only public key



Tasks:

 Additional validation of public & private keys
 Add key validation to Secure Session as well (will be done separately)
 Move key routines into separate modules","Currently the new API is implemented using the old functions (as they are intended to be used). We'll switch the implementations in the next commits and then deprecate the old API.
Actually, no. The old API will be retained as is because it has some peculiar logic for error handling and guessing whether to decrypt or verify. However, it will be deprecated in favor of the new one.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,389,2019-02-20T12:08:24Z,2019-02-25T09:01:31Z,2019-09-27T13:31:07Z,MERGED,True,1327,374,22,https://github.com/ilammy,Introduce new Secure Message API,22,"['enhancement', 'O-Android :robot:', 'core', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'W-RustThemis :crab:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/389,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/389#issuecomment-465802337,"The new API has more obvious naming and should be harder to misuse, with encrypt/decrypt and sign/verify API clearly named and separated.
A common mistake with the old API was for users to accidentally using sign/verify API instead of encryption by not providing a private key. New API features more strict checks and prevents this kind of mistakes.

New Secure Message API:

themis_secure_message_encrypt
themis_secure_message_decrypt
themis_secure_message_sign
themis_secure_message_verify

New key validation API:

themis_is_asym_key_valid
themis_get_asym_key_kind

Deprecated API:

themis_secure_message_wrap

Use themis_secure_message_encrypt instead if you have both private and public key
Use themis_secure_message_sign instead if you use only private key


themis_secure_message_unwrap

Use themis_secure_message_decrypt instead if you have both private and public key
Use themis_secure_message_verify instead if you use only public key



Tasks:

 Additional validation of public & private keys
 Add key validation to Secure Session as well (will be done separately)
 Move key routines into separate modules","Regarding language wrappers: this PR will contain only minimal necessary changes for the build to work. Some wrappers tolerate calling deprecated functions from C, these are left untouched and will be updated later. Sensitive wrappers will be taught how to use the new C API, but their language-specific API will be updated later as well.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,389,2019-02-20T12:08:24Z,2019-02-25T09:01:31Z,2019-09-27T13:31:07Z,MERGED,True,1327,374,22,https://github.com/ilammy,Introduce new Secure Message API,22,"['enhancement', 'O-Android :robot:', 'core', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'W-RustThemis :crab:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/389,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/389#issuecomment-466057759,"The new API has more obvious naming and should be harder to misuse, with encrypt/decrypt and sign/verify API clearly named and separated.
A common mistake with the old API was for users to accidentally using sign/verify API instead of encryption by not providing a private key. New API features more strict checks and prevents this kind of mistakes.

New Secure Message API:

themis_secure_message_encrypt
themis_secure_message_decrypt
themis_secure_message_sign
themis_secure_message_verify

New key validation API:

themis_is_asym_key_valid
themis_get_asym_key_kind

Deprecated API:

themis_secure_message_wrap

Use themis_secure_message_encrypt instead if you have both private and public key
Use themis_secure_message_sign instead if you use only private key


themis_secure_message_unwrap

Use themis_secure_message_decrypt instead if you have both private and public key
Use themis_secure_message_verify instead if you use only public key



Tasks:

 Additional validation of public & private keys
 Add key validation to Secure Session as well (will be done separately)
 Move key routines into separate modules","@Lagovas done:

Moved key generation functions into a separate file in Themis Core. Now its layout is consistent with language wrappers: all of them already have some ""keygen"" module for key generation routines.
Moved reusable key utilities into functions in keygen module for JsThemis and ThemisPP.
Deleted redundant null and empty checks in the new API.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,389,2019-02-20T12:08:24Z,2019-02-25T09:01:31Z,2019-09-27T13:31:07Z,MERGED,True,1327,374,22,https://github.com/ilammy,Introduce new Secure Message API,22,"['enhancement', 'O-Android :robot:', 'core', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'W-RustThemis :crab:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/389,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/389#issuecomment-466169745,"The new API has more obvious naming and should be harder to misuse, with encrypt/decrypt and sign/verify API clearly named and separated.
A common mistake with the old API was for users to accidentally using sign/verify API instead of encryption by not providing a private key. New API features more strict checks and prevents this kind of mistakes.

New Secure Message API:

themis_secure_message_encrypt
themis_secure_message_decrypt
themis_secure_message_sign
themis_secure_message_verify

New key validation API:

themis_is_asym_key_valid
themis_get_asym_key_kind

Deprecated API:

themis_secure_message_wrap

Use themis_secure_message_encrypt instead if you have both private and public key
Use themis_secure_message_sign instead if you use only private key


themis_secure_message_unwrap

Use themis_secure_message_decrypt instead if you have both private and public key
Use themis_secure_message_verify instead if you use only public key



Tasks:

 Additional validation of public & private keys
 Add key validation to Secure Session as well (will be done separately)
 Move key routines into separate modules","Currently does key validation function support both RSA and ECDSA keys?


Keeping in mind that there are at least three different types of keys used (private/public RSA, private/public ECDSA, symmetric key for SCell (which is transformed using KDF)), I think better name for themis_is_valid_key is themis_is_valid_asym_key.



FYI: next time let's not mix new secure message API and new key gen functions, now this PR looks complicated to catch up.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,389,2019-02-20T12:08:24Z,2019-02-25T09:01:31Z,2019-09-27T13:31:07Z,MERGED,True,1327,374,22,https://github.com/ilammy,Introduce new Secure Message API,22,"['enhancement', 'O-Android :robot:', 'core', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'W-RustThemis :crab:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/389,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/389#issuecomment-466337275,"The new API has more obvious naming and should be harder to misuse, with encrypt/decrypt and sign/verify API clearly named and separated.
A common mistake with the old API was for users to accidentally using sign/verify API instead of encryption by not providing a private key. New API features more strict checks and prevents this kind of mistakes.

New Secure Message API:

themis_secure_message_encrypt
themis_secure_message_decrypt
themis_secure_message_sign
themis_secure_message_verify

New key validation API:

themis_is_asym_key_valid
themis_get_asym_key_kind

Deprecated API:

themis_secure_message_wrap

Use themis_secure_message_encrypt instead if you have both private and public key
Use themis_secure_message_sign instead if you use only private key


themis_secure_message_unwrap

Use themis_secure_message_decrypt instead if you have both private and public key
Use themis_secure_message_verify instead if you use only public key



Tasks:

 Additional validation of public & private keys
 Add key validation to Secure Session as well (will be done separately)
 Move key routines into separate modules","@vixentael,

Currently does key validation function support both RSA and ECDSA keys?

Yes. The key validation function supports all types of keys. In fact, it only validates the Soter container wrapping the key. That's not quite complete check, but it fails for data that is most definitely not a valid key.

I think better name for themis_is_valid_key is themis_is_valid_asym_key.

Good point. I'll rename the functions.

now this PR looks complicated to catch up

I should have noticed that about ten commits ago. I'm sorry 😥",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,389,2019-02-20T12:08:24Z,2019-02-25T09:01:31Z,2019-09-27T13:31:07Z,MERGED,True,1327,374,22,https://github.com/ilammy,Introduce new Secure Message API,22,"['enhancement', 'O-Android :robot:', 'core', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'W-RustThemis :crab:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/389,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/389#issuecomment-466925965,"The new API has more obvious naming and should be harder to misuse, with encrypt/decrypt and sign/verify API clearly named and separated.
A common mistake with the old API was for users to accidentally using sign/verify API instead of encryption by not providing a private key. New API features more strict checks and prevents this kind of mistakes.

New Secure Message API:

themis_secure_message_encrypt
themis_secure_message_decrypt
themis_secure_message_sign
themis_secure_message_verify

New key validation API:

themis_is_asym_key_valid
themis_get_asym_key_kind

Deprecated API:

themis_secure_message_wrap

Use themis_secure_message_encrypt instead if you have both private and public key
Use themis_secure_message_sign instead if you use only private key


themis_secure_message_unwrap

Use themis_secure_message_decrypt instead if you have both private and public key
Use themis_secure_message_verify instead if you use only public key



Tasks:

 Additional validation of public & private keys
 Add key validation to Secure Session as well (will be done separately)
 Move key routines into separate modules",@vixentael it seems so. Inco-o-omi-i-i-i-i-ing!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,390,2019-02-22T12:00:12Z,2019-02-22T23:26:51Z,2019-03-28T18:09:46Z,MERGED,True,18,84,1,https://github.com/ilammy,Keep Rust README minimal,2,"['docs :books:', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/390,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/390,We have three to four places with assorted documentation on Themis and this is getting a bit hard to maintain consistency between them. Let's keep Rust README minimal so that it does not require frequent changes. Just refer to relevant pieces of documentation from it and avoid any detailed explanations.,We have three to four places with assorted documentation on Themis and this is getting a bit hard to maintain consistency between them. Let's keep Rust README minimal so that it does not require frequent changes. Just refer to relevant pieces of documentation from it and avoid any detailed explanations.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,390,2019-02-22T12:00:12Z,2019-02-22T23:26:51Z,2019-03-28T18:09:46Z,MERGED,True,18,84,1,https://github.com/ilammy,Keep Rust README minimal,2,"['docs :books:', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/390,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/390#issuecomment-466382956,We have three to four places with assorted documentation on Themis and this is getting a bit hard to maintain consistency between them. Let's keep Rust README minimal so that it does not require frequent changes. Just refer to relevant pieces of documentation from it and avoid any detailed explanations.,"@karenswry no worries, all these docs are scheduled to be reviewed by you during release preparations.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,391,2019-02-25T18:39:18Z,2019-02-28T12:42:31Z,2019-03-28T18:09:12Z,CLOSED,False,10735,10540,112,https://github.com/ilammy,Automate C code formatting,13,[],https://github.com/cossacklabs/themis/pull/391,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/391,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format as this tool is generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
Then actually reformat the whole code base in accordance with the style. Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests.

This pull includes the formatting changes as well to ensure that the build is green. There is no point in reviewing the restyling commit itself, focus on the other ones.
Do not merge this pull request via GitHub interface, I'll do it manually to preserve the authorship information as I don't want to be credited for authoring half of this repository.
Closes #270","Let's introduce an automatic code style formatting and checks for Themis. We use clang-format as this tool is generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
Then actually reformat the whole code base in accordance with the style. Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests.

This pull includes the formatting changes as well to ensure that the build is green. There is no point in reviewing the restyling commit itself, focus on the other ones.
Do not merge this pull request via GitHub interface, I'll do it manually to preserve the authorship information as I don't want to be credited for authoring half of this repository.
Closes #270",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,391,2019-02-25T18:39:18Z,2019-02-28T12:42:31Z,2019-03-28T18:09:12Z,CLOSED,False,10735,10540,112,https://github.com/ilammy,Automate C code formatting,13,[],https://github.com/cossacklabs/themis/pull/391,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/391#issuecomment-467132493,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format as this tool is generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
Then actually reformat the whole code base in accordance with the style. Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests.

This pull includes the formatting changes as well to ensure that the build is green. There is no point in reviewing the restyling commit itself, focus on the other ones.
Do not merge this pull request via GitHub interface, I'll do it manually to preserve the authorship information as I don't want to be credited for authoring half of this repository.
Closes #270","Please review the code style and provide feedback. You'd better just check out my branch and inspect it yourself in your development environment:
git remote add ilammy git@github.com:ilammy/themis.git
git fetch ilammy
git checkout formatting

Meanwhile I'll be negotiating behavior differences between clang-format 6.0 and 8.0...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,391,2019-02-25T18:39:18Z,2019-02-28T12:42:31Z,2019-03-28T18:09:12Z,CLOSED,False,10735,10540,112,https://github.com/ilammy,Automate C code formatting,13,[],https://github.com/cossacklabs/themis/pull/391,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/391#issuecomment-467388816,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format as this tool is generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
Then actually reformat the whole code base in accordance with the style. Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests.

This pull includes the formatting changes as well to ensure that the build is green. There is no point in reviewing the restyling commit itself, focus on the other ones.
Do not merge this pull request via GitHub interface, I'll do it manually to preserve the authorship information as I don't want to be credited for authoring half of this repository.
Closes #270","@Lagovas I fully agree with you on that one-line ifs also need braces. Unfortunately, clang-format does not seem to be able to insert them. I looked for a couple of other formatters like astyle, but they were worse then clang-format in other places. Another option that I have in mind is trying clang-tidy, maybe it will work better.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,391,2019-02-25T18:39:18Z,2019-02-28T12:42:31Z,2019-03-28T18:09:12Z,CLOSED,False,10735,10540,112,https://github.com/ilammy,Automate C code formatting,13,[],https://github.com/cossacklabs/themis/pull/391,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/391#issuecomment-467959581,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format as this tool is generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
Then actually reformat the whole code base in accordance with the style. Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests.

This pull includes the formatting changes as well to ensure that the build is green. There is no point in reviewing the restyling commit itself, focus on the other ones.
Do not merge this pull request via GitHub interface, I'll do it manually to preserve the authorship information as I don't want to be credited for authoring half of this repository.
Closes #270","@Lagovas @secumod I have updated the PR to use the new approach to formatting. It is now uses Makefile targets to guide formatting and static checks. This enables nice progress and error reports.
The main targets are the same:

make fmt to fixup the code in working directory (for developers)
make fmt_check to check the formatting without changing the files (for CI)

Plus there is a new one:

make fmt_clean to cleanup marker files added during reformatting (to force reformatting again)

The formatting logic is placed into a new script scripts/fmt.sh which may be used as a standlone tool (e.g., from the IDE/editor).
We now also use clang-tidy tool to apply source-level fixups (e.g., inserting braces around one-line conditional statements). The ruleset is fairly minimal now but can be extended later.
I have also limited the changes in this PR to main source code of Soter and Themis. We'll update other places later when we settle on the code style.
This PR currently includes commits from #392 which are necessary for the tooling to work. They will be removed when #392 is merged into master.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,391,2019-02-25T18:39:18Z,2019-02-28T12:42:31Z,2019-03-28T18:09:12Z,CLOSED,False,10735,10540,112,https://github.com/ilammy,Automate C code formatting,13,[],https://github.com/cossacklabs/themis/pull/391,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/391#issuecomment-468246384,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format as this tool is generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
Then actually reformat the whole code base in accordance with the style. Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests.

This pull includes the formatting changes as well to ensure that the build is green. There is no point in reviewing the restyling commit itself, focus on the other ones.
Do not merge this pull request via GitHub interface, I'll do it manually to preserve the authorship information as I don't want to be credited for authoring half of this repository.
Closes #270","@secumod I've updated the PR, please give it a look.

Avoided repeating $(wildcard ...) all the time, now the files are mentioned only once.
Replaced the shell script with inline invocations of clang-format and clang-tidy.
Improved dependency tracking for fixups and checks which now can be performed independently.
Limited formatting invocations to only *.c and *.h files of Soter and Themis main code

I still don't quite like how we have to duplicate these lines:
$(OBJ_PATH)/%.fmt_fixup: $(SRC_PATH)/%
	@mkdir -p $(@D)
	@echo -n ""fixup $< ""
	@$(BUILD_CMD_)

$(OBJ_PATH)/%.fmt_check: $(SRC_PATH)/%
	@mkdir -p $(@D)
	@echo -n ""check $< ""
	@$(BUILD_CMD_)
However, I don't see how it can be avoided without doing some crazy macro stuff with $(call ...) and $(eval ...).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,391,2019-02-25T18:39:18Z,2019-02-28T12:42:31Z,2019-03-28T18:09:12Z,CLOSED,False,10735,10540,112,https://github.com/ilammy,Automate C code formatting,13,[],https://github.com/cossacklabs/themis/pull/391,https://github.com/ignatk,6,https://github.com/cossacklabs/themis/pull/391#issuecomment-468248418,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format as this tool is generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
Then actually reformat the whole code base in accordance with the style. Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests.

This pull includes the formatting changes as well to ensure that the build is green. There is no point in reviewing the restyling commit itself, focus on the other ones.
Do not merge this pull request via GitHub interface, I'll do it manually to preserve the authorship information as I don't want to be credited for authoring half of this repository.
Closes #270","I still don't quite like how we have to duplicate these lines

You think you duplicate, because you hide the difference by redefining the BUILD_CMD_ (the approach I don't really support TBH - feels like the shell script as well). Also it is a bit confusing, because this is not actually a build command, rather check/enforce/etc command",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,391,2019-02-25T18:39:18Z,2019-02-28T12:42:31Z,2019-03-28T18:09:12Z,CLOSED,False,10735,10540,112,https://github.com/ilammy,Automate C code formatting,13,[],https://github.com/cossacklabs/themis/pull/391,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/391#issuecomment-468252226,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format as this tool is generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
Then actually reformat the whole code base in accordance with the style. Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests.

This pull includes the formatting changes as well to ensure that the build is green. There is no point in reviewing the restyling commit itself, focus on the other ones.
Do not merge this pull request via GitHub interface, I'll do it manually to preserve the authorship information as I don't want to be credited for authoring half of this repository.
Closes #270","Well, even without BUILD_CMD this would be two separate targets:
$(OBJ_PATH)/%.fmt_fixup: $(SRC_PATH)/%
	@$(CLANG_TIDY) -fix $< -- $(CFLAGS) 2>/dev/null
	@$(CLANG_FORMAT) -i $<
	@touch $@

$(OBJ_PATH)/%.fmt_check: $(SRC_PATH)/%
	@$(CLANG_FORMAT) $< | diff -u $< -
	@$(CLANG_TIDY) $< -- $(CFLAGS) 2>/dev/null
	@touch $@
Though the reason for duplication will be more apparent in this case, as they really do different actions.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,391,2019-02-25T18:39:18Z,2019-02-28T12:42:31Z,2019-03-28T18:09:12Z,CLOSED,False,10735,10540,112,https://github.com/ilammy,Automate C code formatting,13,[],https://github.com/cossacklabs/themis/pull/391,https://github.com/Lagovas,8,https://github.com/cossacklabs/themis/pull/391#issuecomment-468253040,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format as this tool is generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
Then actually reformat the whole code base in accordance with the style. Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests.

This pull includes the formatting changes as well to ensure that the build is green. There is no point in reviewing the restyling commit itself, focus on the other ones.
Do not merge this pull request via GitHub interface, I'll do it manually to preserve the authorship information as I don't want to be credited for authoring half of this repository.
Closes #270","oh, @$(CLANG_FORMAT) $< | diff -u $< - looks like some dialect of brainfuck language )) I hope we always will have some guru of bash and makefiles that will understand all these code after several months ; )",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,391,2019-02-25T18:39:18Z,2019-02-28T12:42:31Z,2019-03-28T18:09:12Z,CLOSED,False,10735,10540,112,https://github.com/ilammy,Automate C code formatting,13,[],https://github.com/cossacklabs/themis/pull/391,https://github.com/ilammy,9,https://github.com/cossacklabs/themis/pull/391#issuecomment-468254063,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format as this tool is generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
Then actually reformat the whole code base in accordance with the style. Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests.

This pull includes the formatting changes as well to ensure that the build is green. There is no point in reviewing the restyling commit itself, focus on the other ones.
Do not merge this pull request via GitHub interface, I'll do it manually to preserve the authorship information as I don't want to be credited for authoring half of this repository.
Closes #270","Oh, even more targets as we should apply clang tools only to C files:
$(OBJ_PATH)/%.c.fmt_fixup: $(SRC_PATH)/%.c
	# fixup

$(OBJ_PATH)/%.h.fmt_fixup: $(SRC_PATH)/%.h
	# fixup

$(OBJ_PATH)/%.c.fmt_check: $(SRC_PATH)/%.c
	# check

$(OBJ_PATH)/%.h.fmt_check: $(SRC_PATH)/%.h
	# check
with fixup and check actions being exactly the same.
Plus we'll have to write the same lines for every other combination of source file and object-file... Though, I guess we can avoid this particular pain point by not reusing the object file hierarchy for checks and just mirroring the source file locations, using the rules like:
$(CHECK_PATH)/%.h.fmt_check: %.h
	# check C header

$(CHECK_PATH)/%.c.fmt_check: %.c
	# check C source
and generating targets like this:
-THEMIS_FMT_FIXUP = $(patsubst $(SRC_PATH)/%,$(OBJ_PATH)/%.fmt_fixup,$(THEMIS_FMT_SRC))
+THEMIS_FMT_FIXUP = $(patsubst %,$(CHECK_PATH)/%.fmt_fixup,$(THEMIS_FMT_SRC))",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,391,2019-02-25T18:39:18Z,2019-02-28T12:42:31Z,2019-03-28T18:09:12Z,CLOSED,False,10735,10540,112,https://github.com/ilammy,Automate C code formatting,13,[],https://github.com/cossacklabs/themis/pull/391,https://github.com/ilammy,10,https://github.com/cossacklabs/themis/pull/391#issuecomment-468258636,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format as this tool is generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
Then actually reformat the whole code base in accordance with the style. Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests.

This pull includes the formatting changes as well to ensure that the build is green. There is no point in reviewing the restyling commit itself, focus on the other ones.
Do not merge this pull request via GitHub interface, I'll do it manually to preserve the authorship information as I don't want to be credited for authoring half of this repository.
Closes #270",Anyway... This PR ended up being too complex to review. I have split it into three parts (as it should be done from the starts). They include all changes discussed here rebased on top of the current master branch.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,392,2019-02-26T16:30:45Z,2019-02-28T10:21:05Z,2019-02-28T10:57:33Z,MERGED,True,395,415,102,https://github.com/ilammy,Cleanup header includes,5,"['core', 'refactoring']",https://github.com/cossacklabs/themis/pull/392,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/392,"The main issue addressed by this PR are circular dependencies in header files. Many of them include umrella headers (<soter/soter.h>, <themis/themis.h>) which creates a circular dependency in other headers included from umrella headers. This prevents individual headers from compiled and analyzed separate by the tools. It also introduces hidden dependency on the inclusion order. To resolve issue avoid using umbrella headers in library code: include specific headers where necessary. Umbrella headers should be used only for the user code (and tests).
While we're here, do some cosmetic improvement as well:

unify include guard style to be <PROJECT>_<HEADER>_H everywhere
sort included headers alphabetically
group headers in the meaningful groups
use proper relative paths in headers
consistently use quotes ""soter/soter_rsa_key.h"" for internal inclusions
consistently use angle brackets <soter/soter.h> for public inclusions

These changes are inspired and rationalized by Google C++ Style Guide.","The main issue addressed by this PR are circular dependencies in header files. Many of them include umrella headers (<soter/soter.h>, <themis/themis.h>) which creates a circular dependency in other headers included from umrella headers. This prevents individual headers from compiled and analyzed separate by the tools. It also introduces hidden dependency on the inclusion order. To resolve issue avoid using umbrella headers in library code: include specific headers where necessary. Umbrella headers should be used only for the user code (and tests).
While we're here, do some cosmetic improvement as well:

unify include guard style to be <PROJECT>_<HEADER>_H everywhere
sort included headers alphabetically
group headers in the meaningful groups
use proper relative paths in headers
consistently use quotes ""soter/soter_rsa_key.h"" for internal inclusions
consistently use angle brackets <soter/soter.h> for public inclusions

These changes are inspired and rationalized by Google C++ Style Guide.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,392,2019-02-26T16:30:45Z,2019-02-28T10:21:05Z,2019-02-28T10:57:33Z,MERGED,True,395,415,102,https://github.com/ilammy,Cleanup header includes,5,"['core', 'refactoring']",https://github.com/cossacklabs/themis/pull/392,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/392#issuecomment-467647798,"The main issue addressed by this PR are circular dependencies in header files. Many of them include umrella headers (<soter/soter.h>, <themis/themis.h>) which creates a circular dependency in other headers included from umrella headers. This prevents individual headers from compiled and analyzed separate by the tools. It also introduces hidden dependency on the inclusion order. To resolve issue avoid using umbrella headers in library code: include specific headers where necessary. Umbrella headers should be used only for the user code (and tests).
While we're here, do some cosmetic improvement as well:

unify include guard style to be <PROJECT>_<HEADER>_H everywhere
sort included headers alphabetically
group headers in the meaningful groups
use proper relative paths in headers
consistently use quotes ""soter/soter_rsa_key.h"" for internal inclusions
consistently use angle brackets <soter/soter.h> for public inclusions

These changes are inspired and rationalized by Google C++ Style Guide.","1. Please do not change header structure! We spent a lot of time to make sure that some wrappers (like iOS one) export correct header structure (especially in ObjC++). Moreover I don’t see any real benefits from changing folders layout except “for the sake of style” one — we don’t expect many users to use core library as is, so beauty won’t be noticed, but compatibility problems might arise.

2. Please do not merge this PR until I confirm it’s working for iOS — @ilammy ping me when you’re done, I’ll fetch branch to check.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,392,2019-02-26T16:30:45Z,2019-02-28T10:21:05Z,2019-02-28T10:57:33Z,MERGED,True,395,415,102,https://github.com/ilammy,Cleanup header includes,5,"['core', 'refactoring']",https://github.com/cossacklabs/themis/pull/392,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/392#issuecomment-467760530,"The main issue addressed by this PR are circular dependencies in header files. Many of them include umrella headers (<soter/soter.h>, <themis/themis.h>) which creates a circular dependency in other headers included from umrella headers. This prevents individual headers from compiled and analyzed separate by the tools. It also introduces hidden dependency on the inclusion order. To resolve issue avoid using umbrella headers in library code: include specific headers where necessary. Umbrella headers should be used only for the user code (and tests).
While we're here, do some cosmetic improvement as well:

unify include guard style to be <PROJECT>_<HEADER>_H everywhere
sort included headers alphabetically
group headers in the meaningful groups
use proper relative paths in headers
consistently use quotes ""soter/soter_rsa_key.h"" for internal inclusions
consistently use angle brackets <soter/soter.h> for public inclusions

These changes are inspired and rationalized by Google C++ Style Guide.","@vixentael, understood. Thank you for the warning.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,392,2019-02-26T16:30:45Z,2019-02-28T10:21:05Z,2019-02-28T10:57:33Z,MERGED,True,395,415,102,https://github.com/ilammy,Cleanup header includes,5,"['core', 'refactoring']",https://github.com/cossacklabs/themis/pull/392,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/392#issuecomment-467786033,"The main issue addressed by this PR are circular dependencies in header files. Many of them include umrella headers (<soter/soter.h>, <themis/themis.h>) which creates a circular dependency in other headers included from umrella headers. This prevents individual headers from compiled and analyzed separate by the tools. It also introduces hidden dependency on the inclusion order. To resolve issue avoid using umbrella headers in library code: include specific headers where necessary. Umbrella headers should be used only for the user code (and tests).
While we're here, do some cosmetic improvement as well:

unify include guard style to be <PROJECT>_<HEADER>_H everywhere
sort included headers alphabetically
group headers in the meaningful groups
use proper relative paths in headers
consistently use quotes ""soter/soter_rsa_key.h"" for internal inclusions
consistently use angle brackets <soter/soter.h> for public inclusions

These changes are inspired and rationalized by Google C++ Style Guide.","@vixentael you can try checking the iOS wrapper now.
I've managed to see the tests pass locally and it seems to have used the correct source code for that, but I'm not really sure. Please check.
Now that I've interacted with iOS wrapper a bit I completely agree with you to not touch that fine-tuned header magic unless absolutely necessary. Though, it seems that we export too many headers for iOS, but I'm no expert, maybe we really need to do that because of reasons.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,392,2019-02-26T16:30:45Z,2019-02-28T10:21:05Z,2019-02-28T10:57:33Z,MERGED,True,395,415,102,https://github.com/ilammy,Cleanup header includes,5,"['core', 'refactoring']",https://github.com/cossacklabs/themis/pull/392,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/392#issuecomment-467943493,"The main issue addressed by this PR are circular dependencies in header files. Many of them include umrella headers (<soter/soter.h>, <themis/themis.h>) which creates a circular dependency in other headers included from umrella headers. This prevents individual headers from compiled and analyzed separate by the tools. It also introduces hidden dependency on the inclusion order. To resolve issue avoid using umbrella headers in library code: include specific headers where necessary. Umbrella headers should be used only for the user code (and tests).
While we're here, do some cosmetic improvement as well:

unify include guard style to be <PROJECT>_<HEADER>_H everywhere
sort included headers alphabetically
group headers in the meaningful groups
use proper relative paths in headers
consistently use quotes ""soter/soter_rsa_key.h"" for internal inclusions
consistently use angle brackets <soter/soter.h> for public inclusions

These changes are inspired and rationalized by Google C++ Style Guide.","@ilammy i've checked iOS wrapper – it's working fine.
If @Lagovas doesn't have any more comments – let's merge!
The reasoning behind my warning (lots of details inside) 
It's not a magic of any kind, it's more a fine-tuned Header Search Paths.
In podspec we precisely define what Themis core files and iOS wrapper files should be exported, what path should be preserved and what are public headers:
# don't use as independent target
so.subspec 'core' do |ss|
    ss.source_files = ""src/themis/*.{h,c}"", ""src/soter/*.{c,h}"", ""src/soter/ed25519/*.{c,h}"", ""src/soter/openssl/*.{c,h}""
    ss.header_mappings_dir = ""src""
    ss.header_dir = 'src'
    ss.preserve_paths = ""src/themis/*.h"", ""src/soter/*.h"", ""src/soter/ed25519/*.h"", ""src/soter/openssl/*.h""
    ss.public_header_files = ""src/themis/*.h"", ""src/soter/*.h"", ""src/soter/ed25519/*.h"", ""src/soter/openssl/*.h""
end

# don't use as independent target
so.subspec 'objcwrapper' do |ss|
    ss.header_mappings_dir = 'src/wrappers/themis/Obj-C/objcthemis'
    ss.source_files = ""src/wrappers/themis/Obj-C/objcthemis/*.{m,h}""
    ss.public_header_files = 'src/wrappers/themis/Obj-C/objcthemis/*.h'
    ss.header_dir = 'objcthemis'
    ss.dependency 'themis/themis-openssl/core'
end

This is how these headers in Themis pod.xcconfig looks like:
HEADER_SEARCH_PATHS = $(inherited) ""${PODS_ROOT}/Headers/Private"" ""${PODS_ROOT}/Headers/Private/themis"" ""${PODS_ROOT}/Headers/Public"" ""${PODS_ROOT}/Headers/Public/GRKOpenSSLFramework"" ""${PODS_ROOT}/Headers/Public/themis"" ""${PODS_ROOT}/themis/src"" ""${PODS_ROOT}/themis/src/wrappers/themis/Obj-C""

This is how they are transformed (notice a ""flat"" structure, without any folders):",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,393,2019-02-28T00:33:08Z,2019-02-28T13:40:13Z,2019-02-28T14:35:43Z,MERGED,True,287,245,17,https://github.com/vixentael,Update Themis iOS wrapper for new SecureMessage API (1 Part),3,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/393,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/393,"This is first PR of two to update SecureMessage Themis iOS wrapper for new SecureMessage API (#389).
Please check this PR by commits.


Update SecureMessage wrapper to call encrypt/decrypt and sign/verify core functions instead of wrap/unwrap. This change doesn't affect SecureMessage iOS wrapper API itself (users won't notice).


Add more logs for developers about wrong / missing private and public keys.


Fix formatting of the whole Themis iOS wrapper, because it drives me crazy – this commit is about updating style only.


--
In next PR (#394): more tests on SecureMessage iOS wrapper that depends on this PR","This is first PR of two to update SecureMessage Themis iOS wrapper for new SecureMessage API (#389).
Please check this PR by commits.


Update SecureMessage wrapper to call encrypt/decrypt and sign/verify core functions instead of wrap/unwrap. This change doesn't affect SecureMessage iOS wrapper API itself (users won't notice).


Add more logs for developers about wrong / missing private and public keys.


Fix formatting of the whole Themis iOS wrapper, because it drives me crazy – this commit is about updating style only.


--
In next PR (#394): more tests on SecureMessage iOS wrapper that depends on this PR",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,394,2019-02-28T00:36:01Z,2019-02-28T14:35:19Z,2019-02-28T14:35:24Z,MERGED,True,280,71,3,https://github.com/vixentael,Update tests for Themis iOS wrapper for new SecureMessage API,7,"['O-iOS :iphone:', 'tests']",https://github.com/cossacklabs/themis/pull/394,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/394,"This is a second PR for updating Themis iOS wrapper for new SecureMessage API (#389).
It contains updating Secure Message test project to include new checks.
It must be merged after merging PR #393 – then I'll relink example podspec to use code from master.","This is a second PR for updating Themis iOS wrapper for new SecureMessage API (#389).
It contains updating Secure Message test project to include new checks.
It must be merged after merging PR #393 – then I'll relink example podspec to use code from master.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,394,2019-02-28T00:36:01Z,2019-02-28T14:35:19Z,2019-02-28T14:35:24Z,MERGED,True,280,71,3,https://github.com/vixentael,Update tests for Themis iOS wrapper for new SecureMessage API,7,"['O-iOS :iphone:', 'tests']",https://github.com/cossacklabs/themis/pull/394,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/394#issuecomment-468288199,"This is a second PR for updating Themis iOS wrapper for new SecureMessage API (#389).
It contains updating Secure Message test project to include new checks.
It must be merged after merging PR #393 – then I'll relink example podspec to use code from master.","@ilammy thank you for pointing out copy-paste issues, fixed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,395,2019-02-28T12:38:12Z,2019-02-28T15:10:36Z,2019-03-28T18:09:13Z,MERGED,True,84,17,8,https://github.com/ilammy,Automate C code formatting [1/3],1,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/395,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/395,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format and clang-tidy tools as they are generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
clang-tidy requires the compilation flags so we integrate the format checking into the build pipeline. It's a bit repetetive, but also gives up a chance to cleanup the build system. And it uses Make features nicely so we don't have to recheck and reformat the files which are okay.
We start by formatting only Soter and Themis source code. Other parts will be added later.
Supersedes #391, relates to #270","Let's introduce an automatic code style formatting and checks for Themis. We use clang-format and clang-tidy tools as they are generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
clang-tidy requires the compilation flags so we integrate the format checking into the build pipeline. It's a bit repetetive, but also gives up a chance to cleanup the build system. And it uses Make features nicely so we don't have to recheck and reformat the files which are okay.
We start by formatting only Soter and Themis source code. Other parts will be added later.
Supersedes #391, relates to #270",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,395,2019-02-28T12:38:12Z,2019-02-28T15:10:36Z,2019-03-28T18:09:13Z,MERGED,True,84,17,8,https://github.com/ilammy,Automate C code formatting [1/3],1,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/395,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/395#issuecomment-468262496,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format and clang-tidy tools as they are generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
clang-tidy requires the compilation flags so we integrate the format checking into the build pipeline. It's a bit repetetive, but also gives up a chance to cleanup the build system. And it uses Make features nicely so we don't have to recheck and reformat the files which are okay.
We start by formatting only Soter and Themis source code. Other parts will be added later.
Supersedes #391, relates to #270","@Lagovas voiced some concerns about readability and maintainability of these cryptic command lines, so here's a translation from Perl to Human:
$(CLANG_TIDY) -fix $< -- $(CFLAGS) 2>/dev/null \
    && $(CLANG_FORMAT) -i $< \
    && touch $@
	
$(CLANG_FORMAT) $< | diff -u $< - \
    && $(CLANG_TIDY) $< -- $(CFLAGS) 2>/dev/null \
    && touch $@

First we replace the variables:

CLANG_FORMAT — normally a clang-format binary, but may be overridden (like CC env variable)
CLANG_TIDY — ditto for the clang-tidy binary
CFLAGS — whatever compilation flags for C code we use
$< — the source file that needs to be formatted
for example: src/themis/themis.h
$@ — marker file which tells Make that we have formatted the source
for example: build/obj/themis/themis.h.fmt_fixup

Some options that we use:

clang-format -i formats the file in-place, without this option the formatted file is printed to stdout
clang-tidy -fix applies the suggested fixes in-place, without this option the file is left unchanged (but the suggestions are still printed to stdout)

We silence the stderr of clang-tidy because it likes to print silly statistics there which we don't need, but it looks like an error even if the file is okay.
This spell:
clang-format some/file | diff -u some/file -
compares the original file with output of clang-format (formatted file) that is printed to stdout. The - argument means ""read from stdin"". -u enables unified diff output.
Finally, we touch a marker file to tell Make that the source file has been successfully processed. With that the formatting will not be made again on subsequent calls to make.
I hope this helped you, lost soul who came to this PR searching for wisdom of the ancients after looking into git blame.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,395,2019-02-28T12:38:12Z,2019-02-28T15:10:36Z,2019-03-28T18:09:13Z,MERGED,True,84,17,8,https://github.com/ilammy,Automate C code formatting [1/3],1,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/395,https://github.com/Lagovas,3,https://github.com/cossacklabs/themis/pull/395#issuecomment-468264567,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format and clang-tidy tools as they are generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
clang-tidy requires the compilation flags so we integrate the format checking into the build pipeline. It's a bit repetetive, but also gives up a chance to cleanup the build system. And it uses Make features nicely so we don't have to recheck and reformat the files which are okay.
We start by formatting only Soter and Themis source code. Other parts will be added later.
Supersedes #391, relates to #270",thanks for explanation : ),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,395,2019-02-28T12:38:12Z,2019-02-28T15:10:36Z,2019-03-28T18:09:13Z,MERGED,True,84,17,8,https://github.com/ilammy,Automate C code formatting [1/3],1,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/395,https://github.com/ignatk,4,https://github.com/cossacklabs/themis/pull/395#issuecomment-468284355,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format and clang-tidy tools as they are generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
clang-tidy requires the compilation flags so we integrate the format checking into the build pipeline. It's a bit repetetive, but also gives up a chance to cleanup the build system. And it uses Make features nicely so we don't have to recheck and reformat the files which are okay.
We start by formatting only Soter and Themis source code. Other parts will be added later.
Supersedes #391, relates to #270","let's drop [1/3] from the commit name (other commits would just say something like ""apply make fmt"")
you might want to add -q to the diff commands to not actually print the diff, just report the status
what is the point of marker files? In a typical workflow I can see devs doing some dev work (modifying the sources), then running make fmt (it will create the marker files), then the dev suddenly realises they made an error, so they modify the source again and run make fmt, but this time make fmt will not actually be executed, because the marker files are already there, which will confuse people - when they submit the PR, the CI will execute fmt_check on clean state, so may fail and the dev will be confused, because they ran make fmt before doing the PR.

In light of all this I would rather that these targets be ephemeral (without the marker files). Unless, you have some other use-case in mind",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,395,2019-02-28T12:38:12Z,2019-02-28T15:10:36Z,2019-03-28T18:09:13Z,MERGED,True,84,17,8,https://github.com/ilammy,Automate C code formatting [1/3],1,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/395,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/395#issuecomment-468292896,"Let's introduce an automatic code style formatting and checks for Themis. We use clang-format and clang-tidy tools as they are generally available and gives reasonable results.
Introduce two new targets for Makefile:

make fmt
make fmt_check

fmt is intended for humans to reformat the code before submitting changes for review. Currently it formats only C code but it may be extended to other languages as well.
fmt_check is intended for CI to do format checks to ensure that the code is formatted accordingly. Unfortunately, clang-format does not have a convenient check mode so we hack one with git diff.
clang-tidy requires the compilation flags so we integrate the format checking into the build pipeline. It's a bit repetetive, but also gives up a chance to cleanup the build system. And it uses Make features nicely so we don't have to recheck and reformat the files which are okay.
We start by formatting only Soter and Themis source code. Other parts will be added later.
Supersedes #391, relates to #270","let's drop [1/3] from the commit name

Rest assured, I'll rename the resulting commits when merging these branches.

you might want to add -q to the diff commands to not actually print the diff

I left the diff output so that when the check fails on the CI then the build logs will immediately tell the dev what's wrong with the code style. The same goes for the developer manually checking the code with make fmt_check: it's quite useful to be able to see the diff, not only a status code which tells that something somewhere is wrong.

what is the point of marker files?

First of all, they allow us to hook those custom CMDs for the BUILD_CMD macro. We need to have separate targets for various source files as they have to be formatted differently.
Then they allow us to avoid reformatting the files which were already formatted. Keep in mind that make tracks the modification time of the files, and the marker files are created after the source files have been changed by the formatting tools. Thus we avoid reformatting the files that were not changed since they were formatted right.
If you first run make fmt, then change fileA.c, then run make fmt again — only fileA.c will be reformatted. Other files will not be processed if they did not change.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,396,2019-02-28T12:39:17Z,2019-02-28T15:11:30Z,2019-03-28T18:09:14Z,MERGED,True,10249,10115,85,https://github.com/ilammy,Automate C code formatting [2/3],3,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/396,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/396,"Actually reformat the whole code base in accordance with the style.
Drop some commented out code that cause problems with formatting. clang-tidy and clang-format conflict in line-wrapping this part.
Supersedes #391, relates to #270","Actually reformat the whole code base in accordance with the style.
Drop some commented out code that cause problems with formatting. clang-tidy and clang-format conflict in line-wrapping this part.
Supersedes #391, relates to #270",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,396,2019-02-28T12:39:17Z,2019-02-28T15:11:30Z,2019-03-28T18:09:14Z,MERGED,True,10249,10115,85,https://github.com/ilammy,Automate C code formatting [2/3],3,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/396,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/396#issuecomment-468263391,"Actually reformat the whole code base in accordance with the style.
Drop some commented out code that cause problems with formatting. clang-tidy and clang-format conflict in line-wrapping this part.
Supersedes #391, relates to #270","oh, I think we need to do something like
find src \( -name ""*.h"" -o -name ""*.c"" -o -name ""*.cpp"" -o -name ""*.hpp"" \) -type f -exec cat {} \; | \
  tr -d ""[:space:]"" | \
  strings -1 | sha256sum > /tmp/sum1

for code in branch and for original code and then cmp them to be sure that there was changed only formatting ))
but it's not cover cases with changes one-lined if expressions that should be wrapped with braces *(",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,396,2019-02-28T12:39:17Z,2019-02-28T15:11:30Z,2019-03-28T18:09:14Z,MERGED,True,10249,10115,85,https://github.com/ilammy,Automate C code formatting [2/3],3,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/396,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/396#issuecomment-468268172,"Actually reformat the whole code base in accordance with the style.
Drop some commented out code that cause problems with formatting. clang-tidy and clang-format conflict in line-wrapping this part.
Supersedes #391, relates to #270","Well, yeah. This change is somewhat problematic to review and audit. What if I told you that I'd inserted a backdoor somewhere in those 20k lines?
It is possible to verify that the suggested changes come from the previously added formatting changes. Do this:
# On your machine, current dir is Themis repo root dir:
$ git checkout 29d365553d8f4a5e74b1194eb5dc339d1210ada4
$ docker run -it --rm -v $PWD:/projects cossacklabs/build:ubuntu-bionic

# In Docker container:
$ export CLANG_FORMAT=clang-format-7
$ export CLANG_TIDY=clang-tidy-7
$ make fmt ENGINE=boringssl
$ make fmt ENGINE=openssl
$ ^D

# Back to your machine, compare the result with this PR:
$ git diff 672c057eb36ff06acacf4467373eec3f9a77fb3f
Aside from in the build system (not included into this PR), you should only see changes in ""src/themis/secure_message_wrapper.h"" as I removed some commented out code that caused trouble with formatting.
Actually, there are some missing changes in OpenSSL sources...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,396,2019-02-28T12:39:17Z,2019-02-28T15:11:30Z,2019-03-28T18:09:14Z,MERGED,True,10249,10115,85,https://github.com/ilammy,Automate C code formatting [2/3],3,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/396,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/396#issuecomment-468269023,"Actually reformat the whole code base in accordance with the style.
Drop some commented out code that cause problems with formatting. clang-tidy and clang-format conflict in line-wrapping this part.
Supersedes #391, relates to #270","Then we can separately inspect the changes introduced by clang-tidy (it can change semantics) and then the changes by clang-format (which should change only the formatting). However, inspecting the formatting changes would not be as straightforward as ignoring all whitespace because it may relocate braces between lines, break overlong lines, etc.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,396,2019-02-28T12:39:17Z,2019-02-28T15:11:30Z,2019-03-28T18:09:14Z,MERGED,True,10249,10115,85,https://github.com/ilammy,Automate C code formatting [2/3],3,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/396,https://github.com/Lagovas,5,https://github.com/cossacklabs/themis/pull/396#issuecomment-468270765,"Actually reformat the whole code base in accordance with the style.
Drop some commented out code that cause problems with formatting. clang-tidy and clang-format conflict in line-wrapping this part.
Supersedes #391, relates to #270","What if I told you that I'd inserted a backdoor somewhere in those 20k lines?
huh, not only you can do this, clang-[tidy|format] can do it too.  by replacing some >= -> < or != 0 -> == 0. but it should be checked by tests as general (if they weren't updated with same tools too : )",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,396,2019-02-28T12:39:17Z,2019-02-28T15:11:30Z,2019-03-28T18:09:14Z,MERGED,True,10249,10115,85,https://github.com/ilammy,Automate C code formatting [2/3],3,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/396,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/396#issuecomment-468272150,"Actually reformat the whole code base in accordance with the style.
Drop some commented out code that cause problems with formatting. clang-tidy and clang-format conflict in line-wrapping this part.
Supersedes #391, relates to #270","Well, yeah, that's assuming that we do trust the tools. They come from Debian repositories so I guess we can rule out blatant malicious behavior as someone on the Internet should have noticed that. We can also rule out blatantly erroneous semantic changes as that should be checked by the tests. But this does not account for some tricky vulnerability which may be inserted by replacing < with <=, or == with =.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,396,2019-02-28T12:39:17Z,2019-02-28T15:11:30Z,2019-03-28T18:09:14Z,MERGED,True,10249,10115,85,https://github.com/ilammy,Automate C code formatting [2/3],3,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/396,https://github.com/ignatk,7,https://github.com/cossacklabs/themis/pull/396#issuecomment-468285634,"Actually reformat the whole code base in accordance with the style.
Drop some commented out code that cause problems with formatting. clang-tidy and clang-format conflict in line-wrapping this part.
Supersedes #391, relates to #270","Let's have descriptive commit header/message, like ""apply make fmt""",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,396,2019-02-28T12:39:17Z,2019-02-28T15:11:30Z,2019-03-28T18:09:14Z,MERGED,True,10249,10115,85,https://github.com/ilammy,Automate C code formatting [2/3],3,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/396,https://github.com/ilammy,8,https://github.com/cossacklabs/themis/pull/396#issuecomment-468304183,"Actually reformat the whole code base in accordance with the style.
Drop some commented out code that cause problems with formatting. clang-tidy and clang-format conflict in line-wrapping this part.
Supersedes #391, relates to #270","If that makes it any easier I have separated the changes into three individual commits: dropping a problematic code part, applying semantic fixes followed by the style fixes.
I have tried comparing without whitespace but clang-format introduces non-whitespace changes as well by adjusting the comments and stuff.
So I guess you'll just have to trust me and the tools. You can still verify that the changes are made by the tools using the process described above. Though I guess it would be better to use an exact Docker image hash. But I don't know for how long DockerHub stores these so there's no guarantee that this commit will be validatable in five years from now.

My docker inspect output
$ docker inspect cossacklabs/build:ubuntu-bionic
[
    {
        ""Id"": ""sha256:0371c8d5befb068a130fbecc261e4991052f858c19bbd89b0850ce9066e72a04"",
        ""RepoTags"": [
            ""cossacklabs/build:ubuntu-bionic""
        ],
        ""RepoDigests"": [
            ""cossacklabs/build@sha256:8a83dc3916a9f6b56496982bde255cd530c09fe1ae2842b5a59b72f1bf0a5983""
        ],
        ""Parent"": ""sha256:593a29058f2f22607d0bf194c1053bbe98ceb09a65a2d807a6a68e51ba41724b"",
        ""Comment"": """",
        ""Created"": ""2019-02-27T18:25:49.8226009Z"",
        ""Container"": ""702727bd86feb489348117614616297ac4371ca3e47bc87d37b41975471010ce"",
        ""ContainerConfig"": {
            ""Hostname"": ""702727bd86fe"",
            ""Domainname"": """",
            ""User"": ""user"",
            ""AttachStdin"": false,
            ""AttachStdout"": false,
            ""AttachStderr"": false,
            ""Tty"": false,
            ""OpenStdin"": false,
            ""StdinOnce"": false,
            ""Env"": [
                ""PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin""
            ],
            ""Cmd"": [
                ""/bin/sh"",
                ""-c"",
                ""#(nop) WORKDIR /projects""
            ],
            ""ArgsEscaped"": true,
            ""Image"": ""sha256:593a29058f2f22607d0bf194c1053bbe98ceb09a65a2d807a6a68e51ba41724b"",
            ""Volumes"": null,
            ""WorkingDir"": ""/projects"",
            ""Entrypoint"": null,
            ""OnBuild"": null,
            ""Labels"": {}
        },
        ""DockerVersion"": ""18.09.1"",
        ""Author"": """",
        ""Config"": {
            ""Hostname"": """",
            ""Domainname"": """",
            ""User"": ""user"",
            ""AttachStdin"": false,
            ""AttachStdout"": false,
            ""AttachStderr"": false,
            ""Tty"": false,
            ""OpenStdin"": false,
            ""StdinOnce"": false,
            ""Env"": [
                ""PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin""
            ],
            ""Cmd"": [
                ""/bin/bash""
            ],
            ""ArgsEscaped"": true,
            ""Image"": ""sha256:593a29058f2f22607d0bf194c1053bbe98ceb09a65a2d807a6a68e51ba41724b"",
            ""Volumes"": null,
            ""WorkingDir"": ""/projects"",
            ""Entrypoint"": null,
            ""OnBuild"": null,
            ""Labels"": null
        },
        ""Architecture"": ""amd64"",
        ""Os"": ""linux"",
        ""Size"": 1412072723,
        ""VirtualSize"": 1412072723,
        ""GraphDriver"": {
            ""Data"": {
                ""LowerDir"": ""/var/lib/docker/overlay2/480fe7b0508b1c57bb84b9d1c0dc6245f652ad5e9e4dca5e54145bd9fa1c1e7c/diff:/var/lib/docker/overlay2/efb1512a851d64105a27eb4b3a2078bfaddb71ba8fc79b65e058f14fd90b8bb8/diff:/var/lib/docker/overlay2/16a8820f0ba9c2a746dd9d4a2bac7f428df1a40c34c8a05a846c31ec8ed4aeb2/diff:/var/lib/docker/overlay2/c1ffba20384572d8e11f34dc0d4168cfbf1d98f949e00af37c5a936378efd535/diff:/var/lib/docker/overlay2/9d9cbe48e474638e90526cad2382d5be9aeb656106813d64f1fc6a5d74bd30f5/diff"",
                ""MergedDir"": ""/var/lib/docker/overlay2/af184e3ad564e24f1e4a5e8c13a32018ac82856a11a4f518aaf79245856f6abb/merged"",
                ""UpperDir"": ""/var/lib/docker/overlay2/af184e3ad564e24f1e4a5e8c13a32018ac82856a11a4f518aaf79245856f6abb/diff"",
                ""WorkDir"": ""/var/lib/docker/overlay2/af184e3ad564e24f1e4a5e8c13a32018ac82856a11a4f518aaf79245856f6abb/work""
            },
            ""Name"": ""overlay2""
        },
        ""RootFS"": {
            ""Type"": ""layers"",
            ""Layers"": [
                ""sha256:bebe7ce6215aee349bee5d67222abeb5c5a834bbeaa2f2f5d05363d9fd68db41"",
                ""sha256:283fb404ea9415ab48456fd8a82b153b1a719491cdf7b806d1853b047d00f27f"",
                ""sha256:663e8522d78b5b767f15b2e43885da5975068e3195bbbfa8fc3a082297a361c1"",
                ""sha256:4b7d93055d8781d27259ba5780938e6a78d8ef691c94ee9abc3616c1b009ec4a"",
                ""sha256:052e844a7399860ca6a5aceea82a061580e4234737ba290849ecf2d71ff4419e"",
                ""sha256:2f6f406a892efe4e01d55324b6700483ee56ff19970c0e50dab25e0e6b65b0e4""
            ]
        },
        ""Metadata"": {
            ""LastTagTime"": ""2019-02-27T18:33:29.0245756Z""
        }
    }
]",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,397,2019-02-28T12:40:35Z,2019-02-28T15:44:35Z,2019-03-28T18:09:15Z,MERGED,True,14,0,1,https://github.com/ilammy,Automate C code formatting [3/3],2,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/397,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/397,"Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests. We also check both flavors as they use different Soter sources.
Supersedes #391, resolves #270","Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests. We also check both flavors as they use different Soter sources.
Supersedes #391, resolves #270",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,397,2019-02-28T12:40:35Z,2019-02-28T15:44:35Z,2019-03-28T18:09:15Z,MERGED,True,14,0,1,https://github.com/ilammy,Automate C code formatting [3/3],2,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/397,https://github.com/ignatk,2,https://github.com/cossacklabs/themis/pull/397#issuecomment-468286498,"Enforce the new code style during CI builds. We use a separate job so that style errors are reported separately from failed tests. We also check both flavors as they use different Soter sources.
Supersedes #391, resolves #270","Let's have descriptive commit header/message, like ""enable code format checks on CI""",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,398,2019-02-28T15:42:59Z,2019-02-28T17:18:34Z,2019-07-26T13:58:18Z,MERGED,True,2,4,1,https://github.com/ilammy,Fix a warning about memory leak in Secure Message,1,['core'],https://github.com/cossacklabs/themis/pull/398,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/398,"clang-tidy is being cautious about allocations. Calm it down by freeing the allocated context if we're going to return NULL.
This actually cannot happen because we check the key type earlier and return before allocating a crypto context. However, clang-tidy is not that smart to see through five layers or preprocessor macros. I'd bet that developers aren't that smart either.","clang-tidy is being cautious about allocations. Calm it down by freeing the allocated context if we're going to return NULL.
This actually cannot happen because we check the key type earlier and return before allocating a crypto context. However, clang-tidy is not that smart to see through five layers or preprocessor macros. I'd bet that developers aren't that smart either.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,398,2019-02-28T15:42:59Z,2019-02-28T17:18:34Z,2019-07-26T13:58:18Z,MERGED,True,2,4,1,https://github.com/ilammy,Fix a warning about memory leak in Secure Message,1,['core'],https://github.com/cossacklabs/themis/pull/398,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/398#issuecomment-468499946,"clang-tidy is being cautious about allocations. Calm it down by freeing the allocated context if we're going to return NULL.
This actually cannot happen because we check the key type earlier and return before allocating a crypto context. However, clang-tidy is not that smart to see through five layers or preprocessor macros. I'd bet that developers aren't that smart either.",👍,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,399,2019-02-28T17:15:33Z,2019-03-02T21:02:05Z,2019-03-28T18:09:34Z,MERGED,True,4864,4200,21,https://github.com/ilammy,Enforce C formatting in Soter and Themis tests,2,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/399,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/399,"Reformat the tests in accordance with the code style.
The code looks unreadable in some places, but meh... We use way too many long_and_detailed_multi_word_identifiers as well as test macros which effectively require to write code in a single line.
I'd suggest us to just deal with it (⌐■ _■) Let's leave this code as is now. For new code we can make an effort to keep it readable with the new formatting rules. Older code can be refactored to be more readable when we actually change it.","Reformat the tests in accordance with the code style.
The code looks unreadable in some places, but meh... We use way too many long_and_detailed_multi_word_identifiers as well as test macros which effectively require to write code in a single line.
I'd suggest us to just deal with it (⌐■ _■) Let's leave this code as is now. For new code we can make an effort to keep it readable with the new formatting rules. Older code can be refactored to be more readable when we actually change it.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,399,2019-02-28T17:15:33Z,2019-03-02T21:02:05Z,2019-03-28T18:09:34Z,MERGED,True,4864,4200,21,https://github.com/ilammy,Enforce C formatting in Soter and Themis tests,2,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/399,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/399#issuecomment-468505814,"Reformat the tests in accordance with the code style.
The code looks unreadable in some places, but meh... We use way too many long_and_detailed_multi_word_identifiers as well as test macros which effectively require to write code in a single line.
I'd suggest us to just deal with it (⌐■ _■) Let's leave this code as is now. For new code we can make an effort to keep it readable with the new formatting rules. Older code can be refactored to be more readable when we actually change it.","Uh oh, it's really complicated to read
    testsuite_fail_unless(SOTER_INVALID_PARAMETER ==
                              soter_asym_cipher_init(&ctx, key_data, key_data_length,
                                                     (soter_asym_cipher_padding_t)0xffffffff),
                          ""soter_asym_cipher_init: invalid algorithm type"");",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,399,2019-02-28T17:15:33Z,2019-03-02T21:02:05Z,2019-03-28T18:09:34Z,MERGED,True,4864,4200,21,https://github.com/ilammy,Enforce C formatting in Soter and Themis tests,2,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/399,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/399#issuecomment-468628521,"Reformat the tests in accordance with the code style.
The code looks unreadable in some places, but meh... We use way too many long_and_detailed_multi_word_identifiers as well as test macros which effectively require to write code in a single line.
I'd suggest us to just deal with it (⌐■ _■) Let's leave this code as is now. For new code we can make an effort to keep it readable with the new formatting rules. Older code can be refactored to be more readable when we actually change it.","@vixentael

Uh oh, it's really complicated to read

This should be easier to understand but it requires a bit more changes and cannot be automated:
    result = soter_asym_cipher_init(&ctx, key_data, key_data_length, PADDING);
    testsuite_fail_unless(result == SOTER_INVALID_PARAMETER,
                          ""soter_asym_cipher_init: invalid algorithm type"");",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,399,2019-02-28T17:15:33Z,2019-03-02T21:02:05Z,2019-03-28T18:09:34Z,MERGED,True,4864,4200,21,https://github.com/ilammy,Enforce C formatting in Soter and Themis tests,2,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/399,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/399#issuecomment-468661398,"Reformat the tests in accordance with the code style.
The code looks unreadable in some places, but meh... We use way too many long_and_detailed_multi_word_identifiers as well as test macros which effectively require to write code in a single line.
I'd suggest us to just deal with it (⌐■ _■) Let's leave this code as is now. For new code we can make an effort to keep it readable with the new formatting rules. Older code can be refactored to be more readable when we actually change it.","it requires a bit more changes and cannot be automated

ok-ok, i'm just complaining",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,399,2019-02-28T17:15:33Z,2019-03-02T21:02:05Z,2019-03-28T18:09:34Z,MERGED,True,4864,4200,21,https://github.com/ilammy,Enforce C formatting in Soter and Themis tests,2,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/399,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/399#issuecomment-468663505,"Reformat the tests in accordance with the code style.
The code looks unreadable in some places, but meh... We use way too many long_and_detailed_multi_word_identifiers as well as test macros which effectively require to write code in a single line.
I'd suggest us to just deal with it (⌐■ _■) Let's leave this code as is now. For new code we can make an effort to keep it readable with the new formatting rules. Older code can be refactored to be more readable when we actually change it.","it requires a bit more changes and cannot be automated

ok-ok, i'm just complaining

I'm very much triggered by the readability as well so I guess I'll be slowly fixing it up function by function when I need to actually change the files. It's not like I experience a physical pain in the eyes by looking at it, but the moral suffering from not being able to configure the formatter for beau-ti-ful code and having to look at this instead is still there.
Or maybe some day I'll discover that magical set of clang-format keys which makes the code readable out of the box (and we'll see yet another formatting-only commits).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,399,2019-02-28T17:15:33Z,2019-03-02T21:02:05Z,2019-03-28T18:09:34Z,MERGED,True,4864,4200,21,https://github.com/ilammy,Enforce C formatting in Soter and Themis tests,2,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/399,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/399#issuecomment-468959935,"Reformat the tests in accordance with the code style.
The code looks unreadable in some places, but meh... We use way too many long_and_detailed_multi_word_identifiers as well as test macros which effectively require to write code in a single line.
I'd suggest us to just deal with it (⌐■ _■) Let's leave this code as is now. For new code we can make an effort to keep it readable with the new formatting rules. Older code can be refactored to be more readable when we actually change it.","The checks did not pass because of a failure in Rust tests (again), but I've merged this PR regardless. I've seen this failure before and have a hunch about why it happens. Though, no solution yet.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,400,2019-03-01T14:00:39Z,2019-03-03T12:51:57Z,2019-03-28T18:09:19Z,MERGED,True,65,33,2,https://github.com/ilammy,Use new Secure Message API in GoThemis,3,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/400,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/400,"Exactly what it says on the tin. Get rid of the deprecation warnings and use the new API from #389 instead. It's hard to use proper enums in Go-to-C interop so just use integer constants, that's good enough.
Keep the old API naming for now. We'll update it later.
Also, include correct header for keygen. Key generation functions are now exported by <themis/secure_keygen.h>, not <themis/secure_message.h>. Include the correct header if we do not want to use <themis/themis.h>.","Exactly what it says on the tin. Get rid of the deprecation warnings and use the new API from #389 instead. It's hard to use proper enums in Go-to-C interop so just use integer constants, that's good enough.
Keep the old API naming for now. We'll update it later.
Also, include correct header for keygen. Key generation functions are now exported by <themis/secure_keygen.h>, not <themis/secure_message.h>. Include the correct header if we do not want to use <themis/themis.h>.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,401,2019-03-01T14:35:21Z,2019-03-04T17:28:49Z,2019-03-28T18:09:18Z,MERGED,True,78,23,2,https://github.com/ilammy, Use new Secure Message API in PyThemis,3,['W-PyThemis :snake:'],https://github.com/cossacklabs/themis/pull/401,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/401,"Straightforward changes to use new C API of Secure Message. We just need to call different functions and that's it.
Keep Python method naming the same, we'll update it later separately.
Previous implementation allowed to (ab)use SecureMessage class in sign/verify mode by not specifying one of the keys. It is not possible now since we're using the new C API. Now we require both public and private key to be specified at Secure Message construction.
Update the tests to verify the new requirement and add more error checking to constructor to ensure that both keys are provided and that they have correct kinds.","Straightforward changes to use new C API of Secure Message. We just need to call different functions and that's it.
Keep Python method naming the same, we'll update it later separately.
Previous implementation allowed to (ab)use SecureMessage class in sign/verify mode by not specifying one of the keys. It is not possible now since we're using the new C API. Now we require both public and private key to be specified at Secure Message construction.
Update the tests to verify the new requirement and add more error checking to constructor to ensure that both keys are provided and that they have correct kinds.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,402,2019-03-01T23:13:16Z,2019-03-04T17:29:09Z,2019-03-28T18:09:32Z,MERGED,True,97,25,2,https://github.com/ilammy, Use new Secure Message API in RubyThemis,3,['W-RbThemis :diamonds:'],https://github.com/cossacklabs/themis/pull/402,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/402,"It's easy to use the new API even if I don't know Ruby, just ""attach"" the new functions instead of the old ones and use them.
Just like with other language wrappers, improve key validation in Secure Message: perform early checks of private and public key and signal the user if there's anything wrong with them.","It's easy to use the new API even if I don't know Ruby, just ""attach"" the new functions instead of the old ones and use them.
Just like with other language wrappers, improve key validation in Secure Message: perform early checks of private and public key and signal the user if there's anything wrong with them.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,402,2019-03-01T23:13:16Z,2019-03-04T17:29:09Z,2019-03-28T18:09:32Z,MERGED,True,97,25,2,https://github.com/ilammy, Use new Secure Message API in RubyThemis,3,['W-RbThemis :diamonds:'],https://github.com/cossacklabs/themis/pull/402,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/402#issuecomment-468844372,"It's easy to use the new API even if I don't know Ruby, just ""attach"" the new functions instead of the old ones and use them.
Just like with other language wrappers, improve key validation in Secure Message: perform early checks of private and public key and signal the user if there's anything wrong with them.","@shadinua I'd like you to take a look at this since I don't actually know Ruby, I just kept hitting the keyboard until the tests passed.
For example, I don't really understand why the 'module methods' have to be defined that way for it to work and why the constants from ThemisImports are not visible when the module seems to be 'imported' and the functions are visible. I'm also concerned about visibility of the new key checking methods, they might have been unintentionally exported for the users.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,403,2019-03-01T23:34:41Z,2019-03-01T23:47:10Z,2019-03-28T18:09:10Z,MERGED,True,0,2,2,https://github.com/ilammy,"Remove ""cargo deadlinks"" check",1,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/403,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/403,"I have found this tool not that useful in preventing mistakes in API documentation, but it adds quite a considerable chunk to the build time of a development environment. I don't really want developers to wait 5-15 minutes to download and build all the dependencies just to have a check which passes 99.9999% of time.
We may reconsider this decision later if we actually run into issues with dead links in API docs.","I have found this tool not that useful in preventing mistakes in API documentation, but it adds quite a considerable chunk to the build time of a development environment. I don't really want developers to wait 5-15 minutes to download and build all the dependencies just to have a check which passes 99.9999% of time.
We may reconsider this decision later if we actually run into issues with dead links in API docs.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,404,2019-03-02T14:00:05Z,2019-03-02T21:36:08Z,2019-03-28T18:09:33Z,MERGED,True,1003,779,10,https://github.com/ilammy,Enforce C++ formatting for ThemisPP,2,['W-ThemisPP :crossed_swords:'],https://github.com/cossacklabs/themis/pull/404,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/404,"Add ThemisPP headers to formatting. ThemisPP is header-only so we don't need to compile it for real.
We use a custom style for C++ with a bit longer line lengths than for C code elsewhere. Unfortunately, clang-format does not seem to support format file inheritance so we cannot reuse the top-level format file.
Use the new format for ThemisPP and apply some manual fixes in include order and add some empty lines.","Add ThemisPP headers to formatting. ThemisPP is header-only so we don't need to compile it for real.
We use a custom style for C++ with a bit longer line lengths than for C code elsewhere. Unfortunately, clang-format does not seem to support format file inheritance so we cannot reuse the top-level format file.
Use the new format for ThemisPP and apply some manual fixes in include order and add some empty lines.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,405,2019-03-02T21:39:27Z,2019-03-04T10:45:48Z,2019-03-04T10:45:55Z,MERGED,True,4,1,1,https://github.com/ilammy,Run Rust tests in a single thread,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/405,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/405,"Occasionally I see Rust tests fail on CI when calling keygen functions like themis_gen_ec_key_pair(). This is only possible when the crypto backend fails for unexplainable reasons.
I suspect these failures to be caused by OpenSSL insanity: older versions of this ${expletive} library — and we do use OpenSSL 1.0.2f on CircleCI currently — require global initialization of locking callbacks in order for OpenSSL to operate correctly.
Unfortunately, Rust testing framework does not support any form of global setup-teardown so we cannot run any custom code in main() before the tests. I also do not want to use custom macros for tests or insert function calls in each and every one of them. We also cannot initialize OpenSSL in Themis because that's not its job.
Therefore, I give up and simply run all the tests in single-threaded mode. This should fix those occasional failures, I hope🤞","Occasionally I see Rust tests fail on CI when calling keygen functions like themis_gen_ec_key_pair(). This is only possible when the crypto backend fails for unexplainable reasons.
I suspect these failures to be caused by OpenSSL insanity: older versions of this ${expletive} library — and we do use OpenSSL 1.0.2f on CircleCI currently — require global initialization of locking callbacks in order for OpenSSL to operate correctly.
Unfortunately, Rust testing framework does not support any form of global setup-teardown so we cannot run any custom code in main() before the tests. I also do not want to use custom macros for tests or insert function calls in each and every one of them. We also cannot initialize OpenSSL in Themis because that's not its job.
Therefore, I give up and simply run all the tests in single-threaded mode. This should fix those occasional failures, I hope🤞",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,405,2019-03-02T21:39:27Z,2019-03-04T10:45:48Z,2019-03-04T10:45:55Z,MERGED,True,4,1,1,https://github.com/ilammy,Run Rust tests in a single thread,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/405,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/405#issuecomment-469174757,"Occasionally I see Rust tests fail on CI when calling keygen functions like themis_gen_ec_key_pair(). This is only possible when the crypto backend fails for unexplainable reasons.
I suspect these failures to be caused by OpenSSL insanity: older versions of this ${expletive} library — and we do use OpenSSL 1.0.2f on CircleCI currently — require global initialization of locking callbacks in order for OpenSSL to operate correctly.
Unfortunately, Rust testing framework does not support any form of global setup-teardown so we cannot run any custom code in main() before the tests. I also do not want to use custom macros for tests or insert function calls in each and every one of them. We also cannot initialize OpenSSL in Themis because that's not its job.
Therefore, I give up and simply run all the tests in single-threaded mode. This should fix those occasional failures, I hope🤞",maybe it should be explained in docs for rustthemis users that they should be aware about this?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,405,2019-03-02T21:39:27Z,2019-03-04T10:45:48Z,2019-03-04T10:45:55Z,MERGED,True,4,1,1,https://github.com/ilammy,Run Rust tests in a single thread,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/405,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/405#issuecomment-469206720,"Occasionally I see Rust tests fail on CI when calling keygen functions like themis_gen_ec_key_pair(). This is only possible when the crypto backend fails for unexplainable reasons.
I suspect these failures to be caused by OpenSSL insanity: older versions of this ${expletive} library — and we do use OpenSSL 1.0.2f on CircleCI currently — require global initialization of locking callbacks in order for OpenSSL to operate correctly.
Unfortunately, Rust testing framework does not support any form of global setup-teardown so we cannot run any custom code in main() before the tests. I also do not want to use custom macros for tests or insert function calls in each and every one of them. We also cannot initialize OpenSSL in Themis because that's not its job.
Therefore, I give up and simply run all the tests in single-threaded mode. This should fix those occasional failures, I hope🤞","maybe it should be explained in docs for rustthemis users that they should be aware about this?

The OpenSSL + multithreading issue is not specific to RustThemis. It's just that Rust tests manage to trigger it accidentally. Our other tests are all single-threaded.
And this issue is not limited to tests, it's actual for production environment as well: if OpenSSL 1.0.2 is used in multithreaded application without proper locking setup and synchronization then Themis functions can fail randomly.
I plan to write a passage about it in general Themis documentation on Wiki. Though, I don't know how effective that would be in preventing such failures in the first place.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,407,2019-03-04T10:57:18Z,2019-03-04T12:18:49Z,2020-11-11T22:01:27Z,MERGED,True,220,209,13,https://github.com/vixentael,Update bitcode setting in Themis.podspec [iOS],2,"['O-iOS :iphone:', 'installation', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/407,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/407,"Previous version of bitcode setting had significant downside: can't compile on device 🤦‍♀️

 updated podspec and pushed it.
 updated connected examples.
 tested on device.

Will close #406 when merged","Previous version of bitcode setting had significant downside: can't compile on device 🤦‍♀️

 updated podspec and pushed it.
 updated connected examples.
 tested on device.

Will close #406 when merged",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,407,2019-03-04T10:57:18Z,2019-03-04T12:18:49Z,2020-11-11T22:01:27Z,MERGED,True,220,209,13,https://github.com/vixentael,Update bitcode setting in Themis.podspec [iOS],2,"['O-iOS :iphone:', 'installation', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/407,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/407#issuecomment-469232663,"Previous version of bitcode setting had significant downside: can't compile on device 🤦‍♀️

 updated podspec and pushed it.
 updated connected examples.
 tested on device.

Will close #406 when merged",I wish we have autotests that run on real devices 😿,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,408,2019-03-04T11:26:35Z,2019-03-04T17:28:11Z,2019-07-26T13:58:28Z,MERGED,True,9,6,1,https://github.com/ilammy,Fix Secure Cell corruption tests on i386,2,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/408,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/408,It turned out that current tests do not work on i386 architecture (32-bit x86). This is because we try allocating ~0xDEADBEEF bytes which is not possible in 32-bit userland that typically has a limit of 2 or 3 GB of user memory. The constant we use does not really matter but should be distinct enough. Use something smaller instead.,It turned out that current tests do not work on i386 architecture (32-bit x86). This is because we try allocating ~0xDEADBEEF bytes which is not possible in 32-bit userland that typically has a limit of 2 or 3 GB of user memory. The constant we use does not really matter but should be distinct enough. Use something smaller instead.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,408,2019-03-04T11:26:35Z,2019-03-04T17:28:11Z,2019-07-26T13:58:28Z,MERGED,True,9,6,1,https://github.com/ilammy,Fix Secure Cell corruption tests on i386,2,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/408,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/408#issuecomment-469223816,It turned out that current tests do not work on i386 architecture (32-bit x86). This is because we try allocating ~0xDEADBEEF bytes which is not possible in 32-bit userland that typically has a limit of 2 or 3 GB of user memory. The constant we use does not really matter but should be distinct enough. Use something smaller instead.,copy-paste 6 times one value not good. what about to declare it as #define (to change in one place next time : ) and add a comment why we chose this value,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,408,2019-03-04T11:26:35Z,2019-03-04T17:28:11Z,2019-07-26T13:58:28Z,MERGED,True,9,6,1,https://github.com/ilammy,Fix Secure Cell corruption tests on i386,2,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/408,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/408#issuecomment-469230004,It turned out that current tests do not work on i386 architecture (32-bit x86). This is because we try allocating ~0xDEADBEEF bytes which is not possible in 32-bit userland that typically has a limit of 2 or 3 GB of user memory. The constant we use does not really matter but should be distinct enough. Use something smaller instead.,"It's not the 'same' value so I think we don't need to have a named constant for it. It just happens to be the same in all these places because I'm too lazy to invent different values for each test, but they work fine with different values. These are really arbitrary values (well, as long as they are less that 231).
My preference for tests is to keep individual tests independent of each other, allow some redundancy and avoid abstraction unless it improves readability, especially for test inputs and outputs. For example, when testing encryption I'd rather see ""message"" directly as plaintext rather than some plaintext constant of some type defined elsewhere. However, if we need to use the same value in several tests then it makes sense to define it as a constant. Similarly, encryption keys are big and it's more readable to use constants rather than insert them directly.
That's why I'm not cringing at what looks like blatant violation of DRY principle here. I don't remember where exactly I picked this up, but this post summarizes its nicely.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,408,2019-03-04T11:26:35Z,2019-03-04T17:28:11Z,2019-07-26T13:58:28Z,MERGED,True,9,6,1,https://github.com/ilammy,Fix Secure Cell corruption tests on i386,2,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/408,https://github.com/Lagovas,4,https://github.com/cossacklabs/themis/pull/408#issuecomment-469237329,It turned out that current tests do not work on i386 architecture (32-bit x86). This is because we try allocating ~0xDEADBEEF bytes which is not possible in 32-bit userland that typically has a limit of 2 or 3 GB of user memory. The constant we use does not really matter but should be distinct enough. Use something smaller instead.,"my suggest to use one #define has one more goal: avoid using magic numbers like 0xDEADBEEF/0x1337BEEF because everytime I see them I ask myself: ""why these values, not 0xAAAAAAAA or 0xDDDDDDDD?
Tests don't depends on some specific values. So no matter to use same value or different in each test. So why not to use one with some readable name such some_big_32bit_value_for_alloc or add some comment for constant that will explain that this constant should be used in context where we check allocation with big memory requirement? or abstract it in some method like get_random_int which will explain that here we don't need any specific value",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,410,2019-03-04T18:07:37Z,2019-03-07T14:55:04Z,2019-03-07T14:55:08Z,MERGED,True,663,535,7,https://github.com/forelocked-beobachter,Formatting: automatic formatting for ThemisPP tests,5,['W-ThemisPP :crossed_swords:'],https://github.com/cossacklabs/themis/pull/410,https://github.com/forelocked-beobachter,1,https://github.com/cossacklabs/themis/pull/410,"Add ThemisPP tests (and C++ tests in general) into make fmt target. While we're here, refactor the makefile a bit to reduce variable duplication.
As with main C++ source code, we use a slightly different style than for the C code. I start to consider that we should be formatting C code with this style as well...","Add ThemisPP tests (and C++ tests in general) into make fmt target. While we're here, refactor the makefile a bit to reduce variable duplication.
As with main C++ source code, we use a slightly different style than for the C code. I start to consider that we should be formatting C code with this style as well...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,412,2019-03-05T14:28:49Z,2019-03-07T14:56:15Z,2019-09-27T13:31:08Z,MERGED,True,1487,1027,22,https://github.com/forelocked-beobachter, Formatting: JsThemis native extension,9,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/412,https://github.com/forelocked-beobachter,1,https://github.com/cossacklabs/themis/pull/412,"Add native extension of JsThemis to make fmt target group.
This requires quite a bit of effort because clang-tidy insists on having access to all source code involved in compilation, including all those NodeJS headers and its modules.
First of all, we have to add some hardcoded paths to NodeJS headers. I have not found a proper way to get these paths so we just hardcode them and hope that this is fine.
Then we need to have <nan.h> header file for which we have to install the nan module. We do a little hack to achieve that, pretending to 'format' the installation path for Node modules.

I have to say I'm not a fan of these hacks that we have to perform in order to get clang-tidy work on our source code...","Add native extension of JsThemis to make fmt target group.
This requires quite a bit of effort because clang-tidy insists on having access to all source code involved in compilation, including all those NodeJS headers and its modules.
First of all, we have to add some hardcoded paths to NodeJS headers. I have not found a proper way to get these paths so we just hardcode them and hope that this is fine.
Then we need to have <nan.h> header file for which we have to install the nan module. We do a little hack to achieve that, pretending to 'format' the installation path for Node modules.

I have to say I'm not a fan of these hacks that we have to perform in order to get clang-tidy work on our source code...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,412,2019-03-05T14:28:49Z,2019-03-07T14:56:15Z,2019-09-27T13:31:08Z,MERGED,True,1487,1027,22,https://github.com/forelocked-beobachter, Formatting: JsThemis native extension,9,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/412,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/412#issuecomment-469923990,"Add native extension of JsThemis to make fmt target group.
This requires quite a bit of effort because clang-tidy insists on having access to all source code involved in compilation, including all those NodeJS headers and its modules.
First of all, we have to add some hardcoded paths to NodeJS headers. I have not found a proper way to get these paths so we just hardcode them and hope that this is fine.
Then we need to have <nan.h> header file for which we have to install the nan module. We do a little hack to achieve that, pretending to 'format' the installation path for Node modules.

I have to say I'm not a fan of these hacks that we have to perform in order to get clang-tidy work on our source code...","What's the reasoning behind re-ordering headers like in this commit?
2639ee8",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,412,2019-03-05T14:28:49Z,2019-03-07T14:56:15Z,2019-09-27T13:31:08Z,MERGED,True,1487,1027,22,https://github.com/forelocked-beobachter, Formatting: JsThemis native extension,9,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/412,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/412#issuecomment-470051842,"Add native extension of JsThemis to make fmt target group.
This requires quite a bit of effort because clang-tidy insists on having access to all source code involved in compilation, including all those NodeJS headers and its modules.
First of all, we have to add some hardcoded paths to NodeJS headers. I have not found a proper way to get these paths so we just hardcode them and hope that this is fine.
Then we need to have <nan.h> header file for which we have to install the nan module. We do a little hack to achieve that, pretending to 'format' the installation path for Node modules.

I have to say I'm not a fan of these hacks that we have to perform in order to get clang-tidy work on our source code...","@vixentael,

What's the reasoning behind re-ordering headers like in this commit?
2639ee8

Consistency with other code that (now) uses include order suggested by Google Coding style:

main header
system headers
library headers
private headers

Reordering itself does not change anything semantically, but I have optimized the headers a bit (such as removed <vector> include where we already include it via the main header).",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,413,2019-03-06T01:02:30Z,2019-03-07T11:44:18Z,2019-03-07T11:57:07Z,MERGED,True,3,3,1,https://github.com/ilammy,Silent version checks,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/413,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/413,"Silence output to stderr if there is no language support installed. Most of the version checks already redirect stderr to /dev/null but some of them merge stdout and stderr due to historical reasons. In this case check whether a binary is available before trying to execute it.
This makes sure that ""make"" output does not contain unexpected messages like
/bin/bash: python2 not found
/bin/bash: php not found","Silence output to stderr if there is no language support installed. Most of the version checks already redirect stderr to /dev/null but some of them merge stdout and stderr due to historical reasons. In this case check whether a binary is available before trying to execute it.
This makes sure that ""make"" output does not contain unexpected messages like
/bin/bash: python2 not found
/bin/bash: php not found",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,414,2019-03-06T01:08:01Z,2019-03-07T11:44:43Z,2019-03-07T11:57:13Z,MERGED,True,51,84,4,https://github.com/ilammy,Improve NIST STS makefiles,5,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/414,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/414,"Finally I've got annoyed enough by all this inconsistent behavior when building NIST statistical test suite to do something about it. I believe it looks better now, causes less annoyance, and prints fewer irrelevant lines when building Themis.

Remove ""tests/soter/nist-sts/assess"" binary

I don't know why we keep this binary in the repository but I get triggered every time I do make clean and this file is removed which then results in a dirty git index, prevents git rebase from working, etc.
This file will be rebuilt if necessary for NIST STS tests so there is no reason to keep it in Git.

Add .gitignore for NIST STS tests

Ignore files generated by NIST STS tests to avoid accidentally checking them into Git.

Make recursive make calls quietly

Do not output unnecessary banners about entering and leaving directories when calling make recursively for NIST STS.

Update NIST STS makefile

Improve readability, maintainability and output of NIST STS makefile:

avoid hardcoding source code files
avoid hardcoding header dependencies
improve build status output
provide default ""all"" target
use standard variable names","Finally I've got annoyed enough by all this inconsistent behavior when building NIST statistical test suite to do something about it. I believe it looks better now, causes less annoyance, and prints fewer irrelevant lines when building Themis.

Remove ""tests/soter/nist-sts/assess"" binary

I don't know why we keep this binary in the repository but I get triggered every time I do make clean and this file is removed which then results in a dirty git index, prevents git rebase from working, etc.
This file will be rebuilt if necessary for NIST STS tests so there is no reason to keep it in Git.

Add .gitignore for NIST STS tests

Ignore files generated by NIST STS tests to avoid accidentally checking them into Git.

Make recursive make calls quietly

Do not output unnecessary banners about entering and leaving directories when calling make recursively for NIST STS.

Update NIST STS makefile

Improve readability, maintainability and output of NIST STS makefile:

avoid hardcoding source code files
avoid hardcoding header dependencies
improve build status output
provide default ""all"" target
use standard variable names",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,415,2019-03-06T02:06:49Z,2019-03-06T18:00:28Z,2019-03-06T18:00:34Z,MERGED,True,85,86,21,https://github.com/vixentael,Update iOS wrapper header structure to compile Swift framework,6,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/415,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/415,"Compiling Swift framework (f.e. adding Themis as dependency into some Swift framework) requires using modular framework.
This change aims to solve #411, there you can find more details about modular frameworks.
Modular frameworks don't expose non-modular headers as public. It's quite a tricky issue, because of non-trivial themis-soter source code structure and how it's exposed to the objc wrapper files. Previously we lived happily, because most users linked Themis from Bridging Header :)
What was changed:

remove extra headers in objc wrapper code, especially remove large headers like #import <themis/themis.h>
move many headers from .h files to .m files
use local #import ""scell_seal.h"" imports instead of #import <objcthemis/scell_seal.h>
(workaround) to remove themis secure session callback headers, I re-defined one structure typedef struct secure_session_user_callbacks_type secure_session_user_callbacks_t; here (not sure if this is a best thing to do, but I couldn't imagine any other quick way to remove themis import from header).

How to test:

if you have access to Cossack Labs' private CocoaPods repo, then you can run modified Swift example project that uses 0.10.4 podspec.

Example project linked Themis as import themis from Swift code, which triggers Xcode to build Swift (modular) framework, and here we are.
Updated podspec:

Podspec was updated to hide as much as possible headers, see next PR.

Next steps:
Upon testing and merging, podspec will be updated to link to the master branch (next PR), all example projects will be updated, podspec will be pushed.
P.S. I have tested on real device. Works fine 💁","Compiling Swift framework (f.e. adding Themis as dependency into some Swift framework) requires using modular framework.
This change aims to solve #411, there you can find more details about modular frameworks.
Modular frameworks don't expose non-modular headers as public. It's quite a tricky issue, because of non-trivial themis-soter source code structure and how it's exposed to the objc wrapper files. Previously we lived happily, because most users linked Themis from Bridging Header :)
What was changed:

remove extra headers in objc wrapper code, especially remove large headers like #import <themis/themis.h>
move many headers from .h files to .m files
use local #import ""scell_seal.h"" imports instead of #import <objcthemis/scell_seal.h>
(workaround) to remove themis secure session callback headers, I re-defined one structure typedef struct secure_session_user_callbacks_type secure_session_user_callbacks_t; here (not sure if this is a best thing to do, but I couldn't imagine any other quick way to remove themis import from header).

How to test:

if you have access to Cossack Labs' private CocoaPods repo, then you can run modified Swift example project that uses 0.10.4 podspec.

Example project linked Themis as import themis from Swift code, which triggers Xcode to build Swift (modular) framework, and here we are.
Updated podspec:

Podspec was updated to hide as much as possible headers, see next PR.

Next steps:
Upon testing and merging, podspec will be updated to link to the master branch (next PR), all example projects will be updated, podspec will be pushed.
P.S. I have tested on real device. Works fine 💁",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,416,2019-03-06T02:08:35Z,2019-03-07T14:49:23Z,2019-03-07T14:50:21Z,MERGED,True,102,117,14,https://github.com/vixentael,Draft 0.10.4 Themis iOS podspec,4,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/416,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/416,"This PR contains updated themis iOS podspec, that is currently linked to the [vxtl/ios-header] branch, but when #415 be merged, this podspec will be re-linked to master, tested, pushed and examples will be updated.","This PR contains updated themis iOS podspec, that is currently linked to the [vxtl/ios-header] branch, but when #415 be merged, this podspec will be re-linked to master, tested, pushed and examples will be updated.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,416,2019-03-06T02:08:35Z,2019-03-07T14:49:23Z,2019-03-07T14:50:21Z,MERGED,True,102,117,14,https://github.com/vixentael,Draft 0.10.4 Themis iOS podspec,4,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/416,https://github.com/popaaaandrei,2,https://github.com/cossacklabs/themis/pull/416#issuecomment-470040660,"This PR contains updated themis iOS podspec, that is currently linked to the [vxtl/ios-header] branch, but when #415 be merged, this podspec will be re-linked to master, tested, pushed and examples will be updated.",Confirm that works for me. Thank you!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,416,2019-03-06T02:08:35Z,2019-03-07T14:49:23Z,2019-03-07T14:50:21Z,MERGED,True,102,117,14,https://github.com/vixentael,Draft 0.10.4 Themis iOS podspec,4,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/416,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/416#issuecomment-470554950,"This PR contains updated themis iOS podspec, that is currently linked to the [vxtl/ios-header] branch, but when #415 be merged, this podspec will be re-linked to master, tested, pushed and examples will be updated.",Closes #411,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,417,2019-03-06T12:38:38Z,2019-03-07T11:45:04Z,2019-03-07T11:57:22Z,MERGED,True,13,11,1,https://github.com/ilammy,Improve progress column output,2,['enhancement'],https://github.com/cossacklabs/themis/pull/417,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/417,"Replace the awk magic which should align output columns with some ANSI code magic that aligns status strings in a separate column to the right. This tends to work better with our current file names. Previous code tends to insert ugly newlines for some really long file names.
Before:

After:

Note nicely aligned columns and no weird empty lines after long file names.","Replace the awk magic which should align output columns with some ANSI code magic that aligns status strings in a separate column to the right. This tends to work better with our current file names. Previous code tends to insert ugly newlines for some really long file names.
Before:

After:

Note nicely aligned columns and no weird empty lines after long file names.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,417,2019-03-06T12:38:38Z,2019-03-07T11:45:04Z,2019-03-07T11:57:22Z,MERGED,True,13,11,1,https://github.com/ilammy,Improve progress column output,2,['enhancement'],https://github.com/cossacklabs/themis/pull/417,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/417#issuecomment-470092409,"Replace the awk magic which should align output columns with some ANSI code magic that aligns status strings in a separate column to the right. This tends to work better with our current file names. Previous code tends to insert ugly newlines for some really long file names.
Before:

After:

Note nicely aligned columns and no weird empty lines after long file names.","I guess it should be possible to align the columns even more nicely near the right edge of the terminal, but my VT-fu is too weak for that at the moment. Or not...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,418,2019-03-06T13:20:50Z,2019-03-07T11:59:59Z,2019-03-07T12:00:45Z,MERGED,True,4772,2705,90,https://github.com/forelocked-beobachter,Formatting: update C code format,3,['core'],https://github.com/cossacklabs/themis/pull/418,https://github.com/forelocked-beobachter,1,https://github.com/cossacklabs/themis/pull/418,"Yet another formatting PR with no substantial changes. I just hope to get done with this...
The main change here is disabling of argument ""bin packing"" which is a major source of annoying formatting. We have a lot of functions with long parameter lists so these are used quite often. Unfortunately, bin packing these lists leads to poor readability and extremely brittle formatting which highly depends on the length of variables involved. Disabling bin packing gives us consistency: a function call either fits on a single line entirely, or it is formatted with one argument per line which is much more readable.
Other changes include introduction of include header groups which ensures that includes are ordered and grouped consistently. We use the ""Preserve"" mode because currently clang-format fails to detect main headers correctly. However, it should at least reorder headers which match existing groups.
Finally we do some fine-tuning of the penalties for excess characters and line-breaking. This gives a bit nicer line breaks as clang-format allows minor overflows past the right column edge if avoiding them requires to introduce an inconvenient line break near assignment or a function call. This is the part that I dislike the most because it feels very brittle. But well...
Disabled bin packing and the new style gives us much more readable C++ code so we have no reason to keep a special style for it with column limit set to 120 (instead of 100 as for the other files). Drop .clang-format files for C++. (This should be updated in #410 and #412.)","Yet another formatting PR with no substantial changes. I just hope to get done with this...
The main change here is disabling of argument ""bin packing"" which is a major source of annoying formatting. We have a lot of functions with long parameter lists so these are used quite often. Unfortunately, bin packing these lists leads to poor readability and extremely brittle formatting which highly depends on the length of variables involved. Disabling bin packing gives us consistency: a function call either fits on a single line entirely, or it is formatted with one argument per line which is much more readable.
Other changes include introduction of include header groups which ensures that includes are ordered and grouped consistently. We use the ""Preserve"" mode because currently clang-format fails to detect main headers correctly. However, it should at least reorder headers which match existing groups.
Finally we do some fine-tuning of the penalties for excess characters and line-breaking. This gives a bit nicer line breaks as clang-format allows minor overflows past the right column edge if avoiding them requires to introduce an inconvenient line break near assignment or a function call. This is the part that I dislike the most because it feels very brittle. But well...
Disabled bin packing and the new style gives us much more readable C++ code so we have no reason to keep a special style for it with column limit set to 120 (instead of 100 as for the other files). Drop .clang-format files for C++. (This should be updated in #410 and #412.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,419,2019-03-07T02:59:54Z,2019-03-11T13:25:55Z,2019-03-11T13:25:59Z,MERGED,True,103,126,14,https://github.com/ilammy,Make publishing libthemis-src easier,8,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/419,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/419,"libthemis-src crate includes Themis source code. Unfortunately, Cargo does not make publishing this crate easy so we have to use a certain amount of hacks. Improve them a bit so that they at least work out of the box for any developer. Running just cargo publish should be enough to publish all our crates now.

Whitelist libthemis-src crate files

Remove unnecessary symlinks and whitelist the files which should go into libthemis-src crate. This ensures that we do not package anything extra.
Unfortunately, it is still impossible to simply symlink the whole repo as libthemis-src/themis because Cargo is too smart. It sees a Cargo.toml in the repo root, thinks that this is some internal crate, and refuses to copy the whole ""themis"" subdirectory (despite that ""include"" list does not include themis/Cargo.toml). Well, maybe some day...

Compile-time check for Themis source code

Just make sure that Cargo got it right and really copied Themis source code into the package. It kinda likes to ignore symlinks on some systems so double-check that. (I have been burnt by this once and published a crate without Themis source code in it.)
cargo package does not run unit-tests so make this check a part of the regular build. Try including a file into a dummy constant. If the file is missing you will get an error message like this when packaging:
   Compiling libthemis-src v0.0.3
error: couldn't read src/../themis/Makefile: No such file or directory (os error 2)
  --> src/lib.rs:54:33
   |
54 | const _THEMIS_MAKEFILE: &[u8] = include_bytes!(""../themis/Makefile"");
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to previous error

error: failed to verify package tarball

Caused by:
  Could not compile `libthemis-src`.

To learn more, run the command again with --verbose.

Rust constants are true compile-time constants so this does not introduce any run-time overhead, does not use additional storage, etc.

Do not include submakefiles when building Rust

We don't really need JNI, AFL, or Themis tests when building a vendored version of Themis from libthemis-src crate. Guard makefile inclusions with a CARGO variable defined by Cargo when building Rust code. It will be propagated into the make invocation.","libthemis-src crate includes Themis source code. Unfortunately, Cargo does not make publishing this crate easy so we have to use a certain amount of hacks. Improve them a bit so that they at least work out of the box for any developer. Running just cargo publish should be enough to publish all our crates now.

Whitelist libthemis-src crate files

Remove unnecessary symlinks and whitelist the files which should go into libthemis-src crate. This ensures that we do not package anything extra.
Unfortunately, it is still impossible to simply symlink the whole repo as libthemis-src/themis because Cargo is too smart. It sees a Cargo.toml in the repo root, thinks that this is some internal crate, and refuses to copy the whole ""themis"" subdirectory (despite that ""include"" list does not include themis/Cargo.toml). Well, maybe some day...

Compile-time check for Themis source code

Just make sure that Cargo got it right and really copied Themis source code into the package. It kinda likes to ignore symlinks on some systems so double-check that. (I have been burnt by this once and published a crate without Themis source code in it.)
cargo package does not run unit-tests so make this check a part of the regular build. Try including a file into a dummy constant. If the file is missing you will get an error message like this when packaging:
   Compiling libthemis-src v0.0.3
error: couldn't read src/../themis/Makefile: No such file or directory (os error 2)
  --> src/lib.rs:54:33
   |
54 | const _THEMIS_MAKEFILE: &[u8] = include_bytes!(""../themis/Makefile"");
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to previous error

error: failed to verify package tarball

Caused by:
  Could not compile `libthemis-src`.

To learn more, run the command again with --verbose.

Rust constants are true compile-time constants so this does not introduce any run-time overhead, does not use additional storage, etc.

Do not include submakefiles when building Rust

We don't really need JNI, AFL, or Themis tests when building a vendored version of Themis from libthemis-src crate. Guard makefile inclusions with a CARGO variable defined by Cargo when building Rust code. It will be propagated into the make invocation.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,420,2019-03-07T13:18:27Z,2019-03-11T11:03:20Z,2019-03-11T11:25:41Z,MERGED,True,1342,1285,8,https://github.com/forelocked-beobachter,Formatting: JNI module for Java/Android wrappers,6,"['O-Android :robot:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/420,https://github.com/forelocked-beobachter,1,https://github.com/cossacklabs/themis/pull/420,"Add JNI to the formatting target. It is a bit special because we have to specify path to JDK headers (and actually install JDK for that).
clang-tidy suggested some changes, they are applied as a separate commit for review:

Avoid returning from both ""then"" and ""else"" branches
Initialize possibly uninitialized variables

Also, it turned out that clang-format treats private and public as C++ keywords when formatting C code which results in dumb formatting. Rename identifiers into private_key to avoid this.","Add JNI to the formatting target. It is a bit special because we have to specify path to JDK headers (and actually install JDK for that).
clang-tidy suggested some changes, they are applied as a separate commit for review:

Avoid returning from both ""then"" and ""else"" branches
Initialize possibly uninitialized variables

Also, it turned out that clang-format treats private and public as C++ keywords when formatting C code which results in dumb formatting. Rename identifiers into private_key to avoid this.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,421,2019-03-07T13:20:31Z,2019-03-11T11:03:43Z,2019-03-11T11:25:48Z,MERGED,True,287,273,5,https://github.com/forelocked-beobachter,Formatting: AFL tools,2,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/421,https://github.com/forelocked-beobachter,1,https://github.com/cossacklabs/themis/pull/421,"Add formatting targets for fuzzing tools. Again, these are a bit special as they require additional include paths, but other than that it's pretty much the same as with other C code.","Add formatting targets for fuzzing tools. Again, these are a bit special as they require additional include paths, but other than that it's pretty much the same as with other C code.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,422,2019-03-11T19:01:06Z,2019-03-12T10:19:38Z,2019-03-12T10:20:36Z,MERGED,True,185,137,21,https://github.com/ilammy,Fix golint warnings,6,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/422,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/422,"I've installed the latest golint and walked through the warnings. This should improve out future Go Report, but I'm not sure that we'll get 90%+ score. There are still some warnings that we can't fix without breaking backwards compatibility by renaming constants, structures and methods:
cell/cell.go:135:2: don't use ALL_CAPS in Go names; use CamelCase
cell/cell.go:136:2: don't use ALL_CAPS in Go names; use CamelCase
cell/cell.go:137:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:67:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:68:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:69:2: don't use ALL_CAPS in Go names; use CamelCase
keys/keypair.go:63:2: don't use ALL_CAPS in Go names; use CamelCase
keys/keypair.go:64:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:23:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:24:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:25:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:29:6: type name will be used as session.SessionCallbacks by other packages, and that stutters; consider calling this Callbacks
session/session.go:210:26: method GetRemoteId should be GetRemoteID
session/session_test.go:20:27: method GetPublicKeyForId should be GetPublicKeyForID



Add documentation comments

golint now requires all exported types, methods, and constants to have documentation comments on them. And the comments should have a particular style, starting with the identifier they describe. I've added some basic comments for all structs and methods.

Unexport implementation details

Secure Message mode constants should not be exported, they are for internal use. Spell them with a lowercase initial letter instead of uppercase.

Replace snake_case with camelCase

Go code style requires to use camelCase for variables, not snake_case.

Spell ID as ""ID"", not ""Id""

golint warns us about incorrect spelling, fix it where possible.

Drop explicit zero initialization

Values are zero-initialized by default, golint warns about explicit zero initialization. Remove it in Secure Cell code.","I've installed the latest golint and walked through the warnings. This should improve out future Go Report, but I'm not sure that we'll get 90%+ score. There are still some warnings that we can't fix without breaking backwards compatibility by renaming constants, structures and methods:
cell/cell.go:135:2: don't use ALL_CAPS in Go names; use CamelCase
cell/cell.go:136:2: don't use ALL_CAPS in Go names; use CamelCase
cell/cell.go:137:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:67:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:68:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:69:2: don't use ALL_CAPS in Go names; use CamelCase
keys/keypair.go:63:2: don't use ALL_CAPS in Go names; use CamelCase
keys/keypair.go:64:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:23:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:24:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:25:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:29:6: type name will be used as session.SessionCallbacks by other packages, and that stutters; consider calling this Callbacks
session/session.go:210:26: method GetRemoteId should be GetRemoteID
session/session_test.go:20:27: method GetPublicKeyForId should be GetPublicKeyForID



Add documentation comments

golint now requires all exported types, methods, and constants to have documentation comments on them. And the comments should have a particular style, starting with the identifier they describe. I've added some basic comments for all structs and methods.

Unexport implementation details

Secure Message mode constants should not be exported, they are for internal use. Spell them with a lowercase initial letter instead of uppercase.

Replace snake_case with camelCase

Go code style requires to use camelCase for variables, not snake_case.

Spell ID as ""ID"", not ""Id""

golint warns us about incorrect spelling, fix it where possible.

Drop explicit zero initialization

Values are zero-initialized by default, golint warns about explicit zero initialization. Remove it in Secure Cell code.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,422,2019-03-11T19:01:06Z,2019-03-12T10:19:38Z,2019-03-12T10:20:36Z,MERGED,True,185,137,21,https://github.com/ilammy,Fix golint warnings,6,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/422,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/422#issuecomment-471717908,"I've installed the latest golint and walked through the warnings. This should improve out future Go Report, but I'm not sure that we'll get 90%+ score. There are still some warnings that we can't fix without breaking backwards compatibility by renaming constants, structures and methods:
cell/cell.go:135:2: don't use ALL_CAPS in Go names; use CamelCase
cell/cell.go:136:2: don't use ALL_CAPS in Go names; use CamelCase
cell/cell.go:137:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:67:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:68:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:69:2: don't use ALL_CAPS in Go names; use CamelCase
keys/keypair.go:63:2: don't use ALL_CAPS in Go names; use CamelCase
keys/keypair.go:64:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:23:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:24:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:25:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:29:6: type name will be used as session.SessionCallbacks by other packages, and that stutters; consider calling this Callbacks
session/session.go:210:26: method GetRemoteId should be GetRemoteID
session/session_test.go:20:27: method GetPublicKeyForId should be GetPublicKeyForID



Add documentation comments

golint now requires all exported types, methods, and constants to have documentation comments on them. And the comments should have a particular style, starting with the identifier they describe. I've added some basic comments for all structs and methods.

Unexport implementation details

Secure Message mode constants should not be exported, they are for internal use. Spell them with a lowercase initial letter instead of uppercase.

Replace snake_case with camelCase

Go code style requires to use camelCase for variables, not snake_case.

Spell ID as ""ID"", not ""Id""

golint warns us about incorrect spelling, fix it where possible.

Drop explicit zero initialization

Values are zero-initialized by default, golint warns about explicit zero initialization. Remove it in Secure Cell code.",Also: shall update all code in Wiki examples to use new syntax,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,422,2019-03-11T19:01:06Z,2019-03-12T10:19:38Z,2019-03-12T10:20:36Z,MERGED,True,185,137,21,https://github.com/ilammy,Fix golint warnings,6,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/422,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/422#issuecomment-471720926,"I've installed the latest golint and walked through the warnings. This should improve out future Go Report, but I'm not sure that we'll get 90%+ score. There are still some warnings that we can't fix without breaking backwards compatibility by renaming constants, structures and methods:
cell/cell.go:135:2: don't use ALL_CAPS in Go names; use CamelCase
cell/cell.go:136:2: don't use ALL_CAPS in Go names; use CamelCase
cell/cell.go:137:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:67:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:68:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:69:2: don't use ALL_CAPS in Go names; use CamelCase
keys/keypair.go:63:2: don't use ALL_CAPS in Go names; use CamelCase
keys/keypair.go:64:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:23:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:24:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:25:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:29:6: type name will be used as session.SessionCallbacks by other packages, and that stutters; consider calling this Callbacks
session/session.go:210:26: method GetRemoteId should be GetRemoteID
session/session_test.go:20:27: method GetPublicKeyForId should be GetPublicKeyForID



Add documentation comments

golint now requires all exported types, methods, and constants to have documentation comments on them. And the comments should have a particular style, starting with the identifier they describe. I've added some basic comments for all structs and methods.

Unexport implementation details

Secure Message mode constants should not be exported, they are for internal use. Spell them with a lowercase initial letter instead of uppercase.

Replace snake_case with camelCase

Go code style requires to use camelCase for variables, not snake_case.

Spell ID as ""ID"", not ""Id""

golint warns us about incorrect spelling, fix it where possible.

Drop explicit zero initialization

Values are zero-initialized by default, golint warns about explicit zero initialization. Remove it in Secure Cell code.","The constants in gothemis/message/message.go which are renamed were added only recently in #400. I did not intend them to be exported (and at that time I was not aware of Golang's scoping rules).
Since we did not expose this API in 0.10, I think we're okay with renaming the constants directly right now: the users will not see them in 0.11 so this should not break existing code.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,422,2019-03-11T19:01:06Z,2019-03-12T10:19:38Z,2019-03-12T10:20:36Z,MERGED,True,185,137,21,https://github.com/ilammy,Fix golint warnings,6,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/422,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/422#issuecomment-471724030,"I've installed the latest golint and walked through the warnings. This should improve out future Go Report, but I'm not sure that we'll get 90%+ score. There are still some warnings that we can't fix without breaking backwards compatibility by renaming constants, structures and methods:
cell/cell.go:135:2: don't use ALL_CAPS in Go names; use CamelCase
cell/cell.go:136:2: don't use ALL_CAPS in Go names; use CamelCase
cell/cell.go:137:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:67:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:68:2: don't use ALL_CAPS in Go names; use CamelCase
compare/compare.go:69:2: don't use ALL_CAPS in Go names; use CamelCase
keys/keypair.go:63:2: don't use ALL_CAPS in Go names; use CamelCase
keys/keypair.go:64:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:23:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:24:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:25:2: don't use ALL_CAPS in Go names; use CamelCase
session/session.go:29:6: type name will be used as session.SessionCallbacks by other packages, and that stutters; consider calling this Callbacks
session/session.go:210:26: method GetRemoteId should be GetRemoteID
session/session_test.go:20:27: method GetPublicKeyForId should be GetPublicKeyForID



Add documentation comments

golint now requires all exported types, methods, and constants to have documentation comments on them. And the comments should have a particular style, starting with the identifier they describe. I've added some basic comments for all structs and methods.

Unexport implementation details

Secure Message mode constants should not be exported, they are for internal use. Spell them with a lowercase initial letter instead of uppercase.

Replace snake_case with camelCase

Go code style requires to use camelCase for variables, not snake_case.

Spell ID as ""ID"", not ""Id""

golint warns us about incorrect spelling, fix it where possible.

Drop explicit zero initialization

Values are zero-initialized by default, golint warns about explicit zero initialization. Remove it in Secure Cell code.","oh, if they are not exposed to the end users – I'm quite happy then :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,423,2019-03-12T10:24:19Z,2019-03-12T13:50:54Z,2019-03-12T13:51:03Z,MERGED,True,186,81,11,https://github.com/ilammy,Fix other Go Report Card warnings,7,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/423,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/423,"Fix other warnings that we might run into on Go Report Card.

go vet: fix warnings about unkeyed field initialization

Add field names to struct initializers, mostly these are our private key structs.

go ineffassign: fix ineffective assignments

This is a neat tool that mostly catches unhandled errors (assignments to err variables that are never read). Add appropriate error handling to deal with these warnings. Pay attention to the subtle difference between = and := assignments.

go cyclo: reduce cyclomatic complexity

Some functions already had it too high, some got it too high after additional error handling. We can't do anything about it other than split the big functions into smaller ones and introduce helpers to avoid too many conditionals in a single function.

go misspell: fix a couple of typos
go fmt: reformat the code","Fix other warnings that we might run into on Go Report Card.

go vet: fix warnings about unkeyed field initialization

Add field names to struct initializers, mostly these are our private key structs.

go ineffassign: fix ineffective assignments

This is a neat tool that mostly catches unhandled errors (assignments to err variables that are never read). Add appropriate error handling to deal with these warnings. Pay attention to the subtle difference between = and := assignments.

go cyclo: reduce cyclomatic complexity

Some functions already had it too high, some got it too high after additional error handling. We can't do anything about it other than split the big functions into smaller ones and introduce helpers to avoid too many conditionals in a single function.

go misspell: fix a couple of typos
go fmt: reformat the code",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,424,2019-03-12T14:18:16Z,2019-03-13T11:26:16Z,2019-07-26T13:53:54Z,MERGED,True,101,63,22,https://github.com/ilammy,Deprecate incorrectly named API,10,"['W-GoThemis :hamster:', 'compatibility']",https://github.com/cossacklabs/themis/pull/424,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/424,"PRs #422, #423 have fixed up miscellaneous golint warnings. Some of them are for incorrectly named constants and methods. This PR renames the affected identifiers into something acceptable by golint while simultaneously deprecating the old names.
We cannot remove the old names immediately due to backwards compatibility concerns. They will be actually removed in some later release, once all existing users have migrated to the new API. But for now we keep compatibility shims of various complexity to allow usage of the old API.
Summary of changes:

cell.CELL_MODE_SEAL → cell.ModeSeal
compare.COMPARE_MATCH → compare.Match
keys.KEYTYPE_EC → keys.TypeEC
session.STATE_ESTABLISHED → session.StateEstablished
(*session.SecureSession) GetRemoteId → GetRemoteID



Rename cell.CELL_MODE_* constants
Rename compare.COMPARE_* constants
Rename keys.KEYTYPE_* constants
Rename session.STATE_* constants
Rename session.SecureSession.GetRemoteId method

Renaming constants is actually very easy:

Provide new names that don't offend golint
Use new names throughout the code base
Mark the old names deprecated and redefine constants using new values

This is true for methods as well.

Rename session.SessionCallbacks interface
Compatibility test for old Secure Session API

(Edit: these two commits were removed later during code review.)
This renaming is more involved that other ones. Interfaces are hard.
First of all, introduce a new interface with identifiers that do not offend golint:

use Callbacks instead of SessionCallbacks to avoid stuttering when importing (it will be called session.Callbacks in user code)
use GetPublicKeyID method name instead of GetPublicKeyId

Then update all existing code to use the new interface. Secure Session itself should call the new method, accept and store Callbacks instance. Users of Secure Session should implement the new GetPublicKeyID method.
However, in order to maintain backwards compatibility we have to allow the old code to continue using the old SessionCallbacks interface with GetPublicKeyId method. We implement this using an adapter struct that translates new method calls into the old ones. Since Go does not have method overloading we have to accept an interface {} instance and check its type dynamically. These compatibility shims can be removed when we drop the old interface.
All these dynamic checks in session.New() warrant a test which verifies that we actually can handle the old interface values and reject invalid ones. This test can be removed together with the old SessionCallbacks API.","PRs #422, #423 have fixed up miscellaneous golint warnings. Some of them are for incorrectly named constants and methods. This PR renames the affected identifiers into something acceptable by golint while simultaneously deprecating the old names.
We cannot remove the old names immediately due to backwards compatibility concerns. They will be actually removed in some later release, once all existing users have migrated to the new API. But for now we keep compatibility shims of various complexity to allow usage of the old API.
Summary of changes:

cell.CELL_MODE_SEAL → cell.ModeSeal
compare.COMPARE_MATCH → compare.Match
keys.KEYTYPE_EC → keys.TypeEC
session.STATE_ESTABLISHED → session.StateEstablished
(*session.SecureSession) GetRemoteId → GetRemoteID



Rename cell.CELL_MODE_* constants
Rename compare.COMPARE_* constants
Rename keys.KEYTYPE_* constants
Rename session.STATE_* constants
Rename session.SecureSession.GetRemoteId method

Renaming constants is actually very easy:

Provide new names that don't offend golint
Use new names throughout the code base
Mark the old names deprecated and redefine constants using new values

This is true for methods as well.

Rename session.SessionCallbacks interface
Compatibility test for old Secure Session API

(Edit: these two commits were removed later during code review.)
This renaming is more involved that other ones. Interfaces are hard.
First of all, introduce a new interface with identifiers that do not offend golint:

use Callbacks instead of SessionCallbacks to avoid stuttering when importing (it will be called session.Callbacks in user code)
use GetPublicKeyID method name instead of GetPublicKeyId

Then update all existing code to use the new interface. Secure Session itself should call the new method, accept and store Callbacks instance. Users of Secure Session should implement the new GetPublicKeyID method.
However, in order to maintain backwards compatibility we have to allow the old code to continue using the old SessionCallbacks interface with GetPublicKeyId method. We implement this using an adapter struct that translates new method calls into the old ones. Since Go does not have method overloading we have to accept an interface {} instance and check its type dynamically. These compatibility shims can be removed when we drop the old interface.
All these dynamic checks in session.New() warrant a test which verifies that we actually can handle the old interface values and reject invalid ones. This test can be removed together with the old SessionCallbacks API.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,424,2019-03-12T14:18:16Z,2019-03-13T11:26:16Z,2019-07-26T13:53:54Z,MERGED,True,101,63,22,https://github.com/ilammy,Deprecate incorrectly named API,10,"['W-GoThemis :hamster:', 'compatibility']",https://github.com/cossacklabs/themis/pull/424,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/424#issuecomment-472075196,"PRs #422, #423 have fixed up miscellaneous golint warnings. Some of them are for incorrectly named constants and methods. This PR renames the affected identifiers into something acceptable by golint while simultaneously deprecating the old names.
We cannot remove the old names immediately due to backwards compatibility concerns. They will be actually removed in some later release, once all existing users have migrated to the new API. But for now we keep compatibility shims of various complexity to allow usage of the old API.
Summary of changes:

cell.CELL_MODE_SEAL → cell.ModeSeal
compare.COMPARE_MATCH → compare.Match
keys.KEYTYPE_EC → keys.TypeEC
session.STATE_ESTABLISHED → session.StateEstablished
(*session.SecureSession) GetRemoteId → GetRemoteID



Rename cell.CELL_MODE_* constants
Rename compare.COMPARE_* constants
Rename keys.KEYTYPE_* constants
Rename session.STATE_* constants
Rename session.SecureSession.GetRemoteId method

Renaming constants is actually very easy:

Provide new names that don't offend golint
Use new names throughout the code base
Mark the old names deprecated and redefine constants using new values

This is true for methods as well.

Rename session.SessionCallbacks interface
Compatibility test for old Secure Session API

(Edit: these two commits were removed later during code review.)
This renaming is more involved that other ones. Interfaces are hard.
First of all, introduce a new interface with identifiers that do not offend golint:

use Callbacks instead of SessionCallbacks to avoid stuttering when importing (it will be called session.Callbacks in user code)
use GetPublicKeyID method name instead of GetPublicKeyId

Then update all existing code to use the new interface. Secure Session itself should call the new method, accept and store Callbacks instance. Users of Secure Session should implement the new GetPublicKeyID method.
However, in order to maintain backwards compatibility we have to allow the old code to continue using the old SessionCallbacks interface with GetPublicKeyId method. We implement this using an adapter struct that translates new method calls into the old ones. Since Go does not have method overloading we have to accept an interface {} instance and check its type dynamically. These compatibility shims can be removed when we drop the old interface.
All these dynamic checks in session.New() warrant a test which verifies that we actually can handle the old interface values and reject invalid ones. This test can be removed together with the old SessionCallbacks API.","Uh... @vixentael, @Lagovas, you know what?
I've just refreshed Go Report Card for Themis with the current master that does not include this PR. It seems that we're A-OK with the current names and don't have to rename anything. I'm not really sure why.
Should we proceed with this PR then?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,424,2019-03-12T14:18:16Z,2019-03-13T11:26:16Z,2019-07-26T13:53:54Z,MERGED,True,101,63,22,https://github.com/ilammy,Deprecate incorrectly named API,10,"['W-GoThemis :hamster:', 'compatibility']",https://github.com/cossacklabs/themis/pull/424,https://github.com/Lagovas,3,https://github.com/cossacklabs/themis/pull/424#issuecomment-472093440,"PRs #422, #423 have fixed up miscellaneous golint warnings. Some of them are for incorrectly named constants and methods. This PR renames the affected identifiers into something acceptable by golint while simultaneously deprecating the old names.
We cannot remove the old names immediately due to backwards compatibility concerns. They will be actually removed in some later release, once all existing users have migrated to the new API. But for now we keep compatibility shims of various complexity to allow usage of the old API.
Summary of changes:

cell.CELL_MODE_SEAL → cell.ModeSeal
compare.COMPARE_MATCH → compare.Match
keys.KEYTYPE_EC → keys.TypeEC
session.STATE_ESTABLISHED → session.StateEstablished
(*session.SecureSession) GetRemoteId → GetRemoteID



Rename cell.CELL_MODE_* constants
Rename compare.COMPARE_* constants
Rename keys.KEYTYPE_* constants
Rename session.STATE_* constants
Rename session.SecureSession.GetRemoteId method

Renaming constants is actually very easy:

Provide new names that don't offend golint
Use new names throughout the code base
Mark the old names deprecated and redefine constants using new values

This is true for methods as well.

Rename session.SessionCallbacks interface
Compatibility test for old Secure Session API

(Edit: these two commits were removed later during code review.)
This renaming is more involved that other ones. Interfaces are hard.
First of all, introduce a new interface with identifiers that do not offend golint:

use Callbacks instead of SessionCallbacks to avoid stuttering when importing (it will be called session.Callbacks in user code)
use GetPublicKeyID method name instead of GetPublicKeyId

Then update all existing code to use the new interface. Secure Session itself should call the new method, accept and store Callbacks instance. Users of Secure Session should implement the new GetPublicKeyID method.
However, in order to maintain backwards compatibility we have to allow the old code to continue using the old SessionCallbacks interface with GetPublicKeyId method. We implement this using an adapter struct that translates new method calls into the old ones. Since Go does not have method overloading we have to accept an interface {} instance and check its type dynamically. These compatibility shims can be removed when we drop the old interface.
All these dynamic checks in session.New() warrant a test which verifies that we actually can handle the old interface values and reject invalid ones. This test can be removed together with the old SessionCallbacks API.",imho will be better to update constants according to golang conventions but leave as is callback's interface as is for now,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,424,2019-03-12T14:18:16Z,2019-03-13T11:26:16Z,2019-07-26T13:53:54Z,MERGED,True,101,63,22,https://github.com/ilammy,Deprecate incorrectly named API,10,"['W-GoThemis :hamster:', 'compatibility']",https://github.com/cossacklabs/themis/pull/424,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/424#issuecomment-472113652,"PRs #422, #423 have fixed up miscellaneous golint warnings. Some of them are for incorrectly named constants and methods. This PR renames the affected identifiers into something acceptable by golint while simultaneously deprecating the old names.
We cannot remove the old names immediately due to backwards compatibility concerns. They will be actually removed in some later release, once all existing users have migrated to the new API. But for now we keep compatibility shims of various complexity to allow usage of the old API.
Summary of changes:

cell.CELL_MODE_SEAL → cell.ModeSeal
compare.COMPARE_MATCH → compare.Match
keys.KEYTYPE_EC → keys.TypeEC
session.STATE_ESTABLISHED → session.StateEstablished
(*session.SecureSession) GetRemoteId → GetRemoteID



Rename cell.CELL_MODE_* constants
Rename compare.COMPARE_* constants
Rename keys.KEYTYPE_* constants
Rename session.STATE_* constants
Rename session.SecureSession.GetRemoteId method

Renaming constants is actually very easy:

Provide new names that don't offend golint
Use new names throughout the code base
Mark the old names deprecated and redefine constants using new values

This is true for methods as well.

Rename session.SessionCallbacks interface
Compatibility test for old Secure Session API

(Edit: these two commits were removed later during code review.)
This renaming is more involved that other ones. Interfaces are hard.
First of all, introduce a new interface with identifiers that do not offend golint:

use Callbacks instead of SessionCallbacks to avoid stuttering when importing (it will be called session.Callbacks in user code)
use GetPublicKeyID method name instead of GetPublicKeyId

Then update all existing code to use the new interface. Secure Session itself should call the new method, accept and store Callbacks instance. Users of Secure Session should implement the new GetPublicKeyID method.
However, in order to maintain backwards compatibility we have to allow the old code to continue using the old SessionCallbacks interface with GetPublicKeyId method. We implement this using an adapter struct that translates new method calls into the old ones. Since Go does not have method overloading we have to accept an interface {} instance and check its type dynamically. These compatibility shims can be removed when we drop the old interface.
All these dynamic checks in session.New() warrant a test which verifies that we actually can handle the old interface values and reject invalid ones. This test can be removed together with the old SessionCallbacks API.","💯 agree with @Lagovas, let's leave callbacks as is",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,424,2019-03-12T14:18:16Z,2019-03-13T11:26:16Z,2019-07-26T13:53:54Z,MERGED,True,101,63,22,https://github.com/ilammy,Deprecate incorrectly named API,10,"['W-GoThemis :hamster:', 'compatibility']",https://github.com/cossacklabs/themis/pull/424,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/424#issuecomment-472171179,"PRs #422, #423 have fixed up miscellaneous golint warnings. Some of them are for incorrectly named constants and methods. This PR renames the affected identifiers into something acceptable by golint while simultaneously deprecating the old names.
We cannot remove the old names immediately due to backwards compatibility concerns. They will be actually removed in some later release, once all existing users have migrated to the new API. But for now we keep compatibility shims of various complexity to allow usage of the old API.
Summary of changes:

cell.CELL_MODE_SEAL → cell.ModeSeal
compare.COMPARE_MATCH → compare.Match
keys.KEYTYPE_EC → keys.TypeEC
session.STATE_ESTABLISHED → session.StateEstablished
(*session.SecureSession) GetRemoteId → GetRemoteID



Rename cell.CELL_MODE_* constants
Rename compare.COMPARE_* constants
Rename keys.KEYTYPE_* constants
Rename session.STATE_* constants
Rename session.SecureSession.GetRemoteId method

Renaming constants is actually very easy:

Provide new names that don't offend golint
Use new names throughout the code base
Mark the old names deprecated and redefine constants using new values

This is true for methods as well.

Rename session.SessionCallbacks interface
Compatibility test for old Secure Session API

(Edit: these two commits were removed later during code review.)
This renaming is more involved that other ones. Interfaces are hard.
First of all, introduce a new interface with identifiers that do not offend golint:

use Callbacks instead of SessionCallbacks to avoid stuttering when importing (it will be called session.Callbacks in user code)
use GetPublicKeyID method name instead of GetPublicKeyId

Then update all existing code to use the new interface. Secure Session itself should call the new method, accept and store Callbacks instance. Users of Secure Session should implement the new GetPublicKeyID method.
However, in order to maintain backwards compatibility we have to allow the old code to continue using the old SessionCallbacks interface with GetPublicKeyId method. We implement this using an adapter struct that translates new method calls into the old ones. Since Go does not have method overloading we have to accept an interface {} instance and check its type dynamically. These compatibility shims can be removed when we drop the old interface.
All these dynamic checks in session.New() warrant a test which verifies that we actually can handle the old interface values and reject invalid ones. This test can be removed together with the old SessionCallbacks API.",Okay then. I have reverted the two commits touching the callbacks. Now we only rename the constants and that one method of Secure Session.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,425,2019-03-12T14:22:55Z,2019-07-26T11:02:08Z,2019-09-20T11:01:26Z,CLOSED,False,0,42,4,https://github.com/ilammy,Remove deprecated Gothemis API (0.11),1,"['W-GoThemis :hamster:', 'compatibility']",https://github.com/cossacklabs/themis/pull/425,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/425,"Here we actually remove the API scheduled for deprecation since Themis 0.11:

#424 Deprecate incorrectly named API","Here we actually remove the API scheduled for deprecation since Themis 0.11:

#424 Deprecate incorrectly named API",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,425,2019-03-12T14:22:55Z,2019-07-26T11:02:08Z,2019-09-20T11:01:26Z,CLOSED,False,0,42,4,https://github.com/ilammy,Remove deprecated Gothemis API (0.11),1,"['W-GoThemis :hamster:', 'compatibility']",https://github.com/cossacklabs/themis/pull/425,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/425#issuecomment-515377472,"Here we actually remove the API scheduled for deprecation since Themis 0.11:

#424 Deprecate incorrectly named API","What about to merge these changes only after updating code in Acra to use new names? https://github.com/cossacklabs/acra/blob/master/keystore/filesystem/server_keystore.go#L111
We didn't update Acra to our changes in themis...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,425,2019-03-12T14:22:55Z,2019-07-26T11:02:08Z,2019-09-20T11:01:26Z,CLOSED,False,0,42,4,https://github.com/ilammy,Remove deprecated Gothemis API (0.11),1,"['W-GoThemis :hamster:', 'compatibility']",https://github.com/cossacklabs/themis/pull/425,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/425#issuecomment-515410779,"Here we actually remove the API scheduled for deprecation since Themis 0.11:

#424 Deprecate incorrectly named API","Uh... yeah. I thought everybody will automagically apply updates, but guess what!
I don't like this PR to be dangling around (it's a bad idea in the hindsight) so I'll close it until we're really ready to remove the API.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,426,2019-03-12T14:54:36Z,2019-03-12T16:22:48Z,2019-03-12T16:23:08Z,MERGED,True,68,68,5,https://github.com/ilammy,Additional Go Report fixes,3,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/426,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/426,Some additional minor fixes in the tools directory (integration tools) which I missed.,Some additional minor fixes in the tools directory (integration tools) which I missed.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,427,2019-03-19T13:36:06Z,2019-03-19T15:03:08Z,2019-03-19T17:17:31Z,MERGED,True,1460,0,10,https://github.com/ilammy,Xcode project for Carthage,1,"['enhancement', 'O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/427,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/427,"This adds an Xcode project to build Themis, enabling distribution via Carthage. This requires an Xcode project in the root repo directory with shared build schemes.

Build structure
As it was easier to do, and as it probably provides better debug information for Xcode users, Themis build for Xcode is a completely new one. We do not (re)use existing Makefiles, but this should be possible in theory. However, currently the Xcode project replicates the existing build and compiles Soter, Themis, and Obj-C Themis files manually.
Themis is compiled with OpenSSL as a backend. We pull in the dependency via Carthage as well. Currently we use our own fork of the library, but later it will be updated to the proper upstream once Carthage support lands there.
The project file provides two distinct targets and build schemes: for macOS and iOS, and their frameworks have slightly different structure. Though, we reuse as many files as possible. For example, the umbrella header Themis.h is the same for both platforms. Note that the build schemes are shared. This is important for Cartage.
Actual framework names are in lowercase: themis.framework. This is for compatibility with existing CocoaPods builds which use such naming.

We do not code-sign the resulting frameworks. It is expected that the applications using Themis will sign all external framework code that they use.
Finally, framework bundles use 'stuttering' identifiers com.cossacklabs.themis.Themis. This is because later we will need to name our documentation examples and it would be nice to put them under the same namespace ""com.cossacklabs.themis"".
The framework version is provisional 0.10.5 (which is actually a preview of 0.11).
How to test this
Before building Themis you have to pull in dependencies (OpenSSL):
carthage bootstrap

After that you can proceed with building via Xcode.
Alternatively, you can use Carthage for testing the command-line build:
carthage build --no-skip-current

Examples that actually use Carthage build will be added soon in a separate PR.
File layout and maintenance
New files and their functions:

Cartfile — list of our Carthage dependencies
Cartfile.resolved — 'lock file' that pins specific versions of dependencies
Themis.xcodeproj/ — directory with all Xcode project stuff
src/wrappers/themis/Obj-C/Themis/Info.plist — framework Info.plist file
src/wrappers/themis/Obj-C/Themis/themis.h — framework umbrella header file

If you wish to update dependencies:

you may need to update Cartfile
run carthage update to pull in new versions and update the lock file
commit both Cartfile and Cartfile.resolved

If you wish to update Themis framework version then edit it in Info.plist.
Carthage uses git tags to manage package versions, so every official Themis release is simultaneously a new Carthage version.","This adds an Xcode project to build Themis, enabling distribution via Carthage. This requires an Xcode project in the root repo directory with shared build schemes.

Build structure
As it was easier to do, and as it probably provides better debug information for Xcode users, Themis build for Xcode is a completely new one. We do not (re)use existing Makefiles, but this should be possible in theory. However, currently the Xcode project replicates the existing build and compiles Soter, Themis, and Obj-C Themis files manually.
Themis is compiled with OpenSSL as a backend. We pull in the dependency via Carthage as well. Currently we use our own fork of the library, but later it will be updated to the proper upstream once Carthage support lands there.
The project file provides two distinct targets and build schemes: for macOS and iOS, and their frameworks have slightly different structure. Though, we reuse as many files as possible. For example, the umbrella header Themis.h is the same for both platforms. Note that the build schemes are shared. This is important for Cartage.
Actual framework names are in lowercase: themis.framework. This is for compatibility with existing CocoaPods builds which use such naming.

We do not code-sign the resulting frameworks. It is expected that the applications using Themis will sign all external framework code that they use.
Finally, framework bundles use 'stuttering' identifiers com.cossacklabs.themis.Themis. This is because later we will need to name our documentation examples and it would be nice to put them under the same namespace ""com.cossacklabs.themis"".
The framework version is provisional 0.10.5 (which is actually a preview of 0.11).
How to test this
Before building Themis you have to pull in dependencies (OpenSSL):
carthage bootstrap

After that you can proceed with building via Xcode.
Alternatively, you can use Carthage for testing the command-line build:
carthage build --no-skip-current

Examples that actually use Carthage build will be added soon in a separate PR.
File layout and maintenance
New files and their functions:

Cartfile — list of our Carthage dependencies
Cartfile.resolved — 'lock file' that pins specific versions of dependencies
Themis.xcodeproj/ — directory with all Xcode project stuff
src/wrappers/themis/Obj-C/Themis/Info.plist — framework Info.plist file
src/wrappers/themis/Obj-C/Themis/themis.h — framework umbrella header file

If you wish to update dependencies:

you may need to update Cartfile
run carthage update to pull in new versions and update the lock file
commit both Cartfile and Cartfile.resolved

If you wish to update Themis framework version then edit it in Info.plist.
Carthage uses git tags to manage package versions, so every official Themis release is simultaneously a new Carthage version.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,428,2019-03-19T17:36:38Z,2019-03-21T16:52:24Z,2019-03-28T18:08:42Z,MERGED,True,5598,0,106,https://github.com/ilammy,Carthage code samples for iOS and macOS,6,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/428,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/428,"This adds Xcode projects and code samples using Carthage packages of Themis.
Directory structure
Since we already have CocoaPods examples, new ones made the directory structure a bit messy. I have moved the code around so that it's a bit easier to navigate:
docs
└── examples
    ├── objc
    │   ├── iOS-CocoaPods   (moved)
    │   ├── iOS-Carthage    (new)
    │   └── macOS-Carthage  (new)
    └── swift
        ├── iOS-CocoaPods   (moved)
        ├── iOS-Carthage    (new)
        └── macOS-Carthage  (new)

All samples use the same code, just copy-pasted around.
How to use
In order to initialize Carthage project one must run
carthage bootstrap

in the project directory to pull the dependencies.
We pin Themis version to the current master (a415c1d).
Caveats
There is one caveat with new Objective-C samples: they import Themis as
#import <themis/themis.h>
while CocoaPods samples use the following form:
#import <objcthemis/objcthemis.h>
CocoaPods use some wild magic for that imports to be possible while Carthage projects use the resulting framework name. I have not found an easy way around that so it seems we'll have to live with this discrepancy.","This adds Xcode projects and code samples using Carthage packages of Themis.
Directory structure
Since we already have CocoaPods examples, new ones made the directory structure a bit messy. I have moved the code around so that it's a bit easier to navigate:
docs
└── examples
    ├── objc
    │   ├── iOS-CocoaPods   (moved)
    │   ├── iOS-Carthage    (new)
    │   └── macOS-Carthage  (new)
    └── swift
        ├── iOS-CocoaPods   (moved)
        ├── iOS-Carthage    (new)
        └── macOS-Carthage  (new)

All samples use the same code, just copy-pasted around.
How to use
In order to initialize Carthage project one must run
carthage bootstrap

in the project directory to pull the dependencies.
We pin Themis version to the current master (a415c1d).
Caveats
There is one caveat with new Objective-C samples: they import Themis as
#import <themis/themis.h>
while CocoaPods samples use the following form:
#import <objcthemis/objcthemis.h>
CocoaPods use some wild magic for that imports to be possible while Carthage projects use the resulting framework name. I have not found an easy way around that so it seems we'll have to live with this discrepancy.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,428,2019-03-19T17:36:38Z,2019-03-21T16:52:24Z,2019-03-28T18:08:42Z,MERGED,True,5598,0,106,https://github.com/ilammy,Carthage code samples for iOS and macOS,6,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/428,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/428#issuecomment-474487676,"This adds Xcode projects and code samples using Carthage packages of Themis.
Directory structure
Since we already have CocoaPods examples, new ones made the directory structure a bit messy. I have moved the code around so that it's a bit easier to navigate:
docs
└── examples
    ├── objc
    │   ├── iOS-CocoaPods   (moved)
    │   ├── iOS-Carthage    (new)
    │   └── macOS-Carthage  (new)
    └── swift
        ├── iOS-CocoaPods   (moved)
        ├── iOS-Carthage    (new)
        └── macOS-Carthage  (new)

All samples use the same code, just copy-pasted around.
How to use
In order to initialize Carthage project one must run
carthage bootstrap

in the project directory to pull the dependencies.
We pin Themis version to the current master (a415c1d).
Caveats
There is one caveat with new Objective-C samples: they import Themis as
#import <themis/themis.h>
while CocoaPods samples use the following form:
#import <objcthemis/objcthemis.h>
CocoaPods use some wild magic for that imports to be possible while Carthage projects use the resulting framework name. I have not found an easy way around that so it seems we'll have to live with this discrepancy.","@vixentael, could you please check that these examples can be run on a machine different than mine (and on a real iOS device as well)? Thanks in advance. I'm not sure that Xcode does all the necessary magic out of the box (e.g., bitcode stuff, etc.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,428,2019-03-19T17:36:38Z,2019-03-21T16:52:24Z,2019-03-28T18:08:42Z,MERGED,True,5598,0,106,https://github.com/ilammy,Carthage code samples for iOS and macOS,6,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/428,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/428#issuecomment-474588203,"This adds Xcode projects and code samples using Carthage packages of Themis.
Directory structure
Since we already have CocoaPods examples, new ones made the directory structure a bit messy. I have moved the code around so that it's a bit easier to navigate:
docs
└── examples
    ├── objc
    │   ├── iOS-CocoaPods   (moved)
    │   ├── iOS-Carthage    (new)
    │   └── macOS-Carthage  (new)
    └── swift
        ├── iOS-CocoaPods   (moved)
        ├── iOS-Carthage    (new)
        └── macOS-Carthage  (new)

All samples use the same code, just copy-pasted around.
How to use
In order to initialize Carthage project one must run
carthage bootstrap

in the project directory to pull the dependencies.
We pin Themis version to the current master (a415c1d).
Caveats
There is one caveat with new Objective-C samples: they import Themis as
#import <themis/themis.h>
while CocoaPods samples use the following form:
#import <objcthemis/objcthemis.h>
CocoaPods use some wild magic for that imports to be possible while Carthage projects use the resulting framework name. I have not found an easy way around that so it seems we'll have to live with this discrepancy.","confirm, works good on iOS and macOS",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,429,2019-03-21T17:11:44Z,2019-03-23T02:01:22Z,2019-03-28T18:08:44Z,MERGED,True,0,41,6,https://github.com/ilammy,Drop SECURE_COMPARATOR_ENABLED usage,2,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/429,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/429,"This feature flag is no longer supported so there is no need to do a special dance during imports and in example Podfiles. Secure Comparator is now always a part of Obj-C Themis so it's already imported.
Commit b503b31 made Secure Comparator available without feature flags and SECURE_COMPARATOR_ENABLED is effectively useless since then.","This feature flag is no longer supported so there is no need to do a special dance during imports and in example Podfiles. Secure Comparator is now always a part of Obj-C Themis so it's already imported.
Commit b503b31 made Secure Comparator available without feature flags and SECURE_COMPARATOR_ENABLED is effectively useless since then.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,430,2019-03-22T13:30:02Z,2019-03-26T15:03:18Z,2019-03-28T18:07:55Z,MERGED,True,2,2,2,https://github.com/ilammy,Update Carthage dependencies,3,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/430,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/430,"Retarget OpenSSL dependency

Use the upstream repository of OpenSSL instead of my private fork, now that Marcin has merged Carthage support into the mainline.
Currently there is no suitable stable tag so pin a specific commit instead that is known to work.
Update the lock-file as well so that we get correct version after carthage bootstrap.

Use the latest stable version in examples

EDIT: commit reverted, we'll still pin the version in examples.
Remove version specifiers in Carthage examples which means that we'll always use the latest stable (tagged) version. At the moment this is provisional 0.10.5 version, then it will be 0.11, and so on.
Drop the lock-files as well and add them into .gitignore. That way the users will recreate the lock-files as necessary and won't commit them accidentally during development.","Retarget OpenSSL dependency

Use the upstream repository of OpenSSL instead of my private fork, now that Marcin has merged Carthage support into the mainline.
Currently there is no suitable stable tag so pin a specific commit instead that is known to work.
Update the lock-file as well so that we get correct version after carthage bootstrap.

Use the latest stable version in examples

EDIT: commit reverted, we'll still pin the version in examples.
Remove version specifiers in Carthage examples which means that we'll always use the latest stable (tagged) version. At the moment this is provisional 0.10.5 version, then it will be 0.11, and so on.
Drop the lock-files as well and add them into .gitignore. That way the users will recreate the lock-files as necessary and won't commit them accidentally during development.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,430,2019-03-22T13:30:02Z,2019-03-26T15:03:18Z,2019-03-28T18:07:55Z,MERGED,True,2,2,2,https://github.com/ilammy,Update Carthage dependencies,3,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/430,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/430#issuecomment-476192373,"Retarget OpenSSL dependency

Use the upstream repository of OpenSSL instead of my private fork, now that Marcin has merged Carthage support into the mainline.
Currently there is no suitable stable tag so pin a specific commit instead that is known to work.
Update the lock-file as well so that we get correct version after carthage bootstrap.

Use the latest stable version in examples

EDIT: commit reverted, we'll still pin the version in examples.
Remove version specifiers in Carthage examples which means that we'll always use the latest stable (tagged) version. At the moment this is provisional 0.10.5 version, then it will be 0.11, and so on.
Drop the lock-files as well and add them into .gitignore. That way the users will recreate the lock-files as necessary and won't commit them accidentally during development.","All good except ignoring Carthage files.
Carthage best practices says do not ignore .resolved files:

Along the way, Carthage will have created some build artifacts. The most important of these is the Cartfile.resolved file, which lists the versions that were actually built for each framework. Make sure to commit your Cartfile.resolved, because anyone else using the project will need that file to build the same framework versions.

https://github.com/Carthage/Carthage#for-both-platforms",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,430,2019-03-22T13:30:02Z,2019-03-26T15:03:18Z,2019-03-28T18:07:55Z,MERGED,True,2,2,2,https://github.com/ilammy,Update Carthage dependencies,3,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/430,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/430#issuecomment-476198055,"Retarget OpenSSL dependency

Use the upstream repository of OpenSSL instead of my private fork, now that Marcin has merged Carthage support into the mainline.
Currently there is no suitable stable tag so pin a specific commit instead that is known to work.
Update the lock-file as well so that we get correct version after carthage bootstrap.

Use the latest stable version in examples

EDIT: commit reverted, we'll still pin the version in examples.
Remove version specifiers in Carthage examples which means that we'll always use the latest stable (tagged) version. At the moment this is provisional 0.10.5 version, then it will be 0.11, and so on.
Drop the lock-files as well and add them into .gitignore. That way the users will recreate the lock-files as necessary and won't commit them accidentally during development.","@vixentael,
The idea here is to not specify exact version in example Cartfiles so that the examples always use the latest stable version and we don't have to update them manually with every release. If Cartfile.resolved files are committed then the version will be effectively pinned (unless explicitly updated by the user), despite the Cartfile specifying 'the latest' version.
This is done only for examples. Themis itself still keeps the Cartfile.resolved file than pins the exact version of our OpenSSL dependency.
Which way do you prefer? Having the version pinned to examples, or having them automatically use the latest one?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,430,2019-03-22T13:30:02Z,2019-03-26T15:03:18Z,2019-03-28T18:07:55Z,MERGED,True,2,2,2,https://github.com/ilammy,Update Carthage dependencies,3,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/430,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/430#issuecomment-476201618,"Retarget OpenSSL dependency

Use the upstream repository of OpenSSL instead of my private fork, now that Marcin has merged Carthage support into the mainline.
Currently there is no suitable stable tag so pin a specific commit instead that is known to work.
Update the lock-file as well so that we get correct version after carthage bootstrap.

Use the latest stable version in examples

EDIT: commit reverted, we'll still pin the version in examples.
Remove version specifiers in Carthage examples which means that we'll always use the latest stable (tagged) version. At the moment this is provisional 0.10.5 version, then it will be 0.11, and so on.
Drop the lock-files as well and add them into .gitignore. That way the users will recreate the lock-files as necessary and won't commit them accidentally during development.","I think we should leave examples stick to the exact release tag, because in case of backwards compatibility changes, users won't be able to run examples, which is bad.
It's better that we do some job during release to check that examples are working and to update 'em, than users will see not-working examples :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,430,2019-03-22T13:30:02Z,2019-03-26T15:03:18Z,2019-03-28T18:07:55Z,MERGED,True,2,2,2,https://github.com/ilammy,Update Carthage dependencies,3,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/430,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/430#issuecomment-476628092,"Retarget OpenSSL dependency

Use the upstream repository of OpenSSL instead of my private fork, now that Marcin has merged Carthage support into the mainline.
Currently there is no suitable stable tag so pin a specific commit instead that is known to work.
Update the lock-file as well so that we get correct version after carthage bootstrap.

Use the latest stable version in examples

EDIT: commit reverted, we'll still pin the version in examples.
Remove version specifiers in Carthage examples which means that we'll always use the latest stable (tagged) version. At the moment this is provisional 0.10.5 version, then it will be 0.11, and so on.
Drop the lock-files as well and add them into .gitignore. That way the users will recreate the lock-files as necessary and won't commit them accidentally during development.",Okay then. I have reverted the commit that unpins the versions in examples. They will be updated in a separate PR after this one is merged and we know the commit that we need to pin examples to.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,430,2019-03-22T13:30:02Z,2019-03-26T15:03:18Z,2019-03-28T18:07:55Z,MERGED,True,2,2,2,https://github.com/ilammy,Update Carthage dependencies,3,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/430,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/430#issuecomment-476690270,"Retarget OpenSSL dependency

Use the upstream repository of OpenSSL instead of my private fork, now that Marcin has merged Carthage support into the mainline.
Currently there is no suitable stable tag so pin a specific commit instead that is known to work.
Update the lock-file as well so that we get correct version after carthage bootstrap.

Use the latest stable version in examples

EDIT: commit reverted, we'll still pin the version in examples.
Remove version specifiers in Carthage examples which means that we'll always use the latest stable (tagged) version. At the moment this is provisional 0.10.5 version, then it will be 0.11, and so on.
Drop the lock-files as well and add them into .gitignore. That way the users will recreate the lock-files as necessary and won't commit them accidentally during development.","CircleCI tests are not needed in this case, only Bitrise makes sense.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,432,2019-03-26T16:41:33Z,2019-03-26T19:02:49Z,2019-03-28T18:07:13Z,MERGED,True,2,2,2,https://github.com/ilammy,Update OpenSSL version for Carthage,1,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/432,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/432,"OpenSSL package has been updated and tagged, now we can use ~> dependencies using proper versions instead of git commit hashes. Update Cartfiles and lock files accordingly.","OpenSSL package has been updated and tagged, now we can use ~> dependencies using proper versions instead of git commit hashes. Update Cartfiles and lock files accordingly.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,432,2019-03-26T16:41:33Z,2019-03-26T19:02:49Z,2019-03-28T18:07:13Z,MERGED,True,2,2,2,https://github.com/ilammy,Update OpenSSL version for Carthage,1,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/432,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/432#issuecomment-476748619,"OpenSSL package has been updated and tagged, now we can use ~> dependencies using proper versions instead of git commit hashes. Update Cartfiles and lock files accordingly.","Example updates have been moved into #433 which is going to be merged later, when 0.11.0 is actually available.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,433,2019-03-26T17:01:48Z,2019-03-28T17:24:21Z,2019-03-28T18:07:12Z,MERGED,True,12,12,8,https://github.com/ilammy,Update Carthage examples to 0.11.0,1,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/433,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/433,"Update Carthage examples to use 0.11.0 tag on Themis and expected lock-files for that version.
Merge this after 0.11.0 is actually tagged and released.","Update Carthage examples to use 0.11.0 tag on Themis and expected lock-files for that version.
Merge this after 0.11.0 is actually tagged and released.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,433,2019-03-26T17:01:48Z,2019-03-28T17:24:21Z,2019-03-28T18:07:12Z,MERGED,True,12,12,8,https://github.com/ilammy,Update Carthage examples to 0.11.0,1,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/433,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/433#issuecomment-477685939,"Update Carthage examples to use 0.11.0 tag on Themis and expected lock-files for that version.
Merge this after 0.11.0 is actually tagged and released.","We've got a tag! Undrafting this PR...
Checked manually that all Carthage examples work fine on macOS 10.14.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,434,2019-03-26T19:07:44Z,2019-03-27T14:46:43Z,2019-03-27T14:46:48Z,MERGED,True,763,41,23,https://github.com/shadinua,Deprecate using rubythemis.rb,3,"['W-RbThemis :diamonds:', 'installation']",https://github.com/cossacklabs/themis/pull/434,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/434,"The rubythemis gem is deprecated. The name in the require clause and the name of the gem are expected to have the same name.

rubythemis.rb copied to rbthemis.rb
added deprecation warning to rubythemis.rb","The rubythemis gem is deprecated. The name in the require clause and the name of the gem are expected to have the same name.

rubythemis.rb copied to rbthemis.rb
added deprecation warning to rubythemis.rb",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,435,2019-03-28T14:18:14Z,2019-03-28T14:52:09Z,2019-03-28T15:06:01Z,MERGED,True,296,189,5,https://github.com/vixentael,"Update readme, makefile and changelog for `0.11.0`",15,['docs :books:'],https://github.com/cossacklabs/themis/pull/435,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/435,Because we gonna release Themis!,Because we gonna release Themis!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,436,2019-03-28T16:02:38Z,2019-03-28T17:03:42Z,2019-03-28T18:05:33Z,MERGED,True,7,10,3,https://github.com/ilammy,PyThemis 0.11,3,['W-PyThemis :snake:'],https://github.com/cossacklabs/themis/pull/436,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/436,"Bump PyThemis version to 0.11


Drop Windows support from PyPi package
Themis no longer officially support Windows, therefore we should not claim that we do in PyPi package metadata.


Remove explicit language list from README
Do not bother maintaining it accurate in the future.



Published on PyPi.
Confirmed locally that the package works with Themis 0.11.","Bump PyThemis version to 0.11


Drop Windows support from PyPi package
Themis no longer officially support Windows, therefore we should not claim that we do in PyPi package metadata.


Remove explicit language list from README
Do not bother maintaining it accurate in the future.



Published on PyPi.
Confirmed locally that the package works with Themis 0.11.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,437,2019-03-28T16:17:31Z,2019-03-28T17:03:15Z,2019-03-28T18:05:34Z,MERGED,True,3,3,1,https://github.com/ilammy,RubyThemis 0.11,1,['W-RbThemis :diamonds:'],https://github.com/cossacklabs/themis/pull/437,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/437,"Bump RubyThemis version to 0.11


Pushed on RubyGems.
Confirmed locally that the package works with Themis 0.11.","Bump RubyThemis version to 0.11


Pushed on RubyGems.
Confirmed locally that the package works with Themis 0.11.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,437,2019-03-28T16:17:31Z,2019-03-28T17:03:15Z,2019-03-28T18:05:34Z,MERGED,True,3,3,1,https://github.com/ilammy,RubyThemis 0.11,1,['W-RbThemis :diamonds:'],https://github.com/cossacklabs/themis/pull/437,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/437#issuecomment-477685197,"Bump RubyThemis version to 0.11


Pushed on RubyGems.
Confirmed locally that the package works with Themis 0.11.","this change doesn't affect android, so android tests can be skipped",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,438,2019-03-28T16:34:02Z,2019-03-28T17:03:34Z,2019-03-28T18:05:34Z,MERGED,True,10,5,4,https://github.com/ilammy,Rust-Themis 0.11,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/438,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/438,"Bump Rust-Themis version to 0.11


Published on crates.io.
Confirmed locally that the package works with Themis 0.11.","Bump Rust-Themis version to 0.11


Published on crates.io.
Confirmed locally that the package works with Themis 0.11.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,439,2019-03-28T17:15:38Z,2019-03-28T17:50:26Z,2019-09-27T13:31:08Z,MERGED,True,53,68,15,https://github.com/vixentael,"Update packages for 0.11.0: ios, macos, php, js, android, java",4,"['O-iOS :iphone:', 'W-PHPThemis :elephant:', 'O-Android :robot:', 'W-JavaThemis :coffee:', 'O-macOS :computer:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/439,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/439,"Android: update build.gradle and push new themis to
https://bintray.com/cossacklabs/maven/themis

Update Android examples here https://github.com/cossacklabs/themis-java-examples


iOS: update podspec, push it, and update Cocoapods examples


update jsthemis


update php version","Android: update build.gradle and push new themis to
https://bintray.com/cossacklabs/maven/themis

Update Android examples here https://github.com/cossacklabs/themis-java-examples


iOS: update podspec, push it, and update Cocoapods examples


update jsthemis


update php version",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,440,2019-03-28T17:56:35Z,2019-03-28T18:10:49Z,2019-03-28T18:10:53Z,MERGED,True,26,18,2,https://github.com/vixentael,0.11.0: update carthage inner version; update cocoapods tests,1,"['O-iOS :iphone:', 'O-macOS :computer:']",https://github.com/cossacklabs/themis/pull/440,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/440,"Update version of Carthage framework
Re-link cocoapods tests to use latest 0.11.0 themis pod","Update version of Carthage framework
Re-link cocoapods tests to use latest 0.11.0 themis pod",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,441,2019-03-28T19:11:30Z,2019-03-28T19:17:43Z,2019-04-01T10:00:46Z,MERGED,True,1,0,1,https://github.com/ilammy,"Include ""tools"" into source tarball",1,['infrastructure'],https://github.com/cossacklabs/themis/pull/441,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/441,"The Makefile now includes AFL support files which require the ""tools"" directory to be present in the distribution tarball. Well, we should put integration testing tools there anyway for all make targets to work. So just add this directory to tarball.
This fixes distribution packaging.","The Makefile now includes AFL support files which require the ""tools"" directory to be present in the distribution tarball. Well, we should put integration testing tools there anyway for all make targets to work. So just add this directory to tarball.
This fixes distribution packaging.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,442,2019-03-31T16:27:38Z,2019-04-01T09:38:00Z,2019-04-01T10:00:28Z,MERGED,True,5,5,1,https://github.com/ilammy,Fix pkg-config packaging on Linux,1,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/442,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/442,"Add *_pkgconfig targets to dependencies of deb and rpm targets, so that *.pc files are actually generated before they are packaged. Currently these are included only into all target which is not used during packaging. (However, it is used for install target.) Now the *.pc files will be included when only make deb or make rpm is run.
Also, move the *.pc files into libthemis-dev and libthemis-devel packages, out from the libthemis package which should contain only (shared) libraries.","Add *_pkgconfig targets to dependencies of deb and rpm targets, so that *.pc files are actually generated before they are packaged. Currently these are included only into all target which is not used during packaging. (However, it is used for install target.) Now the *.pc files will be included when only make deb or make rpm is run.
Also, move the *.pc files into libthemis-dev and libthemis-devel packages, out from the libthemis package which should contain only (shared) libraries.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,442,2019-03-31T16:27:38Z,2019-04-01T09:38:00Z,2019-04-01T10:00:28Z,MERGED,True,5,5,1,https://github.com/ilammy,Fix pkg-config packaging on Linux,1,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/442,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/442#issuecomment-478497933,"Add *_pkgconfig targets to dependencies of deb and rpm targets, so that *.pc files are actually generated before they are packaged. Currently these are included only into all target which is not used during packaging. (However, it is used for install target.) Now the *.pc files will be included when only make deb or make rpm is run.
Also, move the *.pc files into libthemis-dev and libthemis-devel packages, out from the libthemis package which should contain only (shared) libraries.",Also available as ilammy/pkg-config branch in the main fork.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,442,2019-03-31T16:27:38Z,2019-04-01T09:38:00Z,2019-04-01T10:00:28Z,MERGED,True,5,5,1,https://github.com/ilammy,Fix pkg-config packaging on Linux,1,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/442,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/442#issuecomment-478508701,"Add *_pkgconfig targets to dependencies of deb and rpm targets, so that *.pc files are actually generated before they are packaged. Currently these are included only into all target which is not used during packaging. (However, it is used for install target.) Now the *.pc files will be included when only make deb or make rpm is run.
Also, move the *.pc files into libthemis-dev and libthemis-devel packages, out from the libthemis package which should contain only (shared) libraries.",Android builds on CircleCI have some transient issues with simulator version. Let's ignore it for now. Linux packages are not tested by CircleCI anyway...,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,443,2019-03-31T16:30:41Z,2019-04-01T09:38:59Z,2019-04-01T10:01:05Z,MERGED,True,2,2,2,https://github.com/ilammy,Relax compatibility constraints,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/443,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/443,"Initially I thought that it would be good to pin themis to a particular version of libthemis-sys package (more stability and predictability, etc.) However, if you think about it, this strategy requires updating themis crate whenever there is patch update in libthemis-sys (ditto for libthemis-sys and libthemis-src). It may become a bother so I'd rather avoid it.
We adhere to semver, therefore patch version updates should be compatible between minor versions. Relax the dependency constraints to allow patch updates between the crates.","Initially I thought that it would be good to pin themis to a particular version of libthemis-sys package (more stability and predictability, etc.) However, if you think about it, this strategy requires updating themis crate whenever there is patch update in libthemis-sys (ditto for libthemis-sys and libthemis-src). It may become a bother so I'd rather avoid it.
We adhere to semver, therefore patch version updates should be compatible between minor versions. Relax the dependency constraints to allow patch updates between the crates.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,443,2019-03-31T16:30:41Z,2019-04-01T09:38:59Z,2019-04-01T10:01:05Z,MERGED,True,2,2,2,https://github.com/ilammy,Relax compatibility constraints,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/443,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/443#issuecomment-478509041,"Initially I thought that it would be good to pin themis to a particular version of libthemis-sys package (more stability and predictability, etc.) However, if you think about it, this strategy requires updating themis crate whenever there is patch update in libthemis-sys (ditto for libthemis-sys and libthemis-src). It may become a bother so I'd rather avoid it.
We adhere to semver, therefore patch version updates should be compatible between minor versions. Relax the dependency constraints to allow patch updates between the crates.",Android has some transient issues now. x86_64 build has checked Rust code so we can merge this.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,444,2019-03-31T16:35:15Z,2019-04-01T10:13:41Z,2019-04-07T11:46:09Z,MERGED,True,87,12,3,https://github.com/ilammy,Try standard system path when pkg-config fails,5,"['installation', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/444,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/444,"Currently Rust-Themis requires pkg-config to successfully find Themis. If it doesn't (for whatever reason) then the crate won't compile. However, the library might be correctly installed in the system under standard paths. This allows us to easily link against it dynamically. Let's support this use case to allow non-packaged installations.
If pkg-config successfully locates core Themis library then we just go with it. Otherwise we effectively try to run
cc -shared src/dummy.c -lthemis

and see if that compiles. If it does then apparently Themis is installed and we can use it by emitting appropriate instructions to Cargo.
Note that we support only dynamic linkage in this case. Static linkage will not work because we will have to figure out transitive dependencies like Soter and OpenSSL, which is the reason for preferring pkg-config.","Currently Rust-Themis requires pkg-config to successfully find Themis. If it doesn't (for whatever reason) then the crate won't compile. However, the library might be correctly installed in the system under standard paths. This allows us to easily link against it dynamically. Let's support this use case to allow non-packaged installations.
If pkg-config successfully locates core Themis library then we just go with it. Otherwise we effectively try to run
cc -shared src/dummy.c -lthemis

and see if that compiles. If it does then apparently Themis is installed and we can use it by emitting appropriate instructions to Cargo.
Note that we support only dynamic linkage in this case. Static linkage will not work because we will have to figure out transitive dependencies like Soter and OpenSSL, which is the reason for preferring pkg-config.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,445,2019-04-01T10:21:35Z,2019-04-01T10:44:42Z,2019-04-07T11:46:34Z,MERGED,True,6,3,3,https://github.com/ilammy,Rust-Themis 0.11.1,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/445,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/445,"Cut a new patch release which fixes package installation. We need to update only libthemis-sys, but due to old dependencies themis crate also requires an update.","Cut a new patch release which fixes package installation. We need to update only libthemis-sys, but due to old dependencies themis crate also requires an update.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,446,2019-04-01T14:15:52Z,2019-04-01T15:39:43Z,2019-04-01T15:39:48Z,MERGED,True,13,11,1,https://github.com/shadinua,Add libssl-dev/openssl-devel to the list of dev packages dependencies,1,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/446,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/446,"added libssl-dev as a dependency to the libthemis-dev DEB packages
added openssl-devel as a dependency to the libthemis-devel RPM package
renamed DEBIAN_* -> DEB_* variables to be consonant to RPM_* variables and more accurately reflect the essence","added libssl-dev as a dependency to the libthemis-dev DEB packages
added openssl-devel as a dependency to the libthemis-devel RPM package
renamed DEBIAN_* -> DEB_* variables to be consonant to RPM_* variables and more accurately reflect the essence",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,447,2019-04-02T11:54:43Z,2019-04-03T10:11:18Z,2019-04-03T10:36:26Z,MERGED,True,2,1,2,https://github.com/ilammy,Optimize embedded BoringSSL build,1,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/447,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/447,"Don't build unnecessary libraries, binaries, tests, etc. Build only two static libraries that we need. This results in considerable time saving during the builds: BoringSSL contains quite a few tests and tools which we do not run and use, yet they get built.
Native
Before:
$ time make all ENGINE=boringssl

real    4m36.341s
user    3m44.060s
sys     0m33.924s

After:
$ time make all ENGINE=boringssl

real    1m56.910s
user    1m29.960s
sys     0m19.392s

Nuff said.
Android
Before:
$ time ./gradlew --no-daemon --no-parallel --max-workers=2 assembleDebug

real    34m46.028s
user    29m9.580s
sys     6m39.280s

After:
$ time ./gradlew --no-daemon --no-parallel --max-workers=2 assembleDebug

real    12m46.028s
user    9m1.880s
sys     2m52.020s

Admittedly, the difference may be smaller—as we still have to wait for Gradle to download the whole Internet during Android build—but that's still a significant improvement because there are four architectures that we need to build BoringSSL for.","Don't build unnecessary libraries, binaries, tests, etc. Build only two static libraries that we need. This results in considerable time saving during the builds: BoringSSL contains quite a few tests and tools which we do not run and use, yet they get built.
Native
Before:
$ time make all ENGINE=boringssl

real    4m36.341s
user    3m44.060s
sys     0m33.924s

After:
$ time make all ENGINE=boringssl

real    1m56.910s
user    1m29.960s
sys     0m19.392s

Nuff said.
Android
Before:
$ time ./gradlew --no-daemon --no-parallel --max-workers=2 assembleDebug

real    34m46.028s
user    29m9.580s
sys     6m39.280s

After:
$ time ./gradlew --no-daemon --no-parallel --max-workers=2 assembleDebug

real    12m46.028s
user    9m1.880s
sys     2m52.020s

Admittedly, the difference may be smaller—as we still have to wait for Gradle to download the whole Internet during Android build—but that's still a significant improvement because there are four architectures that we need to build BoringSSL for.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,447,2019-04-02T11:54:43Z,2019-04-03T10:11:18Z,2019-04-03T10:36:26Z,MERGED,True,2,1,2,https://github.com/ilammy,Optimize embedded BoringSSL build,1,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/447,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/447#issuecomment-478964525,"Don't build unnecessary libraries, binaries, tests, etc. Build only two static libraries that we need. This results in considerable time saving during the builds: BoringSSL contains quite a few tests and tools which we do not run and use, yet they get built.
Native
Before:
$ time make all ENGINE=boringssl

real    4m36.341s
user    3m44.060s
sys     0m33.924s

After:
$ time make all ENGINE=boringssl

real    1m56.910s
user    1m29.960s
sys     0m19.392s

Nuff said.
Android
Before:
$ time ./gradlew --no-daemon --no-parallel --max-workers=2 assembleDebug

real    34m46.028s
user    29m9.580s
sys     6m39.280s

After:
$ time ./gradlew --no-daemon --no-parallel --max-workers=2 assembleDebug

real    12m46.028s
user    9m1.880s
sys     2m52.020s

Admittedly, the difference may be smaller—as we still have to wait for Gradle to download the whole Internet during Android build—but that's still a significant improvement because there are four architectures that we need to build BoringSSL for.","awesome, how you find it?)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,447,2019-04-02T11:54:43Z,2019-04-03T10:11:18Z,2019-04-03T10:36:26Z,MERGED,True,2,1,2,https://github.com/ilammy,Optimize embedded BoringSSL build,1,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/447,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/447#issuecomment-478997662,"Don't build unnecessary libraries, binaries, tests, etc. Build only two static libraries that we need. This results in considerable time saving during the builds: BoringSSL contains quite a few tests and tools which we do not run and use, yet they get built.
Native
Before:
$ time make all ENGINE=boringssl

real    4m36.341s
user    3m44.060s
sys     0m33.924s

After:
$ time make all ENGINE=boringssl

real    1m56.910s
user    1m29.960s
sys     0m19.392s

Nuff said.
Android
Before:
$ time ./gradlew --no-daemon --no-parallel --max-workers=2 assembleDebug

real    34m46.028s
user    29m9.580s
sys     6m39.280s

After:
$ time ./gradlew --no-daemon --no-parallel --max-workers=2 assembleDebug

real    12m46.028s
user    9m1.880s
sys     2m52.020s

Admittedly, the difference may be smaller—as we still have to wait for Gradle to download the whole Internet during Android build—but that's still a significant improvement because there are four architectures that we need to build BoringSSL for.","Hm... Integration tests and x86_64 build fail on CircleCI at the moment because CircleCI builders seem to be throttled by Canonical's repositories and can't update all packages in time. I hope this is a transient issue.
Anyway, I looked at Android build on CircleCI.

Before: 5:58 build (12:27 total)
After: 2:49 build (8:34 total)

I'll take it.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/448,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/448#issuecomment-479500731,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.",How this will affect current users that have Themis installed in /usr?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/448#issuecomment-479569364,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","Good question...
Assuming these are users that install from source code, I can see make uninstall breaking if they wish to use newer version to uninstall the previous one. The users will have to explicitly set PREFIX=/usr to uninstall the previous version from correct path.
Similarly, if Themis 0.11 is installed to /usr (by current default) then installing Themis 0.12 to /usr/local will not overwrite the previous install (as it is now). Instead, Themis 0.12 will be installed alongside Themis 0.11. Usually /usr/local takes precedence over /usr, so effectively Themis 0.12 should be used. But that depends on the software, and it may break in case of misconfiguration. In particular, Themis libraries do not have versions embedded into them so the software can load a wrong library.
Overall, I feel that we will have to ask those users who install from source to cleanly uninstall previous version of Themis using previous source code, and then install an upgrade using the new source code.
Alternatively, I think we could detect whether Themis is already installed to /usr and not managed by package manager. If so then we keep using the old prefix, otherwise default to /usr/local (unless the user explicitly sets something). Together with that we could urge users to switch to the new default and eventually drop the special case.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/448#issuecomment-479845468,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","@vixentael I've pushed a commit that implements the backwards compatibility behavior described in the previous commit.
With that, on systems that do not have Themis installed (yet) we'll be using the new /usr/local prefix. However, if the system already has Themis manually installed to /usr (not by the package manager) then we'll keep using /usr. If the user explicitly specifies the prefix then we'll be using that instead.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/shadinua,5,https://github.com/cossacklabs/themis/pull/448#issuecomment-479883892,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","I'd avoid to set path automatically. How about next behaviour:

if we detected themis installed in path differ from /usr/local, but included into ldconfig, then stop with special error code (differ than default ones);
add environment variable, for example THEMIS_ALLOW_MULTIPLE_INSTALLS that allows to install even when previous installation detected.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/448#issuecomment-480718273,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","@shadinua, well, that's a reasonable approach as well. Though, I feel that installing a local version to /usr/local in parallel with system version in /usr will be quite often used by developers for local testing, so I don't think that we should make it more annoying. We can't account for all the conflicts that are possible by multiple installations.
Ideally, I'd avoid doing all this guesswork altogether (as it's bound to fail for someone, human perversion has no limits). If you install Themis from source then well, do manage your versions yourself if you insist on not using any sort of package manager.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/448#issuecomment-480728046,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","I've added one more convenience for the users: now we print the installation prefix so the users know where Themis has been installed to or removed from.
Now, what should we do about multiple installations and upgrades?


Decline this PR. Keep installation paths as is.
Pro: users can continue being blissfully ignorant of where they install stuff.
Con: sudo make install on a system with installed packages overwrites the packages.


Accept current PR. Prefer /usr/local, unless there is an existing installation in /usr.
Pro: users can still be somewhat ignorant.
Pro: we won't overwrite package manager installations anymore.
Con: complicates installation, endorses bad behavior.


Revert guesswork, follow @shadinua. Deny multiple installations, unless asked to.
Pro: not taking chances, fail early if we detect a conflict.
Pro: still allows multiple installs if needed.
Con: complicates installation, has to be documented.


Revert guesswork. Just install to /usr/local from now on.
Pro: dead simple.
Con: previous installation to /usr has to be manually removed.


Any other options out there?


@vixentael?
As for paths, I believe that we'd run into conflicts either way if we ever going to fix the mismatch on CentOS (libraries should go to /usr/lib64, not /usr/lib). For that we will have to ask the users to cleanly remove their previous installation of Themis and install the new version from scratch. That gives us freedom to change the new installation path however we like.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/shadinua,8,https://github.com/cossacklabs/themis/pull/448#issuecomment-480751994,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","Though, I feel that installing a local version to /usr/local in parallel with system version in /usr will be quite often used by developers for local testing, so I don't think that we should make it more annoying.

By default /usr/local/lib is included to ldconfig search paths of most distributives. Thus in case when we have different versions of library that installed simultaneously in /usr/lib and /usr/local/lib, it will change behaviour anyway. I wouldn't like to think that installing the new version of the library for development purposes while we changing behaviour of whole system is the right way. Isn't it better to put the library in the project folder?

Ideally, I'd avoid doing all this guesswork altogether ...

I completely agree. That is why I'd suggest to choose one of standard, predictable and simple variants to solve this issue.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/ilammy,9,https://github.com/cossacklabs/themis/pull/448#issuecomment-480769535,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","Isn't it better to put the library in the project folder?

This is involves much more hassle than make install. You have to get Themis to your project directory, setup all lookup paths in your project, etc. I don't really imagine people using make install for that. I'd personally would just copy binaries out of build directory if I don't want to keep Themis installed in my system.

By default /usr/local/lib is included to ldconfig search paths of most distributives. Thus in case when we have different versions of library that installed simultaneously in /usr/lib and /usr/local/lib, it will change behaviour anyway.

Yeah, that's exactly the point. Imagine you're using PyThemis and there's some bug in the core library. Your core library is installed from package repositories. However, you are able to grab the latest source code, sudo make install it, check whether the bug is fixed for you (without having to fiddle with Python library lookup), and then sudo make uninstall everything back. And the system-managed installation of Themis is kept intact.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/ilammy,10,https://github.com/cossacklabs/themis/pull/448#issuecomment-480772998,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","Another common approach is system-wide installation to /opt, when you do make install PREFIX=/opt/themis-0.11 and configure multiple projects to use the same installation. I believe we should allow such installations without any additional required flags and variables, regardless of whatever is or is not installed in /usr and /usr/local.
I think that we can keep it simple by installing to specified prefix if it is explicitly requested by the user. If they request it, they have their reasons and did their homework.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/shadinua,11,https://github.com/cossacklabs/themis/pull/448#issuecomment-481167522,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","Yeah, that's exactly the point. Imagine you're using PyThemis and there's some bug in the core library. Your core library is installed from package repositories. ...

There are too many cases. For some of them, this is an advantage. For some — a disadvantage. These libraries can be installed not only on the developers' machines, where changing in the behaviour of the whole system is normal.
In the proposed variant, parallel installation of the library using make install is absolutely possible. Howeve, in my opinion, for responsible libraries, such as Themis, it is better to be sure that the user is consciously doing this.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/shadinua,12,https://github.com/cossacklabs/themis/pull/448#issuecomment-481172738,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","Well. I'll not insist on that behaviour. I'd prefer to have Makefile without any extended logic inside.
Let's choose variant #4. But we have to implement CentOS detection to set correct paths.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/vixentael,13,https://github.com/cossacklabs/themis/pull/448#issuecomment-481182151,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","Let's choose variant #4. But we have to implement CentOS detection to set correct paths.

With this option I would feel better if we notify user that installation path was changed. For example, if we detect that Themis is already installed in /usr, we can write a warning log message after successful installation ~ ""Multiple Themis installation found. If you didn't do it intentionally consider removing old versions.""",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,448,2019-04-03T11:06:50Z,2019-04-10T09:00:18Z,2019-04-10T09:00:23Z,MERGED,True,28,14,1,https://github.com/ilammy,"Use ""/usr/local"" as default prefix for ""make install""",5,['installation'],https://github.com/cossacklabs/themis/pull/448,https://github.com/ilammy,14,https://github.com/cossacklabs/themis/pull/448#issuecomment-481232710,"Conventional filesystem standards imply that /usr prefix should be used only by system package managers. Custom installations should go to /usr/local by default. However, on Linux machines make install installs to /usr, messing with package manager installations. Let's install to /usr/local/ everywhere.
However, we should keep /usr prefix for packaging, therefore override the default for deb and rpm targets.","@shadinua @vixentael I have reverted the 'AI-commit' and added a simple check with a warning if we detect Themis in both /usr and /usr/local simultaneously, suggesting to remove the (presumed) old installation from /usr and keep installations by make install in /usr/local.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,449,2019-04-03T11:09:29Z,2019-04-04T13:49:11Z,2019-04-04T15:35:25Z,CLOSED,False,81,49,6,https://github.com/ilammy,Common Makefile rules,3,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/449,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/449,"Let's remove duplication across the makefile rules, starting with the ones for linking static and shared libraries.
Add fixed rules for producing all libfoo.a, libfoo.so, libfoo.dylib libraries. Now we build all libraries in the same way while still respecting the dependencies. Contents of the libraries is determined from their dependencies (object files).
Note that we make sure to keep some idiosyncrasies:

static libraries are made from object files
shared libraries are made from object files and static libraries
shared libraries have different extensions on Linux and macOS
we need to apply ""install_name_tool"" on macOS after linkage

The most interesting thing here is how we link shared libraries against their dependencies. This is done by adding necessary flags to per-target LDFLAGS variable. Note that it uses private modifier. Unfortunately, this modifier has been added in GNU make 3.82, but most macOS versions have make 3.81 preinstalled by default. This means that macOS users will have to install a newer version (e.g., from Homebrew).
This refactoring also improves linkage of Themis JNI wrapper. Now we make sure to embed static libraries into the JNI shared library, not link against something installed in the system. This should make life of Java developers a bit easier.
Finally, note that we keep the old phony targets like themis_shared. Not only are they important for backwards compatibility, but they are genuinely useful for humans.

Merge COVERLDFLAGS into LDFLAGS

Just use LDFLAGS everywhere. If we build Themis for coverage analysis then we need to add relevant flags to all compiled libraries and tools. There is no need to keep a separate variable for that.","Let's remove duplication across the makefile rules, starting with the ones for linking static and shared libraries.
Add fixed rules for producing all libfoo.a, libfoo.so, libfoo.dylib libraries. Now we build all libraries in the same way while still respecting the dependencies. Contents of the libraries is determined from their dependencies (object files).
Note that we make sure to keep some idiosyncrasies:

static libraries are made from object files
shared libraries are made from object files and static libraries
shared libraries have different extensions on Linux and macOS
we need to apply ""install_name_tool"" on macOS after linkage

The most interesting thing here is how we link shared libraries against their dependencies. This is done by adding necessary flags to per-target LDFLAGS variable. Note that it uses private modifier. Unfortunately, this modifier has been added in GNU make 3.82, but most macOS versions have make 3.81 preinstalled by default. This means that macOS users will have to install a newer version (e.g., from Homebrew).
This refactoring also improves linkage of Themis JNI wrapper. Now we make sure to embed static libraries into the JNI shared library, not link against something installed in the system. This should make life of Java developers a bit easier.
Finally, note that we keep the old phony targets like themis_shared. Not only are they important for backwards compatibility, but they are genuinely useful for humans.

Merge COVERLDFLAGS into LDFLAGS

Just use LDFLAGS everywhere. If we build Themis for coverage analysis then we need to add relevant flags to all compiled libraries and tools. There is no need to keep a separate variable for that.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,449,2019-04-03T11:09:29Z,2019-04-04T13:49:11Z,2019-04-04T15:35:25Z,CLOSED,False,81,49,6,https://github.com/ilammy,Common Makefile rules,3,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/449,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/449#issuecomment-479504565,"Let's remove duplication across the makefile rules, starting with the ones for linking static and shared libraries.
Add fixed rules for producing all libfoo.a, libfoo.so, libfoo.dylib libraries. Now we build all libraries in the same way while still respecting the dependencies. Contents of the libraries is determined from their dependencies (object files).
Note that we make sure to keep some idiosyncrasies:

static libraries are made from object files
shared libraries are made from object files and static libraries
shared libraries have different extensions on Linux and macOS
we need to apply ""install_name_tool"" on macOS after linkage

The most interesting thing here is how we link shared libraries against their dependencies. This is done by adding necessary flags to per-target LDFLAGS variable. Note that it uses private modifier. Unfortunately, this modifier has been added in GNU make 3.82, but most macOS versions have make 3.81 preinstalled by default. This means that macOS users will have to install a newer version (e.g., from Homebrew).
This refactoring also improves linkage of Themis JNI wrapper. Now we make sure to embed static libraries into the JNI shared library, not link against something installed in the system. This should make life of Java developers a bit easier.
Finally, note that we keep the old phony targets like themis_shared. Not only are they important for backwards compatibility, but they are genuinely useful for humans.

Merge COVERLDFLAGS into LDFLAGS

Just use LDFLAGS everywhere. If we build Themis for coverage analysis then we need to add relevant flags to all compiled libraries and tools. There is no need to keep a separate variable for that.","Unfortunately, this modifier has been added in GNU make 3.82, but most macOS versions have make 3.81 preinstalled by default. This means that macOS users will have to install a newer version (e.g., from Homebrew).

Need to add this to the docs (if macOS users will decide to build Themis from sources).
Also can we add some warning inside Makefile itself? Like ""on macOS please use make 3.82, which is available after brew install make""




Now we make sure to embed static libraries into the JNI shared library, not link against something installed in the system.

Should test how Java examples are working. Currently they load library as
System.loadLibrary(""themis_jni"");
https://github.com/cossacklabs/themis/blob/master/src/wrappers/themis/java/com/cossacklabs/themis/SecureCell.java#L26
Example project can be found in cossacklabs/themis-java-examples.
Need to make sure that library linking works fine if no Themis Core library installed in the system.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,449,2019-04-03T11:09:29Z,2019-04-04T13:49:11Z,2019-04-04T15:35:25Z,CLOSED,False,81,49,6,https://github.com/ilammy,Common Makefile rules,3,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/449,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/449#issuecomment-479575096,"Let's remove duplication across the makefile rules, starting with the ones for linking static and shared libraries.
Add fixed rules for producing all libfoo.a, libfoo.so, libfoo.dylib libraries. Now we build all libraries in the same way while still respecting the dependencies. Contents of the libraries is determined from their dependencies (object files).
Note that we make sure to keep some idiosyncrasies:

static libraries are made from object files
shared libraries are made from object files and static libraries
shared libraries have different extensions on Linux and macOS
we need to apply ""install_name_tool"" on macOS after linkage

The most interesting thing here is how we link shared libraries against their dependencies. This is done by adding necessary flags to per-target LDFLAGS variable. Note that it uses private modifier. Unfortunately, this modifier has been added in GNU make 3.82, but most macOS versions have make 3.81 preinstalled by default. This means that macOS users will have to install a newer version (e.g., from Homebrew).
This refactoring also improves linkage of Themis JNI wrapper. Now we make sure to embed static libraries into the JNI shared library, not link against something installed in the system. This should make life of Java developers a bit easier.
Finally, note that we keep the old phony targets like themis_shared. Not only are they important for backwards compatibility, but they are genuinely useful for humans.

Merge COVERLDFLAGS into LDFLAGS

Just use LDFLAGS everywhere. If we build Themis for coverage analysis then we need to add relevant flags to all compiled libraries and tools. There is no need to keep a separate variable for that.","Also can we add some warning inside Makefile itself?

I think so. We could look into $(MAKE_VERSION) and check if it too old. Some of the targets might still work with with older make so I don't think we should make that a hard failure, but a warning would be nice.

Currently they load library as
System.loadLibrary(""themis_jni"");

If you're concerned over the name then it's correct. Java runtime adds lib prefix if necessary and appropriate extension to the library name. On Linux it expects libthemis_jni.so, on macOS libthemis_jni.dylib, on Windows it would be themis_jni.dll.
However, I am concerned about the library because it seems I still did not get linkage right. We do embed Themis and Soter, but linking against system OpenSSL might be broken. I'll look into that.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,449,2019-04-03T11:09:29Z,2019-04-04T13:49:11Z,2019-04-04T15:35:25Z,CLOSED,False,81,49,6,https://github.com/ilammy,Common Makefile rules,3,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/449,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/449#issuecomment-479894604,"Let's remove duplication across the makefile rules, starting with the ones for linking static and shared libraries.
Add fixed rules for producing all libfoo.a, libfoo.so, libfoo.dylib libraries. Now we build all libraries in the same way while still respecting the dependencies. Contents of the libraries is determined from their dependencies (object files).
Note that we make sure to keep some idiosyncrasies:

static libraries are made from object files
shared libraries are made from object files and static libraries
shared libraries have different extensions on Linux and macOS
we need to apply ""install_name_tool"" on macOS after linkage

The most interesting thing here is how we link shared libraries against their dependencies. This is done by adding necessary flags to per-target LDFLAGS variable. Note that it uses private modifier. Unfortunately, this modifier has been added in GNU make 3.82, but most macOS versions have make 3.81 preinstalled by default. This means that macOS users will have to install a newer version (e.g., from Homebrew).
This refactoring also improves linkage of Themis JNI wrapper. Now we make sure to embed static libraries into the JNI shared library, not link against something installed in the system. This should make life of Java developers a bit easier.
Finally, note that we keep the old phony targets like themis_shared. Not only are they important for backwards compatibility, but they are genuinely useful for humans.

Merge COVERLDFLAGS into LDFLAGS

Just use LDFLAGS everywhere. If we build Themis for coverage analysis then we need to add relevant flags to all compiled libraries and tools. There is no need to keep a separate variable for that.","It turns out that support for private modifier is not that great across GNU make versions typically found in the systems. This in turn prevents its usage with common build rule for shared libraries. It seems that I'll have to look for an alternate approach, or abandon the idea of using a common build rule for shared libraries.
My idea was to use a single rule for all libraries, derive their contents from make prerequisites and dependencies by setting LDFLAGS on per-target basis. This requires ""private"" modifier for LDFLAGS so that its value is not leaked to prerequisites. However, the following code behaves differently on macOS (make 3.81), on CentOS 7 (make 3.82), and on up-to-date Linux systems (make 4.1+).

[click to expand]
FLAGS ?= default

FLAGS += extra

all: target

target: private FLAGS += additional
deps:   private FLAGS += supplemental

target: deps
	@echo ""T: $(FLAGS)""

deps:
	@echo ""D: $(FLAGS)""
Ubuntu 16.04 with make 4.1 has expected behavior, with each private variable visible for its respective target:
D: default extra supplemental
T: default extra additional

CentOS 7 with make 3.82 still leaks the variable as if there were no 'private' modifier:
D: default extra additional supplemental
T: default extra additional

macOS 10.14 with make 3.81 fails to process the makefile as it thinks that 'private' is a target name:
make: *** No rule to make target `private', needed by `deps'.  Stop.


I have looked through release notes of GNU make, but did not find any information on bug fixes related to the ""private"" modifier. GNU Savannah bug tracker is pretty much unusable. So I have no idea which version exactly fixed this feature.
It seems that it would be best for us to avoid using this feature rather than force our users to upgrade their make installations...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,450,2019-04-04T16:39:19Z,2019-04-09T13:01:49Z,2019-04-09T13:12:45Z,MERGED,True,103,83,11,https://github.com/ilammy,Improve Makefile rules for linkage,6,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/450,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/450,"Second attempt to cleanup linkage rules in Makefiles (supersedes #449). Unfortunately, this does not decrease the amount of lines in Makefliles, but arguably it makes them a bit easier to read and maintain. As a side effect, this changeset also improves interdependencies between the libraries.

libsoter.a

contains Soter functions
requires appropriate cryptographic backend
developers need to link cryptographic backend themselves


libthemis.a

contains Themis functions
requires Soter and its dependencies
developers need to link Soter and maybe cryptographic backend themselves


libsoter.so

contains Soter functions
depends on or includes appropriate cryptographic backend
developers do not need to do anything extra


libthemis.so

contains Themis functions
depends on Soter dynamic library
developers do not need to do anything extra


libthemis_jni.so

contains JNI functions + Soter and Themis functions
depends on or includes appropriate cryptographic backend
developers do not need to do anything extra



(On macOS *.so files are called *.dylib, but are otherwise identical for the purposes of this PR.)
More implementation details are in commit messages.","Second attempt to cleanup linkage rules in Makefiles (supersedes #449). Unfortunately, this does not decrease the amount of lines in Makefliles, but arguably it makes them a bit easier to read and maintain. As a side effect, this changeset also improves interdependencies between the libraries.

libsoter.a

contains Soter functions
requires appropriate cryptographic backend
developers need to link cryptographic backend themselves


libthemis.a

contains Themis functions
requires Soter and its dependencies
developers need to link Soter and maybe cryptographic backend themselves


libsoter.so

contains Soter functions
depends on or includes appropriate cryptographic backend
developers do not need to do anything extra


libthemis.so

contains Themis functions
depends on Soter dynamic library
developers do not need to do anything extra


libthemis_jni.so

contains JNI functions + Soter and Themis functions
depends on or includes appropriate cryptographic backend
developers do not need to do anything extra



(On macOS *.so files are called *.dylib, but are otherwise identical for the purposes of this PR.)
More implementation details are in commit messages.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,450,2019-04-04T16:39:19Z,2019-04-09T13:01:49Z,2019-04-09T13:12:45Z,MERGED,True,103,83,11,https://github.com/ilammy,Improve Makefile rules for linkage,6,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/450,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/450#issuecomment-480774128,"Second attempt to cleanup linkage rules in Makefiles (supersedes #449). Unfortunately, this does not decrease the amount of lines in Makefliles, but arguably it makes them a bit easier to read and maintain. As a side effect, this changeset also improves interdependencies between the libraries.

libsoter.a

contains Soter functions
requires appropriate cryptographic backend
developers need to link cryptographic backend themselves


libthemis.a

contains Themis functions
requires Soter and its dependencies
developers need to link Soter and maybe cryptographic backend themselves


libsoter.so

contains Soter functions
depends on or includes appropriate cryptographic backend
developers do not need to do anything extra


libthemis.so

contains Themis functions
depends on Soter dynamic library
developers do not need to do anything extra


libthemis_jni.so

contains JNI functions + Soter and Themis functions
depends on or includes appropriate cryptographic backend
developers do not need to do anything extra



(On macOS *.so files are called *.dylib, but are otherwise identical for the purposes of this PR.)
More implementation details are in commit messages.",Any comments on this one?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,450,2019-04-04T16:39:19Z,2019-04-09T13:01:49Z,2019-04-09T13:12:45Z,MERGED,True,103,83,11,https://github.com/ilammy,Improve Makefile rules for linkage,6,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/450,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/450#issuecomment-480778994,"Second attempt to cleanup linkage rules in Makefiles (supersedes #449). Unfortunately, this does not decrease the amount of lines in Makefliles, but arguably it makes them a bit easier to read and maintain. As a side effect, this changeset also improves interdependencies between the libraries.

libsoter.a

contains Soter functions
requires appropriate cryptographic backend
developers need to link cryptographic backend themselves


libthemis.a

contains Themis functions
requires Soter and its dependencies
developers need to link Soter and maybe cryptographic backend themselves


libsoter.so

contains Soter functions
depends on or includes appropriate cryptographic backend
developers do not need to do anything extra


libthemis.so

contains Themis functions
depends on Soter dynamic library
developers do not need to do anything extra


libthemis_jni.so

contains JNI functions + Soter and Themis functions
depends on or includes appropriate cryptographic backend
developers do not need to do anything extra



(On macOS *.so files are called *.dylib, but are otherwise identical for the purposes of this PR.)
More implementation details are in commit messages.","I like how Makefile becomes more clean. I'm more than happy with these changes.
I have a question about libthemis_jni.so. Do I understand correctly, that this is a breaking change and since 0.12.0 Java Desktop users won't need to install Themis Core library into their system?
How migration process will look like? Will users notice any changes in their app behavior if they had Themis Core installed and libthemis_jni.so included in their project file after updating ibthemis_jni.so to the latest version? How OS will decide which Themis Core to use (old one, installed separately, or new one, included into libthemis_jni.so).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,450,2019-04-04T16:39:19Z,2019-04-09T13:01:49Z,2019-04-09T13:12:45Z,MERGED,True,103,83,11,https://github.com/ilammy,Improve Makefile rules for linkage,6,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/450,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/450#issuecomment-480799303,"Second attempt to cleanup linkage rules in Makefiles (supersedes #449). Unfortunately, this does not decrease the amount of lines in Makefliles, but arguably it makes them a bit easier to read and maintain. As a side effect, this changeset also improves interdependencies between the libraries.

libsoter.a

contains Soter functions
requires appropriate cryptographic backend
developers need to link cryptographic backend themselves


libthemis.a

contains Themis functions
requires Soter and its dependencies
developers need to link Soter and maybe cryptographic backend themselves


libsoter.so

contains Soter functions
depends on or includes appropriate cryptographic backend
developers do not need to do anything extra


libthemis.so

contains Themis functions
depends on Soter dynamic library
developers do not need to do anything extra


libthemis_jni.so

contains JNI functions + Soter and Themis functions
depends on or includes appropriate cryptographic backend
developers do not need to do anything extra



(On macOS *.so files are called *.dylib, but are otherwise identical for the purposes of this PR.)
More implementation details are in commit messages.","Do I understand correctly, that this is a breaking change and since 0.12.0 Java Desktop users won't need to install Themis Core library into their system?

Yes, installing Themis Core is not required with these changes. However, (non-development) OpenSSL is still required if Themis is linked against it dynamically (that's the default).
This is not a breaking change as the API or ABI of the JNI library is not changed. If there is an application compiled against Themis 0.11, we can replace only libthemis_jni.so with a newer version and everything will be working fine. The JNI methods are still there and that's the only thing Java cares about.

How migration process will look like?

As we do not provide any packages for Java Desktop, it would be as follows:

Grab the 0.12 release source code.
make themis_jni
Update libthemis_jni.so in your project.
Update Java wrapper code in your project.
Update your application code to stop using deprecated Java methods, etc.

Themis Core can be uninstalled from the system. It can also be left installed, that would not affect the behavior of Themis JNI 0.12.
So from the user perspective nothing is really changed, other that they don't have to update Themis Core now.

How OS will decide which Themis Core to use (old one, installed separately, or new one, included into libthemis_jni.so).

That's based on the dependency information recorded in libthemis_jni.so. Before this PR the library would require libthemis.so, so the dynamic loader looks for the core library and loads it as a dependency after loading libthemis_jni.so. With this PR libthemis_jni.so no longer depends on libthemis.so so it will not be looked for or loaded. From Java code standpoint, all of this is an implementation detail happening inside
java.lang.System.loadLibrary(""themis_jni"");",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,450,2019-04-04T16:39:19Z,2019-04-09T13:01:49Z,2019-04-09T13:12:45Z,MERGED,True,103,83,11,https://github.com/ilammy,Improve Makefile rules for linkage,6,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/450,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/450#issuecomment-480807146,"Second attempt to cleanup linkage rules in Makefiles (supersedes #449). Unfortunately, this does not decrease the amount of lines in Makefliles, but arguably it makes them a bit easier to read and maintain. As a side effect, this changeset also improves interdependencies between the libraries.

libsoter.a

contains Soter functions
requires appropriate cryptographic backend
developers need to link cryptographic backend themselves


libthemis.a

contains Themis functions
requires Soter and its dependencies
developers need to link Soter and maybe cryptographic backend themselves


libsoter.so

contains Soter functions
depends on or includes appropriate cryptographic backend
developers do not need to do anything extra


libthemis.so

contains Themis functions
depends on Soter dynamic library
developers do not need to do anything extra


libthemis_jni.so

contains JNI functions + Soter and Themis functions
depends on or includes appropriate cryptographic backend
developers do not need to do anything extra



(On macOS *.so files are called *.dylib, but are otherwise identical for the purposes of this PR.)
More implementation details are in commit messages.","Great!
(That's what I thought, but wanted to have a clear vision on this.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,451,2019-04-09T13:25:06Z,2019-04-10T09:01:49Z,2019-04-10T09:01:53Z,MERGED,True,48,105,9,https://github.com/ilammy,Common Makefile rules,2,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/451,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/451,"Currently we use a bit different build paths for object files:

src → build/obj
jni → build/obj/jni
tests → build/tests/obj

This is one of the reasons that build rules for C/C++ code are duplicated across Soter, Themis, ThemisPP, Themis-JNI, and tests.
Use a more consistent approach for placing object files: all of them go into $(OBJ_PATH) and get suffixed by .o. This way allows us to have a single common rule for building all C/C++ code:

src → build/obj/src
jni → build/obj/jni
tests → build/obj/tests

Note however that in some cases we have to use different compiler flags, mostly to setup proper header search paths. Use per-target CFLAGS variable settings for that.
Using consistent object file placement allows us to simplify formatting build rules in the same way. All marker files will now be placed in the same place as object files.
This allows us to remove a lot of special cases and use common formatting rules for all C/C++ code.
clang-format and clang-tidy require correct compilation flags. Thankfully, CFLAGS values are already correctly set everywhere so we do not need to do anything special for that. Though, JsThemis is a bit special, because we do not compile it normally.","Currently we use a bit different build paths for object files:

src → build/obj
jni → build/obj/jni
tests → build/tests/obj

This is one of the reasons that build rules for C/C++ code are duplicated across Soter, Themis, ThemisPP, Themis-JNI, and tests.
Use a more consistent approach for placing object files: all of them go into $(OBJ_PATH) and get suffixed by .o. This way allows us to have a single common rule for building all C/C++ code:

src → build/obj/src
jni → build/obj/jni
tests → build/obj/tests

Note however that in some cases we have to use different compiler flags, mostly to setup proper header search paths. Use per-target CFLAGS variable settings for that.
Using consistent object file placement allows us to simplify formatting build rules in the same way. All marker files will now be placed in the same place as object files.
This allows us to remove a lot of special cases and use common formatting rules for all C/C++ code.
clang-format and clang-tidy require correct compilation flags. Thankfully, CFLAGS values are already correctly set everywhere so we do not need to do anything special for that. Though, JsThemis is a bit special, because we do not compile it normally.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,452,2019-04-09T13:34:38Z,2019-04-10T09:01:01Z,2019-04-10T09:01:05Z,MERGED,True,1,1,1,https://github.com/ilammy,Always ignore ldconfig failures,1,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/452,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/452,"PR #346 has improved ldconfig handling a bit by failing the build only when ldconfig is invoked as root. However, this causes issues when building under fakeroot (which sets EUID but does not give permissions). Furthermore, GNU Makefile conventions expect ldconfig failures to be simply ignored.","PR #346 has improved ldconfig handling a bit by failing the build only when ldconfig is invoked as root. However, this causes issues when building under fakeroot (which sets EUID but does not give permissions). Furthermore, GNU Makefile conventions expect ldconfig failures to be simply ignored.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,453,2019-04-09T13:46:42Z,2019-04-12T01:39:11Z,2019-04-12T10:33:53Z,MERGED,True,88,60,4,https://github.com/ilammy,Follow GNU conventions for installation,2,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/453,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/453,"First of all, move Soter and Themis installation rules out from Makefile to their individual makefiles. This makes them a bit easier to maintain.
After that, reduce installation targets to just install, install_themis and install_soter (plus uninstall counterparts). No one should really be using individual targets to install only some parts of the library. These targets are not really documented, and are not standard.

Follow GNU conventions for installation: Soter, Themis

Adhere to GNU Makefile conventions when installing files. This encompasses multiple aspects:


INSTALL, INSTALL_DATA, INSTALL_PROGRAM variables
It's not strictly necessary, but nice to have. This allows to override the tool for installing files, and makes sure that data files are not marked executable.


DESTDIR prefix
This is an important variable for packaging as it allows staged installation. It gets prefixed to each installation destination so that it could be made into a temporary directory which will get packaged later.
Note that this variable is never set explicitly in the Makefile and is empty by default. It's also used only during installation, the library is built as if it's going to be installed to the usual location with DESTDIR preprended to it.


prefix, includedir, libdir, etc. variables
These variables allow fine tuning of installation paths when packaging for distributions that have varying conventions. Most prominently, they affect the destination for libraries which may be /lib, /usr/lib, /usr/lib64, /usr/lib/x86_64-linux-gnu, or something else.
Note that it's lowercase prefix, not uppercase PREFIX. That's how it should be by the book, but all our documentation uses the capitalized version, so we keep it for compatibility.


This teaches our Makefile to play nicely with other tools that expect GNU conventions to hold. Primarily, these are various package-building tools that rely on the variables to interpose their helper tools and override installation paths to distribution-specific places.
(We could have gotten all of that automatically by using Autotools, but no one really knows Autotools nowadays. Even these GNU conventions are arcane knowledge in the days of ""curl | sudo sh"" and every language having their own package manager.)

Follow GNU conventions for installation: ThemisPP

Now, there are quite a few ThemisPP-specific rules in the main Makefile. Move them all into a separate one, just for ThemisPP.
After that, update ThemisPP installation targets to follow the same conventions as for Soter and Themis.","First of all, move Soter and Themis installation rules out from Makefile to their individual makefiles. This makes them a bit easier to maintain.
After that, reduce installation targets to just install, install_themis and install_soter (plus uninstall counterparts). No one should really be using individual targets to install only some parts of the library. These targets are not really documented, and are not standard.

Follow GNU conventions for installation: Soter, Themis

Adhere to GNU Makefile conventions when installing files. This encompasses multiple aspects:


INSTALL, INSTALL_DATA, INSTALL_PROGRAM variables
It's not strictly necessary, but nice to have. This allows to override the tool for installing files, and makes sure that data files are not marked executable.


DESTDIR prefix
This is an important variable for packaging as it allows staged installation. It gets prefixed to each installation destination so that it could be made into a temporary directory which will get packaged later.
Note that this variable is never set explicitly in the Makefile and is empty by default. It's also used only during installation, the library is built as if it's going to be installed to the usual location with DESTDIR preprended to it.


prefix, includedir, libdir, etc. variables
These variables allow fine tuning of installation paths when packaging for distributions that have varying conventions. Most prominently, they affect the destination for libraries which may be /lib, /usr/lib, /usr/lib64, /usr/lib/x86_64-linux-gnu, or something else.
Note that it's lowercase prefix, not uppercase PREFIX. That's how it should be by the book, but all our documentation uses the capitalized version, so we keep it for compatibility.


This teaches our Makefile to play nicely with other tools that expect GNU conventions to hold. Primarily, these are various package-building tools that rely on the variables to interpose their helper tools and override installation paths to distribution-specific places.
(We could have gotten all of that automatically by using Autotools, but no one really knows Autotools nowadays. Even these GNU conventions are arcane knowledge in the days of ""curl | sudo sh"" and every language having their own package manager.)

Follow GNU conventions for installation: ThemisPP

Now, there are quite a few ThemisPP-specific rules in the main Makefile. Move them all into a separate one, just for ThemisPP.
After that, update ThemisPP installation targets to follow the same conventions as for Soter and Themis.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,453,2019-04-09T13:46:42Z,2019-04-12T01:39:11Z,2019-04-12T10:33:53Z,MERGED,True,88,60,4,https://github.com/ilammy,Follow GNU conventions for installation,2,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/453,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/453#issuecomment-481609965,"First of all, move Soter and Themis installation rules out from Makefile to their individual makefiles. This makes them a bit easier to maintain.
After that, reduce installation targets to just install, install_themis and install_soter (plus uninstall counterparts). No one should really be using individual targets to install only some parts of the library. These targets are not really documented, and are not standard.

Follow GNU conventions for installation: Soter, Themis

Adhere to GNU Makefile conventions when installing files. This encompasses multiple aspects:


INSTALL, INSTALL_DATA, INSTALL_PROGRAM variables
It's not strictly necessary, but nice to have. This allows to override the tool for installing files, and makes sure that data files are not marked executable.


DESTDIR prefix
This is an important variable for packaging as it allows staged installation. It gets prefixed to each installation destination so that it could be made into a temporary directory which will get packaged later.
Note that this variable is never set explicitly in the Makefile and is empty by default. It's also used only during installation, the library is built as if it's going to be installed to the usual location with DESTDIR preprended to it.


prefix, includedir, libdir, etc. variables
These variables allow fine tuning of installation paths when packaging for distributions that have varying conventions. Most prominently, they affect the destination for libraries which may be /lib, /usr/lib, /usr/lib64, /usr/lib/x86_64-linux-gnu, or something else.
Note that it's lowercase prefix, not uppercase PREFIX. That's how it should be by the book, but all our documentation uses the capitalized version, so we keep it for compatibility.


This teaches our Makefile to play nicely with other tools that expect GNU conventions to hold. Primarily, these are various package-building tools that rely on the variables to interpose their helper tools and override installation paths to distribution-specific places.
(We could have gotten all of that automatically by using Autotools, but no one really knows Autotools nowadays. Even these GNU conventions are arcane knowledge in the days of ""curl | sudo sh"" and every language having their own package manager.)

Follow GNU conventions for installation: ThemisPP

Now, there are quite a few ThemisPP-specific rules in the main Makefile. Move them all into a separate one, just for ThemisPP.
After that, update ThemisPP installation targets to follow the same conventions as for Soter and Themis.",Ready for review now.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,454,2019-04-09T13:57:17Z,2019-04-16T15:48:47Z,2019-04-16T15:48:59Z,MERGED,True,54,47,4,https://github.com/ilammy,ABI-versioned library names,5,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/454,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/454,"Let's take care of ABI versioning so that we can conspicuously break ABI compatibility when necessary.


Simplify package and library versioning

Current versioning approach in Makefile is way too complicated and does not work for distributon tarballs when git repository is not available. (Fun fact: the 'version' variable actually gets set twice.)
Remove all this guesswork based on git describe and simply read the version out of Makefile. Let it be the single source of truth.

ABI-versioned library names

Change Soter and Themis libraries to contain ABI version information. This will allow us to communicate future incompatible ABI changes to their users and ensure that incompatible libraries are never loaded accidentally.
Now that we have additional flags for linker, we can set macOS install names directly rather than later with install_name_tool.

Fix Linux packaging

We no longer create bogus symlinks for static libraries so we don't need to install them. The symlinks are created during regular compilation so we can drop the symlink_realname_to_soname target as redundant.","Let's take care of ABI versioning so that we can conspicuously break ABI compatibility when necessary.


Simplify package and library versioning

Current versioning approach in Makefile is way too complicated and does not work for distributon tarballs when git repository is not available. (Fun fact: the 'version' variable actually gets set twice.)
Remove all this guesswork based on git describe and simply read the version out of Makefile. Let it be the single source of truth.

ABI-versioned library names

Change Soter and Themis libraries to contain ABI version information. This will allow us to communicate future incompatible ABI changes to their users and ensure that incompatible libraries are never loaded accidentally.
Now that we have additional flags for linker, we can set macOS install names directly rather than later with install_name_tool.

Fix Linux packaging

We no longer create bogus symlinks for static libraries so we don't need to install them. The symlinks are created during regular compilation so we can drop the symlink_realname_to_soname target as redundant.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,454,2019-04-09T13:57:17Z,2019-04-16T15:48:47Z,2019-04-16T15:48:59Z,MERGED,True,54,47,4,https://github.com/ilammy,ABI-versioned library names,5,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/454,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/454#issuecomment-481264715,"Let's take care of ABI versioning so that we can conspicuously break ABI compatibility when necessary.


Simplify package and library versioning

Current versioning approach in Makefile is way too complicated and does not work for distributon tarballs when git repository is not available. (Fun fact: the 'version' variable actually gets set twice.)
Remove all this guesswork based on git describe and simply read the version out of Makefile. Let it be the single source of truth.

ABI-versioned library names

Change Soter and Themis libraries to contain ABI version information. This will allow us to communicate future incompatible ABI changes to their users and ensure that incompatible libraries are never loaded accidentally.
Now that we have additional flags for linker, we can set macOS install names directly rather than later with install_name_tool.

Fix Linux packaging

We no longer create bogus symlinks for static libraries so we don't need to install them. The symlinks are created during regular compilation so we can drop the symlink_realname_to_soname target as redundant.","Here's some background on how the platforms deal with ABI compatibility.
Linux: sonames
soname is Linux mechanism for ABI versioning. This is the 'name' of the library for dynamic loader. When an executable or a library depends on another library, soname of the dependency (from DT_SONAME tag) is recorded in the dependent (as DT_NEEDED tag). This information is used during dynamic library resolution and loading.
How dependencies are recorded and resolved
When -lthemis flag is passed to the linker, it looks for a file named libthemis.so. It may be a symlink to the real library. If the library has DT_SONAME tag then its content is recorded as DT_NEEDED. Otherwise the name libthemis.so is used.
When dynamic loader needs to resolve a dependency, it looks for a file with the name recorded in DT_NEEDED tag. This file may also be a link leading to the real library, the loader does not really care. If the library has DT_SONAME tag then it must match DT_NEEDED or the loading will fail.
What is the role of symbolic links
Here's how this mechanism is used for ABI versioning. The library has its DT_SONAME set to libthemis.so.0 and the resulting file is named exactly like that and installed into the system. This ensures that dynamic loader can find it. In addition to that, a symbolic link libthemis.so leading to libthemis.so.0 is created so that the build toolchain can locate the correct version of the library when compiling software.
When ABI of the library is changed in incompatible way, its soname is also changed (e.g., to libthemis.so.1) and the symbolic link targets the new file. Previously compiled software can load the previous version of the library, but will not load the new one without recompilation.
macOS: install names
On macOS the story is mostly the same, but the library file is named libthemis.0.dylib and there is no DT_SONAME tag. Instead there is install name which contains absolute path to the installed library (e.g., /usr/local/lib/libthemis.0.dylib). Everything else is the same. Recorded versioned names ensure that the dynamic loader cannot accidentally load an incompatible library, and symlinks allow the compiler to link software it builds against some current version of the library.
Actually, there's another mechanism that can be used for versioning. It deals with ""current"" and ""compatible"" versions and is mostly usefult for forward compatibility. However, it requires more diligence on behalf of both the library and its users, so it's not really widespread. Linux has similar symbol versioning thing that nobody really knows about.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,454,2019-04-09T13:57:17Z,2019-04-16T15:48:47Z,2019-04-16T15:48:59Z,MERGED,True,54,47,4,https://github.com/ilammy,ABI-versioned library names,5,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/454,https://github.com/Lagovas,3,https://github.com/cossacklabs/themis/pull/454#issuecomment-481320220,"Let's take care of ABI versioning so that we can conspicuously break ABI compatibility when necessary.


Simplify package and library versioning

Current versioning approach in Makefile is way too complicated and does not work for distributon tarballs when git repository is not available. (Fun fact: the 'version' variable actually gets set twice.)
Remove all this guesswork based on git describe and simply read the version out of Makefile. Let it be the single source of truth.

ABI-versioned library names

Change Soter and Themis libraries to contain ABI version information. This will allow us to communicate future incompatible ABI changes to their users and ensure that incompatible libraries are never loaded accidentally.
Now that we have additional flags for linker, we can set macOS install names directly rather than later with install_name_tool.

Fix Linux packaging

We no longer create bogus symlinks for static libraries so we don't need to install them. The symlinks are created during regular compilation so we can drop the symlink_realname_to_soname target as redundant.","Remove all this guesswork based on git describe and simply read the version out of Makefile. Let it be the single source of truth.

Why not use git tag as source of truth? all our releases on github take version from git tag and then this version fetched on our simulator and docs website. I prefer to do one manual work as tag release with git instead tag + update version in Makefile",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,454,2019-04-09T13:57:17Z,2019-04-16T15:48:47Z,2019-04-16T15:48:59Z,MERGED,True,54,47,4,https://github.com/ilammy,ABI-versioned library names,5,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/454,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/454#issuecomment-481334528,"Let's take care of ABI versioning so that we can conspicuously break ABI compatibility when necessary.


Simplify package and library versioning

Current versioning approach in Makefile is way too complicated and does not work for distributon tarballs when git repository is not available. (Fun fact: the 'version' variable actually gets set twice.)
Remove all this guesswork based on git describe and simply read the version out of Makefile. Let it be the single source of truth.

ABI-versioned library names

Change Soter and Themis libraries to contain ABI version information. This will allow us to communicate future incompatible ABI changes to their users and ensure that incompatible libraries are never loaded accidentally.
Now that we have additional flags for linker, we can set macOS install names directly rather than later with install_name_tool.

Fix Linux packaging

We no longer create bogus symlinks for static libraries so we don't need to install them. The symlinks are created during regular compilation so we can drop the symlink_realname_to_soname target as redundant.","Why not use git tag as source of truth?

git tag may be unavailable when building from source tarball (e.g., downloaded from GitHub release page, or the one produced by make dist and reused later for packaging).
Multiple language wrappers require explicit version in their package description files so we have to update them manually anyway. One extra file does not make much difference. (Even more, if we have version in Makefile, we could write a target to update all other versions from that.)
Having the version specified by the file allows us to build future versions without tagging a release. For example, we can change the version to 0.12 right now and thus have all packages built from master get a version newer than the current stable.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,454,2019-04-09T13:57:17Z,2019-04-16T15:48:47Z,2019-04-16T15:48:59Z,MERGED,True,54,47,4,https://github.com/ilammy,ABI-versioned library names,5,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/454,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/454#issuecomment-482546401,"Let's take care of ABI versioning so that we can conspicuously break ABI compatibility when necessary.


Simplify package and library versioning

Current versioning approach in Makefile is way too complicated and does not work for distributon tarballs when git repository is not available. (Fun fact: the 'version' variable actually gets set twice.)
Remove all this guesswork based on git describe and simply read the version out of Makefile. Let it be the single source of truth.

ABI-versioned library names

Change Soter and Themis libraries to contain ABI version information. This will allow us to communicate future incompatible ABI changes to their users and ensure that incompatible libraries are never loaded accidentally.
Now that we have additional flags for linker, we can set macOS install names directly rather than later with install_name_tool.

Fix Linux packaging

We no longer create bogus symlinks for static libraries so we don't need to install them. The symlinks are created during regular compilation so we can drop the symlink_realname_to_soname target as redundant.","Remove all this guesswork based on git describe and simply read the version out of Makefile. Let it be the single source of truth.

🆗 Agree, let's update version in Makefile every release if we can't rely on git releases for most use cases.

Fun fact: the 'version' variable actually gets set twice

🤦‍♀️

Change Soter and Themis libraries to contain ABI version information.

great! 👍

We no longer create bogus symlinks for static libraries so we don't need to install them

cool

tldr: from my side looks important and valid, however being non system engineer I'd recommend to wait thoughts from @Lagovas or @shadinua",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,454,2019-04-09T13:57:17Z,2019-04-16T15:48:47Z,2019-04-16T15:48:59Z,MERGED,True,54,47,4,https://github.com/ilammy,ABI-versioned library names,5,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/454,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/454#issuecomment-483586366,"Let's take care of ABI versioning so that we can conspicuously break ABI compatibility when necessary.


Simplify package and library versioning

Current versioning approach in Makefile is way too complicated and does not work for distributon tarballs when git repository is not available. (Fun fact: the 'version' variable actually gets set twice.)
Remove all this guesswork based on git describe and simply read the version out of Makefile. Let it be the single source of truth.

ABI-versioned library names

Change Soter and Themis libraries to contain ABI version information. This will allow us to communicate future incompatible ABI changes to their users and ensure that incompatible libraries are never loaded accidentally.
Now that we have additional flags for linker, we can set macOS install names directly rather than later with install_name_tool.

Fix Linux packaging

We no longer create bogus symlinks for static libraries so we don't need to install them. The symlinks are created during regular compilation so we can drop the symlink_realname_to_soname target as redundant.","@shadinua,
I really like the idea of having a dedicated VERSION file. I've seen this a couple of times elsewhere and I think it's useful: you don't have to parse the Makefile to get the version, just cat a file. Will do in this PR.
I don't think it will be possible to directly use this file for versioning various language bindings, and they tend to require their own 'project files' (package.json, Podspecs, Cargo.toml, etc.) However, having a single place to store the version allows us to write some script to update the version everywhere to the value in the VERSION file (probably allowing the bindings to get ahead in patch version).
As for git describe, now I understand that there are technical reasons for having it and it will be kinda inconvenient to change it. I'll bring it back in the way you describe it: prefer git describe, use VERSION as fallback.


What naming standard do you suggest for current build (differ than release commit)?
How will we automate this in the Makefile?

I was thinking about not automating versioning of development builds in the Makefile, but rather do it in the build system. Development builds are irregular and not intended for any continuous use. The build system can override the version from the command line:
make all VERSION=whatever    # or some VERSION_SUFFIX appended to 'normal' version

It could then use whatever value we need (e.g., 0.11.1-2019-04-16, 0.11.1-42-ab63c1, 0.12~preview-for-alice, something typed into the web UI when requesting a custom build, etc.) It also could enforce some -devel suffix for all non-release packages, to make sure they cannot be mistaken for a real thing. The Makefile by itself does not know whether it's being used to prepare a development build or not. For example, we could need a build from a release tag but with non-standard CFLAGS value. From git perspective it looks like a clean release build, while in fact it's not the same as the released one. The Makefile has no clue, but the build system does.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,454,2019-04-09T13:57:17Z,2019-04-16T15:48:47Z,2019-04-16T15:48:59Z,MERGED,True,54,47,4,https://github.com/ilammy,ABI-versioned library names,5,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/454,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/454#issuecomment-483597019,"Let's take care of ABI versioning so that we can conspicuously break ABI compatibility when necessary.


Simplify package and library versioning

Current versioning approach in Makefile is way too complicated and does not work for distributon tarballs when git repository is not available. (Fun fact: the 'version' variable actually gets set twice.)
Remove all this guesswork based on git describe and simply read the version out of Makefile. Let it be the single source of truth.

ABI-versioned library names

Change Soter and Themis libraries to contain ABI version information. This will allow us to communicate future incompatible ABI changes to their users and ensure that incompatible libraries are never loaded accidentally.
Now that we have additional flags for linker, we can set macOS install names directly rather than later with install_name_tool.

Fix Linux packaging

We no longer create bogus symlinks for static libraries so we don't need to install them. The symlinks are created during regular compilation so we can drop the symlink_realname_to_soname target as redundant.","@shadinua, git describe is back. We get 0.11.1 when we build from a tag, 0.11.1-16-gd946ed89  if we build from some random commit, or $(cat VERSION) if we build from the source tarball produced by make dist.",True,{'THUMBS_UP': ['https://github.com/shadinua']}
cossacklabs/themis,https://github.com/cossacklabs/themis,455,2019-04-10T09:56:12Z,2019-04-24T11:58:21Z,2019-04-24T11:58:29Z,MERGED,True,26,45,1,https://github.com/ilammy,Use 'make install' for packaging,1,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/455,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/455,"Replace explicit 'file maps' for packaging with make install invocations. This ensures that we always package the same files that get installed when building from source.
The list of files to be packaged is still maintained separately as we do split them into ""libthemis"" and ""libthemis-dev"" packages. Note that the split is not entirely correct: the static libraries and symbolic links should go into development package as well. However, for now we keep the old split for compatibility.
We use the newly added DESTDIR capability to install into a temporary staging directory and then collect the files from there. Now we also no longer need to create symbolic links manually. However, stripping binaries still has to be performed, and we still need to construct pre- and postinstall scripts. Let's do it inline to save the trouble.","Replace explicit 'file maps' for packaging with make install invocations. This ensures that we always package the same files that get installed when building from source.
The list of files to be packaged is still maintained separately as we do split them into ""libthemis"" and ""libthemis-dev"" packages. Note that the split is not entirely correct: the static libraries and symbolic links should go into development package as well. However, for now we keep the old split for compatibility.
We use the newly added DESTDIR capability to install into a temporary staging directory and then collect the files from there. Now we also no longer need to create symbolic links manually. However, stripping binaries still has to be performed, and we still need to construct pre- and postinstall scripts. Let's do it inline to save the trouble.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,455,2019-04-10T09:56:12Z,2019-04-24T11:58:21Z,2019-04-24T11:58:29Z,MERGED,True,26,45,1,https://github.com/ilammy,Use 'make install' for packaging,1,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/455,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/455#issuecomment-483721613,"Replace explicit 'file maps' for packaging with make install invocations. This ensures that we always package the same files that get installed when building from source.
The list of files to be packaged is still maintained separately as we do split them into ""libthemis"" and ""libthemis-dev"" packages. Note that the split is not entirely correct: the static libraries and symbolic links should go into development package as well. However, for now we keep the old split for compatibility.
We use the newly added DESTDIR capability to install into a temporary staging directory and then collect the files from there. Now we also no longer need to create symbolic links manually. However, stripping binaries still has to be performed, and we still need to construct pre- and postinstall scripts. Let's do it inline to save the trouble.","Finally, this is also ready for review.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,455,2019-04-10T09:56:12Z,2019-04-24T11:58:21Z,2019-04-24T11:58:29Z,MERGED,True,26,45,1,https://github.com/ilammy,Use 'make install' for packaging,1,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/455,https://github.com/shadinua,3,https://github.com/cossacklabs/themis/pull/455#issuecomment-483865399,"Replace explicit 'file maps' for packaging with make install invocations. This ensures that we always package the same files that get installed when building from source.
The list of files to be packaged is still maintained separately as we do split them into ""libthemis"" and ""libthemis-dev"" packages. Note that the split is not entirely correct: the static libraries and symbolic links should go into development package as well. However, for now we keep the old split for compatibility.
We use the newly added DESTDIR capability to install into a temporary staging directory and then collect the files from there. Now we also no longer need to create symbolic links manually. However, stripping binaries still has to be performed, and we still need to construct pre- and postinstall scripts. Let's do it inline to save the trouble.","Great work, thanks!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,456,2019-04-10T10:10:14Z,2019-04-10T11:49:52Z,2019-04-12T14:51:42Z,MERGED,True,23,19,4,https://github.com/ilammy,Ignored NIST statistical tests with NO_NIST_STS,1,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/456,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/456,"Unfortunately, NIST STS requires access to genuine randomness source and tends to fail in Docker environments where /dev/random is not accessible. That's why we have an option to disable NIST STS by setting CIRICLE_TEST (sic!) preprocessor variable.
Let's improve and cleanup this mechanism a bit.


Use more obvious NO_NIST_STS environment variable instead of fiddling with CFLAGS directly
Admittedly, existing flag is more general as it allows to compile out any code when building on CI. However, it has never been used for anything other than NIST STS.


Do not compile ""assess"" test runner if we're not going to use it


Move NIST STS configuration to soter.mk","Unfortunately, NIST STS requires access to genuine randomness source and tends to fail in Docker environments where /dev/random is not accessible. That's why we have an option to disable NIST STS by setting CIRICLE_TEST (sic!) preprocessor variable.
Let's improve and cleanup this mechanism a bit.


Use more obvious NO_NIST_STS environment variable instead of fiddling with CFLAGS directly
Admittedly, existing flag is more general as it allows to compile out any code when building on CI. However, it has never been used for anything other than NIST STS.


Do not compile ""assess"" test runner if we're not going to use it


Move NIST STS configuration to soter.mk",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,456,2019-04-10T10:10:14Z,2019-04-10T11:49:52Z,2019-04-12T14:51:42Z,MERGED,True,23,19,4,https://github.com/ilammy,Ignored NIST statistical tests with NO_NIST_STS,1,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/456,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/456#issuecomment-481629831,"Unfortunately, NIST STS requires access to genuine randomness source and tends to fail in Docker environments where /dev/random is not accessible. That's why we have an option to disable NIST STS by setting CIRICLE_TEST (sic!) preprocessor variable.
Let's improve and cleanup this mechanism a bit.


Use more obvious NO_NIST_STS environment variable instead of fiddling with CFLAGS directly
Admittedly, existing flag is more general as it allows to compile out any code when building on CI. However, it has never been used for anything other than NIST STS.


Do not compile ""assess"" test runner if we're not going to use it


Move NIST STS configuration to soter.mk","@shadinua I don't know for sure, but I'm pretty much convinced that our internal CI system sneakily uses CFLAGS=-DCIRICLE_TEST somewhere (though it has nothing to do with CircleCI). It should be replaced with NO_NIST_STS=1 when this gets merged.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,457,2019-04-10T12:36:34Z,2019-04-16T11:49:59Z,2019-04-16T13:41:50Z,MERGED,True,110,17,10,https://github.com/ilammy,Initial WebAssembly support,14,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/457,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/457,"This patch set enables Themis to be compiled using standard Emscripten toolchain for WebAssembly targets:
emmake make test

The resulting library works fine and passes all unit tests (see x86_64 target on CircleCI). However, that's it: we can compile the library and it seems to work by itself. However, we're still far from WebAssembly support and it's still considered experimental.
For example, it would be very interesting to see if the integration tests pass because Wasm is a 32-bit target. Also, currently only embedded BoringSSL is supported for cryptographic backend, and even that requires specific tweaks.


Detect and support Emscripten builds

The users are expected to build Themis for Wasm by using emmake helper tool that sets up all necessary environment variables. For example, CC variable will be set to Emscripten's cross-compiler.
Detect when we're building under emmake by inspecting the compiler type, provide IS_EMSCRIPTEN variable if that's the case. We're going to use this switch to customize a bunch of build steps.
First of all, we need to run CMake for embedded BoringSSL using the emconfigure helper that sets its up properly. Additionally, we need to disable assembly usage in BoringSSL's build as it detects the platform incorrectly and tries using x86 assembly (which will not work on Wasm targets, obviously).

Switch to CossackLabs fork of BoringSSL

Some settings required for Emscripten build are not configurable (yet) by setting CMake variables, unfortunately. They require direct changes in BoringSSL's CMake configuration. Switch to our fork of BoringSSL that contains the changes we need to get the Wasm target working.
Hopefully, we're going to get these changes merged into BoringSSL upstream and revert back to using the original source code.

Use BoringSSL as default engine for Emscripten

Currently we test  Wasm builds only with (embedded) BoringSSL so it makes sense to set this engine as default when building with Emscripten.

Add Emscripten support to themis/portable_endian.h

Emscripten platform is similar to Linux and has <endian.h> available. Emscripten uses 32-bit integers because of the way numbers work in JavaScript. It is also little-endian-only at the moment due to technical limitations of the implementation.

Support Emscripten in Soter and Themis tests

We can build Soter and Themis tests and run them, but there are a couple of caveats here.
First of all, emcc output depends on file extension. File names ""themis_test"" and ""soter_test"" result in LLVM bitcode being packed in them, which is not what we want. We should use ""*.js"" extension to get something runnable. Introduce intermediate variables to rename the tests based on the target environment. Use themis_test.js for Emscripten and old themis_test for everything else.
Additionally, we use SINGLE_FILE flag to produce a single *.js file instead of a separate *.wasm file with compiled code and a *.js loader for it. This makes it easier to launch the tests as we don't have to change directories and don't generate extra files.
It also turned out that popen() function is not available in Emscripten runtime. Because of that we cannot use NIST STS as is. Disable it for now. Hopefully, we'll figure out how to use it later.
The next point is that we cannot run resulting tests directly. We should use Node.js to interpret then, not execute *.js files (which is usually not possible on typical systems). Therefore, check if node binary is available and use it to run tests when requested. But only in Emscripten environment. If Node.js is not available then print a warning and fail the build.

Fix broken Secure Cell tests

Remember that 0xDEADBEEF constant which got changed to 0x1337BEEF because 32-bit systems could not handle that value? Here we are again.
This value is used as a 'corrupted' message length value. Eventually it will be used to allocate appropriate amount of memory so that the test can fail successfully.
Real 32-bit Linux systems can allocate 0x1337BEEF bytes of memory just fine. It is possible due to the way memory allocation works on Linux with glibc. However, Wasm runtime has much more strict memory limits and is not able to reserve the memory with lazy mapping the way Linux does it. Furthermore, instead of returning NULL from malloc() the runtime aborts by default.
Lower the value of this constant again. 16 KB should be big enough to be considered invalid, but small enough to be successfully allocated.

Run Emscripten tests on CirleCI

In order to compile Wasm on CircleCI we need to install Emscripten toolchain. Do that in accordance with the official docs. After that the build should just work out of the box. Take care to cache as much as possible so that we don't have to download LLVM and recompile the C standard library each build.","This patch set enables Themis to be compiled using standard Emscripten toolchain for WebAssembly targets:
emmake make test

The resulting library works fine and passes all unit tests (see x86_64 target on CircleCI). However, that's it: we can compile the library and it seems to work by itself. However, we're still far from WebAssembly support and it's still considered experimental.
For example, it would be very interesting to see if the integration tests pass because Wasm is a 32-bit target. Also, currently only embedded BoringSSL is supported for cryptographic backend, and even that requires specific tweaks.


Detect and support Emscripten builds

The users are expected to build Themis for Wasm by using emmake helper tool that sets up all necessary environment variables. For example, CC variable will be set to Emscripten's cross-compiler.
Detect when we're building under emmake by inspecting the compiler type, provide IS_EMSCRIPTEN variable if that's the case. We're going to use this switch to customize a bunch of build steps.
First of all, we need to run CMake for embedded BoringSSL using the emconfigure helper that sets its up properly. Additionally, we need to disable assembly usage in BoringSSL's build as it detects the platform incorrectly and tries using x86 assembly (which will not work on Wasm targets, obviously).

Switch to CossackLabs fork of BoringSSL

Some settings required for Emscripten build are not configurable (yet) by setting CMake variables, unfortunately. They require direct changes in BoringSSL's CMake configuration. Switch to our fork of BoringSSL that contains the changes we need to get the Wasm target working.
Hopefully, we're going to get these changes merged into BoringSSL upstream and revert back to using the original source code.

Use BoringSSL as default engine for Emscripten

Currently we test  Wasm builds only with (embedded) BoringSSL so it makes sense to set this engine as default when building with Emscripten.

Add Emscripten support to themis/portable_endian.h

Emscripten platform is similar to Linux and has <endian.h> available. Emscripten uses 32-bit integers because of the way numbers work in JavaScript. It is also little-endian-only at the moment due to technical limitations of the implementation.

Support Emscripten in Soter and Themis tests

We can build Soter and Themis tests and run them, but there are a couple of caveats here.
First of all, emcc output depends on file extension. File names ""themis_test"" and ""soter_test"" result in LLVM bitcode being packed in them, which is not what we want. We should use ""*.js"" extension to get something runnable. Introduce intermediate variables to rename the tests based on the target environment. Use themis_test.js for Emscripten and old themis_test for everything else.
Additionally, we use SINGLE_FILE flag to produce a single *.js file instead of a separate *.wasm file with compiled code and a *.js loader for it. This makes it easier to launch the tests as we don't have to change directories and don't generate extra files.
It also turned out that popen() function is not available in Emscripten runtime. Because of that we cannot use NIST STS as is. Disable it for now. Hopefully, we'll figure out how to use it later.
The next point is that we cannot run resulting tests directly. We should use Node.js to interpret then, not execute *.js files (which is usually not possible on typical systems). Therefore, check if node binary is available and use it to run tests when requested. But only in Emscripten environment. If Node.js is not available then print a warning and fail the build.

Fix broken Secure Cell tests

Remember that 0xDEADBEEF constant which got changed to 0x1337BEEF because 32-bit systems could not handle that value? Here we are again.
This value is used as a 'corrupted' message length value. Eventually it will be used to allocate appropriate amount of memory so that the test can fail successfully.
Real 32-bit Linux systems can allocate 0x1337BEEF bytes of memory just fine. It is possible due to the way memory allocation works on Linux with glibc. However, Wasm runtime has much more strict memory limits and is not able to reserve the memory with lazy mapping the way Linux does it. Furthermore, instead of returning NULL from malloc() the runtime aborts by default.
Lower the value of this constant again. 16 KB should be big enough to be considered invalid, but small enough to be successfully allocated.

Run Emscripten tests on CirleCI

In order to compile Wasm on CircleCI we need to install Emscripten toolchain. Do that in accordance with the official docs. After that the build should just work out of the box. Take care to cache as much as possible so that we don't have to download LLVM and recompile the C standard library each build.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,457,2019-04-10T12:36:34Z,2019-04-16T11:49:59Z,2019-04-16T13:41:50Z,MERGED,True,110,17,10,https://github.com/ilammy,Initial WebAssembly support,14,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/457,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/457#issuecomment-482303581,"This patch set enables Themis to be compiled using standard Emscripten toolchain for WebAssembly targets:
emmake make test

The resulting library works fine and passes all unit tests (see x86_64 target on CircleCI). However, that's it: we can compile the library and it seems to work by itself. However, we're still far from WebAssembly support and it's still considered experimental.
For example, it would be very interesting to see if the integration tests pass because Wasm is a 32-bit target. Also, currently only embedded BoringSSL is supported for cryptographic backend, and even that requires specific tweaks.


Detect and support Emscripten builds

The users are expected to build Themis for Wasm by using emmake helper tool that sets up all necessary environment variables. For example, CC variable will be set to Emscripten's cross-compiler.
Detect when we're building under emmake by inspecting the compiler type, provide IS_EMSCRIPTEN variable if that's the case. We're going to use this switch to customize a bunch of build steps.
First of all, we need to run CMake for embedded BoringSSL using the emconfigure helper that sets its up properly. Additionally, we need to disable assembly usage in BoringSSL's build as it detects the platform incorrectly and tries using x86 assembly (which will not work on Wasm targets, obviously).

Switch to CossackLabs fork of BoringSSL

Some settings required for Emscripten build are not configurable (yet) by setting CMake variables, unfortunately. They require direct changes in BoringSSL's CMake configuration. Switch to our fork of BoringSSL that contains the changes we need to get the Wasm target working.
Hopefully, we're going to get these changes merged into BoringSSL upstream and revert back to using the original source code.

Use BoringSSL as default engine for Emscripten

Currently we test  Wasm builds only with (embedded) BoringSSL so it makes sense to set this engine as default when building with Emscripten.

Add Emscripten support to themis/portable_endian.h

Emscripten platform is similar to Linux and has <endian.h> available. Emscripten uses 32-bit integers because of the way numbers work in JavaScript. It is also little-endian-only at the moment due to technical limitations of the implementation.

Support Emscripten in Soter and Themis tests

We can build Soter and Themis tests and run them, but there are a couple of caveats here.
First of all, emcc output depends on file extension. File names ""themis_test"" and ""soter_test"" result in LLVM bitcode being packed in them, which is not what we want. We should use ""*.js"" extension to get something runnable. Introduce intermediate variables to rename the tests based on the target environment. Use themis_test.js for Emscripten and old themis_test for everything else.
Additionally, we use SINGLE_FILE flag to produce a single *.js file instead of a separate *.wasm file with compiled code and a *.js loader for it. This makes it easier to launch the tests as we don't have to change directories and don't generate extra files.
It also turned out that popen() function is not available in Emscripten runtime. Because of that we cannot use NIST STS as is. Disable it for now. Hopefully, we'll figure out how to use it later.
The next point is that we cannot run resulting tests directly. We should use Node.js to interpret then, not execute *.js files (which is usually not possible on typical systems). Therefore, check if node binary is available and use it to run tests when requested. But only in Emscripten environment. If Node.js is not available then print a warning and fail the build.

Fix broken Secure Cell tests

Remember that 0xDEADBEEF constant which got changed to 0x1337BEEF because 32-bit systems could not handle that value? Here we are again.
This value is used as a 'corrupted' message length value. Eventually it will be used to allocate appropriate amount of memory so that the test can fail successfully.
Real 32-bit Linux systems can allocate 0x1337BEEF bytes of memory just fine. It is possible due to the way memory allocation works on Linux with glibc. However, Wasm runtime has much more strict memory limits and is not able to reserve the memory with lazy mapping the way Linux does it. Furthermore, instead of returning NULL from malloc() the runtime aborts by default.
Lower the value of this constant again. 16 KB should be big enough to be considered invalid, but small enough to be successfully allocated.

Run Emscripten tests on CirleCI

In order to compile Wasm on CircleCI we need to install Emscripten toolchain. Do that in accordance with the official docs. After that the build should just work out of the box. Take care to cache as much as possible so that we don't have to download LLVM and recompile the C standard library each build.","Okay, it seems I have finally gotten the code right. But now CircleCI refuses to update BoringSSL submodule correctly. The URL seems to be updated to our fork, but the submodule commit itself is still the old one. It seems to be caused by CircleCI's cache mumbo-jumbo, still looking for a button to nuke all the caches...",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,457,2019-04-10T12:36:34Z,2019-04-16T11:49:59Z,2019-04-16T13:41:50Z,MERGED,True,110,17,10,https://github.com/ilammy,Initial WebAssembly support,14,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/457,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/457#issuecomment-482532214,"This patch set enables Themis to be compiled using standard Emscripten toolchain for WebAssembly targets:
emmake make test

The resulting library works fine and passes all unit tests (see x86_64 target on CircleCI). However, that's it: we can compile the library and it seems to work by itself. However, we're still far from WebAssembly support and it's still considered experimental.
For example, it would be very interesting to see if the integration tests pass because Wasm is a 32-bit target. Also, currently only embedded BoringSSL is supported for cryptographic backend, and even that requires specific tweaks.


Detect and support Emscripten builds

The users are expected to build Themis for Wasm by using emmake helper tool that sets up all necessary environment variables. For example, CC variable will be set to Emscripten's cross-compiler.
Detect when we're building under emmake by inspecting the compiler type, provide IS_EMSCRIPTEN variable if that's the case. We're going to use this switch to customize a bunch of build steps.
First of all, we need to run CMake for embedded BoringSSL using the emconfigure helper that sets its up properly. Additionally, we need to disable assembly usage in BoringSSL's build as it detects the platform incorrectly and tries using x86 assembly (which will not work on Wasm targets, obviously).

Switch to CossackLabs fork of BoringSSL

Some settings required for Emscripten build are not configurable (yet) by setting CMake variables, unfortunately. They require direct changes in BoringSSL's CMake configuration. Switch to our fork of BoringSSL that contains the changes we need to get the Wasm target working.
Hopefully, we're going to get these changes merged into BoringSSL upstream and revert back to using the original source code.

Use BoringSSL as default engine for Emscripten

Currently we test  Wasm builds only with (embedded) BoringSSL so it makes sense to set this engine as default when building with Emscripten.

Add Emscripten support to themis/portable_endian.h

Emscripten platform is similar to Linux and has <endian.h> available. Emscripten uses 32-bit integers because of the way numbers work in JavaScript. It is also little-endian-only at the moment due to technical limitations of the implementation.

Support Emscripten in Soter and Themis tests

We can build Soter and Themis tests and run them, but there are a couple of caveats here.
First of all, emcc output depends on file extension. File names ""themis_test"" and ""soter_test"" result in LLVM bitcode being packed in them, which is not what we want. We should use ""*.js"" extension to get something runnable. Introduce intermediate variables to rename the tests based on the target environment. Use themis_test.js for Emscripten and old themis_test for everything else.
Additionally, we use SINGLE_FILE flag to produce a single *.js file instead of a separate *.wasm file with compiled code and a *.js loader for it. This makes it easier to launch the tests as we don't have to change directories and don't generate extra files.
It also turned out that popen() function is not available in Emscripten runtime. Because of that we cannot use NIST STS as is. Disable it for now. Hopefully, we'll figure out how to use it later.
The next point is that we cannot run resulting tests directly. We should use Node.js to interpret then, not execute *.js files (which is usually not possible on typical systems). Therefore, check if node binary is available and use it to run tests when requested. But only in Emscripten environment. If Node.js is not available then print a warning and fail the build.

Fix broken Secure Cell tests

Remember that 0xDEADBEEF constant which got changed to 0x1337BEEF because 32-bit systems could not handle that value? Here we are again.
This value is used as a 'corrupted' message length value. Eventually it will be used to allocate appropriate amount of memory so that the test can fail successfully.
Real 32-bit Linux systems can allocate 0x1337BEEF bytes of memory just fine. It is possible due to the way memory allocation works on Linux with glibc. However, Wasm runtime has much more strict memory limits and is not able to reserve the memory with lazy mapping the way Linux does it. Furthermore, instead of returning NULL from malloc() the runtime aborts by default.
Lower the value of this constant again. 16 KB should be big enough to be considered invalid, but small enough to be successfully allocated.

Run Emscripten tests on CirleCI

In order to compile Wasm on CircleCI we need to install Emscripten toolchain. Do that in accordance with the official docs. After that the build should just work out of the box. Take care to cache as much as possible so that we don't have to download LLVM and recompile the C standard library each build.",Adding a git reset HEAD tightened some screws in CircleCI's git operations and it managed to check out the correct working copy. I'm so relieved to finally see the build go green not only on my machine.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,457,2019-04-10T12:36:34Z,2019-04-16T11:49:59Z,2019-04-16T13:41:50Z,MERGED,True,110,17,10,https://github.com/ilammy,Initial WebAssembly support,14,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/457,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/457#issuecomment-482537608,"This patch set enables Themis to be compiled using standard Emscripten toolchain for WebAssembly targets:
emmake make test

The resulting library works fine and passes all unit tests (see x86_64 target on CircleCI). However, that's it: we can compile the library and it seems to work by itself. However, we're still far from WebAssembly support and it's still considered experimental.
For example, it would be very interesting to see if the integration tests pass because Wasm is a 32-bit target. Also, currently only embedded BoringSSL is supported for cryptographic backend, and even that requires specific tweaks.


Detect and support Emscripten builds

The users are expected to build Themis for Wasm by using emmake helper tool that sets up all necessary environment variables. For example, CC variable will be set to Emscripten's cross-compiler.
Detect when we're building under emmake by inspecting the compiler type, provide IS_EMSCRIPTEN variable if that's the case. We're going to use this switch to customize a bunch of build steps.
First of all, we need to run CMake for embedded BoringSSL using the emconfigure helper that sets its up properly. Additionally, we need to disable assembly usage in BoringSSL's build as it detects the platform incorrectly and tries using x86 assembly (which will not work on Wasm targets, obviously).

Switch to CossackLabs fork of BoringSSL

Some settings required for Emscripten build are not configurable (yet) by setting CMake variables, unfortunately. They require direct changes in BoringSSL's CMake configuration. Switch to our fork of BoringSSL that contains the changes we need to get the Wasm target working.
Hopefully, we're going to get these changes merged into BoringSSL upstream and revert back to using the original source code.

Use BoringSSL as default engine for Emscripten

Currently we test  Wasm builds only with (embedded) BoringSSL so it makes sense to set this engine as default when building with Emscripten.

Add Emscripten support to themis/portable_endian.h

Emscripten platform is similar to Linux and has <endian.h> available. Emscripten uses 32-bit integers because of the way numbers work in JavaScript. It is also little-endian-only at the moment due to technical limitations of the implementation.

Support Emscripten in Soter and Themis tests

We can build Soter and Themis tests and run them, but there are a couple of caveats here.
First of all, emcc output depends on file extension. File names ""themis_test"" and ""soter_test"" result in LLVM bitcode being packed in them, which is not what we want. We should use ""*.js"" extension to get something runnable. Introduce intermediate variables to rename the tests based on the target environment. Use themis_test.js for Emscripten and old themis_test for everything else.
Additionally, we use SINGLE_FILE flag to produce a single *.js file instead of a separate *.wasm file with compiled code and a *.js loader for it. This makes it easier to launch the tests as we don't have to change directories and don't generate extra files.
It also turned out that popen() function is not available in Emscripten runtime. Because of that we cannot use NIST STS as is. Disable it for now. Hopefully, we'll figure out how to use it later.
The next point is that we cannot run resulting tests directly. We should use Node.js to interpret then, not execute *.js files (which is usually not possible on typical systems). Therefore, check if node binary is available and use it to run tests when requested. But only in Emscripten environment. If Node.js is not available then print a warning and fail the build.

Fix broken Secure Cell tests

Remember that 0xDEADBEEF constant which got changed to 0x1337BEEF because 32-bit systems could not handle that value? Here we are again.
This value is used as a 'corrupted' message length value. Eventually it will be used to allocate appropriate amount of memory so that the test can fail successfully.
Real 32-bit Linux systems can allocate 0x1337BEEF bytes of memory just fine. It is possible due to the way memory allocation works on Linux with glibc. However, Wasm runtime has much more strict memory limits and is not able to reserve the memory with lazy mapping the way Linux does it. Furthermore, instead of returning NULL from malloc() the runtime aborts by default.
Lower the value of this constant again. 16 KB should be big enough to be considered invalid, but small enough to be successfully allocated.

Run Emscripten tests on CirleCI

In order to compile Wasm on CircleCI we need to install Emscripten toolchain. Do that in accordance with the official docs. After that the build should just work out of the box. Take care to cache as much as possible so that we don't have to download LLVM and recompile the C standard library each build.",yeeeeah! 🎉,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,458,2019-04-11T11:32:28Z,2019-04-16T11:50:31Z,2019-04-16T13:41:40Z,MERGED,True,246,0,48,https://github.com/ilammy,Explicitly export public API,7,['core'],https://github.com/cossacklabs/themis/pull/458,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/458,"Historically, Themis did not manage public API exports at all. We exported all non-static functions and that's it. WebAssembly builds with Emscripten will require marking exported functions with EMSCRIPTEN_KEEPALIVE attribute so now is a good moment to explicitly define our public API.
Only functions explicitly marked as THEMIS_API and SOTER_API will be exported from libraries and available to users. Everything else will be hidden and not available (even if the users include some private header and try calling a function).
Here are details on functions that are removed from publicly visible exports with these changes:

Soter




Function




🚫
algid_to_evp


🚫
algid_to_evp_aead



clip_random_32


🚫
crypto_sign_ed25519_ref10_fe_0


🚫
crypto_sign_ed25519_ref10_fe_1


🚫
crypto_sign_ed25519_ref10_fe_add


🚫
crypto_sign_ed25519_ref10_fe_cmov


🚫
crypto_sign_ed25519_ref10_fe_copy


🚫
crypto_sign_ed25519_ref10_fe_frombytes


🚫
crypto_sign_ed25519_ref10_fe_invert


🚫
crypto_sign_ed25519_ref10_fe_isnegative



crypto_sign_ed25519_ref10_fe_isnonzero


🚫
crypto_sign_ed25519_ref10_fe_mul



crypto_sign_ed25519_ref10_fe_neg


🚫
crypto_sign_ed25519_ref10_fe_pow22523


🚫
crypto_sign_ed25519_ref10_fe_sq


🚫
crypto_sign_ed25519_ref10_fe_sq2


🚫
crypto_sign_ed25519_ref10_fe_sub



crypto_sign_ed25519_ref10_fe_tobytes


🚫
crypto_sign_ed25519_ref10_ge_add



crypto_sign_ed25519_ref10_ge_double_scalarmult_vartime


🚫
crypto_sign_ed25519_ref10_ge_frombytes_negate_vartime


🚫
crypto_sign_ed25519_ref10_ge_madd


🚫
crypto_sign_ed25519_ref10_ge_msub


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p2


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p3


🚫
crypto_sign_ed25519_ref10_ge_p2_0


🚫
crypto_sign_ed25519_ref10_ge_p2_dbl


🚫
crypto_sign_ed25519_ref10_ge_p3_0


🚫
crypto_sign_ed25519_ref10_ge_p3_dbl



crypto_sign_ed25519_ref10_ge_p3_tobytes


🚫
crypto_sign_ed25519_ref10_ge_p3_to_cached


🚫
crypto_sign_ed25519_ref10_ge_p3_to_p2


🚫
crypto_sign_ed25519_ref10_ge_precomp_0



crypto_sign_ed25519_ref10_ge_scalarmult_base


🚫
crypto_sign_ed25519_ref10_ge_sub



crypto_sign_ed25519_ref10_ge_tobytes



crypto_sign_ed25519_ref10_sc_muladd



crypto_sign_ed25519_ref10_sc_reduce



crypto_verify_32



ge_cmp



ge_frombytes_vartime



generate_random_32



ge_p2_to_p3



ge_p3_sub



ge_scalarmult_blinded



soter_asym_cipher_cleanup



soter_asym_cipher_create



soter_asym_cipher_decrypt



soter_asym_cipher_destroy



soter_asym_cipher_encrypt


🚫
soter_asym_cipher_import_key



soter_asym_cipher_init



soter_asym_ka_cleanup



soter_asym_ka_create



soter_asym_ka_derive



soter_asym_ka_destroy



soter_asym_ka_export_key



soter_asym_ka_gen_key



soter_asym_ka_import_key



soter_asym_ka_init


🚫
soter_crc32


🚫
soter_crc32_create


🚫
soter_crc32_final


🚫
soter_crc32_update


🚫
soter_ec_export_key


🚫
soter_ec_gen_key


🚫
soter_ec_import_key


🚫
soter_ec_priv_key_to_engine_specific


🚫
soter_ec_pub_key_to_engine_specific


🚫
soter_engine_specific_to_ec_priv_key


🚫
soter_engine_specific_to_ec_pub_key


🚫
soter_engine_specific_to_rsa_priv_key


🚫
soter_engine_specific_to_rsa_pub_key



soter_hash_cleanup



soter_hash_create



soter_hash_destroy



soter_hash_final



soter_hash_init



soter_hash_update



soter_hmac_cleanup



soter_hmac_create



soter_hmac_destroy



soter_hmac_final



soter_hmac_init



soter_hmac_update



soter_kdf


🚫
soter_nokdf


🚫
soter_pbkdf2



soter_rand


🚫
soter_rsa_export_key


🚫
soter_rsa_gen_key


🚫
soter_rsa_import_key


🚫
soter_rsa_key_pair_gen_cleanup



soter_rsa_key_pair_gen_create



soter_rsa_key_pair_gen_destroy



soter_rsa_key_pair_gen_export_key



soter_rsa_key_pair_gen_init


🚫
soter_rsa_priv_key_to_engine_specific


🚫
soter_rsa_pub_key_to_engine_specific


🚫
soter_sign_cleanup


🚫
soter_sign_cleanup_ecdsa_none_pkcs8


🚫
soter_sign_cleanup_rsa_pss_pkcs8



soter_sign_create



soter_sign_destroy



soter_sign_export_key


🚫
soter_sign_export_key_ecdsa_none_pkcs8


🚫
soter_sign_export_key_rsa_pss_pkcs8



soter_sign_final


🚫
soter_sign_final_ecdsa_none_pkcs8


🚫
soter_sign_final_rsa_pss_pkcs8



soter_sign_get_alg_id



soter_sign_init


🚫
soter_sign_init_ecdsa_none_pkcs8


🚫
soter_sign_init_rsa_pss_pkcs8



soter_sign_update


🚫
soter_sign_update_ecdsa_none_pkcs8


🚫
soter_sign_update_rsa_pss_pkcs8


🚫
soter_sym_aead_ctx_final


🚫
soter_sym_aead_ctx_init



soter_sym_aead_decrypt_aad



soter_sym_aead_decrypt_create



soter_sym_aead_decrypt_destroy



soter_sym_aead_decrypt_final



soter_sym_aead_decrypt_update



soter_sym_aead_encrypt_aad



soter_sym_aead_encrypt_create



soter_sym_aead_encrypt_destroy



soter_sym_aead_encrypt_final



soter_sym_aead_encrypt_update


🚫
soter_sym_ctx_destroy


🚫
soter_sym_ctx_final


🚫
soter_sym_ctx_init


🚫
soter_sym_ctx_update



soter_sym_decrypt_create



soter_sym_decrypt_destroy



soter_sym_decrypt_final



soter_sym_decrypt_update



soter_sym_encrypt_create



soter_sym_encrypt_destroy



soter_sym_encrypt_final



soter_sym_encrypt_update



soter_update_container_checksum


🚫
soter_verify_cleanup


🚫
soter_verify_cleanup_ecdsa_none_pkcs8


🚫
soter_verify_cleanup_rsa_pss_pkcs8



soter_verify_container_checksum



soter_verify_create



soter_verify_destroy



soter_verify_final


🚫
soter_verify_final_ecdsa_none_pkcs8


🚫
soter_verify_final_rsa_pss_pkcs8



soter_verify_get_alg_id



soter_verify_init


🚫
soter_verify_init_ecdsa_none_pkcs8


🚫
soter_verify_init_rsa_pss_pkcs8



soter_verify_update


🚫
soter_verify_update_ecdsa_none_pkcs8


🚫
soter_verify_update_rsa_pss_pkcs8


🚫
soter_withkdf





Themis




Function




🚫
compute_mac


🚫
compute_signature


🚫
encrypt_gcm


🚫
get_alg_id


🚫
get_key_sign_type


🚫
get_peer_key_sign_type



secure_comparator_append_secret



secure_comparator_begin_compare


🚫
secure_comparator_cleanup



secure_comparator_create



secure_comparator_destroy



secure_comparator_get_result


🚫
secure_comparator_init



secure_comparator_proceed_compare


🚫
secure_session_cleanup



secure_session_connect



secure_session_create


🚫
secure_session_derive_message_keys



secure_session_destroy



secure_session_generate_connect_request



secure_session_get_remote_id


🚫
secure_session_init



secure_session_is_established



secure_session_load


🚫
secure_session_peer_cleanup


🚫
secure_session_peer_init



secure_session_receive



secure_session_save



secure_session_send



secure_session_unwrap



secure_session_wrap


🚫
themis_auth_sym_decrypt_message


🚫
themis_auth_sym_decrypt_message_


🚫
themis_auth_sym_encrypt_message


🚫
themis_auth_sym_encrypt_message_


🚫
themis_auth_sym_plain_decrypt


🚫
themis_auth_sym_plain_encrypt



themis_gen_ec_key_pair


🚫
themis_gen_key_pair



themis_gen_rsa_key_pair



themis_get_asym_key_kind



themis_is_valid_asym_key


🚫
themis_message_destroy


🚫
themis_message_get_data


🚫
themis_message_get_length


🚫
themis_message_init


🚫
themis_message_set



themis_secure_cell_decrypt_context_imprint



themis_secure_cell_decrypt_seal



themis_secure_cell_decrypt_token_protect



themis_secure_cell_encrypt_context_imprint



themis_secure_cell_encrypt_seal



themis_secure_cell_encrypt_token_protect



themis_secure_message_decrypt


🚫
themis_secure_message_decrypter_destroy


🚫
themis_secure_message_decrypter_init


🚫
themis_secure_message_decrypter_proceed


🚫
themis_secure_message_ec_decrypter_destroy


🚫
themis_secure_message_ec_decrypter_init


🚫
themis_secure_message_ec_decrypter_proceed


🚫
themis_secure_message_ec_encrypter_destroy


🚫
themis_secure_message_ec_encrypter_init


🚫
themis_secure_message_ec_encrypter_proceed



themis_secure_message_encrypt


🚫
themis_secure_message_encrypter_destroy


🚫
themis_secure_message_encrypter_init


🚫
themis_secure_message_encrypter_proceed


🚫
themis_secure_message_rsa_decrypter_destroy


🚫
themis_secure_message_rsa_decrypter_init


🚫
themis_secure_message_rsa_decrypter_proceed


🚫
themis_secure_message_rsa_encrypter_destroy


🚫
themis_secure_message_rsa_encrypter_init


🚫
themis_secure_message_rsa_encrypter_proceed



themis_secure_message_sign


🚫
themis_secure_message_signer_destroy


🚫
themis_secure_message_signer_init


🚫
themis_secure_message_signer_proceed



themis_secure_message_unwrap


🚫
themis_secure_message_verifier_destroy


🚫
themis_secure_message_verifier_init


🚫
themis_secure_message_verifier_proceed



themis_secure_message_verify



themis_secure_message_wrap


🚫
themis_sym_decrypt_message_u


🚫
themis_sym_decrypt_message_u_


🚫
themis_sym_encrypt_message_u


🚫
themis_sym_encrypt_message_u_


🚫
themis_sym_kdf


🚫
themis_sym_plain_decrypt


🚫
themis_sym_plain_encrypt


🚫
verify_mac


🚫
verify_signature




All these functions are not accessible normally, via <soter/soter.h> or <themis/themis.h>.
Note that some functions from private headers are required to be exported due to hysterical raisins. These ones are marked with SOTER_PRIVATE_API and are exceptional by all means.


Explicitly mark public API of Themis

Introduce a new header <themis/themis_api.h> which defines a function attribute marker THEMIS_API. It is used to explicitly mark API that is considered public. These functions will be exported from the library.
Themis does not really provide separate public header files so it's not immediately obvious which functions have to be marked public. We go with functions visible when including <themis/themis.h>.
Currently we support only UNIX-like systems so we can limit ourselves to just Clang and GCC. MSVC requires slightly different syntax but we'll get back to that when we start supporting Windows again.

Explicitly mark public API of Soter

Just like with Themis, introduce <soter/soter_api.h> with SOTER_API and mark all public declarations as such.
Note that Soter also has a... complicated story with header files. It's not apparent which headers are public and which are private. We consider public those ones included from <soter/soter.h>.

Export additional private-use API from Soter

Due to historically sloppy export management, many functions in Themis (as well as in unit-tests) rely on not-so-public API to be available. Normally you cannot get access to these functions, but you can if you import <soter/soter_t.h> or some other internal header files.
Introduce a new marker SOTER_PRIVATE_API to distinguish such functions from normal exports, and mark all of them exported. There are quite a few of functions, yeah...
Note that while public functions are marked in header files, private export functions are marked at definition site. This is required because some of the source files do not actually include corresponding headers. Plus, this way this definitions are ugly to look at and discourage from adding new 'private' exports.

Set default symbol visibility to hidden

Finally, compile all source code with default symbol visibility set to ""hidden"". With this only symbols marked with THEMIS_API, SOTER_API, or SOTER_PRIVATE_API will get exported from libraries. static functions will never be exported, and non-static functions are also not exported by default unless explicitly marked as public.

Before merge:

 Add new headers to Xcode project for Carthage
 Make sure API mistakes are caught by automatic tests (will do later)","Historically, Themis did not manage public API exports at all. We exported all non-static functions and that's it. WebAssembly builds with Emscripten will require marking exported functions with EMSCRIPTEN_KEEPALIVE attribute so now is a good moment to explicitly define our public API.
Only functions explicitly marked as THEMIS_API and SOTER_API will be exported from libraries and available to users. Everything else will be hidden and not available (even if the users include some private header and try calling a function).
Here are details on functions that are removed from publicly visible exports with these changes:

Soter




Function




🚫
algid_to_evp


🚫
algid_to_evp_aead



clip_random_32


🚫
crypto_sign_ed25519_ref10_fe_0


🚫
crypto_sign_ed25519_ref10_fe_1


🚫
crypto_sign_ed25519_ref10_fe_add


🚫
crypto_sign_ed25519_ref10_fe_cmov


🚫
crypto_sign_ed25519_ref10_fe_copy


🚫
crypto_sign_ed25519_ref10_fe_frombytes


🚫
crypto_sign_ed25519_ref10_fe_invert


🚫
crypto_sign_ed25519_ref10_fe_isnegative



crypto_sign_ed25519_ref10_fe_isnonzero


🚫
crypto_sign_ed25519_ref10_fe_mul



crypto_sign_ed25519_ref10_fe_neg


🚫
crypto_sign_ed25519_ref10_fe_pow22523


🚫
crypto_sign_ed25519_ref10_fe_sq


🚫
crypto_sign_ed25519_ref10_fe_sq2


🚫
crypto_sign_ed25519_ref10_fe_sub



crypto_sign_ed25519_ref10_fe_tobytes


🚫
crypto_sign_ed25519_ref10_ge_add



crypto_sign_ed25519_ref10_ge_double_scalarmult_vartime


🚫
crypto_sign_ed25519_ref10_ge_frombytes_negate_vartime


🚫
crypto_sign_ed25519_ref10_ge_madd


🚫
crypto_sign_ed25519_ref10_ge_msub


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p2


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p3


🚫
crypto_sign_ed25519_ref10_ge_p2_0


🚫
crypto_sign_ed25519_ref10_ge_p2_dbl


🚫
crypto_sign_ed25519_ref10_ge_p3_0


🚫
crypto_sign_ed25519_ref10_ge_p3_dbl



crypto_sign_ed25519_ref10_ge_p3_tobytes


🚫
crypto_sign_ed25519_ref10_ge_p3_to_cached


🚫
crypto_sign_ed25519_ref10_ge_p3_to_p2


🚫
crypto_sign_ed25519_ref10_ge_precomp_0



crypto_sign_ed25519_ref10_ge_scalarmult_base


🚫
crypto_sign_ed25519_ref10_ge_sub



crypto_sign_ed25519_ref10_ge_tobytes



crypto_sign_ed25519_ref10_sc_muladd



crypto_sign_ed25519_ref10_sc_reduce



crypto_verify_32



ge_cmp



ge_frombytes_vartime



generate_random_32



ge_p2_to_p3



ge_p3_sub



ge_scalarmult_blinded



soter_asym_cipher_cleanup



soter_asym_cipher_create



soter_asym_cipher_decrypt



soter_asym_cipher_destroy



soter_asym_cipher_encrypt


🚫
soter_asym_cipher_import_key



soter_asym_cipher_init



soter_asym_ka_cleanup



soter_asym_ka_create



soter_asym_ka_derive



soter_asym_ka_destroy



soter_asym_ka_export_key



soter_asym_ka_gen_key



soter_asym_ka_import_key



soter_asym_ka_init


🚫
soter_crc32


🚫
soter_crc32_create


🚫
soter_crc32_final


🚫
soter_crc32_update


🚫
soter_ec_export_key


🚫
soter_ec_gen_key


🚫
soter_ec_import_key


🚫
soter_ec_priv_key_to_engine_specific


🚫
soter_ec_pub_key_to_engine_specific


🚫
soter_engine_specific_to_ec_priv_key


🚫
soter_engine_specific_to_ec_pub_key


🚫
soter_engine_specific_to_rsa_priv_key


🚫
soter_engine_specific_to_rsa_pub_key



soter_hash_cleanup



soter_hash_create



soter_hash_destroy



soter_hash_final



soter_hash_init



soter_hash_update



soter_hmac_cleanup



soter_hmac_create



soter_hmac_destroy



soter_hmac_final



soter_hmac_init



soter_hmac_update



soter_kdf


🚫
soter_nokdf


🚫
soter_pbkdf2



soter_rand


🚫
soter_rsa_export_key


🚫
soter_rsa_gen_key


🚫
soter_rsa_import_key


🚫
soter_rsa_key_pair_gen_cleanup



soter_rsa_key_pair_gen_create



soter_rsa_key_pair_gen_destroy



soter_rsa_key_pair_gen_export_key



soter_rsa_key_pair_gen_init


🚫
soter_rsa_priv_key_to_engine_specific


🚫
soter_rsa_pub_key_to_engine_specific


🚫
soter_sign_cleanup


🚫
soter_sign_cleanup_ecdsa_none_pkcs8


🚫
soter_sign_cleanup_rsa_pss_pkcs8



soter_sign_create



soter_sign_destroy



soter_sign_export_key


🚫
soter_sign_export_key_ecdsa_none_pkcs8


🚫
soter_sign_export_key_rsa_pss_pkcs8



soter_sign_final


🚫
soter_sign_final_ecdsa_none_pkcs8


🚫
soter_sign_final_rsa_pss_pkcs8



soter_sign_get_alg_id



soter_sign_init


🚫
soter_sign_init_ecdsa_none_pkcs8


🚫
soter_sign_init_rsa_pss_pkcs8



soter_sign_update


🚫
soter_sign_update_ecdsa_none_pkcs8


🚫
soter_sign_update_rsa_pss_pkcs8


🚫
soter_sym_aead_ctx_final


🚫
soter_sym_aead_ctx_init



soter_sym_aead_decrypt_aad



soter_sym_aead_decrypt_create



soter_sym_aead_decrypt_destroy



soter_sym_aead_decrypt_final



soter_sym_aead_decrypt_update



soter_sym_aead_encrypt_aad



soter_sym_aead_encrypt_create



soter_sym_aead_encrypt_destroy



soter_sym_aead_encrypt_final



soter_sym_aead_encrypt_update


🚫
soter_sym_ctx_destroy


🚫
soter_sym_ctx_final


🚫
soter_sym_ctx_init


🚫
soter_sym_ctx_update



soter_sym_decrypt_create



soter_sym_decrypt_destroy



soter_sym_decrypt_final



soter_sym_decrypt_update



soter_sym_encrypt_create



soter_sym_encrypt_destroy



soter_sym_encrypt_final



soter_sym_encrypt_update



soter_update_container_checksum


🚫
soter_verify_cleanup


🚫
soter_verify_cleanup_ecdsa_none_pkcs8


🚫
soter_verify_cleanup_rsa_pss_pkcs8



soter_verify_container_checksum



soter_verify_create



soter_verify_destroy



soter_verify_final


🚫
soter_verify_final_ecdsa_none_pkcs8


🚫
soter_verify_final_rsa_pss_pkcs8



soter_verify_get_alg_id



soter_verify_init


🚫
soter_verify_init_ecdsa_none_pkcs8


🚫
soter_verify_init_rsa_pss_pkcs8



soter_verify_update


🚫
soter_verify_update_ecdsa_none_pkcs8


🚫
soter_verify_update_rsa_pss_pkcs8


🚫
soter_withkdf





Themis




Function




🚫
compute_mac


🚫
compute_signature


🚫
encrypt_gcm


🚫
get_alg_id


🚫
get_key_sign_type


🚫
get_peer_key_sign_type



secure_comparator_append_secret



secure_comparator_begin_compare


🚫
secure_comparator_cleanup



secure_comparator_create



secure_comparator_destroy



secure_comparator_get_result


🚫
secure_comparator_init



secure_comparator_proceed_compare


🚫
secure_session_cleanup



secure_session_connect



secure_session_create


🚫
secure_session_derive_message_keys



secure_session_destroy



secure_session_generate_connect_request



secure_session_get_remote_id


🚫
secure_session_init



secure_session_is_established



secure_session_load


🚫
secure_session_peer_cleanup


🚫
secure_session_peer_init



secure_session_receive



secure_session_save



secure_session_send



secure_session_unwrap



secure_session_wrap


🚫
themis_auth_sym_decrypt_message


🚫
themis_auth_sym_decrypt_message_


🚫
themis_auth_sym_encrypt_message


🚫
themis_auth_sym_encrypt_message_


🚫
themis_auth_sym_plain_decrypt


🚫
themis_auth_sym_plain_encrypt



themis_gen_ec_key_pair


🚫
themis_gen_key_pair



themis_gen_rsa_key_pair



themis_get_asym_key_kind



themis_is_valid_asym_key


🚫
themis_message_destroy


🚫
themis_message_get_data


🚫
themis_message_get_length


🚫
themis_message_init


🚫
themis_message_set



themis_secure_cell_decrypt_context_imprint



themis_secure_cell_decrypt_seal



themis_secure_cell_decrypt_token_protect



themis_secure_cell_encrypt_context_imprint



themis_secure_cell_encrypt_seal



themis_secure_cell_encrypt_token_protect



themis_secure_message_decrypt


🚫
themis_secure_message_decrypter_destroy


🚫
themis_secure_message_decrypter_init


🚫
themis_secure_message_decrypter_proceed


🚫
themis_secure_message_ec_decrypter_destroy


🚫
themis_secure_message_ec_decrypter_init


🚫
themis_secure_message_ec_decrypter_proceed


🚫
themis_secure_message_ec_encrypter_destroy


🚫
themis_secure_message_ec_encrypter_init


🚫
themis_secure_message_ec_encrypter_proceed



themis_secure_message_encrypt


🚫
themis_secure_message_encrypter_destroy


🚫
themis_secure_message_encrypter_init


🚫
themis_secure_message_encrypter_proceed


🚫
themis_secure_message_rsa_decrypter_destroy


🚫
themis_secure_message_rsa_decrypter_init


🚫
themis_secure_message_rsa_decrypter_proceed


🚫
themis_secure_message_rsa_encrypter_destroy


🚫
themis_secure_message_rsa_encrypter_init


🚫
themis_secure_message_rsa_encrypter_proceed



themis_secure_message_sign


🚫
themis_secure_message_signer_destroy


🚫
themis_secure_message_signer_init


🚫
themis_secure_message_signer_proceed



themis_secure_message_unwrap


🚫
themis_secure_message_verifier_destroy


🚫
themis_secure_message_verifier_init


🚫
themis_secure_message_verifier_proceed



themis_secure_message_verify



themis_secure_message_wrap


🚫
themis_sym_decrypt_message_u


🚫
themis_sym_decrypt_message_u_


🚫
themis_sym_encrypt_message_u


🚫
themis_sym_encrypt_message_u_


🚫
themis_sym_kdf


🚫
themis_sym_plain_decrypt


🚫
themis_sym_plain_encrypt


🚫
verify_mac


🚫
verify_signature




All these functions are not accessible normally, via <soter/soter.h> or <themis/themis.h>.
Note that some functions from private headers are required to be exported due to hysterical raisins. These ones are marked with SOTER_PRIVATE_API and are exceptional by all means.


Explicitly mark public API of Themis

Introduce a new header <themis/themis_api.h> which defines a function attribute marker THEMIS_API. It is used to explicitly mark API that is considered public. These functions will be exported from the library.
Themis does not really provide separate public header files so it's not immediately obvious which functions have to be marked public. We go with functions visible when including <themis/themis.h>.
Currently we support only UNIX-like systems so we can limit ourselves to just Clang and GCC. MSVC requires slightly different syntax but we'll get back to that when we start supporting Windows again.

Explicitly mark public API of Soter

Just like with Themis, introduce <soter/soter_api.h> with SOTER_API and mark all public declarations as such.
Note that Soter also has a... complicated story with header files. It's not apparent which headers are public and which are private. We consider public those ones included from <soter/soter.h>.

Export additional private-use API from Soter

Due to historically sloppy export management, many functions in Themis (as well as in unit-tests) rely on not-so-public API to be available. Normally you cannot get access to these functions, but you can if you import <soter/soter_t.h> or some other internal header files.
Introduce a new marker SOTER_PRIVATE_API to distinguish such functions from normal exports, and mark all of them exported. There are quite a few of functions, yeah...
Note that while public functions are marked in header files, private export functions are marked at definition site. This is required because some of the source files do not actually include corresponding headers. Plus, this way this definitions are ugly to look at and discourage from adding new 'private' exports.

Set default symbol visibility to hidden

Finally, compile all source code with default symbol visibility set to ""hidden"". With this only symbols marked with THEMIS_API, SOTER_API, or SOTER_PRIVATE_API will get exported from libraries. static functions will never be exported, and non-static functions are also not exported by default unless explicitly marked as public.

Before merge:

 Add new headers to Xcode project for Carthage
 Make sure API mistakes are caught by automatic tests (will do later)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,458,2019-04-11T11:32:28Z,2019-04-16T11:50:31Z,2019-04-16T13:41:40Z,MERGED,True,246,0,48,https://github.com/ilammy,Explicitly export public API,7,['core'],https://github.com/cossacklabs/themis/pull/458,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/458#issuecomment-482087813,"Historically, Themis did not manage public API exports at all. We exported all non-static functions and that's it. WebAssembly builds with Emscripten will require marking exported functions with EMSCRIPTEN_KEEPALIVE attribute so now is a good moment to explicitly define our public API.
Only functions explicitly marked as THEMIS_API and SOTER_API will be exported from libraries and available to users. Everything else will be hidden and not available (even if the users include some private header and try calling a function).
Here are details on functions that are removed from publicly visible exports with these changes:

Soter




Function




🚫
algid_to_evp


🚫
algid_to_evp_aead



clip_random_32


🚫
crypto_sign_ed25519_ref10_fe_0


🚫
crypto_sign_ed25519_ref10_fe_1


🚫
crypto_sign_ed25519_ref10_fe_add


🚫
crypto_sign_ed25519_ref10_fe_cmov


🚫
crypto_sign_ed25519_ref10_fe_copy


🚫
crypto_sign_ed25519_ref10_fe_frombytes


🚫
crypto_sign_ed25519_ref10_fe_invert


🚫
crypto_sign_ed25519_ref10_fe_isnegative



crypto_sign_ed25519_ref10_fe_isnonzero


🚫
crypto_sign_ed25519_ref10_fe_mul



crypto_sign_ed25519_ref10_fe_neg


🚫
crypto_sign_ed25519_ref10_fe_pow22523


🚫
crypto_sign_ed25519_ref10_fe_sq


🚫
crypto_sign_ed25519_ref10_fe_sq2


🚫
crypto_sign_ed25519_ref10_fe_sub



crypto_sign_ed25519_ref10_fe_tobytes


🚫
crypto_sign_ed25519_ref10_ge_add



crypto_sign_ed25519_ref10_ge_double_scalarmult_vartime


🚫
crypto_sign_ed25519_ref10_ge_frombytes_negate_vartime


🚫
crypto_sign_ed25519_ref10_ge_madd


🚫
crypto_sign_ed25519_ref10_ge_msub


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p2


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p3


🚫
crypto_sign_ed25519_ref10_ge_p2_0


🚫
crypto_sign_ed25519_ref10_ge_p2_dbl


🚫
crypto_sign_ed25519_ref10_ge_p3_0


🚫
crypto_sign_ed25519_ref10_ge_p3_dbl



crypto_sign_ed25519_ref10_ge_p3_tobytes


🚫
crypto_sign_ed25519_ref10_ge_p3_to_cached


🚫
crypto_sign_ed25519_ref10_ge_p3_to_p2


🚫
crypto_sign_ed25519_ref10_ge_precomp_0



crypto_sign_ed25519_ref10_ge_scalarmult_base


🚫
crypto_sign_ed25519_ref10_ge_sub



crypto_sign_ed25519_ref10_ge_tobytes



crypto_sign_ed25519_ref10_sc_muladd



crypto_sign_ed25519_ref10_sc_reduce



crypto_verify_32



ge_cmp



ge_frombytes_vartime



generate_random_32



ge_p2_to_p3



ge_p3_sub



ge_scalarmult_blinded



soter_asym_cipher_cleanup



soter_asym_cipher_create



soter_asym_cipher_decrypt



soter_asym_cipher_destroy



soter_asym_cipher_encrypt


🚫
soter_asym_cipher_import_key



soter_asym_cipher_init



soter_asym_ka_cleanup



soter_asym_ka_create



soter_asym_ka_derive



soter_asym_ka_destroy



soter_asym_ka_export_key



soter_asym_ka_gen_key



soter_asym_ka_import_key



soter_asym_ka_init


🚫
soter_crc32


🚫
soter_crc32_create


🚫
soter_crc32_final


🚫
soter_crc32_update


🚫
soter_ec_export_key


🚫
soter_ec_gen_key


🚫
soter_ec_import_key


🚫
soter_ec_priv_key_to_engine_specific


🚫
soter_ec_pub_key_to_engine_specific


🚫
soter_engine_specific_to_ec_priv_key


🚫
soter_engine_specific_to_ec_pub_key


🚫
soter_engine_specific_to_rsa_priv_key


🚫
soter_engine_specific_to_rsa_pub_key



soter_hash_cleanup



soter_hash_create



soter_hash_destroy



soter_hash_final



soter_hash_init



soter_hash_update



soter_hmac_cleanup



soter_hmac_create



soter_hmac_destroy



soter_hmac_final



soter_hmac_init



soter_hmac_update



soter_kdf


🚫
soter_nokdf


🚫
soter_pbkdf2



soter_rand


🚫
soter_rsa_export_key


🚫
soter_rsa_gen_key


🚫
soter_rsa_import_key


🚫
soter_rsa_key_pair_gen_cleanup



soter_rsa_key_pair_gen_create



soter_rsa_key_pair_gen_destroy



soter_rsa_key_pair_gen_export_key



soter_rsa_key_pair_gen_init


🚫
soter_rsa_priv_key_to_engine_specific


🚫
soter_rsa_pub_key_to_engine_specific


🚫
soter_sign_cleanup


🚫
soter_sign_cleanup_ecdsa_none_pkcs8


🚫
soter_sign_cleanup_rsa_pss_pkcs8



soter_sign_create



soter_sign_destroy



soter_sign_export_key


🚫
soter_sign_export_key_ecdsa_none_pkcs8


🚫
soter_sign_export_key_rsa_pss_pkcs8



soter_sign_final


🚫
soter_sign_final_ecdsa_none_pkcs8


🚫
soter_sign_final_rsa_pss_pkcs8



soter_sign_get_alg_id



soter_sign_init


🚫
soter_sign_init_ecdsa_none_pkcs8


🚫
soter_sign_init_rsa_pss_pkcs8



soter_sign_update


🚫
soter_sign_update_ecdsa_none_pkcs8


🚫
soter_sign_update_rsa_pss_pkcs8


🚫
soter_sym_aead_ctx_final


🚫
soter_sym_aead_ctx_init



soter_sym_aead_decrypt_aad



soter_sym_aead_decrypt_create



soter_sym_aead_decrypt_destroy



soter_sym_aead_decrypt_final



soter_sym_aead_decrypt_update



soter_sym_aead_encrypt_aad



soter_sym_aead_encrypt_create



soter_sym_aead_encrypt_destroy



soter_sym_aead_encrypt_final



soter_sym_aead_encrypt_update


🚫
soter_sym_ctx_destroy


🚫
soter_sym_ctx_final


🚫
soter_sym_ctx_init


🚫
soter_sym_ctx_update



soter_sym_decrypt_create



soter_sym_decrypt_destroy



soter_sym_decrypt_final



soter_sym_decrypt_update



soter_sym_encrypt_create



soter_sym_encrypt_destroy



soter_sym_encrypt_final



soter_sym_encrypt_update



soter_update_container_checksum


🚫
soter_verify_cleanup


🚫
soter_verify_cleanup_ecdsa_none_pkcs8


🚫
soter_verify_cleanup_rsa_pss_pkcs8



soter_verify_container_checksum



soter_verify_create



soter_verify_destroy



soter_verify_final


🚫
soter_verify_final_ecdsa_none_pkcs8


🚫
soter_verify_final_rsa_pss_pkcs8



soter_verify_get_alg_id



soter_verify_init


🚫
soter_verify_init_ecdsa_none_pkcs8


🚫
soter_verify_init_rsa_pss_pkcs8



soter_verify_update


🚫
soter_verify_update_ecdsa_none_pkcs8


🚫
soter_verify_update_rsa_pss_pkcs8


🚫
soter_withkdf





Themis




Function




🚫
compute_mac


🚫
compute_signature


🚫
encrypt_gcm


🚫
get_alg_id


🚫
get_key_sign_type


🚫
get_peer_key_sign_type



secure_comparator_append_secret



secure_comparator_begin_compare


🚫
secure_comparator_cleanup



secure_comparator_create



secure_comparator_destroy



secure_comparator_get_result


🚫
secure_comparator_init



secure_comparator_proceed_compare


🚫
secure_session_cleanup



secure_session_connect



secure_session_create


🚫
secure_session_derive_message_keys



secure_session_destroy



secure_session_generate_connect_request



secure_session_get_remote_id


🚫
secure_session_init



secure_session_is_established



secure_session_load


🚫
secure_session_peer_cleanup


🚫
secure_session_peer_init



secure_session_receive



secure_session_save



secure_session_send



secure_session_unwrap



secure_session_wrap


🚫
themis_auth_sym_decrypt_message


🚫
themis_auth_sym_decrypt_message_


🚫
themis_auth_sym_encrypt_message


🚫
themis_auth_sym_encrypt_message_


🚫
themis_auth_sym_plain_decrypt


🚫
themis_auth_sym_plain_encrypt



themis_gen_ec_key_pair


🚫
themis_gen_key_pair



themis_gen_rsa_key_pair



themis_get_asym_key_kind



themis_is_valid_asym_key


🚫
themis_message_destroy


🚫
themis_message_get_data


🚫
themis_message_get_length


🚫
themis_message_init


🚫
themis_message_set



themis_secure_cell_decrypt_context_imprint



themis_secure_cell_decrypt_seal



themis_secure_cell_decrypt_token_protect



themis_secure_cell_encrypt_context_imprint



themis_secure_cell_encrypt_seal



themis_secure_cell_encrypt_token_protect



themis_secure_message_decrypt


🚫
themis_secure_message_decrypter_destroy


🚫
themis_secure_message_decrypter_init


🚫
themis_secure_message_decrypter_proceed


🚫
themis_secure_message_ec_decrypter_destroy


🚫
themis_secure_message_ec_decrypter_init


🚫
themis_secure_message_ec_decrypter_proceed


🚫
themis_secure_message_ec_encrypter_destroy


🚫
themis_secure_message_ec_encrypter_init


🚫
themis_secure_message_ec_encrypter_proceed



themis_secure_message_encrypt


🚫
themis_secure_message_encrypter_destroy


🚫
themis_secure_message_encrypter_init


🚫
themis_secure_message_encrypter_proceed


🚫
themis_secure_message_rsa_decrypter_destroy


🚫
themis_secure_message_rsa_decrypter_init


🚫
themis_secure_message_rsa_decrypter_proceed


🚫
themis_secure_message_rsa_encrypter_destroy


🚫
themis_secure_message_rsa_encrypter_init


🚫
themis_secure_message_rsa_encrypter_proceed



themis_secure_message_sign


🚫
themis_secure_message_signer_destroy


🚫
themis_secure_message_signer_init


🚫
themis_secure_message_signer_proceed



themis_secure_message_unwrap


🚫
themis_secure_message_verifier_destroy


🚫
themis_secure_message_verifier_init


🚫
themis_secure_message_verifier_proceed



themis_secure_message_verify



themis_secure_message_wrap


🚫
themis_sym_decrypt_message_u


🚫
themis_sym_decrypt_message_u_


🚫
themis_sym_encrypt_message_u


🚫
themis_sym_encrypt_message_u_


🚫
themis_sym_kdf


🚫
themis_sym_plain_decrypt


🚫
themis_sym_plain_encrypt


🚫
verify_mac


🚫
verify_signature




All these functions are not accessible normally, via <soter/soter.h> or <themis/themis.h>.
Note that some functions from private headers are required to be exported due to hysterical raisins. These ones are marked with SOTER_PRIVATE_API and are exceptional by all means.


Explicitly mark public API of Themis

Introduce a new header <themis/themis_api.h> which defines a function attribute marker THEMIS_API. It is used to explicitly mark API that is considered public. These functions will be exported from the library.
Themis does not really provide separate public header files so it's not immediately obvious which functions have to be marked public. We go with functions visible when including <themis/themis.h>.
Currently we support only UNIX-like systems so we can limit ourselves to just Clang and GCC. MSVC requires slightly different syntax but we'll get back to that when we start supporting Windows again.

Explicitly mark public API of Soter

Just like with Themis, introduce <soter/soter_api.h> with SOTER_API and mark all public declarations as such.
Note that Soter also has a... complicated story with header files. It's not apparent which headers are public and which are private. We consider public those ones included from <soter/soter.h>.

Export additional private-use API from Soter

Due to historically sloppy export management, many functions in Themis (as well as in unit-tests) rely on not-so-public API to be available. Normally you cannot get access to these functions, but you can if you import <soter/soter_t.h> or some other internal header files.
Introduce a new marker SOTER_PRIVATE_API to distinguish such functions from normal exports, and mark all of them exported. There are quite a few of functions, yeah...
Note that while public functions are marked in header files, private export functions are marked at definition site. This is required because some of the source files do not actually include corresponding headers. Plus, this way this definitions are ugly to look at and discourage from adding new 'private' exports.

Set default symbol visibility to hidden

Finally, compile all source code with default symbol visibility set to ""hidden"". With this only symbols marked with THEMIS_API, SOTER_API, or SOTER_PRIVATE_API will get exported from libraries. static functions will never be exported, and non-static functions are also not exported by default unless explicitly marked as public.

Before merge:

 Add new headers to Xcode project for Carthage
 Make sure API mistakes are caught by automatic tests (will do later)",is it hard to add windows support and extend macros? found an example when read about visibility attribute - https://gcc.gnu.org/wiki/Visibility,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,458,2019-04-11T11:32:28Z,2019-04-16T11:50:31Z,2019-04-16T13:41:40Z,MERGED,True,246,0,48,https://github.com/ilammy,Explicitly export public API,7,['core'],https://github.com/cossacklabs/themis/pull/458,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/458#issuecomment-482146467,"Historically, Themis did not manage public API exports at all. We exported all non-static functions and that's it. WebAssembly builds with Emscripten will require marking exported functions with EMSCRIPTEN_KEEPALIVE attribute so now is a good moment to explicitly define our public API.
Only functions explicitly marked as THEMIS_API and SOTER_API will be exported from libraries and available to users. Everything else will be hidden and not available (even if the users include some private header and try calling a function).
Here are details on functions that are removed from publicly visible exports with these changes:

Soter




Function




🚫
algid_to_evp


🚫
algid_to_evp_aead



clip_random_32


🚫
crypto_sign_ed25519_ref10_fe_0


🚫
crypto_sign_ed25519_ref10_fe_1


🚫
crypto_sign_ed25519_ref10_fe_add


🚫
crypto_sign_ed25519_ref10_fe_cmov


🚫
crypto_sign_ed25519_ref10_fe_copy


🚫
crypto_sign_ed25519_ref10_fe_frombytes


🚫
crypto_sign_ed25519_ref10_fe_invert


🚫
crypto_sign_ed25519_ref10_fe_isnegative



crypto_sign_ed25519_ref10_fe_isnonzero


🚫
crypto_sign_ed25519_ref10_fe_mul



crypto_sign_ed25519_ref10_fe_neg


🚫
crypto_sign_ed25519_ref10_fe_pow22523


🚫
crypto_sign_ed25519_ref10_fe_sq


🚫
crypto_sign_ed25519_ref10_fe_sq2


🚫
crypto_sign_ed25519_ref10_fe_sub



crypto_sign_ed25519_ref10_fe_tobytes


🚫
crypto_sign_ed25519_ref10_ge_add



crypto_sign_ed25519_ref10_ge_double_scalarmult_vartime


🚫
crypto_sign_ed25519_ref10_ge_frombytes_negate_vartime


🚫
crypto_sign_ed25519_ref10_ge_madd


🚫
crypto_sign_ed25519_ref10_ge_msub


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p2


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p3


🚫
crypto_sign_ed25519_ref10_ge_p2_0


🚫
crypto_sign_ed25519_ref10_ge_p2_dbl


🚫
crypto_sign_ed25519_ref10_ge_p3_0


🚫
crypto_sign_ed25519_ref10_ge_p3_dbl



crypto_sign_ed25519_ref10_ge_p3_tobytes


🚫
crypto_sign_ed25519_ref10_ge_p3_to_cached


🚫
crypto_sign_ed25519_ref10_ge_p3_to_p2


🚫
crypto_sign_ed25519_ref10_ge_precomp_0



crypto_sign_ed25519_ref10_ge_scalarmult_base


🚫
crypto_sign_ed25519_ref10_ge_sub



crypto_sign_ed25519_ref10_ge_tobytes



crypto_sign_ed25519_ref10_sc_muladd



crypto_sign_ed25519_ref10_sc_reduce



crypto_verify_32



ge_cmp



ge_frombytes_vartime



generate_random_32



ge_p2_to_p3



ge_p3_sub



ge_scalarmult_blinded



soter_asym_cipher_cleanup



soter_asym_cipher_create



soter_asym_cipher_decrypt



soter_asym_cipher_destroy



soter_asym_cipher_encrypt


🚫
soter_asym_cipher_import_key



soter_asym_cipher_init



soter_asym_ka_cleanup



soter_asym_ka_create



soter_asym_ka_derive



soter_asym_ka_destroy



soter_asym_ka_export_key



soter_asym_ka_gen_key



soter_asym_ka_import_key



soter_asym_ka_init


🚫
soter_crc32


🚫
soter_crc32_create


🚫
soter_crc32_final


🚫
soter_crc32_update


🚫
soter_ec_export_key


🚫
soter_ec_gen_key


🚫
soter_ec_import_key


🚫
soter_ec_priv_key_to_engine_specific


🚫
soter_ec_pub_key_to_engine_specific


🚫
soter_engine_specific_to_ec_priv_key


🚫
soter_engine_specific_to_ec_pub_key


🚫
soter_engine_specific_to_rsa_priv_key


🚫
soter_engine_specific_to_rsa_pub_key



soter_hash_cleanup



soter_hash_create



soter_hash_destroy



soter_hash_final



soter_hash_init



soter_hash_update



soter_hmac_cleanup



soter_hmac_create



soter_hmac_destroy



soter_hmac_final



soter_hmac_init



soter_hmac_update



soter_kdf


🚫
soter_nokdf


🚫
soter_pbkdf2



soter_rand


🚫
soter_rsa_export_key


🚫
soter_rsa_gen_key


🚫
soter_rsa_import_key


🚫
soter_rsa_key_pair_gen_cleanup



soter_rsa_key_pair_gen_create



soter_rsa_key_pair_gen_destroy



soter_rsa_key_pair_gen_export_key



soter_rsa_key_pair_gen_init


🚫
soter_rsa_priv_key_to_engine_specific


🚫
soter_rsa_pub_key_to_engine_specific


🚫
soter_sign_cleanup


🚫
soter_sign_cleanup_ecdsa_none_pkcs8


🚫
soter_sign_cleanup_rsa_pss_pkcs8



soter_sign_create



soter_sign_destroy



soter_sign_export_key


🚫
soter_sign_export_key_ecdsa_none_pkcs8


🚫
soter_sign_export_key_rsa_pss_pkcs8



soter_sign_final


🚫
soter_sign_final_ecdsa_none_pkcs8


🚫
soter_sign_final_rsa_pss_pkcs8



soter_sign_get_alg_id



soter_sign_init


🚫
soter_sign_init_ecdsa_none_pkcs8


🚫
soter_sign_init_rsa_pss_pkcs8



soter_sign_update


🚫
soter_sign_update_ecdsa_none_pkcs8


🚫
soter_sign_update_rsa_pss_pkcs8


🚫
soter_sym_aead_ctx_final


🚫
soter_sym_aead_ctx_init



soter_sym_aead_decrypt_aad



soter_sym_aead_decrypt_create



soter_sym_aead_decrypt_destroy



soter_sym_aead_decrypt_final



soter_sym_aead_decrypt_update



soter_sym_aead_encrypt_aad



soter_sym_aead_encrypt_create



soter_sym_aead_encrypt_destroy



soter_sym_aead_encrypt_final



soter_sym_aead_encrypt_update


🚫
soter_sym_ctx_destroy


🚫
soter_sym_ctx_final


🚫
soter_sym_ctx_init


🚫
soter_sym_ctx_update



soter_sym_decrypt_create



soter_sym_decrypt_destroy



soter_sym_decrypt_final



soter_sym_decrypt_update



soter_sym_encrypt_create



soter_sym_encrypt_destroy



soter_sym_encrypt_final



soter_sym_encrypt_update



soter_update_container_checksum


🚫
soter_verify_cleanup


🚫
soter_verify_cleanup_ecdsa_none_pkcs8


🚫
soter_verify_cleanup_rsa_pss_pkcs8



soter_verify_container_checksum



soter_verify_create



soter_verify_destroy



soter_verify_final


🚫
soter_verify_final_ecdsa_none_pkcs8


🚫
soter_verify_final_rsa_pss_pkcs8



soter_verify_get_alg_id



soter_verify_init


🚫
soter_verify_init_ecdsa_none_pkcs8


🚫
soter_verify_init_rsa_pss_pkcs8



soter_verify_update


🚫
soter_verify_update_ecdsa_none_pkcs8


🚫
soter_verify_update_rsa_pss_pkcs8


🚫
soter_withkdf





Themis




Function




🚫
compute_mac


🚫
compute_signature


🚫
encrypt_gcm


🚫
get_alg_id


🚫
get_key_sign_type


🚫
get_peer_key_sign_type



secure_comparator_append_secret



secure_comparator_begin_compare


🚫
secure_comparator_cleanup



secure_comparator_create



secure_comparator_destroy



secure_comparator_get_result


🚫
secure_comparator_init



secure_comparator_proceed_compare


🚫
secure_session_cleanup



secure_session_connect



secure_session_create


🚫
secure_session_derive_message_keys



secure_session_destroy



secure_session_generate_connect_request



secure_session_get_remote_id


🚫
secure_session_init



secure_session_is_established



secure_session_load


🚫
secure_session_peer_cleanup


🚫
secure_session_peer_init



secure_session_receive



secure_session_save



secure_session_send



secure_session_unwrap



secure_session_wrap


🚫
themis_auth_sym_decrypt_message


🚫
themis_auth_sym_decrypt_message_


🚫
themis_auth_sym_encrypt_message


🚫
themis_auth_sym_encrypt_message_


🚫
themis_auth_sym_plain_decrypt


🚫
themis_auth_sym_plain_encrypt



themis_gen_ec_key_pair


🚫
themis_gen_key_pair



themis_gen_rsa_key_pair



themis_get_asym_key_kind



themis_is_valid_asym_key


🚫
themis_message_destroy


🚫
themis_message_get_data


🚫
themis_message_get_length


🚫
themis_message_init


🚫
themis_message_set



themis_secure_cell_decrypt_context_imprint



themis_secure_cell_decrypt_seal



themis_secure_cell_decrypt_token_protect



themis_secure_cell_encrypt_context_imprint



themis_secure_cell_encrypt_seal



themis_secure_cell_encrypt_token_protect



themis_secure_message_decrypt


🚫
themis_secure_message_decrypter_destroy


🚫
themis_secure_message_decrypter_init


🚫
themis_secure_message_decrypter_proceed


🚫
themis_secure_message_ec_decrypter_destroy


🚫
themis_secure_message_ec_decrypter_init


🚫
themis_secure_message_ec_decrypter_proceed


🚫
themis_secure_message_ec_encrypter_destroy


🚫
themis_secure_message_ec_encrypter_init


🚫
themis_secure_message_ec_encrypter_proceed



themis_secure_message_encrypt


🚫
themis_secure_message_encrypter_destroy


🚫
themis_secure_message_encrypter_init


🚫
themis_secure_message_encrypter_proceed


🚫
themis_secure_message_rsa_decrypter_destroy


🚫
themis_secure_message_rsa_decrypter_init


🚫
themis_secure_message_rsa_decrypter_proceed


🚫
themis_secure_message_rsa_encrypter_destroy


🚫
themis_secure_message_rsa_encrypter_init


🚫
themis_secure_message_rsa_encrypter_proceed



themis_secure_message_sign


🚫
themis_secure_message_signer_destroy


🚫
themis_secure_message_signer_init


🚫
themis_secure_message_signer_proceed



themis_secure_message_unwrap


🚫
themis_secure_message_verifier_destroy


🚫
themis_secure_message_verifier_init


🚫
themis_secure_message_verifier_proceed



themis_secure_message_verify



themis_secure_message_wrap


🚫
themis_sym_decrypt_message_u


🚫
themis_sym_decrypt_message_u_


🚫
themis_sym_encrypt_message_u


🚫
themis_sym_encrypt_message_u_


🚫
themis_sym_kdf


🚫
themis_sym_plain_decrypt


🚫
themis_sym_plain_encrypt


🚫
verify_mac


🚫
verify_signature




All these functions are not accessible normally, via <soter/soter.h> or <themis/themis.h>.
Note that some functions from private headers are required to be exported due to hysterical raisins. These ones are marked with SOTER_PRIVATE_API and are exceptional by all means.


Explicitly mark public API of Themis

Introduce a new header <themis/themis_api.h> which defines a function attribute marker THEMIS_API. It is used to explicitly mark API that is considered public. These functions will be exported from the library.
Themis does not really provide separate public header files so it's not immediately obvious which functions have to be marked public. We go with functions visible when including <themis/themis.h>.
Currently we support only UNIX-like systems so we can limit ourselves to just Clang and GCC. MSVC requires slightly different syntax but we'll get back to that when we start supporting Windows again.

Explicitly mark public API of Soter

Just like with Themis, introduce <soter/soter_api.h> with SOTER_API and mark all public declarations as such.
Note that Soter also has a... complicated story with header files. It's not apparent which headers are public and which are private. We consider public those ones included from <soter/soter.h>.

Export additional private-use API from Soter

Due to historically sloppy export management, many functions in Themis (as well as in unit-tests) rely on not-so-public API to be available. Normally you cannot get access to these functions, but you can if you import <soter/soter_t.h> or some other internal header files.
Introduce a new marker SOTER_PRIVATE_API to distinguish such functions from normal exports, and mark all of them exported. There are quite a few of functions, yeah...
Note that while public functions are marked in header files, private export functions are marked at definition site. This is required because some of the source files do not actually include corresponding headers. Plus, this way this definitions are ugly to look at and discourage from adding new 'private' exports.

Set default symbol visibility to hidden

Finally, compile all source code with default symbol visibility set to ""hidden"". With this only symbols marked with THEMIS_API, SOTER_API, or SOTER_PRIVATE_API will get exported from libraries. static functions will never be exported, and non-static functions are also not exported by default unless explicitly marked as public.

Before merge:

 Add new headers to Xcode project for Carthage
 Make sure API mistakes are caught by automatic tests (will do later)","@Lagovas, here you go, but please note that this is a blind change. Our build system does not support Windows, our CI does not do Windows builds and does not run any test, and I do not have a Windows dev box available at the moment. But something like that should do for Windows export support, assuming that we'll get the Makefile build on Windows.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,458,2019-04-11T11:32:28Z,2019-04-16T11:50:31Z,2019-04-16T13:41:40Z,MERGED,True,246,0,48,https://github.com/ilammy,Explicitly export public API,7,['core'],https://github.com/cossacklabs/themis/pull/458,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/458#issuecomment-482547429,"Historically, Themis did not manage public API exports at all. We exported all non-static functions and that's it. WebAssembly builds with Emscripten will require marking exported functions with EMSCRIPTEN_KEEPALIVE attribute so now is a good moment to explicitly define our public API.
Only functions explicitly marked as THEMIS_API and SOTER_API will be exported from libraries and available to users. Everything else will be hidden and not available (even if the users include some private header and try calling a function).
Here are details on functions that are removed from publicly visible exports with these changes:

Soter




Function




🚫
algid_to_evp


🚫
algid_to_evp_aead



clip_random_32


🚫
crypto_sign_ed25519_ref10_fe_0


🚫
crypto_sign_ed25519_ref10_fe_1


🚫
crypto_sign_ed25519_ref10_fe_add


🚫
crypto_sign_ed25519_ref10_fe_cmov


🚫
crypto_sign_ed25519_ref10_fe_copy


🚫
crypto_sign_ed25519_ref10_fe_frombytes


🚫
crypto_sign_ed25519_ref10_fe_invert


🚫
crypto_sign_ed25519_ref10_fe_isnegative



crypto_sign_ed25519_ref10_fe_isnonzero


🚫
crypto_sign_ed25519_ref10_fe_mul



crypto_sign_ed25519_ref10_fe_neg


🚫
crypto_sign_ed25519_ref10_fe_pow22523


🚫
crypto_sign_ed25519_ref10_fe_sq


🚫
crypto_sign_ed25519_ref10_fe_sq2


🚫
crypto_sign_ed25519_ref10_fe_sub



crypto_sign_ed25519_ref10_fe_tobytes


🚫
crypto_sign_ed25519_ref10_ge_add



crypto_sign_ed25519_ref10_ge_double_scalarmult_vartime


🚫
crypto_sign_ed25519_ref10_ge_frombytes_negate_vartime


🚫
crypto_sign_ed25519_ref10_ge_madd


🚫
crypto_sign_ed25519_ref10_ge_msub


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p2


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p3


🚫
crypto_sign_ed25519_ref10_ge_p2_0


🚫
crypto_sign_ed25519_ref10_ge_p2_dbl


🚫
crypto_sign_ed25519_ref10_ge_p3_0


🚫
crypto_sign_ed25519_ref10_ge_p3_dbl



crypto_sign_ed25519_ref10_ge_p3_tobytes


🚫
crypto_sign_ed25519_ref10_ge_p3_to_cached


🚫
crypto_sign_ed25519_ref10_ge_p3_to_p2


🚫
crypto_sign_ed25519_ref10_ge_precomp_0



crypto_sign_ed25519_ref10_ge_scalarmult_base


🚫
crypto_sign_ed25519_ref10_ge_sub



crypto_sign_ed25519_ref10_ge_tobytes



crypto_sign_ed25519_ref10_sc_muladd



crypto_sign_ed25519_ref10_sc_reduce



crypto_verify_32



ge_cmp



ge_frombytes_vartime



generate_random_32



ge_p2_to_p3



ge_p3_sub



ge_scalarmult_blinded



soter_asym_cipher_cleanup



soter_asym_cipher_create



soter_asym_cipher_decrypt



soter_asym_cipher_destroy



soter_asym_cipher_encrypt


🚫
soter_asym_cipher_import_key



soter_asym_cipher_init



soter_asym_ka_cleanup



soter_asym_ka_create



soter_asym_ka_derive



soter_asym_ka_destroy



soter_asym_ka_export_key



soter_asym_ka_gen_key



soter_asym_ka_import_key



soter_asym_ka_init


🚫
soter_crc32


🚫
soter_crc32_create


🚫
soter_crc32_final


🚫
soter_crc32_update


🚫
soter_ec_export_key


🚫
soter_ec_gen_key


🚫
soter_ec_import_key


🚫
soter_ec_priv_key_to_engine_specific


🚫
soter_ec_pub_key_to_engine_specific


🚫
soter_engine_specific_to_ec_priv_key


🚫
soter_engine_specific_to_ec_pub_key


🚫
soter_engine_specific_to_rsa_priv_key


🚫
soter_engine_specific_to_rsa_pub_key



soter_hash_cleanup



soter_hash_create



soter_hash_destroy



soter_hash_final



soter_hash_init



soter_hash_update



soter_hmac_cleanup



soter_hmac_create



soter_hmac_destroy



soter_hmac_final



soter_hmac_init



soter_hmac_update



soter_kdf


🚫
soter_nokdf


🚫
soter_pbkdf2



soter_rand


🚫
soter_rsa_export_key


🚫
soter_rsa_gen_key


🚫
soter_rsa_import_key


🚫
soter_rsa_key_pair_gen_cleanup



soter_rsa_key_pair_gen_create



soter_rsa_key_pair_gen_destroy



soter_rsa_key_pair_gen_export_key



soter_rsa_key_pair_gen_init


🚫
soter_rsa_priv_key_to_engine_specific


🚫
soter_rsa_pub_key_to_engine_specific


🚫
soter_sign_cleanup


🚫
soter_sign_cleanup_ecdsa_none_pkcs8


🚫
soter_sign_cleanup_rsa_pss_pkcs8



soter_sign_create



soter_sign_destroy



soter_sign_export_key


🚫
soter_sign_export_key_ecdsa_none_pkcs8


🚫
soter_sign_export_key_rsa_pss_pkcs8



soter_sign_final


🚫
soter_sign_final_ecdsa_none_pkcs8


🚫
soter_sign_final_rsa_pss_pkcs8



soter_sign_get_alg_id



soter_sign_init


🚫
soter_sign_init_ecdsa_none_pkcs8


🚫
soter_sign_init_rsa_pss_pkcs8



soter_sign_update


🚫
soter_sign_update_ecdsa_none_pkcs8


🚫
soter_sign_update_rsa_pss_pkcs8


🚫
soter_sym_aead_ctx_final


🚫
soter_sym_aead_ctx_init



soter_sym_aead_decrypt_aad



soter_sym_aead_decrypt_create



soter_sym_aead_decrypt_destroy



soter_sym_aead_decrypt_final



soter_sym_aead_decrypt_update



soter_sym_aead_encrypt_aad



soter_sym_aead_encrypt_create



soter_sym_aead_encrypt_destroy



soter_sym_aead_encrypt_final



soter_sym_aead_encrypt_update


🚫
soter_sym_ctx_destroy


🚫
soter_sym_ctx_final


🚫
soter_sym_ctx_init


🚫
soter_sym_ctx_update



soter_sym_decrypt_create



soter_sym_decrypt_destroy



soter_sym_decrypt_final



soter_sym_decrypt_update



soter_sym_encrypt_create



soter_sym_encrypt_destroy



soter_sym_encrypt_final



soter_sym_encrypt_update



soter_update_container_checksum


🚫
soter_verify_cleanup


🚫
soter_verify_cleanup_ecdsa_none_pkcs8


🚫
soter_verify_cleanup_rsa_pss_pkcs8



soter_verify_container_checksum



soter_verify_create



soter_verify_destroy



soter_verify_final


🚫
soter_verify_final_ecdsa_none_pkcs8


🚫
soter_verify_final_rsa_pss_pkcs8



soter_verify_get_alg_id



soter_verify_init


🚫
soter_verify_init_ecdsa_none_pkcs8


🚫
soter_verify_init_rsa_pss_pkcs8



soter_verify_update


🚫
soter_verify_update_ecdsa_none_pkcs8


🚫
soter_verify_update_rsa_pss_pkcs8


🚫
soter_withkdf





Themis




Function




🚫
compute_mac


🚫
compute_signature


🚫
encrypt_gcm


🚫
get_alg_id


🚫
get_key_sign_type


🚫
get_peer_key_sign_type



secure_comparator_append_secret



secure_comparator_begin_compare


🚫
secure_comparator_cleanup



secure_comparator_create



secure_comparator_destroy



secure_comparator_get_result


🚫
secure_comparator_init



secure_comparator_proceed_compare


🚫
secure_session_cleanup



secure_session_connect



secure_session_create


🚫
secure_session_derive_message_keys



secure_session_destroy



secure_session_generate_connect_request



secure_session_get_remote_id


🚫
secure_session_init



secure_session_is_established



secure_session_load


🚫
secure_session_peer_cleanup


🚫
secure_session_peer_init



secure_session_receive



secure_session_save



secure_session_send



secure_session_unwrap



secure_session_wrap


🚫
themis_auth_sym_decrypt_message


🚫
themis_auth_sym_decrypt_message_


🚫
themis_auth_sym_encrypt_message


🚫
themis_auth_sym_encrypt_message_


🚫
themis_auth_sym_plain_decrypt


🚫
themis_auth_sym_plain_encrypt



themis_gen_ec_key_pair


🚫
themis_gen_key_pair



themis_gen_rsa_key_pair



themis_get_asym_key_kind



themis_is_valid_asym_key


🚫
themis_message_destroy


🚫
themis_message_get_data


🚫
themis_message_get_length


🚫
themis_message_init


🚫
themis_message_set



themis_secure_cell_decrypt_context_imprint



themis_secure_cell_decrypt_seal



themis_secure_cell_decrypt_token_protect



themis_secure_cell_encrypt_context_imprint



themis_secure_cell_encrypt_seal



themis_secure_cell_encrypt_token_protect



themis_secure_message_decrypt


🚫
themis_secure_message_decrypter_destroy


🚫
themis_secure_message_decrypter_init


🚫
themis_secure_message_decrypter_proceed


🚫
themis_secure_message_ec_decrypter_destroy


🚫
themis_secure_message_ec_decrypter_init


🚫
themis_secure_message_ec_decrypter_proceed


🚫
themis_secure_message_ec_encrypter_destroy


🚫
themis_secure_message_ec_encrypter_init


🚫
themis_secure_message_ec_encrypter_proceed



themis_secure_message_encrypt


🚫
themis_secure_message_encrypter_destroy


🚫
themis_secure_message_encrypter_init


🚫
themis_secure_message_encrypter_proceed


🚫
themis_secure_message_rsa_decrypter_destroy


🚫
themis_secure_message_rsa_decrypter_init


🚫
themis_secure_message_rsa_decrypter_proceed


🚫
themis_secure_message_rsa_encrypter_destroy


🚫
themis_secure_message_rsa_encrypter_init


🚫
themis_secure_message_rsa_encrypter_proceed



themis_secure_message_sign


🚫
themis_secure_message_signer_destroy


🚫
themis_secure_message_signer_init


🚫
themis_secure_message_signer_proceed



themis_secure_message_unwrap


🚫
themis_secure_message_verifier_destroy


🚫
themis_secure_message_verifier_init


🚫
themis_secure_message_verifier_proceed



themis_secure_message_verify



themis_secure_message_wrap


🚫
themis_sym_decrypt_message_u


🚫
themis_sym_decrypt_message_u_


🚫
themis_sym_encrypt_message_u


🚫
themis_sym_encrypt_message_u_


🚫
themis_sym_kdf


🚫
themis_sym_plain_decrypt


🚫
themis_sym_plain_encrypt


🚫
verify_mac


🚫
verify_signature




All these functions are not accessible normally, via <soter/soter.h> or <themis/themis.h>.
Note that some functions from private headers are required to be exported due to hysterical raisins. These ones are marked with SOTER_PRIVATE_API and are exceptional by all means.


Explicitly mark public API of Themis

Introduce a new header <themis/themis_api.h> which defines a function attribute marker THEMIS_API. It is used to explicitly mark API that is considered public. These functions will be exported from the library.
Themis does not really provide separate public header files so it's not immediately obvious which functions have to be marked public. We go with functions visible when including <themis/themis.h>.
Currently we support only UNIX-like systems so we can limit ourselves to just Clang and GCC. MSVC requires slightly different syntax but we'll get back to that when we start supporting Windows again.

Explicitly mark public API of Soter

Just like with Themis, introduce <soter/soter_api.h> with SOTER_API and mark all public declarations as such.
Note that Soter also has a... complicated story with header files. It's not apparent which headers are public and which are private. We consider public those ones included from <soter/soter.h>.

Export additional private-use API from Soter

Due to historically sloppy export management, many functions in Themis (as well as in unit-tests) rely on not-so-public API to be available. Normally you cannot get access to these functions, but you can if you import <soter/soter_t.h> or some other internal header files.
Introduce a new marker SOTER_PRIVATE_API to distinguish such functions from normal exports, and mark all of them exported. There are quite a few of functions, yeah...
Note that while public functions are marked in header files, private export functions are marked at definition site. This is required because some of the source files do not actually include corresponding headers. Plus, this way this definitions are ugly to look at and discourage from adding new 'private' exports.

Set default symbol visibility to hidden

Finally, compile all source code with default symbol visibility set to ""hidden"". With this only symbols marked with THEMIS_API, SOTER_API, or SOTER_PRIVATE_API will get exported from libraries. static functions will never be exported, and non-static functions are also not exported by default unless explicitly marked as public.

Before merge:

 Add new headers to Xcode project for Carthage
 Make sure API mistakes are caught by automatic tests (will do later)","Introduce a new header <themis/themis_api.h>
introduce <soter/soter_api.h>

⚠️ Note to everyone: do not forget to update Xcode project that builds Themis Carthage to include new header",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,458,2019-04-11T11:32:28Z,2019-04-16T11:50:31Z,2019-04-16T13:41:40Z,MERGED,True,246,0,48,https://github.com/ilammy,Explicitly export public API,7,['core'],https://github.com/cossacklabs/themis/pull/458,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/458#issuecomment-482556310,"Historically, Themis did not manage public API exports at all. We exported all non-static functions and that's it. WebAssembly builds with Emscripten will require marking exported functions with EMSCRIPTEN_KEEPALIVE attribute so now is a good moment to explicitly define our public API.
Only functions explicitly marked as THEMIS_API and SOTER_API will be exported from libraries and available to users. Everything else will be hidden and not available (even if the users include some private header and try calling a function).
Here are details on functions that are removed from publicly visible exports with these changes:

Soter




Function




🚫
algid_to_evp


🚫
algid_to_evp_aead



clip_random_32


🚫
crypto_sign_ed25519_ref10_fe_0


🚫
crypto_sign_ed25519_ref10_fe_1


🚫
crypto_sign_ed25519_ref10_fe_add


🚫
crypto_sign_ed25519_ref10_fe_cmov


🚫
crypto_sign_ed25519_ref10_fe_copy


🚫
crypto_sign_ed25519_ref10_fe_frombytes


🚫
crypto_sign_ed25519_ref10_fe_invert


🚫
crypto_sign_ed25519_ref10_fe_isnegative



crypto_sign_ed25519_ref10_fe_isnonzero


🚫
crypto_sign_ed25519_ref10_fe_mul



crypto_sign_ed25519_ref10_fe_neg


🚫
crypto_sign_ed25519_ref10_fe_pow22523


🚫
crypto_sign_ed25519_ref10_fe_sq


🚫
crypto_sign_ed25519_ref10_fe_sq2


🚫
crypto_sign_ed25519_ref10_fe_sub



crypto_sign_ed25519_ref10_fe_tobytes


🚫
crypto_sign_ed25519_ref10_ge_add



crypto_sign_ed25519_ref10_ge_double_scalarmult_vartime


🚫
crypto_sign_ed25519_ref10_ge_frombytes_negate_vartime


🚫
crypto_sign_ed25519_ref10_ge_madd


🚫
crypto_sign_ed25519_ref10_ge_msub


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p2


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p3


🚫
crypto_sign_ed25519_ref10_ge_p2_0


🚫
crypto_sign_ed25519_ref10_ge_p2_dbl


🚫
crypto_sign_ed25519_ref10_ge_p3_0


🚫
crypto_sign_ed25519_ref10_ge_p3_dbl



crypto_sign_ed25519_ref10_ge_p3_tobytes


🚫
crypto_sign_ed25519_ref10_ge_p3_to_cached


🚫
crypto_sign_ed25519_ref10_ge_p3_to_p2


🚫
crypto_sign_ed25519_ref10_ge_precomp_0



crypto_sign_ed25519_ref10_ge_scalarmult_base


🚫
crypto_sign_ed25519_ref10_ge_sub



crypto_sign_ed25519_ref10_ge_tobytes



crypto_sign_ed25519_ref10_sc_muladd



crypto_sign_ed25519_ref10_sc_reduce



crypto_verify_32



ge_cmp



ge_frombytes_vartime



generate_random_32



ge_p2_to_p3



ge_p3_sub



ge_scalarmult_blinded



soter_asym_cipher_cleanup



soter_asym_cipher_create



soter_asym_cipher_decrypt



soter_asym_cipher_destroy



soter_asym_cipher_encrypt


🚫
soter_asym_cipher_import_key



soter_asym_cipher_init



soter_asym_ka_cleanup



soter_asym_ka_create



soter_asym_ka_derive



soter_asym_ka_destroy



soter_asym_ka_export_key



soter_asym_ka_gen_key



soter_asym_ka_import_key



soter_asym_ka_init


🚫
soter_crc32


🚫
soter_crc32_create


🚫
soter_crc32_final


🚫
soter_crc32_update


🚫
soter_ec_export_key


🚫
soter_ec_gen_key


🚫
soter_ec_import_key


🚫
soter_ec_priv_key_to_engine_specific


🚫
soter_ec_pub_key_to_engine_specific


🚫
soter_engine_specific_to_ec_priv_key


🚫
soter_engine_specific_to_ec_pub_key


🚫
soter_engine_specific_to_rsa_priv_key


🚫
soter_engine_specific_to_rsa_pub_key



soter_hash_cleanup



soter_hash_create



soter_hash_destroy



soter_hash_final



soter_hash_init



soter_hash_update



soter_hmac_cleanup



soter_hmac_create



soter_hmac_destroy



soter_hmac_final



soter_hmac_init



soter_hmac_update



soter_kdf


🚫
soter_nokdf


🚫
soter_pbkdf2



soter_rand


🚫
soter_rsa_export_key


🚫
soter_rsa_gen_key


🚫
soter_rsa_import_key


🚫
soter_rsa_key_pair_gen_cleanup



soter_rsa_key_pair_gen_create



soter_rsa_key_pair_gen_destroy



soter_rsa_key_pair_gen_export_key



soter_rsa_key_pair_gen_init


🚫
soter_rsa_priv_key_to_engine_specific


🚫
soter_rsa_pub_key_to_engine_specific


🚫
soter_sign_cleanup


🚫
soter_sign_cleanup_ecdsa_none_pkcs8


🚫
soter_sign_cleanup_rsa_pss_pkcs8



soter_sign_create



soter_sign_destroy



soter_sign_export_key


🚫
soter_sign_export_key_ecdsa_none_pkcs8


🚫
soter_sign_export_key_rsa_pss_pkcs8



soter_sign_final


🚫
soter_sign_final_ecdsa_none_pkcs8


🚫
soter_sign_final_rsa_pss_pkcs8



soter_sign_get_alg_id



soter_sign_init


🚫
soter_sign_init_ecdsa_none_pkcs8


🚫
soter_sign_init_rsa_pss_pkcs8



soter_sign_update


🚫
soter_sign_update_ecdsa_none_pkcs8


🚫
soter_sign_update_rsa_pss_pkcs8


🚫
soter_sym_aead_ctx_final


🚫
soter_sym_aead_ctx_init



soter_sym_aead_decrypt_aad



soter_sym_aead_decrypt_create



soter_sym_aead_decrypt_destroy



soter_sym_aead_decrypt_final



soter_sym_aead_decrypt_update



soter_sym_aead_encrypt_aad



soter_sym_aead_encrypt_create



soter_sym_aead_encrypt_destroy



soter_sym_aead_encrypt_final



soter_sym_aead_encrypt_update


🚫
soter_sym_ctx_destroy


🚫
soter_sym_ctx_final


🚫
soter_sym_ctx_init


🚫
soter_sym_ctx_update



soter_sym_decrypt_create



soter_sym_decrypt_destroy



soter_sym_decrypt_final



soter_sym_decrypt_update



soter_sym_encrypt_create



soter_sym_encrypt_destroy



soter_sym_encrypt_final



soter_sym_encrypt_update



soter_update_container_checksum


🚫
soter_verify_cleanup


🚫
soter_verify_cleanup_ecdsa_none_pkcs8


🚫
soter_verify_cleanup_rsa_pss_pkcs8



soter_verify_container_checksum



soter_verify_create



soter_verify_destroy



soter_verify_final


🚫
soter_verify_final_ecdsa_none_pkcs8


🚫
soter_verify_final_rsa_pss_pkcs8



soter_verify_get_alg_id



soter_verify_init


🚫
soter_verify_init_ecdsa_none_pkcs8


🚫
soter_verify_init_rsa_pss_pkcs8



soter_verify_update


🚫
soter_verify_update_ecdsa_none_pkcs8


🚫
soter_verify_update_rsa_pss_pkcs8


🚫
soter_withkdf





Themis




Function




🚫
compute_mac


🚫
compute_signature


🚫
encrypt_gcm


🚫
get_alg_id


🚫
get_key_sign_type


🚫
get_peer_key_sign_type



secure_comparator_append_secret



secure_comparator_begin_compare


🚫
secure_comparator_cleanup



secure_comparator_create



secure_comparator_destroy



secure_comparator_get_result


🚫
secure_comparator_init



secure_comparator_proceed_compare


🚫
secure_session_cleanup



secure_session_connect



secure_session_create


🚫
secure_session_derive_message_keys



secure_session_destroy



secure_session_generate_connect_request



secure_session_get_remote_id


🚫
secure_session_init



secure_session_is_established



secure_session_load


🚫
secure_session_peer_cleanup


🚫
secure_session_peer_init



secure_session_receive



secure_session_save



secure_session_send



secure_session_unwrap



secure_session_wrap


🚫
themis_auth_sym_decrypt_message


🚫
themis_auth_sym_decrypt_message_


🚫
themis_auth_sym_encrypt_message


🚫
themis_auth_sym_encrypt_message_


🚫
themis_auth_sym_plain_decrypt


🚫
themis_auth_sym_plain_encrypt



themis_gen_ec_key_pair


🚫
themis_gen_key_pair



themis_gen_rsa_key_pair



themis_get_asym_key_kind



themis_is_valid_asym_key


🚫
themis_message_destroy


🚫
themis_message_get_data


🚫
themis_message_get_length


🚫
themis_message_init


🚫
themis_message_set



themis_secure_cell_decrypt_context_imprint



themis_secure_cell_decrypt_seal



themis_secure_cell_decrypt_token_protect



themis_secure_cell_encrypt_context_imprint



themis_secure_cell_encrypt_seal



themis_secure_cell_encrypt_token_protect



themis_secure_message_decrypt


🚫
themis_secure_message_decrypter_destroy


🚫
themis_secure_message_decrypter_init


🚫
themis_secure_message_decrypter_proceed


🚫
themis_secure_message_ec_decrypter_destroy


🚫
themis_secure_message_ec_decrypter_init


🚫
themis_secure_message_ec_decrypter_proceed


🚫
themis_secure_message_ec_encrypter_destroy


🚫
themis_secure_message_ec_encrypter_init


🚫
themis_secure_message_ec_encrypter_proceed



themis_secure_message_encrypt


🚫
themis_secure_message_encrypter_destroy


🚫
themis_secure_message_encrypter_init


🚫
themis_secure_message_encrypter_proceed


🚫
themis_secure_message_rsa_decrypter_destroy


🚫
themis_secure_message_rsa_decrypter_init


🚫
themis_secure_message_rsa_decrypter_proceed


🚫
themis_secure_message_rsa_encrypter_destroy


🚫
themis_secure_message_rsa_encrypter_init


🚫
themis_secure_message_rsa_encrypter_proceed



themis_secure_message_sign


🚫
themis_secure_message_signer_destroy


🚫
themis_secure_message_signer_init


🚫
themis_secure_message_signer_proceed



themis_secure_message_unwrap


🚫
themis_secure_message_verifier_destroy


🚫
themis_secure_message_verifier_init


🚫
themis_secure_message_verifier_proceed



themis_secure_message_verify



themis_secure_message_wrap


🚫
themis_sym_decrypt_message_u


🚫
themis_sym_decrypt_message_u_


🚫
themis_sym_encrypt_message_u


🚫
themis_sym_encrypt_message_u_


🚫
themis_sym_kdf


🚫
themis_sym_plain_decrypt


🚫
themis_sym_plain_encrypt


🚫
verify_mac


🚫
verify_signature




All these functions are not accessible normally, via <soter/soter.h> or <themis/themis.h>.
Note that some functions from private headers are required to be exported due to hysterical raisins. These ones are marked with SOTER_PRIVATE_API and are exceptional by all means.


Explicitly mark public API of Themis

Introduce a new header <themis/themis_api.h> which defines a function attribute marker THEMIS_API. It is used to explicitly mark API that is considered public. These functions will be exported from the library.
Themis does not really provide separate public header files so it's not immediately obvious which functions have to be marked public. We go with functions visible when including <themis/themis.h>.
Currently we support only UNIX-like systems so we can limit ourselves to just Clang and GCC. MSVC requires slightly different syntax but we'll get back to that when we start supporting Windows again.

Explicitly mark public API of Soter

Just like with Themis, introduce <soter/soter_api.h> with SOTER_API and mark all public declarations as such.
Note that Soter also has a... complicated story with header files. It's not apparent which headers are public and which are private. We consider public those ones included from <soter/soter.h>.

Export additional private-use API from Soter

Due to historically sloppy export management, many functions in Themis (as well as in unit-tests) rely on not-so-public API to be available. Normally you cannot get access to these functions, but you can if you import <soter/soter_t.h> or some other internal header files.
Introduce a new marker SOTER_PRIVATE_API to distinguish such functions from normal exports, and mark all of them exported. There are quite a few of functions, yeah...
Note that while public functions are marked in header files, private export functions are marked at definition site. This is required because some of the source files do not actually include corresponding headers. Plus, this way this definitions are ugly to look at and discourage from adding new 'private' exports.

Set default symbol visibility to hidden

Finally, compile all source code with default symbol visibility set to ""hidden"". With this only symbols marked with THEMIS_API, SOTER_API, or SOTER_PRIVATE_API will get exported from libraries. static functions will never be exported, and non-static functions are also not exported by default unless explicitly marked as public.

Before merge:

 Add new headers to Xcode project for Carthage
 Make sure API mistakes are caught by automatic tests (will do later)","how we understand if some other functions should be private too?

My initial idea was that developers shouldn't use this often. If ones does add SOTER_PRIVATE_API then they should know exactly what they are doing, why they are doing it, and feel bad about doing it. Arguably, we should strive to remove all these private exports from the code base and replace then with appropriate public functions.
And as for SOTER_API and THEMIS_API the usage is simple: if you add a new public function to public headers, mark it with one of those macros. If you add a helper function to a private header to be used internally then don't mark it.
Getting back to your question... Bad news: unit tests (as they are now) do not catch exporting mistakes. The tests are linked against Themis statically, and visibility is ignored for the most part with static linkage. That is, if you add a new public function but do not mark it as exported then the tests will still link and run fine, because of the way static linkage works. However, any user of the dynamic library (e.g., our wrappers) will see weird linkage errors about missing symbols. This is true for any private dependencies as well. So I'd assume that wrapper tests will catch these mistakes, but in a late and not obvious way.
I guess we can improve this by linking Soter and Themis Core tests dynamically against the libraries in the build directory. That way make test will fail if you forget to mark something as exported (publicly or privately). That's how I determined the list of these not-so-private exports for this PR, actually...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,458,2019-04-11T11:32:28Z,2019-04-16T11:50:31Z,2019-04-16T13:41:40Z,MERGED,True,246,0,48,https://github.com/ilammy,Explicitly export public API,7,['core'],https://github.com/cossacklabs/themis/pull/458,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/458#issuecomment-482580543,"Historically, Themis did not manage public API exports at all. We exported all non-static functions and that's it. WebAssembly builds with Emscripten will require marking exported functions with EMSCRIPTEN_KEEPALIVE attribute so now is a good moment to explicitly define our public API.
Only functions explicitly marked as THEMIS_API and SOTER_API will be exported from libraries and available to users. Everything else will be hidden and not available (even if the users include some private header and try calling a function).
Here are details on functions that are removed from publicly visible exports with these changes:

Soter




Function




🚫
algid_to_evp


🚫
algid_to_evp_aead



clip_random_32


🚫
crypto_sign_ed25519_ref10_fe_0


🚫
crypto_sign_ed25519_ref10_fe_1


🚫
crypto_sign_ed25519_ref10_fe_add


🚫
crypto_sign_ed25519_ref10_fe_cmov


🚫
crypto_sign_ed25519_ref10_fe_copy


🚫
crypto_sign_ed25519_ref10_fe_frombytes


🚫
crypto_sign_ed25519_ref10_fe_invert


🚫
crypto_sign_ed25519_ref10_fe_isnegative



crypto_sign_ed25519_ref10_fe_isnonzero


🚫
crypto_sign_ed25519_ref10_fe_mul



crypto_sign_ed25519_ref10_fe_neg


🚫
crypto_sign_ed25519_ref10_fe_pow22523


🚫
crypto_sign_ed25519_ref10_fe_sq


🚫
crypto_sign_ed25519_ref10_fe_sq2


🚫
crypto_sign_ed25519_ref10_fe_sub



crypto_sign_ed25519_ref10_fe_tobytes


🚫
crypto_sign_ed25519_ref10_ge_add



crypto_sign_ed25519_ref10_ge_double_scalarmult_vartime


🚫
crypto_sign_ed25519_ref10_ge_frombytes_negate_vartime


🚫
crypto_sign_ed25519_ref10_ge_madd


🚫
crypto_sign_ed25519_ref10_ge_msub


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p2


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p3


🚫
crypto_sign_ed25519_ref10_ge_p2_0


🚫
crypto_sign_ed25519_ref10_ge_p2_dbl


🚫
crypto_sign_ed25519_ref10_ge_p3_0


🚫
crypto_sign_ed25519_ref10_ge_p3_dbl



crypto_sign_ed25519_ref10_ge_p3_tobytes


🚫
crypto_sign_ed25519_ref10_ge_p3_to_cached


🚫
crypto_sign_ed25519_ref10_ge_p3_to_p2


🚫
crypto_sign_ed25519_ref10_ge_precomp_0



crypto_sign_ed25519_ref10_ge_scalarmult_base


🚫
crypto_sign_ed25519_ref10_ge_sub



crypto_sign_ed25519_ref10_ge_tobytes



crypto_sign_ed25519_ref10_sc_muladd



crypto_sign_ed25519_ref10_sc_reduce



crypto_verify_32



ge_cmp



ge_frombytes_vartime



generate_random_32



ge_p2_to_p3



ge_p3_sub



ge_scalarmult_blinded



soter_asym_cipher_cleanup



soter_asym_cipher_create



soter_asym_cipher_decrypt



soter_asym_cipher_destroy



soter_asym_cipher_encrypt


🚫
soter_asym_cipher_import_key



soter_asym_cipher_init



soter_asym_ka_cleanup



soter_asym_ka_create



soter_asym_ka_derive



soter_asym_ka_destroy



soter_asym_ka_export_key



soter_asym_ka_gen_key



soter_asym_ka_import_key



soter_asym_ka_init


🚫
soter_crc32


🚫
soter_crc32_create


🚫
soter_crc32_final


🚫
soter_crc32_update


🚫
soter_ec_export_key


🚫
soter_ec_gen_key


🚫
soter_ec_import_key


🚫
soter_ec_priv_key_to_engine_specific


🚫
soter_ec_pub_key_to_engine_specific


🚫
soter_engine_specific_to_ec_priv_key


🚫
soter_engine_specific_to_ec_pub_key


🚫
soter_engine_specific_to_rsa_priv_key


🚫
soter_engine_specific_to_rsa_pub_key



soter_hash_cleanup



soter_hash_create



soter_hash_destroy



soter_hash_final



soter_hash_init



soter_hash_update



soter_hmac_cleanup



soter_hmac_create



soter_hmac_destroy



soter_hmac_final



soter_hmac_init



soter_hmac_update



soter_kdf


🚫
soter_nokdf


🚫
soter_pbkdf2



soter_rand


🚫
soter_rsa_export_key


🚫
soter_rsa_gen_key


🚫
soter_rsa_import_key


🚫
soter_rsa_key_pair_gen_cleanup



soter_rsa_key_pair_gen_create



soter_rsa_key_pair_gen_destroy



soter_rsa_key_pair_gen_export_key



soter_rsa_key_pair_gen_init


🚫
soter_rsa_priv_key_to_engine_specific


🚫
soter_rsa_pub_key_to_engine_specific


🚫
soter_sign_cleanup


🚫
soter_sign_cleanup_ecdsa_none_pkcs8


🚫
soter_sign_cleanup_rsa_pss_pkcs8



soter_sign_create



soter_sign_destroy



soter_sign_export_key


🚫
soter_sign_export_key_ecdsa_none_pkcs8


🚫
soter_sign_export_key_rsa_pss_pkcs8



soter_sign_final


🚫
soter_sign_final_ecdsa_none_pkcs8


🚫
soter_sign_final_rsa_pss_pkcs8



soter_sign_get_alg_id



soter_sign_init


🚫
soter_sign_init_ecdsa_none_pkcs8


🚫
soter_sign_init_rsa_pss_pkcs8



soter_sign_update


🚫
soter_sign_update_ecdsa_none_pkcs8


🚫
soter_sign_update_rsa_pss_pkcs8


🚫
soter_sym_aead_ctx_final


🚫
soter_sym_aead_ctx_init



soter_sym_aead_decrypt_aad



soter_sym_aead_decrypt_create



soter_sym_aead_decrypt_destroy



soter_sym_aead_decrypt_final



soter_sym_aead_decrypt_update



soter_sym_aead_encrypt_aad



soter_sym_aead_encrypt_create



soter_sym_aead_encrypt_destroy



soter_sym_aead_encrypt_final



soter_sym_aead_encrypt_update


🚫
soter_sym_ctx_destroy


🚫
soter_sym_ctx_final


🚫
soter_sym_ctx_init


🚫
soter_sym_ctx_update



soter_sym_decrypt_create



soter_sym_decrypt_destroy



soter_sym_decrypt_final



soter_sym_decrypt_update



soter_sym_encrypt_create



soter_sym_encrypt_destroy



soter_sym_encrypt_final



soter_sym_encrypt_update



soter_update_container_checksum


🚫
soter_verify_cleanup


🚫
soter_verify_cleanup_ecdsa_none_pkcs8


🚫
soter_verify_cleanup_rsa_pss_pkcs8



soter_verify_container_checksum



soter_verify_create



soter_verify_destroy



soter_verify_final


🚫
soter_verify_final_ecdsa_none_pkcs8


🚫
soter_verify_final_rsa_pss_pkcs8



soter_verify_get_alg_id



soter_verify_init


🚫
soter_verify_init_ecdsa_none_pkcs8


🚫
soter_verify_init_rsa_pss_pkcs8



soter_verify_update


🚫
soter_verify_update_ecdsa_none_pkcs8


🚫
soter_verify_update_rsa_pss_pkcs8


🚫
soter_withkdf





Themis




Function




🚫
compute_mac


🚫
compute_signature


🚫
encrypt_gcm


🚫
get_alg_id


🚫
get_key_sign_type


🚫
get_peer_key_sign_type



secure_comparator_append_secret



secure_comparator_begin_compare


🚫
secure_comparator_cleanup



secure_comparator_create



secure_comparator_destroy



secure_comparator_get_result


🚫
secure_comparator_init



secure_comparator_proceed_compare


🚫
secure_session_cleanup



secure_session_connect



secure_session_create


🚫
secure_session_derive_message_keys



secure_session_destroy



secure_session_generate_connect_request



secure_session_get_remote_id


🚫
secure_session_init



secure_session_is_established



secure_session_load


🚫
secure_session_peer_cleanup


🚫
secure_session_peer_init



secure_session_receive



secure_session_save



secure_session_send



secure_session_unwrap



secure_session_wrap


🚫
themis_auth_sym_decrypt_message


🚫
themis_auth_sym_decrypt_message_


🚫
themis_auth_sym_encrypt_message


🚫
themis_auth_sym_encrypt_message_


🚫
themis_auth_sym_plain_decrypt


🚫
themis_auth_sym_plain_encrypt



themis_gen_ec_key_pair


🚫
themis_gen_key_pair



themis_gen_rsa_key_pair



themis_get_asym_key_kind



themis_is_valid_asym_key


🚫
themis_message_destroy


🚫
themis_message_get_data


🚫
themis_message_get_length


🚫
themis_message_init


🚫
themis_message_set



themis_secure_cell_decrypt_context_imprint



themis_secure_cell_decrypt_seal



themis_secure_cell_decrypt_token_protect



themis_secure_cell_encrypt_context_imprint



themis_secure_cell_encrypt_seal



themis_secure_cell_encrypt_token_protect



themis_secure_message_decrypt


🚫
themis_secure_message_decrypter_destroy


🚫
themis_secure_message_decrypter_init


🚫
themis_secure_message_decrypter_proceed


🚫
themis_secure_message_ec_decrypter_destroy


🚫
themis_secure_message_ec_decrypter_init


🚫
themis_secure_message_ec_decrypter_proceed


🚫
themis_secure_message_ec_encrypter_destroy


🚫
themis_secure_message_ec_encrypter_init


🚫
themis_secure_message_ec_encrypter_proceed



themis_secure_message_encrypt


🚫
themis_secure_message_encrypter_destroy


🚫
themis_secure_message_encrypter_init


🚫
themis_secure_message_encrypter_proceed


🚫
themis_secure_message_rsa_decrypter_destroy


🚫
themis_secure_message_rsa_decrypter_init


🚫
themis_secure_message_rsa_decrypter_proceed


🚫
themis_secure_message_rsa_encrypter_destroy


🚫
themis_secure_message_rsa_encrypter_init


🚫
themis_secure_message_rsa_encrypter_proceed



themis_secure_message_sign


🚫
themis_secure_message_signer_destroy


🚫
themis_secure_message_signer_init


🚫
themis_secure_message_signer_proceed



themis_secure_message_unwrap


🚫
themis_secure_message_verifier_destroy


🚫
themis_secure_message_verifier_init


🚫
themis_secure_message_verifier_proceed



themis_secure_message_verify



themis_secure_message_wrap


🚫
themis_sym_decrypt_message_u


🚫
themis_sym_decrypt_message_u_


🚫
themis_sym_encrypt_message_u


🚫
themis_sym_encrypt_message_u_


🚫
themis_sym_kdf


🚫
themis_sym_plain_decrypt


🚫
themis_sym_plain_encrypt


🚫
verify_mac


🚫
verify_signature




All these functions are not accessible normally, via <soter/soter.h> or <themis/themis.h>.
Note that some functions from private headers are required to be exported due to hysterical raisins. These ones are marked with SOTER_PRIVATE_API and are exceptional by all means.


Explicitly mark public API of Themis

Introduce a new header <themis/themis_api.h> which defines a function attribute marker THEMIS_API. It is used to explicitly mark API that is considered public. These functions will be exported from the library.
Themis does not really provide separate public header files so it's not immediately obvious which functions have to be marked public. We go with functions visible when including <themis/themis.h>.
Currently we support only UNIX-like systems so we can limit ourselves to just Clang and GCC. MSVC requires slightly different syntax but we'll get back to that when we start supporting Windows again.

Explicitly mark public API of Soter

Just like with Themis, introduce <soter/soter_api.h> with SOTER_API and mark all public declarations as such.
Note that Soter also has a... complicated story with header files. It's not apparent which headers are public and which are private. We consider public those ones included from <soter/soter.h>.

Export additional private-use API from Soter

Due to historically sloppy export management, many functions in Themis (as well as in unit-tests) rely on not-so-public API to be available. Normally you cannot get access to these functions, but you can if you import <soter/soter_t.h> or some other internal header files.
Introduce a new marker SOTER_PRIVATE_API to distinguish such functions from normal exports, and mark all of them exported. There are quite a few of functions, yeah...
Note that while public functions are marked in header files, private export functions are marked at definition site. This is required because some of the source files do not actually include corresponding headers. Plus, this way this definitions are ugly to look at and discourage from adding new 'private' exports.

Set default symbol visibility to hidden

Finally, compile all source code with default symbol visibility set to ""hidden"". With this only symbols marked with THEMIS_API, SOTER_API, or SOTER_PRIVATE_API will get exported from libraries. static functions will never be exported, and non-static functions are also not exported by default unless explicitly marked as public.

Before merge:

 Add new headers to Xcode project for Carthage
 Make sure API mistakes are caught by automatic tests (will do later)","I've experimented with dynamic linkage for tests a bit and recalled why I made tests link statically. On Linux dynamic linkage can be more or less easily hacked with rpath, but on macOS the install name thingy causes troubles: the loader wants the libraries to reside in /usr/local. Plus, all of this interferes with other PRs:

#454: need to make sure dynamic linkage still works with ABI-versioned libraries
#457: Wasm cannot into dynamic linkage, we'll probably have to special-case it
and maybe something else that's already in master

@vixentael, let's leave it as is in this PR. I'll test all these things above and send a separate PR to make our tests link against libraries dynamically. That should give us nice compilation errors if we miss something.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,458,2019-04-11T11:32:28Z,2019-04-16T11:50:31Z,2019-04-16T13:41:40Z,MERGED,True,246,0,48,https://github.com/ilammy,Explicitly export public API,7,['core'],https://github.com/cossacklabs/themis/pull/458,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/458#issuecomment-482597610,"Historically, Themis did not manage public API exports at all. We exported all non-static functions and that's it. WebAssembly builds with Emscripten will require marking exported functions with EMSCRIPTEN_KEEPALIVE attribute so now is a good moment to explicitly define our public API.
Only functions explicitly marked as THEMIS_API and SOTER_API will be exported from libraries and available to users. Everything else will be hidden and not available (even if the users include some private header and try calling a function).
Here are details on functions that are removed from publicly visible exports with these changes:

Soter




Function




🚫
algid_to_evp


🚫
algid_to_evp_aead



clip_random_32


🚫
crypto_sign_ed25519_ref10_fe_0


🚫
crypto_sign_ed25519_ref10_fe_1


🚫
crypto_sign_ed25519_ref10_fe_add


🚫
crypto_sign_ed25519_ref10_fe_cmov


🚫
crypto_sign_ed25519_ref10_fe_copy


🚫
crypto_sign_ed25519_ref10_fe_frombytes


🚫
crypto_sign_ed25519_ref10_fe_invert


🚫
crypto_sign_ed25519_ref10_fe_isnegative



crypto_sign_ed25519_ref10_fe_isnonzero


🚫
crypto_sign_ed25519_ref10_fe_mul



crypto_sign_ed25519_ref10_fe_neg


🚫
crypto_sign_ed25519_ref10_fe_pow22523


🚫
crypto_sign_ed25519_ref10_fe_sq


🚫
crypto_sign_ed25519_ref10_fe_sq2


🚫
crypto_sign_ed25519_ref10_fe_sub



crypto_sign_ed25519_ref10_fe_tobytes


🚫
crypto_sign_ed25519_ref10_ge_add



crypto_sign_ed25519_ref10_ge_double_scalarmult_vartime


🚫
crypto_sign_ed25519_ref10_ge_frombytes_negate_vartime


🚫
crypto_sign_ed25519_ref10_ge_madd


🚫
crypto_sign_ed25519_ref10_ge_msub


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p2


🚫
crypto_sign_ed25519_ref10_ge_p1p1_to_p3


🚫
crypto_sign_ed25519_ref10_ge_p2_0


🚫
crypto_sign_ed25519_ref10_ge_p2_dbl


🚫
crypto_sign_ed25519_ref10_ge_p3_0


🚫
crypto_sign_ed25519_ref10_ge_p3_dbl



crypto_sign_ed25519_ref10_ge_p3_tobytes


🚫
crypto_sign_ed25519_ref10_ge_p3_to_cached


🚫
crypto_sign_ed25519_ref10_ge_p3_to_p2


🚫
crypto_sign_ed25519_ref10_ge_precomp_0



crypto_sign_ed25519_ref10_ge_scalarmult_base


🚫
crypto_sign_ed25519_ref10_ge_sub



crypto_sign_ed25519_ref10_ge_tobytes



crypto_sign_ed25519_ref10_sc_muladd



crypto_sign_ed25519_ref10_sc_reduce



crypto_verify_32



ge_cmp



ge_frombytes_vartime



generate_random_32



ge_p2_to_p3



ge_p3_sub



ge_scalarmult_blinded



soter_asym_cipher_cleanup



soter_asym_cipher_create



soter_asym_cipher_decrypt



soter_asym_cipher_destroy



soter_asym_cipher_encrypt


🚫
soter_asym_cipher_import_key



soter_asym_cipher_init



soter_asym_ka_cleanup



soter_asym_ka_create



soter_asym_ka_derive



soter_asym_ka_destroy



soter_asym_ka_export_key



soter_asym_ka_gen_key



soter_asym_ka_import_key



soter_asym_ka_init


🚫
soter_crc32


🚫
soter_crc32_create


🚫
soter_crc32_final


🚫
soter_crc32_update


🚫
soter_ec_export_key


🚫
soter_ec_gen_key


🚫
soter_ec_import_key


🚫
soter_ec_priv_key_to_engine_specific


🚫
soter_ec_pub_key_to_engine_specific


🚫
soter_engine_specific_to_ec_priv_key


🚫
soter_engine_specific_to_ec_pub_key


🚫
soter_engine_specific_to_rsa_priv_key


🚫
soter_engine_specific_to_rsa_pub_key



soter_hash_cleanup



soter_hash_create



soter_hash_destroy



soter_hash_final



soter_hash_init



soter_hash_update



soter_hmac_cleanup



soter_hmac_create



soter_hmac_destroy



soter_hmac_final



soter_hmac_init



soter_hmac_update



soter_kdf


🚫
soter_nokdf


🚫
soter_pbkdf2



soter_rand


🚫
soter_rsa_export_key


🚫
soter_rsa_gen_key


🚫
soter_rsa_import_key


🚫
soter_rsa_key_pair_gen_cleanup



soter_rsa_key_pair_gen_create



soter_rsa_key_pair_gen_destroy



soter_rsa_key_pair_gen_export_key



soter_rsa_key_pair_gen_init


🚫
soter_rsa_priv_key_to_engine_specific


🚫
soter_rsa_pub_key_to_engine_specific


🚫
soter_sign_cleanup


🚫
soter_sign_cleanup_ecdsa_none_pkcs8


🚫
soter_sign_cleanup_rsa_pss_pkcs8



soter_sign_create



soter_sign_destroy



soter_sign_export_key


🚫
soter_sign_export_key_ecdsa_none_pkcs8


🚫
soter_sign_export_key_rsa_pss_pkcs8



soter_sign_final


🚫
soter_sign_final_ecdsa_none_pkcs8


🚫
soter_sign_final_rsa_pss_pkcs8



soter_sign_get_alg_id



soter_sign_init


🚫
soter_sign_init_ecdsa_none_pkcs8


🚫
soter_sign_init_rsa_pss_pkcs8



soter_sign_update


🚫
soter_sign_update_ecdsa_none_pkcs8


🚫
soter_sign_update_rsa_pss_pkcs8


🚫
soter_sym_aead_ctx_final


🚫
soter_sym_aead_ctx_init



soter_sym_aead_decrypt_aad



soter_sym_aead_decrypt_create



soter_sym_aead_decrypt_destroy



soter_sym_aead_decrypt_final



soter_sym_aead_decrypt_update



soter_sym_aead_encrypt_aad



soter_sym_aead_encrypt_create



soter_sym_aead_encrypt_destroy



soter_sym_aead_encrypt_final



soter_sym_aead_encrypt_update


🚫
soter_sym_ctx_destroy


🚫
soter_sym_ctx_final


🚫
soter_sym_ctx_init


🚫
soter_sym_ctx_update



soter_sym_decrypt_create



soter_sym_decrypt_destroy



soter_sym_decrypt_final



soter_sym_decrypt_update



soter_sym_encrypt_create



soter_sym_encrypt_destroy



soter_sym_encrypt_final



soter_sym_encrypt_update



soter_update_container_checksum


🚫
soter_verify_cleanup


🚫
soter_verify_cleanup_ecdsa_none_pkcs8


🚫
soter_verify_cleanup_rsa_pss_pkcs8



soter_verify_container_checksum



soter_verify_create



soter_verify_destroy



soter_verify_final


🚫
soter_verify_final_ecdsa_none_pkcs8


🚫
soter_verify_final_rsa_pss_pkcs8



soter_verify_get_alg_id



soter_verify_init


🚫
soter_verify_init_ecdsa_none_pkcs8


🚫
soter_verify_init_rsa_pss_pkcs8



soter_verify_update


🚫
soter_verify_update_ecdsa_none_pkcs8


🚫
soter_verify_update_rsa_pss_pkcs8


🚫
soter_withkdf





Themis




Function




🚫
compute_mac


🚫
compute_signature


🚫
encrypt_gcm


🚫
get_alg_id


🚫
get_key_sign_type


🚫
get_peer_key_sign_type



secure_comparator_append_secret



secure_comparator_begin_compare


🚫
secure_comparator_cleanup



secure_comparator_create



secure_comparator_destroy



secure_comparator_get_result


🚫
secure_comparator_init



secure_comparator_proceed_compare


🚫
secure_session_cleanup



secure_session_connect



secure_session_create


🚫
secure_session_derive_message_keys



secure_session_destroy



secure_session_generate_connect_request



secure_session_get_remote_id


🚫
secure_session_init



secure_session_is_established



secure_session_load


🚫
secure_session_peer_cleanup


🚫
secure_session_peer_init



secure_session_receive



secure_session_save



secure_session_send



secure_session_unwrap



secure_session_wrap


🚫
themis_auth_sym_decrypt_message


🚫
themis_auth_sym_decrypt_message_


🚫
themis_auth_sym_encrypt_message


🚫
themis_auth_sym_encrypt_message_


🚫
themis_auth_sym_plain_decrypt


🚫
themis_auth_sym_plain_encrypt



themis_gen_ec_key_pair


🚫
themis_gen_key_pair



themis_gen_rsa_key_pair



themis_get_asym_key_kind



themis_is_valid_asym_key


🚫
themis_message_destroy


🚫
themis_message_get_data


🚫
themis_message_get_length


🚫
themis_message_init


🚫
themis_message_set



themis_secure_cell_decrypt_context_imprint



themis_secure_cell_decrypt_seal



themis_secure_cell_decrypt_token_protect



themis_secure_cell_encrypt_context_imprint



themis_secure_cell_encrypt_seal



themis_secure_cell_encrypt_token_protect



themis_secure_message_decrypt


🚫
themis_secure_message_decrypter_destroy


🚫
themis_secure_message_decrypter_init


🚫
themis_secure_message_decrypter_proceed


🚫
themis_secure_message_ec_decrypter_destroy


🚫
themis_secure_message_ec_decrypter_init


🚫
themis_secure_message_ec_decrypter_proceed


🚫
themis_secure_message_ec_encrypter_destroy


🚫
themis_secure_message_ec_encrypter_init


🚫
themis_secure_message_ec_encrypter_proceed



themis_secure_message_encrypt


🚫
themis_secure_message_encrypter_destroy


🚫
themis_secure_message_encrypter_init


🚫
themis_secure_message_encrypter_proceed


🚫
themis_secure_message_rsa_decrypter_destroy


🚫
themis_secure_message_rsa_decrypter_init


🚫
themis_secure_message_rsa_decrypter_proceed


🚫
themis_secure_message_rsa_encrypter_destroy


🚫
themis_secure_message_rsa_encrypter_init


🚫
themis_secure_message_rsa_encrypter_proceed



themis_secure_message_sign


🚫
themis_secure_message_signer_destroy


🚫
themis_secure_message_signer_init


🚫
themis_secure_message_signer_proceed



themis_secure_message_unwrap


🚫
themis_secure_message_verifier_destroy


🚫
themis_secure_message_verifier_init


🚫
themis_secure_message_verifier_proceed



themis_secure_message_verify



themis_secure_message_wrap


🚫
themis_sym_decrypt_message_u


🚫
themis_sym_decrypt_message_u_


🚫
themis_sym_encrypt_message_u


🚫
themis_sym_encrypt_message_u_


🚫
themis_sym_kdf


🚫
themis_sym_plain_decrypt


🚫
themis_sym_plain_encrypt


🚫
verify_mac


🚫
verify_signature




All these functions are not accessible normally, via <soter/soter.h> or <themis/themis.h>.
Note that some functions from private headers are required to be exported due to hysterical raisins. These ones are marked with SOTER_PRIVATE_API and are exceptional by all means.


Explicitly mark public API of Themis

Introduce a new header <themis/themis_api.h> which defines a function attribute marker THEMIS_API. It is used to explicitly mark API that is considered public. These functions will be exported from the library.
Themis does not really provide separate public header files so it's not immediately obvious which functions have to be marked public. We go with functions visible when including <themis/themis.h>.
Currently we support only UNIX-like systems so we can limit ourselves to just Clang and GCC. MSVC requires slightly different syntax but we'll get back to that when we start supporting Windows again.

Explicitly mark public API of Soter

Just like with Themis, introduce <soter/soter_api.h> with SOTER_API and mark all public declarations as such.
Note that Soter also has a... complicated story with header files. It's not apparent which headers are public and which are private. We consider public those ones included from <soter/soter.h>.

Export additional private-use API from Soter

Due to historically sloppy export management, many functions in Themis (as well as in unit-tests) rely on not-so-public API to be available. Normally you cannot get access to these functions, but you can if you import <soter/soter_t.h> or some other internal header files.
Introduce a new marker SOTER_PRIVATE_API to distinguish such functions from normal exports, and mark all of them exported. There are quite a few of functions, yeah...
Note that while public functions are marked in header files, private export functions are marked at definition site. This is required because some of the source files do not actually include corresponding headers. Plus, this way this definitions are ugly to look at and discourage from adding new 'private' exports.

Set default symbol visibility to hidden

Finally, compile all source code with default symbol visibility set to ""hidden"". With this only symbols marked with THEMIS_API, SOTER_API, or SOTER_PRIVATE_API will get exported from libraries. static functions will never be exported, and non-static functions are also not exported by default unless explicitly marked as public.

Before merge:

 Add new headers to Xcode project for Carthage
 Make sure API mistakes are caught by automatic tests (will do later)","Note to everyone: do not forget to update Xcode project that builds Themis Carthage to include new header

The header files are not strictly necessary for the build to be successful (they are not compiled). But they were missing from the project file list in Xcode. I've added them there and verified that the framework can be built, and that our Carthage examples work with that result.
@vixentael, thanks for reminding me about this. I think we should work on adding Carthage to CI in order to relieve you from this duty...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,459,2019-04-12T15:10:04Z,2019-04-16T10:10:36Z,2019-04-16T13:41:29Z,MERGED,True,3,0,1,https://github.com/ilammy,"Make ""all"" the default target again",1,"['infrastructure', 'installation']",https://github.com/cossacklabs/themis/pull/459,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/459,"Recent additions to included makefiles have changed the default target from all to something unexpected (Soter's static library, if you're lucky). Let's make sure that all is the default target—the first one in the Makefile—when users are simply running
make","Recent additions to included makefiles have changed the default target from all to something unexpected (Soter's static library, if you're lucky). Let's make sure that all is the default target—the first one in the Makefile—when users are simply running
make",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,460,2019-04-12T18:04:39Z,2019-04-24T11:58:39Z,2019-04-24T11:58:52Z,MERGED,True,55,9,4,https://github.com/ilammy,Use dynamic linkage for tests,6,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/460,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/460,"PR #458 has introduced explicit visibility control using THEMIS_API, SOTER_API, and SOTER_PRIVATE_API macros. Unfortunately, visibility has no effect on static libraries. Thus if the developers forget to export a function then unit and integration tests will still pass because they are using static linkage.
Switch to using dynamic linkage for tests. In this case linkage will fail if a required function is not marked as exported, with a more or less helpful message like this:
link build/libthemis.so.0                                          [ERRORS]
cc -shared -o build/libthemis.so.0 build/obj/src/themis/secure_session_peer.c.o build/obj/src/themis/message.c.o build/obj/src/themis/secure_session_utils.c.o build/obj/src/themis/secure_message.c.o build/obj/src/themis/secure_session.c.o build/obj/src/themis/secure_session_serialize.c.o build/obj/src/themis/sym_enc_message.c.o build/obj/src/themis/secure_comparator.c.o build/obj/src/themis/secure_cell.c.o build/obj/src/themis/secure_keygen.c.o build/obj/src/themis/secure_message_wrapper.c.o build/obj/src/themis/secure_session_message.c.o -L/usr/local/lib -Wl,--no-undefined -Lbuild -lsoter -Wl,-soname,libthemis.so.0
/usr/bin/ld: build/obj/src/themis/secure_comparator.c.o: in function `ed_verify':
secure_comparator.c:(.text+0x28c): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: secure_comparator.c:(.text+0x2ad): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: build/obj/src/themis/secure_comparator.c.o: in function `ed_point_verify':
secure_comparator.c:(.text+0xc05): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: secure_comparator.c:(.text+0xc26): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
collect2: error: ld returned 1 exit status
make: *** [src/themis/themis.mk:59: build/libthemis.so.0] Error 1

And the developer will at least know what functions and files are affected, and where they forgot to add SOTER_PRIVATE_API or one of its friends.


Link tests dynamically: Soter

Switch to dynamic linkage for test binaries. This will allow us to better track missing exported symbols and make sure that all public API is actually tested.
The switch itself is more or less trivial: build the dynamic library as the prerequisite, and link using -Lbuild -lsoter instead of adding the static library to the object list. Since now the cryptographic backend is managed by the dynamic library, we no longer have to link against it explicitly.
Caveat for Linux: we need to set rpath to the build directory so that the dynamic loader can locate Soter library there. Otherwise we'll have to set LD_LIBRARY_PATH when running tests.

Link tests dynamically: Themis

Link Themis Core tests dynamically, just like we do for Soter now.
Caveats:


the tests actually use some symbols from libsoter so we have to link against it as well, not only with just libthemis


setting LDFLAGS will leak them to libthemis and libsoter compilation by default, avoid that by using a separate variable



Link tests dynamically: ThemisPP

Link ThemisPP tests dynamically, just like we do for Themis and Soter. Overall it's just like with Themis.

Disallow unresolved symbols during builds

The default behavior of linkers is to allow unresolved symbols in libraries (but not executables). This is sometimes useful for interposition but not in our case. Add a global linker flag to ensure that all imported symbols can be resolved.
(Obviously, Linux and macOS linkers use a bit different syntax: --no-undefined vs -undefined,error.)","PR #458 has introduced explicit visibility control using THEMIS_API, SOTER_API, and SOTER_PRIVATE_API macros. Unfortunately, visibility has no effect on static libraries. Thus if the developers forget to export a function then unit and integration tests will still pass because they are using static linkage.
Switch to using dynamic linkage for tests. In this case linkage will fail if a required function is not marked as exported, with a more or less helpful message like this:
link build/libthemis.so.0                                          [ERRORS]
cc -shared -o build/libthemis.so.0 build/obj/src/themis/secure_session_peer.c.o build/obj/src/themis/message.c.o build/obj/src/themis/secure_session_utils.c.o build/obj/src/themis/secure_message.c.o build/obj/src/themis/secure_session.c.o build/obj/src/themis/secure_session_serialize.c.o build/obj/src/themis/sym_enc_message.c.o build/obj/src/themis/secure_comparator.c.o build/obj/src/themis/secure_cell.c.o build/obj/src/themis/secure_keygen.c.o build/obj/src/themis/secure_message_wrapper.c.o build/obj/src/themis/secure_session_message.c.o -L/usr/local/lib -Wl,--no-undefined -Lbuild -lsoter -Wl,-soname,libthemis.so.0
/usr/bin/ld: build/obj/src/themis/secure_comparator.c.o: in function `ed_verify':
secure_comparator.c:(.text+0x28c): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: secure_comparator.c:(.text+0x2ad): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: build/obj/src/themis/secure_comparator.c.o: in function `ed_point_verify':
secure_comparator.c:(.text+0xc05): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: secure_comparator.c:(.text+0xc26): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
collect2: error: ld returned 1 exit status
make: *** [src/themis/themis.mk:59: build/libthemis.so.0] Error 1

And the developer will at least know what functions and files are affected, and where they forgot to add SOTER_PRIVATE_API or one of its friends.


Link tests dynamically: Soter

Switch to dynamic linkage for test binaries. This will allow us to better track missing exported symbols and make sure that all public API is actually tested.
The switch itself is more or less trivial: build the dynamic library as the prerequisite, and link using -Lbuild -lsoter instead of adding the static library to the object list. Since now the cryptographic backend is managed by the dynamic library, we no longer have to link against it explicitly.
Caveat for Linux: we need to set rpath to the build directory so that the dynamic loader can locate Soter library there. Otherwise we'll have to set LD_LIBRARY_PATH when running tests.

Link tests dynamically: Themis

Link Themis Core tests dynamically, just like we do for Soter now.
Caveats:


the tests actually use some symbols from libsoter so we have to link against it as well, not only with just libthemis


setting LDFLAGS will leak them to libthemis and libsoter compilation by default, avoid that by using a separate variable



Link tests dynamically: ThemisPP

Link ThemisPP tests dynamically, just like we do for Themis and Soter. Overall it's just like with Themis.

Disallow unresolved symbols during builds

The default behavior of linkers is to allow unresolved symbols in libraries (but not executables). This is sometimes useful for interposition but not in our case. Add a global linker flag to ensure that all imported symbols can be resolved.
(Obviously, Linux and macOS linkers use a bit different syntax: --no-undefined vs -undefined,error.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,460,2019-04-12T18:04:39Z,2019-04-24T11:58:39Z,2019-04-24T11:58:52Z,MERGED,True,55,9,4,https://github.com/ilammy,Use dynamic linkage for tests,6,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/460,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/460#issuecomment-483722716,"PR #458 has introduced explicit visibility control using THEMIS_API, SOTER_API, and SOTER_PRIVATE_API macros. Unfortunately, visibility has no effect on static libraries. Thus if the developers forget to export a function then unit and integration tests will still pass because they are using static linkage.
Switch to using dynamic linkage for tests. In this case linkage will fail if a required function is not marked as exported, with a more or less helpful message like this:
link build/libthemis.so.0                                          [ERRORS]
cc -shared -o build/libthemis.so.0 build/obj/src/themis/secure_session_peer.c.o build/obj/src/themis/message.c.o build/obj/src/themis/secure_session_utils.c.o build/obj/src/themis/secure_message.c.o build/obj/src/themis/secure_session.c.o build/obj/src/themis/secure_session_serialize.c.o build/obj/src/themis/sym_enc_message.c.o build/obj/src/themis/secure_comparator.c.o build/obj/src/themis/secure_cell.c.o build/obj/src/themis/secure_keygen.c.o build/obj/src/themis/secure_message_wrapper.c.o build/obj/src/themis/secure_session_message.c.o -L/usr/local/lib -Wl,--no-undefined -Lbuild -lsoter -Wl,-soname,libthemis.so.0
/usr/bin/ld: build/obj/src/themis/secure_comparator.c.o: in function `ed_verify':
secure_comparator.c:(.text+0x28c): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: secure_comparator.c:(.text+0x2ad): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: build/obj/src/themis/secure_comparator.c.o: in function `ed_point_verify':
secure_comparator.c:(.text+0xc05): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: secure_comparator.c:(.text+0xc26): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
collect2: error: ld returned 1 exit status
make: *** [src/themis/themis.mk:59: build/libthemis.so.0] Error 1

And the developer will at least know what functions and files are affected, and where they forgot to add SOTER_PRIVATE_API or one of its friends.


Link tests dynamically: Soter

Switch to dynamic linkage for test binaries. This will allow us to better track missing exported symbols and make sure that all public API is actually tested.
The switch itself is more or less trivial: build the dynamic library as the prerequisite, and link using -Lbuild -lsoter instead of adding the static library to the object list. Since now the cryptographic backend is managed by the dynamic library, we no longer have to link against it explicitly.
Caveat for Linux: we need to set rpath to the build directory so that the dynamic loader can locate Soter library there. Otherwise we'll have to set LD_LIBRARY_PATH when running tests.

Link tests dynamically: Themis

Link Themis Core tests dynamically, just like we do for Soter now.
Caveats:


the tests actually use some symbols from libsoter so we have to link against it as well, not only with just libthemis


setting LDFLAGS will leak them to libthemis and libsoter compilation by default, avoid that by using a separate variable



Link tests dynamically: ThemisPP

Link ThemisPP tests dynamically, just like we do for Themis and Soter. Overall it's just like with Themis.

Disallow unresolved symbols during builds

The default behavior of linkers is to allow unresolved symbols in libraries (but not executables). This is sometimes useful for interposition but not in our case. Add a global linker flag to ensure that all imported symbols can be resolved.
(Obviously, Linux and macOS linkers use a bit different syntax: --no-undefined vs -undefined,error.)",And this one is ready for review as well.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,460,2019-04-12T18:04:39Z,2019-04-24T11:58:39Z,2019-04-24T11:58:52Z,MERGED,True,55,9,4,https://github.com/ilammy,Use dynamic linkage for tests,6,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/460,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/460#issuecomment-483878406,"PR #458 has introduced explicit visibility control using THEMIS_API, SOTER_API, and SOTER_PRIVATE_API macros. Unfortunately, visibility has no effect on static libraries. Thus if the developers forget to export a function then unit and integration tests will still pass because they are using static linkage.
Switch to using dynamic linkage for tests. In this case linkage will fail if a required function is not marked as exported, with a more or less helpful message like this:
link build/libthemis.so.0                                          [ERRORS]
cc -shared -o build/libthemis.so.0 build/obj/src/themis/secure_session_peer.c.o build/obj/src/themis/message.c.o build/obj/src/themis/secure_session_utils.c.o build/obj/src/themis/secure_message.c.o build/obj/src/themis/secure_session.c.o build/obj/src/themis/secure_session_serialize.c.o build/obj/src/themis/sym_enc_message.c.o build/obj/src/themis/secure_comparator.c.o build/obj/src/themis/secure_cell.c.o build/obj/src/themis/secure_keygen.c.o build/obj/src/themis/secure_message_wrapper.c.o build/obj/src/themis/secure_session_message.c.o -L/usr/local/lib -Wl,--no-undefined -Lbuild -lsoter -Wl,-soname,libthemis.so.0
/usr/bin/ld: build/obj/src/themis/secure_comparator.c.o: in function `ed_verify':
secure_comparator.c:(.text+0x28c): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: secure_comparator.c:(.text+0x2ad): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: build/obj/src/themis/secure_comparator.c.o: in function `ed_point_verify':
secure_comparator.c:(.text+0xc05): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: secure_comparator.c:(.text+0xc26): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
collect2: error: ld returned 1 exit status
make: *** [src/themis/themis.mk:59: build/libthemis.so.0] Error 1

And the developer will at least know what functions and files are affected, and where they forgot to add SOTER_PRIVATE_API or one of its friends.


Link tests dynamically: Soter

Switch to dynamic linkage for test binaries. This will allow us to better track missing exported symbols and make sure that all public API is actually tested.
The switch itself is more or less trivial: build the dynamic library as the prerequisite, and link using -Lbuild -lsoter instead of adding the static library to the object list. Since now the cryptographic backend is managed by the dynamic library, we no longer have to link against it explicitly.
Caveat for Linux: we need to set rpath to the build directory so that the dynamic loader can locate Soter library there. Otherwise we'll have to set LD_LIBRARY_PATH when running tests.

Link tests dynamically: Themis

Link Themis Core tests dynamically, just like we do for Soter now.
Caveats:


the tests actually use some symbols from libsoter so we have to link against it as well, not only with just libthemis


setting LDFLAGS will leak them to libthemis and libsoter compilation by default, avoid that by using a separate variable



Link tests dynamically: ThemisPP

Link ThemisPP tests dynamically, just like we do for Themis and Soter. Overall it's just like with Themis.

Disallow unresolved symbols during builds

The default behavior of linkers is to allow unresolved symbols in libraries (but not executables). This is sometimes useful for interposition but not in our case. Add a global linker flag to ensure that all imported symbols can be resolved.
(Obviously, Linux and macOS linkers use a bit different syntax: --no-undefined vs -undefined,error.)","tests are failing
link build-wasm/tests/soter_test.js [ERRORS]


error: undefined symbol: soter_asym_cipher_cleanup
warning: To disable errors for undefined symbols use `-s ERROR_ON_UNDEFINED_SYMBOLS=0`
error: undefined symbol: soter_asym_cipher_create
error: undefined symbol: soter_asym_cipher_decrypt
error: undefined symbol: soter_asym_cipher_destroy
error: undefined symbol: soter_asym_cipher_encrypt",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,460,2019-04-12T18:04:39Z,2019-04-24T11:58:39Z,2019-04-24T11:58:52Z,MERGED,True,55,9,4,https://github.com/ilammy,Use dynamic linkage for tests,6,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/460,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/460#issuecomment-484022547,"PR #458 has introduced explicit visibility control using THEMIS_API, SOTER_API, and SOTER_PRIVATE_API macros. Unfortunately, visibility has no effect on static libraries. Thus if the developers forget to export a function then unit and integration tests will still pass because they are using static linkage.
Switch to using dynamic linkage for tests. In this case linkage will fail if a required function is not marked as exported, with a more or less helpful message like this:
link build/libthemis.so.0                                          [ERRORS]
cc -shared -o build/libthemis.so.0 build/obj/src/themis/secure_session_peer.c.o build/obj/src/themis/message.c.o build/obj/src/themis/secure_session_utils.c.o build/obj/src/themis/secure_message.c.o build/obj/src/themis/secure_session.c.o build/obj/src/themis/secure_session_serialize.c.o build/obj/src/themis/sym_enc_message.c.o build/obj/src/themis/secure_comparator.c.o build/obj/src/themis/secure_cell.c.o build/obj/src/themis/secure_keygen.c.o build/obj/src/themis/secure_message_wrapper.c.o build/obj/src/themis/secure_session_message.c.o -L/usr/local/lib -Wl,--no-undefined -Lbuild -lsoter -Wl,-soname,libthemis.so.0
/usr/bin/ld: build/obj/src/themis/secure_comparator.c.o: in function `ed_verify':
secure_comparator.c:(.text+0x28c): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: secure_comparator.c:(.text+0x2ad): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: build/obj/src/themis/secure_comparator.c.o: in function `ed_point_verify':
secure_comparator.c:(.text+0xc05): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: secure_comparator.c:(.text+0xc26): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
collect2: error: ld returned 1 exit status
make: *** [src/themis/themis.mk:59: build/libthemis.so.0] Error 1

And the developer will at least know what functions and files are affected, and where they forgot to add SOTER_PRIVATE_API or one of its friends.


Link tests dynamically: Soter

Switch to dynamic linkage for test binaries. This will allow us to better track missing exported symbols and make sure that all public API is actually tested.
The switch itself is more or less trivial: build the dynamic library as the prerequisite, and link using -Lbuild -lsoter instead of adding the static library to the object list. Since now the cryptographic backend is managed by the dynamic library, we no longer have to link against it explicitly.
Caveat for Linux: we need to set rpath to the build directory so that the dynamic loader can locate Soter library there. Otherwise we'll have to set LD_LIBRARY_PATH when running tests.

Link tests dynamically: Themis

Link Themis Core tests dynamically, just like we do for Soter now.
Caveats:


the tests actually use some symbols from libsoter so we have to link against it as well, not only with just libthemis


setting LDFLAGS will leak them to libthemis and libsoter compilation by default, avoid that by using a separate variable



Link tests dynamically: ThemisPP

Link ThemisPP tests dynamically, just like we do for Themis and Soter. Overall it's just like with Themis.

Disallow unresolved symbols during builds

The default behavior of linkers is to allow unresolved symbols in libraries (but not executables). This is sometimes useful for interposition but not in our case. Add a global linker flag to ensure that all imported symbols can be resolved.
(Obviously, Linux and macOS linkers use a bit different syntax: --no-undefined vs -undefined,error.)","tests are failing

Yeah, that's so. This PR should not be merged until this is resolved.
I thought this is some transient issue (like with Android), but it's not. I cannot reproduce the issue locally in isolation, but the build fails on CircleCI. I guess I'll try doing exactly the steps that CircleCI does...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,460,2019-04-12T18:04:39Z,2019-04-24T11:58:39Z,2019-04-24T11:58:52Z,MERGED,True,55,9,4,https://github.com/ilammy,Use dynamic linkage for tests,6,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/460,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/460#issuecomment-484722401,"PR #458 has introduced explicit visibility control using THEMIS_API, SOTER_API, and SOTER_PRIVATE_API macros. Unfortunately, visibility has no effect on static libraries. Thus if the developers forget to export a function then unit and integration tests will still pass because they are using static linkage.
Switch to using dynamic linkage for tests. In this case linkage will fail if a required function is not marked as exported, with a more or less helpful message like this:
link build/libthemis.so.0                                          [ERRORS]
cc -shared -o build/libthemis.so.0 build/obj/src/themis/secure_session_peer.c.o build/obj/src/themis/message.c.o build/obj/src/themis/secure_session_utils.c.o build/obj/src/themis/secure_message.c.o build/obj/src/themis/secure_session.c.o build/obj/src/themis/secure_session_serialize.c.o build/obj/src/themis/sym_enc_message.c.o build/obj/src/themis/secure_comparator.c.o build/obj/src/themis/secure_cell.c.o build/obj/src/themis/secure_keygen.c.o build/obj/src/themis/secure_message_wrapper.c.o build/obj/src/themis/secure_session_message.c.o -L/usr/local/lib -Wl,--no-undefined -Lbuild -lsoter -Wl,-soname,libthemis.so.0
/usr/bin/ld: build/obj/src/themis/secure_comparator.c.o: in function `ed_verify':
secure_comparator.c:(.text+0x28c): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: secure_comparator.c:(.text+0x2ad): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: build/obj/src/themis/secure_comparator.c.o: in function `ed_point_verify':
secure_comparator.c:(.text+0xc05): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
/usr/bin/ld: secure_comparator.c:(.text+0xc26): undefined reference to `crypto_sign_ed25519_ref10_fe_neg'
collect2: error: ld returned 1 exit status
make: *** [src/themis/themis.mk:59: build/libthemis.so.0] Error 1

And the developer will at least know what functions and files are affected, and where they forgot to add SOTER_PRIVATE_API or one of its friends.


Link tests dynamically: Soter

Switch to dynamic linkage for test binaries. This will allow us to better track missing exported symbols and make sure that all public API is actually tested.
The switch itself is more or less trivial: build the dynamic library as the prerequisite, and link using -Lbuild -lsoter instead of adding the static library to the object list. Since now the cryptographic backend is managed by the dynamic library, we no longer have to link against it explicitly.
Caveat for Linux: we need to set rpath to the build directory so that the dynamic loader can locate Soter library there. Otherwise we'll have to set LD_LIBRARY_PATH when running tests.

Link tests dynamically: Themis

Link Themis Core tests dynamically, just like we do for Soter now.
Caveats:


the tests actually use some symbols from libsoter so we have to link against it as well, not only with just libthemis


setting LDFLAGS will leak them to libthemis and libsoter compilation by default, avoid that by using a separate variable



Link tests dynamically: ThemisPP

Link ThemisPP tests dynamically, just like we do for Themis and Soter. Overall it's just like with Themis.

Disallow unresolved symbols during builds

The default behavior of linkers is to allow unresolved symbols in libraries (but not executables). This is sometimes useful for interposition but not in our case. Add a global linker flag to ensure that all imported symbols can be resolved.
(Obviously, Linux and macOS linkers use a bit different syntax: --no-undefined vs -undefined,error.)",So basically Emscripten should be linked statically.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,461,2019-04-12T19:11:37Z,2019-04-16T13:36:28Z,2019-04-16T13:41:18Z,MERGED,True,1770,5,18,https://github.com/ilammy,Initial WasmThemis wrapper,3,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/461,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/461,"I'm getting better at writing JavaScript. Here's an initial version of WasmThemis wrapper. This is basic scaffolding that has

project structure
C API interfacing
error handling
automated testing
packaging

which is good enough for start. It covers only key generation API, but adding other functions should be mostly mechanical job now. (Well, maybe except for Secure Session and its callbacks which are going to get tricky.)


Add ""wasm_themis"" target for Makefile

The new wrapper was christened WasmThemis. Let's get rolling! It will live under src/wrappers/themis/wasm.
Introduce a new submakefile wasmthemis.mk which will contain all specific targets and configuration for building WasmThemis. The main target is wasm_themis, that's our user-facing target which should be used by developers. It will build the wrapper in BUILD_PATH.
We still don't have a proper wrapper so instead we're going to build libthemis.js library for now. This is our 'native code' as far as JavaScript is concerned. It simply links Themis static library and its dependencies with emcc. Note, however, a couple of caveats:


Use EMSCRIPTEN_KEEPALIVE marker for public API
Emscripten does dead-code elimination when linking final WebAssembly application. Anything not called from main() will be removed. And if there is no main() — typical for a library, eh? — then everything will be removed. We don't want that, so we use EMSCRIPTEN_KEEPALIVE to keep LLVM from optimizing out the functions we're going to use.


Use EXTRA_EXPORTED_RUNTIME_METHODS to keep preamble.js API
Emscripten provides a bunch of useful utilities for interacting with its sandbox from JavaScript. However, they are also optimized out by default. We need to explicitly list the APIs we're going to use.


Finally, all WebAssembly builds must be performed in properly configured Emscripten environment. That is, by calling emmake make wasm_themis. Add a simple check before running the build to ensure that the developer did not forget to use emmake.

Initial ""wasm-themis"" npm package

We're going to publish WasmThemis via npm, create a package for that. Let's be nice and provide README and LICENSE files, fill in some informational fields in in package.json, etc. Note also these carefully crafted .gitignore and .npmignore files. They are meant to ensure that developers could do their thing in the working copy without accidentally committing unnecessary files to git or publishing them on npm.
The package is currently marked as private to prevent accidental publish. However, it is going to be named wasm-themis and that's the name used in README.
As for the wrapper code itself, let's start with secure key generation. This gives us a good start as we need to provide all the scaffolding around Node.js modules and Themis error handling. The interface stays similar to JsThemis, but there are no compatibility requirements. Thus we are able to provide strongly typed PrivateKey and PublicKey wrappers over Uint8Array, and expose then as read-only properties of KeyPair.

Test harness for ""wasm-themis"" package

Add some test using Mocha as test runner (just like we do for JsThemis). We don't have much API to check, just verify some basic invariants.
Add test_wasm target to Makefile and integrate that into CI builds. Note that this target has to be run with emmake helper.","I'm getting better at writing JavaScript. Here's an initial version of WasmThemis wrapper. This is basic scaffolding that has

project structure
C API interfacing
error handling
automated testing
packaging

which is good enough for start. It covers only key generation API, but adding other functions should be mostly mechanical job now. (Well, maybe except for Secure Session and its callbacks which are going to get tricky.)


Add ""wasm_themis"" target for Makefile

The new wrapper was christened WasmThemis. Let's get rolling! It will live under src/wrappers/themis/wasm.
Introduce a new submakefile wasmthemis.mk which will contain all specific targets and configuration for building WasmThemis. The main target is wasm_themis, that's our user-facing target which should be used by developers. It will build the wrapper in BUILD_PATH.
We still don't have a proper wrapper so instead we're going to build libthemis.js library for now. This is our 'native code' as far as JavaScript is concerned. It simply links Themis static library and its dependencies with emcc. Note, however, a couple of caveats:


Use EMSCRIPTEN_KEEPALIVE marker for public API
Emscripten does dead-code elimination when linking final WebAssembly application. Anything not called from main() will be removed. And if there is no main() — typical for a library, eh? — then everything will be removed. We don't want that, so we use EMSCRIPTEN_KEEPALIVE to keep LLVM from optimizing out the functions we're going to use.


Use EXTRA_EXPORTED_RUNTIME_METHODS to keep preamble.js API
Emscripten provides a bunch of useful utilities for interacting with its sandbox from JavaScript. However, they are also optimized out by default. We need to explicitly list the APIs we're going to use.


Finally, all WebAssembly builds must be performed in properly configured Emscripten environment. That is, by calling emmake make wasm_themis. Add a simple check before running the build to ensure that the developer did not forget to use emmake.

Initial ""wasm-themis"" npm package

We're going to publish WasmThemis via npm, create a package for that. Let's be nice and provide README and LICENSE files, fill in some informational fields in in package.json, etc. Note also these carefully crafted .gitignore and .npmignore files. They are meant to ensure that developers could do their thing in the working copy without accidentally committing unnecessary files to git or publishing them on npm.
The package is currently marked as private to prevent accidental publish. However, it is going to be named wasm-themis and that's the name used in README.
As for the wrapper code itself, let's start with secure key generation. This gives us a good start as we need to provide all the scaffolding around Node.js modules and Themis error handling. The interface stays similar to JsThemis, but there are no compatibility requirements. Thus we are able to provide strongly typed PrivateKey and PublicKey wrappers over Uint8Array, and expose then as read-only properties of KeyPair.

Test harness for ""wasm-themis"" package

Add some test using Mocha as test runner (just like we do for JsThemis). We don't have much API to check, just verify some basic invariants.
Add test_wasm target to Makefile and integrate that into CI builds. Note that this target has to be run with emmake helper.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,461,2019-04-12T19:11:37Z,2019-04-16T13:36:28Z,2019-04-16T13:41:18Z,MERGED,True,1770,5,18,https://github.com/ilammy,Initial WasmThemis wrapper,3,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/461,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/461#issuecomment-483629719,"I'm getting better at writing JavaScript. Here's an initial version of WasmThemis wrapper. This is basic scaffolding that has

project structure
C API interfacing
error handling
automated testing
packaging

which is good enough for start. It covers only key generation API, but adding other functions should be mostly mechanical job now. (Well, maybe except for Secure Session and its callbacks which are going to get tricky.)


Add ""wasm_themis"" target for Makefile

The new wrapper was christened WasmThemis. Let's get rolling! It will live under src/wrappers/themis/wasm.
Introduce a new submakefile wasmthemis.mk which will contain all specific targets and configuration for building WasmThemis. The main target is wasm_themis, that's our user-facing target which should be used by developers. It will build the wrapper in BUILD_PATH.
We still don't have a proper wrapper so instead we're going to build libthemis.js library for now. This is our 'native code' as far as JavaScript is concerned. It simply links Themis static library and its dependencies with emcc. Note, however, a couple of caveats:


Use EMSCRIPTEN_KEEPALIVE marker for public API
Emscripten does dead-code elimination when linking final WebAssembly application. Anything not called from main() will be removed. And if there is no main() — typical for a library, eh? — then everything will be removed. We don't want that, so we use EMSCRIPTEN_KEEPALIVE to keep LLVM from optimizing out the functions we're going to use.


Use EXTRA_EXPORTED_RUNTIME_METHODS to keep preamble.js API
Emscripten provides a bunch of useful utilities for interacting with its sandbox from JavaScript. However, they are also optimized out by default. We need to explicitly list the APIs we're going to use.


Finally, all WebAssembly builds must be performed in properly configured Emscripten environment. That is, by calling emmake make wasm_themis. Add a simple check before running the build to ensure that the developer did not forget to use emmake.

Initial ""wasm-themis"" npm package

We're going to publish WasmThemis via npm, create a package for that. Let's be nice and provide README and LICENSE files, fill in some informational fields in in package.json, etc. Note also these carefully crafted .gitignore and .npmignore files. They are meant to ensure that developers could do their thing in the working copy without accidentally committing unnecessary files to git or publishing them on npm.
The package is currently marked as private to prevent accidental publish. However, it is going to be named wasm-themis and that's the name used in README.
As for the wrapper code itself, let's start with secure key generation. This gives us a good start as we need to provide all the scaffolding around Node.js modules and Themis error handling. The interface stays similar to JsThemis, but there are no compatibility requirements. Thus we are able to provide strongly typed PrivateKey and PublicKey wrappers over Uint8Array, and expose then as read-only properties of KeyPair.

Test harness for ""wasm-themis"" package

Add some test using Mocha as test runner (just like we do for JsThemis). We don't have much API to check, just verify some basic invariants.
Add test_wasm target to Makefile and integrate that into CI builds. Note that this target has to be run with emmake helper.","Ready for review, please take a look.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,462,2019-04-16T11:45:02Z,2019-07-09T12:13:51Z,2019-07-09T12:40:21Z,MERGED,True,823,9,7,https://github.com/ilammy,Secure Cell support in WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/462,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/462,"Provide Secure Cell interface in WasmThemis. It is similar to the interface of JsThemis.
I don't really like the amount of code duplication for data transfer back and forth from Emscripten, but I wasn't able to reduce it much by introducing utility functions to abstract out Secure Cell calls, helper classes like FFIBuffer to manage the data transfer, etc. If you have any ideas I'm all ears, but for now I guess let's keep it dumb and straightforward. Maybe some patterns will emerge when we've got all the API covered.


Correctly report error codes
Move 'coerceToBytes' into utility module
Secure Cell: Seal mode
Secure Cell: Context Imprint mode
Secure Cell: Token Protect mode

(More details in individual commit messages.)

Pre-merge check list:

 Allow null context values as empty context","Provide Secure Cell interface in WasmThemis. It is similar to the interface of JsThemis.
I don't really like the amount of code duplication for data transfer back and forth from Emscripten, but I wasn't able to reduce it much by introducing utility functions to abstract out Secure Cell calls, helper classes like FFIBuffer to manage the data transfer, etc. If you have any ideas I'm all ears, but for now I guess let's keep it dumb and straightforward. Maybe some patterns will emerge when we've got all the API covered.


Correctly report error codes
Move 'coerceToBytes' into utility module
Secure Cell: Seal mode
Secure Cell: Context Imprint mode
Secure Cell: Token Protect mode

(More details in individual commit messages.)

Pre-merge check list:

 Allow null context values as empty context",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,462,2019-04-16T11:45:02Z,2019-07-09T12:13:51Z,2019-07-09T12:40:21Z,MERGED,True,823,9,7,https://github.com/ilammy,Secure Cell support in WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/462,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/462#issuecomment-483664809,"Provide Secure Cell interface in WasmThemis. It is similar to the interface of JsThemis.
I don't really like the amount of code duplication for data transfer back and forth from Emscripten, but I wasn't able to reduce it much by introducing utility functions to abstract out Secure Cell calls, helper classes like FFIBuffer to manage the data transfer, etc. If you have any ideas I'm all ears, but for now I guess let's keep it dumb and straightforward. Maybe some patterns will emerge when we've got all the API covered.


Correctly report error codes
Move 'coerceToBytes' into utility module
Secure Cell: Seal mode
Secure Cell: Context Imprint mode
Secure Cell: Token Protect mode

(More details in individual commit messages.)

Pre-merge check list:

 Allow null context values as empty context","Prerequisites have been merged, this PR is ready for review as well.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,462,2019-04-16T11:45:02Z,2019-07-09T12:13:51Z,2019-07-09T12:40:21Z,MERGED,True,823,9,7,https://github.com/ilammy,Secure Cell support in WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/462,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/462#issuecomment-495591339,"Provide Secure Cell interface in WasmThemis. It is similar to the interface of JsThemis.
I don't really like the amount of code duplication for data transfer back and forth from Emscripten, but I wasn't able to reduce it much by introducing utility functions to abstract out Secure Cell calls, helper classes like FFIBuffer to manage the data transfer, etc. If you have any ideas I'm all ears, but for now I guess let's keep it dumb and straightforward. Maybe some patterns will emerge when we've got all the API covered.


Correctly report error codes
Move 'coerceToBytes' into utility module
Secure Cell: Seal mode
Secure Cell: Context Imprint mode
Secure Cell: Token Protect mode

(More details in individual commit messages.)

Pre-merge check list:

 Allow null context values as empty context","upd: this thing is on hold, until we continue it :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,462,2019-04-16T11:45:02Z,2019-07-09T12:13:51Z,2019-07-09T12:40:21Z,MERGED,True,823,9,7,https://github.com/ilammy,Secure Cell support in WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/462,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/462#issuecomment-508133290,"Provide Secure Cell interface in WasmThemis. It is similar to the interface of JsThemis.
I don't really like the amount of code duplication for data transfer back and forth from Emscripten, but I wasn't able to reduce it much by introducing utility functions to abstract out Secure Cell calls, helper classes like FFIBuffer to manage the data transfer, etc. If you have any ideas I'm all ears, but for now I guess let's keep it dumb and straightforward. Maybe some patterns will emerge when we've got all the API covered.


Correctly report error codes
Move 'coerceToBytes' into utility module
Secure Cell: Seal mode
Secure Cell: Context Imprint mode
Secure Cell: Token Protect mode

(More details in individual commit messages.)

Pre-merge check list:

 Allow null context values as empty context","Okay... It seems that we're resuming work on WasmThemis.
Are there any pending decisions on this PR?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,462,2019-04-16T11:45:02Z,2019-07-09T12:13:51Z,2019-07-09T12:40:21Z,MERGED,True,823,9,7,https://github.com/ilammy,Secure Cell support in WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/462,https://github.com/Lagovas,5,https://github.com/cossacklabs/themis/pull/462#issuecomment-508146613,"Provide Secure Cell interface in WasmThemis. It is similar to the interface of JsThemis.
I don't really like the amount of code duplication for data transfer back and forth from Emscripten, but I wasn't able to reduce it much by introducing utility functions to abstract out Secure Cell calls, helper classes like FFIBuffer to manage the data transfer, etc. If you have any ideas I'm all ears, but for now I guess let's keep it dumb and straightforward. Maybe some patterns will emerge when we've got all the API covered.


Correctly report error codes
Move 'coerceToBytes' into utility module
Secure Cell: Seal mode
Secure Cell: Context Imprint mode
Secure Cell: Token Protect mode

(More details in individual commit messages.)

Pre-merge check list:

 Allow null context values as empty context","I thought we wait when other components will be ported to wasm to merge it as complete themis port
now it's only secure cell part without message/comparator/session
@vixentael , what about to merge it to separate branch and merge into master when we will finish all parts? or we should carefully document it on docserver and warn that wasm-themis support only secure cell.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,462,2019-04-16T11:45:02Z,2019-07-09T12:13:51Z,2019-07-09T12:40:21Z,MERGED,True,823,9,7,https://github.com/ilammy,Secure Cell support in WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/462,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/462#issuecomment-508148672,"Provide Secure Cell interface in WasmThemis. It is similar to the interface of JsThemis.
I don't really like the amount of code duplication for data transfer back and forth from Emscripten, but I wasn't able to reduce it much by introducing utility functions to abstract out Secure Cell calls, helper classes like FFIBuffer to manage the data transfer, etc. If you have any ideas I'm all ears, but for now I guess let's keep it dumb and straightforward. Maybe some patterns will emerge when we've got all the API covered.


Correctly report error codes
Move 'coerceToBytes' into utility module
Secure Cell: Seal mode
Secure Cell: Context Imprint mode
Secure Cell: Token Protect mode

(More details in individual commit messages.)

Pre-merge check list:

 Allow null context values as empty context","I have other cryptosystems more or less ready for review too, but that's a lot of boilerplate code for a single PR. I think it will be better to split them into multiple PRs.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,462,2019-04-16T11:45:02Z,2019-07-09T12:13:51Z,2019-07-09T12:40:21Z,MERGED,True,823,9,7,https://github.com/ilammy,Secure Cell support in WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/462,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/462#issuecomment-509303538,"Provide Secure Cell interface in WasmThemis. It is similar to the interface of JsThemis.
I don't really like the amount of code duplication for data transfer back and forth from Emscripten, but I wasn't able to reduce it much by introducing utility functions to abstract out Secure Cell calls, helper classes like FFIBuffer to manage the data transfer, etc. If you have any ideas I'm all ears, but for now I guess let's keep it dumb and straightforward. Maybe some patterns will emerge when we've got all the API covered.


Correctly report error codes
Move 'coerceToBytes' into utility module
Secure Cell: Seal mode
Secure Cell: Context Imprint mode
Secure Cell: Token Protect mode

(More details in individual commit messages.)

Pre-merge check list:

 Allow null context values as empty context",I believe that zeroization of Emscripten memory should be added to other WasmThemis PRs as well. I'll add it in a separate PR across all the code.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,462,2019-04-16T11:45:02Z,2019-07-09T12:13:51Z,2019-07-09T12:40:21Z,MERGED,True,823,9,7,https://github.com/ilammy,Secure Cell support in WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/462,https://github.com/ilammy,8,https://github.com/cossacklabs/themis/pull/462#issuecomment-509583237,"Provide Secure Cell interface in WasmThemis. It is similar to the interface of JsThemis.
I don't really like the amount of code duplication for data transfer back and forth from Emscripten, but I wasn't able to reduce it much by introducing utility functions to abstract out Secure Cell calls, helper classes like FFIBuffer to manage the data transfer, etc. If you have any ideas I'm all ears, but for now I guess let's keep it dumb and straightforward. Maybe some patterns will emerge when we've got all the API covered.


Correctly report error codes
Move 'coerceToBytes' into utility module
Secure Cell: Seal mode
Secure Cell: Context Imprint mode
Secure Cell: Token Protect mode

(More details in individual commit messages.)

Pre-merge check list:

 Allow null context values as empty context","There are quite a few special types that I'd like to test for type safety:

null
undefined
strings
various arrays that are not strictly byte arrays
futures/promises
arbitrary objects

So I guess I'll add these checks in a separate pull request once all cryptosystems are in place. This will make it easier to avoid merge conflicts and will allow usage of utility functions to avoid code duplication.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,463,2019-04-24T13:03:51Z,2019-04-24T13:31:12Z,2019-04-24T13:31:15Z,MERGED,True,128,82,24,https://github.com/vixentael,"Update iOS/macOS examples [Xcode 10.2, swift 4.2]",4,"['O-iOS :iphone:', 'O-macOS :computer:', 'tests']",https://github.com/cossacklabs/themis/pull/463,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/463,"Update tests and examples projects to Swift 4.2.
Update links to Themis Interactive simulator, fix warnings.","Update tests and examples projects to Swift 4.2.
Update links to Themis Interactive simulator, fix warnings.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,463,2019-04-24T13:03:51Z,2019-04-24T13:31:12Z,2019-04-24T13:31:15Z,MERGED,True,128,82,24,https://github.com/vixentael,"Update iOS/macOS examples [Xcode 10.2, swift 4.2]",4,"['O-iOS :iphone:', 'O-macOS :computer:', 'tests']",https://github.com/cossacklabs/themis/pull/463,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/463#issuecomment-486230135,"Update tests and examples projects to Swift 4.2.
Update links to Themis Interactive simulator, fix warnings.",we run out of time for bitrise CI ☹️,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,465,2019-05-06T10:44:00Z,2019-05-07T09:02:16Z,2019-09-27T13:31:09Z,MERGED,True,41,7,2,https://github.com/vixentael,improve keys checks for jsthemis in SecureMessage,4,"['bug', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/465,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/465,"In new SecureMessage API we made a mistake when checking keys for SecureMessage. For sign mode we should check private key, for verify mode we should check public key.
This affects only error messages for user, Themis uses correct keys while actual signing/verifying.
After this merge, we should update jsthemis and push to npm again as 0.11.2.","In new SecureMessage API we made a mistake when checking keys for SecureMessage. For sign mode we should check private key, for verify mode we should check public key.
This affects only error messages for user, Themis uses correct keys while actual signing/verifying.
After this merge, we should update jsthemis and push to npm again as 0.11.2.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,465,2019-05-06T10:44:00Z,2019-05-07T09:02:16Z,2019-09-27T13:31:09Z,MERGED,True,41,7,2,https://github.com/vixentael,improve keys checks for jsthemis in SecureMessage,4,"['bug', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/465,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/465#issuecomment-489584624,"In new SecureMessage API we made a mistake when checking keys for SecureMessage. For sign mode we should check private key, for verify mode we should check public key.
This affects only error messages for user, Themis uses correct keys while actual signing/verifying.
After this merge, we should update jsthemis and push to npm again as 0.11.2.","We have some tests here:

  
    
      themis/tests/jsthemis/test.js
    
    
        Lines 33 to 40
      in
      bccb755
    
  
  
    

        
          
           it(""empty keys"", function(){ 
        

        
          
               encrypted_message = encrypter.encrypt(message); 
        

        
          
               signed_message = encrypter.sign(message); 
        

        
          
               assert.throws(function(){empty_secure_message.encrypt(message);}, expect_code(addon.INVALID_PARAMETER)); 
        

        
          
               assert.throws(function(){empty_secure_message.decrypt(encrypted_message);}, expect_code(addon.INVALID_PARAMETER)); 
        

        
          
               assert.throws(function(){empty_secure_message.sign(message);}, expect_code(addon.INVALID_PARAMETER)); 
        

        
          
               assert.throws(function(){empty_secure_message.verify(signed_message);}, expect_code(addon.INVALID_PARAMETER)); 
        

        
          
           }) 
        
    
  


But unfortunately they don't cover the case when only one of the keys is empty.
They also do not check the specific error message, only the error code. The assert.throws() function can accept a regex for the message (or, probably, it would be better to check both code and message properties).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,465,2019-05-06T10:44:00Z,2019-05-07T09:02:16Z,2019-09-27T13:31:09Z,MERGED,True,41,7,2,https://github.com/vixentael,improve keys checks for jsthemis in SecureMessage,4,"['bug', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/465,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/465#issuecomment-489686865,"In new SecureMessage API we made a mistake when checking keys for SecureMessage. For sign mode we should check private key, for verify mode we should check public key.
This affects only error messages for user, Themis uses correct keys while actual signing/verifying.
After this merge, we should update jsthemis and push to npm again as 0.11.2.",@Lagovas @ilammy i've extended test suite,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,466,2019-05-06T11:42:34Z,2019-05-06T13:05:52Z,2019-05-06T13:05:56Z,MERGED,True,3,4,1,https://github.com/ilammy,Fix Clippy warnings,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/466,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/466,"New Clippy does not like when you write |s| s.to_owned() because making a new closure here is reduntant (you can pass the function std::borrow::ToOwned::to_owned there directly). This causes a warning and we treat warnings as errors, which breaks the builds.
Anyway, it's not like we need to avoid this computation here with a closure so rewrite the code to compute the default path in a more straightforward way and thus avoid the wrath of our resident god of static analysis.","New Clippy does not like when you write |s| s.to_owned() because making a new closure here is reduntant (you can pass the function std::borrow::ToOwned::to_owned there directly). This causes a warning and we treat warnings as errors, which breaks the builds.
Anyway, it's not like we need to avoid this computation here with a closure so rewrite the code to compute the default path in a more straightforward way and thus avoid the wrath of our resident god of static analysis.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,466,2019-05-06T11:42:34Z,2019-05-06T13:05:52Z,2019-05-06T13:05:56Z,MERGED,True,3,4,1,https://github.com/ilammy,Fix Clippy warnings,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/466,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/466#issuecomment-489598992,"New Clippy does not like when you write |s| s.to_owned() because making a new closure here is reduntant (you can pass the function std::borrow::ToOwned::to_owned there directly). This causes a warning and we treat warnings as errors, which breaks the builds.
Anyway, it's not like we need to avoid this computation here with a closure so rewrite the code to compute the default path in a more straightforward way and thus avoid the wrath of our resident god of static analysis.","oh this world on modern development :)
we shall merge this PR before #465",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,467,2019-05-06T16:42:02Z,2019-05-07T11:09:22Z,2019-05-07T11:09:29Z,MERGED,True,187,236,9,https://github.com/vixentael,improve SecureMessage sign/verify examples for iOS,2,"['O-iOS :iphone:', 'W-SwiftThemis :large_orange_diamond:']",https://github.com/cossacklabs/themis/pull/467,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/467,"Based on #464 and #465 I've checked & refreshed iOS examples for SecureMessage in sign/verify mode, and tests.

swift iOS cocoapods
swift iOS carthage
swift macos carthage
objc iOS cocoapods
objc iOS carthage
objc macos carthage","Based on #464 and #465 I've checked & refreshed iOS examples for SecureMessage in sign/verify mode, and tests.

swift iOS cocoapods
swift iOS carthage
swift macos carthage
objc iOS cocoapods
objc iOS carthage
objc macos carthage",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,468,2019-05-07T11:16:44Z,2019-05-07T11:18:34Z,2019-09-27T13:31:09Z,MERGED,True,1,1,1,https://github.com/vixentael,Push jsthemis to npm,1,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/468,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/468,"As result of #465 I've pushed jsthemis 0.11.2.
https://www.npmjs.com/package/jsthemis","As result of #465 I've pushed jsthemis 0.11.2.
https://www.npmjs.com/package/jsthemis",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,469,2019-05-20T18:38:17Z,2019-05-22T13:10:03Z,2019-05-23T15:33:44Z,MERGED,True,157,39,7,https://github.com/ilammy,MSYS2 target support,4,"['core', 'O-Windows :desktop_computer:']",https://github.com/cossacklabs/themis/pull/469,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/469,"MSYS2 is a popular and easy way to compile POSIX-compliant software on Windows. It provides GNU development environment and API compatibility layer between POSIX and WinAPI. All of this allows us to use the same build system and code as is, with the toolchain automagically producing PE binaries useable on Windows.
However, we need to introduce a number of changes to the build system to support MSYS:


Detect MSYS environment and provide IS_MSYS variable for checks
This allows us to introduce MSYS-specific behavior in Makefile.


Build Windows DLLs for shared objects
First of all, use MSYS naming scheme for dynamically loaded libraries: msys-${library_name}-${abi_version}.dll. These will contain the code loaded by applications.
After that we need to produce import libraries which are necessary in Windows world to link against dynamic libraries. On MSYS they are named lib${library_name}.dll.a.
Regular static libraries are still named lib${library_name}.a. These are useable only for inside MSYS2.


Install libraries to correct paths
On MSYS shared libraries have to be installed to /usr/bin because of the way library loading works in Windows: libraries need to be placed next to executables.
DLLs do not need symlinks on MSYS. However, they need import libraries instead. Update the installation targets to do this correctly.
Update uninstallation targets as well.


Avoid duplicate slashes when using DESTDIR
Remove slashes between DESTDIR and paths. Windows does not normalize duplicate slashes under MSYS which leads to really weird issues when creating directories.


Place tests into the same directory as libraries
We need to do this because tests link against libraries dynamically, they need to be able to load the library from the build director (as it's not yet installed). Windows does not have a direct analog of RPATH (as on Linux), and does not record library paths (as macOS does). We can use LD_LIBRARY_PATH for running tests, but that would make them hard to use without our makefile. Therefore just change the location.
Also, the NIST test suite has a bit different name on Windows. Add it to the .gitignore list.


With this, installation on MSYS can be done like this:
make install

GGEZ! 🎯
(Note that MSYS does not have /usr/local in its default search paths. You'll need to use -L/usr/local/lib when building applications, and add /usr/local/bin to PATH when running them. Or just install with PREFIX=/usr)
Packaging for MSYS2
Provide a PKGBUILD file which can be used to build Themis package for MSYS2. A similar file could be used for building on ArchLinux. However, this one does not work as is on Linux due to differences in dependency naming and directory layout.
Themis is a library. It is customary in MSYS2 to provide Debian-style split packages for libraries:

themis contains runtime shared libraries: *.dll on Windows
themis-devel contains headers, static libraries, and pkg-config files which are required for building software that uses Themis

The packages may be built by running
makepkg -p PKGBUILD.MSYS2

in the directory with the PKGBUILD file, then you install them with
pacman -U themis-0.11.2-1-x86_64.tar.xz
pacman -U themis-devel-0.11.2-1-x86_64.tar.xz

makepkg always downloads pristine source tarball, so there is no point in adding a Makefile target for preparing a package from source code.","MSYS2 is a popular and easy way to compile POSIX-compliant software on Windows. It provides GNU development environment and API compatibility layer between POSIX and WinAPI. All of this allows us to use the same build system and code as is, with the toolchain automagically producing PE binaries useable on Windows.
However, we need to introduce a number of changes to the build system to support MSYS:


Detect MSYS environment and provide IS_MSYS variable for checks
This allows us to introduce MSYS-specific behavior in Makefile.


Build Windows DLLs for shared objects
First of all, use MSYS naming scheme for dynamically loaded libraries: msys-${library_name}-${abi_version}.dll. These will contain the code loaded by applications.
After that we need to produce import libraries which are necessary in Windows world to link against dynamic libraries. On MSYS they are named lib${library_name}.dll.a.
Regular static libraries are still named lib${library_name}.a. These are useable only for inside MSYS2.


Install libraries to correct paths
On MSYS shared libraries have to be installed to /usr/bin because of the way library loading works in Windows: libraries need to be placed next to executables.
DLLs do not need symlinks on MSYS. However, they need import libraries instead. Update the installation targets to do this correctly.
Update uninstallation targets as well.


Avoid duplicate slashes when using DESTDIR
Remove slashes between DESTDIR and paths. Windows does not normalize duplicate slashes under MSYS which leads to really weird issues when creating directories.


Place tests into the same directory as libraries
We need to do this because tests link against libraries dynamically, they need to be able to load the library from the build director (as it's not yet installed). Windows does not have a direct analog of RPATH (as on Linux), and does not record library paths (as macOS does). We can use LD_LIBRARY_PATH for running tests, but that would make them hard to use without our makefile. Therefore just change the location.
Also, the NIST test suite has a bit different name on Windows. Add it to the .gitignore list.


With this, installation on MSYS can be done like this:
make install

GGEZ! 🎯
(Note that MSYS does not have /usr/local in its default search paths. You'll need to use -L/usr/local/lib when building applications, and add /usr/local/bin to PATH when running them. Or just install with PREFIX=/usr)
Packaging for MSYS2
Provide a PKGBUILD file which can be used to build Themis package for MSYS2. A similar file could be used for building on ArchLinux. However, this one does not work as is on Linux due to differences in dependency naming and directory layout.
Themis is a library. It is customary in MSYS2 to provide Debian-style split packages for libraries:

themis contains runtime shared libraries: *.dll on Windows
themis-devel contains headers, static libraries, and pkg-config files which are required for building software that uses Themis

The packages may be built by running
makepkg -p PKGBUILD.MSYS2

in the directory with the PKGBUILD file, then you install them with
pacman -U themis-0.11.2-1-x86_64.tar.xz
pacman -U themis-devel-0.11.2-1-x86_64.tar.xz

makepkg always downloads pristine source tarball, so there is no point in adding a Makefile target for preparing a package from source code.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,469,2019-05-20T18:38:17Z,2019-05-22T13:10:03Z,2019-05-23T15:33:44Z,MERGED,True,157,39,7,https://github.com/ilammy,MSYS2 target support,4,"['core', 'O-Windows :desktop_computer:']",https://github.com/cossacklabs/themis/pull/469,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/469#issuecomment-494742479,"MSYS2 is a popular and easy way to compile POSIX-compliant software on Windows. It provides GNU development environment and API compatibility layer between POSIX and WinAPI. All of this allows us to use the same build system and code as is, with the toolchain automagically producing PE binaries useable on Windows.
However, we need to introduce a number of changes to the build system to support MSYS:


Detect MSYS environment and provide IS_MSYS variable for checks
This allows us to introduce MSYS-specific behavior in Makefile.


Build Windows DLLs for shared objects
First of all, use MSYS naming scheme for dynamically loaded libraries: msys-${library_name}-${abi_version}.dll. These will contain the code loaded by applications.
After that we need to produce import libraries which are necessary in Windows world to link against dynamic libraries. On MSYS they are named lib${library_name}.dll.a.
Regular static libraries are still named lib${library_name}.a. These are useable only for inside MSYS2.


Install libraries to correct paths
On MSYS shared libraries have to be installed to /usr/bin because of the way library loading works in Windows: libraries need to be placed next to executables.
DLLs do not need symlinks on MSYS. However, they need import libraries instead. Update the installation targets to do this correctly.
Update uninstallation targets as well.


Avoid duplicate slashes when using DESTDIR
Remove slashes between DESTDIR and paths. Windows does not normalize duplicate slashes under MSYS which leads to really weird issues when creating directories.


Place tests into the same directory as libraries
We need to do this because tests link against libraries dynamically, they need to be able to load the library from the build director (as it's not yet installed). Windows does not have a direct analog of RPATH (as on Linux), and does not record library paths (as macOS does). We can use LD_LIBRARY_PATH for running tests, but that would make them hard to use without our makefile. Therefore just change the location.
Also, the NIST test suite has a bit different name on Windows. Add it to the .gitignore list.


With this, installation on MSYS can be done like this:
make install

GGEZ! 🎯
(Note that MSYS does not have /usr/local in its default search paths. You'll need to use -L/usr/local/lib when building applications, and add /usr/local/bin to PATH when running them. Or just install with PREFIX=/usr)
Packaging for MSYS2
Provide a PKGBUILD file which can be used to build Themis package for MSYS2. A similar file could be used for building on ArchLinux. However, this one does not work as is on Linux due to differences in dependency naming and directory layout.
Themis is a library. It is customary in MSYS2 to provide Debian-style split packages for libraries:

themis contains runtime shared libraries: *.dll on Windows
themis-devel contains headers, static libraries, and pkg-config files which are required for building software that uses Themis

The packages may be built by running
makepkg -p PKGBUILD.MSYS2

in the directory with the PKGBUILD file, then you install them with
pacman -U themis-0.11.2-1-x86_64.tar.xz
pacman -U themis-devel-0.11.2-1-x86_64.tar.xz

makepkg always downloads pristine source tarball, so there is no point in adding a Makefile target for preparing a package from source code.","@shadinua,

Has this PR been tested on our CI with all supported OS?

I have combined PRs #469, #470, #471, #472 in ilammy/windows branch. Please see the results here (internal resource). Soter and Themis seem to build and pass their test suites with all these changes. However, there are 'the usual' assorted issues with language wrappers, CentOS is still broken due to installation path differences, etc.",True,"{'THUMBS_UP': ['https://github.com/vixentael', 'https://github.com/shadinua']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,469,2019-05-20T18:38:17Z,2019-05-22T13:10:03Z,2019-05-23T15:33:44Z,MERGED,True,157,39,7,https://github.com/ilammy,MSYS2 target support,4,"['core', 'O-Windows :desktop_computer:']",https://github.com/cossacklabs/themis/pull/469,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/469#issuecomment-494770766,"MSYS2 is a popular and easy way to compile POSIX-compliant software on Windows. It provides GNU development environment and API compatibility layer between POSIX and WinAPI. All of this allows us to use the same build system and code as is, with the toolchain automagically producing PE binaries useable on Windows.
However, we need to introduce a number of changes to the build system to support MSYS:


Detect MSYS environment and provide IS_MSYS variable for checks
This allows us to introduce MSYS-specific behavior in Makefile.


Build Windows DLLs for shared objects
First of all, use MSYS naming scheme for dynamically loaded libraries: msys-${library_name}-${abi_version}.dll. These will contain the code loaded by applications.
After that we need to produce import libraries which are necessary in Windows world to link against dynamic libraries. On MSYS they are named lib${library_name}.dll.a.
Regular static libraries are still named lib${library_name}.a. These are useable only for inside MSYS2.


Install libraries to correct paths
On MSYS shared libraries have to be installed to /usr/bin because of the way library loading works in Windows: libraries need to be placed next to executables.
DLLs do not need symlinks on MSYS. However, they need import libraries instead. Update the installation targets to do this correctly.
Update uninstallation targets as well.


Avoid duplicate slashes when using DESTDIR
Remove slashes between DESTDIR and paths. Windows does not normalize duplicate slashes under MSYS which leads to really weird issues when creating directories.


Place tests into the same directory as libraries
We need to do this because tests link against libraries dynamically, they need to be able to load the library from the build director (as it's not yet installed). Windows does not have a direct analog of RPATH (as on Linux), and does not record library paths (as macOS does). We can use LD_LIBRARY_PATH for running tests, but that would make them hard to use without our makefile. Therefore just change the location.
Also, the NIST test suite has a bit different name on Windows. Add it to the .gitignore list.


With this, installation on MSYS can be done like this:
make install

GGEZ! 🎯
(Note that MSYS does not have /usr/local in its default search paths. You'll need to use -L/usr/local/lib when building applications, and add /usr/local/bin to PATH when running them. Or just install with PREFIX=/usr)
Packaging for MSYS2
Provide a PKGBUILD file which can be used to build Themis package for MSYS2. A similar file could be used for building on ArchLinux. However, this one does not work as is on Linux due to differences in dependency naming and directory layout.
Themis is a library. It is customary in MSYS2 to provide Debian-style split packages for libraries:

themis contains runtime shared libraries: *.dll on Windows
themis-devel contains headers, static libraries, and pkg-config files which are required for building software that uses Themis

The packages may be built by running
makepkg -p PKGBUILD.MSYS2

in the directory with the PKGBUILD file, then you install them with
pacman -U themis-0.11.2-1-x86_64.tar.xz
pacman -U themis-devel-0.11.2-1-x86_64.tar.xz

makepkg always downloads pristine source tarball, so there is no point in adding a Makefile target for preparing a package from source code.","i suggest to merge Windows-related PRs, and then to make some ""testing sprint"", where we update our internal CI with new commands/paths and run all tests to make sure that 1. windows-related stuff hasn't broken other OS; 2. we can CICD for windows",True,{'ROCKET': ['https://github.com/ilammy']}
cossacklabs/themis,https://github.com/cossacklabs/themis,470,2019-05-21T09:16:10Z,2019-05-22T13:11:05Z,2019-05-23T15:33:45Z,MERGED,True,264,179,16,https://github.com/ilammy,Avoid usage of <arpa/inet.h>,6,"['O-iOS :iphone:', 'core', 'O-Windows :desktop_computer:']",https://github.com/cossacklabs/themis/pull/470,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/470,"Avoid usage of <arpa/inet.h>

Unfortunately, Windows systems do not provide this header normally. We use to get access to htonl() and ntohl() functions. On Windows these functions are provided by <WinSock2.h> header (and ws2_32.dll library).
We could litter the code with ifdefs, but that's not nice. Instead, let's use the portable_endian.h header. It contains all necessary ifdefs, but provides slightly different (and explicit) API:

htonl == htobe32
ntohl == be32toh

Update all code to include common header and use new portable names.

Move portable_endian.h to Soter

We're going to need these functions in both Soter and Themis, so move the header to Soter. Keep a stub in Themis to avoid breaking existing code.
Also note that <sys/param.h> is a POSIX header and it is not available on Windows. Remove it. All conversions are provided by <WinSock2.h>.

Turn Soter container accessors into functions

soter_container.h uses htonl() and ntohl() functions directly in macros. This is not nice because it leaks implementation details and requires POSIX API which is not available on Windows. Furthermore, this header does not even include relevant headers for these functions!
Replace this macros with proper functions and move the implementation to soter_container.c which includes ""portable_endian.h"". This allows our API to not include private headers and does not unnecessarily expose implementation details.
Theoretically, this will impact performance, but in practice the effect should be negligible. These macros are not used in any hot paths, and the compiler may even optimize these functions when using LTO.","Avoid usage of <arpa/inet.h>

Unfortunately, Windows systems do not provide this header normally. We use to get access to htonl() and ntohl() functions. On Windows these functions are provided by <WinSock2.h> header (and ws2_32.dll library).
We could litter the code with ifdefs, but that's not nice. Instead, let's use the portable_endian.h header. It contains all necessary ifdefs, but provides slightly different (and explicit) API:

htonl == htobe32
ntohl == be32toh

Update all code to include common header and use new portable names.

Move portable_endian.h to Soter

We're going to need these functions in both Soter and Themis, so move the header to Soter. Keep a stub in Themis to avoid breaking existing code.
Also note that <sys/param.h> is a POSIX header and it is not available on Windows. Remove it. All conversions are provided by <WinSock2.h>.

Turn Soter container accessors into functions

soter_container.h uses htonl() and ntohl() functions directly in macros. This is not nice because it leaks implementation details and requires POSIX API which is not available on Windows. Furthermore, this header does not even include relevant headers for these functions!
Replace this macros with proper functions and move the implementation to soter_container.c which includes ""portable_endian.h"". This allows our API to not include private headers and does not unnecessarily expose implementation details.
Theoretically, this will impact performance, but in practice the effect should be negligible. These macros are not used in any hot paths, and the compiler may even optimize these functions when using LTO.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,471,2019-05-21T09:26:56Z,2019-05-22T13:11:36Z,2019-05-23T15:33:45Z,MERGED,True,33,4,4,https://github.com/ilammy,Improve Windows compatibility,5,"['core', 'O-Windows :desktop_computer:']",https://github.com/cossacklabs/themis/pull/471,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/471,"There are miscellaneous changes to ensure that Themis code can be compiled with Microsoft Visual Studio C Compiler.

soter/ed25519: fix incorrect unsigned negation

MSVC produces an error for this line. It may be okay with gcc and clang, but actually negating an unsigned value does not make sense, though it's not clear what effect it should have according to the standard.
gcc and clang on x86_64 compile this:
unsigned int b;
b = -b;
into this:
negl %eax
So they treat unsigned negation as two's complement, as if the number was signed). Replace the current expression with its equivalent.
The algorithm implies that b may only have 0 and 1 as values. Thus this line should be equivalent to
b = b ? UINT_MAX : 0;
but who knows what weird code paths lead here, so let's play it safe and use something completely equivalent. My little crypto: C is magic.

themis/secure_session: provide ssize_t on Windows

Fun fact: Windows does not have <sys/types.h> header and does not provide ssize_t in <WinSock2.h>. It is completely POSIX-specific. However, we use this type in Secure Session API.
Provide our definition of ssize_t on Windows. We use actual size_t types from MSVC's <stddef.h>, but mark them as signed.
An alternative approach is to replace ssize_t with something else, like int32_t. However, this will require massive changes in all language wrappers which all expect ssize_t. This might actually become necessary when we will be supporting Windows in language wrappers, but some of them may provide ssize_t in their FFI libraries so let's not jump the gun.

tests/soter: include <unistd.h> only for NIST

Currently NIST test suite runner is POSIX-specific (due to popen(), pathconf(), etc.) It does not compile on Windows with MSVC. Furthermore, Windows does not have <unistd.h> header.
Include <unistd.h> only when compiling NIST test runner. With this we can build Soter tests on Windows with NO_NIST_STS=1. We can add Windows support later.

tests/themis: fix implicit default initialization

MSVC does not support default initialization syntax. Initialize Secure Session callbacks explicitly to avoid compilation errors on Windows.","There are miscellaneous changes to ensure that Themis code can be compiled with Microsoft Visual Studio C Compiler.

soter/ed25519: fix incorrect unsigned negation

MSVC produces an error for this line. It may be okay with gcc and clang, but actually negating an unsigned value does not make sense, though it's not clear what effect it should have according to the standard.
gcc and clang on x86_64 compile this:
unsigned int b;
b = -b;
into this:
negl %eax
So they treat unsigned negation as two's complement, as if the number was signed). Replace the current expression with its equivalent.
The algorithm implies that b may only have 0 and 1 as values. Thus this line should be equivalent to
b = b ? UINT_MAX : 0;
but who knows what weird code paths lead here, so let's play it safe and use something completely equivalent. My little crypto: C is magic.

themis/secure_session: provide ssize_t on Windows

Fun fact: Windows does not have <sys/types.h> header and does not provide ssize_t in <WinSock2.h>. It is completely POSIX-specific. However, we use this type in Secure Session API.
Provide our definition of ssize_t on Windows. We use actual size_t types from MSVC's <stddef.h>, but mark them as signed.
An alternative approach is to replace ssize_t with something else, like int32_t. However, this will require massive changes in all language wrappers which all expect ssize_t. This might actually become necessary when we will be supporting Windows in language wrappers, but some of them may provide ssize_t in their FFI libraries so let's not jump the gun.

tests/soter: include <unistd.h> only for NIST

Currently NIST test suite runner is POSIX-specific (due to popen(), pathconf(), etc.) It does not compile on Windows with MSVC. Furthermore, Windows does not have <unistd.h> header.
Include <unistd.h> only when compiling NIST test runner. With this we can build Soter tests on Windows with NO_NIST_STS=1. We can add Windows support later.

tests/themis: fix implicit default initialization

MSVC does not support default initialization syntax. Initialize Secure Session callbacks explicitly to avoid compilation errors on Windows.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,472,2019-05-21T09:28:59Z,2019-05-22T13:11:52Z,2019-05-23T15:33:45Z,MERGED,True,18,18,21,https://github.com/ilammy,Move SOTER_PRIVATE_API declarations to headers,2,['core'],https://github.com/cossacklabs/themis/pull/472,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/472,"Microsoft Visual Studio C Compiler cannot handle attributes added to definitions of functions, it expects __declspecs to be located at declaration sites. Move all macros to headers in order to avoid linkage errors on Windows.","Microsoft Visual Studio C Compiler cannot handle attributes added to definitions of functions, it expects __declspecs to be located at declaration sites. Move all macros to headers in order to avoid linkage errors on Windows.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,473,2019-05-21T09:43:49Z,2019-05-21T10:14:19Z,2019-05-21T10:14:29Z,MERGED,True,1,0,1,https://github.com/ilammy,Update Emscripten SDK cleanly,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/473,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/473,"Our CI builds started failing recently.
For some reason building with Emscripten changes some files in the SDK which leads to errors when trying to update with git pull:
Updating 4eeff61..751355a
error: Your local changes to the following files would be overwritten by merge:
        binaryen-tags.txt
        emscripten-tags.txt
        upstream/lkgr.json

Please, commit your changes or stash them before you can merge.
Aborting

Add a git reset before doing the pull to discard any local changes and ensure a clean merge with the updated version.","Our CI builds started failing recently.
For some reason building with Emscripten changes some files in the SDK which leads to errors when trying to update with git pull:
Updating 4eeff61..751355a
error: Your local changes to the following files would be overwritten by merge:
        binaryen-tags.txt
        emscripten-tags.txt
        upstream/lkgr.json

Please, commit your changes or stash them before you can merge.
Aborting

Add a git reset before doing the pull to discard any local changes and ensure a clean merge with the updated version.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,473,2019-05-21T09:43:49Z,2019-05-21T10:14:19Z,2019-05-21T10:14:29Z,MERGED,True,1,0,1,https://github.com/ilammy,Update Emscripten SDK cleanly,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/473,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/473#issuecomment-494330061,"Our CI builds started failing recently.
For some reason building with Emscripten changes some files in the SDK which leads to errors when trying to update with git pull:
Updating 4eeff61..751355a
error: Your local changes to the following files would be overwritten by merge:
        binaryen-tags.txt
        emscripten-tags.txt
        upstream/lkgr.json

Please, commit your changes or stash them before you can merge.
Aborting

Add a git reset before doing the pull to discard any local changes and ensure a clean merge with the updated version.",Android builds started failing recently as well. We'll address that in a separate PR.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,474,2019-05-22T10:00:10Z,2019-05-22T13:15:52Z,2019-05-23T15:33:44Z,MERGED,True,55,0,2,https://github.com/ilammy,NSIS installer for Windows,3,['O-Windows :desktop_computer:'],https://github.com/cossacklabs/themis/pull/474,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/474,"Having MSYS2 packages is nice, but there are those weird Windows devs who insist on building their software using native Windows tools like Microsoft Visual Studio instead of building everything in MSYS. There are also other environments like Node.js which insist on using Visual Studio toolchain on Windows. Let's provide them with a way to install Themis into system so that they can build their software the way they want to.
NullSoft Scriptable Install System is a venerable and straightforward installation toolkit. Moreover, it's available in MSYS so it's very easy to integrate into our build system. Provide an initial script for building an installer and a makefile target nsis_installer which produces InstallThemis.exe in the build directory. Piggyback on the make install target to figure out what files need to be distributed. Include our licensing information as well. Also include MSYS2 runtime libraries which are necessary to use Themis outside of MSYS2.
We get these cool Win95-style installers as a reward:","Having MSYS2 packages is nice, but there are those weird Windows devs who insist on building their software using native Windows tools like Microsoft Visual Studio instead of building everything in MSYS. There are also other environments like Node.js which insist on using Visual Studio toolchain on Windows. Let's provide them with a way to install Themis into system so that they can build their software the way they want to.
NullSoft Scriptable Install System is a venerable and straightforward installation toolkit. Moreover, it's available in MSYS so it's very easy to integrate into our build system. Provide an initial script for building an installer and a makefile target nsis_installer which produces InstallThemis.exe in the build directory. Piggyback on the make install target to figure out what files need to be distributed. Include our licensing information as well. Also include MSYS2 runtime libraries which are necessary to use Themis outside of MSYS2.
We get these cool Win95-style installers as a reward:",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,475,2019-05-22T10:01:37Z,2019-05-22T13:16:08Z,2019-09-27T13:31:10Z,MERGED,True,41,4,1,https://github.com/ilammy,Windows support in JsThemis,1,"['O-Windows :desktop_computer:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/475,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/475,"Update binding.gyp file for Windows. This allows users to install JsThemis on Windows provided that Themis Core is installed under C:\Program Files\Themis. We expect MSYS2-based build of Themis Core to be installed there and use its naming convention and directory layout. Unfortunately, Windows does not have a notion of standard directories for development libraries and headers so we have to tell MSBuild exactly where to look for the library.","Update binding.gyp file for Windows. This allows users to install JsThemis on Windows provided that Themis Core is installed under C:\Program Files\Themis. We expect MSYS2-based build of Themis Core to be installed there and use its naming convention and directory layout. Unfortunately, Windows does not have a notion of standard directories for development libraries and headers so we have to tell MSBuild exactly where to look for the library.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,476,2019-05-24T14:57:52Z,2019-09-09T17:37:11Z,2020-06-08T16:18:14Z,CLOSED,False,2,2,1,https://github.com/ilammy,Update Android image API 22 → 24,1,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/476,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/476,"Let's try fixing the Android build which turned red recently.
The image distributed by SDK Manager for API 22 seems to be broken and results into issues like this during emulator startup:
emulator: ERROR: This AVD's configuration is missing a kernel file! Please ensure the file ""kernel-ranchu"" is in the same location as your system image.

It seems that the distributed kernel file is named ""kernel-qemu"" instead of ""kernel-ranchu"". However, renaming the kernel file still produces issues like this:
emulator: ERROR: New emulator backend requires minimum kernel version 3.10+ (currently got lower)
Please make sure you've got updated system images and do not force the specific kernel image together with the engine version

Given that Android Lollipop is no longer supported by Google (support ended in March 2018), let's update to Android Nougat emulator with API level 24.","Let's try fixing the Android build which turned red recently.
The image distributed by SDK Manager for API 22 seems to be broken and results into issues like this during emulator startup:
emulator: ERROR: This AVD's configuration is missing a kernel file! Please ensure the file ""kernel-ranchu"" is in the same location as your system image.

It seems that the distributed kernel file is named ""kernel-qemu"" instead of ""kernel-ranchu"". However, renaming the kernel file still produces issues like this:
emulator: ERROR: New emulator backend requires minimum kernel version 3.10+ (currently got lower)
Please make sure you've got updated system images and do not force the specific kernel image together with the engine version

Given that Android Lollipop is no longer supported by Google (support ended in March 2018), let's update to Android Nougat emulator with API level 24.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,476,2019-05-24T14:57:52Z,2019-09-09T17:37:11Z,2020-06-08T16:18:14Z,CLOSED,False,2,2,1,https://github.com/ilammy,Update Android image API 22 → 24,1,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/476,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/476#issuecomment-495667842,"Let's try fixing the Android build which turned red recently.
The image distributed by SDK Manager for API 22 seems to be broken and results into issues like this during emulator startup:
emulator: ERROR: This AVD's configuration is missing a kernel file! Please ensure the file ""kernel-ranchu"" is in the same location as your system image.

It seems that the distributed kernel file is named ""kernel-qemu"" instead of ""kernel-ranchu"". However, renaming the kernel file still produces issues like this:
emulator: ERROR: New emulator backend requires minimum kernel version 3.10+ (currently got lower)
Please make sure you've got updated system images and do not force the specific kernel image together with the engine version

Given that Android Lollipop is no longer supported by Google (support ended in March 2018), let's update to Android Nougat emulator with API level 24.",Hopefully it will help 🤞,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,476,2019-05-24T14:57:52Z,2019-09-09T17:37:11Z,2020-06-08T16:18:14Z,CLOSED,False,2,2,1,https://github.com/ilammy,Update Android image API 22 → 24,1,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/476,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/476#issuecomment-495689902,"Let's try fixing the Android build which turned red recently.
The image distributed by SDK Manager for API 22 seems to be broken and results into issues like this during emulator startup:
emulator: ERROR: This AVD's configuration is missing a kernel file! Please ensure the file ""kernel-ranchu"" is in the same location as your system image.

It seems that the distributed kernel file is named ""kernel-qemu"" instead of ""kernel-ranchu"". However, renaming the kernel file still produces issues like this:
emulator: ERROR: New emulator backend requires minimum kernel version 3.10+ (currently got lower)
Please make sure you've got updated system images and do not force the specific kernel image together with the engine version

Given that Android Lollipop is no longer supported by Google (support ended in March 2018), let's update to Android Nougat emulator with API level 24.","Hopefully it will help 🤞

Well, it does help with the emulator actually starting up instead of aborting early. However Android system does not seem to boot up properly (on CircleCI and in my local Docker environment alike). It seems that this issue will require more black magic than usual.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,476,2019-05-24T14:57:52Z,2019-09-09T17:37:11Z,2020-06-08T16:18:14Z,CLOSED,False,2,2,1,https://github.com/ilammy,Update Android image API 22 → 24,1,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/476,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/476#issuecomment-496572457,"Let's try fixing the Android build which turned red recently.
The image distributed by SDK Manager for API 22 seems to be broken and results into issues like this during emulator startup:
emulator: ERROR: This AVD's configuration is missing a kernel file! Please ensure the file ""kernel-ranchu"" is in the same location as your system image.

It seems that the distributed kernel file is named ""kernel-qemu"" instead of ""kernel-ranchu"". However, renaming the kernel file still produces issues like this:
emulator: ERROR: New emulator backend requires minimum kernel version 3.10+ (currently got lower)
Please make sure you've got updated system images and do not force the specific kernel image together with the engine version

Given that Android Lollipop is no longer supported by Google (support ended in March 2018), let's update to Android Nougat emulator with API level 24.","Well, it seems that latest emulators have received a big bunch of new bloat, so they take ages to boot up. I've been waiting for mine for 40 minutes and it still is not ready (CircleCI has a 10-minute limit).
I have also tried images for other API levels (both higher and lower) but with the same result: they do not seem to boot up in timely manner. I wonder whether this is some new issue, or just me doing it wrong.
CircleCI recommends using Firebase Test Lab for Android. Maybe that would be worth exploring as an alternative.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,476,2019-05-24T14:57:52Z,2019-09-09T17:37:11Z,2020-06-08T16:18:14Z,CLOSED,False,2,2,1,https://github.com/ilammy,Update Android image API 22 → 24,1,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/476,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/476#issuecomment-529587577,"Let's try fixing the Android build which turned red recently.
The image distributed by SDK Manager for API 22 seems to be broken and results into issues like this during emulator startup:
emulator: ERROR: This AVD's configuration is missing a kernel file! Please ensure the file ""kernel-ranchu"" is in the same location as your system image.

It seems that the distributed kernel file is named ""kernel-qemu"" instead of ""kernel-ranchu"". However, renaming the kernel file still produces issues like this:
emulator: ERROR: New emulator backend requires minimum kernel version 3.10+ (currently got lower)
Please make sure you've got updated system images and do not force the specific kernel image together with the engine version

Given that Android Lollipop is no longer supported by Google (support ended in March 2018), let's update to Android Nougat emulator with API level 24.","Well, this approach obviously does not work right off the bat, so let's close this PR. I'm currently exploring another CI service for mobile platforms. Hopefully, it will support Android better.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,482,2019-06-19T11:16:02Z,2019-06-19T12:18:11Z,2019-07-04T13:47:10Z,MERGED,True,8,8,2,https://github.com/ilammy,Update WasmThemis dependencies,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/482,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/482,"Upgrade mocha dependency to pull in a newer js-yaml version that fixes a possible code injection vulnerability.
WasmThemis is not public yet and this is a development dependency, so there is no need for security advisories.","Upgrade mocha dependency to pull in a newer js-yaml version that fixes a possible code injection vulnerability.
WasmThemis is not public yet and this is a development dependency, so there is no need for security advisories.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,482,2019-06-19T11:16:02Z,2019-06-19T12:18:11Z,2019-07-04T13:47:10Z,MERGED,True,8,8,2,https://github.com/ilammy,Update WasmThemis dependencies,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/482,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/482#issuecomment-503536306,"Upgrade mocha dependency to pull in a newer js-yaml version that fixes a possible code injection vulnerability.
WasmThemis is not public yet and this is a development dependency, so there is no need for security advisories.",Android build is still broken (see #476 for attempts at fixing that). I'm merging this since Wasm should not affect and should not be affected by Android builds.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,483,2019-06-25T14:40:06Z,2019-06-25T15:41:59Z,2019-06-25T16:45:06Z,MERGED,True,13,5,3,https://github.com/vixentael,Themis Carthage: fix linking issue with OpenSSL 1.0.2.18,3,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/483,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/483,"Hotfix.
The problem
Recently https://github.com/krzyzanowskim/OpenSSL pushed 1.0.2.18 tag with linking errors (krzyzanowskim/OpenSSL#63). This change breaks Themis Carthage and projects that depend on it.
carthage bootstrap themis --platform iOS

...

In file included from <redacted>/iOS-Carthage/Carthage/Checkouts/themis/Carthage/Build/iOS/openssl.framework/Headers/e_os2.h:56:
<redacted>/iOS-Carthage/Carthage/Checkouts/themis/Carthage/Build/iOS/openssl.framework/Headers/opensslconf.h:8:11: fatal error: 'openssl/opensslconf-armv7.h' file not found
# include <openssl/opensslconf-armv7.h>
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~

** ARCHIVE FAILED **


Using 1.0.2.17 from Cartfile is impossible
Unfortunately OpenSSL versioning doesn't use semver, but stick to 4-parts versions. Carthage doesn't support 4-parts versions, so we can't just use == 1.0.2.17 in Cartfile (Parse error: found more than 3 dot-separated components in version in line: github ""krzyzanowskim/OpenSSL"" == 1.0.2.17).
Hotfix solution
I re-linked Themis Carthage to the hash of commit that corresponds to 1.0.2.17 tag.
I will put 0.11.2 tag on stable branch after merging.
CocoaPods
This doesn't affect CocoaPods, because latest version available there is 1.0.2.16.","Hotfix.
The problem
Recently https://github.com/krzyzanowskim/OpenSSL pushed 1.0.2.18 tag with linking errors (krzyzanowskim/OpenSSL#63). This change breaks Themis Carthage and projects that depend on it.
carthage bootstrap themis --platform iOS

...

In file included from <redacted>/iOS-Carthage/Carthage/Checkouts/themis/Carthage/Build/iOS/openssl.framework/Headers/e_os2.h:56:
<redacted>/iOS-Carthage/Carthage/Checkouts/themis/Carthage/Build/iOS/openssl.framework/Headers/opensslconf.h:8:11: fatal error: 'openssl/opensslconf-armv7.h' file not found
# include <openssl/opensslconf-armv7.h>
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~

** ARCHIVE FAILED **


Using 1.0.2.17 from Cartfile is impossible
Unfortunately OpenSSL versioning doesn't use semver, but stick to 4-parts versions. Carthage doesn't support 4-parts versions, so we can't just use == 1.0.2.17 in Cartfile (Parse error: found more than 3 dot-separated components in version in line: github ""krzyzanowskim/OpenSSL"" == 1.0.2.17).
Hotfix solution
I re-linked Themis Carthage to the hash of commit that corresponds to 1.0.2.17 tag.
I will put 0.11.2 tag on stable branch after merging.
CocoaPods
This doesn't affect CocoaPods, because latest version available there is 1.0.2.16.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,483,2019-06-25T14:40:06Z,2019-06-25T15:41:59Z,2019-06-25T16:45:06Z,MERGED,True,13,5,3,https://github.com/vixentael,Themis Carthage: fix linking issue with OpenSSL 1.0.2.18,3,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/483,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/483#issuecomment-505492167,"Hotfix.
The problem
Recently https://github.com/krzyzanowskim/OpenSSL pushed 1.0.2.18 tag with linking errors (krzyzanowskim/OpenSSL#63). This change breaks Themis Carthage and projects that depend on it.
carthage bootstrap themis --platform iOS

...

In file included from <redacted>/iOS-Carthage/Carthage/Checkouts/themis/Carthage/Build/iOS/openssl.framework/Headers/e_os2.h:56:
<redacted>/iOS-Carthage/Carthage/Checkouts/themis/Carthage/Build/iOS/openssl.framework/Headers/opensslconf.h:8:11: fatal error: 'openssl/opensslconf-armv7.h' file not found
# include <openssl/opensslconf-armv7.h>
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~

** ARCHIVE FAILED **


Using 1.0.2.17 from Cartfile is impossible
Unfortunately OpenSSL versioning doesn't use semver, but stick to 4-parts versions. Carthage doesn't support 4-parts versions, so we can't just use == 1.0.2.17 in Cartfile (Parse error: found more than 3 dot-separated components in version in line: github ""krzyzanowskim/OpenSSL"" == 1.0.2.17).
Hotfix solution
I re-linked Themis Carthage to the hash of commit that corresponds to 1.0.2.17 tag.
I will put 0.11.2 tag on stable branch after merging.
CocoaPods
This doesn't affect CocoaPods, because latest version available there is 1.0.2.16.","Bitrise build will fail until I put 0.11.2 Themis tag.
CircleCI android build still fails (known issue)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,483,2019-06-25T14:40:06Z,2019-06-25T15:41:59Z,2019-06-25T16:45:06Z,MERGED,True,13,5,3,https://github.com/vixentael,Themis Carthage: fix linking issue with OpenSSL 1.0.2.18,3,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/483,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/483#issuecomment-505496182,"Hotfix.
The problem
Recently https://github.com/krzyzanowskim/OpenSSL pushed 1.0.2.18 tag with linking errors (krzyzanowskim/OpenSSL#63). This change breaks Themis Carthage and projects that depend on it.
carthage bootstrap themis --platform iOS

...

In file included from <redacted>/iOS-Carthage/Carthage/Checkouts/themis/Carthage/Build/iOS/openssl.framework/Headers/e_os2.h:56:
<redacted>/iOS-Carthage/Carthage/Checkouts/themis/Carthage/Build/iOS/openssl.framework/Headers/opensslconf.h:8:11: fatal error: 'openssl/opensslconf-armv7.h' file not found
# include <openssl/opensslconf-armv7.h>
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~

** ARCHIVE FAILED **


Using 1.0.2.17 from Cartfile is impossible
Unfortunately OpenSSL versioning doesn't use semver, but stick to 4-parts versions. Carthage doesn't support 4-parts versions, so we can't just use == 1.0.2.17 in Cartfile (Parse error: found more than 3 dot-separated components in version in line: github ""krzyzanowskim/OpenSSL"" == 1.0.2.17).
Hotfix solution
I re-linked Themis Carthage to the hash of commit that corresponds to 1.0.2.17 tag.
I will put 0.11.2 tag on stable branch after merging.
CocoaPods
This doesn't affect CocoaPods, because latest version available there is 1.0.2.16.","Also, I've updated circle.yml file to fix caching of submodules on CircleCI.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,483,2019-06-25T14:40:06Z,2019-06-25T15:41:59Z,2019-06-25T16:45:06Z,MERGED,True,13,5,3,https://github.com/vixentael,Themis Carthage: fix linking issue with OpenSSL 1.0.2.18,3,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/483,https://github.com/krzyzanowskim,4,https://github.com/cossacklabs/themis/pull/483#issuecomment-505527016,"Hotfix.
The problem
Recently https://github.com/krzyzanowskim/OpenSSL pushed 1.0.2.18 tag with linking errors (krzyzanowskim/OpenSSL#63). This change breaks Themis Carthage and projects that depend on it.
carthage bootstrap themis --platform iOS

...

In file included from <redacted>/iOS-Carthage/Carthage/Checkouts/themis/Carthage/Build/iOS/openssl.framework/Headers/e_os2.h:56:
<redacted>/iOS-Carthage/Carthage/Checkouts/themis/Carthage/Build/iOS/openssl.framework/Headers/opensslconf.h:8:11: fatal error: 'openssl/opensslconf-armv7.h' file not found
# include <openssl/opensslconf-armv7.h>
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~

** ARCHIVE FAILED **


Using 1.0.2.17 from Cartfile is impossible
Unfortunately OpenSSL versioning doesn't use semver, but stick to 4-parts versions. Carthage doesn't support 4-parts versions, so we can't just use == 1.0.2.17 in Cartfile (Parse error: found more than 3 dot-separated components in version in line: github ""krzyzanowskim/OpenSSL"" == 1.0.2.17).
Hotfix solution
I re-linked Themis Carthage to the hash of commit that corresponds to 1.0.2.17 tag.
I will put 0.11.2 tag on stable branch after merging.
CocoaPods
This doesn't affect CocoaPods, because latest version available there is 1.0.2.16.",krzyzanowskim/OpenSSL#63 (comment),True,{'HOORAY': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,484,2019-06-25T17:11:27Z,2019-06-26T11:50:38Z,2019-06-26T11:50:48Z,MERGED,True,22,14,7,https://github.com/vixentael,"Merging Themis Carthage changes, and minor docs update to master",2,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/484,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/484,"Cherry pick changes from #483 (re-link Themis Carthage to 1.0.2.17 OpenSSL), and add some minor docs updates.
Regarding linkage – on next release I plan to switch Themis Carthage back to ~> 1.0.2 notation.","Cherry pick changes from #483 (re-link Themis Carthage to 1.0.2.17 OpenSSL), and add some minor docs updates.
Regarding linkage – on next release I plan to switch Themis Carthage back to ~> 1.0.2 notation.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,485,2019-07-03T07:15:25Z,2019-07-04T13:35:36Z,2019-07-04T13:45:26Z,MERGED,True,29,16,3,https://github.com/ilammy,Improve error handling in soter_rand(),2,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/485,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/485,"First of all, RAND_bytes() may return -1 if the backend does not support cryptographically strong pseudo-random generators. Currently we treat this as success which is not okay. Report the error properly.
There's also a minor API mismatch between OpenSSL and BoringSSL. OpenSSL still mostly uses int for buffer lengths while BoringSSL has updated its API to use size_t. We need to check for possible overflow when using OpenSSL, and we do not need to cast anything with BoringSSL.
Finally, while we're here, improve the documentation to clarify when SOTER_FAIL may be returned and what it means. Other error codes are more or less self-explanatory so we don't mention them.
Closes #477","First of all, RAND_bytes() may return -1 if the backend does not support cryptographically strong pseudo-random generators. Currently we treat this as success which is not okay. Report the error properly.
There's also a minor API mismatch between OpenSSL and BoringSSL. OpenSSL still mostly uses int for buffer lengths while BoringSSL has updated its API to use size_t. We need to check for possible overflow when using OpenSSL, and we do not need to cast anything with BoringSSL.
Finally, while we're here, improve the documentation to clarify when SOTER_FAIL may be returned and what it means. Other error codes are more or less self-explanatory so we don't mention them.
Closes #477",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,486,2019-07-03T11:22:17Z,2019-07-04T14:06:57Z,2019-07-04T14:07:20Z,MERGED,True,353,100,13,https://github.com/ilammy,Improve key validity checks,10,['core'],https://github.com/cossacklabs/themis/pull/486,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/486,"I only wanted to add some extra length checks to themis_is_valid_asym_key() suggested by @veorq, but this delivered way more 🔥fun🔥 that expected...
The issue with themis_is_valid_asym_key() is that it effectively validates that the provided key buffer is a valid Soter container with expected size. This includes containers that do not actually contain keys (e.g., empty containers, or unrelated Secure Messages). We would like to filter these out earlier, before we actually try to use them as keys. For this we ask Soter to provide us with expected length of the key buffer and compare that against the actual length. (We do not check the content, though. It's not that trivial to do.)
...Or that's what I planned to do. Actually implementing these checks uncovered a couple of nasty idiosyncrasies with the way we export and store keys. You can read the details in commit messages. The lesson remains the same: do not use C structs for data serialization, it's a minefield.
Furthermore, this uncovered a (minor) bug in key exporting implementation where we used incorrect buffer size for private keys, padding them with an additional byte. It kinda worked before and nobody noticed because that's one byte more, not less, and we allowed the buffers to be bigger than they should be.
Strictly speaking, a fix for this bug breaks forward compatibility of previously generated keys because now we enforce length checks and do not allow any extra garbage bytes. This breakage is unacceptable so the code now contains a compatibility branch which will let such keys through.
Alternatively, we may simply accept the mistake and continue using incorrect size of buffer for exported private keys, with an extra byte in the end. Thoughts?
Pre-merge check list:

 verify the build on internal BuildBot

 integration build — ongoing, with 'usual' failures
 crossover build — completed, seems to be okay (yay!)


 sign-off by @vixentael on breaking changes","I only wanted to add some extra length checks to themis_is_valid_asym_key() suggested by @veorq, but this delivered way more 🔥fun🔥 that expected...
The issue with themis_is_valid_asym_key() is that it effectively validates that the provided key buffer is a valid Soter container with expected size. This includes containers that do not actually contain keys (e.g., empty containers, or unrelated Secure Messages). We would like to filter these out earlier, before we actually try to use them as keys. For this we ask Soter to provide us with expected length of the key buffer and compare that against the actual length. (We do not check the content, though. It's not that trivial to do.)
...Or that's what I planned to do. Actually implementing these checks uncovered a couple of nasty idiosyncrasies with the way we export and store keys. You can read the details in commit messages. The lesson remains the same: do not use C structs for data serialization, it's a minefield.
Furthermore, this uncovered a (minor) bug in key exporting implementation where we used incorrect buffer size for private keys, padding them with an additional byte. It kinda worked before and nobody noticed because that's one byte more, not less, and we allowed the buffers to be bigger than they should be.
Strictly speaking, a fix for this bug breaks forward compatibility of previously generated keys because now we enforce length checks and do not allow any extra garbage bytes. This breakage is unacceptable so the code now contains a compatibility branch which will let such keys through.
Alternatively, we may simply accept the mistake and continue using incorrect size of buffer for exported private keys, with an extra byte in the end. Thoughts?
Pre-merge check list:

 verify the build on internal BuildBot

 integration build — ongoing, with 'usual' failures
 crossover build — completed, seems to be okay (yay!)


 sign-off by @vixentael on breaking changes",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,486,2019-07-03T11:22:17Z,2019-07-04T14:06:57Z,2019-07-04T14:07:20Z,MERGED,True,353,100,13,https://github.com/ilammy,Improve key validity checks,10,['core'],https://github.com/cossacklabs/themis/pull/486,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/486#issuecomment-508110438,"I only wanted to add some extra length checks to themis_is_valid_asym_key() suggested by @veorq, but this delivered way more 🔥fun🔥 that expected...
The issue with themis_is_valid_asym_key() is that it effectively validates that the provided key buffer is a valid Soter container with expected size. This includes containers that do not actually contain keys (e.g., empty containers, or unrelated Secure Messages). We would like to filter these out earlier, before we actually try to use them as keys. For this we ask Soter to provide us with expected length of the key buffer and compare that against the actual length. (We do not check the content, though. It's not that trivial to do.)
...Or that's what I planned to do. Actually implementing these checks uncovered a couple of nasty idiosyncrasies with the way we export and store keys. You can read the details in commit messages. The lesson remains the same: do not use C structs for data serialization, it's a minefield.
Furthermore, this uncovered a (minor) bug in key exporting implementation where we used incorrect buffer size for private keys, padding them with an additional byte. It kinda worked before and nobody noticed because that's one byte more, not less, and we allowed the buffers to be bigger than they should be.
Strictly speaking, a fix for this bug breaks forward compatibility of previously generated keys because now we enforce length checks and do not allow any extra garbage bytes. This breakage is unacceptable so the code now contains a compatibility branch which will let such keys through.
Alternatively, we may simply accept the mistake and continue using incorrect size of buffer for exported private keys, with an extra byte in the end. Thoughts?
Pre-merge check list:

 verify the build on internal BuildBot

 integration build — ongoing, with 'usual' failures
 crossover build — completed, seems to be okay (yay!)


 sign-off by @vixentael on breaking changes",imho as temporary decision we can check that buffer has >= of size what we need and show deprecation warnings that we will change these checks to more strict in a future that may be break someone's code/keys,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,486,2019-07-03T11:22:17Z,2019-07-04T14:06:57Z,2019-07-04T14:07:20Z,MERGED,True,353,100,13,https://github.com/ilammy,Improve key validity checks,10,['core'],https://github.com/cossacklabs/themis/pull/486,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/486#issuecomment-508115518,"I only wanted to add some extra length checks to themis_is_valid_asym_key() suggested by @veorq, but this delivered way more 🔥fun🔥 that expected...
The issue with themis_is_valid_asym_key() is that it effectively validates that the provided key buffer is a valid Soter container with expected size. This includes containers that do not actually contain keys (e.g., empty containers, or unrelated Secure Messages). We would like to filter these out earlier, before we actually try to use them as keys. For this we ask Soter to provide us with expected length of the key buffer and compare that against the actual length. (We do not check the content, though. It's not that trivial to do.)
...Or that's what I planned to do. Actually implementing these checks uncovered a couple of nasty idiosyncrasies with the way we export and store keys. You can read the details in commit messages. The lesson remains the same: do not use C structs for data serialization, it's a minefield.
Furthermore, this uncovered a (minor) bug in key exporting implementation where we used incorrect buffer size for private keys, padding them with an additional byte. It kinda worked before and nobody noticed because that's one byte more, not less, and we allowed the buffers to be bigger than they should be.
Strictly speaking, a fix for this bug breaks forward compatibility of previously generated keys because now we enforce length checks and do not allow any extra garbage bytes. This breakage is unacceptable so the code now contains a compatibility branch which will let such keys through.
Alternatively, we may simply accept the mistake and continue using incorrect size of buffer for exported private keys, with an extra byte in the end. Thoughts?
Pre-merge check list:

 verify the build on internal BuildBot

 integration build — ongoing, with 'usual' failures
 crossover build — completed, seems to be okay (yay!)


 sign-off by @vixentael on breaking changes","Alternatively, we may simply accept the mistake and continue using incorrect size of buffer for exported private keys, with an extra byte in the end.

I think this approach makes more sense. The key structure is defined by Themis, these keys can't be used anywhere else. I don't see a huge problem if we continue adding extra byte to the key length (maybe better fill it with 0 rather than garbage?).
I see HUGE backwards compatibility problem – applications using old Themis won't be able to accept shorter keys generated by this version. Some of our users won't be able to update their Themis installations all over their network. That's why my vote is ""let's have extra byte"".",True,{'THUMBS_UP': ['https://github.com/Lagovas']}
cossacklabs/themis,https://github.com/cossacklabs/themis,486,2019-07-03T11:22:17Z,2019-07-04T14:06:57Z,2019-07-04T14:07:20Z,MERGED,True,353,100,13,https://github.com/ilammy,Improve key validity checks,10,['core'],https://github.com/cossacklabs/themis/pull/486,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/486#issuecomment-508131249,"I only wanted to add some extra length checks to themis_is_valid_asym_key() suggested by @veorq, but this delivered way more 🔥fun🔥 that expected...
The issue with themis_is_valid_asym_key() is that it effectively validates that the provided key buffer is a valid Soter container with expected size. This includes containers that do not actually contain keys (e.g., empty containers, or unrelated Secure Messages). We would like to filter these out earlier, before we actually try to use them as keys. For this we ask Soter to provide us with expected length of the key buffer and compare that against the actual length. (We do not check the content, though. It's not that trivial to do.)
...Or that's what I planned to do. Actually implementing these checks uncovered a couple of nasty idiosyncrasies with the way we export and store keys. You can read the details in commit messages. The lesson remains the same: do not use C structs for data serialization, it's a minefield.
Furthermore, this uncovered a (minor) bug in key exporting implementation where we used incorrect buffer size for private keys, padding them with an additional byte. It kinda worked before and nobody noticed because that's one byte more, not less, and we allowed the buffers to be bigger than they should be.
Strictly speaking, a fix for this bug breaks forward compatibility of previously generated keys because now we enforce length checks and do not allow any extra garbage bytes. This breakage is unacceptable so the code now contains a compatibility branch which will let such keys through.
Alternatively, we may simply accept the mistake and continue using incorrect size of buffer for exported private keys, with an extra byte in the end. Thoughts?
Pre-merge check list:

 verify the build on internal BuildBot

 integration build — ongoing, with 'usual' failures
 crossover build — completed, seems to be okay (yay!)


 sign-off by @vixentael on breaking changes","I see HUGE backwards compatibility problem – applications using old Themis won't be able to accept shorter keys generated by this version.

I've just checked with Secure Message: shorter keys generated by the newer version work fine with current stable version (0.11). Checking Secure Session is a bit trickier, but I believe that it should be fine too. I'll check it later.
I'd imagine more issues with the newer version rejecting longer keys generated by the older ones. We can work around that by adding those special cases.
Anyway... I'm fine with revering that fix, updating the length checks to take this quirk into account. I'd also add some comments so that the next developer wandering into this code would not attempt to 'fix' any 'obvious bugs'. And yeah, probably add some memset() there to initialize the key buffer.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,486,2019-07-03T11:22:17Z,2019-07-04T14:06:57Z,2019-07-04T14:07:20Z,MERGED,True,353,100,13,https://github.com/ilammy,Improve key validity checks,10,['core'],https://github.com/cossacklabs/themis/pull/486,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/486#issuecomment-508135487,"I only wanted to add some extra length checks to themis_is_valid_asym_key() suggested by @veorq, but this delivered way more 🔥fun🔥 that expected...
The issue with themis_is_valid_asym_key() is that it effectively validates that the provided key buffer is a valid Soter container with expected size. This includes containers that do not actually contain keys (e.g., empty containers, or unrelated Secure Messages). We would like to filter these out earlier, before we actually try to use them as keys. For this we ask Soter to provide us with expected length of the key buffer and compare that against the actual length. (We do not check the content, though. It's not that trivial to do.)
...Or that's what I planned to do. Actually implementing these checks uncovered a couple of nasty idiosyncrasies with the way we export and store keys. You can read the details in commit messages. The lesson remains the same: do not use C structs for data serialization, it's a minefield.
Furthermore, this uncovered a (minor) bug in key exporting implementation where we used incorrect buffer size for private keys, padding them with an additional byte. It kinda worked before and nobody noticed because that's one byte more, not less, and we allowed the buffers to be bigger than they should be.
Strictly speaking, a fix for this bug breaks forward compatibility of previously generated keys because now we enforce length checks and do not allow any extra garbage bytes. This breakage is unacceptable so the code now contains a compatibility branch which will let such keys through.
Alternatively, we may simply accept the mistake and continue using incorrect size of buffer for exported private keys, with an extra byte in the end. Thoughts?
Pre-merge check list:

 verify the build on internal BuildBot

 integration build — ongoing, with 'usual' failures
 crossover build — completed, seems to be okay (yay!)


 sign-off by @vixentael on breaking changes","revering that fix, updating the length checks to take this quirk into account. I'd also add some comments so that the next developer wandering into this code would not attempt to 'fix' any 'obvious bugs'. And yeah, probably add some memset() there to initialize the key buffer.

my vote is for this option, because we can't predict (and probably can't cover with out test suits) all possible incompatibilities with key lengths between multiple Themis versions",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,486,2019-07-03T11:22:17Z,2019-07-04T14:06:57Z,2019-07-04T14:07:20Z,MERGED,True,353,100,13,https://github.com/ilammy,Improve key validity checks,10,['core'],https://github.com/cossacklabs/themis/pull/486,https://github.com/veorq,6,https://github.com/cossacklabs/themis/pull/486#issuecomment-508384788,"I only wanted to add some extra length checks to themis_is_valid_asym_key() suggested by @veorq, but this delivered way more 🔥fun🔥 that expected...
The issue with themis_is_valid_asym_key() is that it effectively validates that the provided key buffer is a valid Soter container with expected size. This includes containers that do not actually contain keys (e.g., empty containers, or unrelated Secure Messages). We would like to filter these out earlier, before we actually try to use them as keys. For this we ask Soter to provide us with expected length of the key buffer and compare that against the actual length. (We do not check the content, though. It's not that trivial to do.)
...Or that's what I planned to do. Actually implementing these checks uncovered a couple of nasty idiosyncrasies with the way we export and store keys. You can read the details in commit messages. The lesson remains the same: do not use C structs for data serialization, it's a minefield.
Furthermore, this uncovered a (minor) bug in key exporting implementation where we used incorrect buffer size for private keys, padding them with an additional byte. It kinda worked before and nobody noticed because that's one byte more, not less, and we allowed the buffers to be bigger than they should be.
Strictly speaking, a fix for this bug breaks forward compatibility of previously generated keys because now we enforce length checks and do not allow any extra garbage bytes. This breakage is unacceptable so the code now contains a compatibility branch which will let such keys through.
Alternatively, we may simply accept the mistake and continue using incorrect size of buffer for exported private keys, with an extra byte in the end. Thoughts?
Pre-merge check list:

 verify the build on internal BuildBot

 integration build — ongoing, with 'usual' failures
 crossover build — completed, seems to be okay (yay!)


 sign-off by @vixentael on breaking changes","Hey, that's interesting :)
What about doing other sanity checks than the key length? Not sure what is already done elsewhere, but you typically want to avoid all-zero keys, scalars that are smaller than the group order, small RSA private exponents, etc. You probably don't need to check all the weak-key properties but maybe the easy, efficient ones would be nice to have.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,486,2019-07-03T11:22:17Z,2019-07-04T14:06:57Z,2019-07-04T14:07:20Z,MERGED,True,353,100,13,https://github.com/ilammy,Improve key validity checks,10,['core'],https://github.com/cossacklabs/themis/pull/486,https://github.com/Lagovas,7,https://github.com/cossacklabs/themis/pull/486#issuecomment-508405024,"I only wanted to add some extra length checks to themis_is_valid_asym_key() suggested by @veorq, but this delivered way more 🔥fun🔥 that expected...
The issue with themis_is_valid_asym_key() is that it effectively validates that the provided key buffer is a valid Soter container with expected size. This includes containers that do not actually contain keys (e.g., empty containers, or unrelated Secure Messages). We would like to filter these out earlier, before we actually try to use them as keys. For this we ask Soter to provide us with expected length of the key buffer and compare that against the actual length. (We do not check the content, though. It's not that trivial to do.)
...Or that's what I planned to do. Actually implementing these checks uncovered a couple of nasty idiosyncrasies with the way we export and store keys. You can read the details in commit messages. The lesson remains the same: do not use C structs for data serialization, it's a minefield.
Furthermore, this uncovered a (minor) bug in key exporting implementation where we used incorrect buffer size for private keys, padding them with an additional byte. It kinda worked before and nobody noticed because that's one byte more, not less, and we allowed the buffers to be bigger than they should be.
Strictly speaking, a fix for this bug breaks forward compatibility of previously generated keys because now we enforce length checks and do not allow any extra garbage bytes. This breakage is unacceptable so the code now contains a compatibility branch which will let such keys through.
Alternatively, we may simply accept the mistake and continue using incorrect size of buffer for exported private keys, with an extra byte in the end. Thoughts?
Pre-merge check list:

 verify the build on internal BuildBot

 integration build — ongoing, with 'usual' failures
 crossover build — completed, seems to be okay (yay!)


 sign-off by @vixentael on breaking changes","@veorq
here we validate our structs and expect that keys were created with our API for key generation which delegates it to the chosen crypto backend (openssl, boringssl, etc). if some user will generate keys by himself and wrap keys with our structs (we don't provide API to convert raw ec keys into our structs), it will be out of our scope and it is absolutely his responsibility to check it (imho)
and to be honest, we rely on crypto backends that they generate keys with all specific checks. our responsibility is to choose strong primitives, hide this knowledge from end user and provide easy way to switch between several backends to user's need
but you are right too and will be better for us if we add EC_KEY_check_key method call in our validation functions ... : )",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,486,2019-07-03T11:22:17Z,2019-07-04T14:06:57Z,2019-07-04T14:07:20Z,MERGED,True,353,100,13,https://github.com/ilammy,Improve key validity checks,10,['core'],https://github.com/cossacklabs/themis/pull/486,https://github.com/ilammy,8,https://github.com/cossacklabs/themis/pull/486#issuecomment-508438988,"I only wanted to add some extra length checks to themis_is_valid_asym_key() suggested by @veorq, but this delivered way more 🔥fun🔥 that expected...
The issue with themis_is_valid_asym_key() is that it effectively validates that the provided key buffer is a valid Soter container with expected size. This includes containers that do not actually contain keys (e.g., empty containers, or unrelated Secure Messages). We would like to filter these out earlier, before we actually try to use them as keys. For this we ask Soter to provide us with expected length of the key buffer and compare that against the actual length. (We do not check the content, though. It's not that trivial to do.)
...Or that's what I planned to do. Actually implementing these checks uncovered a couple of nasty idiosyncrasies with the way we export and store keys. You can read the details in commit messages. The lesson remains the same: do not use C structs for data serialization, it's a minefield.
Furthermore, this uncovered a (minor) bug in key exporting implementation where we used incorrect buffer size for private keys, padding them with an additional byte. It kinda worked before and nobody noticed because that's one byte more, not less, and we allowed the buffers to be bigger than they should be.
Strictly speaking, a fix for this bug breaks forward compatibility of previously generated keys because now we enforce length checks and do not allow any extra garbage bytes. This breakage is unacceptable so the code now contains a compatibility branch which will let such keys through.
Alternatively, we may simply accept the mistake and continue using incorrect size of buffer for exported private keys, with an extra byte in the end. Thoughts?
Pre-merge check list:

 verify the build on internal BuildBot

 integration build — ongoing, with 'usual' failures
 crossover build — completed, seems to be okay (yay!)


 sign-off by @vixentael on breaking changes","@vixentael, @Lagovas, regarding the private key size bug. After giving it a thought, I have opted for the conservative option: preserve and document the current behavior for the benefit of the international red list of endangered bugs. Now we have a comment in code and a test that will fail if someone tries to fix the bug.
@Lagovas, I have also replaced hardcoded tag constants like 2 with proper names (everywhere).
I have also noticed that all these checks have very strong overlap with internal functions like soter_engine_specific_to_ec_priv_key() et al. I tried to leverage them to avoid code duplication and to actually verify that the key content is valid. However, that was not a one-liner that I expected it to be and after spending some time on it I have given up. We can improve the checks and make them more strict later, along with additional refactoring. All these functions are private Soter API, this will not change anything for the users.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,486,2019-07-03T11:22:17Z,2019-07-04T14:06:57Z,2019-07-04T14:07:20Z,MERGED,True,353,100,13,https://github.com/ilammy,Improve key validity checks,10,['core'],https://github.com/cossacklabs/themis/pull/486,https://github.com/ilammy,9,https://github.com/cossacklabs/themis/pull/486#issuecomment-508446283,"I only wanted to add some extra length checks to themis_is_valid_asym_key() suggested by @veorq, but this delivered way more 🔥fun🔥 that expected...
The issue with themis_is_valid_asym_key() is that it effectively validates that the provided key buffer is a valid Soter container with expected size. This includes containers that do not actually contain keys (e.g., empty containers, or unrelated Secure Messages). We would like to filter these out earlier, before we actually try to use them as keys. For this we ask Soter to provide us with expected length of the key buffer and compare that against the actual length. (We do not check the content, though. It's not that trivial to do.)
...Or that's what I planned to do. Actually implementing these checks uncovered a couple of nasty idiosyncrasies with the way we export and store keys. You can read the details in commit messages. The lesson remains the same: do not use C structs for data serialization, it's a minefield.
Furthermore, this uncovered a (minor) bug in key exporting implementation where we used incorrect buffer size for private keys, padding them with an additional byte. It kinda worked before and nobody noticed because that's one byte more, not less, and we allowed the buffers to be bigger than they should be.
Strictly speaking, a fix for this bug breaks forward compatibility of previously generated keys because now we enforce length checks and do not allow any extra garbage bytes. This breakage is unacceptable so the code now contains a compatibility branch which will let such keys through.
Alternatively, we may simply accept the mistake and continue using incorrect size of buffer for exported private keys, with an extra byte in the end. Thoughts?
Pre-merge check list:

 verify the build on internal BuildBot

 integration build — ongoing, with 'usual' failures
 crossover build — completed, seems to be okay (yay!)


 sign-off by @vixentael on breaking changes","@veorq, I think it would be nice to have some weak key checks for future-proofing and as a safety measure. Even if Themis generates strong keys right now, they might become weak in the future. Even if Themis does not provide raw key imports, attackers might craft weak keys for Themis to use.
I believe adding checks for weak keys is a bit out of scope for this PR. However, we are definitely going to look into improving key validation even further.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,487,2019-07-03T12:56:53Z,2019-07-03T13:41:53Z,2019-07-03T13:50:09Z,MERGED,True,2,1,1,https://github.com/ilammy,Temporarily disable Android build on CircleCI,1,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/487,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/487,"This job has been failing for literally months, keeping our builds red and preventing PRs from being merged cleanly. It is also quite slow in comparison with other jobs.
Let's disable Android builds for now. The plan is it move Android CI to Bitrise in the nearest time. There is no GitHub issue for this, but the progress may be tracked internally at Cossack Labs.","This job has been failing for literally months, keeping our builds red and preventing PRs from being merged cleanly. It is also quite slow in comparison with other jobs.
Let's disable Android builds for now. The plan is it move Android CI to Bitrise in the nearest time. There is no GitHub issue for this, but the progress may be tracked internally at Cossack Labs.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,487,2019-07-03T12:56:53Z,2019-07-03T13:41:53Z,2019-07-03T13:50:09Z,MERGED,True,2,1,1,https://github.com/ilammy,Temporarily disable Android build on CircleCI,1,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/487,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/487#issuecomment-508098168,"This job has been failing for literally months, keeping our builds red and preventing PRs from being merged cleanly. It is also quite slow in comparison with other jobs.
Let's disable Android builds for now. The plan is it move Android CI to Bitrise in the nearest time. There is no GitHub issue for this, but the progress may be tracked internally at Cossack Labs.",that's temporary! 🤞,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,488,2019-07-03T15:11:03Z,2019-07-04T13:36:13Z,2019-07-04T13:45:26Z,MERGED,True,136,6,10,https://github.com/ilammy,Introduce soter_wipe() function,3,"['enhancement', 'core']",https://github.com/cossacklabs/themis/pull/488,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/488,"It's a good security practice to wipe out sensitive data from memory once it's no longer needed. Straightforward approach to this is to call memset(data, 0, size) before freeing the keys or something. However, compilers often optimize memset() implementation and end up optimizing out that call completely since they see that the data is freed. We can prevent that.

Introduce secure_wipe() function

Add a utility function to securely wipe memory region. We have quite a few places in our code where this can be useful, and it's a good function to export for the users (of Soter).
It's implemented via OPENSSL_cleanse() function on both OpenSSL and BoringSSL. That's an old function available since OpenSSL 1.0.2 so we should not run into any compatibility issues (and we do recommend using latest OpenSSL anyway).
Note that it intentionally accepts void*, not uint8_t* (just like free() does). Implicit cast is expected here and allow wiping any object without warnings from compiler.

Securely wipe sensitive data

Replace ad-hoc memset() calls with soter_wipe(). This ensures that these calls will not be optimized out by the compiler in release build mode.","It's a good security practice to wipe out sensitive data from memory once it's no longer needed. Straightforward approach to this is to call memset(data, 0, size) before freeing the keys or something. However, compilers often optimize memset() implementation and end up optimizing out that call completely since they see that the data is freed. We can prevent that.

Introduce secure_wipe() function

Add a utility function to securely wipe memory region. We have quite a few places in our code where this can be useful, and it's a good function to export for the users (of Soter).
It's implemented via OPENSSL_cleanse() function on both OpenSSL and BoringSSL. That's an old function available since OpenSSL 1.0.2 so we should not run into any compatibility issues (and we do recommend using latest OpenSSL anyway).
Note that it intentionally accepts void*, not uint8_t* (just like free() does). Implicit cast is expected here and allow wiping any object without warnings from compiler.

Securely wipe sensitive data

Replace ad-hoc memset() calls with soter_wipe(). This ensures that these calls will not be optimized out by the compiler in release build mode.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,489,2019-07-05T10:58:00Z,2019-07-05T14:35:04Z,2019-07-09T12:40:56Z,MERGED,True,37,14,3,https://github.com/ilammy,WasmThemis utilities,3,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/489,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/489,"Split out a couple of commits from #462 which contain common utilities. I'd like to have them in master before submitting pull requests for other cryptosystems support in WasmThemis. This should allow us to see only relevant code in those PR, without duplicating these two commits in all four PRs.","Split out a couple of commits from #462 which contain common utilities. I'd like to have them in master before submitting pull requests for other cryptosystems support in WasmThemis. This should allow us to see only relevant code in those PR, without duplicating these two commits in all four PRs.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,490,2019-07-05T14:43:15Z,2019-07-09T12:46:14Z,2019-07-09T12:51:03Z,MERGED,True,451,0,3,https://github.com/ilammy,WasmThemis: Secure Message support,3,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/490,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/490,"Initial implementation of Secure Message wrapper. We export it as three objects:


SecureMessage providing encrypt/decrypt mode


SecureMessageSign and SecureMessageVerify providing sign/verify mode


The reason for the split is to minimize possibility of API misuse. Encryption and decryption is likely to be bidirectional, therefore we require the users to specify both private and public keys. (Though it might make sense to allow specifying null for either of the keys in order to allow unidirectional message flow.) Signing and verifying signatures requires only one part of the key pair, so these object accept a corresponding key.
Note that we allow only PrivateKey or PublicKey instances. This ensures that we operate on valid keys every time.
As JavaScript is dynamically typed, we allow several constructor syntax for SecureMessage. We can accept either a KeyPair (a single entity), or two arguments with keys (in any order, so that devs don't have to remember the correct one in absence of static typing and helpful IDE hints).","Initial implementation of Secure Message wrapper. We export it as three objects:


SecureMessage providing encrypt/decrypt mode


SecureMessageSign and SecureMessageVerify providing sign/verify mode


The reason for the split is to minimize possibility of API misuse. Encryption and decryption is likely to be bidirectional, therefore we require the users to specify both private and public keys. (Though it might make sense to allow specifying null for either of the keys in order to allow unidirectional message flow.) Signing and verifying signatures requires only one part of the key pair, so these object accept a corresponding key.
Note that we allow only PrivateKey or PublicKey instances. This ensures that we operate on valid keys every time.
As JavaScript is dynamically typed, we allow several constructor syntax for SecureMessage. We can accept either a KeyPair (a single entity), or two arguments with keys (in any order, so that devs don't have to remember the correct one in absence of static typing and helpful IDE hints).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,490,2019-07-05T14:43:15Z,2019-07-09T12:46:14Z,2019-07-09T12:51:03Z,MERGED,True,451,0,3,https://github.com/ilammy,WasmThemis: Secure Message support,3,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/490,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/490#issuecomment-509612878,"Initial implementation of Secure Message wrapper. We export it as three objects:


SecureMessage providing encrypt/decrypt mode


SecureMessageSign and SecureMessageVerify providing sign/verify mode


The reason for the split is to minimize possibility of API misuse. Encryption and decryption is likely to be bidirectional, therefore we require the users to specify both private and public keys. (Though it might make sense to allow specifying null for either of the keys in order to allow unidirectional message flow.) Signing and verifying signatures requires only one part of the key pair, so these object accept a corresponding key.
Note that we allow only PrivateKey or PublicKey instances. This ensures that we operate on valid keys every time.
As JavaScript is dynamically typed, we allow several constructor syntax for SecureMessage. We can accept either a KeyPair (a single entity), or two arguments with keys (in any order, so that devs don't have to remember the correct one in absence of static typing and helpful IDE hints).",Memory zeroization and more unit tests for type checks are coming in separate PRs (linked above).,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,491,2019-07-05T14:44:26Z,2019-07-09T13:19:33Z,2019-07-09T13:19:45Z,MERGED,True,294,0,3,https://github.com/ilammy,WasmThemis: Secure Comparator support,3,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/491,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/491,"Initial implementation of Secure Comparator wrapper. It is exported as SecureComparator object.
Usage is pretty straightforward, just look at the tests. However, there is one important caveat: you MUST call destroy() method in timely manner or else Secure Comparator handle will be leaked to Emscripten heap and will never be removed. JavaScript does not have a concept of finalizers so we cannot clean up automatically, like we're doing in Java wrapper for example.
Also note some convenience error checking that we do before calling native implementation. This provides a bit more human-friendly error messages for typical mistakes when using Secure Comparator.","Initial implementation of Secure Comparator wrapper. It is exported as SecureComparator object.
Usage is pretty straightforward, just look at the tests. However, there is one important caveat: you MUST call destroy() method in timely manner or else Secure Comparator handle will be leaked to Emscripten heap and will never be removed. JavaScript does not have a concept of finalizers so we cannot clean up automatically, like we're doing in Java wrapper for example.
Also note some convenience error checking that we do before calling native implementation. This provides a bit more human-friendly error messages for typical mistakes when using Secure Comparator.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,491,2019-07-05T14:44:26Z,2019-07-09T13:19:33Z,2019-07-09T13:19:45Z,MERGED,True,294,0,3,https://github.com/ilammy,WasmThemis: Secure Comparator support,3,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/491,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/491#issuecomment-509612969,"Initial implementation of Secure Comparator wrapper. It is exported as SecureComparator object.
Usage is pretty straightforward, just look at the tests. However, there is one important caveat: you MUST call destroy() method in timely manner or else Secure Comparator handle will be leaked to Emscripten heap and will never be removed. JavaScript does not have a concept of finalizers so we cannot clean up automatically, like we're doing in Java wrapper for example.
Also note some convenience error checking that we do before calling native implementation. This provides a bit more human-friendly error messages for typical mistakes when using Secure Comparator.",Memory zeroization and more unit tests for type checks are coming in separate PRs (linked above).,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,492,2019-07-05T14:45:30Z,2019-07-09T13:50:11Z,2019-07-09T13:53:21Z,MERGED,True,573,1,5,https://github.com/ilammy,WasmThemis: Secure Session support,5,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/492,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/492,"Initial implementation of Secure Session wrapper. It is exported as SecureSession object.
This is the most complex API of Themis both in implementation and usage. It stems from the fact that it use C callbacks, which do not map onto other languages directly. Our approach for Secure Session is described in code comments as it relies on a number of assumptions. Ultimately, we use Emscripten's addFunction API to bridge JavaScript callbacks provided by WasmThemis users into Emscripten world.
Just like Secure Comparator, Secure Session also requires manual resource management from the users. That's unfortunate but unavoidable. Similarly, we provide some additional error checks and reporting to prevent common mistakes in Secure Session usage.
Note that we provide only buffer-oriented API of Secure Session. The only callback that the user can register is the required one for obtaining public key by session ID. Using transport-oriented API in JavaScript it hard because it assumes synchronous IO while normally JavaScript uses asynchronous network transfers.","Initial implementation of Secure Session wrapper. It is exported as SecureSession object.
This is the most complex API of Themis both in implementation and usage. It stems from the fact that it use C callbacks, which do not map onto other languages directly. Our approach for Secure Session is described in code comments as it relies on a number of assumptions. Ultimately, we use Emscripten's addFunction API to bridge JavaScript callbacks provided by WasmThemis users into Emscripten world.
Just like Secure Comparator, Secure Session also requires manual resource management from the users. That's unfortunate but unavoidable. Similarly, we provide some additional error checks and reporting to prevent common mistakes in Secure Session usage.
Note that we provide only buffer-oriented API of Secure Session. The only callback that the user can register is the required one for obtaining public key by session ID. Using transport-oriented API in JavaScript it hard because it assumes synchronous IO while normally JavaScript uses asynchronous network transfers.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,492,2019-07-05T14:45:30Z,2019-07-09T13:50:11Z,2019-07-09T13:53:21Z,MERGED,True,573,1,5,https://github.com/ilammy,WasmThemis: Secure Session support,5,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/492,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/492#issuecomment-509613267,"Initial implementation of Secure Session wrapper. It is exported as SecureSession object.
This is the most complex API of Themis both in implementation and usage. It stems from the fact that it use C callbacks, which do not map onto other languages directly. Our approach for Secure Session is described in code comments as it relies on a number of assumptions. Ultimately, we use Emscripten's addFunction API to bridge JavaScript callbacks provided by WasmThemis users into Emscripten world.
Just like Secure Comparator, Secure Session also requires manual resource management from the users. That's unfortunate but unavoidable. Similarly, we provide some additional error checks and reporting to prevent common mistakes in Secure Session usage.
Note that we provide only buffer-oriented API of Secure Session. The only callback that the user can register is the required one for obtaining public key by session ID. Using transport-oriented API in JavaScript it hard because it assumes synchronous IO while normally JavaScript uses asynchronous network transfers.",Memory zeroization and more unit tests for type checks are coming in separate PRs (linked above).,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,493,2019-07-08T15:32:07Z,2019-07-09T12:12:34Z,2019-07-09T12:40:07Z,MERGED,True,26,13,4,https://github.com/ilammy,Query auth tag size in soter_sym_aead_encrypt_final(),2,['core'],https://github.com/cossacklabs/themis/pull/493,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/493,"Documentation for soter_sym_aead_encrypt_final() states that it is possible to query buffer size for authentication tag by passing NULL. However, currently we do not allow NULL values for auth_tag.
Replace SOTER_CHECK with proper validation and return buffer size with proper error code when auth_tag == NULL.
Add a test to verify this behavior. Update documentation to improve readability, fix typos, grammar, etc.","Documentation for soter_sym_aead_encrypt_final() states that it is possible to query buffer size for authentication tag by passing NULL. However, currently we do not allow NULL values for auth_tag.
Replace SOTER_CHECK with proper validation and return buffer size with proper error code when auth_tag == NULL.
Add a test to verify this behavior. Update documentation to improve readability, fix typos, grammar, etc.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,494,2019-07-09T11:08:10Z,2019-07-11T13:07:46Z,2019-07-26T13:52:41Z,MERGED,True,156,0,1,https://github.com/ilammy,Improved type safety tests,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/494,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/494,"JavaScript is dynamically typed, therefore it is highly likely that at some point one of our users will try using something that's not supposed to be used with Themis functions. Add some more tests to ensure that we do cover all the bases and do not accept invalid arguments when we do not support them.
There are quite a few cases that we need to cover:

null & undefined (but sometimes null is allowed)
strings (that's debatable, but most API should not accept them directly)
untyped JavaScript arrays as well as all typed arrays that are not byte arrays
promises which could come from other async API in JavaScript
random objects should not be implicitly casted into arrays (one never knows...)

I don't want to miss any of these by chance, and it will be nice to be able to add or remove exceptions for all tests simultaneously. I have added a helper functions to enumerate all possible combinations for arguments. Hopefully it should make it easier to write combinatorial tests.


 Add a common helper function
 Cover all cryptosystems

 Key generation (this PR)
 Secure Cell (#462)
 Secure Message (#490)
 Secure Comparator (#491)
 Secure Session (#492)","JavaScript is dynamically typed, therefore it is highly likely that at some point one of our users will try using something that's not supposed to be used with Themis functions. Add some more tests to ensure that we do cover all the bases and do not accept invalid arguments when we do not support them.
There are quite a few cases that we need to cover:

null & undefined (but sometimes null is allowed)
strings (that's debatable, but most API should not accept them directly)
untyped JavaScript arrays as well as all typed arrays that are not byte arrays
promises which could come from other async API in JavaScript
random objects should not be implicitly casted into arrays (one never knows...)

I don't want to miss any of these by chance, and it will be nice to be able to add or remove exceptions for all tests simultaneously. I have added a helper functions to enumerate all possible combinations for arguments. Hopefully it should make it easier to write combinatorial tests.


 Add a common helper function
 Cover all cryptosystems

 Key generation (this PR)
 Secure Cell (#462)
 Secure Message (#490)
 Secure Comparator (#491)
 Secure Session (#492)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,494,2019-07-09T11:08:10Z,2019-07-11T13:07:46Z,2019-07-26T13:52:41Z,MERGED,True,156,0,1,https://github.com/ilammy,Improved type safety tests,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/494,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/494#issuecomment-509598789,"JavaScript is dynamically typed, therefore it is highly likely that at some point one of our users will try using something that's not supposed to be used with Themis functions. Add some more tests to ensure that we do cover all the bases and do not accept invalid arguments when we do not support them.
There are quite a few cases that we need to cover:

null & undefined (but sometimes null is allowed)
strings (that's debatable, but most API should not accept them directly)
untyped JavaScript arrays as well as all typed arrays that are not byte arrays
promises which could come from other async API in JavaScript
random objects should not be implicitly casted into arrays (one never knows...)

I don't want to miss any of these by chance, and it will be nice to be able to add or remove exceptions for all tests simultaneously. I have added a helper functions to enumerate all possible combinations for arguments. Hopefully it should make it easier to write combinatorial tests.


 Add a common helper function
 Cover all cryptosystems

 Key generation (this PR)
 Secure Cell (#462)
 Secure Message (#490)
 Secure Comparator (#491)
 Secure Session (#492)",Currently this covers only key generation. I'll add tests for other cryptosystems into this PR once they are merged.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,494,2019-07-09T11:08:10Z,2019-07-11T13:07:46Z,2019-07-26T13:52:41Z,MERGED,True,156,0,1,https://github.com/ilammy,Improved type safety tests,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/494,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/494#issuecomment-509667446,"JavaScript is dynamically typed, therefore it is highly likely that at some point one of our users will try using something that's not supposed to be used with Themis functions. Add some more tests to ensure that we do cover all the bases and do not accept invalid arguments when we do not support them.
There are quite a few cases that we need to cover:

null & undefined (but sometimes null is allowed)
strings (that's debatable, but most API should not accept them directly)
untyped JavaScript arrays as well as all typed arrays that are not byte arrays
promises which could come from other async API in JavaScript
random objects should not be implicitly casted into arrays (one never knows...)

I don't want to miss any of these by chance, and it will be nice to be able to add or remove exceptions for all tests simultaneously. I have added a helper functions to enumerate all possible combinations for arguments. Hopefully it should make it easier to write combinatorial tests.


 Add a common helper function
 Cover all cryptosystems

 Key generation (this PR)
 Secure Cell (#462)
 Secure Message (#490)
 Secure Comparator (#491)
 Secure Session (#492)","I've added type checks for all cryptosystems. Hopefully, I did not miss any API entry point.
@vixentael, there's also an additional check for empty strings when constructing keys.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,495,2019-07-09T11:17:23Z,2019-07-11T13:09:06Z,2019-07-26T13:52:41Z,MERGED,True,217,183,8,https://github.com/ilammy,Secure usage of Emscripten heap,8,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/495,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/495,"In order to call Themis Core functions we need to transfer key material and messages from JavaScript memory into Emscripten heap. Operations results are similarly transferred back to JavaScript memory. We do this by explicitly allocating a buffer on Emscripten heap and using Emscripten helpers for transfers.
One important point here is that all data is still retained for some time on Emscripten heap after free() is called. This includes sensitive data which theoretically may be accessed by an adversary. Generally it is recommended to wipe the memory that contains sensitive data after use. We can't control JavaScript memory, but we can at least ensure that Emscripten heap does not leave any unwanted traces.
Introduce some functions to help us with data transfer between JavaScript and Emscripten heaps. They are designed to be used together so any new code will naturally use them instead of reaching for C functions and Emscripten runtime directly.


 Add common helper functions
 Cover all cryptosystems

 Key generation (this PR)
 Secure Cell (#462)
 Secure Message (#490)
 Secure Comparator (#491)
 Secure Session (#492)","In order to call Themis Core functions we need to transfer key material and messages from JavaScript memory into Emscripten heap. Operations results are similarly transferred back to JavaScript memory. We do this by explicitly allocating a buffer on Emscripten heap and using Emscripten helpers for transfers.
One important point here is that all data is still retained for some time on Emscripten heap after free() is called. This includes sensitive data which theoretically may be accessed by an adversary. Generally it is recommended to wipe the memory that contains sensitive data after use. We can't control JavaScript memory, but we can at least ensure that Emscripten heap does not leave any unwanted traces.
Introduce some functions to help us with data transfer between JavaScript and Emscripten heaps. They are designed to be used together so any new code will naturally use them instead of reaching for C functions and Emscripten runtime directly.


 Add common helper functions
 Cover all cryptosystems

 Key generation (this PR)
 Secure Cell (#462)
 Secure Message (#490)
 Secure Comparator (#491)
 Secure Session (#492)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,495,2019-07-09T11:17:23Z,2019-07-11T13:09:06Z,2019-07-26T13:52:41Z,MERGED,True,217,183,8,https://github.com/ilammy,Secure usage of Emscripten heap,8,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/495,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/495#issuecomment-509601221,"In order to call Themis Core functions we need to transfer key material and messages from JavaScript memory into Emscripten heap. Operations results are similarly transferred back to JavaScript memory. We do this by explicitly allocating a buffer on Emscripten heap and using Emscripten helpers for transfers.
One important point here is that all data is still retained for some time on Emscripten heap after free() is called. This includes sensitive data which theoretically may be accessed by an adversary. Generally it is recommended to wipe the memory that contains sensitive data after use. We can't control JavaScript memory, but we can at least ensure that Emscripten heap does not leave any unwanted traces.
Introduce some functions to help us with data transfer between JavaScript and Emscripten heaps. They are designed to be used together so any new code will naturally use them instead of reaching for C functions and Emscripten runtime directly.


 Add common helper functions
 Cover all cryptosystems

 Key generation (this PR)
 Secure Cell (#462)
 Secure Message (#490)
 Secure Comparator (#491)
 Secure Session (#492)",Currently this covers only key generation. I'll update other cryptosystems in this PR once they are merged.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,495,2019-07-09T11:17:23Z,2019-07-11T13:09:06Z,2019-07-26T13:52:41Z,MERGED,True,217,183,8,https://github.com/ilammy,Secure usage of Emscripten heap,8,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/495,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/495#issuecomment-509669646,"In order to call Themis Core functions we need to transfer key material and messages from JavaScript memory into Emscripten heap. Operations results are similarly transferred back to JavaScript memory. We do this by explicitly allocating a buffer on Emscripten heap and using Emscripten helpers for transfers.
One important point here is that all data is still retained for some time on Emscripten heap after free() is called. This includes sensitive data which theoretically may be accessed by an adversary. Generally it is recommended to wipe the memory that contains sensitive data after use. We can't control JavaScript memory, but we can at least ensure that Emscripten heap does not leave any unwanted traces.
Introduce some functions to help us with data transfer between JavaScript and Emscripten heaps. They are designed to be used together so any new code will naturally use them instead of reaching for C functions and Emscripten runtime directly.


 Add common helper functions
 Cover all cryptosystems

 Key generation (this PR)
 Secure Cell (#462)
 Secure Message (#490)
 Secure Comparator (#491)
 Secure Session (#492)","I've converted all allocations to use heapAlloc and heapFree. Now we should not be leaving any leaked data in Emscripten heap after Themis calls are complete. Obviously, the data will still be present there during the operation time, but it has to be somewhere in memory.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,495,2019-07-09T11:17:23Z,2019-07-11T13:09:06Z,2019-07-26T13:52:41Z,MERGED,True,217,183,8,https://github.com/ilammy,Secure usage of Emscripten heap,8,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/495,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/495#issuecomment-510062666,"In order to call Themis Core functions we need to transfer key material and messages from JavaScript memory into Emscripten heap. Operations results are similarly transferred back to JavaScript memory. We do this by explicitly allocating a buffer on Emscripten heap and using Emscripten helpers for transfers.
One important point here is that all data is still retained for some time on Emscripten heap after free() is called. This includes sensitive data which theoretically may be accessed by an adversary. Generally it is recommended to wipe the memory that contains sensitive data after use. We can't control JavaScript memory, but we can at least ensure that Emscripten heap does not leave any unwanted traces.
Introduce some functions to help us with data transfer between JavaScript and Emscripten heaps. They are designed to be used together so any new code will naturally use them instead of reaching for C functions and Emscripten runtime directly.


 Add common helper functions
 Cover all cryptosystems

 Key generation (this PR)
 Secure Cell (#462)
 Secure Message (#490)
 Secure Comparator (#491)
 Secure Session (#492)","If I also understood correctly, we plan to use utils.heapFree(...) on errors?

We already do it in this PR. These calls are placed in finally blocks so they are executed in both the happy path and when an exception is thrown due to an error.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,495,2019-07-09T11:17:23Z,2019-07-11T13:09:06Z,2019-07-26T13:52:41Z,MERGED,True,217,183,8,https://github.com/ilammy,Secure usage of Emscripten heap,8,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/495,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/495#issuecomment-510063688,"In order to call Themis Core functions we need to transfer key material and messages from JavaScript memory into Emscripten heap. Operations results are similarly transferred back to JavaScript memory. We do this by explicitly allocating a buffer on Emscripten heap and using Emscripten helpers for transfers.
One important point here is that all data is still retained for some time on Emscripten heap after free() is called. This includes sensitive data which theoretically may be accessed by an adversary. Generally it is recommended to wipe the memory that contains sensitive data after use. We can't control JavaScript memory, but we can at least ensure that Emscripten heap does not leave any unwanted traces.
Introduce some functions to help us with data transfer between JavaScript and Emscripten heaps. They are designed to be used together so any new code will naturally use them instead of reaching for C functions and Emscripten runtime directly.


 Add common helper functions
 Cover all cryptosystems

 Key generation (this PR)
 Secure Cell (#462)
 Secure Message (#490)
 Secure Comparator (#491)
 Secure Session (#492)","Oh, i missed that we wrap everything in try blocks :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,495,2019-07-09T11:17:23Z,2019-07-11T13:09:06Z,2019-07-26T13:52:41Z,MERGED,True,217,183,8,https://github.com/ilammy,Secure usage of Emscripten heap,8,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/495,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/495#issuecomment-510068863,"In order to call Themis Core functions we need to transfer key material and messages from JavaScript memory into Emscripten heap. Operations results are similarly transferred back to JavaScript memory. We do this by explicitly allocating a buffer on Emscripten heap and using Emscripten helpers for transfers.
One important point here is that all data is still retained for some time on Emscripten heap after free() is called. This includes sensitive data which theoretically may be accessed by an adversary. Generally it is recommended to wipe the memory that contains sensitive data after use. We can't control JavaScript memory, but we can at least ensure that Emscripten heap does not leave any unwanted traces.
Introduce some functions to help us with data transfer between JavaScript and Emscripten heaps. They are designed to be used together so any new code will naturally use them instead of reaching for C functions and Emscripten runtime directly.


 Add common helper functions
 Cover all cryptosystems

 Key generation (this PR)
 Secure Cell (#462)
 Secure Message (#490)
 Secure Comparator (#491)
 Secure Session (#492)",Your comment made me realize that we handle memory allocation errors poorly in the these utility functions. I've added a minor fix which allows using headFree on NULL values returned by failed heapAlloc invocation.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,495,2019-07-09T11:17:23Z,2019-07-11T13:09:06Z,2019-07-26T13:52:41Z,MERGED,True,217,183,8,https://github.com/ilammy,Secure usage of Emscripten heap,8,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/495,https://github.com/vixentael,7,https://github.com/cossacklabs/themis/pull/495#issuecomment-510069365,"In order to call Themis Core functions we need to transfer key material and messages from JavaScript memory into Emscripten heap. Operations results are similarly transferred back to JavaScript memory. We do this by explicitly allocating a buffer on Emscripten heap and using Emscripten helpers for transfers.
One important point here is that all data is still retained for some time on Emscripten heap after free() is called. This includes sensitive data which theoretically may be accessed by an adversary. Generally it is recommended to wipe the memory that contains sensitive data after use. We can't control JavaScript memory, but we can at least ensure that Emscripten heap does not leave any unwanted traces.
Introduce some functions to help us with data transfer between JavaScript and Emscripten heaps. They are designed to be used together so any new code will naturally use them instead of reaching for C functions and Emscripten runtime directly.


 Add common helper functions
 Cover all cryptosystems

 Key generation (this PR)
 Secure Cell (#462)
 Secure Message (#490)
 Secure Comparator (#491)
 Secure Session (#492)",that's actually makes sense! 💪,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,496,2019-07-11T12:09:24Z,2019-07-12T07:43:10Z,2019-07-12T07:43:18Z,MERGED,True,223,125,1,https://github.com/ilammy,Avoid extra KDF call in Secure Cell,5,['core'],https://github.com/cossacklabs/themis/pull/496,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/496,"Currently calling themis_auth_sym_encrypt_message() results in an unnecessary call to themis_sym_kdf() when we only want to validate input parameters and maybe return the correct output buffer length.
Move KDF calls to the helper function and leave only parameter checks in the main one. While we're here, refactor the function to improve code readability and clarity.
themis_auth_sym_decrypt_message() has the same inefficient use of themis_sym_kdf() as in themis_auth_sym_encrypt_message(). Update and refactor it in a similar way.
Additional complexity here stems from the fact that decryption path contains a workaround for a compatibility issue with Themis 0.9.6. We need to preserve the workaround. In order to make it more readable, move the compatibility code into a separate function that will be compiled out entirely when not needed.

Overflow checks for cell length

Secure Cell format does not allow messages longer than 4 GB. Container length is limited by the length field in authentication context. This was the source of the original compatibility issue in Themis 0.9.6.
However, currently we accept lengths over 4 GB, but silently truncate them when constructing authentication context. This is not right and we should check for the overflow instead of silently returning incorrect data.
This code path is not tested because it's not very reliable to allocate over 4 GB of memory in CI environment.

Wipe derived keys after use

Currently we leave the resulting derived keys on the stack after use. These keys are sensitive data so we should wipe them immediately after they have been used and are no longer needed.
Move the derived key array into the parent function and wipe it there to ensure that we always do so. There are alternatives, but they will require to structure the code a bit differently or stop using these THEMIS_CHECK macros.","Currently calling themis_auth_sym_encrypt_message() results in an unnecessary call to themis_sym_kdf() when we only want to validate input parameters and maybe return the correct output buffer length.
Move KDF calls to the helper function and leave only parameter checks in the main one. While we're here, refactor the function to improve code readability and clarity.
themis_auth_sym_decrypt_message() has the same inefficient use of themis_sym_kdf() as in themis_auth_sym_encrypt_message(). Update and refactor it in a similar way.
Additional complexity here stems from the fact that decryption path contains a workaround for a compatibility issue with Themis 0.9.6. We need to preserve the workaround. In order to make it more readable, move the compatibility code into a separate function that will be compiled out entirely when not needed.

Overflow checks for cell length

Secure Cell format does not allow messages longer than 4 GB. Container length is limited by the length field in authentication context. This was the source of the original compatibility issue in Themis 0.9.6.
However, currently we accept lengths over 4 GB, but silently truncate them when constructing authentication context. This is not right and we should check for the overflow instead of silently returning incorrect data.
This code path is not tested because it's not very reliable to allocate over 4 GB of memory in CI environment.

Wipe derived keys after use

Currently we leave the resulting derived keys on the stack after use. These keys are sensitive data so we should wipe them immediately after they have been used and are no longer needed.
Move the derived key array into the parent function and wipe it there to ensure that we always do so. There are alternatives, but they will require to structure the code a bit differently or stop using these THEMIS_CHECK macros.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,497,2019-07-11T13:03:05Z,2019-07-12T07:45:38Z,2019-07-26T13:52:41Z,MERGED,True,113,2,2,https://github.com/ilammy,Always fill buffer length in Secure Cell,1,['core'],https://github.com/cossacklabs/themis/pull/497,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/497,"Sealing mode of Secure Cell is a bit special in that its output is a concatenation of encrypted message and authentication context. Other modes return these components separately.
The users need to allocate a suitably big buffer to fit the results of encryption.  Usually they pass NULL for buffer pointer in order to measure the size first, then allocate the buffer and pass the correct buffer pointer and size to Themis.
However, the users might also allocate a big enough buffer right away and do not rely on measurements. Or allocate a buffer with some extra rounding (e.g., to a page size or something). In this case they need to know the resulting length too.
Unfortunately, Secure Cell in sealing mode does not fill in the in-out length parameter if the buffer turns out to be big enough already. This will result in extra unused and uninitialized content at the end of the encrypted message if the user decides to trust the length.
Make sure that we return the length in this case. Add a test to check that resulting length is consistent with prior measurements. Check other modes as well, just in case.","Sealing mode of Secure Cell is a bit special in that its output is a concatenation of encrypted message and authentication context. Other modes return these components separately.
The users need to allocate a suitably big buffer to fit the results of encryption.  Usually they pass NULL for buffer pointer in order to measure the size first, then allocate the buffer and pass the correct buffer pointer and size to Themis.
However, the users might also allocate a big enough buffer right away and do not rely on measurements. Or allocate a buffer with some extra rounding (e.g., to a page size or something). In this case they need to know the resulting length too.
Unfortunately, Secure Cell in sealing mode does not fill in the in-out length parameter if the buffer turns out to be big enough already. This will result in extra unused and uninitialized content at the end of the encrypted message if the user decides to trust the length.
Make sure that we return the length in this case. Add a test to check that resulting length is consistent with prior measurements. Check other modes as well, just in case.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,498,2019-07-13T08:46:03Z,2019-07-13T11:47:54Z,2019-07-13T11:47:59Z,MERGED,True,127,128,1,https://github.com/ilammy,Update transitive dependencies,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/498,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/498,"There is a high-severity security vulnerability in lodash which is one of our transitive dependencies. Run an npm update to bump all locked dependencies to their latest versions, including lodash.
This is a development dependency (and our only one at this point), so there is no need for security advisories for our users.","There is a high-severity security vulnerability in lodash which is one of our transitive dependencies. Run an npm update to bump all locked dependencies to their latest versions, including lodash.
This is a development dependency (and our only one at this point), so there is no need for security advisories for our users.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,498,2019-07-13T08:46:03Z,2019-07-13T11:47:54Z,2019-07-13T11:47:59Z,MERGED,True,127,128,1,https://github.com/ilammy,Update transitive dependencies,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/498,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/498#issuecomment-511115810,"There is a high-severity security vulnerability in lodash which is one of our transitive dependencies. Run an npm update to bump all locked dependencies to their latest versions, including lodash.
This is a development dependency (and our only one at this point), so there is no need for security advisories for our users.",Oh those dependencies!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,499,2019-07-17T15:15:19Z,2019-07-22T12:45:14Z,2019-09-27T13:31:10Z,MERGED,True,65,44,18,https://github.com/ilammy,Fix Node.js 12 support,2,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/499,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/499,"Latest stable release of Node.js 12 includes updated V8 engine which has finally removed some of the deprecated API that we are using. JavaScript ecosystem has relatively low half-life periods for versions so we need to upgrade.

Use v8::Local instead of v8::Handle

v8::Handle has been deprecated in favor of v8::Local since V8 4.5 and has been removed somewhere after V8 7.0. Node.js 12 (current stable) is upgrading V8 engine to 7.4+ which does not support v8::Handle.
Mass-replace v8::Handle → v8::Local to avoid that issue. It's supported even by the ancient Node versions packaged in older Ubuntu releases.

Use NAN helpers

v8::Object::Set() and v8::FunctionTemplate::GetFunction() have had their API changed between V8 versions. Upgrading Node.js to 12 breaks them completely.
Instead of using this API directly we should be using NAN helpers that encapsulate the changes and provide common API for Maybe types.

I have manually verified these changes with the following Node.js versions:

Node.js v4.2.6 — packaged with Ubuntu 16 LTS (Xenial Xerus), checked by CircleCI
Node.js v8.16 — current maintenance LTS version of Node.js, still somewhat supported
Node.js v10.16 — current active LTS version of Node.js, recommended for current users
Node.js v12.6 — latest stable version of Node.js, in development

Currently CircleCI checks only Node.js v4. This PR does not update the build system so you'll have to trust me that it actually builds, for now.","Latest stable release of Node.js 12 includes updated V8 engine which has finally removed some of the deprecated API that we are using. JavaScript ecosystem has relatively low half-life periods for versions so we need to upgrade.

Use v8::Local instead of v8::Handle

v8::Handle has been deprecated in favor of v8::Local since V8 4.5 and has been removed somewhere after V8 7.0. Node.js 12 (current stable) is upgrading V8 engine to 7.4+ which does not support v8::Handle.
Mass-replace v8::Handle → v8::Local to avoid that issue. It's supported even by the ancient Node versions packaged in older Ubuntu releases.

Use NAN helpers

v8::Object::Set() and v8::FunctionTemplate::GetFunction() have had their API changed between V8 versions. Upgrading Node.js to 12 breaks them completely.
Instead of using this API directly we should be using NAN helpers that encapsulate the changes and provide common API for Maybe types.

I have manually verified these changes with the following Node.js versions:

Node.js v4.2.6 — packaged with Ubuntu 16 LTS (Xenial Xerus), checked by CircleCI
Node.js v8.16 — current maintenance LTS version of Node.js, still somewhat supported
Node.js v10.16 — current active LTS version of Node.js, recommended for current users
Node.js v12.6 — latest stable version of Node.js, in development

Currently CircleCI checks only Node.js v4. This PR does not update the build system so you'll have to trust me that it actually builds, for now.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,499,2019-07-17T15:15:19Z,2019-07-22T12:45:14Z,2019-09-27T13:31:10Z,MERGED,True,65,44,18,https://github.com/ilammy,Fix Node.js 12 support,2,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/499,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/499#issuecomment-512350988,"Latest stable release of Node.js 12 includes updated V8 engine which has finally removed some of the deprecated API that we are using. JavaScript ecosystem has relatively low half-life periods for versions so we need to upgrade.

Use v8::Local instead of v8::Handle

v8::Handle has been deprecated in favor of v8::Local since V8 4.5 and has been removed somewhere after V8 7.0. Node.js 12 (current stable) is upgrading V8 engine to 7.4+ which does not support v8::Handle.
Mass-replace v8::Handle → v8::Local to avoid that issue. It's supported even by the ancient Node versions packaged in older Ubuntu releases.

Use NAN helpers

v8::Object::Set() and v8::FunctionTemplate::GetFunction() have had their API changed between V8 versions. Upgrading Node.js to 12 breaks them completely.
Instead of using this API directly we should be using NAN helpers that encapsulate the changes and provide common API for Maybe types.

I have manually verified these changes with the following Node.js versions:

Node.js v4.2.6 — packaged with Ubuntu 16 LTS (Xenial Xerus), checked by CircleCI
Node.js v8.16 — current maintenance LTS version of Node.js, still somewhat supported
Node.js v10.16 — current active LTS version of Node.js, recommended for current users
Node.js v12.6 — latest stable version of Node.js, in development

Currently CircleCI checks only Node.js v4. This PR does not update the build system so you'll have to trust me that it actually builds, for now.","This PR does not update the build system so you'll have to trust me that it actually builds, for now.

but can we add checks for different node versions to CircleCI later? or check them in BuildBot 🤔",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,499,2019-07-17T15:15:19Z,2019-07-22T12:45:14Z,2019-09-27T13:31:10Z,MERGED,True,65,44,18,https://github.com/ilammy,Fix Node.js 12 support,2,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/499,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/499#issuecomment-512714876,"Latest stable release of Node.js 12 includes updated V8 engine which has finally removed some of the deprecated API that we are using. JavaScript ecosystem has relatively low half-life periods for versions so we need to upgrade.

Use v8::Local instead of v8::Handle

v8::Handle has been deprecated in favor of v8::Local since V8 4.5 and has been removed somewhere after V8 7.0. Node.js 12 (current stable) is upgrading V8 engine to 7.4+ which does not support v8::Handle.
Mass-replace v8::Handle → v8::Local to avoid that issue. It's supported even by the ancient Node versions packaged in older Ubuntu releases.

Use NAN helpers

v8::Object::Set() and v8::FunctionTemplate::GetFunction() have had their API changed between V8 versions. Upgrading Node.js to 12 breaks them completely.
Instead of using this API directly we should be using NAN helpers that encapsulate the changes and provide common API for Maybe types.

I have manually verified these changes with the following Node.js versions:

Node.js v4.2.6 — packaged with Ubuntu 16 LTS (Xenial Xerus), checked by CircleCI
Node.js v8.16 — current maintenance LTS version of Node.js, still somewhat supported
Node.js v10.16 — current active LTS version of Node.js, recommended for current users
Node.js v12.6 — latest stable version of Node.js, in development

Currently CircleCI checks only Node.js v4. This PR does not update the build system so you'll have to trust me that it actually builds, for now.","@vixentael,

but can we add checks for different node versions to CircleCI later?

Sure thing. I'll add them, just in a separate PR.",True,{'HEART': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,500,2019-07-18T14:03:30Z,2019-07-22T12:39:51Z,2019-07-22T12:39:54Z,MERGED,True,57,14,2,https://github.com/ilammy,Fix error handling in key generation,4,['core'],https://github.com/cossacklabs/themis/pull/500,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/500,"Note that EC key generation has incorrect return value when public key export fails (should be res2 instead of res). This may cause key generation function to return success if private key has been exported successfully, but public key has not. The user will then proceed with uninitialized public key buffer and will not be amused afterwards.
Change variable names to be more distinct so that the difference is more obvious and add some empty lines so that the code is easier to read.
Add a test which makes sure we have correct behavior when one of the keys fail. Using NULL values is the easiest way to trigger this behavior.
Thanks to @vixentael for finding this! 🔍 🕵️‍♀️","Note that EC key generation has incorrect return value when public key export fails (should be res2 instead of res). This may cause key generation function to return success if private key has been exported successfully, but public key has not. The user will then proceed with uninitialized public key buffer and will not be amused afterwards.
Change variable names to be more distinct so that the difference is more obvious and add some empty lines so that the code is easier to read.
Add a test which makes sure we have correct behavior when one of the keys fail. Using NULL values is the easiest way to trigger this behavior.
Thanks to @vixentael for finding this! 🔍 🕵️‍♀️",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,500,2019-07-18T14:03:30Z,2019-07-22T12:39:51Z,2019-07-22T12:39:54Z,MERGED,True,57,14,2,https://github.com/ilammy,Fix error handling in key generation,4,['core'],https://github.com/cossacklabs/themis/pull/500,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/500#issuecomment-512845950,"Note that EC key generation has incorrect return value when public key export fails (should be res2 instead of res). This may cause key generation function to return success if private key has been exported successfully, but public key has not. The user will then proceed with uninitialized public key buffer and will not be amused afterwards.
Change variable names to be more distinct so that the difference is more obvious and add some empty lines so that the code is easier to read.
Add a test which makes sure we have correct behavior when one of the keys fail. Using NULL values is the easiest way to trigger this behavior.
Thanks to @vixentael for finding this! 🔍 🕵️‍♀️","although looks like formatting checks failed :D

I confess, pls have mercy: I still don't have a hotkey to autoreformat the code.
Though, the build is also failing due to rvm package being broken and the tests are never executed. I guess we'd better wait for that to be resolved in some what before merging this (or any other) PR.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,500,2019-07-18T14:03:30Z,2019-07-22T12:39:51Z,2019-07-22T12:39:54Z,MERGED,True,57,14,2,https://github.com/ilammy,Fix error handling in key generation,4,['core'],https://github.com/cossacklabs/themis/pull/500,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/500#issuecomment-512875770,"Note that EC key generation has incorrect return value when public key export fails (should be res2 instead of res). This may cause key generation function to return success if private key has been exported successfully, but public key has not. The user will then proceed with uninitialized public key buffer and will not be amused afterwards.
Change variable names to be more distinct so that the difference is more obvious and add some empty lines so that the code is easier to read.
Add a test which makes sure we have correct behavior when one of the keys fail. Using NULL values is the easiest way to trigger this behavior.
Thanks to @vixentael for finding this! 🔍 🕵️‍♀️","@secumod,

was this formatted with clang-format?

Yes—aside from empty lines. IIRC, it can insert them in simple cases (like between functions), but more meaningful split still requires human intervention.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,501,2019-07-18T14:36:35Z,2019-07-22T10:25:57Z,2019-07-22T11:03:04Z,MERGED,True,8,8,2,https://github.com/ilammy,Correctly free EVP_MD_CTX in OpenSSL,2,['core'],https://github.com/cossacklabs/themis/pull/501,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/501,"soter_sign_ctx_t structures store both EVP_MD_CTX (to keep the digest algorithm used for signatures) and EVP_PKEY_CTX (to keep the key used for signature). The key is actually shared between those structures but EVP_MD_CTX assumes ownership over it, with EVP_MD_CTX_destroy() freeing the key. EVP_PKEY structures are refcounted so sharing the key should be safe... if we make the correct precautions to avoid freeing the key after it has been freed. EVP_PKEY_CTX keeps track of that, but we need to free EVP_MD_CTX first and then proceed to freeing EVP_PKEY_CTX and maybe the key it has been managing.
tl;dr: manual memory management is hard.
This sleeper bug is presumed to be responsible for occasional segfaults when running JsThemis. Interestingly, the crashes do not reproduce with any other wrapper. Furthermore, BoringSSL code uses correct freeing order since the beginning. ""Coincidence? I don't think so"".","soter_sign_ctx_t structures store both EVP_MD_CTX (to keep the digest algorithm used for signatures) and EVP_PKEY_CTX (to keep the key used for signature). The key is actually shared between those structures but EVP_MD_CTX assumes ownership over it, with EVP_MD_CTX_destroy() freeing the key. EVP_PKEY structures are refcounted so sharing the key should be safe... if we make the correct precautions to avoid freeing the key after it has been freed. EVP_PKEY_CTX keeps track of that, but we need to free EVP_MD_CTX first and then proceed to freeing EVP_PKEY_CTX and maybe the key it has been managing.
tl;dr: manual memory management is hard.
This sleeper bug is presumed to be responsible for occasional segfaults when running JsThemis. Interestingly, the crashes do not reproduce with any other wrapper. Furthermore, BoringSSL code uses correct freeing order since the beginning. ""Coincidence? I don't think so"".",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,501,2019-07-18T14:36:35Z,2019-07-22T10:25:57Z,2019-07-22T11:03:04Z,MERGED,True,8,8,2,https://github.com/ilammy,Correctly free EVP_MD_CTX in OpenSSL,2,['core'],https://github.com/cossacklabs/themis/pull/501,https://github.com/ignatk,2,https://github.com/cossacklabs/themis/pull/501#issuecomment-512865554,"soter_sign_ctx_t structures store both EVP_MD_CTX (to keep the digest algorithm used for signatures) and EVP_PKEY_CTX (to keep the key used for signature). The key is actually shared between those structures but EVP_MD_CTX assumes ownership over it, with EVP_MD_CTX_destroy() freeing the key. EVP_PKEY structures are refcounted so sharing the key should be safe... if we make the correct precautions to avoid freeing the key after it has been freed. EVP_PKEY_CTX keeps track of that, but we need to free EVP_MD_CTX first and then proceed to freeing EVP_PKEY_CTX and maybe the key it has been managing.
tl;dr: manual memory management is hard.
This sleeper bug is presumed to be responsible for occasional segfaults when running JsThemis. Interestingly, the crashes do not reproduce with any other wrapper. Furthermore, BoringSSL code uses correct freeing order since the beginning. ""Coincidence? I don't think so"".",Maybe we should consider running tests under some kind of leak detector.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,501,2019-07-18T14:36:35Z,2019-07-22T10:25:57Z,2019-07-22T11:03:04Z,MERGED,True,8,8,2,https://github.com/ilammy,Correctly free EVP_MD_CTX in OpenSSL,2,['core'],https://github.com/cossacklabs/themis/pull/501,https://github.com/Lagovas,3,https://github.com/cossacklabs/themis/pull/501#issuecomment-513705828,"soter_sign_ctx_t structures store both EVP_MD_CTX (to keep the digest algorithm used for signatures) and EVP_PKEY_CTX (to keep the key used for signature). The key is actually shared between those structures but EVP_MD_CTX assumes ownership over it, with EVP_MD_CTX_destroy() freeing the key. EVP_PKEY structures are refcounted so sharing the key should be safe... if we make the correct precautions to avoid freeing the key after it has been freed. EVP_PKEY_CTX keeps track of that, but we need to free EVP_MD_CTX first and then proceed to freeing EVP_PKEY_CTX and maybe the key it has been managing.
tl;dr: manual memory management is hard.
This sleeper bug is presumed to be responsible for occasional segfaults when running JsThemis. Interestingly, the crashes do not reproduce with any other wrapper. Furthermore, BoringSSL code uses correct freeing order since the beginning. ""Coincidence? I don't think so"".",we already use valgrind for leak detection,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,502,2019-07-18T14:59:58Z,2019-07-22T14:45:31Z,2019-09-27T13:31:11Z,MERGED,True,95,4,1,https://github.com/ilammy,Test JsThemis with actual Node.js versions,5,"['infrastructure', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/502,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/502,"Workflow for testing JsThemis with multiple Node.js

It turns out that it's not enough to test JsThemis with Node.js that is bundled with the distribution we use (Ubuntu 16.04 LTS). This version is quite old and not really supported by Joyent. We should be testing with the modern version as well. Currently these are:

v8 — old LTS, still maintained
v10 — current LTS, recommended for users
v12 — next LTS, stable enough for evaluation

Add a dedicated workflow which will build and test JsThemis across these versions of Node.js. We use the NVM tool to manage Node.js installations.

Remove JsThemis tests from x86_64 workflow

Since JsThemis is now tested in its dedicated workflow there is no need to install Node.js and test JsThemis in the common x86_64 workflow. Remove this redundancy.","Workflow for testing JsThemis with multiple Node.js

It turns out that it's not enough to test JsThemis with Node.js that is bundled with the distribution we use (Ubuntu 16.04 LTS). This version is quite old and not really supported by Joyent. We should be testing with the modern version as well. Currently these are:

v8 — old LTS, still maintained
v10 — current LTS, recommended for users
v12 — next LTS, stable enough for evaluation

Add a dedicated workflow which will build and test JsThemis across these versions of Node.js. We use the NVM tool to manage Node.js installations.

Remove JsThemis tests from x86_64 workflow

Since JsThemis is now tested in its dedicated workflow there is no need to install Node.js and test JsThemis in the common x86_64 workflow. Remove this redundancy.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,502,2019-07-18T14:59:58Z,2019-07-22T14:45:31Z,2019-09-27T13:31:11Z,MERGED,True,95,4,1,https://github.com/ilammy,Test JsThemis with actual Node.js versions,5,"['infrastructure', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/502,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/502#issuecomment-513775787,"Workflow for testing JsThemis with multiple Node.js

It turns out that it's not enough to test JsThemis with Node.js that is bundled with the distribution we use (Ubuntu 16.04 LTS). This version is quite old and not really supported by Joyent. We should be testing with the modern version as well. Currently these are:

v8 — old LTS, still maintained
v10 — current LTS, recommended for users
v12 — next LTS, stable enough for evaluation

Add a dedicated workflow which will build and test JsThemis across these versions of Node.js. We use the NVM tool to manage Node.js installations.

Remove JsThemis tests from x86_64 workflow

Since JsThemis is now tested in its dedicated workflow there is no need to install Node.js and test JsThemis in the common x86_64 workflow. Remove this redundancy.",You can see on CircleCI that the build is currently failing for Node.js 12 (as expected). Watch me merge PR #499 into master and then here which should fix that.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,503,2019-07-19T15:01:30Z,2019-07-22T09:48:20Z,2019-07-22T11:03:17Z,MERGED,True,21,12,1,https://github.com/ilammy,Install RVM via get.rvm.io,2,"['W-RbThemis :diamonds:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/503,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/503,"Unfortunately, latest updates to RVM installer has broken the PPA package that we are using to install RVM into the system. Versions 1.29.9+ are broken when installing in environment with sudo so we can't use it until this issue is fixed.
Instead of installing RVM into the system in multi-user mode, install RVM for the single user as instructed by RVM docs. Make sure to select system Ruby installation after that.
Also, RubyThemis gem is called rbthemis (renamed from rubythemis). Makefile target for it installation is also called rbthemis_install, with the old name being deprecated. Use the new name on CircleCI.

Our builds have been red recently due to that issue with rvm package. This change should make them green again.","Unfortunately, latest updates to RVM installer has broken the PPA package that we are using to install RVM into the system. Versions 1.29.9+ are broken when installing in environment with sudo so we can't use it until this issue is fixed.
Instead of installing RVM into the system in multi-user mode, install RVM for the single user as instructed by RVM docs. Make sure to select system Ruby installation after that.
Also, RubyThemis gem is called rbthemis (renamed from rubythemis). Makefile target for it installation is also called rbthemis_install, with the old name being deprecated. Use the new name on CircleCI.

Our builds have been red recently due to that issue with rvm package. This change should make them green again.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,504,2019-07-22T11:05:35Z,2019-07-22T12:16:33Z,2019-07-22T12:16:38Z,MERGED,True,26,2,1,https://github.com/ilammy,Redundant key server pools,2,['infrastructure'],https://github.com/cossacklabs/themis/pull/504,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/504,"RVM installation added in PR #503 requires PGP keys used by RVM to be available. We pull those from a public key server pool. However, using just ""pool.sks-keyservers.net"" as recommended by RVM documentation seems to be too unreliable for CI setup. It works fine for singular installations, but when deployed to CircleCI pool-selected servers are often unavailable, time out, and break our builds. Instead of using a single server try multiple ones for each key that we wish to request.","RVM installation added in PR #503 requires PGP keys used by RVM to be available. We pull those from a public key server pool. However, using just ""pool.sks-keyservers.net"" as recommended by RVM documentation seems to be too unreliable for CI setup. It works fine for singular installations, but when deployed to CircleCI pool-selected servers are often unavailable, time out, and break our builds. Instead of using a single server try multiple ones for each key that we wish to request.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,505,2019-07-22T16:38:25Z,2019-07-23T15:30:28Z,2019-09-27T00:01:26Z,MERGED,True,1,0,2,https://github.com/ilammy,Prepare for Go 1.11 modules,2,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/505,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/505,"Initialize go.mod file to support Go 1.11 modules. We don't have any non-standard dependencies so our go.mod and go.sum are mostly empty.
Having this file in the repository will allow users to fetch GoThemis using module system, pin versions, etc.
Since GoThemis and Themis core are still v0.XX, we can ignore all ""v2+ modules"" thingies in Golang. From semver point of view Themis has major version v0 and there are no compatibility guarantees between versions.
Note that modules are not immediately available with versioning. We still need to release v0.12 and tag it in a proper way.","Initialize go.mod file to support Go 1.11 modules. We don't have any non-standard dependencies so our go.mod and go.sum are mostly empty.
Having this file in the repository will allow users to fetch GoThemis using module system, pin versions, etc.
Since GoThemis and Themis core are still v0.XX, we can ignore all ""v2+ modules"" thingies in Golang. From semver point of view Themis has major version v0 and there are no compatibility guarantees between versions.
Note that modules are not immediately available with versioning. We still need to release v0.12 and tag it in a proper way.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,505,2019-07-22T16:38:25Z,2019-07-23T15:30:28Z,2019-09-27T00:01:26Z,MERGED,True,1,0,2,https://github.com/ilammy,Prepare for Go 1.11 modules,2,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/505,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/505#issuecomment-514136916,"Initialize go.mod file to support Go 1.11 modules. We don't have any non-standard dependencies so our go.mod and go.sum are mostly empty.
Having this file in the repository will allow users to fetch GoThemis using module system, pin versions, etc.
Since GoThemis and Themis core are still v0.XX, we can ignore all ""v2+ modules"" thingies in Golang. From semver point of view Themis has major version v0 and there are no compatibility guarantees between versions.
Note that modules are not immediately available with versioning. We still need to release v0.12 and tag it in a proper way.","I'm not a Go master, it's all up to @Lagovas",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,505,2019-07-22T16:38:25Z,2019-07-23T15:30:28Z,2019-09-27T00:01:26Z,MERGED,True,1,0,2,https://github.com/ilammy,Prepare for Go 1.11 modules,2,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/505,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/505#issuecomment-535728500,"Initialize go.mod file to support Go 1.11 modules. We don't have any non-standard dependencies so our go.mod and go.sum are mostly empty.
Having this file in the repository will allow users to fetch GoThemis using module system, pin versions, etc.
Since GoThemis and Themis core are still v0.XX, we can ignore all ""v2+ modules"" thingies in Golang. From semver point of view Themis has major version v0 and there are no compatibility guarantees between versions.
Note that modules are not immediately available with versioning. We still need to release v0.12 and tag it in a proper way.",shall we update Go examples or installation guide to show that modules are supported?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,506,2019-07-22T18:30:00Z,2019-07-23T15:30:54Z,2019-07-23T15:30:59Z,MERGED,True,56,11,1,https://github.com/ilammy,DEB & RPM packages for ThemisPP,1,"['W-ThemisPP :crossed_swords:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/506,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/506,"Introduce DEB and RPM packages for ThemisPP. Since C++ is system language related to C, it's natural to provide our C++ wrapper as a system package. The wrapper requires Themis Core to be installed so this plays out nicely in the end.
Alternatively, we can provide a package for various other package managers for C++ (such as Conan, vcpkg, CMake, Meson, and a zillion others) but there isn't much demand for that, and we'd have to provide Themis Core there as well for proper versioning and dependencies. So let's not complicate it more than necessary.
Since ThemisPP is header-only we provide development packages: libthemispp-dev and libthemispp-devel. There is no libthemispp package that's required at runtime: just libthemis is enough.
While we're here, cleanup some name duplication in package names and dependencies.
Packaging isn't tested by CircleCI. I have verified this manually on Ubuntu 16.04 and CentOS 7, but only @shadinua knows whether this will work with BuildBot.","Introduce DEB and RPM packages for ThemisPP. Since C++ is system language related to C, it's natural to provide our C++ wrapper as a system package. The wrapper requires Themis Core to be installed so this plays out nicely in the end.
Alternatively, we can provide a package for various other package managers for C++ (such as Conan, vcpkg, CMake, Meson, and a zillion others) but there isn't much demand for that, and we'd have to provide Themis Core there as well for proper versioning and dependencies. So let's not complicate it more than necessary.
Since ThemisPP is header-only we provide development packages: libthemispp-dev and libthemispp-devel. There is no libthemispp package that's required at runtime: just libthemis is enough.
While we're here, cleanup some name duplication in package names and dependencies.
Packaging isn't tested by CircleCI. I have verified this manually on Ubuntu 16.04 and CentOS 7, but only @shadinua knows whether this will work with BuildBot.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,506,2019-07-22T18:30:00Z,2019-07-23T15:30:54Z,2019-07-23T15:30:59Z,MERGED,True,56,11,1,https://github.com/ilammy,DEB & RPM packages for ThemisPP,1,"['W-ThemisPP :crossed_swords:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/506,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/506#issuecomment-514132336,"Introduce DEB and RPM packages for ThemisPP. Since C++ is system language related to C, it's natural to provide our C++ wrapper as a system package. The wrapper requires Themis Core to be installed so this plays out nicely in the end.
Alternatively, we can provide a package for various other package managers for C++ (such as Conan, vcpkg, CMake, Meson, and a zillion others) but there isn't much demand for that, and we'd have to provide Themis Core there as well for proper versioning and dependencies. So let's not complicate it more than necessary.
Since ThemisPP is header-only we provide development packages: libthemispp-dev and libthemispp-devel. There is no libthemispp package that's required at runtime: just libthemis is enough.
While we're here, cleanup some name duplication in package names and dependencies.
Packaging isn't tested by CircleCI. I have verified this manually on Ubuntu 16.04 and CentOS 7, but only @shadinua knows whether this will work with BuildBot.",We will need to update Install documentation and to show users the easy way to install ThemisPP,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,507,2019-07-23T13:38:56Z,2019-07-23T15:31:27Z,2019-07-23T15:31:32Z,MERGED,True,35,0,3,https://github.com/ilammy,Asynchronous WasmThemis initialization,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/507,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/507,"It turns out that WebAssembly is compiled and loaded asynchronously. There is an option for synchronous compilation, but Chrome and Electron support only asynchronous loading. This means that one cannot simply call C functions. We need to wait for WebAssembly to be compiled and Emscripten runtime to boot. This is performed automatically if the whole application is compiled by Emscripten, but Themis is a library.
Emscripten provides an onRuntimeInitialized callback which is called when Emscripten startup is complete and C functions can be called. Expose an interface to this callback as JavaScript promise which is resolved once initialization is complete. The users should call Themis functions only after this promise is resolved. (Alternatively, they can wait for a second or two.)
This behavior is not reproduced by unit tests because Mocha launches asynchronously too and it manages to start testing after WasmThemis loading is complete. But we can test that the promise is resolved.","It turns out that WebAssembly is compiled and loaded asynchronously. There is an option for synchronous compilation, but Chrome and Electron support only asynchronous loading. This means that one cannot simply call C functions. We need to wait for WebAssembly to be compiled and Emscripten runtime to boot. This is performed automatically if the whole application is compiled by Emscripten, but Themis is a library.
Emscripten provides an onRuntimeInitialized callback which is called when Emscripten startup is complete and C functions can be called. Expose an interface to this callback as JavaScript promise which is resolved once initialization is complete. The users should call Themis functions only after this promise is resolved. (Alternatively, they can wait for a second or two.)
This behavior is not reproduced by unit tests because Mocha launches asynchronously too and it manages to start testing after WasmThemis loading is complete. But we can test that the promise is resolved.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,507,2019-07-23T13:38:56Z,2019-07-23T15:31:27Z,2019-07-23T15:31:32Z,MERGED,True,35,0,3,https://github.com/ilammy,Asynchronous WasmThemis initialization,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/507,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/507#issuecomment-514231782,"It turns out that WebAssembly is compiled and loaded asynchronously. There is an option for synchronous compilation, but Chrome and Electron support only asynchronous loading. This means that one cannot simply call C functions. We need to wait for WebAssembly to be compiled and Emscripten runtime to boot. This is performed automatically if the whole application is compiled by Emscripten, but Themis is a library.
Emscripten provides an onRuntimeInitialized callback which is called when Emscripten startup is complete and C functions can be called. Expose an interface to this callback as JavaScript promise which is resolved once initialization is complete. The users should call Themis functions only after this promise is resolved. (Alternatively, they can wait for a second or two.)
This behavior is not reproduced by unit tests because Mocha launches asynchronously too and it manages to start testing after WasmThemis loading is complete. But we can test that the promise is resolved.",we should not forget to warn users in docs that they should use themis wasm only after initialization and onRuntimeInitialized call or they will take error of usage uninitialized wasm function,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,507,2019-07-23T13:38:56Z,2019-07-23T15:31:27Z,2019-07-23T15:31:32Z,MERGED,True,35,0,3,https://github.com/ilammy,Asynchronous WasmThemis initialization,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/507,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/507#issuecomment-514260263,"It turns out that WebAssembly is compiled and loaded asynchronously. There is an option for synchronous compilation, but Chrome and Electron support only asynchronous loading. This means that one cannot simply call C functions. We need to wait for WebAssembly to be compiled and Emscripten runtime to boot. This is performed automatically if the whole application is compiled by Emscripten, but Themis is a library.
Emscripten provides an onRuntimeInitialized callback which is called when Emscripten startup is complete and C functions can be called. Expose an interface to this callback as JavaScript promise which is resolved once initialization is complete. The users should call Themis functions only after this promise is resolved. (Alternatively, they can wait for a second or two.)
This behavior is not reproduced by unit tests because Mocha launches asynchronously too and it manages to start testing after WasmThemis loading is complete. But we can test that the promise is resolved.","Sure thing, it will be in the docs.
The error message usually looks like this:
Assertion failed: you need to wait for the runtime to be ready (e.g. wait for main() to be called)

wasm-themis/src/libthemis.js:117
      throw ex;
      ^
abort(""Assertion failed: you need to wait for the runtime to be ready (e.g. wait for main() to be called)"") at Error
    at jsStackTrace (wasm-themis/src/libthemis.js:1067:13)
    at stackTrace (wasm-themis/src/libthemis.js:1084:12)
    at abort (wasm-themis/src/libthemis.js:5641:44)
    at assert (wasm-themis/src/libthemis.js:498:5)
    at Array.Module.stackAlloc (wasm-themis/src/libthemis.js:5328:3)
    at Object.allocate (wasm-themis/src/libthemis.js:616:29)
    at generateECKeyPair (wasm-themis/src/secure_keygen.js:125:37)
    at new KeyPair (wasm-themis/src/secure_keygen.js:110:27)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,508,2019-07-23T15:49:20Z,2019-07-23T16:42:10Z,2019-07-23T16:43:40Z,MERGED,True,1,724,3,https://github.com/ilammy,"Remove ""rubythemis"" gem",1,['W-RbThemis :diamonds:'],https://github.com/cossacklabs/themis/pull/508,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/508,"rubythemis name has been deprecated in favor of rbthemis since Themis 0.11 and is scheduled for removal in 0.12 which is close. Drop the old gem, deprecation warnings, and Makefile targets.","rubythemis name has been deprecated in favor of rbthemis since Themis 0.11 and is scheduled for removal in 0.12 which is close. Drop the old gem, deprecation warnings, and Makefile targets.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,509,2019-07-24T12:42:35Z,2019-07-25T10:55:30Z,2019-07-25T11:33:33Z,MERGED,True,10,3,3,https://github.com/ilammy,Export Emscripten runtime for the Web,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/509,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/509,"Some runtime environments look like Node.js, but are not Node.js which confuses Emscripten loader code. I'm talking about JavaScript bundlers that are used for Web and Electron apps. These things make the code believe that it can use require() for importing and module.exports for exporting things, and expect this be the case.
However, Emscripten believes that it is smarter, detects that it's not running in Node.js environment, and just uses Module for exports. This breaks bundler's expectation and various Emscripten runtime functions (like allocate()) end up not being exported, resulting in weird TypeErrors when WasmThemis code tries calling them.
This can be avoided by exporting whatever Emscripten wants to export in Node.js style via ""module.exports"". We can insert this code into generated file by using --pre-js flag of emcc.
Since now we have more than one file for Emscripten compilation, move them all into a subdirectory to keep the root directory tidy.","Some runtime environments look like Node.js, but are not Node.js which confuses Emscripten loader code. I'm talking about JavaScript bundlers that are used for Web and Electron apps. These things make the code believe that it can use require() for importing and module.exports for exporting things, and expect this be the case.
However, Emscripten believes that it is smarter, detects that it's not running in Node.js environment, and just uses Module for exports. This breaks bundler's expectation and various Emscripten runtime functions (like allocate()) end up not being exported, resulting in weird TypeErrors when WasmThemis code tries calling them.
This can be avoided by exporting whatever Emscripten wants to export in Node.js style via ""module.exports"". We can insert this code into generated file by using --pre-js flag of emcc.
Since now we have more than one file for Emscripten compilation, move them all into a subdirectory to keep the root directory tidy.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,509,2019-07-24T12:42:35Z,2019-07-25T10:55:30Z,2019-07-25T11:33:33Z,MERGED,True,10,3,3,https://github.com/ilammy,Export Emscripten runtime for the Web,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/509,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/509#issuecomment-514669315,"Some runtime environments look like Node.js, but are not Node.js which confuses Emscripten loader code. I'm talking about JavaScript bundlers that are used for Web and Electron apps. These things make the code believe that it can use require() for importing and module.exports for exporting things, and expect this be the case.
However, Emscripten believes that it is smarter, detects that it's not running in Node.js environment, and just uses Module for exports. This breaks bundler's expectation and various Emscripten runtime functions (like allocate()) end up not being exported, resulting in weird TypeErrors when WasmThemis code tries calling them.
This can be avoided by exporting whatever Emscripten wants to export in Node.js style via ""module.exports"". We can insert this code into generated file by using --pre-js flag of emcc.
Since now we have more than one file for Emscripten compilation, move them all into a subdirectory to keep the root directory tidy.","@Lagovas,

how you detect this problem?

I tried using WasmThemis in web browser and immediately ran into an issue with libthemis.js file not exporting the functions it should export. Electron apps had the same behavior (but they were fine if I told Emscripten to produce Node.js-only code).
With these changes developers can use popular tools like Browserify or webpack to bundle all JavaScript files for consumption by web browsers and it will just work (provided that libthemis.wasm file is served together with the resulting *.js file). There are many other bundlers, but these two are the most popular ones. I have tested these two, the Electron app bundler, and plain Node.js.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,510,2019-07-25T12:28:58Z,2019-07-26T11:57:40Z,2019-07-26T11:57:49Z,MERGED,True,50,44,3,https://github.com/ilammy,Test WasmThemis with multiple Node.js installations,2,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/510,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/510,"Currently we run WasmThemis test suite only against Node.js bundled with Emscripten. As of now this is some Node.js v8 version. However, we'd like to be sure that WasmThemis support all Node.js versions recommended for usage.
Move WasmThemis test suite invocation to the jsthemis workflow on CircleCI. There we have multiple Node.js versions installed and can verify WasmThemis against all of them.
Emscripten installation is needed only for WasmThemis so it can be moved to jsthemis workflow as well, it's no longer necessary in the x86_64 workflow. Note that Emscripten SDK requires Python so we add that to dependencies.
Themis Core test suite (make test) is run in Emscripten environment only. We don't exercise it in multiple Node.js environments where we test WasmThemis. Current build system will try rebuilding test binaries outside of Emscripten environment (using native C compiler), which will obviously fail.
Finally, tweak execution step names as we're testing not just JsThemis now.

Fix WasmThemis tests for Node.js v10+

Unfortunately, these cute ball references have to go. assert module in Node.js v10+ has some issues with throwing raw values. Throw and catch a proper Error instance instead.","Currently we run WasmThemis test suite only against Node.js bundled with Emscripten. As of now this is some Node.js v8 version. However, we'd like to be sure that WasmThemis support all Node.js versions recommended for usage.
Move WasmThemis test suite invocation to the jsthemis workflow on CircleCI. There we have multiple Node.js versions installed and can verify WasmThemis against all of them.
Emscripten installation is needed only for WasmThemis so it can be moved to jsthemis workflow as well, it's no longer necessary in the x86_64 workflow. Note that Emscripten SDK requires Python so we add that to dependencies.
Themis Core test suite (make test) is run in Emscripten environment only. We don't exercise it in multiple Node.js environments where we test WasmThemis. Current build system will try rebuilding test binaries outside of Emscripten environment (using native C compiler), which will obviously fail.
Finally, tweak execution step names as we're testing not just JsThemis now.

Fix WasmThemis tests for Node.js v10+

Unfortunately, these cute ball references have to go. assert module in Node.js v10+ has some issues with throwing raw values. Throw and catch a proper Error instance instead.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,511,2019-07-25T12:32:01Z,2019-07-26T13:19:13Z,2019-07-26T13:19:17Z,MERGED,True,278,12,15,https://github.com/ilammy,Integration tests for WasmThemis,5,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/511,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/511,"Add testing tools for WasmThemis. I tried using Node.js async style here because we have to deal with themis.initialized promise anyway. It is a bit more verbose than synchronous style in JsThemis tools but whatever.
Integrate those tools into integration testing framework. This is easy: just launch then with node like JsThemis ones and we're done. Command line syntax is the same.
Now come the hard parts. First of all, WasmThemis does not support the ancient Node.js version bundled with Ubuntu. Node.js v4 does not have WebAssembly support so we cannot use that. Upgrade Node.js to v10 from NVM so that we can run integration tests properly. (JsThemis is still tested with system Node.js in jsthemis workflow.)
Furthermore, WasmThemis requires Emscripten for building so copy the installation instructions from jsthemis workflow into integration. Emscripten wants to use its own Node.js for building so disable NVM while we're doing that and reenable Node.js v10 back after that.

Move JsThemis integration tools into a subdirectory

We are going to have two sets of tools written in JavaScript (JsThemis and WasmThemis). Move the old tools into a subdirectory under tools/js so that we can have a nice hierarchy there.

Makefile targets for WasmThemis installation

Provide some utility targets to install and uninstall WasmThemis into current directory. These are not really useful for our users, but they will make CI's life a bit easier.
Rename the main WasmThemis target to wasmthemis in order to be consinstent with installation names.","Add testing tools for WasmThemis. I tried using Node.js async style here because we have to deal with themis.initialized promise anyway. It is a bit more verbose than synchronous style in JsThemis tools but whatever.
Integrate those tools into integration testing framework. This is easy: just launch then with node like JsThemis ones and we're done. Command line syntax is the same.
Now come the hard parts. First of all, WasmThemis does not support the ancient Node.js version bundled with Ubuntu. Node.js v4 does not have WebAssembly support so we cannot use that. Upgrade Node.js to v10 from NVM so that we can run integration tests properly. (JsThemis is still tested with system Node.js in jsthemis workflow.)
Furthermore, WasmThemis requires Emscripten for building so copy the installation instructions from jsthemis workflow into integration. Emscripten wants to use its own Node.js for building so disable NVM while we're doing that and reenable Node.js v10 back after that.

Move JsThemis integration tools into a subdirectory

We are going to have two sets of tools written in JavaScript (JsThemis and WasmThemis). Move the old tools into a subdirectory under tools/js so that we can have a nice hierarchy there.

Makefile targets for WasmThemis installation

Provide some utility targets to install and uninstall WasmThemis into current directory. These are not really useful for our users, but they will make CI's life a bit easier.
Rename the main WasmThemis target to wasmthemis in order to be consinstent with installation names.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,512,2019-07-25T14:33:46Z,2019-07-26T13:49:16Z,2019-07-26T13:49:20Z,MERGED,True,13,10,5,https://github.com/ilammy,Package libraries to arch-specific directories,2,['installation'],https://github.com/cossacklabs/themis/pull/512,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/512,"Let's install libraries into the directories expected by Linux distributions when we prepare packages.
Debian-based systems use multiarch approach with shared libraries installed under /usr/lib/${compiler-target-triple}. This allows installation of libraries for multiple architectures simultaneously, hence the name. GCC makes it easy to obtain the target triple.
CentOS uses Filesystem Hierarchy Standard (well, it is Red Hat) which tells that packages should install libraries to /usr/lib64 on 64-bit systems and to /usr/lib on 32-bit ones. We support only one 64-bit architecture on Linux machines so we can check for it.
With these changes tools like pkg-config should work automatically because all libraries are installed to their expected places.","Let's install libraries into the directories expected by Linux distributions when we prepare packages.
Debian-based systems use multiarch approach with shared libraries installed under /usr/lib/${compiler-target-triple}. This allows installation of libraries for multiple architectures simultaneously, hence the name. GCC makes it easy to obtain the target triple.
CentOS uses Filesystem Hierarchy Standard (well, it is Red Hat) which tells that packages should install libraries to /usr/lib64 on 64-bit systems and to /usr/lib on 32-bit ones. We support only one 64-bit architecture on Linux machines so we can check for it.
With these changes tools like pkg-config should work automatically because all libraries are installed to their expected places.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,512,2019-07-25T14:33:46Z,2019-07-26T13:49:16Z,2019-07-26T13:49:20Z,MERGED,True,13,10,5,https://github.com/ilammy,Package libraries to arch-specific directories,2,['installation'],https://github.com/cossacklabs/themis/pull/512,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/512#issuecomment-515073131,"Let's install libraries into the directories expected by Linux distributions when we prepare packages.
Debian-based systems use multiarch approach with shared libraries installed under /usr/lib/${compiler-target-triple}. This allows installation of libraries for multiple architectures simultaneously, hence the name. GCC makes it easy to obtain the target triple.
CentOS uses Filesystem Hierarchy Standard (well, it is Red Hat) which tells that packages should install libraries to /usr/lib64 on 64-bit systems and to /usr/lib on 32-bit ones. We support only one 64-bit architecture on Linux machines so we can check for it.
With these changes tools like pkg-config should work automatically because all libraries are installed to their expected places.",does this affect on compatibility for users that already have Themis installed?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,512,2019-07-25T14:33:46Z,2019-07-26T13:49:16Z,2019-07-26T13:49:20Z,MERGED,True,13,10,5,https://github.com/ilammy,Package libraries to arch-specific directories,2,['installation'],https://github.com/cossacklabs/themis/pull/512,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/512#issuecomment-515108325,"Let's install libraries into the directories expected by Linux distributions when we prepare packages.
Debian-based systems use multiarch approach with shared libraries installed under /usr/lib/${compiler-target-triple}. This allows installation of libraries for multiple architectures simultaneously, hence the name. GCC makes it easy to obtain the target triple.
CentOS uses Filesystem Hierarchy Standard (well, it is Red Hat) which tells that packages should install libraries to /usr/lib64 on 64-bit systems and to /usr/lib on 32-bit ones. We support only one 64-bit architecture on Linux machines so we can check for it.
With these changes tools like pkg-config should work automatically because all libraries are installed to their expected places.","@vixentael,

does this affect on compatibility for users that already have Themis installed?

No, it does not. When upgrading Themis package 0.11 → 0.12 the package manager will remove the libraries from their old location and will put them into the new location. Both locations are in the search paths so any existing software using Themis will just find the libraries in their new locations. The old locations that we have been using are compatibility locations, and the new ones are canonical, proper locations.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,513,2019-07-26T06:06:06Z,2019-07-26T13:49:41Z,2019-07-26T13:49:46Z,MERGED,True,2,7,3,https://github.com/ilammy,Prepare for publishing WasmThemis,3,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/513,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/513,"Miscellaneous minor changes to packaging and packaged files.


Remove Browserify reference from README
This is not the only bundler in existance. We're going to discuss bundling in the documentation so we don't need this here. Supposedly, Web developers know what to do with npm packages to get them shipped.


Update package.json for wasm-themis
Remove private option so that the package can be published in public npm repositories.
Update homepage to an actual home page of Themis, not just README which is reachable via the repository link.


Update .npmignore
We have moved some of the internal build files but did not update .npmignore so that they won't get packaged in the release build.","Miscellaneous minor changes to packaging and packaged files.


Remove Browserify reference from README
This is not the only bundler in existance. We're going to discuss bundling in the documentation so we don't need this here. Supposedly, Web developers know what to do with npm packages to get them shipped.


Update package.json for wasm-themis
Remove private option so that the package can be published in public npm repositories.
Update homepage to an actual home page of Themis, not just README which is reachable via the repository link.


Update .npmignore
We have moved some of the internal build files but did not update .npmignore so that they won't get packaged in the release build.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,518,2019-08-06T15:43:48Z,2019-08-06T22:05:10Z,2019-08-06T22:05:14Z,MERGED,True,85,0,1,https://github.com/karenswry,Suggesting Code of Conduct,1,['docs :books:'],https://github.com/cossacklabs/themis/pull/518,https://github.com/karenswry,1,https://github.com/cossacklabs/themis/pull/518,"based on Contributor Covenant, version 1.4, with customised changes in the beginning","based on Contributor Covenant, version 1.4, with customised changes in the beginning",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,519,2019-08-06T22:06:55Z,2019-08-07T11:17:51Z,2019-08-07T11:17:55Z,MERGED,True,2,2,1,https://github.com/vixentael,php installer hash update,1,"['W-PHPThemis :elephant:', 'tests']",https://github.com/cossacklabs/themis/pull/519,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/519,yet another manual php installer update :),yet another manual php installer update :),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,523,2019-09-02T11:51:10Z,2019-09-03T15:51:45Z,2019-09-04T07:44:38Z,MERGED,True,2,2,2,https://github.com/ilammy,Search build directory first when linking,1,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/523,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/523,"Make sure that we look into our build directory before /usr/local/lib or any other system directories. Developer builds should use newly built libraries even if the system already has Themis installed.
If we look into /usr/local/lib first then developer builds may fail on macOS which has Themis installed to /usr/local/lib by default. This is important for correct dependency information to be recorded in the libraries (especially if the ABI changes one day).","Make sure that we look into our build directory before /usr/local/lib or any other system directories. Developer builds should use newly built libraries even if the system already has Themis installed.
If we look into /usr/local/lib first then developer builds may fail on macOS which has Themis installed to /usr/local/lib by default. This is important for correct dependency information to be recorded in the libraries (especially if the ABI changes one day).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,523,2019-09-02T11:51:10Z,2019-09-03T15:51:45Z,2019-09-04T07:44:38Z,MERGED,True,2,2,2,https://github.com/ilammy,Search build directory first when linking,1,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/523,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/523#issuecomment-527129699,"Make sure that we look into our build directory before /usr/local/lib or any other system directories. Developer builds should use newly built libraries even if the system already has Themis installed.
If we look into /usr/local/lib first then developer builds may fail on macOS which has Themis installed to /usr/local/lib by default. This is important for correct dependency information to be recorded in the libraries (especially if the ABI changes one day).",worked for me!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,524,2019-09-04T09:29:51Z,2019-09-05T11:24:13Z,2019-09-05T11:24:17Z,MERGED,True,185,212,2,https://github.com/ilammy,Plug leaks in RSA key imports,4,['core'],https://github.com/cossacklabs/themis/pull/524,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/524,"Error path of soter_rsa_{pub,priv}_key_to_engine_specific() does not free various BIGNUM components of RSA keys. This may cause memory leaks if OpenSSL fails to read or import key data. Use goto fail pattern to handle error path properly.
Also, add error handling for RSA_set0_key() and its siblings which may fail (though, it's very unlikely in our case).
Do this for both OpenSSL and BoringSSL backends, which are similar but not identical.
Also, avoid direct access to RSA fields in BoringSSL backend. Historically it was allowed by OpenSSL so BoringSSL keeps the fields accessible. However, direct access has been deprecated in favor of accessor functions. OpenSSL 1.1+ does not allow direct field access at all. Replace direct accesses in BoringSSL with functions too. (Here we change only functions immediately related to memory leaks. There are more direct accesses throughout the code base. They will be fixed later.)
This should resolve issues #514 and #515.","Error path of soter_rsa_{pub,priv}_key_to_engine_specific() does not free various BIGNUM components of RSA keys. This may cause memory leaks if OpenSSL fails to read or import key data. Use goto fail pattern to handle error path properly.
Also, add error handling for RSA_set0_key() and its siblings which may fail (though, it's very unlikely in our case).
Do this for both OpenSSL and BoringSSL backends, which are similar but not identical.
Also, avoid direct access to RSA fields in BoringSSL backend. Historically it was allowed by OpenSSL so BoringSSL keeps the fields accessible. However, direct access has been deprecated in favor of accessor functions. OpenSSL 1.1+ does not allow direct field access at all. Replace direct accesses in BoringSSL with functions too. (Here we change only functions immediately related to memory leaks. There are more direct accesses throughout the code base. They will be fixed later.)
This should resolve issues #514 and #515.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,524,2019-09-04T09:29:51Z,2019-09-05T11:24:13Z,2019-09-05T11:24:17Z,MERGED,True,185,212,2,https://github.com/ilammy,Plug leaks in RSA key imports,4,['core'],https://github.com/cossacklabs/themis/pull/524,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/524#issuecomment-527822574,"Error path of soter_rsa_{pub,priv}_key_to_engine_specific() does not free various BIGNUM components of RSA keys. This may cause memory leaks if OpenSSL fails to read or import key data. Use goto fail pattern to handle error path properly.
Also, add error handling for RSA_set0_key() and its siblings which may fail (though, it's very unlikely in our case).
Do this for both OpenSSL and BoringSSL backends, which are similar but not identical.
Also, avoid direct access to RSA fields in BoringSSL backend. Historically it was allowed by OpenSSL so BoringSSL keeps the fields accessible. However, direct access has been deprecated in favor of accessor functions. OpenSSL 1.1+ does not allow direct field access at all. Replace direct accesses in BoringSSL with functions too. (Here we change only functions immediately related to memory leaks. There are more direct accesses throughout the code base. They will be fixed later.)
This should resolve issues #514 and #515.",I'd wait for a review by @ignatk – our resident OpenSSL guru – before merging this.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,524,2019-09-04T09:29:51Z,2019-09-05T11:24:13Z,2019-09-05T11:24:17Z,MERGED,True,185,212,2,https://github.com/ilammy,Plug leaks in RSA key imports,4,['core'],https://github.com/cossacklabs/themis/pull/524,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/524#issuecomment-527887976,"Error path of soter_rsa_{pub,priv}_key_to_engine_specific() does not free various BIGNUM components of RSA keys. This may cause memory leaks if OpenSSL fails to read or import key data. Use goto fail pattern to handle error path properly.
Also, add error handling for RSA_set0_key() and its siblings which may fail (though, it's very unlikely in our case).
Do this for both OpenSSL and BoringSSL backends, which are similar but not identical.
Also, avoid direct access to RSA fields in BoringSSL backend. Historically it was allowed by OpenSSL so BoringSSL keeps the fields accessible. However, direct access has been deprecated in favor of accessor functions. OpenSSL 1.1+ does not allow direct field access at all. Replace direct accesses in BoringSSL with functions too. (Here we change only functions immediately related to memory leaks. There are more direct accesses throughout the code base. They will be fixed later.)
This should resolve issues #514 and #515.","@vixentael, uh... we can rename it into something less eerie. goto error, goto free, goto out, goto cleanup, etc. Do you like any of them?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,524,2019-09-04T09:29:51Z,2019-09-05T11:24:13Z,2019-09-05T11:24:17Z,MERGED,True,185,212,2,https://github.com/ilammy,Plug leaks in RSA key imports,4,['core'],https://github.com/cossacklabs/themis/pull/524,https://github.com/outspace,4,https://github.com/cossacklabs/themis/pull/524#issuecomment-527927699,"Error path of soter_rsa_{pub,priv}_key_to_engine_specific() does not free various BIGNUM components of RSA keys. This may cause memory leaks if OpenSSL fails to read or import key data. Use goto fail pattern to handle error path properly.
Also, add error handling for RSA_set0_key() and its siblings which may fail (though, it's very unlikely in our case).
Do this for both OpenSSL and BoringSSL backends, which are similar but not identical.
Also, avoid direct access to RSA fields in BoringSSL backend. Historically it was allowed by OpenSSL so BoringSSL keeps the fields accessible. However, direct access has been deprecated in favor of accessor functions. OpenSSL 1.1+ does not allow direct field access at all. Replace direct accesses in BoringSSL with functions too. (Here we change only functions immediately related to memory leaks. There are more direct accesses throughout the code base. They will be fixed later.)
This should resolve issues #514 and #515.",Why you decided not to use BN_secure_new() for allocation?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,524,2019-09-04T09:29:51Z,2019-09-05T11:24:13Z,2019-09-05T11:24:17Z,MERGED,True,185,212,2,https://github.com/ilammy,Plug leaks in RSA key imports,4,['core'],https://github.com/cossacklabs/themis/pull/524,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/524#issuecomment-527929706,"Error path of soter_rsa_{pub,priv}_key_to_engine_specific() does not free various BIGNUM components of RSA keys. This may cause memory leaks if OpenSSL fails to read or import key data. Use goto fail pattern to handle error path properly.
Also, add error handling for RSA_set0_key() and its siblings which may fail (though, it's very unlikely in our case).
Do this for both OpenSSL and BoringSSL backends, which are similar but not identical.
Also, avoid direct access to RSA fields in BoringSSL backend. Historically it was allowed by OpenSSL so BoringSSL keeps the fields accessible. However, direct access has been deprecated in favor of accessor functions. OpenSSL 1.1+ does not allow direct field access at all. Replace direct accesses in BoringSSL with functions too. (Here we change only functions immediately related to memory leaks. There are more direct accesses throughout the code base. They will be fixed later.)
This should resolve issues #514 and #515.","@vixentael, uh... we can rename it into something less eerie. goto error, goto free, goto out, goto cleanup, etc. Do you like any of them?

my objections were not based on the naming itself, but rather on a pattern :))
but it's more a joke-like comment, i'm ok with general approach.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,524,2019-09-04T09:29:51Z,2019-09-05T11:24:13Z,2019-09-05T11:24:17Z,MERGED,True,185,212,2,https://github.com/ilammy,Plug leaks in RSA key imports,4,['core'],https://github.com/cossacklabs/themis/pull/524,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/524#issuecomment-528267518,"Error path of soter_rsa_{pub,priv}_key_to_engine_specific() does not free various BIGNUM components of RSA keys. This may cause memory leaks if OpenSSL fails to read or import key data. Use goto fail pattern to handle error path properly.
Also, add error handling for RSA_set0_key() and its siblings which may fail (though, it's very unlikely in our case).
Do this for both OpenSSL and BoringSSL backends, which are similar but not identical.
Also, avoid direct access to RSA fields in BoringSSL backend. Historically it was allowed by OpenSSL so BoringSSL keeps the fields accessible. However, direct access has been deprecated in favor of accessor functions. OpenSSL 1.1+ does not allow direct field access at all. Replace direct accesses in BoringSSL with functions too. (Here we change only functions immediately related to memory leaks. There are more direct accesses throughout the code base. They will be fixed later.)
This should resolve issues #514 and #515.","@outspace,

Why you decided not to use BN_secure_new() for allocation?

I just mimicked the existing code. I forgot about your comment about BN_secure_new() in #514.
I'm not sure that it will actually improve security because Themis keys (which we import into OpenSSL) are not encrypted in any way and are stored in regular heap. Sure, we can copy them into OpenSSL's secure heap, but they are still accessible by other means.
Moreover, BN_secure_new() is not available in OpenSSL 1.0.2 which is still supported. And I believe there are many more allocations which could make use of secure heap capabilities. I'd suggest to leave this out of scope of this PR. I've created issue #526 to track this.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,525,2019-09-04T09:34:01Z,2019-09-05T11:24:41Z,2019-09-05T11:24:44Z,MERGED,True,9,7,2,https://github.com/ilammy,Avoid double-free errors in RSA key generation,3,['core'],https://github.com/cossacklabs/themis/pull/525,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/525,"We should not free pub_exp after we have successfully passed it into EVP_PKEY_CTX with EVP_PKEY_CTX_set_rsa_keygen_pubexp() call. Otherwise we'll free the same object twice when calling EVP_PKEY_CTX_free() later. This is actual for both OpenSSL and BoringSSL backends.
We also do not own pkey_ctx in soter_rsa_gen_key(). It is owned by the caller: soter_rsa_key_pair_gen_init(). We should not free it ourselves in case of errors. (And we should not use magic macros unless really necessary.)
This should resolve issues #516 and #517.","We should not free pub_exp after we have successfully passed it into EVP_PKEY_CTX with EVP_PKEY_CTX_set_rsa_keygen_pubexp() call. Otherwise we'll free the same object twice when calling EVP_PKEY_CTX_free() later. This is actual for both OpenSSL and BoringSSL backends.
We also do not own pkey_ctx in soter_rsa_gen_key(). It is owned by the caller: soter_rsa_key_pair_gen_init(). We should not free it ourselves in case of errors. (And we should not use magic macros unless really necessary.)
This should resolve issues #516 and #517.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,525,2019-09-04T09:34:01Z,2019-09-05T11:24:41Z,2019-09-05T11:24:44Z,MERGED,True,9,7,2,https://github.com/ilammy,Avoid double-free errors in RSA key generation,3,['core'],https://github.com/cossacklabs/themis/pull/525,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/525#issuecomment-527823799,"We should not free pub_exp after we have successfully passed it into EVP_PKEY_CTX with EVP_PKEY_CTX_set_rsa_keygen_pubexp() call. Otherwise we'll free the same object twice when calling EVP_PKEY_CTX_free() later. This is actual for both OpenSSL and BoringSSL backends.
We also do not own pkey_ctx in soter_rsa_gen_key(). It is owned by the caller: soter_rsa_key_pair_gen_init(). We should not free it ourselves in case of errors. (And we should not use magic macros unless really necessary.)
This should resolve issues #516 and #517.","Just like before, I'd wait for @ignatk's comments before merging this.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,527,2019-09-06T10:10:17Z,2019-09-16T09:05:11Z,2019-09-16T09:05:16Z,MERGED,True,255,206,6,https://github.com/ilammy,Cleanup Makefile,8,['infrastructure'],https://github.com/cossacklabs/themis/pull/527,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/527,"tl;dr:
make readable
Shuffle around various bits of the Makefile and group them up. This makes our 800-line Makefile a bit easier to navigate. This PR mostly moves stuff around and improves comments, but there are a couple of minor non-trivial changes:

err target is now gone. If the user specifies invalid crypto engine then make fails immediately
all target is now set as default in a different way
Correctly set CFLAGS when building on macOS (matters only for cross-compilation)","tl;dr:
make readable
Shuffle around various bits of the Makefile and group them up. This makes our 800-line Makefile a bit easier to navigate. This PR mostly moves stuff around and improves comments, but there are a couple of minor non-trivial changes:

err target is now gone. If the user specifies invalid crypto engine then make fails immediately
all target is now set as default in a different way
Correctly set CFLAGS when building on macOS (matters only for cross-compilation)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,528,2019-09-09T11:31:23Z,2019-09-16T09:04:24Z,2019-09-16T09:04:34Z,MERGED,True,2,2,2,https://github.com/ilammy,Update BoringSSL submodule,1,"['infrastructure', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/528,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/528,Our changes for Emscripten support have been merged into upstream. Switch back to Google's repository and update the submodule to use the latest version of BoringSSL.,Our changes for Emscripten support have been merged into upstream. Switch back to Google's repository and update the submodule to use the latest version of BoringSSL.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,531,2019-09-18T12:33:36Z,2019-09-18T15:54:05Z,2019-09-19T09:50:20Z,MERGED,True,336,28,1,https://github.com/ilammy,Update changelog for Themis 0.12.0,5,['docs :books:'],https://github.com/cossacklabs/themis/pull/531,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/531,"Can you keep a secret?
It seems we’re going to make a release soon.","Can you keep a secret?
It seems we’re going to make a release soon.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,531,2019-09-18T12:33:36Z,2019-09-18T15:54:05Z,2019-09-19T09:50:20Z,MERGED,True,336,28,1,https://github.com/ilammy,Update changelog for Themis 0.12.0,5,['docs :books:'],https://github.com/cossacklabs/themis/pull/531,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/531#issuecomment-532748672,"Can you keep a secret?
It seems we’re going to make a release soon.","Okay, this quickly becomes unwieldy. I thought GitHub’s interface has improved, but apparently it still is not well suited for direct edits.
I’ll merge this PR into pre-release-0.12.0 branch in the main repo and we can continue editing and reviewing there.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,535,2019-09-20T11:19:48Z,2019-09-23T17:15:53Z,2019-09-24T12:13:59Z,MERGED,True,478,318,16,https://github.com/ilammy,Correct EVP_PKEY ownership,8,"['core', 'C-BoringSSL', 'C-OpenSSL']",https://github.com/cossacklabs/themis/pull/535,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/535,"Memory management is hard, especially in C. Recent code reviews by @outspace have uncovered a bunch of issues with OpenSSL usage, in particular with EVP_PKEY and EVP_PKEY_CTX objects. Here we attempt to fix them. This PR should resolve issues #532, #533, #534.
I have manually reviewed EVP_PKEY and EVP_PKEY_CTX usage in our code and it seems to be okay now. @ignatk, could you please vet these changes?
The key point in most of the cases is that EVP_PKEY_CTX_new() does not transfer ownership over EVP_PKEY – it increments the refcount on it and we still have to free the original reference to avoid memory leaks. Sometimes we did an additional free in the destructor and this balanced all out, but it’s hardly an elegant solution.

We've got a bunch of functions which are currently doing tricky things with EVP_PKEY and EVP_PKEY_CTX objects, sometimes incorrectly. Let’s make sure that the code is readable, that we don't leak objects in the failure path, and that we don't free objects twice.
The general rules we follow are:


The function allocating the object is the one that frees it.


Unless the ownership is transferred to some other object, in which case we must not free the transferred object: the new owner is responsible for that. This includes constructors.


Set the field to NULL after freeing the object stored there. (It's okay to leave local variables as is.)


They all seem obvious in the hindsight, but the current code contains a number of violations in these rules. Partially, due to magic macros which make it seem like the error handling and resource management are correct, while in fact they are not. Therefore we get rid of the macros and replace them with plain old conditions.
We use ""goto"" pattern in order to make destruction of objects more structured. Yeah, ""goto"" and ""structured"" in the same sentence, but this is one of the few cases where using goto makes sense in C. (We'd use proper destructors in modern language, but we aren't.)
Since we use goto, this may have weird effects on variable scoping and initialization. Move all variable declarations to the top of the function and make sure that all local variables are initialized.
Some of these changes make Soter return more accurate error codes: for example, SOTER_INVALID_PARAMETER instead of SOTER_FAIL when the issue is actually in the parameter. Update the test suite to expect the new error codes. Strictly speaking, this does break backwards compatibility (or at least, may break someone's weird use case), but I feel that it's acceptable to make this change. Usually, applications don't check concrete error values, and if they do they expect to catch parameter errors that way and we should return appropriate error codes.","Memory management is hard, especially in C. Recent code reviews by @outspace have uncovered a bunch of issues with OpenSSL usage, in particular with EVP_PKEY and EVP_PKEY_CTX objects. Here we attempt to fix them. This PR should resolve issues #532, #533, #534.
I have manually reviewed EVP_PKEY and EVP_PKEY_CTX usage in our code and it seems to be okay now. @ignatk, could you please vet these changes?
The key point in most of the cases is that EVP_PKEY_CTX_new() does not transfer ownership over EVP_PKEY – it increments the refcount on it and we still have to free the original reference to avoid memory leaks. Sometimes we did an additional free in the destructor and this balanced all out, but it’s hardly an elegant solution.

We've got a bunch of functions which are currently doing tricky things with EVP_PKEY and EVP_PKEY_CTX objects, sometimes incorrectly. Let’s make sure that the code is readable, that we don't leak objects in the failure path, and that we don't free objects twice.
The general rules we follow are:


The function allocating the object is the one that frees it.


Unless the ownership is transferred to some other object, in which case we must not free the transferred object: the new owner is responsible for that. This includes constructors.


Set the field to NULL after freeing the object stored there. (It's okay to leave local variables as is.)


They all seem obvious in the hindsight, but the current code contains a number of violations in these rules. Partially, due to magic macros which make it seem like the error handling and resource management are correct, while in fact they are not. Therefore we get rid of the macros and replace them with plain old conditions.
We use ""goto"" pattern in order to make destruction of objects more structured. Yeah, ""goto"" and ""structured"" in the same sentence, but this is one of the few cases where using goto makes sense in C. (We'd use proper destructors in modern language, but we aren't.)
Since we use goto, this may have weird effects on variable scoping and initialization. Move all variable declarations to the top of the function and make sure that all local variables are initialized.
Some of these changes make Soter return more accurate error codes: for example, SOTER_INVALID_PARAMETER instead of SOTER_FAIL when the issue is actually in the parameter. Update the test suite to expect the new error codes. Strictly speaking, this does break backwards compatibility (or at least, may break someone's weird use case), but I feel that it's acceptable to make this change. Usually, applications don't check concrete error values, and if they do they expect to catch parameter errors that way and we should return appropriate error codes.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,535,2019-09-20T11:19:48Z,2019-09-23T17:15:53Z,2019-09-24T12:13:59Z,MERGED,True,478,318,16,https://github.com/ilammy,Correct EVP_PKEY ownership,8,"['core', 'C-BoringSSL', 'C-OpenSSL']",https://github.com/cossacklabs/themis/pull/535,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/535#issuecomment-533544481,"Memory management is hard, especially in C. Recent code reviews by @outspace have uncovered a bunch of issues with OpenSSL usage, in particular with EVP_PKEY and EVP_PKEY_CTX objects. Here we attempt to fix them. This PR should resolve issues #532, #533, #534.
I have manually reviewed EVP_PKEY and EVP_PKEY_CTX usage in our code and it seems to be okay now. @ignatk, could you please vet these changes?
The key point in most of the cases is that EVP_PKEY_CTX_new() does not transfer ownership over EVP_PKEY – it increments the refcount on it and we still have to free the original reference to avoid memory leaks. Sometimes we did an additional free in the destructor and this balanced all out, but it’s hardly an elegant solution.

We've got a bunch of functions which are currently doing tricky things with EVP_PKEY and EVP_PKEY_CTX objects, sometimes incorrectly. Let’s make sure that the code is readable, that we don't leak objects in the failure path, and that we don't free objects twice.
The general rules we follow are:


The function allocating the object is the one that frees it.


Unless the ownership is transferred to some other object, in which case we must not free the transferred object: the new owner is responsible for that. This includes constructors.


Set the field to NULL after freeing the object stored there. (It's okay to leave local variables as is.)


They all seem obvious in the hindsight, but the current code contains a number of violations in these rules. Partially, due to magic macros which make it seem like the error handling and resource management are correct, while in fact they are not. Therefore we get rid of the macros and replace them with plain old conditions.
We use ""goto"" pattern in order to make destruction of objects more structured. Yeah, ""goto"" and ""structured"" in the same sentence, but this is one of the few cases where using goto makes sense in C. (We'd use proper destructors in modern language, but we aren't.)
Since we use goto, this may have weird effects on variable scoping and initialization. Move all variable declarations to the top of the function and make sure that all local variables are initialized.
Some of these changes make Soter return more accurate error codes: for example, SOTER_INVALID_PARAMETER instead of SOTER_FAIL when the issue is actually in the parameter. Update the test suite to expect the new error codes. Strictly speaking, this does break backwards compatibility (or at least, may break someone's weird use case), but I feel that it's acceptable to make this change. Usually, applications don't check concrete error values, and if they do they expect to catch parameter errors that way and we should return appropriate error codes.","@outspace, your comments are welcome :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,536,2019-09-25T17:05:02Z,2019-09-25T17:06:04Z,2019-09-26T11:49:04Z,MERGED,True,260,41,2,https://github.com/ilammy,Themis 0.12.0,11,[],https://github.com/cossacklabs/themis/pull/536,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/536,Update changelog and bump version.,Update changelog and bump version.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,536,2019-09-25T17:05:02Z,2019-09-25T17:06:04Z,2019-09-26T11:49:04Z,MERGED,True,260,41,2,https://github.com/ilammy,Themis 0.12.0,11,[],https://github.com/cossacklabs/themis/pull/536,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/536#issuecomment-535118432,Update changelog and bump version.,Since these are just docs I’m going to merge it right away.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,537,2019-09-25T18:53:08Z,2019-09-25T20:09:26Z,2019-09-26T06:16:15Z,MERGED,True,15,23,13,https://github.com/ilammy,Avoid duplicate header names,2,['core'],https://github.com/cossacklabs/themis/pull/537,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/537,"It turns out (quite possibly, again) that CocoaPods project does not support the case when both Soter and Themis have a header file with exact same name. This time portable_endian.h is the culprit. Let’s rename this private header into something more distinct in order to avoid build issues with CocoaPods.","It turns out (quite possibly, again) that CocoaPods project does not support the case when both Soter and Themis have a header file with exact same name. This time portable_endian.h is the culprit. Let’s rename this private header into something more distinct in order to avoid build issues with CocoaPods.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,539,2019-09-26T13:03:12Z,2019-09-26T13:24:36Z,2019-09-26T13:35:17Z,MERGED,True,227,207,14,https://github.com/vixentael,"bump themis iOS to 0.12.2, update podspec, update examples",1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/539,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/539,"(as part of 0.12.0 release flow)
Due to problems with latest GRKOpenSSLFramework 2.19 release I've downgraded dependency to 2.18, pushed new themis.podspec and updated examples.
Unfortunately, 2.19 release doesn't have some symbols and causes failure of archiving Xcode app, see #538.
Good thing:

it's fixed

Bad thing:

this fix is temporary until GRKOpenSSLFramework is fixed
such cruel dependency linking might cause dependency linking failure for projects that use GRKOpenSSLFramework separately.","(as part of 0.12.0 release flow)
Due to problems with latest GRKOpenSSLFramework 2.19 release I've downgraded dependency to 2.18, pushed new themis.podspec and updated examples.
Unfortunately, 2.19 release doesn't have some symbols and causes failure of archiving Xcode app, see #538.
Good thing:

it's fixed

Bad thing:

this fix is temporary until GRKOpenSSLFramework is fixed
such cruel dependency linking might cause dependency linking failure for projects that use GRKOpenSSLFramework separately.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,539,2019-09-26T13:03:12Z,2019-09-26T13:24:36Z,2019-09-26T13:35:17Z,MERGED,True,227,207,14,https://github.com/vixentael,"bump themis iOS to 0.12.2, update podspec, update examples",1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/539,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/539#issuecomment-535495223,"(as part of 0.12.0 release flow)
Due to problems with latest GRKOpenSSLFramework 2.19 release I've downgraded dependency to 2.18, pushed new themis.podspec and updated examples.
Unfortunately, 2.19 release doesn't have some symbols and causes failure of archiving Xcode app, see #538.
Good thing:

it's fixed

Bad thing:

this fix is temporary until GRKOpenSSLFramework is fixed
such cruel dependency linking might cause dependency linking failure for projects that use GRKOpenSSLFramework separately.","such cruel dependency linking might cause dependency linking failure for projects that use GRKOpenSSLFramework separately

Aren’t projects that use GRKOpenSSL independently going to fail to archive even without Themis if they are using the broken 1.0.2.19 version? I guess by pinning the version we ‘fix' the linkage issue for them as well.
Though, it’s still true that dependency resolution might fail if the pinned version is incompatible with other requirements imposed by the project or other dependencies.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,539,2019-09-26T13:03:12Z,2019-09-26T13:24:36Z,2019-09-26T13:35:17Z,MERGED,True,227,207,14,https://github.com/vixentael,"bump themis iOS to 0.12.2, update podspec, update examples",1,['O-iOS :iphone:'],https://github.com/cossacklabs/themis/pull/539,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/539#issuecomment-535504620,"(as part of 0.12.0 release flow)
Due to problems with latest GRKOpenSSLFramework 2.19 release I've downgraded dependency to 2.18, pushed new themis.podspec and updated examples.
Unfortunately, 2.19 release doesn't have some symbols and causes failure of archiving Xcode app, see #538.
Good thing:

it's fixed

Bad thing:

this fix is temporary until GRKOpenSSLFramework is fixed
such cruel dependency linking might cause dependency linking failure for projects that use GRKOpenSSLFramework separately.","Aren’t projects that use GRKOpenSSL independently going to fail to archive even without Themis if they are using the broken 1.0.2.19 version?

Can't tell now, need investigation. From my first try (see T1326), looks like projects that link GRKOpenSSL directly are being archived ok, projects that use themis->GRKOpenSSL produce error during archiving.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,540,2019-09-26T15:54:25Z,2019-09-30T07:25:38Z,2019-09-30T07:25:51Z,MERGED,True,535,359,43,https://github.com/ilammy,Fix warnings found by clang-tidy,23,"['next release', 'core', 'W-ThemisPP :crossed_swords:', 'compatibility', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/540,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/540,"We have been using clang-tidy for a while (added in #395). However, this isn't even its final form. Most of the warnings were disabled and we were really unaware of them.
Let’s update the Clang toolchain to the newer version that got recently released and then enable more available checks. Note, however, that code base has quite a few legacy warts so we can't enable everything and have to disable some of the warnings.
We still support C++03 so we do not enable modernize-* group. This hides an amazing amount of warnings from JsThemis code (which ended up with its own clang-tidy configuration).
Some other explicitly disabled checks:


readability-implicit-bool-conversion – because we have quite a few places where we check integers for zero with ! and all of them trigger this warning.


readability-isolate-declaration – sput (our testing framework) macros cause most of these warnings, hopefully we can enable this back after we migrate to a newer framework for unit tests.


*-magic-numbers – unfortunately, clang-tidy gives a warning for every individual integer in data arrays (like in CRC32 code) which is stupid less than ideal. Sorry, but this goes out of the window.


cppcoreguidelines-pro-type-vararg – we use printf() functions quite often (due to sput and SOTER_IF macros), don't want this to be triggered. Maybe we can disable this later.


Most of the changes are trivial, but there are a lot of them, and some might have caused trouble in case of misuse or sloppy coding. Well, our code is not that bad! I’m a tiiiiny bit relieved.
Some changes in ThemisPP are significant and may require changes in the application code. We will have to announce them in the changelog:

secure_message_t is now copyable
secure_comparator_t is now non-copyable, but moveable
get_pub_key_by_id() method of secure_session_callback_interface_t now has to return non-const vector

As usual, read individual commit messages for details. I made all changes atomic so it will be tedious, but straightforward to review if you look at them separately.","We have been using clang-tidy for a while (added in #395). However, this isn't even its final form. Most of the warnings were disabled and we were really unaware of them.
Let’s update the Clang toolchain to the newer version that got recently released and then enable more available checks. Note, however, that code base has quite a few legacy warts so we can't enable everything and have to disable some of the warnings.
We still support C++03 so we do not enable modernize-* group. This hides an amazing amount of warnings from JsThemis code (which ended up with its own clang-tidy configuration).
Some other explicitly disabled checks:


readability-implicit-bool-conversion – because we have quite a few places where we check integers for zero with ! and all of them trigger this warning.


readability-isolate-declaration – sput (our testing framework) macros cause most of these warnings, hopefully we can enable this back after we migrate to a newer framework for unit tests.


*-magic-numbers – unfortunately, clang-tidy gives a warning for every individual integer in data arrays (like in CRC32 code) which is stupid less than ideal. Sorry, but this goes out of the window.


cppcoreguidelines-pro-type-vararg – we use printf() functions quite often (due to sput and SOTER_IF macros), don't want this to be triggered. Maybe we can disable this later.


Most of the changes are trivial, but there are a lot of them, and some might have caused trouble in case of misuse or sloppy coding. Well, our code is not that bad! I’m a tiiiiny bit relieved.
Some changes in ThemisPP are significant and may require changes in the application code. We will have to announce them in the changelog:

secure_message_t is now copyable
secure_comparator_t is now non-copyable, but moveable
get_pub_key_by_id() method of secure_session_callback_interface_t now has to return non-const vector

As usual, read individual commit messages for details. I made all changes atomic so it will be tedious, but straightforward to review if you look at them separately.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,540,2019-09-26T15:54:25Z,2019-09-30T07:25:38Z,2019-09-30T07:25:51Z,MERGED,True,535,359,43,https://github.com/ilammy,Fix warnings found by clang-tidy,23,"['next release', 'core', 'W-ThemisPP :crossed_swords:', 'compatibility', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/540,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/540#issuecomment-535626487,"We have been using clang-tidy for a while (added in #395). However, this isn't even its final form. Most of the warnings were disabled and we were really unaware of them.
Let’s update the Clang toolchain to the newer version that got recently released and then enable more available checks. Note, however, that code base has quite a few legacy warts so we can't enable everything and have to disable some of the warnings.
We still support C++03 so we do not enable modernize-* group. This hides an amazing amount of warnings from JsThemis code (which ended up with its own clang-tidy configuration).
Some other explicitly disabled checks:


readability-implicit-bool-conversion – because we have quite a few places where we check integers for zero with ! and all of them trigger this warning.


readability-isolate-declaration – sput (our testing framework) macros cause most of these warnings, hopefully we can enable this back after we migrate to a newer framework for unit tests.


*-magic-numbers – unfortunately, clang-tidy gives a warning for every individual integer in data arrays (like in CRC32 code) which is stupid less than ideal. Sorry, but this goes out of the window.


cppcoreguidelines-pro-type-vararg – we use printf() functions quite often (due to sput and SOTER_IF macros), don't want this to be triggered. Maybe we can disable this later.


Most of the changes are trivial, but there are a lot of them, and some might have caused trouble in case of misuse or sloppy coding. Well, our code is not that bad! I’m a tiiiiny bit relieved.
Some changes in ThemisPP are significant and may require changes in the application code. We will have to announce them in the changelog:

secure_message_t is now copyable
secure_comparator_t is now non-copyable, but moveable
get_pub_key_by_id() method of secure_session_callback_interface_t now has to return non-const vector

As usual, read individual commit messages for details. I made all changes atomic so it will be tedious, but straightforward to review if you look at them separately.","@vixentael,

we won't catch a weird backwards-compatibility issue

Well, there are breaking changes in ThemisPP, strictly speaking (as in ""C++ allows to write code which will not compile after an update""), but they are otherwise trivial to correct. Since ThemisPP is header-only, the users will have to recompile anyway.",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,541,2019-09-27T00:15:27Z,2019-09-27T11:54:43Z,2019-09-27T11:54:47Z,MERGED,True,35,29,2,https://github.com/vixentael,Readme & Changelog 0.12.X,5,['docs :books:'],https://github.com/cossacklabs/themis/pull/541,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/541,"docs-docs-docs-docs-docs, minor changes.","docs-docs-docs-docs-docs, minor changes.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,541,2019-09-27T00:15:27Z,2019-09-27T11:54:43Z,2019-09-27T11:54:47Z,MERGED,True,35,29,2,https://github.com/vixentael,Readme & Changelog 0.12.X,5,['docs :books:'],https://github.com/cossacklabs/themis/pull/541,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/541#issuecomment-535908342,"docs-docs-docs-docs-docs, minor changes.",Merging since these are just docs,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,542,2019-09-30T08:41:35Z,2019-10-01T14:44:55Z,2019-10-01T14:44:55Z,MERGED,True,1,1,1,https://github.com/ilammy,Correct recursive make invocation,1,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/542,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/542,"We use make recursively during AFL fuzzer builds.
Avoid invoking make directly as the executable may be called differently (e.g., on macOS running updated make from Homebrew it's typically called gmake). Use the standard MAKE variable instead.","We use make recursively during AFL fuzzer builds.
Avoid invoking make directly as the executable may be called differently (e.g., on macOS running updated make from Homebrew it's typically called gmake). Use the standard MAKE variable instead.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,543,2019-09-30T08:42:36Z,2019-10-01T14:44:40Z,2019-10-01T14:44:42Z,MERGED,True,4,2,1,https://github.com/ilammy,Build with optimizations by default,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/543,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/543,"GCC builds without optimizations by default while Clang uses -O2. Use -O2 for GCC by default too, but switch to -O0 when DEBUG is defined. Also make sure to always output debug information, not only in debug builds. Additional sections with it do not impact performance but are very useful in production. And they can be easily stripped out of the binaries if necessary, like we do when building packages.
We disable frame pointer omission optimization to get better stack frames and enable debugging on x86. While it has some impact, I’d rather have working backtraces.","GCC builds without optimizations by default while Clang uses -O2. Use -O2 for GCC by default too, but switch to -O0 when DEBUG is defined. Also make sure to always output debug information, not only in debug builds. Additional sections with it do not impact performance but are very useful in production. And they can be easily stripped out of the binaries if necessary, like we do when building packages.
We disable frame pointer omission optimization to get better stack frames and enable debugging on x86. While it has some impact, I’d rather have working backtraces.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,544,2019-09-30T08:47:17Z,2019-11-08T19:30:51Z,2019-11-08T19:30:52Z,MERGED,True,18,20,1,https://github.com/ilammy,Update distribution archive,4,['infrastructure'],https://github.com/cossacklabs/themis/pull/544,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/544,"Pour some love onto make dist target.


Name archive ""themis_0.X.Y"", not just ""0.X.Y""
It's better to provide an archive with a proper name that produces nicely named directory when unpacked.


Remove unnecessarily verbose options
No one is really immediately interested in all the files that get packed. You can see them by unpacking it. However, people will be interested in the name of the produced tarball.


Update distribution files
The file list currently includes some files that are no longer need to be excluded, and misses some newly added project files (Carthage, Rust, Android, NSIS). Update the file list.


@shadinua, this target is likely to be used by our internal CICD system, and it’s likely to expect the distribution tarball and the directory inside it to be named in a particular way. They will probably have to be tweaked once this gets merged.","Pour some love onto make dist target.


Name archive ""themis_0.X.Y"", not just ""0.X.Y""
It's better to provide an archive with a proper name that produces nicely named directory when unpacked.


Remove unnecessarily verbose options
No one is really immediately interested in all the files that get packed. You can see them by unpacking it. However, people will be interested in the name of the produced tarball.


Update distribution files
The file list currently includes some files that are no longer need to be excluded, and misses some newly added project files (Carthage, Rust, Android, NSIS). Update the file list.


@shadinua, this target is likely to be used by our internal CICD system, and it’s likely to expect the distribution tarball and the directory inside it to be named in a particular way. They will probably have to be tweaked once this gets merged.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,545,2019-09-30T09:20:58Z,2019-10-01T14:44:21Z,2019-10-01T14:44:22Z,MERGED,True,1,1,1,https://github.com/ilammy,Avoid overflows in left shifts,1,['core'],https://github.com/cossacklabs/themis/pull/545,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/545,"Left-shifting uint8_t types kinda works because of integer promotion rules. However, this is incorrect on platforms with 16-bit int types. We should explicitly use 32-bit unsigned integers to get the correct behavior on all platforms (and avoid warnings by undefined behavior sanitizer).","Left-shifting uint8_t types kinda works because of integer promotion rules. However, this is incorrect on platforms with 16-bit int types. We should explicitly use 32-bit unsigned integers to get the correct behavior on all platforms (and avoid warnings by undefined behavior sanitizer).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,545,2019-09-30T09:20:58Z,2019-10-01T14:44:21Z,2019-10-01T14:44:22Z,MERGED,True,1,1,1,https://github.com/ilammy,Avoid overflows in left shifts,1,['core'],https://github.com/cossacklabs/themis/pull/545,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/545#issuecomment-536496567,"Left-shifting uint8_t types kinda works because of integer promotion rules. However, this is incorrect on platforms with 16-bit int types. We should explicitly use 32-bit unsigned integers to get the correct behavior on all platforms (and avoid warnings by undefined behavior sanitizer).","I don't understand why we should use 32 bit variables for 8bit results? we use explicitly defined 32 bit variable which stores 32 bits and then we place each byte to separate 1 byte variable. where is here undefined behavior? Anyway, we need here 32 bits to store crc32. And we don't tell that we support 16-bits platforms, so it's not our problem that old platform can't work with *32_t types.
@vixentael what do you think?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,545,2019-09-30T09:20:58Z,2019-10-01T14:44:21Z,2019-10-01T14:44:22Z,MERGED,True,1,1,1,https://github.com/ilammy,Avoid overflows in left shifts,1,['core'],https://github.com/cossacklabs/themis/pull/545,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/545#issuecomment-536505718,"Left-shifting uint8_t types kinda works because of integer promotion rules. However, this is incorrect on platforms with 16-bit int types. We should explicitly use 32-bit unsigned integers to get the correct behavior on all platforms (and avoid warnings by undefined behavior sanitizer).","@Lagovas, the issue is with this expression:
result = ((byte0 << 24) | (byte1 << 16) | (byte2 << 8) | byte3);
Regardless of the result type, if byteN values are smaller than int then they are first extended to int (or unsigned int if they are unsigned), then all the shifts and bitwise operations are performed, and only then the result is extended or truncated to the result type. (These are know as integer promotion rules in the standard.)
This means that if byteN are uint8_t and unsigned int is 16-bit then the compiler is free to interpret the shifts as unsigned left shifts of 16-bit values, making << 16 and << 24 technically undefined behavior as these are shifting more that the width of the left operand.
Obviously, it works as intended even with uint8_t on x86 and ARM because of the way left shifts are implemented there,* but strictly speaking this may cause undefined behavior and sanitizers do warn about that.
* It’s not like that. After reading through Intel’s manual it seems that if the shifts are** interpreted as 16-bit on x86 then the byte values will be really lost and the carry flag will contain some undefined value. ARM is the same if it has 16-bit registers.
** gcc and clang do not generate 16-bit code anymore, so again we’re ‘safe’.
Switching the types to uint32_t is the cleanest way to avoid this issue. Keeping the variables uint8_t and inserting explicit casts into that expression will work too, but that’s less readable and produces the same machine code.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,545,2019-09-30T09:20:58Z,2019-10-01T14:44:21Z,2019-10-01T14:44:22Z,MERGED,True,1,1,1,https://github.com/ilammy,Avoid overflows in left shifts,1,['core'],https://github.com/cossacklabs/themis/pull/545,https://github.com/Lagovas,4,https://github.com/cossacklabs/themis/pull/545#issuecomment-536508840,"Left-shifting uint8_t types kinda works because of integer promotion rules. However, this is incorrect on platforms with 16-bit int types. We should explicitly use 32-bit unsigned integers to get the correct behavior on all platforms (and avoid warnings by undefined behavior sanitizer).","but our left operand has enough size to store result value. result defined as 32 bit variable, not 16.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,545,2019-09-30T09:20:58Z,2019-10-01T14:44:21Z,2019-10-01T14:44:22Z,MERGED,True,1,1,1,https://github.com/ilammy,Avoid overflows in left shifts,1,['core'],https://github.com/cossacklabs/themis/pull/545,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/545#issuecomment-536510357,"Left-shifting uint8_t types kinda works because of integer promotion rules. However, this is incorrect on platforms with 16-bit int types. We should explicitly use 32-bit unsigned integers to get the correct behavior on all platforms (and avoid warnings by undefined behavior sanitizer).","The type of the result is not important here. Even if it were bool the computation should be first performed with extended integer values and only then converted to the result type. It’s the types of the operands that matter. If they are uint32_t then on platforms with 32-bit int types no promotions are performed, and on 16-bit platforms the operations are performed with 32-bit values (with whatever tricks the compiler uses for that).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,545,2019-09-30T09:20:58Z,2019-10-01T14:44:21Z,2019-10-01T14:44:22Z,MERGED,True,1,1,1,https://github.com/ilammy,Avoid overflows in left shifts,1,['core'],https://github.com/cossacklabs/themis/pull/545,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/545#issuecomment-536513700,"Left-shifting uint8_t types kinda works because of integer promotion rules. However, this is incorrect on platforms with 16-bit int types. We should explicitly use 32-bit unsigned integers to get the correct behavior on all platforms (and avoid warnings by undefined behavior sanitizer).","we don't support 16-bit platforms, we haven't tried even testing on 'em",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,546,2019-09-30T17:44:23Z,2019-10-01T14:43:43Z,2019-10-01T16:22:54Z,MERGED,True,100,3,5,https://github.com/eliteraspberries,Add a semantic patch to prevent use after free.,1,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/546,https://github.com/eliteraspberries,1,https://github.com/cossacklabs/themis/pull/546,"Hello, thank you for this excellent project.
In the file soter_hmac.c there is a double-free. 
  
    
      themis/src/soter/soter_hmac.c
    
    
        Lines 96 to 97
      in
      10b8ced
    
  
  
    

        
          
           soter_hash_destroy(hmac_ctx->hash_ctx); 
        

        
          
           soter_hmac_cleanup(hmac_ctx); 
        
    
  


The function soter_hmac_cleanup immediately follows soter_hash_destroy.
The first function frees hmac_ctx->hash_ctx:

  
    
      themis/src/soter/openssl/soter_hash.c
    
    
        Lines 132 to 140
      in
      10b8ced
    
  
  
    

        
          
           soter_status_t soter_hash_destroy(soter_hash_ctx_t* hash_ctx) 
        

        
          
           { 
        

        
          
               if (!hash_ctx) { 
        

        
          
                   return SOTER_INVALID_PARAMETER; 
        

        
          
               } 
        

        
          
               soter_hash_cleanup(hash_ctx); 
        

        
          
               free(hash_ctx); 
        

        
          
               return SOTER_SUCCESS; 
        

        
          
           } 
        
    
  


The second function calls the first function again, with the same argument:

  
    
      themis/src/soter/soter_hmac.c
    
    
        Lines 112 to 122
      in
      10b8ced
    
  
  
    

        
          
           soter_status_t soter_hmac_cleanup(soter_hmac_ctx_t* hmac_ctx) 
        

        
          
           { 
        

        
          
               if (NULL == hmac_ctx) { 
        

        
          
                   return SOTER_INVALID_PARAMETER; 
        

        
          
               } 
        

        
          
            
        

        
          
               memset(hmac_ctx->o_key_pad, 0, sizeof(hmac_ctx->o_key_pad)); 
        

        
          
               soter_hash_destroy(hmac_ctx->hash_ctx); 
        

        
          
               hmac_ctx->hash_ctx = NULL; 
        

        
          
               return SOTER_SUCCESS; 
        

        
          
           } 
        
    
  


This can be prevented by inserting a NULL assignment between the two function calls.
Here is a semantic patch (see Coccinelle) that does this for all such functions (not only in this specific instance, although it turns out only this one instance was a bug).
The file themis-free-functions.txt contains a list of all functions that free one of their arguments. The file null-after-free.cocci is a semantic patch that inserts a NULL assignment after every call to each of the functions in the previous file, and then attempts to remove unnecessary NULL assignments.
Apply this semantic patch with the command:
spatch --sp-file scripts/cocci/null-after-free.cocci --dir src --in-place < scripts/cocci/themis-free-functions.txt","Hello, thank you for this excellent project.
In the file soter_hmac.c there is a double-free. 
  
    
      themis/src/soter/soter_hmac.c
    
    
        Lines 96 to 97
      in
      10b8ced
    
  
  
    

        
          
           soter_hash_destroy(hmac_ctx->hash_ctx); 
        

        
          
           soter_hmac_cleanup(hmac_ctx); 
        
    
  


The function soter_hmac_cleanup immediately follows soter_hash_destroy.
The first function frees hmac_ctx->hash_ctx:

  
    
      themis/src/soter/openssl/soter_hash.c
    
    
        Lines 132 to 140
      in
      10b8ced
    
  
  
    

        
          
           soter_status_t soter_hash_destroy(soter_hash_ctx_t* hash_ctx) 
        

        
          
           { 
        

        
          
               if (!hash_ctx) { 
        

        
          
                   return SOTER_INVALID_PARAMETER; 
        

        
          
               } 
        

        
          
               soter_hash_cleanup(hash_ctx); 
        

        
          
               free(hash_ctx); 
        

        
          
               return SOTER_SUCCESS; 
        

        
          
           } 
        
    
  


The second function calls the first function again, with the same argument:

  
    
      themis/src/soter/soter_hmac.c
    
    
        Lines 112 to 122
      in
      10b8ced
    
  
  
    

        
          
           soter_status_t soter_hmac_cleanup(soter_hmac_ctx_t* hmac_ctx) 
        

        
          
           { 
        

        
          
               if (NULL == hmac_ctx) { 
        

        
          
                   return SOTER_INVALID_PARAMETER; 
        

        
          
               } 
        

        
          
            
        

        
          
               memset(hmac_ctx->o_key_pad, 0, sizeof(hmac_ctx->o_key_pad)); 
        

        
          
               soter_hash_destroy(hmac_ctx->hash_ctx); 
        

        
          
               hmac_ctx->hash_ctx = NULL; 
        

        
          
               return SOTER_SUCCESS; 
        

        
          
           } 
        
    
  


This can be prevented by inserting a NULL assignment between the two function calls.
Here is a semantic patch (see Coccinelle) that does this for all such functions (not only in this specific instance, although it turns out only this one instance was a bug).
The file themis-free-functions.txt contains a list of all functions that free one of their arguments. The file null-after-free.cocci is a semantic patch that inserts a NULL assignment after every call to each of the functions in the previous file, and then attempts to remove unnecessary NULL assignments.
Apply this semantic patch with the command:
spatch --sp-file scripts/cocci/null-after-free.cocci --dir src --in-place < scripts/cocci/themis-free-functions.txt",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,546,2019-09-30T17:44:23Z,2019-10-01T14:43:43Z,2019-10-01T16:22:54Z,MERGED,True,100,3,5,https://github.com/eliteraspberries,Add a semantic patch to prevent use after free.,1,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/546,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/546#issuecomment-536700423,"Hello, thank you for this excellent project.
In the file soter_hmac.c there is a double-free. 
  
    
      themis/src/soter/soter_hmac.c
    
    
        Lines 96 to 97
      in
      10b8ced
    
  
  
    

        
          
           soter_hash_destroy(hmac_ctx->hash_ctx); 
        

        
          
           soter_hmac_cleanup(hmac_ctx); 
        
    
  


The function soter_hmac_cleanup immediately follows soter_hash_destroy.
The first function frees hmac_ctx->hash_ctx:

  
    
      themis/src/soter/openssl/soter_hash.c
    
    
        Lines 132 to 140
      in
      10b8ced
    
  
  
    

        
          
           soter_status_t soter_hash_destroy(soter_hash_ctx_t* hash_ctx) 
        

        
          
           { 
        

        
          
               if (!hash_ctx) { 
        

        
          
                   return SOTER_INVALID_PARAMETER; 
        

        
          
               } 
        

        
          
               soter_hash_cleanup(hash_ctx); 
        

        
          
               free(hash_ctx); 
        

        
          
               return SOTER_SUCCESS; 
        

        
          
           } 
        
    
  


The second function calls the first function again, with the same argument:

  
    
      themis/src/soter/soter_hmac.c
    
    
        Lines 112 to 122
      in
      10b8ced
    
  
  
    

        
          
           soter_status_t soter_hmac_cleanup(soter_hmac_ctx_t* hmac_ctx) 
        

        
          
           { 
        

        
          
               if (NULL == hmac_ctx) { 
        

        
          
                   return SOTER_INVALID_PARAMETER; 
        

        
          
               } 
        

        
          
            
        

        
          
               memset(hmac_ctx->o_key_pad, 0, sizeof(hmac_ctx->o_key_pad)); 
        

        
          
               soter_hash_destroy(hmac_ctx->hash_ctx); 
        

        
          
               hmac_ctx->hash_ctx = NULL; 
        

        
          
               return SOTER_SUCCESS; 
        

        
          
           } 
        
    
  


This can be prevented by inserting a NULL assignment between the two function calls.
Here is a semantic patch (see Coccinelle) that does this for all such functions (not only in this specific instance, although it turns out only this one instance was a bug).
The file themis-free-functions.txt contains a list of all functions that free one of their arguments. The file null-after-free.cocci is a semantic patch that inserts a NULL assignment after every call to each of the functions in the previous file, and then attempts to remove unnecessary NULL assignments.
Apply this semantic patch with the command:
spatch --sp-file scripts/cocci/null-after-free.cocci --dir src --in-place < scripts/cocci/themis-free-functions.txt","Thank you, @eliteraspberries! This looks fantastic (especially semantic patch) 👍
Double free fixes are very timely: we did some of them during last month (#525, #535, #524). Great job!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,546,2019-09-30T17:44:23Z,2019-10-01T14:43:43Z,2019-10-01T16:22:54Z,MERGED,True,100,3,5,https://github.com/eliteraspberries,Add a semantic patch to prevent use after free.,1,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/546,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/546#issuecomment-536929191,"Hello, thank you for this excellent project.
In the file soter_hmac.c there is a double-free. 
  
    
      themis/src/soter/soter_hmac.c
    
    
        Lines 96 to 97
      in
      10b8ced
    
  
  
    

        
          
           soter_hash_destroy(hmac_ctx->hash_ctx); 
        

        
          
           soter_hmac_cleanup(hmac_ctx); 
        
    
  


The function soter_hmac_cleanup immediately follows soter_hash_destroy.
The first function frees hmac_ctx->hash_ctx:

  
    
      themis/src/soter/openssl/soter_hash.c
    
    
        Lines 132 to 140
      in
      10b8ced
    
  
  
    

        
          
           soter_status_t soter_hash_destroy(soter_hash_ctx_t* hash_ctx) 
        

        
          
           { 
        

        
          
               if (!hash_ctx) { 
        

        
          
                   return SOTER_INVALID_PARAMETER; 
        

        
          
               } 
        

        
          
               soter_hash_cleanup(hash_ctx); 
        

        
          
               free(hash_ctx); 
        

        
          
               return SOTER_SUCCESS; 
        

        
          
           } 
        
    
  


The second function calls the first function again, with the same argument:

  
    
      themis/src/soter/soter_hmac.c
    
    
        Lines 112 to 122
      in
      10b8ced
    
  
  
    

        
          
           soter_status_t soter_hmac_cleanup(soter_hmac_ctx_t* hmac_ctx) 
        

        
          
           { 
        

        
          
               if (NULL == hmac_ctx) { 
        

        
          
                   return SOTER_INVALID_PARAMETER; 
        

        
          
               } 
        

        
          
            
        

        
          
               memset(hmac_ctx->o_key_pad, 0, sizeof(hmac_ctx->o_key_pad)); 
        

        
          
               soter_hash_destroy(hmac_ctx->hash_ctx); 
        

        
          
               hmac_ctx->hash_ctx = NULL; 
        

        
          
               return SOTER_SUCCESS; 
        

        
          
           } 
        
    
  


This can be prevented by inserting a NULL assignment between the two function calls.
Here is a semantic patch (see Coccinelle) that does this for all such functions (not only in this specific instance, although it turns out only this one instance was a bug).
The file themis-free-functions.txt contains a list of all functions that free one of their arguments. The file null-after-free.cocci is a semantic patch that inserts a NULL assignment after every call to each of the functions in the previous file, and then attempts to remove unnecessary NULL assignments.
Apply this semantic patch with the command:
spatch --sp-file scripts/cocci/null-after-free.cocci --dir src --in-place < scripts/cocci/themis-free-functions.txt","Wow! Coccinelle... That’s a tool I’ve seen used mostly in Linux kernel development. Maybe because it’s one of the few ""big"" C projects that warrant its use. Or because people somehow rely more on their IDEs for refactoring.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,546,2019-09-30T17:44:23Z,2019-10-01T14:43:43Z,2019-10-01T16:22:54Z,MERGED,True,100,3,5,https://github.com/eliteraspberries,Add a semantic patch to prevent use after free.,1,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/546,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/546#issuecomment-536940409,"Hello, thank you for this excellent project.
In the file soter_hmac.c there is a double-free. 
  
    
      themis/src/soter/soter_hmac.c
    
    
        Lines 96 to 97
      in
      10b8ced
    
  
  
    

        
          
           soter_hash_destroy(hmac_ctx->hash_ctx); 
        

        
          
           soter_hmac_cleanup(hmac_ctx); 
        
    
  


The function soter_hmac_cleanup immediately follows soter_hash_destroy.
The first function frees hmac_ctx->hash_ctx:

  
    
      themis/src/soter/openssl/soter_hash.c
    
    
        Lines 132 to 140
      in
      10b8ced
    
  
  
    

        
          
           soter_status_t soter_hash_destroy(soter_hash_ctx_t* hash_ctx) 
        

        
          
           { 
        

        
          
               if (!hash_ctx) { 
        

        
          
                   return SOTER_INVALID_PARAMETER; 
        

        
          
               } 
        

        
          
               soter_hash_cleanup(hash_ctx); 
        

        
          
               free(hash_ctx); 
        

        
          
               return SOTER_SUCCESS; 
        

        
          
           } 
        
    
  


The second function calls the first function again, with the same argument:

  
    
      themis/src/soter/soter_hmac.c
    
    
        Lines 112 to 122
      in
      10b8ced
    
  
  
    

        
          
           soter_status_t soter_hmac_cleanup(soter_hmac_ctx_t* hmac_ctx) 
        

        
          
           { 
        

        
          
               if (NULL == hmac_ctx) { 
        

        
          
                   return SOTER_INVALID_PARAMETER; 
        

        
          
               } 
        

        
          
            
        

        
          
               memset(hmac_ctx->o_key_pad, 0, sizeof(hmac_ctx->o_key_pad)); 
        

        
          
               soter_hash_destroy(hmac_ctx->hash_ctx); 
        

        
          
               hmac_ctx->hash_ctx = NULL; 
        

        
          
               return SOTER_SUCCESS; 
        

        
          
           } 
        
    
  


This can be prevented by inserting a NULL assignment between the two function calls.
Here is a semantic patch (see Coccinelle) that does this for all such functions (not only in this specific instance, although it turns out only this one instance was a bug).
The file themis-free-functions.txt contains a list of all functions that free one of their arguments. The file null-after-free.cocci is a semantic patch that inserts a NULL assignment after every call to each of the functions in the previous file, and then attempts to remove unnecessary NULL assignments.
Apply this semantic patch with the command:
spatch --sp-file scripts/cocci/null-after-free.cocci --dir src --in-place < scripts/cocci/themis-free-functions.txt","P.S. Some notes if anyone wants to apply the semantic patch from source. On my Linux box Coccinelle from repos works without an issue. On macOS Coccinelle from Homebrew does not like Homebrew’s Python 2 (python@2), removing it and leaving only system Python and Python 3 from Homebrew is enough to make it work.",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,548,2019-10-01T15:24:27Z,2019-11-08T00:55:14Z,2019-11-08T00:55:15Z,MERGED,True,110,3,5,https://github.com/ilammy,Build Themis with sanitizers,5,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/548,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/548,"This is another patch set that I have found in my repo and never cared to merge. It makes Themis a safer place for writing new C code by ensuring that the code does not do anything funny, like causing obvious memory safety issues or glaring undefined behavior.
A bunch of new Makefile configuration options enable various sanitizers available for GCC and Clang:

WITH_ASAN – Address Sanitizer, mostly memory safety issues
WITH_MSAN – Memory Sanitizer, other types of memory safety
WITH_TSAN – Thread Sanitizer, mostly locks and threading
WITH_UBSAN – Undefined Behavior Sanitizer, various issues

The exact supported set of the sanitizers vary depending on the compiler type and version so we check for them at startup and use only those which are available. UBSan is especially different between GCC and Clang.
Obviously, these are opt-in options which are not enabled by default. They are useful during development but should not affect production builds.
Teach CircleCI to exercise the test suite with all available sanitizers, failing the build if any sanitizer reports a possible violation. Unfortunately, some sanitizers are not available on all compilers, and some produce a lot of unrelated errors so they are currently disabled.
In particular, UBSan currently produces some strict warnings about our code. They are mostly caused by third-party code and some known legacy warts, which have been silenced for now. Other reported instances are fixed right away. See individual commit message for details.","This is another patch set that I have found in my repo and never cared to merge. It makes Themis a safer place for writing new C code by ensuring that the code does not do anything funny, like causing obvious memory safety issues or glaring undefined behavior.
A bunch of new Makefile configuration options enable various sanitizers available for GCC and Clang:

WITH_ASAN – Address Sanitizer, mostly memory safety issues
WITH_MSAN – Memory Sanitizer, other types of memory safety
WITH_TSAN – Thread Sanitizer, mostly locks and threading
WITH_UBSAN – Undefined Behavior Sanitizer, various issues

The exact supported set of the sanitizers vary depending on the compiler type and version so we check for them at startup and use only those which are available. UBSan is especially different between GCC and Clang.
Obviously, these are opt-in options which are not enabled by default. They are useful during development but should not affect production builds.
Teach CircleCI to exercise the test suite with all available sanitizers, failing the build if any sanitizer reports a possible violation. Unfortunately, some sanitizers are not available on all compilers, and some produce a lot of unrelated errors so they are currently disabled.
In particular, UBSan currently produces some strict warnings about our code. They are mostly caused by third-party code and some known legacy warts, which have been silenced for now. Other reported instances are fixed right away. See individual commit message for details.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/549,"GitHub has updated issue template interface, let's use them.","GitHub has updated issue template interface, let's use them.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/549#issuecomment-546984689,"GitHub has updated issue template interface, let's use them.","You suggest to remove ""openssl/boringssl/i don't know"" question?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/549#issuecomment-546992199,"GitHub has updated issue template interface, let's use them.","You suggest to remove ""openssl/boringssl/i don't know"" question?

Yeah. I’ve looked through recent bug reports and don’t see any where this actually mattered. Either the issue was entirely unrelated to the backend, or the submitting person experienced an issue with specific backend and explicitly submitted an issue about that. I think, in general case it will be enough to know the platform and whether Themis has been installed via the package manager or compiled from source to triage the issue.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/549#issuecomment-546996116,"GitHub has updated issue template interface, let's use them.","And while we’re here, let’s add a template for pull requests as well. I don’t think that we have that many PRs to mandate a formal structure, but it would be nice to have a check list of important things: like, don’t forget to write unit tests, update changelog, eat your veggies, etc.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/shadinua,5,https://github.com/cossacklabs/themis/pull/549#issuecomment-547019428,"GitHub has updated issue template interface, let's use them.","Probably we should add also architecture field to Environment block. OS name may be the same, but architectures may be different.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/549#issuecomment-547033146,"GitHub has updated issue template interface, let's use them.","Probably we should add also architecture field to Environment block.

maybe just as simple as
[ ]  x32
[ ]  x64

but it's valid only for desktop/server side platforms",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/shadinua,7,https://github.com/cossacklabs/themis/pull/549#issuecomment-547077008,"GitHub has updated issue template interface, let's use them.","but it's valid only for desktop/server side platforms

[ ] x32
[ ] x64
[ ] other: ______",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/vixentael,8,https://github.com/cossacklabs/themis/pull/549#issuecomment-547077955,"GitHub has updated issue template interface, let's use them.","[ ] x32
[ ] x64
[ ] mobile",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/ilammy,9,https://github.com/cossacklabs/themis/pull/549#issuecomment-547316081,"GitHub has updated issue template interface, let's use them.","I’m not sure that arch will be of significant help for bug reports. It certainly can be important (like that one time, @vixentael 😉), but I doubt that we’ll have a constant stream of diverse architecture-specific issues. It’s not a safety check list written in blood for us to include every minor detail and turn it into 50-item questionnaire for the users to fill out.
If anything, instead of that I’d rather add a separate Device entry for mobile users, where the architectures are the most diverse. This will be more useful indicator of whether we can reproduce the environment precisely or will have to go with ""idk, works on my phone *shrug*, could you please double-check everything?""",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/vixentael,10,https://github.com/cossacklabs/themis/pull/549#issuecomment-547384412,"GitHub has updated issue template interface, let's use them.","I'm not sure if @shadinua actually wanted to see device model rather than x32/x64 CPU architecture.
I agree that having 50-items questionnaire is ""too much"", but I'd rather want to understand x32/x64.
Suggestion: change Device to Hardware: [x32/x64, or mobile device version]",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/ilammy,11,https://github.com/cossacklabs/themis/pull/549#issuecomment-547477725,"GitHub has updated issue template interface, let's use them.","Well, technically on x86 it’s possible to run 32-bit kernel on 64-bit hardware, or compile and run 32-bit applications with 64-bit kernel...
Anyhow, this is pedantry which does not get us anywhere. We don’t have many bug reports filed, so I don’t have any data to argue which template would be ‘the best’. How about the following:

Hardware: [32-bit/64-bit, or mobile device name and version]

is everyone happy with this wording?
P.S. I hate how the internet is filled with x32, x86, i386, i686, IA-32, x64, x86_64, AMD64, which are similar or sometimes the same, but not quite the same, and everybody (including me) has an opinion which one is the correct spelling for the architecture. And on top of that, Linux has x32 which is an obscure ABI, not quite what you think it is.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/vixentael,12,https://github.com/cossacklabs/themis/pull/549#issuecomment-547486441,"GitHub has updated issue template interface, let's use them.","Hardware: [32-bit/64-bit, or mobile device name and version]

yes, let's do it",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/ilammy,13,https://github.com/cossacklabs/themis/pull/549#issuecomment-547647587,"GitHub has updated issue template interface, let's use them.","Hm... the pull request template does not work for some reason, but we’re doing it according to the docs 🤔",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/vixentael,14,https://github.com/cossacklabs/themis/pull/549#issuecomment-547662662,"GitHub has updated issue template interface, let's use them.","Maybe, we should name it pull_request_template.md, as shows in this doc?
Github shows this tab for feature request / bug templates:

but i don't similar alert for PR template:",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,549,2019-10-28T14:51:41Z,2019-10-29T18:00:17Z,2019-11-28T17:27:18Z,MERGED,True,66,30,4,https://github.com/ilammy,Introduce issue templates,9,['docs :books:'],https://github.com/cossacklabs/themis/pull/549,https://github.com/ilammy,15,https://github.com/cossacklabs/themis/pull/549#issuecomment-547878710,"GitHub has updated issue template interface, let's use them.","It seems that we need to have it under .github/pull_request_template.md, not in a subdirectory, for it to act as a default template for pull requests. The ones in PULL_REQUEST_TEMPLATE can be used only with query parameters (e.g., to insert a link [Send us a pull request!] somewhere).
I’ll fix that up in master branch (without a PR).",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,550,2019-10-29T11:36:37Z,2019-10-29T15:02:29Z,2019-10-29T15:04:23Z,MERGED,True,6,4,1,https://github.com/ilammy,Roll back to Emscripten 1.38.48,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/550,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/550,Recently released 1.39.0 seems to have a regression than breaks our build for WasmThemis. Let's roll back to the previous version until the issue is examined and resolved.,Recently released 1.39.0 seems to have a regression than breaks our build for WasmThemis. Let's roll back to the previous version until the issue is examined and resolved.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,550,2019-10-29T11:36:37Z,2019-10-29T15:02:29Z,2019-10-29T15:04:23Z,MERGED,True,6,4,1,https://github.com/ilammy,Roll back to Emscripten 1.38.48,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/550,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/550#issuecomment-547389509,Recently released 1.39.0 seems to have a regression than breaks our build for WasmThemis. Let's roll back to the previous version until the issue is examined and resolved.,"Well, arguably, breaking early is the point of having a CI build so it works as intended. We definitely can support building only with a particular version of the toolchain, but that needs to be spelled out for the users. Currently we recommend the defaults, and Emscripten recommends using the latest stable version by default (that’s what gets installed when using latest).
I don’t really know now who’s at fault for breaking the build. It could well be that our code triggers some undefined behavior which just happened to work up until now, because Hello world works for me with the 1.39.0 toolchain, it’s only Soter tests that are breaking.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,550,2019-10-29T11:36:37Z,2019-10-29T15:02:29Z,2019-10-29T15:04:23Z,MERGED,True,6,4,1,https://github.com/ilammy,Roll back to Emscripten 1.38.48,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/550,https://github.com/Lagovas,3,https://github.com/cossacklabs/themis/pull/550#issuecomment-547399747,Recently released 1.39.0 seems to have a regression than breaks our build for WasmThemis. Let's roll back to the previous version until the issue is examined and resolved.,we can try to test with the latest version of dependency which will only warn about problems and don't block CI plus with specific version which will be required to successful pass,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,550,2019-10-29T11:36:37Z,2019-10-29T15:02:29Z,2019-10-29T15:04:23Z,MERGED,True,6,4,1,https://github.com/ilammy,Roll back to Emscripten 1.38.48,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/550,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/550#issuecomment-547463308,Recently released 1.39.0 seems to have a regression than breaks our build for WasmThemis. Let's roll back to the previous version until the issue is examined and resolved.,"We don’t explicitly pin any other toolchain and I don’t think we should (CircleCI has limited build capabilities and we can’t realistically test everything).
I’d propose to leave it like this at least until the next release of Emscripten. If resolving the original issue is going to take a while then we should probably track both versions. But I don’t really want to have a CI build that’s going to be a source of warnings for half a year. We can track the Emscripten issue to see whether it’s resolved, we don’t need to check that in every our build.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,550,2019-10-29T11:36:37Z,2019-10-29T15:02:29Z,2019-10-29T15:04:23Z,MERGED,True,6,4,1,https://github.com/ilammy,Roll back to Emscripten 1.38.48,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/550,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/550#issuecomment-547466647,Recently released 1.39.0 seems to have a regression than breaks our build for WasmThemis. Let's roll back to the previous version until the issue is examined and resolved.,"After fiddling with our code it seems that the issue is with Emscripten, so I’m merging this PR and we’ll be using 1.38.48 until the regression goes away. The issue has been reported on the Emscripten mailing list, and if that’s confirmed I’ll report it to their bug tracker as well.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,551,2019-10-29T22:01:52Z,2019-11-08T19:31:30Z,2019-11-08T19:31:31Z,MERGED,True,22,1,2,https://github.com/ilammy,Improve detection of JDK location for JNI,2,"['W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/551,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/551,"Currently on anything other than Debian it is necessary to manually point the build to the JDK location. There is a rudimentary mechanism for automatic detection, but we can do better. Let’s make sure that running make themis_jni ‘just works’ for all operating systems that we support.
We need to have correct include path to be able to access JNI headers. These are installed by JDK somewhere into the system. Normally there are two paths: generic path where ""jni.h"" is located and a platform-specific directory (usually a subdirectory under the generic path).
First of all, there is user override. If JDK_INCLUDE_PATH contains anything, that’s considered our include path. Prepend -I to every directory in that list and use that.
Otherwise we try to detect the paths automatically. Debian and Ubuntu packages distribute a java_defaults.mk makefile which conveniently defines C compiler flags in the jvm_includes variable. Check if that file exists via Make magic, include it, and use that variable. Note
that this file requires the dpkg-dev package to be installed in addition to JDK package (e.g., openjdk-11-jdk for Debian 10 Buster).
Other systems are not so nice. JNI headers are usually installed into JAVA_HOME. If JAVA_HOME environment variable is not set then ask Java. The includes are usually located under the include directory in the home directory plus there is an platform-specific subdirectory. On macOS it's called darwin. Many Linux distributions use linux (CentOS certainly does).
If automatic detection does not work, use JDK_INCLUDE_PATH. Typically you’ll need something like this:
make themis_jni JDK_INCLUDE_PATH=""$JAVA_HOME/include $JAVA_HOME/include/plan9""

P.S. Android uses its own magic for building the library correctly, see jni/Android.mk.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation: external docs
 Example projects and code samples are updated if needed (no API changes)
 Changelog is updated if needed (in case of notable or breaking changes)","Currently on anything other than Debian it is necessary to manually point the build to the JDK location. There is a rudimentary mechanism for automatic detection, but we can do better. Let’s make sure that running make themis_jni ‘just works’ for all operating systems that we support.
We need to have correct include path to be able to access JNI headers. These are installed by JDK somewhere into the system. Normally there are two paths: generic path where ""jni.h"" is located and a platform-specific directory (usually a subdirectory under the generic path).
First of all, there is user override. If JDK_INCLUDE_PATH contains anything, that’s considered our include path. Prepend -I to every directory in that list and use that.
Otherwise we try to detect the paths automatically. Debian and Ubuntu packages distribute a java_defaults.mk makefile which conveniently defines C compiler flags in the jvm_includes variable. Check if that file exists via Make magic, include it, and use that variable. Note
that this file requires the dpkg-dev package to be installed in addition to JDK package (e.g., openjdk-11-jdk for Debian 10 Buster).
Other systems are not so nice. JNI headers are usually installed into JAVA_HOME. If JAVA_HOME environment variable is not set then ask Java. The includes are usually located under the include directory in the home directory plus there is an platform-specific subdirectory. On macOS it's called darwin. Many Linux distributions use linux (CentOS certainly does).
If automatic detection does not work, use JDK_INCLUDE_PATH. Typically you’ll need something like this:
make themis_jni JDK_INCLUDE_PATH=""$JAVA_HOME/include $JAVA_HOME/include/plan9""

P.S. Android uses its own magic for building the library correctly, see jni/Android.mk.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation: external docs
 Example projects and code samples are updated if needed (no API changes)
 Changelog is updated if needed (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,551,2019-10-29T22:01:52Z,2019-11-08T19:31:30Z,2019-11-08T19:31:31Z,MERGED,True,22,1,2,https://github.com/ilammy,Improve detection of JDK location for JNI,2,"['W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/551,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/551#issuecomment-547933996,"Currently on anything other than Debian it is necessary to manually point the build to the JDK location. There is a rudimentary mechanism for automatic detection, but we can do better. Let’s make sure that running make themis_jni ‘just works’ for all operating systems that we support.
We need to have correct include path to be able to access JNI headers. These are installed by JDK somewhere into the system. Normally there are two paths: generic path where ""jni.h"" is located and a platform-specific directory (usually a subdirectory under the generic path).
First of all, there is user override. If JDK_INCLUDE_PATH contains anything, that’s considered our include path. Prepend -I to every directory in that list and use that.
Otherwise we try to detect the paths automatically. Debian and Ubuntu packages distribute a java_defaults.mk makefile which conveniently defines C compiler flags in the jvm_includes variable. Check if that file exists via Make magic, include it, and use that variable. Note
that this file requires the dpkg-dev package to be installed in addition to JDK package (e.g., openjdk-11-jdk for Debian 10 Buster).
Other systems are not so nice. JNI headers are usually installed into JAVA_HOME. If JAVA_HOME environment variable is not set then ask Java. The includes are usually located under the include directory in the home directory plus there is an platform-specific subdirectory. On macOS it's called darwin. Many Linux distributions use linux (CentOS certainly does).
If automatic detection does not work, use JDK_INCLUDE_PATH. Typically you’ll need something like this:
make themis_jni JDK_INCLUDE_PATH=""$JAVA_HOME/include $JAVA_HOME/include/plan9""

P.S. Android uses its own magic for building the library correctly, see jni/Android.mk.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation: external docs
 Example projects and code samples are updated if needed (no API changes)
 Changelog is updated if needed (in case of notable or breaking changes)","Makes a lot of sense to me as macOS user, because I usually need to use following:
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_11.jdk/Contents/Home

export CFLAGS=""-I$JAVA_HOME/include -I$JAVA_HOME/include/darwin""",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,552,2019-11-04T18:45:47Z,2019-11-08T19:32:16Z,2019-11-08T19:32:17Z,MERGED,True,10,2,3,https://github.com/ilammy,Link libthemis_jni.so dynamically,3,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/552,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/552,"Do not embed Themis, Soter, and cryptographic backend (if present) into libthemis_jni shared object. Instead, link it dynamically against Themis like a proper library.
It has been a nice experiment to provide self-contained library for Java. However, we are going to distribute the library as a proper system package and for that we will need to have it properly linked against its dependencies. Themis Core will be installed by the package manager so all dependencies are going to be satisfied.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed minor change, will be included into packaging PR","Do not embed Themis, Soter, and cryptographic backend (if present) into libthemis_jni shared object. Instead, link it dynamically against Themis like a proper library.
It has been a nice experiment to provide self-contained library for Java. However, we are going to distribute the library as a proper system package and for that we will need to have it properly linked against its dependencies. Themis Core will be installed by the package manager so all dependencies are going to be satisfied.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed minor change, will be included into packaging PR",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,552,2019-11-04T18:45:47Z,2019-11-08T19:32:16Z,2019-11-08T19:32:17Z,MERGED,True,10,2,3,https://github.com/ilammy,Link libthemis_jni.so dynamically,3,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/552,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/552#issuecomment-549492803,"Do not embed Themis, Soter, and cryptographic backend (if present) into libthemis_jni shared object. Instead, link it dynamically against Themis like a proper library.
It has been a nice experiment to provide self-contained library for Java. However, we are going to distribute the library as a proper system package and for that we will need to have it properly linked against its dependencies. Themis Core will be installed by the package manager so all dependencies are going to be satisfied.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed minor change, will be included into packaging PR","Also, export some private functions to make dynamic linkage possible. These are currently used by Themis JNI wrapper in order to operate secure_session_load() correctly. Strictly speaking, we should not be using these functions, but currently there is no way to allocate Secure Session instance suitable for secure_session_load() without using private header <themis/secure_session_t.h>. These functions are exported from the shared library, but we make no commitment to keeping them exported. They should be hidden back once secure_session_load() gets a better API.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,552,2019-11-04T18:45:47Z,2019-11-08T19:32:16Z,2019-11-08T19:32:17Z,MERGED,True,10,2,3,https://github.com/ilammy,Link libthemis_jni.so dynamically,3,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/552,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/552#issuecomment-549777069,"Do not embed Themis, Soter, and cryptographic backend (if present) into libthemis_jni shared object. Instead, link it dynamically against Themis like a proper library.
It has been a nice experiment to provide self-contained library for Java. However, we are going to distribute the library as a proper system package and for that we will need to have it properly linked against its dependencies. Themis Core will be installed by the package manager so all dependencies are going to be satisfied.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed minor change, will be included into packaging PR","Changes LGTM, but need to test that building process works on different machines.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,552,2019-11-04T18:45:47Z,2019-11-08T19:32:16Z,2019-11-08T19:32:17Z,MERGED,True,10,2,3,https://github.com/ilammy,Link libthemis_jni.so dynamically,3,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/552,https://github.com/Lagovas,4,https://github.com/cossacklabs/themis/pull/552#issuecomment-551591785,"Do not embed Themis, Soter, and cryptographic backend (if present) into libthemis_jni shared object. Instead, link it dynamically against Themis like a proper library.
It has been a nice experiment to provide self-contained library for Java. However, we are going to distribute the library as a proper system package and for that we will need to have it properly linked against its dependencies. Themis Core will be installed by the package manager so all dependencies are going to be satisfied.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed minor change, will be included into packaging PR","Strictly speaking, we should not be using these functions, but currently there is no way to allocate Secure Session instance suitable for secure_session_load() without using private header <themis/secure_session_t.h>.

can you explain why we need to export secure_session_<init|cleanup> to use secure_session_load? I don't see where these functions used in load/save implementations: https://github.com/cossacklabs/themis/blob/b9062e512aa39a284fa4177a6dc4ca9a34f72c83/src/themis/secure_session_serialize.c",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,552,2019-11-04T18:45:47Z,2019-11-08T19:32:16Z,2019-11-08T19:32:17Z,MERGED,True,10,2,3,https://github.com/ilammy,Link libthemis_jni.so dynamically,3,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/552,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/552#issuecomment-551731242,"Do not embed Themis, Soter, and cryptographic backend (if present) into libthemis_jni shared object. Instead, link it dynamically against Themis like a proper library.
It has been a nice experiment to provide self-contained library for Java. However, we are going to distribute the library as a proper system package and for that we will need to have it properly linked against its dependencies. Themis Core will be installed by the package manager so all dependencies are going to be satisfied.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed minor change, will be included into packaging PR","can you explain why we need to export secure_session_<init|cleanup> to use secure_session_load?

Sure.
They need to be exported because JNI library uses them here:

  
    
      themis/jni/themis_session.c
    
    
        Lines 533 to 538
      in
      0d97f5b
    
  
  
    

        
          
           themis_status = secure_session_init(&(ctx->session), 
        

        
          
                                               id_buf, 
        

        
          
                                               id_length, 
        

        
          
                                               sign_key_buf, 
        

        
          
                                               sign_key_length, 
        

        
          
                                               &(ctx->callbacks)); 
        
    
  


and here:

  
    
      themis/jni/themis_session.c
    
    
        Lines 575 to 576
      in
      0d97f5b
    
  
  
    

        
          
           secure_session_cleanup(&(ctx->session)); 
        

        
          
           (*env)->SetLongField(env, thiz, session_field_id, 0); 
        
    
  


Note that JNI library does not use secure_session_create() and secure_session_destroy(), and it stores secure_session_t directly, not a pointer to it like any other wrapper:

  
    
      themis/jni/themis_session.c
    
    
        Lines 40 to 45
      in
      0d97f5b
    
  
  
    

        
          
           struct session_with_callbacks_type { 
        

        
          
               secure_session_t session; 
        

        
          
               secure_session_user_callbacks_t callbacks; 
        

        
          
               JNIEnv* env; 
        

        
          
               jobject thiz; 
        

        
          
           }; 
        
    
  


All of this is because secure_session_load() accepts a pointer to an allocated instance of secure_session_t. We need to allocate enough memory for Secure Session object in order to use that function, and currently the only way to do this is to include a private header <themis/secure_session_t.h> which defines the layout of secure_session_t. Allocating secure_session_t in that way requires secure_session_init() and secure_session_cleanup() to be used instead of secure_session_create() and secure_session_destroy().
This is problematic because:

we need to export functions that are considered private API
we need to expose implementation details of secure_session_t
we cannot change layout of secure_session_t in any way
we cannot compile JNI library and Themis Core separately

This PR exports the functions as an easy way out and maintains status quo. A proper solution would involve hiding the implementation details and reengineering secure_session_load() so that it does not depend on those details to be known by the users.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,552,2019-11-04T18:45:47Z,2019-11-08T19:32:16Z,2019-11-08T19:32:17Z,MERGED,True,10,2,3,https://github.com/ilammy,Link libthemis_jni.so dynamically,3,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/552,https://github.com/Lagovas,6,https://github.com/cossacklabs/themis/pull/552#issuecomment-551815693,"Do not embed Themis, Soter, and cryptographic backend (if present) into libthemis_jni shared object. Instead, link it dynamically against Themis like a proper library.
It has been a nice experiment to provide self-contained library for Java. However, we are going to distribute the library as a proper system package and for that we will need to have it properly linked against its dependencies. Themis Core will be installed by the package manager so all dependencies are going to be satisfied.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed minor change, will be included into packaging PR","discussed with @ilammy that will be better if we will add a new function which will create secure session from the dumped buffer and return a pointer. after that, we will update jni to use this new function without usage of private api secure session to be consistent with other public api and deprecate old function.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,553,2019-11-05T08:56:17Z,2019-11-08T20:52:44Z,2019-11-08T20:52:45Z,MERGED,True,83,4,3,https://github.com/ilammy,Package Themis JNI library in DEB and RPM,5,"['W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/553,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/553,"Let’s provide proper packaging for the JNI library on Linux.

Installation targets for libthemis_jni

Introduce two new Makefile targets to install and uninstall Themis JNI library: themis_jni_{install,uninstall}
The library is installed to $(jnidir) which is set to $(libdir) by default, but can be overriden. This is because Java is not required to look into standard system directories for JNI libraries and may have a different opinion about that.

Package Themis JNI library in DEB and RPM

Add a separate package called libthemis-jni with Themis JNI library used by JavaThemis wrapper. It depends on Themis Core library against which it is linked. Since we maintain backwards compatibility it should be possible to upgrade Themis Core independently and we allow later versions to satisfy the dependency.
Debian and CentOS systems have different opinions about location of JNI libraries. Use jnidir to adjust for that.

Warn the user about path mismatch

Java installations are not required to look into system library directories. While normally OpenJDK and Oracle JDK installations do look into some directory in the /usr hierarchy, none of the systems that we support looks into /usr/local/lib where we install by default when compiling from source.
This is particularly important for macOS where Homebrew cannot (realistically) install into any of the standard directories.
Checklist

 Change is covered by automated tests
(CircleCI does not test DEB/RPM, we’ll check with internal build system)
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (no API changes)
 Changelog is updated if needed (in case of notable or breaking changes)","Let’s provide proper packaging for the JNI library on Linux.

Installation targets for libthemis_jni

Introduce two new Makefile targets to install and uninstall Themis JNI library: themis_jni_{install,uninstall}
The library is installed to $(jnidir) which is set to $(libdir) by default, but can be overriden. This is because Java is not required to look into standard system directories for JNI libraries and may have a different opinion about that.

Package Themis JNI library in DEB and RPM

Add a separate package called libthemis-jni with Themis JNI library used by JavaThemis wrapper. It depends on Themis Core library against which it is linked. Since we maintain backwards compatibility it should be possible to upgrade Themis Core independently and we allow later versions to satisfy the dependency.
Debian and CentOS systems have different opinions about location of JNI libraries. Use jnidir to adjust for that.

Warn the user about path mismatch

Java installations are not required to look into system library directories. While normally OpenJDK and Oracle JDK installations do look into some directory in the /usr hierarchy, none of the systems that we support looks into /usr/local/lib where we install by default when compiling from source.
This is particularly important for macOS where Homebrew cannot (realistically) install into any of the standard directories.
Checklist

 Change is covered by automated tests
(CircleCI does not test DEB/RPM, we’ll check with internal build system)
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (no API changes)
 Changelog is updated if needed (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,554,2019-11-08T01:41:47Z,2019-11-08T19:35:00Z,2019-11-08T19:35:01Z,MERGED,True,30,35,15,https://github.com/ilammy,Fix data alignment issues found by UBSan,4,['core'],https://github.com/cossacklabs/themis/pull/554,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/554,"PR #548 has introduced a blacklist for some of the issues found by undefined behavior sanitizer. We have silenced the warnings until we resolved them, and disabled UBSan runs for GCC completely. While that PR has been cooking, I have found a proper way to fix the warnings. That allows us to remove the blacklist and mark the remaining warnings in a way supported by GCC.
Make soter_container_hdr_t packed
Many places in our code simply cast arbitrary byte arrays to Soter header structure and expect that to work. Type-punning misaligned data is undefined behavior (and may cause crashes on some ARM systems).
Set soter_container_hdr_t to be 1-byte aligned (usually it's expected to have 4-byte alignment). This fixes the inconsistency and forces the compiler to generate safe code. On x86 this does not really change anything since it allows misaligned loads, but ARM code now behaves differently. See for yourself in Godbolt.
Revert ""Blacklist some UBSan warnings""
We can also enable UBSan for GCC now.
Mark Ed25519 functions for UBSan
These functions are written by level 80 crypto C gurus so they are as free from undefined behavior as Chuck Norris. Their behavior is the behavior. By definition. Daniel J. Bernstein is never wrong, except the times when he is.
There are caveats (see commit message for details), but they are acceptable given the architectures we support.
Avoid misaligned writes
There were some stray misaligned writes besides from soter_container_hdr_t. Fix them.
Checklist

 Change is covered by automated tests (we-e-ell, we don’t check ARM,  but...)
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation (not needed, this is a private thing)
 Example projects and code samples are updated if needed (no API changes)
 Changelog is updated if needed (nothing interesting for the users)","PR #548 has introduced a blacklist for some of the issues found by undefined behavior sanitizer. We have silenced the warnings until we resolved them, and disabled UBSan runs for GCC completely. While that PR has been cooking, I have found a proper way to fix the warnings. That allows us to remove the blacklist and mark the remaining warnings in a way supported by GCC.
Make soter_container_hdr_t packed
Many places in our code simply cast arbitrary byte arrays to Soter header structure and expect that to work. Type-punning misaligned data is undefined behavior (and may cause crashes on some ARM systems).
Set soter_container_hdr_t to be 1-byte aligned (usually it's expected to have 4-byte alignment). This fixes the inconsistency and forces the compiler to generate safe code. On x86 this does not really change anything since it allows misaligned loads, but ARM code now behaves differently. See for yourself in Godbolt.
Revert ""Blacklist some UBSan warnings""
We can also enable UBSan for GCC now.
Mark Ed25519 functions for UBSan
These functions are written by level 80 crypto C gurus so they are as free from undefined behavior as Chuck Norris. Their behavior is the behavior. By definition. Daniel J. Bernstein is never wrong, except the times when he is.
There are caveats (see commit message for details), but they are acceptable given the architectures we support.
Avoid misaligned writes
There were some stray misaligned writes besides from soter_container_hdr_t. Fix them.
Checklist

 Change is covered by automated tests (we-e-ell, we don’t check ARM,  but...)
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation (not needed, this is a private thing)
 Example projects and code samples are updated if needed (no API changes)
 Changelog is updated if needed (nothing interesting for the users)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,554,2019-11-08T01:41:47Z,2019-11-08T19:35:00Z,2019-11-08T19:35:01Z,MERGED,True,30,35,15,https://github.com/ilammy,Fix data alignment issues found by UBSan,4,['core'],https://github.com/cossacklabs/themis/pull/554,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/554#issuecomment-551468340,"PR #548 has introduced a blacklist for some of the issues found by undefined behavior sanitizer. We have silenced the warnings until we resolved them, and disabled UBSan runs for GCC completely. While that PR has been cooking, I have found a proper way to fix the warnings. That allows us to remove the blacklist and mark the remaining warnings in a way supported by GCC.
Make soter_container_hdr_t packed
Many places in our code simply cast arbitrary byte arrays to Soter header structure and expect that to work. Type-punning misaligned data is undefined behavior (and may cause crashes on some ARM systems).
Set soter_container_hdr_t to be 1-byte aligned (usually it's expected to have 4-byte alignment). This fixes the inconsistency and forces the compiler to generate safe code. On x86 this does not really change anything since it allows misaligned loads, but ARM code now behaves differently. See for yourself in Godbolt.
Revert ""Blacklist some UBSan warnings""
We can also enable UBSan for GCC now.
Mark Ed25519 functions for UBSan
These functions are written by level 80 crypto C gurus so they are as free from undefined behavior as Chuck Norris. Their behavior is the behavior. By definition. Daniel J. Bernstein is never wrong, except the times when he is.
There are caveats (see commit message for details), but they are acceptable given the architectures we support.
Avoid misaligned writes
There were some stray misaligned writes besides from soter_container_hdr_t. Fix them.
Checklist

 Change is covered by automated tests (we-e-ell, we don’t check ARM,  but...)
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation (not needed, this is a private thing)
 Example projects and code samples are updated if needed (no API changes)
 Changelog is updated if needed (nothing interesting for the users)","Their behavior is the behavior. By definition. Daniel J. Bernstein is never wrong, except the times when he is.

so true.

but ARM code now behaves differently

let's look precisely on mobile tests after merging this PR. i'm 99% sure that nothing will break, but just in case",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,555,2019-11-08T15:06:21Z,2019-11-11T14:53:37Z,2019-11-11T14:53:38Z,MERGED,True,5,1,2,https://github.com/ilammy,Fix Secure Comparator in PyThemis on 32-bit,3,"['W-PyThemis :snake:', 'compatibility']",https://github.com/cossacklabs/themis/pull/555,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/555,"We have been using incorrect return type which breaks PyThemis on 32-bit systems. Let’s use correct type.
Checklist

 Change is covered by automated tests (32-bit platforms tested in private build system)
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (no API changes)
 Changelog is updated if needed (good news added!)","We have been using incorrect return type which breaks PyThemis on 32-bit systems. Let’s use correct type.
Checklist

 Change is covered by automated tests (32-bit platforms tested in private build system)
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (no API changes)
 Changelog is updated if needed (good news added!)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,555,2019-11-08T15:06:21Z,2019-11-11T14:53:37Z,2019-11-11T14:53:38Z,MERGED,True,5,1,2,https://github.com/ilammy,Fix Secure Comparator in PyThemis on 32-bit,3,"['W-PyThemis :snake:', 'compatibility']",https://github.com/cossacklabs/themis/pull/555,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/555#issuecomment-552138599,"We have been using incorrect return type which breaks PyThemis on 32-bit systems. Let’s use correct type.
Checklist

 Change is covered by automated tests (32-bit platforms tested in private build system)
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (no API changes)
 Changelog is updated if needed (good news added!)","Our internal CI system has been failing because of Python tests being broken on 32-bit systems due to this bug. (No links since that triggers @shadinua and @gene-eu, see T1393 you-know-where.)
I've fired up a Debian Stretch i686 VM, installed Python, run the tests, and the failure immediately reproduced. Keen observation of the source file revealed the issue, and the fix worked on my machine. It also seems to fix the CI build as well, see you-know-what again.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,556,2019-11-08T20:56:28Z,2019-11-11T14:53:15Z,2019-11-11T14:53:16Z,MERGED,True,6,2,2,https://github.com/ilammy,Don't suppress UBSan unless compiling with UBSan,1,['core'],https://github.com/cossacklabs/themis/pull/556,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/556,"Recently added SOTER_ED25519_NO_UBSAN macro is expanded into UBSan tweaks even when we do not compile with Undefined Behavior sanitizer enabled. This can produce ugly warnings on systems that do not support all of the sanitizer flags:

Let's just expand this macro into a no-op if we are not compiling with sanitizers. That's easier than deducing exactly which sanitizer flags are supported to avoid compiler warnings.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not relevant)
 The coding guidelines are followed
 Public API has proper documentation (private changes)
 Example projects and code samples are updated (no API changes)
 Changelog is updated if needed (not interesting)","Recently added SOTER_ED25519_NO_UBSAN macro is expanded into UBSan tweaks even when we do not compile with Undefined Behavior sanitizer enabled. This can produce ugly warnings on systems that do not support all of the sanitizer flags:

Let's just expand this macro into a no-op if we are not compiling with sanitizers. That's easier than deducing exactly which sanitizer flags are supported to avoid compiler warnings.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not relevant)
 The coding guidelines are followed
 Public API has proper documentation (private changes)
 Example projects and code samples are updated (no API changes)
 Changelog is updated if needed (not interesting)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,557,2019-11-13T13:03:08Z,2019-11-14T19:33:55Z,2019-11-14T19:33:57Z,MERGED,True,117,54,12,https://github.com/ilammy,Fix and enable Android tests,4,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/557,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/557,"Rejoice, Android, because your name is written in config.yml!
Ahem... I mean, let’s bring Android build on CircleCI back to life and deliver on that promise that I made in July. And we’re not moving to Bitrise.
There are quite a few changes in here. More details can be found in commit messages. A short summary is:

Update Docker image, Gradle, and build tools used for Android
Update target Android API to 28, minimum required by Google Play
Update tests to use JUnit4 API instead of deprecated AndoidTestCase
Fix a bug* in SecureSocket implementation that was breaking the tests


__________
* I have absolutely no idea how it survived given that the tests were working in the past. I strongly suspect now that they were not actually running, or the failure was ignored.

Checklist

 Change is covered by automated tests (duh...)
 Benchmark results are attached (see CircleCI timing, I guess)
 The coding guidelines are followed
 Public API has proper documentation (no changes)
 Example projects and code samples are updated (not affected)
 Changelog is updated if needed (bug fixes)","Rejoice, Android, because your name is written in config.yml!
Ahem... I mean, let’s bring Android build on CircleCI back to life and deliver on that promise that I made in July. And we’re not moving to Bitrise.
There are quite a few changes in here. More details can be found in commit messages. A short summary is:

Update Docker image, Gradle, and build tools used for Android
Update target Android API to 28, minimum required by Google Play
Update tests to use JUnit4 API instead of deprecated AndoidTestCase
Fix a bug* in SecureSocket implementation that was breaking the tests


__________
* I have absolutely no idea how it survived given that the tests were working in the past. I strongly suspect now that they were not actually running, or the failure was ignored.

Checklist

 Change is covered by automated tests (duh...)
 Benchmark results are attached (see CircleCI timing, I guess)
 The coding guidelines are followed
 Public API has proper documentation (no changes)
 Example projects and code samples are updated (not affected)
 Changelog is updated if needed (bug fixes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,558,2019-11-28T14:11:43Z,2019-11-29T14:25:54Z,2019-11-29T14:25:56Z,MERGED,True,105,98,10,https://github.com/karenswry,Grammar and formatting changes,17,['docs :books:'],https://github.com/cossacklabs/themis/pull/558,https://github.com/karenswry,1,https://github.com/cossacklabs/themis/pull/558,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed (in case of notable or breaking changes)","Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,558,2019-11-28T14:11:43Z,2019-11-29T14:25:54Z,2019-11-29T14:25:56Z,MERGED,True,105,98,10,https://github.com/karenswry,Grammar and formatting changes,17,['docs :books:'],https://github.com/cossacklabs/themis/pull/558,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/558#issuecomment-559806579,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed (in case of notable or breaking changes)","Merging these changes, as these are only docs changes.
jsthemis tests start failing, dunno why, but we'll take a look",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,559,2019-12-03T08:17:51Z,2019-12-04T05:36:58Z,2019-12-04T05:36:59Z,MERGED,True,13,15,2,https://github.com/ilammy,Unbreak Doxygen configuration,4,['docs :books:'],https://github.com/cossacklabs/themis/pull/559,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/559,"We have a Doxyfile and a lot of Doxygen-compatible comments in Themis codebase. However, they are currently broken. Update Doxyfile and unbreak Doxygen configuration.
Now running doxygen from the project root is actually useful.
Before:

After:

It does not look as good as it could, there are many missing files, some docs are not pretty, etc. But at least they can be viewed now and we can work on improvements. Some of the most obnoxious ones are fixed right here.
Checklist

 Change is covered by automated tests (it is not)
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (not applicable)
 Changelog is updated if needed (not applicable)","We have a Doxyfile and a lot of Doxygen-compatible comments in Themis codebase. However, they are currently broken. Update Doxyfile and unbreak Doxygen configuration.
Now running doxygen from the project root is actually useful.
Before:

After:

It does not look as good as it could, there are many missing files, some docs are not pretty, etc. But at least they can be viewed now and we can work on improvements. Some of the most obnoxious ones are fixed right here.
Checklist

 Change is covered by automated tests (it is not)
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (not applicable)
 Changelog is updated if needed (not applicable)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,559,2019-12-03T08:17:51Z,2019-12-04T05:36:58Z,2019-12-04T05:36:59Z,MERGED,True,13,15,2,https://github.com/ilammy,Unbreak Doxygen configuration,4,['docs :books:'],https://github.com/cossacklabs/themis/pull/559,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/559#issuecomment-561228495,"We have a Doxyfile and a lot of Doxygen-compatible comments in Themis codebase. However, they are currently broken. Update Doxyfile and unbreak Doxygen configuration.
Now running doxygen from the project root is actually useful.
Before:

After:

It does not look as good as it could, there are many missing files, some docs are not pretty, etc. But at least they can be viewed now and we can work on improvements. Some of the most obnoxious ones are fixed right here.
Checklist

 Change is covered by automated tests (it is not)
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (not applicable)
 Changelog is updated if needed (not applicable)",Thank you @ilammy for taking care! Merge 'em all!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,560,2019-12-04T11:03:33Z,2019-12-06T09:11:43Z,2019-12-06T09:11:44Z,MERGED,True,262,38,4,https://github.com/ilammy,Symmetric keygen: Themis Core,5,['core'],https://github.com/cossacklabs/themis/pull/560,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/560,"Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API.
We are going to need a way to let our users generate strong symmetric keys for use with Secure Cell. This core function is the implementation of key generation. High-level wrappers will be using it to implement key generation.
The API has the usual “check – allocate – output” style found in other places in Themis:
themis_status_t themis_gen_sym_key(uint8_t* key, size_t* key_length);
The users are expected to first pass NULL for key to learn the default length, then allocate a suitable buffer and call the function again to receive key bytes. After that the key can be immediately used with Secure Cell. (Tests and examples for Secure Cell will be updated in next pull requests.)
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation (hell yeah)
 Example projects and code samples are updated (will do later)
 Changelog is updated","Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API.
We are going to need a way to let our users generate strong symmetric keys for use with Secure Cell. This core function is the implementation of key generation. High-level wrappers will be using it to implement key generation.
The API has the usual “check – allocate – output” style found in other places in Themis:
themis_status_t themis_gen_sym_key(uint8_t* key, size_t* key_length);
The users are expected to first pass NULL for key to learn the default length, then allocate a suitable buffer and call the function again to receive key bytes. After that the key can be immediately used with Secure Cell. (Tests and examples for Secure Cell will be updated in next pull requests.)
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation (hell yeah)
 Example projects and code samples are updated (will do later)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,560,2019-12-04T11:03:33Z,2019-12-06T09:11:43Z,2019-12-06T09:11:44Z,MERGED,True,262,38,4,https://github.com/ilammy,Symmetric keygen: Themis Core,5,['core'],https://github.com/cossacklabs/themis/pull/560,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/560#issuecomment-562097456,"Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API.
We are going to need a way to let our users generate strong symmetric keys for use with Secure Cell. This core function is the implementation of key generation. High-level wrappers will be using it to implement key generation.
The API has the usual “check – allocate – output” style found in other places in Themis:
themis_status_t themis_gen_sym_key(uint8_t* key, size_t* key_length);
The users are expected to first pass NULL for key to learn the default length, then allocate a suitable buffer and call the function again to receive key bytes. After that the key can be immediately used with Secure Cell. (Tests and examples for Secure Cell will be updated in next pull requests.)
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation (hell yeah)
 Example projects and code samples are updated (will do later)
 Changelog is updated",Fantastic work! Merge 'em all! 👾,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,561,2019-12-04T15:32:43Z,2019-12-11T18:32:59Z,2019-12-11T18:33:00Z,MERGED,True,577,6,24,https://github.com/ilammy,Symmetric keygen: high-level wrappers,13,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'W-SwiftThemis :large_orange_diamond:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/561,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/561,"Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API introduced in #560, now distributed to high-level wrappers.
This PR contains ‘easy’ wrappers that do not require anything special and with more or less straightforward and compact implementation. I placed them in one PR in order to have fewer merge conflicts in the changelog later.
Node.js (JsThemis) and Java (Android) are hard. They will be added in their own PRs.
Language API
With exception of C++ there is only one entry point for key generation. High-level wrappers generally do not allow the user to customize key length and generate default keys (32 bytes).
Where applicable, new types are introduced along with conversion API.
C++
#include <themispp/secure_keygen.hpp>

std::vector<uint8_t> key = themispp::gen_sym_key();

// Write by reference, mostly for C++03 compatibility:
themispp::gen_sym_key(key);
Go
import ""github.com/cossacklabs/themis/gothemis/keys""

key, err := keys.NewSymmetricKey() // returns keys.SymmetricKey

key.Value // access []byte slice
JavaScript (WebAssembly)
const themis = required('wasm-themis')

let key = new themis.SymmetricKey()
// inherits from Uint8Array to access key bytes

// Can also wrap existing buffers
let buffer = new Uint8Array([1, 2, 3, 4, 5, 6])
let anotherKey = new themis.SymmetricKey(buffer)
Objective-C
#import <objcthemis/objcthemis.h>

NSData *key = TSGenerateSymmetricKey();
PHP
// returns string with key bytes
$key = phpthemis_gen_sym_key();
Python
from pythemis.skeygen import GenerateSymmetricKey

# bytes for Python 3, str for Python2
key = GenerateSymmetricKey()
Ruby
require 'rbthemis'

# returns byte string
key = Themis::gen_sym_key()
Rust
use themis::keys::SymmetricKey;

let key = SymmetricKey::new();
// implements AsRef<[u8]> to access key bytes

// Can also wrap existing buffers
let another_key = SymmetricKey::from_slice(&[1, 2, 3, 4])?;
Swift
import Themis

let key: Data? = TSGenerateSymmetricKey();
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated if needed","Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API introduced in #560, now distributed to high-level wrappers.
This PR contains ‘easy’ wrappers that do not require anything special and with more or less straightforward and compact implementation. I placed them in one PR in order to have fewer merge conflicts in the changelog later.
Node.js (JsThemis) and Java (Android) are hard. They will be added in their own PRs.
Language API
With exception of C++ there is only one entry point for key generation. High-level wrappers generally do not allow the user to customize key length and generate default keys (32 bytes).
Where applicable, new types are introduced along with conversion API.
C++
#include <themispp/secure_keygen.hpp>

std::vector<uint8_t> key = themispp::gen_sym_key();

// Write by reference, mostly for C++03 compatibility:
themispp::gen_sym_key(key);
Go
import ""github.com/cossacklabs/themis/gothemis/keys""

key, err := keys.NewSymmetricKey() // returns keys.SymmetricKey

key.Value // access []byte slice
JavaScript (WebAssembly)
const themis = required('wasm-themis')

let key = new themis.SymmetricKey()
// inherits from Uint8Array to access key bytes

// Can also wrap existing buffers
let buffer = new Uint8Array([1, 2, 3, 4, 5, 6])
let anotherKey = new themis.SymmetricKey(buffer)
Objective-C
#import <objcthemis/objcthemis.h>

NSData *key = TSGenerateSymmetricKey();
PHP
// returns string with key bytes
$key = phpthemis_gen_sym_key();
Python
from pythemis.skeygen import GenerateSymmetricKey

# bytes for Python 3, str for Python2
key = GenerateSymmetricKey()
Ruby
require 'rbthemis'

# returns byte string
key = Themis::gen_sym_key()
Rust
use themis::keys::SymmetricKey;

let key = SymmetricKey::new();
// implements AsRef<[u8]> to access key bytes

// Can also wrap existing buffers
let another_key = SymmetricKey::from_slice(&[1, 2, 3, 4])?;
Swift
import Themis

let key: Data? = TSGenerateSymmetricKey();
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated if needed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,561,2019-12-04T15:32:43Z,2019-12-11T18:32:59Z,2019-12-11T18:33:00Z,MERGED,True,577,6,24,https://github.com/ilammy,Symmetric keygen: high-level wrappers,13,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'W-SwiftThemis :large_orange_diamond:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/561,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/561#issuecomment-562496072,"Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API introduced in #560, now distributed to high-level wrappers.
This PR contains ‘easy’ wrappers that do not require anything special and with more or less straightforward and compact implementation. I placed them in one PR in order to have fewer merge conflicts in the changelog later.
Node.js (JsThemis) and Java (Android) are hard. They will be added in their own PRs.
Language API
With exception of C++ there is only one entry point for key generation. High-level wrappers generally do not allow the user to customize key length and generate default keys (32 bytes).
Where applicable, new types are introduced along with conversion API.
C++
#include <themispp/secure_keygen.hpp>

std::vector<uint8_t> key = themispp::gen_sym_key();

// Write by reference, mostly for C++03 compatibility:
themispp::gen_sym_key(key);
Go
import ""github.com/cossacklabs/themis/gothemis/keys""

key, err := keys.NewSymmetricKey() // returns keys.SymmetricKey

key.Value // access []byte slice
JavaScript (WebAssembly)
const themis = required('wasm-themis')

let key = new themis.SymmetricKey()
// inherits from Uint8Array to access key bytes

// Can also wrap existing buffers
let buffer = new Uint8Array([1, 2, 3, 4, 5, 6])
let anotherKey = new themis.SymmetricKey(buffer)
Objective-C
#import <objcthemis/objcthemis.h>

NSData *key = TSGenerateSymmetricKey();
PHP
// returns string with key bytes
$key = phpthemis_gen_sym_key();
Python
from pythemis.skeygen import GenerateSymmetricKey

# bytes for Python 3, str for Python2
key = GenerateSymmetricKey()
Ruby
require 'rbthemis'

# returns byte string
key = Themis::gen_sym_key()
Rust
use themis::keys::SymmetricKey;

let key = SymmetricKey::new();
// implements AsRef<[u8]> to access key bytes

// Can also wrap existing buffers
let another_key = SymmetricKey::from_slice(&[1, 2, 3, 4])?;
Swift
import Themis

let key: Data? = TSGenerateSymmetricKey();
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated if needed",I’ve rebased the changeset onto master which now has proper Core support. I’ve also added some updates in tests based on feedback in other PRs. This one is ready for review.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,561,2019-12-04T15:32:43Z,2019-12-11T18:32:59Z,2019-12-11T18:33:00Z,MERGED,True,577,6,24,https://github.com/ilammy,Symmetric keygen: high-level wrappers,13,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'W-SwiftThemis :large_orange_diamond:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/561,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/561#issuecomment-562539459,"Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API introduced in #560, now distributed to high-level wrappers.
This PR contains ‘easy’ wrappers that do not require anything special and with more or less straightforward and compact implementation. I placed them in one PR in order to have fewer merge conflicts in the changelog later.
Node.js (JsThemis) and Java (Android) are hard. They will be added in their own PRs.
Language API
With exception of C++ there is only one entry point for key generation. High-level wrappers generally do not allow the user to customize key length and generate default keys (32 bytes).
Where applicable, new types are introduced along with conversion API.
C++
#include <themispp/secure_keygen.hpp>

std::vector<uint8_t> key = themispp::gen_sym_key();

// Write by reference, mostly for C++03 compatibility:
themispp::gen_sym_key(key);
Go
import ""github.com/cossacklabs/themis/gothemis/keys""

key, err := keys.NewSymmetricKey() // returns keys.SymmetricKey

key.Value // access []byte slice
JavaScript (WebAssembly)
const themis = required('wasm-themis')

let key = new themis.SymmetricKey()
// inherits from Uint8Array to access key bytes

// Can also wrap existing buffers
let buffer = new Uint8Array([1, 2, 3, 4, 5, 6])
let anotherKey = new themis.SymmetricKey(buffer)
Objective-C
#import <objcthemis/objcthemis.h>

NSData *key = TSGenerateSymmetricKey();
PHP
// returns string with key bytes
$key = phpthemis_gen_sym_key();
Python
from pythemis.skeygen import GenerateSymmetricKey

# bytes for Python 3, str for Python2
key = GenerateSymmetricKey()
Ruby
require 'rbthemis'

# returns byte string
key = Themis::gen_sym_key()
Rust
use themis::keys::SymmetricKey;

let key = SymmetricKey::new();
// implements AsRef<[u8]> to access key bytes

// Can also wrap existing buffers
let another_key = SymmetricKey::from_slice(&[1, 2, 3, 4])?;
Swift
import Themis

let key: Data? = TSGenerateSymmetricKey();
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated if needed",That's a lot of going on here!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,561,2019-12-04T15:32:43Z,2019-12-11T18:32:59Z,2019-12-11T18:33:00Z,MERGED,True,577,6,24,https://github.com/ilammy,Symmetric keygen: high-level wrappers,13,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'W-SwiftThemis :large_orange_diamond:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/561,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/561#issuecomment-562544547,"Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API introduced in #560, now distributed to high-level wrappers.
This PR contains ‘easy’ wrappers that do not require anything special and with more or less straightforward and compact implementation. I placed them in one PR in order to have fewer merge conflicts in the changelog later.
Node.js (JsThemis) and Java (Android) are hard. They will be added in their own PRs.
Language API
With exception of C++ there is only one entry point for key generation. High-level wrappers generally do not allow the user to customize key length and generate default keys (32 bytes).
Where applicable, new types are introduced along with conversion API.
C++
#include <themispp/secure_keygen.hpp>

std::vector<uint8_t> key = themispp::gen_sym_key();

// Write by reference, mostly for C++03 compatibility:
themispp::gen_sym_key(key);
Go
import ""github.com/cossacklabs/themis/gothemis/keys""

key, err := keys.NewSymmetricKey() // returns keys.SymmetricKey

key.Value // access []byte slice
JavaScript (WebAssembly)
const themis = required('wasm-themis')

let key = new themis.SymmetricKey()
// inherits from Uint8Array to access key bytes

// Can also wrap existing buffers
let buffer = new Uint8Array([1, 2, 3, 4, 5, 6])
let anotherKey = new themis.SymmetricKey(buffer)
Objective-C
#import <objcthemis/objcthemis.h>

NSData *key = TSGenerateSymmetricKey();
PHP
// returns string with key bytes
$key = phpthemis_gen_sym_key();
Python
from pythemis.skeygen import GenerateSymmetricKey

# bytes for Python 3, str for Python2
key = GenerateSymmetricKey()
Ruby
require 'rbthemis'

# returns byte string
key = Themis::gen_sym_key()
Rust
use themis::keys::SymmetricKey;

let key = SymmetricKey::new();
// implements AsRef<[u8]> to access key bytes

// Can also wrap existing buffers
let another_key = SymmetricKey::from_slice(&[1, 2, 3, 4])?;
Swift
import Themis

let key: Data? = TSGenerateSymmetricKey();
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated if needed","That's a lot of going on here!

I have a faint feeling that this PR should have been nine separate PRs...
Also, @vixentael, by chance, do you have a guess why Bitrise build keeps failing? Because it's certainly fine on the master branch, the changes do not seem to have anything to do with OpenSSL includes, not to say that the framework and tests build fine on my machine.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,561,2019-12-04T15:32:43Z,2019-12-11T18:32:59Z,2019-12-11T18:33:00Z,MERGED,True,577,6,24,https://github.com/ilammy,Symmetric keygen: high-level wrappers,13,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'W-SwiftThemis :large_orange_diamond:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/561,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/561#issuecomment-562579212,"Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API introduced in #560, now distributed to high-level wrappers.
This PR contains ‘easy’ wrappers that do not require anything special and with more or less straightforward and compact implementation. I placed them in one PR in order to have fewer merge conflicts in the changelog later.
Node.js (JsThemis) and Java (Android) are hard. They will be added in their own PRs.
Language API
With exception of C++ there is only one entry point for key generation. High-level wrappers generally do not allow the user to customize key length and generate default keys (32 bytes).
Where applicable, new types are introduced along with conversion API.
C++
#include <themispp/secure_keygen.hpp>

std::vector<uint8_t> key = themispp::gen_sym_key();

// Write by reference, mostly for C++03 compatibility:
themispp::gen_sym_key(key);
Go
import ""github.com/cossacklabs/themis/gothemis/keys""

key, err := keys.NewSymmetricKey() // returns keys.SymmetricKey

key.Value // access []byte slice
JavaScript (WebAssembly)
const themis = required('wasm-themis')

let key = new themis.SymmetricKey()
// inherits from Uint8Array to access key bytes

// Can also wrap existing buffers
let buffer = new Uint8Array([1, 2, 3, 4, 5, 6])
let anotherKey = new themis.SymmetricKey(buffer)
Objective-C
#import <objcthemis/objcthemis.h>

NSData *key = TSGenerateSymmetricKey();
PHP
// returns string with key bytes
$key = phpthemis_gen_sym_key();
Python
from pythemis.skeygen import GenerateSymmetricKey

# bytes for Python 3, str for Python2
key = GenerateSymmetricKey()
Ruby
require 'rbthemis'

# returns byte string
key = Themis::gen_sym_key()
Rust
use themis::keys::SymmetricKey;

let key = SymmetricKey::new();
// implements AsRef<[u8]> to access key bytes

// Can also wrap existing buffers
let another_key = SymmetricKey::from_slice(&[1, 2, 3, 4])?;
Swift
import Themis

let key: Data? = TSGenerateSymmetricKey();
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated if needed","why Bitrise build keeps failing

I have a guess:

  
    
      themis/tests/objcthemis/Podfile
    
    
        Lines 24 to 25
      in
      5f886e1
    
  
  
    

        
          
           # example should work with head 
        

        
          
           pod 'themis', :git => ""https://github.com/cossacklabs/themis.git"" 
        
    
  


This pulls in ObjCThemis code from master branch, not from a pull request, that's probably why the tests don't see the new API, and... that causes an error about <openssl/crypto.h> being not found to be displayed? Weird but possible. It's Apple after all, you should think different™
For local testing I have always been using an edited Podfile that refers to this branch. However, if I use it without changes then the errors are different, like more appropriate:

Use of unresolved identifier 'TSGenerateSymmetricKey'",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,561,2019-12-04T15:32:43Z,2019-12-11T18:32:59Z,2019-12-11T18:33:00Z,MERGED,True,577,6,24,https://github.com/ilammy,Symmetric keygen: high-level wrappers,13,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'W-SwiftThemis :large_orange_diamond:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/561,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/561#issuecomment-562588221,"Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API introduced in #560, now distributed to high-level wrappers.
This PR contains ‘easy’ wrappers that do not require anything special and with more or less straightforward and compact implementation. I placed them in one PR in order to have fewer merge conflicts in the changelog later.
Node.js (JsThemis) and Java (Android) are hard. They will be added in their own PRs.
Language API
With exception of C++ there is only one entry point for key generation. High-level wrappers generally do not allow the user to customize key length and generate default keys (32 bytes).
Where applicable, new types are introduced along with conversion API.
C++
#include <themispp/secure_keygen.hpp>

std::vector<uint8_t> key = themispp::gen_sym_key();

// Write by reference, mostly for C++03 compatibility:
themispp::gen_sym_key(key);
Go
import ""github.com/cossacklabs/themis/gothemis/keys""

key, err := keys.NewSymmetricKey() // returns keys.SymmetricKey

key.Value // access []byte slice
JavaScript (WebAssembly)
const themis = required('wasm-themis')

let key = new themis.SymmetricKey()
// inherits from Uint8Array to access key bytes

// Can also wrap existing buffers
let buffer = new Uint8Array([1, 2, 3, 4, 5, 6])
let anotherKey = new themis.SymmetricKey(buffer)
Objective-C
#import <objcthemis/objcthemis.h>

NSData *key = TSGenerateSymmetricKey();
PHP
// returns string with key bytes
$key = phpthemis_gen_sym_key();
Python
from pythemis.skeygen import GenerateSymmetricKey

# bytes for Python 3, str for Python2
key = GenerateSymmetricKey()
Ruby
require 'rbthemis'

# returns byte string
key = Themis::gen_sym_key()
Rust
use themis::keys::SymmetricKey;

let key = SymmetricKey::new();
// implements AsRef<[u8]> to access key bytes

// Can also wrap existing buffers
let another_key = SymmetricKey::from_slice(&[1, 2, 3, 4])?;
Swift
import Themis

let key: Data? = TSGenerateSymmetricKey();
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated if needed","Oh, I get it now. Carthage build fails because carthage bootstrap step did not run as it’s not marked “run if previous steps fail”, and that causes an error with OpenSSL: of course we don’t have headers if the dependencies are not fetched. CocoaPods build fails for the reason I described above.
I’ve tweaked Bitrise build steps to avoid these issues:

Added a new Hack Podfile to use PR branch step before pod install so that we install the code from the pull request, not from the master branch.
Marked Carthage bootstrap step to “Run if previous Step failed”.

Let’s see if this is all we need.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,561,2019-12-04T15:32:43Z,2019-12-11T18:32:59Z,2019-12-11T18:33:00Z,MERGED,True,577,6,24,https://github.com/ilammy,Symmetric keygen: high-level wrappers,13,"['W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'W-SwiftThemis :large_orange_diamond:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/561,https://github.com/vixentael,7,https://github.com/cossacklabs/themis/pull/561#issuecomment-564530703,"Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API introduced in #560, now distributed to high-level wrappers.
This PR contains ‘easy’ wrappers that do not require anything special and with more or less straightforward and compact implementation. I placed them in one PR in order to have fewer merge conflicts in the changelog later.
Node.js (JsThemis) and Java (Android) are hard. They will be added in their own PRs.
Language API
With exception of C++ there is only one entry point for key generation. High-level wrappers generally do not allow the user to customize key length and generate default keys (32 bytes).
Where applicable, new types are introduced along with conversion API.
C++
#include <themispp/secure_keygen.hpp>

std::vector<uint8_t> key = themispp::gen_sym_key();

// Write by reference, mostly for C++03 compatibility:
themispp::gen_sym_key(key);
Go
import ""github.com/cossacklabs/themis/gothemis/keys""

key, err := keys.NewSymmetricKey() // returns keys.SymmetricKey

key.Value // access []byte slice
JavaScript (WebAssembly)
const themis = required('wasm-themis')

let key = new themis.SymmetricKey()
// inherits from Uint8Array to access key bytes

// Can also wrap existing buffers
let buffer = new Uint8Array([1, 2, 3, 4, 5, 6])
let anotherKey = new themis.SymmetricKey(buffer)
Objective-C
#import <objcthemis/objcthemis.h>

NSData *key = TSGenerateSymmetricKey();
PHP
// returns string with key bytes
$key = phpthemis_gen_sym_key();
Python
from pythemis.skeygen import GenerateSymmetricKey

# bytes for Python 3, str for Python2
key = GenerateSymmetricKey()
Ruby
require 'rbthemis'

# returns byte string
key = Themis::gen_sym_key()
Rust
use themis::keys::SymmetricKey;

let key = SymmetricKey::new();
// implements AsRef<[u8]> to access key bytes

// Can also wrap existing buffers
let another_key = SymmetricKey::from_slice(&[1, 2, 3, 4])?;
Swift
import Themis

let key: Data? = TSGenerateSymmetricKey();
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated if needed",Looks like you fixed a problem with Bitrise,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,562,2019-12-04T15:34:08Z,2019-12-11T07:55:35Z,2019-12-11T07:55:37Z,MERGED,True,154,3,5,https://github.com/ilammy,Symmetric keygen: JsThemis,5,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/562,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/562,"Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API introduced in #560, now distributed to JsThemis wrapper.
Language API
JavaScript (Node.js)
Here's how it can be used:
const themis = required('jsthemis')

let key = new themis.SymmetricKey()
// key is Buffer, use that to access key bytes

// Can also wrap existing buffers
let buffer = Buffer.from([1, 2, 3, 4, 5, 6])
let anotherKey = new themis.SymmetricKey(buffer)
Yes, it looks exactly like WebAssembly API from #561.
Why is it special?
Node.js native extensions and V8 are hard.
Initially it was expected that JsThemis has an interface similar to WasmThemis. Something like this:
class SymmetricKey extends Buffer {
    constructor(array) {
        if (array) {
            super(array)
        } else {
            super(generateNewKey())
        }
    }
}
Note that SymmetricKey is a class which inherits from Node.js Buffer. Now consider the fact that JavaScript does not really have classes, it has objects, functions, and prototypes, with EcmaScript 6 classes being a nice syntax sugar on top of that.
It turned out to be not obvious how to implement JavaScript inheritance from native JavaScript classes given the API provided by V8 (and I'm not even talking about the outstanding quality of V8 documentation /s).
This is further complicated by the fact that all of the Buffer's constructors are considered deprecated, with Buffer.alloc() and Buffer.from() being the recommended way of constructing Buffers.
I'm in a bit of a loss here so effectively SymmetricKey is now
function SymmetricKey(array) {
    if (array) {
        return Buffer.from(array)
    } else {
        return generateKeyBuffer()
    }
}
This kinda works on the API level because classes are functions in JavaScript, but it's not strictly correct as new SymmetricKey() expression returns an instance of Buffer (not SymmetricKey). It's
fine since that's all API that we need at the moment, but it's not clean. However, after spending around 4 hours trying to understand how to do inheritance, I kinda gave up.
This should be enough for practical purposes for now. We will have to get back to this issue if we would like to provide our own wrapper over Buffer instances for all other keys, but for now it's good enough.
* fingers crossed *
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated","Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API introduced in #560, now distributed to JsThemis wrapper.
Language API
JavaScript (Node.js)
Here's how it can be used:
const themis = required('jsthemis')

let key = new themis.SymmetricKey()
// key is Buffer, use that to access key bytes

// Can also wrap existing buffers
let buffer = Buffer.from([1, 2, 3, 4, 5, 6])
let anotherKey = new themis.SymmetricKey(buffer)
Yes, it looks exactly like WebAssembly API from #561.
Why is it special?
Node.js native extensions and V8 are hard.
Initially it was expected that JsThemis has an interface similar to WasmThemis. Something like this:
class SymmetricKey extends Buffer {
    constructor(array) {
        if (array) {
            super(array)
        } else {
            super(generateNewKey())
        }
    }
}
Note that SymmetricKey is a class which inherits from Node.js Buffer. Now consider the fact that JavaScript does not really have classes, it has objects, functions, and prototypes, with EcmaScript 6 classes being a nice syntax sugar on top of that.
It turned out to be not obvious how to implement JavaScript inheritance from native JavaScript classes given the API provided by V8 (and I'm not even talking about the outstanding quality of V8 documentation /s).
This is further complicated by the fact that all of the Buffer's constructors are considered deprecated, with Buffer.alloc() and Buffer.from() being the recommended way of constructing Buffers.
I'm in a bit of a loss here so effectively SymmetricKey is now
function SymmetricKey(array) {
    if (array) {
        return Buffer.from(array)
    } else {
        return generateKeyBuffer()
    }
}
This kinda works on the API level because classes are functions in JavaScript, but it's not strictly correct as new SymmetricKey() expression returns an instance of Buffer (not SymmetricKey). It's
fine since that's all API that we need at the moment, but it's not clean. However, after spending around 4 hours trying to understand how to do inheritance, I kinda gave up.
This should be enough for practical purposes for now. We will have to get back to this issue if we would like to provide our own wrapper over Buffer instances for all other keys, but for now it's good enough.
* fingers crossed *
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,563,2019-12-04T15:35:21Z,2019-12-06T09:12:25Z,2019-12-06T09:12:27Z,MERGED,True,132,113,10,https://github.com/ilammy,Make some JavaThemis exceptions unchecked,5,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/563,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/563,"This is a preparatory change for symmetric key generation API. It's not strictly required but I'd like to set this right while we can. It was motivated by addition of new classes and interfaces which deal with keys. In Java keys are stored as byte[] arrays that must not be null and must not be empty. If they are then NullArgumentException and InvalidArgumentException may be thrown (these are our custom exceptions from com.cossacklabs.themis package). The issue here is that they are checked exceptions and this is inconvenient: I had to duplicate throws NullArgumentException, InvalidArgumentException in about a dozen of places for no reason and our users will have to do the same with every method where they use keys (even if they use them correctly).
So I opened this can of worms...
What changes in existing Java apps if this is merged?
Nothing. If they worked before you may leave them unchanged and they will be fine.
However, if you write new code or refactoring something then the following is applicable:


NullArgumentException, InvalidArgumentException, KeyGenerationException are now unchecked exceptions. You do not need to specify them in throws clauses anymore. Normally you don't need to catch these errors specifically if you use API correctly.


java.io.UnsupportedEncodingException is now not thrown by String-based API, you can stop checking for that.


SecureCompare methods now throw RuntimeException on internal failures instead of checked SecureCompareException. They should not fail under normal circumstances.
All methods will also throw unchecked NullArgumentException and InvalidArgumentException instead of SecureCompareException if you provide invalid arguments.
proceed() method may fail with checked SecureCompareException, as before.


SecureSession methods also use RuntimeException for internal failures instead of checked SecureSessionException in most places. Ditto for invalid argument checks.
wrap(), unwrap(), and load() may still throw checked SecureSessionException.


SecureTransportSession also does not throw SecureSessionException anymore.


Since we don't test with Kotlin I have no idea about the API impact, but I believe it's fine 🤞
Kotlin does not use checked exceptions, they are all unchecked there (in Java sense).
Detailed rant

Excerpt from commit messages...

Checked exceptions are commonly considered a design mistake in Java standard library [1, 2, 3, 4]. They have some limited uses, but generally they do not provide safe and ergonomic interface for the users because they are often misunderstood. It is common to use checked exceptions in situations where unchecked exceptions are more appropriate. This leads to exceptions that cannot be handled by the application and it is really common to ignore (""fix"") them by adding throws Exception specifier because you can't be bothered to enumerate a dozen of concrete classes of internal library errors. Either way it is not better than using unchecked exceptions in the first place.
Unchecked exceptions are intended for system faults and programming errors which are generally not recoverable by the application [5]. For example, using a method incorrectly, not checking for null when it should be checked for, providing invalid argument values, etc. These are generally not under control of the application, in the sense that the user cannot do something to avoid this failure other than fixing application logic (or, well, circumventing the faulty code path).
Checked exceptions are intended to be used for recoverable errors [5]. That is, something that the application can control and influence. For example, invalid user input can cause a checked exception because this is an expected situation (the user can make mistakes and this is not something that application can generally prevent in code). However, the application can control the user and instruct them to give correct input, or at least tell the user that the input is incorrect. That is, the application is expected to always handle checked exception in some way, and there should be a catch clause somewhere in the middle, not only on the top level for possible run-time exceptions.
With this in mind, convert the following com.cossacklabs.themis exceptions into runtime, unchecked variants:


NullArgumentException is used to indicate that the programmer passed a null value where it should not be passed, and this will cause a NullPointerException later. In fact, NullArgumentException is now a subclass of NullPointerException as it indicates misuse of null values.


InvalidArgumentException is used to indicate that the programmer has passed an invalid argument to the method: an unknown constant, an empty buffer that must not be empty, or some other violation of the method contract. It is a subclass of IllegalArgumentException now.


KeyGenerationException it is used to indicate internal failure in Themis key generation routines. This is not something under user control and key generation does not have any input that can change its behavior. This error can be caused either by a bug in Themis Core or by a misconfigured cryptographic backed. Both situations cannot be recovered by the application.


Note, however, that SecureCellException, SecureMessageWrapException, SecureSessionException, and SecureCompareException are still checked. These exceptions are used to indicate issues with user-provided data: key material, data messages, etc. These are expected failures and should be handled by the application somehow.

Checklist

 Change is covered by automated tests
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation (not applicable)
 Example projects and code samples are updated (not applicable)
 Changelog is updated","This is a preparatory change for symmetric key generation API. It's not strictly required but I'd like to set this right while we can. It was motivated by addition of new classes and interfaces which deal with keys. In Java keys are stored as byte[] arrays that must not be null and must not be empty. If they are then NullArgumentException and InvalidArgumentException may be thrown (these are our custom exceptions from com.cossacklabs.themis package). The issue here is that they are checked exceptions and this is inconvenient: I had to duplicate throws NullArgumentException, InvalidArgumentException in about a dozen of places for no reason and our users will have to do the same with every method where they use keys (even if they use them correctly).
So I opened this can of worms...
What changes in existing Java apps if this is merged?
Nothing. If they worked before you may leave them unchanged and they will be fine.
However, if you write new code or refactoring something then the following is applicable:


NullArgumentException, InvalidArgumentException, KeyGenerationException are now unchecked exceptions. You do not need to specify them in throws clauses anymore. Normally you don't need to catch these errors specifically if you use API correctly.


java.io.UnsupportedEncodingException is now not thrown by String-based API, you can stop checking for that.


SecureCompare methods now throw RuntimeException on internal failures instead of checked SecureCompareException. They should not fail under normal circumstances.
All methods will also throw unchecked NullArgumentException and InvalidArgumentException instead of SecureCompareException if you provide invalid arguments.
proceed() method may fail with checked SecureCompareException, as before.


SecureSession methods also use RuntimeException for internal failures instead of checked SecureSessionException in most places. Ditto for invalid argument checks.
wrap(), unwrap(), and load() may still throw checked SecureSessionException.


SecureTransportSession also does not throw SecureSessionException anymore.


Since we don't test with Kotlin I have no idea about the API impact, but I believe it's fine 🤞
Kotlin does not use checked exceptions, they are all unchecked there (in Java sense).
Detailed rant

Excerpt from commit messages...

Checked exceptions are commonly considered a design mistake in Java standard library [1, 2, 3, 4]. They have some limited uses, but generally they do not provide safe and ergonomic interface for the users because they are often misunderstood. It is common to use checked exceptions in situations where unchecked exceptions are more appropriate. This leads to exceptions that cannot be handled by the application and it is really common to ignore (""fix"") them by adding throws Exception specifier because you can't be bothered to enumerate a dozen of concrete classes of internal library errors. Either way it is not better than using unchecked exceptions in the first place.
Unchecked exceptions are intended for system faults and programming errors which are generally not recoverable by the application [5]. For example, using a method incorrectly, not checking for null when it should be checked for, providing invalid argument values, etc. These are generally not under control of the application, in the sense that the user cannot do something to avoid this failure other than fixing application logic (or, well, circumventing the faulty code path).
Checked exceptions are intended to be used for recoverable errors [5]. That is, something that the application can control and influence. For example, invalid user input can cause a checked exception because this is an expected situation (the user can make mistakes and this is not something that application can generally prevent in code). However, the application can control the user and instruct them to give correct input, or at least tell the user that the input is incorrect. That is, the application is expected to always handle checked exception in some way, and there should be a catch clause somewhere in the middle, not only on the top level for possible run-time exceptions.
With this in mind, convert the following com.cossacklabs.themis exceptions into runtime, unchecked variants:


NullArgumentException is used to indicate that the programmer passed a null value where it should not be passed, and this will cause a NullPointerException later. In fact, NullArgumentException is now a subclass of NullPointerException as it indicates misuse of null values.


InvalidArgumentException is used to indicate that the programmer has passed an invalid argument to the method: an unknown constant, an empty buffer that must not be empty, or some other violation of the method contract. It is a subclass of IllegalArgumentException now.


KeyGenerationException it is used to indicate internal failure in Themis key generation routines. This is not something under user control and key generation does not have any input that can change its behavior. This error can be caused either by a bug in Themis Core or by a misconfigured cryptographic backed. Both situations cannot be recovered by the application.


Note, however, that SecureCellException, SecureMessageWrapException, SecureSessionException, and SecureCompareException are still checked. These exceptions are used to indicate issues with user-provided data: key material, data messages, etc. These are expected failures and should be handled by the application somehow.

Checklist

 Change is covered by automated tests
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation (not applicable)
 Example projects and code samples are updated (not applicable)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,564,2019-12-04T15:36:09Z,2019-12-11T07:56:14Z,2019-12-11T07:56:16Z,MERGED,True,102,21,6,https://github.com/ilammy,Introduce common IKey interface,2,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/564,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/564,"Currently JavaThemis deals only with asymmetric keys and thus has an AsymmetricKey class providing common implementation of storage and utilities for PrivateKey and PublicKey classes. However, we are going to introduce a new type of keys — SymmetricKey — which will need these
utilities as well. Since it's not an AsymmetricKey, let's refactor our class hierarchy a bit.
Extract declaration of the toByteArray() utility method into a new interface IKey. This interface will be implemented by all key classes of Themis and will provide common utilities. (E.g., base64 formatting may be added here in the future.)
Extract storage implementation into a new KeyBytes class. It is an abstract package-private class, intended to be a base class for all keys implemented by Themis. It provides key field to access key bytes directly and implements IKey interface. It also maintains the invariant that all valid keys must be non-null and not empty.
AsymmetricKey is left as a marker abstract class. It inherits storage and IKey implementation from KeyBytes. Plus, it still hosts the constants for asymmetric key types.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (not significant)
 Changelog is updated","Currently JavaThemis deals only with asymmetric keys and thus has an AsymmetricKey class providing common implementation of storage and utilities for PrivateKey and PublicKey classes. However, we are going to introduce a new type of keys — SymmetricKey — which will need these
utilities as well. Since it's not an AsymmetricKey, let's refactor our class hierarchy a bit.
Extract declaration of the toByteArray() utility method into a new interface IKey. This interface will be implemented by all key classes of Themis and will provide common utilities. (E.g., base64 formatting may be added here in the future.)
Extract storage implementation into a new KeyBytes class. It is an abstract package-private class, intended to be a base class for all keys implemented by Themis. It provides key field to access key bytes directly and implements IKey interface. It also maintains the invariant that all valid keys must be non-null and not empty.
AsymmetricKey is left as a marker abstract class. It inherits storage and IKey implementation from KeyBytes. Plus, it still hosts the constants for asymmetric key types.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (not significant)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,564,2019-12-04T15:36:09Z,2019-12-11T07:56:14Z,2019-12-11T07:56:16Z,MERGED,True,102,21,6,https://github.com/ilammy,Introduce common IKey interface,2,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/564,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/564#issuecomment-562207969,"Currently JavaThemis deals only with asymmetric keys and thus has an AsymmetricKey class providing common implementation of storage and utilities for PrivateKey and PublicKey classes. However, we are going to introduce a new type of keys — SymmetricKey — which will need these
utilities as well. Since it's not an AsymmetricKey, let's refactor our class hierarchy a bit.
Extract declaration of the toByteArray() utility method into a new interface IKey. This interface will be implemented by all key classes of Themis and will provide common utilities. (E.g., base64 formatting may be added here in the future.)
Extract storage implementation into a new KeyBytes class. It is an abstract package-private class, intended to be a base class for all keys implemented by Themis. It provides key field to access key bytes directly and implements IKey interface. It also maintains the invariant that all valid keys must be non-null and not empty.
AsymmetricKey is left as a marker abstract class. It inherits storage and IKey implementation from KeyBytes. Plus, it still hosts the constants for asymmetric key types.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (not significant)
 Changelog is updated",Preliminary review: LGTM. Making single Interface makes total sense in Java world.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,565,2019-12-04T15:36:58Z,2019-12-11T18:33:31Z,2019-12-11T18:33:32Z,MERGED,True,162,3,6,https://github.com/ilammy,Symmetric keygen: JavaThemis,1,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/565,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/565,"Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API introduced in #560, now distributed to JavaThemis wrapper.
Now that #563 and #564 are merged we can finally do it.
Language API
Java
Here's how it can be used:
import com.cossacklabs.themis.SymmetricKey;

SymmetricKey key = new SymmetricKey();

// Use IKey interface to access bytes:
byte[] keyBytes = key.toByteArray();

// Can also wrap existing buffers
SymmetricKey sameKey = new SymmetricKey(keyBytes);
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated","Implement symmetric key generation utilities described in RFC 1 (not available publicly at the moment). This is new API introduced in #560, now distributed to JavaThemis wrapper.
Now that #563 and #564 are merged we can finally do it.
Language API
Java
Here's how it can be used:
import com.cossacklabs.themis.SymmetricKey;

SymmetricKey key = new SymmetricKey();

// Use IKey interface to access bytes:
byte[] keyBytes = key.toByteArray();

// Can also wrap existing buffers
SymmetricKey sameKey = new SymmetricKey(keyBytes);
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not interesting)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,566,2019-12-11T19:34:12Z,2019-12-12T09:37:06Z,2019-12-12T09:37:08Z,MERGED,True,2,2,1,https://github.com/ilammy,Update PHP Composer checksum,1,"['W-PHPThemis :elephant:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/566,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/566,"Yes, they made a new release. We should probably revisit our pinning approach with PHP Composer...
This should fix the Circle CI builds which are currently broken.
See #360 for previous updates.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated","Yes, they made a new release. We should probably revisit our pinning approach with PHP Composer...
This should fix the Circle CI builds which are currently broken.
See #360 for previous updates.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,566,2019-12-11T19:34:12Z,2019-12-12T09:37:06Z,2019-12-12T09:37:08Z,MERGED,True,2,2,1,https://github.com/ilammy,Update PHP Composer checksum,1,"['W-PHPThemis :elephant:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/566,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/566#issuecomment-564926611,"Yes, they made a new release. We should probably revisit our pinning approach with PHP Composer...
This should fix the Circle CI builds which are currently broken.
See #360 for previous updates.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated","At least we notice PHP composer updates :)
But I agree, it would be more beneficial to use less stressful approach",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,567,2019-12-12T16:37:15Z,2019-12-13T13:18:40Z,2019-12-13T13:18:41Z,MERGED,True,11,7,1,https://github.com/ilammy,Fetch Composer SHA sum from GitHub,1,"['W-PHPThemis :elephant:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/567,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/567,"PHP Composer installer changes with every release and has a different hash sum. Currently we hardwire the expected value in our installation scripts. This leads to our CI builds breaking with every release of Composer. While it's a nice way to get heads up about updates, it is also somewhat stressful for the maintainers to be notified about that with a broken build.
Instead of relying on a fixed hash sum, fetch it from GitHub Pages site maintained by Composer. This is recommended way to install Composer automatically.
This approach is arguably less secure because the attackers can compromise GitHub Pages site to feed us the SHA value they need, but given that Themis source code is also hosted on GitHub, a joint attack on PHP infrastructure like that would probably be the least of our concerns.
Moreover, Composer is used only when running PHPThemis unit tests. It is not used during package building process, so it's currently not possible to exploit the attack on Composer installer in order to, say, steal our signing keys when building PHPThemis package.
Overall, I'd trade the possible risk for fewer randomly red builds and not having to update a magical check sum every now and then.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated (not interesting)

Sign-offs
Required approvals before merge:

 @vixentael
 @shadinua","PHP Composer installer changes with every release and has a different hash sum. Currently we hardwire the expected value in our installation scripts. This leads to our CI builds breaking with every release of Composer. While it's a nice way to get heads up about updates, it is also somewhat stressful for the maintainers to be notified about that with a broken build.
Instead of relying on a fixed hash sum, fetch it from GitHub Pages site maintained by Composer. This is recommended way to install Composer automatically.
This approach is arguably less secure because the attackers can compromise GitHub Pages site to feed us the SHA value they need, but given that Themis source code is also hosted on GitHub, a joint attack on PHP infrastructure like that would probably be the least of our concerns.
Moreover, Composer is used only when running PHPThemis unit tests. It is not used during package building process, so it's currently not possible to exploit the attack on Composer installer in order to, say, steal our signing keys when building PHPThemis package.
Overall, I'd trade the possible risk for fewer randomly red builds and not having to update a magical check sum every now and then.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated (not interesting)

Sign-offs
Required approvals before merge:

 @vixentael
 @shadinua",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,568,2019-12-13T23:12:22Z,2019-12-16T09:55:49Z,2019-12-16T12:52:20Z,MERGED,True,7,2,3,https://github.com/newfrankway,Try to make WebAssembly wrapper build work,5,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/568,https://github.com/newfrankway,1,https://github.com/cossacklabs/themis/pull/568,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed (in case of notable or breaking changes)","Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed (in case of notable or breaking changes)",True,"{'THUMBS_UP': ['https://github.com/vixentael'], 'HEART': ['https://github.com/vixentael'], 'HOORAY': ['https://github.com/vixentael'], 'ROCKET': ['https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,568,2019-12-13T23:12:22Z,2019-12-16T09:55:49Z,2019-12-16T12:52:20Z,MERGED,True,7,2,3,https://github.com/newfrankway,Try to make WebAssembly wrapper build work,5,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/568,https://github.com/newfrankway,2,https://github.com/cossacklabs/themis/pull/568#issuecomment-565724564,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed (in case of notable or breaking changes)","Thank you for being interested in keeping WasmThemis working on all platforms! ❤️
Since I’m not a real™ JS dev, any feedback on the API, installation, compatibility, etc. is welcome.
Particularly, it’s good that you’ve brought up the subject of webpack plugins and minifiers. Unfortunately, currently we don’t test WasmThemis with any of the bundlers automatically and it would be nice to do that. Could you please name a typical set of webpack plugins that are in use?

Thanks for your response!
I use ""@angular-devkit/build-angular"": ""~0.801.1"" to build Angular web app. I think it uses ""webpack@4.35.2"". Everything is OK if I only uses ""ng build --extra-webpack-config webpack.partial.js -o"", but the following error happens when I try to add """"--prod"" to do prodution build as ""ng build --extra-webpack-config webpack.partial.js -o --prod"". I think it comes from TerserPlugin. The build will be OK again if I remove the two commas in ""secure_cell_token_protect.js"".
chunk {0} common.97410b838654f8183009.js (common) 782 bytes  [rendered]
chunk {1} runtime.0dccca780e9241630647.js (runtime) 2.44 kB [entry] [rendered]
chunk {2} main.5dd6d694d8cfd4070392.js (main) 1.06 MB [initial] [rendered]
chunk {3} polyfills.639ff07cfe1979f02faa.js (polyfills) 43.2 kB [initial] [rendered]
chunk {4} polyfills-es5.83fdfe6b88fa44c72638.js (polyfills-es5) 70 kB [initial] [rendered]
chunk {5} styles.aef5c4716bd75fb6dcbe.css (styles) 267 kB [initial] [rendered]
chunk {6} 6.eb8783ec6e003450abd5.js () 827 kB  [rendered]
chunk {7} 7.f5fac49bb16916d4fa77.js () 50.9 kB  [rendered]
chunk {8} 8.1c7aee64433a80bab5ad.js () 29.5 kB  [rendered]
chunk {9} 9.7d8be400aa6e166d8e44.js () 1.77 kB  [rendered]
chunk {10} 10.d620e784c1c8b03242e7.js () 19.3 kB  [rendered]
chunk {11} 11.8324221f5c4e678ab219.js () 38 kB  [rendered]
chunk {12} 12.d1bd689e9fc78cf94477.js () 3.86 kB  [rendered]
chunk {13} 13.54f1b18e55d745806c05.js () 9.28 kB  [rendered]
chunk {14} 14.d293982a1fbffc24d667.js () 31.8 kB  [rendered]
chunk {15} 15.f23f9e921adffb66bd5e.js () 56.9 kB  [rendered]
chunk {scripts} scripts.54e89192de142d66024e.js (scripts) 207 kB [entry] [rendered]
Date: 2019-12-14T14:38:30.109Z - Hash: e6446002098bd5f9941b - Time: 49643ms
ERROR in ./src/app/web-worker/wasm.worker.ts (./node_modules/worker-plugin/dist/loader.js?{""name"":""wasm""}!./src/app/web-worker/wasm.worker.ts)
Module build failed (from ./node_modules/worker-plugin/dist/loader.js):
Error: wasm.21aab4d28e15231918a5.worker.js from Terser
Unexpected token: punc ()) [wasm.21aab4d28e15231918a5.worker.js:18937,12]
at Function.buildError (/Users/frank/node_modules/terser-webpack-plugin/dist/index.js:101:14)
at /Users/frank/node_modules/terser-webpack-plugin/dist/index.js:256:50
at Array.forEach ()
at /Users/frank/node_modules/terser-webpack-plugin/dist/index.js:231:17
at step (/Users/frank/node_modules/terser-webpack-plugin/dist/TaskRunner.js:87:9)
at done (/Users/frank/node_modules/terser-webpack-plugin/dist/TaskRunner.js:98:30)
at /Users/frank/node_modules/terser-webpack-plugin/dist/TaskRunner.js:103:13
at /Users/frank/node_modules/worker-farm/lib/farm.js:199:19
at processTicksAndRejections (internal/process/task_queues.js:75:11)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,568,2019-12-13T23:12:22Z,2019-12-16T09:55:49Z,2019-12-16T12:52:20Z,MERGED,True,7,2,3,https://github.com/newfrankway,Try to make WebAssembly wrapper build work,5,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/568,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/568#issuecomment-565750519,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed (in case of notable or breaking changes)","Since this issue with commas results in an error produced by the bundler, I guess the fix warrants a patch release for WasmThemis.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,568,2019-12-13T23:12:22Z,2019-12-16T09:55:49Z,2019-12-16T12:52:20Z,MERGED,True,7,2,3,https://github.com/newfrankway,Try to make WebAssembly wrapper build work,5,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/568,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/568#issuecomment-565853774,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed (in case of notable or breaking changes)","@newfrankway thank you a lot for your time and for making this patch! WASM infrastructure is still new for us (I believe, that it's new for most devs, hehe), and having a helping hand is very much appreciated.

Since this issue with commas results in an error produced by the bundler, I guess the fix warrants a patch release for WasmThemis.

agree, let's merge this PR to master, then cherry-pick the change to ""hotpatch"" branch and release the hotpatch for WASMThemis.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,568,2019-12-13T23:12:22Z,2019-12-16T09:55:49Z,2019-12-16T12:52:20Z,MERGED,True,7,2,3,https://github.com/newfrankway,Try to make WebAssembly wrapper build work,5,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/568,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/568#issuecomment-566003891,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed (in case of notable or breaking changes)","@newfrankway, I've just published wasm-themis@0.12.2 on npm which includes this fix for webpack. Could you please check that it works for you too?
Thank you for your contribution!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,568,2019-12-13T23:12:22Z,2019-12-16T09:55:49Z,2019-12-16T12:52:20Z,MERGED,True,7,2,3,https://github.com/newfrankway,Try to make WebAssembly wrapper build work,5,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/568,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/568#issuecomment-566048130,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated if needed (in case of API changes)
 Changelog is updated if needed (in case of notable or breaking changes)","Not to confuse users, @ilammy and I have added a note about fastcomp to the docs
https://docs.cossacklabs.com/pages/documentation-themis/#webassembly-wrapper-installation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,569,2019-12-16T11:23:19Z,2019-12-16T11:49:13Z,2019-12-16T11:49:14Z,MERGED,True,4,6,1,https://github.com/ilammy,"Use ""fastcomp"" flavor of Emscripten",1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/569,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/569,"PR #550 rolled back Emscripten from latest to 1.38.48 because then-latest 1.39.0 was broken.
We have figured out that it's not the new version that's broken, it's the flavor. WasmThemis does not work well with the upstream flavor of Emscripten which is the default for latest branch since 1.39.
Instead of pinning an older version, use a suitable flavor. We'll be testing with upstream later once we figure out what's wrong with it.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated if needed (will consolidate if we fix upstream)","PR #550 rolled back Emscripten from latest to 1.38.48 because then-latest 1.39.0 was broken.
We have figured out that it's not the new version that's broken, it's the flavor. WasmThemis does not work well with the upstream flavor of Emscripten which is the default for latest branch since 1.39.
Instead of pinning an older version, use a suitable flavor. We'll be testing with upstream later once we figure out what's wrong with it.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated if needed (will consolidate if we fix upstream)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,570,2019-12-23T15:39:17Z,2019-12-30T18:47:57Z,2019-12-30T18:47:58Z,MERGED,True,90,3,7,https://github.com/ilammy,Always check soter_rand() for success,7,"['core', 'W-ThemisPP :crossed_swords:', 'tests']",https://github.com/cossacklabs/themis/pull/570,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/570,"As previously discussed, let's make sure that return value of soter_rand() is always checked. I have added these failsafes, manually reviewed all existing callsites, and ensured that we abort processing if we fail to generate random data.
Warn about unused result of soter_rand()
Checking random number generation for failures is pretty important [1] [2] so let's make it easier for users to track such issues. Introduce a SOTER_MUST_USE macro that adds an attribute to the function which will cause a compiler warning if the return value is not used (or not explicitly ignored by casting to void). See Clang docs.
Since we treat warnings as errors, CI compilation will fail like this:
compile build/obj/tests/common/test_utils.c.o
tests/common/test_utils.c:70:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                soter_rand((uint8_t*)(&res), sizeof(size_t));
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.

if anyone adds a soter_rand() call without checking the return value.
Add missing tests for themispp::secure_rand_t
We have this API, but it's not tested (or documented either). However, it's there and we should at least exercise it in the test suite. Turns out that it was not checking return value of soter_rand() and it's not visible if there are no tests.
Handle soter_rand() failures
Add missing error handling. For ThemisPP throw an exception. For tests just abort with non-zero exit code as the API does not allow for returning an error. That's actually the case for ed25519 code too.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (N/A)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (N/A)
 Changelog is updated if needed (internal change, no need to mention it right now)","As previously discussed, let's make sure that return value of soter_rand() is always checked. I have added these failsafes, manually reviewed all existing callsites, and ensured that we abort processing if we fail to generate random data.
Warn about unused result of soter_rand()
Checking random number generation for failures is pretty important [1] [2] so let's make it easier for users to track such issues. Introduce a SOTER_MUST_USE macro that adds an attribute to the function which will cause a compiler warning if the return value is not used (or not explicitly ignored by casting to void). See Clang docs.
Since we treat warnings as errors, CI compilation will fail like this:
compile build/obj/tests/common/test_utils.c.o
tests/common/test_utils.c:70:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                soter_rand((uint8_t*)(&res), sizeof(size_t));
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.

if anyone adds a soter_rand() call without checking the return value.
Add missing tests for themispp::secure_rand_t
We have this API, but it's not tested (or documented either). However, it's there and we should at least exercise it in the test suite. Turns out that it was not checking return value of soter_rand() and it's not visible if there are no tests.
Handle soter_rand() failures
Add missing error handling. For ThemisPP throw an exception. For tests just abort with non-zero exit code as the API does not allow for returning an error. That's actually the case for ed25519 code too.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (N/A)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (N/A)
 Changelog is updated if needed (internal change, no need to mention it right now)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,570,2019-12-23T15:39:17Z,2019-12-30T18:47:57Z,2019-12-30T18:47:58Z,MERGED,True,90,3,7,https://github.com/ilammy,Always check soter_rand() for success,7,"['core', 'W-ThemisPP :crossed_swords:', 'tests']",https://github.com/cossacklabs/themis/pull/570,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/570#issuecomment-568516844,"As previously discussed, let's make sure that return value of soter_rand() is always checked. I have added these failsafes, manually reviewed all existing callsites, and ensured that we abort processing if we fail to generate random data.
Warn about unused result of soter_rand()
Checking random number generation for failures is pretty important [1] [2] so let's make it easier for users to track such issues. Introduce a SOTER_MUST_USE macro that adds an attribute to the function which will cause a compiler warning if the return value is not used (or not explicitly ignored by casting to void). See Clang docs.
Since we treat warnings as errors, CI compilation will fail like this:
compile build/obj/tests/common/test_utils.c.o
tests/common/test_utils.c:70:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                soter_rand((uint8_t*)(&res), sizeof(size_t));
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.

if anyone adds a soter_rand() call without checking the return value.
Add missing tests for themispp::secure_rand_t
We have this API, but it's not tested (or documented either). However, it's there and we should at least exercise it in the test suite. Turns out that it was not checking return value of soter_rand() and it's not visible if there are no tests.
Handle soter_rand() failures
Add missing error handling. For ThemisPP throw an exception. For tests just abort with non-zero exit code as the API does not allow for returning an error. That's actually the case for ed25519 code too.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (N/A)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (N/A)
 Changelog is updated if needed (internal change, no need to mention it right now)","Looks like tests are failing
https://circleci.com/gh/cossacklabs/themis/7117?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link
src/soter/soter_rand.h:53:1: error: 'nodiscard' attribute cannot be applied to types [clang-diagnostic-error]
SOTER_MUST_USE
^",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,570,2019-12-23T15:39:17Z,2019-12-30T18:47:57Z,2019-12-30T18:47:58Z,MERGED,True,90,3,7,https://github.com/ilammy,Always check soter_rand() for success,7,"['core', 'W-ThemisPP :crossed_swords:', 'tests']",https://github.com/cossacklabs/themis/pull/570,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/570#issuecomment-568520509,"As previously discussed, let's make sure that return value of soter_rand() is always checked. I have added these failsafes, manually reviewed all existing callsites, and ensured that we abort processing if we fail to generate random data.
Warn about unused result of soter_rand()
Checking random number generation for failures is pretty important [1] [2] so let's make it easier for users to track such issues. Introduce a SOTER_MUST_USE macro that adds an attribute to the function which will cause a compiler warning if the return value is not used (or not explicitly ignored by casting to void). See Clang docs.
Since we treat warnings as errors, CI compilation will fail like this:
compile build/obj/tests/common/test_utils.c.o
tests/common/test_utils.c:70:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                soter_rand((uint8_t*)(&res), sizeof(size_t));
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.

if anyone adds a soter_rand() call without checking the return value.
Add missing tests for themispp::secure_rand_t
We have this API, but it's not tested (or documented either). However, it's there and we should at least exercise it in the test suite. Turns out that it was not checking return value of soter_rand() and it's not visible if there are no tests.
Handle soter_rand() failures
Add missing error handling. For ThemisPP throw an exception. For tests just abort with non-zero exit code as the API does not allow for returning an error. That's actually the case for ed25519 code too.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (N/A)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (N/A)
 Changelog is updated if needed (internal change, no need to mention it right now)","Yeah, I'm looking into it. It's weird since [[nodiscard]] should be allowed before a function, like [[deprecated]] so I have no idea why it treats it as if applied to the return type or something.
I have also noticed that apparently we do not test ThemisPP with C++14 and C++17. I was under impression that we do.",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,570,2019-12-23T15:39:17Z,2019-12-30T18:47:57Z,2019-12-30T18:47:58Z,MERGED,True,90,3,7,https://github.com/ilammy,Always check soter_rand() for success,7,"['core', 'W-ThemisPP :crossed_swords:', 'tests']",https://github.com/cossacklabs/themis/pull/570,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/570#issuecomment-568573853,"As previously discussed, let's make sure that return value of soter_rand() is always checked. I have added these failsafes, manually reviewed all existing callsites, and ensured that we abort processing if we fail to generate random data.
Warn about unused result of soter_rand()
Checking random number generation for failures is pretty important [1] [2] so let's make it easier for users to track such issues. Introduce a SOTER_MUST_USE macro that adds an attribute to the function which will cause a compiler warning if the return value is not used (or not explicitly ignored by casting to void). See Clang docs.
Since we treat warnings as errors, CI compilation will fail like this:
compile build/obj/tests/common/test_utils.c.o
tests/common/test_utils.c:70:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                soter_rand((uint8_t*)(&res), sizeof(size_t));
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.

if anyone adds a soter_rand() call without checking the return value.
Add missing tests for themispp::secure_rand_t
We have this API, but it's not tested (or documented either). However, it's there and we should at least exercise it in the test suite. Turns out that it was not checking return value of soter_rand() and it's not visible if there are no tests.
Handle soter_rand() failures
Add missing error handling. For ThemisPP throw an exception. For tests just abort with non-zero exit code as the API does not allow for returning an error. That's actually the case for ed25519 code too.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (N/A)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (N/A)
 Changelog is updated if needed (internal change, no need to mention it right now)","Okay, I got it. That’s because Clang behaves weirdly when non-standard attributes get mixed with standard ones (only C++ has standard attributes). If you expand the macros the compiler sees
__attribute__((visibility(""default"")))
[[nodiscard]]
soter_status_t soter_rand(uint8_t* buffer, size_t length);
and that triggers something in Clang, but not in GCC. Making [[nodiscard]] go first fixes the issue.
I wonder whether we should check the whole codebase with both GCC and Clang now. The analysis stage compiles and runs tests with some recent versions of GCC and Clang, but we do not check ThemisPP compilation with both compilers, for example.",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,570,2019-12-23T15:39:17Z,2019-12-30T18:47:57Z,2019-12-30T18:47:58Z,MERGED,True,90,3,7,https://github.com/ilammy,Always check soter_rand() for success,7,"['core', 'W-ThemisPP :crossed_swords:', 'tests']",https://github.com/cossacklabs/themis/pull/570,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/570#issuecomment-568723889,"As previously discussed, let's make sure that return value of soter_rand() is always checked. I have added these failsafes, manually reviewed all existing callsites, and ensured that we abort processing if we fail to generate random data.
Warn about unused result of soter_rand()
Checking random number generation for failures is pretty important [1] [2] so let's make it easier for users to track such issues. Introduce a SOTER_MUST_USE macro that adds an attribute to the function which will cause a compiler warning if the return value is not used (or not explicitly ignored by casting to void). See Clang docs.
Since we treat warnings as errors, CI compilation will fail like this:
compile build/obj/tests/common/test_utils.c.o
tests/common/test_utils.c:70:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                soter_rand((uint8_t*)(&res), sizeof(size_t));
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.

if anyone adds a soter_rand() call without checking the return value.
Add missing tests for themispp::secure_rand_t
We have this API, but it's not tested (or documented either). However, it's there and we should at least exercise it in the test suite. Turns out that it was not checking return value of soter_rand() and it's not visible if there are no tests.
Handle soter_rand() failures
Add missing error handling. For ThemisPP throw an exception. For tests just abort with non-zero exit code as the API does not allow for returning an error. That's actually the case for ed25519 code too.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (N/A)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (N/A)
 Changelog is updated if needed (internal change, no need to mention it right now)","you've fixed the build!

we do not check ThemisPP compilation with both compilers

this might be a good idea!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,570,2019-12-23T15:39:17Z,2019-12-30T18:47:57Z,2019-12-30T18:47:58Z,MERGED,True,90,3,7,https://github.com/ilammy,Always check soter_rand() for success,7,"['core', 'W-ThemisPP :crossed_swords:', 'tests']",https://github.com/cossacklabs/themis/pull/570,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/570#issuecomment-569761263,"As previously discussed, let's make sure that return value of soter_rand() is always checked. I have added these failsafes, manually reviewed all existing callsites, and ensured that we abort processing if we fail to generate random data.
Warn about unused result of soter_rand()
Checking random number generation for failures is pretty important [1] [2] so let's make it easier for users to track such issues. Introduce a SOTER_MUST_USE macro that adds an attribute to the function which will cause a compiler warning if the return value is not used (or not explicitly ignored by casting to void). See Clang docs.
Since we treat warnings as errors, CI compilation will fail like this:
compile build/obj/tests/common/test_utils.c.o
tests/common/test_utils.c:70:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                soter_rand((uint8_t*)(&res), sizeof(size_t));
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.

if anyone adds a soter_rand() call without checking the return value.
Add missing tests for themispp::secure_rand_t
We have this API, but it's not tested (or documented either). However, it's there and we should at least exercise it in the test suite. Turns out that it was not checking return value of soter_rand() and it's not visible if there are no tests.
Handle soter_rand() failures
Add missing error handling. For ThemisPP throw an exception. For tests just abort with non-zero exit code as the API does not allow for returning an error. That's actually the case for ed25519 code too.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (N/A)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (N/A)
 Changelog is updated if needed (internal change, no need to mention it right now)","I believe we can merge this, @ilammy?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,570,2019-12-23T15:39:17Z,2019-12-30T18:47:57Z,2019-12-30T18:47:58Z,MERGED,True,90,3,7,https://github.com/ilammy,Always check soter_rand() for success,7,"['core', 'W-ThemisPP :crossed_swords:', 'tests']",https://github.com/cossacklabs/themis/pull/570,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/570#issuecomment-569761684,"As previously discussed, let's make sure that return value of soter_rand() is always checked. I have added these failsafes, manually reviewed all existing callsites, and ensured that we abort processing if we fail to generate random data.
Warn about unused result of soter_rand()
Checking random number generation for failures is pretty important [1] [2] so let's make it easier for users to track such issues. Introduce a SOTER_MUST_USE macro that adds an attribute to the function which will cause a compiler warning if the return value is not used (or not explicitly ignored by casting to void). See Clang docs.
Since we treat warnings as errors, CI compilation will fail like this:
compile build/obj/tests/common/test_utils.c.o
tests/common/test_utils.c:70:3: warning: ignoring return value of function declared with 'warn_unused_result' attribute [-Wunused-result]
                soter_rand((uint8_t*)(&res), sizeof(size_t));
                ^~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 warning generated.

if anyone adds a soter_rand() call without checking the return value.
Add missing tests for themispp::secure_rand_t
We have this API, but it's not tested (or documented either). However, it's there and we should at least exercise it in the test suite. Turns out that it was not checking return value of soter_rand() and it's not visible if there are no tests.
Handle soter_rand() failures
Add missing error handling. For ThemisPP throw an exception. For tests just abort with non-zero exit code as the API does not allow for returning an error. That's actually the case for ed25519 code too.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (N/A)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (N/A)
 Changelog is updated if needed (internal change, no need to mention it right now)","Uh... yeah, the issue with the build got fixed, and now we test ThemisPP with both GCC and Clang.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,571,2019-12-23T16:29:46Z,2019-12-23T17:47:21Z,2019-12-23T17:47:22Z,MERGED,True,12,9,2,https://github.com/ilammy,Fix compatibility with Rust 1.40,2,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/571,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/571,"Recently released Clippy 1.40 ships with this lint enabled by default. Since we run with ""warnings as errors"" policy, this lint causes build failures which is not nice.
error: needless `fn main` in doctest
  --> src/wrappers/themis/rust/libthemis-src/src/lib.rs:37:4
   |
37 | //! fn main() {
   |    ^^^^^^^^^^^^
   |
   = note: `-D clippy::needless-doctest-main` implied by `-D warnings`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main

error: aborting due to previous error

I wouldn't say that explicit main() here is needless and some people share the same sentiment. However, since this is top-level module docs, we cannot disable this lint for this place specifically without turning it off in the entire module. Okay, Clippy, you win.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (N/A)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (no API changes)
 Changelog is updated if needed (minor change)","Recently released Clippy 1.40 ships with this lint enabled by default. Since we run with ""warnings as errors"" policy, this lint causes build failures which is not nice.
error: needless `fn main` in doctest
  --> src/wrappers/themis/rust/libthemis-src/src/lib.rs:37:4
   |
37 | //! fn main() {
   |    ^^^^^^^^^^^^
   |
   = note: `-D clippy::needless-doctest-main` implied by `-D warnings`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main

error: aborting due to previous error

I wouldn't say that explicit main() here is needless and some people share the same sentiment. However, since this is top-level module docs, we cannot disable this lint for this place specifically without turning it off in the entire module. Okay, Clippy, you win.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (N/A)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (no API changes)
 Changelog is updated if needed (minor change)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,571,2019-12-23T16:29:46Z,2019-12-23T17:47:21Z,2019-12-23T17:47:22Z,MERGED,True,12,9,2,https://github.com/ilammy,Fix compatibility with Rust 1.40,2,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/571,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/571#issuecomment-568533168,"Recently released Clippy 1.40 ships with this lint enabled by default. Since we run with ""warnings as errors"" policy, this lint causes build failures which is not nice.
error: needless `fn main` in doctest
  --> src/wrappers/themis/rust/libthemis-src/src/lib.rs:37:4
   |
37 | //! fn main() {
   |    ^^^^^^^^^^^^
   |
   = note: `-D clippy::needless-doctest-main` implied by `-D warnings`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main

error: aborting due to previous error

I wouldn't say that explicit main() here is needless and some people share the same sentiment. However, since this is top-level module docs, we cannot disable this lint for this place specifically without turning it off in the entire module. Okay, Clippy, you win.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (N/A)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (no API changes)
 Changelog is updated if needed (minor change)","Yay! More breaking changes in the toolchain with recent Rust 1.40 release. I'd just quote the commit:

Fix Cargo with ""--features""
No idea what changed here, but for some reason Cargo does not allow to use ""--features"" with virtual crates now. However, it has no issues with it once we're in ""themis"" crate subdirectory and ask to document all crates in the workspace anyway.
Apparently, --features was not supposed to work with workspaces in the first place, but I have no clue why it worked before.

Hopefully, this unbreaks Rust build.
I've added it here instead of making a new pull request. I'll rename the PR into something more appropriate.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,572,2019-12-23T16:59:26Z,2019-12-24T14:49:01Z,2019-12-24T14:49:02Z,MERGED,True,10,2,2,https://github.com/ilammy,Run ThemisPP tests with C++14 and C++17,3,"['W-ThemisPP :crossed_swords:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/572,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/572,"We boast in the docs about C++14 being “tested and supported“ so we’d better do that :) Explicitly test compatibility with C++14 and C++17.
C++20 is currently being finalized. It's somewhat supported in the compilers, but not in the versions shipped with Ubuntu 16.04.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated","We boast in the docs about C++14 being “tested and supported“ so we’d better do that :) Explicitly test compatibility with C++14 and C++17.
C++20 is currently being finalized. It's somewhat supported in the compilers, but not in the versions shipped with Ubuntu 16.04.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,573,2019-12-23T17:39:45Z,2019-12-24T14:49:21Z,2019-12-24T14:49:22Z,MERGED,True,20,0,1,https://github.com/ilammy,Run CircleCI builds every day,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/573,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/573,"Modern ecosystem needs to go fast, die young, break early, and ship often. Therefore we can never be sure that if a commit was successfully built today then the same code can be built tomorrow. Transitive dependencies come and go, new toolchain versions get released, etc. We do not have every dependency pinned, so we should be testing regularly to see if anything breaks.
Let's run CircleCI test suite every day at 5:00 to make sure that we see the scheduled breakage early in the morning, not when some poor soul submits a pull request and then learns that something does not work.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Modern ecosystem needs to go fast, die young, break early, and ship often. Therefore we can never be sure that if a commit was successfully built today then the same code can be built tomorrow. Transitive dependencies come and go, new toolchain versions get released, etc. We do not have every dependency pinned, so we should be testing regularly to see if anything breaks.
Let's run CircleCI test suite every day at 5:00 to make sure that we see the scheduled breakage early in the morning, not when some poor soul submits a pull request and then learns that something does not work.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,574,2019-12-25T15:01:43Z,2020-01-24T10:33:10Z,2020-01-24T10:33:11Z,MERGED,True,320,0,10,https://github.com/ilammy,Public PBKDF2 API,6,['core'],https://github.com/cossacklabs/themis/pull/574,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/574,"We were naughty kids all these previous years with Secure Cell passphrase API. So here's your PBKDF2 for Christmas 🎄 🎅 🎁 (It's better than coal, anyhow...)
This is a part of new passphrase-based API described in RFC 2 (not available publicly at the moment). It will be used in Secure Cell implementation for proper processing of passphrases.
New public function soter_pbkdf2_sha256() computes PBKDF2 with HMAC-SHA-256 as described in RFC 8081. Test vectors come from an honest aaz (we trust pervects, right?) because no one else bothered to produce them. We skip the longest one with 16 million iterations by default because it's tad too expensive right now, but the main test job verifies it.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (uh...)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated","We were naughty kids all these previous years with Secure Cell passphrase API. So here's your PBKDF2 for Christmas 🎄 🎅 🎁 (It's better than coal, anyhow...)
This is a part of new passphrase-based API described in RFC 2 (not available publicly at the moment). It will be used in Secure Cell implementation for proper processing of passphrases.
New public function soter_pbkdf2_sha256() computes PBKDF2 with HMAC-SHA-256 as described in RFC 8081. Test vectors come from an honest aaz (we trust pervects, right?) because no one else bothered to produce them. We skip the longest one with 16 million iterations by default because it's tad too expensive right now, but the main test job verifies it.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (uh...)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,574,2019-12-25T15:01:43Z,2020-01-24T10:33:10Z,2020-01-24T10:33:11Z,MERGED,True,320,0,10,https://github.com/ilammy,Public PBKDF2 API,6,['core'],https://github.com/cossacklabs/themis/pull/574,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/574#issuecomment-578075923,"We were naughty kids all these previous years with Secure Cell passphrase API. So here's your PBKDF2 for Christmas 🎄 🎅 🎁 (It's better than coal, anyhow...)
This is a part of new passphrase-based API described in RFC 2 (not available publicly at the moment). It will be used in Secure Cell implementation for proper processing of passphrases.
New public function soter_pbkdf2_sha256() computes PBKDF2 with HMAC-SHA-256 as described in RFC 8081. Test vectors come from an honest aaz (we trust pervects, right?) because no one else bothered to produce them. We skip the longest one with 16 million iterations by default because it's tad too expensive right now, but the main test job verifies it.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (uh...)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated","I've updated comment wording to make it clear that the output changes with iteration count (that is, treat it as key rotation).
Regarding the discussion on the output buffer size, I've decided to keep the current code and go on with the interface described by RFC. Users of this low-level interface – Themis – know the output length they need, so we do not have to complicate the interface by size suggestions. The interface we provide for Themis users will deal with the size suggestions instead.
Merging this PR unblock further work on KDF-enabled passphrase API.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,575,2019-12-30T18:42:32Z,2019-12-30T20:45:44Z,2019-12-30T20:45:45Z,MERGED,True,2,2,1,https://github.com/ilammy,Update CODEOWNERS,1,[],https://github.com/cossacklabs/themis/pull/575,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/575,I was wondering why Ignat is never added as code reviewer automatically. Turns out that the GitHub handle is wrong. Fix it. Now I no longer need to remember to add important people for code review manually.,I was wondering why Ignat is never added as code reviewer automatically. Turns out that the GitHub handle is wrong. Fix it. Now I no longer need to remember to add important people for code review manually.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,575,2019-12-30T18:42:32Z,2019-12-30T20:45:44Z,2019-12-30T20:45:45Z,MERGED,True,2,2,1,https://github.com/ilammy,Update CODEOWNERS,1,[],https://github.com/cossacklabs/themis/pull/575,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/575#issuecomment-569760957,I was wondering why Ignat is never added as code reviewer automatically. Turns out that the GitHub handle is wrong. Fix it. Now I no longer need to remember to add important people for code review manually.,"Yeah, he changed username recently",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,576,2020-01-23T16:10:48Z,2020-01-27T13:42:01Z,2020-01-27T13:42:02Z,MERGED,True,2,2,1,https://github.com/ilammy,Fix ODR violation in ThemisPP,1,['W-ThemisPP :crossed_swords:'],https://github.com/cossacklabs/themis/pull/576,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/576,"All functions defined in header files must be marked inline so that the compiler does proper deduplication and does not violate “one definition rule” (ODR). Otherwise (you guessed it, right?)
undefined behavior happens.
Thanks goes go clang-analyzer whose warnings we diligently ignore. We've been burnt by this in the past (see #540, and there were customers with broken builds because of this). I never learn because C++ is such a monster that I easily forget something about it all the time.
This is new symmetric key generation API that is pending for release in Themis 0.13.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation","All functions defined in header files must be marked inline so that the compiler does proper deduplication and does not violate “one definition rule” (ODR). Otherwise (you guessed it, right?)
undefined behavior happens.
Thanks goes go clang-analyzer whose warnings we diligently ignore. We've been burnt by this in the past (see #540, and there were customers with broken builds because of this). I never learn because C++ is such a monster that I easily forget something about it all the time.
This is new symmetric key generation API that is pending for release in Themis 0.13.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,576,2020-01-23T16:10:48Z,2020-01-27T13:42:01Z,2020-01-27T13:42:02Z,MERGED,True,2,2,1,https://github.com/ilammy,Fix ODR violation in ThemisPP,1,['W-ThemisPP :crossed_swords:'],https://github.com/cossacklabs/themis/pull/576,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/576#issuecomment-577783879,"All functions defined in header files must be marked inline so that the compiler does proper deduplication and does not violate “one definition rule” (ODR). Otherwise (you guessed it, right?)
undefined behavior happens.
Thanks goes go clang-analyzer whose warnings we diligently ignore. We've been burnt by this in the past (see #540, and there were customers with broken builds because of this). I never learn because C++ is such a monster that I easily forget something about it all the time.
This is new symmetric key generation API that is pending for release in Themis 0.13.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation",where we define it in several places? or it conflicts with functions from C library?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,576,2020-01-23T16:10:48Z,2020-01-27T13:42:01Z,2020-01-27T13:42:02Z,MERGED,True,2,2,1,https://github.com/ilammy,Fix ODR violation in ThemisPP,1,['W-ThemisPP :crossed_swords:'],https://github.com/cossacklabs/themis/pull/576,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/576#issuecomment-577797522,"All functions defined in header files must be marked inline so that the compiler does proper deduplication and does not violate “one definition rule” (ODR). Otherwise (you guessed it, right?)
undefined behavior happens.
Thanks goes go clang-analyzer whose warnings we diligently ignore. We've been burnt by this in the past (see #540, and there were customers with broken builds because of this). I never learn because C++ is such a monster that I easily forget something about it all the time.
This is new symmetric key generation API that is pending for release in Themis 0.13.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation","where we define it in several places?

We don‘t but the users will. If ThemisPP is used in multiple translation units (say, A.cpp and B.cpp) both of which #include <themispp/secure_keygen.hpp> then both of them will “define” this function — ThemisPP being header-only library provides a definition, not just declaration. If it’s not marked inline then this might lead to a linker error caused by multiple conflicting definitions of a symbol. inline can be used to tell the linker to ignore duplicates.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,577,2020-01-24T11:26:22Z,2020-02-12T19:56:45Z,2020-03-05T12:56:31Z,MERGED,True,1655,58,13,https://github.com/ilammy,Passphrase-based API of Secure Cell,16,['core'],https://github.com/cossacklabs/themis/pull/577,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/577,"Implement passphrase-based API of Secure Cell in Themis Core:
themis_status_t themis_secure_cell_encrypt_seal_with_passphrase(
        const uint8_t*  passphrase,
        size_t          passphrase_length,
        const uint8_t*  user_context,
        size_t          user_context_length,
        const uint8_t*  message,
        size_t          message_length,
        uint8_t*        encrypted_message,
        size_t*         encrypted_message_length
);

themis_status_t themis_secure_cell_decrypt_seal_with_passphrase(
        const uint8_t*  passphrase,
        size_t          passphrase_length,
        const uint8_t*  user_context,
        size_t          user_context_length,
        const uint8_t*  encrypted_message,
        size_t          encrypted_message_length,
        uint8_t*        plain_message,
        size_t*         plain_message_length
);
The API is described in Themis RFC 2 (not available publicly at the moment). This pull request implements the API in Themis Core on which we’ll base implementations in all high-level language wrappers.
Main issue that is solved by passphrase API is inadeqacy of ZRTP KDF used by master key API when applied to human-readable passphrases with low entropy. Previously we suggested and allowed such use in high-level languages, however it is not secure enough. Master key API should be used only with randomly-generated binary keys. Our symmetric key generation API produces 32-byte-long keys.
New API can be safely used with human-readable strings containing way less entropy. This is made possible by using a proper password key derivation function — PBKDF2 — to generate intermediate key used for encryption. Currently we are using 200,000 iterations — the slowdown is not noticeable for single-time use but is frustrating enough for repeated computation during brute-force attacks.
Passphrase support is currently implemented only for Seal mode of Secure Cell. It can be extended to Token Protect mode in the future. Context Imprint mode will never support passphrases directly because it does not provide storage space for KDF context. However, we may provide separate KDF interface later which will make it possible to use passphrases with Context Imprint mode too.
The implementation is split into five main parts:


Define authentication token format
I’ve opted for more explicit approach to parsing and producing data formats. I believe that such approach is less error-prone and contains less magic. Though it is much more verbose that fast, direct, and incorrect casts to struct pointers that we are currently doing in master key API code.
Give it a close look as this will be our main sponsor of hidden segmentation faults.


Prepend authentication token in Seal mode
Token Protect mode keeps the token as a separate buffer while in Seal mode it is prepended to the encrypted message. We have to carefully gauge the output buffer size during encryption, and carefully parse input data during decryption.


Secure Cell encryption
It is pretty straightforward. There are some Soter quirks that we need to deal with, and there are a couple of restrictions on the input data that we need to honor.
Also note that we encrypt data using default KDF parameters which are fixed for Themis release. However, we may review and change them in future releases. Unless we introduce a new KDF algorithm, simple parameter tweaks are backwars and forward-compatible. With PBKDF2 we can adjust salt length (unlikely) and iteration count.


Secure Cell decryption
This code path needs close attention as here we have to deal with actively hostile user input. Separate data format parsing makes it easier to follow, but still be alert.


Tests, documentation comments, changelog updates, etc.
The tests are basic but they cover the most important points. New additions include explicit tests for all AES key lengths that we support. (Yes, I did fail to take that into account during development.)
As for what they lack, we currently do not verify that Secure Cell is able to detect data corruption, for example. I hope to not forget to add them later.


Have fun reviewing these 1.5k lines of code next week!
Checklist

 Change is covered by automated tests
 Benchmark results are attached (coming soon)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated

Address feedback:

 add stream_ prefix to parsing helpers
 generalize KDF handling
 try avoiding auth_tag_length comparisons","Implement passphrase-based API of Secure Cell in Themis Core:
themis_status_t themis_secure_cell_encrypt_seal_with_passphrase(
        const uint8_t*  passphrase,
        size_t          passphrase_length,
        const uint8_t*  user_context,
        size_t          user_context_length,
        const uint8_t*  message,
        size_t          message_length,
        uint8_t*        encrypted_message,
        size_t*         encrypted_message_length
);

themis_status_t themis_secure_cell_decrypt_seal_with_passphrase(
        const uint8_t*  passphrase,
        size_t          passphrase_length,
        const uint8_t*  user_context,
        size_t          user_context_length,
        const uint8_t*  encrypted_message,
        size_t          encrypted_message_length,
        uint8_t*        plain_message,
        size_t*         plain_message_length
);
The API is described in Themis RFC 2 (not available publicly at the moment). This pull request implements the API in Themis Core on which we’ll base implementations in all high-level language wrappers.
Main issue that is solved by passphrase API is inadeqacy of ZRTP KDF used by master key API when applied to human-readable passphrases with low entropy. Previously we suggested and allowed such use in high-level languages, however it is not secure enough. Master key API should be used only with randomly-generated binary keys. Our symmetric key generation API produces 32-byte-long keys.
New API can be safely used with human-readable strings containing way less entropy. This is made possible by using a proper password key derivation function — PBKDF2 — to generate intermediate key used for encryption. Currently we are using 200,000 iterations — the slowdown is not noticeable for single-time use but is frustrating enough for repeated computation during brute-force attacks.
Passphrase support is currently implemented only for Seal mode of Secure Cell. It can be extended to Token Protect mode in the future. Context Imprint mode will never support passphrases directly because it does not provide storage space for KDF context. However, we may provide separate KDF interface later which will make it possible to use passphrases with Context Imprint mode too.
The implementation is split into five main parts:


Define authentication token format
I’ve opted for more explicit approach to parsing and producing data formats. I believe that such approach is less error-prone and contains less magic. Though it is much more verbose that fast, direct, and incorrect casts to struct pointers that we are currently doing in master key API code.
Give it a close look as this will be our main sponsor of hidden segmentation faults.


Prepend authentication token in Seal mode
Token Protect mode keeps the token as a separate buffer while in Seal mode it is prepended to the encrypted message. We have to carefully gauge the output buffer size during encryption, and carefully parse input data during decryption.


Secure Cell encryption
It is pretty straightforward. There are some Soter quirks that we need to deal with, and there are a couple of restrictions on the input data that we need to honor.
Also note that we encrypt data using default KDF parameters which are fixed for Themis release. However, we may review and change them in future releases. Unless we introduce a new KDF algorithm, simple parameter tweaks are backwars and forward-compatible. With PBKDF2 we can adjust salt length (unlikely) and iteration count.


Secure Cell decryption
This code path needs close attention as here we have to deal with actively hostile user input. Separate data format parsing makes it easier to follow, but still be alert.


Tests, documentation comments, changelog updates, etc.
The tests are basic but they cover the most important points. New additions include explicit tests for all AES key lengths that we support. (Yes, I did fail to take that into account during development.)
As for what they lack, we currently do not verify that Secure Cell is able to detect data corruption, for example. I hope to not forget to add them later.


Have fun reviewing these 1.5k lines of code next week!
Checklist

 Change is covered by automated tests
 Benchmark results are attached (coming soon)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated

Address feedback:

 add stream_ prefix to parsing helpers
 generalize KDF handling
 try avoiding auth_tag_length comparisons",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,577,2020-01-24T11:26:22Z,2020-02-12T19:56:45Z,2020-03-05T12:56:31Z,MERGED,True,1655,58,13,https://github.com/ilammy,Passphrase-based API of Secure Cell,16,['core'],https://github.com/cossacklabs/themis/pull/577,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/577#issuecomment-585390609,"Implement passphrase-based API of Secure Cell in Themis Core:
themis_status_t themis_secure_cell_encrypt_seal_with_passphrase(
        const uint8_t*  passphrase,
        size_t          passphrase_length,
        const uint8_t*  user_context,
        size_t          user_context_length,
        const uint8_t*  message,
        size_t          message_length,
        uint8_t*        encrypted_message,
        size_t*         encrypted_message_length
);

themis_status_t themis_secure_cell_decrypt_seal_with_passphrase(
        const uint8_t*  passphrase,
        size_t          passphrase_length,
        const uint8_t*  user_context,
        size_t          user_context_length,
        const uint8_t*  encrypted_message,
        size_t          encrypted_message_length,
        uint8_t*        plain_message,
        size_t*         plain_message_length
);
The API is described in Themis RFC 2 (not available publicly at the moment). This pull request implements the API in Themis Core on which we’ll base implementations in all high-level language wrappers.
Main issue that is solved by passphrase API is inadeqacy of ZRTP KDF used by master key API when applied to human-readable passphrases with low entropy. Previously we suggested and allowed such use in high-level languages, however it is not secure enough. Master key API should be used only with randomly-generated binary keys. Our symmetric key generation API produces 32-byte-long keys.
New API can be safely used with human-readable strings containing way less entropy. This is made possible by using a proper password key derivation function — PBKDF2 — to generate intermediate key used for encryption. Currently we are using 200,000 iterations — the slowdown is not noticeable for single-time use but is frustrating enough for repeated computation during brute-force attacks.
Passphrase support is currently implemented only for Seal mode of Secure Cell. It can be extended to Token Protect mode in the future. Context Imprint mode will never support passphrases directly because it does not provide storage space for KDF context. However, we may provide separate KDF interface later which will make it possible to use passphrases with Context Imprint mode too.
The implementation is split into five main parts:


Define authentication token format
I’ve opted for more explicit approach to parsing and producing data formats. I believe that such approach is less error-prone and contains less magic. Though it is much more verbose that fast, direct, and incorrect casts to struct pointers that we are currently doing in master key API code.
Give it a close look as this will be our main sponsor of hidden segmentation faults.


Prepend authentication token in Seal mode
Token Protect mode keeps the token as a separate buffer while in Seal mode it is prepended to the encrypted message. We have to carefully gauge the output buffer size during encryption, and carefully parse input data during decryption.


Secure Cell encryption
It is pretty straightforward. There are some Soter quirks that we need to deal with, and there are a couple of restrictions on the input data that we need to honor.
Also note that we encrypt data using default KDF parameters which are fixed for Themis release. However, we may review and change them in future releases. Unless we introduce a new KDF algorithm, simple parameter tweaks are backwars and forward-compatible. With PBKDF2 we can adjust salt length (unlikely) and iteration count.


Secure Cell decryption
This code path needs close attention as here we have to deal with actively hostile user input. Separate data format parsing makes it easier to follow, but still be alert.


Tests, documentation comments, changelog updates, etc.
The tests are basic but they cover the most important points. New additions include explicit tests for all AES key lengths that we support. (Yes, I did fail to take that into account during development.)
As for what they lack, we currently do not verify that Secure Cell is able to detect data corruption, for example. I hope to not forget to add them later.


Have fun reviewing these 1.5k lines of code next week!
Checklist

 Change is covered by automated tests
 Benchmark results are attached (coming soon)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated (later)
 Changelog is updated

Address feedback:

 add stream_ prefix to parsing helpers
 generalize KDF handling
 try avoiding auth_tag_length comparisons","This PR blocks a number of other PRs so I'm merging it right now with only one approval. Since most of the issues have been addressed and this PR has received some reviewer attention, I guess it's okay. @ignatk, @storojs72, if you have any concerns about these changes, please write them here, I'll address them separately.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,578,2020-01-27T07:45:36Z,2020-01-30T12:07:50Z,2020-01-30T12:07:51Z,MERGED,True,17,1,1,https://github.com/ilammy,Hardening compiler flags,1,"['core', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/578,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/578,"Enable more compile-time and run-time protections which are recommended and used by Debian and Red Hat when building their package bases.
These are quite old compilation flags, only -fstack-protector-strong is supported since GCC 4.9. We might need to support earlier versions for distros like RHEL and CentOS so replace it with -fstack-protector when unavailable. They are usually even enabled by default, but let’s make sure that the compiler uses them. Stack canaries are run-time checks for buffer overflows in local variables which are the main source of ROP attacks.

By the way, you saw that PR with passphrase API for Secure Cell (#577)? It introduces a textbook example of a buffer overflow bug which is caught by a stack canary like this. Can you spot the bug? Because I certainly could not – not without a dead canary in my face.

FORTIFY_SOURCE is not enabled by default usually. It replaces various standard library functions (strcpy(), memcpy(), etc.) with their buffer-length-aware alternatives where possible. They will abort the program (or compilation) if they detect an obvious buffer overflow for arrays of statically-known size.
Immediate binding and read-only relocations prevent some exploits which may redirect functions imported by Themis somewhere different. They also somewhat limit possible effects of accidental memory corruption.
macOS/iOS uses different linker flags for relro (-read_only_relocs) but relocations have to be writeable on some platforms (e.g., ARM64) therefore we limit it to Linux only.
Another recommended option is using position-independent executable code but since we're a shared library we already build with -fPIC.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (maybe later)","Enable more compile-time and run-time protections which are recommended and used by Debian and Red Hat when building their package bases.
These are quite old compilation flags, only -fstack-protector-strong is supported since GCC 4.9. We might need to support earlier versions for distros like RHEL and CentOS so replace it with -fstack-protector when unavailable. They are usually even enabled by default, but let’s make sure that the compiler uses them. Stack canaries are run-time checks for buffer overflows in local variables which are the main source of ROP attacks.

By the way, you saw that PR with passphrase API for Secure Cell (#577)? It introduces a textbook example of a buffer overflow bug which is caught by a stack canary like this. Can you spot the bug? Because I certainly could not – not without a dead canary in my face.

FORTIFY_SOURCE is not enabled by default usually. It replaces various standard library functions (strcpy(), memcpy(), etc.) with their buffer-length-aware alternatives where possible. They will abort the program (or compilation) if they detect an obvious buffer overflow for arrays of statically-known size.
Immediate binding and read-only relocations prevent some exploits which may redirect functions imported by Themis somewhere different. They also somewhat limit possible effects of accidental memory corruption.
macOS/iOS uses different linker flags for relro (-read_only_relocs) but relocations have to be writeable on some platforms (e.g., ARM64) therefore we limit it to Linux only.
Another recommended option is using position-independent executable code but since we're a shared library we already build with -fPIC.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (maybe later)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,578,2020-01-27T07:45:36Z,2020-01-30T12:07:50Z,2020-01-30T12:07:51Z,MERGED,True,17,1,1,https://github.com/ilammy,Hardening compiler flags,1,"['core', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/578,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/578#issuecomment-578701866,"Enable more compile-time and run-time protections which are recommended and used by Debian and Red Hat when building their package bases.
These are quite old compilation flags, only -fstack-protector-strong is supported since GCC 4.9. We might need to support earlier versions for distros like RHEL and CentOS so replace it with -fstack-protector when unavailable. They are usually even enabled by default, but let’s make sure that the compiler uses them. Stack canaries are run-time checks for buffer overflows in local variables which are the main source of ROP attacks.

By the way, you saw that PR with passphrase API for Secure Cell (#577)? It introduces a textbook example of a buffer overflow bug which is caught by a stack canary like this. Can you spot the bug? Because I certainly could not – not without a dead canary in my face.

FORTIFY_SOURCE is not enabled by default usually. It replaces various standard library functions (strcpy(), memcpy(), etc.) with their buffer-length-aware alternatives where possible. They will abort the program (or compilation) if they detect an obvious buffer overflow for arrays of statically-known size.
Immediate binding and read-only relocations prevent some exploits which may redirect functions imported by Themis somewhere different. They also somewhat limit possible effects of accidental memory corruption.
macOS/iOS uses different linker flags for relro (-read_only_relocs) but relocations have to be writeable on some platforms (e.g., ARM64) therefore we limit it to Linux only.
Another recommended option is using position-independent executable code but since we're a shared library we already build with -fPIC.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (maybe later)","Do all these flags work when building on Mac using clang?

Yep, all these compiler flags are supported by Clang and work on Apple platforms too.
-z relro and -z now are not supported by Apple linker, but they are enabled only for Linux.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,578,2020-01-27T07:45:36Z,2020-01-30T12:07:50Z,2020-01-30T12:07:51Z,MERGED,True,17,1,1,https://github.com/ilammy,Hardening compiler flags,1,"['core', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/578,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/578#issuecomment-578702076,"Enable more compile-time and run-time protections which are recommended and used by Debian and Red Hat when building their package bases.
These are quite old compilation flags, only -fstack-protector-strong is supported since GCC 4.9. We might need to support earlier versions for distros like RHEL and CentOS so replace it with -fstack-protector when unavailable. They are usually even enabled by default, but let’s make sure that the compiler uses them. Stack canaries are run-time checks for buffer overflows in local variables which are the main source of ROP attacks.

By the way, you saw that PR with passphrase API for Secure Cell (#577)? It introduces a textbook example of a buffer overflow bug which is caught by a stack canary like this. Can you spot the bug? Because I certainly could not – not without a dead canary in my face.

FORTIFY_SOURCE is not enabled by default usually. It replaces various standard library functions (strcpy(), memcpy(), etc.) with their buffer-length-aware alternatives where possible. They will abort the program (or compilation) if they detect an obvious buffer overflow for arrays of statically-known size.
Immediate binding and read-only relocations prevent some exploits which may redirect functions imported by Themis somewhere different. They also somewhat limit possible effects of accidental memory corruption.
macOS/iOS uses different linker flags for relro (-read_only_relocs) but relocations have to be writeable on some platforms (e.g., ARM64) therefore we limit it to Linux only.
Another recommended option is using position-independent executable code but since we're a shared library we already build with -fPIC.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (maybe later)","Sounds awesome, thank you for checking and taking care of our mac users :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,578,2020-01-27T07:45:36Z,2020-01-30T12:07:50Z,2020-01-30T12:07:51Z,MERGED,True,17,1,1,https://github.com/ilammy,Hardening compiler flags,1,"['core', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/578,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/578#issuecomment-578709839,"Enable more compile-time and run-time protections which are recommended and used by Debian and Red Hat when building their package bases.
These are quite old compilation flags, only -fstack-protector-strong is supported since GCC 4.9. We might need to support earlier versions for distros like RHEL and CentOS so replace it with -fstack-protector when unavailable. They are usually even enabled by default, but let’s make sure that the compiler uses them. Stack canaries are run-time checks for buffer overflows in local variables which are the main source of ROP attacks.

By the way, you saw that PR with passphrase API for Secure Cell (#577)? It introduces a textbook example of a buffer overflow bug which is caught by a stack canary like this. Can you spot the bug? Because I certainly could not – not without a dead canary in my face.

FORTIFY_SOURCE is not enabled by default usually. It replaces various standard library functions (strcpy(), memcpy(), etc.) with their buffer-length-aware alternatives where possible. They will abort the program (or compilation) if they detect an obvious buffer overflow for arrays of statically-known size.
Immediate binding and read-only relocations prevent some exploits which may redirect functions imported by Themis somewhere different. They also somewhat limit possible effects of accidental memory corruption.
macOS/iOS uses different linker flags for relro (-read_only_relocs) but relocations have to be writeable on some platforms (e.g., ARM64) therefore we limit it to Linux only.
Another recommended option is using position-independent executable code but since we're a shared library we already build with -fPIC.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (maybe later)","Come to think of it... Cartage and CocoaPods do not use the Makefile, so they have to be adjusted separately. This change currently affects only Homebrew builds of Themis installed into the system.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,578,2020-01-27T07:45:36Z,2020-01-30T12:07:50Z,2020-01-30T12:07:51Z,MERGED,True,17,1,1,https://github.com/ilammy,Hardening compiler flags,1,"['core', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/578,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/578#issuecomment-578719089,"Enable more compile-time and run-time protections which are recommended and used by Debian and Red Hat when building their package bases.
These are quite old compilation flags, only -fstack-protector-strong is supported since GCC 4.9. We might need to support earlier versions for distros like RHEL and CentOS so replace it with -fstack-protector when unavailable. They are usually even enabled by default, but let’s make sure that the compiler uses them. Stack canaries are run-time checks for buffer overflows in local variables which are the main source of ROP attacks.

By the way, you saw that PR with passphrase API for Secure Cell (#577)? It introduces a textbook example of a buffer overflow bug which is caught by a stack canary like this. Can you spot the bug? Because I certainly could not – not without a dead canary in my face.

FORTIFY_SOURCE is not enabled by default usually. It replaces various standard library functions (strcpy(), memcpy(), etc.) with their buffer-length-aware alternatives where possible. They will abort the program (or compilation) if they detect an obvious buffer overflow for arrays of statically-known size.
Immediate binding and read-only relocations prevent some exploits which may redirect functions imported by Themis somewhere different. They also somewhat limit possible effects of accidental memory corruption.
macOS/iOS uses different linker flags for relro (-read_only_relocs) but relocations have to be writeable on some platforms (e.g., ARM64) therefore we limit it to Linux only.
Another recommended option is using position-independent executable code but since we're a shared library we already build with -fPIC.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (maybe later)","I've poked around in Xcode and it looks like we can avoid making any changes there.
Modern Xcode already highlights buffer-related issues prevented by FORTIFY_SOURCE even without it being specified. Carthage and CocoaPods do not print out warnings so our users (and us) will not see them. -fstack-protector-strong in enabled by default in Apple's clang.
If there are any issues we will have to catch them on other platforms and they will be fixed for Carthage/CocoaPods users as well.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,578,2020-01-27T07:45:36Z,2020-01-30T12:07:50Z,2020-01-30T12:07:51Z,MERGED,True,17,1,1,https://github.com/ilammy,Hardening compiler flags,1,"['core', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/578,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/578#issuecomment-578737659,"Enable more compile-time and run-time protections which are recommended and used by Debian and Red Hat when building their package bases.
These are quite old compilation flags, only -fstack-protector-strong is supported since GCC 4.9. We might need to support earlier versions for distros like RHEL and CentOS so replace it with -fstack-protector when unavailable. They are usually even enabled by default, but let’s make sure that the compiler uses them. Stack canaries are run-time checks for buffer overflows in local variables which are the main source of ROP attacks.

By the way, you saw that PR with passphrase API for Secure Cell (#577)? It introduces a textbook example of a buffer overflow bug which is caught by a stack canary like this. Can you spot the bug? Because I certainly could not – not without a dead canary in my face.

FORTIFY_SOURCE is not enabled by default usually. It replaces various standard library functions (strcpy(), memcpy(), etc.) with their buffer-length-aware alternatives where possible. They will abort the program (or compilation) if they detect an obvious buffer overflow for arrays of statically-known size.
Immediate binding and read-only relocations prevent some exploits which may redirect functions imported by Themis somewhere different. They also somewhat limit possible effects of accidental memory corruption.
macOS/iOS uses different linker flags for relro (-read_only_relocs) but relocations have to be writeable on some platforms (e.g., ARM64) therefore we limit it to Linux only.
Another recommended option is using position-independent executable code but since we're a shared library we already build with -fPIC.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (maybe later)","I've poked around in Xcode and it looks like we can avoid making any changes there.

Totally agree. For me, Xcode-based projects are the other world with different rules, and their own caveats :D",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,579,2020-01-27T07:56:09Z,2020-03-05T12:31:38Z,2020-03-05T12:53:02Z,MERGED,True,192,19,5,https://github.com/ilammy,Exercise fuzzers during CI builds,16,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/579,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/579,"We have had some kind of a fuzzing framework for close to a year, but it did not get enough attention since only nobody cares about that. Let’s improve the situation a bit.


Make sure that fuzzers can be built with sanitizers. This is the most interesting case since sanitizers report bugs by crashing and AFL reacts to crashes. Building and running ASAN tests was a quest on its own.


Build and run fuzzers on CI. Every time. For 30 seconds each. Hopefully we’ll catch some low-hanging bugs with that, given a sufficient number of builds.


There is at least one known bug which is caught by fuzzers+sanitizers, so hopefully the build will fail this time and you can see the report.


Improve reporting and crash analysis tool so that they are more useful.


There are more implementation details in commit messages.

P.S. Yep, the build does fail right now.
fuzzing scell_seal_roundtrip...
afl-fuzz 2.52b by <lcamtuf@google.com>
[+] Looks like we're not running on a tty, so I'll be a bit less verbose.
[+] You have 36 CPU cores and 19 runnable tasks (utilization: 53%).
[+] Try parallel jobs - see /usr/share/doc/afl-doc/docs/parallel_fuzzing.txt.
[*] Checking CPU core loadout...
[+] Found a free CPU core, binding to #0.
[*] Checking core_pattern...
[*] Setting up output directories...
[+] Output directory exists but deemed OK to reuse.
[*] Deleting old session data...
[+] Output dir cleanup successful.
[*] Scanning 'tools/afl/input/scell_seal_roundtrip'...
[+] No auto-generated dictionary tokens to reuse.
[*] Creating hard links for all input files...
[*] Validating target binary...
[*] Attempting dry run with 'id:000000,orig:ok_short_message.dat'...
[*] Spinning up the fork server...
[+] All right - fork server is up.
    len = 30, map size = 314, exec speed = 3706 us
[+] All test cases processed.

[+] Here are some useful stats:

    Test case count : 1 favored, 0 variable, 1 total
       Bitmap range : 314 to 314 bits (average: 314.00 bits)
        Exec timing : 3706 to 3706 us (average: 3706 us)

[*] No -t option specified, so I'll use exec timeout of 20 ms.
[+] All set and ready to roll!
[*] Entering queue cycle 1.
[*] Fuzzing test case #0 (1 total, 0 uniq crashes found)...
[*] Fuzzing test case #1 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #3 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #4 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #6 (8 total, 0 uniq crashes found)...


+++ Testing aborted by user +++
[+] We're done here. Have a nice day!

see build/afl/output/scell_seal_roundtrip/2020-01-27_08-00-03 for results

Analyzing results...

# scell_seal_decrypt -- 2020-01-27_07-59-33

## id:000000 -- SIGABRT

Run:

    build/afl/scell_seal_decrypt build/afl/output/scell_seal_decrypt/2020-01-27_07-59-33/crashes/id:000000,sig:06,src:000000,op:flip32,pos:27

Input (base64):

AAAAA2tleQAAAAdjb250ZXh0AAAAMwABAUAM////7wAAAAcAAACbMpUEngYcUNl6
KWhBWxWP8Qp1AC4xdvnfM1NJYB5sxBGHsA==

Debugger output:

=================================================================
==3989==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf60015bc at pc 0xf7a1e8be bp 0xff8a27f8 sp 0xff8a23c8
READ of size 16 at 0xf60015bc thread T0
    #0 0xf7a1e8bd  (/usr/lib32/libasan.so.4+0x778bd)
    #1 0xf7813a23  (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x118a23)
    #2 0xf781f05e in EVP_CIPHER_CTX_ctrl (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x12405e)
    #3 0x56659e62 in soter_sym_aead_decrypt_final src/soter/openssl/soter_sym.c:433
    #4 0x5664dcb9 in themis_auth_sym_plain_decrypt src/themis/sym_enc_message.c:109
    #5 0x5664dcb9 in themis_auth_sym_decrypt_message_ src/themis/sym_enc_message.c:332
    #6 0x5664dcb9 in themis_auth_sym_decrypt_message src/themis/sym_enc_message.c:439
    #7 0x566490ad in themis_secure_cell_decrypt_seal src/themis/secure_cell.c:92
    #8 0x56646c12 in main tools/afl/src/scell_seal_decrypt.c:99
    #9 0xf7537e80 in __libc_start_main (/lib/i386-linux-gnu/libc.so.6+0x18e80)
    #10 0x56647a82  (/home/user/project/build/afl/scell_seal_decrypt+0x3a82)

Address 0xf60015bc is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib32/libasan.so.4+0x778bd) 
Shadow bytes around the buggy address:
  0x3ec00260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00290: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x3ec002b0: fa fa fa fa fa fa fa[fa]fa fa fa fa fa fa fa fa
  0x3ec002c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002d0: fa fa fa fa 00 00 00 00 00 00 03 fa fa fa fa fa
  0x3ec002e0: 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
  0x3ec002f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==3989==ABORTING

Exited with code exit status 1


Failures are also stored in artifacts, example.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated (maybe later)
 Parsing bug is fixed and the build is not red","We have had some kind of a fuzzing framework for close to a year, but it did not get enough attention since only nobody cares about that. Let’s improve the situation a bit.


Make sure that fuzzers can be built with sanitizers. This is the most interesting case since sanitizers report bugs by crashing and AFL reacts to crashes. Building and running ASAN tests was a quest on its own.


Build and run fuzzers on CI. Every time. For 30 seconds each. Hopefully we’ll catch some low-hanging bugs with that, given a sufficient number of builds.


There is at least one known bug which is caught by fuzzers+sanitizers, so hopefully the build will fail this time and you can see the report.


Improve reporting and crash analysis tool so that they are more useful.


There are more implementation details in commit messages.

P.S. Yep, the build does fail right now.
fuzzing scell_seal_roundtrip...
afl-fuzz 2.52b by <lcamtuf@google.com>
[+] Looks like we're not running on a tty, so I'll be a bit less verbose.
[+] You have 36 CPU cores and 19 runnable tasks (utilization: 53%).
[+] Try parallel jobs - see /usr/share/doc/afl-doc/docs/parallel_fuzzing.txt.
[*] Checking CPU core loadout...
[+] Found a free CPU core, binding to #0.
[*] Checking core_pattern...
[*] Setting up output directories...
[+] Output directory exists but deemed OK to reuse.
[*] Deleting old session data...
[+] Output dir cleanup successful.
[*] Scanning 'tools/afl/input/scell_seal_roundtrip'...
[+] No auto-generated dictionary tokens to reuse.
[*] Creating hard links for all input files...
[*] Validating target binary...
[*] Attempting dry run with 'id:000000,orig:ok_short_message.dat'...
[*] Spinning up the fork server...
[+] All right - fork server is up.
    len = 30, map size = 314, exec speed = 3706 us
[+] All test cases processed.

[+] Here are some useful stats:

    Test case count : 1 favored, 0 variable, 1 total
       Bitmap range : 314 to 314 bits (average: 314.00 bits)
        Exec timing : 3706 to 3706 us (average: 3706 us)

[*] No -t option specified, so I'll use exec timeout of 20 ms.
[+] All set and ready to roll!
[*] Entering queue cycle 1.
[*] Fuzzing test case #0 (1 total, 0 uniq crashes found)...
[*] Fuzzing test case #1 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #3 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #4 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #6 (8 total, 0 uniq crashes found)...


+++ Testing aborted by user +++
[+] We're done here. Have a nice day!

see build/afl/output/scell_seal_roundtrip/2020-01-27_08-00-03 for results

Analyzing results...

# scell_seal_decrypt -- 2020-01-27_07-59-33

## id:000000 -- SIGABRT

Run:

    build/afl/scell_seal_decrypt build/afl/output/scell_seal_decrypt/2020-01-27_07-59-33/crashes/id:000000,sig:06,src:000000,op:flip32,pos:27

Input (base64):

AAAAA2tleQAAAAdjb250ZXh0AAAAMwABAUAM////7wAAAAcAAACbMpUEngYcUNl6
KWhBWxWP8Qp1AC4xdvnfM1NJYB5sxBGHsA==

Debugger output:

=================================================================
==3989==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf60015bc at pc 0xf7a1e8be bp 0xff8a27f8 sp 0xff8a23c8
READ of size 16 at 0xf60015bc thread T0
    #0 0xf7a1e8bd  (/usr/lib32/libasan.so.4+0x778bd)
    #1 0xf7813a23  (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x118a23)
    #2 0xf781f05e in EVP_CIPHER_CTX_ctrl (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x12405e)
    #3 0x56659e62 in soter_sym_aead_decrypt_final src/soter/openssl/soter_sym.c:433
    #4 0x5664dcb9 in themis_auth_sym_plain_decrypt src/themis/sym_enc_message.c:109
    #5 0x5664dcb9 in themis_auth_sym_decrypt_message_ src/themis/sym_enc_message.c:332
    #6 0x5664dcb9 in themis_auth_sym_decrypt_message src/themis/sym_enc_message.c:439
    #7 0x566490ad in themis_secure_cell_decrypt_seal src/themis/secure_cell.c:92
    #8 0x56646c12 in main tools/afl/src/scell_seal_decrypt.c:99
    #9 0xf7537e80 in __libc_start_main (/lib/i386-linux-gnu/libc.so.6+0x18e80)
    #10 0x56647a82  (/home/user/project/build/afl/scell_seal_decrypt+0x3a82)

Address 0xf60015bc is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib32/libasan.so.4+0x778bd) 
Shadow bytes around the buggy address:
  0x3ec00260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00290: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x3ec002b0: fa fa fa fa fa fa fa[fa]fa fa fa fa fa fa fa fa
  0x3ec002c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002d0: fa fa fa fa 00 00 00 00 00 00 03 fa fa fa fa fa
  0x3ec002e0: 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
  0x3ec002f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==3989==ABORTING

Exited with code exit status 1


Failures are also stored in artifacts, example.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated (maybe later)
 Parsing bug is fixed and the build is not red",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,579,2020-01-27T07:56:09Z,2020-03-05T12:31:38Z,2020-03-05T12:53:02Z,MERGED,True,192,19,5,https://github.com/ilammy,Exercise fuzzers during CI builds,16,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/579,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/579#issuecomment-578695598,"We have had some kind of a fuzzing framework for close to a year, but it did not get enough attention since only nobody cares about that. Let’s improve the situation a bit.


Make sure that fuzzers can be built with sanitizers. This is the most interesting case since sanitizers report bugs by crashing and AFL reacts to crashes. Building and running ASAN tests was a quest on its own.


Build and run fuzzers on CI. Every time. For 30 seconds each. Hopefully we’ll catch some low-hanging bugs with that, given a sufficient number of builds.


There is at least one known bug which is caught by fuzzers+sanitizers, so hopefully the build will fail this time and you can see the report.


Improve reporting and crash analysis tool so that they are more useful.


There are more implementation details in commit messages.

P.S. Yep, the build does fail right now.
fuzzing scell_seal_roundtrip...
afl-fuzz 2.52b by <lcamtuf@google.com>
[+] Looks like we're not running on a tty, so I'll be a bit less verbose.
[+] You have 36 CPU cores and 19 runnable tasks (utilization: 53%).
[+] Try parallel jobs - see /usr/share/doc/afl-doc/docs/parallel_fuzzing.txt.
[*] Checking CPU core loadout...
[+] Found a free CPU core, binding to #0.
[*] Checking core_pattern...
[*] Setting up output directories...
[+] Output directory exists but deemed OK to reuse.
[*] Deleting old session data...
[+] Output dir cleanup successful.
[*] Scanning 'tools/afl/input/scell_seal_roundtrip'...
[+] No auto-generated dictionary tokens to reuse.
[*] Creating hard links for all input files...
[*] Validating target binary...
[*] Attempting dry run with 'id:000000,orig:ok_short_message.dat'...
[*] Spinning up the fork server...
[+] All right - fork server is up.
    len = 30, map size = 314, exec speed = 3706 us
[+] All test cases processed.

[+] Here are some useful stats:

    Test case count : 1 favored, 0 variable, 1 total
       Bitmap range : 314 to 314 bits (average: 314.00 bits)
        Exec timing : 3706 to 3706 us (average: 3706 us)

[*] No -t option specified, so I'll use exec timeout of 20 ms.
[+] All set and ready to roll!
[*] Entering queue cycle 1.
[*] Fuzzing test case #0 (1 total, 0 uniq crashes found)...
[*] Fuzzing test case #1 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #3 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #4 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #6 (8 total, 0 uniq crashes found)...


+++ Testing aborted by user +++
[+] We're done here. Have a nice day!

see build/afl/output/scell_seal_roundtrip/2020-01-27_08-00-03 for results

Analyzing results...

# scell_seal_decrypt -- 2020-01-27_07-59-33

## id:000000 -- SIGABRT

Run:

    build/afl/scell_seal_decrypt build/afl/output/scell_seal_decrypt/2020-01-27_07-59-33/crashes/id:000000,sig:06,src:000000,op:flip32,pos:27

Input (base64):

AAAAA2tleQAAAAdjb250ZXh0AAAAMwABAUAM////7wAAAAcAAACbMpUEngYcUNl6
KWhBWxWP8Qp1AC4xdvnfM1NJYB5sxBGHsA==

Debugger output:

=================================================================
==3989==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf60015bc at pc 0xf7a1e8be bp 0xff8a27f8 sp 0xff8a23c8
READ of size 16 at 0xf60015bc thread T0
    #0 0xf7a1e8bd  (/usr/lib32/libasan.so.4+0x778bd)
    #1 0xf7813a23  (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x118a23)
    #2 0xf781f05e in EVP_CIPHER_CTX_ctrl (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x12405e)
    #3 0x56659e62 in soter_sym_aead_decrypt_final src/soter/openssl/soter_sym.c:433
    #4 0x5664dcb9 in themis_auth_sym_plain_decrypt src/themis/sym_enc_message.c:109
    #5 0x5664dcb9 in themis_auth_sym_decrypt_message_ src/themis/sym_enc_message.c:332
    #6 0x5664dcb9 in themis_auth_sym_decrypt_message src/themis/sym_enc_message.c:439
    #7 0x566490ad in themis_secure_cell_decrypt_seal src/themis/secure_cell.c:92
    #8 0x56646c12 in main tools/afl/src/scell_seal_decrypt.c:99
    #9 0xf7537e80 in __libc_start_main (/lib/i386-linux-gnu/libc.so.6+0x18e80)
    #10 0x56647a82  (/home/user/project/build/afl/scell_seal_decrypt+0x3a82)

Address 0xf60015bc is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib32/libasan.so.4+0x778bd) 
Shadow bytes around the buggy address:
  0x3ec00260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00290: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x3ec002b0: fa fa fa fa fa fa fa[fa]fa fa fa fa fa fa fa fa
  0x3ec002c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002d0: fa fa fa fa 00 00 00 00 00 00 03 fa fa fa fa fa
  0x3ec002e0: 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
  0x3ec002f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==3989==ABORTING

Exited with code exit status 1


Failures are also stored in artifacts, example.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated (maybe later)
 Parsing bug is fixed and the build is not red","So,

Every CI check is 30sec slower.
If fuzzer finds smth, CI tests will fail.
What is our procedure on fixing things that fuzzer found? I mean, what PR author should do, if fuzzer found an issue that is not related to their PR (most things won't be related).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,579,2020-01-27T07:56:09Z,2020-03-05T12:31:38Z,2020-03-05T12:53:02Z,MERGED,True,192,19,5,https://github.com/ilammy,Exercise fuzzers during CI builds,16,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/579,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/579#issuecomment-578704535,"We have had some kind of a fuzzing framework for close to a year, but it did not get enough attention since only nobody cares about that. Let’s improve the situation a bit.


Make sure that fuzzers can be built with sanitizers. This is the most interesting case since sanitizers report bugs by crashing and AFL reacts to crashes. Building and running ASAN tests was a quest on its own.


Build and run fuzzers on CI. Every time. For 30 seconds each. Hopefully we’ll catch some low-hanging bugs with that, given a sufficient number of builds.


There is at least one known bug which is caught by fuzzers+sanitizers, so hopefully the build will fail this time and you can see the report.


Improve reporting and crash analysis tool so that they are more useful.


There are more implementation details in commit messages.

P.S. Yep, the build does fail right now.
fuzzing scell_seal_roundtrip...
afl-fuzz 2.52b by <lcamtuf@google.com>
[+] Looks like we're not running on a tty, so I'll be a bit less verbose.
[+] You have 36 CPU cores and 19 runnable tasks (utilization: 53%).
[+] Try parallel jobs - see /usr/share/doc/afl-doc/docs/parallel_fuzzing.txt.
[*] Checking CPU core loadout...
[+] Found a free CPU core, binding to #0.
[*] Checking core_pattern...
[*] Setting up output directories...
[+] Output directory exists but deemed OK to reuse.
[*] Deleting old session data...
[+] Output dir cleanup successful.
[*] Scanning 'tools/afl/input/scell_seal_roundtrip'...
[+] No auto-generated dictionary tokens to reuse.
[*] Creating hard links for all input files...
[*] Validating target binary...
[*] Attempting dry run with 'id:000000,orig:ok_short_message.dat'...
[*] Spinning up the fork server...
[+] All right - fork server is up.
    len = 30, map size = 314, exec speed = 3706 us
[+] All test cases processed.

[+] Here are some useful stats:

    Test case count : 1 favored, 0 variable, 1 total
       Bitmap range : 314 to 314 bits (average: 314.00 bits)
        Exec timing : 3706 to 3706 us (average: 3706 us)

[*] No -t option specified, so I'll use exec timeout of 20 ms.
[+] All set and ready to roll!
[*] Entering queue cycle 1.
[*] Fuzzing test case #0 (1 total, 0 uniq crashes found)...
[*] Fuzzing test case #1 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #3 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #4 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #6 (8 total, 0 uniq crashes found)...


+++ Testing aborted by user +++
[+] We're done here. Have a nice day!

see build/afl/output/scell_seal_roundtrip/2020-01-27_08-00-03 for results

Analyzing results...

# scell_seal_decrypt -- 2020-01-27_07-59-33

## id:000000 -- SIGABRT

Run:

    build/afl/scell_seal_decrypt build/afl/output/scell_seal_decrypt/2020-01-27_07-59-33/crashes/id:000000,sig:06,src:000000,op:flip32,pos:27

Input (base64):

AAAAA2tleQAAAAdjb250ZXh0AAAAMwABAUAM////7wAAAAcAAACbMpUEngYcUNl6
KWhBWxWP8Qp1AC4xdvnfM1NJYB5sxBGHsA==

Debugger output:

=================================================================
==3989==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf60015bc at pc 0xf7a1e8be bp 0xff8a27f8 sp 0xff8a23c8
READ of size 16 at 0xf60015bc thread T0
    #0 0xf7a1e8bd  (/usr/lib32/libasan.so.4+0x778bd)
    #1 0xf7813a23  (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x118a23)
    #2 0xf781f05e in EVP_CIPHER_CTX_ctrl (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x12405e)
    #3 0x56659e62 in soter_sym_aead_decrypt_final src/soter/openssl/soter_sym.c:433
    #4 0x5664dcb9 in themis_auth_sym_plain_decrypt src/themis/sym_enc_message.c:109
    #5 0x5664dcb9 in themis_auth_sym_decrypt_message_ src/themis/sym_enc_message.c:332
    #6 0x5664dcb9 in themis_auth_sym_decrypt_message src/themis/sym_enc_message.c:439
    #7 0x566490ad in themis_secure_cell_decrypt_seal src/themis/secure_cell.c:92
    #8 0x56646c12 in main tools/afl/src/scell_seal_decrypt.c:99
    #9 0xf7537e80 in __libc_start_main (/lib/i386-linux-gnu/libc.so.6+0x18e80)
    #10 0x56647a82  (/home/user/project/build/afl/scell_seal_decrypt+0x3a82)

Address 0xf60015bc is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib32/libasan.so.4+0x778bd) 
Shadow bytes around the buggy address:
  0x3ec00260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00290: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x3ec002b0: fa fa fa fa fa fa fa[fa]fa fa fa fa fa fa fa fa
  0x3ec002c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002d0: fa fa fa fa 00 00 00 00 00 00 03 fa fa fa fa fa
  0x3ec002e0: 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
  0x3ec002f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==3989==ABORTING

Exited with code exit status 1


Failures are also stored in artifacts, example.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated (maybe later)
 Parsing bug is fixed and the build is not red","@Lagovas,

soon Bash and Makefile languages will be at top 5 of Themis languages on github )

YAML programmers 🤣
@vixentael,

Every CI check is 30sec slower.

They are running in parallel, and most of the time Android builds and integration tests are the slowest, so we're unlikely to be blocked by this. (And it will be about 2 minutes and counting in fact: there are 2 fuzzing tools and 2 fuzzing modes, each of those 4 runs for 30 seconds.)

If fuzzer finds smth, CI tests will fail.

That's correct.

What is our procedure on fixing things that fuzzer found?

I guess manually inspect the failure and use our best judgement. I'd probably rerun the job, if the failure persists and is definitely not related to PR, they we might note the failure, approve the merge with it, and fix it later separately.
Best practice would be to run shadow builds and send alerts about fuzzing failures only to maintainers, without exposing PR authors to them. But I'm not really sure how this can be easily done with CircleCI. I did not notice any ready-made so we'd have to hack something (e.g., note the failure, send an alert via API integration, let the build succeed if the failure is found by fuzzers).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,579,2020-01-27T07:56:09Z,2020-03-05T12:31:38Z,2020-03-05T12:53:02Z,MERGED,True,192,19,5,https://github.com/ilammy,Exercise fuzzers during CI builds,16,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/579,https://github.com/Lagovas,4,https://github.com/cossacklabs/themis/pull/579#issuecomment-578710051,"We have had some kind of a fuzzing framework for close to a year, but it did not get enough attention since only nobody cares about that. Let’s improve the situation a bit.


Make sure that fuzzers can be built with sanitizers. This is the most interesting case since sanitizers report bugs by crashing and AFL reacts to crashes. Building and running ASAN tests was a quest on its own.


Build and run fuzzers on CI. Every time. For 30 seconds each. Hopefully we’ll catch some low-hanging bugs with that, given a sufficient number of builds.


There is at least one known bug which is caught by fuzzers+sanitizers, so hopefully the build will fail this time and you can see the report.


Improve reporting and crash analysis tool so that they are more useful.


There are more implementation details in commit messages.

P.S. Yep, the build does fail right now.
fuzzing scell_seal_roundtrip...
afl-fuzz 2.52b by <lcamtuf@google.com>
[+] Looks like we're not running on a tty, so I'll be a bit less verbose.
[+] You have 36 CPU cores and 19 runnable tasks (utilization: 53%).
[+] Try parallel jobs - see /usr/share/doc/afl-doc/docs/parallel_fuzzing.txt.
[*] Checking CPU core loadout...
[+] Found a free CPU core, binding to #0.
[*] Checking core_pattern...
[*] Setting up output directories...
[+] Output directory exists but deemed OK to reuse.
[*] Deleting old session data...
[+] Output dir cleanup successful.
[*] Scanning 'tools/afl/input/scell_seal_roundtrip'...
[+] No auto-generated dictionary tokens to reuse.
[*] Creating hard links for all input files...
[*] Validating target binary...
[*] Attempting dry run with 'id:000000,orig:ok_short_message.dat'...
[*] Spinning up the fork server...
[+] All right - fork server is up.
    len = 30, map size = 314, exec speed = 3706 us
[+] All test cases processed.

[+] Here are some useful stats:

    Test case count : 1 favored, 0 variable, 1 total
       Bitmap range : 314 to 314 bits (average: 314.00 bits)
        Exec timing : 3706 to 3706 us (average: 3706 us)

[*] No -t option specified, so I'll use exec timeout of 20 ms.
[+] All set and ready to roll!
[*] Entering queue cycle 1.
[*] Fuzzing test case #0 (1 total, 0 uniq crashes found)...
[*] Fuzzing test case #1 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #3 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #4 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #6 (8 total, 0 uniq crashes found)...


+++ Testing aborted by user +++
[+] We're done here. Have a nice day!

see build/afl/output/scell_seal_roundtrip/2020-01-27_08-00-03 for results

Analyzing results...

# scell_seal_decrypt -- 2020-01-27_07-59-33

## id:000000 -- SIGABRT

Run:

    build/afl/scell_seal_decrypt build/afl/output/scell_seal_decrypt/2020-01-27_07-59-33/crashes/id:000000,sig:06,src:000000,op:flip32,pos:27

Input (base64):

AAAAA2tleQAAAAdjb250ZXh0AAAAMwABAUAM////7wAAAAcAAACbMpUEngYcUNl6
KWhBWxWP8Qp1AC4xdvnfM1NJYB5sxBGHsA==

Debugger output:

=================================================================
==3989==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf60015bc at pc 0xf7a1e8be bp 0xff8a27f8 sp 0xff8a23c8
READ of size 16 at 0xf60015bc thread T0
    #0 0xf7a1e8bd  (/usr/lib32/libasan.so.4+0x778bd)
    #1 0xf7813a23  (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x118a23)
    #2 0xf781f05e in EVP_CIPHER_CTX_ctrl (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x12405e)
    #3 0x56659e62 in soter_sym_aead_decrypt_final src/soter/openssl/soter_sym.c:433
    #4 0x5664dcb9 in themis_auth_sym_plain_decrypt src/themis/sym_enc_message.c:109
    #5 0x5664dcb9 in themis_auth_sym_decrypt_message_ src/themis/sym_enc_message.c:332
    #6 0x5664dcb9 in themis_auth_sym_decrypt_message src/themis/sym_enc_message.c:439
    #7 0x566490ad in themis_secure_cell_decrypt_seal src/themis/secure_cell.c:92
    #8 0x56646c12 in main tools/afl/src/scell_seal_decrypt.c:99
    #9 0xf7537e80 in __libc_start_main (/lib/i386-linux-gnu/libc.so.6+0x18e80)
    #10 0x56647a82  (/home/user/project/build/afl/scell_seal_decrypt+0x3a82)

Address 0xf60015bc is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib32/libasan.so.4+0x778bd) 
Shadow bytes around the buggy address:
  0x3ec00260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00290: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x3ec002b0: fa fa fa fa fa fa fa[fa]fa fa fa fa fa fa fa fa
  0x3ec002c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002d0: fa fa fa fa 00 00 00 00 00 00 03 fa fa fa fa fa
  0x3ec002e0: 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
  0x3ec002f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==3989==ABORTING

Exited with code exit status 1


Failures are also stored in artifacts, example.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated (maybe later)
 Parsing bug is fixed and the build is not red","I guess manually inspect the failure and use our best judgement. I'd probably rerun the job, if the failure persists and is definitely not related to PR, they we might note the failure, approve the merge with it, and fix it later separately.

does fuzzer can save test data to some file? if so we can save it as test artifacts to reproduce it later on failures",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,579,2020-01-27T07:56:09Z,2020-03-05T12:31:38Z,2020-03-05T12:53:02Z,MERGED,True,192,19,5,https://github.com/ilammy,Exercise fuzzers during CI builds,16,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/579,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/579#issuecomment-578712070,"We have had some kind of a fuzzing framework for close to a year, but it did not get enough attention since only nobody cares about that. Let’s improve the situation a bit.


Make sure that fuzzers can be built with sanitizers. This is the most interesting case since sanitizers report bugs by crashing and AFL reacts to crashes. Building and running ASAN tests was a quest on its own.


Build and run fuzzers on CI. Every time. For 30 seconds each. Hopefully we’ll catch some low-hanging bugs with that, given a sufficient number of builds.


There is at least one known bug which is caught by fuzzers+sanitizers, so hopefully the build will fail this time and you can see the report.


Improve reporting and crash analysis tool so that they are more useful.


There are more implementation details in commit messages.

P.S. Yep, the build does fail right now.
fuzzing scell_seal_roundtrip...
afl-fuzz 2.52b by <lcamtuf@google.com>
[+] Looks like we're not running on a tty, so I'll be a bit less verbose.
[+] You have 36 CPU cores and 19 runnable tasks (utilization: 53%).
[+] Try parallel jobs - see /usr/share/doc/afl-doc/docs/parallel_fuzzing.txt.
[*] Checking CPU core loadout...
[+] Found a free CPU core, binding to #0.
[*] Checking core_pattern...
[*] Setting up output directories...
[+] Output directory exists but deemed OK to reuse.
[*] Deleting old session data...
[+] Output dir cleanup successful.
[*] Scanning 'tools/afl/input/scell_seal_roundtrip'...
[+] No auto-generated dictionary tokens to reuse.
[*] Creating hard links for all input files...
[*] Validating target binary...
[*] Attempting dry run with 'id:000000,orig:ok_short_message.dat'...
[*] Spinning up the fork server...
[+] All right - fork server is up.
    len = 30, map size = 314, exec speed = 3706 us
[+] All test cases processed.

[+] Here are some useful stats:

    Test case count : 1 favored, 0 variable, 1 total
       Bitmap range : 314 to 314 bits (average: 314.00 bits)
        Exec timing : 3706 to 3706 us (average: 3706 us)

[*] No -t option specified, so I'll use exec timeout of 20 ms.
[+] All set and ready to roll!
[*] Entering queue cycle 1.
[*] Fuzzing test case #0 (1 total, 0 uniq crashes found)...
[*] Fuzzing test case #1 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #3 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #4 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #6 (8 total, 0 uniq crashes found)...


+++ Testing aborted by user +++
[+] We're done here. Have a nice day!

see build/afl/output/scell_seal_roundtrip/2020-01-27_08-00-03 for results

Analyzing results...

# scell_seal_decrypt -- 2020-01-27_07-59-33

## id:000000 -- SIGABRT

Run:

    build/afl/scell_seal_decrypt build/afl/output/scell_seal_decrypt/2020-01-27_07-59-33/crashes/id:000000,sig:06,src:000000,op:flip32,pos:27

Input (base64):

AAAAA2tleQAAAAdjb250ZXh0AAAAMwABAUAM////7wAAAAcAAACbMpUEngYcUNl6
KWhBWxWP8Qp1AC4xdvnfM1NJYB5sxBGHsA==

Debugger output:

=================================================================
==3989==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf60015bc at pc 0xf7a1e8be bp 0xff8a27f8 sp 0xff8a23c8
READ of size 16 at 0xf60015bc thread T0
    #0 0xf7a1e8bd  (/usr/lib32/libasan.so.4+0x778bd)
    #1 0xf7813a23  (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x118a23)
    #2 0xf781f05e in EVP_CIPHER_CTX_ctrl (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x12405e)
    #3 0x56659e62 in soter_sym_aead_decrypt_final src/soter/openssl/soter_sym.c:433
    #4 0x5664dcb9 in themis_auth_sym_plain_decrypt src/themis/sym_enc_message.c:109
    #5 0x5664dcb9 in themis_auth_sym_decrypt_message_ src/themis/sym_enc_message.c:332
    #6 0x5664dcb9 in themis_auth_sym_decrypt_message src/themis/sym_enc_message.c:439
    #7 0x566490ad in themis_secure_cell_decrypt_seal src/themis/secure_cell.c:92
    #8 0x56646c12 in main tools/afl/src/scell_seal_decrypt.c:99
    #9 0xf7537e80 in __libc_start_main (/lib/i386-linux-gnu/libc.so.6+0x18e80)
    #10 0x56647a82  (/home/user/project/build/afl/scell_seal_decrypt+0x3a82)

Address 0xf60015bc is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib32/libasan.so.4+0x778bd) 
Shadow bytes around the buggy address:
  0x3ec00260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00290: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x3ec002b0: fa fa fa fa fa fa fa[fa]fa fa fa fa fa fa fa fa
  0x3ec002c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002d0: fa fa fa fa 00 00 00 00 00 00 03 fa fa fa fa fa
  0x3ec002e0: 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
  0x3ec002f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==3989==ABORTING

Exited with code exit status 1


Failures are also stored in artifacts, example.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated (maybe later)
 Parsing bug is fixed and the build is not red","does fuzzer can save test data to some file?

Yes. The results are saved in the build tree, along with all the intermediate data. We use this data to generate reports (which are dumped into build logs). There should be enough data in the logs to reproduce the crashes:

what mutation AFL applied (e.g., flipped 1 bit at offset 27)
name of the tool that failed
full input to the tool
backtrace & register data, if available
anything else printed by the sanitizer, usually pretty detailed description

We do not save the original report data since I thought all of the above should be sufficient. But it should be easy to store full reports on CircleCI as builds artifacts. Who's for it?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,579,2020-01-27T07:56:09Z,2020-03-05T12:31:38Z,2020-03-05T12:53:02Z,MERGED,True,192,19,5,https://github.com/ilammy,Exercise fuzzers during CI builds,16,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/579,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/579#issuecomment-578732135,"We have had some kind of a fuzzing framework for close to a year, but it did not get enough attention since only nobody cares about that. Let’s improve the situation a bit.


Make sure that fuzzers can be built with sanitizers. This is the most interesting case since sanitizers report bugs by crashing and AFL reacts to crashes. Building and running ASAN tests was a quest on its own.


Build and run fuzzers on CI. Every time. For 30 seconds each. Hopefully we’ll catch some low-hanging bugs with that, given a sufficient number of builds.


There is at least one known bug which is caught by fuzzers+sanitizers, so hopefully the build will fail this time and you can see the report.


Improve reporting and crash analysis tool so that they are more useful.


There are more implementation details in commit messages.

P.S. Yep, the build does fail right now.
fuzzing scell_seal_roundtrip...
afl-fuzz 2.52b by <lcamtuf@google.com>
[+] Looks like we're not running on a tty, so I'll be a bit less verbose.
[+] You have 36 CPU cores and 19 runnable tasks (utilization: 53%).
[+] Try parallel jobs - see /usr/share/doc/afl-doc/docs/parallel_fuzzing.txt.
[*] Checking CPU core loadout...
[+] Found a free CPU core, binding to #0.
[*] Checking core_pattern...
[*] Setting up output directories...
[+] Output directory exists but deemed OK to reuse.
[*] Deleting old session data...
[+] Output dir cleanup successful.
[*] Scanning 'tools/afl/input/scell_seal_roundtrip'...
[+] No auto-generated dictionary tokens to reuse.
[*] Creating hard links for all input files...
[*] Validating target binary...
[*] Attempting dry run with 'id:000000,orig:ok_short_message.dat'...
[*] Spinning up the fork server...
[+] All right - fork server is up.
    len = 30, map size = 314, exec speed = 3706 us
[+] All test cases processed.

[+] Here are some useful stats:

    Test case count : 1 favored, 0 variable, 1 total
       Bitmap range : 314 to 314 bits (average: 314.00 bits)
        Exec timing : 3706 to 3706 us (average: 3706 us)

[*] No -t option specified, so I'll use exec timeout of 20 ms.
[+] All set and ready to roll!
[*] Entering queue cycle 1.
[*] Fuzzing test case #0 (1 total, 0 uniq crashes found)...
[*] Fuzzing test case #1 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #3 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #4 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #6 (8 total, 0 uniq crashes found)...


+++ Testing aborted by user +++
[+] We're done here. Have a nice day!

see build/afl/output/scell_seal_roundtrip/2020-01-27_08-00-03 for results

Analyzing results...

# scell_seal_decrypt -- 2020-01-27_07-59-33

## id:000000 -- SIGABRT

Run:

    build/afl/scell_seal_decrypt build/afl/output/scell_seal_decrypt/2020-01-27_07-59-33/crashes/id:000000,sig:06,src:000000,op:flip32,pos:27

Input (base64):

AAAAA2tleQAAAAdjb250ZXh0AAAAMwABAUAM////7wAAAAcAAACbMpUEngYcUNl6
KWhBWxWP8Qp1AC4xdvnfM1NJYB5sxBGHsA==

Debugger output:

=================================================================
==3989==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf60015bc at pc 0xf7a1e8be bp 0xff8a27f8 sp 0xff8a23c8
READ of size 16 at 0xf60015bc thread T0
    #0 0xf7a1e8bd  (/usr/lib32/libasan.so.4+0x778bd)
    #1 0xf7813a23  (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x118a23)
    #2 0xf781f05e in EVP_CIPHER_CTX_ctrl (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x12405e)
    #3 0x56659e62 in soter_sym_aead_decrypt_final src/soter/openssl/soter_sym.c:433
    #4 0x5664dcb9 in themis_auth_sym_plain_decrypt src/themis/sym_enc_message.c:109
    #5 0x5664dcb9 in themis_auth_sym_decrypt_message_ src/themis/sym_enc_message.c:332
    #6 0x5664dcb9 in themis_auth_sym_decrypt_message src/themis/sym_enc_message.c:439
    #7 0x566490ad in themis_secure_cell_decrypt_seal src/themis/secure_cell.c:92
    #8 0x56646c12 in main tools/afl/src/scell_seal_decrypt.c:99
    #9 0xf7537e80 in __libc_start_main (/lib/i386-linux-gnu/libc.so.6+0x18e80)
    #10 0x56647a82  (/home/user/project/build/afl/scell_seal_decrypt+0x3a82)

Address 0xf60015bc is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib32/libasan.so.4+0x778bd) 
Shadow bytes around the buggy address:
  0x3ec00260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00290: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x3ec002b0: fa fa fa fa fa fa fa[fa]fa fa fa fa fa fa fa fa
  0x3ec002c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002d0: fa fa fa fa 00 00 00 00 00 00 03 fa fa fa fa fa
  0x3ec002e0: 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
  0x3ec002f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==3989==ABORTING

Exited with code exit status 1


Failures are also stored in artifacts, example.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated (maybe later)
 Parsing bug is fixed and the build is not red",Artifacts seem to work now.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,579,2020-01-27T07:56:09Z,2020-03-05T12:31:38Z,2020-03-05T12:53:02Z,MERGED,True,192,19,5,https://github.com/ilammy,Exercise fuzzers during CI builds,16,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/579,https://github.com/vixentael,7,https://github.com/cossacklabs/themis/pull/579#issuecomment-578735352,"We have had some kind of a fuzzing framework for close to a year, but it did not get enough attention since only nobody cares about that. Let’s improve the situation a bit.


Make sure that fuzzers can be built with sanitizers. This is the most interesting case since sanitizers report bugs by crashing and AFL reacts to crashes. Building and running ASAN tests was a quest on its own.


Build and run fuzzers on CI. Every time. For 30 seconds each. Hopefully we’ll catch some low-hanging bugs with that, given a sufficient number of builds.


There is at least one known bug which is caught by fuzzers+sanitizers, so hopefully the build will fail this time and you can see the report.


Improve reporting and crash analysis tool so that they are more useful.


There are more implementation details in commit messages.

P.S. Yep, the build does fail right now.
fuzzing scell_seal_roundtrip...
afl-fuzz 2.52b by <lcamtuf@google.com>
[+] Looks like we're not running on a tty, so I'll be a bit less verbose.
[+] You have 36 CPU cores and 19 runnable tasks (utilization: 53%).
[+] Try parallel jobs - see /usr/share/doc/afl-doc/docs/parallel_fuzzing.txt.
[*] Checking CPU core loadout...
[+] Found a free CPU core, binding to #0.
[*] Checking core_pattern...
[*] Setting up output directories...
[+] Output directory exists but deemed OK to reuse.
[*] Deleting old session data...
[+] Output dir cleanup successful.
[*] Scanning 'tools/afl/input/scell_seal_roundtrip'...
[+] No auto-generated dictionary tokens to reuse.
[*] Creating hard links for all input files...
[*] Validating target binary...
[*] Attempting dry run with 'id:000000,orig:ok_short_message.dat'...
[*] Spinning up the fork server...
[+] All right - fork server is up.
    len = 30, map size = 314, exec speed = 3706 us
[+] All test cases processed.

[+] Here are some useful stats:

    Test case count : 1 favored, 0 variable, 1 total
       Bitmap range : 314 to 314 bits (average: 314.00 bits)
        Exec timing : 3706 to 3706 us (average: 3706 us)

[*] No -t option specified, so I'll use exec timeout of 20 ms.
[+] All set and ready to roll!
[*] Entering queue cycle 1.
[*] Fuzzing test case #0 (1 total, 0 uniq crashes found)...
[*] Fuzzing test case #1 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #3 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #4 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #6 (8 total, 0 uniq crashes found)...


+++ Testing aborted by user +++
[+] We're done here. Have a nice day!

see build/afl/output/scell_seal_roundtrip/2020-01-27_08-00-03 for results

Analyzing results...

# scell_seal_decrypt -- 2020-01-27_07-59-33

## id:000000 -- SIGABRT

Run:

    build/afl/scell_seal_decrypt build/afl/output/scell_seal_decrypt/2020-01-27_07-59-33/crashes/id:000000,sig:06,src:000000,op:flip32,pos:27

Input (base64):

AAAAA2tleQAAAAdjb250ZXh0AAAAMwABAUAM////7wAAAAcAAACbMpUEngYcUNl6
KWhBWxWP8Qp1AC4xdvnfM1NJYB5sxBGHsA==

Debugger output:

=================================================================
==3989==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf60015bc at pc 0xf7a1e8be bp 0xff8a27f8 sp 0xff8a23c8
READ of size 16 at 0xf60015bc thread T0
    #0 0xf7a1e8bd  (/usr/lib32/libasan.so.4+0x778bd)
    #1 0xf7813a23  (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x118a23)
    #2 0xf781f05e in EVP_CIPHER_CTX_ctrl (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x12405e)
    #3 0x56659e62 in soter_sym_aead_decrypt_final src/soter/openssl/soter_sym.c:433
    #4 0x5664dcb9 in themis_auth_sym_plain_decrypt src/themis/sym_enc_message.c:109
    #5 0x5664dcb9 in themis_auth_sym_decrypt_message_ src/themis/sym_enc_message.c:332
    #6 0x5664dcb9 in themis_auth_sym_decrypt_message src/themis/sym_enc_message.c:439
    #7 0x566490ad in themis_secure_cell_decrypt_seal src/themis/secure_cell.c:92
    #8 0x56646c12 in main tools/afl/src/scell_seal_decrypt.c:99
    #9 0xf7537e80 in __libc_start_main (/lib/i386-linux-gnu/libc.so.6+0x18e80)
    #10 0x56647a82  (/home/user/project/build/afl/scell_seal_decrypt+0x3a82)

Address 0xf60015bc is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib32/libasan.so.4+0x778bd) 
Shadow bytes around the buggy address:
  0x3ec00260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00290: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x3ec002b0: fa fa fa fa fa fa fa[fa]fa fa fa fa fa fa fa fa
  0x3ec002c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002d0: fa fa fa fa 00 00 00 00 00 00 03 fa fa fa fa fa
  0x3ec002e0: 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
  0x3ec002f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==3989==ABORTING

Exited with code exit status 1


Failures are also stored in artifacts, example.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated (maybe later)
 Parsing bug is fixed and the build is not red","In my perfect world (🦄) we'd have some artifact (logs in file, result of AFL) that we can grab from CI and post into internal issue tracker. So, smth that can be downloaded and attached.
Artifacts should work i think",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,579,2020-01-27T07:56:09Z,2020-03-05T12:31:38Z,2020-03-05T12:53:02Z,MERGED,True,192,19,5,https://github.com/ilammy,Exercise fuzzers during CI builds,16,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/579,https://github.com/ilammy,8,https://github.com/cossacklabs/themis/pull/579#issuecomment-585397695,"We have had some kind of a fuzzing framework for close to a year, but it did not get enough attention since only nobody cares about that. Let’s improve the situation a bit.


Make sure that fuzzers can be built with sanitizers. This is the most interesting case since sanitizers report bugs by crashing and AFL reacts to crashes. Building and running ASAN tests was a quest on its own.


Build and run fuzzers on CI. Every time. For 30 seconds each. Hopefully we’ll catch some low-hanging bugs with that, given a sufficient number of builds.


There is at least one known bug which is caught by fuzzers+sanitizers, so hopefully the build will fail this time and you can see the report.


Improve reporting and crash analysis tool so that they are more useful.


There are more implementation details in commit messages.

P.S. Yep, the build does fail right now.
fuzzing scell_seal_roundtrip...
afl-fuzz 2.52b by <lcamtuf@google.com>
[+] Looks like we're not running on a tty, so I'll be a bit less verbose.
[+] You have 36 CPU cores and 19 runnable tasks (utilization: 53%).
[+] Try parallel jobs - see /usr/share/doc/afl-doc/docs/parallel_fuzzing.txt.
[*] Checking CPU core loadout...
[+] Found a free CPU core, binding to #0.
[*] Checking core_pattern...
[*] Setting up output directories...
[+] Output directory exists but deemed OK to reuse.
[*] Deleting old session data...
[+] Output dir cleanup successful.
[*] Scanning 'tools/afl/input/scell_seal_roundtrip'...
[+] No auto-generated dictionary tokens to reuse.
[*] Creating hard links for all input files...
[*] Validating target binary...
[*] Attempting dry run with 'id:000000,orig:ok_short_message.dat'...
[*] Spinning up the fork server...
[+] All right - fork server is up.
    len = 30, map size = 314, exec speed = 3706 us
[+] All test cases processed.

[+] Here are some useful stats:

    Test case count : 1 favored, 0 variable, 1 total
       Bitmap range : 314 to 314 bits (average: 314.00 bits)
        Exec timing : 3706 to 3706 us (average: 3706 us)

[*] No -t option specified, so I'll use exec timeout of 20 ms.
[+] All set and ready to roll!
[*] Entering queue cycle 1.
[*] Fuzzing test case #0 (1 total, 0 uniq crashes found)...
[*] Fuzzing test case #1 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #3 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #4 (8 total, 0 uniq crashes found)...
[*] Fuzzing test case #6 (8 total, 0 uniq crashes found)...


+++ Testing aborted by user +++
[+] We're done here. Have a nice day!

see build/afl/output/scell_seal_roundtrip/2020-01-27_08-00-03 for results

Analyzing results...

# scell_seal_decrypt -- 2020-01-27_07-59-33

## id:000000 -- SIGABRT

Run:

    build/afl/scell_seal_decrypt build/afl/output/scell_seal_decrypt/2020-01-27_07-59-33/crashes/id:000000,sig:06,src:000000,op:flip32,pos:27

Input (base64):

AAAAA2tleQAAAAdjb250ZXh0AAAAMwABAUAM////7wAAAAcAAACbMpUEngYcUNl6
KWhBWxWP8Qp1AC4xdvnfM1NJYB5sxBGHsA==

Debugger output:

=================================================================
==3989==ERROR: AddressSanitizer: heap-buffer-overflow on address 0xf60015bc at pc 0xf7a1e8be bp 0xff8a27f8 sp 0xff8a23c8
READ of size 16 at 0xf60015bc thread T0
    #0 0xf7a1e8bd  (/usr/lib32/libasan.so.4+0x778bd)
    #1 0xf7813a23  (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x118a23)
    #2 0xf781f05e in EVP_CIPHER_CTX_ctrl (/usr/lib/i386-linux-gnu/libcrypto.so.1.1+0x12405e)
    #3 0x56659e62 in soter_sym_aead_decrypt_final src/soter/openssl/soter_sym.c:433
    #4 0x5664dcb9 in themis_auth_sym_plain_decrypt src/themis/sym_enc_message.c:109
    #5 0x5664dcb9 in themis_auth_sym_decrypt_message_ src/themis/sym_enc_message.c:332
    #6 0x5664dcb9 in themis_auth_sym_decrypt_message src/themis/sym_enc_message.c:439
    #7 0x566490ad in themis_secure_cell_decrypt_seal src/themis/secure_cell.c:92
    #8 0x56646c12 in main tools/afl/src/scell_seal_decrypt.c:99
    #9 0xf7537e80 in __libc_start_main (/lib/i386-linux-gnu/libc.so.6+0x18e80)
    #10 0x56647a82  (/home/user/project/build/afl/scell_seal_decrypt+0x3a82)

Address 0xf60015bc is a wild pointer.
SUMMARY: AddressSanitizer: heap-buffer-overflow (/usr/lib32/libasan.so.4+0x778bd) 
Shadow bytes around the buggy address:
  0x3ec00260: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00270: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00290: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
=>0x3ec002b0: fa fa fa fa fa fa fa[fa]fa fa fa fa fa fa fa fa
  0x3ec002c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec002d0: fa fa fa fa 00 00 00 00 00 00 03 fa fa fa fa fa
  0x3ec002e0: 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
  0x3ec002f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x3ec00300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==3989==ABORTING

Exited with code exit status 1


Failures are also stored in artifacts, example.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated (maybe later)
 Parsing bug is fixed and the build is not red","PR #592 contains fixes which should resolve issues found by AFL in this PR. Once that is merged, master should be merged into this PR and the build is expected to go green.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,580,2020-01-27T08:14:37Z,2020-01-30T14:55:37Z,2020-01-30T14:55:38Z,MERGED,True,388,0,8,https://github.com/ilammy,Automated Themis Core benchmarks,6,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/580,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/580,"Exactly what it says on the tin.
Let's add some reproducible, verifiable, and automatable benchmarks for Themis performance. We are using Criterion.rs – a framework in Rust – but since C is easily callable from Rust, it's not much an issue to use that framework for accurately benchmarking C code. And I don't have to reinvent the wheel and build a benchmarking harness myself as it is usually done in C/C++ world.
Currently we cover Secure Cell in Seal mode with master key. More benches will come in later, this is only an example and a primer. We exercise both encryption and decryption code paths. The data does not really matter so we use whatever is easy to get. Message size comparison confirms that encryption and decryption have roughly the same cost and indeed have linear complexity.
Also, run benchmarks for every build, at least to check that they are still buildable. Run some of them for a modest amount of time and attach benchmark reports to builds.
It would be nice to compare base branch with PR branch to see if there are any changes in that. However, with current approach branch switching is kinda involved so we'll add that later.
You are also welcome to run them on your machines and provide feedback on UX.
Example of benchmark report.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (damn yes they are)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated","Exactly what it says on the tin.
Let's add some reproducible, verifiable, and automatable benchmarks for Themis performance. We are using Criterion.rs – a framework in Rust – but since C is easily callable from Rust, it's not much an issue to use that framework for accurately benchmarking C code. And I don't have to reinvent the wheel and build a benchmarking harness myself as it is usually done in C/C++ world.
Currently we cover Secure Cell in Seal mode with master key. More benches will come in later, this is only an example and a primer. We exercise both encryption and decryption code paths. The data does not really matter so we use whatever is easy to get. Message size comparison confirms that encryption and decryption have roughly the same cost and indeed have linear complexity.
Also, run benchmarks for every build, at least to check that they are still buildable. Run some of them for a modest amount of time and attach benchmark reports to builds.
It would be nice to compare base branch with PR branch to see if there are any changes in that. However, with current approach branch switching is kinda involved so we'll add that later.
You are also welcome to run them on your machines and provide feedback on UX.
Example of benchmark report.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (damn yes they are)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,581,2020-01-27T20:44:27Z,2020-01-28T11:57:22Z,2020-01-28T11:57:23Z,MERGED,True,66,58,3,https://github.com/karenswry,Update readme for iOS and Rust wrappers,7,"['docs :books:', 'W-SwiftThemis :large_orange_diamond:', 'W-RustThemis :crab:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/581,https://github.com/karenswry,1,https://github.com/cossacklabs/themis/pull/581,"Edited and expanded the Swift and Obj C example readmes according to https://ph.cossacklabs.com/T1430.
Note: The screenshots are the same as before, as pre-agreed. Once the more urgent tasks are out of the way, I'll change the screenshots, too.","Edited and expanded the Swift and Obj C example readmes according to https://ph.cossacklabs.com/T1430.
Note: The screenshots are the same as before, as pre-agreed. Once the more urgent tasks are out of the way, I'll change the screenshots, too.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,581,2020-01-27T20:44:27Z,2020-01-28T11:57:22Z,2020-01-28T11:57:23Z,MERGED,True,66,58,3,https://github.com/karenswry,Update readme for iOS and Rust wrappers,7,"['docs :books:', 'W-SwiftThemis :large_orange_diamond:', 'W-RustThemis :crab:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/581,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/581#issuecomment-579204299,"Edited and expanded the Swift and Obj C example readmes according to https://ph.cossacklabs.com/T1430.
Note: The screenshots are the same as before, as pre-agreed. Once the more urgent tasks are out of the way, I'll change the screenshots, too.","Thanks for update @ilammy!
Please merge this PR to master when you're ready",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,582,2020-01-28T12:06:16Z,2020-02-12T21:41:28Z,2020-02-12T21:41:55Z,MERGED,True,172,1,4,https://github.com/ilammy,Benchmark passphrase API of Secure Cell,1,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/582,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/582,"Some benchmarks for passphrase API added in #577.
Right now we don't have support for this API in RustThemis so we call C code directly in decryption benchmark to prepare the input data.
Note that due to the nature of the passphrase API – KDF makes repeated invocations purposefully slow – the benchmarks are abysmally slow too and we have to cut down the sample sizes to execute them in a reasonable time frame. And we don't need to have much variety in the message size since execution time is completely dominated by KDF costs until we get to gigabyte-sized messages.
There is quite a few “inheritance” in the code from master key benchmarks but I'll leave it around for now until we are sure what utilities can be shared. Plus, Criterion has issues with reusing code so we might need to introduce additional helper crates for that which I would like to avoid doing.

🚧 This branch depends on #577 and #580 so it has to wait before they are merged. To get better diffs the PR is targeted to a temporary branch which has to be removed before this PR is merged.
Once dependencies are merged, do the following:

 rebase ilammy:kdf/benchmarks onto cossacklabs:master
 retarget this PR to master
 delete ilammy/kdf+benchmarks

Follow the order. If the base branch is deleted early then this PR might get autoclosed.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed","Some benchmarks for passphrase API added in #577.
Right now we don't have support for this API in RustThemis so we call C code directly in decryption benchmark to prepare the input data.
Note that due to the nature of the passphrase API – KDF makes repeated invocations purposefully slow – the benchmarks are abysmally slow too and we have to cut down the sample sizes to execute them in a reasonable time frame. And we don't need to have much variety in the message size since execution time is completely dominated by KDF costs until we get to gigabyte-sized messages.
There is quite a few “inheritance” in the code from master key benchmarks but I'll leave it around for now until we are sure what utilities can be shared. Plus, Criterion has issues with reusing code so we might need to introduce additional helper crates for that which I would like to avoid doing.

🚧 This branch depends on #577 and #580 so it has to wait before they are merged. To get better diffs the PR is targeted to a temporary branch which has to be removed before this PR is merged.
Once dependencies are merged, do the following:

 rebase ilammy:kdf/benchmarks onto cossacklabs:master
 retarget this PR to master
 delete ilammy/kdf+benchmarks

Follow the order. If the base branch is deleted early then this PR might get autoclosed.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,582,2020-01-28T12:06:16Z,2020-02-12T21:41:28Z,2020-02-12T21:41:55Z,MERGED,True,172,1,4,https://github.com/ilammy,Benchmark passphrase API of Secure Cell,1,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/582,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/582#issuecomment-579785002,"Some benchmarks for passphrase API added in #577.
Right now we don't have support for this API in RustThemis so we call C code directly in decryption benchmark to prepare the input data.
Note that due to the nature of the passphrase API – KDF makes repeated invocations purposefully slow – the benchmarks are abysmally slow too and we have to cut down the sample sizes to execute them in a reasonable time frame. And we don't need to have much variety in the message size since execution time is completely dominated by KDF costs until we get to gigabyte-sized messages.
There is quite a few “inheritance” in the code from master key benchmarks but I'll leave it around for now until we are sure what utilities can be shared. Plus, Criterion has issues with reusing code so we might need to introduce additional helper crates for that which I would like to avoid doing.

🚧 This branch depends on #577 and #580 so it has to wait before they are merged. To get better diffs the PR is targeted to a temporary branch which has to be removed before this PR is merged.
Once dependencies are merged, do the following:

 rebase ilammy:kdf/benchmarks onto cossacklabs:master
 retarget this PR to master
 delete ilammy/kdf+benchmarks

Follow the order. If the base branch is deleted early then this PR might get autoclosed.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed","Passphrase interface is probably rather slow 🤔

Indeed it is.
Benchmarks on my Linux and macOS laptops show that with master-key API ancillary expenses (function calls, checks, memory zeroing, etc.) dominate actual encryption until you're encrypting around 1 KB of data, then throughput raises and tapers off at around 2 GB/s when encrypting more than 0.5 MB at once. Decryption shows similar numbers. To put it short, 3.5 microseconds to encrypt 32 bytes of a master key with another master key.
Passphrase API has enormous (relatively speaking) fixed costs of KDF – approx. 120 milliseconds for our current 200k of PBKDF2 iterations – so it takes around 100+ MB of data for the passphrase API to show somewhat comparable throughput. Well, it‘s not like these APIs have comparable use cases in the first place... (And Secure Cell is not designed for streaming encryption, though Context Imprint mode should be capable of supporting it.)
CircleCI shows more or less similar numbers.
That is, KDF adds around 15 bits of “effective entropy” to user passphrases, which is... probably not bad, considering that passphrase users are unlikely to follow NIST advice (80 bits) and this API is probably going to be used with 4-digit PINs (13 bits) and 10-character or 4-word passwords (~30 bits). Master key API is always better when you don't have to keep the secret in your head (256 bits).",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,582,2020-01-28T12:06:16Z,2020-02-12T21:41:28Z,2020-02-12T21:41:55Z,MERGED,True,172,1,4,https://github.com/ilammy,Benchmark passphrase API of Secure Cell,1,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/582,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/582#issuecomment-585399129,"Some benchmarks for passphrase API added in #577.
Right now we don't have support for this API in RustThemis so we call C code directly in decryption benchmark to prepare the input data.
Note that due to the nature of the passphrase API – KDF makes repeated invocations purposefully slow – the benchmarks are abysmally slow too and we have to cut down the sample sizes to execute them in a reasonable time frame. And we don't need to have much variety in the message size since execution time is completely dominated by KDF costs until we get to gigabyte-sized messages.
There is quite a few “inheritance” in the code from master key benchmarks but I'll leave it around for now until we are sure what utilities can be shared. Plus, Criterion has issues with reusing code so we might need to introduce additional helper crates for that which I would like to avoid doing.

🚧 This branch depends on #577 and #580 so it has to wait before they are merged. To get better diffs the PR is targeted to a temporary branch which has to be removed before this PR is merged.
Once dependencies are merged, do the following:

 rebase ilammy:kdf/benchmarks onto cossacklabs:master
 retarget this PR to master
 delete ilammy/kdf+benchmarks

Follow the order. If the base branch is deleted early then this PR might get autoclosed.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed",Dependencies have been merged. Rebased and retargeted onto master with no changes.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,583,2020-01-29T14:15:40Z,2020-03-05T16:26:02Z,2020-03-05T16:26:09Z,MERGED,True,543,21,12,https://github.com/ilammy,Fuzz passphrase API of Secure Cell,6,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/583,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/583,"This PR adds fuzzers for new Secure Cell API added in #577, and fixes implementation bugs found by those fuzzers.
Currently passphrase API supports only Seal mode so we add tools for that only (just like master key API is right now). In fact, the tools are more or less copypasta of master key tools.
Additionally, I have found that using the default 200,000 PBKDF2 iterations provides very unfulfilling fuzzing experience of around 7 executions per second. Lowering iteration count to 10 allows AFL to run 800 attempts every second which results in much more reasonable time until interesting crashes. Thus I have added a compile-time switch to adjust the iteration count. It is used only for fuzzing builds and is not documented.
Now, on to the bugs...

Validate key length on decryption
This is the first crash found by AFL. Decryption code fails to validate key length encoded in algorithm field of Secure Cell header and just proceeds to use it, assuming that it’s one of 128, 192, 256 bits.
Maximum value allowed by data format is 4096 bits (512 bytes), but the code allocates only 32 bytes for the derived key. Longer keys will cause a buffer overflow which allows an attacker to overwrite return address stored on the stack and to theoretically execute arbitrary code. Practically, this can be used for denial of service by exploiting the much more likely outcome – crash due to a segmentation fault.
Fix the issue by validating the key length and allowing only values produced by Themis: 128, 192, or 256 bits.


Avoid unsigned overflow in length computations
This is much more insidious one. Turns out that code like this:
length += sizeof(hdr->auth_tag_length) + hdr->auth_tag_length;
can cause an unsigned overflow on 32-bit systems which later leads to buffer overflow caused by incorrect pointer computations. To handle that we ensure that length never overflows by using a wider type for it (uint64_t).
Another fun fact is that code like this
length += hdr->iv_length + hdr->auth_tag_length + hdr->kdf_context_length;
can also overflow of all those fields are unsigned 32-bit (and they are). And on 32-bit platforms
length += sizeof(hdr->auth_tag_length) + hdr->auth_tag_length;
can overflow too because size_t is 32-bit.
We avoid intermediate overflows by spelling out additions:
length += hdr->iv_length;
length += hdr->auth_tag_length;
length += hdr->kdf_context_length;
// u64 += u32
which causes the compiler to generate correct code.
Bad news here is that unsigned integer overflow is fully defined in C and this issue is normally not caught by sanitizers, static analyzers, etc. Well... let's hope that at least this piece of code is now free from such bugs.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are updated","This PR adds fuzzers for new Secure Cell API added in #577, and fixes implementation bugs found by those fuzzers.
Currently passphrase API supports only Seal mode so we add tools for that only (just like master key API is right now). In fact, the tools are more or less copypasta of master key tools.
Additionally, I have found that using the default 200,000 PBKDF2 iterations provides very unfulfilling fuzzing experience of around 7 executions per second. Lowering iteration count to 10 allows AFL to run 800 attempts every second which results in much more reasonable time until interesting crashes. Thus I have added a compile-time switch to adjust the iteration count. It is used only for fuzzing builds and is not documented.
Now, on to the bugs...

Validate key length on decryption
This is the first crash found by AFL. Decryption code fails to validate key length encoded in algorithm field of Secure Cell header and just proceeds to use it, assuming that it’s one of 128, 192, 256 bits.
Maximum value allowed by data format is 4096 bits (512 bytes), but the code allocates only 32 bytes for the derived key. Longer keys will cause a buffer overflow which allows an attacker to overwrite return address stored on the stack and to theoretically execute arbitrary code. Practically, this can be used for denial of service by exploiting the much more likely outcome – crash due to a segmentation fault.
Fix the issue by validating the key length and allowing only values produced by Themis: 128, 192, or 256 bits.


Avoid unsigned overflow in length computations
This is much more insidious one. Turns out that code like this:
length += sizeof(hdr->auth_tag_length) + hdr->auth_tag_length;
can cause an unsigned overflow on 32-bit systems which later leads to buffer overflow caused by incorrect pointer computations. To handle that we ensure that length never overflows by using a wider type for it (uint64_t).
Another fun fact is that code like this
length += hdr->iv_length + hdr->auth_tag_length + hdr->kdf_context_length;
can also overflow of all those fields are unsigned 32-bit (and they are). And on 32-bit platforms
length += sizeof(hdr->auth_tag_length) + hdr->auth_tag_length;
can overflow too because size_t is 32-bit.
We avoid intermediate overflows by spelling out additions:
length += hdr->iv_length;
length += hdr->auth_tag_length;
length += hdr->kdf_context_length;
// u64 += u32
which causes the compiler to generate correct code.
Bad news here is that unsigned integer overflow is fully defined in C and this issue is normally not caught by sanitizers, static analyzers, etc. Well... let's hope that at least this piece of code is now free from such bugs.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,584,2020-01-29T18:48:24Z,2020-02-03T16:16:30Z,2020-02-12T19:54:45Z,MERGED,True,22,6,2,https://github.com/ilammy,Wipe partial PRNG output,1,"['core', 'C-BoringSSL', 'C-OpenSSL']",https://github.com/cossacklabs/themis/pull/584,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/584,"While this is only a theoretically possible attack vector, let's make sure that we are not susceptible to it if it ever becomes practical.
If RAND_bytes() returns an error, wipe the output buffer clean so that none of the partial output is available to the caller, thus avoiding any possible PRNG state leaks and leaving highly conspicuous zeros if the caller does not check for soter_rand() success.
For BoringSSL this is excessive because BoringSSL aborts the process on PRNG failures. However, OpenSSL's built-in PRNG can make partial writes into the buffer in case of failure.
Note that normally PRNG should not fail mid-flight. It's either completely unusable because your system and/or OpenSSL is broken, or it is able to produce arbitrary number of pseudorandom bytes. There are special cases like very early boot stages on Linux, but that behavior depends on whatever OpenSSL does in RAND_bytes(), and that's... complicated. Just know that it may fail on some systems.
(I'm cleaning up some old branches of mine. This paranoia fit was inspired by this thread.)
Checklist

 Change is covered by automated tests
 Benchmark results are attached (error path, don't care)
 The coding guidelines are followed","While this is only a theoretically possible attack vector, let's make sure that we are not susceptible to it if it ever becomes practical.
If RAND_bytes() returns an error, wipe the output buffer clean so that none of the partial output is available to the caller, thus avoiding any possible PRNG state leaks and leaving highly conspicuous zeros if the caller does not check for soter_rand() success.
For BoringSSL this is excessive because BoringSSL aborts the process on PRNG failures. However, OpenSSL's built-in PRNG can make partial writes into the buffer in case of failure.
Note that normally PRNG should not fail mid-flight. It's either completely unusable because your system and/or OpenSSL is broken, or it is able to produce arbitrary number of pseudorandom bytes. There are special cases like very early boot stages on Linux, but that behavior depends on whatever OpenSSL does in RAND_bytes(), and that's... complicated. Just know that it may fail on some systems.
(I'm cleaning up some old branches of mine. This paranoia fit was inspired by this thread.)
Checklist

 Change is covered by automated tests
 Benchmark results are attached (error path, don't care)
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,585,2020-01-30T13:08:58Z,2020-02-03T16:17:04Z,2020-02-03T16:17:05Z,MERGED,True,370,20,4,https://github.com/ilammy,Cleanup and test Soter KDF,5,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/585,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/585,"I've just wondered into soter_kdf.c file to check whether soter_kdf() does soter_wipe() on whatever it needs to wipe. And I hit a jackpot: there were like at least three ways to cause a segfault with this function by accidentally passing it invalid arguments. This is unacceptable.
Equip soter_kdf() with proper parameter validation. While we're here, improve documentation, simplify some computations and wipe other stuff that we might leave on the stack.
Further inspection has shown that soter_kdf() has no tests and no test vectors. Attempt to add tests have shown that our function does not strictly follow RFC 6189 (but follows NIST SP 800-108), so stop claiming that in documentation and mark the differences in source code. New test vectors take this difference into account.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation","I've just wondered into soter_kdf.c file to check whether soter_kdf() does soter_wipe() on whatever it needs to wipe. And I hit a jackpot: there were like at least three ways to cause a segfault with this function by accidentally passing it invalid arguments. This is unacceptable.
Equip soter_kdf() with proper parameter validation. While we're here, improve documentation, simplify some computations and wipe other stuff that we might leave on the stack.
Further inspection has shown that soter_kdf() has no tests and no test vectors. Attempt to add tests have shown that our function does not strictly follow RFC 6189 (but follows NIST SP 800-108), so stop claiming that in documentation and mark the differences in source code. New test vectors take this difference into account.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,586,2020-01-30T13:39:33Z,2020-02-03T16:17:41Z,2020-02-12T19:54:46Z,MERGED,True,66,34,2,https://github.com/ilammy,Wipe output on failure: key generation,3,"['core', 'C-OpenSSL']",https://github.com/cossacklabs/themis/pull/586,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/586,"More wiping 🧹
Refactor high-level EC/RSA key generation functions in Themis so that they are easier to follow and it is easier to insert additional actions into the error path. Then insert soter_wipe() for already exported public key if private key export fails or vice versa.
While we're here, I've noticed and fixed clang-tidy complaints about mismatched integer types in OpenSSL code for RSA key generation. (BoringSSL code is fine, it already uses correct types.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","More wiping 🧹
Refactor high-level EC/RSA key generation functions in Themis so that they are easier to follow and it is easier to insert additional actions into the error path. Then insert soter_wipe() for already exported public key if private key export fails or vice versa.
While we're here, I've noticed and fixed clang-tidy complaints about mismatched integer types in OpenSSL code for RSA key generation. (BoringSSL code is fine, it already uses correct types.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,586,2020-01-30T13:39:33Z,2020-02-03T16:17:41Z,2020-02-12T19:54:46Z,MERGED,True,66,34,2,https://github.com/ilammy,Wipe output on failure: key generation,3,"['core', 'C-OpenSSL']",https://github.com/cossacklabs/themis/pull/586,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/586#issuecomment-581454665,"More wiping 🧹
Refactor high-level EC/RSA key generation functions in Themis so that they are easier to follow and it is easier to insert additional actions into the error path. Then insert soter_wipe() for already exported public key if private key export fails or vice versa.
While we're here, I've noticed and fixed clang-tidy complaints about mismatched integer types in OpenSSL code for RSA key generation. (BoringSSL code is fine, it already uses correct types.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","@vixentael,

Looks suspicious

Which parts, exactly? I can elaborate if you wish.
I do need to know this so that I can hide backdoors better next time! /s",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,587,2020-01-30T21:40:52Z,2020-01-31T22:52:35Z,2020-02-05T22:57:25Z,MERGED,True,6,6,4,https://github.com/karenswry,Update package descriptions and some links in docs,10,"['docs :books:', 'W-RbThemis :diamonds:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/587,https://github.com/karenswry,1,https://github.com/cossacklabs/themis/pull/587,"Ruby gems and iOS pods-related changes + a touch of T1345 (slight changes in bug report and pull request templates).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are updated (in case of API changes)","Ruby gems and iOS pods-related changes + a touch of T1345 (slight changes in bug report and pull request templates).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are updated (in case of API changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,587,2020-01-30T21:40:52Z,2020-01-31T22:52:35Z,2020-02-05T22:57:25Z,MERGED,True,6,6,4,https://github.com/karenswry,Update package descriptions and some links in docs,10,"['docs :books:', 'W-RbThemis :diamonds:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/587,https://github.com/karenswry,2,https://github.com/cossacklabs/themis/pull/587#issuecomment-580528581,"Ruby gems and iOS pods-related changes + a touch of T1345 (slight changes in bug report and pull request templates).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are updated (in case of API changes)","Thank you for the review! Hmm, I could be biased, too as I keep seeing the word ""wrapper"" with the very same meaning that we attach to it, across numerous unrelated projects.
And yes, introducing minor doc updates without giving everyone this much trouble would be super cool. But we use what we have.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,587,2020-01-30T21:40:52Z,2020-01-31T22:52:35Z,2020-02-05T22:57:25Z,MERGED,True,6,6,4,https://github.com/karenswry,Update package descriptions and some links in docs,10,"['docs :books:', 'W-RbThemis :diamonds:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/587,https://github.com/karenswry,3,https://github.com/cossacklabs/themis/pull/587#issuecomment-580943376,"Ruby gems and iOS pods-related changes + a touch of T1345 (slight changes in bug report and pull request templates).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are updated (in case of API changes)",Done here. Please merge.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,588,2020-01-31T21:45:46Z,2020-02-27T20:02:13Z,2020-03-05T12:53:03Z,MERGED,True,2632,31,18,https://github.com/ilammy,Secure Cell passphrase API: ThemisPP,10,['W-ThemisPP :crossed_swords:'],https://github.com/cossacklabs/themis/pull/588,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/588,"Add support of Secure Cell passphrase API to ThemisPP. The API draft is described in RFC 3.1.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell:
#include <themispp/secure_cell.hpp>

auto cell = themispp::secure_cell_seal_with_passphrase(""secret"");

uint8_t message[] = ""precious message"";

std::vector<uint8_t> encrypted = cell.encrypt(message);
std::vector<uint8_t> decrypted = cell.decrypt(encrypted);

EXPECT_EQ(decrypted, message);
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
#include <themispp/secure_keygen.hpp>

// Get a new key if you don't have one already:
std::vector<uint8_t> master_key = themispp::gen_sym_key();
// Or use an existing value that you store somewhere:
std::vector<uint8_t> master_key = base64::decode(""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U="");

auto cell = themispp::secure_cell_seal_with_key(master_key);

uint8_t message[] = ""precious message"";

std::vector<uint8_t> encrypted = cell.encrypt(message);
std::vector<uint8_t> decrypted = cell.decrypt(encrypted);

EXPECT_EQ(decrypted, message);

⚠️ NOTE: themispp::secure_cell_seal_t types are deprecated. Please use less ambiguous themispp::secure_cell_seal_with_key instead.

Other breaking changes
New Token Protect API
Previously Token Protect API was used like this:
auto cell = themispp::secure_cell_token_protect_t(master_key);

auto encrypted = cell.encrypt(message);
auto token = cell.get_token();

// ...

cell.set_token(token);
auto decrypted = cell.decrypt(encrypted);
This API was not thread-safe and prone to mistakes such as forgetting to set (or update) the authentication token before decryption.
New API provides much simpler and safer interface:
auto cell = themispp::secure_cell_token_protect_with_key(master_key);

// Since C++17:
auto [encrypted, token] = cell.encrypt(message);

// Since C++11:
std::vector<uint8_t> encrypted, token;
std::tie(encrypted, token) = cell.encrypt(message);

// C++03:
typedef themispp::secure_cell_token_protect_with_key::output_pair token_pair;
token_pair result = cell.encrypt(message);
// Access result.encrypted() and result.token()

// ...

auto decrypted = cell.decrypt(encrypted, token);
Note that APIs are incompatible and you will need to update encryption/decryption call sites during migration. Simply renaming Secure Cell classes will not be enough.
Iterator pair support
New API does not support iterator pairs (aka ranges or spans) directly for maintainability reasons. Avoiding direct iterator pair support allows us to have much fewer method overloads and keeps the code signficantly easier to follow.
If you have been using iterator pairs:
auto cell = themispp::secure_cell_seal_t(key_begin, key_end);
then you need to wrap them in themispp::input_buffer() with new API:
auto cell = themispp::secure_cell_seal_with_key(themispp::input_buffer(key_begin, key_end));
This is actual for all Secure Cell modes and all methods (construction, encryption, decryption).
Technical notes
As the saying goes, no battle plan survives contact with the enemy and this case is no exception. The implementation looks a little bit different from what is prescribed by the RFCs. However, user API says the same. Well, in fact, I consider C++ as a language to be hostile actor so this is more or less expected outcome.
This pull request is the most complex, the most unreadable, ridden with bugs and undefined behavior, and unpleasant in general of them all. In short, your typical C++ code. I started with C++ to run away from it as fast possible (as a side effect, it should run as fast as possible too).
I do not expect you to review it quickly. Take your time. Just open it up when you want to have your fix of suffering for the day or something.

Rant full of profanity
Why do you have to write all those input_buffer again and again – or pull in Boost monsters to avoid copying the code – instead of simply saying impl AsRef<[u8]>? *weeps in Rust*
Why do you have to have a PhD to write generic library code in C++? And it’s not PhD in math as you‘d probably need for Haskell. A PhD in law and criminal psychopathology will be much more appropriate here.
This is what happens to a language if a committee starts piling features onto features without ever deprecating anything. And in case your opponent attempts a counterargument you simply need to throw you hands up in the air and repeat “...but backwards compatibility!” and “undefined behavior!” until they go away.
Bjarne said that “there are two kinds of languages: the ones people complain about and the ones nobody uses”. So apparently they decided to design a language as bitchworthy as possible to get the adoption as high as C++ has.
But at least I‘m happy with this code. I really am. This is probably some kind of a Stockholm syndrome. Like, ‘clever’ languages like C++ reward ‘clever’ code. You get an immense sense of accomplishment once your tests actually compile and work the way you want to. This is where ‘boring’ languages like, say, Go or Java are different. C++ rewards you for writing clever, beautiful code. The only moment a program in Go is going to reward you is when the damn code does what it‘s supposed to be doing. Unfulfilling, boring, ugly as hell, but that‘s what people need – working code – as opposed to beautiful code that pleases the compiler. I‘m sorry I‘m weak before the machines but that‘s how it is.
I hope I don‘t have to touch this code again with a three-meter pole for the next year.

Whew! I feel a little bit better. Let’s do business now...
There‘s like 2.6k lines of code here. A significant part of them is documentation comments, copypasta in tests, dumb glue FFI code to interface with Themis Core, and a whole bunch of C++ magic to make all this work somehow. You‘ll probably have a better code review experience if you walk through it commit by commit.
Organizational notes
🚧 This branch depends on #577 so it has to wait before it is merged. To get better diffs the PR is targeted to a temporary branch which has to be removed before this PR is merged.
Once dependencies are merged, do the following:

 rebase ilammy:kdf/c++ onto cossacklabs:master
 retarget this PR to master
 delete ilammy/kdf/core

Follow the order. If the base branch is deleted early then this PR might get autoclosed.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (pls no, I don‘t want to bench wrappers this month)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated","Add support of Secure Cell passphrase API to ThemisPP. The API draft is described in RFC 3.1.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell:
#include <themispp/secure_cell.hpp>

auto cell = themispp::secure_cell_seal_with_passphrase(""secret"");

uint8_t message[] = ""precious message"";

std::vector<uint8_t> encrypted = cell.encrypt(message);
std::vector<uint8_t> decrypted = cell.decrypt(encrypted);

EXPECT_EQ(decrypted, message);
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
#include <themispp/secure_keygen.hpp>

// Get a new key if you don't have one already:
std::vector<uint8_t> master_key = themispp::gen_sym_key();
// Or use an existing value that you store somewhere:
std::vector<uint8_t> master_key = base64::decode(""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U="");

auto cell = themispp::secure_cell_seal_with_key(master_key);

uint8_t message[] = ""precious message"";

std::vector<uint8_t> encrypted = cell.encrypt(message);
std::vector<uint8_t> decrypted = cell.decrypt(encrypted);

EXPECT_EQ(decrypted, message);

⚠️ NOTE: themispp::secure_cell_seal_t types are deprecated. Please use less ambiguous themispp::secure_cell_seal_with_key instead.

Other breaking changes
New Token Protect API
Previously Token Protect API was used like this:
auto cell = themispp::secure_cell_token_protect_t(master_key);

auto encrypted = cell.encrypt(message);
auto token = cell.get_token();

// ...

cell.set_token(token);
auto decrypted = cell.decrypt(encrypted);
This API was not thread-safe and prone to mistakes such as forgetting to set (or update) the authentication token before decryption.
New API provides much simpler and safer interface:
auto cell = themispp::secure_cell_token_protect_with_key(master_key);

// Since C++17:
auto [encrypted, token] = cell.encrypt(message);

// Since C++11:
std::vector<uint8_t> encrypted, token;
std::tie(encrypted, token) = cell.encrypt(message);

// C++03:
typedef themispp::secure_cell_token_protect_with_key::output_pair token_pair;
token_pair result = cell.encrypt(message);
// Access result.encrypted() and result.token()

// ...

auto decrypted = cell.decrypt(encrypted, token);
Note that APIs are incompatible and you will need to update encryption/decryption call sites during migration. Simply renaming Secure Cell classes will not be enough.
Iterator pair support
New API does not support iterator pairs (aka ranges or spans) directly for maintainability reasons. Avoiding direct iterator pair support allows us to have much fewer method overloads and keeps the code signficantly easier to follow.
If you have been using iterator pairs:
auto cell = themispp::secure_cell_seal_t(key_begin, key_end);
then you need to wrap them in themispp::input_buffer() with new API:
auto cell = themispp::secure_cell_seal_with_key(themispp::input_buffer(key_begin, key_end));
This is actual for all Secure Cell modes and all methods (construction, encryption, decryption).
Technical notes
As the saying goes, no battle plan survives contact with the enemy and this case is no exception. The implementation looks a little bit different from what is prescribed by the RFCs. However, user API says the same. Well, in fact, I consider C++ as a language to be hostile actor so this is more or less expected outcome.
This pull request is the most complex, the most unreadable, ridden with bugs and undefined behavior, and unpleasant in general of them all. In short, your typical C++ code. I started with C++ to run away from it as fast possible (as a side effect, it should run as fast as possible too).
I do not expect you to review it quickly. Take your time. Just open it up when you want to have your fix of suffering for the day or something.

Rant full of profanity
Why do you have to write all those input_buffer again and again – or pull in Boost monsters to avoid copying the code – instead of simply saying impl AsRef<[u8]>? *weeps in Rust*
Why do you have to have a PhD to write generic library code in C++? And it’s not PhD in math as you‘d probably need for Haskell. A PhD in law and criminal psychopathology will be much more appropriate here.
This is what happens to a language if a committee starts piling features onto features without ever deprecating anything. And in case your opponent attempts a counterargument you simply need to throw you hands up in the air and repeat “...but backwards compatibility!” and “undefined behavior!” until they go away.
Bjarne said that “there are two kinds of languages: the ones people complain about and the ones nobody uses”. So apparently they decided to design a language as bitchworthy as possible to get the adoption as high as C++ has.
But at least I‘m happy with this code. I really am. This is probably some kind of a Stockholm syndrome. Like, ‘clever’ languages like C++ reward ‘clever’ code. You get an immense sense of accomplishment once your tests actually compile and work the way you want to. This is where ‘boring’ languages like, say, Go or Java are different. C++ rewards you for writing clever, beautiful code. The only moment a program in Go is going to reward you is when the damn code does what it‘s supposed to be doing. Unfulfilling, boring, ugly as hell, but that‘s what people need – working code – as opposed to beautiful code that pleases the compiler. I‘m sorry I‘m weak before the machines but that‘s how it is.
I hope I don‘t have to touch this code again with a three-meter pole for the next year.

Whew! I feel a little bit better. Let’s do business now...
There‘s like 2.6k lines of code here. A significant part of them is documentation comments, copypasta in tests, dumb glue FFI code to interface with Themis Core, and a whole bunch of C++ magic to make all this work somehow. You‘ll probably have a better code review experience if you walk through it commit by commit.
Organizational notes
🚧 This branch depends on #577 so it has to wait before it is merged. To get better diffs the PR is targeted to a temporary branch which has to be removed before this PR is merged.
Once dependencies are merged, do the following:

 rebase ilammy:kdf/c++ onto cossacklabs:master
 retarget this PR to master
 delete ilammy/kdf/core

Follow the order. If the base branch is deleted early then this PR might get autoclosed.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (pls no, I don‘t want to bench wrappers this month)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,588,2020-01-31T21:45:46Z,2020-02-27T20:02:13Z,2020-03-05T12:53:03Z,MERGED,True,2632,31,18,https://github.com/ilammy,Secure Cell passphrase API: ThemisPP,10,['W-ThemisPP :crossed_swords:'],https://github.com/cossacklabs/themis/pull/588,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/588#issuecomment-585392907,"Add support of Secure Cell passphrase API to ThemisPP. The API draft is described in RFC 3.1.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell:
#include <themispp/secure_cell.hpp>

auto cell = themispp::secure_cell_seal_with_passphrase(""secret"");

uint8_t message[] = ""precious message"";

std::vector<uint8_t> encrypted = cell.encrypt(message);
std::vector<uint8_t> decrypted = cell.decrypt(encrypted);

EXPECT_EQ(decrypted, message);
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
#include <themispp/secure_keygen.hpp>

// Get a new key if you don't have one already:
std::vector<uint8_t> master_key = themispp::gen_sym_key();
// Or use an existing value that you store somewhere:
std::vector<uint8_t> master_key = base64::decode(""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U="");

auto cell = themispp::secure_cell_seal_with_key(master_key);

uint8_t message[] = ""precious message"";

std::vector<uint8_t> encrypted = cell.encrypt(message);
std::vector<uint8_t> decrypted = cell.decrypt(encrypted);

EXPECT_EQ(decrypted, message);

⚠️ NOTE: themispp::secure_cell_seal_t types are deprecated. Please use less ambiguous themispp::secure_cell_seal_with_key instead.

Other breaking changes
New Token Protect API
Previously Token Protect API was used like this:
auto cell = themispp::secure_cell_token_protect_t(master_key);

auto encrypted = cell.encrypt(message);
auto token = cell.get_token();

// ...

cell.set_token(token);
auto decrypted = cell.decrypt(encrypted);
This API was not thread-safe and prone to mistakes such as forgetting to set (or update) the authentication token before decryption.
New API provides much simpler and safer interface:
auto cell = themispp::secure_cell_token_protect_with_key(master_key);

// Since C++17:
auto [encrypted, token] = cell.encrypt(message);

// Since C++11:
std::vector<uint8_t> encrypted, token;
std::tie(encrypted, token) = cell.encrypt(message);

// C++03:
typedef themispp::secure_cell_token_protect_with_key::output_pair token_pair;
token_pair result = cell.encrypt(message);
// Access result.encrypted() and result.token()

// ...

auto decrypted = cell.decrypt(encrypted, token);
Note that APIs are incompatible and you will need to update encryption/decryption call sites during migration. Simply renaming Secure Cell classes will not be enough.
Iterator pair support
New API does not support iterator pairs (aka ranges or spans) directly for maintainability reasons. Avoiding direct iterator pair support allows us to have much fewer method overloads and keeps the code signficantly easier to follow.
If you have been using iterator pairs:
auto cell = themispp::secure_cell_seal_t(key_begin, key_end);
then you need to wrap them in themispp::input_buffer() with new API:
auto cell = themispp::secure_cell_seal_with_key(themispp::input_buffer(key_begin, key_end));
This is actual for all Secure Cell modes and all methods (construction, encryption, decryption).
Technical notes
As the saying goes, no battle plan survives contact with the enemy and this case is no exception. The implementation looks a little bit different from what is prescribed by the RFCs. However, user API says the same. Well, in fact, I consider C++ as a language to be hostile actor so this is more or less expected outcome.
This pull request is the most complex, the most unreadable, ridden with bugs and undefined behavior, and unpleasant in general of them all. In short, your typical C++ code. I started with C++ to run away from it as fast possible (as a side effect, it should run as fast as possible too).
I do not expect you to review it quickly. Take your time. Just open it up when you want to have your fix of suffering for the day or something.

Rant full of profanity
Why do you have to write all those input_buffer again and again – or pull in Boost monsters to avoid copying the code – instead of simply saying impl AsRef<[u8]>? *weeps in Rust*
Why do you have to have a PhD to write generic library code in C++? And it’s not PhD in math as you‘d probably need for Haskell. A PhD in law and criminal psychopathology will be much more appropriate here.
This is what happens to a language if a committee starts piling features onto features without ever deprecating anything. And in case your opponent attempts a counterargument you simply need to throw you hands up in the air and repeat “...but backwards compatibility!” and “undefined behavior!” until they go away.
Bjarne said that “there are two kinds of languages: the ones people complain about and the ones nobody uses”. So apparently they decided to design a language as bitchworthy as possible to get the adoption as high as C++ has.
But at least I‘m happy with this code. I really am. This is probably some kind of a Stockholm syndrome. Like, ‘clever’ languages like C++ reward ‘clever’ code. You get an immense sense of accomplishment once your tests actually compile and work the way you want to. This is where ‘boring’ languages like, say, Go or Java are different. C++ rewards you for writing clever, beautiful code. The only moment a program in Go is going to reward you is when the damn code does what it‘s supposed to be doing. Unfulfilling, boring, ugly as hell, but that‘s what people need – working code – as opposed to beautiful code that pleases the compiler. I‘m sorry I‘m weak before the machines but that‘s how it is.
I hope I don‘t have to touch this code again with a three-meter pole for the next year.

Whew! I feel a little bit better. Let’s do business now...
There‘s like 2.6k lines of code here. A significant part of them is documentation comments, copypasta in tests, dumb glue FFI code to interface with Themis Core, and a whole bunch of C++ magic to make all this work somehow. You‘ll probably have a better code review experience if you walk through it commit by commit.
Organizational notes
🚧 This branch depends on #577 so it has to wait before it is merged. To get better diffs the PR is targeted to a temporary branch which has to be removed before this PR is merged.
Once dependencies are merged, do the following:

 rebase ilammy:kdf/c++ onto cossacklabs:master
 retarget this PR to master
 delete ilammy/kdf/core

Follow the order. If the base branch is deleted early then this PR might get autoclosed.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (pls no, I don‘t want to bench wrappers this month)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are updated
 Changelog is updated",PR #577 has been merged. I've rebased and retargeted this PR to master with no changes.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,589,2020-02-04T18:06:00Z,2020-02-05T17:32:41Z,2020-02-05T17:32:43Z,MERGED,True,60,60,3,https://github.com/karenswry,Update links from github wiki to docserver,3,['docs :books:'],https://github.com/cossacklabs/themis/pull/589,https://github.com/karenswry,1,https://github.com/cossacklabs/themis/pull/589,As described in T1419 - replaced links to Wiki with links to Docserver where it was necessary + brushed up a few things in the repository's Readme.,As described in T1419 - replaced links to Wiki with links to Docserver where it was necessary + brushed up a few things in the repository's Readme.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,590,2020-02-04T20:56:27Z,2020-02-05T22:56:18Z,2020-02-05T22:56:20Z,MERGED,True,300,75,9,https://github.com/karenswry,Updating package descriptions and readmes,22,"['docs :books:', 'W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-JavaThemis :coffee:', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/590,https://github.com/karenswry,1,https://github.com/cossacklabs/themis/pull/590,"Updated all the files and readmes used by external package managers for Themis wrappers (note: this currently excludes Rust as it has its own task).
In some cases, license and readme files were created where they were missing.
JsThemis and Wasm wrappers have now the most breve descriptions in the description files as I had to fit them into a pop-up message since @ilammy finally solved the mystery of where those get displayed in npmjs.com
Please review and merge.","Updated all the files and readmes used by external package managers for Themis wrappers (note: this currently excludes Rust as it has its own task).
In some cases, license and readme files were created where they were missing.
JsThemis and Wasm wrappers have now the most breve descriptions in the description files as I had to fit them into a pop-up message since @ilammy finally solved the mystery of where those get displayed in npmjs.com
Please review and merge.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,590,2020-02-04T20:56:27Z,2020-02-05T22:56:18Z,2020-02-05T22:56:20Z,MERGED,True,300,75,9,https://github.com/karenswry,Updating package descriptions and readmes,22,"['docs :books:', 'W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-JavaThemis :coffee:', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/590,https://github.com/karenswry,2,https://github.com/cossacklabs/themis/pull/590#issuecomment-582606361,"Updated all the files and readmes used by external package managers for Themis wrappers (note: this currently excludes Rust as it has its own task).
In some cases, license and readme files were created where they were missing.
JsThemis and Wasm wrappers have now the most breve descriptions in the description files as I had to fit them into a pop-up message since @ilammy finally solved the mystery of where those get displayed in npmjs.com
Please review and merge.",Implemented the necessary spelling correction and explained the change for JsThemis/WasmThemis descriptions. Can we merge now?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,591,2020-02-10T19:14:43Z,2020-02-10T20:48:53Z,2020-02-12T18:57:41Z,MERGED,True,4,6,1,https://github.com/ilammy,Avoid needless return in libthemis-sys,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/591,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/591,"With recent updates Clippy got smarter and now sees that we (needlessly) use ""return"" in a tail position. Remove return so that Clippy is happy. I personally find this questionable but Clippy is the authority here.

Clippy warning that breaks the build
   Compiling libthemis-sys v0.12.0 (/Users/ilammy/Documents/dev/themis/src/wrappers/themis/rust/libthemis-sys)
error: unneeded return statement
  --> src/wrappers/themis/rust/libthemis-sys/build.rs:57:13
   |
57 | /             return Library {
58 | |                 include_paths: library.include_paths,
59 | |                 link_paths: library.link_paths,
60 | |             };
   | |______________^
   |
   = note: `-D clippy::needless-return` implied by `-D warnings`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
57 |             Library {
58 |                 include_paths: library.include_paths,
59 |                 link_paths: library.link_paths,
60 |             }
   |

error: aborting due to previous error

error: could not compile `libthemis-sys`.
warning: build failed, waiting for other jobs to finish...
error: build failed
make: *** [test_rust] Error 101


Checklist

 Change is covered by automated tests
 The coding guidelines are followed","With recent updates Clippy got smarter and now sees that we (needlessly) use ""return"" in a tail position. Remove return so that Clippy is happy. I personally find this questionable but Clippy is the authority here.

Clippy warning that breaks the build
   Compiling libthemis-sys v0.12.0 (/Users/ilammy/Documents/dev/themis/src/wrappers/themis/rust/libthemis-sys)
error: unneeded return statement
  --> src/wrappers/themis/rust/libthemis-sys/build.rs:57:13
   |
57 | /             return Library {
58 | |                 include_paths: library.include_paths,
59 | |                 link_paths: library.link_paths,
60 | |             };
   | |______________^
   |
   = note: `-D clippy::needless-return` implied by `-D warnings`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
57 |             Library {
58 |                 include_paths: library.include_paths,
59 |                 link_paths: library.link_paths,
60 |             }
   |

error: aborting due to previous error

error: could not compile `libthemis-sys`.
warning: build failed, waiting for other jobs to finish...
error: build failed
make: *** [test_rust] Error 101


Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,592,2020-02-12T20:15:52Z,2020-03-05T10:56:20Z,2020-03-05T12:53:04Z,MERGED,True,501,265,7,https://github.com/ilammy,Update header parser in Secure Cell master key API,9,['core'],https://github.com/cossacklabs/themis/pull/592,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/592,"Passphrase API added in #577 has added quite a few new utilities and more robust and readable approach to parsing Secure Cell headers. Fuzzing with AFL in #579 and #583 has uncovered a bunch of sleeper issues in parsing code. This PR incorporates those improvements and updates master key API implementation to resolve all those issues.
First bunch of commits unifies master key implementation with passphrase one, now they are more or less similar, with differences only in KDF processing and header handling. Maybe later we will be able to reduce code duplication even further.
Some next commits resolve miscellaneous issues found in #583 for passphrase API which were also actual for master key API. This should unbreak fuzzing tests performed by #579.
And there are some minor commits with “collateral damage”: extracted common code from passphrase API implementation and some fixups in tests to expect different error codes.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (manually compare with master)
 The coding guidelines are followed
 Public API has proper documentation (no changes)
 Changelog is updated (will update in bulk before release)","Passphrase API added in #577 has added quite a few new utilities and more robust and readable approach to parsing Secure Cell headers. Fuzzing with AFL in #579 and #583 has uncovered a bunch of sleeper issues in parsing code. This PR incorporates those improvements and updates master key API implementation to resolve all those issues.
First bunch of commits unifies master key implementation with passphrase one, now they are more or less similar, with differences only in KDF processing and header handling. Maybe later we will be able to reduce code duplication even further.
Some next commits resolve miscellaneous issues found in #583 for passphrase API which were also actual for master key API. This should unbreak fuzzing tests performed by #579.
And there are some minor commits with “collateral damage”: extracted common code from passphrase API implementation and some fixups in tests to expect different error codes.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (manually compare with master)
 The coding guidelines are followed
 Public API has proper documentation (no changes)
 Changelog is updated (will update in bulk before release)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,592,2020-02-12T20:15:52Z,2020-03-05T10:56:20Z,2020-03-05T12:53:04Z,MERGED,True,501,265,7,https://github.com/ilammy,Update header parser in Secure Cell master key API,9,['core'],https://github.com/cossacklabs/themis/pull/592,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/592#issuecomment-585427307,"Passphrase API added in #577 has added quite a few new utilities and more robust and readable approach to parsing Secure Cell headers. Fuzzing with AFL in #579 and #583 has uncovered a bunch of sleeper issues in parsing code. This PR incorporates those improvements and updates master key API implementation to resolve all those issues.
First bunch of commits unifies master key implementation with passphrase one, now they are more or less similar, with differences only in KDF processing and header handling. Maybe later we will be able to reduce code duplication even further.
Some next commits resolve miscellaneous issues found in #583 for passphrase API which were also actual for master key API. This should unbreak fuzzing tests performed by #579.
And there are some minor commits with “collateral damage”: extracted common code from passphrase API implementation and some fixups in tests to expect different error codes.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (manually compare with master)
 The coding guidelines are followed
 Public API has proper documentation (no changes)
 Changelog is updated (will update in bulk before release)","Since I did not teach our CI to compare benchmark results yet, I'm filling it for this job.
Here are reports for master and this PR, they check only processing of 4 KB of data.




Encryption
Decryption




Before
4.38 µs ± 0.73 µs
3.10 µs ± 0.26 µs


After
4.20 µs ± 0.18 µs
3.01 µs ± 0.28 µs



So it’s even a slight improvement but within the variance so I doubt it is statistically significant.
Performance optimization is not a goal of this PR so I won‘t be doing measurements manually. I’m fine with not having any obvious degradation.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,593,2020-02-18T15:30:48Z,2020-02-19T18:57:34Z,2020-02-19T18:59:03Z,MERGED,True,9,0,1,https://github.com/karenswry,Added the mention of the current data privacy regulations,1,['docs :books:'],https://github.com/cossacklabs/themis/pull/593,https://github.com/karenswry,1,https://github.com/cossacklabs/themis/pull/593,Added a small section on data privacy regulations to the readme file.,Added a small section on data privacy regulations to the readme file.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,594,2020-02-19T20:54:02Z,2020-03-02T13:24:18Z,2020-03-05T12:53:04Z,MERGED,True,490,66,11,https://github.com/ilammy,Secure Cell passphrase API: PHPThemis,8,['W-PHPThemis :elephant:'],https://github.com/cossacklabs/themis/pull/594,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/594,"Add support of Secure Cell passphrase API to ThemisPP. The API is described in RFC 3.2.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell:
$passphrase = 'my little password: secrets are magic';

$message = 'precious message';

$encrypted = phpthemis_scell_seal_encrypt_with_passphrase($passphrase, $message);
$decrypted = phpthemis_scell_seal_decrypt_with_passphrase($passphrase, $encrypted);

assert($decrypted == $message);
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Get a new key if you don't have one already:
$master_key = phpthemis_gen_sym_key();
// Or use an existing value that you store somewhere:
$master_key = base64_decode('b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=');

$message = 'precious message';

$encrypted = phpthemis_scell_seal_encrypt($master_key, $message);
$decrypted = phpthemis_scell_seal_decrypt($master_key, $encrypted);

assert($decrypted == $message);
Technical notes
Nothing really interesting here, it’s mostly copypasta of master key API with appropriate tweaks and renaming.
I’ve updated unit-tests slightly to cover the new API and replaced “test key” strings with generated master keys everywhere except for the passphrase API. Standalone code example for PHP has been updated as well to demonstrate both APIs.
I wanted to update the existing command-line tools but then I realized that they are used in integration tests. Other tools use master key API so we’d need completely new set of tools. For now there is only PHP tool tested against itself. Others will be added in future PRs.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","Add support of Secure Cell passphrase API to ThemisPP. The API is described in RFC 3.2.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell:
$passphrase = 'my little password: secrets are magic';

$message = 'precious message';

$encrypted = phpthemis_scell_seal_encrypt_with_passphrase($passphrase, $message);
$decrypted = phpthemis_scell_seal_decrypt_with_passphrase($passphrase, $encrypted);

assert($decrypted == $message);
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Get a new key if you don't have one already:
$master_key = phpthemis_gen_sym_key();
// Or use an existing value that you store somewhere:
$master_key = base64_decode('b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=');

$message = 'precious message';

$encrypted = phpthemis_scell_seal_encrypt($master_key, $message);
$decrypted = phpthemis_scell_seal_decrypt($master_key, $encrypted);

assert($decrypted == $message);
Technical notes
Nothing really interesting here, it’s mostly copypasta of master key API with appropriate tweaks and renaming.
I’ve updated unit-tests slightly to cover the new API and replaced “test key” strings with generated master keys everywhere except for the passphrase API. Standalone code example for PHP has been updated as well to demonstrate both APIs.
I wanted to update the existing command-line tools but then I realized that they are used in integration tests. Other tools use master key API so we’d need completely new set of tools. For now there is only PHP tool tested against itself. Others will be added in future PRs.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,595,2020-02-26T17:09:09Z,2020-02-27T20:03:38Z,2020-03-05T12:53:03Z,MERGED,True,328,5,3,https://github.com/ilammy,Test GoThemis with Go 1.11~1.14 on CircleCI,8,"['W-GoThemis :hamster:', 'infrastructure', 'compatibility']",https://github.com/cossacklabs/themis/pull/595,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/595,"Recent development in Acra has uncovered a bug in CGo which caused Secure Cell calls to panic on CircleCI builds like this:
panic: runtime error: cgo argument has Go pointer to Go pointer [recovered]
	panic: runtime error: cgo argument has Go pointer to Go pointer
goroutine 7 [running]:
testing.tRunner.func1(0xc0000fe300)
	/home/user/go_root_1.11.5/go/src/testing/testing.go:792 +0x387
panic(0x578ca0, 0xc00008ec40)
	/home/user/go_root_1.11.5/go/src/runtime/panic.go:513 +0x1b9
github.com/cossacklabs/themis/gothemis/cell.(*SecureCell).Protect.func1(0xc00000c700, 0xc0000146b0, 0x7, 0x8, 0x8ca438, 0xf, 0xc0000146b0, 0x7, 0xc000104720, 0x3d, ...)
	/home/user/gopath/pkg/mod/github.com/cossacklabs/themis@v0.0.0-20190313112615-419d5a3c2ca8/gothemis/cell/cell.go:195 +0x194
github.com/cossacklabs/themis/gothemis/cell.(*SecureCell).Protect(0xc00000c700, 0xc0000146b0, 0x7, 0x8, 0xc000104720, 0x3d, 0x40, 0xc000104700, 0xc0001046b0, 0x2d, ...)
	/home/user/gopath/pkg/mod/github.com/cossacklabs/themis@v0.0.0-20190313112615-419d5a3c2ca8/gothemis/cell/cell.go:195 +0x1c2

It can be triggered by passing GoThemis byte slices returned by bytes.Buffer in go 1.11 and some earlier versions. It does not seem to be triggered every time and with every CGo call but I have found that “context” argument of Secure Cell calls causes a panic reliably.
Add a workaround for this bug so that we don’t panic randomly. Since we can’t know whether bytes.Buffer has been used, we simply copy each and every byte slice that we operate on before passing it to Themis Core via CGo. The bug has been fixed in go 1.12, so we use conditional compilation to make that workaround a no-op on versions that are not affected.
utils.SanitizeBuffer() is technically exported by GoThemis and available to the users, but this function is considered an implementation detail and may be removed in the future (e.g., once we decide that we no longer wish to support go 1.11 and stop maintaining this workaround).
CircleCI has been running tests only with the version that is shipped with the Docker image. Update the configuration to test GoThemis with go 1.11—1.14. Our policy is to provide full support for the current stable versions of Go (those are 1.14 and 1.13.8 right now), and best effort support for earlier ones.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Recent development in Acra has uncovered a bug in CGo which caused Secure Cell calls to panic on CircleCI builds like this:
panic: runtime error: cgo argument has Go pointer to Go pointer [recovered]
	panic: runtime error: cgo argument has Go pointer to Go pointer
goroutine 7 [running]:
testing.tRunner.func1(0xc0000fe300)
	/home/user/go_root_1.11.5/go/src/testing/testing.go:792 +0x387
panic(0x578ca0, 0xc00008ec40)
	/home/user/go_root_1.11.5/go/src/runtime/panic.go:513 +0x1b9
github.com/cossacklabs/themis/gothemis/cell.(*SecureCell).Protect.func1(0xc00000c700, 0xc0000146b0, 0x7, 0x8, 0x8ca438, 0xf, 0xc0000146b0, 0x7, 0xc000104720, 0x3d, ...)
	/home/user/gopath/pkg/mod/github.com/cossacklabs/themis@v0.0.0-20190313112615-419d5a3c2ca8/gothemis/cell/cell.go:195 +0x194
github.com/cossacklabs/themis/gothemis/cell.(*SecureCell).Protect(0xc00000c700, 0xc0000146b0, 0x7, 0x8, 0xc000104720, 0x3d, 0x40, 0xc000104700, 0xc0001046b0, 0x2d, ...)
	/home/user/gopath/pkg/mod/github.com/cossacklabs/themis@v0.0.0-20190313112615-419d5a3c2ca8/gothemis/cell/cell.go:195 +0x1c2

It can be triggered by passing GoThemis byte slices returned by bytes.Buffer in go 1.11 and some earlier versions. It does not seem to be triggered every time and with every CGo call but I have found that “context” argument of Secure Cell calls causes a panic reliably.
Add a workaround for this bug so that we don’t panic randomly. Since we can’t know whether bytes.Buffer has been used, we simply copy each and every byte slice that we operate on before passing it to Themis Core via CGo. The bug has been fixed in go 1.12, so we use conditional compilation to make that workaround a no-op on versions that are not affected.
utils.SanitizeBuffer() is technically exported by GoThemis and available to the users, but this function is considered an implementation detail and may be removed in the future (e.g., once we decide that we no longer wish to support go 1.11 and stop maintaining this workaround).
CircleCI has been running tests only with the version that is shipped with the Docker image. Update the configuration to test GoThemis with go 1.11—1.14. Our policy is to provide full support for the current stable versions of Go (those are 1.14 and 1.13.8 right now), and best effort support for earlier ones.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,595,2020-02-26T17:09:09Z,2020-02-27T20:03:38Z,2020-03-05T12:53:03Z,MERGED,True,328,5,3,https://github.com/ilammy,Test GoThemis with Go 1.11~1.14 on CircleCI,8,"['W-GoThemis :hamster:', 'infrastructure', 'compatibility']",https://github.com/cossacklabs/themis/pull/595,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/595#issuecomment-592001565,"Recent development in Acra has uncovered a bug in CGo which caused Secure Cell calls to panic on CircleCI builds like this:
panic: runtime error: cgo argument has Go pointer to Go pointer [recovered]
	panic: runtime error: cgo argument has Go pointer to Go pointer
goroutine 7 [running]:
testing.tRunner.func1(0xc0000fe300)
	/home/user/go_root_1.11.5/go/src/testing/testing.go:792 +0x387
panic(0x578ca0, 0xc00008ec40)
	/home/user/go_root_1.11.5/go/src/runtime/panic.go:513 +0x1b9
github.com/cossacklabs/themis/gothemis/cell.(*SecureCell).Protect.func1(0xc00000c700, 0xc0000146b0, 0x7, 0x8, 0x8ca438, 0xf, 0xc0000146b0, 0x7, 0xc000104720, 0x3d, ...)
	/home/user/gopath/pkg/mod/github.com/cossacklabs/themis@v0.0.0-20190313112615-419d5a3c2ca8/gothemis/cell/cell.go:195 +0x194
github.com/cossacklabs/themis/gothemis/cell.(*SecureCell).Protect(0xc00000c700, 0xc0000146b0, 0x7, 0x8, 0xc000104720, 0x3d, 0x40, 0xc000104700, 0xc0001046b0, 0x2d, ...)
	/home/user/gopath/pkg/mod/github.com/cossacklabs/themis@v0.0.0-20190313112615-419d5a3c2ca8/gothemis/cell/cell.go:195 +0x1c2

It can be triggered by passing GoThemis byte slices returned by bytes.Buffer in go 1.11 and some earlier versions. It does not seem to be triggered every time and with every CGo call but I have found that “context” argument of Secure Cell calls causes a panic reliably.
Add a workaround for this bug so that we don’t panic randomly. Since we can’t know whether bytes.Buffer has been used, we simply copy each and every byte slice that we operate on before passing it to Themis Core via CGo. The bug has been fixed in go 1.12, so we use conditional compilation to make that workaround a no-op on versions that are not affected.
utils.SanitizeBuffer() is technically exported by GoThemis and available to the users, but this function is considered an implementation detail and may be removed in the future (e.g., once we decide that we no longer wish to support go 1.11 and stop maintaining this workaround).
CircleCI has been running tests only with the version that is shipped with the Docker image. Update the configuration to test GoThemis with go 1.11—1.14. Our policy is to provide full support for the current stable versions of Go (those are 1.14 and 1.13.8 right now), and best effort support for earlier ones.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","I’ve just realized that we can handle keys in Secure Messages slightly better, avoiding copying them on every operation and doing it only on Secure Message constructions. Though, this will break an (arguably silly) use case when (*keys.PrivateKey).Value is replaced with a different key without making a new Secure Message.",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,595,2020-02-26T17:09:09Z,2020-02-27T20:03:38Z,2020-03-05T12:53:03Z,MERGED,True,328,5,3,https://github.com/ilammy,Test GoThemis with Go 1.11~1.14 on CircleCI,8,"['W-GoThemis :hamster:', 'infrastructure', 'compatibility']",https://github.com/cossacklabs/themis/pull/595,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/595#issuecomment-592057909,"Recent development in Acra has uncovered a bug in CGo which caused Secure Cell calls to panic on CircleCI builds like this:
panic: runtime error: cgo argument has Go pointer to Go pointer [recovered]
	panic: runtime error: cgo argument has Go pointer to Go pointer
goroutine 7 [running]:
testing.tRunner.func1(0xc0000fe300)
	/home/user/go_root_1.11.5/go/src/testing/testing.go:792 +0x387
panic(0x578ca0, 0xc00008ec40)
	/home/user/go_root_1.11.5/go/src/runtime/panic.go:513 +0x1b9
github.com/cossacklabs/themis/gothemis/cell.(*SecureCell).Protect.func1(0xc00000c700, 0xc0000146b0, 0x7, 0x8, 0x8ca438, 0xf, 0xc0000146b0, 0x7, 0xc000104720, 0x3d, ...)
	/home/user/gopath/pkg/mod/github.com/cossacklabs/themis@v0.0.0-20190313112615-419d5a3c2ca8/gothemis/cell/cell.go:195 +0x194
github.com/cossacklabs/themis/gothemis/cell.(*SecureCell).Protect(0xc00000c700, 0xc0000146b0, 0x7, 0x8, 0xc000104720, 0x3d, 0x40, 0xc000104700, 0xc0001046b0, 0x2d, ...)
	/home/user/gopath/pkg/mod/github.com/cossacklabs/themis@v0.0.0-20190313112615-419d5a3c2ca8/gothemis/cell/cell.go:195 +0x1c2

It can be triggered by passing GoThemis byte slices returned by bytes.Buffer in go 1.11 and some earlier versions. It does not seem to be triggered every time and with every CGo call but I have found that “context” argument of Secure Cell calls causes a panic reliably.
Add a workaround for this bug so that we don’t panic randomly. Since we can’t know whether bytes.Buffer has been used, we simply copy each and every byte slice that we operate on before passing it to Themis Core via CGo. The bug has been fixed in go 1.12, so we use conditional compilation to make that workaround a no-op on versions that are not affected.
utils.SanitizeBuffer() is technically exported by GoThemis and available to the users, but this function is considered an implementation detail and may be removed in the future (e.g., once we decide that we no longer wish to support go 1.11 and stop maintaining this workaround).
CircleCI has been running tests only with the version that is shipped with the Docker image. Update the configuration to test GoThemis with go 1.11—1.14. Our policy is to provide full support for the current stable versions of Go (those are 1.14 and 1.13.8 right now), and best effort support for earlier ones.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Okay, everyone! After offline discussion and some prototyping we found out that a proper workaround for this issue is too ugly and hard to maintain, so we will not add it. Selective copying and zeroing out of those copies is hard to code correctly. Apparently correct solution (SafeBuffer wrapper) adds way too many lines of code than we wish for a simple workaround. New users are not expected to use Go 1.11 anymore, and existing users can be given advice to avoid using bytes.Buffer with GoThemis if they see a panic like this.
I have reverted the workaround and removed it from this PR. Other updates are still there, like testing with multiple versions of Go. Regression test also remains, I tweaked it so that it passes with Go 1.11 (expecting a panic in this case).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,596,2020-02-28T11:01:27Z,2020-03-18T12:41:32Z,2020-03-18T12:41:36Z,MERGED,True,363,44,9,https://github.com/ilammy,Secure Cell passphrase API: PyThemis,10,['W-PyThemis :snake:'],https://github.com/cossacklabs/themis/pull/596,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/596,"Add support of Secure Cell passphrase API to PyThemis. The API is described in RFC 3.3 (with corrections).
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell:
from pythemis.scell import SCellSeal

cell = SCellSeal(passphrase='my little password: secrets are magic')

plaintext = b'precious message'

encrypted = cell.encrypt(plaintext)
decrypted = cell.decrypt(encrypted)

assert decrypted == message
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
from pythemis.skeygen import GenerateSymmetricKey

# Get a new key if you don't have one already:
master_key = GenerateSymmetricKey()
# Or use an existing value that you store somewhere:
master_key = base64.b64decode(b'b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=')

cell = SCellSeal(key=master_key)

plaintext = b'precious message'

encrypted = cell.encrypt(plaintext)
decrypted = cell.decrypt(encrypted)

assert decrypted == message
API compatibility
Explicit choice between passphrases and keys
Normally you should use SCellSeal constructor for Secure Cell in Seal mode:
cell = SCellSeal(key=master_key)

cell = SCellSeal(passphrase=user_passphrase)
However, you can also import the SCellSealPassphrase class and construct it directly:
cell = SCellSealPassphrase(user_passphrase)
Only SCellSeal supports passphrase argument and passphrase encryption. SCellTokenProtect and SCellContextImprint work only with key.
Warnings about master key API misuse
Master keys should be provided as binary data. Previously PyThemis allowed to pass Unicode strings as master keys but this usage is now discouraged. PyThemis will emit warnings if strings are passed to master key API. If you see warnings like
UserWarning: master key should be ""bytes"" ...

then you should evaluate the call site and apply appropriate change:

Explicitly encode Unicode into bytes – if you believe that the passphrase is long enough to be securely used as a master key.

We recommend using 256 bits of entropy for master key API. Typical human-readable passphrase needs to be around 100 characters or 20 words long for that.


Migrate to using symmetric keys – if the secret will not be input by a human.

Generate new symmetric key using skeygen.GenerateSymmetricKey()
Update encryption and decryption call sites to use new keys
Reencrypt existing data, or provide fallback decryption path


Migrate to using passphrase= API – if the secret is going to be entered by a human.

Follow the same general process as described above.



Master keys and positional arguments
Previously, Secure Cell could be initialized with master key as a simple positional argument:
cell = SCellSeal(master_key)
This API is still available and supported. However, it is a good idea to explicitly say key= or passphrase= when using SCellSeal unless it is obvious from context.
Unicode considerations
Master keys are always binary data (bytes). Passphrases may be provided either as Unicode strings (str) or as encoded bytes. If you provide a Unicode passphrase it will be encoded in UTF-8 for compatibility with other Themis platforms. If you need a different encoding, please use encoding= optional parameter, for example:
cell = SCellSeal(passphrase=user_passphrase, encoding='utf-16')
In Python 2 master keys are expected as str values and passphrases may be provided either as str (raw bytes used as is), or as unicode (will be encoded in UTF-8 by default, use encoding= to change). Take care with string encoding.
Technical notes
__special__.__python__.__magic__.__with__.__new__ allows us to maintain syntax compatibility and introduce passphrase= as an extension. Initially a different syntax was planned:
SCellSeal.with_passphrase('a secret')

SCellSeal.with_key(binary_master_key)
It had a noble idea of maintaining similarity with other languages which do not have named arguments. However, after updating tests and examples this syntax came off as unnatural and non-Pythonic. The Zen of Python says:

There should be one — and preferably only one — obvious way to do it.

So now we have exactly one way to construct a Secure Cell in each mode: via SCellMode constructor. (Well, you can also import SCellSealPassphrase if you like that more.)
Note that another language with named arguments (Swift) is also going to get a similar API, so this is sort of a prior example.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","Add support of Secure Cell passphrase API to PyThemis. The API is described in RFC 3.3 (with corrections).
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell:
from pythemis.scell import SCellSeal

cell = SCellSeal(passphrase='my little password: secrets are magic')

plaintext = b'precious message'

encrypted = cell.encrypt(plaintext)
decrypted = cell.decrypt(encrypted)

assert decrypted == message
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
from pythemis.skeygen import GenerateSymmetricKey

# Get a new key if you don't have one already:
master_key = GenerateSymmetricKey()
# Or use an existing value that you store somewhere:
master_key = base64.b64decode(b'b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=')

cell = SCellSeal(key=master_key)

plaintext = b'precious message'

encrypted = cell.encrypt(plaintext)
decrypted = cell.decrypt(encrypted)

assert decrypted == message
API compatibility
Explicit choice between passphrases and keys
Normally you should use SCellSeal constructor for Secure Cell in Seal mode:
cell = SCellSeal(key=master_key)

cell = SCellSeal(passphrase=user_passphrase)
However, you can also import the SCellSealPassphrase class and construct it directly:
cell = SCellSealPassphrase(user_passphrase)
Only SCellSeal supports passphrase argument and passphrase encryption. SCellTokenProtect and SCellContextImprint work only with key.
Warnings about master key API misuse
Master keys should be provided as binary data. Previously PyThemis allowed to pass Unicode strings as master keys but this usage is now discouraged. PyThemis will emit warnings if strings are passed to master key API. If you see warnings like
UserWarning: master key should be ""bytes"" ...

then you should evaluate the call site and apply appropriate change:

Explicitly encode Unicode into bytes – if you believe that the passphrase is long enough to be securely used as a master key.

We recommend using 256 bits of entropy for master key API. Typical human-readable passphrase needs to be around 100 characters or 20 words long for that.


Migrate to using symmetric keys – if the secret will not be input by a human.

Generate new symmetric key using skeygen.GenerateSymmetricKey()
Update encryption and decryption call sites to use new keys
Reencrypt existing data, or provide fallback decryption path


Migrate to using passphrase= API – if the secret is going to be entered by a human.

Follow the same general process as described above.



Master keys and positional arguments
Previously, Secure Cell could be initialized with master key as a simple positional argument:
cell = SCellSeal(master_key)
This API is still available and supported. However, it is a good idea to explicitly say key= or passphrase= when using SCellSeal unless it is obvious from context.
Unicode considerations
Master keys are always binary data (bytes). Passphrases may be provided either as Unicode strings (str) or as encoded bytes. If you provide a Unicode passphrase it will be encoded in UTF-8 for compatibility with other Themis platforms. If you need a different encoding, please use encoding= optional parameter, for example:
cell = SCellSeal(passphrase=user_passphrase, encoding='utf-16')
In Python 2 master keys are expected as str values and passphrases may be provided either as str (raw bytes used as is), or as unicode (will be encoded in UTF-8 by default, use encoding= to change). Take care with string encoding.
Technical notes
__special__.__python__.__magic__.__with__.__new__ allows us to maintain syntax compatibility and introduce passphrase= as an extension. Initially a different syntax was planned:
SCellSeal.with_passphrase('a secret')

SCellSeal.with_key(binary_master_key)
It had a noble idea of maintaining similarity with other languages which do not have named arguments. However, after updating tests and examples this syntax came off as unnatural and non-Pythonic. The Zen of Python says:

There should be one — and preferably only one — obvious way to do it.

So now we have exactly one way to construct a Secure Cell in each mode: via SCellMode constructor. (Well, you can also import SCellSealPassphrase if you like that more.)
Note that another language with named arguments (Swift) is also going to get a similar API, so this is sort of a prior example.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,596,2020-02-28T11:01:27Z,2020-03-18T12:41:32Z,2020-03-18T12:41:36Z,MERGED,True,363,44,9,https://github.com/ilammy,Secure Cell passphrase API: PyThemis,10,['W-PyThemis :snake:'],https://github.com/cossacklabs/themis/pull/596,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/596#issuecomment-593493187,"Add support of Secure Cell passphrase API to PyThemis. The API is described in RFC 3.3 (with corrections).
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell:
from pythemis.scell import SCellSeal

cell = SCellSeal(passphrase='my little password: secrets are magic')

plaintext = b'precious message'

encrypted = cell.encrypt(plaintext)
decrypted = cell.decrypt(encrypted)

assert decrypted == message
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
from pythemis.skeygen import GenerateSymmetricKey

# Get a new key if you don't have one already:
master_key = GenerateSymmetricKey()
# Or use an existing value that you store somewhere:
master_key = base64.b64decode(b'b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=')

cell = SCellSeal(key=master_key)

plaintext = b'precious message'

encrypted = cell.encrypt(plaintext)
decrypted = cell.decrypt(encrypted)

assert decrypted == message
API compatibility
Explicit choice between passphrases and keys
Normally you should use SCellSeal constructor for Secure Cell in Seal mode:
cell = SCellSeal(key=master_key)

cell = SCellSeal(passphrase=user_passphrase)
However, you can also import the SCellSealPassphrase class and construct it directly:
cell = SCellSealPassphrase(user_passphrase)
Only SCellSeal supports passphrase argument and passphrase encryption. SCellTokenProtect and SCellContextImprint work only with key.
Warnings about master key API misuse
Master keys should be provided as binary data. Previously PyThemis allowed to pass Unicode strings as master keys but this usage is now discouraged. PyThemis will emit warnings if strings are passed to master key API. If you see warnings like
UserWarning: master key should be ""bytes"" ...

then you should evaluate the call site and apply appropriate change:

Explicitly encode Unicode into bytes – if you believe that the passphrase is long enough to be securely used as a master key.

We recommend using 256 bits of entropy for master key API. Typical human-readable passphrase needs to be around 100 characters or 20 words long for that.


Migrate to using symmetric keys – if the secret will not be input by a human.

Generate new symmetric key using skeygen.GenerateSymmetricKey()
Update encryption and decryption call sites to use new keys
Reencrypt existing data, or provide fallback decryption path


Migrate to using passphrase= API – if the secret is going to be entered by a human.

Follow the same general process as described above.



Master keys and positional arguments
Previously, Secure Cell could be initialized with master key as a simple positional argument:
cell = SCellSeal(master_key)
This API is still available and supported. However, it is a good idea to explicitly say key= or passphrase= when using SCellSeal unless it is obvious from context.
Unicode considerations
Master keys are always binary data (bytes). Passphrases may be provided either as Unicode strings (str) or as encoded bytes. If you provide a Unicode passphrase it will be encoded in UTF-8 for compatibility with other Themis platforms. If you need a different encoding, please use encoding= optional parameter, for example:
cell = SCellSeal(passphrase=user_passphrase, encoding='utf-16')
In Python 2 master keys are expected as str values and passphrases may be provided either as str (raw bytes used as is), or as unicode (will be encoded in UTF-8 by default, use encoding= to change). Take care with string encoding.
Technical notes
__special__.__python__.__magic__.__with__.__new__ allows us to maintain syntax compatibility and introduce passphrase= as an extension. Initially a different syntax was planned:
SCellSeal.with_passphrase('a secret')

SCellSeal.with_key(binary_master_key)
It had a noble idea of maintaining similarity with other languages which do not have named arguments. However, after updating tests and examples this syntax came off as unnatural and non-Pythonic. The Zen of Python says:

There should be one — and preferably only one — obvious way to do it.

So now we have exactly one way to construct a Secure Cell in each mode: via SCellMode constructor. (Well, you can also import SCellSealPassphrase if you like that more.)
Note that another language with named arguments (Swift) is also going to get a similar API, so this is sort of a prior example.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","I’ve merged PHP PR which enables integration testing of passphrase API between platforms. Now integration tests between Python and PHP are broken 🤔 Okay, tests, just with that you have paid off all effort that has been put into you. However, this also raises some questions:

Where is the bug? Since both wrappers seem to use correct API. PHP 7 was wrong.
How much I should be afraid, given that C++, Android, Objective-C/Swift, and Themis Core itself do not have integration tests with the rest of the wrappers?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,597,2020-03-02T11:52:10Z,2020-03-05T12:46:12Z,2020-03-05T12:46:59Z,MERGED,True,14,12,4,https://github.com/ilammy,Resolve compiler warnings,3,"['core', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/597,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/597,"Compiling Themis with recent GCC and Clang versions produces new warnings. We are treating warnings as errors. Resolve the warnings to avoid build failues when we upgrade the compilers.
Commit summary
Suppress false positive warning
Recent versions of GCC are getting smarter, but here it has outsmarted itself. Drop the compiler a hint that a 'possible null pointer dereference' is in fact impossible in this case.
Do not ""fix up"" iterator ordering
Recent versions of GCC started printing a warning about those lines:
if (begin < end) {
    return input_buffer(&*begin, end - begin);
}
It says that we are ""assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2"". In fact, we do assume that.
Here we try to be ""helpful"" and correct a possible mistake of swapping begin and end iterators. However, after thinking about it, this mistake is unlikely to happen. Moreover, we really rely on the user to provide correct iterators:

They should point into the same container.
They should point to valid elements of said container.
The container must store its elements in contiguous memory.
The ""begin"" iterator should come before the ""end"" one.

If any of these assumptions is broken, you get undefined behavior (most likely resuling in a crash caused by segmentation fault). We cannot verify these assumptions by simply checking that one address is lower than the other. Debug builds of STL may check that, but that's as good as you can get it in C++.
So stop doing that (un)helpful fixup. Remove the check and do not swap iterators, removing the cause of the warning too.
Initialize structs with memset() manually
In C, it is perfectly legal to zero-initialize structures with {0}, like this:
struct themis_scell_pbkdf2_context kdf = {0};
However, this is not (always) legal in C++. Certain versions of afl-clang are more C++-leaning and produce warnings about uninitialized fields even when compiling C code.
Well, okay, I don't want to fence this code with suppressions, so replace this initialization is explicit memset() calls.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Compiling Themis with recent GCC and Clang versions produces new warnings. We are treating warnings as errors. Resolve the warnings to avoid build failues when we upgrade the compilers.
Commit summary
Suppress false positive warning
Recent versions of GCC are getting smarter, but here it has outsmarted itself. Drop the compiler a hint that a 'possible null pointer dereference' is in fact impossible in this case.
Do not ""fix up"" iterator ordering
Recent versions of GCC started printing a warning about those lines:
if (begin < end) {
    return input_buffer(&*begin, end - begin);
}
It says that we are ""assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2"". In fact, we do assume that.
Here we try to be ""helpful"" and correct a possible mistake of swapping begin and end iterators. However, after thinking about it, this mistake is unlikely to happen. Moreover, we really rely on the user to provide correct iterators:

They should point into the same container.
They should point to valid elements of said container.
The container must store its elements in contiguous memory.
The ""begin"" iterator should come before the ""end"" one.

If any of these assumptions is broken, you get undefined behavior (most likely resuling in a crash caused by segmentation fault). We cannot verify these assumptions by simply checking that one address is lower than the other. Debug builds of STL may check that, but that's as good as you can get it in C++.
So stop doing that (un)helpful fixup. Remove the check and do not swap iterators, removing the cause of the warning too.
Initialize structs with memset() manually
In C, it is perfectly legal to zero-initialize structures with {0}, like this:
struct themis_scell_pbkdf2_context kdf = {0};
However, this is not (always) legal in C++. Certain versions of afl-clang are more C++-leaning and produce warnings about uninitialized fields even when compiling C code.
Well, okay, I don't want to fence this code with suppressions, so replace this initialization is explicit memset() calls.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,598,2020-03-02T11:56:21Z,2020-03-05T12:46:39Z,2020-03-05T12:46:48Z,MERGED,True,40,6,8,https://github.com/ilammy,Explicitly disable Mac Catalyst support,1,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/598,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/598,"Some of our targets declare that they support both iOS and iPadOS. Themis has never supported iPadOS explicitly, so disable all that stuff. Actually, instead of explicitly disabling, just set it to default (which will be iOS only).
Recent versions of Xcode automatically enable Mac Catalyst – support layer allowing to run iPadOS applications on macOS. This breaks build because OpenSSL and BoringSSL dependencies explicitly disable Catalyst. To be on the safe side, explicitly disable Catalyst for all our projects. We may enable it later, together with iPadOS support.
All of this is currently invisible to Bitrise because it builds with older Xcode 10.2. However, macOS 10.14+ with Xcode 11.2+ is affected by this when building from command line.
Checklist

 Change is covered by automated tests (not really visible though)
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (nothing to note here, IMO)","Some of our targets declare that they support both iOS and iPadOS. Themis has never supported iPadOS explicitly, so disable all that stuff. Actually, instead of explicitly disabling, just set it to default (which will be iOS only).
Recent versions of Xcode automatically enable Mac Catalyst – support layer allowing to run iPadOS applications on macOS. This breaks build because OpenSSL and BoringSSL dependencies explicitly disable Catalyst. To be on the safe side, explicitly disable Catalyst for all our projects. We may enable it later, together with iPadOS support.
All of this is currently invisible to Bitrise because it builds with older Xcode 10.2. However, macOS 10.14+ with Xcode 11.2+ is affected by this when building from command line.
Checklist

 Change is covered by automated tests (not really visible though)
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (nothing to note here, IMO)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,599,2020-03-02T12:02:18Z,2020-03-05T12:47:30Z,2020-03-05T12:47:35Z,MERGED,True,4,58,3,https://github.com/ilammy,Fix podspec versioning and tests,2,"['O-iOS :iphone:', 'O-macOS :computer:', 'tests', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/599,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/599,"Remove the hack that we have hastily added to work around a packaging issue with GRKOpenSSL 1.0.2.19 (see #538, #539). We still pin the version to 1.0.2.18 though, because the library has never been updated and 1.0.2.19 is still broken as it was. However, we can't release the next version of Themis pinned to 0.12.1. Use the tagged version. This also lets the podspec to validate without warnings (from our part, at least).
Also remove the Podfile.lock from our unit test project. It is meant to be used with the latest version from master as evident from the Podfile. However, presence of Podfile.lock makes ""pod install"" to install an older version of Themis 0.11 which is lacks some new features that are being tested. (Bitrise is fine because it removes the lockfile manually.)
Remove the lock file to ensure that we are testing the trunk version of Themis, and add Podfile.lock to .gitignore to prevent it from being committed again on accident.
Checklist

 Change is covered by automated tests (somewhat, Bitrise does not validate podspec)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date","Remove the hack that we have hastily added to work around a packaging issue with GRKOpenSSL 1.0.2.19 (see #538, #539). We still pin the version to 1.0.2.18 though, because the library has never been updated and 1.0.2.19 is still broken as it was. However, we can't release the next version of Themis pinned to 0.12.1. Use the tagged version. This also lets the podspec to validate without warnings (from our part, at least).
Also remove the Podfile.lock from our unit test project. It is meant to be used with the latest version from master as evident from the Podfile. However, presence of Podfile.lock makes ""pod install"" to install an older version of Themis 0.11 which is lacks some new features that are being tested. (Bitrise is fine because it removes the lockfile manually.)
Remove the lock file to ensure that we are testing the trunk version of Themis, and add Podfile.lock to .gitignore to prevent it from being committed again on accident.
Checklist

 Change is covered by automated tests (somewhat, Bitrise does not validate podspec)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,599,2020-03-02T12:02:18Z,2020-03-05T12:47:30Z,2020-03-05T12:47:35Z,MERGED,True,4,58,3,https://github.com/ilammy,Fix podspec versioning and tests,2,"['O-iOS :iphone:', 'O-macOS :computer:', 'tests', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/599,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/599#issuecomment-595183597,"Remove the hack that we have hastily added to work around a packaging issue with GRKOpenSSL 1.0.2.19 (see #538, #539). We still pin the version to 1.0.2.18 though, because the library has never been updated and 1.0.2.19 is still broken as it was. However, we can't release the next version of Themis pinned to 0.12.1. Use the tagged version. This also lets the podspec to validate without warnings (from our part, at least).
Also remove the Podfile.lock from our unit test project. It is meant to be used with the latest version from master as evident from the Podfile. However, presence of Podfile.lock makes ""pod install"" to install an older version of Themis 0.11 which is lacks some new features that are being tested. (Bitrise is fine because it removes the lockfile manually.)
Remove the lock file to ensure that we are testing the trunk version of Themis, and add Podfile.lock to .gitignore to prevent it from being committed again on accident.
Checklist

 Change is covered by automated tests (somewhat, Bitrise does not validate podspec)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date","I admit that this change is not ideal, but at least it improves the use case we care more about: when the user checks out default branch (master) they'd expect tests to work.


What user checks out
What Themis version tests are actually using


    Before PRAfter PRIdeal


    master0.11mastermaster


    stable0.11masterstable


    0.110.11master0.11


Current approach ‘breaks’ historical branches, in a sense that we use newer Themis with older tests. However, it should still work if we’re careful enough with backwards compatibility.
The ideal approach would be to use something like development pods:
-pod 'themis', :git => ""https://github.com/cossacklabs/themis.git""
+pod 'themis', :path => ""../..""
so that tests use exactly the same version that's in the checked out tree. In my shallow experience, this often ends up broken and not working, but we might give it a try.
I've tried doing this, followed by pod update... and CocoaPods ate all remaining RAM, freezing up my Mac.
I take that as a no.
Another option is to manually update the Podfile.lock in a separate commit after we update unit-tests, but I don't really want to play this silly game to please the machine. It's easy to forget to do this, unless we put that into a checklist. And I don't want to remove local version hacks from CI because that means we'd be merging red pull requests... So I'd rather ‘break’ historical versions (which is easily fixed by manually editing Podfile after checkout, if you really need to test an old version against old tests).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,600,2020-03-02T12:27:06Z,2020-03-23T15:53:33Z,2020-03-23T15:55:19Z,MERGED,True,2827,380,48,https://github.com/ilammy,GitHub Actions automation,27,"['docs :books:', 'O-iOS :iphone:', 'W-PHPThemis :elephant:', 'O-Android :robot:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'core', 'W-GoThemis :hamster:', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'tests', 'O-Linux :penguin:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/600,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/600,"This PR adds automatic verification of Themis on GitHub Actions. You can find build results here. If you want to read some YAML and Bash, this is a code review that you’ll enjoy.
I have been monitoring GitHub Actions since they were in alpha. This changeset for Themis has been cooking since Actions’ beta. With this we make a pipe dream of automating everything a little bit closer. Well, if anything, I hope to regain some human dignity and no longer have to manually check each and every code sample of ours when we are making a release, like a monkey doing machine’s job.
In order to give you some incentive to merge and support this changeset, here are some goodies it brings:

Support for Linux and macOS builds (and possibly Windows in future)
Tests for all code samples we use as documentation
Ability to add self-hosted runners
Ability to fine-tune triggers (don't run entire test suite on README changes)
More reasonable caching mechanisms, reducing build times (a bit)
Better task split, making it easier to debug issues
Version-controlled configuration (I'm looking at you, Bitrise)
More lightweight UI that does not take eternity to load
First-class integration with GitHub (duh...)
Free for open source projects, no strings attached

Feature parity
As far as I can tell, Actions will be more or less on par with what we have running on CircleCI and Bitrise right now.

Click to show a comparison table



Feature
CircleCI
Bitrise
GitHub




Unit tests: Themis Core (Linux)
✅

✅


Unit tests: Themis Core (macOS)

✅
✅


Unit tests: Themis Core (sanitizers)
✅

✅


Benchmarks: Themis Core
✅

✅


Fuzzing: Themis Core
✅

✅


Misc: C/C++ static analysis
✅

✅


Misc: Code coverage with lcov 1
🤔




Misc: Leak check with Valgrind
✅

✅


Other language coverage
CircleCI
Bitrise
GitHub


Unit tests: ThemisPP
✅

✅


Unit tests: GoThemis
✅

✅


Unit tests: PHPThemis
✅

✅


Unit tests: JavaThemis 2
🤔

🤔


Unit tests: ObjCThemis

✅
✅


Unit tests: SwiftThemis

✅
✅


Unit tests: RustThemis
✅

✅


Unit tests: PyThemis
✅

✅


Unit tests: RbThemis
✅

✅


Unit tests: JsThemis
✅

✅


Unit tests: WasmThemis
✅

✅


Integration tests
CircleCI
Bitrise
GitHub


Integration tests: cross-language
✅

✅


Integration tests: Android
✅

✅


Integration tests: iOS

✅
✅


Package verification
CircleCI
Bitrise
GitHub


Install package: Carthage

✅
✅


Install package: CocoaPods

✅
✅


Build package: Carthage

✅
✅


Lint package: CocoaPods


✅


Code sample testing
CircleCI
Bitrise
GitHub


Doc tests: Themis Core


✅


Doc tests: ThemisPP


✅


Doc tests: GoThemis


✅


Doc tests: PHPThemis


✅


Doc tests: JavaThemis


😞 2


Doc tests: ObjCThemis


✅


Doc tests: SwiftThemis


✅


Doc tests: RustThemis
✅

✅


Doc tests: PyThemis


✅


Doc tests: RbThemis


✅


Doc tests: JsThemis


✅


Doc tests: WasmThemis


😞 3



1 We have something that calls lcov on CircleCI. It even posts something to Coveralls. But I'm not really sure whether we can trust this measurement. Though it's not bad.
2 We sorta kinda verify the JNI builds. But JavaThemis does not have a standalone unit test suite, thus we do not run it. Example projects exist but on “my pace” of their own, we do not verify them as well.
3 WasmThemis is syntactically compatible with JsThemis (except for the import), but does not have its own code examples and we do not verify existing ones for JsThemis with WasmThemis.

Hopefully, CircleCI and Bitrise could be retired after some time. Let's keep Actions running to race it against the competitors.
From my experience, the stability of the whole thing is not stellar. Sometimes the builds flake, especially the Android one. Furthermore, they tend to hang up occasionally. Logs take a while to pull too while the build is running.
Well, we'll see how it fares in production.
Commit summary
There are way too many of them, I'm not copying them all here. Please read commit messages directly if you're interested in details.
All testing actions are triggered either

by pushing to important integration branches,
or by submitting a pull request touching relevant files,
or on schedule at 06:00 UTC every day.

All of them are going to have at least unit-tests and examples jobs, with some more as appropriate.
Parting notes
Unfortunately, GitHub Actions do not make running Android tests easier. It is an unsatisfactory experience, to speak mildly. I'd say more, but it would be against our Code of Conduct.
*leaves behind a gun with a chambered round*
Builds for Apple platforms are tricky too. But at least the builds themselves work. (Thankfully, we don't have to deal with code signing right now. Otherwise, we'd be in hell.) On the other hand, dependency management is... on par or exceeding Android experience.
*returns and puts down two more rounds on the table*
(Soon we'll see how “amazing” Swift Package Manager is. I guess I should go learn new curse words and stock up on ammunition...)
Also, here is my pet peeve: time to open a dashboard with current build status.



Performance indicator
CircleCI
Bitrise
GitHub




HTTP request count
51
109
14


Data transferred (unpacked)
10.97 MB
10.88 MB
1.47 MB


Data transferred (on-the-wire)
3.25 MB
2.93 MB
371.65 KB


Time to visible build status (cold start)
7.30 s
6.60 s
2.07 s


Time to visible build status (with cache)
4.50 s
6.80 s
1.42 s



Sapienti sat.
Finally, I'd like to say some thanks:

@microsoft, for making this CI available to open-source projects for free. Otherwise we'd be paying $2+ per build of ObjCThemis alone.
Ondřej Surý, for maintaining PHP packages. Otherwise we'd be suffering with its compilation on our own.
@raelgc, for maintaining RVM packaging. Again, otherwise we'd be chasing that on our own.
Maintainers of all other stuff that we use directly or indirectly. Yes, even CocoaPods.

P.S. This PR is a label fiesta.
Checklist

 Change is covered by automated tests (hell yes is it now)
 Benchmark results are attached (GitHub Actions have artifacts too)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated

This PR is expected to fail until the following fixes are merged:

 #597: Resolve compiler warnings
 #598: Explicitly disable Mac Catalyst support
 #599: Fix podspec versioning and tests

Since this branch is not merged yet, pull request trigger rules do not apply. I have added a temporary branch in my repo which tracks this one and forces the builds to happen. You can look at its build status instead. Actions will trigger in the main repository once this branch is merged.","This PR adds automatic verification of Themis on GitHub Actions. You can find build results here. If you want to read some YAML and Bash, this is a code review that you’ll enjoy.
I have been monitoring GitHub Actions since they were in alpha. This changeset for Themis has been cooking since Actions’ beta. With this we make a pipe dream of automating everything a little bit closer. Well, if anything, I hope to regain some human dignity and no longer have to manually check each and every code sample of ours when we are making a release, like a monkey doing machine’s job.
In order to give you some incentive to merge and support this changeset, here are some goodies it brings:

Support for Linux and macOS builds (and possibly Windows in future)
Tests for all code samples we use as documentation
Ability to add self-hosted runners
Ability to fine-tune triggers (don't run entire test suite on README changes)
More reasonable caching mechanisms, reducing build times (a bit)
Better task split, making it easier to debug issues
Version-controlled configuration (I'm looking at you, Bitrise)
More lightweight UI that does not take eternity to load
First-class integration with GitHub (duh...)
Free for open source projects, no strings attached

Feature parity
As far as I can tell, Actions will be more or less on par with what we have running on CircleCI and Bitrise right now.

Click to show a comparison table



Feature
CircleCI
Bitrise
GitHub




Unit tests: Themis Core (Linux)
✅

✅


Unit tests: Themis Core (macOS)

✅
✅


Unit tests: Themis Core (sanitizers)
✅

✅


Benchmarks: Themis Core
✅

✅


Fuzzing: Themis Core
✅

✅


Misc: C/C++ static analysis
✅

✅


Misc: Code coverage with lcov 1
🤔




Misc: Leak check with Valgrind
✅

✅


Other language coverage
CircleCI
Bitrise
GitHub


Unit tests: ThemisPP
✅

✅


Unit tests: GoThemis
✅

✅


Unit tests: PHPThemis
✅

✅


Unit tests: JavaThemis 2
🤔

🤔


Unit tests: ObjCThemis

✅
✅


Unit tests: SwiftThemis

✅
✅


Unit tests: RustThemis
✅

✅


Unit tests: PyThemis
✅

✅


Unit tests: RbThemis
✅

✅


Unit tests: JsThemis
✅

✅


Unit tests: WasmThemis
✅

✅


Integration tests
CircleCI
Bitrise
GitHub


Integration tests: cross-language
✅

✅


Integration tests: Android
✅

✅


Integration tests: iOS

✅
✅


Package verification
CircleCI
Bitrise
GitHub


Install package: Carthage

✅
✅


Install package: CocoaPods

✅
✅


Build package: Carthage

✅
✅


Lint package: CocoaPods


✅


Code sample testing
CircleCI
Bitrise
GitHub


Doc tests: Themis Core


✅


Doc tests: ThemisPP


✅


Doc tests: GoThemis


✅


Doc tests: PHPThemis


✅


Doc tests: JavaThemis


😞 2


Doc tests: ObjCThemis


✅


Doc tests: SwiftThemis


✅


Doc tests: RustThemis
✅

✅


Doc tests: PyThemis


✅


Doc tests: RbThemis


✅


Doc tests: JsThemis


✅


Doc tests: WasmThemis


😞 3



1 We have something that calls lcov on CircleCI. It even posts something to Coveralls. But I'm not really sure whether we can trust this measurement. Though it's not bad.
2 We sorta kinda verify the JNI builds. But JavaThemis does not have a standalone unit test suite, thus we do not run it. Example projects exist but on “my pace” of their own, we do not verify them as well.
3 WasmThemis is syntactically compatible with JsThemis (except for the import), but does not have its own code examples and we do not verify existing ones for JsThemis with WasmThemis.

Hopefully, CircleCI and Bitrise could be retired after some time. Let's keep Actions running to race it against the competitors.
From my experience, the stability of the whole thing is not stellar. Sometimes the builds flake, especially the Android one. Furthermore, they tend to hang up occasionally. Logs take a while to pull too while the build is running.
Well, we'll see how it fares in production.
Commit summary
There are way too many of them, I'm not copying them all here. Please read commit messages directly if you're interested in details.
All testing actions are triggered either

by pushing to important integration branches,
or by submitting a pull request touching relevant files,
or on schedule at 06:00 UTC every day.

All of them are going to have at least unit-tests and examples jobs, with some more as appropriate.
Parting notes
Unfortunately, GitHub Actions do not make running Android tests easier. It is an unsatisfactory experience, to speak mildly. I'd say more, but it would be against our Code of Conduct.
*leaves behind a gun with a chambered round*
Builds for Apple platforms are tricky too. But at least the builds themselves work. (Thankfully, we don't have to deal with code signing right now. Otherwise, we'd be in hell.) On the other hand, dependency management is... on par or exceeding Android experience.
*returns and puts down two more rounds on the table*
(Soon we'll see how “amazing” Swift Package Manager is. I guess I should go learn new curse words and stock up on ammunition...)
Also, here is my pet peeve: time to open a dashboard with current build status.



Performance indicator
CircleCI
Bitrise
GitHub




HTTP request count
51
109
14


Data transferred (unpacked)
10.97 MB
10.88 MB
1.47 MB


Data transferred (on-the-wire)
3.25 MB
2.93 MB
371.65 KB


Time to visible build status (cold start)
7.30 s
6.60 s
2.07 s


Time to visible build status (with cache)
4.50 s
6.80 s
1.42 s



Sapienti sat.
Finally, I'd like to say some thanks:

@microsoft, for making this CI available to open-source projects for free. Otherwise we'd be paying $2+ per build of ObjCThemis alone.
Ondřej Surý, for maintaining PHP packages. Otherwise we'd be suffering with its compilation on our own.
@raelgc, for maintaining RVM packaging. Again, otherwise we'd be chasing that on our own.
Maintainers of all other stuff that we use directly or indirectly. Yes, even CocoaPods.

P.S. This PR is a label fiesta.
Checklist

 Change is covered by automated tests (hell yes is it now)
 Benchmark results are attached (GitHub Actions have artifacts too)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated

This PR is expected to fail until the following fixes are merged:

 #597: Resolve compiler warnings
 #598: Explicitly disable Mac Catalyst support
 #599: Fix podspec versioning and tests

Since this branch is not merged yet, pull request trigger rules do not apply. I have added a temporary branch in my repo which tracks this one and forces the builds to happen. You can look at its build status instead. Actions will trigger in the main repository once this branch is merged.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,600,2020-03-02T12:27:06Z,2020-03-23T15:53:33Z,2020-03-23T15:55:19Z,MERGED,True,2827,380,48,https://github.com/ilammy,GitHub Actions automation,27,"['docs :books:', 'O-iOS :iphone:', 'W-PHPThemis :elephant:', 'O-Android :robot:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'core', 'W-GoThemis :hamster:', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'tests', 'O-Linux :penguin:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/600,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/600#issuecomment-593432836,"This PR adds automatic verification of Themis on GitHub Actions. You can find build results here. If you want to read some YAML and Bash, this is a code review that you’ll enjoy.
I have been monitoring GitHub Actions since they were in alpha. This changeset for Themis has been cooking since Actions’ beta. With this we make a pipe dream of automating everything a little bit closer. Well, if anything, I hope to regain some human dignity and no longer have to manually check each and every code sample of ours when we are making a release, like a monkey doing machine’s job.
In order to give you some incentive to merge and support this changeset, here are some goodies it brings:

Support for Linux and macOS builds (and possibly Windows in future)
Tests for all code samples we use as documentation
Ability to add self-hosted runners
Ability to fine-tune triggers (don't run entire test suite on README changes)
More reasonable caching mechanisms, reducing build times (a bit)
Better task split, making it easier to debug issues
Version-controlled configuration (I'm looking at you, Bitrise)
More lightweight UI that does not take eternity to load
First-class integration with GitHub (duh...)
Free for open source projects, no strings attached

Feature parity
As far as I can tell, Actions will be more or less on par with what we have running on CircleCI and Bitrise right now.

Click to show a comparison table



Feature
CircleCI
Bitrise
GitHub




Unit tests: Themis Core (Linux)
✅

✅


Unit tests: Themis Core (macOS)

✅
✅


Unit tests: Themis Core (sanitizers)
✅

✅


Benchmarks: Themis Core
✅

✅


Fuzzing: Themis Core
✅

✅


Misc: C/C++ static analysis
✅

✅


Misc: Code coverage with lcov 1
🤔




Misc: Leak check with Valgrind
✅

✅


Other language coverage
CircleCI
Bitrise
GitHub


Unit tests: ThemisPP
✅

✅


Unit tests: GoThemis
✅

✅


Unit tests: PHPThemis
✅

✅


Unit tests: JavaThemis 2
🤔

🤔


Unit tests: ObjCThemis

✅
✅


Unit tests: SwiftThemis

✅
✅


Unit tests: RustThemis
✅

✅


Unit tests: PyThemis
✅

✅


Unit tests: RbThemis
✅

✅


Unit tests: JsThemis
✅

✅


Unit tests: WasmThemis
✅

✅


Integration tests
CircleCI
Bitrise
GitHub


Integration tests: cross-language
✅

✅


Integration tests: Android
✅

✅


Integration tests: iOS

✅
✅


Package verification
CircleCI
Bitrise
GitHub


Install package: Carthage

✅
✅


Install package: CocoaPods

✅
✅


Build package: Carthage

✅
✅


Lint package: CocoaPods


✅


Code sample testing
CircleCI
Bitrise
GitHub


Doc tests: Themis Core


✅


Doc tests: ThemisPP


✅


Doc tests: GoThemis


✅


Doc tests: PHPThemis


✅


Doc tests: JavaThemis


😞 2


Doc tests: ObjCThemis


✅


Doc tests: SwiftThemis


✅


Doc tests: RustThemis
✅

✅


Doc tests: PyThemis


✅


Doc tests: RbThemis


✅


Doc tests: JsThemis


✅


Doc tests: WasmThemis


😞 3



1 We have something that calls lcov on CircleCI. It even posts something to Coveralls. But I'm not really sure whether we can trust this measurement. Though it's not bad.
2 We sorta kinda verify the JNI builds. But JavaThemis does not have a standalone unit test suite, thus we do not run it. Example projects exist but on “my pace” of their own, we do not verify them as well.
3 WasmThemis is syntactically compatible with JsThemis (except for the import), but does not have its own code examples and we do not verify existing ones for JsThemis with WasmThemis.

Hopefully, CircleCI and Bitrise could be retired after some time. Let's keep Actions running to race it against the competitors.
From my experience, the stability of the whole thing is not stellar. Sometimes the builds flake, especially the Android one. Furthermore, they tend to hang up occasionally. Logs take a while to pull too while the build is running.
Well, we'll see how it fares in production.
Commit summary
There are way too many of them, I'm not copying them all here. Please read commit messages directly if you're interested in details.
All testing actions are triggered either

by pushing to important integration branches,
or by submitting a pull request touching relevant files,
or on schedule at 06:00 UTC every day.

All of them are going to have at least unit-tests and examples jobs, with some more as appropriate.
Parting notes
Unfortunately, GitHub Actions do not make running Android tests easier. It is an unsatisfactory experience, to speak mildly. I'd say more, but it would be against our Code of Conduct.
*leaves behind a gun with a chambered round*
Builds for Apple platforms are tricky too. But at least the builds themselves work. (Thankfully, we don't have to deal with code signing right now. Otherwise, we'd be in hell.) On the other hand, dependency management is... on par or exceeding Android experience.
*returns and puts down two more rounds on the table*
(Soon we'll see how “amazing” Swift Package Manager is. I guess I should go learn new curse words and stock up on ammunition...)
Also, here is my pet peeve: time to open a dashboard with current build status.



Performance indicator
CircleCI
Bitrise
GitHub




HTTP request count
51
109
14


Data transferred (unpacked)
10.97 MB
10.88 MB
1.47 MB


Data transferred (on-the-wire)
3.25 MB
2.93 MB
371.65 KB


Time to visible build status (cold start)
7.30 s
6.60 s
2.07 s


Time to visible build status (with cache)
4.50 s
6.80 s
1.42 s



Sapienti sat.
Finally, I'd like to say some thanks:

@microsoft, for making this CI available to open-source projects for free. Otherwise we'd be paying $2+ per build of ObjCThemis alone.
Ondřej Surý, for maintaining PHP packages. Otherwise we'd be suffering with its compilation on our own.
@raelgc, for maintaining RVM packaging. Again, otherwise we'd be chasing that on our own.
Maintainers of all other stuff that we use directly or indirectly. Yes, even CocoaPods.

P.S. This PR is a label fiesta.
Checklist

 Change is covered by automated tests (hell yes is it now)
 Benchmark results are attached (GitHub Actions have artifacts too)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated

This PR is expected to fail until the following fixes are merged:

 #597: Resolve compiler warnings
 #598: Explicitly disable Mac Catalyst support
 #599: Fix podspec versioning and tests

Since this branch is not merged yet, pull request trigger rules do not apply. I have added a temporary branch in my repo which tracks this one and forces the builds to happen. You can look at its build status instead. Actions will trigger in the main repository once this branch is merged.",we need one more label: ci_maniac )),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,600,2020-03-02T12:27:06Z,2020-03-23T15:53:33Z,2020-03-23T15:55:19Z,MERGED,True,2827,380,48,https://github.com/ilammy,GitHub Actions automation,27,"['docs :books:', 'O-iOS :iphone:', 'W-PHPThemis :elephant:', 'O-Android :robot:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'core', 'W-GoThemis :hamster:', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'tests', 'O-Linux :penguin:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/600,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/600#issuecomment-601353104,"This PR adds automatic verification of Themis on GitHub Actions. You can find build results here. If you want to read some YAML and Bash, this is a code review that you’ll enjoy.
I have been monitoring GitHub Actions since they were in alpha. This changeset for Themis has been cooking since Actions’ beta. With this we make a pipe dream of automating everything a little bit closer. Well, if anything, I hope to regain some human dignity and no longer have to manually check each and every code sample of ours when we are making a release, like a monkey doing machine’s job.
In order to give you some incentive to merge and support this changeset, here are some goodies it brings:

Support for Linux and macOS builds (and possibly Windows in future)
Tests for all code samples we use as documentation
Ability to add self-hosted runners
Ability to fine-tune triggers (don't run entire test suite on README changes)
More reasonable caching mechanisms, reducing build times (a bit)
Better task split, making it easier to debug issues
Version-controlled configuration (I'm looking at you, Bitrise)
More lightweight UI that does not take eternity to load
First-class integration with GitHub (duh...)
Free for open source projects, no strings attached

Feature parity
As far as I can tell, Actions will be more or less on par with what we have running on CircleCI and Bitrise right now.

Click to show a comparison table



Feature
CircleCI
Bitrise
GitHub




Unit tests: Themis Core (Linux)
✅

✅


Unit tests: Themis Core (macOS)

✅
✅


Unit tests: Themis Core (sanitizers)
✅

✅


Benchmarks: Themis Core
✅

✅


Fuzzing: Themis Core
✅

✅


Misc: C/C++ static analysis
✅

✅


Misc: Code coverage with lcov 1
🤔




Misc: Leak check with Valgrind
✅

✅


Other language coverage
CircleCI
Bitrise
GitHub


Unit tests: ThemisPP
✅

✅


Unit tests: GoThemis
✅

✅


Unit tests: PHPThemis
✅

✅


Unit tests: JavaThemis 2
🤔

🤔


Unit tests: ObjCThemis

✅
✅


Unit tests: SwiftThemis

✅
✅


Unit tests: RustThemis
✅

✅


Unit tests: PyThemis
✅

✅


Unit tests: RbThemis
✅

✅


Unit tests: JsThemis
✅

✅


Unit tests: WasmThemis
✅

✅


Integration tests
CircleCI
Bitrise
GitHub


Integration tests: cross-language
✅

✅


Integration tests: Android
✅

✅


Integration tests: iOS

✅
✅


Package verification
CircleCI
Bitrise
GitHub


Install package: Carthage

✅
✅


Install package: CocoaPods

✅
✅


Build package: Carthage

✅
✅


Lint package: CocoaPods


✅


Code sample testing
CircleCI
Bitrise
GitHub


Doc tests: Themis Core


✅


Doc tests: ThemisPP


✅


Doc tests: GoThemis


✅


Doc tests: PHPThemis


✅


Doc tests: JavaThemis


😞 2


Doc tests: ObjCThemis


✅


Doc tests: SwiftThemis


✅


Doc tests: RustThemis
✅

✅


Doc tests: PyThemis


✅


Doc tests: RbThemis


✅


Doc tests: JsThemis


✅


Doc tests: WasmThemis


😞 3



1 We have something that calls lcov on CircleCI. It even posts something to Coveralls. But I'm not really sure whether we can trust this measurement. Though it's not bad.
2 We sorta kinda verify the JNI builds. But JavaThemis does not have a standalone unit test suite, thus we do not run it. Example projects exist but on “my pace” of their own, we do not verify them as well.
3 WasmThemis is syntactically compatible with JsThemis (except for the import), but does not have its own code examples and we do not verify existing ones for JsThemis with WasmThemis.

Hopefully, CircleCI and Bitrise could be retired after some time. Let's keep Actions running to race it against the competitors.
From my experience, the stability of the whole thing is not stellar. Sometimes the builds flake, especially the Android one. Furthermore, they tend to hang up occasionally. Logs take a while to pull too while the build is running.
Well, we'll see how it fares in production.
Commit summary
There are way too many of them, I'm not copying them all here. Please read commit messages directly if you're interested in details.
All testing actions are triggered either

by pushing to important integration branches,
or by submitting a pull request touching relevant files,
or on schedule at 06:00 UTC every day.

All of them are going to have at least unit-tests and examples jobs, with some more as appropriate.
Parting notes
Unfortunately, GitHub Actions do not make running Android tests easier. It is an unsatisfactory experience, to speak mildly. I'd say more, but it would be against our Code of Conduct.
*leaves behind a gun with a chambered round*
Builds for Apple platforms are tricky too. But at least the builds themselves work. (Thankfully, we don't have to deal with code signing right now. Otherwise, we'd be in hell.) On the other hand, dependency management is... on par or exceeding Android experience.
*returns and puts down two more rounds on the table*
(Soon we'll see how “amazing” Swift Package Manager is. I guess I should go learn new curse words and stock up on ammunition...)
Also, here is my pet peeve: time to open a dashboard with current build status.



Performance indicator
CircleCI
Bitrise
GitHub




HTTP request count
51
109
14


Data transferred (unpacked)
10.97 MB
10.88 MB
1.47 MB


Data transferred (on-the-wire)
3.25 MB
2.93 MB
371.65 KB


Time to visible build status (cold start)
7.30 s
6.60 s
2.07 s


Time to visible build status (with cache)
4.50 s
6.80 s
1.42 s



Sapienti sat.
Finally, I'd like to say some thanks:

@microsoft, for making this CI available to open-source projects for free. Otherwise we'd be paying $2+ per build of ObjCThemis alone.
Ondřej Surý, for maintaining PHP packages. Otherwise we'd be suffering with its compilation on our own.
@raelgc, for maintaining RVM packaging. Again, otherwise we'd be chasing that on our own.
Maintainers of all other stuff that we use directly or indirectly. Yes, even CocoaPods.

P.S. This PR is a label fiesta.
Checklist

 Change is covered by automated tests (hell yes is it now)
 Benchmark results are attached (GitHub Actions have artifacts too)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated

This PR is expected to fail until the following fixes are merged:

 #597: Resolve compiler warnings
 #598: Explicitly disable Mac Catalyst support
 #599: Fix podspec versioning and tests

Since this branch is not merged yet, pull request trigger rules do not apply. I have added a temporary branch in my repo which tracks this one and forces the builds to happen. You can look at its build status instead. Actions will trigger in the main repository once this branch is merged.",what exactly are we waiting here? let's merge and see what happens?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,600,2020-03-02T12:27:06Z,2020-03-23T15:53:33Z,2020-03-23T15:55:19Z,MERGED,True,2827,380,48,https://github.com/ilammy,GitHub Actions automation,27,"['docs :books:', 'O-iOS :iphone:', 'W-PHPThemis :elephant:', 'O-Android :robot:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'core', 'W-GoThemis :hamster:', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'tests', 'O-Linux :penguin:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/600,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/600#issuecomment-601850903,"This PR adds automatic verification of Themis on GitHub Actions. You can find build results here. If you want to read some YAML and Bash, this is a code review that you’ll enjoy.
I have been monitoring GitHub Actions since they were in alpha. This changeset for Themis has been cooking since Actions’ beta. With this we make a pipe dream of automating everything a little bit closer. Well, if anything, I hope to regain some human dignity and no longer have to manually check each and every code sample of ours when we are making a release, like a monkey doing machine’s job.
In order to give you some incentive to merge and support this changeset, here are some goodies it brings:

Support for Linux and macOS builds (and possibly Windows in future)
Tests for all code samples we use as documentation
Ability to add self-hosted runners
Ability to fine-tune triggers (don't run entire test suite on README changes)
More reasonable caching mechanisms, reducing build times (a bit)
Better task split, making it easier to debug issues
Version-controlled configuration (I'm looking at you, Bitrise)
More lightweight UI that does not take eternity to load
First-class integration with GitHub (duh...)
Free for open source projects, no strings attached

Feature parity
As far as I can tell, Actions will be more or less on par with what we have running on CircleCI and Bitrise right now.

Click to show a comparison table



Feature
CircleCI
Bitrise
GitHub




Unit tests: Themis Core (Linux)
✅

✅


Unit tests: Themis Core (macOS)

✅
✅


Unit tests: Themis Core (sanitizers)
✅

✅


Benchmarks: Themis Core
✅

✅


Fuzzing: Themis Core
✅

✅


Misc: C/C++ static analysis
✅

✅


Misc: Code coverage with lcov 1
🤔




Misc: Leak check with Valgrind
✅

✅


Other language coverage
CircleCI
Bitrise
GitHub


Unit tests: ThemisPP
✅

✅


Unit tests: GoThemis
✅

✅


Unit tests: PHPThemis
✅

✅


Unit tests: JavaThemis 2
🤔

🤔


Unit tests: ObjCThemis

✅
✅


Unit tests: SwiftThemis

✅
✅


Unit tests: RustThemis
✅

✅


Unit tests: PyThemis
✅

✅


Unit tests: RbThemis
✅

✅


Unit tests: JsThemis
✅

✅


Unit tests: WasmThemis
✅

✅


Integration tests
CircleCI
Bitrise
GitHub


Integration tests: cross-language
✅

✅


Integration tests: Android
✅

✅


Integration tests: iOS

✅
✅


Package verification
CircleCI
Bitrise
GitHub


Install package: Carthage

✅
✅


Install package: CocoaPods

✅
✅


Build package: Carthage

✅
✅


Lint package: CocoaPods


✅


Code sample testing
CircleCI
Bitrise
GitHub


Doc tests: Themis Core


✅


Doc tests: ThemisPP


✅


Doc tests: GoThemis


✅


Doc tests: PHPThemis


✅


Doc tests: JavaThemis


😞 2


Doc tests: ObjCThemis


✅


Doc tests: SwiftThemis


✅


Doc tests: RustThemis
✅

✅


Doc tests: PyThemis


✅


Doc tests: RbThemis


✅


Doc tests: JsThemis


✅


Doc tests: WasmThemis


😞 3



1 We have something that calls lcov on CircleCI. It even posts something to Coveralls. But I'm not really sure whether we can trust this measurement. Though it's not bad.
2 We sorta kinda verify the JNI builds. But JavaThemis does not have a standalone unit test suite, thus we do not run it. Example projects exist but on “my pace” of their own, we do not verify them as well.
3 WasmThemis is syntactically compatible with JsThemis (except for the import), but does not have its own code examples and we do not verify existing ones for JsThemis with WasmThemis.

Hopefully, CircleCI and Bitrise could be retired after some time. Let's keep Actions running to race it against the competitors.
From my experience, the stability of the whole thing is not stellar. Sometimes the builds flake, especially the Android one. Furthermore, they tend to hang up occasionally. Logs take a while to pull too while the build is running.
Well, we'll see how it fares in production.
Commit summary
There are way too many of them, I'm not copying them all here. Please read commit messages directly if you're interested in details.
All testing actions are triggered either

by pushing to important integration branches,
or by submitting a pull request touching relevant files,
or on schedule at 06:00 UTC every day.

All of them are going to have at least unit-tests and examples jobs, with some more as appropriate.
Parting notes
Unfortunately, GitHub Actions do not make running Android tests easier. It is an unsatisfactory experience, to speak mildly. I'd say more, but it would be against our Code of Conduct.
*leaves behind a gun with a chambered round*
Builds for Apple platforms are tricky too. But at least the builds themselves work. (Thankfully, we don't have to deal with code signing right now. Otherwise, we'd be in hell.) On the other hand, dependency management is... on par or exceeding Android experience.
*returns and puts down two more rounds on the table*
(Soon we'll see how “amazing” Swift Package Manager is. I guess I should go learn new curse words and stock up on ammunition...)
Also, here is my pet peeve: time to open a dashboard with current build status.



Performance indicator
CircleCI
Bitrise
GitHub




HTTP request count
51
109
14


Data transferred (unpacked)
10.97 MB
10.88 MB
1.47 MB


Data transferred (on-the-wire)
3.25 MB
2.93 MB
371.65 KB


Time to visible build status (cold start)
7.30 s
6.60 s
2.07 s


Time to visible build status (with cache)
4.50 s
6.80 s
1.42 s



Sapienti sat.
Finally, I'd like to say some thanks:

@microsoft, for making this CI available to open-source projects for free. Otherwise we'd be paying $2+ per build of ObjCThemis alone.
Ondřej Surý, for maintaining PHP packages. Otherwise we'd be suffering with its compilation on our own.
@raelgc, for maintaining RVM packaging. Again, otherwise we'd be chasing that on our own.
Maintainers of all other stuff that we use directly or indirectly. Yes, even CocoaPods.

P.S. This PR is a label fiesta.
Checklist

 Change is covered by automated tests (hell yes is it now)
 Benchmark results are attached (GitHub Actions have artifacts too)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated

This PR is expected to fail until the following fixes are merged:

 #597: Resolve compiler warnings
 #598: Explicitly disable Mac Catalyst support
 #599: Fix podspec versioning and tests

Since this branch is not merged yet, pull request trigger rules do not apply. I have added a temporary branch in my repo which tracks this one and forces the builds to happen. You can look at its build status instead. Actions will trigger in the main repository once this branch is merged.","I've synced up this branch with master:

Added tests for recently added Carthage project for ObjCThemis
Fixed an issue in Python code sample for Secure Cell
Fixed whatever stuff broke in JavaScript land this week",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,601,2020-03-02T16:53:56Z,2020-03-05T11:00:06Z,2020-03-05T12:49:27Z,MERGED,True,23,5,3,https://github.com/ilammy,Use correct Secure Cell API in PHPThemis,2,['W-PHPThemis :elephant:'],https://github.com/cossacklabs/themis/pull/601,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/601,"Hey, #594, it's not enough to name the function with_passphrase and accept passphrase arguments. You also need to call Themis Core API that uses passphrases.
PHP 5 calls the correct API but PHP 7 fell prey to a copy-paste mistake.
Moral of the story: copy-paste is bad 🤦‍♂
(Caught by integration tests with Python in #596, they’re good. I wonder if we need PHP 5 ⟺ PHP 7 integration tests now. Since our current tests use whatever PHP is installed in the system.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Hey, #594, it's not enough to name the function with_passphrase and accept passphrase arguments. You also need to call Themis Core API that uses passphrases.
PHP 5 calls the correct API but PHP 7 fell prey to a copy-paste mistake.
Moral of the story: copy-paste is bad 🤦‍♂
(Caught by integration tests with Python in #596, they’re good. I wonder if we need PHP 5 ⟺ PHP 7 integration tests now. Since our current tests use whatever PHP is installed in the system.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,601,2020-03-02T16:53:56Z,2020-03-05T11:00:06Z,2020-03-05T12:49:27Z,MERGED,True,23,5,3,https://github.com/ilammy,Use correct Secure Cell API in PHPThemis,2,['W-PHPThemis :elephant:'],https://github.com/cossacklabs/themis/pull/601,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/601#issuecomment-593503414,"Hey, #594, it's not enough to name the function with_passphrase and accept passphrase arguments. You also need to call Themis Core API that uses passphrases.
PHP 5 calls the correct API but PHP 7 fell prey to a copy-paste mistake.
Moral of the story: copy-paste is bad 🤦‍♂
(Caught by integration tests with Python in #596, they’re good. I wonder if we need PHP 5 ⟺ PHP 7 integration tests now. Since our current tests use whatever PHP is installed in the system.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","This is also the reason why I don’t like to have two APIs which accept identical arguments, do similar but different things with only tiny difference in naming.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,601,2020-03-02T16:53:56Z,2020-03-05T11:00:06Z,2020-03-05T12:49:27Z,MERGED,True,23,5,3,https://github.com/ilammy,Use correct Secure Cell API in PHPThemis,2,['W-PHPThemis :elephant:'],https://github.com/cossacklabs/themis/pull/601,https://github.com/Lagovas,3,https://github.com/cossacklabs/themis/pull/601#issuecomment-593508507,"Hey, #594, it's not enough to name the function with_passphrase and accept passphrase arguments. You also need to call Themis Core API that uses passphrases.
PHP 5 calls the correct API but PHP 7 fell prey to a copy-paste mistake.
Moral of the story: copy-paste is bad 🤦‍♂
(Caught by integration tests with Python in #596, they’re good. I wonder if we need PHP 5 ⟺ PHP 7 integration tests now. Since our current tests use whatever PHP is installed in the system.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","next time better to start to implement new features in php7 and then copy-paste them to php5, because second is a candidate to drop )",True,{'LAUGH': ['https://github.com/ilammy']}
cossacklabs/themis,https://github.com/cossacklabs/themis,602,2020-03-09T14:38:28Z,2020-03-10T08:00:13Z,2020-03-11T11:21:51Z,MERGED,True,6,0,1,https://github.com/ilammy,Use emcmake when building BoringSSL with Emscripten,1,"['compatibility', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/602,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/602,"Emscripten toolchain includes emconfigure tool which sets various standard variables to setup crosscompilation. Since v1.14.1 Emscripten includes emcmake tool which is effectively emconfigure for CMake.
Themis can build embedded BoringSSL when it is selected as cryptographic backend. With Emscripten we always use (and build) embedded BoringSSL. For that we use emconfigure cmake to configure the build.
Since Emscripten v1.39.9 (released 3 days ago) it is now mandatory to use emcmake for CMake configuration, as evident from the following error message:
$ emmake make wasmthemis
make: make wasmthemis
building embedded BoringSSL...
error: use `emcmake` rather then `emconfigure` for cmake projects
make: *** [build/boringssl/crypto/libcrypto.a] Error 1

Use emmake if it is available, otherwise fall back to emconfigure when building embedded BoringSSL with Emscripten.
Interface for Themis users does not change: it's still simply emmake make wasmthemis and we take care of all compatibility details.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation","Emscripten toolchain includes emconfigure tool which sets various standard variables to setup crosscompilation. Since v1.14.1 Emscripten includes emcmake tool which is effectively emconfigure for CMake.
Themis can build embedded BoringSSL when it is selected as cryptographic backend. With Emscripten we always use (and build) embedded BoringSSL. For that we use emconfigure cmake to configure the build.
Since Emscripten v1.39.9 (released 3 days ago) it is now mandatory to use emcmake for CMake configuration, as evident from the following error message:
$ emmake make wasmthemis
make: make wasmthemis
building embedded BoringSSL...
error: use `emcmake` rather then `emconfigure` for cmake projects
make: *** [build/boringssl/crypto/libcrypto.a] Error 1

Use emmake if it is available, otherwise fall back to emconfigure when building embedded BoringSSL with Emscripten.
Interface for Themis users does not change: it's still simply emmake make wasmthemis and we take care of all compatibility details.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,603,2020-03-11T14:09:43Z,2020-03-18T12:42:07Z,2020-03-18T12:42:13Z,MERGED,True,943,197,8,https://github.com/ilammy,Secure Cell passphrase API: RbThemis,8,['W-RbThemis :diamonds:'],https://github.com/cossacklabs/themis/pull/603,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/603,"Add support of Secure Cell passphrase API to RbThemis. The API is described in RFC 3.4 (with corrections).
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell:
require 'rbthemis'

cell = Themis::ScellSealPassphrase.new('my little password: secrets are magic')

encrypted = cell.encrypt('message data')
decrypted = cell.decrypt(encrypted)

assert_equals(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
# Get a new key if you don't have one already:
master_key = Themis::gen_sym_key
# Or use an existing value that you store somewhere:
master_key = Base64.decode64 'b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U='

cell = Themis::ScellSeal.new(master_key)

encrypted = cell.encrypt('message data')
decrypted = cell.decrypt(encrypted)

assert_equals(decrypted, message)
API compatibility
Themis::Scell is deprecated
Instead of Themis::Scell with run-time mode-setting you should instantiate an appropriate subclass:



New API
Old API




Themis::ScellSeal.new(key)
Themis::Scell.new(key, Themis::Scell::SEAL_MODE)


Themis::ScellSealPassphrase.new(passphrase)
not available


Themis::ScellTokenProtect.new(key)
Themis::Scell.new(key, Themis::Scell::TOKEN_PROTECT_MODE)


Themis::ScellContextImprint.new(key
Themis::Scell.new(key, Themis::Scell::CONTEXT_IMPRINT_MODE)



New objects have compatible API and no further changes in the code base should be required. However, you may wish to revisit decrypt calls for Token Protect.
Simpler Token Protect API
Token Protect mode now accepts encrypted data and token as separate arguments instead of requiring an array.
decrypted = cell.decrypt([encrypted, token], context) # old, requires a list

decrypted = cell.decrypt(encrypted, token, context)   # new, separate args
Unicode considerations
Master keys are always binary data. RbThemis ignores their encoding and always uses raw key bytes as is.
Passphrases are usually provided as text. In this case passphrase will be encoded in UTF-8 for compatibility with other Themis platforms. If you need a different encoding, please use encoding: optional argument, for example:
cell = Themis::ScellSealPassphrase.new(passphrase, encoding: 'UTF-16BE')
Binary passphrases are also accepted. If the passphrase encoding is BINARY then it is used as is, without any conversion.
Technical notes
Initially a slightly different syntax was planned:
cell = Themis::ScellSeal.with_key binary_master_key

cell = Themis::SCellSeal.with_passphrase 'a secret'
It had a noble idea of maintaining similarity with other languages which do not have named arguments. However, after updating tests and examples this syntax came off as unnatural. It also does not provide any value (it's even longer!) and we are not constrained by compatibility, like in Python.
Furthermore, in Ruby you import the entire module so Themis::SCellSealPassphrase class is visible. Other languages may require an awkward import to use SCellSealPassphrase name, but in Ruby you can use it right away.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","Add support of Secure Cell passphrase API to RbThemis. The API is described in RFC 3.4 (with corrections).
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell:
require 'rbthemis'

cell = Themis::ScellSealPassphrase.new('my little password: secrets are magic')

encrypted = cell.encrypt('message data')
decrypted = cell.decrypt(encrypted)

assert_equals(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
# Get a new key if you don't have one already:
master_key = Themis::gen_sym_key
# Or use an existing value that you store somewhere:
master_key = Base64.decode64 'b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U='

cell = Themis::ScellSeal.new(master_key)

encrypted = cell.encrypt('message data')
decrypted = cell.decrypt(encrypted)

assert_equals(decrypted, message)
API compatibility
Themis::Scell is deprecated
Instead of Themis::Scell with run-time mode-setting you should instantiate an appropriate subclass:



New API
Old API




Themis::ScellSeal.new(key)
Themis::Scell.new(key, Themis::Scell::SEAL_MODE)


Themis::ScellSealPassphrase.new(passphrase)
not available


Themis::ScellTokenProtect.new(key)
Themis::Scell.new(key, Themis::Scell::TOKEN_PROTECT_MODE)


Themis::ScellContextImprint.new(key
Themis::Scell.new(key, Themis::Scell::CONTEXT_IMPRINT_MODE)



New objects have compatible API and no further changes in the code base should be required. However, you may wish to revisit decrypt calls for Token Protect.
Simpler Token Protect API
Token Protect mode now accepts encrypted data and token as separate arguments instead of requiring an array.
decrypted = cell.decrypt([encrypted, token], context) # old, requires a list

decrypted = cell.decrypt(encrypted, token, context)   # new, separate args
Unicode considerations
Master keys are always binary data. RbThemis ignores their encoding and always uses raw key bytes as is.
Passphrases are usually provided as text. In this case passphrase will be encoded in UTF-8 for compatibility with other Themis platforms. If you need a different encoding, please use encoding: optional argument, for example:
cell = Themis::ScellSealPassphrase.new(passphrase, encoding: 'UTF-16BE')
Binary passphrases are also accepted. If the passphrase encoding is BINARY then it is used as is, without any conversion.
Technical notes
Initially a slightly different syntax was planned:
cell = Themis::ScellSeal.with_key binary_master_key

cell = Themis::SCellSeal.with_passphrase 'a secret'
It had a noble idea of maintaining similarity with other languages which do not have named arguments. However, after updating tests and examples this syntax came off as unnatural. It also does not provide any value (it's even longer!) and we are not constrained by compatibility, like in Python.
Furthermore, in Ruby you import the entire module so Themis::SCellSealPassphrase class is visible. Other languages may require an awkward import to use SCellSealPassphrase name, but in Ruby you can use it right away.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,603,2020-03-11T14:09:43Z,2020-03-18T12:42:07Z,2020-03-18T12:42:13Z,MERGED,True,943,197,8,https://github.com/ilammy,Secure Cell passphrase API: RbThemis,8,['W-RbThemis :diamonds:'],https://github.com/cossacklabs/themis/pull/603,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/603#issuecomment-598202520,"Add support of Secure Cell passphrase API to RbThemis. The API is described in RFC 3.4 (with corrections).
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell:
require 'rbthemis'

cell = Themis::ScellSealPassphrase.new('my little password: secrets are magic')

encrypted = cell.encrypt('message data')
decrypted = cell.decrypt(encrypted)

assert_equals(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
# Get a new key if you don't have one already:
master_key = Themis::gen_sym_key
# Or use an existing value that you store somewhere:
master_key = Base64.decode64 'b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U='

cell = Themis::ScellSeal.new(master_key)

encrypted = cell.encrypt('message data')
decrypted = cell.decrypt(encrypted)

assert_equals(decrypted, message)
API compatibility
Themis::Scell is deprecated
Instead of Themis::Scell with run-time mode-setting you should instantiate an appropriate subclass:



New API
Old API




Themis::ScellSeal.new(key)
Themis::Scell.new(key, Themis::Scell::SEAL_MODE)


Themis::ScellSealPassphrase.new(passphrase)
not available


Themis::ScellTokenProtect.new(key)
Themis::Scell.new(key, Themis::Scell::TOKEN_PROTECT_MODE)


Themis::ScellContextImprint.new(key
Themis::Scell.new(key, Themis::Scell::CONTEXT_IMPRINT_MODE)



New objects have compatible API and no further changes in the code base should be required. However, you may wish to revisit decrypt calls for Token Protect.
Simpler Token Protect API
Token Protect mode now accepts encrypted data and token as separate arguments instead of requiring an array.
decrypted = cell.decrypt([encrypted, token], context) # old, requires a list

decrypted = cell.decrypt(encrypted, token, context)   # new, separate args
Unicode considerations
Master keys are always binary data. RbThemis ignores their encoding and always uses raw key bytes as is.
Passphrases are usually provided as text. In this case passphrase will be encoded in UTF-8 for compatibility with other Themis platforms. If you need a different encoding, please use encoding: optional argument, for example:
cell = Themis::ScellSealPassphrase.new(passphrase, encoding: 'UTF-16BE')
Binary passphrases are also accepted. If the passphrase encoding is BINARY then it is used as is, without any conversion.
Technical notes
Initially a slightly different syntax was planned:
cell = Themis::ScellSeal.with_key binary_master_key

cell = Themis::SCellSeal.with_passphrase 'a secret'
It had a noble idea of maintaining similarity with other languages which do not have named arguments. However, after updating tests and examples this syntax came off as unnatural. It also does not provide any value (it's even longer!) and we are not constrained by compatibility, like in Python.
Furthermore, in Ruby you import the entire module so Themis::SCellSealPassphrase class is visible. Other languages may require an awkward import to use SCellSealPassphrase name, but in Ruby you can use it right away.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","Token Protect mode now accepts encrypted data and token as separate arguments instead of requiring an array.

awesome",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,603,2020-03-11T14:09:43Z,2020-03-18T12:42:07Z,2020-03-18T12:42:13Z,MERGED,True,943,197,8,https://github.com/ilammy,Secure Cell passphrase API: RbThemis,8,['W-RbThemis :diamonds:'],https://github.com/cossacklabs/themis/pull/603,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/603#issuecomment-598585194,"Add support of Secure Cell passphrase API to RbThemis. The API is described in RFC 3.4 (with corrections).
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell:
require 'rbthemis'

cell = Themis::ScellSealPassphrase.new('my little password: secrets are magic')

encrypted = cell.encrypt('message data')
decrypted = cell.decrypt(encrypted)

assert_equals(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
# Get a new key if you don't have one already:
master_key = Themis::gen_sym_key
# Or use an existing value that you store somewhere:
master_key = Base64.decode64 'b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U='

cell = Themis::ScellSeal.new(master_key)

encrypted = cell.encrypt('message data')
decrypted = cell.decrypt(encrypted)

assert_equals(decrypted, message)
API compatibility
Themis::Scell is deprecated
Instead of Themis::Scell with run-time mode-setting you should instantiate an appropriate subclass:



New API
Old API




Themis::ScellSeal.new(key)
Themis::Scell.new(key, Themis::Scell::SEAL_MODE)


Themis::ScellSealPassphrase.new(passphrase)
not available


Themis::ScellTokenProtect.new(key)
Themis::Scell.new(key, Themis::Scell::TOKEN_PROTECT_MODE)


Themis::ScellContextImprint.new(key
Themis::Scell.new(key, Themis::Scell::CONTEXT_IMPRINT_MODE)



New objects have compatible API and no further changes in the code base should be required. However, you may wish to revisit decrypt calls for Token Protect.
Simpler Token Protect API
Token Protect mode now accepts encrypted data and token as separate arguments instead of requiring an array.
decrypted = cell.decrypt([encrypted, token], context) # old, requires a list

decrypted = cell.decrypt(encrypted, token, context)   # new, separate args
Unicode considerations
Master keys are always binary data. RbThemis ignores their encoding and always uses raw key bytes as is.
Passphrases are usually provided as text. In this case passphrase will be encoded in UTF-8 for compatibility with other Themis platforms. If you need a different encoding, please use encoding: optional argument, for example:
cell = Themis::ScellSealPassphrase.new(passphrase, encoding: 'UTF-16BE')
Binary passphrases are also accepted. If the passphrase encoding is BINARY then it is used as is, without any conversion.
Technical notes
Initially a slightly different syntax was planned:
cell = Themis::ScellSeal.with_key binary_master_key

cell = Themis::SCellSeal.with_passphrase 'a secret'
It had a noble idea of maintaining similarity with other languages which do not have named arguments. However, after updating tests and examples this syntax came off as unnatural. It also does not provide any value (it's even longer!) and we are not constrained by compatibility, like in Python.
Furthermore, in Ruby you import the entire module so Themis::SCellSealPassphrase class is visible. Other languages may require an awkward import to use SCellSealPassphrase name, but in Ruby you can use it right away.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","Strange, but CircleCI build has failed while locally unit-test tests were fine. I did not run integration tests though, but they fail with the following error:
/var/lib/gems/2.3.0/gems/rbthemis-0.12.0/lib/rbthemis.rb:22:in `force_encoding': can't modify frozen String (RuntimeError)
	from /var/lib/gems/2.3.0/gems/rbthemis-0.12.0/lib/rbthemis.rb:22:in `string_to_pointer_size'
	from /var/lib/gems/2.3.0/gems/rbthemis-0.12.0/lib/rbthemis.rb:672:in `encrypt'
	from ./tools/ruby/scell_seal_string_echo_pw.rb:34:in `<main>'
  fail 

Debugging has uncovered a flaw in common string_to_pointer_size function. It turns out RbThemis has been accidentally modifying encodings of input strings all along. Well, no longer. I'll just quote the commit message:

Make string_to_pointer_size pure
This function is used to convert a string into an FFI::MemoryPointer with string's bytes that we can pass to Themis Core. It's current implementation is... not ideal because it uses force_encoding.
This is problematic because it does not return a copy of a string with different encoding. It modifies the encoding of the string in-place. This is unexpected for client code and does not work for frozen strings (e.g., literal constants).
Update the implementation to use FFI::MemoryPointer.from_string which has the same behavior (returns a pointer into string's buffer) but does not change the encoding of the string.
This function is used throughout RbThemis code, not only by Secure Cell. It should be enough to add encoding tests for Secure Cell only, for now.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,604,2020-03-14T15:21:20Z,2020-03-20T13:05:31Z,2020-03-20T13:26:12Z,MERGED,True,1439,1,6,https://github.com/ilammy,Proper Carthage project: ObjCThemis,2,"['W-SwiftThemis :large_orange_diamond:', 'compatibility', 'installation', 'W-ObjCThemis :art:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/604,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/604,"Our first attempt at providing Carthage support (#427) was a bit haphazard and resulted in an Xcode project that builds ObjCThemis into a framework called themis.framework. This has been done in order to preserve the module name for Swift the same as with CocoaPods. However, this also means that Objective-C has to import this framework as
#import <themis/themis.h>
while CocoaPods use
#import <objcthemis/objcthemis.h>
This discrepancy is not ideal. First of all, this wart special case complicates integration of Themis into projects. We have it described in documentation, but that's an excuse, not a solution. Then, this import conflicts with Themis Core (which also uses <themis/themis.h>). Finally, we are also affected by this discrepancy because ObjCThemis test suite uses <objcthemis/objcthemis.h>, making it impossible to run existing unit tests on Carthage project. (Well, without silly preprocessor tricks, that is.)
Provide an alternate Xcode project which builds ObjCThemis into objcthemis.framework and keeps Swift module name themis. This is how it should have been done from the start. Now, ObjCThemis installed via Carthage can be imported in Objective-C projects as
#import <objcthemis/objcthemis.h>
That is the same import when ObjCThemis is installed via CocoaPods.
Older Objective-C import syntax is still accepted for now but it is considered deprecated and will be removed.
Swift import syntax stays unchanged (for both Carthage and CocoaPods):
import themis
However, aside from imports the users will also need to update their projects to link against objcthemis.framework instead of themis.framework.
Note that this is a separate Xcode project, not an additional pair of targets in existing Themis.xcodeproj. We have to make a new project because of this very issue with conflicting names. It is impossible to add another target that builds ObjCThemis because it uses
#import <themis/themis.h>
to import Themis Core. This works when building themis.framework itself, but for any other target in the project this syntax will import themis.framework, not Themis Core. Sibling projects are included in the search path automatically so there is no way to prevent this conflict other than making a completely separate Xcode project.
Multiple projects are supported by Carthage. It will just build them all. This means that the users will be building ObjCThemis twice if they are using the simple
carthage bootstrap

Unfortunate, but that's how it will be until the next release when we will be able to drop themis.framework (the only alternative is to break compatibility immediately).
Please accept my sincere apologies for increased CI bills. This was my mistake from the start.
Checklist

 Change is covered by automated tests 1
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date 2
 Changelog is updated

1 Bitrise probably will not automatically test this, but I remember something about Carthage there. When If this gets merged, I'll look at it in detail (and update GitHub Actions too).
2 No, the code samples are not updated in this PR. Since we pin them to a particular released version of Themis, they will have to be updated after we make a release which this changes. GitHub Actions will test that the examples compile unchanged with updated Themis. We could also add a specific test for this, but that's too much of a bother. I really don't want four more projects there.","Our first attempt at providing Carthage support (#427) was a bit haphazard and resulted in an Xcode project that builds ObjCThemis into a framework called themis.framework. This has been done in order to preserve the module name for Swift the same as with CocoaPods. However, this also means that Objective-C has to import this framework as
#import <themis/themis.h>
while CocoaPods use
#import <objcthemis/objcthemis.h>
This discrepancy is not ideal. First of all, this wart special case complicates integration of Themis into projects. We have it described in documentation, but that's an excuse, not a solution. Then, this import conflicts with Themis Core (which also uses <themis/themis.h>). Finally, we are also affected by this discrepancy because ObjCThemis test suite uses <objcthemis/objcthemis.h>, making it impossible to run existing unit tests on Carthage project. (Well, without silly preprocessor tricks, that is.)
Provide an alternate Xcode project which builds ObjCThemis into objcthemis.framework and keeps Swift module name themis. This is how it should have been done from the start. Now, ObjCThemis installed via Carthage can be imported in Objective-C projects as
#import <objcthemis/objcthemis.h>
That is the same import when ObjCThemis is installed via CocoaPods.
Older Objective-C import syntax is still accepted for now but it is considered deprecated and will be removed.
Swift import syntax stays unchanged (for both Carthage and CocoaPods):
import themis
However, aside from imports the users will also need to update their projects to link against objcthemis.framework instead of themis.framework.
Note that this is a separate Xcode project, not an additional pair of targets in existing Themis.xcodeproj. We have to make a new project because of this very issue with conflicting names. It is impossible to add another target that builds ObjCThemis because it uses
#import <themis/themis.h>
to import Themis Core. This works when building themis.framework itself, but for any other target in the project this syntax will import themis.framework, not Themis Core. Sibling projects are included in the search path automatically so there is no way to prevent this conflict other than making a completely separate Xcode project.
Multiple projects are supported by Carthage. It will just build them all. This means that the users will be building ObjCThemis twice if they are using the simple
carthage bootstrap

Unfortunate, but that's how it will be until the next release when we will be able to drop themis.framework (the only alternative is to break compatibility immediately).
Please accept my sincere apologies for increased CI bills. This was my mistake from the start.
Checklist

 Change is covered by automated tests 1
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date 2
 Changelog is updated

1 Bitrise probably will not automatically test this, but I remember something about Carthage there. When If this gets merged, I'll look at it in detail (and update GitHub Actions too).
2 No, the code samples are not updated in this PR. Since we pin them to a particular released version of Themis, they will have to be updated after we make a release which this changes. GitHub Actions will test that the examples compile unchanged with updated Themis. We could also add a specific test for this, but that's too much of a bother. I really don't want four more projects there.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,604,2020-03-14T15:21:20Z,2020-03-20T13:05:31Z,2020-03-20T13:26:12Z,MERGED,True,1439,1,6,https://github.com/ilammy,Proper Carthage project: ObjCThemis,2,"['W-SwiftThemis :large_orange_diamond:', 'compatibility', 'installation', 'W-ObjCThemis :art:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/604,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/604#issuecomment-601256241,"Our first attempt at providing Carthage support (#427) was a bit haphazard and resulted in an Xcode project that builds ObjCThemis into a framework called themis.framework. This has been done in order to preserve the module name for Swift the same as with CocoaPods. However, this also means that Objective-C has to import this framework as
#import <themis/themis.h>
while CocoaPods use
#import <objcthemis/objcthemis.h>
This discrepancy is not ideal. First of all, this wart special case complicates integration of Themis into projects. We have it described in documentation, but that's an excuse, not a solution. Then, this import conflicts with Themis Core (which also uses <themis/themis.h>). Finally, we are also affected by this discrepancy because ObjCThemis test suite uses <objcthemis/objcthemis.h>, making it impossible to run existing unit tests on Carthage project. (Well, without silly preprocessor tricks, that is.)
Provide an alternate Xcode project which builds ObjCThemis into objcthemis.framework and keeps Swift module name themis. This is how it should have been done from the start. Now, ObjCThemis installed via Carthage can be imported in Objective-C projects as
#import <objcthemis/objcthemis.h>
That is the same import when ObjCThemis is installed via CocoaPods.
Older Objective-C import syntax is still accepted for now but it is considered deprecated and will be removed.
Swift import syntax stays unchanged (for both Carthage and CocoaPods):
import themis
However, aside from imports the users will also need to update their projects to link against objcthemis.framework instead of themis.framework.
Note that this is a separate Xcode project, not an additional pair of targets in existing Themis.xcodeproj. We have to make a new project because of this very issue with conflicting names. It is impossible to add another target that builds ObjCThemis because it uses
#import <themis/themis.h>
to import Themis Core. This works when building themis.framework itself, but for any other target in the project this syntax will import themis.framework, not Themis Core. Sibling projects are included in the search path automatically so there is no way to prevent this conflict other than making a completely separate Xcode project.
Multiple projects are supported by Carthage. It will just build them all. This means that the users will be building ObjCThemis twice if they are using the simple
carthage bootstrap

Unfortunate, but that's how it will be until the next release when we will be able to drop themis.framework (the only alternative is to break compatibility immediately).
Please accept my sincere apologies for increased CI bills. This was my mistake from the start.
Checklist

 Change is covered by automated tests 1
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date 2
 Changelog is updated

1 Bitrise probably will not automatically test this, but I remember something about Carthage there. When If this gets merged, I'll look at it in detail (and update GitHub Actions too).
2 No, the code samples are not updated in this PR. Since we pin them to a particular released version of Themis, they will have to be updated after we make a release which this changes. GitHub Actions will test that the examples compile unchanged with updated Themis. We could also add a specific test for this, but that's too much of a bother. I really don't want four more projects there.","Honestly saying, I hate renaming things.
So, TLDR, not depending on package mananger:

for ObjC, people will link #import <objcthemis/objcthemis.h>
for Swift, people will link import themis

right?
————-
Also, can we please make sure that we have internal tasks for:

updating ObjC Themis guide on docserver
updating Swift Themis guide on docserver
updating Themis examples

after/before/during 0.13 release?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,604,2020-03-14T15:21:20Z,2020-03-20T13:05:31Z,2020-03-20T13:26:12Z,MERGED,True,1439,1,6,https://github.com/ilammy,Proper Carthage project: ObjCThemis,2,"['W-SwiftThemis :large_orange_diamond:', 'compatibility', 'installation', 'W-ObjCThemis :art:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/604,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/604#issuecomment-601301921,"Our first attempt at providing Carthage support (#427) was a bit haphazard and resulted in an Xcode project that builds ObjCThemis into a framework called themis.framework. This has been done in order to preserve the module name for Swift the same as with CocoaPods. However, this also means that Objective-C has to import this framework as
#import <themis/themis.h>
while CocoaPods use
#import <objcthemis/objcthemis.h>
This discrepancy is not ideal. First of all, this wart special case complicates integration of Themis into projects. We have it described in documentation, but that's an excuse, not a solution. Then, this import conflicts with Themis Core (which also uses <themis/themis.h>). Finally, we are also affected by this discrepancy because ObjCThemis test suite uses <objcthemis/objcthemis.h>, making it impossible to run existing unit tests on Carthage project. (Well, without silly preprocessor tricks, that is.)
Provide an alternate Xcode project which builds ObjCThemis into objcthemis.framework and keeps Swift module name themis. This is how it should have been done from the start. Now, ObjCThemis installed via Carthage can be imported in Objective-C projects as
#import <objcthemis/objcthemis.h>
That is the same import when ObjCThemis is installed via CocoaPods.
Older Objective-C import syntax is still accepted for now but it is considered deprecated and will be removed.
Swift import syntax stays unchanged (for both Carthage and CocoaPods):
import themis
However, aside from imports the users will also need to update their projects to link against objcthemis.framework instead of themis.framework.
Note that this is a separate Xcode project, not an additional pair of targets in existing Themis.xcodeproj. We have to make a new project because of this very issue with conflicting names. It is impossible to add another target that builds ObjCThemis because it uses
#import <themis/themis.h>
to import Themis Core. This works when building themis.framework itself, but for any other target in the project this syntax will import themis.framework, not Themis Core. Sibling projects are included in the search path automatically so there is no way to prevent this conflict other than making a completely separate Xcode project.
Multiple projects are supported by Carthage. It will just build them all. This means that the users will be building ObjCThemis twice if they are using the simple
carthage bootstrap

Unfortunate, but that's how it will be until the next release when we will be able to drop themis.framework (the only alternative is to break compatibility immediately).
Please accept my sincere apologies for increased CI bills. This was my mistake from the start.
Checklist

 Change is covered by automated tests 1
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date 2
 Changelog is updated

1 Bitrise probably will not automatically test this, but I remember something about Carthage there. When If this gets merged, I'll look at it in detail (and update GitHub Actions too).
2 No, the code samples are not updated in this PR. Since we pin them to a particular released version of Themis, they will have to be updated after we make a release which this changes. GitHub Actions will test that the examples compile unchanged with updated Themis. We could also add a specific test for this, but that's too much of a bother. I really don't want four more projects there.","So, TLDR, not depending on package mananger:

 - for ObjC, people will link #import <objcthemis/objcthemis.h>
 - for Swift, people will link import themis

 right?
Yes, that's correct. This is what #427 failed to do initially.
 Also, can we please make sure that we have internal tasks for:

 - updating ObjC Themis guide on docserver
 - updating Swift Themis guide on docserver
 - updating Themis examples

 after/before/during 0.13 release?
Or, ideally, “instead of” 😂

Sure, done.
…
-- 
Best regards,
Alexei Lozovsky",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,604,2020-03-14T15:21:20Z,2020-03-20T13:05:31Z,2020-03-20T13:26:12Z,MERGED,True,1439,1,6,https://github.com/ilammy,Proper Carthage project: ObjCThemis,2,"['W-SwiftThemis :large_orange_diamond:', 'compatibility', 'installation', 'W-ObjCThemis :art:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/604,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/604#issuecomment-601315252,"Our first attempt at providing Carthage support (#427) was a bit haphazard and resulted in an Xcode project that builds ObjCThemis into a framework called themis.framework. This has been done in order to preserve the module name for Swift the same as with CocoaPods. However, this also means that Objective-C has to import this framework as
#import <themis/themis.h>
while CocoaPods use
#import <objcthemis/objcthemis.h>
This discrepancy is not ideal. First of all, this wart special case complicates integration of Themis into projects. We have it described in documentation, but that's an excuse, not a solution. Then, this import conflicts with Themis Core (which also uses <themis/themis.h>). Finally, we are also affected by this discrepancy because ObjCThemis test suite uses <objcthemis/objcthemis.h>, making it impossible to run existing unit tests on Carthage project. (Well, without silly preprocessor tricks, that is.)
Provide an alternate Xcode project which builds ObjCThemis into objcthemis.framework and keeps Swift module name themis. This is how it should have been done from the start. Now, ObjCThemis installed via Carthage can be imported in Objective-C projects as
#import <objcthemis/objcthemis.h>
That is the same import when ObjCThemis is installed via CocoaPods.
Older Objective-C import syntax is still accepted for now but it is considered deprecated and will be removed.
Swift import syntax stays unchanged (for both Carthage and CocoaPods):
import themis
However, aside from imports the users will also need to update their projects to link against objcthemis.framework instead of themis.framework.
Note that this is a separate Xcode project, not an additional pair of targets in existing Themis.xcodeproj. We have to make a new project because of this very issue with conflicting names. It is impossible to add another target that builds ObjCThemis because it uses
#import <themis/themis.h>
to import Themis Core. This works when building themis.framework itself, but for any other target in the project this syntax will import themis.framework, not Themis Core. Sibling projects are included in the search path automatically so there is no way to prevent this conflict other than making a completely separate Xcode project.
Multiple projects are supported by Carthage. It will just build them all. This means that the users will be building ObjCThemis twice if they are using the simple
carthage bootstrap

Unfortunate, but that's how it will be until the next release when we will be able to drop themis.framework (the only alternative is to break compatibility immediately).
Please accept my sincere apologies for increased CI bills. This was my mistake from the start.
Checklist

 Change is covered by automated tests 1
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date 2
 Changelog is updated

1 Bitrise probably will not automatically test this, but I remember something about Carthage there. When If this gets merged, I'll look at it in detail (and update GitHub Actions too).
2 No, the code samples are not updated in this PR. Since we pin them to a particular released version of Themis, they will have to be updated after we make a release which this changes. GitHub Actions will test that the examples compile unchanged with updated Themis. We could also add a specific test for this, but that's too much of a bother. I really don't want four more projects there.",Merge 'em all!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,604,2020-03-14T15:21:20Z,2020-03-20T13:05:31Z,2020-03-20T13:26:12Z,MERGED,True,1439,1,6,https://github.com/ilammy,Proper Carthage project: ObjCThemis,2,"['W-SwiftThemis :large_orange_diamond:', 'compatibility', 'installation', 'W-ObjCThemis :art:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/604,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/604#issuecomment-601699534,"Our first attempt at providing Carthage support (#427) was a bit haphazard and resulted in an Xcode project that builds ObjCThemis into a framework called themis.framework. This has been done in order to preserve the module name for Swift the same as with CocoaPods. However, this also means that Objective-C has to import this framework as
#import <themis/themis.h>
while CocoaPods use
#import <objcthemis/objcthemis.h>
This discrepancy is not ideal. First of all, this wart special case complicates integration of Themis into projects. We have it described in documentation, but that's an excuse, not a solution. Then, this import conflicts with Themis Core (which also uses <themis/themis.h>). Finally, we are also affected by this discrepancy because ObjCThemis test suite uses <objcthemis/objcthemis.h>, making it impossible to run existing unit tests on Carthage project. (Well, without silly preprocessor tricks, that is.)
Provide an alternate Xcode project which builds ObjCThemis into objcthemis.framework and keeps Swift module name themis. This is how it should have been done from the start. Now, ObjCThemis installed via Carthage can be imported in Objective-C projects as
#import <objcthemis/objcthemis.h>
That is the same import when ObjCThemis is installed via CocoaPods.
Older Objective-C import syntax is still accepted for now but it is considered deprecated and will be removed.
Swift import syntax stays unchanged (for both Carthage and CocoaPods):
import themis
However, aside from imports the users will also need to update their projects to link against objcthemis.framework instead of themis.framework.
Note that this is a separate Xcode project, not an additional pair of targets in existing Themis.xcodeproj. We have to make a new project because of this very issue with conflicting names. It is impossible to add another target that builds ObjCThemis because it uses
#import <themis/themis.h>
to import Themis Core. This works when building themis.framework itself, but for any other target in the project this syntax will import themis.framework, not Themis Core. Sibling projects are included in the search path automatically so there is no way to prevent this conflict other than making a completely separate Xcode project.
Multiple projects are supported by Carthage. It will just build them all. This means that the users will be building ObjCThemis twice if they are using the simple
carthage bootstrap

Unfortunate, but that's how it will be until the next release when we will be able to drop themis.framework (the only alternative is to break compatibility immediately).
Please accept my sincere apologies for increased CI bills. This was my mistake from the start.
Checklist

 Change is covered by automated tests 1
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date 2
 Changelog is updated

1 Bitrise probably will not automatically test this, but I remember something about Carthage there. When If this gets merged, I'll look at it in detail (and update GitHub Actions too).
2 No, the code samples are not updated in this PR. Since we pin them to a particular released version of Themis, they will have to be updated after we make a release which this changes. GitHub Actions will test that the examples compile unchanged with updated Themis. We could also add a specific test for this, but that's too much of a bother. I really don't want four more projects there.","I've checked this manually just in case: Bitrise does build the new Xcode project.
So we're safe 🤞",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,605,2020-03-14T15:27:44Z,2020-03-20T13:06:20Z,2020-03-20T13:06:25Z,MERGED,True,42,42,1,https://github.com/ilammy,Make tests compatible with Swift 5,1,"['W-SwiftThemis :large_orange_diamond:', 'tests']",https://github.com/cossacklabs/themis/pull/605,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/605,"Newer versions of Swift have improved nil coalescing (SE-0230). Unfortunately, this breaks our code.
Consider the following:
let encrypter = TSMessage(inSignVerifyModeWithPrivateKey: privateKeyData,
                          peerPublicKey: publicKeyData)

let signedMessage = try? encrypter?.wrap(message.data(using: .utf8))
let verifiedMessage = try? encrypter?.unwrapData(signedMessage!)

let resultString = String(data: verifiedMessage!!, encoding: .utf8)
Here encrypter is TSMessage? and then we try? to convert the error into an optional when acting on an optional encrypter. In Swift 4 verifiedMessage has Data?? type but Swift 5 flattens the optional chain and returns Data? instead. We cannot unwrap!! that twice.
Update the tests to handle nil values more explicitly and avoid optional chaining with try?. This results in code that compiles correctly with both Swift 4 & 5.
P.S. Existing CocoaPods-based test project uses Swift 4 so the issue is not visible there. However, try updating the version and you'll see it.
Checklist

 Change is covered by automated tests (Swift 4 only, Swift 5 is not tested)
 The coding guidelines are followed
 Public API has proper documentation","Newer versions of Swift have improved nil coalescing (SE-0230). Unfortunately, this breaks our code.
Consider the following:
let encrypter = TSMessage(inSignVerifyModeWithPrivateKey: privateKeyData,
                          peerPublicKey: publicKeyData)

let signedMessage = try? encrypter?.wrap(message.data(using: .utf8))
let verifiedMessage = try? encrypter?.unwrapData(signedMessage!)

let resultString = String(data: verifiedMessage!!, encoding: .utf8)
Here encrypter is TSMessage? and then we try? to convert the error into an optional when acting on an optional encrypter. In Swift 4 verifiedMessage has Data?? type but Swift 5 flattens the optional chain and returns Data? instead. We cannot unwrap!! that twice.
Update the tests to handle nil values more explicitly and avoid optional chaining with try?. This results in code that compiles correctly with both Swift 4 & 5.
P.S. Existing CocoaPods-based test project uses Swift 4 so the issue is not visible there. However, try updating the version and you'll see it.
Checklist

 Change is covered by automated tests (Swift 4 only, Swift 5 is not tested)
 The coding guidelines are followed
 Public API has proper documentation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,605,2020-03-14T15:27:44Z,2020-03-20T13:06:20Z,2020-03-20T13:06:25Z,MERGED,True,42,42,1,https://github.com/ilammy,Make tests compatible with Swift 5,1,"['W-SwiftThemis :large_orange_diamond:', 'tests']",https://github.com/cossacklabs/themis/pull/605,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/605#issuecomment-601328167,"Newer versions of Swift have improved nil coalescing (SE-0230). Unfortunately, this breaks our code.
Consider the following:
let encrypter = TSMessage(inSignVerifyModeWithPrivateKey: privateKeyData,
                          peerPublicKey: publicKeyData)

let signedMessage = try? encrypter?.wrap(message.data(using: .utf8))
let verifiedMessage = try? encrypter?.unwrapData(signedMessage!)

let resultString = String(data: verifiedMessage!!, encoding: .utf8)
Here encrypter is TSMessage? and then we try? to convert the error into an optional when acting on an optional encrypter. In Swift 4 verifiedMessage has Data?? type but Swift 5 flattens the optional chain and returns Data? instead. We cannot unwrap!! that twice.
Update the tests to handle nil values more explicitly and avoid optional chaining with try?. This results in code that compiles correctly with both Swift 4 & 5.
P.S. Existing CocoaPods-based test project uses Swift 4 so the issue is not visible there. However, try updating the version and you'll see it.
Checklist

 Change is covered by automated tests (Swift 4 only, Swift 5 is not tested)
 The coding guidelines are followed
 Public API has proper documentation","I tested on my machine and can confirm: it's working.
Thank you @ilammy. Let's merge!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,606,2020-03-18T14:59:26Z,2020-03-20T15:07:25Z,2020-03-20T15:07:35Z,MERGED,True,2302,713,9,https://github.com/ilammy,ObjCThemis: Secure Cell API update,8,"['enhancement', 'W-SwiftThemis :large_orange_diamond:', 'compatibility', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/606,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/606,"Update Secure Cell API for Objective-C and Swift as a preparation to passphrase support. This has been described in RFC 3.5.
This is a non-functional change, just making the API more consistent and easy to use, with a straightforward way to add passphrase API soon.
User notes
Swift
All modes now use consistent naming of encryption/decryption methods:
let encrypted = try cell.encrypt(message, context: nil)

let decrypted = try cell.decrypt(encrypted)
They accept Data as their first unnamed argument, followed an optional context: argument (except for Context Imprint mode which requires associated context). Processed data is returned as Data. Errors are reported with Swift exceptions.
Token Protect mode improvements
Token Protect mode returns a helper object with encrypted message and authentication token:
let result = try cell.encrypt(message)

print(""Encrypted message:    "", result.encrypted)
print(""Authentication token: "", result.token)
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
let decrypted = try cell.decrypt(encrypted, token: token)
New API is bridged with Swift's Data directly, no longer requiring manual conversion from/to NSMutableData.
Objective-C
All modes now use consistent naming of encryption/decryption methods:
NSData *encrypted = [cell encrypt:message];

NSError *error;
NSData *decrypted = [cell decrypt:encrypted
                          context:nil
                            error:&error];
They accept NSData as their first argument, followed an optional context: argument (except for Context Imprint mode which requires associated context), followed by an optional error: out-parameter. Processed data is returned as NSData. Errors are reported as NSError objects, if requested.
There are convenience overloads with omitted context parameters if you don't need them, and omitted error: parameters if you're not interested in error values (nil is returned in case of error).
Token Protect mode improvements
Token Protect mode returns a helper result object with encrypted message and authentication token:
TSCellTokenEncryptedResult *result = [cell encrypt:message];

NSLog(@""Encrypted message:    %@"", result.encrypted);
NSLog(@""Authentication token: %@"", result.token);
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
NSData *decrypted = [cell decrypt:encrypted token:token];
Note that new helper object TSCellTokenEncryptedResult represents only encryption result. It is immutable and uses NSData for fields.
Deprecated API
Old encryption/decryption API is declared deprecated and its use is discouraged. There are no plans to remove this API in the future, it will be retained for compatibility (probably until 1.0).

Complete list of deprecated API
Swift:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  
  
    TSCellToken
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, token:, context:)decrypt(_:, token:)
  
  
    TSCellContextImprint
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  

Objective-C:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  
  
    TSCellToken
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:token:context:error:decrypt:token:error:
  
  
    TSCellContextImprint
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  


Technical notes
This PR includes significant overhaul of unit test suite for ObjCThemis. It improves coverage and debuggability of ObjCThemis via tests. The test suite also includes compatibility tests.
There are a lot of tedious and repeatative changes there. All modes have roughly the same test suite but with slight differences. Objective-C and Swift test suite are identical (Swift one is a translation). However, they are important to pinpoint API details.
There were plans to improve Token Protect encryption API in Swift to return tuples:
let (encrypted, token) = try cell.encrypt(message)

print(""Encrypted message:    "", encrypted)
print(""Authentication token: "", token)
Unfortunately, this turned out to be impossible at the moment due to lack of stable Swift ABI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no, will update separately)
 Changelog is updated

P.S. I need to slow down because @vixentael capacity is extremely limited recently.
P.P.S. Why did I even started this?.. It was a perfectly fine API. Yeah, it was a bit inconvenient to use, but it did work. We all know that worse is better, right? Whatever. Here you go.","Update Secure Cell API for Objective-C and Swift as a preparation to passphrase support. This has been described in RFC 3.5.
This is a non-functional change, just making the API more consistent and easy to use, with a straightforward way to add passphrase API soon.
User notes
Swift
All modes now use consistent naming of encryption/decryption methods:
let encrypted = try cell.encrypt(message, context: nil)

let decrypted = try cell.decrypt(encrypted)
They accept Data as their first unnamed argument, followed an optional context: argument (except for Context Imprint mode which requires associated context). Processed data is returned as Data. Errors are reported with Swift exceptions.
Token Protect mode improvements
Token Protect mode returns a helper object with encrypted message and authentication token:
let result = try cell.encrypt(message)

print(""Encrypted message:    "", result.encrypted)
print(""Authentication token: "", result.token)
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
let decrypted = try cell.decrypt(encrypted, token: token)
New API is bridged with Swift's Data directly, no longer requiring manual conversion from/to NSMutableData.
Objective-C
All modes now use consistent naming of encryption/decryption methods:
NSData *encrypted = [cell encrypt:message];

NSError *error;
NSData *decrypted = [cell decrypt:encrypted
                          context:nil
                            error:&error];
They accept NSData as their first argument, followed an optional context: argument (except for Context Imprint mode which requires associated context), followed by an optional error: out-parameter. Processed data is returned as NSData. Errors are reported as NSError objects, if requested.
There are convenience overloads with omitted context parameters if you don't need them, and omitted error: parameters if you're not interested in error values (nil is returned in case of error).
Token Protect mode improvements
Token Protect mode returns a helper result object with encrypted message and authentication token:
TSCellTokenEncryptedResult *result = [cell encrypt:message];

NSLog(@""Encrypted message:    %@"", result.encrypted);
NSLog(@""Authentication token: %@"", result.token);
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
NSData *decrypted = [cell decrypt:encrypted token:token];
Note that new helper object TSCellTokenEncryptedResult represents only encryption result. It is immutable and uses NSData for fields.
Deprecated API
Old encryption/decryption API is declared deprecated and its use is discouraged. There are no plans to remove this API in the future, it will be retained for compatibility (probably until 1.0).

Complete list of deprecated API
Swift:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  
  
    TSCellToken
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, token:, context:)decrypt(_:, token:)
  
  
    TSCellContextImprint
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  

Objective-C:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  
  
    TSCellToken
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:token:context:error:decrypt:token:error:
  
  
    TSCellContextImprint
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  


Technical notes
This PR includes significant overhaul of unit test suite for ObjCThemis. It improves coverage and debuggability of ObjCThemis via tests. The test suite also includes compatibility tests.
There are a lot of tedious and repeatative changes there. All modes have roughly the same test suite but with slight differences. Objective-C and Swift test suite are identical (Swift one is a translation). However, they are important to pinpoint API details.
There were plans to improve Token Protect encryption API in Swift to return tuples:
let (encrypted, token) = try cell.encrypt(message)

print(""Encrypted message:    "", encrypted)
print(""Authentication token: "", token)
Unfortunately, this turned out to be impossible at the moment due to lack of stable Swift ABI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no, will update separately)
 Changelog is updated

P.S. I need to slow down because @vixentael capacity is extremely limited recently.
P.P.S. Why did I even started this?.. It was a perfectly fine API. Yeah, it was a bit inconvenient to use, but it did work. We all know that worse is better, right? Whatever. Here you go.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,606,2020-03-18T14:59:26Z,2020-03-20T15:07:25Z,2020-03-20T15:07:35Z,MERGED,True,2302,713,9,https://github.com/ilammy,ObjCThemis: Secure Cell API update,8,"['enhancement', 'W-SwiftThemis :large_orange_diamond:', 'compatibility', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/606,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/606#issuecomment-601343022,"Update Secure Cell API for Objective-C and Swift as a preparation to passphrase support. This has been described in RFC 3.5.
This is a non-functional change, just making the API more consistent and easy to use, with a straightforward way to add passphrase API soon.
User notes
Swift
All modes now use consistent naming of encryption/decryption methods:
let encrypted = try cell.encrypt(message, context: nil)

let decrypted = try cell.decrypt(encrypted)
They accept Data as their first unnamed argument, followed an optional context: argument (except for Context Imprint mode which requires associated context). Processed data is returned as Data. Errors are reported with Swift exceptions.
Token Protect mode improvements
Token Protect mode returns a helper object with encrypted message and authentication token:
let result = try cell.encrypt(message)

print(""Encrypted message:    "", result.encrypted)
print(""Authentication token: "", result.token)
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
let decrypted = try cell.decrypt(encrypted, token: token)
New API is bridged with Swift's Data directly, no longer requiring manual conversion from/to NSMutableData.
Objective-C
All modes now use consistent naming of encryption/decryption methods:
NSData *encrypted = [cell encrypt:message];

NSError *error;
NSData *decrypted = [cell decrypt:encrypted
                          context:nil
                            error:&error];
They accept NSData as their first argument, followed an optional context: argument (except for Context Imprint mode which requires associated context), followed by an optional error: out-parameter. Processed data is returned as NSData. Errors are reported as NSError objects, if requested.
There are convenience overloads with omitted context parameters if you don't need them, and omitted error: parameters if you're not interested in error values (nil is returned in case of error).
Token Protect mode improvements
Token Protect mode returns a helper result object with encrypted message and authentication token:
TSCellTokenEncryptedResult *result = [cell encrypt:message];

NSLog(@""Encrypted message:    %@"", result.encrypted);
NSLog(@""Authentication token: %@"", result.token);
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
NSData *decrypted = [cell decrypt:encrypted token:token];
Note that new helper object TSCellTokenEncryptedResult represents only encryption result. It is immutable and uses NSData for fields.
Deprecated API
Old encryption/decryption API is declared deprecated and its use is discouraged. There are no plans to remove this API in the future, it will be retained for compatibility (probably until 1.0).

Complete list of deprecated API
Swift:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  
  
    TSCellToken
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, token:, context:)decrypt(_:, token:)
  
  
    TSCellContextImprint
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  

Objective-C:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  
  
    TSCellToken
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:token:context:error:decrypt:token:error:
  
  
    TSCellContextImprint
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  


Technical notes
This PR includes significant overhaul of unit test suite for ObjCThemis. It improves coverage and debuggability of ObjCThemis via tests. The test suite also includes compatibility tests.
There are a lot of tedious and repeatative changes there. All modes have roughly the same test suite but with slight differences. Objective-C and Swift test suite are identical (Swift one is a translation). However, they are important to pinpoint API details.
There were plans to improve Token Protect encryption API in Swift to return tuples:
let (encrypted, token) = try cell.encrypt(message)

print(""Encrypted message:    "", encrypted)
print(""Authentication token: "", token)
Unfortunately, this turned out to be impossible at the moment due to lack of stable Swift ABI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no, will update separately)
 Changelog is updated

P.S. I need to slow down because @vixentael capacity is extremely limited recently.
P.P.S. Why did I even started this?.. It was a perfectly fine API. Yeah, it was a bit inconvenient to use, but it did work. We all know that worse is better, right? Whatever. Here you go.","P.P.S. Why did I even started this?.. It was a perfectly fine API.

lololol, i don't know why you started this :D
but i know, that there're other languages that use wrap/unwrap syntax.
———————-
As usual, please make sure that we have tasks for:

updating docs on docserver with new API
updating example apps with new API",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,606,2020-03-18T14:59:26Z,2020-03-20T15:07:25Z,2020-03-20T15:07:35Z,MERGED,True,2302,713,9,https://github.com/ilammy,ObjCThemis: Secure Cell API update,8,"['enhancement', 'W-SwiftThemis :large_orange_diamond:', 'compatibility', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/606,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/606#issuecomment-601374525,"Update Secure Cell API for Objective-C and Swift as a preparation to passphrase support. This has been described in RFC 3.5.
This is a non-functional change, just making the API more consistent and easy to use, with a straightforward way to add passphrase API soon.
User notes
Swift
All modes now use consistent naming of encryption/decryption methods:
let encrypted = try cell.encrypt(message, context: nil)

let decrypted = try cell.decrypt(encrypted)
They accept Data as their first unnamed argument, followed an optional context: argument (except for Context Imprint mode which requires associated context). Processed data is returned as Data. Errors are reported with Swift exceptions.
Token Protect mode improvements
Token Protect mode returns a helper object with encrypted message and authentication token:
let result = try cell.encrypt(message)

print(""Encrypted message:    "", result.encrypted)
print(""Authentication token: "", result.token)
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
let decrypted = try cell.decrypt(encrypted, token: token)
New API is bridged with Swift's Data directly, no longer requiring manual conversion from/to NSMutableData.
Objective-C
All modes now use consistent naming of encryption/decryption methods:
NSData *encrypted = [cell encrypt:message];

NSError *error;
NSData *decrypted = [cell decrypt:encrypted
                          context:nil
                            error:&error];
They accept NSData as their first argument, followed an optional context: argument (except for Context Imprint mode which requires associated context), followed by an optional error: out-parameter. Processed data is returned as NSData. Errors are reported as NSError objects, if requested.
There are convenience overloads with omitted context parameters if you don't need them, and omitted error: parameters if you're not interested in error values (nil is returned in case of error).
Token Protect mode improvements
Token Protect mode returns a helper result object with encrypted message and authentication token:
TSCellTokenEncryptedResult *result = [cell encrypt:message];

NSLog(@""Encrypted message:    %@"", result.encrypted);
NSLog(@""Authentication token: %@"", result.token);
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
NSData *decrypted = [cell decrypt:encrypted token:token];
Note that new helper object TSCellTokenEncryptedResult represents only encryption result. It is immutable and uses NSData for fields.
Deprecated API
Old encryption/decryption API is declared deprecated and its use is discouraged. There are no plans to remove this API in the future, it will be retained for compatibility (probably until 1.0).

Complete list of deprecated API
Swift:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  
  
    TSCellToken
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, token:, context:)decrypt(_:, token:)
  
  
    TSCellContextImprint
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  

Objective-C:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  
  
    TSCellToken
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:token:context:error:decrypt:token:error:
  
  
    TSCellContextImprint
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  


Technical notes
This PR includes significant overhaul of unit test suite for ObjCThemis. It improves coverage and debuggability of ObjCThemis via tests. The test suite also includes compatibility tests.
There are a lot of tedious and repeatative changes there. All modes have roughly the same test suite but with slight differences. Objective-C and Swift test suite are identical (Swift one is a translation). However, they are important to pinpoint API details.
There were plans to improve Token Protect encryption API in Swift to return tuples:
let (encrypted, token) = try cell.encrypt(message)

print(""Encrypted message:    "", encrypted)
print(""Authentication token: "", token)
Unfortunately, this turned out to be impossible at the moment due to lack of stable Swift ABI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no, will update separately)
 Changelog is updated

P.S. I need to slow down because @vixentael capacity is extremely limited recently.
P.P.S. Why did I even started this?.. It was a perfectly fine API. Yeah, it was a bit inconvenient to use, but it did work. We all know that worse is better, right? Whatever. Here you go.","You are API freak :D

The RFCs were only a warning! Now I'll be renaming a method every month until you comply! /s

but i know, that there're other languages that use wrap/unwrap syntax.

Well, in fact, that was the reason and the comment is more like an old-man-shouts-at-a-cloud rant.
When I was reviewing Secure Cell API across all platforms I found that Objective-C, Java, and for some reason Go use this idiosyncratic unwrap naming while all other languages including the core library use ""encrypt"" and ""decrypt"" (the same goes for documentation).

With Go it's somewhat jarring, considering that everywhere across Acra we call outer methods encrypt and decrypt but deep inside them it's ""wrap"" and ""unwrap"" because of reasons.\
With Java we'll have to deprecate API anyway to discourage passing String as master key, and I don't want the users to see 5 deprecated methods and 1 correct one, with all of them called wrap.
With Swift, the name translation turns Objective-C method wrapData:error: into wrap() but unwrapData:error: into unwrapData() because IDK why. It's kinda asymmetric that users have to wrap their data but then unwrapData their data back.
With Objective-C (and Swift) I planned to improve Token Protect API to not require an intermediate object and reasons similar to Java it would be cleaner to add a new set of API than keep multiple deprecations in autocomplete list.

So you could say these are pretty silly OCD reasons for renaming (and reeducating the users), but hey, we're now more consistent and the old API is not going anywhere. *cranks up sunk cost fallacy up to 11*

BTW, it seems that Bitrise did not test this PRs. I'm kinda wary to merge it without that, so I'll see how to talk it into testing...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,606,2020-03-18T14:59:26Z,2020-03-20T15:07:25Z,2020-03-20T15:07:35Z,MERGED,True,2302,713,9,https://github.com/ilammy,ObjCThemis: Secure Cell API update,8,"['enhancement', 'W-SwiftThemis :large_orange_diamond:', 'compatibility', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/606,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/606#issuecomment-601726746,"Update Secure Cell API for Objective-C and Swift as a preparation to passphrase support. This has been described in RFC 3.5.
This is a non-functional change, just making the API more consistent and easy to use, with a straightforward way to add passphrase API soon.
User notes
Swift
All modes now use consistent naming of encryption/decryption methods:
let encrypted = try cell.encrypt(message, context: nil)

let decrypted = try cell.decrypt(encrypted)
They accept Data as their first unnamed argument, followed an optional context: argument (except for Context Imprint mode which requires associated context). Processed data is returned as Data. Errors are reported with Swift exceptions.
Token Protect mode improvements
Token Protect mode returns a helper object with encrypted message and authentication token:
let result = try cell.encrypt(message)

print(""Encrypted message:    "", result.encrypted)
print(""Authentication token: "", result.token)
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
let decrypted = try cell.decrypt(encrypted, token: token)
New API is bridged with Swift's Data directly, no longer requiring manual conversion from/to NSMutableData.
Objective-C
All modes now use consistent naming of encryption/decryption methods:
NSData *encrypted = [cell encrypt:message];

NSError *error;
NSData *decrypted = [cell decrypt:encrypted
                          context:nil
                            error:&error];
They accept NSData as their first argument, followed an optional context: argument (except for Context Imprint mode which requires associated context), followed by an optional error: out-parameter. Processed data is returned as NSData. Errors are reported as NSError objects, if requested.
There are convenience overloads with omitted context parameters if you don't need them, and omitted error: parameters if you're not interested in error values (nil is returned in case of error).
Token Protect mode improvements
Token Protect mode returns a helper result object with encrypted message and authentication token:
TSCellTokenEncryptedResult *result = [cell encrypt:message];

NSLog(@""Encrypted message:    %@"", result.encrypted);
NSLog(@""Authentication token: %@"", result.token);
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
NSData *decrypted = [cell decrypt:encrypted token:token];
Note that new helper object TSCellTokenEncryptedResult represents only encryption result. It is immutable and uses NSData for fields.
Deprecated API
Old encryption/decryption API is declared deprecated and its use is discouraged. There are no plans to remove this API in the future, it will be retained for compatibility (probably until 1.0).

Complete list of deprecated API
Swift:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  
  
    TSCellToken
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, token:, context:)decrypt(_:, token:)
  
  
    TSCellContextImprint
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  

Objective-C:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  
  
    TSCellToken
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:token:context:error:decrypt:token:error:
  
  
    TSCellContextImprint
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  


Technical notes
This PR includes significant overhaul of unit test suite for ObjCThemis. It improves coverage and debuggability of ObjCThemis via tests. The test suite also includes compatibility tests.
There are a lot of tedious and repeatative changes there. All modes have roughly the same test suite but with slight differences. Objective-C and Swift test suite are identical (Swift one is a translation). However, they are important to pinpoint API details.
There were plans to improve Token Protect encryption API in Swift to return tuples:
let (encrypted, token) = try cell.encrypt(message)

print(""Encrypted message:    "", encrypted)
print(""Authentication token: "", token)
Unfortunately, this turned out to be impossible at the moment due to lack of stable Swift ABI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no, will update separately)
 Changelog is updated

P.S. I need to slow down because @vixentael capacity is extremely limited recently.
P.P.S. Why did I even started this?.. It was a perfectly fine API. Yeah, it was a bit inconvenient to use, but it did work. We all know that worse is better, right? Whatever. Here you go.","@vixentael, I've updated class description docs, cleaned up formatting there, and added the links to documentation that you suggested. Please give it a look.
It seems that modern Xcode has dropped support for HeaderDoc completely. Advanced tags like @link or @ref are not working anymore, unfortunately. Some limited subset is still there, but it seems Apple wants to send a strong message “please migrate to Swift and use Markdown there”.
Also, this push has woken up Bitrise so we'll finally see if the tests pass there with the changes.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,606,2020-03-18T14:59:26Z,2020-03-20T15:07:25Z,2020-03-20T15:07:35Z,MERGED,True,2302,713,9,https://github.com/ilammy,ObjCThemis: Secure Cell API update,8,"['enhancement', 'W-SwiftThemis :large_orange_diamond:', 'compatibility', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/606,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/606#issuecomment-601727612,"Update Secure Cell API for Objective-C and Swift as a preparation to passphrase support. This has been described in RFC 3.5.
This is a non-functional change, just making the API more consistent and easy to use, with a straightforward way to add passphrase API soon.
User notes
Swift
All modes now use consistent naming of encryption/decryption methods:
let encrypted = try cell.encrypt(message, context: nil)

let decrypted = try cell.decrypt(encrypted)
They accept Data as their first unnamed argument, followed an optional context: argument (except for Context Imprint mode which requires associated context). Processed data is returned as Data. Errors are reported with Swift exceptions.
Token Protect mode improvements
Token Protect mode returns a helper object with encrypted message and authentication token:
let result = try cell.encrypt(message)

print(""Encrypted message:    "", result.encrypted)
print(""Authentication token: "", result.token)
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
let decrypted = try cell.decrypt(encrypted, token: token)
New API is bridged with Swift's Data directly, no longer requiring manual conversion from/to NSMutableData.
Objective-C
All modes now use consistent naming of encryption/decryption methods:
NSData *encrypted = [cell encrypt:message];

NSError *error;
NSData *decrypted = [cell decrypt:encrypted
                          context:nil
                            error:&error];
They accept NSData as their first argument, followed an optional context: argument (except for Context Imprint mode which requires associated context), followed by an optional error: out-parameter. Processed data is returned as NSData. Errors are reported as NSError objects, if requested.
There are convenience overloads with omitted context parameters if you don't need them, and omitted error: parameters if you're not interested in error values (nil is returned in case of error).
Token Protect mode improvements
Token Protect mode returns a helper result object with encrypted message and authentication token:
TSCellTokenEncryptedResult *result = [cell encrypt:message];

NSLog(@""Encrypted message:    %@"", result.encrypted);
NSLog(@""Authentication token: %@"", result.token);
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
NSData *decrypted = [cell decrypt:encrypted token:token];
Note that new helper object TSCellTokenEncryptedResult represents only encryption result. It is immutable and uses NSData for fields.
Deprecated API
Old encryption/decryption API is declared deprecated and its use is discouraged. There are no plans to remove this API in the future, it will be retained for compatibility (probably until 1.0).

Complete list of deprecated API
Swift:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  
  
    TSCellToken
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, token:, context:)decrypt(_:, token:)
  
  
    TSCellContextImprint
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  

Objective-C:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  
  
    TSCellToken
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:token:context:error:decrypt:token:error:
  
  
    TSCellContextImprint
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  


Technical notes
This PR includes significant overhaul of unit test suite for ObjCThemis. It improves coverage and debuggability of ObjCThemis via tests. The test suite also includes compatibility tests.
There are a lot of tedious and repeatative changes there. All modes have roughly the same test suite but with slight differences. Objective-C and Swift test suite are identical (Swift one is a translation). However, they are important to pinpoint API details.
There were plans to improve Token Protect encryption API in Swift to return tuples:
let (encrypted, token) = try cell.encrypt(message)

print(""Encrypted message:    "", encrypted)
print(""Authentication token: "", token)
Unfortunately, this turned out to be impossible at the moment due to lack of stable Swift ABI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no, will update separately)
 Changelog is updated

P.S. I need to slow down because @vixentael capacity is extremely limited recently.
P.P.S. Why did I even started this?.. It was a perfectly fine API. Yeah, it was a bit inconvenient to use, but it did work. We all know that worse is better, right? Whatever. Here you go.","please migrate to Swift

and enjoy failing code with every new version of Swift lol",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,606,2020-03-18T14:59:26Z,2020-03-20T15:07:25Z,2020-03-20T15:07:35Z,MERGED,True,2302,713,9,https://github.com/ilammy,ObjCThemis: Secure Cell API update,8,"['enhancement', 'W-SwiftThemis :large_orange_diamond:', 'compatibility', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/606,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/606#issuecomment-601729833,"Update Secure Cell API for Objective-C and Swift as a preparation to passphrase support. This has been described in RFC 3.5.
This is a non-functional change, just making the API more consistent and easy to use, with a straightforward way to add passphrase API soon.
User notes
Swift
All modes now use consistent naming of encryption/decryption methods:
let encrypted = try cell.encrypt(message, context: nil)

let decrypted = try cell.decrypt(encrypted)
They accept Data as their first unnamed argument, followed an optional context: argument (except for Context Imprint mode which requires associated context). Processed data is returned as Data. Errors are reported with Swift exceptions.
Token Protect mode improvements
Token Protect mode returns a helper object with encrypted message and authentication token:
let result = try cell.encrypt(message)

print(""Encrypted message:    "", result.encrypted)
print(""Authentication token: "", result.token)
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
let decrypted = try cell.decrypt(encrypted, token: token)
New API is bridged with Swift's Data directly, no longer requiring manual conversion from/to NSMutableData.
Objective-C
All modes now use consistent naming of encryption/decryption methods:
NSData *encrypted = [cell encrypt:message];

NSError *error;
NSData *decrypted = [cell decrypt:encrypted
                          context:nil
                            error:&error];
They accept NSData as their first argument, followed an optional context: argument (except for Context Imprint mode which requires associated context), followed by an optional error: out-parameter. Processed data is returned as NSData. Errors are reported as NSError objects, if requested.
There are convenience overloads with omitted context parameters if you don't need them, and omitted error: parameters if you're not interested in error values (nil is returned in case of error).
Token Protect mode improvements
Token Protect mode returns a helper result object with encrypted message and authentication token:
TSCellTokenEncryptedResult *result = [cell encrypt:message];

NSLog(@""Encrypted message:    %@"", result.encrypted);
NSLog(@""Authentication token: %@"", result.token);
Encrypted message and token are accepted separately for decryption, no longer requiring to fill TSCellTokenEncryptedData manually:
NSData *decrypted = [cell decrypt:encrypted token:token];
Note that new helper object TSCellTokenEncryptedResult represents only encryption result. It is immutable and uses NSData for fields.
Deprecated API
Old encryption/decryption API is declared deprecated and its use is discouraged. There are no plans to remove this API in the future, it will be retained for compatibility (probably until 1.0).

Complete list of deprecated API
Swift:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  
  
    TSCellToken
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, token:, context:)decrypt(_:, token:)
  
  
    TSCellContextImprint
    wrap(_:, context:)wrap
    encrypt(_:, context:)encrypt
  
  
    unwrapData(_:, context:)unwrapData
    decrypt(_:, context:)decrypt
  

Objective-C:

  ModeDeprecationReplacement
  
    TSCellSeal
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  
  
    TSCellToken
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:token:context:error:decrypt:token:error:
  
  
    TSCellContextImprint
    wrapData:context:error:wrapData:error:
    encrypt:context:error:encrypt:error:
  
  
    unwrapData:context:error:unwrapData:error:
    decrypt:context:error:decrypt:error:
  


Technical notes
This PR includes significant overhaul of unit test suite for ObjCThemis. It improves coverage and debuggability of ObjCThemis via tests. The test suite also includes compatibility tests.
There are a lot of tedious and repeatative changes there. All modes have roughly the same test suite but with slight differences. Objective-C and Swift test suite are identical (Swift one is a translation). However, they are important to pinpoint API details.
There were plans to improve Token Protect encryption API in Swift to return tuples:
let (encrypted, token) = try cell.encrypt(message)

print(""Encrypted message:    "", encrypted)
print(""Authentication token: "", token)
Unfortunately, this turned out to be impossible at the moment due to lack of stable Swift ABI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no, will update separately)
 Changelog is updated

P.S. I need to slow down because @vixentael capacity is extremely limited recently.
P.P.S. Why did I even started this?.. It was a perfectly fine API. Yeah, it was a bit inconvenient to use, but it did work. We all know that worse is better, right? Whatever. Here you go.","please migrate to Swift

and enjoy failing code with every new version of Swift lol

Well, if you make a slight change – Swift 5 ⟹ Swift 0.5 – then it suddenly makes a lot of sense! Give them some compassion, they've just lost a valuable number and still can't find it.",True,{'LAUGH': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,607,2020-03-20T14:52:22Z,2020-03-20T16:55:23Z,2020-03-20T16:55:33Z,MERGED,True,960,2,5,https://github.com/ilammy,Unit tests in Carthage project,1,"['tests', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/607,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/607,"Add unit test targets and schemes into Carthage project of ObjCThemis. This makes it much easier to iterate on ObjCThemis since now you don't need to do a silly dance with pushing commits and pulling changes in order to just run your unit tests.
Now all you need to do is open ObjCThemis.xcodeproj, hack on ObjCThemis, then select ""Test Themis (Swift 4/5, macOS/iOS)"" scheme and press ⌘U. That's it. No Internet connection required (after carthage bootstrap to pull OpenSSL dependency).

Alternatively, you can run the tests from command-line:
xcodebuild \
    -derivedDataPath DerivedData  \
    -project ObjCThemis.xcodeproj \
    -scheme ""Test Themis (Swift 5, macOS)"" \
    test

[...]

Test Suite 'Test Themis (Swift 5, macOS).xctest' passed at 2020-03-20 16:43:02.167.
	 Executed 45 tests, with 0 failures (0 unexpected) in 4.090 (4.131) seconds
Test Suite 'All tests' passed at 2020-03-20 16:43:02.169.
	 Executed 45 tests, with 0 failures (0 unexpected) in 4.090 (4.133) seconds
2020-03-20 16:43:02.436 xcodebuild[54596:907204] [MT] IDETestOperationsObserverDebug: 4.709 elapsed -- Testing started completed.
2020-03-20 16:43:02.436 xcodebuild[54596:907204] [MT] IDETestOperationsObserverDebug: 0.000 sec, +0.000 sec -- start
2020-03-20 16:43:02.436 xcodebuild[54596:907204] [MT] IDETestOperationsObserverDebug: 4.709 sec, +4.709 sec -- end

Test session results, code coverage, and logs:
	themis/DerivedData/Logs/Test/Test-Test Themis (Swift 5, macOS)-2020.03.20_16-42-28-+0200.xcresult

** TEST SUCCEEDED **

The changes are all in Xcode XML stuff so you'd probably want to pull the branch to your machine and try it out.
Checklist

 Change is covered by automated tests a
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (maybe later, if we feel like it during the release)

a We did not have Carthage tests before so Bitrise does not test them. I'll look into it after this PR is merged. Can't do that in the PR itself because Bitrise.","Add unit test targets and schemes into Carthage project of ObjCThemis. This makes it much easier to iterate on ObjCThemis since now you don't need to do a silly dance with pushing commits and pulling changes in order to just run your unit tests.
Now all you need to do is open ObjCThemis.xcodeproj, hack on ObjCThemis, then select ""Test Themis (Swift 4/5, macOS/iOS)"" scheme and press ⌘U. That's it. No Internet connection required (after carthage bootstrap to pull OpenSSL dependency).

Alternatively, you can run the tests from command-line:
xcodebuild \
    -derivedDataPath DerivedData  \
    -project ObjCThemis.xcodeproj \
    -scheme ""Test Themis (Swift 5, macOS)"" \
    test

[...]

Test Suite 'Test Themis (Swift 5, macOS).xctest' passed at 2020-03-20 16:43:02.167.
	 Executed 45 tests, with 0 failures (0 unexpected) in 4.090 (4.131) seconds
Test Suite 'All tests' passed at 2020-03-20 16:43:02.169.
	 Executed 45 tests, with 0 failures (0 unexpected) in 4.090 (4.133) seconds
2020-03-20 16:43:02.436 xcodebuild[54596:907204] [MT] IDETestOperationsObserverDebug: 4.709 elapsed -- Testing started completed.
2020-03-20 16:43:02.436 xcodebuild[54596:907204] [MT] IDETestOperationsObserverDebug: 0.000 sec, +0.000 sec -- start
2020-03-20 16:43:02.436 xcodebuild[54596:907204] [MT] IDETestOperationsObserverDebug: 4.709 sec, +4.709 sec -- end

Test session results, code coverage, and logs:
	themis/DerivedData/Logs/Test/Test-Test Themis (Swift 5, macOS)-2020.03.20_16-42-28-+0200.xcresult

** TEST SUCCEEDED **

The changes are all in Xcode XML stuff so you'd probably want to pull the branch to your machine and try it out.
Checklist

 Change is covered by automated tests a
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (maybe later, if we feel like it during the release)

a We did not have Carthage tests before so Bitrise does not test them. I'll look into it after this PR is merged. Can't do that in the PR itself because Bitrise.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,607,2020-03-20T14:52:22Z,2020-03-20T16:55:23Z,2020-03-20T16:55:33Z,MERGED,True,960,2,5,https://github.com/ilammy,Unit tests in Carthage project,1,"['tests', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/607,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/607#issuecomment-601741780,"Add unit test targets and schemes into Carthage project of ObjCThemis. This makes it much easier to iterate on ObjCThemis since now you don't need to do a silly dance with pushing commits and pulling changes in order to just run your unit tests.
Now all you need to do is open ObjCThemis.xcodeproj, hack on ObjCThemis, then select ""Test Themis (Swift 4/5, macOS/iOS)"" scheme and press ⌘U. That's it. No Internet connection required (after carthage bootstrap to pull OpenSSL dependency).

Alternatively, you can run the tests from command-line:
xcodebuild \
    -derivedDataPath DerivedData  \
    -project ObjCThemis.xcodeproj \
    -scheme ""Test Themis (Swift 5, macOS)"" \
    test

[...]

Test Suite 'Test Themis (Swift 5, macOS).xctest' passed at 2020-03-20 16:43:02.167.
	 Executed 45 tests, with 0 failures (0 unexpected) in 4.090 (4.131) seconds
Test Suite 'All tests' passed at 2020-03-20 16:43:02.169.
	 Executed 45 tests, with 0 failures (0 unexpected) in 4.090 (4.133) seconds
2020-03-20 16:43:02.436 xcodebuild[54596:907204] [MT] IDETestOperationsObserverDebug: 4.709 elapsed -- Testing started completed.
2020-03-20 16:43:02.436 xcodebuild[54596:907204] [MT] IDETestOperationsObserverDebug: 0.000 sec, +0.000 sec -- start
2020-03-20 16:43:02.436 xcodebuild[54596:907204] [MT] IDETestOperationsObserverDebug: 4.709 sec, +4.709 sec -- end

Test session results, code coverage, and logs:
	themis/DerivedData/Logs/Test/Test-Test Themis (Swift 5, macOS)-2020.03.20_16-42-28-+0200.xcresult

** TEST SUCCEEDED **

The changes are all in Xcode XML stuff so you'd probably want to pull the branch to your machine and try it out.
Checklist

 Change is covered by automated tests a
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (maybe later, if we feel like it during the release)

a We did not have Carthage tests before so Bitrise does not test them. I'll look into it after this PR is merged. Can't do that in the PR itself because Bitrise.","I typically switch Swift version in Xcode project target, so it makes a lot of sense to create separate targets",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,608,2020-03-23T16:59:15Z,2020-03-24T07:43:02Z,2020-03-24T07:43:08Z,MERGED,True,281,339,2,https://github.com/ilammy,Update WasmThemis dev-dependencies,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/608,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/608,"A vulnerability has been found in minimist which is one of our transitive dependencies via mocha. Update dependency version to allow the fix to be applied.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (dev dependency, no advisory necessary)","A vulnerability has been found in minimist which is one of our transitive dependencies via mocha. Update dependency version to allow the fix to be applied.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (dev dependency, no advisory necessary)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,609,2020-03-23T17:40:33Z,2020-03-27T16:46:28Z,2020-03-27T16:46:51Z,MERGED,True,600,4,5,https://github.com/ilammy,Secure Cell passphrase API: ObjCThemis,5,"['W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/609,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/609,"Add support of Secure Cell passphrase API to ObjCThemis, powering Objective-C and Swift interfaces. The API is described in RFC 3.5 (with extensions).
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Swift API
Here is how you can use passphrases with Secure Cell in Swift:
import themis

let cell = TSCellSeal(passphrase: ""secret"")!

let message = ""precious message"".data(using: .utf8)!

let encrypted = try cell.encrypt(message)
let decrypted = try cell.decrypt(encrypted)

assert(decrypted == message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Generate a new key if you don't have one:
let masterKey = TSGenerateSymmetricKey()
// Or use an existing value that you store somewhere:
let masterKey = Data(base64Encoded: ""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U="")!

let cell = TSCellSeal(key: masterKey)!

let message = ""precious message"".data(using: .utf8)!

let encrypted = try cell.encrypt(message)
let decrypted = try cell.decrypt(encrypted)

assert(decrypted == message)
Objective-C
The passphrase examples above are equally simple in Objective-C too:
#import <objcthemis/objcthemis.h>

TSCellSeal *cell = [[TSCellSeal alloc] initWithPassphrase:@""secret""];

NSData *message = [@""precious message"" dataUsingEncoding:NSUTF8StringEncoding];

NSData *encrypted = [cell encrypt:message];
NSData *decrypted = [cell decrypt:encrypted];

XCTAssertTrue([decrypted isEqualToData:message]);
with master key API staying the same:
// Generate a new key if you don't have one:
NSData *masterKey = TSGenerateSymmetricKey();
// Or use an existing value that you store somewhere:
NSData *masterKey = [[NSData alloc] initWithBase64EncodedString:@""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=""];

TSCellSeal *cell = [[TSCellSeal alloc] initWithKey:masterKey];
Technical notes
There are no significant deviations from RFC 3.5 this time.
Then only change is the addition of initWithPassphrase:usingEncoding: method based on previous experience with PyThemis and RbThemis. EDIT: which ultimately was removed because of Swift compatibility.
Unfortunately, this method cannot be made available to Swift because the automatic type translation cannot convert NSStringEncoding into String.Encoding. We cannnot use NS_REFINED_FOR_SWIFT either to correct this, so Swift users can only encode strings explicitly themselves. Since this is a compatiblity API, no significant usability issues are expected.
Note the initializers. This is not how you do class clusters in Objective-C, but unfortunately this is the only way to get a sane Swift API without actually writing Swift code. We cannot include Swift code in ObjCThemis because Swift lacks ABI stability and Xcode projects require a particular version of Swift to be set.
Swift 5 supports stable ABI but we cannot do much about this while we have to support Swift 4 (which we will probably do until it is available in Xcode).
Current implementation is usable as is but it is currently impossible for users to inherit from TSCellSealWithPassphrase. This should not be necessary, it seems, but there are legitimate cases when this might be requested (i.e., common base64-encoded encryption). We'll deal with that later based on user feedback. It is possible to export the private subclass to allow subclassing it, but initialization via TSCellSeal is still much more convenient.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (no benches for Obj-C specifically)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (will do after 0.13 release)
 Changelog is updated","Add support of Secure Cell passphrase API to ObjCThemis, powering Objective-C and Swift interfaces. The API is described in RFC 3.5 (with extensions).
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Swift API
Here is how you can use passphrases with Secure Cell in Swift:
import themis

let cell = TSCellSeal(passphrase: ""secret"")!

let message = ""precious message"".data(using: .utf8)!

let encrypted = try cell.encrypt(message)
let decrypted = try cell.decrypt(encrypted)

assert(decrypted == message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Generate a new key if you don't have one:
let masterKey = TSGenerateSymmetricKey()
// Or use an existing value that you store somewhere:
let masterKey = Data(base64Encoded: ""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U="")!

let cell = TSCellSeal(key: masterKey)!

let message = ""precious message"".data(using: .utf8)!

let encrypted = try cell.encrypt(message)
let decrypted = try cell.decrypt(encrypted)

assert(decrypted == message)
Objective-C
The passphrase examples above are equally simple in Objective-C too:
#import <objcthemis/objcthemis.h>

TSCellSeal *cell = [[TSCellSeal alloc] initWithPassphrase:@""secret""];

NSData *message = [@""precious message"" dataUsingEncoding:NSUTF8StringEncoding];

NSData *encrypted = [cell encrypt:message];
NSData *decrypted = [cell decrypt:encrypted];

XCTAssertTrue([decrypted isEqualToData:message]);
with master key API staying the same:
// Generate a new key if you don't have one:
NSData *masterKey = TSGenerateSymmetricKey();
// Or use an existing value that you store somewhere:
NSData *masterKey = [[NSData alloc] initWithBase64EncodedString:@""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=""];

TSCellSeal *cell = [[TSCellSeal alloc] initWithKey:masterKey];
Technical notes
There are no significant deviations from RFC 3.5 this time.
Then only change is the addition of initWithPassphrase:usingEncoding: method based on previous experience with PyThemis and RbThemis. EDIT: which ultimately was removed because of Swift compatibility.
Unfortunately, this method cannot be made available to Swift because the automatic type translation cannot convert NSStringEncoding into String.Encoding. We cannnot use NS_REFINED_FOR_SWIFT either to correct this, so Swift users can only encode strings explicitly themselves. Since this is a compatiblity API, no significant usability issues are expected.
Note the initializers. This is not how you do class clusters in Objective-C, but unfortunately this is the only way to get a sane Swift API without actually writing Swift code. We cannot include Swift code in ObjCThemis because Swift lacks ABI stability and Xcode projects require a particular version of Swift to be set.
Swift 5 supports stable ABI but we cannot do much about this while we have to support Swift 4 (which we will probably do until it is available in Xcode).
Current implementation is usable as is but it is currently impossible for users to inherit from TSCellSealWithPassphrase. This should not be necessary, it seems, but there are legitimate cases when this might be requested (i.e., common base64-encoded encryption). We'll deal with that later based on user feedback. It is possible to export the private subclass to allow subclassing it, but initialization via TSCellSeal is still much more convenient.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (no benches for Obj-C specifically)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (will do after 0.13 release)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,610,2020-03-24T10:12:23Z,2020-03-24T12:22:26Z,2020-03-24T12:22:37Z,MERGED,True,10,5,1,https://github.com/ilammy,Improve git ref hacks in ObjCThemis,1,"['W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/610,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/610,"It turns out that GitHub uses a temporary ref for building pull requests that contains the pull request head merged with the base branch. Unfortunately, CocoaPods cannot fetch that commit because it does not fetch all git refs, only branches. This means that all pull requests will fail as CocoaPods is not able to fetch them.
Instead of using GITHUB_REPOSITORY and GITHUB_SHA, use tweaked versions of them when building pull requests. They will tell CocoaPods and Carthage to fetch the branch submitted in pull request, not the result of merge of that branch with the base branch.
It's kind of stupid but I have no other ideas on how to test builds that depend on git refs in the repo itself. Blame CocoaPods, IDK vOv
Also, we should trigger this workflow when Cartfile is changed, not Carthage (which is the build directory).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation","It turns out that GitHub uses a temporary ref for building pull requests that contains the pull request head merged with the base branch. Unfortunately, CocoaPods cannot fetch that commit because it does not fetch all git refs, only branches. This means that all pull requests will fail as CocoaPods is not able to fetch them.
Instead of using GITHUB_REPOSITORY and GITHUB_SHA, use tweaked versions of them when building pull requests. They will tell CocoaPods and Carthage to fetch the branch submitted in pull request, not the result of merge of that branch with the base branch.
It's kind of stupid but I have no other ideas on how to test builds that depend on git refs in the repo itself. Blame CocoaPods, IDK vOv
Also, we should trigger this workflow when Cartfile is changed, not Carthage (which is the build directory).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,610,2020-03-24T10:12:23Z,2020-03-24T12:22:26Z,2020-03-24T12:22:37Z,MERGED,True,10,5,1,https://github.com/ilammy,Improve git ref hacks in ObjCThemis,1,"['W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/610,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/610#issuecomment-603207116,"It turns out that GitHub uses a temporary ref for building pull requests that contains the pull request head merged with the base branch. Unfortunately, CocoaPods cannot fetch that commit because it does not fetch all git refs, only branches. This means that all pull requests will fail as CocoaPods is not able to fetch them.
Instead of using GITHUB_REPOSITORY and GITHUB_SHA, use tweaked versions of them when building pull requests. They will tell CocoaPods and Carthage to fetch the branch submitted in pull request, not the result of merge of that branch with the base branch.
It's kind of stupid but I have no other ideas on how to test builds that depend on git refs in the repo itself. Blame CocoaPods, IDK vOv
Also, we should trigger this workflow when Cartfile is changed, not Carthage (which is the build directory).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation","sounds really weird

I've just reread the PR description and realized that I could have replaced it with an excerpt from here without significant loss of clarity for other people 😂",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,611,2020-03-25T16:51:49Z,2020-03-27T16:48:19Z,2020-03-27T16:48:25Z,MERGED,True,325,99,3,https://github.com/ilammy,"""configure"" script for platform detection",3,['infrastructure'],https://github.com/cossacklabs/themis/pull/611,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/611,"Move most of the platform detection logic out from the Makefile into a traditional configure script, Since the system is unlike to change, this allows to run (costly) platform detection things only once at the first build. Incremental builds during development become much faster.

macOSLinux
BeforeAfterBeforeAfter
make clean in empty dir         3.196  2.858 0.890 1.166 
make all from scratch          11.762 12.183 6.226 6.273 
make all again with no changes  3.231  0.504 0.936 0.300 
make all with one changed file  3.247  0.816 1.101 0.553 
make clean after build          4.564  0.939 0.896 0.328 

After a while you get really annoyed by every make operation taking usually around three seconds and up to 8 (eight, Carl!) seconds if caches are cold. Lowering it to sub-second range is more tolerable.
Why so slow?
The main culprit here is Homebrew that really takes its time to locate OpenSSL installation directory. Thankfully, it does not update the formula database now, but it did before. Some people complained about this simple operation taking enormous amount of time but the maintainer said this is fine and not a bug.
All other scripting languages combined can be treated as accomplices. Each individual version check looks cheap on its own, but doing them altogether takes a couple of seconds.
Surprisingly, the supported calls to check C compiler flags are fast enough so I did not bother moving them out to ./configure (though it's a task traditionally performed by it). There's also some weird interplay with AFL there, so that's left for the future.
On ./configure
The script follows GNU conventions expected from it though there is not much configuration involved. We also diverge from the usual approach to out-of-source builds. The traditional way is to call configure from the build directory with --srcdir, but we keep using BUILD_PATH to set
the build directory and expect make to be call from tree root.
Note that it is not necessary to explicitly call ./configure before the build. Make will check if it has not been called and will configure the build if necessary. So for most of the users the happy path is still
make
sudo make install

But you can use ./configure if, say, you want a different installation prefix:
./configure --prefix=/opt/themis
make
sudo make install

The entire script is an exercise in portable POSIX shell scripting. Don't you dare utter ""Au*****ls"" in this house.
What are those fancy comment sections?
We're (slowly) unifying the makefile structure across projects. This is the new way™ of doing things.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation","Move most of the platform detection logic out from the Makefile into a traditional configure script, Since the system is unlike to change, this allows to run (costly) platform detection things only once at the first build. Incremental builds during development become much faster.

macOSLinux
BeforeAfterBeforeAfter
make clean in empty dir         3.196  2.858 0.890 1.166 
make all from scratch          11.762 12.183 6.226 6.273 
make all again with no changes  3.231  0.504 0.936 0.300 
make all with one changed file  3.247  0.816 1.101 0.553 
make clean after build          4.564  0.939 0.896 0.328 

After a while you get really annoyed by every make operation taking usually around three seconds and up to 8 (eight, Carl!) seconds if caches are cold. Lowering it to sub-second range is more tolerable.
Why so slow?
The main culprit here is Homebrew that really takes its time to locate OpenSSL installation directory. Thankfully, it does not update the formula database now, but it did before. Some people complained about this simple operation taking enormous amount of time but the maintainer said this is fine and not a bug.
All other scripting languages combined can be treated as accomplices. Each individual version check looks cheap on its own, but doing them altogether takes a couple of seconds.
Surprisingly, the supported calls to check C compiler flags are fast enough so I did not bother moving them out to ./configure (though it's a task traditionally performed by it). There's also some weird interplay with AFL there, so that's left for the future.
On ./configure
The script follows GNU conventions expected from it though there is not much configuration involved. We also diverge from the usual approach to out-of-source builds. The traditional way is to call configure from the build directory with --srcdir, but we keep using BUILD_PATH to set
the build directory and expect make to be call from tree root.
Note that it is not necessary to explicitly call ./configure before the build. Make will check if it has not been called and will configure the build if necessary. So for most of the users the happy path is still
make
sudo make install

But you can use ./configure if, say, you want a different installation prefix:
./configure --prefix=/opt/themis
make
sudo make install

The entire script is an exercise in portable POSIX shell scripting. Don't you dare utter ""Au*****ls"" in this house.
What are those fancy comment sections?
We're (slowly) unifying the makefile structure across projects. This is the new way™ of doing things.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,611,2020-03-25T16:51:49Z,2020-03-27T16:48:19Z,2020-03-27T16:48:25Z,MERGED,True,325,99,3,https://github.com/ilammy,"""configure"" script for platform detection",3,['infrastructure'],https://github.com/cossacklabs/themis/pull/611,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/611#issuecomment-604045290,"Move most of the platform detection logic out from the Makefile into a traditional configure script, Since the system is unlike to change, this allows to run (costly) platform detection things only once at the first build. Incremental builds during development become much faster.

macOSLinux
BeforeAfterBeforeAfter
make clean in empty dir         3.196  2.858 0.890 1.166 
make all from scratch          11.762 12.183 6.226 6.273 
make all again with no changes  3.231  0.504 0.936 0.300 
make all with one changed file  3.247  0.816 1.101 0.553 
make clean after build          4.564  0.939 0.896 0.328 

After a while you get really annoyed by every make operation taking usually around three seconds and up to 8 (eight, Carl!) seconds if caches are cold. Lowering it to sub-second range is more tolerable.
Why so slow?
The main culprit here is Homebrew that really takes its time to locate OpenSSL installation directory. Thankfully, it does not update the formula database now, but it did before. Some people complained about this simple operation taking enormous amount of time but the maintainer said this is fine and not a bug.
All other scripting languages combined can be treated as accomplices. Each individual version check looks cheap on its own, but doing them altogether takes a couple of seconds.
Surprisingly, the supported calls to check C compiler flags are fast enough so I did not bother moving them out to ./configure (though it's a task traditionally performed by it). There's also some weird interplay with AFL there, so that's left for the future.
On ./configure
The script follows GNU conventions expected from it though there is not much configuration involved. We also diverge from the usual approach to out-of-source builds. The traditional way is to call configure from the build directory with --srcdir, but we keep using BUILD_PATH to set
the build directory and expect make to be call from tree root.
Note that it is not necessary to explicitly call ./configure before the build. Make will check if it has not been called and will configure the build if necessary. So for most of the users the happy path is still
make
sudo make install

But you can use ./configure if, say, you want a different installation prefix:
./configure --prefix=/opt/themis
make
sudo make install

The entire script is an exercise in portable POSIX shell scripting. Don't you dare utter ""Au*****ls"" in this house.
What are those fancy comment sections?
We're (slowly) unifying the makefile structure across projects. This is the new way™ of doing things.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation","Okay, no clue why PHP build broke, but it seems that something is wrong with PHP 5.6, not this changeset, and it's not some transient issue in GitHub Actions.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,611,2020-03-25T16:51:49Z,2020-03-27T16:48:19Z,2020-03-27T16:48:25Z,MERGED,True,325,99,3,https://github.com/ilammy,"""configure"" script for platform detection",3,['infrastructure'],https://github.com/cossacklabs/themis/pull/611,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/611#issuecomment-604449391,"Move most of the platform detection logic out from the Makefile into a traditional configure script, Since the system is unlike to change, this allows to run (costly) platform detection things only once at the first build. Incremental builds during development become much faster.

macOSLinux
BeforeAfterBeforeAfter
make clean in empty dir         3.196  2.858 0.890 1.166 
make all from scratch          11.762 12.183 6.226 6.273 
make all again with no changes  3.231  0.504 0.936 0.300 
make all with one changed file  3.247  0.816 1.101 0.553 
make clean after build          4.564  0.939 0.896 0.328 

After a while you get really annoyed by every make operation taking usually around three seconds and up to 8 (eight, Carl!) seconds if caches are cold. Lowering it to sub-second range is more tolerable.
Why so slow?
The main culprit here is Homebrew that really takes its time to locate OpenSSL installation directory. Thankfully, it does not update the formula database now, but it did before. Some people complained about this simple operation taking enormous amount of time but the maintainer said this is fine and not a bug.
All other scripting languages combined can be treated as accomplices. Each individual version check looks cheap on its own, but doing them altogether takes a couple of seconds.
Surprisingly, the supported calls to check C compiler flags are fast enough so I did not bother moving them out to ./configure (though it's a task traditionally performed by it). There's also some weird interplay with AFL there, so that's left for the future.
On ./configure
The script follows GNU conventions expected from it though there is not much configuration involved. We also diverge from the usual approach to out-of-source builds. The traditional way is to call configure from the build directory with --srcdir, but we keep using BUILD_PATH to set
the build directory and expect make to be call from tree root.
Note that it is not necessary to explicitly call ./configure before the build. Make will check if it has not been called and will configure the build if necessary. So for most of the users the happy path is still
make
sudo make install

But you can use ./configure if, say, you want a different installation prefix:
./configure --prefix=/opt/themis
make
sudo make install

The entire script is an exercise in portable POSIX shell scripting. Don't you dare utter ""Au*****ls"" in this house.
What are those fancy comment sections?
We're (slowly) unifying the makefile structure across projects. This is the new way™ of doing things.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation","I have realized why PHP build on GHA broke with PHP 5.6 while CircleCI build is fine.
This is because with these changes we no longer detect environment changes on each make. The whole point of these changes is to avoid this behavior. However, this means that if the environment changes between builds then a manual ./configure (or make clean) is necessary to apply the updates.
GHA testing script installs all PHP versions and switches them during the test run. However, PHP 7 is the default one and that's what we detect on the first make call. After we switch to PHP 5.6 being default, the configuration file still says that we're using PHP 7.
CircleCI runs PHP tests in isolated environments so PHP versions gets detected there correctly.
Well, we can't do much about it as this will be the expected behavior with these changes. It should not affect non-developers as they are unlikely to change environments mid-build. However, we need to be more careful in the future. All hail the tests!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,612,2020-03-26T15:15:58Z,2020-03-27T16:47:17Z,2020-03-27T16:47:22Z,MERGED,True,177,35,4,https://github.com/ilammy,Wipe Secure Cell key copy on deallocation,1,"['W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/612,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/612,"Secure Cell currently makes a copy of the master key it was given. Since Objective-C is fairly low level and exposes the key property, it makes sense to wipe the sensitive key from memory when it can no longer be used by Secure Cell.
Do so by changing the underlying property type to NSMutableData and calling the wiping code in dealloc of TSCell.
While we're here, improve API docs of the basic Secure Cell class that actually stores the key.
Note that in Objective-C the key property returns NSData which respects retain-release mechanics so the users get a reference to the same data object as used by Secure Cell. However, in Swift NSData is bridged into Data type which has value semantics and effectively copies our copy of the key. We obviously cannot and should not wipe the copies we are not aware of, so this is a best effort approach.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (somewhat interesting, but hopefully irrelevant)
 The coding guidelines are followed
 Public API has proper documentation","Secure Cell currently makes a copy of the master key it was given. Since Objective-C is fairly low level and exposes the key property, it makes sense to wipe the sensitive key from memory when it can no longer be used by Secure Cell.
Do so by changing the underlying property type to NSMutableData and calling the wiping code in dealloc of TSCell.
While we're here, improve API docs of the basic Secure Cell class that actually stores the key.
Note that in Objective-C the key property returns NSData which respects retain-release mechanics so the users get a reference to the same data object as used by Secure Cell. However, in Swift NSData is bridged into Data type which has value semantics and effectively copies our copy of the key. We obviously cannot and should not wipe the copies we are not aware of, so this is a best effort approach.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (somewhat interesting, but hopefully irrelevant)
 The coding guidelines are followed
 Public API has proper documentation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,612,2020-03-26T15:15:58Z,2020-03-27T16:47:17Z,2020-03-27T16:47:22Z,MERGED,True,177,35,4,https://github.com/ilammy,Wipe Secure Cell key copy on deallocation,1,"['W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/612,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/612#issuecomment-604510172,"Secure Cell currently makes a copy of the master key it was given. Since Objective-C is fairly low level and exposes the key property, it makes sense to wipe the sensitive key from memory when it can no longer be used by Secure Cell.
Do so by changing the underlying property type to NSMutableData and calling the wiping code in dealloc of TSCell.
While we're here, improve API docs of the basic Secure Cell class that actually stores the key.
Note that in Objective-C the key property returns NSData which respects retain-release mechanics so the users get a reference to the same data object as used by Secure Cell. However, in Swift NSData is bridged into Data type which has value semantics and effectively copies our copy of the key. We obviously cannot and should not wipe the copies we are not aware of, so this is a best effort approach.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (somewhat interesting, but hopefully irrelevant)
 The coding guidelines are followed
 Public API has proper documentation","Question: in new passphrase interface, passphrase is stored in key property, so we don’t need to take any other steps to wipe it, right?

Correct. It can be accessed as key and it will be wiped too.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,613,2020-03-26T16:09:10Z,2020-03-27T16:47:51Z,2020-03-27T16:47:55Z,MERGED,True,7,7,1,https://github.com/ilammy,Correct data corruption tests,1,"['tests', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/613,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/613,"Replace 256 - byte with ~byte as an example of data corruption. I don't know what the person writing that was thinking, but if the byte happens to be equal exactly 128 then 256 – 128 = 128, nothing gets corrupted, and the tests fail. They do occasionally fail, when the stars are just right, this was attributed to some issue in the token parsers of Secure Cell which ignored some of the bytes. Now all that code has been updated to be more strict so any changes in the data should be reliably detected and result in a failure.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Replace 256 - byte with ~byte as an example of data corruption. I don't know what the person writing that was thinking, but if the byte happens to be equal exactly 128 then 256 – 128 = 128, nothing gets corrupted, and the tests fail. They do occasionally fail, when the stars are just right, this was attributed to some issue in the token parsers of Secure Cell which ignored some of the bytes. Now all that code has been updated to be more strict so any changes in the data should be reliably detected and result in a failure.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,614,2020-03-26T17:42:53Z,2020-04-01T08:52:23Z,2020-04-01T08:52:29Z,MERGED,True,339,119,6,https://github.com/ilammy,Test and deprecate Themis 0.9.6 compatibility path,15,"['core', 'tests', 'compatibility']",https://github.com/cossacklabs/themis/pull/614,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/614,"I've been meaning to do this for some time. Now that other parts of Secure Cell has been updated, I guess it's due.
Test for Themis 0.9.6 compatibility
One historical version of Themis has been using incorrect KDF which produced data that cannot be decrypted with the correct function. In order to work around this issue, the code contains a fallback path which tries the incorrect compatibility KDF if decryption fails with the derived key produced by the correct KDF. See #279 for the background on this story.
Unfortunately, this code path is not tested whatsoever and this is not good. Add tests that verify that Themis is able decrypt data produced by buggy Themis 0.9.6.
P.S. clang-format surely has some weirdly twisted idea about how byte arrays should be formatted *sigh* whatever...
Cleanup Context Imprint compatibility code path
Extract key derivation into functions like this is done for Seal and Token Protect mode. This makes the code more readable and highlights the compatibility issue that we are dealing with.
Update the usage sites too, remove magic macros, make sure that the derived keys are wiped after processing.
Cleanup Context Imprint IV computation
It's really not obvious why Context Imprint's IV computation is performed with a key derivation function. At least extract this bit into a separate function that can be commented.
Cleanup the usage sites, replace macros with plain C code, make sure that IV is wiped after processing since it is derived from the key.
Drop unused typedef themis_sym_message_hdr_t
It has never been used since Context Imprint mode does not produce any authentication token that needs a header.
Remove SCELL_COMPAT define and ignore NO_SCELL_COMPAT variable
UPD: We decided to keep the compatibility code for now, but have it disabled by default instead of current approach of keeping it enabled. Now, WITH_SCELL_COMPAT variable has to be used to enable the compatiblity.
It does not really make much sense for the users to not enable the compatibility code path that allows to decrypt historical data. In fact, not a single build that we distribute disables this code path.
Remove all SCELL_COMPAT ifdefs and ignore NO_SCELL_COMPAT setting, making the compatibility always enabled.
This has a side effect of slightly slowing down decryption of really corrupted messages since we will be always trying the fallback path. However, this is not that significant loss as originally envisioned, and normal usage of Themis should not be affected.
Use compatibility path on 32-bit machines too
First of all, 64-bit machines are more common so this code path will be used in almost all cases. Second, 32-bit machines may need to deal with data encrypted by Themis 0.9.6 on 64-bit machines, so disabling it for 32-bit machines does not make much sense.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (too lazy to benchmark failure path)
 The coding guidelines are followed
 Changelog is updated","I've been meaning to do this for some time. Now that other parts of Secure Cell has been updated, I guess it's due.
Test for Themis 0.9.6 compatibility
One historical version of Themis has been using incorrect KDF which produced data that cannot be decrypted with the correct function. In order to work around this issue, the code contains a fallback path which tries the incorrect compatibility KDF if decryption fails with the derived key produced by the correct KDF. See #279 for the background on this story.
Unfortunately, this code path is not tested whatsoever and this is not good. Add tests that verify that Themis is able decrypt data produced by buggy Themis 0.9.6.
P.S. clang-format surely has some weirdly twisted idea about how byte arrays should be formatted *sigh* whatever...
Cleanup Context Imprint compatibility code path
Extract key derivation into functions like this is done for Seal and Token Protect mode. This makes the code more readable and highlights the compatibility issue that we are dealing with.
Update the usage sites too, remove magic macros, make sure that the derived keys are wiped after processing.
Cleanup Context Imprint IV computation
It's really not obvious why Context Imprint's IV computation is performed with a key derivation function. At least extract this bit into a separate function that can be commented.
Cleanup the usage sites, replace macros with plain C code, make sure that IV is wiped after processing since it is derived from the key.
Drop unused typedef themis_sym_message_hdr_t
It has never been used since Context Imprint mode does not produce any authentication token that needs a header.
Remove SCELL_COMPAT define and ignore NO_SCELL_COMPAT variable
UPD: We decided to keep the compatibility code for now, but have it disabled by default instead of current approach of keeping it enabled. Now, WITH_SCELL_COMPAT variable has to be used to enable the compatiblity.
It does not really make much sense for the users to not enable the compatibility code path that allows to decrypt historical data. In fact, not a single build that we distribute disables this code path.
Remove all SCELL_COMPAT ifdefs and ignore NO_SCELL_COMPAT setting, making the compatibility always enabled.
This has a side effect of slightly slowing down decryption of really corrupted messages since we will be always trying the fallback path. However, this is not that significant loss as originally envisioned, and normal usage of Themis should not be affected.
Use compatibility path on 32-bit machines too
First of all, 64-bit machines are more common so this code path will be used in almost all cases. Second, 32-bit machines may need to deal with data encrypted by Themis 0.9.6 on 64-bit machines, so disabling it for 32-bit machines does not make much sense.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (too lazy to benchmark failure path)
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,614,2020-03-26T17:42:53Z,2020-04-01T08:52:23Z,2020-04-01T08:52:29Z,MERGED,True,339,119,6,https://github.com/ilammy,Test and deprecate Themis 0.9.6 compatibility path,15,"['core', 'tests', 'compatibility']",https://github.com/cossacklabs/themis/pull/614,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/614#issuecomment-604634908,"I've been meaning to do this for some time. Now that other parts of Secure Cell has been updated, I guess it's due.
Test for Themis 0.9.6 compatibility
One historical version of Themis has been using incorrect KDF which produced data that cannot be decrypted with the correct function. In order to work around this issue, the code contains a fallback path which tries the incorrect compatibility KDF if decryption fails with the derived key produced by the correct KDF. See #279 for the background on this story.
Unfortunately, this code path is not tested whatsoever and this is not good. Add tests that verify that Themis is able decrypt data produced by buggy Themis 0.9.6.
P.S. clang-format surely has some weirdly twisted idea about how byte arrays should be formatted *sigh* whatever...
Cleanup Context Imprint compatibility code path
Extract key derivation into functions like this is done for Seal and Token Protect mode. This makes the code more readable and highlights the compatibility issue that we are dealing with.
Update the usage sites too, remove magic macros, make sure that the derived keys are wiped after processing.
Cleanup Context Imprint IV computation
It's really not obvious why Context Imprint's IV computation is performed with a key derivation function. At least extract this bit into a separate function that can be commented.
Cleanup the usage sites, replace macros with plain C code, make sure that IV is wiped after processing since it is derived from the key.
Drop unused typedef themis_sym_message_hdr_t
It has never been used since Context Imprint mode does not produce any authentication token that needs a header.
Remove SCELL_COMPAT define and ignore NO_SCELL_COMPAT variable
UPD: We decided to keep the compatibility code for now, but have it disabled by default instead of current approach of keeping it enabled. Now, WITH_SCELL_COMPAT variable has to be used to enable the compatiblity.
It does not really make much sense for the users to not enable the compatibility code path that allows to decrypt historical data. In fact, not a single build that we distribute disables this code path.
Remove all SCELL_COMPAT ifdefs and ignore NO_SCELL_COMPAT setting, making the compatibility always enabled.
This has a side effect of slightly slowing down decryption of really corrupted messages since we will be always trying the fallback path. However, this is not that significant loss as originally envisioned, and normal usage of Themis should not be affected.
Use compatibility path on 32-bit machines too
First of all, 64-bit machines are more common so this code path will be used in almost all cases. Second, 32-bit machines may need to deal with data encrypted by Themis 0.9.6 on 64-bit machines, so disabling it for 32-bit machines does not make much sense.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (too lazy to benchmark failure path)
 The coding guidelines are followed
 Changelog is updated","removing old workarounds

Quite the opposite: we remove the way to remove the workaround, carving it in stone. Well, until the moment we decide that no one ever should have data encrypted by faulty 0.9.6 and earlier and remove ability to read it entirely.

we can get significant slow down when lib tries to decrypt data

This code is already enabled in virtually every 64-bit build that we distribute even without this PR. It does not slow down the happy path when valid data is decrypted. However, attempts to decrypt corrupted data are two times slower than necessary, and of course compatibility data takes twice as much time to decrypt successfully.

We used SCELL_COMPAT flag and x64 checks to be able to limit slow down on platforms where developers are sure that they didn’t used 0.9.6, thus don’t need compatibility mode.

It's a valid feature but I believe that probably no one is going to bother with disabling this mode since that involves a) realizing that you need to disable it since you decrypt a lot of corrupted data and an x2 boost will significantly improve your life, b) reading the source code to realize that you actually can disable it, since this flag is not documented anywhere else, c) recompiling Themis Core binaries because we do not ship builds with disabled compatibility path.
Edit: I believe that anyone competent enough to do all of that will surely be able to remove the workaround in the source code themselves. I don't really recall any requests for Themis builds without this flag so keeping it does not make our life easier as well. However, its existence is a constant reminder that we do not check builds with NO_SCELL_COMPAT automatically.
The most questionable thing is the use case. By leaving the compatibility code path we enable Themis to handle strictly more possible valid cases of decryption. By removing it we get a speedup in a questionable use case while making it impossible to decrypt some valid data. It's hard to image a case where you need to constantly deal with corrupted data and that x2 speedup will significantly improve your application.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,614,2020-03-26T17:42:53Z,2020-04-01T08:52:23Z,2020-04-01T08:52:29Z,MERGED,True,339,119,6,https://github.com/ilammy,Test and deprecate Themis 0.9.6 compatibility path,15,"['core', 'tests', 'compatibility']",https://github.com/cossacklabs/themis/pull/614,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/614#issuecomment-604987537,"I've been meaning to do this for some time. Now that other parts of Secure Cell has been updated, I guess it's due.
Test for Themis 0.9.6 compatibility
One historical version of Themis has been using incorrect KDF which produced data that cannot be decrypted with the correct function. In order to work around this issue, the code contains a fallback path which tries the incorrect compatibility KDF if decryption fails with the derived key produced by the correct KDF. See #279 for the background on this story.
Unfortunately, this code path is not tested whatsoever and this is not good. Add tests that verify that Themis is able decrypt data produced by buggy Themis 0.9.6.
P.S. clang-format surely has some weirdly twisted idea about how byte arrays should be formatted *sigh* whatever...
Cleanup Context Imprint compatibility code path
Extract key derivation into functions like this is done for Seal and Token Protect mode. This makes the code more readable and highlights the compatibility issue that we are dealing with.
Update the usage sites too, remove magic macros, make sure that the derived keys are wiped after processing.
Cleanup Context Imprint IV computation
It's really not obvious why Context Imprint's IV computation is performed with a key derivation function. At least extract this bit into a separate function that can be commented.
Cleanup the usage sites, replace macros with plain C code, make sure that IV is wiped after processing since it is derived from the key.
Drop unused typedef themis_sym_message_hdr_t
It has never been used since Context Imprint mode does not produce any authentication token that needs a header.
Remove SCELL_COMPAT define and ignore NO_SCELL_COMPAT variable
UPD: We decided to keep the compatibility code for now, but have it disabled by default instead of current approach of keeping it enabled. Now, WITH_SCELL_COMPAT variable has to be used to enable the compatiblity.
It does not really make much sense for the users to not enable the compatibility code path that allows to decrypt historical data. In fact, not a single build that we distribute disables this code path.
Remove all SCELL_COMPAT ifdefs and ignore NO_SCELL_COMPAT setting, making the compatibility always enabled.
This has a side effect of slightly slowing down decryption of really corrupted messages since we will be always trying the fallback path. However, this is not that significant loss as originally envisioned, and normal usage of Themis should not be affected.
Use compatibility path on 32-bit machines too
First of all, 64-bit machines are more common so this code path will be used in almost all cases. Second, 32-bit machines may need to deal with data encrypted by Themis 0.9.6 on 64-bit machines, so disabling it for 32-bit machines does not make much sense.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (too lazy to benchmark failure path)
 The coding guidelines are followed
 Changelog is updated","Initially #279 PR introduced a temporary workaround to be able to decrypt messages encrypted by buggy version of Themis (0.9.7). This bug affected only narrow case when messages are encrypted on one architecture (let’s say x32) and decrypted on another one (let’s say x64).
It affected only users who used 0.9.6 and updated Themis to 0.9.7 and higher. It was planned to remove double decryption with development of new versions, not to make double decryption a standard behavior :D
I think that this PR makes double decryption a standard behavior in many cases when Themis can’t decrypt messages due to various reasons. As Themis does NOT distinguish if data is corrupted because it was encrypted by 0.9.6 or because any other reasons, it will attempt to double decrypt it anyway. That’s why I think that we are seeing performance degradation in all cases when Themis can’t decrypt data from first time, not only in case that this data was produced by 0.9.6.
(If you show me performance benchmarks that says that double decryption happens ONLY if data was produced by 0.9.6, and not because key is invalid, data is invalid, other reasons, I’ll change my mind.)
My belief is that we should NOT turn “temporary workaround” into a default behavior that will affect all Themis users from now to foreva.
I think we either should leave it AS IS until some new version, or DISABLE the workaround itself (because 0.9.6 was 3 years ago, chances are high that many users have already migrated to newer versions and don’t handle with corrupted data, but even if they do, current version still supports fix).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,614,2020-03-26T17:42:53Z,2020-04-01T08:52:23Z,2020-04-01T08:52:29Z,MERGED,True,339,119,6,https://github.com/ilammy,Test and deprecate Themis 0.9.6 compatibility path,15,"['core', 'tests', 'compatibility']",https://github.com/cossacklabs/themis/pull/614,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/614#issuecomment-605068863,"I've been meaning to do this for some time. Now that other parts of Secure Cell has been updated, I guess it's due.
Test for Themis 0.9.6 compatibility
One historical version of Themis has been using incorrect KDF which produced data that cannot be decrypted with the correct function. In order to work around this issue, the code contains a fallback path which tries the incorrect compatibility KDF if decryption fails with the derived key produced by the correct KDF. See #279 for the background on this story.
Unfortunately, this code path is not tested whatsoever and this is not good. Add tests that verify that Themis is able decrypt data produced by buggy Themis 0.9.6.
P.S. clang-format surely has some weirdly twisted idea about how byte arrays should be formatted *sigh* whatever...
Cleanup Context Imprint compatibility code path
Extract key derivation into functions like this is done for Seal and Token Protect mode. This makes the code more readable and highlights the compatibility issue that we are dealing with.
Update the usage sites too, remove magic macros, make sure that the derived keys are wiped after processing.
Cleanup Context Imprint IV computation
It's really not obvious why Context Imprint's IV computation is performed with a key derivation function. At least extract this bit into a separate function that can be commented.
Cleanup the usage sites, replace macros with plain C code, make sure that IV is wiped after processing since it is derived from the key.
Drop unused typedef themis_sym_message_hdr_t
It has never been used since Context Imprint mode does not produce any authentication token that needs a header.
Remove SCELL_COMPAT define and ignore NO_SCELL_COMPAT variable
UPD: We decided to keep the compatibility code for now, but have it disabled by default instead of current approach of keeping it enabled. Now, WITH_SCELL_COMPAT variable has to be used to enable the compatiblity.
It does not really make much sense for the users to not enable the compatibility code path that allows to decrypt historical data. In fact, not a single build that we distribute disables this code path.
Remove all SCELL_COMPAT ifdefs and ignore NO_SCELL_COMPAT setting, making the compatibility always enabled.
This has a side effect of slightly slowing down decryption of really corrupted messages since we will be always trying the fallback path. However, this is not that significant loss as originally envisioned, and normal usage of Themis should not be affected.
Use compatibility path on 32-bit machines too
First of all, 64-bit machines are more common so this code path will be used in almost all cases. Second, 32-bit machines may need to deal with data encrypted by Themis 0.9.6 on 64-bit machines, so disabling it for 32-bit machines does not make much sense.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (too lazy to benchmark failure path)
 The coding guidelines are followed
 Changelog is updated","It was planned to remove double decryption with development of new versions, not to make double decryption a standard behavior :D

IMO, it depends on our stability guarantees. Bug-for-bug compatibility is totally a thing. I think that changing application code is relatively easier than hunting down all contaminated data, so we should be even more averse to removing data processing capabilities than removing deprecated API features.

My belief is that we should NOT turn “temporary workaround” into a default behavior that will affect all Themis users from now to foreva.

New users should not be generally affected since new versions use the new (correct) KDF during encryption and that's the one that we try first during decryption. It's a nice property of your workaround.
For them to be completely unaffected their need to not use data encrypted by 0.9.6 and eithe wait for us to remove the workaround, or make a custom build of Themis without it for themselves.

because 0.9.6 was 3 years ago, chances are high that many users have already migrated to newer versions and don’t handle with corrupted data

True, but there is no reliable way to tell other than try decrypting everything in the world with the workaround disabled.

but even if they do, current version still supports fix

If we remove the workaround, it won't support it. The release notes for 0.10 did note that you should upgrade, reencrypting the data was described as a last resort approach, not something that needs to be done after upgrading.

Given our commitment to a 3-year support cycle, and the fact that 0.9.6 will go EOL on 2020-12-13, it seems a reasonable to take the following apporach:

leave the NO_SCELL_COMPAT as is for the next release
issue an announcement that Themis will stop maintaining this workaround in 2021
emphasize that users should migrate their encrypted data while they still can, if they suspect they might be affected (that is, if they used Themis 0.9.6 or earlier)
schedule the removal of 0.9.6 compatibility in 2021

As for our own products, it seems that only the initial Acra 0.75 used old enough Themis, so we're kinda probably safe 🤞",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,614,2020-03-26T17:42:53Z,2020-04-01T08:52:23Z,2020-04-01T08:52:29Z,MERGED,True,339,119,6,https://github.com/ilammy,Test and deprecate Themis 0.9.6 compatibility path,15,"['core', 'tests', 'compatibility']",https://github.com/cossacklabs/themis/pull/614,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/614#issuecomment-605073469,"I've been meaning to do this for some time. Now that other parts of Secure Cell has been updated, I guess it's due.
Test for Themis 0.9.6 compatibility
One historical version of Themis has been using incorrect KDF which produced data that cannot be decrypted with the correct function. In order to work around this issue, the code contains a fallback path which tries the incorrect compatibility KDF if decryption fails with the derived key produced by the correct KDF. See #279 for the background on this story.
Unfortunately, this code path is not tested whatsoever and this is not good. Add tests that verify that Themis is able decrypt data produced by buggy Themis 0.9.6.
P.S. clang-format surely has some weirdly twisted idea about how byte arrays should be formatted *sigh* whatever...
Cleanup Context Imprint compatibility code path
Extract key derivation into functions like this is done for Seal and Token Protect mode. This makes the code more readable and highlights the compatibility issue that we are dealing with.
Update the usage sites too, remove magic macros, make sure that the derived keys are wiped after processing.
Cleanup Context Imprint IV computation
It's really not obvious why Context Imprint's IV computation is performed with a key derivation function. At least extract this bit into a separate function that can be commented.
Cleanup the usage sites, replace macros with plain C code, make sure that IV is wiped after processing since it is derived from the key.
Drop unused typedef themis_sym_message_hdr_t
It has never been used since Context Imprint mode does not produce any authentication token that needs a header.
Remove SCELL_COMPAT define and ignore NO_SCELL_COMPAT variable
UPD: We decided to keep the compatibility code for now, but have it disabled by default instead of current approach of keeping it enabled. Now, WITH_SCELL_COMPAT variable has to be used to enable the compatiblity.
It does not really make much sense for the users to not enable the compatibility code path that allows to decrypt historical data. In fact, not a single build that we distribute disables this code path.
Remove all SCELL_COMPAT ifdefs and ignore NO_SCELL_COMPAT setting, making the compatibility always enabled.
This has a side effect of slightly slowing down decryption of really corrupted messages since we will be always trying the fallback path. However, this is not that significant loss as originally envisioned, and normal usage of Themis should not be affected.
Use compatibility path on 32-bit machines too
First of all, 64-bit machines are more common so this code path will be used in almost all cases. Second, 32-bit machines may need to deal with data encrypted by Themis 0.9.6 on 64-bit machines, so disabling it for 32-bit machines does not make much sense.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (too lazy to benchmark failure path)
 The coding guidelines are followed
 Changelog is updated","Or rather than simply leaving the NO_SCELL_COMPAT, I'd enable it in this release, removing the compatibility code from general builds that we publish. So the compatibility will be gone, but if someone comes to us with reports that their are much enterprise and cannot migrate but still want the new version, we can at least provide them with instructions on how to build it with the compatibility feature. And then we can completely remove the code in 2021 (so in year, after a couple of releases without the compatibility shim).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,614,2020-03-26T17:42:53Z,2020-04-01T08:52:23Z,2020-04-01T08:52:29Z,MERGED,True,339,119,6,https://github.com/ilammy,Test and deprecate Themis 0.9.6 compatibility path,15,"['core', 'tests', 'compatibility']",https://github.com/cossacklabs/themis/pull/614,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/614#issuecomment-605084787,"I've been meaning to do this for some time. Now that other parts of Secure Cell has been updated, I guess it's due.
Test for Themis 0.9.6 compatibility
One historical version of Themis has been using incorrect KDF which produced data that cannot be decrypted with the correct function. In order to work around this issue, the code contains a fallback path which tries the incorrect compatibility KDF if decryption fails with the derived key produced by the correct KDF. See #279 for the background on this story.
Unfortunately, this code path is not tested whatsoever and this is not good. Add tests that verify that Themis is able decrypt data produced by buggy Themis 0.9.6.
P.S. clang-format surely has some weirdly twisted idea about how byte arrays should be formatted *sigh* whatever...
Cleanup Context Imprint compatibility code path
Extract key derivation into functions like this is done for Seal and Token Protect mode. This makes the code more readable and highlights the compatibility issue that we are dealing with.
Update the usage sites too, remove magic macros, make sure that the derived keys are wiped after processing.
Cleanup Context Imprint IV computation
It's really not obvious why Context Imprint's IV computation is performed with a key derivation function. At least extract this bit into a separate function that can be commented.
Cleanup the usage sites, replace macros with plain C code, make sure that IV is wiped after processing since it is derived from the key.
Drop unused typedef themis_sym_message_hdr_t
It has never been used since Context Imprint mode does not produce any authentication token that needs a header.
Remove SCELL_COMPAT define and ignore NO_SCELL_COMPAT variable
UPD: We decided to keep the compatibility code for now, but have it disabled by default instead of current approach of keeping it enabled. Now, WITH_SCELL_COMPAT variable has to be used to enable the compatiblity.
It does not really make much sense for the users to not enable the compatibility code path that allows to decrypt historical data. In fact, not a single build that we distribute disables this code path.
Remove all SCELL_COMPAT ifdefs and ignore NO_SCELL_COMPAT setting, making the compatibility always enabled.
This has a side effect of slightly slowing down decryption of really corrupted messages since we will be always trying the fallback path. However, this is not that significant loss as originally envisioned, and normal usage of Themis should not be affected.
Use compatibility path on 32-bit machines too
First of all, 64-bit machines are more common so this code path will be used in almost all cases. Second, 32-bit machines may need to deal with data encrypted by Themis 0.9.6 on 64-bit machines, so disabling it for 32-bit machines does not make much sense.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (too lazy to benchmark failure path)
 The coding guidelines are followed
 Changelog is updated","Or rather than simply leaving the NO_SCELL_COMPAT, I'd enable it in this release, removing the compatibility code from general builds that we publish.
..
And then we can completely remove the code in 2021 (so in year, after a couple of releases without the compatibility shim).

Agree with this scenario, let do this way.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,614,2020-03-26T17:42:53Z,2020-04-01T08:52:23Z,2020-04-01T08:52:29Z,MERGED,True,339,119,6,https://github.com/ilammy,Test and deprecate Themis 0.9.6 compatibility path,15,"['core', 'tests', 'compatibility']",https://github.com/cossacklabs/themis/pull/614,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/614#issuecomment-605093164,"I've been meaning to do this for some time. Now that other parts of Secure Cell has been updated, I guess it's due.
Test for Themis 0.9.6 compatibility
One historical version of Themis has been using incorrect KDF which produced data that cannot be decrypted with the correct function. In order to work around this issue, the code contains a fallback path which tries the incorrect compatibility KDF if decryption fails with the derived key produced by the correct KDF. See #279 for the background on this story.
Unfortunately, this code path is not tested whatsoever and this is not good. Add tests that verify that Themis is able decrypt data produced by buggy Themis 0.9.6.
P.S. clang-format surely has some weirdly twisted idea about how byte arrays should be formatted *sigh* whatever...
Cleanup Context Imprint compatibility code path
Extract key derivation into functions like this is done for Seal and Token Protect mode. This makes the code more readable and highlights the compatibility issue that we are dealing with.
Update the usage sites too, remove magic macros, make sure that the derived keys are wiped after processing.
Cleanup Context Imprint IV computation
It's really not obvious why Context Imprint's IV computation is performed with a key derivation function. At least extract this bit into a separate function that can be commented.
Cleanup the usage sites, replace macros with plain C code, make sure that IV is wiped after processing since it is derived from the key.
Drop unused typedef themis_sym_message_hdr_t
It has never been used since Context Imprint mode does not produce any authentication token that needs a header.
Remove SCELL_COMPAT define and ignore NO_SCELL_COMPAT variable
UPD: We decided to keep the compatibility code for now, but have it disabled by default instead of current approach of keeping it enabled. Now, WITH_SCELL_COMPAT variable has to be used to enable the compatiblity.
It does not really make much sense for the users to not enable the compatibility code path that allows to decrypt historical data. In fact, not a single build that we distribute disables this code path.
Remove all SCELL_COMPAT ifdefs and ignore NO_SCELL_COMPAT setting, making the compatibility always enabled.
This has a side effect of slightly slowing down decryption of really corrupted messages since we will be always trying the fallback path. However, this is not that significant loss as originally envisioned, and normal usage of Themis should not be affected.
Use compatibility path on 32-bit machines too
First of all, 64-bit machines are more common so this code path will be used in almost all cases. Second, 32-bit machines may need to deal with data encrypted by Themis 0.9.6 on 64-bit machines, so disabling it for 32-bit machines does not make much sense.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (too lazy to benchmark failure path)
 The coding guidelines are followed
 Changelog is updated","Okay... I've pushed commits that

bring back SCELL_COMPAT define
replace NO_SCELL_COMPAT variable with WITH_SCELL_COMPAT
make the compatibility code disabled by default, unless built WITH_SCELL_COMPAT
describe the circumstances in CHANGELOG, warn about removal
add Themis Core tests that verify builds with and without compatibilty",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,615,2020-03-26T18:12:33Z,2020-03-30T07:28:54Z,2020-03-30T07:28:59Z,MERGED,True,34,35,13,https://github.com/ilammy,Update to actions/checkout@v2,5,['infrastructure'],https://github.com/cossacklabs/themis/pull/615,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/615,"Some of our build jobs *cough* Android *cough* occasionally need to be restarted. One issue that I've noticed is that for restarted jobs the checkout task tries to fetch a different commit (PR branch HEAD, not the result of merge with the base branch). Since v1 is unlikely to be maintained, let's upgrade to v2 and see if that issue persists.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Some of our build jobs *cough* Android *cough* occasionally need to be restarted. One issue that I've noticed is that for restarted jobs the checkout task tries to fetch a different commit (PR branch HEAD, not the result of merge with the base branch). Since v1 is unlikely to be maintained, let's upgrade to v2 and see if that issue persists.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,615,2020-03-26T18:12:33Z,2020-03-30T07:28:54Z,2020-03-30T07:28:59Z,MERGED,True,34,35,13,https://github.com/ilammy,Update to actions/checkout@v2,5,['infrastructure'],https://github.com/cossacklabs/themis/pull/615,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/615#issuecomment-605791942,"Some of our build jobs *cough* Android *cough* occasionally need to be restarted. One issue that I've noticed is that for restarted jobs the checkout task tries to fetch a different commit (PR branch HEAD, not the result of merge with the base branch). Since v1 is unlikely to be maintained, let's upgrade to v2 and see if that issue persists.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Actions seem to assist with testing by randomly failing this PR on package update stages, apparently so that the jobs can be restarted manually...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,616,2020-03-30T08:17:34Z,2020-04-08T13:57:08Z,2020-04-08T13:57:19Z,MERGED,True,524,62,12,https://github.com/ilammy,Secure Cell passphrase API: WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/616,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/616,"Add support of Secure Cell passphrase API to WasmThemis. The API is described in RFC 3.6.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in JavaScript:
const themis = require('wasm-themis')

let cell = themis.SecureCellSeal.withPassphrase('secret')

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Generate a new key if you don't have one:
let masterKey = new themis.SymmetricKey()
// Or use an existing value that you store somewhere:
let masterKey = Buffer.from('b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=', 'base64')

let cell = themis.SecureCellSeal.withKey(masterKey)

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
API deprecations
new constructor of all Secure Cell classes is now (soft-)deprecated. We do not recommend its use due to ambiguity of whether you work with master keys or passphrases. Please use new factory methods instead:
// PLEASE DO
let cell = themis.SecureCellTokenProtect.withKey(masterKey)

// don't:
let cell = new themis.SecureCellTokenProtect(masterKey)
There are no plans to remove the constructors, they are still supported and will work as before, accepting only master keys.
Technical notes
There are no significant deviations from RFC 3.6.
Just like with other wrappers, the new subclass SecureCellSealWithPassphrase is kept private for now. It can be made public if it becomes necessary to subclass it, but for now it is expected that the users would not want to do that.
WebAssembly is still an VM which has certain overheads. Passphrase API seems to be ~4 times slower in WebAssembly than native code (~450 ms per call, compared to ~125 ms native). I have considered lowering PBKDF2 iterations for Wasm to improve performance, but I guess we should not lower the security because of that. If this becomes an issue for someone, the preferred way is to use master keys instead. If that is not possible, we'll consider expanding the API to allow advanced and informed users to tweak the PBKDF2 iteration count.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (kinda, see CI test output)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","Add support of Secure Cell passphrase API to WasmThemis. The API is described in RFC 3.6.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in JavaScript:
const themis = require('wasm-themis')

let cell = themis.SecureCellSeal.withPassphrase('secret')

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Generate a new key if you don't have one:
let masterKey = new themis.SymmetricKey()
// Or use an existing value that you store somewhere:
let masterKey = Buffer.from('b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=', 'base64')

let cell = themis.SecureCellSeal.withKey(masterKey)

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
API deprecations
new constructor of all Secure Cell classes is now (soft-)deprecated. We do not recommend its use due to ambiguity of whether you work with master keys or passphrases. Please use new factory methods instead:
// PLEASE DO
let cell = themis.SecureCellTokenProtect.withKey(masterKey)

// don't:
let cell = new themis.SecureCellTokenProtect(masterKey)
There are no plans to remove the constructors, they are still supported and will work as before, accepting only master keys.
Technical notes
There are no significant deviations from RFC 3.6.
Just like with other wrappers, the new subclass SecureCellSealWithPassphrase is kept private for now. It can be made public if it becomes necessary to subclass it, but for now it is expected that the users would not want to do that.
WebAssembly is still an VM which has certain overheads. Passphrase API seems to be ~4 times slower in WebAssembly than native code (~450 ms per call, compared to ~125 ms native). I have considered lowering PBKDF2 iterations for Wasm to improve performance, but I guess we should not lower the security because of that. If this becomes an issue for someone, the preferred way is to use master keys instead. If that is not possible, we'll consider expanding the API to allow advanced and informed users to tweak the PBKDF2 iteration count.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (kinda, see CI test output)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,616,2020-03-30T08:17:34Z,2020-04-08T13:57:08Z,2020-04-08T13:57:19Z,MERGED,True,524,62,12,https://github.com/ilammy,Secure Cell passphrase API: WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/616,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/616#issuecomment-605862776,"Add support of Secure Cell passphrase API to WasmThemis. The API is described in RFC 3.6.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in JavaScript:
const themis = require('wasm-themis')

let cell = themis.SecureCellSeal.withPassphrase('secret')

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Generate a new key if you don't have one:
let masterKey = new themis.SymmetricKey()
// Or use an existing value that you store somewhere:
let masterKey = Buffer.from('b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=', 'base64')

let cell = themis.SecureCellSeal.withKey(masterKey)

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
API deprecations
new constructor of all Secure Cell classes is now (soft-)deprecated. We do not recommend its use due to ambiguity of whether you work with master keys or passphrases. Please use new factory methods instead:
// PLEASE DO
let cell = themis.SecureCellTokenProtect.withKey(masterKey)

// don't:
let cell = new themis.SecureCellTokenProtect(masterKey)
There are no plans to remove the constructors, they are still supported and will work as before, accepting only master keys.
Technical notes
There are no significant deviations from RFC 3.6.
Just like with other wrappers, the new subclass SecureCellSealWithPassphrase is kept private for now. It can be made public if it becomes necessary to subclass it, but for now it is expected that the users would not want to do that.
WebAssembly is still an VM which has certain overheads. Passphrase API seems to be ~4 times slower in WebAssembly than native code (~450 ms per call, compared to ~125 ms native). I have considered lowering PBKDF2 iterations for Wasm to improve performance, but I guess we should not lower the security because of that. If this becomes an issue for someone, the preferred way is to use master keys instead. If that is not possible, we'll consider expanding the API to allow advanced and informed users to tweak the PBKDF2 iteration count.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (kinda, see CI test output)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","Node.js v10:

ReferenceError: TextEncoder is not defined

*sigh* It's polyfill time!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,616,2020-03-30T08:17:34Z,2020-04-08T13:57:08Z,2020-04-08T13:57:19Z,MERGED,True,524,62,12,https://github.com/ilammy,Secure Cell passphrase API: WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/616,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/616#issuecomment-605878574,"Add support of Secure Cell passphrase API to WasmThemis. The API is described in RFC 3.6.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in JavaScript:
const themis = require('wasm-themis')

let cell = themis.SecureCellSeal.withPassphrase('secret')

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Generate a new key if you don't have one:
let masterKey = new themis.SymmetricKey()
// Or use an existing value that you store somewhere:
let masterKey = Buffer.from('b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=', 'base64')

let cell = themis.SecureCellSeal.withKey(masterKey)

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
API deprecations
new constructor of all Secure Cell classes is now (soft-)deprecated. We do not recommend its use due to ambiguity of whether you work with master keys or passphrases. Please use new factory methods instead:
// PLEASE DO
let cell = themis.SecureCellTokenProtect.withKey(masterKey)

// don't:
let cell = new themis.SecureCellTokenProtect(masterKey)
There are no plans to remove the constructors, they are still supported and will work as before, accepting only master keys.
Technical notes
There are no significant deviations from RFC 3.6.
Just like with other wrappers, the new subclass SecureCellSealWithPassphrase is kept private for now. It can be made public if it becomes necessary to subclass it, but for now it is expected that the users would not want to do that.
WebAssembly is still an VM which has certain overheads. Passphrase API seems to be ~4 times slower in WebAssembly than native code (~450 ms per call, compared to ~125 ms native). I have considered lowering PBKDF2 iterations for Wasm to improve performance, but I guess we should not lower the security because of that. If this becomes an issue for someone, the preferred way is to use master keys instead. If that is not possible, we'll consider expanding the API to allow advanced and informed users to tweak the PBKDF2 iteration count.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (kinda, see CI test output)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","O, JavaScript, language of a thousand incompatibilities! You managed to bring Lisp to the Web, with all its merits and vices!
Long story short, Node.js v10 and some outdated browsers do not support TextEncoder API. Add a polyfill to provide TextEncoder API on those platforms.
We don't want to write yet another UTF-8 encoder ourselves to let's use a library. This is our first external dependency in WasmThemis. Here are some obligatory links:

https://github.com/anonyco/FastestSmallestTextEncoderDecoder
https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder

The library does not have any dependencies itself, is licensed under the Unlicense (effectively public domain) which is compatible with our Apache 2.0, has seen some testing, and is quite minimal so we can maintain it ourselves if necessary. However, I'd consider adding explicit npm audit steps to build jobs from now on...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,616,2020-03-30T08:17:34Z,2020-04-08T13:57:08Z,2020-04-08T13:57:19Z,MERGED,True,524,62,12,https://github.com/ilammy,Secure Cell passphrase API: WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/616,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/616#issuecomment-607531497,"Add support of Secure Cell passphrase API to WasmThemis. The API is described in RFC 3.6.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in JavaScript:
const themis = require('wasm-themis')

let cell = themis.SecureCellSeal.withPassphrase('secret')

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Generate a new key if you don't have one:
let masterKey = new themis.SymmetricKey()
// Or use an existing value that you store somewhere:
let masterKey = Buffer.from('b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=', 'base64')

let cell = themis.SecureCellSeal.withKey(masterKey)

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
API deprecations
new constructor of all Secure Cell classes is now (soft-)deprecated. We do not recommend its use due to ambiguity of whether you work with master keys or passphrases. Please use new factory methods instead:
// PLEASE DO
let cell = themis.SecureCellTokenProtect.withKey(masterKey)

// don't:
let cell = new themis.SecureCellTokenProtect(masterKey)
There are no plans to remove the constructors, they are still supported and will work as before, accepting only master keys.
Technical notes
There are no significant deviations from RFC 3.6.
Just like with other wrappers, the new subclass SecureCellSealWithPassphrase is kept private for now. It can be made public if it becomes necessary to subclass it, but for now it is expected that the users would not want to do that.
WebAssembly is still an VM which has certain overheads. Passphrase API seems to be ~4 times slower in WebAssembly than native code (~450 ms per call, compared to ~125 ms native). I have considered lowering PBKDF2 iterations for Wasm to improve performance, but I guess we should not lower the security because of that. If this becomes an issue for someone, the preferred way is to use master keys instead. If that is not possible, we'll consider expanding the API to allow advanced and informed users to tweak the PBKDF2 iteration count.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (kinda, see CI test output)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","Long story short, Node.js v10

shouldn't we drop v10 eventually? do you have some date in mind? v10 EOL will happen in a year (https://nodejs.org/en/about/releases/)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,616,2020-03-30T08:17:34Z,2020-04-08T13:57:08Z,2020-04-08T13:57:19Z,MERGED,True,524,62,12,https://github.com/ilammy,Secure Cell passphrase API: WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/616,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/616#issuecomment-607651757,"Add support of Secure Cell passphrase API to WasmThemis. The API is described in RFC 3.6.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in JavaScript:
const themis = require('wasm-themis')

let cell = themis.SecureCellSeal.withPassphrase('secret')

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Generate a new key if you don't have one:
let masterKey = new themis.SymmetricKey()
// Or use an existing value that you store somewhere:
let masterKey = Buffer.from('b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=', 'base64')

let cell = themis.SecureCellSeal.withKey(masterKey)

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
API deprecations
new constructor of all Secure Cell classes is now (soft-)deprecated. We do not recommend its use due to ambiguity of whether you work with master keys or passphrases. Please use new factory methods instead:
// PLEASE DO
let cell = themis.SecureCellTokenProtect.withKey(masterKey)

// don't:
let cell = new themis.SecureCellTokenProtect(masterKey)
There are no plans to remove the constructors, they are still supported and will work as before, accepting only master keys.
Technical notes
There are no significant deviations from RFC 3.6.
Just like with other wrappers, the new subclass SecureCellSealWithPassphrase is kept private for now. It can be made public if it becomes necessary to subclass it, but for now it is expected that the users would not want to do that.
WebAssembly is still an VM which has certain overheads. Passphrase API seems to be ~4 times slower in WebAssembly than native code (~450 ms per call, compared to ~125 ms native). I have considered lowering PBKDF2 iterations for Wasm to improve performance, but I guess we should not lower the security because of that. If this becomes an issue for someone, the preferred way is to use master keys instead. If that is not possible, we'll consider expanding the API to allow advanced and informed users to tweak the PBKDF2 iteration count.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (kinda, see CI test output)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","shouldn't we drop v10 eventually? do you have some date in mind?

Probably. I recall our general approach to supporting platforms is to leave them running if we can support them without much active effort, even if they are EOL.
For example, we still build with Node.js v8 and will continue doing it until, say, we are no longer able to install it as easily as modern versions. However, we won't add workarounds to continue supporting it specifically if some new additions break with v8 and there is no straightforward and convenient way to support it. We also won't say ""Node.js v8 is too old, please upgrade, I know it works perfectly fine but we won't test with it because you should feel bad for using old software"".
Lack of security maintenance is a problem, but IMO it's not as important for a runtime as lack of maintenance in the cryptographic backend library. If our immediate dependency OpenSSL 1.0.2 is not supported since 2020, it is a reason to say that Themis does not support it, effective immediately. If application runtime is not supported since 2020, it is not as critical as far as our library is concerned. If you consider the entire application then yes, you should fear the possible security issues and upgrade, but I don't feel that a single library is in a position to enforce it for the application, even if it's a data security library.
To sum it up: no, I don't have a particular scheduled date for removal of Node.js v10 support. It will happen after it's EOL, when maintenance becomes a burden. The need to keep a dependency to maintain compatibility is a reason to drop it earlier, but hardly a defining one.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,616,2020-03-30T08:17:34Z,2020-04-08T13:57:08Z,2020-04-08T13:57:19Z,MERGED,True,524,62,12,https://github.com/ilammy,Secure Cell passphrase API: WasmThemis,9,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/616,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/616#issuecomment-607857966,"Add support of Secure Cell passphrase API to WasmThemis. The API is described in RFC 3.6.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in JavaScript:
const themis = require('wasm-themis')

let cell = themis.SecureCellSeal.withPassphrase('secret')

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Generate a new key if you don't have one:
let masterKey = new themis.SymmetricKey()
// Or use an existing value that you store somewhere:
let masterKey = Buffer.from('b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=', 'base64')

let cell = themis.SecureCellSeal.withKey(masterKey)

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
API deprecations
new constructor of all Secure Cell classes is now (soft-)deprecated. We do not recommend its use due to ambiguity of whether you work with master keys or passphrases. Please use new factory methods instead:
// PLEASE DO
let cell = themis.SecureCellTokenProtect.withKey(masterKey)

// don't:
let cell = new themis.SecureCellTokenProtect(masterKey)
There are no plans to remove the constructors, they are still supported and will work as before, accepting only master keys.
Technical notes
There are no significant deviations from RFC 3.6.
Just like with other wrappers, the new subclass SecureCellSealWithPassphrase is kept private for now. It can be made public if it becomes necessary to subclass it, but for now it is expected that the users would not want to do that.
WebAssembly is still an VM which has certain overheads. Passphrase API seems to be ~4 times slower in WebAssembly than native code (~450 ms per call, compared to ~125 ms native). I have considered lowering PBKDF2 iterations for Wasm to improve performance, but I guess we should not lower the security because of that. If this becomes an issue for someone, the preferred way is to use master keys instead. If that is not possible, we'll consider expanding the API to allow advanced and informed users to tweak the PBKDF2 iteration count.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (kinda, see CI test output)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","To sum it up: no, I don't have a particular scheduled date for removal of Node.js v10 support. It will happen after it's EOL, when maintenance becomes a burden.

Makes sense, thank you",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,617,2020-03-30T08:46:04Z,2020-04-01T08:52:45Z,2020-04-01T08:52:49Z,MERGED,True,6,0,6,https://github.com/ilammy,Test all matrix configurations,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/617,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/617,"Add fail-fast: false to matrix testing strategies so that they continue testing other variant instead of auto-canceling them. For example, if only Node.js v8 fails, we don't want the Node.js v12 job to be canceled. This might be different in future cases, but everywhere we use ""strategy: matrix"" now, we'd like all items to be tested regardless of their siblings' failures.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation","Add fail-fast: false to matrix testing strategies so that they continue testing other variant instead of auto-canceling them. For example, if only Node.js v8 fails, we don't want the Node.js v12 job to be canceled. This might be different in future cases, but everywhere we use ""strategy: matrix"" now, we'd like all items to be tested regardless of their siblings' failures.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,618,2020-04-03T15:09:20Z,2020-04-08T15:48:49Z,2020-04-08T15:48:53Z,MERGED,True,994,59,11,https://github.com/ilammy,Simplify JsThemis packaging and test launch,5,"['infrastructure', 'tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/618,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/618,"This patch set unifies JsThemis with WasmThemis a bit.

package.json files are updated with latest versions and more complete metadata
jsthemis_install, jsthemis_uninstall targets are simplified
test_js target no longer requires JsThemis to be installed and prepared

See details in commit messages.
The main goal of these changes is to make it easier to maintain JsThemis. With these changes the developers can iterate on JsThemis by running npm test directly from src/wrappers/themis/jsthemis or make test_js from the source root. It is no longer necessary to not forget to run make jsthemis_install after each change in JsThemis code.
Additionally, there is a new makefile target make jsthemis which can be used to build a package tarball for local usage or publishing.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","This patch set unifies JsThemis with WasmThemis a bit.

package.json files are updated with latest versions and more complete metadata
jsthemis_install, jsthemis_uninstall targets are simplified
test_js target no longer requires JsThemis to be installed and prepared

See details in commit messages.
The main goal of these changes is to make it easier to maintain JsThemis. With these changes the developers can iterate on JsThemis by running npm test directly from src/wrappers/themis/jsthemis or make test_js from the source root. It is no longer necessary to not forget to run make jsthemis_install after each change in JsThemis code.
Additionally, there is a new makefile target make jsthemis which can be used to build a package tarball for local usage or publishing.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,618,2020-04-03T15:09:20Z,2020-04-08T15:48:49Z,2020-04-08T15:48:53Z,MERGED,True,994,59,11,https://github.com/ilammy,Simplify JsThemis packaging and test launch,5,"['infrastructure', 'tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/618,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/618#issuecomment-609832913,"This patch set unifies JsThemis with WasmThemis a bit.

package.json files are updated with latest versions and more complete metadata
jsthemis_install, jsthemis_uninstall targets are simplified
test_js target no longer requires JsThemis to be installed and prepared

See details in commit messages.
The main goal of these changes is to make it easier to maintain JsThemis. With these changes the developers can iterate on JsThemis by running npm test directly from src/wrappers/themis/jsthemis or make test_js from the source root. It is no longer necessary to not forget to run make jsthemis_install after each change in JsThemis code.
Additionally, there is a new makefile target make jsthemis which can be used to build a package tarball for local usage or publishing.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Okay, this is my best attempt so far which seems to work on my machine. Let's see if it works for CI.
I've introduced a new Make target jsthemis which can be used to manually build but not install JsThemis tarball. This way users finally have some easy way to ""build JsThemis from source"". Note that it only packs the sources. Native module will be compiled on npm install.
make test_js does not require prior installation of JsThemis, you can run it straight away from the source tree. It will use JsThemis from the source directory. The cost of this is that we have to move tests into JsThemis source tree, out from the top-level tests directory. (This is how we do WasmThemis too.)
I was not able to trick Mocha to load JsThemis from src/wrappers/themis/jsthemis when running tests from tests/jsthemis, it always ignores the current directory and goes looking for node_modules from the location of JavaScript file it currently executes. If we were installing JsThemis into source tree root that would have worked, but that's exactly what I would like to avoid to make test_js target independent. So here it is.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,620,2020-04-08T16:52:35Z,2020-04-09T12:19:07Z,2020-04-09T12:19:12Z,MERGED,True,849,392,11,https://github.com/ilammy,Update JsThemis tests,13,"['tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/620,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/620,"This PR updates JsThemis tests and fixes a bunch of issues and inconsistencies that I've discovered while working on this update.
Updated tests
Existing JsThemis tests are haphazard and incomplete. I've mostly reused WasmThemis tests, adapted them to JsThemis API, and salvaged some JsThemis-specific tests.
API changes: Secure Cell
It is now possible to use null values when the associated context is omitted:
let cell = new themis.SecureCellSeal(key)

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted, null)
This is consistent with WasmThemis.
API changes: Secure Message
It is now possible to use null values for omitted keys to initialize SecureMessage in sign/verify mode:
let verifier = new themis.SecureMessage(null, publicKey)
This is consistent with other null usage in the API.
WasmThemis has a different API for sign/verify mode of Secure Message. Its encryption API does not allow null values.
API changes: Secure Session
SecureSession will now validate private key during construction, not on the first use. This is consistent with WasmThemis (and other wrappers).
It is also possible to safely throw JavaScript exceptions from Secure Session public key callback. An exception will be reported as a failure to retrieve public key, instead of aborting the process due to Node.js error checks.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no need)
 Changelog is updated","This PR updates JsThemis tests and fixes a bunch of issues and inconsistencies that I've discovered while working on this update.
Updated tests
Existing JsThemis tests are haphazard and incomplete. I've mostly reused WasmThemis tests, adapted them to JsThemis API, and salvaged some JsThemis-specific tests.
API changes: Secure Cell
It is now possible to use null values when the associated context is omitted:
let cell = new themis.SecureCellSeal(key)

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted, null)
This is consistent with WasmThemis.
API changes: Secure Message
It is now possible to use null values for omitted keys to initialize SecureMessage in sign/verify mode:
let verifier = new themis.SecureMessage(null, publicKey)
This is consistent with other null usage in the API.
WasmThemis has a different API for sign/verify mode of Secure Message. Its encryption API does not allow null values.
API changes: Secure Session
SecureSession will now validate private key during construction, not on the first use. This is consistent with WasmThemis (and other wrappers).
It is also possible to safely throw JavaScript exceptions from Secure Session public key callback. An exception will be reported as a failure to retrieve public key, instead of aborting the process due to Node.js error checks.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no need)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,621,2020-04-09T12:31:13Z,2020-04-17T10:54:06Z,2020-04-17T10:54:12Z,MERGED,True,867,189,17,https://github.com/ilammy,Secure Cell passphrase API: JsThemis,7,"['tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/621,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/621,"Add support of Secure Cell passphrase API to JsThemis. The API is described in RFC 3.6.
These changes are similar to WasmThemis (#616). The API is basically the same, but JsThemis runs only on Node.js.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in JavaScript:
const themis = require('jsthemis')

let cell = themis.SecureCellSeal.withPassphrase('secret')

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Generate a new key if you don't have one:
let masterKey = new themis.SymmetricKey()
// Or use an existing value that you store somewhere:
let masterKey = Buffer.from('b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=', 'base64')

let cell = themis.SecureCellSeal.withKey(masterKey)

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
API deprecations
new constructor of all Secure Cell classes is now (soft-)deprecated. We do not recommend its use due to ambiguity of whether you work with master keys or passphrases. Please use new factory methods instead:
// PLEASE DO
let cell = themis.SecureCellTokenProtect.withKey(masterKey)

// don't:
let cell = new themis.SecureCellTokenProtect(masterKey)
There are no plans to remove the constructors, they are still supported and will work as before, accepting only master keys.
Technical notes
There are no significant deviations from RFC 3.6.
Just like with other wrappers, the new subclass SecureCellSealWithPassphrase is kept private for now. It can be made public if it becomes necessary to subclass it, but for now it is expected that the users would not want to do that.
While we're here, I've also added wiping of keys to Secure Cell which we can do. It's not strictly needed, but it's good hygiene and precaution.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (kinda, see CI test output)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","Add support of Secure Cell passphrase API to JsThemis. The API is described in RFC 3.6.
These changes are similar to WasmThemis (#616). The API is basically the same, but JsThemis runs only on Node.js.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in JavaScript:
const themis = require('jsthemis')

let cell = themis.SecureCellSeal.withPassphrase('secret')

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
// Generate a new key if you don't have one:
let masterKey = new themis.SymmetricKey()
// Or use an existing value that you store somewhere:
let masterKey = Buffer.from('b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U=', 'base64')

let cell = themis.SecureCellSeal.withKey(masterKey)

let message = Buffer.from('precious message')

let encrypted = cell.encrypt(message)
let decrypted = cell.decrypt(encrypted)

assert.equal(decrypted, message)
API deprecations
new constructor of all Secure Cell classes is now (soft-)deprecated. We do not recommend its use due to ambiguity of whether you work with master keys or passphrases. Please use new factory methods instead:
// PLEASE DO
let cell = themis.SecureCellTokenProtect.withKey(masterKey)

// don't:
let cell = new themis.SecureCellTokenProtect(masterKey)
There are no plans to remove the constructors, they are still supported and will work as before, accepting only master keys.
Technical notes
There are no significant deviations from RFC 3.6.
Just like with other wrappers, the new subclass SecureCellSealWithPassphrase is kept private for now. It can be made public if it becomes necessary to subclass it, but for now it is expected that the users would not want to do that.
While we're here, I've also added wiping of keys to Secure Cell which we can do. It's not strictly needed, but it's good hygiene and precaution.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (kinda, see CI test output)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,622,2020-04-20T12:27:31Z,2020-04-22T14:56:07Z,2020-04-22T14:56:07Z,MERGED,True,117,29,7,https://github.com/ilammy,Improve GoThemis error introspection,1,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/622,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/622,"GoThemis-specific errors (mostly early parameter checks) are now available as constants if you need to check for them specifically.
encrypted, _, err := scell.Protect(message, nil)
if err == errors.ErrMissingKey {
        // you forgot to set the key
}
(Normally these are programming errors, so you'd check for such conditions before calling GoThemis API. The error constants are for cases when that's not possible.)
Add numeric error code to ThemisError struct, accessible via Code() method. Now it will be possible to communicate Themis Core errors to the user code. This is intended for programmatic consumption. Human-readable descriptive message is still available via the standard Error() of the error interface.
encrypted, err := smessage.Wrap(message)
if err != nil {
        if themisErr, ok := err.(*errors.ThemisError); ok {
                if themisErr.Code() == errors.NotSupported {
                        // uh-oh...
                }
        }
}
(Normally, you do not need to look at the error code. You can see how verbose this is in the code. This API is introduced mostly to unify error reporting with other platforms that retain error code. Plus, there are rare cases in our practice when we need access to original error codes.)
For GoThemis developers
Errors with code can be constructed using NewWithCode() constructor. Existing code sites have been updated to use it for reporting various early warnings about invalid arguments. Themis Core checks for these violations too, we do these checks in Go to be able to provide more specific descriptions to users.
Note that there are still uses of errors.New(). Not all— I mean, all CGo call sites right now do not return Themis Core errors. This will be refactored eventually. For now, these call sites with use a placeholder THEMIS_FAIL as the code, which is going to be correct in 99% cases.
Also note that we now export error code constants. All of this makes it easier for user code to decide on an error type. It will also make it easier for us to write new CGo code as we can keep use of C to minimum.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no significant changes)
 Changelog is updated","GoThemis-specific errors (mostly early parameter checks) are now available as constants if you need to check for them specifically.
encrypted, _, err := scell.Protect(message, nil)
if err == errors.ErrMissingKey {
        // you forgot to set the key
}
(Normally these are programming errors, so you'd check for such conditions before calling GoThemis API. The error constants are for cases when that's not possible.)
Add numeric error code to ThemisError struct, accessible via Code() method. Now it will be possible to communicate Themis Core errors to the user code. This is intended for programmatic consumption. Human-readable descriptive message is still available via the standard Error() of the error interface.
encrypted, err := smessage.Wrap(message)
if err != nil {
        if themisErr, ok := err.(*errors.ThemisError); ok {
                if themisErr.Code() == errors.NotSupported {
                        // uh-oh...
                }
        }
}
(Normally, you do not need to look at the error code. You can see how verbose this is in the code. This API is introduced mostly to unify error reporting with other platforms that retain error code. Plus, there are rare cases in our practice when we need access to original error codes.)
For GoThemis developers
Errors with code can be constructed using NewWithCode() constructor. Existing code sites have been updated to use it for reporting various early warnings about invalid arguments. Themis Core checks for these violations too, we do these checks in Go to be able to provide more specific descriptions to users.
Note that there are still uses of errors.New(). Not all— I mean, all CGo call sites right now do not return Themis Core errors. This will be refactored eventually. For now, these call sites with use a placeholder THEMIS_FAIL as the code, which is going to be correct in 99% cases.
Also note that we now export error code constants. All of this makes it easier for user code to decide on an error type. It will also make it easier for us to write new CGo code as we can keep use of C to minimum.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no significant changes)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,622,2020-04-20T12:27:31Z,2020-04-22T14:56:07Z,2020-04-22T14:56:07Z,MERGED,True,117,29,7,https://github.com/ilammy,Improve GoThemis error introspection,1,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/622,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/622#issuecomment-616521864,"GoThemis-specific errors (mostly early parameter checks) are now available as constants if you need to check for them specifically.
encrypted, _, err := scell.Protect(message, nil)
if err == errors.ErrMissingKey {
        // you forgot to set the key
}
(Normally these are programming errors, so you'd check for such conditions before calling GoThemis API. The error constants are for cases when that's not possible.)
Add numeric error code to ThemisError struct, accessible via Code() method. Now it will be possible to communicate Themis Core errors to the user code. This is intended for programmatic consumption. Human-readable descriptive message is still available via the standard Error() of the error interface.
encrypted, err := smessage.Wrap(message)
if err != nil {
        if themisErr, ok := err.(*errors.ThemisError); ok {
                if themisErr.Code() == errors.NotSupported {
                        // uh-oh...
                }
        }
}
(Normally, you do not need to look at the error code. You can see how verbose this is in the code. This API is introduced mostly to unify error reporting with other platforms that retain error code. Plus, there are rare cases in our practice when we need access to original error codes.)
For GoThemis developers
Errors with code can be constructed using NewWithCode() constructor. Existing code sites have been updated to use it for reporting various early warnings about invalid arguments. Themis Core checks for these violations too, we do these checks in Go to be able to provide more specific descriptions to users.
Note that there are still uses of errors.New(). Not all— I mean, all CGo call sites right now do not return Themis Core errors. This will be refactored eventually. For now, these call sites with use a placeholder THEMIS_FAIL as the code, which is going to be correct in 99% cases.
Also note that we now export error code constants. All of this makes it easier for user code to decide on an error type. It will also make it easier for us to write new CGo code as we can keep use of C to minimum.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no significant changes)
 Changelog is updated","All of this is new public API so if you have naming suggestions, you'd better voice them now. Comments on error descriptions are welcome too, though they are easier to change as they are not a part of API. (Well, strictly speaking they are, but I won't feel sorry for breaking brittle code that depends on them.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,623,2020-04-20T13:31:30Z,2020-04-22T14:56:25Z,2020-04-22T14:56:46Z,MERGED,True,11,0,1,https://github.com/ilammy,Note big-endian compatibility issues in CHANGELOG,1,"['docs :books:', 'compatibility']",https://github.com/cossacklabs/themis/pull/623,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/623,"Recent changes in Secure Cell code to support password-based API and introduction of automated fuzz testing led to refactoring of a lot of code to improve resilience to malicious and erroneous inputs.
This effort has discovered that Themis is likely to be not compatible between little- and big-endian machines. Various parsing and generation code has been using “native” endian order. That is, data encrypted on little-endian machines cannot be read on big-endian machines and vice versa. If usage is strictly confined to exclusively big-endian machines then it's probably fine.
I say “probably” because big-endian architectures have never been a priority for Themis. We have never tested on them and are not sure that Themis works there correctly, even without talking about inter-endian compatibility.
So... Recent changes in Secure Cell start improving the situation by explicitly using little-endian order in data structures. Eventually this will lead to proper support of big-endian architectures which will be able to talk to little-endian machines just fine. But right now this means that data encrypted by Themis 0.12 on big-endian machines will be not readable with Themis 0.13, even on big-endian machines. Similarly, data encrypted by Themis 0.13 on big-endian machines will not be readable by Themis 0.12 on big-endian machines (but will be readable on little-endian machines).
Here's a compatibility table:

  
    Source
    Destination
  
  
    
    
    Little-endian
    Big-endian
  
  
    
    
    0.12
    0.13
    0.12
    0.13
  
  
    Little-endian
    0.12
    ✅
    ✅
    ❌
    🎉
  
  
    0.13
    ✅
    ✅
    ❌
    🎉
  
  
    Big-endian
    0.12
    ❌
    ❌
    🙏🏻
    💥
  
  
    0.13
    🎉
    🎉
    💥
    🎉
  

Legend:

✅ — known to work
❌ — probably did not work before and will not work in the future
🎉 — probably works now and will work in the future
🙏🏻 — probably worked before
💥 — is likely to be broken since 0.13 and will remain that way

This is for Secure Cell. For any other cryptosystems, big-endian ⟺ big-endian quadrant is likely to be 🙏🏻, and others are filled with ❌.
If you have been using Themis on big-endian machines and it actually worked then I'm pleasantly surprised by the portability of the code. At the same time I offer my condolences for the loss of time we're going to incur on you by doing these changes.
We will announce full big-endian support as soon as it is ready. For now, you're on your own. Themis does not support big-endian machines at the moment.","Recent changes in Secure Cell code to support password-based API and introduction of automated fuzz testing led to refactoring of a lot of code to improve resilience to malicious and erroneous inputs.
This effort has discovered that Themis is likely to be not compatible between little- and big-endian machines. Various parsing and generation code has been using “native” endian order. That is, data encrypted on little-endian machines cannot be read on big-endian machines and vice versa. If usage is strictly confined to exclusively big-endian machines then it's probably fine.
I say “probably” because big-endian architectures have never been a priority for Themis. We have never tested on them and are not sure that Themis works there correctly, even without talking about inter-endian compatibility.
So... Recent changes in Secure Cell start improving the situation by explicitly using little-endian order in data structures. Eventually this will lead to proper support of big-endian architectures which will be able to talk to little-endian machines just fine. But right now this means that data encrypted by Themis 0.12 on big-endian machines will be not readable with Themis 0.13, even on big-endian machines. Similarly, data encrypted by Themis 0.13 on big-endian machines will not be readable by Themis 0.12 on big-endian machines (but will be readable on little-endian machines).
Here's a compatibility table:

  
    Source
    Destination
  
  
    
    
    Little-endian
    Big-endian
  
  
    
    
    0.12
    0.13
    0.12
    0.13
  
  
    Little-endian
    0.12
    ✅
    ✅
    ❌
    🎉
  
  
    0.13
    ✅
    ✅
    ❌
    🎉
  
  
    Big-endian
    0.12
    ❌
    ❌
    🙏🏻
    💥
  
  
    0.13
    🎉
    🎉
    💥
    🎉
  

Legend:

✅ — known to work
❌ — probably did not work before and will not work in the future
🎉 — probably works now and will work in the future
🙏🏻 — probably worked before
💥 — is likely to be broken since 0.13 and will remain that way

This is for Secure Cell. For any other cryptosystems, big-endian ⟺ big-endian quadrant is likely to be 🙏🏻, and others are filled with ❌.
If you have been using Themis on big-endian machines and it actually worked then I'm pleasantly surprised by the portability of the code. At the same time I offer my condolences for the loss of time we're going to incur on you by doing these changes.
We will announce full big-endian support as soon as it is ready. For now, you're on your own. Themis does not support big-endian machines at the moment.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,624,2020-04-21T19:17:31Z,2020-04-23T15:56:03Z,2020-04-23T15:56:09Z,MERGED,True,2088,167,16,https://github.com/ilammy,Update GoThemis Secure Cell API,10,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/624,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/624,"This PR makes preparatory changes for new passphrase API by updating existing API of Secure Cell in GoThemis to more easy to use and similar to other Themis wrappers. The API is described in RFC 3.7.
User notes
github.com/cossacklabs/themis/gothemis/cell module now exports new Secure Cell API which can be used like this:
import (
        ""github.com/cossacklabs/themis/gothemis/cell""
        ""github.com/cossacklabs/themis/gothemis/keys""
)

// Generate a new symmetric key for Secure Cell:
key, err := keys.NewSymmetricKey()
if err != nil {
        return err
}

// Construct a Secure Cell in Seal mode:
scell, err := cell.SealWithKey(key)
if err != nil {
        return err
}

// Encrypt and decrypt a message:
encrypted, err := scell.Encrypt(message, context)
if err != nil {
        return err
}
decrypted, err := scell.Decrypt(encrypted, context)
if err != nil {
        return err
}
Deprecated API
Old API with run-time mode-setting is now considered deprecated:

cell.New() constructor function
cell.Mode... and (already deprecated) cell.CELL_MODE... constants
Protect() and Unprotect() methods of cell.SecureCell as well as the type itself

This API will be retained unchanged for compatibility, but you are urged to migrate to the new API.
Technical notes
Full rationale may be found in RFC 3.7. Main gripes with the old API were run-time mode-setting with its impact on API, syntactic noise when using more popular Seal mode, and idiosyncratic naming of methods, inconsistent with other wrappers and our own documentation.
Now, with Seal mode, instead of
encrypted, _, err := scell.Protect(message, nil)

decrypted, err := scell.Unprotect(encrypted, nil, nil)
it is possible to write
encrypted, err := scell.Encrypt(message, nil)

decrypted, err := scell.Decrypt(encrypted, nil)
Additionally, new implementation experiments with a better approach to using CGo, made possible by static mode-setting. We reduce usage of C to minimum, relying more on Go code.
Last but not least, Secure Cell gets an expanded and updated test suite (translated from whatever was done for SwiftThemis). This will definitely come handy if we are going to reimplement GoThemis in pure Go some day.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not in the mood)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated
 Dependency: #622 is merged","This PR makes preparatory changes for new passphrase API by updating existing API of Secure Cell in GoThemis to more easy to use and similar to other Themis wrappers. The API is described in RFC 3.7.
User notes
github.com/cossacklabs/themis/gothemis/cell module now exports new Secure Cell API which can be used like this:
import (
        ""github.com/cossacklabs/themis/gothemis/cell""
        ""github.com/cossacklabs/themis/gothemis/keys""
)

// Generate a new symmetric key for Secure Cell:
key, err := keys.NewSymmetricKey()
if err != nil {
        return err
}

// Construct a Secure Cell in Seal mode:
scell, err := cell.SealWithKey(key)
if err != nil {
        return err
}

// Encrypt and decrypt a message:
encrypted, err := scell.Encrypt(message, context)
if err != nil {
        return err
}
decrypted, err := scell.Decrypt(encrypted, context)
if err != nil {
        return err
}
Deprecated API
Old API with run-time mode-setting is now considered deprecated:

cell.New() constructor function
cell.Mode... and (already deprecated) cell.CELL_MODE... constants
Protect() and Unprotect() methods of cell.SecureCell as well as the type itself

This API will be retained unchanged for compatibility, but you are urged to migrate to the new API.
Technical notes
Full rationale may be found in RFC 3.7. Main gripes with the old API were run-time mode-setting with its impact on API, syntactic noise when using more popular Seal mode, and idiosyncratic naming of methods, inconsistent with other wrappers and our own documentation.
Now, with Seal mode, instead of
encrypted, _, err := scell.Protect(message, nil)

decrypted, err := scell.Unprotect(encrypted, nil, nil)
it is possible to write
encrypted, err := scell.Encrypt(message, nil)

decrypted, err := scell.Decrypt(encrypted, nil)
Additionally, new implementation experiments with a better approach to using CGo, made possible by static mode-setting. We reduce usage of C to minimum, relying more on Go code.
Last but not least, Secure Cell gets an expanded and updated test suite (translated from whatever was done for SwiftThemis). This will definitely come handy if we are going to reimplement GoThemis in pure Go some day.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not in the mood)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated
 Dependency: #622 is merged",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,624,2020-04-21T19:17:31Z,2020-04-23T15:56:03Z,2020-04-23T15:56:09Z,MERGED,True,2088,167,16,https://github.com/ilammy,Update GoThemis Secure Cell API,10,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/624,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/624#issuecomment-617368136,"This PR makes preparatory changes for new passphrase API by updating existing API of Secure Cell in GoThemis to more easy to use and similar to other Themis wrappers. The API is described in RFC 3.7.
User notes
github.com/cossacklabs/themis/gothemis/cell module now exports new Secure Cell API which can be used like this:
import (
        ""github.com/cossacklabs/themis/gothemis/cell""
        ""github.com/cossacklabs/themis/gothemis/keys""
)

// Generate a new symmetric key for Secure Cell:
key, err := keys.NewSymmetricKey()
if err != nil {
        return err
}

// Construct a Secure Cell in Seal mode:
scell, err := cell.SealWithKey(key)
if err != nil {
        return err
}

// Encrypt and decrypt a message:
encrypted, err := scell.Encrypt(message, context)
if err != nil {
        return err
}
decrypted, err := scell.Decrypt(encrypted, context)
if err != nil {
        return err
}
Deprecated API
Old API with run-time mode-setting is now considered deprecated:

cell.New() constructor function
cell.Mode... and (already deprecated) cell.CELL_MODE... constants
Protect() and Unprotect() methods of cell.SecureCell as well as the type itself

This API will be retained unchanged for compatibility, but you are urged to migrate to the new API.
Technical notes
Full rationale may be found in RFC 3.7. Main gripes with the old API were run-time mode-setting with its impact on API, syntactic noise when using more popular Seal mode, and idiosyncratic naming of methods, inconsistent with other wrappers and our own documentation.
Now, with Seal mode, instead of
encrypted, _, err := scell.Protect(message, nil)

decrypted, err := scell.Unprotect(encrypted, nil, nil)
it is possible to write
encrypted, err := scell.Encrypt(message, nil)

decrypted, err := scell.Decrypt(encrypted, nil)
Additionally, new implementation experiments with a better approach to using CGo, made possible by static mode-setting. We reduce usage of C to minimum, relying more on Go code.
Last but not least, Secure Cell gets an expanded and updated test suite (translated from whatever was done for SwiftThemis). This will definitely come handy if we are going to reimplement GoThemis in pure Go some day.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not in the mood)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated
 Dependency: #622 is merged","While it's definitely cool to be able to use
encrypted, err := scell.Encrypt(message)
to encrypt without a context, I feel that this might be excessive.
Reading
encrypted, err := scell.Encrypt(message, nil)
does not seem to be much worse. However, it is better from static typing perspective and maybe run-time performance too.
Unfortunately, Go does not support overloading so it's not possible to otherwise have a method named Encrypt which simultaneously accepts and does not accept a context argument. We'd have to either invent a new (weird) name for it, or take even more weird approach of accepting arguments via a struct.
I may have been too rash in RFC 3.7 with this implementation strategy. No one really voiced any concern back then, but now as I look at the implementation, it does not seem to be too nice. Moreover, in our code we tend to use the associated context more often than not so it makes sense to optimize the API for that case.
@Lagovas, you have seen way more Go code than me. What's your take on this?
Should we simply accept nil for “omitted context” without doing these niceties to allow the users to omit the call argument?
To be specific, maybe it's better to implement Encrypt() and Decrypt() like
func (sc *SecureCell...) Encrypt(message, context []byte) ([]byte, error)
similar to how we did before (but without “token” argument and result where not necessary).
Instead of doing this, as I envisioned in the RFC:
func (sc *SecureCell...) Encrypt(message []byte, context ...[]byte) ([]byte, error)
which is a hack allowing to omit the context argument from the call.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,624,2020-04-21T19:17:31Z,2020-04-23T15:56:03Z,2020-04-23T15:56:09Z,MERGED,True,2088,167,16,https://github.com/ilammy,Update GoThemis Secure Cell API,10,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/624,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/624#issuecomment-617590795,"This PR makes preparatory changes for new passphrase API by updating existing API of Secure Cell in GoThemis to more easy to use and similar to other Themis wrappers. The API is described in RFC 3.7.
User notes
github.com/cossacklabs/themis/gothemis/cell module now exports new Secure Cell API which can be used like this:
import (
        ""github.com/cossacklabs/themis/gothemis/cell""
        ""github.com/cossacklabs/themis/gothemis/keys""
)

// Generate a new symmetric key for Secure Cell:
key, err := keys.NewSymmetricKey()
if err != nil {
        return err
}

// Construct a Secure Cell in Seal mode:
scell, err := cell.SealWithKey(key)
if err != nil {
        return err
}

// Encrypt and decrypt a message:
encrypted, err := scell.Encrypt(message, context)
if err != nil {
        return err
}
decrypted, err := scell.Decrypt(encrypted, context)
if err != nil {
        return err
}
Deprecated API
Old API with run-time mode-setting is now considered deprecated:

cell.New() constructor function
cell.Mode... and (already deprecated) cell.CELL_MODE... constants
Protect() and Unprotect() methods of cell.SecureCell as well as the type itself

This API will be retained unchanged for compatibility, but you are urged to migrate to the new API.
Technical notes
Full rationale may be found in RFC 3.7. Main gripes with the old API were run-time mode-setting with its impact on API, syntactic noise when using more popular Seal mode, and idiosyncratic naming of methods, inconsistent with other wrappers and our own documentation.
Now, with Seal mode, instead of
encrypted, _, err := scell.Protect(message, nil)

decrypted, err := scell.Unprotect(encrypted, nil, nil)
it is possible to write
encrypted, err := scell.Encrypt(message, nil)

decrypted, err := scell.Decrypt(encrypted, nil)
Additionally, new implementation experiments with a better approach to using CGo, made possible by static mode-setting. We reduce usage of C to minimum, relying more on Go code.
Last but not least, Secure Cell gets an expanded and updated test suite (translated from whatever was done for SwiftThemis). This will definitely come handy if we are going to reimplement GoThemis in pure Go some day.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not in the mood)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated
 Dependency: #622 is merged","Do we also update “integration tests“ that check intercompatibility between different language wrappers, to check password API?

Yeah, we do have integration tests for passphrase API. We have ones for symmetric key API as well, this PR just does not update them yet. They'll be updated along with code samples.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,624,2020-04-21T19:17:31Z,2020-04-23T15:56:03Z,2020-04-23T15:56:09Z,MERGED,True,2088,167,16,https://github.com/ilammy,Update GoThemis Secure Cell API,10,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/624,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/624#issuecomment-617873403,"This PR makes preparatory changes for new passphrase API by updating existing API of Secure Cell in GoThemis to more easy to use and similar to other Themis wrappers. The API is described in RFC 3.7.
User notes
github.com/cossacklabs/themis/gothemis/cell module now exports new Secure Cell API which can be used like this:
import (
        ""github.com/cossacklabs/themis/gothemis/cell""
        ""github.com/cossacklabs/themis/gothemis/keys""
)

// Generate a new symmetric key for Secure Cell:
key, err := keys.NewSymmetricKey()
if err != nil {
        return err
}

// Construct a Secure Cell in Seal mode:
scell, err := cell.SealWithKey(key)
if err != nil {
        return err
}

// Encrypt and decrypt a message:
encrypted, err := scell.Encrypt(message, context)
if err != nil {
        return err
}
decrypted, err := scell.Decrypt(encrypted, context)
if err != nil {
        return err
}
Deprecated API
Old API with run-time mode-setting is now considered deprecated:

cell.New() constructor function
cell.Mode... and (already deprecated) cell.CELL_MODE... constants
Protect() and Unprotect() methods of cell.SecureCell as well as the type itself

This API will be retained unchanged for compatibility, but you are urged to migrate to the new API.
Technical notes
Full rationale may be found in RFC 3.7. Main gripes with the old API were run-time mode-setting with its impact on API, syntactic noise when using more popular Seal mode, and idiosyncratic naming of methods, inconsistent with other wrappers and our own documentation.
Now, with Seal mode, instead of
encrypted, _, err := scell.Protect(message, nil)

decrypted, err := scell.Unprotect(encrypted, nil, nil)
it is possible to write
encrypted, err := scell.Encrypt(message, nil)

decrypted, err := scell.Decrypt(encrypted, nil)
Additionally, new implementation experiments with a better approach to using CGo, made possible by static mode-setting. We reduce usage of C to minimum, relying more on Go code.
Last but not least, Secure Cell gets an expanded and updated test suite (translated from whatever was done for SwiftThemis). This will definitely come handy if we are going to reimplement GoThemis in pure Go some day.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (not in the mood)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated
 Dependency: #622 is merged","Rebased the branch onto latest master with merged dependencies.
Simplified the API to treat associated context as required (while still allowing it to be nil).
Updated integration tests and code samples to use new API.

Now this PR is really ready for review.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,625,2020-04-23T16:08:40Z,2020-04-24T18:33:36Z,2020-04-24T18:33:39Z,MERGED,True,657,5,6,https://github.com/ilammy,Secure Cell passphrase API: GoThemis,4,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/625,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/625,"With preparatory changes in #624, this PR adds actual passphrase API as described in RFC 3.7 (with corrections).
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in Go:
import ""github.com/cossacklabs/themis/gothemis/cell""


scell, err := cell.SealWithPassphrase(""secret"")
if err != nil {
        return err
}

message := []byte(""precious message"")

encrypted, err := scell.Encrypt(message, nil)
if err != nil {
        return err
}
decrypted, err := scell.Decrypt(encrypted, nil)
if err != nil {
        return err
}

if bytes.Equal(decrypted, message) {
        fmt.Println(""decrypted message is correct"")
}
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
import ""github.com/cossacklabs/themis/gothemis/keys""

key, err := keys.NewSymmetricKey()
if err != nil {
        return err
}
scell, err := cell.SealWithKey(key)
if err != nil {
        return err
}

message := []byte(""precious message"")

encrypted, err := scell.Encrypt(message, nil)
if err != nil {
        return err
}
decrypted, err := scell.Decrypt(encrypted, nil)
if err != nil {
        return err
}

if bytes.Equal(decrypted, message) {
        fmt.Println(""decrypted message is correct"")
}
Technical notes
The only deviation from RFC 3.7 is that the “associated context” argument is now required (syntactically). Go does not support method overloading so it’s not possible to omit it when calling Secure Cell methods. If you do not wish to use additional associated context for encryption, pass nil or empty slice as context.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (no specific benchmarks for Go)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","With preparatory changes in #624, this PR adds actual passphrase API as described in RFC 3.7 (with corrections).
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in Go:
import ""github.com/cossacklabs/themis/gothemis/cell""


scell, err := cell.SealWithPassphrase(""secret"")
if err != nil {
        return err
}

message := []byte(""precious message"")

encrypted, err := scell.Encrypt(message, nil)
if err != nil {
        return err
}
decrypted, err := scell.Decrypt(encrypted, nil)
if err != nil {
        return err
}

if bytes.Equal(decrypted, message) {
        fmt.Println(""decrypted message is correct"")
}
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
import ""github.com/cossacklabs/themis/gothemis/keys""

key, err := keys.NewSymmetricKey()
if err != nil {
        return err
}
scell, err := cell.SealWithKey(key)
if err != nil {
        return err
}

message := []byte(""precious message"")

encrypted, err := scell.Encrypt(message, nil)
if err != nil {
        return err
}
decrypted, err := scell.Decrypt(encrypted, nil)
if err != nil {
        return err
}

if bytes.Equal(decrypted, message) {
        fmt.Println(""decrypted message is correct"")
}
Technical notes
The only deviation from RFC 3.7 is that the “associated context” argument is now required (syntactically). Go does not support method overloading so it’s not possible to omit it when calling Secure Cell methods. If you do not wish to use additional associated context for encryption, pass nil or empty slice as context.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (no specific benchmarks for Go)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,626,2020-04-23T20:14:12Z,2020-04-25T16:01:14Z,2020-04-25T16:01:21Z,MERGED,True,742,88,8,https://github.com/ilammy,"Drop ""bindgen"" from libthemis-sys dependencies",6,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/626,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/626,"TL;DR: drop 40 dependencies we don't need to get x10 build speedup
Why we used Bindgen in the first place
Initially Bindgen was used to dynamically generate Rust bindings to C code. I have thought that this is the most idiomatic way to it. It is also more robust as Bindgen will be working with the actual Themis version installed on the user system.
What's wrong with using it
However, Bindgen has a lot of transitive dependencies, they take quite a while to compile, and they need to be compiled by our users too. This is a constant source of irritation for developers. Users are not really happy with that as well.
Why we don't really need to be using it
While we try our best to maintain backwards compatibility when it comes to symbols and dependencies, we generally do not bother with forward compatibility. And we effectively pin wrappers to the core library. That is, RustThemis 0.N is guaranteed to work with Themis Core 0.N, it is also guaranteed to work with Themis Core 0.N+1, and will most likely work with Themis Core 0.N+2 (unless there is deprecated API removed). However, the converse is not the case. RustThemis 0.N+1 may work with Themis 0.N if no new features were added, but otherwise it might fail to compile.
Thus, RustThemis is effectively pinned to Themis Core version, meaning that their versions must match. If that's the case, we do not need to generate FFI bindings on the user machine because we know which version we are shipping with and what symbols are available there. Thankfully, we also write portable C code so Themis API does not depend on the target architecture – which allows us to ship the bindings verbatim. Otherwise we'd have no choice other that generate them on the fly.
How we can avoid using it
With that in mind, start generating src/lib.rs manually with the help of bindgen.sh script. The developers are expected to run it on their machine to regenerate bindings somewhere before release. The users now do not need to generate these bindings on their machine, meaning that
we can drop bindgen crate dependency and all supporting code.
What we get by not using it
In the end, this gives significant improvements in transitive dependency count (down to 3, from 43) as well as ENORMOUS improvements in build times (in seconds):

  
    
    
    Before
    After
  
  
    Debug
    Linux
    28.43
    2.68
  
  
    macOS
    52.80
    8.47
  
  
    Release
    Linux
    52.08
    5.35
  
  
    macOS
    127.21
    8.71
  

CI builds were a source of pain since they build RustThemis in both debug and release versions, possibly several times, and in the worst case they are running with only one virtual CPU so the absolute time to run the test suite might be several minutes.
What do we do when this is merged
Now the maintainers need to run bindgen.sh when something has changed that may affect the content of libthemis-sys.
There is a new GitHub Action step to verify that the output of the ./bindgen.sh script does not change and src/lib.rs does not need an update. This will break the build once changes are necessary. Typically this means that some new API is exported by Themis or there are some changes in Bindgen's behavior. Either way we would like to be notified.
This is not ideal since ‘unrelated’ changes in Core may trigger the failure as well as some updates in Bindgen without code changes on our side. But this is probably fine since we don’t change API that often.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (see CI logs)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","TL;DR: drop 40 dependencies we don't need to get x10 build speedup
Why we used Bindgen in the first place
Initially Bindgen was used to dynamically generate Rust bindings to C code. I have thought that this is the most idiomatic way to it. It is also more robust as Bindgen will be working with the actual Themis version installed on the user system.
What's wrong with using it
However, Bindgen has a lot of transitive dependencies, they take quite a while to compile, and they need to be compiled by our users too. This is a constant source of irritation for developers. Users are not really happy with that as well.
Why we don't really need to be using it
While we try our best to maintain backwards compatibility when it comes to symbols and dependencies, we generally do not bother with forward compatibility. And we effectively pin wrappers to the core library. That is, RustThemis 0.N is guaranteed to work with Themis Core 0.N, it is also guaranteed to work with Themis Core 0.N+1, and will most likely work with Themis Core 0.N+2 (unless there is deprecated API removed). However, the converse is not the case. RustThemis 0.N+1 may work with Themis 0.N if no new features were added, but otherwise it might fail to compile.
Thus, RustThemis is effectively pinned to Themis Core version, meaning that their versions must match. If that's the case, we do not need to generate FFI bindings on the user machine because we know which version we are shipping with and what symbols are available there. Thankfully, we also write portable C code so Themis API does not depend on the target architecture – which allows us to ship the bindings verbatim. Otherwise we'd have no choice other that generate them on the fly.
How we can avoid using it
With that in mind, start generating src/lib.rs manually with the help of bindgen.sh script. The developers are expected to run it on their machine to regenerate bindings somewhere before release. The users now do not need to generate these bindings on their machine, meaning that
we can drop bindgen crate dependency and all supporting code.
What we get by not using it
In the end, this gives significant improvements in transitive dependency count (down to 3, from 43) as well as ENORMOUS improvements in build times (in seconds):

  
    
    
    Before
    After
  
  
    Debug
    Linux
    28.43
    2.68
  
  
    macOS
    52.80
    8.47
  
  
    Release
    Linux
    52.08
    5.35
  
  
    macOS
    127.21
    8.71
  

CI builds were a source of pain since they build RustThemis in both debug and release versions, possibly several times, and in the worst case they are running with only one virtual CPU so the absolute time to run the test suite might be several minutes.
What do we do when this is merged
Now the maintainers need to run bindgen.sh when something has changed that may affect the content of libthemis-sys.
There is a new GitHub Action step to verify that the output of the ./bindgen.sh script does not change and src/lib.rs does not need an update. This will break the build once changes are necessary. Typically this means that some new API is exported by Themis or there are some changes in Bindgen's behavior. Either way we would like to be notified.
This is not ideal since ‘unrelated’ changes in Core may trigger the failure as well as some updates in Bindgen without code changes on our side. But this is probably fine since we don’t change API that often.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (see CI logs)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,626,2020-04-23T20:14:12Z,2020-04-25T16:01:14Z,2020-04-25T16:01:21Z,MERGED,True,742,88,8,https://github.com/ilammy,"Drop ""bindgen"" from libthemis-sys dependencies",6,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/626,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/626#issuecomment-618950203,"TL;DR: drop 40 dependencies we don't need to get x10 build speedup
Why we used Bindgen in the first place
Initially Bindgen was used to dynamically generate Rust bindings to C code. I have thought that this is the most idiomatic way to it. It is also more robust as Bindgen will be working with the actual Themis version installed on the user system.
What's wrong with using it
However, Bindgen has a lot of transitive dependencies, they take quite a while to compile, and they need to be compiled by our users too. This is a constant source of irritation for developers. Users are not really happy with that as well.
Why we don't really need to be using it
While we try our best to maintain backwards compatibility when it comes to symbols and dependencies, we generally do not bother with forward compatibility. And we effectively pin wrappers to the core library. That is, RustThemis 0.N is guaranteed to work with Themis Core 0.N, it is also guaranteed to work with Themis Core 0.N+1, and will most likely work with Themis Core 0.N+2 (unless there is deprecated API removed). However, the converse is not the case. RustThemis 0.N+1 may work with Themis 0.N if no new features were added, but otherwise it might fail to compile.
Thus, RustThemis is effectively pinned to Themis Core version, meaning that their versions must match. If that's the case, we do not need to generate FFI bindings on the user machine because we know which version we are shipping with and what symbols are available there. Thankfully, we also write portable C code so Themis API does not depend on the target architecture – which allows us to ship the bindings verbatim. Otherwise we'd have no choice other that generate them on the fly.
How we can avoid using it
With that in mind, start generating src/lib.rs manually with the help of bindgen.sh script. The developers are expected to run it on their machine to regenerate bindings somewhere before release. The users now do not need to generate these bindings on their machine, meaning that
we can drop bindgen crate dependency and all supporting code.
What we get by not using it
In the end, this gives significant improvements in transitive dependency count (down to 3, from 43) as well as ENORMOUS improvements in build times (in seconds):

  
    
    
    Before
    After
  
  
    Debug
    Linux
    28.43
    2.68
  
  
    macOS
    52.80
    8.47
  
  
    Release
    Linux
    52.08
    5.35
  
  
    macOS
    127.21
    8.71
  

CI builds were a source of pain since they build RustThemis in both debug and release versions, possibly several times, and in the worst case they are running with only one virtual CPU so the absolute time to run the test suite might be several minutes.
What do we do when this is merged
Now the maintainers need to run bindgen.sh when something has changed that may affect the content of libthemis-sys.
There is a new GitHub Action step to verify that the output of the ./bindgen.sh script does not change and src/lib.rs does not need an update. This will break the build once changes are necessary. Typically this means that some new API is exported by Themis or there are some changes in Bindgen's behavior. Either way we would like to be notified.
This is not ideal since ‘unrelated’ changes in Core may trigger the failure as well as some updates in Bindgen without code changes on our side. But this is probably fine since we don’t change API that often.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (see CI logs)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Hm... 🤔
I tried to run make test_rust locally and found out that libthemis-src fails to build due to missing ./configure (see #611). I had forgotten to symlink it or something. I wonder why CircleCI has been fine all this time...",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,626,2020-04-23T20:14:12Z,2020-04-25T16:01:14Z,2020-04-25T16:01:21Z,MERGED,True,742,88,8,https://github.com/ilammy,"Drop ""bindgen"" from libthemis-sys dependencies",6,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/626,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/626#issuecomment-619178144,"TL;DR: drop 40 dependencies we don't need to get x10 build speedup
Why we used Bindgen in the first place
Initially Bindgen was used to dynamically generate Rust bindings to C code. I have thought that this is the most idiomatic way to it. It is also more robust as Bindgen will be working with the actual Themis version installed on the user system.
What's wrong with using it
However, Bindgen has a lot of transitive dependencies, they take quite a while to compile, and they need to be compiled by our users too. This is a constant source of irritation for developers. Users are not really happy with that as well.
Why we don't really need to be using it
While we try our best to maintain backwards compatibility when it comes to symbols and dependencies, we generally do not bother with forward compatibility. And we effectively pin wrappers to the core library. That is, RustThemis 0.N is guaranteed to work with Themis Core 0.N, it is also guaranteed to work with Themis Core 0.N+1, and will most likely work with Themis Core 0.N+2 (unless there is deprecated API removed). However, the converse is not the case. RustThemis 0.N+1 may work with Themis 0.N if no new features were added, but otherwise it might fail to compile.
Thus, RustThemis is effectively pinned to Themis Core version, meaning that their versions must match. If that's the case, we do not need to generate FFI bindings on the user machine because we know which version we are shipping with and what symbols are available there. Thankfully, we also write portable C code so Themis API does not depend on the target architecture – which allows us to ship the bindings verbatim. Otherwise we'd have no choice other that generate them on the fly.
How we can avoid using it
With that in mind, start generating src/lib.rs manually with the help of bindgen.sh script. The developers are expected to run it on their machine to regenerate bindings somewhere before release. The users now do not need to generate these bindings on their machine, meaning that
we can drop bindgen crate dependency and all supporting code.
What we get by not using it
In the end, this gives significant improvements in transitive dependency count (down to 3, from 43) as well as ENORMOUS improvements in build times (in seconds):

  
    
    
    Before
    After
  
  
    Debug
    Linux
    28.43
    2.68
  
  
    macOS
    52.80
    8.47
  
  
    Release
    Linux
    52.08
    5.35
  
  
    macOS
    127.21
    8.71
  

CI builds were a source of pain since they build RustThemis in both debug and release versions, possibly several times, and in the worst case they are running with only one virtual CPU so the absolute time to run the test suite might be several minutes.
What do we do when this is merged
Now the maintainers need to run bindgen.sh when something has changed that may affect the content of libthemis-sys.
There is a new GitHub Action step to verify that the output of the ./bindgen.sh script does not change and src/lib.rs does not need an update. This will break the build once changes are necessary. Typically this means that some new API is exported by Themis or there are some changes in Bindgen's behavior. Either way we would like to be notified.
This is not ideal since ‘unrelated’ changes in Core may trigger the failure as well as some updates in Bindgen without code changes on our side. But this is probably fine since we don’t change API that often.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (see CI logs)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",The issue with symlinks has been resolved by #628. I'll merge latest master into this branch to see if it still builds fine and will merge if the build is green.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,627,2020-04-24T12:56:54Z,2020-04-24T18:33:07Z,2020-06-22T12:47:19Z,MERGED,True,2,0,1,https://github.com/ilammy,Run long KDF tests of GitHub Actions,1,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/627,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/627,"PR #574 introduced KDF API as well as some long running tests which are normally not run, but CircleCI was given SOTER_KDF_RUN_LONG_TESTS variable to enable those tests.
Use SOTER_KDF_RUN_LONG_TESTS in GitHub Actions too to exercise long KDF when running unit tests. Don't do it for sanitizers and leak-check jobs which are already running slow.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","PR #574 introduced KDF API as well as some long running tests which are normally not run, but CircleCI was given SOTER_KDF_RUN_LONG_TESTS variable to enable those tests.
Use SOTER_KDF_RUN_LONG_TESTS in GitHub Actions too to exercise long KDF when running unit tests. Don't do it for sanitizers and leak-check jobs which are already running slow.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,628,2020-04-24T12:57:03Z,2020-04-24T18:32:22Z,2020-04-24T18:32:52Z,MERGED,True,2,0,2,https://github.com/ilammy,"Package ""./configure"" for Rust's libthemis-src",1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/628,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/628,"PR #611 has added a script which is now essential for building Themis with Make. However, it neglected to add this script to source code vendored with libthemis-src crate of RustThemis. Without that script libthemis-src will not be able to build Themis Core. Add a symlink to it so that this script is packaged during publishing.
Package VERSION file too because without it the build will try reading it anyway and print annoying warnings:
cat: VERSION: No such file or directory

This file was added in Themis 0.12 (PR #454), but I guess we just lived with those warnings.
It is an open question why CircleCI and GitHub Actions do not see this issue. On my machine it fails, but on CI the tests succeed:
running 3 tests
test tests::build_and_install ... cat: VERSION: No such file or directory
tput: No value for $TERM and no -T specified
/bin/bash: ./configure: No such file or directory
ok
test tests::build_and_install_to_OUT_DIR ... cat: VERSION: No such file or directory
tput: No value for $TERM and no -T specified
/bin/bash: ./configure: No such file or directory
ok
test tests::pkg_config_setting ... cat: VERSION: No such file or directory
tput: No value for $TERM and no -T specified
/bin/bash: ./configure: No such file or directory
ok

test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out

Checklist

 Change is covered by automated tests
 The coding guidelines are followed","PR #611 has added a script which is now essential for building Themis with Make. However, it neglected to add this script to source code vendored with libthemis-src crate of RustThemis. Without that script libthemis-src will not be able to build Themis Core. Add a symlink to it so that this script is packaged during publishing.
Package VERSION file too because without it the build will try reading it anyway and print annoying warnings:
cat: VERSION: No such file or directory

This file was added in Themis 0.12 (PR #454), but I guess we just lived with those warnings.
It is an open question why CircleCI and GitHub Actions do not see this issue. On my machine it fails, but on CI the tests succeed:
running 3 tests
test tests::build_and_install ... cat: VERSION: No such file or directory
tput: No value for $TERM and no -T specified
/bin/bash: ./configure: No such file or directory
ok
test tests::build_and_install_to_OUT_DIR ... cat: VERSION: No such file or directory
tput: No value for $TERM and no -T specified
/bin/bash: ./configure: No such file or directory
ok
test tests::pkg_config_setting ... cat: VERSION: No such file or directory
tput: No value for $TERM and no -T specified
/bin/bash: ./configure: No such file or directory
ok

test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out

Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,629,2020-04-24T12:57:12Z,2020-04-24T18:32:44Z,2020-04-24T18:32:54Z,MERGED,True,31,10,8,https://github.com/ilammy,Build Themis as regular user,1,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/629,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/629,"PR #611 keeps on giving! One side effect of performing configuration only once on the first run is that if you initially install Themis with
sudo make install

without running make first then ./configure will be run as root too, meaning that it may not see some toolchains installed locally for the user, not globally in the system.
Rust's rustup is an example of toolchain installer which does not install it's stuff into system and configures PATH in such way that its local installation is not visible from within sudo.
This means that sudo make install will not see Rust toolchain and will write empty RUST_VERSION variable to configuration.mk. This will cause make test_rust to do nothing and exit while printing a lovecraftian message during CI runs:
fatal: No names found, cannot describe anything.
tput: No value for $TERM and no -T specified
make: Nothing to be done for 'test_rust'.

(Other messages are unrelated, but funny nevertheless)
So... Install Themis by doing
make
sudo make install

to ensure that ./configure sees Rust toolchain and the tests will actually get run.
While we're here, update all other instances of Themis Core installation with bare sudo make install to avoid such issue if it becomes actual. However, most other toolchain installers seems to install their stuff globally so the above issue is not actual for them right now.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","PR #611 keeps on giving! One side effect of performing configuration only once on the first run is that if you initially install Themis with
sudo make install

without running make first then ./configure will be run as root too, meaning that it may not see some toolchains installed locally for the user, not globally in the system.
Rust's rustup is an example of toolchain installer which does not install it's stuff into system and configures PATH in such way that its local installation is not visible from within sudo.
This means that sudo make install will not see Rust toolchain and will write empty RUST_VERSION variable to configuration.mk. This will cause make test_rust to do nothing and exit while printing a lovecraftian message during CI runs:
fatal: No names found, cannot describe anything.
tput: No value for $TERM and no -T specified
make: Nothing to be done for 'test_rust'.

(Other messages are unrelated, but funny nevertheless)
So... Install Themis by doing
make
sudo make install

to ensure that ./configure sees Rust toolchain and the tests will actually get run.
While we're here, update all other instances of Themis Core installation with bare sudo make install to avoid such issue if it becomes actual. However, most other toolchain installers seems to install their stuff globally so the above issue is not actual for them right now.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,630,2020-04-27T12:40:58Z,2020-05-04T17:07:55Z,2020-05-04T17:08:31Z,MERGED,True,892,64,9,https://github.com/ilammy,Secure Cell passphrase API: RustThemis,6,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/630,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/630,"Add support of Secure Cell passphrase API to RustThemis. The API is described in RFC 3.8.
This only adds new API with its documentation. Existing API docs and tests for symmetric key API need an update to avoid using passphrases there. Since this PR is already massive, those changes will be submitted separately.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in Rust:
use themis::secure_cell::SecureCell;

let cell = SecureCell::with_passphrase(""secret"")?.seal();

let message = b""precious message"";

let encrypted = cell.encrypt(&message)?;
let decrypted = cell.decrypt(&encrypted)?;

assert_eq!(decrypted, message);
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
use themis::secure_cell::SecureCell;
use themis::keys::SymmetricKey;

// Generate a new key if you don't have one:
let master_key = SymmetricKey::new();
// Or use an existing value that you store somewhere:
let master_key = base64::decode(""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U="")?;

let cell = SecureCell::with_key(&master_key)?.seal();

let message = b""precious message"";

let encrypted = cell.encrypt(&message)?;
let decrypted = cell.decrypt(&encrypted)?;

assert_eq!(decrypted, message);
Technical notes
There are no significant deviations from RFC 3.8.
The code sample is updated to be similar to other languages where it's a showcase for Secure Cell API rather than a copy of integration test tool. Secure Cell is not really designed for generic file encryption so we'd rather not give a wrong idea.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (only Core)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","Add support of Secure Cell passphrase API to RustThemis. The API is described in RFC 3.8.
This only adds new API with its documentation. Existing API docs and tests for symmetric key API need an update to avoid using passphrases there. Since this PR is already massive, those changes will be submitted separately.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in Rust:
use themis::secure_cell::SecureCell;

let cell = SecureCell::with_passphrase(""secret"")?.seal();

let message = b""precious message"";

let encrypted = cell.encrypt(&message)?;
let decrypted = cell.decrypt(&encrypted)?;

assert_eq!(decrypted, message);
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
use themis::secure_cell::SecureCell;
use themis::keys::SymmetricKey;

// Generate a new key if you don't have one:
let master_key = SymmetricKey::new();
// Or use an existing value that you store somewhere:
let master_key = base64::decode(""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U="")?;

let cell = SecureCell::with_key(&master_key)?.seal();

let message = b""precious message"";

let encrypted = cell.encrypt(&message)?;
let decrypted = cell.decrypt(&encrypted)?;

assert_eq!(decrypted, message);
Technical notes
There are no significant deviations from RFC 3.8.
The code sample is updated to be similar to other languages where it's a showcase for Secure Cell API rather than a copy of integration test tool. Secure Cell is not really designed for generic file encryption so we'd rather not give a wrong idea.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (only Core)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,630,2020-04-27T12:40:58Z,2020-05-04T17:07:55Z,2020-05-04T17:08:31Z,MERGED,True,892,64,9,https://github.com/ilammy,Secure Cell passphrase API: RustThemis,6,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/630,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/630#issuecomment-619963994,"Add support of Secure Cell passphrase API to RustThemis. The API is described in RFC 3.8.
This only adds new API with its documentation. Existing API docs and tests for symmetric key API need an update to avoid using passphrases there. Since this PR is already massive, those changes will be submitted separately.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in Rust:
use themis::secure_cell::SecureCell;

let cell = SecureCell::with_passphrase(""secret"")?.seal();

let message = b""precious message"";

let encrypted = cell.encrypt(&message)?;
let decrypted = cell.decrypt(&encrypted)?;

assert_eq!(decrypted, message);
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
use themis::secure_cell::SecureCell;
use themis::keys::SymmetricKey;

// Generate a new key if you don't have one:
let master_key = SymmetricKey::new();
// Or use an existing value that you store somewhere:
let master_key = base64::decode(""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U="")?;

let cell = SecureCell::with_key(&master_key)?.seal();

let message = b""precious message"";

let encrypted = cell.encrypt(&message)?;
let decrypted = cell.decrypt(&encrypted)?;

assert_eq!(decrypted, message);
Technical notes
There are no significant deviations from RFC 3.8.
The code sample is updated to be similar to other languages where it's a showcase for Secure Cell API rather than a copy of integration test tool. Secure Cell is not really designed for generic file encryption so we'd rather not give a wrong idea.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (only Core)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","This PR attempts to beat the usual pattern “more tests than code” by probably having more API docs than tests or code 😂 At least, they took comparable amount of time to porting SwiftThemis tests to Rust.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,631,2020-04-28T10:58:19Z,2020-05-06T17:15:15Z,2020-05-06T17:15:19Z,MERGED,True,1073,333,2,https://github.com/ilammy,Update symmetric key API documentation,5,"['docs :books:', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/631,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/631,"This is a companion PR for #630, updating existing symmetric key API documentation, code examples, and tests to correctly use symmetric keys, not passphrases. Various bits of documentation are also updated and unified.
On the one hand, this is a lot of API documentation, much more extensive than any other wrapper has. On the other hand, I find it valuable for those who don't ever bother browsing third-party documentation sites. Plus, it's kinda dishonest to lower the quality bar.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated (nothing notable)","This is a companion PR for #630, updating existing symmetric key API documentation, code examples, and tests to correctly use symmetric keys, not passphrases. Various bits of documentation are also updated and unified.
On the one hand, this is a lot of API documentation, much more extensive than any other wrapper has. On the other hand, I find it valuable for those who don't ever bother browsing third-party documentation sites. Plus, it's kinda dishonest to lower the quality bar.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated (nothing notable)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,631,2020-04-28T10:58:19Z,2020-05-06T17:15:15Z,2020-05-06T17:15:19Z,MERGED,True,1073,333,2,https://github.com/ilammy,Update symmetric key API documentation,5,"['docs :books:', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/631,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/631#issuecomment-620536147,"This is a companion PR for #630, updating existing symmetric key API documentation, code examples, and tests to correctly use symmetric keys, not passphrases. Various bits of documentation are also updated and unified.
On the one hand, this is a lot of API documentation, much more extensive than any other wrapper has. On the other hand, I find it valuable for those who don't ever bother browsing third-party documentation sites. Plus, it's kinda dishonest to lower the quality bar.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated (nothing notable)","@karenswry, I know that you're working on something in RustThemis docs too. I don't see any conflicts with your branch right now, but this is a heads up about some changed files that might cause conflicts later. Please consider syncing with master once this PR is merged.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,632,2020-04-28T18:04:12Z,2020-05-01T16:11:02Z,2020-05-01T16:11:07Z,MERGED,True,8,99,1,https://github.com/ilammy,Use macOS runners for Android instrumentation,1,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/632,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/632,"After some time with GitHub Actions I do not see significant difference between GHA and CircleCI when running Android instrumentation tests on Linux hosts. Both are a complete pile of ██████-█████ ████, sadly. You can read more about sorrows of Android instrumentation here.
Linux runners are able to run ARM emulator with API 24 which is so slow that it occasionally fails to boot. Hardware accelerated x86 are not available because KVM is not available on VMs offered by GitHub and CircleCI. In fact, x86 emulator on Linux requires KVM. API 24 is the last level which provides ARM emulator, it's all x86/AMD64 after that. So using ARM & API 24 is a ticking time bomb, waiting for Google to deprecate and remove API 24 from SDK installers.
On the other hand, macOS runners offered by GitHub support HAXM acceleration and are able to run x86 Android emulators. Thankfully, the author of the rant above has also written an Action which installs Android SDK and related stuff which also supports macOS.
Let's run out integration tests on macOS runners. They cost x10 compared to Linux ones, but thanks to Microsoft's generosity open-source projects can use them for free. I'll gratefully take up the offer.
Also, remove caching of Gradle stuff and Android SDK. While then do download lots of crap from the Internet (~2 GB each), it appears that packing, uploading, downloading, and unpacking caches takes comparable amount of time so caching does not reduce build times. GitHub Actions bill by build time, not traffic. And Google's mirrors are usually available so there is no real reason to use caches in this situation.
🤞
Let's see how this works. If it consistently shows better build times and stability, I'm going to remove Android integration from CircleCI and rely solely on GitHub Actions, because I'm tired of that job constantly failing due to this ███████ emulator not booting.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (see build times)
 The coding guidelines are followed
 Changelog is updated (no real need)","After some time with GitHub Actions I do not see significant difference between GHA and CircleCI when running Android instrumentation tests on Linux hosts. Both are a complete pile of ██████-█████ ████, sadly. You can read more about sorrows of Android instrumentation here.
Linux runners are able to run ARM emulator with API 24 which is so slow that it occasionally fails to boot. Hardware accelerated x86 are not available because KVM is not available on VMs offered by GitHub and CircleCI. In fact, x86 emulator on Linux requires KVM. API 24 is the last level which provides ARM emulator, it's all x86/AMD64 after that. So using ARM & API 24 is a ticking time bomb, waiting for Google to deprecate and remove API 24 from SDK installers.
On the other hand, macOS runners offered by GitHub support HAXM acceleration and are able to run x86 Android emulators. Thankfully, the author of the rant above has also written an Action which installs Android SDK and related stuff which also supports macOS.
Let's run out integration tests on macOS runners. They cost x10 compared to Linux ones, but thanks to Microsoft's generosity open-source projects can use them for free. I'll gratefully take up the offer.
Also, remove caching of Gradle stuff and Android SDK. While then do download lots of crap from the Internet (~2 GB each), it appears that packing, uploading, downloading, and unpacking caches takes comparable amount of time so caching does not reduce build times. GitHub Actions bill by build time, not traffic. And Google's mirrors are usually available so there is no real reason to use caches in this situation.
🤞
Let's see how this works. If it consistently shows better build times and stability, I'm going to remove Android integration from CircleCI and rely solely on GitHub Actions, because I'm tired of that job constantly failing due to this ███████ emulator not booting.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (see build times)
 The coding guidelines are followed
 Changelog is updated (no real need)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,633,2020-04-30T16:49:38Z,2020-05-04T17:09:42Z,2020-05-04T17:09:49Z,MERGED,True,286,180,17,https://github.com/ilammy,Desktop Java builds with Gradle,13,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/633,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/633,"Make it possible to build JavaThemis for desktop/server environment with Gradle.
./gradlew :desktop:build

will now build a JAR file with Java code in src/wrappers/themis/java/build/jar, currently called java-themis-0.12.jar.
This is not really used anywhere right now, but it is a stepping stone for properly published JavaThemis.
Note that this builds only Java code. It still requires a JNI library to run which has to be installed separately. Since Themis 0.13 it will be possible to install it as libthemis-jni via system package managers.
Deprecations and breaking changes
AndroidThemis builds now need to be qualified
Desktop Java build is added to the root Gradle project as a subproject :desktop. AndroidThemis build has been moved from the root into the :android subproject.
This means that to build AndroidThemis it is now recommended to use qualified form:
./gradlew :android:assembleRelease

The unqualified form still works:
./gradlew assembleRelease

but it may behave unexpectedly with other targets, acting on both desktop and mobile Themis. The documentation currently recommends this form, but we should revise this once Themis 0.13 is released.
Java 7 is no longer supported
Modern, supported versions of systems have updated their default Java version to 11. Unfortunately, Gradle 4 does not support Java 11 and fails to build on those systems. It is usually possible to install Java 8 there and switch to using it, but we ought to support out-of-the-box builds better.
Embedded Gradle version has been updated to Gradle 5.6 which requires Java 8 to run. This means that systems not having Java 8 are no longer able to build AndroidThemis with embedded Gradle. We no longer consider the following systems supported:

Debian 8 (“jessie”) — released in 2015, not supported by Debian since June 2018, extended LTS support by third-party vendors lapses in July 2020

If you still use these systems and need to build AndroidThemis from source, please upgrade your build environments. You can also try installing an older Gradle version (4.X) and use it instead of embedded Gradle wrapper, but that's not guaranteed to work from now on.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Make it possible to build JavaThemis for desktop/server environment with Gradle.
./gradlew :desktop:build

will now build a JAR file with Java code in src/wrappers/themis/java/build/jar, currently called java-themis-0.12.jar.
This is not really used anywhere right now, but it is a stepping stone for properly published JavaThemis.
Note that this builds only Java code. It still requires a JNI library to run which has to be installed separately. Since Themis 0.13 it will be possible to install it as libthemis-jni via system package managers.
Deprecations and breaking changes
AndroidThemis builds now need to be qualified
Desktop Java build is added to the root Gradle project as a subproject :desktop. AndroidThemis build has been moved from the root into the :android subproject.
This means that to build AndroidThemis it is now recommended to use qualified form:
./gradlew :android:assembleRelease

The unqualified form still works:
./gradlew assembleRelease

but it may behave unexpectedly with other targets, acting on both desktop and mobile Themis. The documentation currently recommends this form, but we should revise this once Themis 0.13 is released.
Java 7 is no longer supported
Modern, supported versions of systems have updated their default Java version to 11. Unfortunately, Gradle 4 does not support Java 11 and fails to build on those systems. It is usually possible to install Java 8 there and switch to using it, but we ought to support out-of-the-box builds better.
Embedded Gradle version has been updated to Gradle 5.6 which requires Java 8 to run. This means that systems not having Java 8 are no longer able to build AndroidThemis with embedded Gradle. We no longer consider the following systems supported:

Debian 8 (“jessie”) — released in 2015, not supported by Debian since June 2018, extended LTS support by third-party vendors lapses in July 2020

If you still use these systems and need to build AndroidThemis from source, please upgrade your build environments. You can also try installing an older Gradle version (4.X) and use it instead of embedded Gradle wrapper, but that's not guaranteed to work from now on.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,633,2020-04-30T16:49:38Z,2020-05-04T17:09:42Z,2020-05-04T17:09:49Z,MERGED,True,286,180,17,https://github.com/ilammy,Desktop Java builds with Gradle,13,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/633,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/633#issuecomment-622339327,"Make it possible to build JavaThemis for desktop/server environment with Gradle.
./gradlew :desktop:build

will now build a JAR file with Java code in src/wrappers/themis/java/build/jar, currently called java-themis-0.12.jar.
This is not really used anywhere right now, but it is a stepping stone for properly published JavaThemis.
Note that this builds only Java code. It still requires a JNI library to run which has to be installed separately. Since Themis 0.13 it will be possible to install it as libthemis-jni via system package managers.
Deprecations and breaking changes
AndroidThemis builds now need to be qualified
Desktop Java build is added to the root Gradle project as a subproject :desktop. AndroidThemis build has been moved from the root into the :android subproject.
This means that to build AndroidThemis it is now recommended to use qualified form:
./gradlew :android:assembleRelease

The unqualified form still works:
./gradlew assembleRelease

but it may behave unexpectedly with other targets, acting on both desktop and mobile Themis. The documentation currently recommends this form, but we should revise this once Themis 0.13 is released.
Java 7 is no longer supported
Modern, supported versions of systems have updated their default Java version to 11. Unfortunately, Gradle 4 does not support Java 11 and fails to build on those systems. It is usually possible to install Java 8 there and switch to using it, but we ought to support out-of-the-box builds better.
Embedded Gradle version has been updated to Gradle 5.6 which requires Java 8 to run. This means that systems not having Java 8 are no longer able to build AndroidThemis with embedded Gradle. We no longer consider the following systems supported:

Debian 8 (“jessie”) — released in 2015, not supported by Debian since June 2018, extended LTS support by third-party vendors lapses in July 2020

If you still use these systems and need to build AndroidThemis from source, please upgrade your build environments. You can also try installing an older Gradle version (4.X) and use it instead of embedded Gradle wrapper, but that's not guaranteed to work from now on.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","I was pleasantly surprised to discover that we have already ported tests to JUnit in #557. It's a quick-and-dirty port, but it kinda works. So I only had to add them to Gradle for desktop Java.
Running
./gradlew :desktop:build

will also run tests now.
Note that JNI library must be in Java's search path. Since we install it to /usr/local/lib which is not in the default search paths of most Java installations, you typically have to manually tell Java where to look for the the library:
./gradlew :desktop:build -Djava.library.path=/usr/local/lib",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,633,2020-04-30T16:49:38Z,2020-05-04T17:09:42Z,2020-05-04T17:09:49Z,MERGED,True,286,180,17,https://github.com/ilammy,Desktop Java builds with Gradle,13,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/633,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/633#issuecomment-622342738,"Make it possible to build JavaThemis for desktop/server environment with Gradle.
./gradlew :desktop:build

will now build a JAR file with Java code in src/wrappers/themis/java/build/jar, currently called java-themis-0.12.jar.
This is not really used anywhere right now, but it is a stepping stone for properly published JavaThemis.
Note that this builds only Java code. It still requires a JNI library to run which has to be installed separately. Since Themis 0.13 it will be possible to install it as libthemis-jni via system package managers.
Deprecations and breaking changes
AndroidThemis builds now need to be qualified
Desktop Java build is added to the root Gradle project as a subproject :desktop. AndroidThemis build has been moved from the root into the :android subproject.
This means that to build AndroidThemis it is now recommended to use qualified form:
./gradlew :android:assembleRelease

The unqualified form still works:
./gradlew assembleRelease

but it may behave unexpectedly with other targets, acting on both desktop and mobile Themis. The documentation currently recommends this form, but we should revise this once Themis 0.13 is released.
Java 7 is no longer supported
Modern, supported versions of systems have updated their default Java version to 11. Unfortunately, Gradle 4 does not support Java 11 and fails to build on those systems. It is usually possible to install Java 8 there and switch to using it, but we ought to support out-of-the-box builds better.
Embedded Gradle version has been updated to Gradle 5.6 which requires Java 8 to run. This means that systems not having Java 8 are no longer able to build AndroidThemis with embedded Gradle. We no longer consider the following systems supported:

Debian 8 (“jessie”) — released in 2015, not supported by Debian since June 2018, extended LTS support by third-party vendors lapses in July 2020

If you still use these systems and need to build AndroidThemis from source, please upgrade your build environments. You can also try installing an older Gradle version (4.X) and use it instead of embedded Gradle wrapper, but that's not guaranteed to work from now on.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","I was pleasantly surprised to discover that we have already ported tests to JUnit in #557

You know that it was you who ported tests, right? :D",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,633,2020-04-30T16:49:38Z,2020-05-04T17:09:42Z,2020-05-04T17:09:49Z,MERGED,True,286,180,17,https://github.com/ilammy,Desktop Java builds with Gradle,13,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/633,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/633#issuecomment-622344654,"Make it possible to build JavaThemis for desktop/server environment with Gradle.
./gradlew :desktop:build

will now build a JAR file with Java code in src/wrappers/themis/java/build/jar, currently called java-themis-0.12.jar.
This is not really used anywhere right now, but it is a stepping stone for properly published JavaThemis.
Note that this builds only Java code. It still requires a JNI library to run which has to be installed separately. Since Themis 0.13 it will be possible to install it as libthemis-jni via system package managers.
Deprecations and breaking changes
AndroidThemis builds now need to be qualified
Desktop Java build is added to the root Gradle project as a subproject :desktop. AndroidThemis build has been moved from the root into the :android subproject.
This means that to build AndroidThemis it is now recommended to use qualified form:
./gradlew :android:assembleRelease

The unqualified form still works:
./gradlew assembleRelease

but it may behave unexpectedly with other targets, acting on both desktop and mobile Themis. The documentation currently recommends this form, but we should revise this once Themis 0.13 is released.
Java 7 is no longer supported
Modern, supported versions of systems have updated their default Java version to 11. Unfortunately, Gradle 4 does not support Java 11 and fails to build on those systems. It is usually possible to install Java 8 there and switch to using it, but we ought to support out-of-the-box builds better.
Embedded Gradle version has been updated to Gradle 5.6 which requires Java 8 to run. This means that systems not having Java 8 are no longer able to build AndroidThemis with embedded Gradle. We no longer consider the following systems supported:

Debian 8 (“jessie”) — released in 2015, not supported by Debian since June 2018, extended LTS support by third-party vendors lapses in July 2020

If you still use these systems and need to build AndroidThemis from source, please upgrade your build environments. You can also try installing an older Gradle version (4.X) and use it instead of embedded Gradle wrapper, but that's not guaranteed to work from now on.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","You know that it was you who ported tests, right? :D

Definitely! git blame blamed me after all. Though it was you who reviewed that PR!
Okay... Just to admit it, using “author's we” in commit comments and alike is a (bad?) habit of mine. I want to believe it's not ”royal we“, after all.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,633,2020-04-30T16:49:38Z,2020-05-04T17:09:42Z,2020-05-04T17:09:49Z,MERGED,True,286,180,17,https://github.com/ilammy,Desktop Java builds with Gradle,13,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/633,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/633#issuecomment-622345720,"Make it possible to build JavaThemis for desktop/server environment with Gradle.
./gradlew :desktop:build

will now build a JAR file with Java code in src/wrappers/themis/java/build/jar, currently called java-themis-0.12.jar.
This is not really used anywhere right now, but it is a stepping stone for properly published JavaThemis.
Note that this builds only Java code. It still requires a JNI library to run which has to be installed separately. Since Themis 0.13 it will be possible to install it as libthemis-jni via system package managers.
Deprecations and breaking changes
AndroidThemis builds now need to be qualified
Desktop Java build is added to the root Gradle project as a subproject :desktop. AndroidThemis build has been moved from the root into the :android subproject.
This means that to build AndroidThemis it is now recommended to use qualified form:
./gradlew :android:assembleRelease

The unqualified form still works:
./gradlew assembleRelease

but it may behave unexpectedly with other targets, acting on both desktop and mobile Themis. The documentation currently recommends this form, but we should revise this once Themis 0.13 is released.
Java 7 is no longer supported
Modern, supported versions of systems have updated their default Java version to 11. Unfortunately, Gradle 4 does not support Java 11 and fails to build on those systems. It is usually possible to install Java 8 there and switch to using it, but we ought to support out-of-the-box builds better.
Embedded Gradle version has been updated to Gradle 5.6 which requires Java 8 to run. This means that systems not having Java 8 are no longer able to build AndroidThemis with embedded Gradle. We no longer consider the following systems supported:

Debian 8 (“jessie”) — released in 2015, not supported by Debian since June 2018, extended LTS support by third-party vendors lapses in July 2020

If you still use these systems and need to build AndroidThemis from source, please upgrade your build environments. You can also try installing an older Gradle version (4.X) and use it instead of embedded Gradle wrapper, but that's not guaranteed to work from now on.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","blamed me after all

I’m totally fine with your “using we” style, but I think that you deserve extra appreciation 🧡",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,633,2020-04-30T16:49:38Z,2020-05-04T17:09:42Z,2020-05-04T17:09:49Z,MERGED,True,286,180,17,https://github.com/ilammy,Desktop Java builds with Gradle,13,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/633,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/633#issuecomment-622347105,"Make it possible to build JavaThemis for desktop/server environment with Gradle.
./gradlew :desktop:build

will now build a JAR file with Java code in src/wrappers/themis/java/build/jar, currently called java-themis-0.12.jar.
This is not really used anywhere right now, but it is a stepping stone for properly published JavaThemis.
Note that this builds only Java code. It still requires a JNI library to run which has to be installed separately. Since Themis 0.13 it will be possible to install it as libthemis-jni via system package managers.
Deprecations and breaking changes
AndroidThemis builds now need to be qualified
Desktop Java build is added to the root Gradle project as a subproject :desktop. AndroidThemis build has been moved from the root into the :android subproject.
This means that to build AndroidThemis it is now recommended to use qualified form:
./gradlew :android:assembleRelease

The unqualified form still works:
./gradlew assembleRelease

but it may behave unexpectedly with other targets, acting on both desktop and mobile Themis. The documentation currently recommends this form, but we should revise this once Themis 0.13 is released.
Java 7 is no longer supported
Modern, supported versions of systems have updated their default Java version to 11. Unfortunately, Gradle 4 does not support Java 11 and fails to build on those systems. It is usually possible to install Java 8 there and switch to using it, but we ought to support out-of-the-box builds better.
Embedded Gradle version has been updated to Gradle 5.6 which requires Java 8 to run. This means that systems not having Java 8 are no longer able to build AndroidThemis with embedded Gradle. We no longer consider the following systems supported:

Debian 8 (“jessie”) — released in 2015, not supported by Debian since June 2018, extended LTS support by third-party vendors lapses in July 2020

If you still use these systems and need to build AndroidThemis from source, please upgrade your build environments. You can also try installing an older Gradle version (4.X) and use it instead of embedded Gradle wrapper, but that's not guaranteed to work from now on.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",Aww~ 🥺😭,True,{'HEART': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,634,2020-05-05T19:21:41Z,2020-05-11T09:31:39Z,2020-05-11T09:31:46Z,MERGED,True,1853,5,11,https://github.com/ilammy,Update JavaThemis Secure Cell API,12,"['O-Android :robot:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/634,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/634,"This PR makes preparatory changes for new passphrase API by updating existing API of Secure Cell in JavaThemis to more easy to use and similar to other Themis wrappers. The API is described in RFC 3.9.
User notes
SecureCell class now provides improved Secure Cell interfaces:

SecureCell.Seal
SecureCell.TokenProtect
SecureCell.ContextImprint

as well as new static factory methods for them, accepting symmetric keys:

SecureCell#SealWithKey
SecureCell#TokenProtectWithKey
SecureCell#ContextImprintWithKey

All of this can be used like this in Java:
import com.cossacklabs.themis.SecureCell;
import com.cossacklabs.themis.SymmetricKey;

SymmetricKey masterKey = new SymmetricKey();

SecureCell.Seal cell = SecureCell.SealWithKey(masterKey);

byte[] message = ""precious message"".getBytes(StandardCharsets.UTF_8);

byte[] encrypted = cell.encrypt(message);
byte[] decrypted = cell.decrypt(encrypted);

assertArrayEquals(message, decrypted);
Optional associated context
All encrypt and decrypt methods now have an overload without an optional argument for associated context. This makes the code that does not use it more concise. (Of course you can still pass null there if you must.)
Nullability annotations
New interface are properly annotated with @NotNull and @Nullable which improves IDE experience and enables more static checks.
SecureCellData usage
Note that with new interfaces you no longer have to construct SecureCellData objects to decrypt data. Just pass your byte[] with encrypted data directly to decrypt() methods. In Token Protect mode you pass encrypted data and authentication token as separate byte[] arrays too.
Similarly, Seal and Context Imprint modes return encrypted byte[] directly. You no longer have to getProtectedData() from the returned SecureCellData object.
Token Protect mode still returns SecureCellData from its encrypt() method. That's the way it is with Java, which has no multiple return values. This will be improved for Kotlin a bit later.
Pending deprecations
This PR does not deprecate the old API, but consider it deprecated.

Construction of SecureCell with new.
protect and unprotect methods.

(This list will be updated when the API is actually deprecated.)
Technical notes
Full rationale may be found in RFC 3.9. Main gripes with the old API were run-time mode-setting with its impact on API, syntactic noise when using more popular Seal mode, and idiosyncratic naming of methods, inconsistent with other wrappers and our own documentation.
New API does not accept String values. The old API encoded strings in platform-specific UTF-16 which was quite unique and not portable to other platforms. Furthermore, it suggested that strings can be used as passphrases, which is not secure in typical case.
At last, in order to decrypt Sealed data, instead of writing
byte[] decrypted = cell.unprotect(null, new SecureCellData(encrypted, null));
you can write much more readable code:
byte[] decrypted = cell.decrypt(encrypted);
And yes, the context now comes after the data, as in all other wrappers.
Last but not least, Secure Cell gets an expanded and updated test suite (translated from whatever was done for SwiftThemis). This will definitely come handy if we are going to reimplement JavaThemis in pure JVM code some day.
Note that JNI API and ABI does not change. We decided to keep compatibility here.
Targeting Java 7
I have discovered that Android compiles its code for Java 7 by default. I wanted to use Java 8 features in tests initially, but given the Android story I think we should use Java 7 even for desktop Java code.
Note that embedded Gradle wrapper still requires Java 8 to run. However, the compiled code will run on Java 7 too.
New TODOs and FIXMEs
This PR adds a bunch of new TODOs in the code. While it's not nice, I don't want to block further development with those issues. They will be resolved later:

Fix a bug in JNI code that crashes tests on Android.
Fix an issue in Themis Core which causes the same test to behave unexpectedly.
Signal exceptions from within JNI code instead of checking for null in Java code.

Next tasks

Add passphrase API. Can be done in parallel, will be submitted after this PR is merged.
Deprecate old API. Since we will have to deprecate a lot and provide good migration instructions, I decided to split this out into a new PR.
Add Kotlin tests. It will be nice to actually see how our code can be used from Kotlin. Adding it is trivial, but not quite trivial.
Improve Kotlin support. RFC 3.9 plans several additional changes in Token Protect API to improve its usability in Kotlin.
Update examples. Both in-repo and external ones. They are quite outdated so it may require additional refactoring.

Checklist

 Change is covered by automated tests
 Benchmark results are attached (we have no JVM benchmarks)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated","This PR makes preparatory changes for new passphrase API by updating existing API of Secure Cell in JavaThemis to more easy to use and similar to other Themis wrappers. The API is described in RFC 3.9.
User notes
SecureCell class now provides improved Secure Cell interfaces:

SecureCell.Seal
SecureCell.TokenProtect
SecureCell.ContextImprint

as well as new static factory methods for them, accepting symmetric keys:

SecureCell#SealWithKey
SecureCell#TokenProtectWithKey
SecureCell#ContextImprintWithKey

All of this can be used like this in Java:
import com.cossacklabs.themis.SecureCell;
import com.cossacklabs.themis.SymmetricKey;

SymmetricKey masterKey = new SymmetricKey();

SecureCell.Seal cell = SecureCell.SealWithKey(masterKey);

byte[] message = ""precious message"".getBytes(StandardCharsets.UTF_8);

byte[] encrypted = cell.encrypt(message);
byte[] decrypted = cell.decrypt(encrypted);

assertArrayEquals(message, decrypted);
Optional associated context
All encrypt and decrypt methods now have an overload without an optional argument for associated context. This makes the code that does not use it more concise. (Of course you can still pass null there if you must.)
Nullability annotations
New interface are properly annotated with @NotNull and @Nullable which improves IDE experience and enables more static checks.
SecureCellData usage
Note that with new interfaces you no longer have to construct SecureCellData objects to decrypt data. Just pass your byte[] with encrypted data directly to decrypt() methods. In Token Protect mode you pass encrypted data and authentication token as separate byte[] arrays too.
Similarly, Seal and Context Imprint modes return encrypted byte[] directly. You no longer have to getProtectedData() from the returned SecureCellData object.
Token Protect mode still returns SecureCellData from its encrypt() method. That's the way it is with Java, which has no multiple return values. This will be improved for Kotlin a bit later.
Pending deprecations
This PR does not deprecate the old API, but consider it deprecated.

Construction of SecureCell with new.
protect and unprotect methods.

(This list will be updated when the API is actually deprecated.)
Technical notes
Full rationale may be found in RFC 3.9. Main gripes with the old API were run-time mode-setting with its impact on API, syntactic noise when using more popular Seal mode, and idiosyncratic naming of methods, inconsistent with other wrappers and our own documentation.
New API does not accept String values. The old API encoded strings in platform-specific UTF-16 which was quite unique and not portable to other platforms. Furthermore, it suggested that strings can be used as passphrases, which is not secure in typical case.
At last, in order to decrypt Sealed data, instead of writing
byte[] decrypted = cell.unprotect(null, new SecureCellData(encrypted, null));
you can write much more readable code:
byte[] decrypted = cell.decrypt(encrypted);
And yes, the context now comes after the data, as in all other wrappers.
Last but not least, Secure Cell gets an expanded and updated test suite (translated from whatever was done for SwiftThemis). This will definitely come handy if we are going to reimplement JavaThemis in pure JVM code some day.
Note that JNI API and ABI does not change. We decided to keep compatibility here.
Targeting Java 7
I have discovered that Android compiles its code for Java 7 by default. I wanted to use Java 8 features in tests initially, but given the Android story I think we should use Java 7 even for desktop Java code.
Note that embedded Gradle wrapper still requires Java 8 to run. However, the compiled code will run on Java 7 too.
New TODOs and FIXMEs
This PR adds a bunch of new TODOs in the code. While it's not nice, I don't want to block further development with those issues. They will be resolved later:

Fix a bug in JNI code that crashes tests on Android.
Fix an issue in Themis Core which causes the same test to behave unexpectedly.
Signal exceptions from within JNI code instead of checking for null in Java code.

Next tasks

Add passphrase API. Can be done in parallel, will be submitted after this PR is merged.
Deprecate old API. Since we will have to deprecate a lot and provide good migration instructions, I decided to split this out into a new PR.
Add Kotlin tests. It will be nice to actually see how our code can be used from Kotlin. Adding it is trivial, but not quite trivial.
Improve Kotlin support. RFC 3.9 plans several additional changes in Token Protect API to improve its usability in Kotlin.
Update examples. Both in-repo and external ones. They are quite outdated so it may require additional refactoring.

Checklist

 Change is covered by automated tests
 Benchmark results are attached (we have no JVM benchmarks)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,634,2020-05-05T19:21:41Z,2020-05-11T09:31:39Z,2020-05-11T09:31:46Z,MERGED,True,1853,5,11,https://github.com/ilammy,Update JavaThemis Secure Cell API,12,"['O-Android :robot:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/634,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/634#issuecomment-624565391,"This PR makes preparatory changes for new passphrase API by updating existing API of Secure Cell in JavaThemis to more easy to use and similar to other Themis wrappers. The API is described in RFC 3.9.
User notes
SecureCell class now provides improved Secure Cell interfaces:

SecureCell.Seal
SecureCell.TokenProtect
SecureCell.ContextImprint

as well as new static factory methods for them, accepting symmetric keys:

SecureCell#SealWithKey
SecureCell#TokenProtectWithKey
SecureCell#ContextImprintWithKey

All of this can be used like this in Java:
import com.cossacklabs.themis.SecureCell;
import com.cossacklabs.themis.SymmetricKey;

SymmetricKey masterKey = new SymmetricKey();

SecureCell.Seal cell = SecureCell.SealWithKey(masterKey);

byte[] message = ""precious message"".getBytes(StandardCharsets.UTF_8);

byte[] encrypted = cell.encrypt(message);
byte[] decrypted = cell.decrypt(encrypted);

assertArrayEquals(message, decrypted);
Optional associated context
All encrypt and decrypt methods now have an overload without an optional argument for associated context. This makes the code that does not use it more concise. (Of course you can still pass null there if you must.)
Nullability annotations
New interface are properly annotated with @NotNull and @Nullable which improves IDE experience and enables more static checks.
SecureCellData usage
Note that with new interfaces you no longer have to construct SecureCellData objects to decrypt data. Just pass your byte[] with encrypted data directly to decrypt() methods. In Token Protect mode you pass encrypted data and authentication token as separate byte[] arrays too.
Similarly, Seal and Context Imprint modes return encrypted byte[] directly. You no longer have to getProtectedData() from the returned SecureCellData object.
Token Protect mode still returns SecureCellData from its encrypt() method. That's the way it is with Java, which has no multiple return values. This will be improved for Kotlin a bit later.
Pending deprecations
This PR does not deprecate the old API, but consider it deprecated.

Construction of SecureCell with new.
protect and unprotect methods.

(This list will be updated when the API is actually deprecated.)
Technical notes
Full rationale may be found in RFC 3.9. Main gripes with the old API were run-time mode-setting with its impact on API, syntactic noise when using more popular Seal mode, and idiosyncratic naming of methods, inconsistent with other wrappers and our own documentation.
New API does not accept String values. The old API encoded strings in platform-specific UTF-16 which was quite unique and not portable to other platforms. Furthermore, it suggested that strings can be used as passphrases, which is not secure in typical case.
At last, in order to decrypt Sealed data, instead of writing
byte[] decrypted = cell.unprotect(null, new SecureCellData(encrypted, null));
you can write much more readable code:
byte[] decrypted = cell.decrypt(encrypted);
And yes, the context now comes after the data, as in all other wrappers.
Last but not least, Secure Cell gets an expanded and updated test suite (translated from whatever was done for SwiftThemis). This will definitely come handy if we are going to reimplement JavaThemis in pure JVM code some day.
Note that JNI API and ABI does not change. We decided to keep compatibility here.
Targeting Java 7
I have discovered that Android compiles its code for Java 7 by default. I wanted to use Java 8 features in tests initially, but given the Android story I think we should use Java 7 even for desktop Java code.
Note that embedded Gradle wrapper still requires Java 8 to run. However, the compiled code will run on Java 7 too.
New TODOs and FIXMEs
This PR adds a bunch of new TODOs in the code. While it's not nice, I don't want to block further development with those issues. They will be resolved later:

Fix a bug in JNI code that crashes tests on Android.
Fix an issue in Themis Core which causes the same test to behave unexpectedly.
Signal exceptions from within JNI code instead of checking for null in Java code.

Next tasks

Add passphrase API. Can be done in parallel, will be submitted after this PR is merged.
Deprecate old API. Since we will have to deprecate a lot and provide good migration instructions, I decided to split this out into a new PR.
Add Kotlin tests. It will be nice to actually see how our code can be used from Kotlin. Adding it is trivial, but not quite trivial.
Improve Kotlin support. RFC 3.9 plans several additional changes in Token Protect API to improve its usability in Kotlin.
Update examples. Both in-repo and external ones. They are quite outdated so it may require additional refactoring.

Checklist

 Change is covered by automated tests
 Benchmark results are attached (we have no JVM benchmarks)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated","Oh ffs, Android!        (ノಠ益ಠ)ノ彡┻━┻
It fails on CircleCI with a specific older API level:
10:01:41 V/InstrumentationResultParser: INSTRUMENTATION_STATUS: stack=java.lang.NoSuchMethodError: No static method decodeBase64(Ljava/lang/String;)[B in class Lorg/apache/commons/codec/binary/Base64; or its super classes (declaration of 'org.apache.commons.codec.binary.Base64' appears in /system/framework/org.apache.http.legacy.boot.jar)
10:01:41 V/InstrumentationResultParser: at com.cossacklabs.themis.test.Base64$Decoder.decode(Base64.java:27)
10:01:41 V/InstrumentationResultParser: at com.cossacklabs.themis.test.SecureCellContextImprintTest.initWithFixed(SecureCellContextImprintTest.java:44)

But it's fine on my machines, obviously.
These unicorns seem to include Base64 from org.apache.commons.codec into their system library, making in impossible to use a proper dependency. java-stellar-sdk have had the same issue.
Now I'm tempted to either remove base64 tests, or just implement the decoder myself. Yes, it will be 36th base64 decoder implementation in the ecosystem. I guess all prior attempts were caused by similar frustration.
Unfortunately, Java does not make conditional compilation easy. Otherwise we might have used android.util.Base64 on Android, and a proper library on sane systems that don't believe they know better what library version the applications should use.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,635,2020-05-06T11:09:50Z,2020-05-12T10:36:54Z,2020-05-12T10:37:50Z,MERGED,True,669,0,6,https://github.com/ilammy,Secure Cell passphrase API: JavaThemis,4,"['O-Android :robot:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/635,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/635,"With preparatory changes in #634, this PR adds actual passphrase API as described in RFC 3.9.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in Kotlin:
import com.cossacklabs.themis.SecureCell

val cell = SecureCell.SealWithPassphrase(""secret"")

val message = ""precious message"".toByteArray()

val encrypted = cell.encrypt(message)
val decrypted = cell.decrypt(encrypted)

assertArrayEquals(decrypted, message)
And the same API in Java:
import com.cossacklabs.themis.SecureCell;

SecureCell.Seal cell = SecureCell.SealWithPassphrase(""secret"");

byte[] message = ""precious message"".getBytes(StandardCharsets.UTF_8);

byte[] encrypted = cell.encrypt(message);
byte[] decrypted = cell.decrypt(encrypted);

assertArrayEquals(decrypted, message);
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
import com.cossacklabs.themis.SecureCell
import com.cossacklabs.themis.SymmetricKey

// Generate a new key if you don't have one:
val masterKey = SymmetricKey()
// Or use an existing value that you store somewhere:
val masterKey = Base64.Decoder.decode(""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U="")

val cell = SecureCell.SealWithKey(masterKey)

val message = ""precious message"".toByteArray()

val encrypted = cell.encrypt(message)
val decrypted = cell.decrypt(encrypted)

assertArrayEquals(decrypted, message)
Unicode considerations
Note that passphrase API uses UTF-8 by default for compatibility with other platforms. If you need to use a different encoding, there are variety of interfaces to allow that:

SecureCell#SealWithPassphrase(String) — use UTF-8, the default
SecureCell#SealWithPassphrase(String, Charset) — use the specified charset
SecureCell#SealWithPassphrase(byte[]) — in case you already have it encoded

Technical notes
There are no deviations from RFC 3.9 with respect to passphrase API.
We introduce a new helper – PassphraseBytes – and extend the JNI API to support passphrases.
Checklist

 Dependencies are merged: #634, this PR is rebased
 Change is covered by automated tests
 Benchmark results are attached (no JVM benches)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (later)
 Changelog is updated","With preparatory changes in #634, this PR adds actual passphrase API as described in RFC 3.9.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in Kotlin:
import com.cossacklabs.themis.SecureCell

val cell = SecureCell.SealWithPassphrase(""secret"")

val message = ""precious message"".toByteArray()

val encrypted = cell.encrypt(message)
val decrypted = cell.decrypt(encrypted)

assertArrayEquals(decrypted, message)
And the same API in Java:
import com.cossacklabs.themis.SecureCell;

SecureCell.Seal cell = SecureCell.SealWithPassphrase(""secret"");

byte[] message = ""precious message"".getBytes(StandardCharsets.UTF_8);

byte[] encrypted = cell.encrypt(message);
byte[] decrypted = cell.decrypt(encrypted);

assertArrayEquals(decrypted, message);
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
import com.cossacklabs.themis.SecureCell
import com.cossacklabs.themis.SymmetricKey

// Generate a new key if you don't have one:
val masterKey = SymmetricKey()
// Or use an existing value that you store somewhere:
val masterKey = Base64.Decoder.decode(""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U="")

val cell = SecureCell.SealWithKey(masterKey)

val message = ""precious message"".toByteArray()

val encrypted = cell.encrypt(message)
val decrypted = cell.decrypt(encrypted)

assertArrayEquals(decrypted, message)
Unicode considerations
Note that passphrase API uses UTF-8 by default for compatibility with other platforms. If you need to use a different encoding, there are variety of interfaces to allow that:

SecureCell#SealWithPassphrase(String) — use UTF-8, the default
SecureCell#SealWithPassphrase(String, Charset) — use the specified charset
SecureCell#SealWithPassphrase(byte[]) — in case you already have it encoded

Technical notes
There are no deviations from RFC 3.9 with respect to passphrase API.
We introduce a new helper – PassphraseBytes – and extend the JNI API to support passphrases.
Checklist

 Dependencies are merged: #634, this PR is rebased
 Change is covered by automated tests
 Benchmark results are attached (no JVM benches)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (later)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,635,2020-05-06T11:09:50Z,2020-05-12T10:36:54Z,2020-05-12T10:37:50Z,MERGED,True,669,0,6,https://github.com/ilammy,Secure Cell passphrase API: JavaThemis,4,"['O-Android :robot:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/635,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/635#issuecomment-626589194,"With preparatory changes in #634, this PR adds actual passphrase API as described in RFC 3.9.
User notes
Passphrase-based interface of Secure Cell allows you to use short and memorable passphrases to secure your data. While symmetric keys are more secure, they are also longer and much harder for humans to remember.
Here is how you can use passphrases with Secure Cell in Kotlin:
import com.cossacklabs.themis.SecureCell

val cell = SecureCell.SealWithPassphrase(""secret"")

val message = ""precious message"".toByteArray()

val encrypted = cell.encrypt(message)
val decrypted = cell.decrypt(encrypted)

assertArrayEquals(decrypted, message)
And the same API in Java:
import com.cossacklabs.themis.SecureCell;

SecureCell.Seal cell = SecureCell.SealWithPassphrase(""secret"");

byte[] message = ""precious message"".getBytes(StandardCharsets.UTF_8);

byte[] encrypted = cell.encrypt(message);
byte[] decrypted = cell.decrypt(encrypted);

assertArrayEquals(decrypted, message);
Passphrase API accepts passphrases as relatively short strings, suitable for human memory. Master key API uses randomly generated, long binary keys, which are more suitable for machines to remember. However, they are also much more efficient and generally more secure due to considerable length. You should prefer to use keys over passphrases if there are no humans involved. The interface is almost the same:
import com.cossacklabs.themis.SecureCell
import com.cossacklabs.themis.SymmetricKey

// Generate a new key if you don't have one:
val masterKey = SymmetricKey()
// Or use an existing value that you store somewhere:
val masterKey = Base64.Decoder.decode(""b0gyNlM4LTFKRDI5anFIRGJ4SmQyLGE7MXN5YWUzR2U="")

val cell = SecureCell.SealWithKey(masterKey)

val message = ""precious message"".toByteArray()

val encrypted = cell.encrypt(message)
val decrypted = cell.decrypt(encrypted)

assertArrayEquals(decrypted, message)
Unicode considerations
Note that passphrase API uses UTF-8 by default for compatibility with other platforms. If you need to use a different encoding, there are variety of interfaces to allow that:

SecureCell#SealWithPassphrase(String) — use UTF-8, the default
SecureCell#SealWithPassphrase(String, Charset) — use the specified charset
SecureCell#SealWithPassphrase(byte[]) — in case you already have it encoded

Technical notes
There are no deviations from RFC 3.9 with respect to passphrase API.
We introduce a new helper – PassphraseBytes – and extend the JNI API to support passphrases.
Checklist

 Dependencies are merged: #634, this PR is rebased
 Change is covered by automated tests
 Benchmark results are attached (no JVM benches)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (later)
 Changelog is updated","Whew, this PR is ready for review now.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,636,2020-05-06T19:21:14Z,2020-05-13T10:54:06Z,2020-05-13T10:54:13Z,MERGED,True,147,2,10,https://github.com/ilammy,Deprecate old Secure Cell API,2,"['W-JavaThemis :coffee:', 'compatibility']",https://github.com/cossacklabs/themis/pull/636,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/636,"Following changes in #634 and #635, mark almost all Secure Cell API as deprecated. Provide inline replacement instructions where relevant. Suppress deprecation warnings in our own code that tests old API usage and has to rely on public constants which we cannot make private now.
Migration instructions
Constructors
Instead of using new SecureCell(...) and SecureCell.MODE... constants. Use SecureCell.ModeWithKey(...) factory methods now.
The following constructors are deprecated:

new SecureCell(int mode) (no key specified)
new SecureCell(byte[] key) (uses Seal mode)
new SecureCell(byte[] key, int mode)

Use an appropriate replacement instead:

SecureCell.SealWithKey(byte[] key)
SecureCell.TokenProtectWithKey(byte[] key)
SecureCell.ContextImprintWithKey(byte[] key)

Note that these factory methods return instances of interfaces like SecureCell.Seal, not SecureCell. You may need to update your fields and variable types. Encryption API is also different and not compatible, you will need to update method call sites too.
⚠️ Insecure ‘password’ API
The following constructors are not secure when used with short passwords:

new SecureCell(String password) (uses Seal mode)
new SecureCell(String password, int mode)

They are deprecated and you are strongly discouraged from using them. (You are safe only if the passwords are long enough, around 50+ characters.)
If you have to use passphrases that need to be remembered by humans, consider using new passphrase API instead (#635):

SecureCell.SealWithPassphrase(String passphrase)

JavaThemis 0.13 supports passphrase API only in Seal mode. Other modes support only symmetric keys at the moment.
If you can store the encryption secret on electronic media, you’d be better off using symmetric key API. See #634 for an overview of updated API.
Note that new passphrase API is not compatible with the deprecated ‘password’ constructors. You will not be able to use new API to decrypt data encrypted by old API and vice versa. If you wish to switch the API, old data has to be decrypted with old API and reencrypted with the new one.
Encryption methods
All protect and unprotect methods of SecureCell class are deprecated. Use appropriate encrypt and decrypt methods of interfaces like SecureCell.Seal instead.
Easier encryption
Encryption API for Seal and Context Imprint mode now returns encrypted data directly. You no longer have to extract it out of SecureCellData object:
// Old:
byte[] encrypted = cell.protect(context, message).getProtectedData();

// NEW:
byte[] encrypted = cell.encrypt(message, context);
⚠️ Please note that new API accepts message and context in different order (context comes last).
Easier decryption
Decryption with new API no longer requires construction of SecureCellData object:
// Old:
byte[] decrypted = cell.unprotect(context, new SecureCellData(message, null));

// NEW:
byte[] decrypted = cell.decrypt(message, context);
Context is optional and changed ordering
New API accepts message and context in different order: context comes last.
If you do not use associated context, the argument can be omitted entirely.
// Old:
byte[] encrypted = cell.protect(null, message).getProtectedData();

// NEW:
byte[] encrypted = cell.encrypt(message);
⛔️ No inline key switching
The methods that accept a key as the first argument do not have direct counterpart in the new API:

protect(byte[] key, byte[] context, byte[] data)
unprotect(byte[] key, byte[] context, SecureCellData protected)

You will have to construct a new Secure Cell object to use a different key.
⛔️ No context as string
The methods that accept associated context as a String do not have direct counterpart in the new API:

protect(String context, byte[] data)
unprotect(String context, SecureCellData protected)

If you need compatibility, you can use new API with the context string converted to UTF-16 with getBytes(""UTF-16"").
⚠️ Insecure ‘password’ API
The methods that accept a ‘password’ string as the first argument are not secure when used with short passwords, similar to related constructors (see above). Consider user new passphrase API or symmetric keys instead.
Do not use the following methods:

protect(String password, String context, byte[] data)
unprotect(String password, String context, SecureCellData protected)

Checklist

 Dependencies are merged: #634, #635, this PR is rebased
 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (will do separately)
 Changelog is updated","Following changes in #634 and #635, mark almost all Secure Cell API as deprecated. Provide inline replacement instructions where relevant. Suppress deprecation warnings in our own code that tests old API usage and has to rely on public constants which we cannot make private now.
Migration instructions
Constructors
Instead of using new SecureCell(...) and SecureCell.MODE... constants. Use SecureCell.ModeWithKey(...) factory methods now.
The following constructors are deprecated:

new SecureCell(int mode) (no key specified)
new SecureCell(byte[] key) (uses Seal mode)
new SecureCell(byte[] key, int mode)

Use an appropriate replacement instead:

SecureCell.SealWithKey(byte[] key)
SecureCell.TokenProtectWithKey(byte[] key)
SecureCell.ContextImprintWithKey(byte[] key)

Note that these factory methods return instances of interfaces like SecureCell.Seal, not SecureCell. You may need to update your fields and variable types. Encryption API is also different and not compatible, you will need to update method call sites too.
⚠️ Insecure ‘password’ API
The following constructors are not secure when used with short passwords:

new SecureCell(String password) (uses Seal mode)
new SecureCell(String password, int mode)

They are deprecated and you are strongly discouraged from using them. (You are safe only if the passwords are long enough, around 50+ characters.)
If you have to use passphrases that need to be remembered by humans, consider using new passphrase API instead (#635):

SecureCell.SealWithPassphrase(String passphrase)

JavaThemis 0.13 supports passphrase API only in Seal mode. Other modes support only symmetric keys at the moment.
If you can store the encryption secret on electronic media, you’d be better off using symmetric key API. See #634 for an overview of updated API.
Note that new passphrase API is not compatible with the deprecated ‘password’ constructors. You will not be able to use new API to decrypt data encrypted by old API and vice versa. If you wish to switch the API, old data has to be decrypted with old API and reencrypted with the new one.
Encryption methods
All protect and unprotect methods of SecureCell class are deprecated. Use appropriate encrypt and decrypt methods of interfaces like SecureCell.Seal instead.
Easier encryption
Encryption API for Seal and Context Imprint mode now returns encrypted data directly. You no longer have to extract it out of SecureCellData object:
// Old:
byte[] encrypted = cell.protect(context, message).getProtectedData();

// NEW:
byte[] encrypted = cell.encrypt(message, context);
⚠️ Please note that new API accepts message and context in different order (context comes last).
Easier decryption
Decryption with new API no longer requires construction of SecureCellData object:
// Old:
byte[] decrypted = cell.unprotect(context, new SecureCellData(message, null));

// NEW:
byte[] decrypted = cell.decrypt(message, context);
Context is optional and changed ordering
New API accepts message and context in different order: context comes last.
If you do not use associated context, the argument can be omitted entirely.
// Old:
byte[] encrypted = cell.protect(null, message).getProtectedData();

// NEW:
byte[] encrypted = cell.encrypt(message);
⛔️ No inline key switching
The methods that accept a key as the first argument do not have direct counterpart in the new API:

protect(byte[] key, byte[] context, byte[] data)
unprotect(byte[] key, byte[] context, SecureCellData protected)

You will have to construct a new Secure Cell object to use a different key.
⛔️ No context as string
The methods that accept associated context as a String do not have direct counterpart in the new API:

protect(String context, byte[] data)
unprotect(String context, SecureCellData protected)

If you need compatibility, you can use new API with the context string converted to UTF-16 with getBytes(""UTF-16"").
⚠️ Insecure ‘password’ API
The methods that accept a ‘password’ string as the first argument are not secure when used with short passwords, similar to related constructors (see above). Consider user new passphrase API or symmetric keys instead.
Do not use the following methods:

protect(String password, String context, byte[] data)
unprotect(String password, String context, SecureCellData protected)

Checklist

 Dependencies are merged: #634, #635, this PR is rebased
 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (will do separately)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,636,2020-05-06T19:21:14Z,2020-05-13T10:54:06Z,2020-05-13T10:54:13Z,MERGED,True,147,2,10,https://github.com/ilammy,Deprecate old Secure Cell API,2,"['W-JavaThemis :coffee:', 'compatibility']",https://github.com/cossacklabs/themis/pull/636,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/636#issuecomment-627261374,"Following changes in #634 and #635, mark almost all Secure Cell API as deprecated. Provide inline replacement instructions where relevant. Suppress deprecation warnings in our own code that tests old API usage and has to rely on public constants which we cannot make private now.
Migration instructions
Constructors
Instead of using new SecureCell(...) and SecureCell.MODE... constants. Use SecureCell.ModeWithKey(...) factory methods now.
The following constructors are deprecated:

new SecureCell(int mode) (no key specified)
new SecureCell(byte[] key) (uses Seal mode)
new SecureCell(byte[] key, int mode)

Use an appropriate replacement instead:

SecureCell.SealWithKey(byte[] key)
SecureCell.TokenProtectWithKey(byte[] key)
SecureCell.ContextImprintWithKey(byte[] key)

Note that these factory methods return instances of interfaces like SecureCell.Seal, not SecureCell. You may need to update your fields and variable types. Encryption API is also different and not compatible, you will need to update method call sites too.
⚠️ Insecure ‘password’ API
The following constructors are not secure when used with short passwords:

new SecureCell(String password) (uses Seal mode)
new SecureCell(String password, int mode)

They are deprecated and you are strongly discouraged from using them. (You are safe only if the passwords are long enough, around 50+ characters.)
If you have to use passphrases that need to be remembered by humans, consider using new passphrase API instead (#635):

SecureCell.SealWithPassphrase(String passphrase)

JavaThemis 0.13 supports passphrase API only in Seal mode. Other modes support only symmetric keys at the moment.
If you can store the encryption secret on electronic media, you’d be better off using symmetric key API. See #634 for an overview of updated API.
Note that new passphrase API is not compatible with the deprecated ‘password’ constructors. You will not be able to use new API to decrypt data encrypted by old API and vice versa. If you wish to switch the API, old data has to be decrypted with old API and reencrypted with the new one.
Encryption methods
All protect and unprotect methods of SecureCell class are deprecated. Use appropriate encrypt and decrypt methods of interfaces like SecureCell.Seal instead.
Easier encryption
Encryption API for Seal and Context Imprint mode now returns encrypted data directly. You no longer have to extract it out of SecureCellData object:
// Old:
byte[] encrypted = cell.protect(context, message).getProtectedData();

// NEW:
byte[] encrypted = cell.encrypt(message, context);
⚠️ Please note that new API accepts message and context in different order (context comes last).
Easier decryption
Decryption with new API no longer requires construction of SecureCellData object:
// Old:
byte[] decrypted = cell.unprotect(context, new SecureCellData(message, null));

// NEW:
byte[] decrypted = cell.decrypt(message, context);
Context is optional and changed ordering
New API accepts message and context in different order: context comes last.
If you do not use associated context, the argument can be omitted entirely.
// Old:
byte[] encrypted = cell.protect(null, message).getProtectedData();

// NEW:
byte[] encrypted = cell.encrypt(message);
⛔️ No inline key switching
The methods that accept a key as the first argument do not have direct counterpart in the new API:

protect(byte[] key, byte[] context, byte[] data)
unprotect(byte[] key, byte[] context, SecureCellData protected)

You will have to construct a new Secure Cell object to use a different key.
⛔️ No context as string
The methods that accept associated context as a String do not have direct counterpart in the new API:

protect(String context, byte[] data)
unprotect(String context, SecureCellData protected)

If you need compatibility, you can use new API with the context string converted to UTF-16 with getBytes(""UTF-16"").
⚠️ Insecure ‘password’ API
The methods that accept a ‘password’ string as the first argument are not secure when used with short passwords, similar to related constructors (see above). Consider user new passphrase API or symmetric keys instead.
Do not use the following methods:

protect(String password, String context, byte[] data)
unprotect(String password, String context, SecureCellData protected)

Checklist

 Dependencies are merged: #634, #635, this PR is rebased
 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (will do separately)
 Changelog is updated",This PR is now ready for review.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,637,2020-05-12T11:06:42Z,2020-05-13T10:54:42Z,2020-05-13T10:55:08Z,MERGED,True,1223,0,10,https://github.com/ilammy,Test Kotlin API,3,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/637,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/637,"From now on we officially™ support Kotlin API of JavaThemis on Android and desktop JVM.
It was possible to use JavaThemis via Kotlin before but we were not sure in the API we provided and we not guaranteeing its stability. Now we do.
User notes
API stability and maturity
All existing Kotlin API is now considered stable. That is, we will do our best to avoid breaking it and if there is a need to deprecate some parts of Kotlin API, you will be notified about that.
SecureCell APIs are considered mature for Kotlin. That is, we are happy with this API in Kotlin and will not update it unless absolutely necessary.
As of JavaThemis 0.13, other APIs are not yet mature for Kotlin. We will not break these APIs, but you might expect some new, improved APIs to appear and some APIs to be deprecated in later releases, until Kotlin API has stabilized and matured.
Java 1.7 is minimum target for apps, Java 1.8 is needed for compilation
The minimum target for applications using JavaThemis or AndroidThemis is still Java 1.7.
If you get JavaThemis from Maven, you can still use Java 1.7 to compile your applications.
However, JavaThemis now requires Java 1.8 or later for compilation from source. This is the requirement of Kotlin compiler.
Technical notes
We are using the latest current version of Kotlin: 1.3.72. Kotlin is used only for tests. JavaThemis does not and will not require Kotlin at runtime for applications.
Since Kotlin supports lambdas out of the box, a polyfill for org.junit.Assert#assertThrows is added. It makes exception testing much more readable.
The tests themselves were automatically converted from Java code by IntelliJ, they are basically the same. Though, they did require some manual cleanup after that.
We currently test only SecureCell in Kotlin. Other cryptosystems will require additional review which is out of scope for Themis 0.13. We will get back to them in next releases.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (nope, not right now)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (we don't have Kotlin examples, maybe later)
 Changelog is updated","From now on we officially™ support Kotlin API of JavaThemis on Android and desktop JVM.
It was possible to use JavaThemis via Kotlin before but we were not sure in the API we provided and we not guaranteeing its stability. Now we do.
User notes
API stability and maturity
All existing Kotlin API is now considered stable. That is, we will do our best to avoid breaking it and if there is a need to deprecate some parts of Kotlin API, you will be notified about that.
SecureCell APIs are considered mature for Kotlin. That is, we are happy with this API in Kotlin and will not update it unless absolutely necessary.
As of JavaThemis 0.13, other APIs are not yet mature for Kotlin. We will not break these APIs, but you might expect some new, improved APIs to appear and some APIs to be deprecated in later releases, until Kotlin API has stabilized and matured.
Java 1.7 is minimum target for apps, Java 1.8 is needed for compilation
The minimum target for applications using JavaThemis or AndroidThemis is still Java 1.7.
If you get JavaThemis from Maven, you can still use Java 1.7 to compile your applications.
However, JavaThemis now requires Java 1.8 or later for compilation from source. This is the requirement of Kotlin compiler.
Technical notes
We are using the latest current version of Kotlin: 1.3.72. Kotlin is used only for tests. JavaThemis does not and will not require Kotlin at runtime for applications.
Since Kotlin supports lambdas out of the box, a polyfill for org.junit.Assert#assertThrows is added. It makes exception testing much more readable.
The tests themselves were automatically converted from Java code by IntelliJ, they are basically the same. Though, they did require some manual cleanup after that.
We currently test only SecureCell in Kotlin. Other cryptosystems will require additional review which is out of scope for Themis 0.13. We will get back to them in next releases.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (nope, not right now)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (we don't have Kotlin examples, maybe later)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,637,2020-05-12T11:06:42Z,2020-05-13T10:54:42Z,2020-05-13T10:55:08Z,MERGED,True,1223,0,10,https://github.com/ilammy,Test Kotlin API,3,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/637,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/637#issuecomment-627312123,"From now on we officially™ support Kotlin API of JavaThemis on Android and desktop JVM.
It was possible to use JavaThemis via Kotlin before but we were not sure in the API we provided and we not guaranteeing its stability. Now we do.
User notes
API stability and maturity
All existing Kotlin API is now considered stable. That is, we will do our best to avoid breaking it and if there is a need to deprecate some parts of Kotlin API, you will be notified about that.
SecureCell APIs are considered mature for Kotlin. That is, we are happy with this API in Kotlin and will not update it unless absolutely necessary.
As of JavaThemis 0.13, other APIs are not yet mature for Kotlin. We will not break these APIs, but you might expect some new, improved APIs to appear and some APIs to be deprecated in later releases, until Kotlin API has stabilized and matured.
Java 1.7 is minimum target for apps, Java 1.8 is needed for compilation
The minimum target for applications using JavaThemis or AndroidThemis is still Java 1.7.
If you get JavaThemis from Maven, you can still use Java 1.7 to compile your applications.
However, JavaThemis now requires Java 1.8 or later for compilation from source. This is the requirement of Kotlin compiler.
Technical notes
We are using the latest current version of Kotlin: 1.3.72. Kotlin is used only for tests. JavaThemis does not and will not require Kotlin at runtime for applications.
Since Kotlin supports lambdas out of the box, a polyfill for org.junit.Assert#assertThrows is added. It makes exception testing much more readable.
The tests themselves were automatically converted from Java code by IntelliJ, they are basically the same. Though, they did require some manual cleanup after that.
We currently test only SecureCell in Kotlin. Other cryptosystems will require additional review which is out of scope for Themis 0.13. We will get back to them in next releases.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (nope, not right now)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (we don't have Kotlin examples, maybe later)
 Changelog is updated","Do we need to update any java code of AndroidThemis to support Kotlin?

No, no changes are necessary. It is possible to import the current code and it will just work.
Gradle will also pick up any new Kotlin files automatically and will test them, both for desktop systems and for Android.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,638,2020-05-13T11:07:26Z,2020-05-15T17:30:37Z,2020-05-15T17:30:41Z,MERGED,True,100,106,3,https://github.com/ilammy,Destructuring accessors for SecureCellData in Kotlin,2,"['O-Android :robot:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/638,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/638,"This is the final item of API updates planned in RFC 3.9.
Kotlin supports tuples and destructuring assignment which results in a much nicer APIs with multiple return values. Implement special accessor methods for SecureCellData to enable that:
// You can now write like this:
val (encrypted, authToken) = cellTP.encrypt(message, context)

// Instead of having to spell it out like this:
val result = cellTP.protect(context, message)
val encrypted = result.protectedData
val authToken = result.additionalData
This is implemented by a couple of special methods. They are available to users (i.e., IDEs will show them up in Java autocomplete) but these methods are not intended for general use. The methods also have appropriate @NotNull annotations to make Kotlin experience better.
Initially, RFC 3.9 also suggested some accessor renaming for Java:

getProtectedData() ⟹ getEncryptedData()
getAdditionalData() ⟹ getToken()

However, after giving it a second though, I believe that we don’t need to do this. Renaming is hard, it causes developer pain. While it is justified with new Secure Cell API that has its own improvements, here we’d be renaming for the sake of renaming. While the names are not ideal, they are not that ambiguous either. Furthermore, Android users are likely to use Kotlin in the first place so they will not have to deal with these names anymore.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no Kotlin examples)
 Changelog is updated","This is the final item of API updates planned in RFC 3.9.
Kotlin supports tuples and destructuring assignment which results in a much nicer APIs with multiple return values. Implement special accessor methods for SecureCellData to enable that:
// You can now write like this:
val (encrypted, authToken) = cellTP.encrypt(message, context)

// Instead of having to spell it out like this:
val result = cellTP.protect(context, message)
val encrypted = result.protectedData
val authToken = result.additionalData
This is implemented by a couple of special methods. They are available to users (i.e., IDEs will show them up in Java autocomplete) but these methods are not intended for general use. The methods also have appropriate @NotNull annotations to make Kotlin experience better.
Initially, RFC 3.9 also suggested some accessor renaming for Java:

getProtectedData() ⟹ getEncryptedData()
getAdditionalData() ⟹ getToken()

However, after giving it a second though, I believe that we don’t need to do this. Renaming is hard, it causes developer pain. While it is justified with new Secure Cell API that has its own improvements, here we’d be renaming for the sake of renaming. While the names are not ideal, they are not that ambiguous either. Furthermore, Android users are likely to use Kotlin in the first place so they will not have to deal with these names anymore.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no Kotlin examples)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,639,2020-05-14T12:28:15Z,2020-05-15T17:30:52Z,2020-05-15T17:30:55Z,MERGED,True,120,32,8,https://github.com/ilammy,Avoid overflows in JNI allocations,4,"['bug', 'O-Android :robot:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/639,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/639,"Fix a possible crash on Android systems when handling corrupted input of Secure Cell (and possibly other APIs as well). Now instead of a crash you will get an appropriate exception.
Technical details
Themis Core API works with size_t for buffer size inputs and outputs, that is uint32_t on 32-bit systems or uint64_t on 64-bit ones. In most cases Themis data structures use uint32_t for data length fields, allowing input data to be up to 4 GB long, theoretically.
On the other hand, JVM uses int type for its array indices, that is int32_t everywhere, regardless of the host system. Note that it is a signed integer, meaning that native JVM byte[] arrays cannot fit more than 2 GB of data, inclusive. There are hacks to overcome this limit, but with byte[] API – as in Themis – you are limited to 2 GB.
JNI type jsize reflects this limitation, it is defined to be jint which is typically defined as signed int, assuming 32-bit int types on most modern platforms. Thanks to C being very safe language, sizes bigger than 231 – 1 silently overflow into negative space and then it's up to JNI to handle this situation. Desktop Java systems typically throw a NegativeArraySizeException when trying to allocate an array with negative size, but Android systems typically kill the process due to an assertion failure.
In order to have predictable behavior in this case, check all sizes before trying to allocate an array of that size, and exit with an error if the allocation would overflow. This way instead of crashing we will throw an appropriate Themis subsystem exception.
Note that in some cases the array sizes do not depend on user input, but we still check just in case the Core library does something silly. In other cases the output can get that big due to input being sufficiently big — slightly smaller than 2 GB, but enough for Themis data overhead to push that over the 2 GB limit. However, in most cases this situation can be triggered by corrupted input where the data length fields contain values inconsistent with actual input size.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Fix a possible crash on Android systems when handling corrupted input of Secure Cell (and possibly other APIs as well). Now instead of a crash you will get an appropriate exception.
Technical details
Themis Core API works with size_t for buffer size inputs and outputs, that is uint32_t on 32-bit systems or uint64_t on 64-bit ones. In most cases Themis data structures use uint32_t for data length fields, allowing input data to be up to 4 GB long, theoretically.
On the other hand, JVM uses int type for its array indices, that is int32_t everywhere, regardless of the host system. Note that it is a signed integer, meaning that native JVM byte[] arrays cannot fit more than 2 GB of data, inclusive. There are hacks to overcome this limit, but with byte[] API – as in Themis – you are limited to 2 GB.
JNI type jsize reflects this limitation, it is defined to be jint which is typically defined as signed int, assuming 32-bit int types on most modern platforms. Thanks to C being very safe language, sizes bigger than 231 – 1 silently overflow into negative space and then it's up to JNI to handle this situation. Desktop Java systems typically throw a NegativeArraySizeException when trying to allocate an array with negative size, but Android systems typically kill the process due to an assertion failure.
In order to have predictable behavior in this case, check all sizes before trying to allocate an array of that size, and exit with an error if the allocation would overflow. This way instead of crashing we will throw an appropriate Themis subsystem exception.
Note that in some cases the array sizes do not depend on user input, but we still check just in case the Core library does something silly. In other cases the output can get that big due to input being sufficiently big — slightly smaller than 2 GB, but enough for Themis data overhead to push that over the 2 GB limit. However, in most cases this situation can be triggered by corrupted input where the data length fields contain values inconsistent with actual input size.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,639,2020-05-14T12:28:15Z,2020-05-15T17:30:52Z,2020-05-15T17:30:55Z,MERGED,True,120,32,8,https://github.com/ilammy,Avoid overflows in JNI allocations,4,"['bug', 'O-Android :robot:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/639,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/639#issuecomment-628804753,"Fix a possible crash on Android systems when handling corrupted input of Secure Cell (and possibly other APIs as well). Now instead of a crash you will get an appropriate exception.
Technical details
Themis Core API works with size_t for buffer size inputs and outputs, that is uint32_t on 32-bit systems or uint64_t on 64-bit ones. In most cases Themis data structures use uint32_t for data length fields, allowing input data to be up to 4 GB long, theoretically.
On the other hand, JVM uses int type for its array indices, that is int32_t everywhere, regardless of the host system. Note that it is a signed integer, meaning that native JVM byte[] arrays cannot fit more than 2 GB of data, inclusive. There are hacks to overcome this limit, but with byte[] API – as in Themis – you are limited to 2 GB.
JNI type jsize reflects this limitation, it is defined to be jint which is typically defined as signed int, assuming 32-bit int types on most modern platforms. Thanks to C being very safe language, sizes bigger than 231 – 1 silently overflow into negative space and then it's up to JNI to handle this situation. Desktop Java systems typically throw a NegativeArraySizeException when trying to allocate an array with negative size, but Android systems typically kill the process due to an assertion failure.
In order to have predictable behavior in this case, check all sizes before trying to allocate an array of that size, and exit with an error if the allocation would overflow. This way instead of crashing we will throw an appropriate Themis subsystem exception.
Note that in some cases the array sizes do not depend on user input, but we still check just in case the Core library does something silly. In other cases the output can get that big due to input being sufficiently big — slightly smaller than 2 GB, but enough for Themis data overhead to push that over the 2 GB limit. However, in most cases this situation can be triggered by corrupted input where the data length fields contain values inconsistent with actual input size.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Potentially this leads to incompatibility of decrypting > 2 GB messages on some platform then decrypting it on Android.

Not really. It was never possible to work with 2+ GB messages on Android in the first place, even before this change. In order to decrypt 2+ GB message you first have to read it in full into a byte[] array — which can never be bigger than 2 GB. So I don't think this point is worth mentioning in Themis docs.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,639,2020-05-14T12:28:15Z,2020-05-15T17:30:52Z,2020-05-15T17:30:55Z,MERGED,True,120,32,8,https://github.com/ilammy,Avoid overflows in JNI allocations,4,"['bug', 'O-Android :robot:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/639,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/639#issuecomment-628812592,"Fix a possible crash on Android systems when handling corrupted input of Secure Cell (and possibly other APIs as well). Now instead of a crash you will get an appropriate exception.
Technical details
Themis Core API works with size_t for buffer size inputs and outputs, that is uint32_t on 32-bit systems or uint64_t on 64-bit ones. In most cases Themis data structures use uint32_t for data length fields, allowing input data to be up to 4 GB long, theoretically.
On the other hand, JVM uses int type for its array indices, that is int32_t everywhere, regardless of the host system. Note that it is a signed integer, meaning that native JVM byte[] arrays cannot fit more than 2 GB of data, inclusive. There are hacks to overcome this limit, but with byte[] API – as in Themis – you are limited to 2 GB.
JNI type jsize reflects this limitation, it is defined to be jint which is typically defined as signed int, assuming 32-bit int types on most modern platforms. Thanks to C being very safe language, sizes bigger than 231 – 1 silently overflow into negative space and then it's up to JNI to handle this situation. Desktop Java systems typically throw a NegativeArraySizeException when trying to allocate an array with negative size, but Android systems typically kill the process due to an assertion failure.
In order to have predictable behavior in this case, check all sizes before trying to allocate an array of that size, and exit with an error if the allocation would overflow. This way instead of crashing we will throw an appropriate Themis subsystem exception.
Note that in some cases the array sizes do not depend on user input, but we still check just in case the Core library does something silly. In other cases the output can get that big due to input being sufficiently big — slightly smaller than 2 GB, but enough for Themis data overhead to push that over the 2 GB limit. However, in most cases this situation can be triggered by corrupted input where the data length fields contain values inconsistent with actual input size.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Not really

Encrypting 2+GB file using pythemis, trying to decrypt using Android. It worth mentioning because we claim to be compatible across platforms, but every platform has caveats.
I'd mention smth like ""Note: Android has restrictions on file size, messages can't be longer than 2GB. If you need to work with large files, consider splitting them into smaller ones."".",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,639,2020-05-14T12:28:15Z,2020-05-15T17:30:52Z,2020-05-15T17:30:55Z,MERGED,True,120,32,8,https://github.com/ilammy,Avoid overflows in JNI allocations,4,"['bug', 'O-Android :robot:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/639,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/639#issuecomment-628821117,"Fix a possible crash on Android systems when handling corrupted input of Secure Cell (and possibly other APIs as well). Now instead of a crash you will get an appropriate exception.
Technical details
Themis Core API works with size_t for buffer size inputs and outputs, that is uint32_t on 32-bit systems or uint64_t on 64-bit ones. In most cases Themis data structures use uint32_t for data length fields, allowing input data to be up to 4 GB long, theoretically.
On the other hand, JVM uses int type for its array indices, that is int32_t everywhere, regardless of the host system. Note that it is a signed integer, meaning that native JVM byte[] arrays cannot fit more than 2 GB of data, inclusive. There are hacks to overcome this limit, but with byte[] API – as in Themis – you are limited to 2 GB.
JNI type jsize reflects this limitation, it is defined to be jint which is typically defined as signed int, assuming 32-bit int types on most modern platforms. Thanks to C being very safe language, sizes bigger than 231 – 1 silently overflow into negative space and then it's up to JNI to handle this situation. Desktop Java systems typically throw a NegativeArraySizeException when trying to allocate an array with negative size, but Android systems typically kill the process due to an assertion failure.
In order to have predictable behavior in this case, check all sizes before trying to allocate an array of that size, and exit with an error if the allocation would overflow. This way instead of crashing we will throw an appropriate Themis subsystem exception.
Note that in some cases the array sizes do not depend on user input, but we still check just in case the Core library does something silly. In other cases the output can get that big due to input being sufficiently big — slightly smaller than 2 GB, but enough for Themis data overhead to push that over the 2 GB limit. However, in most cases this situation can be triggered by corrupted input where the data length fields contain values inconsistent with actual input size.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","This restriction has the same nature as 32-bit platforms being fundamentally incapable of handling 2 GB messages. It is implied by the API which requires the entire buffer to be in memory. I believe we don't need to mention that explicitly in our docs. Notes like that belong to the platform guides (that is, “Effective Java”, etc.) The developers will learn there that they cannot allocate that much memory and how to handle that situation by chunking.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,639,2020-05-14T12:28:15Z,2020-05-15T17:30:52Z,2020-05-15T17:30:55Z,MERGED,True,120,32,8,https://github.com/ilammy,Avoid overflows in JNI allocations,4,"['bug', 'O-Android :robot:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/639,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/639#issuecomment-628824602,"Fix a possible crash on Android systems when handling corrupted input of Secure Cell (and possibly other APIs as well). Now instead of a crash you will get an appropriate exception.
Technical details
Themis Core API works with size_t for buffer size inputs and outputs, that is uint32_t on 32-bit systems or uint64_t on 64-bit ones. In most cases Themis data structures use uint32_t for data length fields, allowing input data to be up to 4 GB long, theoretically.
On the other hand, JVM uses int type for its array indices, that is int32_t everywhere, regardless of the host system. Note that it is a signed integer, meaning that native JVM byte[] arrays cannot fit more than 2 GB of data, inclusive. There are hacks to overcome this limit, but with byte[] API – as in Themis – you are limited to 2 GB.
JNI type jsize reflects this limitation, it is defined to be jint which is typically defined as signed int, assuming 32-bit int types on most modern platforms. Thanks to C being very safe language, sizes bigger than 231 – 1 silently overflow into negative space and then it's up to JNI to handle this situation. Desktop Java systems typically throw a NegativeArraySizeException when trying to allocate an array with negative size, but Android systems typically kill the process due to an assertion failure.
In order to have predictable behavior in this case, check all sizes before trying to allocate an array of that size, and exit with an error if the allocation would overflow. This way instead of crashing we will throw an appropriate Themis subsystem exception.
Note that in some cases the array sizes do not depend on user input, but we still check just in case the Core library does something silly. In other cases the output can get that big due to input being sufficiently big — slightly smaller than 2 GB, but enough for Themis data overhead to push that over the 2 GB limit. However, in most cases this situation can be triggered by corrupted input where the data length fields contain values inconsistent with actual input size.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Okay, makes sense",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,640,2020-05-15T12:58:55Z,2020-05-20T09:35:39Z,2020-05-20T09:36:08Z,MERGED,True,151,92,10,https://github.com/ilammy,Apply Soter KDF after PBKDF2 for passphrases,8,['core'],https://github.com/cossacklabs/themis/pull/640,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/640,"Instead of using PBKDF2 output directly, pass the resulting prekey through an additional round of Soter KDF to associate the encryption key with user-provided associated context as well as the encrypted message length, similar to how symmetric key API does this. Now if different associated context is used for each individual Secure Cell, the encryption key will be different even if PBKDF2 salt somehow ends up the same.
Compatibility considerations
This changes the encryption algorithm, but it's fine to do this before public release. This is the only chance we have to do this update without it becoming a massive backward-compatibility pain.
The change slightly improves security of the encryption and makes the algorithms a bit more compatible and similar in structure. However, this does not change the API or data format in the slightest.
Benchmarks
PBKDF2 is the main time sink in passphrase API. It is expected that 1 additional round of Soter KDF (basically, one HMAC-SHA-256 computation) will not have any noticeable effect on the performance of passphrase encryption and decryption, given that we already do 200,000 rounds for PBKDF2.
Here are measurements before and after this change, on my machine with 4 x Intel Core i5-8250U, using Linux with generic OpenSSL 1.1.1g, running only the benchmarks:



Benchmark
Time, before
Time, after
Change




Encrypt 64 B
116.72 ms ± 1.14 ms
125.26 ms ± 0.66 ms
+8.07% slower


Encrypt 4 KB
118.53 ms ± 0.11 ms
129.36 ms ± 2.22 ms
+8.58% slower


Encrypt 1 MB
120.44 ms ± 0.65 ms
130.52 ms ± 0.96 ms
+7.77% slower


Decrypt 64 B
125.63 ms ± 0.30 ms
128.46 ms ± 0.71 ms
+2.63% slower


Decrypt 4 KB
121.67 ms ± 0.42 ms
132.60 ms ± 0.41 ms
+9.24% slower


Decrypt 1 MB
122.69 ms ± 0.40 ms
129.56 ms ± 0.82 ms
+5.84% slower




Benchmark output
Before:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [115.50 ms 116.72 ms 117.28 ms]
                        thrpt:  [545.71   B/s 548.30   B/s 554.13   B/s]

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [118.42 ms 118.53 ms 118.65 ms]
                        thrpt:  [33.713 KiB/s 33.747 KiB/s 33.779 KiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) low mild

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [119.91 ms 120.44 ms 121.20 ms]
                        thrpt:  [8.2505 MiB/s 8.3032 MiB/s 8.3397 MiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [125.29 ms 125.63 ms 125.90 ms]
                        thrpt:  [508.34   B/s 509.42   B/s 510.80   B/s]

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [121.23 ms 121.67 ms 122.06 ms]
                        thrpt:  [32.771 KiB/s 32.875 KiB/s 32.996 KiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [122.39 ms 122.69 ms 123.18 ms]
                        thrpt:  [8.1182 MiB/s 8.1508 MiB/s 8.1709 MiB/s]

After:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [124.47 ms 125.26 ms 125.79 ms]
                        thrpt:  [508.80   B/s 510.95   B/s 514.20   B/s]
                 change:
                        time:   [+7.0137% +8.0663% +9.1785%] (p = 0.00 < 0.05)
                        thrpt:  [-8.4069% -7.4642% -6.5540%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [127.19 ms 129.36 ms 131.64 ms]
                        thrpt:  [30.385 KiB/s 30.922 KiB/s 31.449 KiB/s]
                 change:
                        time:   [+7.3726% +8.5848% +9.8243%] (p = 0.00 < 0.05)
                        thrpt:  [-8.9454% -7.9061% -6.8664%]
                        Performance has regressed.

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [129.51 ms 130.52 ms 131.43 ms]
                        thrpt:  [7.6086 MiB/s 7.6614 MiB/s 7.7213 MiB/s]
                 change:
                        time:   [+7.0080% +7.7663% +8.5063%] (p = 0.00 < 0.05)
                        thrpt:  [-7.8394% -7.2066% -6.5491%]
                        Performance has regressed.

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [127.88 ms 128.46 ms 129.30 ms]
                        thrpt:  [494.97   B/s 498.21   B/s 500.46   B/s]
                 change:
                        time:   [+1.9737% +2.6323% +3.3709%] (p = 0.00 < 0.05)
                        thrpt:  [-3.2610% -2.5648% -1.9355%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [132.27 ms 132.60 ms 133.10 ms]
                        thrpt:  [30.053 KiB/s 30.167 KiB/s 30.241 KiB/s]
                 change:
                        time:   [+8.8970% +9.2366% +9.6182%] (p = 0.00 < 0.05)
                        thrpt:  [-8.7743% -8.4556% -8.1701%]
                        Performance has regressed.
Found 3 outliers among 10 measurements (30.00%)
  1 (10.00%) low mild
  2 (20.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [128.97 ms 129.56 ms 130.62 ms]
                        thrpt:  [7.6556 MiB/s 7.7184 MiB/s 7.7540 MiB/s]
                 change:
                        time:   [+5.3473% +5.8421% +6.4588%] (p = 0.00 < 0.05)
                        thrpt:  [-6.0670% -5.5196% -5.0759%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild


Well, this is intredesting 🤔 But not very relevant, given the noise brackets.
It doesn't seem like that much. I'd expect some variation, but not a consistent performance drop across all input sizes. I guess I suck at microbenchmarks and by environment is noisy. I'll keep looking into it.
Nevertheless, it's great that we have benchmarks at all.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (nothing notable happens here)
Original passphrase encryption implemented in #577, this PR cross-reference is enough.","Instead of using PBKDF2 output directly, pass the resulting prekey through an additional round of Soter KDF to associate the encryption key with user-provided associated context as well as the encrypted message length, similar to how symmetric key API does this. Now if different associated context is used for each individual Secure Cell, the encryption key will be different even if PBKDF2 salt somehow ends up the same.
Compatibility considerations
This changes the encryption algorithm, but it's fine to do this before public release. This is the only chance we have to do this update without it becoming a massive backward-compatibility pain.
The change slightly improves security of the encryption and makes the algorithms a bit more compatible and similar in structure. However, this does not change the API or data format in the slightest.
Benchmarks
PBKDF2 is the main time sink in passphrase API. It is expected that 1 additional round of Soter KDF (basically, one HMAC-SHA-256 computation) will not have any noticeable effect on the performance of passphrase encryption and decryption, given that we already do 200,000 rounds for PBKDF2.
Here are measurements before and after this change, on my machine with 4 x Intel Core i5-8250U, using Linux with generic OpenSSL 1.1.1g, running only the benchmarks:



Benchmark
Time, before
Time, after
Change




Encrypt 64 B
116.72 ms ± 1.14 ms
125.26 ms ± 0.66 ms
+8.07% slower


Encrypt 4 KB
118.53 ms ± 0.11 ms
129.36 ms ± 2.22 ms
+8.58% slower


Encrypt 1 MB
120.44 ms ± 0.65 ms
130.52 ms ± 0.96 ms
+7.77% slower


Decrypt 64 B
125.63 ms ± 0.30 ms
128.46 ms ± 0.71 ms
+2.63% slower


Decrypt 4 KB
121.67 ms ± 0.42 ms
132.60 ms ± 0.41 ms
+9.24% slower


Decrypt 1 MB
122.69 ms ± 0.40 ms
129.56 ms ± 0.82 ms
+5.84% slower




Benchmark output
Before:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [115.50 ms 116.72 ms 117.28 ms]
                        thrpt:  [545.71   B/s 548.30   B/s 554.13   B/s]

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [118.42 ms 118.53 ms 118.65 ms]
                        thrpt:  [33.713 KiB/s 33.747 KiB/s 33.779 KiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) low mild

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [119.91 ms 120.44 ms 121.20 ms]
                        thrpt:  [8.2505 MiB/s 8.3032 MiB/s 8.3397 MiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [125.29 ms 125.63 ms 125.90 ms]
                        thrpt:  [508.34   B/s 509.42   B/s 510.80   B/s]

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [121.23 ms 121.67 ms 122.06 ms]
                        thrpt:  [32.771 KiB/s 32.875 KiB/s 32.996 KiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [122.39 ms 122.69 ms 123.18 ms]
                        thrpt:  [8.1182 MiB/s 8.1508 MiB/s 8.1709 MiB/s]

After:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [124.47 ms 125.26 ms 125.79 ms]
                        thrpt:  [508.80   B/s 510.95   B/s 514.20   B/s]
                 change:
                        time:   [+7.0137% +8.0663% +9.1785%] (p = 0.00 < 0.05)
                        thrpt:  [-8.4069% -7.4642% -6.5540%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [127.19 ms 129.36 ms 131.64 ms]
                        thrpt:  [30.385 KiB/s 30.922 KiB/s 31.449 KiB/s]
                 change:
                        time:   [+7.3726% +8.5848% +9.8243%] (p = 0.00 < 0.05)
                        thrpt:  [-8.9454% -7.9061% -6.8664%]
                        Performance has regressed.

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [129.51 ms 130.52 ms 131.43 ms]
                        thrpt:  [7.6086 MiB/s 7.6614 MiB/s 7.7213 MiB/s]
                 change:
                        time:   [+7.0080% +7.7663% +8.5063%] (p = 0.00 < 0.05)
                        thrpt:  [-7.8394% -7.2066% -6.5491%]
                        Performance has regressed.

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [127.88 ms 128.46 ms 129.30 ms]
                        thrpt:  [494.97   B/s 498.21   B/s 500.46   B/s]
                 change:
                        time:   [+1.9737% +2.6323% +3.3709%] (p = 0.00 < 0.05)
                        thrpt:  [-3.2610% -2.5648% -1.9355%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [132.27 ms 132.60 ms 133.10 ms]
                        thrpt:  [30.053 KiB/s 30.167 KiB/s 30.241 KiB/s]
                 change:
                        time:   [+8.8970% +9.2366% +9.6182%] (p = 0.00 < 0.05)
                        thrpt:  [-8.7743% -8.4556% -8.1701%]
                        Performance has regressed.
Found 3 outliers among 10 measurements (30.00%)
  1 (10.00%) low mild
  2 (20.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [128.97 ms 129.56 ms 130.62 ms]
                        thrpt:  [7.6556 MiB/s 7.7184 MiB/s 7.7540 MiB/s]
                 change:
                        time:   [+5.3473% +5.8421% +6.4588%] (p = 0.00 < 0.05)
                        thrpt:  [-6.0670% -5.5196% -5.0759%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild


Well, this is intredesting 🤔 But not very relevant, given the noise brackets.
It doesn't seem like that much. I'd expect some variation, but not a consistent performance drop across all input sizes. I guess I suck at microbenchmarks and by environment is noisy. I'll keep looking into it.
Nevertheless, it's great that we have benchmarks at all.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (nothing notable happens here)
Original passphrase encryption implemented in #577, this PR cross-reference is enough.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,640,2020-05-15T12:58:55Z,2020-05-20T09:35:39Z,2020-05-20T09:36:08Z,MERGED,True,151,92,10,https://github.com/ilammy,Apply Soter KDF after PBKDF2 for passphrases,8,['core'],https://github.com/cossacklabs/themis/pull/640,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/640#issuecomment-629258714,"Instead of using PBKDF2 output directly, pass the resulting prekey through an additional round of Soter KDF to associate the encryption key with user-provided associated context as well as the encrypted message length, similar to how symmetric key API does this. Now if different associated context is used for each individual Secure Cell, the encryption key will be different even if PBKDF2 salt somehow ends up the same.
Compatibility considerations
This changes the encryption algorithm, but it's fine to do this before public release. This is the only chance we have to do this update without it becoming a massive backward-compatibility pain.
The change slightly improves security of the encryption and makes the algorithms a bit more compatible and similar in structure. However, this does not change the API or data format in the slightest.
Benchmarks
PBKDF2 is the main time sink in passphrase API. It is expected that 1 additional round of Soter KDF (basically, one HMAC-SHA-256 computation) will not have any noticeable effect on the performance of passphrase encryption and decryption, given that we already do 200,000 rounds for PBKDF2.
Here are measurements before and after this change, on my machine with 4 x Intel Core i5-8250U, using Linux with generic OpenSSL 1.1.1g, running only the benchmarks:



Benchmark
Time, before
Time, after
Change




Encrypt 64 B
116.72 ms ± 1.14 ms
125.26 ms ± 0.66 ms
+8.07% slower


Encrypt 4 KB
118.53 ms ± 0.11 ms
129.36 ms ± 2.22 ms
+8.58% slower


Encrypt 1 MB
120.44 ms ± 0.65 ms
130.52 ms ± 0.96 ms
+7.77% slower


Decrypt 64 B
125.63 ms ± 0.30 ms
128.46 ms ± 0.71 ms
+2.63% slower


Decrypt 4 KB
121.67 ms ± 0.42 ms
132.60 ms ± 0.41 ms
+9.24% slower


Decrypt 1 MB
122.69 ms ± 0.40 ms
129.56 ms ± 0.82 ms
+5.84% slower




Benchmark output
Before:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [115.50 ms 116.72 ms 117.28 ms]
                        thrpt:  [545.71   B/s 548.30   B/s 554.13   B/s]

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [118.42 ms 118.53 ms 118.65 ms]
                        thrpt:  [33.713 KiB/s 33.747 KiB/s 33.779 KiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) low mild

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [119.91 ms 120.44 ms 121.20 ms]
                        thrpt:  [8.2505 MiB/s 8.3032 MiB/s 8.3397 MiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [125.29 ms 125.63 ms 125.90 ms]
                        thrpt:  [508.34   B/s 509.42   B/s 510.80   B/s]

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [121.23 ms 121.67 ms 122.06 ms]
                        thrpt:  [32.771 KiB/s 32.875 KiB/s 32.996 KiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [122.39 ms 122.69 ms 123.18 ms]
                        thrpt:  [8.1182 MiB/s 8.1508 MiB/s 8.1709 MiB/s]

After:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [124.47 ms 125.26 ms 125.79 ms]
                        thrpt:  [508.80   B/s 510.95   B/s 514.20   B/s]
                 change:
                        time:   [+7.0137% +8.0663% +9.1785%] (p = 0.00 < 0.05)
                        thrpt:  [-8.4069% -7.4642% -6.5540%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [127.19 ms 129.36 ms 131.64 ms]
                        thrpt:  [30.385 KiB/s 30.922 KiB/s 31.449 KiB/s]
                 change:
                        time:   [+7.3726% +8.5848% +9.8243%] (p = 0.00 < 0.05)
                        thrpt:  [-8.9454% -7.9061% -6.8664%]
                        Performance has regressed.

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [129.51 ms 130.52 ms 131.43 ms]
                        thrpt:  [7.6086 MiB/s 7.6614 MiB/s 7.7213 MiB/s]
                 change:
                        time:   [+7.0080% +7.7663% +8.5063%] (p = 0.00 < 0.05)
                        thrpt:  [-7.8394% -7.2066% -6.5491%]
                        Performance has regressed.

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [127.88 ms 128.46 ms 129.30 ms]
                        thrpt:  [494.97   B/s 498.21   B/s 500.46   B/s]
                 change:
                        time:   [+1.9737% +2.6323% +3.3709%] (p = 0.00 < 0.05)
                        thrpt:  [-3.2610% -2.5648% -1.9355%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [132.27 ms 132.60 ms 133.10 ms]
                        thrpt:  [30.053 KiB/s 30.167 KiB/s 30.241 KiB/s]
                 change:
                        time:   [+8.8970% +9.2366% +9.6182%] (p = 0.00 < 0.05)
                        thrpt:  [-8.7743% -8.4556% -8.1701%]
                        Performance has regressed.
Found 3 outliers among 10 measurements (30.00%)
  1 (10.00%) low mild
  2 (20.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [128.97 ms 129.56 ms 130.62 ms]
                        thrpt:  [7.6556 MiB/s 7.7184 MiB/s 7.7540 MiB/s]
                 change:
                        time:   [+5.3473% +5.8421% +6.4588%] (p = 0.00 < 0.05)
                        thrpt:  [-6.0670% -5.5196% -5.0759%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild


Well, this is intredesting 🤔 But not very relevant, given the noise brackets.
It doesn't seem like that much. I'd expect some variation, but not a consistent performance drop across all input sizes. I guess I suck at microbenchmarks and by environment is noisy. I'll keep looking into it.
Nevertheless, it's great that we have benchmarks at all.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (nothing notable happens here)
Original passphrase encryption implemented in #577, this PR cross-reference is enough.","Alrighty. I realized that I do suck at benchmarks: I've been running them on a laptop with CPU frequency scaling enabled. However...
After having the CPUs run at their full 3.4 GHz glory and collecting 50 samples instead of 10 (urgh, 15 minutes for one benchmark run) — I still see consistent 6-8% drop in performance.

Benchmark output
Before:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                            
                        time:   [114.10 ms 114.58 ms 114.98 ms]
                        thrpt:  [556.61   B/s 558.56   B/s 560.93   B/s]

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                            
                        time:   [116.22 ms 116.46 ms 116.70 ms]
                        thrpt:  [34.276 KiB/s 34.347 KiB/s 34.418 KiB/s]

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                            
                        time:   [114.47 ms 114.62 ms 114.82 ms]
                        thrpt:  [8.7095 MiB/s 8.7243 MiB/s 8.7358 MiB/s]
Found 7 outliers among 50 measurements (14.00%)
  5 (10.00%) high mild
  2 (4.00%) high severe

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                            
                        time:   [114.03 ms 114.17 ms 114.31 ms]
                        thrpt:  [559.87   B/s 560.55   B/s 561.25   B/s]
Found 1 outliers among 50 measurements (2.00%)
  1 (2.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                            
                        time:   [114.89 ms 115.12 ms 115.43 ms]
                        thrpt:  [34.654 KiB/s 34.746 KiB/s 34.816 KiB/s]
Found 1 outliers among 50 measurements (2.00%)
  1 (2.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                            
                        time:   [116.84 ms 117.59 ms 118.41 ms]
                        thrpt:  [8.4450 MiB/s 8.5041 MiB/s 8.5590 MiB/s]
Found 1 outliers among 50 measurements (2.00%)
  1 (2.00%) high mild

After:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                            
                        time:   [119.94 ms 120.38 ms 120.82 ms]
                        thrpt:  [529.72   B/s 531.66   B/s 533.59   B/s]
                 change:
                        time:   [+5.7366% +6.5649% +7.3879%] (p = 0.00 < 0.05)
                        thrpt:  [-6.8796% -6.1605% -5.4253%]
                        Performance has regressed.
Found 5 outliers among 50 measurements (10.00%)
  2 (4.00%) low mild
  1 (2.00%) high mild
  2 (4.00%) high severe

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                            
                        time:   [124.16 ms 124.53 ms 124.95 ms]
                        thrpt:  [32.013 KiB/s 32.122 KiB/s 32.218 KiB/s]
                 change:
                        time:   [+7.0678% +7.3965% +7.7285%] (p = 0.00 < 0.05)
                        thrpt:  [-7.1741% -6.8871% -6.6013%]
                        Performance has regressed.

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                            
                        time:   [124.96 ms 125.33 ms 125.79 ms]
                        thrpt:  [7.9500 MiB/s 7.9790 MiB/s 8.0028 MiB/s]
                 change:
                        time:   [+8.4013% +8.9421% +9.5508%] (p = 0.00 < 0.05)
                        thrpt:  [-8.7182% -8.2081% -7.7501%]
                        Performance has regressed.
Found 1 outliers among 50 measurements (2.00%)
  1 (2.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                            
                        time:   [122.87 ms 123.25 ms 123.71 ms]
                        thrpt:  [517.33   B/s 519.27   B/s 520.88   B/s]
                 change:
                        time:   [+8.2849% +8.6548% +9.0025%] (p = 0.00 < 0.05)
                        thrpt:  [-8.2590% -7.9654% -7.6510%]
                        Performance has regressed.
Found 13 outliers among 50 measurements (26.00%)
  7 (14.00%) low mild
  5 (10.00%) high mild
  1 (2.00%) high severe

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                            
                        time:   [124.28 ms 124.49 ms 124.75 ms]
                        thrpt:  [32.065 KiB/s 32.130 KiB/s 32.186 KiB/s]
                 change:
                        time:   [+7.8544% +8.1609% +8.4637%] (p = 0.00 < 0.05)
                        thrpt:  [-7.8033% -7.5452% -7.2824%]
                        Performance has regressed.

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                            
                        time:   [124.74 ms 125.18 ms 125.67 ms]
                        thrpt:  [7.9577 MiB/s 7.9888 MiB/s 8.0164 MiB/s]
                 change:
                        time:   [+7.1820% +7.7639% +8.3215%] (p = 0.00 < 0.05)
                        thrpt:  [-7.6823% -7.2045% -6.7007%]
                        Performance has regressed.


No serious ideas at the moment:

Are function calls across the library boundary that expensive?
Does it bump into some invisible wall with CPU caches or something?
Does soter_kdf() do something silly?
Do I do something silly, like building without optimizations?

It would be nice if someone could reproduce the experiment.

How to benchmark
# Prepare repo
git clone https://github.com/cossacklabs/themis.git
cd themis
git remote add ilammy https://github.com/ilammy/themis.git
git fetch ilammy

# Build and install master
git checkout master
make
sudo make install

# Build benchmarks
cd benches/themis
cargo bench --no-run
# Wait for Rust to build stuff...

# Run benchmarks (master)
cargo bench -- --sample-size 10 passphrase
# Wait for benchmarks to complete...

# Build and install this branch
git checkout zrtp-goes-in-every-field
cd ../..
make
sudo make install
cd -

# Run benchmarks again
cargo bench -- --sample-size 10 passphrase
# Wait for benchmarks to complete...


We assume that it has only one round, right?

Yeah, it should. There are basically soter_hmac and soter_wipe calls but that's about it.
I haven't done any profiling yet so I have no idea where it spends time.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,640,2020-05-15T12:58:55Z,2020-05-20T09:35:39Z,2020-05-20T09:36:08Z,MERGED,True,151,92,10,https://github.com/ilammy,Apply Soter KDF after PBKDF2 for passphrases,8,['core'],https://github.com/cossacklabs/themis/pull/640,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/640#issuecomment-629272755,"Instead of using PBKDF2 output directly, pass the resulting prekey through an additional round of Soter KDF to associate the encryption key with user-provided associated context as well as the encrypted message length, similar to how symmetric key API does this. Now if different associated context is used for each individual Secure Cell, the encryption key will be different even if PBKDF2 salt somehow ends up the same.
Compatibility considerations
This changes the encryption algorithm, but it's fine to do this before public release. This is the only chance we have to do this update without it becoming a massive backward-compatibility pain.
The change slightly improves security of the encryption and makes the algorithms a bit more compatible and similar in structure. However, this does not change the API or data format in the slightest.
Benchmarks
PBKDF2 is the main time sink in passphrase API. It is expected that 1 additional round of Soter KDF (basically, one HMAC-SHA-256 computation) will not have any noticeable effect on the performance of passphrase encryption and decryption, given that we already do 200,000 rounds for PBKDF2.
Here are measurements before and after this change, on my machine with 4 x Intel Core i5-8250U, using Linux with generic OpenSSL 1.1.1g, running only the benchmarks:



Benchmark
Time, before
Time, after
Change




Encrypt 64 B
116.72 ms ± 1.14 ms
125.26 ms ± 0.66 ms
+8.07% slower


Encrypt 4 KB
118.53 ms ± 0.11 ms
129.36 ms ± 2.22 ms
+8.58% slower


Encrypt 1 MB
120.44 ms ± 0.65 ms
130.52 ms ± 0.96 ms
+7.77% slower


Decrypt 64 B
125.63 ms ± 0.30 ms
128.46 ms ± 0.71 ms
+2.63% slower


Decrypt 4 KB
121.67 ms ± 0.42 ms
132.60 ms ± 0.41 ms
+9.24% slower


Decrypt 1 MB
122.69 ms ± 0.40 ms
129.56 ms ± 0.82 ms
+5.84% slower




Benchmark output
Before:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [115.50 ms 116.72 ms 117.28 ms]
                        thrpt:  [545.71   B/s 548.30   B/s 554.13   B/s]

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [118.42 ms 118.53 ms 118.65 ms]
                        thrpt:  [33.713 KiB/s 33.747 KiB/s 33.779 KiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) low mild

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [119.91 ms 120.44 ms 121.20 ms]
                        thrpt:  [8.2505 MiB/s 8.3032 MiB/s 8.3397 MiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [125.29 ms 125.63 ms 125.90 ms]
                        thrpt:  [508.34   B/s 509.42   B/s 510.80   B/s]

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [121.23 ms 121.67 ms 122.06 ms]
                        thrpt:  [32.771 KiB/s 32.875 KiB/s 32.996 KiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [122.39 ms 122.69 ms 123.18 ms]
                        thrpt:  [8.1182 MiB/s 8.1508 MiB/s 8.1709 MiB/s]

After:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [124.47 ms 125.26 ms 125.79 ms]
                        thrpt:  [508.80   B/s 510.95   B/s 514.20   B/s]
                 change:
                        time:   [+7.0137% +8.0663% +9.1785%] (p = 0.00 < 0.05)
                        thrpt:  [-8.4069% -7.4642% -6.5540%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [127.19 ms 129.36 ms 131.64 ms]
                        thrpt:  [30.385 KiB/s 30.922 KiB/s 31.449 KiB/s]
                 change:
                        time:   [+7.3726% +8.5848% +9.8243%] (p = 0.00 < 0.05)
                        thrpt:  [-8.9454% -7.9061% -6.8664%]
                        Performance has regressed.

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [129.51 ms 130.52 ms 131.43 ms]
                        thrpt:  [7.6086 MiB/s 7.6614 MiB/s 7.7213 MiB/s]
                 change:
                        time:   [+7.0080% +7.7663% +8.5063%] (p = 0.00 < 0.05)
                        thrpt:  [-7.8394% -7.2066% -6.5491%]
                        Performance has regressed.

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [127.88 ms 128.46 ms 129.30 ms]
                        thrpt:  [494.97   B/s 498.21   B/s 500.46   B/s]
                 change:
                        time:   [+1.9737% +2.6323% +3.3709%] (p = 0.00 < 0.05)
                        thrpt:  [-3.2610% -2.5648% -1.9355%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [132.27 ms 132.60 ms 133.10 ms]
                        thrpt:  [30.053 KiB/s 30.167 KiB/s 30.241 KiB/s]
                 change:
                        time:   [+8.8970% +9.2366% +9.6182%] (p = 0.00 < 0.05)
                        thrpt:  [-8.7743% -8.4556% -8.1701%]
                        Performance has regressed.
Found 3 outliers among 10 measurements (30.00%)
  1 (10.00%) low mild
  2 (20.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [128.97 ms 129.56 ms 130.62 ms]
                        thrpt:  [7.6556 MiB/s 7.7184 MiB/s 7.7540 MiB/s]
                 change:
                        time:   [+5.3473% +5.8421% +6.4588%] (p = 0.00 < 0.05)
                        thrpt:  [-6.0670% -5.5196% -5.0759%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild


Well, this is intredesting 🤔 But not very relevant, given the noise brackets.
It doesn't seem like that much. I'd expect some variation, but not a consistent performance drop across all input sizes. I guess I suck at microbenchmarks and by environment is noisy. I'll keep looking into it.
Nevertheless, it's great that we have benchmarks at all.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (nothing notable happens here)
Original passphrase encryption implemented in #577, this PR cross-reference is enough.","Yknow, maybe that's soter_wipe().
Here are top ten functions that we're spending time in when running benchmarks, based on perf output:
Overhead  Command          Shared Object      Symbol
   6,85%  secure_cell_sea  libcrypto.so.1.1   [.] OPENSSL_cleanse
   6,25%  secure_cell_sea  libcrypto.so.1.1   [.] EVP_MD_CTX_copy_ex
   6,06%  secure_cell_sea  libcrypto.so.1.1   [.] SHA256_Final
   5,65%  secure_cell_sea  libcrypto.so.1.1   [.] PKCS5_PBKDF2_HMAC
   3,47%  secure_cell_sea  libcrypto.so.1.1   [.] EVP_MD_CTX_reset
   1,38%  secure_cell_sea  libcrypto.so.1.1   [.] EVP_MD_CTX_clear_flags
   1,30%  secure_cell_sea  libcrypto.so.1.1   [.] SHA256_Update
   1,28%  secure_cell_sea  libcrypto.so.1.1   [.] HMAC_CTX_copy
   1,08%  secure_cell_sea  libcrypto.so.1.1   [.] EVP_DigestFinal_ex
   1,08%  secure_cell_sea  libcrypto.so.1.1   [.] ENGINE_finish
   1,07%  secure_cell_sea  libcrypto.so.1.1   [.] HMAC_Final

OPENSSL_cleanse() is the one used by soter_wipe(). What are others, I don't know yet. But EVP_MD_CTX_copy_ex() looks suspicious.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,640,2020-05-15T12:58:55Z,2020-05-20T09:35:39Z,2020-05-20T09:36:08Z,MERGED,True,151,92,10,https://github.com/ilammy,Apply Soter KDF after PBKDF2 for passphrases,8,['core'],https://github.com/cossacklabs/themis/pull/640,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/640#issuecomment-629353355,"Instead of using PBKDF2 output directly, pass the resulting prekey through an additional round of Soter KDF to associate the encryption key with user-provided associated context as well as the encrypted message length, similar to how symmetric key API does this. Now if different associated context is used for each individual Secure Cell, the encryption key will be different even if PBKDF2 salt somehow ends up the same.
Compatibility considerations
This changes the encryption algorithm, but it's fine to do this before public release. This is the only chance we have to do this update without it becoming a massive backward-compatibility pain.
The change slightly improves security of the encryption and makes the algorithms a bit more compatible and similar in structure. However, this does not change the API or data format in the slightest.
Benchmarks
PBKDF2 is the main time sink in passphrase API. It is expected that 1 additional round of Soter KDF (basically, one HMAC-SHA-256 computation) will not have any noticeable effect on the performance of passphrase encryption and decryption, given that we already do 200,000 rounds for PBKDF2.
Here are measurements before and after this change, on my machine with 4 x Intel Core i5-8250U, using Linux with generic OpenSSL 1.1.1g, running only the benchmarks:



Benchmark
Time, before
Time, after
Change




Encrypt 64 B
116.72 ms ± 1.14 ms
125.26 ms ± 0.66 ms
+8.07% slower


Encrypt 4 KB
118.53 ms ± 0.11 ms
129.36 ms ± 2.22 ms
+8.58% slower


Encrypt 1 MB
120.44 ms ± 0.65 ms
130.52 ms ± 0.96 ms
+7.77% slower


Decrypt 64 B
125.63 ms ± 0.30 ms
128.46 ms ± 0.71 ms
+2.63% slower


Decrypt 4 KB
121.67 ms ± 0.42 ms
132.60 ms ± 0.41 ms
+9.24% slower


Decrypt 1 MB
122.69 ms ± 0.40 ms
129.56 ms ± 0.82 ms
+5.84% slower




Benchmark output
Before:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [115.50 ms 116.72 ms 117.28 ms]
                        thrpt:  [545.71   B/s 548.30   B/s 554.13   B/s]

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [118.42 ms 118.53 ms 118.65 ms]
                        thrpt:  [33.713 KiB/s 33.747 KiB/s 33.779 KiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) low mild

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [119.91 ms 120.44 ms 121.20 ms]
                        thrpt:  [8.2505 MiB/s 8.3032 MiB/s 8.3397 MiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [125.29 ms 125.63 ms 125.90 ms]
                        thrpt:  [508.34   B/s 509.42   B/s 510.80   B/s]

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [121.23 ms 121.67 ms 122.06 ms]
                        thrpt:  [32.771 KiB/s 32.875 KiB/s 32.996 KiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [122.39 ms 122.69 ms 123.18 ms]
                        thrpt:  [8.1182 MiB/s 8.1508 MiB/s 8.1709 MiB/s]

After:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [124.47 ms 125.26 ms 125.79 ms]
                        thrpt:  [508.80   B/s 510.95   B/s 514.20   B/s]
                 change:
                        time:   [+7.0137% +8.0663% +9.1785%] (p = 0.00 < 0.05)
                        thrpt:  [-8.4069% -7.4642% -6.5540%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [127.19 ms 129.36 ms 131.64 ms]
                        thrpt:  [30.385 KiB/s 30.922 KiB/s 31.449 KiB/s]
                 change:
                        time:   [+7.3726% +8.5848% +9.8243%] (p = 0.00 < 0.05)
                        thrpt:  [-8.9454% -7.9061% -6.8664%]
                        Performance has regressed.

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [129.51 ms 130.52 ms 131.43 ms]
                        thrpt:  [7.6086 MiB/s 7.6614 MiB/s 7.7213 MiB/s]
                 change:
                        time:   [+7.0080% +7.7663% +8.5063%] (p = 0.00 < 0.05)
                        thrpt:  [-7.8394% -7.2066% -6.5491%]
                        Performance has regressed.

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [127.88 ms 128.46 ms 129.30 ms]
                        thrpt:  [494.97   B/s 498.21   B/s 500.46   B/s]
                 change:
                        time:   [+1.9737% +2.6323% +3.3709%] (p = 0.00 < 0.05)
                        thrpt:  [-3.2610% -2.5648% -1.9355%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [132.27 ms 132.60 ms 133.10 ms]
                        thrpt:  [30.053 KiB/s 30.167 KiB/s 30.241 KiB/s]
                 change:
                        time:   [+8.8970% +9.2366% +9.6182%] (p = 0.00 < 0.05)
                        thrpt:  [-8.7743% -8.4556% -8.1701%]
                        Performance has regressed.
Found 3 outliers among 10 measurements (30.00%)
  1 (10.00%) low mild
  2 (20.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [128.97 ms 129.56 ms 130.62 ms]
                        thrpt:  [7.6556 MiB/s 7.7184 MiB/s 7.7540 MiB/s]
                 change:
                        time:   [+5.3473% +5.8421% +6.4588%] (p = 0.00 < 0.05)
                        thrpt:  [-6.0670% -5.5196% -5.0759%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild


Well, this is intredesting 🤔 But not very relevant, given the noise brackets.
It doesn't seem like that much. I'd expect some variation, but not a consistent performance drop across all input sizes. I guess I suck at microbenchmarks and by environment is noisy. I'll keep looking into it.
Nevertheless, it's great that we have benchmarks at all.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (nothing notable happens here)
Original passphrase encryption implemented in #577, this PR cross-reference is enough.","It would be nice if someone could reproduce the experiment.

In progress..",True,{'HEART': ['https://github.com/ilammy']}
cossacklabs/themis,https://github.com/cossacklabs/themis,640,2020-05-15T12:58:55Z,2020-05-20T09:35:39Z,2020-05-20T09:36:08Z,MERGED,True,151,92,10,https://github.com/ilammy,Apply Soter KDF after PBKDF2 for passphrases,8,['core'],https://github.com/cossacklabs/themis/pull/640,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/640#issuecomment-629362949,"Instead of using PBKDF2 output directly, pass the resulting prekey through an additional round of Soter KDF to associate the encryption key with user-provided associated context as well as the encrypted message length, similar to how symmetric key API does this. Now if different associated context is used for each individual Secure Cell, the encryption key will be different even if PBKDF2 salt somehow ends up the same.
Compatibility considerations
This changes the encryption algorithm, but it's fine to do this before public release. This is the only chance we have to do this update without it becoming a massive backward-compatibility pain.
The change slightly improves security of the encryption and makes the algorithms a bit more compatible and similar in structure. However, this does not change the API or data format in the slightest.
Benchmarks
PBKDF2 is the main time sink in passphrase API. It is expected that 1 additional round of Soter KDF (basically, one HMAC-SHA-256 computation) will not have any noticeable effect on the performance of passphrase encryption and decryption, given that we already do 200,000 rounds for PBKDF2.
Here are measurements before and after this change, on my machine with 4 x Intel Core i5-8250U, using Linux with generic OpenSSL 1.1.1g, running only the benchmarks:



Benchmark
Time, before
Time, after
Change




Encrypt 64 B
116.72 ms ± 1.14 ms
125.26 ms ± 0.66 ms
+8.07% slower


Encrypt 4 KB
118.53 ms ± 0.11 ms
129.36 ms ± 2.22 ms
+8.58% slower


Encrypt 1 MB
120.44 ms ± 0.65 ms
130.52 ms ± 0.96 ms
+7.77% slower


Decrypt 64 B
125.63 ms ± 0.30 ms
128.46 ms ± 0.71 ms
+2.63% slower


Decrypt 4 KB
121.67 ms ± 0.42 ms
132.60 ms ± 0.41 ms
+9.24% slower


Decrypt 1 MB
122.69 ms ± 0.40 ms
129.56 ms ± 0.82 ms
+5.84% slower




Benchmark output
Before:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [115.50 ms 116.72 ms 117.28 ms]
                        thrpt:  [545.71   B/s 548.30   B/s 554.13   B/s]

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [118.42 ms 118.53 ms 118.65 ms]
                        thrpt:  [33.713 KiB/s 33.747 KiB/s 33.779 KiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) low mild

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [119.91 ms 120.44 ms 121.20 ms]
                        thrpt:  [8.2505 MiB/s 8.3032 MiB/s 8.3397 MiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [125.29 ms 125.63 ms 125.90 ms]
                        thrpt:  [508.34   B/s 509.42   B/s 510.80   B/s]

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [121.23 ms 121.67 ms 122.06 ms]
                        thrpt:  [32.771 KiB/s 32.875 KiB/s 32.996 KiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [122.39 ms 122.69 ms 123.18 ms]
                        thrpt:  [8.1182 MiB/s 8.1508 MiB/s 8.1709 MiB/s]

After:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [124.47 ms 125.26 ms 125.79 ms]
                        thrpt:  [508.80   B/s 510.95   B/s 514.20   B/s]
                 change:
                        time:   [+7.0137% +8.0663% +9.1785%] (p = 0.00 < 0.05)
                        thrpt:  [-8.4069% -7.4642% -6.5540%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [127.19 ms 129.36 ms 131.64 ms]
                        thrpt:  [30.385 KiB/s 30.922 KiB/s 31.449 KiB/s]
                 change:
                        time:   [+7.3726% +8.5848% +9.8243%] (p = 0.00 < 0.05)
                        thrpt:  [-8.9454% -7.9061% -6.8664%]
                        Performance has regressed.

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [129.51 ms 130.52 ms 131.43 ms]
                        thrpt:  [7.6086 MiB/s 7.6614 MiB/s 7.7213 MiB/s]
                 change:
                        time:   [+7.0080% +7.7663% +8.5063%] (p = 0.00 < 0.05)
                        thrpt:  [-7.8394% -7.2066% -6.5491%]
                        Performance has regressed.

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [127.88 ms 128.46 ms 129.30 ms]
                        thrpt:  [494.97   B/s 498.21   B/s 500.46   B/s]
                 change:
                        time:   [+1.9737% +2.6323% +3.3709%] (p = 0.00 < 0.05)
                        thrpt:  [-3.2610% -2.5648% -1.9355%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [132.27 ms 132.60 ms 133.10 ms]
                        thrpt:  [30.053 KiB/s 30.167 KiB/s 30.241 KiB/s]
                 change:
                        time:   [+8.8970% +9.2366% +9.6182%] (p = 0.00 < 0.05)
                        thrpt:  [-8.7743% -8.4556% -8.1701%]
                        Performance has regressed.
Found 3 outliers among 10 measurements (30.00%)
  1 (10.00%) low mild
  2 (20.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [128.97 ms 129.56 ms 130.62 ms]
                        thrpt:  [7.6556 MiB/s 7.7184 MiB/s 7.7540 MiB/s]
                 change:
                        time:   [+5.3473% +5.8421% +6.4588%] (p = 0.00 < 0.05)
                        thrpt:  [-6.0670% -5.5196% -5.0759%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild


Well, this is intredesting 🤔 But not very relevant, given the noise brackets.
It doesn't seem like that much. I'd expect some variation, but not a consistent performance drop across all input sizes. I guess I suck at microbenchmarks and by environment is noisy. I'll keep looking into it.
Nevertheless, it's great that we have benchmarks at all.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (nothing notable happens here)
Original passphrase encryption implemented in #577, this PR cross-reference is enough.","Benchmarks on my machine (openssl 1.1.1g, 10 passphrases):



Benchmark
Time, before
Time, after
Change




Encrypt 64 B
92.575 ms
92.510 ms
-0.3886%


Encrypt 4 KB
93.777 ms
92.403 ms
-1.0970%


Encrypt 1 MB
93.169 ms
92.837 ms
-0.1334%


Decrypt 64 B
92.339 ms
92.886 ms
+0.6470%


Decrypt 4 KB
92.444 ms
93.848 ms
+1.1705%


Decrypt 1 MB
93.392 ms
95.800 ms
+4.5314%




Benchmark output
Before
➜  themis git:(master) cargo bench -- --sample-size 10 passphrase

Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 5.1s.
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [92.321 ms 92.575 ms 92.952 ms]
                        thrpt:  [688.52   B/s 691.33   B/s 693.23   B/s]
Found 2 outliers among 10 measurements (20.00%)
  2 (20.00%) high mild
Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 5.2s.
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [93.167 ms 93.777 ms 94.563 ms]
                        thrpt:  [42.300 KiB/s 42.654 KiB/s 42.934 KiB/s]
Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 5.2s.
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [92.730 ms 93.169 ms 93.891 ms]
                        thrpt:  [10.651 MiB/s 10.733 MiB/s 10.784 MiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 5.1s.
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [92.035 ms 92.339 ms 92.626 ms]
                        thrpt:  [690.95   B/s 693.10   B/s 695.39   B/s]
Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 5.1s.
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [92.262 ms 92.444 ms 92.564 ms]
                        thrpt:  [43.213 KiB/s 43.269 KiB/s 43.355 KiB/s]
Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 5.2s.
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [92.972 ms 93.392 ms 93.852 ms]
                        thrpt:  [10.655 MiB/s 10.708 MiB/s 10.756 MiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

After
➜  themis git:(zrtp-goes-in-every-field) cargo bench -- --sample-size 10 passphrase

Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 5.1s.
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [92.263 ms 92.510 ms 92.801 ms]
                        thrpt:  [689.64   B/s 691.82   B/s 693.67   B/s]
                 change:
                        time:   [-1.1062% -0.3886% +0.2955%] (p = 0.33 > 0.05)
                        thrpt:  [-0.2946% +0.3901% +1.1186%]
                        No change in performance detected.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild
Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 5.1s.
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [92.249 ms 92.403 ms 92.644 ms]
                        thrpt:  [43.176 KiB/s 43.289 KiB/s 43.361 KiB/s]
                 change:
                        time:   [-2.1557% -1.0970% +0.0088%] (p = 0.09 > 0.05)
                        thrpt:  [-0.0088% +1.1092% +2.2032%]
                        No change in performance detected.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild
Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 5.1s.
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [92.638 ms 92.837 ms 93.130 ms]
                        thrpt:  [10.738 MiB/s 10.772 MiB/s 10.795 MiB/s]
                 change:
                        time:   [-0.8029% -0.1334% +0.5553%] (p = 0.72 > 0.05)
                        thrpt:  [-0.5522% +0.1336% +0.8094%]
                        No change in performance detected.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 5.1s.
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [92.455 ms 92.886 ms 93.179 ms]
                        thrpt:  [686.85   B/s 689.02   B/s 692.23   B/s]
                 change:
                        time:   [+0.0893% +0.6470% +1.2343%] (p = 0.05 < 0.05)
                        thrpt:  [-1.2193% -0.6428% -0.0893%]
                        Change within noise threshold.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild
Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 5.3s.
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [92.957 ms 93.848 ms 94.577 ms]
                        thrpt:  [42.293 KiB/s 42.622 KiB/s 43.031 KiB/s]
                 change:
                        time:   [+0.5580% +1.1705% +1.9286%] (p = 0.00 < 0.05)
                        thrpt:  [-1.8921% -1.1570% -0.5549%]
                        Change within noise threshold.
Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 5.2s.
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [95.151 ms 95.800 ms 96.627 ms]
                        thrpt:  [10.349 MiB/s 10.438 MiB/s 10.510 MiB/s]
                 change:
                        time:   [+2.7232% +4.5314% +7.3773%] (p = 0.00 < 0.05)
                        thrpt:  [-6.8704% -4.3350% -2.6510%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high severe",True,{'EYES': ['https://github.com/ilammy']}
cossacklabs/themis,https://github.com/cossacklabs/themis,640,2020-05-15T12:58:55Z,2020-05-20T09:35:39Z,2020-05-20T09:36:08Z,MERGED,True,151,92,10,https://github.com/ilammy,Apply Soter KDF after PBKDF2 for passphrases,8,['core'],https://github.com/cossacklabs/themis/pull/640,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/640#issuecomment-629424399,"Instead of using PBKDF2 output directly, pass the resulting prekey through an additional round of Soter KDF to associate the encryption key with user-provided associated context as well as the encrypted message length, similar to how symmetric key API does this. Now if different associated context is used for each individual Secure Cell, the encryption key will be different even if PBKDF2 salt somehow ends up the same.
Compatibility considerations
This changes the encryption algorithm, but it's fine to do this before public release. This is the only chance we have to do this update without it becoming a massive backward-compatibility pain.
The change slightly improves security of the encryption and makes the algorithms a bit more compatible and similar in structure. However, this does not change the API or data format in the slightest.
Benchmarks
PBKDF2 is the main time sink in passphrase API. It is expected that 1 additional round of Soter KDF (basically, one HMAC-SHA-256 computation) will not have any noticeable effect on the performance of passphrase encryption and decryption, given that we already do 200,000 rounds for PBKDF2.
Here are measurements before and after this change, on my machine with 4 x Intel Core i5-8250U, using Linux with generic OpenSSL 1.1.1g, running only the benchmarks:



Benchmark
Time, before
Time, after
Change




Encrypt 64 B
116.72 ms ± 1.14 ms
125.26 ms ± 0.66 ms
+8.07% slower


Encrypt 4 KB
118.53 ms ± 0.11 ms
129.36 ms ± 2.22 ms
+8.58% slower


Encrypt 1 MB
120.44 ms ± 0.65 ms
130.52 ms ± 0.96 ms
+7.77% slower


Decrypt 64 B
125.63 ms ± 0.30 ms
128.46 ms ± 0.71 ms
+2.63% slower


Decrypt 4 KB
121.67 ms ± 0.42 ms
132.60 ms ± 0.41 ms
+9.24% slower


Decrypt 1 MB
122.69 ms ± 0.40 ms
129.56 ms ± 0.82 ms
+5.84% slower




Benchmark output
Before:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [115.50 ms 116.72 ms 117.28 ms]
                        thrpt:  [545.71   B/s 548.30   B/s 554.13   B/s]

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [118.42 ms 118.53 ms 118.65 ms]
                        thrpt:  [33.713 KiB/s 33.747 KiB/s 33.779 KiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) low mild

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [119.91 ms 120.44 ms 121.20 ms]
                        thrpt:  [8.2505 MiB/s 8.3032 MiB/s 8.3397 MiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [125.29 ms 125.63 ms 125.90 ms]
                        thrpt:  [508.34   B/s 509.42   B/s 510.80   B/s]

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [121.23 ms 121.67 ms 122.06 ms]
                        thrpt:  [32.771 KiB/s 32.875 KiB/s 32.996 KiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [122.39 ms 122.69 ms 123.18 ms]
                        thrpt:  [8.1182 MiB/s 8.1508 MiB/s 8.1709 MiB/s]

After:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [124.47 ms 125.26 ms 125.79 ms]
                        thrpt:  [508.80   B/s 510.95   B/s 514.20   B/s]
                 change:
                        time:   [+7.0137% +8.0663% +9.1785%] (p = 0.00 < 0.05)
                        thrpt:  [-8.4069% -7.4642% -6.5540%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [127.19 ms 129.36 ms 131.64 ms]
                        thrpt:  [30.385 KiB/s 30.922 KiB/s 31.449 KiB/s]
                 change:
                        time:   [+7.3726% +8.5848% +9.8243%] (p = 0.00 < 0.05)
                        thrpt:  [-8.9454% -7.9061% -6.8664%]
                        Performance has regressed.

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [129.51 ms 130.52 ms 131.43 ms]
                        thrpt:  [7.6086 MiB/s 7.6614 MiB/s 7.7213 MiB/s]
                 change:
                        time:   [+7.0080% +7.7663% +8.5063%] (p = 0.00 < 0.05)
                        thrpt:  [-7.8394% -7.2066% -6.5491%]
                        Performance has regressed.

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [127.88 ms 128.46 ms 129.30 ms]
                        thrpt:  [494.97   B/s 498.21   B/s 500.46   B/s]
                 change:
                        time:   [+1.9737% +2.6323% +3.3709%] (p = 0.00 < 0.05)
                        thrpt:  [-3.2610% -2.5648% -1.9355%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [132.27 ms 132.60 ms 133.10 ms]
                        thrpt:  [30.053 KiB/s 30.167 KiB/s 30.241 KiB/s]
                 change:
                        time:   [+8.8970% +9.2366% +9.6182%] (p = 0.00 < 0.05)
                        thrpt:  [-8.7743% -8.4556% -8.1701%]
                        Performance has regressed.
Found 3 outliers among 10 measurements (30.00%)
  1 (10.00%) low mild
  2 (20.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [128.97 ms 129.56 ms 130.62 ms]
                        thrpt:  [7.6556 MiB/s 7.7184 MiB/s 7.7540 MiB/s]
                 change:
                        time:   [+5.3473% +5.8421% +6.4588%] (p = 0.00 < 0.05)
                        thrpt:  [-6.0670% -5.5196% -5.0759%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild


Well, this is intredesting 🤔 But not very relevant, given the noise brackets.
It doesn't seem like that much. I'd expect some variation, but not a consistent performance drop across all input sizes. I guess I suck at microbenchmarks and by environment is noisy. I'll keep looking into it.
Nevertheless, it's great that we have benchmarks at all.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (nothing notable happens here)
Original passphrase encryption implemented in #577, this PR cross-reference is enough.",Can confirm on my macOS laptop there's also no statistically significant change in performance either.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,640,2020-05-15T12:58:55Z,2020-05-20T09:35:39Z,2020-05-20T09:36:08Z,MERGED,True,151,92,10,https://github.com/ilammy,Apply Soter KDF after PBKDF2 for passphrases,8,['core'],https://github.com/cossacklabs/themis/pull/640,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/640#issuecomment-630296758,"Instead of using PBKDF2 output directly, pass the resulting prekey through an additional round of Soter KDF to associate the encryption key with user-provided associated context as well as the encrypted message length, similar to how symmetric key API does this. Now if different associated context is used for each individual Secure Cell, the encryption key will be different even if PBKDF2 salt somehow ends up the same.
Compatibility considerations
This changes the encryption algorithm, but it's fine to do this before public release. This is the only chance we have to do this update without it becoming a massive backward-compatibility pain.
The change slightly improves security of the encryption and makes the algorithms a bit more compatible and similar in structure. However, this does not change the API or data format in the slightest.
Benchmarks
PBKDF2 is the main time sink in passphrase API. It is expected that 1 additional round of Soter KDF (basically, one HMAC-SHA-256 computation) will not have any noticeable effect on the performance of passphrase encryption and decryption, given that we already do 200,000 rounds for PBKDF2.
Here are measurements before and after this change, on my machine with 4 x Intel Core i5-8250U, using Linux with generic OpenSSL 1.1.1g, running only the benchmarks:



Benchmark
Time, before
Time, after
Change




Encrypt 64 B
116.72 ms ± 1.14 ms
125.26 ms ± 0.66 ms
+8.07% slower


Encrypt 4 KB
118.53 ms ± 0.11 ms
129.36 ms ± 2.22 ms
+8.58% slower


Encrypt 1 MB
120.44 ms ± 0.65 ms
130.52 ms ± 0.96 ms
+7.77% slower


Decrypt 64 B
125.63 ms ± 0.30 ms
128.46 ms ± 0.71 ms
+2.63% slower


Decrypt 4 KB
121.67 ms ± 0.42 ms
132.60 ms ± 0.41 ms
+9.24% slower


Decrypt 1 MB
122.69 ms ± 0.40 ms
129.56 ms ± 0.82 ms
+5.84% slower




Benchmark output
Before:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [115.50 ms 116.72 ms 117.28 ms]
                        thrpt:  [545.71   B/s 548.30   B/s 554.13   B/s]

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [118.42 ms 118.53 ms 118.65 ms]
                        thrpt:  [33.713 KiB/s 33.747 KiB/s 33.779 KiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) low mild

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [119.91 ms 120.44 ms 121.20 ms]
                        thrpt:  [8.2505 MiB/s 8.3032 MiB/s 8.3397 MiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [125.29 ms 125.63 ms 125.90 ms]
                        thrpt:  [508.34   B/s 509.42   B/s 510.80   B/s]

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [121.23 ms 121.67 ms 122.06 ms]
                        thrpt:  [32.771 KiB/s 32.875 KiB/s 32.996 KiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [122.39 ms 122.69 ms 123.18 ms]
                        thrpt:  [8.1182 MiB/s 8.1508 MiB/s 8.1709 MiB/s]

After:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [124.47 ms 125.26 ms 125.79 ms]
                        thrpt:  [508.80   B/s 510.95   B/s 514.20   B/s]
                 change:
                        time:   [+7.0137% +8.0663% +9.1785%] (p = 0.00 < 0.05)
                        thrpt:  [-8.4069% -7.4642% -6.5540%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [127.19 ms 129.36 ms 131.64 ms]
                        thrpt:  [30.385 KiB/s 30.922 KiB/s 31.449 KiB/s]
                 change:
                        time:   [+7.3726% +8.5848% +9.8243%] (p = 0.00 < 0.05)
                        thrpt:  [-8.9454% -7.9061% -6.8664%]
                        Performance has regressed.

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [129.51 ms 130.52 ms 131.43 ms]
                        thrpt:  [7.6086 MiB/s 7.6614 MiB/s 7.7213 MiB/s]
                 change:
                        time:   [+7.0080% +7.7663% +8.5063%] (p = 0.00 < 0.05)
                        thrpt:  [-7.8394% -7.2066% -6.5491%]
                        Performance has regressed.

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [127.88 ms 128.46 ms 129.30 ms]
                        thrpt:  [494.97   B/s 498.21   B/s 500.46   B/s]
                 change:
                        time:   [+1.9737% +2.6323% +3.3709%] (p = 0.00 < 0.05)
                        thrpt:  [-3.2610% -2.5648% -1.9355%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [132.27 ms 132.60 ms 133.10 ms]
                        thrpt:  [30.053 KiB/s 30.167 KiB/s 30.241 KiB/s]
                 change:
                        time:   [+8.8970% +9.2366% +9.6182%] (p = 0.00 < 0.05)
                        thrpt:  [-8.7743% -8.4556% -8.1701%]
                        Performance has regressed.
Found 3 outliers among 10 measurements (30.00%)
  1 (10.00%) low mild
  2 (20.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [128.97 ms 129.56 ms 130.62 ms]
                        thrpt:  [7.6556 MiB/s 7.7184 MiB/s 7.7540 MiB/s]
                 change:
                        time:   [+5.3473% +5.8421% +6.4588%] (p = 0.00 < 0.05)
                        thrpt:  [-6.0670% -5.5196% -5.0759%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild


Well, this is intredesting 🤔 But not very relevant, given the noise brackets.
It doesn't seem like that much. I'd expect some variation, but not a consistent performance drop across all input sizes. I guess I suck at microbenchmarks and by environment is noisy. I'll keep looking into it.
Nevertheless, it's great that we have benchmarks at all.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (nothing notable happens here)
Original passphrase encryption implemented in #577, this PR cross-reference is enough.","Okay, I've done a couple more attempts at measuring with clean rebuilds. This time I've been getting inconclusive results which are fluctuating around. So I guess it is fine, that first time was a spike. Unless @Lagovas comes out with some surprises, I'd be merging this tomorrow morning.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,640,2020-05-15T12:58:55Z,2020-05-20T09:35:39Z,2020-05-20T09:36:08Z,MERGED,True,151,92,10,https://github.com/ilammy,Apply Soter KDF after PBKDF2 for passphrases,8,['core'],https://github.com/cossacklabs/themis/pull/640,https://github.com/Lagovas,8,https://github.com/cossacklabs/themis/pull/640#issuecomment-630384461,"Instead of using PBKDF2 output directly, pass the resulting prekey through an additional round of Soter KDF to associate the encryption key with user-provided associated context as well as the encrypted message length, similar to how symmetric key API does this. Now if different associated context is used for each individual Secure Cell, the encryption key will be different even if PBKDF2 salt somehow ends up the same.
Compatibility considerations
This changes the encryption algorithm, but it's fine to do this before public release. This is the only chance we have to do this update without it becoming a massive backward-compatibility pain.
The change slightly improves security of the encryption and makes the algorithms a bit more compatible and similar in structure. However, this does not change the API or data format in the slightest.
Benchmarks
PBKDF2 is the main time sink in passphrase API. It is expected that 1 additional round of Soter KDF (basically, one HMAC-SHA-256 computation) will not have any noticeable effect on the performance of passphrase encryption and decryption, given that we already do 200,000 rounds for PBKDF2.
Here are measurements before and after this change, on my machine with 4 x Intel Core i5-8250U, using Linux with generic OpenSSL 1.1.1g, running only the benchmarks:



Benchmark
Time, before
Time, after
Change




Encrypt 64 B
116.72 ms ± 1.14 ms
125.26 ms ± 0.66 ms
+8.07% slower


Encrypt 4 KB
118.53 ms ± 0.11 ms
129.36 ms ± 2.22 ms
+8.58% slower


Encrypt 1 MB
120.44 ms ± 0.65 ms
130.52 ms ± 0.96 ms
+7.77% slower


Decrypt 64 B
125.63 ms ± 0.30 ms
128.46 ms ± 0.71 ms
+2.63% slower


Decrypt 4 KB
121.67 ms ± 0.42 ms
132.60 ms ± 0.41 ms
+9.24% slower


Decrypt 1 MB
122.69 ms ± 0.40 ms
129.56 ms ± 0.82 ms
+5.84% slower




Benchmark output
Before:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [115.50 ms 116.72 ms 117.28 ms]
                        thrpt:  [545.71   B/s 548.30   B/s 554.13   B/s]

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [118.42 ms 118.53 ms 118.65 ms]
                        thrpt:  [33.713 KiB/s 33.747 KiB/s 33.779 KiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) low mild

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [119.91 ms 120.44 ms 121.20 ms]
                        thrpt:  [8.2505 MiB/s 8.3032 MiB/s 8.3397 MiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [125.29 ms 125.63 ms 125.90 ms]
                        thrpt:  [508.34   B/s 509.42   B/s 510.80   B/s]

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [121.23 ms 121.67 ms 122.06 ms]
                        thrpt:  [32.771 KiB/s 32.875 KiB/s 32.996 KiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [122.39 ms 122.69 ms 123.18 ms]
                        thrpt:  [8.1182 MiB/s 8.1508 MiB/s 8.1709 MiB/s]

After:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [124.47 ms 125.26 ms 125.79 ms]
                        thrpt:  [508.80   B/s 510.95   B/s 514.20   B/s]
                 change:
                        time:   [+7.0137% +8.0663% +9.1785%] (p = 0.00 < 0.05)
                        thrpt:  [-8.4069% -7.4642% -6.5540%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [127.19 ms 129.36 ms 131.64 ms]
                        thrpt:  [30.385 KiB/s 30.922 KiB/s 31.449 KiB/s]
                 change:
                        time:   [+7.3726% +8.5848% +9.8243%] (p = 0.00 < 0.05)
                        thrpt:  [-8.9454% -7.9061% -6.8664%]
                        Performance has regressed.

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [129.51 ms 130.52 ms 131.43 ms]
                        thrpt:  [7.6086 MiB/s 7.6614 MiB/s 7.7213 MiB/s]
                 change:
                        time:   [+7.0080% +7.7663% +8.5063%] (p = 0.00 < 0.05)
                        thrpt:  [-7.8394% -7.2066% -6.5491%]
                        Performance has regressed.

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [127.88 ms 128.46 ms 129.30 ms]
                        thrpt:  [494.97   B/s 498.21   B/s 500.46   B/s]
                 change:
                        time:   [+1.9737% +2.6323% +3.3709%] (p = 0.00 < 0.05)
                        thrpt:  [-3.2610% -2.5648% -1.9355%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [132.27 ms 132.60 ms 133.10 ms]
                        thrpt:  [30.053 KiB/s 30.167 KiB/s 30.241 KiB/s]
                 change:
                        time:   [+8.8970% +9.2366% +9.6182%] (p = 0.00 < 0.05)
                        thrpt:  [-8.7743% -8.4556% -8.1701%]
                        Performance has regressed.
Found 3 outliers among 10 measurements (30.00%)
  1 (10.00%) low mild
  2 (20.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [128.97 ms 129.56 ms 130.62 ms]
                        thrpt:  [7.6556 MiB/s 7.7184 MiB/s 7.7540 MiB/s]
                 change:
                        time:   [+5.3473% +5.8421% +6.4588%] (p = 0.00 < 0.05)
                        thrpt:  [-6.0670% -5.5196% -5.0759%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild


Well, this is intredesting 🤔 But not very relevant, given the noise brackets.
It doesn't seem like that much. I'd expect some variation, but not a consistent performance drop across all input sizes. I guess I suck at microbenchmarks and by environment is noisy. I'll keep looking into it.
Nevertheless, it's great that we have benchmarks at all.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (nothing notable happens here)
Original passphrase encryption implemented in #577, this PR cross-reference is enough.","Ubuntu
$ openssl version
OpenSSL 1.1.1  11 Sep 2018

$ uname -r
4.15.0-42-generic

$ lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 18.04.4 LTS
Release:	18.04
Codename:	bionic


Ubuntu 18.04
$ git checkout master

master

$ cargo bench -- --sample-size 10 passphrase
    Updating crates.io index
   Compiling libthemis-sys v0.12.0 (/tmp/themis/src/wrappers/themis/rust/libthemis-sys)
   Compiling themis v0.12.0 (/tmp/themis/src/wrappers/themis/rust)
   Compiling themis-core-bench v0.0.0 (/tmp/themis/benches/themis)
    Finished bench [optimized] target(s) in 18.89s
     Running /tmp/themis/target/release/deps/secure_cell_seal_master_key-52f2493607692f6b
Gnuplot not found, using plotters backend
     Running /tmp/themis/target/release/deps/secure_cell_seal_passphrase-088337c6771ce84d
Gnuplot not found, using plotters backend
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 10.3s.
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [181.16 ms 182.35 ms 183.68 ms]
                        thrpt:  [348.44   B/s 350.97   B/s 353.28   B/s]
                 change:
                        time:   [-1.0384% +0.2126% +1.4095%] (p = 0.77 > 0.05)
                        thrpt:  [-1.3899% -0.2122% +1.0493%]
                        No change in performance detected.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild
Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 10.1s.
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [181.50 ms 182.62 ms 184.73 ms]
                        thrpt:  [21.653 KiB/s 21.903 KiB/s 22.039 KiB/s]
                 change:
                        time:   [-1.6934% -0.8289% +0.2213%] (p = 0.13 > 0.05)
                        thrpt:  [-0.2208% +0.8359% +1.7226%]
                        No change in performance detected.
Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 10.0s.
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [181.62 ms 182.50 ms 183.95 ms]
                        thrpt:  [5.4362 MiB/s 5.4796 MiB/s 5.5060 MiB/s]
                 change:
                        time:   [-0.8876% +0.3113% +1.9624%] (p = 0.76 > 0.05)
                        thrpt:  [-1.9246% -0.3103% +0.8955%]
                        No change in performance detected.
Found 2 outliers among 10 measurements (20.00%)
  1 (10.00%) high mild
  1 (10.00%) high severe

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 10.1s.
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [181.18 ms 181.85 ms 182.63 ms]
                        thrpt:  [350.44   B/s 351.94   B/s 353.25   B/s]
                 change:
                        time:   [-0.1221% +0.5383% +1.0744%] (p = 0.12 > 0.05)
                        thrpt:  [-1.0630% -0.5355% +0.1222%]
                        No change in performance detected.
Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 10.3s.
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [183.14 ms 183.43 ms 183.87 ms]
                        thrpt:  [21.755 KiB/s 21.806 KiB/s 21.841 KiB/s]
                 change:
                        time:   [-3.1397% -1.6538% -0.3257%] (p = 0.03 < 0.05)
                        thrpt:  [+0.3268% +1.6817% +3.2414%]
                        Change within noise threshold.
Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 10.0s.
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [183.26 ms 183.70 ms 184.10 ms]
                        thrpt:  [5.4317 MiB/s 5.4436 MiB/s 5.4568 MiB/s]
                 change:
                        time:   [-4.0631% -1.6113% +0.5850%] (p = 0.25 > 0.05)
                        thrpt:  [-0.5816% +1.6377% +4.2352%]
                        No change in performance detected.

git checkout zrtp-goes-in-every-field

$ cargo bench -- --sample-size 10 passphrase
   Compiling autocfg v1.0.0
   Compiling lazy_static v1.4.0
   Compiling libc v0.2.70
   Compiling cfg-if v0.1.10
   Compiling serde v1.0.110
   Compiling maybe-uninit v2.0.0
   Compiling semver-parser v0.7.0
   Compiling byteorder v1.3.4
   Compiling memchr v2.3.3
   Compiling ryu v1.0.4
   Compiling proc-macro2 v1.0.13
   Compiling scopeguard v1.1.0
   Compiling unicode-xid v0.2.0
   Compiling pkg-config v0.3.17
   Compiling syn v1.0.22
   Compiling rayon-core v1.7.0
   Compiling either v1.5.3
   Compiling cc v1.0.53
   Compiling bitflags v1.2.1
   Compiling itoa v0.4.5
   Compiling unicode-width v0.1.7
   Compiling same-file v1.0.6
   Compiling regex-syntax v0.6.17
   Compiling zeroize v0.5.2
   Compiling oorandom v11.1.1
   Compiling semver v0.9.0
   Compiling crossbeam-utils v0.7.2
   Compiling memoffset v0.5.4
   Compiling crossbeam-epoch v0.8.2
   Compiling num-traits v0.2.11
   Compiling itertools v0.9.0
   Compiling textwrap v0.11.0
   Compiling walkdir v2.3.1
   Compiling rustc_version v0.2.3
   Compiling regex v1.3.7
   Compiling num_cpus v1.13.0
   Compiling atty v0.2.14
   Compiling libthemis-sys v0.12.0 (/tmp/themis/src/wrappers/themis/rust/libthemis-sys)
   Compiling csv-core v0.1.10
   Compiling cast v0.2.3
   Compiling regex-automata v0.1.9
   Compiling quote v1.0.6
   Compiling serde_json v1.0.53
   Compiling clap v2.33.1
   Compiling crossbeam-queue v0.2.1
   Compiling bstr v0.2.13
   Compiling tinytemplate v1.0.4
   Compiling plotters v0.2.14
   Compiling crossbeam-deque v0.7.3
   Compiling csv v1.1.3
   Compiling themis v0.12.0 (/tmp/themis/src/wrappers/themis/rust)
   Compiling criterion-plot v0.4.2
   Compiling rayon v1.3.0
   Compiling serde_derive v1.0.110
   Compiling criterion v0.3.2
   Compiling themis-core-bench v0.0.0 (/tmp/themis/benches/themis)
    Finished bench [optimized] target(s) in 3m 10s
     Running /tmp/themis/target/release/deps/secure_cell_seal_master_key-e5beafa1d7110cd8
Gnuplot not found, using plotters backend
     Running /tmp/themis/target/release/deps/secure_cell_seal_passphrase-9c8a032dbddb7caa
Gnuplot not found, using plotters backend
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 9.9s.
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [180.60 ms 181.55 ms 182.82 ms]
                        thrpt:  [350.06   B/s 352.51   B/s 354.37   B/s]
                 change:
                        time:   [-1.8894% -0.7699% +0.3404%] (p = 0.21 > 0.05)
                        thrpt:  [-0.3392% +0.7759% +1.9258%]
                        No change in performance detected.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild
Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 9.9s.
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [180.39 ms 182.38 ms 184.89 ms]
                        thrpt:  [21.635 KiB/s 21.932 KiB/s 22.175 KiB/s]
                 change:
                        time:   [-2.3032% -1.2310% -0.1968%] (p = 0.05 > 0.05)
                        thrpt:  [+0.1972% +1.2464% +2.3575%]
                        No change in performance detected.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high severe
Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 10.0s.
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [181.05 ms 181.42 ms 182.22 ms]
                        thrpt:  [5.4878 MiB/s 5.5119 MiB/s 5.5233 MiB/s]
                 change:
                        time:   [-2.7368% -1.0604% +0.2133%] (p = 0.23 > 0.05)
                        thrpt:  [-0.2129% +1.0717% +2.8138%]
                        No change in performance detected.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high severe

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 9.9s.
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [181.06 ms 181.48 ms 182.00 ms]
                        thrpt:  [351.64   B/s 352.65   B/s 353.48   B/s]
                 change:
                        time:   [-1.0546% -0.5041% +0.1390%] (p = 0.12 > 0.05)
                        thrpt:  [-0.1388% +0.5066% +1.0658%]
                        No change in performance detected.
Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 9.9s.
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [180.17 ms 181.53 ms 183.24 ms]
                        thrpt:  [21.829 KiB/s 22.035 KiB/s 22.202 KiB/s]
                 change:
                        time:   [-1.9808% -1.4592% -0.8246%] (p = 0.00 < 0.05)
                        thrpt:  [+0.8314% +1.4808% +2.0208%]
                        Change within noise threshold.
Found 2 outliers among 10 measurements (20.00%)
  1 (10.00%) high mild
  1 (10.00%) high severe
Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 10.0s.
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [181.14 ms 181.58 ms 182.43 ms]
                        thrpt:  [5.4814 MiB/s 5.5071 MiB/s 5.5205 MiB/s]
                 change:
                        time:   [-1.4339% -0.8856% -0.1065%] (p = 0.03 < 0.05)
                        thrpt:  [+0.1066% +0.8935% +1.4547%]
                        Change within noise threshold.
Found 2 outliers among 10 measurements (20.00%)
  1 (10.00%) high mild
  1 (10.00%) high severe


Archlinux
didn't stored openssl/linux versions, look tomorrow

Archlinux
git checkout master 

$ cargo bench -- --sample-size 10 passphrase
    Finished bench [optimized] target(s) in 0.08s
     Running /tmp/themis2/target/release/deps/secure_cell_seal_master_key-52f2493607692f6b
Gnuplot not found, using plotters backend
     Running /tmp/themis2/target/release/deps/secure_cell_seal_passphrase-088337c6771ce84d
Gnuplot not found, using plotters backend
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 8.4s.
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [152.50 ms 152.93 ms 153.36 ms]
                        thrpt:  [417.32   B/s 418.49   B/s 419.68   B/s]
Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 8.4s.
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [153.01 ms 153.35 ms 153.74 ms]
                        thrpt:  [26.018 KiB/s 26.085 KiB/s 26.142 KiB/s]
Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 8.8s.
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [160.51 ms 160.64 ms 160.77 ms]
                        thrpt:  [6.2202 MiB/s 6.2250 MiB/s 6.2303 MiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high severe
Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 8.4s.
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [152.45 ms 152.59 ms 152.84 ms]
                        thrpt:  [418.75   B/s 419.42   B/s 419.81   B/s]
Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 8.4s.
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [153.25 ms 153.37 ms 153.54 ms]
                        thrpt:  [26.051 KiB/s 26.080 KiB/s 26.101 KiB/s]
Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 8.8s.
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [160.13 ms 160.36 ms 160.61 ms]
                        thrpt:  [6.2263 MiB/s 6.2361 MiB/s 6.2448 MiB/s]
Found 2 outliers among 10 measurements (20.00%)
  1 (10.00%) high mild
  1 (10.00%) high severe

git checkout zrtp-goes-in-every-field

$ cargo bench -- --sample-size 10 passphrase
   Compiling autocfg v1.0.0
   Compiling lazy_static v1.4.0
   Compiling cfg-if v0.1.10
   Compiling libc v0.2.70
   Compiling maybe-uninit v2.0.0
   Compiling semver-parser v0.7.0
   Compiling serde v1.0.110
   Compiling proc-macro2 v1.0.13
   Compiling ryu v1.0.4
   Compiling byteorder v1.3.4
   Compiling memchr v2.3.3
   Compiling unicode-xid v0.2.0
   Compiling scopeguard v1.1.0
   Compiling either v1.5.3
   Compiling rayon-core v1.7.0
   Compiling syn v1.0.22
   Compiling bitflags v1.2.1
   Compiling itoa v0.4.5
   Compiling cc v1.0.53
   Compiling pkg-config v0.3.17
   Compiling unicode-width v0.1.7
   Compiling same-file v1.0.6
   Compiling regex-syntax v0.6.17
   Compiling oorandom v11.1.1
   Compiling zeroize v0.5.2
   Compiling semver v0.9.0
   Compiling crossbeam-utils v0.7.2
   Compiling memoffset v0.5.4
   Compiling crossbeam-epoch v0.8.2
   Compiling num-traits v0.2.11
   Compiling itertools v0.9.0
   Compiling textwrap v0.11.0
   Compiling walkdir v2.3.1
   Compiling rustc_version v0.2.3
   Compiling regex v1.3.7
   Compiling cast v0.2.3
   Compiling libthemis-sys v0.12.0 (/tmp/themis2/src/wrappers/themis/rust/libthemis-sys)
   Compiling num_cpus v1.13.0
   Compiling atty v0.2.14
   Compiling quote v1.0.6
   Compiling csv-core v0.1.10
   Compiling serde_json v1.0.53
   Compiling clap v2.33.1
   Compiling regex-automata v0.1.9
   Compiling crossbeam-queue v0.2.1
   Compiling bstr v0.2.13
   Compiling tinytemplate v1.0.4
   Compiling plotters v0.2.14
   Compiling crossbeam-deque v0.7.3
   Compiling csv v1.1.3
   Compiling criterion-plot v0.4.2
   Compiling themis v0.12.0 (/tmp/themis2/src/wrappers/themis/rust)
   Compiling rayon v1.3.0
   Compiling serde_derive v1.0.110
   Compiling criterion v0.3.2
   Compiling themis-core-bench v0.0.0 (/tmp/themis2/benches/themis)
    Finished bench [optimized] target(s) in 1m 55s
     Running /tmp/themis2/target/release/deps/secure_cell_seal_master_key-e5beafa1d7110cd8
Gnuplot not found, using plotters backend
     Running /tmp/themis2/target/release/deps/secure_cell_seal_passphrase-9c8a032dbddb7caa
Gnuplot not found, using plotters backend
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 9.6s.
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [159.81 ms 162.34 ms 167.66 ms]
                        thrpt:  [381.73   B/s 394.24   B/s 400.47   B/s]
                 change:
                        time:   [+4.9664% +7.5313% +10.224%] (p = 0.00 < 0.05)
                        thrpt:  [-9.2760% -7.0038% -4.7315%]
                        Performance has regressed.
Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 8.9s.
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [158.21 ms 158.90 ms 160.06 ms]
                        thrpt:  [24.991 KiB/s 25.173 KiB/s 25.283 KiB/s]
                 change:
                        time:   [+3.5258% +4.0012% +4.4259%] (p = 0.00 < 0.05)
                        thrpt:  [-4.2384% -3.8472% -3.4057%]
                        Performance has regressed.
Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 9.2s.
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [167.11 ms 174.01 ms 178.87 ms]
                        thrpt:  [5.5907 MiB/s 5.7468 MiB/s 5.9841 MiB/s]
                 change:
                        time:   [+3.5316% +5.5823% +8.1897%] (p = 0.00 < 0.05)
                        thrpt:  [-7.5697% -5.2872% -3.4111%]
                        Performance has regressed.
Found 2 outliers among 10 measurements (20.00%)
  1 (10.00%) high mild
  1 (10.00%) high severe
Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 9.2s.
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [168.87 ms 173.49 ms 176.24 ms]
                        thrpt:  [363.13   B/s 368.89   B/s 378.98   B/s]
                 change:
                        time:   [+6.9994% +10.126% +13.559%] (p = 0.00 < 0.05)
                        thrpt:  [-11.940% -9.1949% -6.5416%]
                        Performance has regressed.
Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 9.6s.
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [162.82 ms 164.68 ms 168.27 ms]
                        thrpt:  [23.771 KiB/s 24.290 KiB/s 24.567 KiB/s]
                 change:
                        time:   [+6.4541% +7.9119% +9.7913%] (p = 0.00 < 0.05)
                        thrpt:  [-8.9181% -7.3318% -6.0628%]
                        Performance has regressed.
Found 3 outliers among 10 measurements (30.00%)
  1 (10.00%) low mild
  2 (20.00%) high severe
Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Warning: Unable to complete 10 samples in 5.0s. You may wish to increase target time to 9.4s.
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [171.29 ms 171.80 ms 172.24 ms]
                        thrpt:  [5.8057 MiB/s 5.8207 MiB/s 5.8382 MiB/s]
                 change:
                        time:   [+6.5818% +7.0829% +7.5411%] (p = 0.00 < 0.05)
                        thrpt:  [-7.0123% -6.6144% -6.1753%]
                        Performance has regressed.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,640,2020-05-15T12:58:55Z,2020-05-20T09:35:39Z,2020-05-20T09:36:08Z,MERGED,True,151,92,10,https://github.com/ilammy,Apply Soter KDF after PBKDF2 for passphrases,8,['core'],https://github.com/cossacklabs/themis/pull/640,https://github.com/ilammy,9,https://github.com/cossacklabs/themis/pull/640#issuecomment-631361866,"Instead of using PBKDF2 output directly, pass the resulting prekey through an additional round of Soter KDF to associate the encryption key with user-provided associated context as well as the encrypted message length, similar to how symmetric key API does this. Now if different associated context is used for each individual Secure Cell, the encryption key will be different even if PBKDF2 salt somehow ends up the same.
Compatibility considerations
This changes the encryption algorithm, but it's fine to do this before public release. This is the only chance we have to do this update without it becoming a massive backward-compatibility pain.
The change slightly improves security of the encryption and makes the algorithms a bit more compatible and similar in structure. However, this does not change the API or data format in the slightest.
Benchmarks
PBKDF2 is the main time sink in passphrase API. It is expected that 1 additional round of Soter KDF (basically, one HMAC-SHA-256 computation) will not have any noticeable effect on the performance of passphrase encryption and decryption, given that we already do 200,000 rounds for PBKDF2.
Here are measurements before and after this change, on my machine with 4 x Intel Core i5-8250U, using Linux with generic OpenSSL 1.1.1g, running only the benchmarks:



Benchmark
Time, before
Time, after
Change




Encrypt 64 B
116.72 ms ± 1.14 ms
125.26 ms ± 0.66 ms
+8.07% slower


Encrypt 4 KB
118.53 ms ± 0.11 ms
129.36 ms ± 2.22 ms
+8.58% slower


Encrypt 1 MB
120.44 ms ± 0.65 ms
130.52 ms ± 0.96 ms
+7.77% slower


Decrypt 64 B
125.63 ms ± 0.30 ms
128.46 ms ± 0.71 ms
+2.63% slower


Decrypt 4 KB
121.67 ms ± 0.42 ms
132.60 ms ± 0.41 ms
+9.24% slower


Decrypt 1 MB
122.69 ms ± 0.40 ms
129.56 ms ± 0.82 ms
+5.84% slower




Benchmark output
Before:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [115.50 ms 116.72 ms 117.28 ms]
                        thrpt:  [545.71   B/s 548.30   B/s 554.13   B/s]

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [118.42 ms 118.53 ms 118.65 ms]
                        thrpt:  [33.713 KiB/s 33.747 KiB/s 33.779 KiB/s]
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) low mild

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [119.91 ms 120.44 ms 121.20 ms]
                        thrpt:  [8.2505 MiB/s 8.3032 MiB/s 8.3397 MiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [125.29 ms 125.63 ms 125.90 ms]
                        thrpt:  [508.34   B/s 509.42   B/s 510.80   B/s]

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [121.23 ms 121.67 ms 122.06 ms]
                        thrpt:  [32.771 KiB/s 32.875 KiB/s 32.996 KiB/s]

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [122.39 ms 122.69 ms 123.18 ms]
                        thrpt:  [8.1182 MiB/s 8.1508 MiB/s 8.1709 MiB/s]

After:
Benchmarking Secure Cell encryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/64                                                                          
                        time:   [124.47 ms 125.26 ms 125.79 ms]
                        thrpt:  [508.80   B/s 510.95   B/s 514.20   B/s]
                 change:
                        time:   [+7.0137% +8.0663% +9.1785%] (p = 0.00 < 0.05)
                        thrpt:  [-8.4069% -7.4642% -6.5540%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell encryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/4 KB                                                                          
                        time:   [127.19 ms 129.36 ms 131.64 ms]
                        thrpt:  [30.385 KiB/s 30.922 KiB/s 31.449 KiB/s]
                 change:
                        time:   [+7.3726% +8.5848% +9.8243%] (p = 0.00 < 0.05)
                        thrpt:  [-8.9454% -7.9061% -6.8664%]
                        Performance has regressed.

Benchmarking Secure Cell encryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell encryption - Seal, passphrase/1 MB                                                                          
                        time:   [129.51 ms 130.52 ms 131.43 ms]
                        thrpt:  [7.6086 MiB/s 7.6614 MiB/s 7.7213 MiB/s]
                 change:
                        time:   [+7.0080% +7.7663% +8.5063%] (p = 0.00 < 0.05)
                        thrpt:  [-7.8394% -7.2066% -6.5491%]
                        Performance has regressed.

Benchmarking Secure Cell decryption - Seal, passphrase/64: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/64                                                                          
                        time:   [127.88 ms 128.46 ms 129.30 ms]
                        thrpt:  [494.97   B/s 498.21   B/s 500.46   B/s]
                 change:
                        time:   [+1.9737% +2.6323% +3.3709%] (p = 0.00 < 0.05)
                        thrpt:  [-3.2610% -2.5648% -1.9355%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/4 KB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/4 KB                                                                          
                        time:   [132.27 ms 132.60 ms 133.10 ms]
                        thrpt:  [30.053 KiB/s 30.167 KiB/s 30.241 KiB/s]
                 change:
                        time:   [+8.8970% +9.2366% +9.6182%] (p = 0.00 < 0.05)
                        thrpt:  [-8.7743% -8.4556% -8.1701%]
                        Performance has regressed.
Found 3 outliers among 10 measurements (30.00%)
  1 (10.00%) low mild
  2 (20.00%) high mild

Benchmarking Secure Cell decryption - Seal, passphrase/1 MB: Warming up for 3.0000 s
Secure Cell decryption - Seal, passphrase/1 MB                                                                          
                        time:   [128.97 ms 129.56 ms 130.62 ms]
                        thrpt:  [7.6556 MiB/s 7.7184 MiB/s 7.7540 MiB/s]
                 change:
                        time:   [+5.3473% +5.8421% +6.4588%] (p = 0.00 < 0.05)
                        thrpt:  [-6.0670% -5.5196% -5.0759%]
                        Performance has regressed.
Found 1 outliers among 10 measurements (10.00%)
  1 (10.00%) high mild


Well, this is intredesting 🤔 But not very relevant, given the noise brackets.
It doesn't seem like that much. I'd expect some variation, but not a consistent performance drop across all input sizes. I guess I suck at microbenchmarks and by environment is noisy. I'll keep looking into it.
Nevertheless, it's great that we have benchmarks at all.
Checklist

 Change is covered by automated tests
 Benchmark results are attached
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (nothing notable happens here)
Original passphrase encryption implemented in #577, this PR cross-reference is enough.","Alrighty. There seems to be some unexplained performance drop, but it’s not clear how exactly it’s linked to the implementation. Since this is a new feature, it won’t be a regression so I guess it’s okay to merge this as is, then do detailed profiling and optimizations later. I’ve noted this in out internal task tracker, I hope we’ll get back to this issue at some point.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,641,2020-05-18T17:14:20Z,2020-05-25T12:16:17Z,2020-05-25T12:16:21Z,MERGED,True,30,11,9,https://github.com/ilammy,Claim official iPadOS support,1,"['O-iOS :iphone:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/641,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/641,"iPadOS is actually a flavor of iOS and have unofficially supported targeting iPads for quite a while (it technically worked). Check the “iPad” check boxes is Xcode projects and run half of the test suite on iPad simulators. Now we can claim with some confidence that we support iPads and commit to resolving issues with that platform if they arise.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated","iPadOS is actually a flavor of iOS and have unofficially supported targeting iPads for quite a while (it technically worked). Check the “iPad” check boxes is Xcode projects and run half of the test suite on iPad simulators. Now we can claim with some confidence that we support iPads and commit to resolving issues with that platform if they arise.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,641,2020-05-18T17:14:20Z,2020-05-25T12:16:17Z,2020-05-25T12:16:21Z,MERGED,True,30,11,9,https://github.com/ilammy,Claim official iPadOS support,1,"['O-iOS :iphone:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/641,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/641#issuecomment-630321509,"iPadOS is actually a flavor of iOS and have unofficially supported targeting iPads for quite a while (it technically worked). Check the “iPad” check boxes is Xcode projects and run half of the test suite on iPad simulators. Now we can claim with some confidence that we support iPads and commit to resolving issues with that platform if they arise.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated",I do not have an actual iPad available but @vixentael can provide a witness statement that ObjCThemis works there.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,641,2020-05-18T17:14:20Z,2020-05-25T12:16:17Z,2020-05-25T12:16:21Z,MERGED,True,30,11,9,https://github.com/ilammy,Claim official iPadOS support,1,"['O-iOS :iphone:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/641,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/641#issuecomment-633534289,"iPadOS is actually a flavor of iOS and have unofficially supported targeting iPads for quite a while (it technically worked). Check the “iPad” check boxes is Xcode projects and run half of the test suite on iPad simulators. Now we can claim with some confidence that we support iPads and commit to resolving issues with that platform if they arise.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated","@vixentael can provide a witness statement that ObjCThemis works there

""it just works""",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,642,2020-05-18T21:21:01Z,2020-05-20T09:38:48Z,2020-05-20T09:38:51Z,MERGED,True,28,0,1,https://github.com/ilammy,Build ObjCThemis for generic iOS devices,1,"['O-iOS :iphone:', 'infrastructure', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/642,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/642,"Verify builds of ObjCThemis for iOS not only for the simulator (i386, x86_64) but for ""generic device"" as well, using architectures required by iOS (ARM64, ARMv7). This is not equivalent to building an ""archived"" build of application – which requires provisioning profiles and all that other stuff – and it does not verify bitcode, but it's a good stopgap measure against OpenSSL maintainers forgetting to include ARM builds into their precompiled framework binaries.
With Carthage we have an Xcode project so we can build it directly. CocoaPods does not generate standalone project so we use one of the examples and build the pods library. We cannot build the example for ""generic device"" because of provisioning profiles, etc., but we can build the framework alone which is enough to check that all symbols required by ObjCThemis are actually present.
Now I can sleep more soundly.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (not interesting)","Verify builds of ObjCThemis for iOS not only for the simulator (i386, x86_64) but for ""generic device"" as well, using architectures required by iOS (ARM64, ARMv7). This is not equivalent to building an ""archived"" build of application – which requires provisioning profiles and all that other stuff – and it does not verify bitcode, but it's a good stopgap measure against OpenSSL maintainers forgetting to include ARM builds into their precompiled framework binaries.
With Carthage we have an Xcode project so we can build it directly. CocoaPods does not generate standalone project so we use one of the examples and build the pods library. We cannot build the example for ""generic device"" because of provisioning profiles, etc., but we can build the framework alone which is enough to check that all symbols required by ObjCThemis are actually present.
Now I can sleep more soundly.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (not interesting)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,643,2020-05-25T11:42:22Z,2020-05-25T12:16:31Z,2020-05-25T12:16:34Z,MERGED,True,5,1,2,https://github.com/ilammy,Bump BoringSSL submodule version,1,"['core', 'W-JavaThemis :coffee:', 'C-BoringSSL', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/643,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/643,"Pull latest updates for BoringSSL. Since BoringSSL does not have release schedule or versions, we just pull the latest stuff from master branch.
This affects mostly AndroidThemis and WasmThemis since they are using BoringSSL by default. Other platforms normally rely on OpenSSL.
Checklist

 Change is covered by automated tests
 Changelog is updated","Pull latest updates for BoringSSL. Since BoringSSL does not have release schedule or versions, we just pull the latest stuff from master branch.
This affects mostly AndroidThemis and WasmThemis since they are using BoringSSL by default. Other platforms normally rely on OpenSSL.
Checklist

 Change is covered by automated tests
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,643,2020-05-25T11:42:22Z,2020-05-25T12:16:31Z,2020-05-25T12:16:34Z,MERGED,True,5,1,2,https://github.com/ilammy,Bump BoringSSL submodule version,1,"['core', 'W-JavaThemis :coffee:', 'C-BoringSSL', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/643,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/643#issuecomment-633532657,"Pull latest updates for BoringSSL. Since BoringSSL does not have release schedule or versions, we just pull the latest stuff from master branch.
This affects mostly AndroidThemis and WasmThemis since they are using BoringSSL by default. Other platforms normally rely on OpenSSL.
Checklist

 Change is covered by automated tests
 Changelog is updated","Let's hope that tests are passing and that we have enough tests to note sudden changes, hehe",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,644,2020-05-25T17:23:41Z,2020-05-26T15:06:31Z,2020-05-26T15:06:32Z,MERGED,True,35,168,6,https://github.com/ilammy,Fix assorted issues with legacy systems,6,"['core', 'W-GoThemis :hamster:', 'infrastructure', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/644,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/644,"Fix and work around miscellaneous issues found by BuildBot. It's unique in that it tests some rarely used systems like CentOS 7 and 32-bit machines which we don't test on CircleCI or GitHub Actions.
This should probably be separate PRs but I don't want to complicate things, wait for a gazillion of builds which don't really test these changes.
Avoid inline variables in ""for"" loops
Some systems (like CentOS 7) still run their C compilers in some C89 compatibility mode, so any C99 code will fail to build there. Use C89 style of variable declarations to avoid warnings treated as errors.
Do not use --no-undefined with Emscripten
It turns out that not all Emscripten toolchains support --no-undefined flag and complain about that by breaking builds, in particular on our BuildBot infrastructure.
We use --no-undefined to get warnings about missing dependencies which are usually caused by OpenSSL header files that do not match the library binaries actually linked. We use BoringSSL with Emscripten by default so we don't need those warnings that much here.
Drop layout tests from libthemis-sys
struct secure_session_user_callbacks_type and others include architecture-specific types such as pointers and size_t values.
PR #626 has replaced on-the-fly invocation of Bindgen with using pregenerated files. Unfortunately, we cannot use layout tests in these files since they end up architecture-specific.
On 64-bit machines – such as the one used to generate the files – secure_session_user_callbacks_type uses 40 bytes of storage while on 32-bit machines it requires only 20 bytes. We cannot include a test that simply compares the size with a constant ""40"".
I don't want to complicate things too much just because of those tests so let's simply drop them if they are the only platform-dependent part here.
Ignore panicking corruption tests in RustThemis and GoThemis
Token Protect data corruption test triggers a panic in Vec::reserve call on 32-bit machines. Corrupted input data is not detected right away by Themis and we try to allocate more than 2 GB of memory. It fails on 32-bit systems and Rust panics.
There is a nightly-only experimental API – Vec::try_reserve – but we need to support stable Rust.
We can't do much about this issue other than assume a safe allocation interval which is only an assumption. So for now let's panic, and disable this test on 32-bit machines so that the test suite is still useful.
Similar to Rust, GoThemis panics on allocation when trying to allocate slice of negative size (a side effect of casting big C.size_t to int on 32-bit systems).
This time this is a genuine overflow that we can and should avoid, but right now we don't have time to audit and update all C.size_t casts. Leave this issue as is and skip the faulty test for now.
We fixed the same issues for Java in #639 because if affects all systems. However, it's less likely that RustThemi and GoThemis will be used on 32-bit machines so we kinda can ignore these issues and suppress test failures. But yeah, this is not a fix, Themis will still panic when processing corrupted data on 32-bit machines.
Checklist

 Change is covered by automated tests (somewhat, 64-bit only)
 The coding guidelines are followed
 Changelog is updated (no need, IMO)","Fix and work around miscellaneous issues found by BuildBot. It's unique in that it tests some rarely used systems like CentOS 7 and 32-bit machines which we don't test on CircleCI or GitHub Actions.
This should probably be separate PRs but I don't want to complicate things, wait for a gazillion of builds which don't really test these changes.
Avoid inline variables in ""for"" loops
Some systems (like CentOS 7) still run their C compilers in some C89 compatibility mode, so any C99 code will fail to build there. Use C89 style of variable declarations to avoid warnings treated as errors.
Do not use --no-undefined with Emscripten
It turns out that not all Emscripten toolchains support --no-undefined flag and complain about that by breaking builds, in particular on our BuildBot infrastructure.
We use --no-undefined to get warnings about missing dependencies which are usually caused by OpenSSL header files that do not match the library binaries actually linked. We use BoringSSL with Emscripten by default so we don't need those warnings that much here.
Drop layout tests from libthemis-sys
struct secure_session_user_callbacks_type and others include architecture-specific types such as pointers and size_t values.
PR #626 has replaced on-the-fly invocation of Bindgen with using pregenerated files. Unfortunately, we cannot use layout tests in these files since they end up architecture-specific.
On 64-bit machines – such as the one used to generate the files – secure_session_user_callbacks_type uses 40 bytes of storage while on 32-bit machines it requires only 20 bytes. We cannot include a test that simply compares the size with a constant ""40"".
I don't want to complicate things too much just because of those tests so let's simply drop them if they are the only platform-dependent part here.
Ignore panicking corruption tests in RustThemis and GoThemis
Token Protect data corruption test triggers a panic in Vec::reserve call on 32-bit machines. Corrupted input data is not detected right away by Themis and we try to allocate more than 2 GB of memory. It fails on 32-bit systems and Rust panics.
There is a nightly-only experimental API – Vec::try_reserve – but we need to support stable Rust.
We can't do much about this issue other than assume a safe allocation interval which is only an assumption. So for now let's panic, and disable this test on 32-bit machines so that the test suite is still useful.
Similar to Rust, GoThemis panics on allocation when trying to allocate slice of negative size (a side effect of casting big C.size_t to int on 32-bit systems).
This time this is a genuine overflow that we can and should avoid, but right now we don't have time to audit and update all C.size_t casts. Leave this issue as is and skip the faulty test for now.
We fixed the same issues for Java in #639 because if affects all systems. However, it's less likely that RustThemi and GoThemis will be used on 32-bit machines so we kinda can ignore these issues and suppress test failures. But yeah, this is not a fix, Themis will still panic when processing corrupted data on 32-bit machines.
Checklist

 Change is covered by automated tests (somewhat, 64-bit only)
 The coding guidelines are followed
 Changelog is updated (no need, IMO)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,645,2020-05-26T18:13:29Z,2020-05-27T17:11:54Z,2020-05-27T17:11:55Z,MERGED,True,34,5,3,https://github.com/ilammy,Fix RPM packaging and installation on CentOS,7,"['infrastructure', 'O-Linux :penguin:']",https://github.com/cossacklabs/themis/pull/645,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/645,"Improve various aspects of RPM packaging (such as making it run successfully) as well as local installation on RHEL-based systems (e.g., CentOS that we support).

Add /usr/local/lib to linker search path on CentOS so that Themis is immediately usable after installation from source viamake install. CentOS does not include /usr/local/lib into its default search paths, and we use that directory as the default installation path.
Fix JDK location autodetection on CentOS so that it actually works automatically there. JDK autodetection was improved in #551 but apparently it was not tested on CentOS. With these changes it is actually possible to build RPM packages added in #553.
Miscellaneous minor tweaks in path reporting that remove false negatives, unnecessary warnings, etc.

More details are available in commit messages.
Checklist

 Change is covered by automated tests (BuildBot)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Improve various aspects of RPM packaging (such as making it run successfully) as well as local installation on RHEL-based systems (e.g., CentOS that we support).

Add /usr/local/lib to linker search path on CentOS so that Themis is immediately usable after installation from source viamake install. CentOS does not include /usr/local/lib into its default search paths, and we use that directory as the default installation path.
Fix JDK location autodetection on CentOS so that it actually works automatically there. JDK autodetection was improved in #551 but apparently it was not tested on CentOS. With these changes it is actually possible to build RPM packages added in #553.
Miscellaneous minor tweaks in path reporting that remove false negatives, unnecessary warnings, etc.

More details are available in commit messages.
Checklist

 Change is covered by automated tests (BuildBot)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,645,2020-05-26T18:13:29Z,2020-05-27T17:11:54Z,2020-05-27T17:11:55Z,MERGED,True,34,5,3,https://github.com/ilammy,Fix RPM packaging and installation on CentOS,7,"['infrastructure', 'O-Linux :penguin:']",https://github.com/cossacklabs/themis/pull/645,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/645#issuecomment-634263045,"Improve various aspects of RPM packaging (such as making it run successfully) as well as local installation on RHEL-based systems (e.g., CentOS that we support).

Add /usr/local/lib to linker search path on CentOS so that Themis is immediately usable after installation from source viamake install. CentOS does not include /usr/local/lib into its default search paths, and we use that directory as the default installation path.
Fix JDK location autodetection on CentOS so that it actually works automatically there. JDK autodetection was improved in #551 but apparently it was not tested on CentOS. With these changes it is actually possible to build RPM packages added in #553.
Miscellaneous minor tweaks in path reporting that remove false negatives, unnecessary warnings, etc.

More details are available in commit messages.
Checklist

 Change is covered by automated tests (BuildBot)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Hm... A test has failed for this branch.
Themis Core / Unit tests (ubuntu-latest)
Run test suite (BoringSSL)
[12:12]  secure_comparator_api_test:#12  ""secure_comparator_append_secret failed""  FAIL
!    Type:      fail-if
!    Condition: condition
!    File:      tests/themis/themis_secure_comparator.c
!    Line:      222


  
    
      themis/tests/themis/themis_secure_comparator.c
    
    
        Lines 220 to 222
      in
      d8a1c14
    
  
  
    

        
          
           themis_status = secure_comparator_append_secret(bob, secret, secret_length - 1); 
        

        
          
           if (THEMIS_SUCCESS != themis_status) { 
        

        
          
               testsuite_fail_if(true, ""secure_comparator_append_secret failed""); 
        
    
  


🤔
That's after recent update of BoringSSL (#643) so I'm a bit suspicious. Though it does not seem to reproduce for master branch (or its macOS sibling run), but it might be simply rare condition.
I'll rerun the test suite and the issue is likely to go away, but I see what you did there
👉 👀
👀 👉 🐞",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,645,2020-05-26T18:13:29Z,2020-05-27T17:11:54Z,2020-05-27T17:11:55Z,MERGED,True,34,5,3,https://github.com/ilammy,Fix RPM packaging and installation on CentOS,7,"['infrastructure', 'O-Linux :penguin:']",https://github.com/cossacklabs/themis/pull/645,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/645#issuecomment-634563017,"Improve various aspects of RPM packaging (such as making it run successfully) as well as local installation on RHEL-based systems (e.g., CentOS that we support).

Add /usr/local/lib to linker search path on CentOS so that Themis is immediately usable after installation from source viamake install. CentOS does not include /usr/local/lib into its default search paths, and we use that directory as the default installation path.
Fix JDK location autodetection on CentOS so that it actually works automatically there. JDK autodetection was improved in #551 but apparently it was not tested on CentOS. With these changes it is actually possible to build RPM packages added in #553.
Miscellaneous minor tweaks in path reporting that remove false negatives, unnecessary warnings, etc.

More details are available in commit messages.
Checklist

 Change is covered by automated tests (BuildBot)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","it might be simply rare condition

👀",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,646,2020-06-01T13:50:37Z,2020-06-01T14:31:44Z,2020-06-01T14:31:45Z,MERGED,True,14,8,2,https://github.com/shadinua,Make selectable languages in integration tests,1,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/646,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/646,"When testing on legacy OS we know in advance that some tests for unsupported modules will fail. We want to make the testing behaviour meet real expectations so it is convenient to have configurable set of modules to test.
It was already implemented in the tests_generator.py script as environment variable GENERATE_LANGUAGES.
In this commit:

the same behaviour was added to the check_keygen.sh script.
GENERATE_LANGUAGES was renamed to THEMIS_TEST_LANGUAGES","When testing on legacy OS we know in advance that some tests for unsupported modules will fail. We want to make the testing behaviour meet real expectations so it is convenient to have configurable set of modules to test.
It was already implemented in the tests_generator.py script as environment variable GENERATE_LANGUAGES.
In this commit:

the same behaviour was added to the check_keygen.sh script.
GENERATE_LANGUAGES was renamed to THEMIS_TEST_LANGUAGES",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,648,2020-06-01T22:28:22Z,2020-06-02T12:02:22Z,2020-06-02T12:02:23Z,MERGED,True,16,23,8,https://github.com/shadinua,Drop Python 2 support,4,"['infrastructure', 'tests', 'compatibility']",https://github.com/cossacklabs/themis/pull/648,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/648,"Python 2 had reached EOL on 2020-01-01.
In fact, we are not making any changes in this release that break compatibility, but we no longer officially support it. This means that we do not run any CI tests for Python 2, and free to develop code compatible only with Python 3+.","Python 2 had reached EOL on 2020-01-01.
In fact, we are not making any changes in this release that break compatibility, but we no longer officially support it. This means that we do not run any CI tests for Python 2, and free to develop code compatible only with Python 3+.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,648,2020-06-01T22:28:22Z,2020-06-02T12:02:22Z,2020-06-02T12:02:23Z,MERGED,True,16,23,8,https://github.com/shadinua,Drop Python 2 support,4,"['infrastructure', 'tests', 'compatibility']",https://github.com/cossacklabs/themis/pull/648,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/648#issuecomment-637162729,"Python 2 had reached EOL on 2020-01-01.
In fact, we are not making any changes in this release that break compatibility, but we no longer officially support it. This means that we do not run any CI tests for Python 2, and free to develop code compatible only with Python 3+.","We might need to update this workflow also
https://github.com/cossacklabs/themis/blob/master/.github/workflows/test-python.yaml#L56",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,648,2020-06-01T22:28:22Z,2020-06-02T12:02:22Z,2020-06-02T12:02:23Z,MERGED,True,16,23,8,https://github.com/shadinua,Drop Python 2 support,4,"['infrastructure', 'tests', 'compatibility']",https://github.com/cossacklabs/themis/pull/648,https://github.com/shadinua,3,https://github.com/cossacklabs/themis/pull/648#issuecomment-637165316,"Python 2 had reached EOL on 2020-01-01.
In fact, we are not making any changes in this release that break compatibility, but we no longer officially support it. This means that we do not run any CI tests for Python 2, and free to develop code compatible only with Python 3+.","Yep, thanks, already saw it. Fixed.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,649,2020-06-02T18:28:19Z,2020-06-03T07:44:42Z,2020-06-03T07:44:43Z,MERGED,True,9,6,2,https://github.com/shadinua,Fix path in `themis_jni_install` target,3,"['bug', 'infrastructure']",https://github.com/cossacklabs/themis/pull/649,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/649,"It did not take into account DESTDIR variable, so the directory in cd command was incorrect.","It did not take into account DESTDIR variable, so the directory in cd command was incorrect.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,649,2020-06-02T18:28:19Z,2020-06-03T07:44:42Z,2020-06-03T07:44:43Z,MERGED,True,9,6,2,https://github.com/shadinua,Fix path in `themis_jni_install` target,3,"['bug', 'infrastructure']",https://github.com/cossacklabs/themis/pull/649,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/649#issuecomment-637742649,"It did not take into account DESTDIR variable, so the directory in cd command was incorrect.","Yeah, actually... it seems that we should not prepend $(DESTDIR) there.
Normally DESTDIR is used by packaging infrastructure to set up an intermediate directory for filesystem hierarchy that is going to be packaged. That is, things put into $(DESTDIR)$(jni_dir) for packaging will be extracted into jnidir when the package is installed. This piece of code checks whether Java will be able to locate the installed JNI library, either after Themis has been already installed (if DESTDIR is not used), or after the resulting package is installed (if make install is used by make rpm). So we should look for jnidir alone in Java library search paths, without prepending DESTDIR to it.
The issue here, it seems, arises when jnidir does not exist in the host system. This can happen, for example, if there are no JNI libraries installed in the system and cd fails due to obviously missing directory.
The intention here is to normalize the path as jnidir often seems to contain values with multiple slashes like /usr//x86_64-linux-gnu/lib/jni which do not match Java library paths in literal comparison. Unfortunately, this cd && pwd approach does not work if the path does not exist. We need to find a better one, working on both Linux and BSDs with no external tools...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,649,2020-06-02T18:28:19Z,2020-06-03T07:44:42Z,2020-06-03T07:44:43Z,MERGED,True,9,6,2,https://github.com/shadinua,Fix path in `themis_jni_install` target,3,"['bug', 'infrastructure']",https://github.com/cossacklabs/themis/pull/649,https://github.com/shadinua,3,https://github.com/cossacklabs/themis/pull/649#issuecomment-637750050,"It did not take into account DESTDIR variable, so the directory in cd command was incorrect.","When we run make deb, it calls the themis_jni_install target. At the moment we do not have the library installed in the system and do not want install it to system at all. The goal is just to build a package.
In this case:
# target `themis_jni_install` creates dir in package directory structure — OK
mkdir -p build/deb/root/usr//lib/x86_64-linux-gnu/jni
# installs the library
install build/libthemis_jni.so build/deb/root/usr//lib/x86_64-linux-gnu/jni
# and then it tries to `cd` into a non-existent directory, which must not be created at all
jnidir=$(cd ""/usr//lib/x86_64-linux-gnu/jni"" && pwd) && \

So we should here use the actual path.
As an another solution, I think, we could make that block conditional and do not process it during packaging.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,649,2020-06-02T18:28:19Z,2020-06-03T07:44:42Z,2020-06-03T07:44:43Z,MERGED,True,9,6,2,https://github.com/shadinua,Fix path in `themis_jni_install` target,3,"['bug', 'infrastructure']",https://github.com/cossacklabs/themis/pull/649,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/649#issuecomment-637756012,"It did not take into account DESTDIR variable, so the directory in cd command was incorrect.","As an another solution, I think, we could make that block conditional and do not process it during packaging.

Hm... I feel that this can be the most sane decision here.
You typically have to have Java installed to build JNI library. You also typically build packages on the host system for a similar host system — though not always, but we don't really support cross-compilation very well, and it's not that popular nowadays. So it makes sense to check that the package will be compatible with current Java.
However, both the proposed DESTDIR workaround and using jnidir as is cause false negatives in this check, resulting in meaningless warnings. If I have to choose between doing a preliminary sanity check which always fails and not doing it at all, then I'd choose not doing it at all.
Though, the best way is to fix the check so that it's successful. So I'd probably vote for simply removing duplicate slashes from jnidir, unless that breaks packaging in some other way.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,649,2020-06-02T18:28:19Z,2020-06-03T07:44:42Z,2020-06-03T07:44:43Z,MERGED,True,9,6,2,https://github.com/shadinua,Fix path in `themis_jni_install` target,3,"['bug', 'infrastructure']",https://github.com/cossacklabs/themis/pull/649,https://github.com/shadinua,5,https://github.com/cossacklabs/themis/pull/649#issuecomment-637762341,"It did not take into account DESTDIR variable, so the directory in cd command was incorrect.","Though, the best way is to fix the check so that it's successful. So I'd probably vote for simply removing duplicate slashes from jnidir, unless that breaks packaging in some other way.

The issue is not in double slashes, which processed as single in system (but, sure, you're right — we must clean it up). The problem that there are no such path in system:
...
# and then it tries to `cd` into a non-existent directory, which must not be created at all
jnidir=$(cd ""/usr//lib/x86_64-linux-gnu/jni"" && pwd) && \
# The directory has not been created
ls -al /usr/lib/x86_64-linux-gnu/jni
ls: cannot access '/usr/lib/x86_64-linux-gnu/jni': No such file or directory

So I see two ways:

to make the logic inside the check & informational block much more complex
to disable that block on packaging

I'd suggest the second way.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,649,2020-06-02T18:28:19Z,2020-06-03T07:44:42Z,2020-06-03T07:44:43Z,MERGED,True,9,6,2,https://github.com/shadinua,Fix path in `themis_jni_install` target,3,"['bug', 'infrastructure']",https://github.com/cossacklabs/themis/pull/649,https://github.com/shadinua,6,https://github.com/cossacklabs/themis/pull/649#issuecomment-637781671,"It did not take into account DESTDIR variable, so the directory in cd command was incorrect.","I plan to wait until morning. If the issue with test will not be resolved, I'll merge the commit.
Thanks for comments!",True,"{'THUMBS_UP': ['https://github.com/ilammy'], 'EYES': ['https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,650,2020-06-04T14:14:21Z,2020-06-04T16:35:55Z,2020-06-04T16:35:56Z,MERGED,True,47,0,3,https://github.com/shadinua,Add simple C++ test,2,['infrastructure'],https://github.com/cossacklabs/themis/pull/650,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/650,"Builds a primitive C++ application using themis and soter libraries located at standard system paths. This allows us to check that Themis library and Themis C++ development environment have been properly installed on the target system.
# Build & run test
make test_cpp_simple
# Clean
make clean_themispp_simple_test
Yes, naming looks a bit strange, but now this is the approach taken in Makefiles. Hope we can improve it someday.","Builds a primitive C++ application using themis and soter libraries located at standard system paths. This allows us to check that Themis library and Themis C++ development environment have been properly installed on the target system.
# Build & run test
make test_cpp_simple
# Clean
make clean_themispp_simple_test
Yes, naming looks a bit strange, but now this is the approach taken in Makefiles. Hope we can improve it someday.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,651,2020-06-04T18:45:07Z,2020-06-04T19:51:38Z,2020-06-22T12:44:38Z,MERGED,True,4,8,1,https://github.com/ilammy,Use correct libdir for multiarch Debian,2,"['infrastructure', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/651,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/651,"Debian multiarch is a little bit complicated, one particularly important thing is the installation directory for libraries. For multiarch-enabled packages it should include the ""target triple"". However, for Debian this is not your usual target triple, but normalized target triple.
This is not really noticeable on x86_64 but on 32-bit x86 systems compilers tend to report {i386,i486,i586,i686}-linux-gnu when the correct one is only i386-linux-gnu.
We should use the correct, normalized triplet since that's what dynamic loader uses. If the library is installed into an incorrect multiarch subdirectory then it will fail to load.
Instead of asking the compiler, ask dpkg for the multiarch-correct triplet for the system on which we are building the package. We always build packages targeting the host system so this is correct approach.
Checklist

 Change is covered by automated tests (only on BuiltBot)
 The coding guidelines are followed
 Changelog is updated (nothing notable)","Debian multiarch is a little bit complicated, one particularly important thing is the installation directory for libraries. For multiarch-enabled packages it should include the ""target triple"". However, for Debian this is not your usual target triple, but normalized target triple.
This is not really noticeable on x86_64 but on 32-bit x86 systems compilers tend to report {i386,i486,i586,i686}-linux-gnu when the correct one is only i386-linux-gnu.
We should use the correct, normalized triplet since that's what dynamic loader uses. If the library is installed into an incorrect multiarch subdirectory then it will fail to load.
Instead of asking the compiler, ask dpkg for the multiarch-correct triplet for the system on which we are building the package. We always build packages targeting the host system so this is correct approach.
Checklist

 Change is covered by automated tests (only on BuiltBot)
 The coding guidelines are followed
 Changelog is updated (nothing notable)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,651,2020-06-04T18:45:07Z,2020-06-04T19:51:38Z,2020-06-22T12:44:38Z,MERGED,True,4,8,1,https://github.com/ilammy,Use correct libdir for multiarch Debian,2,"['infrastructure', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/651,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/651#issuecomment-639058388,"Debian multiarch is a little bit complicated, one particularly important thing is the installation directory for libraries. For multiarch-enabled packages it should include the ""target triple"". However, for Debian this is not your usual target triple, but normalized target triple.
This is not really noticeable on x86_64 but on 32-bit x86 systems compilers tend to report {i386,i486,i586,i686}-linux-gnu when the correct one is only i386-linux-gnu.
We should use the correct, normalized triplet since that's what dynamic loader uses. If the library is installed into an incorrect multiarch subdirectory then it will fail to load.
Instead of asking the compiler, ask dpkg for the multiarch-correct triplet for the system on which we are building the package. We always build packages targeting the host system so this is correct approach.
Checklist

 Change is covered by automated tests (only on BuiltBot)
 The coding guidelines are followed
 Changelog is updated (nothing notable)","😂
@shadinua and I have managed to make similar changes at the same time (#652).
I've merged the changes. Now this PR contains our united, consolidated effort.",True,{'THUMBS_UP': ['https://github.com/shadinua']}
cossacklabs/themis,https://github.com/cossacklabs/themis,652,2020-06-04T18:50:57Z,2020-06-04T19:07:02Z,2020-06-08T16:18:41Z,CLOSED,False,5,8,1,https://github.com/shadinua,Correct detecting of installing paths for i386,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/652,https://github.com/shadinua,1,https://github.com/cossacklabs/themis/pull/652,"The approach we used previously, was based on getting the cc -dumpmachine value as a part of the target directory. It works well on x86_64, but on i386 the incorrect directory was drawn up.
= x86_64
[/usr]/lib/x86_64-linux-gnu
$ cc -dumpmachine
x86_64-linux-gnu

$ ld --verbose | grep SEARCH_DIR | tr -s ' ;' \\012
SEARCH_DIR(""=/usr/local/lib/x86_64-linux-gnu"")
SEARCH_DIR(""=/lib/x86_64-linux-gnu"")
SEARCH_DIR(""=/usr/lib/x86_64-linux-gnu"")
SEARCH_DIR(""=/usr/lib/x86_64-linux-gnu64"")
SEARCH_DIR(""=/usr/local/lib64"")
SEARCH_DIR(""=/lib64"")
SEARCH_DIR(""=/usr/lib64"")
SEARCH_DIR(""=/usr/local/lib"")
SEARCH_DIR(""=/lib"")
SEARCH_DIR(""=/usr/lib"")
SEARCH_DIR(""=/usr/x86_64-linux-gnu/lib64"")
SEARCH_DIR(""=/usr/x86_64-linux-gnu/lib"")

= i386
[/usr]/lib/i686-linux-gnu
$ cc -dumpmachine
i686-linux-gnu

$ ld --verbose | grep SEARCH_DIR | tr -s ' ;' \\012
SEARCH_DIR(""=/usr/local/lib/i386-linux-gnu"")
SEARCH_DIR(""=/lib/i386-linux-gnu"")
SEARCH_DIR(""=/usr/lib/i386-linux-gnu"")
SEARCH_DIR(""=/usr/local/lib32"")
SEARCH_DIR(""=/lib32"")
SEARCH_DIR(""=/usr/lib32"")
SEARCH_DIR(""=/usr/local/lib"")
SEARCH_DIR(""=/lib"")
SEARCH_DIR(""=/usr/lib"")
SEARCH_DIR(""=/usr/i686-linux-gnu/lib32"")
SEARCH_DIR(""=/usr/i686-linux-gnu/lib"")

So the suggested solution is to simply use i386-linux-gnu instead of i686-linux-gnu, which works well on all i386 Debian/Ubuntu distributives.","The approach we used previously, was based on getting the cc -dumpmachine value as a part of the target directory. It works well on x86_64, but on i386 the incorrect directory was drawn up.
= x86_64
[/usr]/lib/x86_64-linux-gnu
$ cc -dumpmachine
x86_64-linux-gnu

$ ld --verbose | grep SEARCH_DIR | tr -s ' ;' \\012
SEARCH_DIR(""=/usr/local/lib/x86_64-linux-gnu"")
SEARCH_DIR(""=/lib/x86_64-linux-gnu"")
SEARCH_DIR(""=/usr/lib/x86_64-linux-gnu"")
SEARCH_DIR(""=/usr/lib/x86_64-linux-gnu64"")
SEARCH_DIR(""=/usr/local/lib64"")
SEARCH_DIR(""=/lib64"")
SEARCH_DIR(""=/usr/lib64"")
SEARCH_DIR(""=/usr/local/lib"")
SEARCH_DIR(""=/lib"")
SEARCH_DIR(""=/usr/lib"")
SEARCH_DIR(""=/usr/x86_64-linux-gnu/lib64"")
SEARCH_DIR(""=/usr/x86_64-linux-gnu/lib"")

= i386
[/usr]/lib/i686-linux-gnu
$ cc -dumpmachine
i686-linux-gnu

$ ld --verbose | grep SEARCH_DIR | tr -s ' ;' \\012
SEARCH_DIR(""=/usr/local/lib/i386-linux-gnu"")
SEARCH_DIR(""=/lib/i386-linux-gnu"")
SEARCH_DIR(""=/usr/lib/i386-linux-gnu"")
SEARCH_DIR(""=/usr/local/lib32"")
SEARCH_DIR(""=/lib32"")
SEARCH_DIR(""=/usr/lib32"")
SEARCH_DIR(""=/usr/local/lib"")
SEARCH_DIR(""=/lib"")
SEARCH_DIR(""=/usr/lib"")
SEARCH_DIR(""=/usr/i686-linux-gnu/lib32"")
SEARCH_DIR(""=/usr/i686-linux-gnu/lib"")

So the suggested solution is to simply use i386-linux-gnu instead of i686-linux-gnu, which works well on all i386 Debian/Ubuntu distributives.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,652,2020-06-04T18:50:57Z,2020-06-04T19:07:02Z,2020-06-08T16:18:41Z,CLOSED,False,5,8,1,https://github.com/shadinua,Correct detecting of installing paths for i386,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/652,https://github.com/shadinua,2,https://github.com/cossacklabs/themis/pull/652#issuecomment-639059189,"The approach we used previously, was based on getting the cc -dumpmachine value as a part of the target directory. It works well on x86_64, but on i386 the incorrect directory was drawn up.
= x86_64
[/usr]/lib/x86_64-linux-gnu
$ cc -dumpmachine
x86_64-linux-gnu

$ ld --verbose | grep SEARCH_DIR | tr -s ' ;' \\012
SEARCH_DIR(""=/usr/local/lib/x86_64-linux-gnu"")
SEARCH_DIR(""=/lib/x86_64-linux-gnu"")
SEARCH_DIR(""=/usr/lib/x86_64-linux-gnu"")
SEARCH_DIR(""=/usr/lib/x86_64-linux-gnu64"")
SEARCH_DIR(""=/usr/local/lib64"")
SEARCH_DIR(""=/lib64"")
SEARCH_DIR(""=/usr/lib64"")
SEARCH_DIR(""=/usr/local/lib"")
SEARCH_DIR(""=/lib"")
SEARCH_DIR(""=/usr/lib"")
SEARCH_DIR(""=/usr/x86_64-linux-gnu/lib64"")
SEARCH_DIR(""=/usr/x86_64-linux-gnu/lib"")

= i386
[/usr]/lib/i686-linux-gnu
$ cc -dumpmachine
i686-linux-gnu

$ ld --verbose | grep SEARCH_DIR | tr -s ' ;' \\012
SEARCH_DIR(""=/usr/local/lib/i386-linux-gnu"")
SEARCH_DIR(""=/lib/i386-linux-gnu"")
SEARCH_DIR(""=/usr/lib/i386-linux-gnu"")
SEARCH_DIR(""=/usr/local/lib32"")
SEARCH_DIR(""=/lib32"")
SEARCH_DIR(""=/usr/lib32"")
SEARCH_DIR(""=/usr/local/lib"")
SEARCH_DIR(""=/lib"")
SEARCH_DIR(""=/usr/lib"")
SEARCH_DIR(""=/usr/i686-linux-gnu/lib32"")
SEARCH_DIR(""=/usr/i686-linux-gnu/lib"")

So the suggested solution is to simply use i386-linux-gnu instead of i686-linux-gnu, which works well on all i386 Debian/Ubuntu distributives.","Since we suddenly got two PRs on the same issue, take the best from both and update the PR #651.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,653,2020-06-08T06:40:39Z,2020-06-08T11:37:13Z,2020-06-08T11:37:19Z,MERGED,True,28,10,3,https://github.com/ilammy,Pin Emscripten toolchain to 1.39.16-fastcomp,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/653,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/653,"Starting with Emscripten 1.39.17-fastcomp, the compiler is now printing warnings, urging to migrate to the upstream flavor:
emcc: error: the fastomp compiler is deprecated.  Please switch
to the upstream llvm backend as soon as possible and open issues
if you have trouble doing so [-Wfastcomp] [-Werror]

Unfortunately, we cannot migrate at the moment because the upstream compiler is not able to build and link everything. While we're investigating the issues, we need this warning gone – we keep a non-negotiable “treat warnings as errors” policy. This makes out builds red.
We cannot suppress this particular warning with -Wno-fastcomp because it affects the BoringSSL build as well. They have -Wall added after all custom flags so we are not able to suppress this warning there.
Therefore, for the time being, let's pin Emscripten toolchain to the latest good version that does not emit warnings. I got the message, I'll work on supporting the upstream flavor in the next release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (we'll keep a note it documentation)","Starting with Emscripten 1.39.17-fastcomp, the compiler is now printing warnings, urging to migrate to the upstream flavor:
emcc: error: the fastomp compiler is deprecated.  Please switch
to the upstream llvm backend as soon as possible and open issues
if you have trouble doing so [-Wfastcomp] [-Werror]

Unfortunately, we cannot migrate at the moment because the upstream compiler is not able to build and link everything. While we're investigating the issues, we need this warning gone – we keep a non-negotiable “treat warnings as errors” policy. This makes out builds red.
We cannot suppress this particular warning with -Wno-fastcomp because it affects the BoringSSL build as well. They have -Wall added after all custom flags so we are not able to suppress this warning there.
Therefore, for the time being, let's pin Emscripten toolchain to the latest good version that does not emit warnings. I got the message, I'll work on supporting the upstream flavor in the next release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (we'll keep a note it documentation)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,654,2020-06-11T17:37:33Z,2020-06-11T18:45:27Z,2020-06-11T18:48:22Z,MERGED,True,28,9,4,https://github.com/ilammy,Support Node.js v14,3,"['infrastructure', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/654,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/654,"This is the version which is going to turn into LTS in October 2020. It's the current stable release. LTS is recommended for general use, but some packages already deliver the stable version (e.g., Homebrew).
There are probably some deprecations that we need to take care of, but otherwise we can squeese this support claim into the release window for JsThemis 0.13 and WasmThemis 0.13.
See https://nodejs.org/en/download/ for information on current Node.js releases.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","This is the version which is going to turn into LTS in October 2020. It's the current stable release. LTS is recommended for general use, but some packages already deliver the stable version (e.g., Homebrew).
There are probably some deprecations that we need to take care of, but otherwise we can squeese this support claim into the release window for JsThemis 0.13 and WasmThemis 0.13.
See https://nodejs.org/en/download/ for information on current Node.js releases.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,654,2020-06-11T17:37:33Z,2020-06-11T18:45:27Z,2020-06-11T18:48:22Z,MERGED,True,28,9,4,https://github.com/ilammy,Support Node.js v14,3,"['infrastructure', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/654,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/654#issuecomment-642864050,"This is the version which is going to turn into LTS in October 2020. It's the current stable release. LTS is recommended for general use, but some packages already deliver the stable version (e.g., Homebrew).
There are probably some deprecations that we need to take care of, but otherwise we can squeese this support claim into the release window for JsThemis 0.13 and WasmThemis 0.13.
See https://nodejs.org/en/download/ for information on current Node.js releases.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","The only failing test is Android run on CircleCI which I'm going to ignore since it has nothing to do with the essence of this change.
It kinda sucks to see it fail once in a while because apparently we can't have good things.
It also kinda sucks to see Android tests run on each commit and each PR, even when no code changed that could affect Android. However, CircleCI does not have a convenient way to filter pipeline runs – or however it's called now – based on PR changes. There is a way to parse the diff yourself, but I'm not going to bother with this hack.
I'm merging it red, deal with it 🕶️",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,654,2020-06-11T17:37:33Z,2020-06-11T18:45:27Z,2020-06-11T18:48:22Z,MERGED,True,28,9,4,https://github.com/ilammy,Support Node.js v14,3,"['infrastructure', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/654,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/654#issuecomment-642865531,"This is the version which is going to turn into LTS in October 2020. It's the current stable release. LTS is recommended for general use, but some packages already deliver the stable version (e.g., Homebrew).
There are probably some deprecations that we need to take care of, but otherwise we can squeese this support claim into the release window for JsThemis 0.13 and WasmThemis 0.13.
See https://nodejs.org/en/download/ for information on current Node.js releases.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","I'm merging it red, deal with it 🕶️

Hack the planet 😈",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,655,2020-06-12T13:12:39Z,2020-06-12T13:44:11Z,2020-06-12T13:44:15Z,MERGED,True,13,8,3,https://github.com/ilammy,Make Java source ASCII-only,1,"['W-JavaThemis :coffee:', 'tests']",https://github.com/cossacklabs/themis/pull/655,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/655,"Some Java compilers use US-ASCII encoding by default and issue warnings when the source file contains non-ASCII characters. Some tests for novel passphrase API must include non-ASCII data so we have to do this.
Replace non-ASCII characters with their ASCII analogues for JavaDoc comments, or escape actual values in the source code. This makes Java compilers happy. (In particular, our own BuildBot should stop being red because of some Java compilers on 32-bit machines using ASCII.)
Set the encoding we pass to javac in Gradle files. This way our build system will issue warnings – treated as errors – when non-ASCII characters are used in Java source. Now if the users build Themis tests with their own toolchain, their compilers will not issue warnings as well.
Kotlin source code is always UTF-8 by design and this cannot be changed. We do not need to do anything for Kotlin, the tests may continue using non-ASCII test strings.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Some Java compilers use US-ASCII encoding by default and issue warnings when the source file contains non-ASCII characters. Some tests for novel passphrase API must include non-ASCII data so we have to do this.
Replace non-ASCII characters with their ASCII analogues for JavaDoc comments, or escape actual values in the source code. This makes Java compilers happy. (In particular, our own BuildBot should stop being red because of some Java compilers on 32-bit machines using ASCII.)
Set the encoding we pass to javac in Gradle files. This way our build system will issue warnings – treated as errors – when non-ASCII characters are used in Java source. Now if the users build Themis tests with their own toolchain, their compilers will not issue warnings as well.
Kotlin source code is always UTF-8 by design and this cannot be changed. We do not need to do anything for Kotlin, the tests may continue using non-ASCII test strings.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,655,2020-06-12T13:12:39Z,2020-06-12T13:44:11Z,2020-06-12T13:44:15Z,MERGED,True,13,8,3,https://github.com/ilammy,Make Java source ASCII-only,1,"['W-JavaThemis :coffee:', 'tests']",https://github.com/cossacklabs/themis/pull/655,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/655#issuecomment-643274574,"Some Java compilers use US-ASCII encoding by default and issue warnings when the source file contains non-ASCII characters. Some tests for novel passphrase API must include non-ASCII data so we have to do this.
Replace non-ASCII characters with their ASCII analogues for JavaDoc comments, or escape actual values in the source code. This makes Java compilers happy. (In particular, our own BuildBot should stop being red because of some Java compilers on 32-bit machines using ASCII.)
Set the encoding we pass to javac in Gradle files. This way our build system will issue warnings – treated as errors – when non-ASCII characters are used in Java source. Now if the users build Themis tests with their own toolchain, their compilers will not issue warnings as well.
Kotlin source code is always UTF-8 by design and this cannot be changed. We do not need to do anything for Kotlin, the tests may continue using non-ASCII test strings.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Heh, swift uses utf-8 by default too.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,656,2020-06-12T13:24:16Z,2020-06-12T14:12:46Z,2020-06-12T14:12:49Z,MERGED,True,2,0,2,https://github.com/ilammy,Improve path-based build triggers,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/656,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/656,"Due to hysterical raisins, JavaThemis test suite is located in tests/themis directory (shared with Themis Core tests). Any changes there are triggering Test Core and WasmThemis test runs as well.
Android test suite is heavy enough on its own, no need to make it run longer than necessary.
Add an exclusion to do not trigger Themis Core and WasmThemis test suites when JavaThemis tests are modified.
P.S. This change will nevertheless trigger a build because the build configurations for Themis Core and WasmThemis have changed. This should not be the case for future PRs.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Due to hysterical raisins, JavaThemis test suite is located in tests/themis directory (shared with Themis Core tests). Any changes there are triggering Test Core and WasmThemis test runs as well.
Android test suite is heavy enough on its own, no need to make it run longer than necessary.
Add an exclusion to do not trigger Themis Core and WasmThemis test suites when JavaThemis tests are modified.
P.S. This change will nevertheless trigger a build because the build configurations for Themis Core and WasmThemis have changed. This should not be the case for future PRs.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,658,2020-06-16T11:01:12Z,2020-06-16T13:42:43Z,2020-06-16T13:42:48Z,MERGED,True,42,8,2,https://github.com/ilammy,Fix Secure Session serialization format,2,"['bug', 'core', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/658,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/658,"secure_session_save() saves short serialized Secure Session state.
That is, it writes is_client as 4-byte value while its size in SESSION_CTX_SERIZALIZED_SIZE is computed as sizeof(bool) which is 1 byte on most platforms. This causes 3 least significant bytes of in_seq being missing from the serialized data.
Correct size of Secure Session state is 60 bytes, we report only 57.
This issue is not detected by unit tests of JavaThemis—the only high-level wrapper supporting this interface—which works only because the allocated memory for the output array is slightly bigger than requested 57 bytes, extra 3 bytes written past-the-end remain there in RAM and the unit test generally works, if the data stays where it is. However, sometimes garbage collection occurs at the right moment and the issue manifests itself as a failing Secure Session test.
Now the output size is reported correctly and all Secure Session data is written within the allocated bounds.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (in case of notable or breaking changes)","secure_session_save() saves short serialized Secure Session state.
That is, it writes is_client as 4-byte value while its size in SESSION_CTX_SERIZALIZED_SIZE is computed as sizeof(bool) which is 1 byte on most platforms. This causes 3 least significant bytes of in_seq being missing from the serialized data.
Correct size of Secure Session state is 60 bytes, we report only 57.
This issue is not detected by unit tests of JavaThemis—the only high-level wrapper supporting this interface—which works only because the allocated memory for the output array is slightly bigger than requested 57 bytes, extra 3 bytes written past-the-end remain there in RAM and the unit test generally works, if the data stays where it is. However, sometimes garbage collection occurs at the right moment and the issue manifests itself as a failing Secure Session test.
Now the output size is reported correctly and all Secure Session data is written within the allocated bounds.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (in case of notable or breaking changes)",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,659,2020-06-16T12:05:51Z,2020-06-16T13:43:01Z,2020-06-16T13:43:06Z,MERGED,True,20,0,3,https://github.com/ilammy,Deprecate Secure Session serialization API,1,"['W-JavaThemis :coffee:', 'compatibility']",https://github.com/cossacklabs/themis/pull/659,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/659,"For a long time, serialization of Secure Session state has been available only in JavaThemis. This API did not receive much use and/or testing. Recently we have discovered a serious bug in Themis Core which affects serialization (#658). Apparently, no one has noticed it before.
As such, we are not sure that this API is useful in its current form. Let's mark it deprecated for now. It's going to either disappear completely in the next release, or be replaced with a better API after the serialization feature gets more testing, or the existing methods may be un-deprecated back as is.
There is no specific plan for this feature as of Themis 0.13, but eventually it will be supported across all languages and platforms.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation (did not bother)
 Changelog is updated","For a long time, serialization of Secure Session state has been available only in JavaThemis. This API did not receive much use and/or testing. Recently we have discovered a serious bug in Themis Core which affects serialization (#658). Apparently, no one has noticed it before.
As such, we are not sure that this API is useful in its current form. Let's mark it deprecated for now. It's going to either disappear completely in the next release, or be replaced with a better API after the serialization feature gets more testing, or the existing methods may be un-deprecated back as is.
There is no specific plan for this feature as of Themis 0.13, but eventually it will be supported across all languages and platforms.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation (did not bother)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,659,2020-06-16T12:05:51Z,2020-06-16T13:43:01Z,2020-06-16T13:43:06Z,MERGED,True,20,0,3,https://github.com/ilammy,Deprecate Secure Session serialization API,1,"['W-JavaThemis :coffee:', 'compatibility']",https://github.com/cossacklabs/themis/pull/659,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/659#issuecomment-644740110,"For a long time, serialization of Secure Session state has been available only in JavaThemis. This API did not receive much use and/or testing. Recently we have discovered a serious bug in Themis Core which affects serialization (#658). Apparently, no one has noticed it before.
As such, we are not sure that this API is useful in its current form. Let's mark it deprecated for now. It's going to either disappear completely in the next release, or be replaced with a better API after the serialization feature gets more testing, or the existing methods may be un-deprecated back as is.
There is no specific plan for this feature as of Themis 0.13, but eventually it will be supported across all languages and platforms.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation (did not bother)
 Changelog is updated","Wonderful.
Dear users, if you're affected with this change, please let us know at dev@cossacklabs.com.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,660,2020-06-22T15:46:33Z,2020-06-23T10:56:30Z,2020-06-23T10:56:34Z,MERGED,True,152,22,1,https://github.com/ilammy,Update and clean up changelog,4,['docs :books:'],https://github.com/cossacklabs/themis/pull/660,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/660,"Update the changelog for Themis 0.13. The release date is still pending so I do not cut the release there. It will be done together with bumping the versions.
This PR adds some missing stuff to ensure all changes are mentioned, restructures some parts, and improves highlights.
Note that the links to [updated] documentation still lead to the current docs. We should update them once we decide how the new docs are going to be hosted. If we forget to update them, the redirects should kick in and forward the users to the new docs anyway.
Checklist

 Changelog is updated

Yea 😎 Best checklist of my life.","Update the changelog for Themis 0.13. The release date is still pending so I do not cut the release there. It will be done together with bumping the versions.
This PR adds some missing stuff to ensure all changes are mentioned, restructures some parts, and improves highlights.
Note that the links to [updated] documentation still lead to the current docs. We should update them once we decide how the new docs are going to be hosted. If we forget to update them, the redirects should kick in and forward the users to the new docs anyway.
Checklist

 Changelog is updated

Yea 😎 Best checklist of my life.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,663,2020-07-07T11:15:51Z,2020-07-07T11:55:47Z,2020-07-07T12:02:00Z,MERGED,True,12,0,3,https://github.com/ilammy,Pin emsdk to avoid regression,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/663,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/663,"The current HEAD of emsdk repository includes a change that causes the builds to fail with an error:
Adding directories to PATH:
PATH += /home/user/emsdk
PATH += /home/user/emsdk/fastcomp/emscripten
PATH += /home/user/emsdk/node/12.18.1_64bit/bin

Setting environment variables:
EMSDK = /home/user/emsdk
EM_CONFIG = /home/user/emsdk/.emscripten
EM_CACHE = /home/user/emsdk/fastcomp/emscripten/cache
EMSDK_NODE = /home/user/emsdk/node/12.18.1_64bit/bin/node
/home/user/emsdk/emsdk_env.sh: line 26: /home/user/emsdk/emsdk_set_env.sh: No such file or directory

The change has optimized environment variable setup. Apparently, it has issues. To avoid breaking our builds, roll back to the previous known good state for the time being. The issue has been reported to Emscripten, but it's not clear when it's going to be reverted and fixed, so we'd rather not depend on that right now, when Themis release is brewing.

@shadinua, this change needs to be applied to Buildbot infra as well. It's currently broken all over the place because of that.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","The current HEAD of emsdk repository includes a change that causes the builds to fail with an error:
Adding directories to PATH:
PATH += /home/user/emsdk
PATH += /home/user/emsdk/fastcomp/emscripten
PATH += /home/user/emsdk/node/12.18.1_64bit/bin

Setting environment variables:
EMSDK = /home/user/emsdk
EM_CONFIG = /home/user/emsdk/.emscripten
EM_CACHE = /home/user/emsdk/fastcomp/emscripten/cache
EMSDK_NODE = /home/user/emsdk/node/12.18.1_64bit/bin/node
/home/user/emsdk/emsdk_env.sh: line 26: /home/user/emsdk/emsdk_set_env.sh: No such file or directory

The change has optimized environment variable setup. Apparently, it has issues. To avoid breaking our builds, roll back to the previous known good state for the time being. The issue has been reported to Emscripten, but it's not clear when it's going to be reverted and fixed, so we'd rather not depend on that right now, when Themis release is brewing.

@shadinua, this change needs to be applied to Buildbot infra as well. It's currently broken all over the place because of that.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,664,2020-07-07T11:38:49Z,2020-07-07T14:36:54Z,2020-07-07T14:36:59Z,MERGED,True,12,1,3,https://github.com/ilammy,Stable boilerplate about autogenerated code,3,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/664,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/664,"Recently released Bindgen 0.54.1 includes a change which adds Bindgen version into generated files by default. Since we keep the generated files checked in and verify that it does not change, this feature breaks our build by making it nonreproducible.
That is, the comment now reads
/* automatically generated by rust-bindgen 0.54.1 */

and will change with each new version of Bindgen.
Use an option to disable the autogenerated comment completely and replace it with our own warning about manually editing the file.
This means that we require Bindgen 0.54.1+ (for developing RustThemis, not for building software using it). RustThemis developers are likely to use the latest version (duh), but point it out in the changelog anyway.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","Recently released Bindgen 0.54.1 includes a change which adds Bindgen version into generated files by default. Since we keep the generated files checked in and verify that it does not change, this feature breaks our build by making it nonreproducible.
That is, the comment now reads
/* automatically generated by rust-bindgen 0.54.1 */

and will change with each new version of Bindgen.
Use an option to disable the autogenerated comment completely and replace it with our own warning about manually editing the file.
This means that we require Bindgen 0.54.1+ (for developing RustThemis, not for building software using it). RustThemis developers are likely to use the latest version (duh), but point it out in the changelog anyway.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,665,2020-07-07T13:13:41Z,2020-07-07T13:48:28Z,2020-07-07T13:48:38Z,MERGED,True,4,35,1,https://github.com/ilammy,Do not cache Emscripten installation,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/665,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/665,"Recent changes that roll back Emscripten repository pollute the cache and now it's not possible to run git pull from the rolled back state. This can break unrelated builds.
Actually, GitHub Actions have been running without cache and Emscripten seems to be installing pretty fast. So let's drop the cache.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Recent changes that roll back Emscripten repository pollute the cache and now it's not possible to run git pull from the rolled back state. This can break unrelated builds.
Actually, GitHub Actions have been running without cache and Emscripten seems to be installing pretty fast. So let's drop the cache.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,665,2020-07-07T13:13:41Z,2020-07-07T13:48:28Z,2020-07-07T13:48:38Z,MERGED,True,4,35,1,https://github.com/ilammy,Do not cache Emscripten installation,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/665,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/665#issuecomment-654861347,"Recent changes that roll back Emscripten repository pollute the cache and now it's not possible to run git pull from the rolled back state. This can break unrelated builds.
Actually, GitHub Actions have been running without cache and Emscripten seems to be installing pretty fast. So let's drop the cache.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",Playing with CICD is the best,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,665,2020-07-07T13:13:41Z,2020-07-07T13:48:28Z,2020-07-07T13:48:38Z,MERGED,True,4,35,1,https://github.com/ilammy,Do not cache Emscripten installation,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/665,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/665#issuecomment-654871525,"Recent changes that roll back Emscripten repository pollute the cache and now it's not possible to run git pull from the rolled back state. This can break unrelated builds.
Actually, GitHub Actions have been running without cache and Emscripten seems to be installing pretty fast. So let's drop the cache.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",I hate how it takes 30+ minutes to get feedback from CI 😞 Or even a multiple of that if you have several PRs merged in a row and have to wait for the tests to complete for the updated master branch.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,665,2020-07-07T13:13:41Z,2020-07-07T13:48:28Z,2020-07-07T13:48:38Z,MERGED,True,4,35,1,https://github.com/ilammy,Do not cache Emscripten installation,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/665,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/665#issuecomment-654874362,"Recent changes that roll back Emscripten repository pollute the cache and now it's not possible to run git pull from the rolled back state. This can break unrelated builds.
Actually, GitHub Actions have been running without cache and Emscripten seems to be installing pretty fast. So let's drop the cache.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Only to find out 15 minutes later that this ███ █ ██ Android build broke.
And just after that you get an email:

We would love your feedback! How likely are you to recommend CircleCI?
Please share your experience with CircleCI in the survey below. It is only one question and will take a minute or less. Your answers will help us make CircleCI even better.

*sigh*",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,666,2020-07-07T17:03:07Z,2020-07-07T19:01:37Z,2020-07-07T19:01:38Z,MERGED,True,78,97,1,https://github.com/vixentael,Update readme for 0.13,5,['docs :books:'],https://github.com/cossacklabs/themis/pull/666,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/666,"Updating readme, adding more relevant info, removing less relevant, linking to a new docserver.
Best view here: https://github.com/cossacklabs/themis/blob/vxxtl/readme/README.md","Updating readme, adding more relevant info, removing less relevant, linking to a new docserver.
Best view here: https://github.com/cossacklabs/themis/blob/vxxtl/readme/README.md",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,666,2020-07-07T17:03:07Z,2020-07-07T19:01:37Z,2020-07-07T19:01:38Z,MERGED,True,78,97,1,https://github.com/vixentael,Update readme for 0.13,5,['docs :books:'],https://github.com/cossacklabs/themis/pull/666,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/666#issuecomment-655026967,"Updating readme, adding more relevant info, removing less relevant, linking to a new docserver.
Best view here: https://github.com/cossacklabs/themis/blob/vxxtl/readme/README.md","0.13
#666

omigod 😲",True,{'LAUGH': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,667,2020-07-08T12:19:18Z,2020-07-08T13:13:48Z,2020-07-08T13:13:54Z,MERGED,True,56,33,25,https://github.com/ilammy,Themis 0.13,4,['release'],https://github.com/cossacklabs/themis/pull/667,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/667,"Bump the project version to 0.13 and cut the release in the changelog. After this PR is merged, the resulting commit will be tagged as 0.13.0.
(At some point in the future I'd like to get rid of RustThemis-specific changelog. It's a historical artifact anyway.)
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (will be updated after the release)
 Changelog is updated (in case of notable or breaking changes)","Bump the project version to 0.13 and cut the release in the changelog. After this PR is merged, the resulting commit will be tagged as 0.13.0.
(At some point in the future I'd like to get rid of RustThemis-specific changelog. It's a historical artifact anyway.)
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (will be updated after the release)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,668,2020-07-08T13:45:39Z,2020-07-08T13:50:03Z,2020-07-08T13:50:13Z,MERGED,True,8,8,8,https://github.com/ilammy,Require Themis 0.13 in example projects,1,"['release', 'infrastructure']",https://github.com/cossacklabs/themis/pull/668,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/668,"The current release playbook implied that this should be updated after the release is complete, but apparently example project versions need to be updated simultaneously with tagging 0.13.0.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date","The current release playbook implied that this should be updated after the release is complete, but apparently example project versions need to be updated simultaneously with tagging 0.13.0.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,669,2020-07-09T14:24:50Z,2020-07-09T14:55:48Z,2020-07-09T14:55:57Z,MERGED,True,16,15,3,https://github.com/ilammy,Fix AndroidThemis publishing,4,"['W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/669,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/669,"During the release procedures we have found that AndroidThemis fails to publish correctly. This seems to be a side effect brought by Gradle configuration changes such as #633 and #637. Since we don't release that often and there is no automated testing for the release flow, the issues have been discovered only now.
Initially I suspected that the configuration was wrong in some way—and it was, but it's not that broken. After several attempts to revert and roll back version of Gradle, its plugin, etc. I have finally found that the Bintray publishing plugin should be upgraded. Apparently, it is required to work with new Gradle plugin. (We need to upgrade Gradle to at least 4.9 to support Kotlin.)
Technical details are in the commit messages. On visible side effect is that Android SDK now must be installed and configured to build desktop JavaThemis. This is because we keep both Android and desktop Java in the same Gradle configuration and Gradle build dependencies are resolved for all subprojects (regardless of what you're building).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","During the release procedures we have found that AndroidThemis fails to publish correctly. This seems to be a side effect brought by Gradle configuration changes such as #633 and #637. Since we don't release that often and there is no automated testing for the release flow, the issues have been discovered only now.
Initially I suspected that the configuration was wrong in some way—and it was, but it's not that broken. After several attempts to revert and roll back version of Gradle, its plugin, etc. I have finally found that the Bintray publishing plugin should be upgraded. Apparently, it is required to work with new Gradle plugin. (We need to upgrade Gradle to at least 4.9 to support Kotlin.)
Technical details are in the commit messages. On visible side effect is that Android SDK now must be installed and configured to build desktop JavaThemis. This is because we keep both Android and desktop Java in the same Gradle configuration and Gradle build dependencies are resolved for all subprojects (regardless of what you're building).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,671,2020-07-09T16:03:32Z,2020-07-09T16:08:30Z,2020-07-09T16:08:36Z,MERGED,True,5,2,1,https://github.com/ilammy,Keep on-demand configuration enabled,1,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/671,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/671,"As previously noted, having this option disabled makes it so that Android SDK is required to build desktop Java targets (:desktop...). Unfortunately, this breaks Buildbot checks which does not have Android SDK installed it is build environments.
However, we also need to disable this option to work around an issue in Bintray publishing (#669).
Since publishing to Bintray is a manual action and build checks are automatic, let's favor the automation. We will have to manually disable the option when making AndroidThemis release, but keep it enabled for regular builds to pass. Hopefully, we'll fix the issue some day.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation","As previously noted, having this option disabled makes it so that Android SDK is required to build desktop Java targets (:desktop...). Unfortunately, this breaks Buildbot checks which does not have Android SDK installed it is build environments.
However, we also need to disable this option to work around an issue in Bintray publishing (#669).
Since publishing to Bintray is a manual action and build checks are automatic, let's favor the automation. We will have to manually disable the option when making AndroidThemis release, but keep it enabled for regular builds to pass. Hopefully, we'll fix the issue some day.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,671,2020-07-09T16:03:32Z,2020-07-09T16:08:30Z,2020-07-09T16:08:36Z,MERGED,True,5,2,1,https://github.com/ilammy,Keep on-demand configuration enabled,1,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/671,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/671#issuecomment-656216270,"As previously noted, having this option disabled makes it so that Android SDK is required to build desktop Java targets (:desktop...). Unfortunately, this breaks Buildbot checks which does not have Android SDK installed it is build environments.
However, we also need to disable this option to work around an issue in Bintray publishing (#669).
Since publishing to Bintray is a manual action and build checks are automatic, let's favor the automation. We will have to manually disable the option when making AndroidThemis release, but keep it enabled for regular builds to pass. Hopefully, we'll fix the issue some day.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation","I have low tolerance for slow builds. JavaThemis unit tests on GHA pass, so I assume it's okay to merge it right away. You know whom to blame if it breaks later. (And I assure you, Android build will break.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,672,2020-07-09T17:26:00Z,2020-07-09T17:40:53Z,2020-07-09T17:41:50Z,MERGED,True,312,174,36,https://github.com/ilammy,Themis 0.13.0,7,['release'],https://github.com/cossacklabs/themis/pull/672,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/672,"Sync up changes from release preparation branch.
Do a true merge, not squash.","Sync up changes from release preparation branch.
Do a true merge, not squash.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,672,2020-07-09T17:26:00Z,2020-07-09T17:40:53Z,2020-07-09T17:41:50Z,MERGED,True,312,174,36,https://github.com/ilammy,Themis 0.13.0,7,['release'],https://github.com/cossacklabs/themis/pull/672,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/672#issuecomment-656260559,"Sync up changes from release preparation branch.
Do a true merge, not squash.",CocoaPods builds are currently broken because of an issue in GitHub Actions configuration (the builds are using stale cache and do not see recently released Themis). This will be fixed soon.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,673,2020-07-09T17:43:38Z,2020-07-09T20:02:34Z,2020-07-09T20:02:39Z,MERGED,True,6,0,1,https://github.com/ilammy,Update CocoaPods repository,1,"['infrastructure', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/673,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/673,"After restoring CocoaPods from cache we also need to fetch the latest updates which were not cached yet. This is not noticeable most of the time, but otherwise it breaks builds right after a new version of Themis is released on CocoaPods and we can't fetch it because the repo is not updated yet.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","After restoring CocoaPods from cache we also need to fetch the latest updates which were not cached yet. This is not noticeable most of the time, but otherwise it breaks builds right after a new version of Themis is released on CocoaPods and we can't fetch it because the repo is not updated yet.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,674,2020-07-10T12:14:21Z,2020-07-10T13:51:05Z,2020-07-10T13:51:10Z,MERGED,True,192,179,18,https://github.com/ilammy,Update Obj-C/Swift examples to Themis 0.13,4,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/674,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/674,"Bring Objective-C and Swift code examples up to date with Themis 0.13:

Update dependency and lock files to use the latest version
Relink Carthage projects to objcthemis.framework instead of themis.framework
Use new import statements in Carthage projects in Objective-C
Use new Secure Cell API instead of old deprecated API

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date","Bring Objective-C and Swift code examples up to date with Themis 0.13:

Update dependency and lock files to use the latest version
Relink Carthage projects to objcthemis.framework instead of themis.framework
Use new import statements in Carthage projects in Objective-C
Use new Secure Cell API instead of old deprecated API

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,675,2020-07-11T12:47:20Z,2020-07-11T14:35:00Z,2020-07-11T14:35:04Z,MERGED,True,16,0,1,https://github.com/ilammy,Mention missing breaking change in ThemisPP,1,"['docs :books:', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/675,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/675,"We mention PR #540 as a minor refactoring in Themis Core, but in fact it includes a breaking change in ThemisPP as well. This change affects all users of Secure Session and breaks compilation. Let's mention it in the changelog to simplify migration.
Release notes are already updated.
Checklist

 Changelog is updated","We mention PR #540 as a minor refactoring in Themis Core, but in fact it includes a breaking change in ThemisPP as well. This change affects all users of Secure Session and breaks compilation. Let's mention it in the changelog to simplify migration.
Release notes are already updated.
Checklist

 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,676,2020-07-13T17:19:35Z,2020-07-13T18:57:31Z,2020-07-13T18:57:35Z,MERGED,True,1,1,1,https://github.com/ilammy,GoThemis version badge,1,['docs :books:'],https://github.com/cossacklabs/themis/pull/676,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/676,"Add a badge for GoThemis as well, leading to our pkg.go.dev page. Unfortunately, this badge needs to be manually updated with each release. Though, there is an issue tracking badge generation. There has been some recent progress on it, but who knows when it lands into production.","Add a badge for GoThemis as well, leading to our pkg.go.dev page. Unfortunately, this badge needs to be manually updated with each release. Though, there is an issue tracking badge generation. There has been some recent progress on it, but who knows when it lands into production.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,676,2020-07-13T17:19:35Z,2020-07-13T18:57:31Z,2020-07-13T18:57:35Z,MERGED,True,1,1,1,https://github.com/ilammy,GoThemis version badge,1,['docs :books:'],https://github.com/cossacklabs/themis/pull/676,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/676#issuecomment-657733530,"Add a badge for GoThemis as well, leading to our pkg.go.dev page. Unfortunately, this badge needs to be manually updated with each release. Though, there is an issue tracking badge generation. There has been some recent progress on it, but who knows when it lands into production.",d(⌒ー⌒d),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,677,2020-07-14T09:25:29Z,2020-07-14T14:12:12Z,2020-07-14T14:12:20Z,MERGED,True,117,20,12,https://github.com/ilammy,Avoid overflows on 32-bit systems,7,"['bug', 'W-GoThemis :hamster:', 'backport']",https://github.com/cossacklabs/themis/pull/677,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/677,"Avoid overflows in Secure Cell
Themis Core C API works with buffer sizes expressed as size_t while in Go lengths are expressed as int. Themis containers can typically contain up to 4 GB of data with internal length fields using uint32_t.
On typical 64-bit systems this does not cause overflows since uint32_t fits into both Go's int and C's size_t. However, on 32-bit system this can cause overflows. There, size_t is unsigned 32-bit value identical to uint32_t while int is 32-bit signed value, so the size may not fit into Go's size range.
We can't do anything about that. On 32-bit systems the buffer sizes are typically limited to 2 GB anyway due to the way memory is distributed. However, if the overflow happens, Go will panic when trying to allocate (effectively) negatively-sized arrays. We should return an error instead.
Add size checks before casting C.size_t into int and return an error if the size will overflow. Do this for all API, both new and old.
Normally, Themis is not used to encrypt real 2+ GB messages, but this condition can easily happen if the data has been corrupted where the length field is stored. We don't want this to be a source of DOS attacks.
Reenable tests for corrupted data
The panic condition has been originally detected by a couple of tests for Secure Cell's Token Protect mode which has the stars properly aligned for the issue to be visible. Now that the issue is fixed, we can enable these tests for 32-bit machines again.
Avoid overflows in other cryptosystems
Just like Secure Cell, add more checks to other cryptosystems as well. Unfortunately, we have to duplicate the size check utility. GoThemis does not have a common utility module, and even if it did, it would not work due to the way CGo is implemented (C.size_t is a distinct type in different modules).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (in case of notable or breaking changes)","Avoid overflows in Secure Cell
Themis Core C API works with buffer sizes expressed as size_t while in Go lengths are expressed as int. Themis containers can typically contain up to 4 GB of data with internal length fields using uint32_t.
On typical 64-bit systems this does not cause overflows since uint32_t fits into both Go's int and C's size_t. However, on 32-bit system this can cause overflows. There, size_t is unsigned 32-bit value identical to uint32_t while int is 32-bit signed value, so the size may not fit into Go's size range.
We can't do anything about that. On 32-bit systems the buffer sizes are typically limited to 2 GB anyway due to the way memory is distributed. However, if the overflow happens, Go will panic when trying to allocate (effectively) negatively-sized arrays. We should return an error instead.
Add size checks before casting C.size_t into int and return an error if the size will overflow. Do this for all API, both new and old.
Normally, Themis is not used to encrypt real 2+ GB messages, but this condition can easily happen if the data has been corrupted where the length field is stored. We don't want this to be a source of DOS attacks.
Reenable tests for corrupted data
The panic condition has been originally detected by a couple of tests for Secure Cell's Token Protect mode which has the stars properly aligned for the issue to be visible. Now that the issue is fixed, we can enable these tests for 32-bit machines again.
Avoid overflows in other cryptosystems
Just like Secure Cell, add more checks to other cryptosystems as well. Unfortunately, we have to duplicate the size check utility. GoThemis does not have a common utility module, and even if it did, it would not work due to the way CGo is implemented (C.size_t is a distinct type in different modules).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,678,2020-07-14T09:39:21Z,2020-07-15T08:43:47Z,2020-07-15T08:43:51Z,MERGED,True,8,4,2,https://github.com/ilammy,Move static libs and link files into dev packages,3,"['core', 'infrastructure', 'compatibility', 'O-Linux :penguin:']",https://github.com/cossacklabs/themis/pull/678,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/678,"Normally the “library” packages on Debian and RHEL contain only shared library files. Headers, static libraries, and shared library links go into the “development” package which is necessary to build software that uses the library (but not run it). On RHEL the static libraries are often moved into their own -static package to avoid bloating the -devel package (as dynamic linkage is customary).
Historically, we've been putting everything into the “library” package but let's follow the conventions from now on.
libthemis:

libsoter.so.0 and libthemis.so.0

libthemis-devel:

header files
pkg-config files
libsoter.a and lbthemis.a
libsoter.so and libthemis.so symlinks

We already recommend to install “development” packages to develop software that uses Themis. Some language wrappers – dynamic languages like Python and Ruby – will need that as they resolve Themis dynamic library dynamically and need the symlink to be present.
Checklist

 Change is covered by automated tests (somewhat? on Buildbot? maybe)
 Changelog is updated","Normally the “library” packages on Debian and RHEL contain only shared library files. Headers, static libraries, and shared library links go into the “development” package which is necessary to build software that uses the library (but not run it). On RHEL the static libraries are often moved into their own -static package to avoid bloating the -devel package (as dynamic linkage is customary).
Historically, we've been putting everything into the “library” package but let's follow the conventions from now on.
libthemis:

libsoter.so.0 and libthemis.so.0

libthemis-devel:

header files
pkg-config files
libsoter.a and lbthemis.a
libsoter.so and libthemis.so symlinks

We already recommend to install “development” packages to develop software that uses Themis. Some language wrappers – dynamic languages like Python and Ruby – will need that as they resolve Themis dynamic library dynamically and need the symlink to be present.
Checklist

 Change is covered by automated tests (somewhat? on Buildbot? maybe)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,678,2020-07-14T09:39:21Z,2020-07-15T08:43:47Z,2020-07-15T08:43:51Z,MERGED,True,8,4,2,https://github.com/ilammy,Move static libs and link files into dev packages,3,"['core', 'infrastructure', 'compatibility', 'O-Linux :penguin:']",https://github.com/cossacklabs/themis/pull/678,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/678#issuecomment-658208654,"Normally the “library” packages on Debian and RHEL contain only shared library files. Headers, static libraries, and shared library links go into the “development” package which is necessary to build software that uses the library (but not run it). On RHEL the static libraries are often moved into their own -static package to avoid bloating the -devel package (as dynamic linkage is customary).
Historically, we've been putting everything into the “library” package but let's follow the conventions from now on.
libthemis:

libsoter.so.0 and libthemis.so.0

libthemis-devel:

header files
pkg-config files
libsoter.a and lbthemis.a
libsoter.so and libthemis.so symlinks

We already recommend to install “development” packages to develop software that uses Themis. Some language wrappers – dynamic languages like Python and Ruby – will need that as they resolve Themis dynamic library dynamically and need the symlink to be present.
Checklist

 Change is covered by automated tests (somewhat? on Buildbot? maybe)
 Changelog is updated","By the way,

Some language wrappers – dynamic languages like Python and Ruby – will need that as they resolve Themis dynamic library dynamically and need the symlink to be present.

This is not necessarily true. Python docs, for example, suggest that find_library should locate libraries with ABI version suffixes too. However, I remember that we did have issues with finding and loading libraries when the symlink is not present. We stay on the safe side for now, but it may very well be that libthemis is sufficient for Python software to run as well. No idea about Ruby though (they docs are very terse).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,678,2020-07-14T09:39:21Z,2020-07-15T08:43:47Z,2020-07-15T08:43:51Z,MERGED,True,8,4,2,https://github.com/ilammy,Move static libs and link files into dev packages,3,"['core', 'infrastructure', 'compatibility', 'O-Linux :penguin:']",https://github.com/cossacklabs/themis/pull/678,https://github.com/shadinua,3,https://github.com/cossacklabs/themis/pull/678#issuecomment-658521689,"Normally the “library” packages on Debian and RHEL contain only shared library files. Headers, static libraries, and shared library links go into the “development” package which is necessary to build software that uses the library (but not run it). On RHEL the static libraries are often moved into their own -static package to avoid bloating the -devel package (as dynamic linkage is customary).
Historically, we've been putting everything into the “library” package but let's follow the conventions from now on.
libthemis:

libsoter.so.0 and libthemis.so.0

libthemis-devel:

header files
pkg-config files
libsoter.a and lbthemis.a
libsoter.so and libthemis.so symlinks

We already recommend to install “development” packages to develop software that uses Themis. Some language wrappers – dynamic languages like Python and Ruby – will need that as they resolve Themis dynamic library dynamically and need the symlink to be present.
Checklist

 Change is covered by automated tests (somewhat? on Buildbot? maybe)
 Changelog is updated","Does this change affect BuildBot testing? @shadinua

Should not. Here we do not change building or installation flow how it looks from user (and CICD) side.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,679,2020-07-15T17:08:45Z,2020-07-16T14:17:09Z,2020-07-20T18:24:23Z,MERGED,True,46,2,2,https://github.com/ilammy,Publish source and Javadoc JARs,1,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/679,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/679,"Add tasks and artifacts for publishing JARs with source code and generated Javadocs. These are required for admission to Bintray's JCenter – well-known public repository of open-source libraries.
With this, the users will be able to import Themis without adding Cossack Labs repository. It's highly likely that they already have JCenter added for other dependencies:
repositories {
    jcenter()
}

Since it's the same package, the dependency is specified as before:
dependencies {
    implementation 'com.cossacklabs.com:themis:0.13.0'
}

Many Bothans died to bring us this information. No, really, Gradle documentation on this is less than stellar, and Groovy does not make it easier. *sigh* Android ecosystem 🤷
Checklist

 Change is covered by automated tests (not really, do we need tests for this?)
 The coding guidelines are followed
 Changelog is updated","Add tasks and artifacts for publishing JARs with source code and generated Javadocs. These are required for admission to Bintray's JCenter – well-known public repository of open-source libraries.
With this, the users will be able to import Themis without adding Cossack Labs repository. It's highly likely that they already have JCenter added for other dependencies:
repositories {
    jcenter()
}

Since it's the same package, the dependency is specified as before:
dependencies {
    implementation 'com.cossacklabs.com:themis:0.13.0'
}

Many Bothans died to bring us this information. No, really, Gradle documentation on this is less than stellar, and Groovy does not make it easier. *sigh* Android ecosystem 🤷
Checklist

 Change is covered by automated tests (not really, do we need tests for this?)
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,680,2020-07-16T22:50:31Z,2020-07-17T11:33:25Z,2020-07-17T11:33:37Z,MERGED,True,14,6,3,https://github.com/apps/dependabot,Bump lodash from 4.17.15 to 4.17.19,3,"['W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies']",https://github.com/cossacklabs/themis/pull/680,https://github.com/apps/dependabot,1,https://github.com/cossacklabs/themis/pull/680,"Bumps lodash from 4.17.15 to 4.17.19.

Release notes
Sourced from lodash's releases.

4.17.16



Commits

d7fbc52 Bump to v4.17.19
2e1c0f2 Add npm-package
1b6c282 Bump to v4.17.18
a370ac8 Bump to v4.17.17
1144918 Rebuild lodash and docs
3a3b0fd Bump to v4.17.16
c84fe82 fix(zipObjectDeep): prototype pollution (#4759)
e7b28ea Sanitize sourceURL so it cannot affect evaled code (#4518)
0cec225 Fix lodash.isEqual for circular references (#4320) (#4515)
94c3a81 Document matches* shorthands for over* methods (#4510) (#4514)
Additional commits viewable in compare view



Maintainer changes
This version was pushed to npm by mathias, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","Bumps lodash from 4.17.15 to 4.17.19.

Release notes
Sourced from lodash's releases.

4.17.16



Commits

d7fbc52 Bump to v4.17.19
2e1c0f2 Add npm-package
1b6c282 Bump to v4.17.18
a370ac8 Bump to v4.17.17
1144918 Rebuild lodash and docs
3a3b0fd Bump to v4.17.16
c84fe82 fix(zipObjectDeep): prototype pollution (#4759)
e7b28ea Sanitize sourceURL so it cannot affect evaled code (#4518)
0cec225 Fix lodash.isEqual for circular references (#4320) (#4515)
94c3a81 Document matches* shorthands for over* methods (#4510) (#4514)
Additional commits viewable in compare view



Maintainer changes
This version was pushed to npm by mathias, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,680,2020-07-16T22:50:31Z,2020-07-17T11:33:25Z,2020-07-17T11:33:37Z,MERGED,True,14,6,3,https://github.com/apps/dependabot,Bump lodash from 4.17.15 to 4.17.19,3,"['W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies']",https://github.com/cossacklabs/themis/pull/680,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/680#issuecomment-660005123,"Bumps lodash from 4.17.15 to 4.17.19.

Release notes
Sourced from lodash's releases.

4.17.16



Commits

d7fbc52 Bump to v4.17.19
2e1c0f2 Add npm-package
1b6c282 Bump to v4.17.18
a370ac8 Bump to v4.17.17
1144918 Rebuild lodash and docs
3a3b0fd Bump to v4.17.16
c84fe82 fix(zipObjectDeep): prototype pollution (#4759)
e7b28ea Sanitize sourceURL so it cannot affect evaled code (#4518)
0cec225 Fix lodash.isEqual for circular references (#4320) (#4515)
94c3a81 Document matches* shorthands for over* methods (#4510) (#4514)
Additional commits viewable in compare view



Maintainer changes
This version was pushed to npm by mathias, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","wow, cool) @ilammy, can you look on lodash dependency for wasm pls? Do you know how we use it?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,680,2020-07-16T22:50:31Z,2020-07-17T11:33:25Z,2020-07-17T11:33:37Z,MERGED,True,14,6,3,https://github.com/apps/dependabot,Bump lodash from 4.17.15 to 4.17.19,3,"['W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies']",https://github.com/cossacklabs/themis/pull/680,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/680#issuecomment-660026261,"Bumps lodash from 4.17.15 to 4.17.19.

Release notes
Sourced from lodash's releases.

4.17.16



Commits

d7fbc52 Bump to v4.17.19
2e1c0f2 Add npm-package
1b6c282 Bump to v4.17.18
a370ac8 Bump to v4.17.17
1144918 Rebuild lodash and docs
3a3b0fd Bump to v4.17.16
c84fe82 fix(zipObjectDeep): prototype pollution (#4759)
e7b28ea Sanitize sourceURL so it cannot affect evaled code (#4518)
0cec225 Fix lodash.isEqual for circular references (#4320) (#4515)
94c3a81 Document matches* shorthands for over* methods (#4510) (#4514)
Additional commits viewable in compare view



Maintainer changes
This version was pushed to npm by mathias, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","I'm more interested why the bot did not see the same dependency in JsThemis:

  
    
      themis/src/wrappers/themis/jsthemis/package-lock.json
    
    
        Lines 488 to 493
      in
      2344484
    
  
  
    

        
          
           ""lodash"": { 
        

        
          
             ""version"": ""4.17.15"", 
        

        
          
             ""resolved"": ""https://registry.npmjs.org/lodash/-/lodash-4.17.15.tgz"", 
        

        
          
             ""integrity"": ""sha512-8xOcRHvCjnocdS5cpwXQXVzmmh5e5+saE2QGoeQmbKmRS6J3VQppPOIt0MnmE+4xlZoumy0GPG0D0MVIQbNA1A=="", 
        

        
          
             ""dev"": true 
        

        
          
           }, 
        
    
  


It's a transitive dependency from mocha used by both JsThemis and WasmThemis for testing.
I guess I'll throw in the update manually this time.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,681,2020-07-20T19:19:43Z,2020-07-23T12:28:51Z,2020-07-23T12:28:58Z,MERGED,True,81,3,4,https://github.com/ilammy,Include embedded BoringSSL into libsoter.a,5,"['core', 'C-BoringSSL', 'installation', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/681,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/681,"Currently, when building Themis with embedded BoringSSL (the one from git submodule), the shared library is linked against the BoringSSL static library and it is embedded into the dylib. That way resulting Themis dylib does not depend on the system OpenSSL. Instead it uses the BoringSSL which we build and embed into it.
However, right now Themis static library does not include embedded BoringSSL in it. The user is expected to find libcrypto.a and libdecrepit.a in BoringSSL build directory, distribute them along with libthemis.a and libsoter.a, and include all four libraries when building the application.
Why is this an issue?
This is not particularly convenient since BoringSSL libraries are buried in the BoringSSL build directory, not available in the usual Themis build directory. It is quite possible that developers will forget about them entirely. They are also not included into the packages we build.
Furthermore, Soter is built with and expects that particular version of BoringSSL to be linked into the application. While BoringSSL generally does a good job at maintaining ABI compatibility, the user may accidentally link some OpenSSL from their system instead of BoringSSL that was built with Themis. This may break in a subtle way.
How we resolve it
In order to avoid all those issues, let's embed BoringSSL into Soter static library, like we do with the shared library. That way the users will have to link only against libthemis.a and libsoter.a.
Note that this is actual only for the case when we are building Themis with embedded BoringSSL. That is, the BoringSSL we provide in submodule. We should not embed system OpenSSL, or any BoringSSL built and provided by the user. In that case the users are expected to take care of the cryptography provider library themselves.
On portability
Unfortunately, one does not simply merge static libraries.
The usual ar tool cannot do that: if you mention *.o files and *.a files it will simply include *.a files into the archive as is and it will confuse the linker which unpacks only one layer of static libraries.
The other traditional tool which is intended for this use case is libtool. On macOS is has somewhat sane interface and is available on the default system installation. But on Linux systems the GNU libtool is typically used. It has... well... a little bit wacky interface and it is normally used with Autotools.
The problem with Autotools is that Themis build system is not expected to bow to their idiosyncrasies. Furthermore, libtool is not available in the default installation on all distros we support.
I do not really want to add a new dependency—especially dependency on Autotools—just for that one use case.
So instead of that, here's an utility script which uses ar to merge multiple static libraries. It has issues of its own, but at least it's portable and should work on any UNIX-like system out of the box.
On symbol conflicts
As a final note, embedding BoringSSL into the static library has some consequences. Because of the way static linkage and static libraries work, this means that libsoter.a provides BoringSSL symbols which may conflict with and/or shadow other BoringSSL or OpenSSL symbols.
This changeset does not do anything about it. Like before, this is the issue that the users have to solve themselves. Though, we can still do something about it later if we manage to use BoringSSL symbol prefixes.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Currently, when building Themis with embedded BoringSSL (the one from git submodule), the shared library is linked against the BoringSSL static library and it is embedded into the dylib. That way resulting Themis dylib does not depend on the system OpenSSL. Instead it uses the BoringSSL which we build and embed into it.
However, right now Themis static library does not include embedded BoringSSL in it. The user is expected to find libcrypto.a and libdecrepit.a in BoringSSL build directory, distribute them along with libthemis.a and libsoter.a, and include all four libraries when building the application.
Why is this an issue?
This is not particularly convenient since BoringSSL libraries are buried in the BoringSSL build directory, not available in the usual Themis build directory. It is quite possible that developers will forget about them entirely. They are also not included into the packages we build.
Furthermore, Soter is built with and expects that particular version of BoringSSL to be linked into the application. While BoringSSL generally does a good job at maintaining ABI compatibility, the user may accidentally link some OpenSSL from their system instead of BoringSSL that was built with Themis. This may break in a subtle way.
How we resolve it
In order to avoid all those issues, let's embed BoringSSL into Soter static library, like we do with the shared library. That way the users will have to link only against libthemis.a and libsoter.a.
Note that this is actual only for the case when we are building Themis with embedded BoringSSL. That is, the BoringSSL we provide in submodule. We should not embed system OpenSSL, or any BoringSSL built and provided by the user. In that case the users are expected to take care of the cryptography provider library themselves.
On portability
Unfortunately, one does not simply merge static libraries.
The usual ar tool cannot do that: if you mention *.o files and *.a files it will simply include *.a files into the archive as is and it will confuse the linker which unpacks only one layer of static libraries.
The other traditional tool which is intended for this use case is libtool. On macOS is has somewhat sane interface and is available on the default system installation. But on Linux systems the GNU libtool is typically used. It has... well... a little bit wacky interface and it is normally used with Autotools.
The problem with Autotools is that Themis build system is not expected to bow to their idiosyncrasies. Furthermore, libtool is not available in the default installation on all distros we support.
I do not really want to add a new dependency—especially dependency on Autotools—just for that one use case.
So instead of that, here's an utility script which uses ar to merge multiple static libraries. It has issues of its own, but at least it's portable and should work on any UNIX-like system out of the box.
On symbol conflicts
As a final note, embedding BoringSSL into the static library has some consequences. Because of the way static linkage and static libraries work, this means that libsoter.a provides BoringSSL symbols which may conflict with and/or shadow other BoringSSL or OpenSSL symbols.
This changeset does not do anything about it. Like before, this is the issue that the users have to solve themselves. Though, we can still do something about it later if we manage to use BoringSSL symbol prefixes.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,"{'THUMBS_UP': ['https://github.com/vixentael'], 'ROCKET': ['https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,681,2020-07-20T19:19:43Z,2020-07-23T12:28:51Z,2020-07-23T12:28:58Z,MERGED,True,81,3,4,https://github.com/ilammy,Include embedded BoringSSL into libsoter.a,5,"['core', 'C-BoringSSL', 'installation', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/681,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/681#issuecomment-661759203,"Currently, when building Themis with embedded BoringSSL (the one from git submodule), the shared library is linked against the BoringSSL static library and it is embedded into the dylib. That way resulting Themis dylib does not depend on the system OpenSSL. Instead it uses the BoringSSL which we build and embed into it.
However, right now Themis static library does not include embedded BoringSSL in it. The user is expected to find libcrypto.a and libdecrepit.a in BoringSSL build directory, distribute them along with libthemis.a and libsoter.a, and include all four libraries when building the application.
Why is this an issue?
This is not particularly convenient since BoringSSL libraries are buried in the BoringSSL build directory, not available in the usual Themis build directory. It is quite possible that developers will forget about them entirely. They are also not included into the packages we build.
Furthermore, Soter is built with and expects that particular version of BoringSSL to be linked into the application. While BoringSSL generally does a good job at maintaining ABI compatibility, the user may accidentally link some OpenSSL from their system instead of BoringSSL that was built with Themis. This may break in a subtle way.
How we resolve it
In order to avoid all those issues, let's embed BoringSSL into Soter static library, like we do with the shared library. That way the users will have to link only against libthemis.a and libsoter.a.
Note that this is actual only for the case when we are building Themis with embedded BoringSSL. That is, the BoringSSL we provide in submodule. We should not embed system OpenSSL, or any BoringSSL built and provided by the user. In that case the users are expected to take care of the cryptography provider library themselves.
On portability
Unfortunately, one does not simply merge static libraries.
The usual ar tool cannot do that: if you mention *.o files and *.a files it will simply include *.a files into the archive as is and it will confuse the linker which unpacks only one layer of static libraries.
The other traditional tool which is intended for this use case is libtool. On macOS is has somewhat sane interface and is available on the default system installation. But on Linux systems the GNU libtool is typically used. It has... well... a little bit wacky interface and it is normally used with Autotools.
The problem with Autotools is that Themis build system is not expected to bow to their idiosyncrasies. Furthermore, libtool is not available in the default installation on all distros we support.
I do not really want to add a new dependency—especially dependency on Autotools—just for that one use case.
So instead of that, here's an utility script which uses ar to merge multiple static libraries. It has issues of its own, but at least it's portable and should work on any UNIX-like system out of the box.
On symbol conflicts
As a final note, embedding BoringSSL into the static library has some consequences. Because of the way static linkage and static libraries work, this means that libsoter.a provides BoringSSL symbols which may conflict with and/or shadow other BoringSSL or OpenSSL symbols.
This changeset does not do anything about it. Like before, this is the issue that the users have to solve themselves. Though, we can still do something about it later if we manage to use BoringSSL symbol prefixes.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",I've included @shadinua suggestions and added a couple more fixes for RustThemis and WasmThemis builds. Now the CI should become green.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,682,2020-07-20T19:24:37Z,2020-07-23T12:30:21Z,2020-07-23T12:30:26Z,MERGED,True,6,2,2,https://github.com/ilammy,More accurate package dependencies,4,"['core', 'infrastructure', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/682,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/682,"More accurate DEB dependencies
Strictly speaking, libthemis depends on the OpenSSL library, not the openssl binary. The openssl package installs the entire binary along with its man pages, etc. Instead, it is sufficient to depend only on the library.
The library package is typically called libssl1.1, with an ABI suffix. The default OpenSSL library version differs between distros so we cannot write it in Makefile, but we should depend on the OpenSSL library from the particular distribution. If we were using debhelper, this would have been resolved for us automagically, but we are using FPM. Therefore we
will use the dependencies of libssl-dev package as a proxy for the current default OpenSSL library name. This should be good enough.
More accurate RPM dependencies
Similar to Debian/Ubuntu situation, the openssl package on RHEL/CentOS installs the openssl binary. The package with libraries only is called openssl-libs, we should depend on that instead.
RPM packages typically do not include ABI information in the name, though the distros here typically do not ship multiple ABIs of a library either, so it's fine.
Checklist

 Change is covered by automated tests (not really here, only on Buildbot)
 The coding guidelines are followed
 Changelog is updated","More accurate DEB dependencies
Strictly speaking, libthemis depends on the OpenSSL library, not the openssl binary. The openssl package installs the entire binary along with its man pages, etc. Instead, it is sufficient to depend only on the library.
The library package is typically called libssl1.1, with an ABI suffix. The default OpenSSL library version differs between distros so we cannot write it in Makefile, but we should depend on the OpenSSL library from the particular distribution. If we were using debhelper, this would have been resolved for us automagically, but we are using FPM. Therefore we
will use the dependencies of libssl-dev package as a proxy for the current default OpenSSL library name. This should be good enough.
More accurate RPM dependencies
Similar to Debian/Ubuntu situation, the openssl package on RHEL/CentOS installs the openssl binary. The package with libraries only is called openssl-libs, we should depend on that instead.
RPM packages typically do not include ABI information in the name, though the distros here typically do not ship multiple ABIs of a library either, so it's fine.
Checklist

 Change is covered by automated tests (not really here, only on Buildbot)
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,683,2020-07-21T12:05:07Z,2020-07-23T17:10:41Z,2020-07-23T17:10:49Z,MERGED,True,48,10,2,https://github.com/ilammy,Package Themis Core with BoringSSL,10,"['core', 'infrastructure', 'C-BoringSSL', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/683,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/683,"This PR teaches make deb, make deb_php, make rpm to build packages of Themis Core using embedded BoringSSL instead of system OpenSSL. This is useful in cases like #619, #657.
When ENGINE=boringssl is set, produced Themis Core packages will get a suffix:

libthemis-boringssl
libthemis-boringssl-dev or libthemis-boringssl-devel

This is an alternative flavor of Themis Core which includes embedded BoringSSL instead of depending on system OpenSSL.
The BoringSSL and OpenSSL flavors provide the same ABI and install the same files. As such, they are mutually exclusive and conflict with each other to prevent simultaneous installation.
Other packages (libthemispp-dev, libthemis-jni, libphpthemis) now depend on either OpenSSL or BoringSSL flavor. That is, any flavor can be installed to satisfy the dependency.
How to build new packages
In short, running
make deb ENGINE=boringssl

will build and package BoringSSL flavor of Themis. This will also compile and package other packages which are identical to the OpenSSL version.
It's better to build OpenSSL and BoringSSL flavors in separate build directories right now. The build system does not expect incremental rebuilds with different configuration.
Dependency summary
The dependencies are as follows:

libthemis

Depends: libsslX.Y (of any version)
Conflicts: libthemis-boringssl of any version (new!)


libthemis-boringssl (new!)

Depends: none
Conflicts: libthemis of any version


libthemis-dev

Depends: libssl-dev
Depends: libthemis of exactly the same version
Conflicts:  libthemis-boringssl-dev of any version (new!)


libthemis-boringssl-dev (new!)

Depends: libthemis-boringssl of exactly the same version
Conflicts:  libthemis-dev of any version


libthemispp-dev

Depends: libthemis-dev or libthemis-boringssl-dev of exactly the same version (changed)


libthemis-jni

Depends: libthemis or libthemis-boringssl of at least the same version (changed)


libphpthemis-php*

Depends: libthemis or libthemis-boringssl of at least the same version (new!)



Ditto for RPM, with s/dev/devel/g, etc.
Checklist

 Change is covered by automated tests (not really, only Builtbot)
 The coding guidelines are followed
 Changelog is updated

This PR depends on the previous ones:

 #681 Include embedded BoringSSL into libsoter.a (for the package contain usable static libraries)
 #682 More accurate package dependencies (cherry-picked here)","This PR teaches make deb, make deb_php, make rpm to build packages of Themis Core using embedded BoringSSL instead of system OpenSSL. This is useful in cases like #619, #657.
When ENGINE=boringssl is set, produced Themis Core packages will get a suffix:

libthemis-boringssl
libthemis-boringssl-dev or libthemis-boringssl-devel

This is an alternative flavor of Themis Core which includes embedded BoringSSL instead of depending on system OpenSSL.
The BoringSSL and OpenSSL flavors provide the same ABI and install the same files. As such, they are mutually exclusive and conflict with each other to prevent simultaneous installation.
Other packages (libthemispp-dev, libthemis-jni, libphpthemis) now depend on either OpenSSL or BoringSSL flavor. That is, any flavor can be installed to satisfy the dependency.
How to build new packages
In short, running
make deb ENGINE=boringssl

will build and package BoringSSL flavor of Themis. This will also compile and package other packages which are identical to the OpenSSL version.
It's better to build OpenSSL and BoringSSL flavors in separate build directories right now. The build system does not expect incremental rebuilds with different configuration.
Dependency summary
The dependencies are as follows:

libthemis

Depends: libsslX.Y (of any version)
Conflicts: libthemis-boringssl of any version (new!)


libthemis-boringssl (new!)

Depends: none
Conflicts: libthemis of any version


libthemis-dev

Depends: libssl-dev
Depends: libthemis of exactly the same version
Conflicts:  libthemis-boringssl-dev of any version (new!)


libthemis-boringssl-dev (new!)

Depends: libthemis-boringssl of exactly the same version
Conflicts:  libthemis-dev of any version


libthemispp-dev

Depends: libthemis-dev or libthemis-boringssl-dev of exactly the same version (changed)


libthemis-jni

Depends: libthemis or libthemis-boringssl of at least the same version (changed)


libphpthemis-php*

Depends: libthemis or libthemis-boringssl of at least the same version (new!)



Ditto for RPM, with s/dev/devel/g, etc.
Checklist

 Change is covered by automated tests (not really, only Builtbot)
 The coding guidelines are followed
 Changelog is updated

This PR depends on the previous ones:

 #681 Include embedded BoringSSL into libsoter.a (for the package contain usable static libraries)
 #682 More accurate package dependencies (cherry-picked here)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,683,2020-07-21T12:05:07Z,2020-07-23T17:10:41Z,2020-07-23T17:10:49Z,MERGED,True,48,10,2,https://github.com/ilammy,Package Themis Core with BoringSSL,10,"['core', 'infrastructure', 'C-BoringSSL', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/683,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/683#issuecomment-662982200,"This PR teaches make deb, make deb_php, make rpm to build packages of Themis Core using embedded BoringSSL instead of system OpenSSL. This is useful in cases like #619, #657.
When ENGINE=boringssl is set, produced Themis Core packages will get a suffix:

libthemis-boringssl
libthemis-boringssl-dev or libthemis-boringssl-devel

This is an alternative flavor of Themis Core which includes embedded BoringSSL instead of depending on system OpenSSL.
The BoringSSL and OpenSSL flavors provide the same ABI and install the same files. As such, they are mutually exclusive and conflict with each other to prevent simultaneous installation.
Other packages (libthemispp-dev, libthemis-jni, libphpthemis) now depend on either OpenSSL or BoringSSL flavor. That is, any flavor can be installed to satisfy the dependency.
How to build new packages
In short, running
make deb ENGINE=boringssl

will build and package BoringSSL flavor of Themis. This will also compile and package other packages which are identical to the OpenSSL version.
It's better to build OpenSSL and BoringSSL flavors in separate build directories right now. The build system does not expect incremental rebuilds with different configuration.
Dependency summary
The dependencies are as follows:

libthemis

Depends: libsslX.Y (of any version)
Conflicts: libthemis-boringssl of any version (new!)


libthemis-boringssl (new!)

Depends: none
Conflicts: libthemis of any version


libthemis-dev

Depends: libssl-dev
Depends: libthemis of exactly the same version
Conflicts:  libthemis-boringssl-dev of any version (new!)


libthemis-boringssl-dev (new!)

Depends: libthemis-boringssl of exactly the same version
Conflicts:  libthemis-dev of any version


libthemispp-dev

Depends: libthemis-dev or libthemis-boringssl-dev of exactly the same version (changed)


libthemis-jni

Depends: libthemis or libthemis-boringssl of at least the same version (changed)


libphpthemis-php*

Depends: libthemis or libthemis-boringssl of at least the same version (new!)



Ditto for RPM, with s/dev/devel/g, etc.
Checklist

 Change is covered by automated tests (not really, only Builtbot)
 The coding guidelines are followed
 Changelog is updated

This PR depends on the previous ones:

 #681 Include embedded BoringSSL into libsoter.a (for the package contain usable static libraries)
 #682 More accurate package dependencies (cherry-picked here)","Dependencies have been merged, I've synced up this branch and resolved merge conflicts. If you want to make another review pass over the clean diff, this is the time. I'll merge it today if CI passes. (Let's hope GHA will work this time.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,683,2020-07-21T12:05:07Z,2020-07-23T17:10:41Z,2020-07-23T17:10:49Z,MERGED,True,48,10,2,https://github.com/ilammy,Package Themis Core with BoringSSL,10,"['core', 'infrastructure', 'C-BoringSSL', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/683,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/683#issuecomment-663125678,"This PR teaches make deb, make deb_php, make rpm to build packages of Themis Core using embedded BoringSSL instead of system OpenSSL. This is useful in cases like #619, #657.
When ENGINE=boringssl is set, produced Themis Core packages will get a suffix:

libthemis-boringssl
libthemis-boringssl-dev or libthemis-boringssl-devel

This is an alternative flavor of Themis Core which includes embedded BoringSSL instead of depending on system OpenSSL.
The BoringSSL and OpenSSL flavors provide the same ABI and install the same files. As such, they are mutually exclusive and conflict with each other to prevent simultaneous installation.
Other packages (libthemispp-dev, libthemis-jni, libphpthemis) now depend on either OpenSSL or BoringSSL flavor. That is, any flavor can be installed to satisfy the dependency.
How to build new packages
In short, running
make deb ENGINE=boringssl

will build and package BoringSSL flavor of Themis. This will also compile and package other packages which are identical to the OpenSSL version.
It's better to build OpenSSL and BoringSSL flavors in separate build directories right now. The build system does not expect incremental rebuilds with different configuration.
Dependency summary
The dependencies are as follows:

libthemis

Depends: libsslX.Y (of any version)
Conflicts: libthemis-boringssl of any version (new!)


libthemis-boringssl (new!)

Depends: none
Conflicts: libthemis of any version


libthemis-dev

Depends: libssl-dev
Depends: libthemis of exactly the same version
Conflicts:  libthemis-boringssl-dev of any version (new!)


libthemis-boringssl-dev (new!)

Depends: libthemis-boringssl of exactly the same version
Conflicts:  libthemis-dev of any version


libthemispp-dev

Depends: libthemis-dev or libthemis-boringssl-dev of exactly the same version (changed)


libthemis-jni

Depends: libthemis or libthemis-boringssl of at least the same version (changed)


libphpthemis-php*

Depends: libthemis or libthemis-boringssl of at least the same version (new!)



Ditto for RPM, with s/dev/devel/g, etc.
Checklist

 Change is covered by automated tests (not really, only Builtbot)
 The coding guidelines are followed
 Changelog is updated

This PR depends on the previous ones:

 #681 Include embedded BoringSSL into libsoter.a (for the package contain usable static libraries)
 #682 More accurate package dependencies (cherry-picked here)","Well, GHA is stuck ¯\_(ツ)_/¯",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,684,2020-07-26T10:12:57Z,2020-07-28T13:34:43Z,2020-07-28T13:34:49Z,MERGED,True,49,8,8,https://github.com/ilammy,Add missing OpenSSL includes,5,"['O-iOS :iphone:', 'core', 'O-macOS :computer:', 'C-OpenSSL', 'backport']",https://github.com/cossacklabs/themis/pull/684,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/684,"All those files use BIGNUM API of OpenSSL but do not include relevant headers. Due to miraculous coincidence, this seems to somehow work for the OpenSSL versions we use, but only because either existing headers include this bn.h transitively, or because the compiler generates code that kinda works without function prototype being available.
However, curiously enough, this breaks when building Themis for macOS with recent OpenSSL 1.1.1g but not with OpenSSL 1.0.2, or OpenSSL 1.1.1g on Linux. The issue manifests itself as missing _BN_num_bytes symbol. Indeed, there is no such symbol because this function is implemented as a macro via BN_num_bits(). However, because of the missing header, the compiler—being C compiler—decides that this must be a function int BN_num_bytes() and compiles it like a function call.
Add the missing includes to define the necessary macros and prototype, resolving the issue with OpenSSL 1.1.1g. It must have stopped including <openssl/bn.h> transitively, revealing this issue.
This is why you should always include and import stuff you use directly, not rely on transitive imports.
P.S. A mystery for dessert: BoringSSL backend includes <openssl/bn.h>.
In order to prevent more silly issues in the future, tell Xcode to tell the compiler to treat all warnings as errors. That way the build should fail earlier, and the developers will be less likely to ignore warnings.
Now that we treat warnings as errors, fix a couple of warnings about implicit casts.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","All those files use BIGNUM API of OpenSSL but do not include relevant headers. Due to miraculous coincidence, this seems to somehow work for the OpenSSL versions we use, but only because either existing headers include this bn.h transitively, or because the compiler generates code that kinda works without function prototype being available.
However, curiously enough, this breaks when building Themis for macOS with recent OpenSSL 1.1.1g but not with OpenSSL 1.0.2, or OpenSSL 1.1.1g on Linux. The issue manifests itself as missing _BN_num_bytes symbol. Indeed, there is no such symbol because this function is implemented as a macro via BN_num_bits(). However, because of the missing header, the compiler—being C compiler—decides that this must be a function int BN_num_bytes() and compiles it like a function call.
Add the missing includes to define the necessary macros and prototype, resolving the issue with OpenSSL 1.1.1g. It must have stopped including <openssl/bn.h> transitively, revealing this issue.
This is why you should always include and import stuff you use directly, not rely on transitive imports.
P.S. A mystery for dessert: BoringSSL backend includes <openssl/bn.h>.
In order to prevent more silly issues in the future, tell Xcode to tell the compiler to treat all warnings as errors. That way the build should fail earlier, and the developers will be less likely to ignore warnings.
Now that we treat warnings as errors, fix a couple of warnings about implicit casts.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,684,2020-07-26T10:12:57Z,2020-07-28T13:34:43Z,2020-07-28T13:34:49Z,MERGED,True,49,8,8,https://github.com/ilammy,Add missing OpenSSL includes,5,"['O-iOS :iphone:', 'core', 'O-macOS :computer:', 'C-OpenSSL', 'backport']",https://github.com/cossacklabs/themis/pull/684,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/684#issuecomment-664006913,"All those files use BIGNUM API of OpenSSL but do not include relevant headers. Due to miraculous coincidence, this seems to somehow work for the OpenSSL versions we use, but only because either existing headers include this bn.h transitively, or because the compiler generates code that kinda works without function prototype being available.
However, curiously enough, this breaks when building Themis for macOS with recent OpenSSL 1.1.1g but not with OpenSSL 1.0.2, or OpenSSL 1.1.1g on Linux. The issue manifests itself as missing _BN_num_bytes symbol. Indeed, there is no such symbol because this function is implemented as a macro via BN_num_bits(). However, because of the missing header, the compiler—being C compiler—decides that this must be a function int BN_num_bytes() and compiles it like a function call.
Add the missing includes to define the necessary macros and prototype, resolving the issue with OpenSSL 1.1.1g. It must have stopped including <openssl/bn.h> transitively, revealing this issue.
This is why you should always include and import stuff you use directly, not rely on transitive imports.
P.S. A mystery for dessert: BoringSSL backend includes <openssl/bn.h>.
In order to prevent more silly issues in the future, tell Xcode to tell the compiler to treat all warnings as errors. That way the build should fail earlier, and the developers will be less likely to ignore warnings.
Now that we treat warnings as errors, fix a couple of warnings about implicit casts.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Some OpenSSL headers packaged with Marcin's OpenSSL that we use have borked documentation comments. This has been pointed out several times (1, 2), but Marcin concluded this needs to be fixed upstream.
Meanwhile, having those broken headers breaks the build if the warnings are treated as errors. Since we can't upgrade Marcin's OpenSSL due to other reasons (bitcode support), we have no hope to resolve this issue.
For the time being, suppress the warnings about documentation comments.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,684,2020-07-26T10:12:57Z,2020-07-28T13:34:43Z,2020-07-28T13:34:49Z,MERGED,True,49,8,8,https://github.com/ilammy,Add missing OpenSSL includes,5,"['O-iOS :iphone:', 'core', 'O-macOS :computer:', 'C-OpenSSL', 'backport']",https://github.com/cossacklabs/themis/pull/684,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/684#issuecomment-664038142,"All those files use BIGNUM API of OpenSSL but do not include relevant headers. Due to miraculous coincidence, this seems to somehow work for the OpenSSL versions we use, but only because either existing headers include this bn.h transitively, or because the compiler generates code that kinda works without function prototype being available.
However, curiously enough, this breaks when building Themis for macOS with recent OpenSSL 1.1.1g but not with OpenSSL 1.0.2, or OpenSSL 1.1.1g on Linux. The issue manifests itself as missing _BN_num_bytes symbol. Indeed, there is no such symbol because this function is implemented as a macro via BN_num_bits(). However, because of the missing header, the compiler—being C compiler—decides that this must be a function int BN_num_bytes() and compiles it like a function call.
Add the missing includes to define the necessary macros and prototype, resolving the issue with OpenSSL 1.1.1g. It must have stopped including <openssl/bn.h> transitively, revealing this issue.
This is why you should always include and import stuff you use directly, not rely on transitive imports.
P.S. A mystery for dessert: BoringSSL backend includes <openssl/bn.h>.
In order to prevent more silly issues in the future, tell Xcode to tell the compiler to treat all warnings as errors. That way the build should fail earlier, and the developers will be less likely to ignore warnings.
Now that we treat warnings as errors, fix a couple of warnings about implicit casts.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",ObjC carthage tests are failing 🤔,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,684,2020-07-26T10:12:57Z,2020-07-28T13:34:43Z,2020-07-28T13:34:49Z,MERGED,True,49,8,8,https://github.com/ilammy,Add missing OpenSSL includes,5,"['O-iOS :iphone:', 'core', 'O-macOS :computer:', 'C-OpenSSL', 'backport']",https://github.com/cossacklabs/themis/pull/684,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/684#issuecomment-664382462,"All those files use BIGNUM API of OpenSSL but do not include relevant headers. Due to miraculous coincidence, this seems to somehow work for the OpenSSL versions we use, but only because either existing headers include this bn.h transitively, or because the compiler generates code that kinda works without function prototype being available.
However, curiously enough, this breaks when building Themis for macOS with recent OpenSSL 1.1.1g but not with OpenSSL 1.0.2, or OpenSSL 1.1.1g on Linux. The issue manifests itself as missing _BN_num_bytes symbol. Indeed, there is no such symbol because this function is implemented as a macro via BN_num_bits(). However, because of the missing header, the compiler—being C compiler—decides that this must be a function int BN_num_bytes() and compiles it like a function call.
Add the missing includes to define the necessary macros and prototype, resolving the issue with OpenSSL 1.1.1g. It must have stopped including <openssl/bn.h> transitively, revealing this issue.
This is why you should always include and import stuff you use directly, not rely on transitive imports.
P.S. A mystery for dessert: BoringSSL backend includes <openssl/bn.h>.
In order to prevent more silly issues in the future, tell Xcode to tell the compiler to treat all warnings as errors. That way the build should fail earlier, and the developers will be less likely to ignore warnings.
Now that we treat warnings as errors, fix a couple of warnings about implicit casts.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","ObjC carthage tests are failing

That's because there are more warnings on 32-bit platforms. I forgot to test “Generic device” build locally, so I missed them. Now the builds should be green.",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,685,2020-07-27T14:17:36Z,2020-08-03T07:56:59Z,2020-08-03T07:58:46Z,MERGED,True,50,26,23,https://github.com/ilammy,"Use ""/usr/bin/env"" in shebangs",4,['infrastructure'],https://github.com/cossacklabs/themis/pull/685,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/685,"Instead of directly executing stuff from /bin or /usr/bin, do it via /usr/bin/env to allow overriding the binaries via PATH. For example, if the user has some local installation of Bash or Python which is set as a priority in PATH, it will be used instead of the one from hardcoded /usr/bin location.
@shadinua has pointed out this observation in #681. This PR applies the same change throughout the entire code base for consistency. Now if someone uses existing scripts as examples, they should notice the /usr/bin/env usage and do the same.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated","Instead of directly executing stuff from /bin or /usr/bin, do it via /usr/bin/env to allow overriding the binaries via PATH. For example, if the user has some local installation of Bash or Python which is set as a priority in PATH, it will be used instead of the one from hardcoded /usr/bin location.
@shadinua has pointed out this observation in #681. This PR applies the same change throughout the entire code base for consistency. Now if someone uses existing scripts as examples, they should notice the /usr/bin/env usage and do the same.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,685,2020-07-27T14:17:36Z,2020-08-03T07:56:59Z,2020-08-03T07:58:46Z,MERGED,True,50,26,23,https://github.com/ilammy,"Use ""/usr/bin/env"" in shebangs",4,['infrastructure'],https://github.com/cossacklabs/themis/pull/685,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/685#issuecomment-664443636,"Instead of directly executing stuff from /bin or /usr/bin, do it via /usr/bin/env to allow overriding the binaries via PATH. For example, if the user has some local installation of Bash or Python which is set as a priority in PATH, it will be used instead of the one from hardcoded /usr/bin location.
@shadinua has pointed out this observation in #681. This PR applies the same change throughout the entire code base for consistency. Now if someone uses existing scripts as examples, they should notice the /usr/bin/env usage and do the same.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated","Oh great, apparently, Linux has decided that there can be at most one argument on the shebang line, and this is common knowledge on the interwebs. Writing
#!/usr/bin/env bash -e
is not portable.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,685,2020-07-27T14:17:36Z,2020-08-03T07:56:59Z,2020-08-03T07:58:46Z,MERGED,True,50,26,23,https://github.com/ilammy,"Use ""/usr/bin/env"" in shebangs",4,['infrastructure'],https://github.com/cossacklabs/themis/pull/685,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/685#issuecomment-664655402,"Instead of directly executing stuff from /bin or /usr/bin, do it via /usr/bin/env to allow overriding the binaries via PATH. For example, if the user has some local installation of Bash or Python which is set as a priority in PATH, it will be used instead of the one from hardcoded /usr/bin location.
@shadinua has pointed out this observation in #681. This PR applies the same change throughout the entire code base for consistency. Now if someone uses existing scripts as examples, they should notice the /usr/bin/env usage and do the same.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated","I got a bit pissed off a bit by this behavior, thought that I might 'fix' it in the kernel. Oh boy, of course it has been discussed multiple times over the years with the general sentiment that it's a backwards incompatible change and hysterical raisins should have their way. A part of me understands the reasoning very well—too well—but another part is saddened by it.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,685,2020-07-27T14:17:36Z,2020-08-03T07:56:59Z,2020-08-03T07:58:46Z,MERGED,True,50,26,23,https://github.com/ilammy,"Use ""/usr/bin/env"" in shebangs",4,['infrastructure'],https://github.com/cossacklabs/themis/pull/685,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/685#issuecomment-665043194,"Instead of directly executing stuff from /bin or /usr/bin, do it via /usr/bin/env to allow overriding the binaries via PATH. For example, if the user has some local installation of Bash or Python which is set as a priority in PATH, it will be used instead of the one from hardcoded /usr/bin location.
@shadinua has pointed out this observation in #681. This PR applies the same change throughout the entire code base for consistency. Now if someone uses existing scripts as examples, they should notice the /usr/bin/env usage and do the same.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated","@shadinua, I've added missing -o pipefail options. Thanks for nothing that! I've also fixed up a couple of places where the -u option caused failures.",True,"{'THUMBS_UP': ['https://github.com/vixentael', 'https://github.com/shadinua'], 'EYES': ['https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,686,2020-07-28T12:54:24Z,2020-08-12T13:56:07Z,2020-08-12T13:56:14Z,MERGED,True,44,35,2,https://github.com/ilammy,Use virtual package mechanism for BoringSSL package,3,"['core', 'infrastructure', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/686,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/686,"Buildbot started failing to build development packages after PRs #682 and #683 have been merged into master. This PR resolves the issues that cause the failures, and improves BoringSSL packaging a bit.
Why alternative packages are not good
Alternative package dependencies are great, but they have several issues for the use case we need. First of all, 'boolean package dependencies' are not supported on CentOS 7 which we need to support. RPM >= 4.13 is required to build and install such packages correctly. Unfortunately, CentOS 7 uses RPM 4.11 so we're out of luck here.
The second issue is that if some other package previously depended on, say, libthemis (>= 0.13), the new libthemis-boringssl cannot satisfy that dependency. It is able to, but the package manager will not allow it to be installed for it is not libthemis.
What is the alternative to them? (heh)
Alternative (boolean) package dependencies may work for our packages since we make them to, but they won't work for other packages.
In fact, alternative dependencies are not the best solution here. We would like the BoringSSL flavor to be able to stand in for the OpenSSL flavor because it provides the same API and ABI. dpkg and RPM have a mechanism for this – the Provides field in the package specs.
Provides, Conflicts, and Replaces
If BoringSSL package provides libthemis then it can satisfy the need for libthemis of any other package, like libthemis-jni, for example. Similarly, libthemis-boringssl-dev can stand in for libthemis-dev.
Note, however, that libthemis and libthemis-boringssl are still mutually exclusive so they need to conflict with each other. In fact, all flavors of libthemis conflict with each other and the same is true for the development packages as well.
In addition to that, if we declare them as replacing one other, the package manager will be able to tell that it can remove the old conflicting package and install an alternative to it, without bothering the user.
Caveats
FPM discards versioning information from --provides arguments. While RPM does not seem to have any issues with that, dpkg does have issues which break conflict resolution if the provided versions are not specified. We have to insert DEB fields directly to fix this. Otherwise the users will see the following errors
dpkg: dependency problems prevent configuration of libthemis-jni:
 libthemis-jni depends on libthemis (>= 0.13.0+xenial); however:
  Package libthemis is not installed.
  Version of libthemis on system, provided by libthemis-boringssl:amd64, is <none>.

dpkg: error processing package libthemis-jni (--install):
 dependency problems - leaving unconfigured

when installing packages that depend on libthemis when it is replaced by libthemis-boringssl.
Remaining issues
Although packages can replace each other, there are still some issues with that. For example, on Debian I am not able to cleanly replace both libthemis and libthemis-dev simultaneously with libthemis-boringssl and libthemis-boringssl-dev, while it is still possible to do it one package at a time, if done in correct order. RPM on the other hand is fine.
Also, it is currently possible to install libthemis-boringssl and libthemis-dev simultaneously without conflicts. While technically it still works, this may be surprising for the users, especially if they try building something with static libraries. It would be nice to disallow such installation in some way.
OpenSSL dependency fix for Ubuntu 16.04
On some systems (e.g., Ubuntu 16.04) the libssl-dev package depends not only on libsslX.Y.Z, but on other packages too (zlib1g-dev in the case of Ubuntu). The current spell for finding out the name of the OpenSSL library package does not take that into account, and this leads to incorrect command line passed to FPM.
Improve the spell to react only on libssl packages, which there should be only one in the dependency list.
Checklist

 Change is covered by automated tests (only on Buildbot)
 The coding guidelines are followed
 Changelog is updated","Buildbot started failing to build development packages after PRs #682 and #683 have been merged into master. This PR resolves the issues that cause the failures, and improves BoringSSL packaging a bit.
Why alternative packages are not good
Alternative package dependencies are great, but they have several issues for the use case we need. First of all, 'boolean package dependencies' are not supported on CentOS 7 which we need to support. RPM >= 4.13 is required to build and install such packages correctly. Unfortunately, CentOS 7 uses RPM 4.11 so we're out of luck here.
The second issue is that if some other package previously depended on, say, libthemis (>= 0.13), the new libthemis-boringssl cannot satisfy that dependency. It is able to, but the package manager will not allow it to be installed for it is not libthemis.
What is the alternative to them? (heh)
Alternative (boolean) package dependencies may work for our packages since we make them to, but they won't work for other packages.
In fact, alternative dependencies are not the best solution here. We would like the BoringSSL flavor to be able to stand in for the OpenSSL flavor because it provides the same API and ABI. dpkg and RPM have a mechanism for this – the Provides field in the package specs.
Provides, Conflicts, and Replaces
If BoringSSL package provides libthemis then it can satisfy the need for libthemis of any other package, like libthemis-jni, for example. Similarly, libthemis-boringssl-dev can stand in for libthemis-dev.
Note, however, that libthemis and libthemis-boringssl are still mutually exclusive so they need to conflict with each other. In fact, all flavors of libthemis conflict with each other and the same is true for the development packages as well.
In addition to that, if we declare them as replacing one other, the package manager will be able to tell that it can remove the old conflicting package and install an alternative to it, without bothering the user.
Caveats
FPM discards versioning information from --provides arguments. While RPM does not seem to have any issues with that, dpkg does have issues which break conflict resolution if the provided versions are not specified. We have to insert DEB fields directly to fix this. Otherwise the users will see the following errors
dpkg: dependency problems prevent configuration of libthemis-jni:
 libthemis-jni depends on libthemis (>= 0.13.0+xenial); however:
  Package libthemis is not installed.
  Version of libthemis on system, provided by libthemis-boringssl:amd64, is <none>.

dpkg: error processing package libthemis-jni (--install):
 dependency problems - leaving unconfigured

when installing packages that depend on libthemis when it is replaced by libthemis-boringssl.
Remaining issues
Although packages can replace each other, there are still some issues with that. For example, on Debian I am not able to cleanly replace both libthemis and libthemis-dev simultaneously with libthemis-boringssl and libthemis-boringssl-dev, while it is still possible to do it one package at a time, if done in correct order. RPM on the other hand is fine.
Also, it is currently possible to install libthemis-boringssl and libthemis-dev simultaneously without conflicts. While technically it still works, this may be surprising for the users, especially if they try building something with static libraries. It would be nice to disallow such installation in some way.
OpenSSL dependency fix for Ubuntu 16.04
On some systems (e.g., Ubuntu 16.04) the libssl-dev package depends not only on libsslX.Y.Z, but on other packages too (zlib1g-dev in the case of Ubuntu). The current spell for finding out the name of the OpenSSL library package does not take that into account, and this leads to incorrect command line passed to FPM.
Improve the spell to react only on libssl packages, which there should be only one in the dependency list.
Checklist

 Change is covered by automated tests (only on Buildbot)
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,686,2020-07-28T12:54:24Z,2020-08-12T13:56:07Z,2020-08-12T13:56:14Z,MERGED,True,44,35,2,https://github.com/ilammy,Use virtual package mechanism for BoringSSL package,3,"['core', 'infrastructure', 'O-Linux :penguin:', 'installation']",https://github.com/cossacklabs/themis/pull/686,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/686#issuecomment-665024442,"Buildbot started failing to build development packages after PRs #682 and #683 have been merged into master. This PR resolves the issues that cause the failures, and improves BoringSSL packaging a bit.
Why alternative packages are not good
Alternative package dependencies are great, but they have several issues for the use case we need. First of all, 'boolean package dependencies' are not supported on CentOS 7 which we need to support. RPM >= 4.13 is required to build and install such packages correctly. Unfortunately, CentOS 7 uses RPM 4.11 so we're out of luck here.
The second issue is that if some other package previously depended on, say, libthemis (>= 0.13), the new libthemis-boringssl cannot satisfy that dependency. It is able to, but the package manager will not allow it to be installed for it is not libthemis.
What is the alternative to them? (heh)
Alternative (boolean) package dependencies may work for our packages since we make them to, but they won't work for other packages.
In fact, alternative dependencies are not the best solution here. We would like the BoringSSL flavor to be able to stand in for the OpenSSL flavor because it provides the same API and ABI. dpkg and RPM have a mechanism for this – the Provides field in the package specs.
Provides, Conflicts, and Replaces
If BoringSSL package provides libthemis then it can satisfy the need for libthemis of any other package, like libthemis-jni, for example. Similarly, libthemis-boringssl-dev can stand in for libthemis-dev.
Note, however, that libthemis and libthemis-boringssl are still mutually exclusive so they need to conflict with each other. In fact, all flavors of libthemis conflict with each other and the same is true for the development packages as well.
In addition to that, if we declare them as replacing one other, the package manager will be able to tell that it can remove the old conflicting package and install an alternative to it, without bothering the user.
Caveats
FPM discards versioning information from --provides arguments. While RPM does not seem to have any issues with that, dpkg does have issues which break conflict resolution if the provided versions are not specified. We have to insert DEB fields directly to fix this. Otherwise the users will see the following errors
dpkg: dependency problems prevent configuration of libthemis-jni:
 libthemis-jni depends on libthemis (>= 0.13.0+xenial); however:
  Package libthemis is not installed.
  Version of libthemis on system, provided by libthemis-boringssl:amd64, is <none>.

dpkg: error processing package libthemis-jni (--install):
 dependency problems - leaving unconfigured

when installing packages that depend on libthemis when it is replaced by libthemis-boringssl.
Remaining issues
Although packages can replace each other, there are still some issues with that. For example, on Debian I am not able to cleanly replace both libthemis and libthemis-dev simultaneously with libthemis-boringssl and libthemis-boringssl-dev, while it is still possible to do it one package at a time, if done in correct order. RPM on the other hand is fine.
Also, it is currently possible to install libthemis-boringssl and libthemis-dev simultaneously without conflicts. While technically it still works, this may be surprising for the users, especially if they try building something with static libraries. It would be nice to disallow such installation in some way.
OpenSSL dependency fix for Ubuntu 16.04
On some systems (e.g., Ubuntu 16.04) the libssl-dev package depends not only on libsslX.Y.Z, but on other packages too (zlib1g-dev in the case of Ubuntu). The current spell for finding out the name of the OpenSSL library package does not take that into account, and this leads to incorrect command line passed to FPM.
Improve the spell to react only on libssl packages, which there should be only one in the dependency list.
Checklist

 Change is covered by automated tests (only on Buildbot)
 The coding guidelines are followed
 Changelog is updated","Here's a diagram of the new package interdependencies to make it more clear what the hell does this PR do:

libthemis-dev works only with libthemis of the same version (ditto for -boringssl), but libthemis-jni can use either libthemis or libthemis-boringssl of at least the version is was built with. Finally, libthemis-boringssl conflicts with libthemis so it cannot be installed along with it (or vice versa).
I thought about outlining how this works with later upgrades, but it became so complex that I scrapped the idea.",True,"{'THUMBS_UP': ['https://github.com/shadinua', 'https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,688,2020-07-29T15:16:32Z,2020-07-30T10:42:53Z,2020-08-05T12:44:51Z,MERGED,True,784,326,15,https://github.com/vixentael,"Update Swift, ObjC examples code to showcase keygen and passphrase APIs",8,"['enhancement', 'O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/688,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/688,"During working on reproducing #687 I've noticed that Swift examples code doesn't show new SymmetricKeygen API and EncryptWithPassphrase API.
I've updated example projects to include usage of this API:
swift

iOS-Carthage
iOS-CocoaPods
macOS-Carthage

objc

iOS-Carthage
iOS-CocoaPods
macOS-Carthage

Checklist
- [ ] Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
- [ ] Public API has proper documentation

 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)
 Example projects and code samples are up-to-date (in case of API changes)","During working on reproducing #687 I've noticed that Swift examples code doesn't show new SymmetricKeygen API and EncryptWithPassphrase API.
I've updated example projects to include usage of this API:
swift

iOS-Carthage
iOS-CocoaPods
macOS-Carthage

objc

iOS-Carthage
iOS-CocoaPods
macOS-Carthage

Checklist
- [ ] Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
- [ ] Public API has proper documentation

 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)
 Example projects and code samples are up-to-date (in case of API changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,688,2020-07-29T15:16:32Z,2020-07-30T10:42:53Z,2020-08-05T12:44:51Z,MERGED,True,784,326,15,https://github.com/vixentael,"Update Swift, ObjC examples code to showcase keygen and passphrase APIs",8,"['enhancement', 'O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/688,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/688#issuecomment-665964225,"During working on reproducing #687 I've noticed that Swift examples code doesn't show new SymmetricKeygen API and EncryptWithPassphrase API.
I've updated example projects to include usage of this API:
swift

iOS-Carthage
iOS-CocoaPods
macOS-Carthage

objc

iOS-Carthage
iOS-CocoaPods
macOS-Carthage

Checklist
- [ ] Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
- [ ] Public API has proper documentation

 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)
 Example projects and code samples are up-to-date (in case of API changes)","Also, what about Objective-C samples?

done :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,689,2020-08-05T13:36:59Z,2020-08-05T14:39:28Z,2020-08-05T14:39:51Z,MERGED,True,1,149,2,https://github.com/iamnotacake,Remove RustThemis wrapper changelog,1,"['docs :books:', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/689,https://github.com/iamnotacake,1,https://github.com/cossacklabs/themis/pull/689,"Remove the CHANGELOG.md since we already have one, common for all
libraries and wrappers
Fix link to point on common changelog

BTW, noticed interesting thing, lib.rs does not parse links in .md files the same way github or crates.io do. Links to Examples and Tests on the bottom are invalid. Possible solution -- hardcoded URLs to github.
Checklist

 The coding guidelines are followed","Remove the CHANGELOG.md since we already have one, common for all
libraries and wrappers
Fix link to point on common changelog

BTW, noticed interesting thing, lib.rs does not parse links in .md files the same way github or crates.io do. Links to Examples and Tests on the bottom are invalid. Possible solution -- hardcoded URLs to github.
Checklist

 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,689,2020-08-05T13:36:59Z,2020-08-05T14:39:28Z,2020-08-05T14:39:51Z,MERGED,True,1,149,2,https://github.com/iamnotacake,Remove RustThemis wrapper changelog,1,"['docs :books:', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/689,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/689#issuecomment-669215111,"Remove the CHANGELOG.md since we already have one, common for all
libraries and wrappers
Fix link to point on common changelog

BTW, noticed interesting thing, lib.rs does not parse links in .md files the same way github or crates.io do. Links to Examples and Tests on the bottom are invalid. Possible solution -- hardcoded URLs to github.
Checklist

 The coding guidelines are followed","Possible solution -- hardcoded URLs to github.

The downside is that the users who are browsing GitHub in non-master branches (e.g., stable) will still see links leading to the master branch. Arguably, the benefit of having working links on package listing sites is more significant.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,689,2020-08-05T13:36:59Z,2020-08-05T14:39:28Z,2020-08-05T14:39:51Z,MERGED,True,1,149,2,https://github.com/iamnotacake,Remove RustThemis wrapper changelog,1,"['docs :books:', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/689,https://github.com/iamnotacake,3,https://github.com/cossacklabs/themis/pull/689#issuecomment-669224122,"Remove the CHANGELOG.md since we already have one, common for all
libraries and wrappers
Fix link to point on common changelog

BTW, noticed interesting thing, lib.rs does not parse links in .md files the same way github or crates.io do. Links to Examples and Tests on the bottom are invalid. Possible solution -- hardcoded URLs to github.
Checklist

 The coding guidelines are followed","The issue about readme rendering on lib.rs is already opened, but no progress is done. I guess the problem is within their markdown renderer.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,691,2020-08-06T11:57:54Z,2020-08-06T16:24:23Z,2020-08-06T16:24:39Z,MERGED,True,10,535,17,https://github.com/iamnotacake,Drop libthemis-src support,3,"['compatibility', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/691,https://github.com/iamnotacake,1,https://github.com/cossacklabs/themis/pull/691,"RustThemis has a libthemis-src crate which can be enabled with
vendored feature. It will build Themis library on-the-fly, during
themis build. It was a nice idea in the beginning, aimed at making
developers' lives easier. However, it also has some issues and
maintenance overhead:

This is yet another configuration. There are tests for it, but they
don't cover actual themis execution in this configuration, only
libthemis-src build itself.
Those tests may cause false positives because they are run from the
repository root. In fact, currently published libthemis-src = 0.13.0
does not build because some files are missing from it.
We hijack a lot of decisions from the developers: how to link against
Themis and what cryptography backend to use. libthemis-src does not
offer a choice of the backend, it's always system OpenSSL.
Building libthemis-src requires a tricky repository layout with
symlinks that point to Themis source code. Every time a new build
dependency is added, maintainers need to make sure that all
dependencies are symlinked.
cargo publish does not handle symlinks well and it may break
publishing at times, when symlinks are included into the crate, not
the files they point to.


Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","RustThemis has a libthemis-src crate which can be enabled with
vendored feature. It will build Themis library on-the-fly, during
themis build. It was a nice idea in the beginning, aimed at making
developers' lives easier. However, it also has some issues and
maintenance overhead:

This is yet another configuration. There are tests for it, but they
don't cover actual themis execution in this configuration, only
libthemis-src build itself.
Those tests may cause false positives because they are run from the
repository root. In fact, currently published libthemis-src = 0.13.0
does not build because some files are missing from it.
We hijack a lot of decisions from the developers: how to link against
Themis and what cryptography backend to use. libthemis-src does not
offer a choice of the backend, it's always system OpenSSL.
Building libthemis-src requires a tricky repository layout with
symlinks that point to Themis source code. Every time a new build
dependency is added, maintainers need to make sure that all
dependencies are symlinked.
cargo publish does not handle symlinks well and it may break
publishing at times, when symlinks are included into the crate, not
the files they point to.


Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,691,2020-08-06T11:57:54Z,2020-08-06T16:24:23Z,2020-08-06T16:24:39Z,MERGED,True,10,535,17,https://github.com/iamnotacake,Drop libthemis-src support,3,"['compatibility', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/691,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/691#issuecomment-670029278,"RustThemis has a libthemis-src crate which can be enabled with
vendored feature. It will build Themis library on-the-fly, during
themis build. It was a nice idea in the beginning, aimed at making
developers' lives easier. However, it also has some issues and
maintenance overhead:

This is yet another configuration. There are tests for it, but they
don't cover actual themis execution in this configuration, only
libthemis-src build itself.
Those tests may cause false positives because they are run from the
repository root. In fact, currently published libthemis-src = 0.13.0
does not build because some files are missing from it.
We hijack a lot of decisions from the developers: how to link against
Themis and what cryptography backend to use. libthemis-src does not
offer a choice of the backend, it's always system OpenSSL.
Building libthemis-src requires a tricky repository layout with
symlinks that point to Themis source code. Every time a new build
dependency is added, maintainers need to make sure that all
dependencies are symlinked.
cargo publish does not handle symlinks well and it may break
publishing at times, when symlinks are included into the crate, not
the files they point to.


Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","If you say that it works, I trust you :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/692,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated","It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/692#issuecomment-669978343,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated","Well, of course it fails! I don't have mental capacity to deal with it today, or I'm afraid I'll need a new Mac and some painting to hang on the wall which would have taken the hit.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/692#issuecomment-670018348,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated",My testing results: themis-cocoapods works on iOS sims and devices; themis-carthage shows error during installation. Details in slack.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/692#issuecomment-670542255,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated","Okay... One issue was in that I cherry-picked my old commit from the experimental branch which implemented exported symbols list, and that list did not include recently added TSGenerateSymmetricKey() which is a free function, not a class. This should resolve some Carthage build issues. But not everything.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/692#issuecomment-670545050,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated","Another issues that are around:


CocoaPods spec fails to lint because it pulls Themis from the 0.13.0 tag straight, which does not include fixes for OpenSSL 1.1.1 compatibility.


Carthage on Bitrise fails with a weird error. Does this mean that Bitrise toolchain is too old?


Ld /Users/vagrant/Library/Developer/Xcode/DerivedData/ObjCThemis-cokqrmmbnpmoxudrqhfueshqgzwf/Build/Intermediates.noindex/ArchiveIntermediates/ObjCThemis\ (iOS)/IntermediateBuildFilesPath/ObjCThemis.build/Release-iphoneos/Themis\ (iOS).build/Objects-normal/armv7/objcthemis normal armv7 (in target: Themis (iOS))
    cd /Users/vagrant/git
    export IPHONEOS_DEPLOYMENT_TARGET=8.0
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -arch armv7 -dynamiclib -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS12.4.sdk -L/Users/vagrant/Library/Developer/Xcode/DerivedData/ObjCThemis-cokqrmmbnpmoxudrqhfueshqgzwf/Build/Intermediates.noindex/ArchiveIntermediates/ObjCThemis\ \(iOS\)/BuildProductsPath/Release-iphoneos -F/Users/vagrant/Library/Developer/Xcode/DerivedData/ObjCThemis-cokqrmmbnpmoxudrqhfueshqgzwf/Build/Intermediates.noindex/ArchiveIntermediates/ObjCThemis\ \(iOS\)/BuildProductsPath/Release-iphoneos -F/Users/vagrant/git/Carthage/Build/iOS -filelist /Users/vagrant/Library/Developer/Xcode/DerivedData/ObjCThemis-cokqrmmbnpmoxudrqhfueshqgzwf/Build/Intermediates.noindex/ArchiveIntermediates/ObjCThemis\ \(iOS\)/IntermediateBuildFilesPath/ObjCThemis.build/Release-iphoneos/Themis\ \(iOS\).build/Objects-normal/armv7/objcthemis.LinkFileList -exported_symbols_list /Users/vagrant/git/src/wrappers/themis/Obj-C/exported.symbols -install_name @rpath/objcthemis.framework/objcthemis -Xlinker -rpath -Xlinker @executable_path/Frameworks -Xlinker -rpath -Xlinker @loader_path/Frameworks -miphoneos-version-min=8.0 -dead_strip -Xlinker -object_path_lto -Xlinker /Users/vagrant/Library/Developer/Xcode/DerivedData/ObjCThemis-cokqrmmbnpmoxudrqhfueshqgzwf/Build/Intermediates.noindex/ArchiveIntermediates/ObjCThemis\ \(iOS\)/IntermediateBuildFilesPath/ObjCThemis.build/Release-iphoneos/Themis\ \(iOS\).build/Objects-normal/armv7/objcthemis_lto.o -fembed-bitcode -Xlinker -bitcode_verify -Xlinker -bitcode_hide_symbols -Xlinker -bitcode_symbol_map -Xlinker /Users/vagrant/Library/Developer/Xcode/DerivedData/ObjCThemis-cokqrmmbnpmoxudrqhfueshqgzwf/Build/Intermediates.noindex/ArchiveIntermediates/ObjCThemis\ \(iOS\)/BuildProductsPath/Release-iphoneos -fobjc-arc -fobjc-link-runtime -framework openssl -compatibility_version 1 -current_version 1 -Xlinker -dependency_info -Xlinker /Users/vagrant/Library/Developer/Xcode/DerivedData/ObjCThemis-cokqrmmbnpmoxudrqhfueshqgzwf/Build/Intermediates.noindex/ArchiveIntermediates/ObjCThemis\ \(iOS\)/IntermediateBuildFilesPath/ObjCThemis.build/Release-iphoneos/Themis\ \(iOS\).build/Objects-normal/armv7/objcthemis_dependency_info.dat -o /Users/vagrant/Library/Developer/Xcode/DerivedData/ObjCThemis-cokqrmmbnpmoxudrqhfueshqgzwf/Build/Intermediates.noindex/ArchiveIntermediates/ObjCThemis\ \(iOS\)/IntermediateBuildFilesPath/ObjCThemis.build/Release-iphoneos/Themis\ \(iOS\).build/Objects-normal/armv7/objcthemis
ld: could not reparse object file in bitcode bundle: 'Invalid bitcode version (Producer: '1100.0.33.12.0_0' Reader: '1001.0.46.4_0')', using libLTO version 'LLVM version 10.0.1, (clang-1001.0.46.4)' for architecture armv7
clang: error: linker command failed with exit code 1 (use -v to see invocation)


@vixentael sees a different Carthage build failure with a lot of errors like

docs/examples/swift/iOS-Carthage/Carthage/Checkouts/themis/Carthage/Build/iOS/openssl.framework/Headers/bn.h:267:33: error: unknown type name 'BN_ULONG'
BN_ULONG BN_div_word(BIGNUM *a, BN_ULONG w);

which are preceded by
docs/examples/swift/iOS-Carthage/Carthage/Checkouts/themis/Carthage/Build/iOS/openssl.framework/Headers/opensslconf.h:24:3: error: Unable to determine target or target not included in OpenSSL build
# error Unable to determine target or target not included in OpenSSL build
  ^

which suggests that the OpenSSL was not compiled for some architectures?..",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/692#issuecomment-670558446,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated","Previous Bitrise failure seems to have been caused by Bitrise using Xcode 10.3.x which cannot parse bitcode produce by my Xcode 11.2 used to build OpenSSL. Given than Xcode 11.6 is the current stable (= supported by Apple), I guess it's justified that we bump the requirements to Xcode 11.x. I have asked Bitrise to use Xcode 11.0.x on macOS 10.14 for builds from now on.
Also, merge conflicts prevented other tasks on Bitrise from finishing successfully. I have synced this PR with master, pushed. This should (🤞) fix Bitrise. It also triggers GitHub Actions build. (No idea why changing exported.symbols did not.)",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/692#issuecomment-670569682,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated",Fixed up the “version hack” used for CocoaPods spec linting. It turned out that the previous version of the hack (added in #610) was not effective and did not actuall update the spec file. Now it is properly updated with the current commit. This should make the last broken build on GitHub Actions go green.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/ilammy,8,https://github.com/cossacklabs/themis/pull/692#issuecomment-670652604,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated",The last issue – Carthage failure about missing architectures – seems to be caused by indeed missing arm64e slice in OpenSSL binaries. The package will be updated shortly to contain it.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/ilammy,9,https://github.com/cossacklabs/themis/pull/692#issuecomment-671323281,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated","Okay, the following PRs resolve issues found:

change in Bitrise configuration to build with Xcode 11.0.x — failures on Bitrise
d224ffc — CocoaPods spec linting
cossacklabs/openssl-apple#6 — build failures seen by @vixentael due to missing architectures
cossacklabs/openssl-apple#7 — possible failure to validate versions of Carthage installations

The 1.1.107 release of OpenSSL has also been updated. I'll throw in some commit here to trigger another build.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/ilammy,10,https://github.com/cossacklabs/themis/pull/692#issuecomment-671534534,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated","There is another (final final final) change, adding support for arm64e to Xcode projects built by Carthage. This ensures that Carthage will built this architecture even if Xcode does not select it by default (e.g., Xcode 11 does not). Otherwise missing architecture in dependencies may prevent apps from being tested with arm64e. (As noted above, we already build OpenSSL for arm64e as well.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/vixentael,11,https://github.com/cossacklabs/themis/pull/692#issuecomment-671852829,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated","Here we're waiting for me to test these changes on arm64e real device (iPhone XS) tomorrow, then we'll either merge this PR or decide what to do next.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/ilammy,12,https://github.com/cossacklabs/themis/pull/692#issuecomment-672885950,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated","We have encountered some more compilation issues related to bitcode support in Carthage for arm64e. Trying to enable it as a last ditch effort to make it work. If it doesn't, we'll probably revert recent changes.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/vixentael,13,https://github.com/cossacklabs/themis/pull/692#issuecomment-672895520,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated","Current state of things:

we've tested on arm64e real device — all works as expected
if users (either on Xcode 11 or Xcode12 beta4) add arm64e explicitly to their project architects, build fails due to missing bitcode in arm64e slice. We believe that currently there's nothing we can do about this, maybe arm64e will be ""part of the family"" with Xcode12 stable (or later).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,692,2020-08-06T14:44:06Z,2020-08-12T19:17:46Z,2020-11-11T22:00:45Z,MERGED,True,103,13,8,https://github.com/ilammy,Update to OpenSSL 1.1.1g,12,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'backport', 'dependencies', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/692,https://github.com/ilammy,14,https://github.com/cossacklabs/themis/pull/692#issuecomment-672898034,"It's enough for us to be slaves to ye olde OpenSSL 1.0.2. Embrace the blessing of OpenSSL 1.1.1 which does not require users to register mutex locking callbacks to be thread safe, and brings other improvements (in particular, non-broken bitcode).
Unfortunately, the providers that we used are not very eager on upgrading to OpenSSL 1.1.1, especially the CocoaPods one. So I took a shot at packaging it myself. This PR switches from https://github.com/krzyzanowskim/OpenSSL and https://github.com/levigroker/GRKOpenSSLFramework to https://github.com/cossacklabs/openssl-apple
Carthage
The new OpenSSL is distributed as a binary-only framework. It will be downloaded from GitHub instead of building it from source. This is not much different from what the previous vendor did, but is more stable.
Carthage builds use the static flavor of the framework.  We have run into issues with dynamic frameworks of OpenSSL when using Carthage, but static frameworks seems to do very good job: the resulting binaries are smaller, apps start a bit faster, and users are freed from the hassle of dealing with OpenSSL linkage to their app.
Note that due to the way static linkage works, we will be exporting all OpenSSL symbols from ObjCThemis by default. In order to avoid conflicts, export only limited subset of symbols: Objective-C classes of ObjCThemis.
For users: It is now not required to link and embed openssl.framework into your application. Only objcthemis.framework needs to be included.
CocoaPods
The new OpenSSL is distributed as a tricky pod (which also downloads binaries from GitHub), but for consumers like Themis it's just a pod.
Introduce a separate subspec for the build with newer OpenSSL, and make it the default choice. We keep the old specs around in case someone needs them to share GRKOpenSSL or BoringSSL with other dependencies, as it is not possible to use CLOpenSSL simultaneously with them due to OpenSSL symbol conflicts.
The new subspec has its oddities, but it's all (un)known magic that seems to be absolutely necessary to build Themis properly for iOS.
Xcode update
Xcode 10.x is incompatible with bitcode provided by prebuilt OpenSSL frameworks. Therefore Xcode 11.0 is now the minimum required version for ObjCThemis and SwiftThemis.
Experimental arm64e support
ObjCThemis installed with Carthage now enables arm64e architecture. You can test your apps with it as well. (For CocoaPods you will have to add the architecture to the workspace as outlined in Apple documentation above.)
The support is still experimental and is know to fail on some Xcode versions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (should be updated after release)
 Changelog is updated","In any case, I think it's too early for us to claim full arm64e support in all use cases so I have removed those lines from the changelog (and resolved merge conflicts with master). This should the really final state of this PR 🤞",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,693,2020-08-11T11:34:48Z,2020-08-12T13:39:05Z,2020-08-12T13:39:15Z,MERGED,True,221,21,4,https://github.com/iamnotacake,Runtime check for EC keys in Secure Session,7,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/693,https://github.com/iamnotacake,1,https://github.com/cossacklabs/themis/pull/693,"Deny non-EC keys when creating/negotiating Secure Session.
It was possible to create Secure Session by passing private RSA key to
secure_session_create(). But then it would fail while negotiating
connection with another peer since Secure Session doesn't actually
support RSA keys. This PR make it fail a little bit earlier.
Move test keys to different file
Add tests to make sure secure_session_create fails with EC pub key, RSA priv/pub keys.
Add test to make sure secure_session_create fail with empty peer ID (id == NULL || id_len == 0).
Mention the key limitation in changelog.


Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","Deny non-EC keys when creating/negotiating Secure Session.
It was possible to create Secure Session by passing private RSA key to
secure_session_create(). But then it would fail while negotiating
connection with another peer since Secure Session doesn't actually
support RSA keys. This PR make it fail a little bit earlier.
Move test keys to different file
Add tests to make sure secure_session_create fails with EC pub key, RSA priv/pub keys.
Add test to make sure secure_session_create fail with empty peer ID (id == NULL || id_len == 0).
Mention the key limitation in changelog.


Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,695,2020-08-12T15:18:21Z,2020-08-12T15:47:16Z,2020-08-12T17:06:56Z,MERGED,True,42,29,5,https://github.com/iamnotacake,Fix GoReport issues,1,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/695,https://github.com/iamnotacake,1,https://github.com/cossacklabs/themis/pull/695,"Few small changes in Go examples and Go tests to make GoReport happy:

Fix typos
Replace unused results with _
Rewrite Secure Cell example, split main() into few more specific example functions


Checklist

 The coding guidelines are followed","Few small changes in Go examples and Go tests to make GoReport happy:

Fix typos
Replace unused results with _
Rewrite Secure Cell example, split main() into few more specific example functions


Checklist

 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,696,2020-08-12T17:16:23Z,2020-08-12T17:40:25Z,2020-08-12T17:41:37Z,MERGED,True,8,8,1,https://github.com/iamnotacake,Fix GoReport issues,1,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/696,https://github.com/iamnotacake,1,https://github.com/cossacklabs/themis/pull/696,"Convert func names to camelCase because golint wants it like that.
Try №2.

Checklist

 The coding guidelines are followed","Convert func names to camelCase because golint wants it like that.
Try №2.

Checklist

 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,697,2020-08-13T08:46:43Z,2020-08-13T14:47:22Z,2020-08-13T14:47:28Z,MERGED,True,15,7,7,https://github.com/ilammy,Themis 0.13.1,3,['release'],https://github.com/cossacklabs/themis/pull/697,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/697,"Update the changelog. Bump versions of the language wrappers that we are going to update, except for Go and Carthage which need a tag. A provisional tag 0.13.1 is already placed on this commit for the podspec to validate correctly. (I am sorry, Carthage users, you chose your poison well.)
There are no significant changes in Core (aside from OpenSSL 1.1.1 compatibility meaningful only for ObjCThemis). We do not have to release 0.13.1 there.
Checklist

 Change is covered by automated tests (hopefully)
 Example projects and code samples are up-to-date (no API changes)
 Changelog is updated","Update the changelog. Bump versions of the language wrappers that we are going to update, except for Go and Carthage which need a tag. A provisional tag 0.13.1 is already placed on this commit for the podspec to validate correctly. (I am sorry, Carthage users, you chose your poison well.)
There are no significant changes in Core (aside from OpenSSL 1.1.1 compatibility meaningful only for ObjCThemis). We do not have to release 0.13.1 there.
Checklist

 Change is covered by automated tests (hopefully)
 Example projects and code samples are up-to-date (no API changes)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,697,2020-08-13T08:46:43Z,2020-08-13T14:47:22Z,2020-08-13T14:47:28Z,MERGED,True,15,7,7,https://github.com/ilammy,Themis 0.13.1,3,['release'],https://github.com/cossacklabs/themis/pull/697,https://github.com/iamnotacake,2,https://github.com/cossacklabs/themis/pull/697#issuecomment-673355252,"Update the changelog. Bump versions of the language wrappers that we are going to update, except for Go and Carthage which need a tag. A provisional tag 0.13.1 is already placed on this commit for the podspec to validate correctly. (I am sorry, Carthage users, you chose your poison well.)
There are no significant changes in Core (aside from OpenSSL 1.1.1 compatibility meaningful only for ObjCThemis). We do not have to release 0.13.1 there.
Checklist

 Change is covered by automated tests (hopefully)
 Example projects and code samples are up-to-date (no API changes)
 Changelog is updated","There seems to be nothing that can break :)
So, the wrappers w/o any visible changes/fixes (such as PHP, Ruby, Python, Rust) are staying at 0.13.0?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,697,2020-08-13T08:46:43Z,2020-08-13T14:47:22Z,2020-08-13T14:47:28Z,MERGED,True,15,7,7,https://github.com/ilammy,Themis 0.13.1,3,['release'],https://github.com/cossacklabs/themis/pull/697,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/697#issuecomment-673357376,"Update the changelog. Bump versions of the language wrappers that we are going to update, except for Go and Carthage which need a tag. A provisional tag 0.13.1 is already placed on this commit for the podspec to validate correctly. (I am sorry, Carthage users, you chose your poison well.)
There are no significant changes in Core (aside from OpenSSL 1.1.1 compatibility meaningful only for ObjCThemis). We do not have to release 0.13.1 there.
Checklist

 Change is covered by automated tests (hopefully)
 Example projects and code samples are up-to-date (no API changes)
 Changelog is updated","There seems to be nothing that can break :)

Oh sweet summer child... I'm confident that something is going to break, most likely Apple stuff because it's so hostile. Or, you know, Android CI will decide to take a day off.

So, the wrappers w/o any visible changes/fixes (such as PHP, Ruby, Python, Rust) are staying at 0.13.0?

Yes, they stay at 0.13.0, just like Themis Core. If something needs another patch update then updated wrappers will go to 0.13.2 (possibly skipping 0.13.1), with everything that does not need updates staying at 0.13.0 or 0.13.1.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,697,2020-08-13T08:46:43Z,2020-08-13T14:47:22Z,2020-08-13T14:47:28Z,MERGED,True,15,7,7,https://github.com/ilammy,Themis 0.13.1,3,['release'],https://github.com/cossacklabs/themis/pull/697,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/697#issuecomment-673452818,"Update the changelog. Bump versions of the language wrappers that we are going to update, except for Go and Carthage which need a tag. A provisional tag 0.13.1 is already placed on this commit for the podspec to validate correctly. (I am sorry, Carthage users, you chose your poison well.)
There are no significant changes in Core (aside from OpenSSL 1.1.1 compatibility meaningful only for ObjCThemis). We do not have to release 0.13.1 there.
Checklist

 Change is covered by automated tests (hopefully)
 Example projects and code samples are up-to-date (no API changes)
 Changelog is updated","There were some missing changes in the base branch which prevented CocoaPods spec from being tested on GitHub Actions properly. Also, there are some last-minute updates for GoThemis for it to have a README in the upcoming release. Synchronized this branch with the base, it should be green now (🤞).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,698,2020-08-13T09:41:01Z,2020-08-13T14:36:16Z,2020-08-13T14:36:49Z,MERGED,True,12,0,2,https://github.com/iamnotacake,Fix NodeJS SecureSession handling nullptr,2,['W-JsThemis :lollipop:'],https://github.com/cossacklabs/themis/pull/698,https://github.com/iamnotacake,1,https://github.com/cossacklabs/themis/pull/698,"Checking whether passed key is a private key is not enough since not all
private keys are supported. For example, secure_session_create() may
return NULL for RSA key. In this case, we get no exception on JS side
but as soon as we try to connect to other peer (or accept connection)
using created object, we get error. This commit makes sure we throw JS
exception in case secure_session_create() returns NULL.
Not sure whether this is the best way to do the check but AFAIK using C++ exceptions
inside NodeJS bindings may not be a good idea. Other idea was to throw something from
SecureSession::SecureSession() and then put SecureSession* obj = new SecureSession(...);
into try {} block. Also, why throw the exception if it will be immediately checked afterwards,
and it does not contain any useful information, just failed or succeed (no exception).

Checklist

 Change is covered by automated tests
This change (obviously) does not break existing tests.
However, tests like ""make sure SecureSession does now allow RSA private keys (as well as any public)""
will be done as part of different PR. And it won't be NodeJS wrapper only.
 The coding guidelines are followed","Checking whether passed key is a private key is not enough since not all
private keys are supported. For example, secure_session_create() may
return NULL for RSA key. In this case, we get no exception on JS side
but as soon as we try to connect to other peer (or accept connection)
using created object, we get error. This commit makes sure we throw JS
exception in case secure_session_create() returns NULL.
Not sure whether this is the best way to do the check but AFAIK using C++ exceptions
inside NodeJS bindings may not be a good idea. Other idea was to throw something from
SecureSession::SecureSession() and then put SecureSession* obj = new SecureSession(...);
into try {} block. Also, why throw the exception if it will be immediately checked afterwards,
and it does not contain any useful information, just failed or succeed (no exception).

Checklist

 Change is covered by automated tests
This change (obviously) does not break existing tests.
However, tests like ""make sure SecureSession does now allow RSA private keys (as well as any public)""
will be done as part of different PR. And it won't be NodeJS wrapper only.
 The coding guidelines are followed",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,699,2020-08-13T12:08:05Z,2020-08-13T12:34:13Z,2020-08-13T12:34:17Z,MERGED,True,43,0,2,https://github.com/ilammy,GoThemis README,2,"['docs :books:', 'W-GoThemis :hamster:', 'backport']",https://github.com/cossacklabs/themis/pull/699,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/699,"pkg.go.dev does not look at the repository README, it needs a file (not a symlink) near the go.mod file. Use a short README for Go, similar to the one used by RustThemis, to minimize maintenance effort.
Note that pkg.go.dev cannot resolve relative links to files outside of the Go module directory (gothemis) so we can't link to examples and license like that. Instead, direct links to the master branch of the repository are provided. It's not optimal, but a good compromise.
Checklist

 Changelog is updated","pkg.go.dev does not look at the repository README, it needs a file (not a symlink) near the go.mod file. Use a short README for Go, similar to the one used by RustThemis, to minimize maintenance effort.
Note that pkg.go.dev cannot resolve relative links to files outside of the Go module directory (gothemis) so we can't link to examples and license like that. Instead, direct links to the master branch of the repository are provided. It's not optimal, but a good compromise.
Checklist

 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,699,2020-08-13T12:08:05Z,2020-08-13T12:34:13Z,2020-08-13T12:34:17Z,MERGED,True,43,0,2,https://github.com/ilammy,GoThemis README,2,"['docs :books:', 'W-GoThemis :hamster:', 'backport']",https://github.com/cossacklabs/themis/pull/699,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/699#issuecomment-673439656,"pkg.go.dev does not look at the repository README, it needs a file (not a symlink) near the go.mod file. Use a short README for Go, similar to the one used by RustThemis, to minimize maintenance effort.
Note that pkg.go.dev cannot resolve relative links to files outside of the Go module directory (gothemis) so we can't link to examples and license like that. Instead, direct links to the master branch of the repository are provided. It's not optimal, but a good compromise.
Checklist

 Changelog is updated","This should become visible on pkg.go.dev starting with upcoming 0.13.1, once it's cherry-picked and a proper release is made.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,700,2020-08-13T16:27:47Z,2020-08-13T18:00:05Z,2020-08-14T08:36:16Z,MERGED,True,38,15,1,https://github.com/ilammy,"Sync changelog with ""release/0.13"" branch",1,['docs :books:'],https://github.com/cossacklabs/themis/pull/700,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/700,"Add changelog entries included for 0.13.1 release. Here they were planned for (yet unreleased) 0.14.0, but given that 0.13.1 is out, move the entries to that section instead.
Checklist

 Changelog is updated 😉","Add changelog entries included for 0.13.1 release. Here they were planned for (yet unreleased) 0.14.0, but given that 0.13.1 is out, move the entries to that section instead.
Checklist

 Changelog is updated 😉",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,701,2020-08-13T18:05:06Z,2020-08-14T09:19:28Z,2020-08-14T09:19:31Z,MERGED,True,154,177,25,https://github.com/vixentael,Update iOS and macOS examples to use Themis 0.13.1 and OpenSSL 1.1.1g,2,"['docs :books:', 'O-iOS :iphone:', 'O-macOS :computer:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/701,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/701,"Updated iOS and macOS examples to use Themis 0.13.1 and OpenSSL 1.1.1g.
Checklist

[] Change is covered by automated tests
[] Benchmark results are attached (if applicable)
 The coding guidelines are followed
[] Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Updated iOS and macOS examples to use Themis 0.13.1 and OpenSSL 1.1.1g.
Checklist

[] Change is covered by automated tests
[] Benchmark results are attached (if applicable)
 The coding guidelines are followed
[] Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,702,2020-08-14T09:09:46Z,2020-08-18T17:03:10Z,2020-08-18T17:03:18Z,MERGED,True,50,4,4,https://github.com/ilammy,Build embedded BoringSSL with symbol prefix,4,"['core', 'O-macOS :computer:', 'infrastructure', 'C-BoringSSL', 'O-Linux :penguin:']",https://github.com/cossacklabs/themis/pull/702,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/702,"Since PR #681, when building with ENGINE=boringssl, Soter embeds BoringSSL into its libraries, including static ones. This enables the users to link only against libthemis.a and libsoter.a, without having to salvage the BoringSSL binaries from the build directory (which are not included into packages).
What is the issue here?
However, embedding BoringSSL has a side effect. Due to the way static linkage works, all BoringSSL symbols from libsoter.a are indistinguishable from Soter symbols for exporting purposes. That is, any binary linked against libsoter.a will by default include and export all BoringSSL symbols. This is problematic because it can cause symbol conflicts. Dynamic libraries are not affected by this because we control what symbols are exported. That way BoringSSL stays inside Soter library and does not cause conflicts.
In order to avoid conflicts, start using BoringSSL's symbol renaming facility. EVP_sha256() will be renamed into SOTER_0_14_0_EVP_sha256() and all call sites from Soter will refer to this new symbol instead. This makes Soter's BoringSSL copy independent of any WhateverSSL is there in the binary.
How renaming works
Bad news here is that renaming requires building BoringSSL twice. First we build it to enumerate the symbols to rename, then it is built again, now with renamed symbols. All symbols need to be renamed, not only those used by Soter, because the entire BoringSSL library is embedded into Soter. We cannot simply enumerate and hardcode what we use.
After building BoringSSL with renamed symbols, Soter needs to use them in renamed form. For that it needs to be built with BORINGSSL_PREFIX define and <boringssl_prefix_symbols.h> in its include path. That header will perform actual renaming using C preprocessor.
Other build details
Previously Soter did not care about build order, but now BoringSSL needs to be built (possibly renamed) before Soter can be built.
Note that extracting symbols with BoringSSL tool requires Go. BoringSSL build itself requires Go so this is not a new dependency.
Disable BoringSSL renaming for certain systems
Enable BoringSSL symbol renaming by default for Linux and macOS desktop builds and disable it for WebAssembly builds.
AndroidThemis also uses BoringSSL, but it does not use Themis Makefile for that. It does not use renaming either.
Renaming is important only for the case of static libraries, and only desktop systems provide them in packages. Mobile systems use dynamic linkage for the most part and avoid symbol conflicts.
The default can be overridden from the command line:
make ENGINE=boringssl RENAME_BORINGSSL_SYMBOLS=no

or ""yes"" to enable it.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Since PR #681, when building with ENGINE=boringssl, Soter embeds BoringSSL into its libraries, including static ones. This enables the users to link only against libthemis.a and libsoter.a, without having to salvage the BoringSSL binaries from the build directory (which are not included into packages).
What is the issue here?
However, embedding BoringSSL has a side effect. Due to the way static linkage works, all BoringSSL symbols from libsoter.a are indistinguishable from Soter symbols for exporting purposes. That is, any binary linked against libsoter.a will by default include and export all BoringSSL symbols. This is problematic because it can cause symbol conflicts. Dynamic libraries are not affected by this because we control what symbols are exported. That way BoringSSL stays inside Soter library and does not cause conflicts.
In order to avoid conflicts, start using BoringSSL's symbol renaming facility. EVP_sha256() will be renamed into SOTER_0_14_0_EVP_sha256() and all call sites from Soter will refer to this new symbol instead. This makes Soter's BoringSSL copy independent of any WhateverSSL is there in the binary.
How renaming works
Bad news here is that renaming requires building BoringSSL twice. First we build it to enumerate the symbols to rename, then it is built again, now with renamed symbols. All symbols need to be renamed, not only those used by Soter, because the entire BoringSSL library is embedded into Soter. We cannot simply enumerate and hardcode what we use.
After building BoringSSL with renamed symbols, Soter needs to use them in renamed form. For that it needs to be built with BORINGSSL_PREFIX define and <boringssl_prefix_symbols.h> in its include path. That header will perform actual renaming using C preprocessor.
Other build details
Previously Soter did not care about build order, but now BoringSSL needs to be built (possibly renamed) before Soter can be built.
Note that extracting symbols with BoringSSL tool requires Go. BoringSSL build itself requires Go so this is not a new dependency.
Disable BoringSSL renaming for certain systems
Enable BoringSSL symbol renaming by default for Linux and macOS desktop builds and disable it for WebAssembly builds.
AndroidThemis also uses BoringSSL, but it does not use Themis Makefile for that. It does not use renaming either.
Renaming is important only for the case of static libraries, and only desktop systems provide them in packages. Mobile systems use dynamic linkage for the most part and avoid symbol conflicts.
The default can be overridden from the command line:
make ENGINE=boringssl RENAME_BORINGSSL_SYMBOLS=no

or ""yes"" to enable it.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,702,2020-08-14T09:09:46Z,2020-08-18T17:03:10Z,2020-08-18T17:03:18Z,MERGED,True,50,4,4,https://github.com/ilammy,Build embedded BoringSSL with symbol prefix,4,"['core', 'O-macOS :computer:', 'infrastructure', 'C-BoringSSL', 'O-Linux :penguin:']",https://github.com/cossacklabs/themis/pull/702,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/702#issuecomment-674893588,"Since PR #681, when building with ENGINE=boringssl, Soter embeds BoringSSL into its libraries, including static ones. This enables the users to link only against libthemis.a and libsoter.a, without having to salvage the BoringSSL binaries from the build directory (which are not included into packages).
What is the issue here?
However, embedding BoringSSL has a side effect. Due to the way static linkage works, all BoringSSL symbols from libsoter.a are indistinguishable from Soter symbols for exporting purposes. That is, any binary linked against libsoter.a will by default include and export all BoringSSL symbols. This is problematic because it can cause symbol conflicts. Dynamic libraries are not affected by this because we control what symbols are exported. That way BoringSSL stays inside Soter library and does not cause conflicts.
In order to avoid conflicts, start using BoringSSL's symbol renaming facility. EVP_sha256() will be renamed into SOTER_0_14_0_EVP_sha256() and all call sites from Soter will refer to this new symbol instead. This makes Soter's BoringSSL copy independent of any WhateverSSL is there in the binary.
How renaming works
Bad news here is that renaming requires building BoringSSL twice. First we build it to enumerate the symbols to rename, then it is built again, now with renamed symbols. All symbols need to be renamed, not only those used by Soter, because the entire BoringSSL library is embedded into Soter. We cannot simply enumerate and hardcode what we use.
After building BoringSSL with renamed symbols, Soter needs to use them in renamed form. For that it needs to be built with BORINGSSL_PREFIX define and <boringssl_prefix_symbols.h> in its include path. That header will perform actual renaming using C preprocessor.
Other build details
Previously Soter did not care about build order, but now BoringSSL needs to be built (possibly renamed) before Soter can be built.
Note that extracting symbols with BoringSSL tool requires Go. BoringSSL build itself requires Go so this is not a new dependency.
Disable BoringSSL renaming for certain systems
Enable BoringSSL symbol renaming by default for Linux and macOS desktop builds and disable it for WebAssembly builds.
AndroidThemis also uses BoringSSL, but it does not use Themis Makefile for that. It does not use renaming either.
Renaming is important only for the case of static libraries, and only desktop systems provide them in packages. Mobile systems use dynamic linkage for the most part and avoid symbol conflicts.
The default can be overridden from the command line:
make ENGINE=boringssl RENAME_BORINGSSL_SYMBOLS=no

or ""yes"" to enable it.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","The build currently fails in CircleCI when building BoringSSL because of outdated Go version. CircleCI uses Go 1.9 while BoringSSL recommends using the latest stable version (Go 1.15 as of now). I have checked that using the latest version fixes the issue.
Well, given #709, I guess I'll just sit here and wait while the corpse of my enemy floats past me and then refresh this PR.
@shadinua, take a note for Buildbot on this.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,703,2020-08-14T15:14:28Z,2020-08-14T15:50:12Z,2020-08-14T19:14:56Z,MERGED,True,34,57,10,https://github.com/ilammy,Carthage and CocoaPods import compatibility,4,"['docs :books:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/703,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/703,"Recently added objcthemis.framework turned out to be a mistake (#604). It is not possible to migrate to it because then Swift code will not be able to find it by its module name (themis). Revert the changes and relink examples to themis.framework.
Applications should use themis.framework when Themis is installed via Carthage, as they did in Themis 0.12 and before.
However, since ObjCThemis 0.13.1, openssl.framework is now not necessary in applications. It is statically linked into themis.framework instead. Remove openssl.framework from “Frameworks, Libraries, and Embedded Content”.
Finally, there is a common way to import ObjCThemis whether it is installed via Carthage or CocoaPods:
@import themis;
This is now the preferred import form, instead of #import <objcthemis/objcthemis.h> or #import <themis/themis.h>.
(Currently, out unit tests still use #import. They do not work with @import for some reason. Since it's not critical, let them be for now.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated","Recently added objcthemis.framework turned out to be a mistake (#604). It is not possible to migrate to it because then Swift code will not be able to find it by its module name (themis). Revert the changes and relink examples to themis.framework.
Applications should use themis.framework when Themis is installed via Carthage, as they did in Themis 0.12 and before.
However, since ObjCThemis 0.13.1, openssl.framework is now not necessary in applications. It is statically linked into themis.framework instead. Remove openssl.framework from “Frameworks, Libraries, and Embedded Content”.
Finally, there is a common way to import ObjCThemis whether it is installed via Carthage or CocoaPods:
@import themis;
This is now the preferred import form, instead of #import <objcthemis/objcthemis.h> or #import <themis/themis.h>.
(Currently, out unit tests still use #import. They do not work with @import for some reason. Since it's not critical, let them be for now.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,704,2020-08-14T15:56:02Z,2020-08-14T19:16:20Z,2020-08-14T19:16:30Z,MERGED,True,806,2333,20,https://github.com/ilammy,Remove ObjCThemis.xcodeproj,6,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'compatibility', 'W-ObjCThemis :art:', 'M-Carthage', 'backport']",https://github.com/cossacklabs/themis/pull/704,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/704,"The idea behind building objcthemis.framework (added in #604) has been to unify import syntax between Carthage and CocoaPods. Unfortunately, it turned out to be a mistake. objcthemis.framework does not work without themis.framework being present alongside it because of how module resolution works. Despite objcthemis.framework providing the same themis module as themis.framework, the compiler will look for a framework named themis.framework when resolving import themis.
Moreover, the original issue that objcthemis.framework has been called to rectify can be resolved more elegantly by importing the module:
@import themis;
which work well with themis.framework in both Carthage and CocoaPods.
Since objcthemis.framework does not bring any value, remove it. Move all new things added to ObjCThemis.xcodeproj into Themis.xcodeproj (such as testing Swift 4 vs 5). Remove the import warning. Now Carthage will build only one framework: themis.framework from Themis.xcodeproj.
I am sorry for the trouble and confusion of this fizzled migration 🙏 😣
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (#703)
 Changelog is updated","The idea behind building objcthemis.framework (added in #604) has been to unify import syntax between Carthage and CocoaPods. Unfortunately, it turned out to be a mistake. objcthemis.framework does not work without themis.framework being present alongside it because of how module resolution works. Despite objcthemis.framework providing the same themis module as themis.framework, the compiler will look for a framework named themis.framework when resolving import themis.
Moreover, the original issue that objcthemis.framework has been called to rectify can be resolved more elegantly by importing the module:
@import themis;
which work well with themis.framework in both Carthage and CocoaPods.
Since objcthemis.framework does not bring any value, remove it. Move all new things added to ObjCThemis.xcodeproj into Themis.xcodeproj (such as testing Swift 4 vs 5). Remove the import warning. Now Carthage will build only one framework: themis.framework from Themis.xcodeproj.
I am sorry for the trouble and confusion of this fizzled migration 🙏 😣
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (#703)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,704,2020-08-14T15:56:02Z,2020-08-14T19:16:20Z,2020-08-14T19:16:30Z,MERGED,True,806,2333,20,https://github.com/ilammy,Remove ObjCThemis.xcodeproj,6,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'compatibility', 'W-ObjCThemis :art:', 'M-Carthage', 'backport']",https://github.com/cossacklabs/themis/pull/704,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/704#issuecomment-674216718,"The idea behind building objcthemis.framework (added in #604) has been to unify import syntax between Carthage and CocoaPods. Unfortunately, it turned out to be a mistake. objcthemis.framework does not work without themis.framework being present alongside it because of how module resolution works. Despite objcthemis.framework providing the same themis module as themis.framework, the compiler will look for a framework named themis.framework when resolving import themis.
Moreover, the original issue that objcthemis.framework has been called to rectify can be resolved more elegantly by importing the module:
@import themis;
which work well with themis.framework in both Carthage and CocoaPods.
Since objcthemis.framework does not bring any value, remove it. Move all new things added to ObjCThemis.xcodeproj into Themis.xcodeproj (such as testing Swift 4 vs 5). Remove the import warning. Now Carthage will build only one framework: themis.framework from Themis.xcodeproj.
I am sorry for the trouble and confusion of this fizzled migration 🙏 😣
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (#703)
 Changelog is updated","If unit tests are passing, then we've tested all use cases (🤞🤞🤞🤞)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,704,2020-08-14T15:56:02Z,2020-08-14T19:16:20Z,2020-08-14T19:16:30Z,MERGED,True,806,2333,20,https://github.com/ilammy,Remove ObjCThemis.xcodeproj,6,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'compatibility', 'W-ObjCThemis :art:', 'M-Carthage', 'backport']",https://github.com/cossacklabs/themis/pull/704,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/704#issuecomment-674219534,"The idea behind building objcthemis.framework (added in #604) has been to unify import syntax between Carthage and CocoaPods. Unfortunately, it turned out to be a mistake. objcthemis.framework does not work without themis.framework being present alongside it because of how module resolution works. Despite objcthemis.framework providing the same themis module as themis.framework, the compiler will look for a framework named themis.framework when resolving import themis.
Moreover, the original issue that objcthemis.framework has been called to rectify can be resolved more elegantly by importing the module:
@import themis;
which work well with themis.framework in both Carthage and CocoaPods.
Since objcthemis.framework does not bring any value, remove it. Move all new things added to ObjCThemis.xcodeproj into Themis.xcodeproj (such as testing Swift 4 vs 5). Remove the import warning. Now Carthage will build only one framework: themis.framework from Themis.xcodeproj.
I am sorry for the trouble and confusion of this fizzled migration 🙏 😣
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (#703)
 Changelog is updated","Turns out you can't easily remove a thing just like that in wonderful world of development for fruit company property. The last bunch of commits fixes up various issues that rose after an attempt to simply rename the project files. In particular, unit tests get a workaround for the issue which the original ObjCThemis.xcodeproj intended to solve.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,704,2020-08-14T15:56:02Z,2020-08-14T19:16:20Z,2020-08-14T19:16:30Z,MERGED,True,806,2333,20,https://github.com/ilammy,Remove ObjCThemis.xcodeproj,6,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'compatibility', 'W-ObjCThemis :art:', 'M-Carthage', 'backport']",https://github.com/cossacklabs/themis/pull/704,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/704#issuecomment-674233059,"The idea behind building objcthemis.framework (added in #604) has been to unify import syntax between Carthage and CocoaPods. Unfortunately, it turned out to be a mistake. objcthemis.framework does not work without themis.framework being present alongside it because of how module resolution works. Despite objcthemis.framework providing the same themis module as themis.framework, the compiler will look for a framework named themis.framework when resolving import themis.
Moreover, the original issue that objcthemis.framework has been called to rectify can be resolved more elegantly by importing the module:
@import themis;
which work well with themis.framework in both Carthage and CocoaPods.
Since objcthemis.framework does not bring any value, remove it. Move all new things added to ObjCThemis.xcodeproj into Themis.xcodeproj (such as testing Swift 4 vs 5). Remove the import warning. Now Carthage will build only one framework: themis.framework from Themis.xcodeproj.
I am sorry for the trouble and confusion of this fizzled migration 🙏 😣
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (#703)
 Changelog is updated",,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,705,2020-08-14T19:25:25Z,2020-08-14T20:04:09Z,2020-08-14T20:04:14Z,MERGED,True,10,8,2,https://github.com/ilammy,Themis 0.13.2,1,['release'],https://github.com/cossacklabs/themis/pull/705,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/705,"Hotfix for Carthage, removing dysfunctional ObjCThemis.xcodeproj.
Provisional tag 0.13.2 currently points to this commit, will retag and release once merged.
Checklist

 Change is covered by automated tests
 Changelog is updated","Hotfix for Carthage, removing dysfunctional ObjCThemis.xcodeproj.
Provisional tag 0.13.2 currently points to this commit, will retag and release once merged.
Checklist

 Change is covered by automated tests
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,705,2020-08-14T19:25:25Z,2020-08-14T20:04:09Z,2020-08-14T20:04:14Z,MERGED,True,10,8,2,https://github.com/ilammy,Themis 0.13.2,1,['release'],https://github.com/cossacklabs/themis/pull/705,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/705#issuecomment-674238327,"Hotfix for Carthage, removing dysfunctional ObjCThemis.xcodeproj.
Provisional tag 0.13.2 currently points to this commit, will retag and release once merged.
Checklist

 Change is covered by automated tests
 Changelog is updated",,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,706,2020-08-14T20:30:35Z,2020-08-14T21:25:05Z,2020-08-14T21:25:10Z,MERGED,True,10,10,9,https://github.com/vixentael,Update Carthage examples to use Themis 0.13.2,3,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/706,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/706,"After #705 0.13.2 release, let's keep iOS/macOS Carthage examples fresh!
Blocked by #707.
Checklist

 Changelog is updated (in case of notable or breaking changes)","After #705 0.13.2 release, let's keep iOS/macOS Carthage examples fresh!
Blocked by #707.
Checklist

 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,706,2020-08-14T20:30:35Z,2020-08-14T21:25:05Z,2020-08-14T21:25:10Z,MERGED,True,10,10,9,https://github.com/vixentael,Update Carthage examples to use Themis 0.13.2,3,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/706,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/706#issuecomment-674268880,"After #705 0.13.2 release, let's keep iOS/macOS Carthage examples fresh!
Blocked by #707.
Checklist

 Changelog is updated (in case of notable or breaking changes)","Not really.

Blocked, because I can't update ChangeLog yet :(",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,706,2020-08-14T20:30:35Z,2020-08-14T21:25:05Z,2020-08-14T21:25:10Z,MERGED,True,10,10,9,https://github.com/vixentael,Update Carthage examples to use Themis 0.13.2,3,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/706,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/706#issuecomment-674271804,"After #705 0.13.2 release, let's keep iOS/macOS Carthage examples fresh!
Blocked by #707.
Checklist

 Changelog is updated (in case of notable or breaking changes)","Blocked, because I can't update ChangeLog yet :(

Yes you can. Just have to deal with conflicts later ;)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,706,2020-08-14T20:30:35Z,2020-08-14T21:25:05Z,2020-08-14T21:25:10Z,MERGED,True,10,10,9,https://github.com/vixentael,Update Carthage examples to use Themis 0.13.2,3,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/706,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/706#issuecomment-674273910,"After #705 0.13.2 release, let's keep iOS/macOS Carthage examples fresh!
Blocked by #707.
Checklist

 Changelog is updated (in case of notable or breaking changes)",Just have to deal with conflicts later ;),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,706,2020-08-14T20:30:35Z,2020-08-14T21:25:05Z,2020-08-14T21:25:10Z,MERGED,True,10,10,9,https://github.com/vixentael,Update Carthage examples to use Themis 0.13.2,3,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/706,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/706#issuecomment-674275901,"After #705 0.13.2 release, let's keep iOS/macOS Carthage examples fresh!
Blocked by #707.
Checklist

 Changelog is updated (in case of notable or breaking changes)","@vixentael,

The keyword here is

later",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,707,2020-08-14T20:41:27Z,2020-08-14T21:18:37Z,2020-08-14T21:18:42Z,MERGED,True,35,29,8,https://github.com/ilammy,"Sync with ""release/0.13"" branch",1,['docs :books:'],https://github.com/cossacklabs/themis/pull/707,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/707,"Since 0.13.2 has been released, sync up the changelog with that branch, as well as pull in all version bumps from there to serve as a reminder.
Checklist

 Change is covered by automated tests (aww yeah, go for it, my dear Circle CI)
 Changelog is updated (duh...)","Since 0.13.2 has been released, sync up the changelog with that branch, as well as pull in all version bumps from there to serve as a reminder.
Checklist

 Change is covered by automated tests (aww yeah, go for it, my dear Circle CI)
 Changelog is updated (duh...)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,708,2020-08-14T21:17:06Z,2020-08-14T21:30:28Z,2020-08-14T21:30:32Z,MERGED,True,6,6,1,https://github.com/vixentael,Update codeowners,2,['infrastructure'],https://github.com/cossacklabs/themis/pull/708,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/708,The revolution has begun! Updating codeowners to better reflect current state of the team.,The revolution has begun! Updating codeowners to better reflect current state of the team.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,708,2020-08-14T21:17:06Z,2020-08-14T21:30:28Z,2020-08-14T21:30:32Z,MERGED,True,6,6,1,https://github.com/vixentael,Update codeowners,2,['infrastructure'],https://github.com/cossacklabs/themis/pull/708,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/708#issuecomment-674280142,The revolution has begun! Updating codeowners to better reflect current state of the team.,"Oh yeah, dethroning @Lagovas in absentia 😂

This is how revolutions are done!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,709,2020-08-17T13:14:28Z,2020-08-17T19:07:19Z,2020-08-17T19:07:24Z,MERGED,True,8,683,3,https://github.com/ilammy,Start phasing out CircleCI,4,['infrastructure'],https://github.com/cossacklabs/themis/pull/709,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/709,"GitHub Actions, first introduced in March (#600), has been more or less stable alternative to CircleCI. In fact, by observations show that both GHA and CircleCI have about the same rate of spurious failures (around 15 broken builds per month, due to various reasons).
Most of the jobs performed by CircleCI are duplicated on GitHub Actions. However, CircleCI has subpar capabilities of limiting the build impact. Currently, every changeset triggers the entire CircleCI build which takes ages (~30–40 minutes). CircleCI does not have built-in support for triggering builds only on some files, as opposed to GitHub Actions.
Given this, I suggest to phase out CircleCI in favor of GitHub Actions, arguably better integrated with GitHub. This PR removes the parts of CircleCI configuration which are already replaced with GitHub Actions. Eventually, the remaining bits will be migrated to GitHub Actions too and CircleCI configuration can be removed completely.
Checklist

 Change is covered by automated tests
 Changelog is updated","GitHub Actions, first introduced in March (#600), has been more or less stable alternative to CircleCI. In fact, by observations show that both GHA and CircleCI have about the same rate of spurious failures (around 15 broken builds per month, due to various reasons).
Most of the jobs performed by CircleCI are duplicated on GitHub Actions. However, CircleCI has subpar capabilities of limiting the build impact. Currently, every changeset triggers the entire CircleCI build which takes ages (~30–40 minutes). CircleCI does not have built-in support for triggering builds only on some files, as opposed to GitHub Actions.
Given this, I suggest to phase out CircleCI in favor of GitHub Actions, arguably better integrated with GitHub. This PR removes the parts of CircleCI configuration which are already replaced with GitHub Actions. Eventually, the remaining bits will be migrated to GitHub Actions too and CircleCI configuration can be removed completely.
Checklist

 Change is covered by automated tests
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,709,2020-08-17T13:14:28Z,2020-08-17T19:07:19Z,2020-08-17T19:07:24Z,MERGED,True,8,683,3,https://github.com/ilammy,Start phasing out CircleCI,4,['infrastructure'],https://github.com/cossacklabs/themis/pull/709,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/709#issuecomment-674896798,"GitHub Actions, first introduced in March (#600), has been more or less stable alternative to CircleCI. In fact, by observations show that both GHA and CircleCI have about the same rate of spurious failures (around 15 broken builds per month, due to various reasons).
Most of the jobs performed by CircleCI are duplicated on GitHub Actions. However, CircleCI has subpar capabilities of limiting the build impact. Currently, every changeset triggers the entire CircleCI build which takes ages (~30–40 minutes). CircleCI does not have built-in support for triggering builds only on some files, as opposed to GitHub Actions.
Given this, I suggest to phase out CircleCI in favor of GitHub Actions, arguably better integrated with GitHub. This PR removes the parts of CircleCI configuration which are already replaced with GitHub Actions. Eventually, the remaining bits will be migrated to GitHub Actions too and CircleCI configuration can be removed completely.
Checklist

 Change is covered by automated tests
 Changelog is updated","@iamnotacake,

Well, maybe because GHA skips testing my non-Android-related changes on Themis.

Yes, unless you touch anything that can affect Android builds, those builds are not started. For example, note how here you have Android emulator runs because Themis Core is changed, but if only Rust core is changed then Android tests are not triggered.
Additionally, regardless of the changeset, full test suite is run after any PR is merged into master or any of the release branches.

so it's only doing code coverage tests now?

That's right. This is the only thing it does now.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,709,2020-08-17T13:14:28Z,2020-08-17T19:07:19Z,2020-08-17T19:07:24Z,MERGED,True,8,683,3,https://github.com/ilammy,Start phasing out CircleCI,4,['infrastructure'],https://github.com/cossacklabs/themis/pull/709,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/709#issuecomment-675006005,"GitHub Actions, first introduced in March (#600), has been more or less stable alternative to CircleCI. In fact, by observations show that both GHA and CircleCI have about the same rate of spurious failures (around 15 broken builds per month, due to various reasons).
Most of the jobs performed by CircleCI are duplicated on GitHub Actions. However, CircleCI has subpar capabilities of limiting the build impact. Currently, every changeset triggers the entire CircleCI build which takes ages (~30–40 minutes). CircleCI does not have built-in support for triggering builds only on some files, as opposed to GitHub Actions.
Given this, I suggest to phase out CircleCI in favor of GitHub Actions, arguably better integrated with GitHub. This PR removes the parts of CircleCI configuration which are already replaced with GitHub Actions. Eventually, the remaining bits will be migrated to GitHub Actions too and CircleCI configuration can be removed completely.
Checklist

 Change is covered by automated tests
 Changelog is updated","Let's see how it goes.
Also, @ilammy would you mind out GHA badge to the Readme? Lowering # of CircleCI builds suggests to make GHA CI visible as well.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,709,2020-08-17T13:14:28Z,2020-08-17T19:07:19Z,2020-08-17T19:07:24Z,MERGED,True,8,683,3,https://github.com/ilammy,Start phasing out CircleCI,4,['infrastructure'],https://github.com/cossacklabs/themis/pull/709,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/709#issuecomment-675006472,"GitHub Actions, first introduced in March (#600), has been more or less stable alternative to CircleCI. In fact, by observations show that both GHA and CircleCI have about the same rate of spurious failures (around 15 broken builds per month, due to various reasons).
Most of the jobs performed by CircleCI are duplicated on GitHub Actions. However, CircleCI has subpar capabilities of limiting the build impact. Currently, every changeset triggers the entire CircleCI build which takes ages (~30–40 minutes). CircleCI does not have built-in support for triggering builds only on some files, as opposed to GitHub Actions.
Given this, I suggest to phase out CircleCI in favor of GitHub Actions, arguably better integrated with GitHub. This PR removes the parts of CircleCI configuration which are already replaced with GitHub Actions. Eventually, the remaining bits will be migrated to GitHub Actions too and CircleCI configuration can be removed completely.
Checklist

 Change is covered by automated tests
 Changelog is updated","Also, we might need to update ""branch protection rules"" settings to mark some GHA jobs as required.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,709,2020-08-17T13:14:28Z,2020-08-17T19:07:19Z,2020-08-17T19:07:24Z,MERGED,True,8,683,3,https://github.com/ilammy,Start phasing out CircleCI,4,['infrastructure'],https://github.com/cossacklabs/themis/pull/709,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/709#issuecomment-675028013,"GitHub Actions, first introduced in March (#600), has been more or less stable alternative to CircleCI. In fact, by observations show that both GHA and CircleCI have about the same rate of spurious failures (around 15 broken builds per month, due to various reasons).
Most of the jobs performed by CircleCI are duplicated on GitHub Actions. However, CircleCI has subpar capabilities of limiting the build impact. Currently, every changeset triggers the entire CircleCI build which takes ages (~30–40 minutes). CircleCI does not have built-in support for triggering builds only on some files, as opposed to GitHub Actions.
Given this, I suggest to phase out CircleCI in favor of GitHub Actions, arguably better integrated with GitHub. This PR removes the parts of CircleCI configuration which are already replaced with GitHub Actions. Eventually, the remaining bits will be migrated to GitHub Actions too and CircleCI configuration can be removed completely.
Checklist

 Change is covered by automated tests
 Changelog is updated","Also, @ilammy would you mind out GHA badge to the Readme?

Yeah, good idea!
Though, GHA badges are a bit different since their suite is split into multiple ""workflows"" and badges are per-workflow. So guess the best way would be to put integration testing badge up top:

Since this workflow is the closest one to testing everything at once.
Or we can use the Core one:

And maybe add per-languages badges down in the language table:



What do you think?

Also, we might need to update ""branch protection rules"" settings to mark some GHA jobs as required.

Here we need to be careful to not shoot ourselves into the foot. See how this PR requires some CircleCI jobs to pass which will never complete? I don't want documentation PRs to be blocked if they don't trigger any GHA jobs... Well, I guess, there is only one way to find out. Yep, just added Android emulator to the required list, now it's blocking this PR as well. Not sure what's the best way here. I guess we can just leave them not required? Somehow add a check that checks other checks and make it required?..",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,709,2020-08-17T13:14:28Z,2020-08-17T19:07:19Z,2020-08-17T19:07:24Z,MERGED,True,8,683,3,https://github.com/ilammy,Start phasing out CircleCI,4,['infrastructure'],https://github.com/cossacklabs/themis/pull/709,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/709#issuecomment-675031463,"GitHub Actions, first introduced in March (#600), has been more or less stable alternative to CircleCI. In fact, by observations show that both GHA and CircleCI have about the same rate of spurious failures (around 15 broken builds per month, due to various reasons).
Most of the jobs performed by CircleCI are duplicated on GitHub Actions. However, CircleCI has subpar capabilities of limiting the build impact. Currently, every changeset triggers the entire CircleCI build which takes ages (~30–40 minutes). CircleCI does not have built-in support for triggering builds only on some files, as opposed to GitHub Actions.
Given this, I suggest to phase out CircleCI in favor of GitHub Actions, arguably better integrated with GitHub. This PR removes the parts of CircleCI configuration which are already replaced with GitHub Actions. Eventually, the remaining bits will be migrated to GitHub Actions too and CircleCI configuration can be removed completely.
Checklist

 Change is covered by automated tests
 Changelog is updated","@ilammy great suggestions! Let's use maximum :)
Let's put   to the top.
And then language-dependent badges to the language table.


See how this PR requires some CircleCI jobs to pass which will never complete?

Exactly.. Looks like we already need to fix branch protection rules.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,709,2020-08-17T13:14:28Z,2020-08-17T19:07:19Z,2020-08-17T19:07:24Z,MERGED,True,8,683,3,https://github.com/ilammy,Start phasing out CircleCI,4,['infrastructure'],https://github.com/cossacklabs/themis/pull/709,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/709#issuecomment-675036881,"GitHub Actions, first introduced in March (#600), has been more or less stable alternative to CircleCI. In fact, by observations show that both GHA and CircleCI have about the same rate of spurious failures (around 15 broken builds per month, due to various reasons).
Most of the jobs performed by CircleCI are duplicated on GitHub Actions. However, CircleCI has subpar capabilities of limiting the build impact. Currently, every changeset triggers the entire CircleCI build which takes ages (~30–40 minutes). CircleCI does not have built-in support for triggering builds only on some files, as opposed to GitHub Actions.
Given this, I suggest to phase out CircleCI in favor of GitHub Actions, arguably better integrated with GitHub. This PR removes the parts of CircleCI configuration which are already replaced with GitHub Actions. Eventually, the remaining bits will be migrated to GitHub Actions too and CircleCI configuration can be removed completely.
Checklist

 Change is covered by automated tests
 Changelog is updated","And then language-dependent badges to the language table.

I tried fitting them in, but the horizontal space must be very expensive there. However I try to jam them into that table, they just don't look pretty. So maybe we don't need them.
Even badges for GHA take a bunch of space so I had to move them to the second line so that it looks nicer.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,709,2020-08-17T13:14:28Z,2020-08-17T19:07:19Z,2020-08-17T19:07:24Z,MERGED,True,8,683,3,https://github.com/ilammy,Start phasing out CircleCI,4,['infrastructure'],https://github.com/cossacklabs/themis/pull/709,https://github.com/vixentael,8,https://github.com/cossacklabs/themis/pull/709#issuecomment-675037501,"GitHub Actions, first introduced in March (#600), has been more or less stable alternative to CircleCI. In fact, by observations show that both GHA and CircleCI have about the same rate of spurious failures (around 15 broken builds per month, due to various reasons).
Most of the jobs performed by CircleCI are duplicated on GitHub Actions. However, CircleCI has subpar capabilities of limiting the build impact. Currently, every changeset triggers the entire CircleCI build which takes ages (~30–40 minutes). CircleCI does not have built-in support for triggering builds only on some files, as opposed to GitHub Actions.
Given this, I suggest to phase out CircleCI in favor of GitHub Actions, arguably better integrated with GitHub. This PR removes the parts of CircleCI configuration which are already replaced with GitHub Actions. Eventually, the remaining bits will be migrated to GitHub Actions too and CircleCI configuration can be removed completely.
Checklist

 Change is covered by automated tests
 Changelog is updated","Totally ok not having language badges.
…
On Mon, 17 Aug 2020 at 21:21, Alexei Lozovsky ***@***.***> wrote:




 And then language-dependent badges to the language table.




 I tried fitting them in, but the horizontal space must be very expensive
 there. However I try to jam them into that table, they just don't look
 pretty. So maybe we don't need them.


 Even badges for GHA take a bunch of space so I had to move them to the
 second line so that it looks nicer.




 —
 You are receiving this because your review was requested.
 Reply to this email directly, view it on GitHub
 <#709 (comment)>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAV6TYEPH5M66QV2PUOV7ETSBFYJTANCNFSM4QBUJGPA>
 .",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,709,2020-08-17T13:14:28Z,2020-08-17T19:07:19Z,2020-08-17T19:07:24Z,MERGED,True,8,683,3,https://github.com/ilammy,Start phasing out CircleCI,4,['infrastructure'],https://github.com/cossacklabs/themis/pull/709,https://github.com/ilammy,9,https://github.com/cossacklabs/themis/pull/709#issuecomment-675059079,"GitHub Actions, first introduced in March (#600), has been more or less stable alternative to CircleCI. In fact, by observations show that both GHA and CircleCI have about the same rate of spurious failures (around 15 broken builds per month, due to various reasons).
Most of the jobs performed by CircleCI are duplicated on GitHub Actions. However, CircleCI has subpar capabilities of limiting the build impact. Currently, every changeset triggers the entire CircleCI build which takes ages (~30–40 minutes). CircleCI does not have built-in support for triggering builds only on some files, as opposed to GitHub Actions.
Given this, I suggest to phase out CircleCI in favor of GitHub Actions, arguably better integrated with GitHub. This PR removes the parts of CircleCI configuration which are already replaced with GitHub Actions. Eventually, the remaining bits will be migrated to GitHub Actions too and CircleCI configuration can be removed completely.
Checklist

 Change is covered by automated tests
 Changelog is updated","Well, as for required checks, I don't have a good solution at the moment. For now, I have lifted the requirement from most of them. There is an internal task tracking this issue: T1759. I hope some day GHA checks can be made required.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,710,2020-08-18T16:04:51Z,2020-08-19T17:32:41Z,2020-08-20T09:12:17Z,MERGED,True,373,40,12,https://github.com/iamnotacake,Test (missing) RSA key support in Secure Session,12,"['W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/710,https://github.com/iamnotacake,1,https://github.com/cossacklabs/themis/pull/710,"Add few specific tests to Go, NodeJS, Python, Ruby, C++ wrappers. These tests make sure the wrapper API gives error (exception) when we try to create Secure Session with a key different from EC private one.
While adding these tests, few bugs were discovered in Python and Ruby wrappers. To be precise, it was wrong way of checking whether secure_session_create() returned NULL. The tests were not failing as expected. This PR also brings fixes for them.
Speaking about other wrappers, some of them seem to handle this kind of errors as well: Java (JNI), PHP, another PHP, JS (WASM)
And others may be missing the check: Objective C
I've also updated .gitignore to include some stuff like generated Ruby packages, some Python package metadata, another Rust target directory.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Add few specific tests to Go, NodeJS, Python, Ruby, C++ wrappers. These tests make sure the wrapper API gives error (exception) when we try to create Secure Session with a key different from EC private one.
While adding these tests, few bugs were discovered in Python and Ruby wrappers. To be precise, it was wrong way of checking whether secure_session_create() returned NULL. The tests were not failing as expected. This PR also brings fixes for them.
Speaking about other wrappers, some of them seem to handle this kind of errors as well: Java (JNI), PHP, another PHP, JS (WASM)
And others may be missing the check: Objective C
I've also updated .gitignore to include some stuff like generated Ruby packages, some Python package metadata, another Rust target directory.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,710,2020-08-18T16:04:51Z,2020-08-19T17:32:41Z,2020-08-20T09:12:17Z,MERGED,True,373,40,12,https://github.com/iamnotacake,Test (missing) RSA key support in Secure Session,12,"['W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/710,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/710#issuecomment-675585864,"Add few specific tests to Go, NodeJS, Python, Ruby, C++ wrappers. These tests make sure the wrapper API gives error (exception) when we try to create Secure Session with a key different from EC private one.
While adding these tests, few bugs were discovered in Python and Ruby wrappers. To be precise, it was wrong way of checking whether secure_session_create() returned NULL. The tests were not failing as expected. This PR also brings fixes for them.
Speaking about other wrappers, some of them seem to handle this kind of errors as well: Java (JNI), PHP, another PHP, JS (WASM)
And others may be missing the check: Objective C
I've also updated .gitignore to include some stuff like generated Ruby packages, some Python package metadata, another Rust target directory.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","And others may be missing the check: Objective C

Yep, it definitely is missing the check. The correct way will be to check for self.session value and return nil out of the initializer.
Please keep a note of which wrappers still need checks and tests.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,710,2020-08-18T16:04:51Z,2020-08-19T17:32:41Z,2020-08-20T09:12:17Z,MERGED,True,373,40,12,https://github.com/iamnotacake,Test (missing) RSA key support in Secure Session,12,"['W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/710,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/710#issuecomment-675605805,"Add few specific tests to Go, NodeJS, Python, Ruby, C++ wrappers. These tests make sure the wrapper API gives error (exception) when we try to create Secure Session with a key different from EC private one.
While adding these tests, few bugs were discovered in Python and Ruby wrappers. To be precise, it was wrong way of checking whether secure_session_create() returned NULL. The tests were not failing as expected. This PR also brings fixes for them.
Speaking about other wrappers, some of them seem to handle this kind of errors as well: Java (JNI), PHP, another PHP, JS (WASM)
And others may be missing the check: Objective C
I've also updated .gitignore to include some stuff like generated Ruby packages, some Python package metadata, another Rust target directory.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","@iamnotacake, currently I don't have my macBook available so I'm in the same boat as you: I can only make blind changes and test them by submitting it to CI 😁 Since you have been kind enough to enable the Allow edits by maintainers check box, I have simply pushed the commit into this branch (please git pull it on your machine). Unfortunately, Secure Session is not tested at all in ObjCThemis so no tests at the moment.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,710,2020-08-18T16:04:51Z,2020-08-19T17:32:41Z,2020-08-20T09:12:17Z,MERGED,True,373,40,12,https://github.com/iamnotacake,Test (missing) RSA key support in Secure Session,12,"['W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/710,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/710#issuecomment-675608977,"Add few specific tests to Go, NodeJS, Python, Ruby, C++ wrappers. These tests make sure the wrapper API gives error (exception) when we try to create Secure Session with a key different from EC private one.
While adding these tests, few bugs were discovered in Python and Ruby wrappers. To be precise, it was wrong way of checking whether secure_session_create() returned NULL. The tests were not failing as expected. This PR also brings fixes for them.
Speaking about other wrappers, some of them seem to handle this kind of errors as well: Java (JNI), PHP, another PHP, JS (WASM)
And others may be missing the check: Objective C
I've also updated .gitignore to include some stuff like generated Ruby packages, some Python package metadata, another Rust target directory.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Also, since this PR does change the behavior of some wrappers, I believe it should update the changelog for relevant languages.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,710,2020-08-18T16:04:51Z,2020-08-19T17:32:41Z,2020-08-20T09:12:17Z,MERGED,True,373,40,12,https://github.com/iamnotacake,Test (missing) RSA key support in Secure Session,12,"['W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/710,https://github.com/iamnotacake,5,https://github.com/cossacklabs/themis/pull/710#issuecomment-675626482,"Add few specific tests to Go, NodeJS, Python, Ruby, C++ wrappers. These tests make sure the wrapper API gives error (exception) when we try to create Secure Session with a key different from EC private one.
While adding these tests, few bugs were discovered in Python and Ruby wrappers. To be precise, it was wrong way of checking whether secure_session_create() returned NULL. The tests were not failing as expected. This PR also brings fixes for them.
Speaking about other wrappers, some of them seem to handle this kind of errors as well: Java (JNI), PHP, another PHP, JS (WASM)
And others may be missing the check: Objective C
I've also updated .gitignore to include some stuff like generated Ruby packages, some Python package metadata, another Rust target directory.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Also, since this PR does change the behavior of some wrappers, I believe it should update the changelog for relevant languages.

Does this look good?
- **Python**

  - Fixed bug where `SSession` constructor did not throw an exception if `secure_session_create()` returned `NULL` ([#710](https://github.com/cossacklabs/themis/pull/710)).

- **Ruby**

  - Fixed bug where `Ssession` constructor did not throw an exception if `secure_session_create()` returned `NULL` ([#710](https://github.com/cossacklabs/themis/pull/710)).

BTW, should we put news in changelog in alphabetical order or append them (in the same _Code:_ section) or it doesn't matter?
And if we add these things to changelog, I guess #698 should be mentioned too?
UPD: Maybe you mean mentioning that sec session wrappers don't allow RSA keys anymore? Or both this and bugfixes? Now I'm a lil bit confised",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,710,2020-08-18T16:04:51Z,2020-08-19T17:32:41Z,2020-08-20T09:12:17Z,MERGED,True,373,40,12,https://github.com/iamnotacake,Test (missing) RSA key support in Secure Session,12,"['W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/710,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/710#issuecomment-675631950,"Add few specific tests to Go, NodeJS, Python, Ruby, C++ wrappers. These tests make sure the wrapper API gives error (exception) when we try to create Secure Session with a key different from EC private one.
While adding these tests, few bugs were discovered in Python and Ruby wrappers. To be precise, it was wrong way of checking whether secure_session_create() returned NULL. The tests were not failing as expected. This PR also brings fixes for them.
Speaking about other wrappers, some of them seem to handle this kind of errors as well: Java (JNI), PHP, another PHP, JS (WASM)
And others may be missing the check: Objective C
I've also updated .gitignore to include some stuff like generated Ruby packages, some Python package metadata, another Rust target directory.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","@vixentael,

I suggest to add test to check EC private keys as well (test should pass)

Aren't EC private keys – the happy path – tested in other tests that verify that Secure Session works as expected? Or you suggest just a complementary test for the constructor alone to complete the puzzle?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,710,2020-08-18T16:04:51Z,2020-08-19T17:32:41Z,2020-08-20T09:12:17Z,MERGED,True,373,40,12,https://github.com/iamnotacake,Test (missing) RSA key support in Secure Session,12,"['W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/710,https://github.com/vixentael,7,https://github.com/cossacklabs/themis/pull/710#issuecomment-675633186,"Add few specific tests to Go, NodeJS, Python, Ruby, C++ wrappers. These tests make sure the wrapper API gives error (exception) when we try to create Secure Session with a key different from EC private one.
While adding these tests, few bugs were discovered in Python and Ruby wrappers. To be precise, it was wrong way of checking whether secure_session_create() returned NULL. The tests were not failing as expected. This PR also brings fixes for them.
Speaking about other wrappers, some of them seem to handle this kind of errors as well: Java (JNI), PHP, another PHP, JS (WASM)
And others may be missing the check: Objective C
I've also updated .gitignore to include some stuff like generated Ruby packages, some Python package metadata, another Rust target directory.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","you suggest just a complementary test for the constructor alone to complete the puzzle?

yes, I suggest to complete the puzzle, because future us will totally forget why one case is not tested (which looks like we've missed that case)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,710,2020-08-18T16:04:51Z,2020-08-19T17:32:41Z,2020-08-20T09:12:17Z,MERGED,True,373,40,12,https://github.com/iamnotacake,Test (missing) RSA key support in Secure Session,12,"['W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:', 'tests', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/710,https://github.com/ilammy,8,https://github.com/cossacklabs/themis/pull/710#issuecomment-675634763,"Add few specific tests to Go, NodeJS, Python, Ruby, C++ wrappers. These tests make sure the wrapper API gives error (exception) when we try to create Secure Session with a key different from EC private one.
While adding these tests, few bugs were discovered in Python and Ruby wrappers. To be precise, it was wrong way of checking whether secure_session_create() returned NULL. The tests were not failing as expected. This PR also brings fixes for them.
Speaking about other wrappers, some of them seem to handle this kind of errors as well: Java (JNI), PHP, another PHP, JS (WASM)
And others may be missing the check: Objective C
I've also updated .gitignore to include some stuff like generated Ruby packages, some Python package metadata, another Rust target directory.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","@iamnotacake,

Does this look good?
[...]
Maybe you mean mentioning that sec session wrappers don't allow RSA keys anymore? Or both this and bugfixes? Now I'm a lil bit confised

The changelog is mostly for the users and they probably don't (and shouldn't) know about Themis Core functions. So I'd write there something like ""${Secure Session constructor name} now (throws an exception | returns null | does a dance) when given incorrect keys"", or maybe RSA keys specifically.
The idea is to describe the expected behavior to the user. With this change, the constructors may start failing due to incorrect keys. This changelog entry might help debugging.

BTW, should we put news in changelog in alphabetical order or append them (in the same Code: section) or it doesn't matter?

I'd ask to keep them alphabetical. That's one predictable order to look for a language.

And if we add these things to changelog, I guess #698 should be mentioned too?

Yeah, makes sense. Please do.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,711,2020-09-01T15:32:04Z,2020-09-05T13:37:35Z,2020-09-05T13:37:44Z,MERGED,True,101,57,7,https://github.com/iamnotacake,Replace dynamically generated errors with constants,8,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/711,https://github.com/iamnotacake,1,https://github.com/cossacklabs/themis/pull/711,"Only errors that contain static text message were replaced since they remain constant until the end of runtime.
Packages cell, compare, keys, message, session now contain more error constants, one may use them to compare with error returned by some function from the same package.
ErrOverflow will be deprecated starting from 0.14.0, ErrOutOfMemory is recommended instead due to more understandable name.
Checklist

 The coding guidelines are followed
 Changelog is updated","Only errors that contain static text message were replaced since they remain constant until the end of runtime.
Packages cell, compare, keys, message, session now contain more error constants, one may use them to compare with error returned by some function from the same package.
ErrOverflow will be deprecated starting from 0.14.0, ErrOutOfMemory is recommended instead due to more understandable name.
Checklist

 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,711,2020-09-01T15:32:04Z,2020-09-05T13:37:35Z,2020-09-05T13:37:44Z,MERGED,True,101,57,7,https://github.com/iamnotacake,Replace dynamically generated errors with constants,8,['W-GoThemis :hamster:'],https://github.com/cossacklabs/themis/pull/711,https://github.com/iamnotacake,2,https://github.com/cossacklabs/themis/pull/711#issuecomment-687049248,"Only errors that contain static text message were replaced since they remain constant until the end of runtime.
Packages cell, compare, keys, message, session now contain more error constants, one may use them to compare with error returned by some function from the same package.
ErrOverflow will be deprecated starting from 0.14.0, ErrOutOfMemory is recommended instead due to more understandable name.
Checklist

 The coding guidelines are followed
 Changelog is updated",@Lagovas could you please approve the PR or tell what exactly is still missing?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,712,2020-09-25T14:50:36Z,2020-09-28T13:16:25Z,2020-09-29T07:58:09Z,CLOSED,False,4,0,1,https://github.com/luismerino,avoid memleak on themis_message_set,1,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/712,https://github.com/luismerino,1,https://github.com/cossacklabs/themis/pull/712,ctx->data will be leaked when realloc() fails. Detect when this happens and free() the memory buffer.,ctx->data will be leaked when realloc() fails. Detect when this happens and free() the memory buffer.,True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,712,2020-09-25T14:50:36Z,2020-09-28T13:16:25Z,2020-09-29T07:58:09Z,CLOSED,False,4,0,1,https://github.com/luismerino,avoid memleak on themis_message_set,1,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/712,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/712#issuecomment-699999898,ctx->data will be leaked when realloc() fails. Detect when this happens and free() the memory buffer.,"Following the discussion in the collapsed comment, this PR is superseded by #714.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,714,2020-09-28T13:14:45Z,2020-09-28T16:29:19Z,2020-09-28T16:29:23Z,MERGED,True,1,129,4,https://github.com/ilammy,"Remove unused ""themis_message_*"" functions",3,"['core', 'refactoring']",https://github.com/cossacklabs/themis/pull/714,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/714,"It turns out these functions are not used by any other code, they were not reviewed or touched in a long time, they are not exported, and they contain a bunch of issues which were never discovered because the code was not used. Remove the dead code.
This has been discovered by @luismerino  in #712.
Checklist

 Change is covered by automated tests
 Changelog is updated","It turns out these functions are not used by any other code, they were not reviewed or touched in a long time, they are not exported, and they contain a bunch of issues which were never discovered because the code was not used. Remove the dead code.
This has been discovered by @luismerino  in #712.
Checklist

 Change is covered by automated tests
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,714,2020-09-28T13:14:45Z,2020-09-28T16:29:19Z,2020-09-28T16:29:23Z,MERGED,True,1,129,4,https://github.com/ilammy,"Remove unused ""themis_message_*"" functions",3,"['core', 'refactoring']",https://github.com/cossacklabs/themis/pull/714,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/714#issuecomment-700033938,"It turns out these functions are not used by any other code, they were not reviewed or touched in a long time, they are not exported, and they contain a bunch of issues which were never discovered because the code was not used. Remove the dead code.
This has been discovered by @luismerino  in #712.
Checklist

 Change is covered by automated tests
 Changelog is updated","@iamnotacake,

If your changes to Themis.xcodeproj are also covered by automated tests, then I see no problem here

Yes, they are. .github/workflows/test-objc.yaml builds ObjCThemis from that project file for Carthage, and Bitrise does that as well.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,714,2020-09-28T13:14:45Z,2020-09-28T16:29:19Z,2020-09-28T16:29:23Z,MERGED,True,1,129,4,https://github.com/ilammy,"Remove unused ""themis_message_*"" functions",3,"['core', 'refactoring']",https://github.com/cossacklabs/themis/pull/714,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/714#issuecomment-700037285,"It turns out these functions are not used by any other code, they were not reviewed or touched in a long time, they are not exported, and they contain a bunch of issues which were never discovered because the code was not used. Remove the dead code.
This has been discovered by @luismerino  in #712.
Checklist

 Change is covered by automated tests
 Changelog is updated",Do we have anymore scripts that add these files into searchable headers?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,714,2020-09-28T13:14:45Z,2020-09-28T16:29:19Z,2020-09-28T16:29:23Z,MERGED,True,1,129,4,https://github.com/ilammy,"Remove unused ""themis_message_*"" functions",3,"['core', 'refactoring']",https://github.com/cossacklabs/themis/pull/714,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/714#issuecomment-700070781,"It turns out these functions are not used by any other code, they were not reviewed or touched in a long time, they are not exported, and they contain a bunch of issues which were never discovered because the code was not used. Remove the dead code.
This has been discovered by @luismerino  in #712.
Checklist

 Change is covered by automated tests
 Changelog is updated","Do we have anymore scripts that add these files into searchable headers?

I don't think so. Other places use src/themis/*.h whenever they install things.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,714,2020-09-28T13:14:45Z,2020-09-28T16:29:19Z,2020-09-28T16:29:23Z,MERGED,True,1,129,4,https://github.com/ilammy,"Remove unused ""themis_message_*"" functions",3,"['core', 'refactoring']",https://github.com/cossacklabs/themis/pull/714,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/714#issuecomment-700130683,"It turns out these functions are not used by any other code, they were not reviewed or touched in a long time, they are not exported, and they contain a bunch of issues which were never discovered because the code was not used. Remove the dead code.
This has been discovered by @luismerino  in #712.
Checklist

 Change is covered by automated tests
 Changelog is updated",Wonderful!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,718,2020-10-09T11:23:57Z,2020-10-09T12:44:44Z,2020-10-09T12:44:49Z,MERGED,True,1,4,1,https://github.com/iamnotacake,Fix Clippy warning,1,['W-RustThemis :crab:'],https://github.com/cossacklabs/themis/pull/718,https://github.com/iamnotacake,1,https://github.com/cossacklabs/themis/pull/718,"Rewrite match block using matches macro as it is now a recommended way to perform such checks

Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Rewrite match block using matches macro as it is now a recommended way to perform such checks

Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,719,2020-10-11T21:41:03Z,2020-10-12T11:26:52Z,2020-10-12T12:10:34Z,MERGED,True,51,14,7,https://github.com/vixentael,"Release 0.13.3: Hotfix for Themis CocoaPods podspec, support Xcode12",4,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/719,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/719,"This is a hotfix that touches only themis.podspec.
The reason is Xcode 12 updates: arm64 simulator and some bitcode changes.
Things done:

switched the default spec to themis/themis-openssl (OpenSSL 1.0.2u)
added more bitcode-related flags for debug and release (kudos to @deszip who insisted on these and verified that it's working)
excluded 'arm64' architecture for simulator (these stackoverflow suggestions and @deszip were helpful)
increased iOS target to 10.0 and macOS target to 10.11
re-tested GRKOpenSSLFramework version, but unfortunately due to  levigroker/GRKOpenSSLFramework#10, we use the same old 1.0.2.18
i created 0.13.3 tag on release/0.13 branch i'm using the same 0.13.2 tag, because there's no need for new tag, as code wasn't touched at all

Testing:

validated podspec with allow-warnings true
built Swift&Objc example apps in Release build, pushed app to appcenter, pushed to testflight, installed on device — all good here

Some resources:

excluding arm64 from active architectures for your app, stackoverflow
more about Xcode12 and various hacks to be able to build apps while running on laptop with Intel CPUs, stackoverflow
thread on devforums

Checklist

 Changelog is updated (in case of notable or breaking changes)","This is a hotfix that touches only themis.podspec.
The reason is Xcode 12 updates: arm64 simulator and some bitcode changes.
Things done:

switched the default spec to themis/themis-openssl (OpenSSL 1.0.2u)
added more bitcode-related flags for debug and release (kudos to @deszip who insisted on these and verified that it's working)
excluded 'arm64' architecture for simulator (these stackoverflow suggestions and @deszip were helpful)
increased iOS target to 10.0 and macOS target to 10.11
re-tested GRKOpenSSLFramework version, but unfortunately due to  levigroker/GRKOpenSSLFramework#10, we use the same old 1.0.2.18
i created 0.13.3 tag on release/0.13 branch i'm using the same 0.13.2 tag, because there's no need for new tag, as code wasn't touched at all

Testing:

validated podspec with allow-warnings true
built Swift&Objc example apps in Release build, pushed app to appcenter, pushed to testflight, installed on device — all good here

Some resources:

excluding arm64 from active architectures for your app, stackoverflow
more about Xcode12 and various hacks to be able to build apps while running on laptop with Intel CPUs, stackoverflow
thread on devforums

Checklist

 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,719,2020-10-11T21:41:03Z,2020-10-12T11:26:52Z,2020-10-12T12:10:34Z,MERGED,True,51,14,7,https://github.com/vixentael,"Release 0.13.3: Hotfix for Themis CocoaPods podspec, support Xcode12",4,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/719,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/719#issuecomment-706773022,"This is a hotfix that touches only themis.podspec.
The reason is Xcode 12 updates: arm64 simulator and some bitcode changes.
Things done:

switched the default spec to themis/themis-openssl (OpenSSL 1.0.2u)
added more bitcode-related flags for debug and release (kudos to @deszip who insisted on these and verified that it's working)
excluded 'arm64' architecture for simulator (these stackoverflow suggestions and @deszip were helpful)
increased iOS target to 10.0 and macOS target to 10.11
re-tested GRKOpenSSLFramework version, but unfortunately due to  levigroker/GRKOpenSSLFramework#10, we use the same old 1.0.2.18
i created 0.13.3 tag on release/0.13 branch i'm using the same 0.13.2 tag, because there's no need for new tag, as code wasn't touched at all

Testing:

validated podspec with allow-warnings true
built Swift&Objc example apps in Release build, pushed app to appcenter, pushed to testflight, installed on device — all good here

Some resources:

excluding arm64 from active architectures for your app, stackoverflow
more about Xcode12 and various hacks to be able to build apps while running on laptop with Intel CPUs, stackoverflow
thread on devforums

Checklist

 Changelog is updated (in case of notable or breaking changes)","Podspec lint has warning on Github actions because it expects 0.13.0 tag which I really don't want to setup, so OK, I'll use 0.13.2 as podspec version",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,719,2020-10-11T21:41:03Z,2020-10-12T11:26:52Z,2020-10-12T12:10:34Z,MERGED,True,51,14,7,https://github.com/vixentael,"Release 0.13.3: Hotfix for Themis CocoaPods podspec, support Xcode12",4,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/719,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/719#issuecomment-706790604,"This is a hotfix that touches only themis.podspec.
The reason is Xcode 12 updates: arm64 simulator and some bitcode changes.
Things done:

switched the default spec to themis/themis-openssl (OpenSSL 1.0.2u)
added more bitcode-related flags for debug and release (kudos to @deszip who insisted on these and verified that it's working)
excluded 'arm64' architecture for simulator (these stackoverflow suggestions and @deszip were helpful)
increased iOS target to 10.0 and macOS target to 10.11
re-tested GRKOpenSSLFramework version, but unfortunately due to  levigroker/GRKOpenSSLFramework#10, we use the same old 1.0.2.18
i created 0.13.3 tag on release/0.13 branch i'm using the same 0.13.2 tag, because there's no need for new tag, as code wasn't touched at all

Testing:

validated podspec with allow-warnings true
built Swift&Objc example apps in Release build, pushed app to appcenter, pushed to testflight, installed on device — all good here

Some resources:

excluding arm64 from active architectures for your app, stackoverflow
more about Xcode12 and various hacks to be able to build apps while running on laptop with Intel CPUs, stackoverflow
thread on devforums

Checklist

 Changelog is updated (in case of notable or breaking changes)","In order to make sure that tests are passing, I've updated deployment target on example apps for iOS 10.0.  Please note, that example projects will be updated separately in master branch, they are not part of hotfix.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,719,2020-10-11T21:41:03Z,2020-10-12T11:26:52Z,2020-10-12T12:10:34Z,MERGED,True,51,14,7,https://github.com/vixentael,"Release 0.13.3: Hotfix for Themis CocoaPods podspec, support Xcode12",4,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/719,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/719#issuecomment-706994200,"This is a hotfix that touches only themis.podspec.
The reason is Xcode 12 updates: arm64 simulator and some bitcode changes.
Things done:

switched the default spec to themis/themis-openssl (OpenSSL 1.0.2u)
added more bitcode-related flags for debug and release (kudos to @deszip who insisted on these and verified that it's working)
excluded 'arm64' architecture for simulator (these stackoverflow suggestions and @deszip were helpful)
increased iOS target to 10.0 and macOS target to 10.11
re-tested GRKOpenSSLFramework version, but unfortunately due to  levigroker/GRKOpenSSLFramework#10, we use the same old 1.0.2.18
i created 0.13.3 tag on release/0.13 branch i'm using the same 0.13.2 tag, because there's no need for new tag, as code wasn't touched at all

Testing:

validated podspec with allow-warnings true
built Swift&Objc example apps in Release build, pushed app to appcenter, pushed to testflight, installed on device — all good here

Some resources:

excluding arm64 from active architectures for your app, stackoverflow
more about Xcode12 and various hacks to be able to build apps while running on laptop with Intel CPUs, stackoverflow
thread on devforums

Checklist

 Changelog is updated (in case of notable or breaking changes)","i'm using the same 0.13.2 tag, because there's no need for new tag, as code wasn't touched at all

But the podspec was changed, and that's what is actually submitted to the registry, so I'd tag the release for posterity and consistency.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,719,2020-10-11T21:41:03Z,2020-10-12T11:26:52Z,2020-10-12T12:10:34Z,MERGED,True,51,14,7,https://github.com/vixentael,"Release 0.13.3: Hotfix for Themis CocoaPods podspec, support Xcode12",4,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/719,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/719#issuecomment-707053906,"This is a hotfix that touches only themis.podspec.
The reason is Xcode 12 updates: arm64 simulator and some bitcode changes.
Things done:

switched the default spec to themis/themis-openssl (OpenSSL 1.0.2u)
added more bitcode-related flags for debug and release (kudos to @deszip who insisted on these and verified that it's working)
excluded 'arm64' architecture for simulator (these stackoverflow suggestions and @deszip were helpful)
increased iOS target to 10.0 and macOS target to 10.11
re-tested GRKOpenSSLFramework version, but unfortunately due to  levigroker/GRKOpenSSLFramework#10, we use the same old 1.0.2.18
i created 0.13.3 tag on release/0.13 branch i'm using the same 0.13.2 tag, because there's no need for new tag, as code wasn't touched at all

Testing:

validated podspec with allow-warnings true
built Swift&Objc example apps in Release build, pushed app to appcenter, pushed to testflight, installed on device — all good here

Some resources:

excluding arm64 from active architectures for your app, stackoverflow
more about Xcode12 and various hacks to be able to build apps while running on laptop with Intel CPUs, stackoverflow
thread on devforums

Checklist

 Changelog is updated (in case of notable or breaking changes)","Tests are failing due to chicken-and-egg problem: as xcode12 introduces exclude archs and doesn't support valid archs anymore, new podspec support apps for xcode12.
We decided to update podspec, merge this, and update CI to use Xcode12 and example projects in next PRs.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,720,2020-10-12T12:06:21Z,2020-10-12T13:14:42Z,2020-10-12T13:14:46Z,MERGED,True,50,14,7,https://github.com/vixentael,Sync release/0.13 with master [Merge 0.13.2 hotfix for CocoaPods],12,['docs :books:'],https://github.com/cossacklabs/themis/pull/720,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/720,"Merge release/0.13 into master and resolve conflicts.
Checklist

 Changelog is updated (in case of notable or breaking changes)","Merge release/0.13 into master and resolve conflicts.
Checklist

 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,720,2020-10-12T12:06:21Z,2020-10-12T13:14:42Z,2020-10-12T13:14:46Z,MERGED,True,50,14,7,https://github.com/vixentael,Sync release/0.13 with master [Merge 0.13.2 hotfix for CocoaPods],12,['docs :books:'],https://github.com/cossacklabs/themis/pull/720,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/720#issuecomment-707079870,"Merge release/0.13 into master and resolve conflicts.
Checklist

 Changelog is updated (in case of notable or breaking changes)",This is a simple merge of release/0.13 into master & resolving conflicts,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,720,2020-10-12T12:06:21Z,2020-10-12T13:14:42Z,2020-10-12T13:14:46Z,MERGED,True,50,14,7,https://github.com/vixentael,Sync release/0.13 with master [Merge 0.13.2 hotfix for CocoaPods],12,['docs :books:'],https://github.com/cossacklabs/themis/pull/720,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/720#issuecomment-707095859,"Merge release/0.13 into master and resolve conflicts.
Checklist

 Changelog is updated (in case of notable or breaking changes)","We expect cocoapods tests to fail, because they are not updated to Xcode 12 yet",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,721,2020-10-12T13:24:08Z,2020-10-12T14:34:45Z,2020-10-12T16:26:40Z,MERGED,True,73,69,6,https://github.com/vixentael,"Switch github actions to Xcode12 [ios, macos]",3,"['O-iOS :iphone:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/721,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/721,"Enable Xcode 12.2 in Github actions, as Themis is switching to Xcode 12 as result of #719 #720.
Expected result: unit-tests-cocoapods workflow should pass.
Example apps are not updated yet.
Checklist

 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","Enable Xcode 12.2 in Github actions, as Themis is switching to Xcode 12 as result of #719 #720.
Expected result: unit-tests-cocoapods workflow should pass.
Example apps are not updated yet.
Checklist

 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,721,2020-10-12T13:24:08Z,2020-10-12T14:34:45Z,2020-10-12T16:26:40Z,MERGED,True,73,69,6,https://github.com/vixentael,"Switch github actions to Xcode12 [ios, macos]",3,"['O-iOS :iphone:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/721,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/721#issuecomment-707156570,"Enable Xcode 12.2 in Github actions, as Themis is switching to Xcode 12 as result of #719 #720.
Expected result: unit-tests-cocoapods workflow should pass.
Example apps are not updated yet.
Checklist

 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","Expected result: unit-tests-cocoapods workflow should pass. — passed ✅
Updating example apps in next PRs.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,721,2020-10-12T13:24:08Z,2020-10-12T14:34:45Z,2020-10-12T16:26:40Z,MERGED,True,73,69,6,https://github.com/vixentael,"Switch github actions to Xcode12 [ios, macos]",3,"['O-iOS :iphone:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/721,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/721#issuecomment-707220816,"Enable Xcode 12.2 in Github actions, as Themis is switching to Xcode 12 as result of #719 #720.
Expected result: unit-tests-cocoapods workflow should pass.
Example apps are not updated yet.
Checklist

 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","Switching to Xcode12.2 was too early, let's switch to Xcode 12.0 instead :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,722,2020-10-12T17:26:03Z,2020-10-13T11:48:16Z,2020-10-13T11:48:20Z,MERGED,True,168,146,37,https://github.com/vixentael,Updates of example projects for Xcode12.0.1,6,"['O-iOS :iphone:', 'infrastructure', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/722,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/722,"Apparently, updating Github Actions to Xcode 12.2 (#721) was a bad idea, as Xcode 12.0.1 and Xcode 12.2 are quite different, let's not rush things.
This update sets Xcode 12.0 as Github actions Xcode, and updates iOS Swift CocoaPods example.
Expected behaviour: to see more tests going green.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Apparently, updating Github Actions to Xcode 12.2 (#721) was a bad idea, as Xcode 12.0.1 and Xcode 12.2 are quite different, let's not rush things.
This update sets Xcode 12.0 as Github actions Xcode, and updates iOS Swift CocoaPods example.
Expected behaviour: to see more tests going green.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,722,2020-10-12T17:26:03Z,2020-10-13T11:48:16Z,2020-10-13T11:48:20Z,MERGED,True,168,146,37,https://github.com/vixentael,Updates of example projects for Xcode12.0.1,6,"['O-iOS :iphone:', 'infrastructure', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/722,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/722#issuecomment-707648690,"Apparently, updating Github Actions to Xcode 12.2 (#721) was a bad idea, as Xcode 12.0.1 and Xcode 12.2 are quite different, let's not rush things.
This update sets Xcode 12.0 as Github actions Xcode, and updates iOS Swift CocoaPods example.
Expected behaviour: to see more tests going green.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Okay, so I've updated Bitrise and Github actions to use Xcode 12.0.1, and exclude arm64 for Carthage builds.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,723,2020-10-13T14:03:27Z,2020-10-13T15:02:15Z,2020-10-13T15:02:15Z,MERGED,True,149,687,22,https://github.com/julepka,update ios objc and server examples for themis 0.13.3,3,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/723,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/723,"Updated iOS Objective-C and Themis-server examples for Themis 0.13.3. Resolved Xcode warnings.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Updated iOS Objective-C and Themis-server examples for Themis 0.13.3. Resolved Xcode warnings.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,724,2020-10-14T14:04:32Z,2020-10-15T10:07:33Z,2020-10-15T10:07:33Z,MERGED,True,127,57,11,https://github.com/julepka,update iOS carthage examples for themis 0.13.3,2,"['O-iOS :iphone:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/724,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/724,"Updated iOS Carthage examples for Objective-C and Swift for Themis version 0.13.3
Added a workaround described here
Resolved other warnings
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Updated iOS Carthage examples for Objective-C and Swift for Themis version 0.13.3
Added a workaround described here
Resolved other warnings
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,724,2020-10-14T14:04:32Z,2020-10-15T10:07:33Z,2020-10-15T10:07:33Z,MERGED,True,127,57,11,https://github.com/julepka,update iOS carthage examples for themis 0.13.3,2,"['O-iOS :iphone:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/724,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/724#issuecomment-708442929,"Updated iOS Carthage examples for Objective-C and Swift for Themis version 0.13.3
Added a workaround described here
Resolved other warnings
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","I believe that as soon as we add arm64 slice for iOS and macOS, we will need to update examples again 😂",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,724,2020-10-14T14:04:32Z,2020-10-15T10:07:33Z,2020-10-15T10:07:33Z,MERGED,True,127,57,11,https://github.com/julepka,update iOS carthage examples for themis 0.13.3,2,"['O-iOS :iphone:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/724,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/724#issuecomment-708463544,"Updated iOS Carthage examples for Objective-C and Swift for Themis version 0.13.3
Added a workaround described here
Resolved other warnings
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","I believe that as soon as we add arm64 slice for iOS and macOS, we will need to update examples again 😂

You believe (as in, ""not entirely convinced"")? 😀 I'm absolutely sure that will be necessary. It's Apple, you have to work off those $99.99.",True,{'LAUGH': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,726,2020-10-15T11:57:26Z,2020-10-15T14:25:57Z,2020-10-15T14:25:57Z,MERGED,True,31,21,11,https://github.com/julepka,updated macOS examples for themis 0.13.3,2,"['O-macOS :computer:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/726,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/726,"Updated macOS Carthage examples for Themis 0.13.3
Set active archs to true. Set app category to avoid warnings.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Updated macOS Carthage examples for Themis 0.13.3
Set active archs to true. Set app category to avoid warnings.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,728,2020-10-17T17:41:17Z,2020-10-18T18:12:39Z,2020-10-18T18:12:39Z,MERGED,True,1241,2376,53,https://github.com/ilammy,"Merge ""release/0.13"" into stable",11,"['W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'tests', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/728,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/728,"Fix the CI build on the stable branch.
Why is it broken?
Due to the way ObjCThemis unit tests are set up, they are always using the current master version of ObjCThemis. Even on the stable branch. In fact, non-release branches have a special hack which makes them use the current branch (even for PRs). However, it is not activated for release branches, such as stable and release/*, and there the unit test project always uses master.
Recent changes in master (#720) have updated the minimum iOS and macOS versions of ObjCThemis built by CocaPods. They simultaneously updated them for the unit test project so that it continues to work, on master. However, stable has not been updated. If stable unit test project currently tries using ObjCThemis from master that fails because the unit test project requires lower minimum OS versions than produced by master.
What this PR does
Given the fact that the changes on master actually come from a hotfix for the 0.13 series (#719), it makes sense to just merge release/0.13 into stable, thus updating the unit test project to use newer minimums. The same ones as currently used by master. That way stable build should become green again.
What are the alternatives
Alternatively, we can consider changing the Podfile for stable to always use stable version of ObjCThemis, not the master one. That should fix the issue at hand – a broken build – and I believe that it's reasonable. However, I also think that we should merge in the recent hotfixes regardless. A separate PR can be made later to make stable use a proper branch.
@vixentael, please voice your opinion.
What are the next steps
I believe this should be made a normal course of operation for maintaining the hotfixes:

Hotfixes are developed on the release/0.13 branch. Multiple PRs may be necessary to cook a hotfix release.
Once the hotfix release is ready, it gets tagged with, say, 0.13.4 on the release/0.13 branch.
Since 0.13 is the currently maintained version, the release/0.13 is merged into stable (via a merge commit), once the hotfix is deemed okay.
If the hotfix had been issued for some previous version, say, 0.12 which is not the current 0.13:

Evaluate whether the hotfix actual and necessary for the currently supported release.
If it is, cherry-pick it onto release/0.13, and make another hotfix for the 0.13 version using the process above.
If the hotfix is not necessary for the currently supported release, but can be useful for the next one: cherry-pick to master.
If the hotfix is required only for the older release: leave it there.


Once the dust settles, the stable branch gets merged into master to pull in latest hotfixes of the current release.

That way the hotfix changes should be propagated everywhere they might be needed.
@vixentael, please voice your opinion on this as well.
Checklist

 Change is covered by automated tests (kinda¹)
 Example projects and code samples are up-to-date (no, they are left the same: i.e., using Themis 0.12)
 Changelog is updated
 Do not squash, create a real merge commit

¹ Well, I suspect that the hack will be active for this PR – as this is a PR – so we'll see if it actually works only after the merge. I am not sure that just merging those changes alone will be enough to fix the build. It might require cherry-picking #721 to bump the Xcode version to 12. In that case, it might make more sense to cherry-pick it onto the release/0.13 first, and only then merge release/0.13 into stable.","Fix the CI build on the stable branch.
Why is it broken?
Due to the way ObjCThemis unit tests are set up, they are always using the current master version of ObjCThemis. Even on the stable branch. In fact, non-release branches have a special hack which makes them use the current branch (even for PRs). However, it is not activated for release branches, such as stable and release/*, and there the unit test project always uses master.
Recent changes in master (#720) have updated the minimum iOS and macOS versions of ObjCThemis built by CocaPods. They simultaneously updated them for the unit test project so that it continues to work, on master. However, stable has not been updated. If stable unit test project currently tries using ObjCThemis from master that fails because the unit test project requires lower minimum OS versions than produced by master.
What this PR does
Given the fact that the changes on master actually come from a hotfix for the 0.13 series (#719), it makes sense to just merge release/0.13 into stable, thus updating the unit test project to use newer minimums. The same ones as currently used by master. That way stable build should become green again.
What are the alternatives
Alternatively, we can consider changing the Podfile for stable to always use stable version of ObjCThemis, not the master one. That should fix the issue at hand – a broken build – and I believe that it's reasonable. However, I also think that we should merge in the recent hotfixes regardless. A separate PR can be made later to make stable use a proper branch.
@vixentael, please voice your opinion.
What are the next steps
I believe this should be made a normal course of operation for maintaining the hotfixes:

Hotfixes are developed on the release/0.13 branch. Multiple PRs may be necessary to cook a hotfix release.
Once the hotfix release is ready, it gets tagged with, say, 0.13.4 on the release/0.13 branch.
Since 0.13 is the currently maintained version, the release/0.13 is merged into stable (via a merge commit), once the hotfix is deemed okay.
If the hotfix had been issued for some previous version, say, 0.12 which is not the current 0.13:

Evaluate whether the hotfix actual and necessary for the currently supported release.
If it is, cherry-pick it onto release/0.13, and make another hotfix for the 0.13 version using the process above.
If the hotfix is not necessary for the currently supported release, but can be useful for the next one: cherry-pick to master.
If the hotfix is required only for the older release: leave it there.


Once the dust settles, the stable branch gets merged into master to pull in latest hotfixes of the current release.

That way the hotfix changes should be propagated everywhere they might be needed.
@vixentael, please voice your opinion on this as well.
Checklist

 Change is covered by automated tests (kinda¹)
 Example projects and code samples are up-to-date (no, they are left the same: i.e., using Themis 0.12)
 Changelog is updated
 Do not squash, create a real merge commit

¹ Well, I suspect that the hack will be active for this PR – as this is a PR – so we'll see if it actually works only after the merge. I am not sure that just merging those changes alone will be enough to fix the build. It might require cherry-picking #721 to bump the Xcode version to 12. In that case, it might make more sense to cherry-pick it onto the release/0.13 first, and only then merge release/0.13 into stable.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,728,2020-10-17T17:41:17Z,2020-10-18T18:12:39Z,2020-10-18T18:12:39Z,MERGED,True,1241,2376,53,https://github.com/ilammy,"Merge ""release/0.13"" into stable",11,"['W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'tests', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/728,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/728#issuecomment-711274663,"Fix the CI build on the stable branch.
Why is it broken?
Due to the way ObjCThemis unit tests are set up, they are always using the current master version of ObjCThemis. Even on the stable branch. In fact, non-release branches have a special hack which makes them use the current branch (even for PRs). However, it is not activated for release branches, such as stable and release/*, and there the unit test project always uses master.
Recent changes in master (#720) have updated the minimum iOS and macOS versions of ObjCThemis built by CocaPods. They simultaneously updated them for the unit test project so that it continues to work, on master. However, stable has not been updated. If stable unit test project currently tries using ObjCThemis from master that fails because the unit test project requires lower minimum OS versions than produced by master.
What this PR does
Given the fact that the changes on master actually come from a hotfix for the 0.13 series (#719), it makes sense to just merge release/0.13 into stable, thus updating the unit test project to use newer minimums. The same ones as currently used by master. That way stable build should become green again.
What are the alternatives
Alternatively, we can consider changing the Podfile for stable to always use stable version of ObjCThemis, not the master one. That should fix the issue at hand – a broken build – and I believe that it's reasonable. However, I also think that we should merge in the recent hotfixes regardless. A separate PR can be made later to make stable use a proper branch.
@vixentael, please voice your opinion.
What are the next steps
I believe this should be made a normal course of operation for maintaining the hotfixes:

Hotfixes are developed on the release/0.13 branch. Multiple PRs may be necessary to cook a hotfix release.
Once the hotfix release is ready, it gets tagged with, say, 0.13.4 on the release/0.13 branch.
Since 0.13 is the currently maintained version, the release/0.13 is merged into stable (via a merge commit), once the hotfix is deemed okay.
If the hotfix had been issued for some previous version, say, 0.12 which is not the current 0.13:

Evaluate whether the hotfix actual and necessary for the currently supported release.
If it is, cherry-pick it onto release/0.13, and make another hotfix for the 0.13 version using the process above.
If the hotfix is not necessary for the currently supported release, but can be useful for the next one: cherry-pick to master.
If the hotfix is required only for the older release: leave it there.


Once the dust settles, the stable branch gets merged into master to pull in latest hotfixes of the current release.

That way the hotfix changes should be propagated everywhere they might be needed.
@vixentael, please voice your opinion on this as well.
Checklist

 Change is covered by automated tests (kinda¹)
 Example projects and code samples are up-to-date (no, they are left the same: i.e., using Themis 0.12)
 Changelog is updated
 Do not squash, create a real merge commit

¹ Well, I suspect that the hack will be active for this PR – as this is a PR – so we'll see if it actually works only after the merge. I am not sure that just merging those changes alone will be enough to fix the build. It might require cherry-picking #721 to bump the Xcode version to 12. In that case, it might make more sense to cherry-pick it onto the release/0.13 first, and only then merge release/0.13 into stable.","Also we might need to merge rust changes from master to stable as a separate PR?

No, I've already cherry-picked it to stable. That 'fixed' CircleCI which runs the nightly builds on stable. (GitHub Actions check only master nightly. That's why it's not broken. Otherwise it'd be failing.)
Also, regarding

It might require cherry-picking #721 to bump the Xcode version to 12.

I've tried doing that and it still did not fix the release branch. It seems that it's necessary to pull in all other stuff from master to fix that up, making sure that ARM64 is excluded properly, etc. That really pissed me off so I just threw my hands up in the air.
I'd presume stable will be still broken after this PR gets merged. I believe we should do the merge for the sake of properly structured git history, but since it's not like any people are affected by the broken builds, I think it's okay to ignore that.",True,"{'THUMBS_UP': ['https://github.com/vixentael'], 'EYES': ['https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,729,2020-10-18T18:25:34Z,2020-10-19T19:16:44Z,2020-10-19T19:16:45Z,MERGED,True,0,0,0,https://github.com/ilammy,"Merge ""stable""",14,[],https://github.com/cossacklabs/themis/pull/729,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/729,"Following #728, merge stable into master to pull in latest updates.
The branches have diverged wildly, and there was cherry-picking left, right & center, and there was a merge of release/0.13 not via a merge commit, etc. etc. etc. All this results in merge conflicts which need to be resolved manually. In most all cases the master version should be preferred.
Checklist

 Change is covered by automated tests (it is, but it will probably fail, wait for it to land)
 Changelog is updated (need see to it manually during the merge)
 Resolve conflicts manually via CLI (GitHub now has an interface for that)
 Merge manually via CLI after review","Following #728, merge stable into master to pull in latest updates.
The branches have diverged wildly, and there was cherry-picking left, right & center, and there was a merge of release/0.13 not via a merge commit, etc. etc. etc. All this results in merge conflicts which need to be resolved manually. In most all cases the master version should be preferred.
Checklist

 Change is covered by automated tests (it is, but it will probably fail, wait for it to land)
 Changelog is updated (need see to it manually during the merge)
 Resolve conflicts manually via CLI (GitHub now has an interface for that)
 Merge manually via CLI after review",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,729,2020-10-18T18:25:34Z,2020-10-19T19:16:44Z,2020-10-19T19:16:45Z,MERGED,True,0,0,0,https://github.com/ilammy,"Merge ""stable""",14,[],https://github.com/cossacklabs/themis/pull/729,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/729#issuecomment-711366319,"Following #728, merge stable into master to pull in latest updates.
The branches have diverged wildly, and there was cherry-picking left, right & center, and there was a merge of release/0.13 not via a merge commit, etc. etc. etc. All this results in merge conflicts which need to be resolved manually. In most all cases the master version should be preferred.
Checklist

 Change is covered by automated tests (it is, but it will probably fail, wait for it to land)
 Changelog is updated (need see to it manually during the merge)
 Resolve conflicts manually via CLI (GitHub now has an interface for that)
 Merge manually via CLI after review","Although GitHub now allows resolving conflicts via web interface, it's not that powerful to remember the resolution and apply it once the PR is merged. I've committed a merge with resolution to stable to show how it will be resolved. However, merging this as is into master will result in a ""samba"" merge which is not nice.
Once approved, I'll redo the merge manually and roll stable back to where it was.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,729,2020-10-18T18:25:34Z,2020-10-19T19:16:44Z,2020-10-19T19:16:45Z,MERGED,True,0,0,0,https://github.com/ilammy,"Merge ""stable""",14,[],https://github.com/cossacklabs/themis/pull/729,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/729#issuecomment-712319047,"Following #728, merge stable into master to pull in latest updates.
The branches have diverged wildly, and there was cherry-picking left, right & center, and there was a merge of release/0.13 not via a merge commit, etc. etc. etc. All this results in merge conflicts which need to be resolved manually. In most all cases the master version should be preferred.
Checklist

 Change is covered by automated tests (it is, but it will probably fail, wait for it to land)
 Changelog is updated (need see to it manually during the merge)
 Resolve conflicts manually via CLI (GitHub now has an interface for that)
 Merge manually via CLI after review","I don't think that this is correct merge, I see changes on Go code that are present in master branch, not in stable branch.

Oh well... This is why I don't really like cherry-picking things all over the place. Since sometimes it ends up like this once you want to merge.
Okay, change of plans. Instead of letting GitHub commit the merge commit, I'll manually merge stable into master.
---o---o---o  master

---o---o---o  stable

This produces a merge commit:
---o---o---o  master
            \
             M
            /
---o---o---o  stable

I'll push that merge commit into stable to present it in this PR:
---o---o---o  master
            \
             \
              \
---o---o---o---M  stable

Once the review is complete, I'll push that commit as is into master:
---o---o---o---M  master, stable
              /
             /
            /
---o---o---o

and roll back stable back to where it was originally:
---o---o---o---M  master
              /
             /
            /
---o---o---o  stable",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,729,2020-10-18T18:25:34Z,2020-10-19T19:16:44Z,2020-10-19T19:16:45Z,MERGED,True,0,0,0,https://github.com/ilammy,"Merge ""stable""",14,[],https://github.com/cossacklabs/themis/pull/729,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/729#issuecomment-712334178,"Following #728, merge stable into master to pull in latest updates.
The branches have diverged wildly, and there was cherry-picking left, right & center, and there was a merge of release/0.13 not via a merge commit, etc. etc. etc. All this results in merge conflicts which need to be resolved manually. In most all cases the master version should be preferred.
Checklist

 Change is covered by automated tests (it is, but it will probably fail, wait for it to land)
 Changelog is updated (need see to it manually during the merge)
 Resolve conflicts manually via CLI (GitHub now has an interface for that)
 Merge manually via CLI after review","Now, this one should be okay. I've resolved all conflicts it favor of master. There shouldn't be any changes at all to what we have in master currently. The merge will only tell git that any future merges from stable to master should apply only to new commits that will be made from this point.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,729,2020-10-18T18:25:34Z,2020-10-19T19:16:44Z,2020-10-19T19:16:45Z,MERGED,True,0,0,0,https://github.com/ilammy,"Merge ""stable""",14,[],https://github.com/cossacklabs/themis/pull/729,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/729#issuecomment-712334754,"Following #728, merge stable into master to pull in latest updates.
The branches have diverged wildly, and there was cherry-picking left, right & center, and there was a merge of release/0.13 not via a merge commit, etc. etc. etc. All this results in merge conflicts which need to be resolved manually. In most all cases the master version should be preferred.
Checklist

 Change is covered by automated tests (it is, but it will probably fail, wait for it to land)
 Changelog is updated (need see to it manually during the merge)
 Resolve conflicts manually via CLI (GitHub now has an interface for that)
 Merge manually via CLI after review",Thank you @vixentael for keeping me from doing silly things! ❤️,True,{'HEART': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,729,2020-10-18T18:25:34Z,2020-10-19T19:16:44Z,2020-10-19T19:16:45Z,MERGED,True,0,0,0,https://github.com/ilammy,"Merge ""stable""",14,[],https://github.com/cossacklabs/themis/pull/729,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/729#issuecomment-712362451,"Following #728, merge stable into master to pull in latest updates.
The branches have diverged wildly, and there was cherry-picking left, right & center, and there was a merge of release/0.13 not via a merge commit, etc. etc. etc. All this results in merge conflicts which need to be resolved manually. In most all cases the master version should be preferred.
Checklist

 Change is covered by automated tests (it is, but it will probably fail, wait for it to land)
 Changelog is updated (need see to it manually during the merge)
 Resolve conflicts manually via CLI (GitHub now has an interface for that)
 Merge manually via CLI after review","thank you @ilammy! This PR changes look correct (as no changes from stable should be new to master, I think that empty changes list is our goal).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,730,2020-10-26T07:32:30Z,2020-10-26T09:30:50Z,2020-10-26T09:30:58Z,MERGED,True,4,3,4,https://github.com/ilammy,Support PHP Composer 2.0,1,"['W-PHPThemis :elephant:', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/730,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/730,"Recently released major version of PHP Composer introduced arbitrary restrictions on the package names, requiring them to have exactly two alphanumeric parts separated by a slash. Update our test package names to conform to this standard so that our tests work with Composer 2.0.
Since these are internal package names, user code is not affected and there are no compatibility issues.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (no changes other than tests)
 Changelog is updated","Recently released major version of PHP Composer introduced arbitrary restrictions on the package names, requiring them to have exactly two alphanumeric parts separated by a slash. Update our test package names to conform to this standard so that our tests work with Composer 2.0.
Since these are internal package names, user code is not affected and there are no compatibility issues.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (no changes other than tests)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,731,2020-10-27T10:33:20Z,2020-10-27T12:44:03Z,2020-10-27T12:50:07Z,MERGED,True,16,10,2,https://github.com/ilammy,Make Themis a static framework,2,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/731,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/731,"Tell CocoaPods to build ObjCThemis as a 'static framework'. That is, your usual framework bundle but with a static library inside, not a dynamic one as you would have normally use.
Using static linkage greatly simplifies our life on iOS platforms which tend to be very picky about dynamic linkage and loading of frameworks. These issues are not really visible until you archive the app for distribution, actually install it on the device, and try launching it. Debugging these issues takes enormous amount amount of time which we don't have. Let Apple engineers fiddle with dynamic linkage for system frameworks. That at least makes sense.
Using static linkage for Themis has advantages, such as improved startup time (no extra symbol resolution) and improved app size (unused parts of Themis and its dependencies could be cut out by the linker). As Themis is distributed under a permissive license, there are no legal downsides of including it as an integral part of an application, it does not have to be a completely separate binary.
On the other hand, there are not many advantages of dynamic linkage. We don't get to share the memory and storage as Themis is not a system framework. The only real advantage is that it's easier to verify that Themis binaries have not been tampered with and to check Themis version, but iOS deployment process is know to heavily process the binaries, making this point mostly moot.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated

Required reviews:

 @vixentael","Tell CocoaPods to build ObjCThemis as a 'static framework'. That is, your usual framework bundle but with a static library inside, not a dynamic one as you would have normally use.
Using static linkage greatly simplifies our life on iOS platforms which tend to be very picky about dynamic linkage and loading of frameworks. These issues are not really visible until you archive the app for distribution, actually install it on the device, and try launching it. Debugging these issues takes enormous amount amount of time which we don't have. Let Apple engineers fiddle with dynamic linkage for system frameworks. That at least makes sense.
Using static linkage for Themis has advantages, such as improved startup time (no extra symbol resolution) and improved app size (unused parts of Themis and its dependencies could be cut out by the linker). As Themis is distributed under a permissive license, there are no legal downsides of including it as an integral part of an application, it does not have to be a completely separate binary.
On the other hand, there are not many advantages of dynamic linkage. We don't get to share the memory and storage as Themis is not a system framework. The only real advantage is that it's easier to verify that Themis binaries have not been tampered with and to check Themis version, but iOS deployment process is know to heavily process the binaries, making this point mostly moot.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated

Required reviews:

 @vixentael",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,731,2020-10-27T10:33:20Z,2020-10-27T12:44:03Z,2020-10-27T12:50:07Z,MERGED,True,16,10,2,https://github.com/ilammy,Make Themis a static framework,2,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/731,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/731#issuecomment-717194572,"Tell CocoaPods to build ObjCThemis as a 'static framework'. That is, your usual framework bundle but with a static library inside, not a dynamic one as you would have normally use.
Using static linkage greatly simplifies our life on iOS platforms which tend to be very picky about dynamic linkage and loading of frameworks. These issues are not really visible until you archive the app for distribution, actually install it on the device, and try launching it. Debugging these issues takes enormous amount amount of time which we don't have. Let Apple engineers fiddle with dynamic linkage for system frameworks. That at least makes sense.
Using static linkage for Themis has advantages, such as improved startup time (no extra symbol resolution) and improved app size (unused parts of Themis and its dependencies could be cut out by the linker). As Themis is distributed under a permissive license, there are no legal downsides of including it as an integral part of an application, it does not have to be a completely separate binary.
On the other hand, there are not many advantages of dynamic linkage. We don't get to share the memory and storage as Themis is not a system framework. The only real advantage is that it's easier to verify that Themis binaries have not been tampered with and to check Themis version, but iOS deployment process is know to heavily process the binaries, making this point mostly moot.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated

Required reviews:

 @vixentael","improved startup time (no extra symbol resolution)

wow, interesting. didn't know about that. did you read about it or measured it somehow?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,731,2020-10-27T10:33:20Z,2020-10-27T12:44:03Z,2020-10-27T12:50:07Z,MERGED,True,16,10,2,https://github.com/ilammy,Make Themis a static framework,2,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/731,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/731#issuecomment-717216361,"Tell CocoaPods to build ObjCThemis as a 'static framework'. That is, your usual framework bundle but with a static library inside, not a dynamic one as you would have normally use.
Using static linkage greatly simplifies our life on iOS platforms which tend to be very picky about dynamic linkage and loading of frameworks. These issues are not really visible until you archive the app for distribution, actually install it on the device, and try launching it. Debugging these issues takes enormous amount amount of time which we don't have. Let Apple engineers fiddle with dynamic linkage for system frameworks. That at least makes sense.
Using static linkage for Themis has advantages, such as improved startup time (no extra symbol resolution) and improved app size (unused parts of Themis and its dependencies could be cut out by the linker). As Themis is distributed under a permissive license, there are no legal downsides of including it as an integral part of an application, it does not have to be a completely separate binary.
On the other hand, there are not many advantages of dynamic linkage. We don't get to share the memory and storage as Themis is not a system framework. The only real advantage is that it's easier to verify that Themis binaries have not been tampered with and to check Themis version, but iOS deployment process is know to heavily process the binaries, making this point mostly moot.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated

Required reviews:

 @vixentael","@Lagovas,

wow, interesting. didn't know about that. did you read about it or measured it somehow?

I don't have iOS devices so I cannot measure it properly. It's a pretty marginal gain in our case, at best, but it's a common suggestion to avoid having lots of dynamic frameworks.
The speedup here is gained by skipping all the dynamic linking and loading time. If dynamic frameworks are used, the app has to locate, verify, load Themis, resolve symbols used by the app, then move on to locating, verifying, loading, and resolving OpenSSL symbols. If static frameworks are used them everything has been pre-linked into the application and does not affect loading time much.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,731,2020-10-27T10:33:20Z,2020-10-27T12:44:03Z,2020-10-27T12:50:07Z,MERGED,True,16,10,2,https://github.com/ilammy,Make Themis a static framework,2,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/731,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/731#issuecomment-717220708,"Tell CocoaPods to build ObjCThemis as a 'static framework'. That is, your usual framework bundle but with a static library inside, not a dynamic one as you would have normally use.
Using static linkage greatly simplifies our life on iOS platforms which tend to be very picky about dynamic linkage and loading of frameworks. These issues are not really visible until you archive the app for distribution, actually install it on the device, and try launching it. Debugging these issues takes enormous amount amount of time which we don't have. Let Apple engineers fiddle with dynamic linkage for system frameworks. That at least makes sense.
Using static linkage for Themis has advantages, such as improved startup time (no extra symbol resolution) and improved app size (unused parts of Themis and its dependencies could be cut out by the linker). As Themis is distributed under a permissive license, there are no legal downsides of including it as an integral part of an application, it does not have to be a completely separate binary.
On the other hand, there are not many advantages of dynamic linkage. We don't get to share the memory and storage as Themis is not a system framework. The only real advantage is that it's easier to verify that Themis binaries have not been tampered with and to check Themis version, but iOS deployment process is know to heavily process the binaries, making this point mostly moot.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated

Required reviews:

 @vixentael","then move on to locating, verifying, loading, and resolving OpenSSL symbols.

.. and crash because rpath is wrong :D",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,732,2020-10-27T10:36:18Z,2020-10-27T13:35:23Z,2020-10-27T13:35:30Z,MERGED,True,9,7,2,https://github.com/ilammy,Exclude macOS from arm64 builds with GRKOpenSSL,3,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'C-OpenSSL', 'W-ObjCThemis :art:', 'M-CocoaPods', 'dependencies']",https://github.com/cossacklabs/themis/pull/732,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/732,"Since GRKOpenSSLFramework is a prebuilt binary pod, Themis is limited by the architectures included by GRKOpenSSLFramework's maintainer. Currently, as of v1.0.2.20.1, there is no support for Apple Silicon architectures: arm64 slices for macOS and iOS Simulator. While Themis can be built for those architectures, OpenSSL is not available there, making Themis unusable.
Instruct CocoaPods to disable building user applications for arm64 used on Apple Silicon when GRKOpenSSLFramework is used by Themis. This makes sure that the applications can still be compiled, archived, etc., but they will not support Apple Silicon.
Note that this does not affect arm64 for iOS devices, this is still supported. Also, other subspecs of Themis will support Apple Silicon, both the BoringSSL flavor (compiled on user machine) and CLOpenSSL (where we will provide arm64 support).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (we don't have macOS examples of CocoaPods)
 Changelog is updated (in case of notable or breaking changes)

Required reviews:

 @vixentael","Since GRKOpenSSLFramework is a prebuilt binary pod, Themis is limited by the architectures included by GRKOpenSSLFramework's maintainer. Currently, as of v1.0.2.20.1, there is no support for Apple Silicon architectures: arm64 slices for macOS and iOS Simulator. While Themis can be built for those architectures, OpenSSL is not available there, making Themis unusable.
Instruct CocoaPods to disable building user applications for arm64 used on Apple Silicon when GRKOpenSSLFramework is used by Themis. This makes sure that the applications can still be compiled, archived, etc., but they will not support Apple Silicon.
Note that this does not affect arm64 for iOS devices, this is still supported. Also, other subspecs of Themis will support Apple Silicon, both the BoringSSL flavor (compiled on user machine) and CLOpenSSL (where we will provide arm64 support).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (we don't have macOS examples of CocoaPods)
 Changelog is updated (in case of notable or breaking changes)

Required reviews:

 @vixentael",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,733,2020-10-27T12:07:48Z,2020-10-27T15:23:33Z,2020-10-27T15:23:39Z,MERGED,True,15,51,3,https://github.com/ilammy,Update supported SDKs and archs for Carthage,4,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/733,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/733,"There are several changes here, bringing Carthage in sync with CocoaPods.
Minimum SDK versions
Just like we did for CocoaPods earlier, bump the minimum SDK versions for Carthage to the defaults suggested by Xcode 12.
arm64 exceptions
As noted before several times, it is not possible to distribute several arm64 slices in a single regular framework. It is possible with XCFrameworks, but we'll still need to do the migration.
For now, keep arm64 disabled for iOS Simulator, disallowing its use with Apple Silicon. CLOpenSSL dependency does not provide this slice either.
Disable arm64 for macOS as well because the current version of CLOpenSSL does not include support for Apple Silicon.
macOS support will be enabled back with an update CLOpenSSL release, but iOS Simulator will have to wait until the XCFramework migration.
CI updates
Since now arm64 is being disabled in Xcode project directly, no special tricks are needed to disable it in Carthage builds run by CI.
However, the scripts provided for examples are kept in place for the benefit of the users. CI tests the latest version from master, but examples refer to 0.13.3 which still does not have arm64 exclusion.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (unchanged)
 Changelog is updated (in case of notable or breaking changes)

Required reviews:

 @vixentael","There are several changes here, bringing Carthage in sync with CocoaPods.
Minimum SDK versions
Just like we did for CocoaPods earlier, bump the minimum SDK versions for Carthage to the defaults suggested by Xcode 12.
arm64 exceptions
As noted before several times, it is not possible to distribute several arm64 slices in a single regular framework. It is possible with XCFrameworks, but we'll still need to do the migration.
For now, keep arm64 disabled for iOS Simulator, disallowing its use with Apple Silicon. CLOpenSSL dependency does not provide this slice either.
Disable arm64 for macOS as well because the current version of CLOpenSSL does not include support for Apple Silicon.
macOS support will be enabled back with an update CLOpenSSL release, but iOS Simulator will have to wait until the XCFramework migration.
CI updates
Since now arm64 is being disabled in Xcode project directly, no special tricks are needed to disable it in Carthage builds run by CI.
However, the scripts provided for examples are kept in place for the benefit of the users. CI tests the latest version from master, but examples refer to 0.13.3 which still does not have arm64 exclusion.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (unchanged)
 Changelog is updated (in case of notable or breaking changes)

Required reviews:

 @vixentael",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,734,2020-10-27T14:05:42Z,2020-10-27T16:13:52Z,2020-10-27T16:13:56Z,MERGED,True,14,24,10,https://github.com/ilammy,Use CocoaPods trunk CDN,4,"['W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/734,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/734,"Instead of using the development CocoaPods repository from GitHub, use CocoaPods trunk CDN. This significantly improves build times because it's not necessary to download a Git repo with a metric gazillion of teeny-tiny spec files that we have absolutely no use for.
Since now the repo download is reasonably fast, we no longer need to cache CocoaPods directory manually before doing a repo update. Updating the trunk CDN usually takes at most 30 seconds.
Previously, builds were taking around 21m in total (including parallelisation).

Unit tests (CocoaPods): 14m, out of which 9m were taken by cache download and repo update
Code examples: 21m, out of which 10m are spent on the same repo massage

Now the total time is around 13m:

Unit tests (CocoaPods): 8m, repo update takes 1m 20s
Code examples: 13m, repo update takes 20s

Checklist

 Change is covered by automated tests
 Benchmark results are attached (see build logs)
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (do we need it?)","Instead of using the development CocoaPods repository from GitHub, use CocoaPods trunk CDN. This significantly improves build times because it's not necessary to download a Git repo with a metric gazillion of teeny-tiny spec files that we have absolutely no use for.
Since now the repo download is reasonably fast, we no longer need to cache CocoaPods directory manually before doing a repo update. Updating the trunk CDN usually takes at most 30 seconds.
Previously, builds were taking around 21m in total (including parallelisation).

Unit tests (CocoaPods): 14m, out of which 9m were taken by cache download and repo update
Code examples: 21m, out of which 10m are spent on the same repo massage

Now the total time is around 13m:

Unit tests (CocoaPods): 8m, repo update takes 1m 20s
Code examples: 13m, repo update takes 20s

Checklist

 Change is covered by automated tests
 Benchmark results are attached (see build logs)
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (do we need it?)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,734,2020-10-27T14:05:42Z,2020-10-27T16:13:52Z,2020-10-27T16:13:56Z,MERGED,True,14,24,10,https://github.com/ilammy,Use CocoaPods trunk CDN,4,"['W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/734,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/734#issuecomment-717268329,"Instead of using the development CocoaPods repository from GitHub, use CocoaPods trunk CDN. This significantly improves build times because it's not necessary to download a Git repo with a metric gazillion of teeny-tiny spec files that we have absolutely no use for.
Since now the repo download is reasonably fast, we no longer need to cache CocoaPods directory manually before doing a repo update. Updating the trunk CDN usually takes at most 30 seconds.
Previously, builds were taking around 21m in total (including parallelisation).

Unit tests (CocoaPods): 14m, out of which 9m were taken by cache download and repo update
Code examples: 21m, out of which 10m are spent on the same repo massage

Now the total time is around 13m:

Unit tests (CocoaPods): 8m, repo update takes 1m 20s
Code examples: 13m, repo update takes 20s

Checklist

 Change is covered by automated tests
 Benchmark results are attached (see build logs)
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (do we need it?)","If I remember the backstory correctly, long time ago there were some issues which made using CDN impossible. It seems they have been resolved since then and now CDN works fine again.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,734,2020-10-27T14:05:42Z,2020-10-27T16:13:52Z,2020-10-27T16:13:56Z,MERGED,True,14,24,10,https://github.com/ilammy,Use CocoaPods trunk CDN,4,"['W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/734,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/734#issuecomment-717295254,"Instead of using the development CocoaPods repository from GitHub, use CocoaPods trunk CDN. This significantly improves build times because it's not necessary to download a Git repo with a metric gazillion of teeny-tiny spec files that we have absolutely no use for.
Since now the repo download is reasonably fast, we no longer need to cache CocoaPods directory manually before doing a repo update. Updating the trunk CDN usually takes at most 30 seconds.
Previously, builds were taking around 21m in total (including parallelisation).

Unit tests (CocoaPods): 14m, out of which 9m were taken by cache download and repo update
Code examples: 21m, out of which 10m are spent on the same repo massage

Now the total time is around 13m:

Unit tests (CocoaPods): 8m, repo update takes 1m 20s
Code examples: 13m, repo update takes 20s

Checklist

 Change is covered by automated tests
 Benchmark results are attached (see build logs)
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (do we need it?)","Changelog is updated (do we need it?)

nah",True,{'THUMBS_UP': ['https://github.com/ilammy']}
cossacklabs/themis,https://github.com/cossacklabs/themis,735,2020-10-27T17:04:56Z,2020-10-28T08:32:59Z,2020-10-28T08:33:04Z,MERGED,True,76,79,5,https://github.com/ilammy,Update to CLOpenSSL 1.1.10801,5,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'installation', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/735,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/735,"Recently released CLOpenSSL 1.1.10801 includes support for Apple Silicon for macOS. Update both Carthage and CocoaPods to use this version to support Apple Silicon. (Note though that iOS Simulator builds are not supported on Apple Silicon. Yet.)
Another important change is that CLOpenSSL for CocoaPods now distributes a static framework. This finally unifies CocoaPods with Carthage in that respect. This move also makes it much easier to deploy apps that use Themis, removing multiple possible failure point in dynamic framework usage.
This PR changes the default of CocoaPods to CLOpenSSL, back from the changes introduced by 0.13.xx hotfixes. The subspecs are:

themis — the default, alias for themis/openssl-1.1.1 now
themis/openssl-1.1.1 — uses OpenSSL 1.1.1h provided by CLOpenSSL

full static build
Apple Silicon supported on macOS
Apple Silicon not supported for iOS Simulator
this is the new default


themis/themis-openssl — uses OpenSSL 1.0.2u provided by GRKOpenSSLFramework

Themis linked statically, OpenSSL linked dynamically
Apple Silicon not supported
this was the previous default from 0.13 and earlier


themis/themis-boringssl — uses outdated BoringSSL provided by Google

Themis linked statically, BoringSSL linked dynamically
Apple Silicon supported on macOS and iOS Simulator



Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no, they stay the same until 0.14 release)
 Changelog is updated

Required review:

 @vixentael","Recently released CLOpenSSL 1.1.10801 includes support for Apple Silicon for macOS. Update both Carthage and CocoaPods to use this version to support Apple Silicon. (Note though that iOS Simulator builds are not supported on Apple Silicon. Yet.)
Another important change is that CLOpenSSL for CocoaPods now distributes a static framework. This finally unifies CocoaPods with Carthage in that respect. This move also makes it much easier to deploy apps that use Themis, removing multiple possible failure point in dynamic framework usage.
This PR changes the default of CocoaPods to CLOpenSSL, back from the changes introduced by 0.13.xx hotfixes. The subspecs are:

themis — the default, alias for themis/openssl-1.1.1 now
themis/openssl-1.1.1 — uses OpenSSL 1.1.1h provided by CLOpenSSL

full static build
Apple Silicon supported on macOS
Apple Silicon not supported for iOS Simulator
this is the new default


themis/themis-openssl — uses OpenSSL 1.0.2u provided by GRKOpenSSLFramework

Themis linked statically, OpenSSL linked dynamically
Apple Silicon not supported
this was the previous default from 0.13 and earlier


themis/themis-boringssl — uses outdated BoringSSL provided by Google

Themis linked statically, BoringSSL linked dynamically
Apple Silicon supported on macOS and iOS Simulator



Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (no, they stay the same until 0.14 release)
 Changelog is updated

Required review:

 @vixentael",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,736,2020-10-28T18:55:52Z,2020-10-28T20:29:59Z,2020-10-28T20:30:08Z,MERGED,True,21,16,3,https://github.com/ilammy,Themis 0.13.4,3,"['O-iOS :iphone:', 'release', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/736,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/736,"Cut the next hotfix for Apple platforms, updating the OpenSSL dependency which should resolve most of the newly found issues with Apple Silicon support and deploying applications to the App Store.
@vixentael, please review the changelog updates and other things.
I've already cherry-picked all those changes from master into release/0.13 and tested them. I've also merged CI changes from stable with fixes for Xcode 12 support and non-Apple builds. Carthage and CocoaPods configurations should be the same as in master, except for version updates performed in this PR.
Running the CI tests is going to take a while, since there are a lot of pushes pending. I think we might be able to merge this today(ish)—maybe at 26:23 😂 However, I'd expect the proper GitHub release to be performed tomorrow, after testing the published version on devices, so I'm dating it with October 29th in the changelog.
Provisional 0.13.4 tag has been already pushed to the repository to allow CocoaPods spec linting. It points to the tip of this PR. After this PR is merged, I'll update the tag to the proper commit and sign it. (As per the release process.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (this will be done in a separate PR)
 Changelog is updated (mark after review)","Cut the next hotfix for Apple platforms, updating the OpenSSL dependency which should resolve most of the newly found issues with Apple Silicon support and deploying applications to the App Store.
@vixentael, please review the changelog updates and other things.
I've already cherry-picked all those changes from master into release/0.13 and tested them. I've also merged CI changes from stable with fixes for Xcode 12 support and non-Apple builds. Carthage and CocoaPods configurations should be the same as in master, except for version updates performed in this PR.
Running the CI tests is going to take a while, since there are a lot of pushes pending. I think we might be able to merge this today(ish)—maybe at 26:23 😂 However, I'd expect the proper GitHub release to be performed tomorrow, after testing the published version on devices, so I'm dating it with October 29th in the changelog.
Provisional 0.13.4 tag has been already pushed to the repository to allow CocoaPods spec linting. It points to the tip of this PR. After this PR is merged, I'll update the tag to the proper commit and sign it. (As per the release process.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (this will be done in a separate PR)
 Changelog is updated (mark after review)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,738,2020-10-29T13:59:58Z,2020-10-29T14:34:59Z,2020-10-29T14:34:59Z,MERGED,True,125,98,5,https://github.com/ilammy,"Merge ""release/0.13"" into ""stable""",7,['release'],https://github.com/cossacklabs/themis/pull/738,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/738,"Now that Themis 0.13.4 is out, let's merge the changes from the current supported 0.13.x series into stable.
Checklist

 Change is covered by automated tests
 Changelog is updated
 ⚠️ Push the merge manually from the command-line","Now that Themis 0.13.4 is out, let's merge the changes from the current supported 0.13.x series into stable.
Checklist

 Change is covered by automated tests
 Changelog is updated
 ⚠️ Push the merge manually from the command-line",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,739,2020-10-29T14:02:40Z,2020-10-29T14:41:38Z,2020-10-29T14:41:39Z,MERGED,True,28,15,3,https://github.com/ilammy,"Merge ""stable"" into ""master""",10,['release'],https://github.com/cossacklabs/themis/pull/739,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/739,"Following #738 and the release of Themis 0.13.4, merge stable into master to sync the changes (mostly the changelog, as 0.13.4 contains only changes cherry-picked from master).
Moved changelog entries for Themis 0.13.4 into their appropriate section as they have been released in a hotfix.
Resolved conflicts in Podfile.lock files and test-objc.yaml config in favor of the master branch.
Checklist

 Change is covered by automated tests
 Changelog is updated
 ⚠️ Push the merge manually from the command-line","Following #738 and the release of Themis 0.13.4, merge stable into master to sync the changes (mostly the changelog, as 0.13.4 contains only changes cherry-picked from master).
Moved changelog entries for Themis 0.13.4 into their appropriate section as they have been released in a hotfix.
Resolved conflicts in Podfile.lock files and test-objc.yaml config in favor of the master branch.
Checklist

 Change is covered by automated tests
 Changelog is updated
 ⚠️ Push the merge manually from the command-line",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,740,2020-10-29T14:48:58Z,2020-10-29T16:43:09Z,2020-10-29T16:43:13Z,MERGED,True,122,284,63,https://github.com/vixentael,Update iOS/macOS examples to use Themis 0.13.4,6,"['docs :books:', 'O-iOS :iphone:', 'O-macOS :computer:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/740,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/740,"After glorious 0.13.4 release, let's update iOS and macOS examples for Carthage and CocoaPods to use Themis 0.13.4.
For iOS:

disabled ARM64-iphone simulator slice

For macOS:

enabled ARM64 slice

All changes were tested on device and via TestFlight.
Checklist

 The [coding guidelines] are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","After glorious 0.13.4 release, let's update iOS and macOS examples for Carthage and CocoaPods to use Themis 0.13.4.
For iOS:

disabled ARM64-iphone simulator slice

For macOS:

enabled ARM64 slice

All changes were tested on device and via TestFlight.
Checklist

 The [coding guidelines] are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,740,2020-10-29T14:48:58Z,2020-10-29T16:43:09Z,2020-10-29T16:43:13Z,MERGED,True,122,284,63,https://github.com/vixentael,Update iOS/macOS examples to use Themis 0.13.4,6,"['docs :books:', 'O-iOS :iphone:', 'O-macOS :computer:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/740,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/740#issuecomment-718834496,"After glorious 0.13.4 release, let's update iOS and macOS examples for Carthage and CocoaPods to use Themis 0.13.4.
For iOS:

disabled ARM64-iphone simulator slice

For macOS:

enabled ARM64 slice

All changes were tested on device and via TestFlight.
Checklist

 The [coding guidelines] are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",Everyone sees that it's green? Okok,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,742,2020-11-04T16:09:05Z,2020-11-05T14:36:33Z,2020-11-11T22:00:35Z,MERGED,True,60,88,9,https://github.com/ilammy,Update to Xcode 12.2 recommended settings,4,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'refactoring', 'W-ObjCThemis :art:', 'M-Carthage', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/742,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/742,"Update Xcode project used by Carthage and for local testing to the settings recommended by Xcode 12.2. Also, clean up the settings to improve maintainability.
Update to Xcode 12.2 recommended settings
Actually, decline most of the suggestions and just update the LastUpgradeCheck so that Xcode stops nagging us for updates.

Keep building arm64e architecture for iOS.
Build for all architectures only in Release mode.
Ignore warnings about quotes includes in framework headers.
Keep iOS target at 10.0.
Keep Swift 4 in tests for Swift 4.




Keep building arm64e architecture for iOS.
Xcode 12 wants to set ARCHS – the architectures to build for – to just $(ARCHS_STANDARD). However, keep building the arm64e slice contrary to Xcode suggestions.
arm64e is an architecture for Apple A12 chips which supports 'pointer authentication'. Keep building Themis for this architecture to ensure that it is supported.
This architecture is only supported on the real iOS devices, iOS Simulator does not support it (even on Apple Silicon). It is also not supported on macOS.


Build for all architectures only in Release mode.
Xcode 12.2 suggests enabling ONLY_ACTIVE_ARCH in Debug mode in order to improve build times. Release builds – such as when archiving – will still build all architectures.
However, make sure that arm64 builds are disabled for iOS Simulator in test targets too, just like they are disabled in the framework.


Ignore warnings about quotes includes in framework headers.
Set CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER to NO. This new warning (enabled by default since Xcode 12) is known to break umbrella headers of frameworks. CocoaPods currently disables it. We do this as well since all those
#import ""objcthemis.h""

in src/wrappers/themis/Obj-C/Themis/themis.h are causing this warning. Apparently, Xcode wants this to be changed to this:
#import <objcthemis.h>

but then in fails due to a missing file because the framework is not in the search path for itself. We do intend to include a header file from the current directory – the framework header directory. It's not clear what Xcode wants from us here, so just follow the CocoaPods guidance for now and disable the warning. This does not affect compilation and later use of the framework in apps.


Keep iOS target at 10.0.
Xcode 12 suggests to update the minimum supported iOS to 12.0, but we'll still support iOS 10 for this release so keep the old value.


Keep Swift 4 in tests for Swift 4.
Do not upgrade SWIFT_VERSION in the targets which test Swift 4 compatibility specifically, in spite Xcode wanting to do this.



Move common settings to project level
A lot of Xcode settings for targets are actually shared by all of them. Having common settings specified for individual targets makes it hard to update them as you can easily forget to update them everywhere. Let's move all shared settings to the project level so that they can be easily updated everywhere at once. Leave per-target overrides where necessary.

Build for iOS and iPadOS simultaneously.
Use common versioning.
Use common warning settings.
Use common Swift compiler settings.
Use default code signing settings.
Enable bitcode by default.
Move miscellaneous settings to project level.




Build for iOS and iPadOS simultaneously.
Keep TARGETED_DEVICE_FAMILY for iOS framework as 1,2 which marks both iOS and iPadOS as supported by default for all targets.


Use common versioning.
Instead of iOS and macOS frameworks using separate versions, move the version variables to the project level: CURRENT_PROJECT_VERSION and MARKETING_VERSION. We also have no use for VERSION_INFO_PREFIX.
Since we release iOS and macOS frameworks simultaneously, their versions should be updated simultaneously as well.


Use common warning settings.
Move some of the additional compiler warnings to the project level so that they are enabled for all targets by default.
This includes the ""treat warnings as errors"" policy which is now enabled for all targets.


Use common Swift compiler settings.
All our targets use the same Swift compiler settings (except for Swift version). Move all of them to the project level, but keep the test targets using SWIFT_VERSION.


Use default code signing settings.
Since we're building a framework here, it's not normally signed. The signature is applied only when archiving the complete app. Default settings use ad-hoc signing for integrity protection, but we should not hardcode development teams, etc.


Enable bitcode by default.
Make sure that bitcode is enabled for all (iOS) targets by default. However, keep it disabled for tests. Test targets are built as bundles and they are not compatible with bitcode, causing linker errors:
ld: -bundle and -bitcode_bundle (Xcode setting ENABLE_BITCODE=YES) cannot be used together



Move miscellaneous settings to project level.
Such as CLANG_ENABLE_MODULES. We don't really use Clang modules in our source code, but system headers use them and this somewhat speeds up compilation.



Drop deprecated settings
Remove the settings which we don't really need.


Ignore high-DPI images.
Remove COMBINE_HIDPI_IMAGES as none of our frameworks contains any image resources whatsoever. Xcode's default is fine for us.


Ignore user paths.
Remove ALWAYS_SEARCH_USER_PATHS as it's marked deprecated since Xcode 8 and may be removed. It has no effect on out builds.


Remove unused Metal settings.
Older Xcodes insisted on including MTL_ENABLE_DEBUG_INFO and MTL_FAST_MATH into new projects, but Themis does not use Metal so we don't really need those settings.


Suppress non-null warnings in tests
Since now all warnings are treated as errors, those warnings in tests are no longer tolerated. The tests intentionally pass NULL values to parameters marked as nonnull. Suppress the warnings here to test this invalid behavior.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (already done in #740)
 Changelog is updated","Update Xcode project used by Carthage and for local testing to the settings recommended by Xcode 12.2. Also, clean up the settings to improve maintainability.
Update to Xcode 12.2 recommended settings
Actually, decline most of the suggestions and just update the LastUpgradeCheck so that Xcode stops nagging us for updates.

Keep building arm64e architecture for iOS.
Build for all architectures only in Release mode.
Ignore warnings about quotes includes in framework headers.
Keep iOS target at 10.0.
Keep Swift 4 in tests for Swift 4.




Keep building arm64e architecture for iOS.
Xcode 12 wants to set ARCHS – the architectures to build for – to just $(ARCHS_STANDARD). However, keep building the arm64e slice contrary to Xcode suggestions.
arm64e is an architecture for Apple A12 chips which supports 'pointer authentication'. Keep building Themis for this architecture to ensure that it is supported.
This architecture is only supported on the real iOS devices, iOS Simulator does not support it (even on Apple Silicon). It is also not supported on macOS.


Build for all architectures only in Release mode.
Xcode 12.2 suggests enabling ONLY_ACTIVE_ARCH in Debug mode in order to improve build times. Release builds – such as when archiving – will still build all architectures.
However, make sure that arm64 builds are disabled for iOS Simulator in test targets too, just like they are disabled in the framework.


Ignore warnings about quotes includes in framework headers.
Set CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER to NO. This new warning (enabled by default since Xcode 12) is known to break umbrella headers of frameworks. CocoaPods currently disables it. We do this as well since all those
#import ""objcthemis.h""

in src/wrappers/themis/Obj-C/Themis/themis.h are causing this warning. Apparently, Xcode wants this to be changed to this:
#import <objcthemis.h>

but then in fails due to a missing file because the framework is not in the search path for itself. We do intend to include a header file from the current directory – the framework header directory. It's not clear what Xcode wants from us here, so just follow the CocoaPods guidance for now and disable the warning. This does not affect compilation and later use of the framework in apps.


Keep iOS target at 10.0.
Xcode 12 suggests to update the minimum supported iOS to 12.0, but we'll still support iOS 10 for this release so keep the old value.


Keep Swift 4 in tests for Swift 4.
Do not upgrade SWIFT_VERSION in the targets which test Swift 4 compatibility specifically, in spite Xcode wanting to do this.



Move common settings to project level
A lot of Xcode settings for targets are actually shared by all of them. Having common settings specified for individual targets makes it hard to update them as you can easily forget to update them everywhere. Let's move all shared settings to the project level so that they can be easily updated everywhere at once. Leave per-target overrides where necessary.

Build for iOS and iPadOS simultaneously.
Use common versioning.
Use common warning settings.
Use common Swift compiler settings.
Use default code signing settings.
Enable bitcode by default.
Move miscellaneous settings to project level.




Build for iOS and iPadOS simultaneously.
Keep TARGETED_DEVICE_FAMILY for iOS framework as 1,2 which marks both iOS and iPadOS as supported by default for all targets.


Use common versioning.
Instead of iOS and macOS frameworks using separate versions, move the version variables to the project level: CURRENT_PROJECT_VERSION and MARKETING_VERSION. We also have no use for VERSION_INFO_PREFIX.
Since we release iOS and macOS frameworks simultaneously, their versions should be updated simultaneously as well.


Use common warning settings.
Move some of the additional compiler warnings to the project level so that they are enabled for all targets by default.
This includes the ""treat warnings as errors"" policy which is now enabled for all targets.


Use common Swift compiler settings.
All our targets use the same Swift compiler settings (except for Swift version). Move all of them to the project level, but keep the test targets using SWIFT_VERSION.


Use default code signing settings.
Since we're building a framework here, it's not normally signed. The signature is applied only when archiving the complete app. Default settings use ad-hoc signing for integrity protection, but we should not hardcode development teams, etc.


Enable bitcode by default.
Make sure that bitcode is enabled for all (iOS) targets by default. However, keep it disabled for tests. Test targets are built as bundles and they are not compatible with bitcode, causing linker errors:
ld: -bundle and -bitcode_bundle (Xcode setting ENABLE_BITCODE=YES) cannot be used together



Move miscellaneous settings to project level.
Such as CLANG_ENABLE_MODULES. We don't really use Clang modules in our source code, but system headers use them and this somewhat speeds up compilation.



Drop deprecated settings
Remove the settings which we don't really need.


Ignore high-DPI images.
Remove COMBINE_HIDPI_IMAGES as none of our frameworks contains any image resources whatsoever. Xcode's default is fine for us.


Ignore user paths.
Remove ALWAYS_SEARCH_USER_PATHS as it's marked deprecated since Xcode 8 and may be removed. It has no effect on out builds.


Remove unused Metal settings.
Older Xcodes insisted on including MTL_ENABLE_DEBUG_INFO and MTL_FAST_MATH into new projects, but Themis does not use Metal so we don't really need those settings.


Suppress non-null warnings in tests
Since now all warnings are treated as errors, those warnings in tests are no longer tolerated. The tests intentionally pass NULL values to parameters marked as nonnull. Suppress the warnings here to test this invalid behavior.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (already done in #740)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,743,2020-11-05T19:33:52Z,2021-05-06T21:23:57Z,2021-05-06T23:03:04Z,MERGED,True,94085,7,62,https://github.com/ilammy,Build BoringSSL with Xcode,18,"['O-iOS :iphone:', 'O-macOS :computer:', 'C-BoringSSL', 'dependencies']",https://github.com/cossacklabs/themis/pull/743,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/743,"The experience of using OpenSSL as cryptography backend for Apple platforms is... well... less than satisfactory. Start switching to using BoringSSL on Apple platforms too, just like it's already done for other standalone builds: Android and WasmThemis. ('Standalone' means not reliant on system-provided OpenSSL.)
This PR does not switch Carthage nor CocoaPods to BoringSSL yet. It only configures the build without actually using it in any way. The switch will be performed in later PRs. Here you should review only the new machinery added to support using BoringSSL with Xcode and updating BoringSSL later.

Note: Because BoringSSL is a Google project, it naturally (and non-electively) uses Google's practices, such as vendoring f*****g everything. Because you either do as Google does, or do as Google does. Please accept my apology for a PR with 90k added lines.
Obviously, the recommended way to review this PR is by looking at individual commits. GitHub has a funny way to decide which files are important and which are not.

New makefile target and scripts
A new makefile target update_boringssl is added to update BoringSSL. Not only it updates git submodule with BoringSSL, it also runs a couple of new scripts:

third_party/boringssl/generate_build_files.sh
third_party/boringssl/update_xcodeproj.rb

They generate all intermediate files used by BoringSSL build and ensure that Themis.xcodeproj is using those files (and not using any files that got removed after BoringSSL update).
BoringSSL build process
The approach we use is based on the process described in BoringSSL's INCORPORATING.md. While BoringSSL supports CMake, and CMake is able to generate Xcode projects, there are several problems with that approach:

It does not really support macOS. (Especially not for Apple Silicon.)
It requires installing additional CMake toolchain for iOS
The generated Xcode project is of... questionable quality.
The generated Xcode project is independent and will need to be integrated into existing Themis.xcodeproj (presumably, by using workspaces).
On iOS, the project can be generated only for a particular architecture.

So we pretend that CMake does not exist and integrate BoringSSL 'manually'. This involves the following steps:


Generate all intermediate files with util/generate_build_files.py.
Normally, this is performed by the 'real' build system which collects the source files to be compiled and runs Perl/Go/whatnot to generate all generated stuff: error lists and assembly code. However, in our case we use a weird script (see our third_party/boringssl/generate_build_files.sh wrapper to learn why it's weird) to generate all that stuff manually.


Commit intermediate files into the repository.
Yep, all of them. And in the exact same place where the script puts them, because Google said so.
We could have run the script from Xcode during the build, but that would require the users to install Go to build their Swift projects that use Themis. This is a bit overkill. Let's insulate our users from this Google madness, okay?


Use another script to maintain the file list in Xcode project.
Now, in order to build files with Xcode, you need to add the files to Xcode project. There are 290 or so files to compile and you don't want to add them all by hand, right?
So there's a new script third_party/boringssl/update_xcodeproj.rb which does that for you. It piggybacks on BoringSSL configuration for GYP, extracts the file list from it, and edits Themis.xcodeproj to add those files into the project. It uses CocoaPods' xcodeproj gem for that because it's the most stable and battle-tested way to programmatically manipulate Xcode projects.


Tweak Xcode targets manually for BoringSSL.
It's really tricky to get BoringSSL's assembly code to be built only for the architectures it's intended for. There are some other quirks that need to be taken care of. Read the details if you want to know.



Build ""arm64e"" architecture for iOS, like we do for Themis. (We don't anymore.)


Build assembly files only for relevant architectures.
This one is very tricky to do and works only due to pure luck.
Xcode does not really offer a convenient way to include/exclude individual files based on architecture. However, there are two settings which more or less allow it: EXCLUDED_SOURCE_FILE_NAMES and INCLUDED_SOURCE_FILE_NAMES.
We set up those settings to exclude the assembly files by default, but include them back for relevant SDKs and architectures. Real iOS devices use ARM64 (and ARMv7 for iOS 10 which we still support) so they need the ARM assembly stuff. macOS devices use x86_64 but can run x86 apps (until 10.15), so we include both x86 and x86_64 assembly stuff. New Apple Silicon devices will use ARM64, but BoringSSL does not include ARM assembly for macOS yet (and we can't blindly use the one designed for iOS devices). Actually, YOLO, let's use ARM64 assembly from iOS on macOS, what could go wrong?
iOS Simulator does not simulate any hardware acceleration so we add OPENSSL_NO_ASM preprocessor definition to block assembly usage in BoringSSL build and use pure software implementation there.
Similarly, we currently use OPENSSL_NO_ASM for arm64 on macOS too because BoringSSL build expects hardware acceleration, but we can't provide it (yet).


Disable compilation warnings.
Since BoringSSL is a third-party project, we don't have any direct control over its code and can't fix the warnings it produces. And it produces quite a few. Inhibit all warnings there and don't bother.





BoringSSL update
While we're here, update BoringSSL to the latest version (and all the intermediate files too), using the new target:
make update_boringssl

Note that this affects not only new stuff for Apple platforms, but Android and WasmThemis as well.
Checklist

 Change is covered by automated tests (partially, BoringSSL build will be tested later)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated

Required reviews:

 @vixentael to check my sanity
 @shadinua for shell and Ruby stuff

TODO:

 Remove arm64e architecture
 Maybe try iOS' arm64 assembly for macOS
 Adjust CHANGELOG, since BoringSSL support won't make it into 0.14.0","The experience of using OpenSSL as cryptography backend for Apple platforms is... well... less than satisfactory. Start switching to using BoringSSL on Apple platforms too, just like it's already done for other standalone builds: Android and WasmThemis. ('Standalone' means not reliant on system-provided OpenSSL.)
This PR does not switch Carthage nor CocoaPods to BoringSSL yet. It only configures the build without actually using it in any way. The switch will be performed in later PRs. Here you should review only the new machinery added to support using BoringSSL with Xcode and updating BoringSSL later.

Note: Because BoringSSL is a Google project, it naturally (and non-electively) uses Google's practices, such as vendoring f*****g everything. Because you either do as Google does, or do as Google does. Please accept my apology for a PR with 90k added lines.
Obviously, the recommended way to review this PR is by looking at individual commits. GitHub has a funny way to decide which files are important and which are not.

New makefile target and scripts
A new makefile target update_boringssl is added to update BoringSSL. Not only it updates git submodule with BoringSSL, it also runs a couple of new scripts:

third_party/boringssl/generate_build_files.sh
third_party/boringssl/update_xcodeproj.rb

They generate all intermediate files used by BoringSSL build and ensure that Themis.xcodeproj is using those files (and not using any files that got removed after BoringSSL update).
BoringSSL build process
The approach we use is based on the process described in BoringSSL's INCORPORATING.md. While BoringSSL supports CMake, and CMake is able to generate Xcode projects, there are several problems with that approach:

It does not really support macOS. (Especially not for Apple Silicon.)
It requires installing additional CMake toolchain for iOS
The generated Xcode project is of... questionable quality.
The generated Xcode project is independent and will need to be integrated into existing Themis.xcodeproj (presumably, by using workspaces).
On iOS, the project can be generated only for a particular architecture.

So we pretend that CMake does not exist and integrate BoringSSL 'manually'. This involves the following steps:


Generate all intermediate files with util/generate_build_files.py.
Normally, this is performed by the 'real' build system which collects the source files to be compiled and runs Perl/Go/whatnot to generate all generated stuff: error lists and assembly code. However, in our case we use a weird script (see our third_party/boringssl/generate_build_files.sh wrapper to learn why it's weird) to generate all that stuff manually.


Commit intermediate files into the repository.
Yep, all of them. And in the exact same place where the script puts them, because Google said so.
We could have run the script from Xcode during the build, but that would require the users to install Go to build their Swift projects that use Themis. This is a bit overkill. Let's insulate our users from this Google madness, okay?


Use another script to maintain the file list in Xcode project.
Now, in order to build files with Xcode, you need to add the files to Xcode project. There are 290 or so files to compile and you don't want to add them all by hand, right?
So there's a new script third_party/boringssl/update_xcodeproj.rb which does that for you. It piggybacks on BoringSSL configuration for GYP, extracts the file list from it, and edits Themis.xcodeproj to add those files into the project. It uses CocoaPods' xcodeproj gem for that because it's the most stable and battle-tested way to programmatically manipulate Xcode projects.


Tweak Xcode targets manually for BoringSSL.
It's really tricky to get BoringSSL's assembly code to be built only for the architectures it's intended for. There are some other quirks that need to be taken care of. Read the details if you want to know.



Build ""arm64e"" architecture for iOS, like we do for Themis. (We don't anymore.)


Build assembly files only for relevant architectures.
This one is very tricky to do and works only due to pure luck.
Xcode does not really offer a convenient way to include/exclude individual files based on architecture. However, there are two settings which more or less allow it: EXCLUDED_SOURCE_FILE_NAMES and INCLUDED_SOURCE_FILE_NAMES.
We set up those settings to exclude the assembly files by default, but include them back for relevant SDKs and architectures. Real iOS devices use ARM64 (and ARMv7 for iOS 10 which we still support) so they need the ARM assembly stuff. macOS devices use x86_64 but can run x86 apps (until 10.15), so we include both x86 and x86_64 assembly stuff. New Apple Silicon devices will use ARM64, but BoringSSL does not include ARM assembly for macOS yet (and we can't blindly use the one designed for iOS devices). Actually, YOLO, let's use ARM64 assembly from iOS on macOS, what could go wrong?
iOS Simulator does not simulate any hardware acceleration so we add OPENSSL_NO_ASM preprocessor definition to block assembly usage in BoringSSL build and use pure software implementation there.
Similarly, we currently use OPENSSL_NO_ASM for arm64 on macOS too because BoringSSL build expects hardware acceleration, but we can't provide it (yet).


Disable compilation warnings.
Since BoringSSL is a third-party project, we don't have any direct control over its code and can't fix the warnings it produces. And it produces quite a few. Inhibit all warnings there and don't bother.





BoringSSL update
While we're here, update BoringSSL to the latest version (and all the intermediate files too), using the new target:
make update_boringssl

Note that this affects not only new stuff for Apple platforms, but Android and WasmThemis as well.
Checklist

 Change is covered by automated tests (partially, BoringSSL build will be tested later)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated

Required reviews:

 @vixentael to check my sanity
 @shadinua for shell and Ruby stuff

TODO:

 Remove arm64e architecture
 Maybe try iOS' arm64 assembly for macOS
 Adjust CHANGELOG, since BoringSSL support won't make it into 0.14.0",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,743,2020-11-05T19:33:52Z,2021-05-06T21:23:57Z,2021-05-06T23:03:04Z,MERGED,True,94085,7,62,https://github.com/ilammy,Build BoringSSL with Xcode,18,"['O-iOS :iphone:', 'O-macOS :computer:', 'C-BoringSSL', 'dependencies']",https://github.com/cossacklabs/themis/pull/743,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/743#issuecomment-826822399,"The experience of using OpenSSL as cryptography backend for Apple platforms is... well... less than satisfactory. Start switching to using BoringSSL on Apple platforms too, just like it's already done for other standalone builds: Android and WasmThemis. ('Standalone' means not reliant on system-provided OpenSSL.)
This PR does not switch Carthage nor CocoaPods to BoringSSL yet. It only configures the build without actually using it in any way. The switch will be performed in later PRs. Here you should review only the new machinery added to support using BoringSSL with Xcode and updating BoringSSL later.

Note: Because BoringSSL is a Google project, it naturally (and non-electively) uses Google's practices, such as vendoring f*****g everything. Because you either do as Google does, or do as Google does. Please accept my apology for a PR with 90k added lines.
Obviously, the recommended way to review this PR is by looking at individual commits. GitHub has a funny way to decide which files are important and which are not.

New makefile target and scripts
A new makefile target update_boringssl is added to update BoringSSL. Not only it updates git submodule with BoringSSL, it also runs a couple of new scripts:

third_party/boringssl/generate_build_files.sh
third_party/boringssl/update_xcodeproj.rb

They generate all intermediate files used by BoringSSL build and ensure that Themis.xcodeproj is using those files (and not using any files that got removed after BoringSSL update).
BoringSSL build process
The approach we use is based on the process described in BoringSSL's INCORPORATING.md. While BoringSSL supports CMake, and CMake is able to generate Xcode projects, there are several problems with that approach:

It does not really support macOS. (Especially not for Apple Silicon.)
It requires installing additional CMake toolchain for iOS
The generated Xcode project is of... questionable quality.
The generated Xcode project is independent and will need to be integrated into existing Themis.xcodeproj (presumably, by using workspaces).
On iOS, the project can be generated only for a particular architecture.

So we pretend that CMake does not exist and integrate BoringSSL 'manually'. This involves the following steps:


Generate all intermediate files with util/generate_build_files.py.
Normally, this is performed by the 'real' build system which collects the source files to be compiled and runs Perl/Go/whatnot to generate all generated stuff: error lists and assembly code. However, in our case we use a weird script (see our third_party/boringssl/generate_build_files.sh wrapper to learn why it's weird) to generate all that stuff manually.


Commit intermediate files into the repository.
Yep, all of them. And in the exact same place where the script puts them, because Google said so.
We could have run the script from Xcode during the build, but that would require the users to install Go to build their Swift projects that use Themis. This is a bit overkill. Let's insulate our users from this Google madness, okay?


Use another script to maintain the file list in Xcode project.
Now, in order to build files with Xcode, you need to add the files to Xcode project. There are 290 or so files to compile and you don't want to add them all by hand, right?
So there's a new script third_party/boringssl/update_xcodeproj.rb which does that for you. It piggybacks on BoringSSL configuration for GYP, extracts the file list from it, and edits Themis.xcodeproj to add those files into the project. It uses CocoaPods' xcodeproj gem for that because it's the most stable and battle-tested way to programmatically manipulate Xcode projects.


Tweak Xcode targets manually for BoringSSL.
It's really tricky to get BoringSSL's assembly code to be built only for the architectures it's intended for. There are some other quirks that need to be taken care of. Read the details if you want to know.



Build ""arm64e"" architecture for iOS, like we do for Themis. (We don't anymore.)


Build assembly files only for relevant architectures.
This one is very tricky to do and works only due to pure luck.
Xcode does not really offer a convenient way to include/exclude individual files based on architecture. However, there are two settings which more or less allow it: EXCLUDED_SOURCE_FILE_NAMES and INCLUDED_SOURCE_FILE_NAMES.
We set up those settings to exclude the assembly files by default, but include them back for relevant SDKs and architectures. Real iOS devices use ARM64 (and ARMv7 for iOS 10 which we still support) so they need the ARM assembly stuff. macOS devices use x86_64 but can run x86 apps (until 10.15), so we include both x86 and x86_64 assembly stuff. New Apple Silicon devices will use ARM64, but BoringSSL does not include ARM assembly for macOS yet (and we can't blindly use the one designed for iOS devices). Actually, YOLO, let's use ARM64 assembly from iOS on macOS, what could go wrong?
iOS Simulator does not simulate any hardware acceleration so we add OPENSSL_NO_ASM preprocessor definition to block assembly usage in BoringSSL build and use pure software implementation there.
Similarly, we currently use OPENSSL_NO_ASM for arm64 on macOS too because BoringSSL build expects hardware acceleration, but we can't provide it (yet).


Disable compilation warnings.
Since BoringSSL is a third-party project, we don't have any direct control over its code and can't fix the warnings it produces. And it produces quite a few. Inhibit all warnings there and don't bother.





BoringSSL update
While we're here, update BoringSSL to the latest version (and all the intermediate files too), using the new target:
make update_boringssl

Note that this affects not only new stuff for Apple platforms, but Android and WasmThemis as well.
Checklist

 Change is covered by automated tests (partially, BoringSSL build will be tested later)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated

Required reviews:

 @vixentael to check my sanity
 @shadinua for shell and Ruby stuff

TODO:

 Remove arm64e architecture
 Maybe try iOS' arm64 assembly for macOS
 Adjust CHANGELOG, since BoringSSL support won't make it into 0.14.0","So, uh... what do y'all think about it? @vixentael, @Lagovas, @julepka?
Are you ready to sacrifice your firstborn to never ever have to deal with OpenSSL linkage issues on Apple platforms? I'm not, but if instead that requires 100k of pregenerated boilerplate in the repo then I believe it's something to consider.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,743,2020-11-05T19:33:52Z,2021-05-06T21:23:57Z,2021-05-06T23:03:04Z,MERGED,True,94085,7,62,https://github.com/ilammy,Build BoringSSL with Xcode,18,"['O-iOS :iphone:', 'O-macOS :computer:', 'C-BoringSSL', 'dependencies']",https://github.com/cossacklabs/themis/pull/743,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/743#issuecomment-826823464,"The experience of using OpenSSL as cryptography backend for Apple platforms is... well... less than satisfactory. Start switching to using BoringSSL on Apple platforms too, just like it's already done for other standalone builds: Android and WasmThemis. ('Standalone' means not reliant on system-provided OpenSSL.)
This PR does not switch Carthage nor CocoaPods to BoringSSL yet. It only configures the build without actually using it in any way. The switch will be performed in later PRs. Here you should review only the new machinery added to support using BoringSSL with Xcode and updating BoringSSL later.

Note: Because BoringSSL is a Google project, it naturally (and non-electively) uses Google's practices, such as vendoring f*****g everything. Because you either do as Google does, or do as Google does. Please accept my apology for a PR with 90k added lines.
Obviously, the recommended way to review this PR is by looking at individual commits. GitHub has a funny way to decide which files are important and which are not.

New makefile target and scripts
A new makefile target update_boringssl is added to update BoringSSL. Not only it updates git submodule with BoringSSL, it also runs a couple of new scripts:

third_party/boringssl/generate_build_files.sh
third_party/boringssl/update_xcodeproj.rb

They generate all intermediate files used by BoringSSL build and ensure that Themis.xcodeproj is using those files (and not using any files that got removed after BoringSSL update).
BoringSSL build process
The approach we use is based on the process described in BoringSSL's INCORPORATING.md. While BoringSSL supports CMake, and CMake is able to generate Xcode projects, there are several problems with that approach:

It does not really support macOS. (Especially not for Apple Silicon.)
It requires installing additional CMake toolchain for iOS
The generated Xcode project is of... questionable quality.
The generated Xcode project is independent and will need to be integrated into existing Themis.xcodeproj (presumably, by using workspaces).
On iOS, the project can be generated only for a particular architecture.

So we pretend that CMake does not exist and integrate BoringSSL 'manually'. This involves the following steps:


Generate all intermediate files with util/generate_build_files.py.
Normally, this is performed by the 'real' build system which collects the source files to be compiled and runs Perl/Go/whatnot to generate all generated stuff: error lists and assembly code. However, in our case we use a weird script (see our third_party/boringssl/generate_build_files.sh wrapper to learn why it's weird) to generate all that stuff manually.


Commit intermediate files into the repository.
Yep, all of them. And in the exact same place where the script puts them, because Google said so.
We could have run the script from Xcode during the build, but that would require the users to install Go to build their Swift projects that use Themis. This is a bit overkill. Let's insulate our users from this Google madness, okay?


Use another script to maintain the file list in Xcode project.
Now, in order to build files with Xcode, you need to add the files to Xcode project. There are 290 or so files to compile and you don't want to add them all by hand, right?
So there's a new script third_party/boringssl/update_xcodeproj.rb which does that for you. It piggybacks on BoringSSL configuration for GYP, extracts the file list from it, and edits Themis.xcodeproj to add those files into the project. It uses CocoaPods' xcodeproj gem for that because it's the most stable and battle-tested way to programmatically manipulate Xcode projects.


Tweak Xcode targets manually for BoringSSL.
It's really tricky to get BoringSSL's assembly code to be built only for the architectures it's intended for. There are some other quirks that need to be taken care of. Read the details if you want to know.



Build ""arm64e"" architecture for iOS, like we do for Themis. (We don't anymore.)


Build assembly files only for relevant architectures.
This one is very tricky to do and works only due to pure luck.
Xcode does not really offer a convenient way to include/exclude individual files based on architecture. However, there are two settings which more or less allow it: EXCLUDED_SOURCE_FILE_NAMES and INCLUDED_SOURCE_FILE_NAMES.
We set up those settings to exclude the assembly files by default, but include them back for relevant SDKs and architectures. Real iOS devices use ARM64 (and ARMv7 for iOS 10 which we still support) so they need the ARM assembly stuff. macOS devices use x86_64 but can run x86 apps (until 10.15), so we include both x86 and x86_64 assembly stuff. New Apple Silicon devices will use ARM64, but BoringSSL does not include ARM assembly for macOS yet (and we can't blindly use the one designed for iOS devices). Actually, YOLO, let's use ARM64 assembly from iOS on macOS, what could go wrong?
iOS Simulator does not simulate any hardware acceleration so we add OPENSSL_NO_ASM preprocessor definition to block assembly usage in BoringSSL build and use pure software implementation there.
Similarly, we currently use OPENSSL_NO_ASM for arm64 on macOS too because BoringSSL build expects hardware acceleration, but we can't provide it (yet).


Disable compilation warnings.
Since BoringSSL is a third-party project, we don't have any direct control over its code and can't fix the warnings it produces. And it produces quite a few. Inhibit all warnings there and don't bother.





BoringSSL update
While we're here, update BoringSSL to the latest version (and all the intermediate files too), using the new target:
make update_boringssl

Note that this affects not only new stuff for Apple platforms, but Android and WasmThemis as well.
Checklist

 Change is covered by automated tests (partially, BoringSSL build will be tested later)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated

Required reviews:

 @vixentael to check my sanity
 @shadinua for shell and Ruby stuff

TODO:

 Remove arm64e architecture
 Maybe try iOS' arm64 assembly for macOS
 Adjust CHANGELOG, since BoringSSL support won't make it into 0.14.0","As we are in the process of making 0.13.7 and 0.14.0, I'd suggest merging this to apple-boringssl branch",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,743,2020-11-05T19:33:52Z,2021-05-06T21:23:57Z,2021-05-06T23:03:04Z,MERGED,True,94085,7,62,https://github.com/ilammy,Build BoringSSL with Xcode,18,"['O-iOS :iphone:', 'O-macOS :computer:', 'C-BoringSSL', 'dependencies']",https://github.com/cossacklabs/themis/pull/743,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/743#issuecomment-829145255,"The experience of using OpenSSL as cryptography backend for Apple platforms is... well... less than satisfactory. Start switching to using BoringSSL on Apple platforms too, just like it's already done for other standalone builds: Android and WasmThemis. ('Standalone' means not reliant on system-provided OpenSSL.)
This PR does not switch Carthage nor CocoaPods to BoringSSL yet. It only configures the build without actually using it in any way. The switch will be performed in later PRs. Here you should review only the new machinery added to support using BoringSSL with Xcode and updating BoringSSL later.

Note: Because BoringSSL is a Google project, it naturally (and non-electively) uses Google's practices, such as vendoring f*****g everything. Because you either do as Google does, or do as Google does. Please accept my apology for a PR with 90k added lines.
Obviously, the recommended way to review this PR is by looking at individual commits. GitHub has a funny way to decide which files are important and which are not.

New makefile target and scripts
A new makefile target update_boringssl is added to update BoringSSL. Not only it updates git submodule with BoringSSL, it also runs a couple of new scripts:

third_party/boringssl/generate_build_files.sh
third_party/boringssl/update_xcodeproj.rb

They generate all intermediate files used by BoringSSL build and ensure that Themis.xcodeproj is using those files (and not using any files that got removed after BoringSSL update).
BoringSSL build process
The approach we use is based on the process described in BoringSSL's INCORPORATING.md. While BoringSSL supports CMake, and CMake is able to generate Xcode projects, there are several problems with that approach:

It does not really support macOS. (Especially not for Apple Silicon.)
It requires installing additional CMake toolchain for iOS
The generated Xcode project is of... questionable quality.
The generated Xcode project is independent and will need to be integrated into existing Themis.xcodeproj (presumably, by using workspaces).
On iOS, the project can be generated only for a particular architecture.

So we pretend that CMake does not exist and integrate BoringSSL 'manually'. This involves the following steps:


Generate all intermediate files with util/generate_build_files.py.
Normally, this is performed by the 'real' build system which collects the source files to be compiled and runs Perl/Go/whatnot to generate all generated stuff: error lists and assembly code. However, in our case we use a weird script (see our third_party/boringssl/generate_build_files.sh wrapper to learn why it's weird) to generate all that stuff manually.


Commit intermediate files into the repository.
Yep, all of them. And in the exact same place where the script puts them, because Google said so.
We could have run the script from Xcode during the build, but that would require the users to install Go to build their Swift projects that use Themis. This is a bit overkill. Let's insulate our users from this Google madness, okay?


Use another script to maintain the file list in Xcode project.
Now, in order to build files with Xcode, you need to add the files to Xcode project. There are 290 or so files to compile and you don't want to add them all by hand, right?
So there's a new script third_party/boringssl/update_xcodeproj.rb which does that for you. It piggybacks on BoringSSL configuration for GYP, extracts the file list from it, and edits Themis.xcodeproj to add those files into the project. It uses CocoaPods' xcodeproj gem for that because it's the most stable and battle-tested way to programmatically manipulate Xcode projects.


Tweak Xcode targets manually for BoringSSL.
It's really tricky to get BoringSSL's assembly code to be built only for the architectures it's intended for. There are some other quirks that need to be taken care of. Read the details if you want to know.



Build ""arm64e"" architecture for iOS, like we do for Themis. (We don't anymore.)


Build assembly files only for relevant architectures.
This one is very tricky to do and works only due to pure luck.
Xcode does not really offer a convenient way to include/exclude individual files based on architecture. However, there are two settings which more or less allow it: EXCLUDED_SOURCE_FILE_NAMES and INCLUDED_SOURCE_FILE_NAMES.
We set up those settings to exclude the assembly files by default, but include them back for relevant SDKs and architectures. Real iOS devices use ARM64 (and ARMv7 for iOS 10 which we still support) so they need the ARM assembly stuff. macOS devices use x86_64 but can run x86 apps (until 10.15), so we include both x86 and x86_64 assembly stuff. New Apple Silicon devices will use ARM64, but BoringSSL does not include ARM assembly for macOS yet (and we can't blindly use the one designed for iOS devices). Actually, YOLO, let's use ARM64 assembly from iOS on macOS, what could go wrong?
iOS Simulator does not simulate any hardware acceleration so we add OPENSSL_NO_ASM preprocessor definition to block assembly usage in BoringSSL build and use pure software implementation there.
Similarly, we currently use OPENSSL_NO_ASM for arm64 on macOS too because BoringSSL build expects hardware acceleration, but we can't provide it (yet).


Disable compilation warnings.
Since BoringSSL is a third-party project, we don't have any direct control over its code and can't fix the warnings it produces. And it produces quite a few. Inhibit all warnings there and don't bother.





BoringSSL update
While we're here, update BoringSSL to the latest version (and all the intermediate files too), using the new target:
make update_boringssl

Note that this affects not only new stuff for Apple platforms, but Android and WasmThemis as well.
Checklist

 Change is covered by automated tests (partially, BoringSSL build will be tested later)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated

Required reviews:

 @vixentael to check my sanity
 @shadinua for shell and Ruby stuff

TODO:

 Remove arm64e architecture
 Maybe try iOS' arm64 assembly for macOS
 Adjust CHANGELOG, since BoringSSL support won't make it into 0.14.0","Summary of changes:

Resolved merge conflicts with master.
Updated BoringSSL to whatever is in their master right now.
Updated scripts to use whatever Python is available (typically Python 3).
Removed arm64e architecture from iOS builds.
Added arm64 assembly support to macOS builds (no clue if it actually works, but it certainly can be linked).

This PR does not really touch any existing targets used by current builds, so I believe it can be merged into master straight away. Later, I guess, we should add new framework targets for Themis with embedded BoringSSL and base things off that. I'm not sure how Carthage would take it though, since it seems to default to

Carthage: Build me everything.
Developer: What do you mean, “everything”?
Carthage: EEEEEEVEERYYYYYTHIIIIIIIIIIIIING!

But that's a trouble for the other day.
So I take it that you're all okay with experimenting with BoringSSL-based builds and if they turn out to be usable, then switching to BoringSSL as the primary supported backend for Apple stuff?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,743,2020-11-05T19:33:52Z,2021-05-06T21:23:57Z,2021-05-06T23:03:04Z,MERGED,True,94085,7,62,https://github.com/ilammy,Build BoringSSL with Xcode,18,"['O-iOS :iphone:', 'O-macOS :computer:', 'C-BoringSSL', 'dependencies']",https://github.com/cossacklabs/themis/pull/743,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/743#issuecomment-833877626,"The experience of using OpenSSL as cryptography backend for Apple platforms is... well... less than satisfactory. Start switching to using BoringSSL on Apple platforms too, just like it's already done for other standalone builds: Android and WasmThemis. ('Standalone' means not reliant on system-provided OpenSSL.)
This PR does not switch Carthage nor CocoaPods to BoringSSL yet. It only configures the build without actually using it in any way. The switch will be performed in later PRs. Here you should review only the new machinery added to support using BoringSSL with Xcode and updating BoringSSL later.

Note: Because BoringSSL is a Google project, it naturally (and non-electively) uses Google's practices, such as vendoring f*****g everything. Because you either do as Google does, or do as Google does. Please accept my apology for a PR with 90k added lines.
Obviously, the recommended way to review this PR is by looking at individual commits. GitHub has a funny way to decide which files are important and which are not.

New makefile target and scripts
A new makefile target update_boringssl is added to update BoringSSL. Not only it updates git submodule with BoringSSL, it also runs a couple of new scripts:

third_party/boringssl/generate_build_files.sh
third_party/boringssl/update_xcodeproj.rb

They generate all intermediate files used by BoringSSL build and ensure that Themis.xcodeproj is using those files (and not using any files that got removed after BoringSSL update).
BoringSSL build process
The approach we use is based on the process described in BoringSSL's INCORPORATING.md. While BoringSSL supports CMake, and CMake is able to generate Xcode projects, there are several problems with that approach:

It does not really support macOS. (Especially not for Apple Silicon.)
It requires installing additional CMake toolchain for iOS
The generated Xcode project is of... questionable quality.
The generated Xcode project is independent and will need to be integrated into existing Themis.xcodeproj (presumably, by using workspaces).
On iOS, the project can be generated only for a particular architecture.

So we pretend that CMake does not exist and integrate BoringSSL 'manually'. This involves the following steps:


Generate all intermediate files with util/generate_build_files.py.
Normally, this is performed by the 'real' build system which collects the source files to be compiled and runs Perl/Go/whatnot to generate all generated stuff: error lists and assembly code. However, in our case we use a weird script (see our third_party/boringssl/generate_build_files.sh wrapper to learn why it's weird) to generate all that stuff manually.


Commit intermediate files into the repository.
Yep, all of them. And in the exact same place where the script puts them, because Google said so.
We could have run the script from Xcode during the build, but that would require the users to install Go to build their Swift projects that use Themis. This is a bit overkill. Let's insulate our users from this Google madness, okay?


Use another script to maintain the file list in Xcode project.
Now, in order to build files with Xcode, you need to add the files to Xcode project. There are 290 or so files to compile and you don't want to add them all by hand, right?
So there's a new script third_party/boringssl/update_xcodeproj.rb which does that for you. It piggybacks on BoringSSL configuration for GYP, extracts the file list from it, and edits Themis.xcodeproj to add those files into the project. It uses CocoaPods' xcodeproj gem for that because it's the most stable and battle-tested way to programmatically manipulate Xcode projects.


Tweak Xcode targets manually for BoringSSL.
It's really tricky to get BoringSSL's assembly code to be built only for the architectures it's intended for. There are some other quirks that need to be taken care of. Read the details if you want to know.



Build ""arm64e"" architecture for iOS, like we do for Themis. (We don't anymore.)


Build assembly files only for relevant architectures.
This one is very tricky to do and works only due to pure luck.
Xcode does not really offer a convenient way to include/exclude individual files based on architecture. However, there are two settings which more or less allow it: EXCLUDED_SOURCE_FILE_NAMES and INCLUDED_SOURCE_FILE_NAMES.
We set up those settings to exclude the assembly files by default, but include them back for relevant SDKs and architectures. Real iOS devices use ARM64 (and ARMv7 for iOS 10 which we still support) so they need the ARM assembly stuff. macOS devices use x86_64 but can run x86 apps (until 10.15), so we include both x86 and x86_64 assembly stuff. New Apple Silicon devices will use ARM64, but BoringSSL does not include ARM assembly for macOS yet (and we can't blindly use the one designed for iOS devices). Actually, YOLO, let's use ARM64 assembly from iOS on macOS, what could go wrong?
iOS Simulator does not simulate any hardware acceleration so we add OPENSSL_NO_ASM preprocessor definition to block assembly usage in BoringSSL build and use pure software implementation there.
Similarly, we currently use OPENSSL_NO_ASM for arm64 on macOS too because BoringSSL build expects hardware acceleration, but we can't provide it (yet).


Disable compilation warnings.
Since BoringSSL is a third-party project, we don't have any direct control over its code and can't fix the warnings it produces. And it produces quite a few. Inhibit all warnings there and don't bother.





BoringSSL update
While we're here, update BoringSSL to the latest version (and all the intermediate files too), using the new target:
make update_boringssl

Note that this affects not only new stuff for Apple platforms, but Android and WasmThemis as well.
Checklist

 Change is covered by automated tests (partially, BoringSSL build will be tested later)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated

Required reviews:

 @vixentael to check my sanity
 @shadinua for shell and Ruby stuff

TODO:

 Remove arm64e architecture
 Maybe try iOS' arm64 assembly for macOS
 Adjust CHANGELOG, since BoringSSL support won't make it into 0.14.0",Merged into experiments/boringssl-xcode,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,744,2020-11-11T14:56:57Z,2020-11-11T17:20:41Z,2020-11-11T21:51:51Z,MERGED,True,4,6,2,https://github.com/ilammy,Fix code signing issues on macOS with Xcode 12.2,1,"['O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-Carthage', 'backport', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/744,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/744,"It turned out that enabling Bitcode project-wide is a bad idea because for some reason it causes code signing issues when preparing macOS apps for distribution.
Not only this glorious technology breaks iOS apps at times, the advent of Apple Silicon seems to be making macOS and iOS really compatible. I'd say, bug-to-bug compatible!
So... if Bitcode metastasizes into macOS builds, the apps exhibit similar symptoms: everything seems to be fine, the app and its build lead their normal life, right until the developer attempts to prepare the app for distribution. Then it suddenly fails to code sign with the following informative dialog:

and the following errors hidden deeply in logs (Show Logs, then look at the end of IDEDistributionPipeline.log):
Running /usr/bin/codesign '-vvv' '--force' '--sign' '3356BDE5BC1F1235571602E373E6BA16B748CDF3' [...]
[...].app/Contents/Frameworks/themis.framework/Versions/A: replacing existing signature
[...].app/Contents/Frameworks/themis.framework/Versions/A: code object is not signed at all
/usr/bin/codesign exited with 1

Well, that's enlightening!
Anyway. Once there is no mention of Bitcode whatsoever in the build settings of macOS target for Themis framework, the applications can be signed and everything seems to be okay.
Remove ENABLE_BITCODE setting from all macOS targets, leave it only for iOS targets. The framework is built with YES (but of course!) and the tests are built with NO, because the tests are bundles and they are not compatible with Bitcode (and they are not capable of using it anyway).
Of course, we learn about this only with Xcode 12.2 RC which supports Apple Silicon architecture. After all, it's a long-standing Apple tradition to change something up in code signing every 18 months, just to keep the developers sharp.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","It turned out that enabling Bitcode project-wide is a bad idea because for some reason it causes code signing issues when preparing macOS apps for distribution.
Not only this glorious technology breaks iOS apps at times, the advent of Apple Silicon seems to be making macOS and iOS really compatible. I'd say, bug-to-bug compatible!
So... if Bitcode metastasizes into macOS builds, the apps exhibit similar symptoms: everything seems to be fine, the app and its build lead their normal life, right until the developer attempts to prepare the app for distribution. Then it suddenly fails to code sign with the following informative dialog:

and the following errors hidden deeply in logs (Show Logs, then look at the end of IDEDistributionPipeline.log):
Running /usr/bin/codesign '-vvv' '--force' '--sign' '3356BDE5BC1F1235571602E373E6BA16B748CDF3' [...]
[...].app/Contents/Frameworks/themis.framework/Versions/A: replacing existing signature
[...].app/Contents/Frameworks/themis.framework/Versions/A: code object is not signed at all
/usr/bin/codesign exited with 1

Well, that's enlightening!
Anyway. Once there is no mention of Bitcode whatsoever in the build settings of macOS target for Themis framework, the applications can be signed and everything seems to be okay.
Remove ENABLE_BITCODE setting from all macOS targets, leave it only for iOS targets. The framework is built with YES (but of course!) and the tests are built with NO, because the tests are bundles and they are not compatible with Bitcode (and they are not capable of using it anyway).
Of course, we learn about this only with Xcode 12.2 RC which supports Apple Silicon architecture. After all, it's a long-standing Apple tradition to change something up in code signing every 18 months, just to keep the developers sharp.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,744,2020-11-11T14:56:57Z,2020-11-11T17:20:41Z,2020-11-11T21:51:51Z,MERGED,True,4,6,2,https://github.com/ilammy,Fix code signing issues on macOS with Xcode 12.2,1,"['O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-Carthage', 'backport', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/744,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/744#issuecomment-725471140,"It turned out that enabling Bitcode project-wide is a bad idea because for some reason it causes code signing issues when preparing macOS apps for distribution.
Not only this glorious technology breaks iOS apps at times, the advent of Apple Silicon seems to be making macOS and iOS really compatible. I'd say, bug-to-bug compatible!
So... if Bitcode metastasizes into macOS builds, the apps exhibit similar symptoms: everything seems to be fine, the app and its build lead their normal life, right until the developer attempts to prepare the app for distribution. Then it suddenly fails to code sign with the following informative dialog:

and the following errors hidden deeply in logs (Show Logs, then look at the end of IDEDistributionPipeline.log):
Running /usr/bin/codesign '-vvv' '--force' '--sign' '3356BDE5BC1F1235571602E373E6BA16B748CDF3' [...]
[...].app/Contents/Frameworks/themis.framework/Versions/A: replacing existing signature
[...].app/Contents/Frameworks/themis.framework/Versions/A: code object is not signed at all
/usr/bin/codesign exited with 1

Well, that's enlightening!
Anyway. Once there is no mention of Bitcode whatsoever in the build settings of macOS target for Themis framework, the applications can be signed and everything seems to be okay.
Remove ENABLE_BITCODE setting from all macOS targets, leave it only for iOS targets. The framework is built with YES (but of course!) and the tests are built with NO, because the tests are bundles and they are not compatible with Bitcode (and they are not capable of using it anyway).
Of course, we learn about this only with Xcode 12.2 RC which supports Apple Silicon architecture. After all, it's a long-standing Apple tradition to change something up in code signing every 18 months, just to keep the developers sharp.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","This issue seems to have been introduced by #692 and is present since Themis 0.13.1. I guess it would be nice to make 0.13.5 with this fix, so I'm marking it with the backport label.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,744,2020-11-11T14:56:57Z,2020-11-11T17:20:41Z,2020-11-11T21:51:51Z,MERGED,True,4,6,2,https://github.com/ilammy,Fix code signing issues on macOS with Xcode 12.2,1,"['O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-Carthage', 'backport', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/744,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/744#issuecomment-725551251,"It turned out that enabling Bitcode project-wide is a bad idea because for some reason it causes code signing issues when preparing macOS apps for distribution.
Not only this glorious technology breaks iOS apps at times, the advent of Apple Silicon seems to be making macOS and iOS really compatible. I'd say, bug-to-bug compatible!
So... if Bitcode metastasizes into macOS builds, the apps exhibit similar symptoms: everything seems to be fine, the app and its build lead their normal life, right until the developer attempts to prepare the app for distribution. Then it suddenly fails to code sign with the following informative dialog:

and the following errors hidden deeply in logs (Show Logs, then look at the end of IDEDistributionPipeline.log):
Running /usr/bin/codesign '-vvv' '--force' '--sign' '3356BDE5BC1F1235571602E373E6BA16B748CDF3' [...]
[...].app/Contents/Frameworks/themis.framework/Versions/A: replacing existing signature
[...].app/Contents/Frameworks/themis.framework/Versions/A: code object is not signed at all
/usr/bin/codesign exited with 1

Well, that's enlightening!
Anyway. Once there is no mention of Bitcode whatsoever in the build settings of macOS target for Themis framework, the applications can be signed and everything seems to be okay.
Remove ENABLE_BITCODE setting from all macOS targets, leave it only for iOS targets. The framework is built with YES (but of course!) and the tests are built with NO, because the tests are bundles and they are not compatible with Bitcode (and they are not capable of using it anyway).
Of course, we learn about this only with Xcode 12.2 RC which supports Apple Silicon architecture. After all, it's a long-standing Apple tradition to change something up in code signing every 18 months, just to keep the developers sharp.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","Bitcode-related magic never cease to amaze me.
@ilammy let's cheery-pick this into one of the release branches?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,744,2020-11-11T14:56:57Z,2020-11-11T17:20:41Z,2020-11-11T21:51:51Z,MERGED,True,4,6,2,https://github.com/ilammy,Fix code signing issues on macOS with Xcode 12.2,1,"['O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-Carthage', 'backport', 'Bitcode 🐙']",https://github.com/cossacklabs/themis/pull/744,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/744#issuecomment-725560760,"It turned out that enabling Bitcode project-wide is a bad idea because for some reason it causes code signing issues when preparing macOS apps for distribution.
Not only this glorious technology breaks iOS apps at times, the advent of Apple Silicon seems to be making macOS and iOS really compatible. I'd say, bug-to-bug compatible!
So... if Bitcode metastasizes into macOS builds, the apps exhibit similar symptoms: everything seems to be fine, the app and its build lead their normal life, right until the developer attempts to prepare the app for distribution. Then it suddenly fails to code sign with the following informative dialog:

and the following errors hidden deeply in logs (Show Logs, then look at the end of IDEDistributionPipeline.log):
Running /usr/bin/codesign '-vvv' '--force' '--sign' '3356BDE5BC1F1235571602E373E6BA16B748CDF3' [...]
[...].app/Contents/Frameworks/themis.framework/Versions/A: replacing existing signature
[...].app/Contents/Frameworks/themis.framework/Versions/A: code object is not signed at all
/usr/bin/codesign exited with 1

Well, that's enlightening!
Anyway. Once there is no mention of Bitcode whatsoever in the build settings of macOS target for Themis framework, the applications can be signed and everything seems to be okay.
Remove ENABLE_BITCODE setting from all macOS targets, leave it only for iOS targets. The framework is built with YES (but of course!) and the tests are built with NO, because the tests are bundles and they are not compatible with Bitcode (and they are not capable of using it anyway).
Of course, we learn about this only with Xcode 12.2 RC which supports Apple Silicon architecture. After all, it's a long-standing Apple tradition to change something up in code signing every 18 months, just to keep the developers sharp.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","@ilammy let's cheery-pick this into one of the release branches?

Once it's certain that it helps—sure. Let the affected people know that they can try out the master branch now, and if that works for real then we're clear to make a release, I believe.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,745,2020-11-11T21:15:23Z,2020-11-11T21:29:23Z,2020-11-11T21:29:23Z,MERGED,True,21,10,2,https://github.com/ilammy,Themis 0.13.5,2,"['O-iOS :iphone:', 'release', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/745,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/745,"Push out another hotfix for Apple platforms which disables Bitcode generation for macOS, as it's know to cause issues with deploying macOS apps with Apple Silicon support to App Store.
This hotfix affects only installation of Themis via Carthage for building macOS apps.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (may be done separately)
 Changelog is updated
 Push the branch manually from CLI once CI passes","Push out another hotfix for Apple platforms which disables Bitcode generation for macOS, as it's know to cause issues with deploying macOS apps with Apple Silicon support to App Store.
This hotfix affects only installation of Themis via Carthage for building macOS apps.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (may be done separately)
 Changelog is updated
 Push the branch manually from CLI once CI passes",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,745,2020-11-11T21:15:23Z,2020-11-11T21:29:23Z,2020-11-11T21:29:23Z,MERGED,True,21,10,2,https://github.com/ilammy,Themis 0.13.5,2,"['O-iOS :iphone:', 'release', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/745,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/745#issuecomment-725671401,"Push out another hotfix for Apple platforms which disables Bitcode generation for macOS, as it's know to cause issues with deploying macOS apps with Apple Silicon support to App Store.
This hotfix affects only installation of Themis via Carthage for building macOS apps.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (may be done separately)
 Changelog is updated
 Push the branch manually from CLI once CI passes",Days without hotfixes: 0️⃣,True,{'LAUGH': ['https://github.com/ilammy']}
cossacklabs/themis,https://github.com/cossacklabs/themis,746,2020-11-11T23:07:19Z,2020-11-12T14:17:13Z,2020-11-12T14:17:23Z,MERGED,True,7,5,1,https://github.com/vixentael,Slightly update README,3,['docs :books:'],https://github.com/cossacklabs/themis/pull/746,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/746,"I present you the gorgeous creation by @ilammy:

Checklist

 @ilammy likes this change","I present you the gorgeous creation by @ilammy:

Checklist

 @ilammy likes this change",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,747,2020-11-12T10:22:12Z,2020-11-12T16:36:32Z,2020-11-12T16:36:32Z,MERGED,True,21,10,2,https://github.com/ilammy,Merge branch 'release/0.13' into stable,3,['release'],https://github.com/cossacklabs/themis/pull/747,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/747,"Following the release of Themis 0.13.5, merge release/0.13 into stable to sync up the changes.
Checklist

 Change is covered by automated tests
 Changelog is updated
 Themis 0.13.5 is published
 ⚠️ Push the merge manually from the command-line","Following the release of Themis 0.13.5, merge release/0.13 into stable to sync up the changes.
Checklist

 Change is covered by automated tests
 Changelog is updated
 Themis 0.13.5 is published
 ⚠️ Push the merge manually from the command-line",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,748,2020-11-12T10:28:32Z,2020-11-12T16:37:01Z,2020-11-12T16:37:01Z,MERGED,True,17,6,2,https://github.com/ilammy,Merge branch 'stable' into master ,4,['release'],https://github.com/cossacklabs/themis/pull/748,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/748,"Following the release of Themis 0.13.5 and #747, merge stable into master to sync up the changes.
As the hotfix changes are already included into master, we're only rearranging the changelog and bump the version here.
Checklist

 Change is covered by automated tests
 Changelog is updated
 #747 is merged
 ⚠️ Push the merge manually from the command-line","Following the release of Themis 0.13.5 and #747, merge stable into master to sync up the changes.
As the hotfix changes are already included into master, we're only rearranging the changelog and bump the version here.
Checklist

 Change is covered by automated tests
 Changelog is updated
 #747 is merged
 ⚠️ Push the merge manually from the command-line",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,749,2020-11-22T03:01:53Z,2020-11-22T12:41:55Z,2020-11-22T23:09:26Z,MERGED,True,3,3,3,https://github.com/ilammy,Use environment files in GitHub Actions,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/749,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/749,"GitHub Actions have deprecated set-env and add-path commands due to a security vulnerability. The grace period for migration has expired around a week ago and now they cause hard errors instead of warnings. Replace set-env and add-path usage with recommended environment files approach, fixing the build errors.
Checklist

 Change is covered by automated tests","GitHub Actions have deprecated set-env and add-path commands due to a security vulnerability. The grace period for migration has expired around a week ago and now they cause hard errors instead of warnings. Replace set-env and add-path usage with recommended environment files approach, fixing the build errors.
Checklist

 Change is covered by automated tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,749,2020-11-22T03:01:53Z,2020-11-22T12:41:55Z,2020-11-22T23:09:26Z,MERGED,True,3,3,3,https://github.com/ilammy,Use environment files in GitHub Actions,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/749,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/749#issuecomment-731685993,"GitHub Actions have deprecated set-env and add-path commands due to a security vulnerability. The grace period for migration has expired around a week ago and now they cause hard errors instead of warnings. Replace set-env and add-path usage with recommended environment files approach, fixing the build errors.
Checklist

 Change is covered by automated tests","There should also be a ticket for this in internal task tracker, please close it once this is merged.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,749,2020-11-22T03:01:53Z,2020-11-22T12:41:55Z,2020-11-22T23:09:26Z,MERGED,True,3,3,3,https://github.com/ilammy,Use environment files in GitHub Actions,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/749,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/749#issuecomment-731742189,"GitHub Actions have deprecated set-env and add-path commands due to a security vulnerability. The grace period for migration has expired around a week ago and now they cause hard errors instead of warnings. Replace set-env and add-path usage with recommended environment files approach, fixing the build errors.
Checklist

 Change is covered by automated tests","There should also be a ticket for this in internal task tracker, please close it once this is merged.

Yes, thank you, I've updated the ticket.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,750,2020-11-23T00:36:55Z,2020-11-23T00:56:43Z,2020-11-23T01:49:37Z,MERGED,True,15,19,5,https://github.com/ilammy,Dynamic linkage for CocoaPods,6,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/750,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/750,"Update to latest CLOpenSSL 1.1.10802 which uses dynamic linkage (and removes some architecture slices for that).
Now that CLOpenSSL is using dynamic linkage, we can switch Themis back to using dynamic linkage too (as it was before). The themis pod will have to continue being a dynamic framework Pod to avoid breaking existing builds.
arm64e slice in binary dynamic frameworks causes issues with CocoaPods so it has been removed from CLOpenSSL starting with 1.1.10802. However, Carthage builds use Xcode project which still requires arm64e. Remove arm64e from the architectures list as it is not available now.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)","Update to latest CLOpenSSL 1.1.10802 which uses dynamic linkage (and removes some architecture slices for that).
Now that CLOpenSSL is using dynamic linkage, we can switch Themis back to using dynamic linkage too (as it was before). The themis pod will have to continue being a dynamic framework Pod to avoid breaking existing builds.
arm64e slice in binary dynamic frameworks causes issues with CocoaPods so it has been removed from CLOpenSSL starting with 1.1.10802. However, Carthage builds use Xcode project which still requires arm64e. Remove arm64e from the architectures list as it is not available now.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,750,2020-11-23T00:36:55Z,2020-11-23T00:56:43Z,2020-11-23T01:49:37Z,MERGED,True,15,19,5,https://github.com/ilammy,Dynamic linkage for CocoaPods,6,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/750,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/750#issuecomment-731877917,"Update to latest CLOpenSSL 1.1.10802 which uses dynamic linkage (and removes some architecture slices for that).
Now that CLOpenSSL is using dynamic linkage, we can switch Themis back to using dynamic linkage too (as it was before). The themis pod will have to continue being a dynamic framework Pod to avoid breaking existing builds.
arm64e slice in binary dynamic frameworks causes issues with CocoaPods so it has been removed from CLOpenSSL starting with 1.1.10802. However, Carthage builds use Xcode project which still requires arm64e. Remove arm64e from the architectures list as it is not available now.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)","The builds is currently broken, should fixed once #751 is merged (and the build restarted).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,750,2020-11-23T00:36:55Z,2020-11-23T00:56:43Z,2020-11-23T01:49:37Z,MERGED,True,15,19,5,https://github.com/ilammy,Dynamic linkage for CocoaPods,6,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/750,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/750#issuecomment-731879078,"Update to latest CLOpenSSL 1.1.10802 which uses dynamic linkage (and removes some architecture slices for that).
Now that CLOpenSSL is using dynamic linkage, we can switch Themis back to using dynamic linkage too (as it was before). The themis pod will have to continue being a dynamic framework Pod to avoid breaking existing builds.
arm64e slice in binary dynamic frameworks causes issues with CocoaPods so it has been removed from CLOpenSSL starting with 1.1.10802. However, Carthage builds use Xcode project which still requires arm64e. Remove arm64e from the architectures list as it is not available now.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)","I don't really like to pin OpenSSL versions, but @vixentael is being extra paranoid, and I'm honestly tired of this madness, so whatever floats your boat.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,750,2020-11-23T00:36:55Z,2020-11-23T00:56:43Z,2020-11-23T01:49:37Z,MERGED,True,15,19,5,https://github.com/ilammy,Dynamic linkage for CocoaPods,6,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/750,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/750#issuecomment-731879324,"Update to latest CLOpenSSL 1.1.10802 which uses dynamic linkage (and removes some architecture slices for that).
Now that CLOpenSSL is using dynamic linkage, we can switch Themis back to using dynamic linkage too (as it was before). The themis pod will have to continue being a dynamic framework Pod to avoid breaking existing builds.
arm64e slice in binary dynamic frameworks causes issues with CocoaPods so it has been removed from CLOpenSSL starting with 1.1.10802. However, Carthage builds use Xcode project which still requires arm64e. Remove arm64e from the architectures list as it is not available now.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)","yeah, sorry, i'm tired of being pushed to update our own libraries urgently because they suddenly introduce breaking changes.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,750,2020-11-23T00:36:55Z,2020-11-23T00:56:43Z,2020-11-23T01:49:37Z,MERGED,True,15,19,5,https://github.com/ilammy,Dynamic linkage for CocoaPods,6,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/750,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/750#issuecomment-731880148,"Update to latest CLOpenSSL 1.1.10802 which uses dynamic linkage (and removes some architecture slices for that).
Now that CLOpenSSL is using dynamic linkage, we can switch Themis back to using dynamic linkage too (as it was before). The themis pod will have to continue being a dynamic framework Pod to avoid breaking existing builds.
arm64e slice in binary dynamic frameworks causes issues with CocoaPods so it has been removed from CLOpenSSL starting with 1.1.10802. However, Carthage builds use Xcode project which still requires arm64e. Remove arm64e from the architectures list as it is not available now.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)","As it turns out, code examples are broken with Themis 0.13.5 once CLOpenSSL 1.1.10802 has been released. Given that CI is broken, we're currently ignoring it (again, and again).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,750,2020-11-23T00:36:55Z,2020-11-23T00:56:43Z,2020-11-23T01:49:37Z,MERGED,True,15,19,5,https://github.com/ilammy,Dynamic linkage for CocoaPods,6,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/750,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/750#issuecomment-731889439,"Update to latest CLOpenSSL 1.1.10802 which uses dynamic linkage (and removes some architecture slices for that).
Now that CLOpenSSL is using dynamic linkage, we can switch Themis back to using dynamic linkage too (as it was before). The themis pod will have to continue being a dynamic framework Pod to avoid breaking existing builds.
arm64e slice in binary dynamic frameworks causes issues with CocoaPods so it has been removed from CLOpenSSL starting with 1.1.10802. However, Carthage builds use Xcode project which still requires arm64e. Remove arm64e from the architectures list as it is not available now.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)","As it turned out in #752, the proper way to pin Carthage binary dependency is to use == in Cartfile:
binary ""https://example.com/spec.json"" == 1.2.3

which will then result in the following Cartfile.resolved
binary ""https://example.com/spec.json"" ""1.2.3""

One cannot use ""1.2.3"" – tag-like spec – for binary dependencies since they are only versioned (by the JSON spec), they have no associated repository.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,751,2020-11-23T00:42:38Z,2020-11-23T00:55:10Z,2020-11-23T00:55:18Z,MERGED,True,3,3,3,https://github.com/ilammy,Use environment files in GitHub Actions,1,"['infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/751,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/751,"Cherry-pick #749 onto release/0.13 branch to fix CI runs there too.
Checklist

 Change is covered by automated tests","Cherry-pick #749 onto release/0.13 branch to fix CI runs there too.
Checklist

 Change is covered by automated tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,752,2020-11-23T01:08:16Z,2020-11-23T02:03:17Z,2020-11-23T02:03:22Z,MERGED,True,20,11,4,https://github.com/ilammy,Themis 0.13.6,2,['release'],https://github.com/cossacklabs/themis/pull/752,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/752,"Push out (yet another) hotfix for Apple platforms, now enabling back dynamic linkage for CocoaPods, resolving installation issues as well as weird errors about @rpath when trying to run compiled apps.
Checklist

 Change is covered by automated tests (yes, but...)
 Example projects and code samples are up-to-date (examples are broken until after the release)
 Changelog is updated","Push out (yet another) hotfix for Apple platforms, now enabling back dynamic linkage for CocoaPods, resolving installation issues as well as weird errors about @rpath when trying to run compiled apps.
Checklist

 Change is covered by automated tests (yes, but...)
 Example projects and code samples are up-to-date (examples are broken until after the release)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,753,2020-11-23T03:06:40Z,2020-11-23T13:41:38Z,2020-11-23T13:41:38Z,MERGED,True,36,31,8,https://github.com/ilammy,Merge branch 'release/0.13' into stable,4,['release'],https://github.com/cossacklabs/themis/pull/753,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/753,"Following the release of Themis 0.13.6, merge release/0.13 into stable to sync up the changes.
Checklist

 Change is covered by automated tests
 Changelog is updated
 Themis 0.13.6 is published
 ⚠️ Push the merge manually from the command-line","Following the release of Themis 0.13.6, merge release/0.13 into stable to sync up the changes.
Checklist

 Change is covered by automated tests
 Changelog is updated
 Themis 0.13.6 is published
 ⚠️ Push the merge manually from the command-line",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,754,2020-11-23T03:07:05Z,2020-11-23T13:45:07Z,2020-11-23T13:45:07Z,MERGED,True,33,44,5,https://github.com/ilammy,Merge branch 'stable' into master,5,['release'],https://github.com/cossacklabs/themis/pull/754,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/754,"Following the release of Themis 0.13.6 and #753, merge stable into master to sync up the changes.
Updated Xcode project to backport changes: version updates and arm64e removal from the architecture list. The projects are still quite different in the master and release/0.13 branches. Other than that, there were no merge conflicts this time.
Checklist

 Change is covered by automated tests
 Changelog is updated
 #753 is merged
 ⚠️ Push the merge manually from the command-line","Following the release of Themis 0.13.6 and #753, merge stable into master to sync up the changes.
Updated Xcode project to backport changes: version updates and arm64e removal from the architecture list. The projects are still quite different in the master and release/0.13 branches. Other than that, there were no merge conflicts this time.
Checklist

 Change is covered by automated tests
 Changelog is updated
 #753 is merged
 ⚠️ Push the merge manually from the command-line",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,754,2020-11-23T03:07:05Z,2020-11-23T13:45:07Z,2020-11-23T13:45:07Z,MERGED,True,33,44,5,https://github.com/ilammy,Merge branch 'stable' into master,5,['release'],https://github.com/cossacklabs/themis/pull/754,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/754#issuecomment-731904711,"Following the release of Themis 0.13.6 and #753, merge stable into master to sync up the changes.
Updated Xcode project to backport changes: version updates and arm64e removal from the architecture list. The projects are still quite different in the master and release/0.13 branches. Other than that, there were no merge conflicts this time.
Checklist

 Change is covered by automated tests
 Changelog is updated
 #753 is merged
 ⚠️ Push the merge manually from the command-line","I've tweaked the changelog a bit (November 23th => 23rd) in the merge commit, only in master branch. Can't be bothered to update the release/0.13 and stable again for this, but let's have the master's changelog right at least.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,755,2020-11-27T06:45:06Z,2020-11-27T22:26:23Z,2020-11-27T22:26:29Z,MERGED,True,38,41,3,https://github.com/ilammy,Measure test coverage with GitHub Actions,3,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/755,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/755,"Migrate the coverage step from CircleCI to GitHub Actions. It's pretty easy: compile Themis with gcov instrumentation, run the tests, use lcov to extract coverage data, post results using official Action.
Compared to CircleCI, the difference is in how we exclude the tests directory. For some reason the version of lcov available on GitHub's runners handles relative paths slightly differently.
(Also, if I understand the docs correctly, Coveralls can (will?) post coverage results in pull requests, thanks to that action.)
On CircleCI retirement
Now that GitHub Actions have stolen the last job CircleCI had, it's no longer necessary on the master branch. However, CircleCI is still running nightly builds on the stable branch so we can't turn it off just like that.
Due to the way CircleCI works, it needs to see the .circleci/config.yml file on the default branch of the repo (i.e., master). However, we don't need it to do anything. So put there the minimal valid config and let CircleCI rest. It had worked hard for us all these days, after all.
Once Themis 0.14 is out, GitHub Actions configuration will be applied to the stable branch, and only then CircleCI can be deconfigured and finally retired.
On GoThemis coverage
Also note that these is no replacement for goveralls execution that is removed in this commit. It does not seem to be working right now, and no one knows when exactly it stopped working. Well, we can't replace it easily right now so GoThemis is in the same boat with other wrappers: that is, test coverage is collected only for Themis Core. Maybe future work on Themis 0.14 will add more coverage coverage before the release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated
 x86_64 job is marked optional in master branch settings","Migrate the coverage step from CircleCI to GitHub Actions. It's pretty easy: compile Themis with gcov instrumentation, run the tests, use lcov to extract coverage data, post results using official Action.
Compared to CircleCI, the difference is in how we exclude the tests directory. For some reason the version of lcov available on GitHub's runners handles relative paths slightly differently.
(Also, if I understand the docs correctly, Coveralls can (will?) post coverage results in pull requests, thanks to that action.)
On CircleCI retirement
Now that GitHub Actions have stolen the last job CircleCI had, it's no longer necessary on the master branch. However, CircleCI is still running nightly builds on the stable branch so we can't turn it off just like that.
Due to the way CircleCI works, it needs to see the .circleci/config.yml file on the default branch of the repo (i.e., master). However, we don't need it to do anything. So put there the minimal valid config and let CircleCI rest. It had worked hard for us all these days, after all.
Once Themis 0.14 is out, GitHub Actions configuration will be applied to the stable branch, and only then CircleCI can be deconfigured and finally retired.
On GoThemis coverage
Also note that these is no replacement for goveralls execution that is removed in this commit. It does not seem to be working right now, and no one knows when exactly it stopped working. Well, we can't replace it easily right now so GoThemis is in the same boat with other wrappers: that is, test coverage is collected only for Themis Core. Maybe future work on Themis 0.14 will add more coverage coverage before the release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated
 x86_64 job is marked optional in master branch settings",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,755,2020-11-27T06:45:06Z,2020-11-27T22:26:23Z,2020-11-27T22:26:29Z,MERGED,True,38,41,3,https://github.com/ilammy,Measure test coverage with GitHub Actions,3,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/755,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/755#issuecomment-734679048,"Migrate the coverage step from CircleCI to GitHub Actions. It's pretty easy: compile Themis with gcov instrumentation, run the tests, use lcov to extract coverage data, post results using official Action.
Compared to CircleCI, the difference is in how we exclude the tests directory. For some reason the version of lcov available on GitHub's runners handles relative paths slightly differently.
(Also, if I understand the docs correctly, Coveralls can (will?) post coverage results in pull requests, thanks to that action.)
On CircleCI retirement
Now that GitHub Actions have stolen the last job CircleCI had, it's no longer necessary on the master branch. However, CircleCI is still running nightly builds on the stable branch so we can't turn it off just like that.
Due to the way CircleCI works, it needs to see the .circleci/config.yml file on the default branch of the repo (i.e., master). However, we don't need it to do anything. So put there the minimal valid config and let CircleCI rest. It had worked hard for us all these days, after all.
Once Themis 0.14 is out, GitHub Actions configuration will be applied to the stable branch, and only then CircleCI can be deconfigured and finally retired.
On GoThemis coverage
Also note that these is no replacement for goveralls execution that is removed in this commit. It does not seem to be working right now, and no one knows when exactly it stopped working. Well, we can't replace it easily right now so GoThemis is in the same boat with other wrappers: that is, test coverage is collected only for Themis Core. Maybe future work on Themis 0.14 will add more coverage coverage before the release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated
 x86_64 job is marked optional in master branch settings","(Also, if I understand the docs correctly, Coveralls can (will?) post coverage results in pull requests, thanks to that action.)

Yes, it can, but it needs to be enabled explicitly. I'm not a great fan of bots spamming comments into PRs, so I'd leave that disabled.
However, I have enabled status API usage there. Starting with the next build, Coveralls should be phoning GitHub with coverage analysis results, failing the build on any of the following events:

coverage falls below 70% (currently it's 84%)
coverage drops by more than 10% with a single change",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,755,2020-11-27T06:45:06Z,2020-11-27T22:26:23Z,2020-11-27T22:26:29Z,MERGED,True,38,41,3,https://github.com/ilammy,Measure test coverage with GitHub Actions,3,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/755,https://github.com/iamnotacake,3,https://github.com/cossacklabs/themis/pull/755#issuecomment-734796229,"Migrate the coverage step from CircleCI to GitHub Actions. It's pretty easy: compile Themis with gcov instrumentation, run the tests, use lcov to extract coverage data, post results using official Action.
Compared to CircleCI, the difference is in how we exclude the tests directory. For some reason the version of lcov available on GitHub's runners handles relative paths slightly differently.
(Also, if I understand the docs correctly, Coveralls can (will?) post coverage results in pull requests, thanks to that action.)
On CircleCI retirement
Now that GitHub Actions have stolen the last job CircleCI had, it's no longer necessary on the master branch. However, CircleCI is still running nightly builds on the stable branch so we can't turn it off just like that.
Due to the way CircleCI works, it needs to see the .circleci/config.yml file on the default branch of the repo (i.e., master). However, we don't need it to do anything. So put there the minimal valid config and let CircleCI rest. It had worked hard for us all these days, after all.
Once Themis 0.14 is out, GitHub Actions configuration will be applied to the stable branch, and only then CircleCI can be deconfigured and finally retired.
On GoThemis coverage
Also note that these is no replacement for goveralls execution that is removed in this commit. It does not seem to be working right now, and no one knows when exactly it stopped working. Well, we can't replace it easily right now so GoThemis is in the same boat with other wrappers: that is, test coverage is collected only for Themis Core. Maybe future work on Themis 0.14 will add more coverage coverage before the release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated
 x86_64 job is marked optional in master branch settings","coverage drops by more than 10% with a single change

What exactly is a single change? Single commit in master after squashing+merging everything from some PR?
And the coverage: XX% badge on top of README.md will now use data from GitHub Actions?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,755,2020-11-27T06:45:06Z,2020-11-27T22:26:23Z,2020-11-27T22:26:29Z,MERGED,True,38,41,3,https://github.com/ilammy,Measure test coverage with GitHub Actions,3,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/755,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/755#issuecomment-734804545,"Migrate the coverage step from CircleCI to GitHub Actions. It's pretty easy: compile Themis with gcov instrumentation, run the tests, use lcov to extract coverage data, post results using official Action.
Compared to CircleCI, the difference is in how we exclude the tests directory. For some reason the version of lcov available on GitHub's runners handles relative paths slightly differently.
(Also, if I understand the docs correctly, Coveralls can (will?) post coverage results in pull requests, thanks to that action.)
On CircleCI retirement
Now that GitHub Actions have stolen the last job CircleCI had, it's no longer necessary on the master branch. However, CircleCI is still running nightly builds on the stable branch so we can't turn it off just like that.
Due to the way CircleCI works, it needs to see the .circleci/config.yml file on the default branch of the repo (i.e., master). However, we don't need it to do anything. So put there the minimal valid config and let CircleCI rest. It had worked hard for us all these days, after all.
Once Themis 0.14 is out, GitHub Actions configuration will be applied to the stable branch, and only then CircleCI can be deconfigured and finally retired.
On GoThemis coverage
Also note that these is no replacement for goveralls execution that is removed in this commit. It does not seem to be working right now, and no one knows when exactly it stopped working. Well, we can't replace it easily right now so GoThemis is in the same boat with other wrappers: that is, test coverage is collected only for Themis Core. Maybe future work on Themis 0.14 will add more coverage coverage before the release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated
 x86_64 job is marked optional in master branch settings","@iamnotacake,

What exactly is a single change?

I'm not sure, let's find out! 🤠
On a serious note, Coveralls docs don't seem to go into much detail here. I'd assume this is measured as a difference between the baseline for the branch and the next submission for. So its granularity is a push. Submit a PR with 10% loss over the target branch – denied. Submit an update within a PR which crosses the limit – denied. Merge it regardless – still red.

And the coverage: XX% badge on top of README.md will now use data from GitHub Actions?

Right. It sources the data from Coveralls, so it's not going to change. It does not care which CI submits results to Coveralls.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,755,2020-11-27T06:45:06Z,2020-11-27T22:26:23Z,2020-11-27T22:26:29Z,MERGED,True,38,41,3,https://github.com/ilammy,Measure test coverage with GitHub Actions,3,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/755,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/755#issuecomment-734999619,"Migrate the coverage step from CircleCI to GitHub Actions. It's pretty easy: compile Themis with gcov instrumentation, run the tests, use lcov to extract coverage data, post results using official Action.
Compared to CircleCI, the difference is in how we exclude the tests directory. For some reason the version of lcov available on GitHub's runners handles relative paths slightly differently.
(Also, if I understand the docs correctly, Coveralls can (will?) post coverage results in pull requests, thanks to that action.)
On CircleCI retirement
Now that GitHub Actions have stolen the last job CircleCI had, it's no longer necessary on the master branch. However, CircleCI is still running nightly builds on the stable branch so we can't turn it off just like that.
Due to the way CircleCI works, it needs to see the .circleci/config.yml file on the default branch of the repo (i.e., master). However, we don't need it to do anything. So put there the minimal valid config and let CircleCI rest. It had worked hard for us all these days, after all.
Once Themis 0.14 is out, GitHub Actions configuration will be applied to the stable branch, and only then CircleCI can be deconfigured and finally retired.
On GoThemis coverage
Also note that these is no replacement for goveralls execution that is removed in this commit. It does not seem to be working right now, and no one knows when exactly it stopped working. Well, we can't replace it easily right now so GoThemis is in the same boat with other wrappers: that is, test coverage is collected only for Themis Core. Maybe future work on Themis 0.14 will add more coverage coverage before the release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated
 x86_64 job is marked optional in master branch settings","Yup, here are the status checks:",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,756,2020-11-27T16:34:28Z,2020-11-27T17:02:01Z,2020-11-27T22:01:26Z,MERGED,True,2,1,1,https://github.com/concatime,Add `tests` directory for `soter_test` target,1,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/756,https://github.com/concatime,1,https://github.com/cossacklabs/themis/pull/756,"Update CMakeLists to add tests directory with private headers for soter_test target.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Update CMakeLists to add tests directory with private headers for soter_test target.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,756,2020-11-27T16:34:28Z,2020-11-27T17:02:01Z,2020-11-27T22:01:26Z,MERGED,True,2,1,1,https://github.com/concatime,Add `tests` directory for `soter_test` target,1,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/756,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/756#issuecomment-734917512,"Update CMakeLists to add tests directory with private headers for soter_test target.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","wow, awesome) someone use cmake/CMakeLists.txt which we added more for internal usage and CLion integration (because main build system is make for us)
I tested locally and yes, without this patch soter tests fail with errors:
/themis/tests/soter/soter_asym_ka_test.c:17:10: fatal error: soter/soter_test.h: No such file or directory
   17 | #include ""soter/soter_test.h""
      |          ^~~~~~~~~~~~~~~~~~~~

because we have hidden private headers. With the patch, it builds and runs successfully.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,756,2020-11-27T16:34:28Z,2020-11-27T17:02:01Z,2020-11-27T22:01:26Z,MERGED,True,2,1,1,https://github.com/concatime,Add `tests` directory for `soter_test` target,1,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/756,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/756#issuecomment-734998805,"Update CMakeLists to add tests directory with private headers for soter_test target.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Hey @concatime! Thanks for fixing up CMake! Indeeed, it's not used much for development or packaging. If I remember correctly, it was added some long time ago for better IDE support but it was not really maintained since then as no one really needed it.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,757,2020-11-27T17:10:58Z,2020-11-30T00:45:13Z,2020-11-30T00:45:51Z,MERGED,True,4,4,1,https://github.com/concatime,"Replace the obsolete OpenSSL functions EVP_{De,En}cryptFinal",3,['core'],https://github.com/cossacklabs/themis/pull/757,https://github.com/concatime,1,https://github.com/cossacklabs/themis/pull/757,"When compiling, I get these two warnings:

warning: EVP_EncryptFinal is often misused, please use EVP_EncryptFinal_ex and EVP_CIPHER_CTX_cleanup


warning: EVP_DecryptFinal is often misused, please use EVP_DecryptFinal_ex and EVP_CIPHER_CTX_cleanup

It already happened to me before when building H2O.

The functions EVP_EncryptInit(), EVP_EncryptFinal(),
EVP_DecryptInit(), EVP_CipherInit() and EVP_CipherFinal() are obsolete
but are retained for compatibility with existing code. New code should
use EVP_EncryptInit_ex(), EVP_EncryptFinal_ex(), EVP_DecryptInit_ex(),
EVP_DecryptFinal_ex(), EVP_CipherInit_ex() and EVP_CipherFinal_ex()
because they can reuse an existing context without allocating and
freeing it up on each call.

Source.
These changes are already applied to the BoringSSL code. See here.
Checklist

 Change is covered by automated tests
 The [coding guidelines] are followed
 Changelog is updated N/A","When compiling, I get these two warnings:

warning: EVP_EncryptFinal is often misused, please use EVP_EncryptFinal_ex and EVP_CIPHER_CTX_cleanup


warning: EVP_DecryptFinal is often misused, please use EVP_DecryptFinal_ex and EVP_CIPHER_CTX_cleanup

It already happened to me before when building H2O.

The functions EVP_EncryptInit(), EVP_EncryptFinal(),
EVP_DecryptInit(), EVP_CipherInit() and EVP_CipherFinal() are obsolete
but are retained for compatibility with existing code. New code should
use EVP_EncryptInit_ex(), EVP_EncryptFinal_ex(), EVP_DecryptInit_ex(),
EVP_DecryptFinal_ex(), EVP_CipherInit_ex() and EVP_CipherFinal_ex()
because they can reuse an existing context without allocating and
freeing it up on each call.

Source.
These changes are already applied to the BoringSSL code. See here.
Checklist

 Change is covered by automated tests
 The [coding guidelines] are followed
 Changelog is updated N/A",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,757,2020-11-27T17:10:58Z,2020-11-30T00:45:13Z,2020-11-30T00:45:51Z,MERGED,True,4,4,1,https://github.com/concatime,"Replace the obsolete OpenSSL functions EVP_{De,En}cryptFinal",3,['core'],https://github.com/cossacklabs/themis/pull/757,https://github.com/concatime,2,https://github.com/cossacklabs/themis/pull/757#issuecomment-734940427,"When compiling, I get these two warnings:

warning: EVP_EncryptFinal is often misused, please use EVP_EncryptFinal_ex and EVP_CIPHER_CTX_cleanup


warning: EVP_DecryptFinal is often misused, please use EVP_DecryptFinal_ex and EVP_CIPHER_CTX_cleanup

It already happened to me before when building H2O.

The functions EVP_EncryptInit(), EVP_EncryptFinal(),
EVP_DecryptInit(), EVP_CipherInit() and EVP_CipherFinal() are obsolete
but are retained for compatibility with existing code. New code should
use EVP_EncryptInit_ex(), EVP_EncryptFinal_ex(), EVP_DecryptInit_ex(),
EVP_DecryptFinal_ex(), EVP_CipherInit_ex() and EVP_CipherFinal_ex()
because they can reuse an existing context without allocating and
freeing it up on each call.

Source.
These changes are already applied to the BoringSSL code. See here.
Checklist

 Change is covered by automated tests
 The [coding guidelines] are followed
 Changelog is updated N/A","Always a pleasure :)
Also, I recommend that you include another build system before 1.0.
CMake or Meson are both strong candidates.
Make is just not reliable when packaging softwares.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,757,2020-11-27T17:10:58Z,2020-11-30T00:45:13Z,2020-11-30T00:45:51Z,MERGED,True,4,4,1,https://github.com/concatime,"Replace the obsolete OpenSSL functions EVP_{De,En}cryptFinal",3,['core'],https://github.com/cossacklabs/themis/pull/757,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/757#issuecomment-735001992,"When compiling, I get these two warnings:

warning: EVP_EncryptFinal is often misused, please use EVP_EncryptFinal_ex and EVP_CIPHER_CTX_cleanup


warning: EVP_DecryptFinal is often misused, please use EVP_DecryptFinal_ex and EVP_CIPHER_CTX_cleanup

It already happened to me before when building H2O.

The functions EVP_EncryptInit(), EVP_EncryptFinal(),
EVP_DecryptInit(), EVP_CipherInit() and EVP_CipherFinal() are obsolete
but are retained for compatibility with existing code. New code should
use EVP_EncryptInit_ex(), EVP_EncryptFinal_ex(), EVP_DecryptInit_ex(),
EVP_DecryptFinal_ex(), EVP_CipherInit_ex() and EVP_CipherFinal_ex()
because they can reuse an existing context without allocating and
freeing it up on each call.

Source.
These changes are already applied to the BoringSSL code. See here.
Checklist

 Change is covered by automated tests
 The [coding guidelines] are followed
 Changelog is updated N/A","@concatime, there seems to be an issue with Rust build unrelated to your changes which keeps the CI red. Please stand by until it's resolved, that should be an easy one.
Also, regarding

CMake or Meson are both strong candidates.
Make is just not reliable when packaging softwares.

I did suggest moving to CMake as the primary build system on some occasion in the past, but it was met with mild opposition, primarily on the basis of introducing another dependency. However, now that Themis is going to build BoringSSL-flavor packages by default, CMake is actually a requirement so that argument is not valid anymore. Now only the 'easy' technical part remains: reimplement existing Make build system with CMake, preferably without losing any features or introducing new bugs, and ideally with compatibility shims via Make.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,757,2020-11-27T17:10:58Z,2020-11-30T00:45:13Z,2020-11-30T00:45:51Z,MERGED,True,4,4,1,https://github.com/concatime,"Replace the obsolete OpenSSL functions EVP_{De,En}cryptFinal",3,['core'],https://github.com/cossacklabs/themis/pull/757,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/757#issuecomment-735296952,"When compiling, I get these two warnings:

warning: EVP_EncryptFinal is often misused, please use EVP_EncryptFinal_ex and EVP_CIPHER_CTX_cleanup


warning: EVP_DecryptFinal is often misused, please use EVP_DecryptFinal_ex and EVP_CIPHER_CTX_cleanup

It already happened to me before when building H2O.

The functions EVP_EncryptInit(), EVP_EncryptFinal(),
EVP_DecryptInit(), EVP_CipherInit() and EVP_CipherFinal() are obsolete
but are retained for compatibility with existing code. New code should
use EVP_EncryptInit_ex(), EVP_EncryptFinal_ex(), EVP_DecryptInit_ex(),
EVP_DecryptFinal_ex(), EVP_CipherInit_ex() and EVP_CipherFinal_ex()
because they can reuse an existing context without allocating and
freeing it up on each call.

Source.
These changes are already applied to the BoringSSL code. See here.
Checklist

 Change is covered by automated tests
 The [coding guidelines] are followed
 Changelog is updated N/A","Okay, Rust build should be fixed by now. I'll take the liberty of updating the branch since it's going to be merged soon.
@concatime, if you want to add any updates, please do a git pull locally first to sync your local repo.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,757,2020-11-27T17:10:58Z,2020-11-30T00:45:13Z,2020-11-30T00:45:51Z,MERGED,True,4,4,1,https://github.com/concatime,"Replace the obsolete OpenSSL functions EVP_{De,En}cryptFinal",3,['core'],https://github.com/cossacklabs/themis/pull/757,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/757#issuecomment-735487815,"When compiling, I get these two warnings:

warning: EVP_EncryptFinal is often misused, please use EVP_EncryptFinal_ex and EVP_CIPHER_CTX_cleanup


warning: EVP_DecryptFinal is often misused, please use EVP_DecryptFinal_ex and EVP_CIPHER_CTX_cleanup

It already happened to me before when building H2O.

The functions EVP_EncryptInit(), EVP_EncryptFinal(),
EVP_DecryptInit(), EVP_CipherInit() and EVP_CipherFinal() are obsolete
but are retained for compatibility with existing code. New code should
use EVP_EncryptInit_ex(), EVP_EncryptFinal_ex(), EVP_DecryptInit_ex(),
EVP_DecryptFinal_ex(), EVP_CipherInit_ex() and EVP_CipherFinal_ex()
because they can reuse an existing context without allocating and
freeing it up on each call.

Source.
These changes are already applied to the BoringSSL code. See here.
Checklist

 Change is covered by automated tests
 The [coding guidelines] are followed
 Changelog is updated N/A","@concatime, thank you for your contribution! ❤️",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,758,2020-11-27T23:39:09Z,2020-11-28T19:47:42Z,2021-01-24T07:22:10Z,MERGED,True,1,1,1,https://github.com/ilammy,Use new trait order in generated code,1,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/758,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/758,"Recent release of bindgen 0.56.0 resulted in a change in the order of the derived traits in the generated code. The changelog does not say anything about that, but I doubt this is considered a notable change. However, it breaks our build system which meticulously checks for any changes in the generated code compared to checked in version. It does this so that we don't miss any changes.
Well, the CI is going to be using bindgen 0.56.0 from now on, let's use the new trait order as well, whatever it is.
Checklist

 Change is covered by automated tests","Recent release of bindgen 0.56.0 resulted in a change in the order of the derived traits in the generated code. The changelog does not say anything about that, but I doubt this is considered a notable change. However, it breaks our build system which meticulously checks for any changes in the generated code compared to checked in version. It does this so that we don't miss any changes.
Well, the CI is going to be using bindgen 0.56.0 from now on, let's use the new trait order as well, whatever it is.
Checklist

 Change is covered by automated tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,759,2020-11-28T08:53:36Z,2020-11-29T23:05:30Z,2020-11-29T23:05:45Z,MERGED,True,253,181,35,https://github.com/ilammy,"Move public Themis headers to ""include"" directory",11,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/759,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/759,"As the subject line says, let's move all public Themis and Soter headers into the new top-level directory include. This is a common structure for C projects to keep public headers separate. That way public API is much more cleanly delineated.
Rationale
Currently, Themis technically exports some private headers with private API which might change in the future. With this new structure it will be more obvious which files you can change without risking to introduce API or ABI incompatibility.
Change details
It's not a simple git mv, more that one place needs a fix up for this all to work. The details are described in commit messages, I won't repeat them here.
Previously, @vixentael has been very afraid of this change breaking something in Apple Fairy Land, but now that we have proper CI, I am more than sure that it works. It definitely works on my machine, heh (as if that's worth anything).
On the breaking changes
Technically, this is a breaking change so I'm giving it a proper label. However, the users were not expected to use these now-removed APIs, include our private headers, etc. Users of our high-level wrappers should not be affected by this. The only people who may be affected are authors of third-party wrappers who (for some weird reason) depended on the unintentionally exported private APIs.
If you are one of those people reading this, please accept my condolences. You can contact Themis maintainers for advice if your build has been broken.
The changelog includes a list of removed headers and extra symbols. Of course no one will read it before an upgrade, but it's a good reference for troubleshooting.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (they don't use private API)
 Changelog is updated
 #758 is merged to avoid Rust breakage","As the subject line says, let's move all public Themis and Soter headers into the new top-level directory include. This is a common structure for C projects to keep public headers separate. That way public API is much more cleanly delineated.
Rationale
Currently, Themis technically exports some private headers with private API which might change in the future. With this new structure it will be more obvious which files you can change without risking to introduce API or ABI incompatibility.
Change details
It's not a simple git mv, more that one place needs a fix up for this all to work. The details are described in commit messages, I won't repeat them here.
Previously, @vixentael has been very afraid of this change breaking something in Apple Fairy Land, but now that we have proper CI, I am more than sure that it works. It definitely works on my machine, heh (as if that's worth anything).
On the breaking changes
Technically, this is a breaking change so I'm giving it a proper label. However, the users were not expected to use these now-removed APIs, include our private headers, etc. Users of our high-level wrappers should not be affected by this. The only people who may be affected are authors of third-party wrappers who (for some weird reason) depended on the unintentionally exported private APIs.
If you are one of those people reading this, please accept my condolences. You can contact Themis maintainers for advice if your build has been broken.
The changelog includes a list of removed headers and extra symbols. Of course no one will read it before an upgrade, but it's a good reference for troubleshooting.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (they don't use private API)
 Changelog is updated
 #758 is merged to avoid Rust breakage",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,759,2020-11-28T08:53:36Z,2020-11-29T23:05:30Z,2020-11-29T23:05:45Z,MERGED,True,253,181,35,https://github.com/ilammy,"Move public Themis headers to ""include"" directory",11,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/759,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/759#issuecomment-735146365,"As the subject line says, let's move all public Themis and Soter headers into the new top-level directory include. This is a common structure for C projects to keep public headers separate. That way public API is much more cleanly delineated.
Rationale
Currently, Themis technically exports some private headers with private API which might change in the future. With this new structure it will be more obvious which files you can change without risking to introduce API or ABI incompatibility.
Change details
It's not a simple git mv, more that one place needs a fix up for this all to work. The details are described in commit messages, I won't repeat them here.
Previously, @vixentael has been very afraid of this change breaking something in Apple Fairy Land, but now that we have proper CI, I am more than sure that it works. It definitely works on my machine, heh (as if that's worth anything).
On the breaking changes
Technically, this is a breaking change so I'm giving it a proper label. However, the users were not expected to use these now-removed APIs, include our private headers, etc. Users of our high-level wrappers should not be affected by this. The only people who may be affected are authors of third-party wrappers who (for some weird reason) depended on the unintentionally exported private APIs.
If you are one of those people reading this, please accept my condolences. You can contact Themis maintainers for advice if your build has been broken.
The changelog includes a list of removed headers and extra symbols. Of course no one will read it before an upgrade, but it's a good reference for troubleshooting.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (they don't use private API)
 Changelog is updated
 #758 is merged to avoid Rust breakage","Getting you all comfortable with me dropping PRs on weekends. Soon I'll probably do so only on weekends, heh...
Anyway... This change might sabotage @julepka's work on SPM since it will need to be told about the additional header location. Tread carefully here.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,759,2020-11-28T08:53:36Z,2020-11-29T23:05:30Z,2020-11-29T23:05:45Z,MERGED,True,253,181,35,https://github.com/ilammy,"Move public Themis headers to ""include"" directory",11,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/759,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/759#issuecomment-735295998,"As the subject line says, let's move all public Themis and Soter headers into the new top-level directory include. This is a common structure for C projects to keep public headers separate. That way public API is much more cleanly delineated.
Rationale
Currently, Themis technically exports some private headers with private API which might change in the future. With this new structure it will be more obvious which files you can change without risking to introduce API or ABI incompatibility.
Change details
It's not a simple git mv, more that one place needs a fix up for this all to work. The details are described in commit messages, I won't repeat them here.
Previously, @vixentael has been very afraid of this change breaking something in Apple Fairy Land, but now that we have proper CI, I am more than sure that it works. It definitely works on my machine, heh (as if that's worth anything).
On the breaking changes
Technically, this is a breaking change so I'm giving it a proper label. However, the users were not expected to use these now-removed APIs, include our private headers, etc. Users of our high-level wrappers should not be affected by this. The only people who may be affected are authors of third-party wrappers who (for some weird reason) depended on the unintentionally exported private APIs.
If you are one of those people reading this, please accept my condolences. You can contact Themis maintainers for advice if your build has been broken.
The changelog includes a list of removed headers and extra symbols. Of course no one will read it before an upgrade, but it's a good reference for troubleshooting.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (they don't use private API)
 Changelog is updated
 #758 is merged to avoid Rust breakage","@vixentael,
 Have you tried publishing a temp podspec with these changes, and then building our test project?
Sure, did that too. My testing capabilities are limited but I believe if simulator builds are working, then it should be okay.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,759,2020-11-28T08:53:36Z,2020-11-29T23:05:30Z,2020-11-29T23:05:45Z,MERGED,True,253,181,35,https://github.com/ilammy,"Move public Themis headers to ""include"" directory",11,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/759,https://github.com/julepka,4,https://github.com/cossacklabs/themis/pull/759#issuecomment-735359851,"As the subject line says, let's move all public Themis and Soter headers into the new top-level directory include. This is a common structure for C projects to keep public headers separate. That way public API is much more cleanly delineated.
Rationale
Currently, Themis technically exports some private headers with private API which might change in the future. With this new structure it will be more obvious which files you can change without risking to introduce API or ABI incompatibility.
Change details
It's not a simple git mv, more that one place needs a fix up for this all to work. The details are described in commit messages, I won't repeat them here.
Previously, @vixentael has been very afraid of this change breaking something in Apple Fairy Land, but now that we have proper CI, I am more than sure that it works. It definitely works on my machine, heh (as if that's worth anything).
On the breaking changes
Technically, this is a breaking change so I'm giving it a proper label. However, the users were not expected to use these now-removed APIs, include our private headers, etc. Users of our high-level wrappers should not be affected by this. The only people who may be affected are authors of third-party wrappers who (for some weird reason) depended on the unintentionally exported private APIs.
If you are one of those people reading this, please accept my condolences. You can contact Themis maintainers for advice if your build has been broken.
The changelog includes a list of removed headers and extra symbols. Of course no one will read it before an upgrade, but it's a good reference for troubleshooting.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (they don't use private API)
 Changelog is updated
 #758 is merged to avoid Rust breakage",This PR should make my struggle with SPM easier 🙂,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,759,2020-11-28T08:53:36Z,2020-11-29T23:05:30Z,2020-11-29T23:05:45Z,MERGED,True,253,181,35,https://github.com/ilammy,"Move public Themis headers to ""include"" directory",11,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/759,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/759#issuecomment-735419986,"As the subject line says, let's move all public Themis and Soter headers into the new top-level directory include. This is a common structure for C projects to keep public headers separate. That way public API is much more cleanly delineated.
Rationale
Currently, Themis technically exports some private headers with private API which might change in the future. With this new structure it will be more obvious which files you can change without risking to introduce API or ABI incompatibility.
Change details
It's not a simple git mv, more that one place needs a fix up for this all to work. The details are described in commit messages, I won't repeat them here.
Previously, @vixentael has been very afraid of this change breaking something in Apple Fairy Land, but now that we have proper CI, I am more than sure that it works. It definitely works on my machine, heh (as if that's worth anything).
On the breaking changes
Technically, this is a breaking change so I'm giving it a proper label. However, the users were not expected to use these now-removed APIs, include our private headers, etc. Users of our high-level wrappers should not be affected by this. The only people who may be affected are authors of third-party wrappers who (for some weird reason) depended on the unintentionally exported private APIs.
If you are one of those people reading this, please accept my condolences. You can contact Themis maintainers for advice if your build has been broken.
The changelog includes a list of removed headers and extra symbols. Of course no one will read it before an upgrade, but it's a good reference for troubleshooting.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (they don't use private API)
 Changelog is updated
 #758 is merged to avoid Rust breakage","I've checked Apple FairyLand, including backwards compatibility issues. All good.
I've checked the following settings:

pods:

  pod 'themis', :podspec => ""https://gist.githubusercontent.com/vixentael/3bb98d11915f98252569760043a540cb/raw/566ba52f9453aae532165734f8a59fba73583b6a/themis.podspec""


carthage:

github ""ilammy/themis"" ""public-headers-2""

for following cases:
local installation, backwards compatibility (updating pod for app that used 0.13.6), on-device installation, appcenter-installation (archive -> distributed ad hoc), testflight installation (archive -> distribute appstore)",True,{'THUMBS_UP': ['https://github.com/ilammy']}
cossacklabs/themis,https://github.com/cossacklabs/themis,759,2020-11-28T08:53:36Z,2020-11-29T23:05:30Z,2020-11-29T23:05:45Z,MERGED,True,253,181,35,https://github.com/ilammy,"Move public Themis headers to ""include"" directory",11,"['core', 'compatibility', 'installation']",https://github.com/cossacklabs/themis/pull/759,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/759#issuecomment-735420098,"As the subject line says, let's move all public Themis and Soter headers into the new top-level directory include. This is a common structure for C projects to keep public headers separate. That way public API is much more cleanly delineated.
Rationale
Currently, Themis technically exports some private headers with private API which might change in the future. With this new structure it will be more obvious which files you can change without risking to introduce API or ABI incompatibility.
Change details
It's not a simple git mv, more that one place needs a fix up for this all to work. The details are described in commit messages, I won't repeat them here.
Previously, @vixentael has been very afraid of this change breaking something in Apple Fairy Land, but now that we have proper CI, I am more than sure that it works. It definitely works on my machine, heh (as if that's worth anything).
On the breaking changes
Technically, this is a breaking change so I'm giving it a proper label. However, the users were not expected to use these now-removed APIs, include our private headers, etc. Users of our high-level wrappers should not be affected by this. The only people who may be affected are authors of third-party wrappers who (for some weird reason) depended on the unintentionally exported private APIs.
If you are one of those people reading this, please accept my condolences. You can contact Themis maintainers for advice if your build has been broken.
The changelog includes a list of removed headers and extra symbols. Of course no one will read it before an upgrade, but it's a good reference for troubleshooting.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (they don't use private API)
 Changelog is updated
 #758 is merged to avoid Rust breakage",Merge this baby! 🌟,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,760,2020-11-29T11:16:25Z,2020-12-01T02:37:55Z,2020-12-01T02:38:01Z,MERGED,True,46,43,12,https://github.com/ilammy,Update Emscripten to 2.0.9 upstream,6,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/760,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/760,"For quite some time Themis has been pinning Emscripten to an outdated version of the fastcomp flavor because recent versions have been broken, and the new upstream flavor has been broken as well.
However, Emscripten 2.0+ does not support the fastcomp flavor anymore so there is no hope for an fix. Eventually we'd have to migrate to the upstream flavor.
I have tried out the latest Emscripten 2.0.9 upstream and it seems to be working—after some further tweaks. There are no signs of the issues that were observed before and prevented Themis Core from being compiled. With the latest version is can be compiled and run.
Update the Emscripten version we use on CI to 2.0.9. This is also the version that we'd be building packages with for the next release. Note that the version is pinned and will need to be updated later, we won't be tracking the latest tag for a while, until we're sure that WasmThemis works fine with Emscripten 2.0.
There are no changes to WasmThemis API, it's behind the scenes.
What needs to be changed for Emscripten 2.0
Disable stack protector for Emscript builds
As noted in emscripten-core/emscripten#9780, the upstream flavor of Emscripten does not yet support LLVM's stack protector so have it disabled. Otherwise linker will produce errors about missing symbols, because they're not there. Some day it may be implemented though so I leave a FIXME in the code.
Use new allocate() API of Emscripten
Themis Core uses the allocate() function provided by Emscripten runtime for quick on-stack allocations. This is a semi-private function which has unstable API. With the new Emscripten version its API has changed, now it accepts a ""slab"" parameter which indicates the size of the stack that needs to be allocated—for the entire function. That is, if we allocate memory on stack, allocate() may be called only once.
Stop using deprecated RESERVED_FUNCTION_POINTERS
RESERVED_FUNCTION_POINTERS does not have much effect on the upstream flavor but it was important for the fastcomp flavor. Now that since Emscripten 2.0.1 the fastcomp flavor is not supported anymore, this option has been a synonym for ALLOW_TABLE_GROWTH. Use the new option instead directly then.
Work around issues with dead code elimination
For some reason wasm-ld likes to strip all (each and every) function of Themis Core from the resulting *.wasm file. While they are there in the object files and archives, linker's dead code elimination thinks they are not needed in the WebAssembly code.
Normally this is prevented by EMSCRIPTEN_KEEPALIVE attribute—which we still have and it's still defined—but for some reason it does not work.
As a temporary workaround, pass the LINKABLE option to the linker which disables dead code elimination and other link-time optimizations. This leads to somewhat bigger WebAssembly file which may be a bit slower, but at least this prevents issues.
It might be some transient issue with a toolchain so there is a FIXME in the code. We'd need to keep an eye on it for some future releases. However, I have not found any similar issues in Emscripten tracker.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","For quite some time Themis has been pinning Emscripten to an outdated version of the fastcomp flavor because recent versions have been broken, and the new upstream flavor has been broken as well.
However, Emscripten 2.0+ does not support the fastcomp flavor anymore so there is no hope for an fix. Eventually we'd have to migrate to the upstream flavor.
I have tried out the latest Emscripten 2.0.9 upstream and it seems to be working—after some further tweaks. There are no signs of the issues that were observed before and prevented Themis Core from being compiled. With the latest version is can be compiled and run.
Update the Emscripten version we use on CI to 2.0.9. This is also the version that we'd be building packages with for the next release. Note that the version is pinned and will need to be updated later, we won't be tracking the latest tag for a while, until we're sure that WasmThemis works fine with Emscripten 2.0.
There are no changes to WasmThemis API, it's behind the scenes.
What needs to be changed for Emscripten 2.0
Disable stack protector for Emscript builds
As noted in emscripten-core/emscripten#9780, the upstream flavor of Emscripten does not yet support LLVM's stack protector so have it disabled. Otherwise linker will produce errors about missing symbols, because they're not there. Some day it may be implemented though so I leave a FIXME in the code.
Use new allocate() API of Emscripten
Themis Core uses the allocate() function provided by Emscripten runtime for quick on-stack allocations. This is a semi-private function which has unstable API. With the new Emscripten version its API has changed, now it accepts a ""slab"" parameter which indicates the size of the stack that needs to be allocated—for the entire function. That is, if we allocate memory on stack, allocate() may be called only once.
Stop using deprecated RESERVED_FUNCTION_POINTERS
RESERVED_FUNCTION_POINTERS does not have much effect on the upstream flavor but it was important for the fastcomp flavor. Now that since Emscripten 2.0.1 the fastcomp flavor is not supported anymore, this option has been a synonym for ALLOW_TABLE_GROWTH. Use the new option instead directly then.
Work around issues with dead code elimination
For some reason wasm-ld likes to strip all (each and every) function of Themis Core from the resulting *.wasm file. While they are there in the object files and archives, linker's dead code elimination thinks they are not needed in the WebAssembly code.
Normally this is prevented by EMSCRIPTEN_KEEPALIVE attribute—which we still have and it's still defined—but for some reason it does not work.
As a temporary workaround, pass the LINKABLE option to the linker which disables dead code elimination and other link-time optimizations. This leads to somewhat bigger WebAssembly file which may be a bit slower, but at least this prevents issues.
It might be some transient issue with a toolchain so there is a FIXME in the code. We'd need to keep an eye on it for some future releases. However, I have not found any similar issues in Emscripten tracker.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,760,2020-11-29T11:16:25Z,2020-12-01T02:37:55Z,2020-12-01T02:38:01Z,MERGED,True,46,43,12,https://github.com/ilammy,Update Emscripten to 2.0.9 upstream,6,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/760,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/760#issuecomment-735377220,"For quite some time Themis has been pinning Emscripten to an outdated version of the fastcomp flavor because recent versions have been broken, and the new upstream flavor has been broken as well.
However, Emscripten 2.0+ does not support the fastcomp flavor anymore so there is no hope for an fix. Eventually we'd have to migrate to the upstream flavor.
I have tried out the latest Emscripten 2.0.9 upstream and it seems to be working—after some further tweaks. There are no signs of the issues that were observed before and prevented Themis Core from being compiled. With the latest version is can be compiled and run.
Update the Emscripten version we use on CI to 2.0.9. This is also the version that we'd be building packages with for the next release. Note that the version is pinned and will need to be updated later, we won't be tracking the latest tag for a while, until we're sure that WasmThemis works fine with Emscripten 2.0.
There are no changes to WasmThemis API, it's behind the scenes.
What needs to be changed for Emscripten 2.0
Disable stack protector for Emscript builds
As noted in emscripten-core/emscripten#9780, the upstream flavor of Emscripten does not yet support LLVM's stack protector so have it disabled. Otherwise linker will produce errors about missing symbols, because they're not there. Some day it may be implemented though so I leave a FIXME in the code.
Use new allocate() API of Emscripten
Themis Core uses the allocate() function provided by Emscripten runtime for quick on-stack allocations. This is a semi-private function which has unstable API. With the new Emscripten version its API has changed, now it accepts a ""slab"" parameter which indicates the size of the stack that needs to be allocated—for the entire function. That is, if we allocate memory on stack, allocate() may be called only once.
Stop using deprecated RESERVED_FUNCTION_POINTERS
RESERVED_FUNCTION_POINTERS does not have much effect on the upstream flavor but it was important for the fastcomp flavor. Now that since Emscripten 2.0.1 the fastcomp flavor is not supported anymore, this option has been a synonym for ALLOW_TABLE_GROWTH. Use the new option instead directly then.
Work around issues with dead code elimination
For some reason wasm-ld likes to strip all (each and every) function of Themis Core from the resulting *.wasm file. While they are there in the object files and archives, linker's dead code elimination thinks they are not needed in the WebAssembly code.
Normally this is prevented by EMSCRIPTEN_KEEPALIVE attribute—which we still have and it's still defined—but for some reason it does not work.
As a temporary workaround, pass the LINKABLE option to the linker which disables dead code elimination and other link-time optimizations. This leads to somewhat bigger WebAssembly file which may be a bit slower, but at least this prevents issues.
It might be some transient issue with a toolchain so there is a FIXME in the code. We'd need to keep an eye on it for some future releases. However, I have not found any similar issues in Emscripten tracker.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","@vixentael, there are some issues in internal tracker related to this upgrade. I guess then could be closed once this lands into master.
@shadinua, please make sure that Build Bot uses the updated Emscripten toolchain for the next release. The new code does not work with the old Emscripten version, unfortunately.",True,{'THUMBS_UP': ['https://github.com/shadinua']}
cossacklabs/themis,https://github.com/cossacklabs/themis,760,2020-11-29T11:16:25Z,2020-12-01T02:37:55Z,2020-12-01T02:38:01Z,MERGED,True,46,43,12,https://github.com/ilammy,Update Emscripten to 2.0.9 upstream,6,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/760,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/760#issuecomment-735420554,"For quite some time Themis has been pinning Emscripten to an outdated version of the fastcomp flavor because recent versions have been broken, and the new upstream flavor has been broken as well.
However, Emscripten 2.0+ does not support the fastcomp flavor anymore so there is no hope for an fix. Eventually we'd have to migrate to the upstream flavor.
I have tried out the latest Emscripten 2.0.9 upstream and it seems to be working—after some further tweaks. There are no signs of the issues that were observed before and prevented Themis Core from being compiled. With the latest version is can be compiled and run.
Update the Emscripten version we use on CI to 2.0.9. This is also the version that we'd be building packages with for the next release. Note that the version is pinned and will need to be updated later, we won't be tracking the latest tag for a while, until we're sure that WasmThemis works fine with Emscripten 2.0.
There are no changes to WasmThemis API, it's behind the scenes.
What needs to be changed for Emscripten 2.0
Disable stack protector for Emscript builds
As noted in emscripten-core/emscripten#9780, the upstream flavor of Emscripten does not yet support LLVM's stack protector so have it disabled. Otherwise linker will produce errors about missing symbols, because they're not there. Some day it may be implemented though so I leave a FIXME in the code.
Use new allocate() API of Emscripten
Themis Core uses the allocate() function provided by Emscripten runtime for quick on-stack allocations. This is a semi-private function which has unstable API. With the new Emscripten version its API has changed, now it accepts a ""slab"" parameter which indicates the size of the stack that needs to be allocated—for the entire function. That is, if we allocate memory on stack, allocate() may be called only once.
Stop using deprecated RESERVED_FUNCTION_POINTERS
RESERVED_FUNCTION_POINTERS does not have much effect on the upstream flavor but it was important for the fastcomp flavor. Now that since Emscripten 2.0.1 the fastcomp flavor is not supported anymore, this option has been a synonym for ALLOW_TABLE_GROWTH. Use the new option instead directly then.
Work around issues with dead code elimination
For some reason wasm-ld likes to strip all (each and every) function of Themis Core from the resulting *.wasm file. While they are there in the object files and archives, linker's dead code elimination thinks they are not needed in the WebAssembly code.
Normally this is prevented by EMSCRIPTEN_KEEPALIVE attribute—which we still have and it's still defined—but for some reason it does not work.
As a temporary workaround, pass the LINKABLE option to the linker which disables dead code elimination and other link-time optimizations. This leads to somewhat bigger WebAssembly file which may be a bit slower, but at least this prevents issues.
It might be some transient issue with a toolchain so there is a FIXME in the code. We'd need to keep an eye on it for some future releases. However, I have not found any similar issues in Emscripten tracker.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","@ilammy shall we try to hotfix WASM package with these new changes?
It gives no direct value to users, but will allow us to test release flow with the new Emscripten, while our brains are here.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,760,2020-11-29T11:16:25Z,2020-12-01T02:37:55Z,2020-12-01T02:38:01Z,MERGED,True,46,43,12,https://github.com/ilammy,Update Emscripten to 2.0.9 upstream,6,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/760,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/760#issuecomment-735471834,"For quite some time Themis has been pinning Emscripten to an outdated version of the fastcomp flavor because recent versions have been broken, and the new upstream flavor has been broken as well.
However, Emscripten 2.0+ does not support the fastcomp flavor anymore so there is no hope for an fix. Eventually we'd have to migrate to the upstream flavor.
I have tried out the latest Emscripten 2.0.9 upstream and it seems to be working—after some further tweaks. There are no signs of the issues that were observed before and prevented Themis Core from being compiled. With the latest version is can be compiled and run.
Update the Emscripten version we use on CI to 2.0.9. This is also the version that we'd be building packages with for the next release. Note that the version is pinned and will need to be updated later, we won't be tracking the latest tag for a while, until we're sure that WasmThemis works fine with Emscripten 2.0.
There are no changes to WasmThemis API, it's behind the scenes.
What needs to be changed for Emscripten 2.0
Disable stack protector for Emscript builds
As noted in emscripten-core/emscripten#9780, the upstream flavor of Emscripten does not yet support LLVM's stack protector so have it disabled. Otherwise linker will produce errors about missing symbols, because they're not there. Some day it may be implemented though so I leave a FIXME in the code.
Use new allocate() API of Emscripten
Themis Core uses the allocate() function provided by Emscripten runtime for quick on-stack allocations. This is a semi-private function which has unstable API. With the new Emscripten version its API has changed, now it accepts a ""slab"" parameter which indicates the size of the stack that needs to be allocated—for the entire function. That is, if we allocate memory on stack, allocate() may be called only once.
Stop using deprecated RESERVED_FUNCTION_POINTERS
RESERVED_FUNCTION_POINTERS does not have much effect on the upstream flavor but it was important for the fastcomp flavor. Now that since Emscripten 2.0.1 the fastcomp flavor is not supported anymore, this option has been a synonym for ALLOW_TABLE_GROWTH. Use the new option instead directly then.
Work around issues with dead code elimination
For some reason wasm-ld likes to strip all (each and every) function of Themis Core from the resulting *.wasm file. While they are there in the object files and archives, linker's dead code elimination thinks they are not needed in the WebAssembly code.
Normally this is prevented by EMSCRIPTEN_KEEPALIVE attribute—which we still have and it's still defined—but for some reason it does not work.
As a temporary workaround, pass the LINKABLE option to the linker which disables dead code elimination and other link-time optimizations. This leads to somewhat bigger WebAssembly file which may be a bit slower, but at least this prevents issues.
It might be some transient issue with a toolchain so there is a FIXME in the code. We'd need to keep an eye on it for some future releases. However, I have not found any similar issues in Emscripten tracker.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","@ilammy shall we try to hotfix WASM package with these new changes?
Nah... I don't think it warrants an immediate release. I mean, it's been like that for over a half a year so it can wait a bit more. This is not a security update so there is no rush to push it out. And if anything, I'd like a major update of a dependency to be included in a major update of the library, not some random patch release.

I all we want to test is Build Bot automation to ensure that it can build proper binaries, I believe there would be a way to test the build only, without publishing anything. At worst, just try with the same package version and get rejected by npm at publishing stage.",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,760,2020-11-29T11:16:25Z,2020-12-01T02:37:55Z,2020-12-01T02:38:01Z,MERGED,True,46,43,12,https://github.com/ilammy,Update Emscripten to 2.0.9 upstream,6,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/760,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/760#issuecomment-736058209,"For quite some time Themis has been pinning Emscripten to an outdated version of the fastcomp flavor because recent versions have been broken, and the new upstream flavor has been broken as well.
However, Emscripten 2.0+ does not support the fastcomp flavor anymore so there is no hope for an fix. Eventually we'd have to migrate to the upstream flavor.
I have tried out the latest Emscripten 2.0.9 upstream and it seems to be working—after some further tweaks. There are no signs of the issues that were observed before and prevented Themis Core from being compiled. With the latest version is can be compiled and run.
Update the Emscripten version we use on CI to 2.0.9. This is also the version that we'd be building packages with for the next release. Note that the version is pinned and will need to be updated later, we won't be tracking the latest tag for a while, until we're sure that WasmThemis works fine with Emscripten 2.0.
There are no changes to WasmThemis API, it's behind the scenes.
What needs to be changed for Emscripten 2.0
Disable stack protector for Emscript builds
As noted in emscripten-core/emscripten#9780, the upstream flavor of Emscripten does not yet support LLVM's stack protector so have it disabled. Otherwise linker will produce errors about missing symbols, because they're not there. Some day it may be implemented though so I leave a FIXME in the code.
Use new allocate() API of Emscripten
Themis Core uses the allocate() function provided by Emscripten runtime for quick on-stack allocations. This is a semi-private function which has unstable API. With the new Emscripten version its API has changed, now it accepts a ""slab"" parameter which indicates the size of the stack that needs to be allocated—for the entire function. That is, if we allocate memory on stack, allocate() may be called only once.
Stop using deprecated RESERVED_FUNCTION_POINTERS
RESERVED_FUNCTION_POINTERS does not have much effect on the upstream flavor but it was important for the fastcomp flavor. Now that since Emscripten 2.0.1 the fastcomp flavor is not supported anymore, this option has been a synonym for ALLOW_TABLE_GROWTH. Use the new option instead directly then.
Work around issues with dead code elimination
For some reason wasm-ld likes to strip all (each and every) function of Themis Core from the resulting *.wasm file. While they are there in the object files and archives, linker's dead code elimination thinks they are not needed in the WebAssembly code.
Normally this is prevented by EMSCRIPTEN_KEEPALIVE attribute—which we still have and it's still defined—but for some reason it does not work.
As a temporary workaround, pass the LINKABLE option to the linker which disables dead code elimination and other link-time optimizations. This leads to somewhat bigger WebAssembly file which may be a bit slower, but at least this prevents issues.
It might be some transient issue with a toolchain so there is a FIXME in the code. We'd need to keep an eye on it for some future releases. However, I have not found any similar issues in Emscripten tracker.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",Merge 'em all!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,761,2020-12-11T09:20:24Z,2020-12-11T11:07:11Z,2021-01-24T07:22:10Z,MERGED,True,2,2,1,https://github.com/ilammy,Update code style checking job to Ubuntu 20.04,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/761,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/761,"One of the GitHub Actions jobs is using a pristine Ubuntu container because whatever is provided by GitHub Actions runners causes conflicts when some of the packages are installed. That container has been using Ubuntu 19.10.
Ubuntu 19.10 ""Eoan Ermine"" has reached end of life on 2020-07-17. Normally EOL only means that the distribution stops receiving updates after that date. However, eventually it gets purged from the mainline repositories as well. This is exactly what has happened recently, and since then the builds are all red because they are not able to install packages for a missing distribution.
Upgrade to Ubuntu 20.04 LTS ""Focal Focca"". This should last us at least until 2030 or something. Or well, until GitHub becomes more attentive to whatever stuff they put in their sources.list.
Checklist

 Change is covered by automated tests
 Changelog is updated (don't think we need this, the packages are all the same)","One of the GitHub Actions jobs is using a pristine Ubuntu container because whatever is provided by GitHub Actions runners causes conflicts when some of the packages are installed. That container has been using Ubuntu 19.10.
Ubuntu 19.10 ""Eoan Ermine"" has reached end of life on 2020-07-17. Normally EOL only means that the distribution stops receiving updates after that date. However, eventually it gets purged from the mainline repositories as well. This is exactly what has happened recently, and since then the builds are all red because they are not able to install packages for a missing distribution.
Upgrade to Ubuntu 20.04 LTS ""Focal Focca"". This should last us at least until 2030 or something. Or well, until GitHub becomes more attentive to whatever stuff they put in their sources.list.
Checklist

 Change is covered by automated tests
 Changelog is updated (don't think we need this, the packages are all the same)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,762,2021-01-24T06:55:54Z,2021-01-28T13:17:11Z,2021-01-28T13:17:15Z,MERGED,True,701,0,15,https://github.com/ilammy,Fuzzing Secure Message,3,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/762,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/762,"Okay... it's time to bury this old branch of mine properly. As you might have guessed from the author's date on this commit and boilerplate comments, this changeset is quite old.

Here are some fuzzers for Secure Message cryptosystem. They follow the general patterns established by Secure Cell but take into account specifics:

two modes: encryption and signature verification
two key types: EC and RSA

Encryption is fuzzed by trying to encrypt and then decrypt a short test message, letting AFL mess with the keys and input, looking for crashes caused by most likely by invalid keys or subtle data dependency (Secure Message should not depend on plaintext content, but in case it does...)
Decryption is fuzzed by decrypting a message encrypted by the reference implementation which is then mutated by AFL, looking for crashes that can be caused by message corruption.
Test data has been generated by attached generation tools. AFL does not need too much data to work, so that's just message as a payload with some random keys.
I have been exercising those tests on my Linux box for quite a while, and CI will also be running each of those for 30 seconds as a part of the ""fuzzing"" job. That should catch some low-hanging fruits, if they ever appear.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Okay... it's time to bury this old branch of mine properly. As you might have guessed from the author's date on this commit and boilerplate comments, this changeset is quite old.

Here are some fuzzers for Secure Message cryptosystem. They follow the general patterns established by Secure Cell but take into account specifics:

two modes: encryption and signature verification
two key types: EC and RSA

Encryption is fuzzed by trying to encrypt and then decrypt a short test message, letting AFL mess with the keys and input, looking for crashes caused by most likely by invalid keys or subtle data dependency (Secure Message should not depend on plaintext content, but in case it does...)
Decryption is fuzzed by decrypting a message encrypted by the reference implementation which is then mutated by AFL, looking for crashes that can be caused by message corruption.
Test data has been generated by attached generation tools. AFL does not need too much data to work, so that's just message as a payload with some random keys.
I have been exercising those tests on my Linux box for quite a while, and CI will also be running each of those for 30 seconds as a part of the ""fuzzing"" job. That should catch some low-hanging fruits, if they ever appear.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,762,2021-01-24T06:55:54Z,2021-01-28T13:17:11Z,2021-01-28T13:17:15Z,MERGED,True,701,0,15,https://github.com/ilammy,Fuzzing Secure Message,3,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/762,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/762#issuecomment-766302992,"Okay... it's time to bury this old branch of mine properly. As you might have guessed from the author's date on this commit and boilerplate comments, this changeset is quite old.

Here are some fuzzers for Secure Message cryptosystem. They follow the general patterns established by Secure Cell but take into account specifics:

two modes: encryption and signature verification
two key types: EC and RSA

Encryption is fuzzed by trying to encrypt and then decrypt a short test message, letting AFL mess with the keys and input, looking for crashes caused by most likely by invalid keys or subtle data dependency (Secure Message should not depend on plaintext content, but in case it does...)
Decryption is fuzzed by decrypting a message encrypted by the reference implementation which is then mutated by AFL, looking for crashes that can be caused by message corruption.
Test data has been generated by attached generation tools. AFL does not need too much data to work, so that's just message as a payload with some random keys.
I have been exercising those tests on my Linux box for quite a while, and CI will also be running each of those for 30 seconds as a part of the ""fuzzing"" job. That should catch some low-hanging fruits, if they ever appear.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",This changeset is expected to fail the AFL fuzzing job until the fixes from #763 are merged.,True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,762,2021-01-24T06:55:54Z,2021-01-28T13:17:11Z,2021-01-28T13:17:15Z,MERGED,True,701,0,15,https://github.com/ilammy,Fuzzing Secure Message,3,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/762,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/762#issuecomment-768996060,"Okay... it's time to bury this old branch of mine properly. As you might have guessed from the author's date on this commit and boilerplate comments, this changeset is quite old.

Here are some fuzzers for Secure Message cryptosystem. They follow the general patterns established by Secure Cell but take into account specifics:

two modes: encryption and signature verification
two key types: EC and RSA

Encryption is fuzzed by trying to encrypt and then decrypt a short test message, letting AFL mess with the keys and input, looking for crashes caused by most likely by invalid keys or subtle data dependency (Secure Message should not depend on plaintext content, but in case it does...)
Decryption is fuzzed by decrypting a message encrypted by the reference implementation which is then mutated by AFL, looking for crashes that can be caused by message corruption.
Test data has been generated by attached generation tools. AFL does not need too much data to work, so that's just message as a payload with some random keys.
I have been exercising those tests on my Linux box for quite a while, and CI will also be running each of those for 30 seconds as a part of the ""fuzzing"" job. That should catch some low-hanging fruits, if they ever appear.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Now that miscellaneous build insanity has been fixed on master and #763 with fixes landed there as well, the build with new fuzzers should go green.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,763,2021-01-24T07:03:14Z,2021-01-28T11:35:45Z,2021-01-28T11:36:04Z,MERGED,True,57,15,4,https://github.com/ilammy,Fix buffer and integer overflows in Secure Message,14,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/763,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/763,"Fix or work around issues in Secure Message implementation found by fuzzers from #762.
The details of the changes are documented in commit messages. I won't repeat them in the cover letter since they are too technical and too tied to the changes themselves. Have fun with review!
Turns out that fuzzing is actually useful for cryptography code written in C, who would have guessed? Well, most of those issues could have been avoided in a more safe language, but Themis Core is written in C for a reason. A different code style could have also reduced the probability of those issues, but we have what we have.
The changes here are not a rewrite, or refactoring, or anything. This is a quickly hacked patch to fix some glaring issues and make the build with fuzzers green. Though, it would not hurt to get to that at some point in the future, I believe.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Fix or work around issues in Secure Message implementation found by fuzzers from #762.
The details of the changes are documented in commit messages. I won't repeat them in the cover letter since they are too technical and too tied to the changes themselves. Have fun with review!
Turns out that fuzzing is actually useful for cryptography code written in C, who would have guessed? Well, most of those issues could have been avoided in a more safe language, but Themis Core is written in C for a reason. A different code style could have also reduced the probability of those issues, but we have what we have.
The changes here are not a rewrite, or refactoring, or anything. This is a quickly hacked patch to fix some glaring issues and make the build with fuzzers green. Though, it would not hurt to get to that at some point in the future, I believe.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,763,2021-01-24T07:03:14Z,2021-01-28T11:35:45Z,2021-01-28T11:36:04Z,MERGED,True,57,15,4,https://github.com/ilammy,Fix buffer and integer overflows in Secure Message,14,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/763,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/763#issuecomment-767517570,"Fix or work around issues in Secure Message implementation found by fuzzers from #762.
The details of the changes are documented in commit messages. I won't repeat them in the cover letter since they are too technical and too tied to the changes themselves. Have fun with review!
Turns out that fuzzing is actually useful for cryptography code written in C, who would have guessed? Well, most of those issues could have been avoided in a more safe language, but Themis Core is written in C for a reason. A different code style could have also reduced the probability of those issues, but we have what we have.
The changes here are not a rewrite, or refactoring, or anything. This is a quickly hacked patch to fix some glaring issues and make the build with fuzzers green. Though, it would not hurt to get to that at some point in the future, I believe.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","all these added/changed checks definitely won't make it worse

“Consider the prospect that you have been misled, Alice”.
Those conditions are a fertile soil for more bugs of a different kind to be introduced. And changesets like this which fix old code that worked fine are a great way to sneak in a backdoor (accidentally or intentionally), but adding a condition which prevents some buffer overflow—along with a real safety check from being performed. So do your due diligence.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,763,2021-01-24T07:03:14Z,2021-01-28T11:35:45Z,2021-01-28T11:36:04Z,MERGED,True,57,15,4,https://github.com/ilammy,Fix buffer and integer overflows in Secure Message,14,"['bug', 'core']",https://github.com/cossacklabs/themis/pull/763,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/763#issuecomment-768993683,"Fix or work around issues in Secure Message implementation found by fuzzers from #762.
The details of the changes are documented in commit messages. I won't repeat them in the cover letter since they are too technical and too tied to the changes themselves. Have fun with review!
Turns out that fuzzing is actually useful for cryptography code written in C, who would have guessed? Well, most of those issues could have been avoided in a more safe language, but Themis Core is written in C for a reason. A different code style could have also reduced the probability of those issues, but we have what we have.
The changes here are not a rewrite, or refactoring, or anything. This is a quickly hacked patch to fix some glaring issues and make the build with fuzzers green. Though, it would not hurt to get to that at some point in the future, I believe.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",🟢 GREEN IS FOR GO,True,{'HEART': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,764,2021-01-25T11:34:22Z,2021-01-26T12:37:31Z,2021-02-01T12:17:38Z,MERGED,True,2,2,2,https://github.com/ilammy,Unbreak Criterion's HTML reports,1,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/764,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/764,"Our benchmarking harness has decided that it's time for some INNOVATION and for starters released a version which has disabled generation of HTML reports by default, changed their location from current directory to the proper shared target directory, and strongly suggests migrating away from running benchmarks with cargo bench in favor of their own cargo criterion.
At least they have a changelog. It does not yet contain an entry for 0.3.4 released about 15 hours ago, but that's something.
Well, okay, that's a fine rabbit to chase later, but for now let's at least unbreak our build by adapting to the new reality.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be)","Our benchmarking harness has decided that it's time for some INNOVATION and for starters released a version which has disabled generation of HTML reports by default, changed their location from current directory to the proper shared target directory, and strongly suggests migrating away from running benchmarks with cargo bench in favor of their own cargo criterion.
At least they have a changelog. It does not yet contain an entry for 0.3.4 released about 15 hours ago, but that's something.
Well, okay, that's a fine rabbit to chase later, but for now let's at least unbreak our build by adapting to the new reality.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,764,2021-01-25T11:34:22Z,2021-01-26T12:37:31Z,2021-02-01T12:17:38Z,MERGED,True,2,2,2,https://github.com/ilammy,Unbreak Criterion's HTML reports,1,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/764,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/764#issuecomment-767246674,"Our benchmarking harness has decided that it's time for some INNOVATION and for starters released a version which has disabled generation of HTML reports by default, changed their location from current directory to the proper shared target directory, and strongly suggests migrating away from running benchmarks with cargo bench in favor of their own cargo criterion.
At least they have a changelog. It does not yet contain an entry for 0.3.4 released about 15 hours ago, but that's something.
Well, okay, that's a fine rabbit to chase later, but for now let's at least unbreak our build by adapting to the new reality.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be)","@Lagovas,

looks like has no backdoors

Oh, you've read the entire code of criterion 0.3.4 and its 18 direct dependencies? That's amazing! 🤣",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,764,2021-01-25T11:34:22Z,2021-01-26T12:37:31Z,2021-02-01T12:17:38Z,MERGED,True,2,2,2,https://github.com/ilammy,Unbreak Criterion's HTML reports,1,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/764,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/764#issuecomment-767247597,"Our benchmarking harness has decided that it's time for some INNOVATION and for starters released a version which has disabled generation of HTML reports by default, changed their location from current directory to the proper shared target directory, and strongly suggests migrating away from running benchmarks with cargo bench in favor of their own cargo criterion.
At least they have a changelog. It does not yet contain an entry for 0.3.4 released about 15 hours ago, but that's something.
Well, okay, that's a fine rabbit to chase later, but for now let's at least unbreak our build by adapting to the new reality.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be)","@iamnotacake,

So, for now we use cargo_bench_support feature to be able to run old command

Yeah, that's the plan. It is supposed to be working with 0.3.x branch, but I guess they might break it in 0.4. Cargo will prevent that upgrade for happening accidentally, but I guess it's a good idea to migrate to cargo criterion soon™ (which in practice probably means “when the build breaks next time, but this time irreversibly”).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,764,2021-01-25T11:34:22Z,2021-01-26T12:37:31Z,2021-02-01T12:17:38Z,MERGED,True,2,2,2,https://github.com/ilammy,Unbreak Criterion's HTML reports,1,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/764,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/764#issuecomment-770480285,"Our benchmarking harness has decided that it's time for some INNOVATION and for starters released a version which has disabled generation of HTML reports by default, changed their location from current directory to the proper shared target directory, and strongly suggests migrating away from running benchmarks with cargo bench in favor of their own cargo criterion.
At least they have a changelog. It does not yet contain an entry for 0.3.4 released about 15 hours ago, but that's something.
Well, okay, that's a fine rabbit to chase later, but for now let's at least unbreak our build by adapting to the new reality.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be)","Could this PR be a reason why tests are failing during nightly jobs? @ilammy
Looks like it can't find a folder to create report.
https://app.circleci.com/pipelines/github/cossacklabs/themis/995/workflows/007bce5b-d029-4f13-b0d8-d9ce9228e5e3/jobs/17700",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,764,2021-01-25T11:34:22Z,2021-01-26T12:37:31Z,2021-02-01T12:17:38Z,MERGED,True,2,2,2,https://github.com/ilammy,Unbreak Criterion's HTML reports,1,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/764,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/764#issuecomment-770790386,"Our benchmarking harness has decided that it's time for some INNOVATION and for starters released a version which has disabled generation of HTML reports by default, changed their location from current directory to the proper shared target directory, and strongly suggests migrating away from running benchmarks with cargo bench in favor of their own cargo criterion.
At least they have a changelog. It does not yet contain an entry for 0.3.4 released about 15 hours ago, but that's something.
Well, okay, that's a fine rabbit to chase later, but for now let's at least unbreak our build by adapting to the new reality.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be)","Mmm... Maybe. Likely.
CircleCI should be active only on stable. And on stable this patch is not present, hence it's still broken. I guess it could be cherry-picked there, and adapted to CircleCI, just to unbreak it.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,764,2021-01-25T11:34:22Z,2021-01-26T12:37:31Z,2021-02-01T12:17:38Z,MERGED,True,2,2,2,https://github.com/ilammy,Unbreak Criterion's HTML reports,1,"['core', 'infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/764,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/764#issuecomment-770813508,"Our benchmarking harness has decided that it's time for some INNOVATION and for starters released a version which has disabled generation of HTML reports by default, changed their location from current directory to the proper shared target directory, and strongly suggests migrating away from running benchmarks with cargo bench in favor of their own cargo criterion.
At least they have a changelog. It does not yet contain an entry for 0.3.4 released about 15 hours ago, but that's something.
Well, okay, that's a fine rabbit to chase later, but for now let's at least unbreak our build by adapting to the new reality.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be)","Also, now that you have brought this to my attention...
GitHub Actions are not executed on schedule for the stable branch. No nightly builds there.
There are workflows there, sure, with all this
  schedule:
    - cron: '0 6 * * *' # every day at 6:00 UTC
but it's not getting executed on stable with this configuration, only master.
That's because:

on.schedule
Scheduled workflows run on the latest commit on the default or base branch.
https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule

Quickly skimming through the internet reveals that we should not need this feature, we’re weird for wanting it, and we should probably start by purchasing Azure subscription before we can demand that to be fixed.
I wonder what may be a workaround. Ideally, one that does not involve duplicating all the workflows with different branch checked out. And one that still runs tests for changes in PRs.
Ideas? @iamnotacake?
I admit that I was too hasty to drop CircleCI orz",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,765,2021-01-26T13:09:21Z,2021-01-26T13:42:55Z,2021-01-26T13:42:59Z,MERGED,True,26,32,1,https://github.com/ilammy,Run examples only with Python 3,2,"['W-PyThemis :snake:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/765,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/765,"pip has dropped support for Python 2 some time ago – a version of Python that has been EOL for about a year now. Themis does not support Python 2 officially, yet we're still test with it as long as it's practical.
Well, it stopped being practical for this CI job because Ubuntu has removed python-pip package from their repos. Remove all lines which install Python 2 testing environment.
For quite some time we have been running this job only with Python 3. Now that Python 2 environment installation has been removed, it no longer makes sense to pretend that we'll enable it back. Just run everything with python3.
Damn you, CI. Can there be a week where nothing breaks? Gotta keep running to say in one place, it seems.
Checklist

 Change is covered by automated tests","pip has dropped support for Python 2 some time ago – a version of Python that has been EOL for about a year now. Themis does not support Python 2 officially, yet we're still test with it as long as it's practical.
Well, it stopped being practical for this CI job because Ubuntu has removed python-pip package from their repos. Remove all lines which install Python 2 testing environment.
For quite some time we have been running this job only with Python 3. Now that Python 2 environment installation has been removed, it no longer makes sense to pretend that we'll enable it back. Just run everything with python3.
Damn you, CI. Can there be a week where nothing breaks? Gotta keep running to say in one place, it seems.
Checklist

 Change is covered by automated tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,766,2021-01-27T12:04:49Z,2021-01-28T11:02:14Z,2021-01-28T11:02:20Z,MERGED,True,15,2,3,https://github.com/ilammy,"Migrate to ""afl++"" from ""afl""",2,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/766,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/766,"The original afl has been abandoned and is not maintained since 2017. afl++ is its successor. Since it's a fork, it has mostly compatible command line, and more features.
The original afl is currently being phased out from distributions. In particular, it's gone from whatever repo list GitHub Actions use, breaking our build. Migrate to afl++ instead.
Not all operating systems ship with afl++ though. For example, it's still not available in binary form on macOS via Homebrew. Therefore, don't jump the gun and don't update the Makefile to use afl++-only features. (However, it would be nice to use them if available.)

The timing could not have been better! GitHub Actions broke the build again... I guess it's the “upgrade January” for them.
I'm tired of this so this is the last PR that I submit or merge this week. If it's red then it's red.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)","The original afl has been abandoned and is not maintained since 2017. afl++ is its successor. Since it's a fork, it has mostly compatible command line, and more features.
The original afl is currently being phased out from distributions. In particular, it's gone from whatever repo list GitHub Actions use, breaking our build. Migrate to afl++ instead.
Not all operating systems ship with afl++ though. For example, it's still not available in binary form on macOS via Homebrew. Therefore, don't jump the gun and don't update the Makefile to use afl++-only features. (However, it would be nice to use them if available.)

The timing could not have been better! GitHub Actions broke the build again... I guess it's the “upgrade January” for them.
I'm tired of this so this is the last PR that I submit or merge this week. If it's red then it's red.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,766,2021-01-27T12:04:49Z,2021-01-28T11:02:14Z,2021-01-28T11:02:20Z,MERGED,True,15,2,3,https://github.com/ilammy,"Migrate to ""afl++"" from ""afl""",2,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/766,https://github.com/iamnotacake,2,https://github.com/cossacklabs/themis/pull/766#issuecomment-768260887,"The original afl has been abandoned and is not maintained since 2017. afl++ is its successor. Since it's a fork, it has mostly compatible command line, and more features.
The original afl is currently being phased out from distributions. In particular, it's gone from whatever repo list GitHub Actions use, breaking our build. Migrate to afl++ instead.
Not all operating systems ship with afl++ though. For example, it's still not available in binary form on macOS via Homebrew. Therefore, don't jump the gun and don't update the Makefile to use afl++-only features. (However, it would be nice to use them if available.)

The timing could not have been better! GitHub Actions broke the build again... I guess it's the “upgrade January” for them.
I'm tired of this so this is the last PR that I submit or merge this week. If it's red then it's red.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)","If it's red then it's red.

Well, you were not wrong. Unfortunately. Though it has nothing to do with your changes, which are good IMO.
Processing triggers for libc-bin (2.31-0ubuntu9.1) ...
E: Could not configure 'libc6:i386'. 
E: Could not perform immediate configuration on 'libgcc-s1:i386'. Please see man 5 apt.conf under APT::Immediate-Configure for details. (2)
Error: Process completed with exit code 100.

Problems with non-interactive 32-bit libc installation on Ubuntu 20.04? 🤔",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,766,2021-01-27T12:04:49Z,2021-01-28T11:02:14Z,2021-01-28T11:02:20Z,MERGED,True,15,2,3,https://github.com/ilammy,"Migrate to ""afl++"" from ""afl""",2,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/766,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/766#issuecomment-768276832,"The original afl has been abandoned and is not maintained since 2017. afl++ is its successor. Since it's a fork, it has mostly compatible command line, and more features.
The original afl is currently being phased out from distributions. In particular, it's gone from whatever repo list GitHub Actions use, breaking our build. Migrate to afl++ instead.
Not all operating systems ship with afl++ though. For example, it's still not available in binary form on macOS via Homebrew. Therefore, don't jump the gun and don't update the Makefile to use afl++-only features. (However, it would be nice to use them if available.)

The timing could not have been better! GitHub Actions broke the build again... I guess it's the “upgrade January” for them.
I'm tired of this so this is the last PR that I submit or merge this week. If it's red then it's red.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)","Oh well... It worked in my fork before I created a PR.
IDK, just let's wait until GitHub Actions get their act together and try rerunning the build tomorrow, or later.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,766,2021-01-27T12:04:49Z,2021-01-28T11:02:14Z,2021-01-28T11:02:20Z,MERGED,True,15,2,3,https://github.com/ilammy,"Migrate to ""afl++"" from ""afl""",2,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/766,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/766#issuecomment-768284240,"The original afl has been abandoned and is not maintained since 2017. afl++ is its successor. Since it's a fork, it has mostly compatible command line, and more features.
The original afl is currently being phased out from distributions. In particular, it's gone from whatever repo list GitHub Actions use, breaking our build. Migrate to afl++ instead.
Not all operating systems ship with afl++ though. For example, it's still not available in binary form on macOS via Homebrew. Therefore, don't jump the gun and don't update the Makefile to use afl++-only features. (However, it would be nice to use them if available.)

The timing could not have been better! GitHub Actions broke the build again... I guess it's the “upgrade January” for them.
I'm tired of this so this is the last PR that I submit or merge this week. If it's red then it's red.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)","I restarted GHA, but it's still failing with the same error.
Let's wait tomorrow indeed ¯_(ツ)_/¯",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,766,2021-01-27T12:04:49Z,2021-01-28T11:02:14Z,2021-01-28T11:02:20Z,MERGED,True,15,2,3,https://github.com/ilammy,"Migrate to ""afl++"" from ""afl""",2,"['core', 'infrastructure']",https://github.com/cossacklabs/themis/pull/766,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/766#issuecomment-768937208,"The original afl has been abandoned and is not maintained since 2017. afl++ is its successor. Since it's a fork, it has mostly compatible command line, and more features.
The original afl is currently being phased out from distributions. In particular, it's gone from whatever repo list GitHub Actions use, breaking our build. Migrate to afl++ instead.
Not all operating systems ship with afl++ though. For example, it's still not available in binary form on macOS via Homebrew. Therefore, don't jump the gun and don't update the Makefile to use afl++-only features. (However, it would be nice to use them if available.)

The timing could not have been better! GitHub Actions broke the build again... I guess it's the “upgrade January” for them.
I'm tired of this so this is the last PR that I submit or merge this week. If it's red then it's red.
Checklist

 Change is covered by automated tests
 Changelog is updated (in case of notable or breaking changes)","It worked in my fork before I created a PR.

Fun fact: ubuntu-latest means 18.04 image in my fork and 20.04 here in the main repo.
Docs say that ubuntu-latest should be 18.04, with 20.04 being provided as a preview.
It works with 18.04 and does not work with 20.04.
Move fast, break things ¯\_(ツ)_/¯",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,767,2021-01-30T01:14:42Z,2021-02-01T11:36:43Z,2021-02-01T11:36:51Z,MERGED,True,181,0,1,https://github.com/ilammy,Test Secure Message signature length weirdness,1,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/767,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/767,"As noted in the comment, Secure Message has a peculiar behavior in signature mode when EC keys are used: the length of the generated signature varies slightly: it can be either 70, 71, or 72 bytes (with the current curve), depending on how lucky you are.
Add a test which verifies that the output of Secure Message stays withing those bounds. Note that it does not verify variability of the signature length: we could fix the implementation to always produce padded signatures of maximum length and the test will pass. However, it will break when we decide to upgrade our curve choice and this will bring someone's attention to the comment within.
Also, add another test to ensure that Themis can verify messages with 70-byte signatures in them, either in their truncated or padded form.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation","As noted in the comment, Secure Message has a peculiar behavior in signature mode when EC keys are used: the length of the generated signature varies slightly: it can be either 70, 71, or 72 bytes (with the current curve), depending on how lucky you are.
Add a test which verifies that the output of Secure Message stays withing those bounds. Note that it does not verify variability of the signature length: we could fix the implementation to always produce padded signatures of maximum length and the test will pass. However, it will break when we decide to upgrade our curve choice and this will bring someone's attention to the comment within.
Also, add another test to ensure that Themis can verify messages with 70-byte signatures in them, either in their truncated or padded form.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,768,2021-01-30T05:03:00Z,2021-02-03T13:36:32Z,2021-02-03T13:36:37Z,MERGED,True,117,93,29,https://github.com/ilammy,Update misc. links and READMEs,26,"['docs :books:', 'W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'W-SwiftThemis :large_orange_diamond:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/768,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/768,"Update links to documentation server in Rust docs
Themis wiki on GitHub has been deprecated. Let's point users to the proper, up-to-date documentation
(starting with the next release, that is).


Update links in RustThemis README as well


Quickstart => Getting started
Because we have moved away from that wording in the documentation.


Capitalize as “RustThemis” without a dash
Because that's how it's spelled in the documentation.


Replace CircleCI badge with GitHub Actions
CI has migrated to GitHub, let's update the badge to something actually indicative.","Update links to documentation server in Rust docs
Themis wiki on GitHub has been deprecated. Let's point users to the proper, up-to-date documentation
(starting with the next release, that is).


Update links in RustThemis README as well


Quickstart => Getting started
Because we have moved away from that wording in the documentation.


Capitalize as “RustThemis” without a dash
Because that's how it's spelled in the documentation.


Replace CircleCI badge with GitHub Actions
CI has migrated to GitHub, let's update the badge to something actually indicative.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,768,2021-01-30T05:03:00Z,2021-02-03T13:36:32Z,2021-02-03T13:36:37Z,MERGED,True,117,93,29,https://github.com/ilammy,Update misc. links and READMEs,26,"['docs :books:', 'W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'W-SwiftThemis :large_orange_diamond:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/768,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/768#issuecomment-770165701,"Update links to documentation server in Rust docs
Themis wiki on GitHub has been deprecated. Let's point users to the proper, up-to-date documentation
(starting with the next release, that is).


Update links in RustThemis README as well


Quickstart => Getting started
Because we have moved away from that wording in the documentation.


Capitalize as “RustThemis” without a dash
Because that's how it's spelled in the documentation.


Replace CircleCI badge with GitHub Actions
CI has migrated to GitHub, let's update the badge to something actually indicative.","Actually, when I looked around, there were quite a few outdated documentation server links, outdated instructions, etc. I've updated most of them.
There are quite a few links left in the changelog, but I'm too lazy for that. Old versions – old links. No way anybody will actually click them, right?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,768,2021-01-30T05:03:00Z,2021-02-03T13:36:32Z,2021-02-03T13:36:37Z,MERGED,True,117,93,29,https://github.com/ilammy,Update misc. links and READMEs,26,"['docs :books:', 'W-PHPThemis :elephant:', 'W-PyThemis :snake:', 'W-RbThemis :diamonds:', 'W-GoThemis :hamster:', 'W-JavaThemis :coffee:', 'W-ThemisPP :crossed_swords:', 'W-SwiftThemis :large_orange_diamond:', 'W-RustThemis :crab:', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/768,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/768#issuecomment-770817734,"Update links to documentation server in Rust docs
Themis wiki on GitHub has been deprecated. Let's point users to the proper, up-to-date documentation
(starting with the next release, that is).


Update links in RustThemis README as well


Quickstart => Getting started
Because we have moved away from that wording in the documentation.


Capitalize as “RustThemis” without a dash
Because that's how it's spelled in the documentation.


Replace CircleCI badge with GitHub Actions
CI has migrated to GitHub, let's update the badge to something actually indicative.","Oh wow, look what has failed:

Unit tests (with sanitizers)

Check with Clang (TSan)



== Entering suite #4, ""secure message: compatibility"" ==

[4:1]  secure_message_overlong_ecdsa_signature:#1  ""uses private key of expected length""  pass
[4:2]  secure_message_overlong_ecdsa_signature:#2  ""produces message with expected actual length""  FAIL
!    Type:      fail-unless
!    Condition: condition
!    File:      tests/themis/themis_seccure_message.c
!    Line:      1649

That's a new test from #767, failing this condition:
    testsuite_fail_unless((187 <= signed_message_length_actual) && (signed_message_length_actual <= 189),
                          ""produces message with expected actual length"");",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,769,2021-02-01T11:56:57Z,2021-02-02T16:50:29Z,2021-02-02T16:50:36Z,MERGED,True,4,4,3,https://github.com/ilammy,Unbreak Criterion's HTML reports,1,"['infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/769,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/769,"Backport #764 onto stable to unbreak nightly builds that run there.
Also added the same path update for CircleCI which is still running for the stable branch.
Checklist

 Change is covered by automated tests","Backport #764 onto stable to unbreak nightly builds that run there.
Also added the same path update for CircleCI which is still running for the stable branch.
Checklist

 Change is covered by automated tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,769,2021-02-01T11:56:57Z,2021-02-02T16:50:29Z,2021-02-02T16:50:36Z,MERGED,True,4,4,3,https://github.com/ilammy,Unbreak Criterion's HTML reports,1,"['infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/769,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/769#issuecomment-770865108,"Backport #764 onto stable to unbreak nightly builds that run there.
Also added the same path update for CircleCI which is still running for the stable branch.
Checklist

 Change is covered by automated tests",Makes sense 🤔,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,769,2021-02-01T11:56:57Z,2021-02-02T16:50:29Z,2021-02-02T16:50:36Z,MERGED,True,4,4,3,https://github.com/ilammy,Unbreak Criterion's HTML reports,1,"['infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/769,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/769#issuecomment-771780418,"Backport #764 onto stable to unbreak nightly builds that run there.
Also added the same path update for CircleCI which is still running for the stable branch.
Checklist

 Change is covered by automated tests",AFL job is still broken. It requires another backport which I'll do in a separate PR.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,770,2021-02-02T16:58:45Z,2021-02-03T13:35:08Z,2021-02-03T13:35:13Z,MERGED,True,14,2,2,https://github.com/ilammy,"Migrate to ""afl++"" from ""afl""",2,"['infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/770,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/770,"Following #769, backport #766 onto stable too to fix the build.
Ignore changes in CHANGELOG.md, there is no ""Unreleased"" section on the stable branch. It will get here in due time.
Checklist

 Change is covered by automated tests
Oh why yes, it is covered.","Following #769, backport #766 onto stable too to fix the build.
Ignore changes in CHANGELOG.md, there is no ""Unreleased"" section on the stable branch. It will get here in due time.
Checklist

 Change is covered by automated tests
Oh why yes, it is covered.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,770,2021-02-02T16:58:45Z,2021-02-03T13:35:08Z,2021-02-03T13:35:13Z,MERGED,True,14,2,2,https://github.com/ilammy,"Migrate to ""afl++"" from ""afl""",2,"['infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/770,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/770#issuecomment-771794981,"Following #769, backport #766 onto stable too to fix the build.
Ignore changes in CHANGELOG.md, there is no ""Unreleased"" section on the stable branch. It will get here in due time.
Checklist

 Change is covered by automated tests
Oh why yes, it is covered.","Oh well, it seems even more stuff needs to be backported as the jobs are failing. Since this PR touches some Themis Core files, it should trigger all the jobs and expose whatever is currently broken for stable CI.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,770,2021-02-02T16:58:45Z,2021-02-03T13:35:08Z,2021-02-03T13:35:13Z,MERGED,True,14,2,2,https://github.com/ilammy,"Migrate to ""afl++"" from ""afl""",2,"['infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/770,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/770#issuecomment-772172785,"Following #769, backport #766 onto stable too to fix the build.
Ignore changes in CHANGELOG.md, there is no ""Unreleased"" section on the stable branch. It will get here in due time.
Checklist

 Change is covered by automated tests
Oh why yes, it is covered.","I've submitted fixes to the issues above. These are separate pull requests so that history clearly shows what has been cherry-picked from where (instead of one squashed commit ""fix stuff by integrating all these changes"").
Once those three are all merged and this one is added on top, I'd expect stable build to go green at last.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,771,2021-02-03T02:26:38Z,2021-02-03T11:27:07Z,2021-02-03T11:27:12Z,MERGED,True,26,32,1,https://github.com/ilammy,Run examples only with Python 3,1,"['W-PyThemis :snake:', 'infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/771,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/771,"Backport #765 onto stable to fix the build, as discovered in #770.
Checklist

 Change is covered by automated tests","Backport #765 onto stable to fix the build, as discovered in #770.
Checklist

 Change is covered by automated tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,772,2021-02-03T02:28:49Z,2021-02-03T11:27:22Z,2021-02-03T11:27:25Z,MERGED,True,1,1,1,https://github.com/ilammy,Use new trait order in generated code,1,"['infrastructure', 'W-RustThemis :crab:', 'backport']",https://github.com/cossacklabs/themis/pull/772,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/772,"Backport #758 onto stable to fix the build, as discovered in #770.
Checklist

 Change is covered by automated tests","Backport #758 onto stable to fix the build, as discovered in #770.
Checklist

 Change is covered by automated tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,773,2021-02-03T02:32:49Z,2021-02-03T11:27:39Z,2021-02-03T11:27:42Z,MERGED,True,2,2,1,https://github.com/ilammy,Update code style checking job to Ubuntu 20.04,1,"['infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/773,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/773,"Backport #761 onto stable to fix the build, as discovered in #770.
Checklist

 Change is covered by automated tests","Backport #761 onto stable to fix the build, as discovered in #770.
Checklist

 Change is covered by automated tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,773,2021-02-03T02:32:49Z,2021-02-03T11:27:39Z,2021-02-03T11:27:42Z,MERGED,True,2,2,1,https://github.com/ilammy,Update code style checking job to Ubuntu 20.04,1,"['infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/773,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/773#issuecomment-772421711,"Backport #761 onto stable to fix the build, as discovered in #770.
Checklist

 Change is covered by automated tests","Interesting failure seen by CircleCI:
[12:12]  secure_comparator_api_test:#12  ""secure_comparator_append_secret failed""  FAIL
!    Type:      fail-if
!    Condition: condition
!    File:      tests/themis/themis_secure_comparator.c
!    Line:      222

--> 12 check(s), 11 ok, 1 failed (8.33%)

Not the first time I see it, but it's pretty rare.
I've restarted the CI run.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,774,2021-02-06T01:14:02Z,2021-02-08T11:32:26Z,2021-02-08T11:32:30Z,MERGED,True,11,4,1,https://github.com/ilammy,Test Secure Message weirdness correctly,1,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/774,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/774,"Previously added test for Secure Message signature length – #767 – is not entirely correct. With my limited testing capabilities I have observed signatures of lengths 70..72 bytes, but in fact the range is 8..72. CI runners sometimes generate signatures shorter than 70 bytes, breaking the test which does not expect that. Update the test to correct range.
The reason for 8..72 range is that Secure Message uses OpenSSL to compute and serialize ECDSA signatures. With NIST P-256 curves currently used by Themis, the signature consists of 2 integers of 1..256 bits long. OpenSSL serializes signatures as DER representation of the following ASN.1 object:
SEQUENCE { INTEGER, INTEGER }

Each INTEGER content requires 1..33 bytes (32 bytes to fit 256 bits max, plus 1 extra possible byte of padding because INTEGER is a signed value). On top of that, each INTEGER has a 2-byte header as well as 2 more bytes of the SEQUENCE header. Hence the signature length bounds are
2 + 2 * (2 + (1..(32 + 1))) = 8..72 bytes

Enjoy your stay at Themis!
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation","Previously added test for Secure Message signature length – #767 – is not entirely correct. With my limited testing capabilities I have observed signatures of lengths 70..72 bytes, but in fact the range is 8..72. CI runners sometimes generate signatures shorter than 70 bytes, breaking the test which does not expect that. Update the test to correct range.
The reason for 8..72 range is that Secure Message uses OpenSSL to compute and serialize ECDSA signatures. With NIST P-256 curves currently used by Themis, the signature consists of 2 integers of 1..256 bits long. OpenSSL serializes signatures as DER representation of the following ASN.1 object:
SEQUENCE { INTEGER, INTEGER }

Each INTEGER content requires 1..33 bytes (32 bytes to fit 256 bits max, plus 1 extra possible byte of padding because INTEGER is a signed value). On top of that, each INTEGER has a 2-byte header as well as 2 more bytes of the SEQUENCE header. Hence the signature length bounds are
2 + 2 * (2 + (1..(32 + 1))) = 8..72 bytes

Enjoy your stay at Themis!
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,775,2021-02-07T04:42:47Z,2021-02-11T03:02:29Z,2021-02-11T03:02:35Z,MERGED,True,181,7,5,https://github.com/ilammy,Optimize Secure Message signature length,5,"['W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/775,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/775,"GoThemis ignores actual Secure Message signature length returned by Themis, and instead returns the originally allocated buffer as is, which might contain some extra unused bytes at the end.
While not fatal—Themis should still recognize both padded and unpadded signatures—this behavior differs from other Themis wrappers.
Fix the issue in Secure Message processing which results in overlong signatures. Also, add tests to GoThemis specifically to check that both overlong and proper messages are accepted.

This might be considered a breaking change for “smart” users who relied on Secure Message signatures having a particular length, and for them to have a fixed length in GoThemis. Shame on them. I am not aware of sane use cases that involve this assumption. If you are one of those, pad Secure Message signature to len(message) + 84, and pray that Themis never changes the ageing P-256 elliptic curve to something different.

Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be negligible)
 The coding guidelines are followed
 Changelog is updated","GoThemis ignores actual Secure Message signature length returned by Themis, and instead returns the originally allocated buffer as is, which might contain some extra unused bytes at the end.
While not fatal—Themis should still recognize both padded and unpadded signatures—this behavior differs from other Themis wrappers.
Fix the issue in Secure Message processing which results in overlong signatures. Also, add tests to GoThemis specifically to check that both overlong and proper messages are accepted.

This might be considered a breaking change for “smart” users who relied on Secure Message signatures having a particular length, and for them to have a fixed length in GoThemis. Shame on them. I am not aware of sane use cases that involve this assumption. If you are one of those, pad Secure Message signature to len(message) + 84, and pray that Themis never changes the ageing P-256 elliptic curve to something different.

Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be negligible)
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,775,2021-02-07T04:42:47Z,2021-02-11T03:02:29Z,2021-02-11T03:02:35Z,MERGED,True,181,7,5,https://github.com/ilammy,Optimize Secure Message signature length,5,"['W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/775,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/775#issuecomment-774640909,"GoThemis ignores actual Secure Message signature length returned by Themis, and instead returns the originally allocated buffer as is, which might contain some extra unused bytes at the end.
While not fatal—Themis should still recognize both padded and unpadded signatures—this behavior differs from other Themis wrappers.
Fix the issue in Secure Message processing which results in overlong signatures. Also, add tests to GoThemis specifically to check that both overlong and proper messages are accepted.

This might be considered a breaking change for “smart” users who relied on Secure Message signatures having a particular length, and for them to have a fixed length in GoThemis. Shame on them. I am not aware of sane use cases that involve this assumption. If you are one of those, pad Secure Message signature to len(message) + 84, and pray that Themis never changes the ageing P-256 elliptic curve to something different.

Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be negligible)
 The coding guidelines are followed
 Changelog is updated","Added the same fix and test to ThemisPP.
The test data could look prettier, but we have to support C++03 and clang-fmt holds a strong opinion on how you should write your code with giant arrays.
Based on my review, JavaThemis is also affected by the same “bug” with signature lengths. I guess it wouldn't hurt to add tests there as well. However, the fix is not that straightforward as here, because you can't resize arrays in JVM, hence it would not be O(1), like for Go and C++.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,775,2021-02-07T04:42:47Z,2021-02-11T03:02:29Z,2021-02-11T03:02:35Z,MERGED,True,181,7,5,https://github.com/ilammy,Optimize Secure Message signature length,5,"['W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/775,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/775#issuecomment-774642279,"GoThemis ignores actual Secure Message signature length returned by Themis, and instead returns the originally allocated buffer as is, which might contain some extra unused bytes at the end.
While not fatal—Themis should still recognize both padded and unpadded signatures—this behavior differs from other Themis wrappers.
Fix the issue in Secure Message processing which results in overlong signatures. Also, add tests to GoThemis specifically to check that both overlong and proper messages are accepted.

This might be considered a breaking change for “smart” users who relied on Secure Message signatures having a particular length, and for them to have a fixed length in GoThemis. Shame on them. I am not aware of sane use cases that involve this assumption. If you are one of those, pad Secure Message signature to len(message) + 84, and pray that Themis never changes the ageing P-256 elliptic curve to something different.

Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be negligible)
 The coding guidelines are followed
 Changelog is updated","(Also, there are other cryptosystems where GoThemis, ThemisPP, JavaThemis don't respect actual buffer lengths returned on the second call. I wonder if those should be fixed. At all, that is, not in this PR. This PR is about Secure Message specifically as it's a known quirk. But I don't know if the same thing has funny effects on, say, Secure Session protocol.)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,775,2021-02-07T04:42:47Z,2021-02-11T03:02:29Z,2021-02-11T03:02:35Z,MERGED,True,181,7,5,https://github.com/ilammy,Optimize Secure Message signature length,5,"['W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/775,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/775#issuecomment-774773969,"GoThemis ignores actual Secure Message signature length returned by Themis, and instead returns the originally allocated buffer as is, which might contain some extra unused bytes at the end.
While not fatal—Themis should still recognize both padded and unpadded signatures—this behavior differs from other Themis wrappers.
Fix the issue in Secure Message processing which results in overlong signatures. Also, add tests to GoThemis specifically to check that both overlong and proper messages are accepted.

This might be considered a breaking change for “smart” users who relied on Secure Message signatures having a particular length, and for them to have a fixed length in GoThemis. Shame on them. I am not aware of sane use cases that involve this assumption. If you are one of those, pad Secure Message signature to len(message) + 84, and pray that Themis never changes the ageing P-256 elliptic curve to something different.

Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be negligible)
 The coding guidelines are followed
 Changelog is updated","if the same thing has funny effects on, say, Secure Session protocol

well..

All checks have passed
11 successful checks

let's hope it doesn't :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,775,2021-02-07T04:42:47Z,2021-02-11T03:02:29Z,2021-02-11T03:02:35Z,MERGED,True,181,7,5,https://github.com/ilammy,Optimize Secure Message signature length,5,"['W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/775,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/775#issuecomment-774841123,"GoThemis ignores actual Secure Message signature length returned by Themis, and instead returns the originally allocated buffer as is, which might contain some extra unused bytes at the end.
While not fatal—Themis should still recognize both padded and unpadded signatures—this behavior differs from other Themis wrappers.
Fix the issue in Secure Message processing which results in overlong signatures. Also, add tests to GoThemis specifically to check that both overlong and proper messages are accepted.

This might be considered a breaking change for “smart” users who relied on Secure Message signatures having a particular length, and for them to have a fixed length in GoThemis. Shame on them. I am not aware of sane use cases that involve this assumption. If you are one of those, pad Secure Message signature to len(message) + 84, and pray that Themis never changes the ageing P-256 elliptic curve to something different.

Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be negligible)
 The coding guidelines are followed
 Changelog is updated","@vixentael,


if the same thing has funny effects on, say, Secure Session protocol

well..

All checks have passed
11 successful checks

let's hope it doesn't :)

I did not mean right now – of course it works right now, just like Secure Message worked, for a certain definition thereof.
I meant more like, what if this causes some subtle incompatibilities between platforms because of this. I don't really remember any integration tests for Secure Session, for example, which ensure that Secure Session in Python can talk to Secure Session in Go (or hard mode: the same thing but Themis versions are also different).
But knowing all the answers wouldn't be fun, right?

I remember (found in the internal issue tracker), that @Lagovas has similar idea before.

Yeah, I remember something like that. Though, I also remember some wariness to make this change as it might break something Acra because Acra does depend on Themis implementation details in some cases. Though, as I view it, AcraStructs should not be affected by this specifically because they are using Secure Message in encryption mode, not for signatures, and they do include lengths. But again, I don't really remember what that ticket was all about so please take care to double-check that this is not a breaking change.",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,775,2021-02-07T04:42:47Z,2021-02-11T03:02:29Z,2021-02-11T03:02:35Z,MERGED,True,181,7,5,https://github.com/ilammy,Optimize Secure Message signature length,5,"['W-GoThemis :hamster:', 'W-ThemisPP :crossed_swords:']",https://github.com/cossacklabs/themis/pull/775,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/775#issuecomment-775097254,"GoThemis ignores actual Secure Message signature length returned by Themis, and instead returns the originally allocated buffer as is, which might contain some extra unused bytes at the end.
While not fatal—Themis should still recognize both padded and unpadded signatures—this behavior differs from other Themis wrappers.
Fix the issue in Secure Message processing which results in overlong signatures. Also, add tests to GoThemis specifically to check that both overlong and proper messages are accepted.

This might be considered a breaking change for “smart” users who relied on Secure Message signatures having a particular length, and for them to have a fixed length in GoThemis. Shame on them. I am not aware of sane use cases that involve this assumption. If you are one of those, pad Secure Message signature to len(message) + 84, and pray that Themis never changes the ageing P-256 elliptic curve to something different.

Checklist

 Change is covered by automated tests
 Benchmark results are attached (should be negligible)
 The coding guidelines are followed
 Changelog is updated","Proposed changes to JavaThemis look like this: ilammy@c40ebb9

Allocate a temporary buffer in native code first, pass that to Themis (instead of allocating a Java array and passing a reference to its bytes)
After Themis is done and successful, allocate a Java array and copy results there
Use GetPrimitiveArrayCritical and ReleasePrimitiveArrayCritical to hint JVM that we'll be quick

This is a bit of a pessimization in a happy case: JVM does no copies and Themis is able to write its output directly into heap memory. With the fix JNI code has to allocate a buffer on native heap first, then allocate JVM array of the correct size and copy data there. Not quite a fairyland that it was before.
It should not be a massive performance hit, but it's definitely a hit.
Moreover, strictly speaking, the code should behave like that everywhere, not only in Secure Message. Currently all other cryptosystems in Java ignore the length returned by the second call to Themis function. It's just that for them the initial assessment is accurate so we don't end up with a couple of extra bytes at the end.",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,777,2021-02-11T04:50:19Z,2021-02-13T05:14:08Z,2021-02-13T05:14:12Z,MERGED,True,168,15,3,https://github.com/ilammy,Optimize Secure Message length,4,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/777,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/777,"Following #775, make the same changes to JavaThemis to slightly reduce the length of Secure Message signatures. At a cost, though.
JavaThemis has the same issue as GoThemis and ThemisPP had: it disregards the real size of Secure Message output as reported by the second call to themis_secure_message_...() functions. The first call will only report an upper bound to the output length, not the actual length—which is only know after processing.
Unfortunately, JVM arrays cannot be resized after they are allocated and JavaThemis API returns plain arrays. Hence, in order for the array to have correct size, we need to buffer Themis output in the native code before allocating a JVM array.
This has a side effect of adding more allocations to the happy path: previously, if you were lucky, Themis Core could write directly into JVM heap and no copying or reallocation would have taken place. Now JNI code always allocates a temporary buffer and makes a copy of it.
(Another minor side effect is that in case of a failure JNI code no longer allocates a JVM array beforehand, slightly relieving the GC pressure.)
Checklist

 Change is covered by automated tests
 Benchmark results are attached

Strictly speaking, this gotta be benchmarked, but I'm too lazy for that now. It's not like any decision will be made based on those results, they would be more for curiosity. JavaThemis has no benchmarking harness whatsoever and making one takes time. Do we need it that much?


 The coding guidelines are followed
 Changelog is updated","Following #775, make the same changes to JavaThemis to slightly reduce the length of Secure Message signatures. At a cost, though.
JavaThemis has the same issue as GoThemis and ThemisPP had: it disregards the real size of Secure Message output as reported by the second call to themis_secure_message_...() functions. The first call will only report an upper bound to the output length, not the actual length—which is only know after processing.
Unfortunately, JVM arrays cannot be resized after they are allocated and JavaThemis API returns plain arrays. Hence, in order for the array to have correct size, we need to buffer Themis output in the native code before allocating a JVM array.
This has a side effect of adding more allocations to the happy path: previously, if you were lucky, Themis Core could write directly into JVM heap and no copying or reallocation would have taken place. Now JNI code always allocates a temporary buffer and makes a copy of it.
(Another minor side effect is that in case of a failure JNI code no longer allocates a JVM array beforehand, slightly relieving the GC pressure.)
Checklist

 Change is covered by automated tests
 Benchmark results are attached

Strictly speaking, this gotta be benchmarked, but I'm too lazy for that now. It's not like any decision will be made based on those results, they would be more for curiosity. JavaThemis has no benchmarking harness whatsoever and making one takes time. Do we need it that much?


 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,780,2021-02-20T02:31:00Z,2021-02-21T01:19:50Z,2021-02-21T09:36:49Z,MERGED,True,4,4,2,https://github.com/ilammy,Update Emscripten 2.0.9 => 2.0.13,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/780,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/780,"There were some reports on the mailing list about HEAP* variables being broken in 2.0.10. Thankfully, the issue does not seem to reproduce (for anyone other than the reporter).
Some potentially interesting changes brought by the update:

An upstream LLVM regression with global initializer linking has been fixed.
Stop overriding CMake default flags based on build type.

Full release notes:
https://emscripten.org/docs/introducing_emscripten/release_notes.html
Nothing interesting, actually. Something interesting will be in the next release: more optimizations. For now, it's just a sanity check, making sure we're still compatible with the latest Emscripten toolchain.
Pinging @shadinua to ensure that internal publishing pipelines will use Emscripten 2.0.13 too.
Checklist

 Change is covered by automated tests","There were some reports on the mailing list about HEAP* variables being broken in 2.0.10. Thankfully, the issue does not seem to reproduce (for anyone other than the reporter).
Some potentially interesting changes brought by the update:

An upstream LLVM regression with global initializer linking has been fixed.
Stop overriding CMake default flags based on build type.

Full release notes:
https://emscripten.org/docs/introducing_emscripten/release_notes.html
Nothing interesting, actually. Something interesting will be in the next release: more optimizations. For now, it's just a sanity check, making sure we're still compatible with the latest Emscripten toolchain.
Pinging @shadinua to ensure that internal publishing pipelines will use Emscripten 2.0.13 too.
Checklist

 Change is covered by automated tests",True,{'HEART': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,780,2021-02-20T02:31:00Z,2021-02-21T01:19:50Z,2021-02-21T09:36:49Z,MERGED,True,4,4,2,https://github.com/ilammy,Update Emscripten 2.0.9 => 2.0.13,1,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/780,https://github.com/maxammann,2,https://github.com/cossacklabs/themis/pull/780#issuecomment-782827662,"There were some reports on the mailing list about HEAP* variables being broken in 2.0.10. Thankfully, the issue does not seem to reproduce (for anyone other than the reporter).
Some potentially interesting changes brought by the update:

An upstream LLVM regression with global initializer linking has been fixed.
Stop overriding CMake default flags based on build type.

Full release notes:
https://emscripten.org/docs/introducing_emscripten/release_notes.html
Nothing interesting, actually. Something interesting will be in the next release: more optimizations. For now, it's just a sanity check, making sure we're still compatible with the latest Emscripten toolchain.
Pinging @shadinua to ensure that internal publishing pipelines will use Emscripten 2.0.13 too.
Checklist

 Change is covered by automated tests",@vixentael happy coincidence indeed :D Tried to compile it with fastcomp but failed. Then I went out to find the CI code which clearly documents the new toolchain :D,True,{'LAUGH': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,781,2021-02-20T14:51:12Z,2021-02-23T20:58:19Z,2021-02-23T20:58:19Z,MERGED,True,1,1,1,https://github.com/maxammann,Decrease limit for KDF execution time in test,2,"['tests', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/781,https://github.com/maxammann,1,https://github.com/cossacklabs/themis/pull/781,"Executing emmake make test_wasm failed for me locally with emsdk 2.0.13.
This PR should be more  a small discussion whether this test really makes sense if it is platform dependant.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Executing emmake make test_wasm failed for me locally with emsdk 2.0.13.
This PR should be more  a small discussion whether this test really makes sense if it is platform dependant.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,781,2021-02-20T14:51:12Z,2021-02-23T20:58:19Z,2021-02-23T20:58:19Z,MERGED,True,1,1,1,https://github.com/maxammann,Decrease limit for KDF execution time in test,2,"['tests', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/781,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/781#issuecomment-782779093,"Executing emmake make test_wasm failed for me locally with emsdk 2.0.13.
This PR should be more  a small discussion whether this test really makes sense if it is platform dependant.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Hm...
No other platform seems to do timing tests on KDF usage. But indeed it is platform-dependent. I don't really remember hard motivation for adding this test specifically. I'm not against removing it altogether if it causes issues. Flaking tests is one of the worst kind of tests.
My vote is to drop the test altogether, with the next preference to merge this PR if removing the test is unacceptable.

One of reasons I can envision for a test like this is to serve as an indicator for when the KDF iteration count should be increased. Now that I've got to git blame, here's what it says:

Also, ensure that passphrase API is slow enough, just in case it gets swapped with master key API, or some technical progress will make WebAssembly to run really fast.

So... uh... technical progress seems to have happened.
Taking benchmarks on CI is arguably a methodologically wrong approach. CI runners have unstable performance so any absolute numbers that you derive by executing stuff there are mostly moot. If anything, this benchmark should probably ensure that KDF is slower than non-KDF by a factor of N, or something. A relative benchmark like this will be more robust.
But again. The test does not seem to serve a useful purpose. Themis does not have a policy on bumping KDF iteration count so I don't really know what we're measuring here. For now, the iteration count is managed on arbitrary basis. And if we're updating this parameter basically whenever we feel like it, then I guess we shouldn't be lying to ourselves by trying to make it look like a scientific decision with this test.
If we are going to be serious about it, we should have proper benchmarks for Wasm runtime, and base the decision to bump KDF iteration count on that. There are benchmarks for native code. I guess they could be compiled to Wasm with some elbow grease. However, it's certainly out of scope for this PR, along with defining the policy about KDF parameters.

P.S.

can you describe your laptop?

Sure, it's silvery and rectangular.
Also, I call preconceived notions and desktop user bias on you! /s",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,781,2021-02-20T14:51:12Z,2021-02-23T20:58:19Z,2021-02-23T20:58:19Z,MERGED,True,1,1,1,https://github.com/maxammann,Decrease limit for KDF execution time in test,2,"['tests', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/781,https://github.com/maxammann,3,https://github.com/cossacklabs/themis/pull/781#issuecomment-782827469,"Executing emmake make test_wasm failed for me locally with emsdk 2.0.13.
This PR should be more  a small discussion whether this test really makes sense if it is platform dependant.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Flaking tests is one of the worst kind of tests.

Thats why I made the effort to open this issue :) Sharing your view!

But out of curiosity — can you describe your laptop?

Just a not-so-old ThinkPad T490 clocking up to 4.6GHz. So it is faster than a CI should be.

If we are going to be serious about it, we should have proper benchmarks for Wasm runtime, and base the decision to bump KDF iteration count on that. There are benchmarks for native code. I guess they could be compiled to Wasm with some elbow grease. However, it's certainly out of scope for this PR, along with defining the policy about KDF parameters.

I agree that this is the wrong place for timing tests. Also tests which involve timing generally should not exist. Is there already infrastructure for benchmarking? I think benchmarking should be integrated in the whole develop-test-release cycle if it should have a meaningful impact.

My vote is to drop the test altogether, with the next preference to merge this PR if removing the test is unacceptable.

If we do not have a replacement for measuring KDF duration when I would say we keep this test to have a reminder in the future that we need some replacement. If we remove it we will not have the possibility to use git blame on a failing test ;)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,781,2021-02-20T14:51:12Z,2021-02-23T20:58:19Z,2021-02-23T20:58:19Z,MERGED,True,1,1,1,https://github.com/maxammann,Decrease limit for KDF execution time in test,2,"['tests', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/781,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/781#issuecomment-782831131,"Executing emmake make test_wasm failed for me locally with emsdk 2.0.13.
This PR should be more  a small discussion whether this test really makes sense if it is platform dependant.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Is there already infrastructure for benchmarking?

There are some tools for benchmarking Themis Core code in benches/themis but it's rather incomplete and has its own issues.

Benchmarks do not cover high-level wrappers at all.

Wrappers are thought to add some constant overhead on FFI. Hence, “not interesting”.
However, no idea how much overhead that is and how it compares to time spent on doing parsing, crypto, etc.

Which might be significant. I don't remember the numbers that @Lagovas shown for GoThemis, but doing FFI was maybe an order of magnitude slower that doing the same stuff in Go natively. Who knows how expensive FFI calls are elsewhere.




Benchmarks do not cover all cryptosystems.

Basically, only Secure Cell in Seal mode now.
Though, it does cover KDF vs. non-KDF variants – which was the main interest then.


Benchmark harness uses Rust.

I did not feel like reinventing the wheel with statistics when doing microbenchmarks.
Pro: nice reports and nice stats for free.
Con: not having a slightest idea of how to actually port and run that on, say, WebAssembly, Android and iPhones. Those platforms also use Themis Core code and it would be interesting to see some benchmarks there.


Benchmark harness did not have much love poured into it after initial development.

So it exists but not in a form that can be immediately used for WebAssembly. My current mental model is

Uh...
Use wasm-pack maybe?
...
BENCHMARKS

Not something that one can immediately act upon :)
And then there are various ways that you can run WebAssembly: Node, WASM, WASI...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,781,2021-02-20T14:51:12Z,2021-02-23T20:58:19Z,2021-02-23T20:58:19Z,MERGED,True,1,1,1,https://github.com/maxammann,Decrease limit for KDF execution time in test,2,"['tests', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/781,https://github.com/Lagovas,5,https://github.com/cossacklabs/themis/pull/781#issuecomment-783841096,"Executing emmake make test_wasm failed for me locally with emsdk 2.0.13.
This PR should be more  a small discussion whether this test really makes sense if it is platform dependant.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",We should not remove testing that KDF slow enough because it's expected behavior. But we can parameterize our tests and allow to override values for different test environments. We can use values from env variable/config + default value (for our environment + backward compatibility).,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,781,2021-02-20T14:51:12Z,2021-02-23T20:58:19Z,2021-02-23T20:58:19Z,MERGED,True,1,1,1,https://github.com/maxammann,Decrease limit for KDF execution time in test,2,"['tests', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/781,https://github.com/maxammann,6,https://github.com/cossacklabs/themis/pull/781#issuecomment-783992217,"Executing emmake make test_wasm failed for me locally with emsdk 2.0.13.
This PR should be more  a small discussion whether this test really makes sense if it is platform dependant.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","We should not remove testing that KDF slow enough because it's expected behavior. But we can parameterize our tests and allow to override values for different test environments. We can use values from env variable/config + default value (for our environment + backward compatibility).

The problem is, that is is quite impossible to choose a value as this is hardware dependent. Timing in tests is always a bad idea. I just randomly halved the value of 200ms to get the test working.
We can use a test runner for benchmarking though. Like if you run npm run test then all tests except the timing one is run.
npm run benchmark would run that timing test. If that fails it is not a programming issue. Test can verify software. But the software is still correct if the KDF rounds are too low.
What do you think to split the current tests into 2 test suits?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,781,2021-02-20T14:51:12Z,2021-02-23T20:58:19Z,2021-02-23T20:58:19Z,MERGED,True,1,1,1,https://github.com/maxammann,Decrease limit for KDF execution time in test,2,"['tests', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/781,https://github.com/vixentael,7,https://github.com/cossacklabs/themis/pull/781#issuecomment-784202480,"Executing emmake make test_wasm failed for me locally with emsdk 2.0.13.
This PR should be more  a small discussion whether this test really makes sense if it is platform dependant.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","But the software is still correct if the KDF rounds are too low.

correct but insecure :)
I agree with @Lagovas , I think we should parametrize this test and use default value for tests on CI while preserving ability to override default for testing in other environments.
When this test will start failing everywhere, we should think about increasing KDF rounds count across Themis. Right now we use PBKDF2 with 200'000 rounds while NIST recommends 10'000 .. 100'000. For some tests (like fuzzing) we decreased number of rounds to 10.
Also, a note: right now we discuss this test under assumption that it takes a little time because of KDF rounds count, while the real reason might be different.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,781,2021-02-20T14:51:12Z,2021-02-23T20:58:19Z,2021-02-23T20:58:19Z,MERGED,True,1,1,1,https://github.com/maxammann,Decrease limit for KDF execution time in test,2,"['tests', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/781,https://github.com/ilammy,8,https://github.com/cossacklabs/themis/pull/781#issuecomment-784235552,"Executing emmake make test_wasm failed for me locally with emsdk 2.0.13.
This PR should be more  a small discussion whether this test really makes sense if it is platform dependant.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","I'd like to agree on this with @maxammann:

The problem is, that is is quite impossible to choose a value as this is hardware dependent.

Absolute time it takes to process data depends on hardware and workload.
Give me a time limit and I can tweak CPU allocation to the process so that it exceeds the limit. Give me the code and I can game the time limit so that the computation stays within that limit.
Talking about benchmarks without taking the environment into consideration is kinda meaningless. The only reason for 200 ms being there: that's the magic number that makes CI pass in whatever environment is there. If we take that as a baseline – i.e., Themis is fine if CI is green – then there is no need to change this number.
For one, changing that number – lower time bound for a test, adjusted in this PR – does not make Secure Cell more or less secure. If anything, we should start questioning whether there is a need to change the different number – iteration count – because apparently Secure Cell is not slow enough at least for one person's machine out there.
But for that we need to first define how much is “enough”. If the attacker would compute PBKDF2 on an ASIC or GPU then even our current choice of iteration count might turn out to be woefully inadequate (as is probably the choice of PBKDF2 in the first place, if you include ASICs into the threat model). But bumping the default iteration count to 10,000,000 would probably make users more angry than grateful.
If we're going to have this discussion, then I think it should be moved somewhere else. GitHub has this new Discussions thingie. Maybe give it a try?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,781,2021-02-20T14:51:12Z,2021-02-23T20:58:19Z,2021-02-23T20:58:19Z,MERGED,True,1,1,1,https://github.com/maxammann,Decrease limit for KDF execution time in test,2,"['tests', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/781,https://github.com/ilammy,9,https://github.com/cossacklabs/themis/pull/781#issuecomment-784235980,"Executing emmake make test_wasm failed for me locally with emsdk 2.0.13.
This PR should be more  a small discussion whether this test really makes sense if it is platform dependant.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Now, addressing the feedback...
@maxammann,

What do you think to split the current tests into 2 test suits?

Which one of those will be running on the CI? I guess, only the “tests” – the one which verify correctness – would be run on CI, and as a part of every PR. While some “benchmarks” might be run by default when a developer run the test suite, or it could be completely opt-in. (As proper benchmarks could take a non-negligible amount of time to collect data.)
@vixentael and @Lagovas,

I think we should parametrize this test

If you ask me, it's already parameterized enough: there's this number in tests that you can adjust if the test fails for you. Exporting it into environment variable does not really make things easier for a developer who is running those tests locally. It's not something that you'd need to tweak between test runs or something.
@vixentael,

When this test will start failing everywhere,

I'd like to point out that WasmThemis is probably the only environment where such test exists. I don't remember anything like that elsewhere.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,781,2021-02-20T14:51:12Z,2021-02-23T20:58:19Z,2021-02-23T20:58:19Z,MERGED,True,1,1,1,https://github.com/maxammann,Decrease limit for KDF execution time in test,2,"['tests', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/781,https://github.com/ilammy,10,https://github.com/cossacklabs/themis/pull/781#issuecomment-784241093,"Executing emmake make test_wasm failed for me locally with emsdk 2.0.13.
This PR should be more  a small discussion whether this test really makes sense if it is platform dependant.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","As for the other questions raised here, I'd like to discuss them elsewhere, not in some random PR.

#784 – Does PBKDF2 in Secure Cell have enough rounds?
#785 – Splitting correctness and performance test suites in WasmThemis

You're all welcome to raise more 👍",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,782,2021-02-21T03:58:03Z,2021-02-22T09:10:54Z,2021-02-22T09:13:26Z,MERGED,True,66,44,5,https://github.com/ilammy,Use correct Javadoc syntax,3,"['docs :books:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/782,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/782,"While tinkering with publishing of AndroidThemis I have found out that Javadoc generator yells at me with a ton of errors like
src/wrappers/themis/java/com/cossacklabs/themis/KeypairGenerator.java:49: error: @param name not found
         * @param key type (EC or RSA)

[...]

src/wrappers/themis/java/com/cossacklabs/themis/SecureSession.java:38: error: malformed HTML
                NEGOTIATING, /** < key agreement is in progress. No data exchange possible yet. */
                                 ^
36 errors
36 warnings

> Task :android:generateJavadoc FAILED

when I do
./gradlew :android:generateJavadoc

which is a part of publication process.
Well, this won't fly for proper publication so let's fix it. At least, make the Javadoc generator happy at first.
Make sure that all @param lines have an actual parameter name followed by its description. I make no effort to make it “good”, only making it correct. Improving quality of API documentation – ideally across all wrappers – is a project for another day.
Similarly, Javadoc does not support “inline” syntax for items like Doxygen-flavor documentation comments do. Just add full-fledged comments for enum variants.
Checklist

 Change is covered by automated tests
 Public API has proper documentation","While tinkering with publishing of AndroidThemis I have found out that Javadoc generator yells at me with a ton of errors like
src/wrappers/themis/java/com/cossacklabs/themis/KeypairGenerator.java:49: error: @param name not found
         * @param key type (EC or RSA)

[...]

src/wrappers/themis/java/com/cossacklabs/themis/SecureSession.java:38: error: malformed HTML
                NEGOTIATING, /** < key agreement is in progress. No data exchange possible yet. */
                                 ^
36 errors
36 warnings

> Task :android:generateJavadoc FAILED

when I do
./gradlew :android:generateJavadoc

which is a part of publication process.
Well, this won't fly for proper publication so let's fix it. At least, make the Javadoc generator happy at first.
Make sure that all @param lines have an actual parameter name followed by its description. I make no effort to make it “good”, only making it correct. Improving quality of API documentation – ideally across all wrappers – is a project for another day.
Similarly, Javadoc does not support “inline” syntax for items like Doxygen-flavor documentation comments do. Just add full-fledged comments for enum variants.
Checklist

 Change is covered by automated tests
 Public API has proper documentation",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,782,2021-02-21T03:58:03Z,2021-02-22T09:10:54Z,2021-02-22T09:13:26Z,MERGED,True,66,44,5,https://github.com/ilammy,Use correct Javadoc syntax,3,"['docs :books:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/782,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/782#issuecomment-782794301,"While tinkering with publishing of AndroidThemis I have found out that Javadoc generator yells at me with a ton of errors like
src/wrappers/themis/java/com/cossacklabs/themis/KeypairGenerator.java:49: error: @param name not found
         * @param key type (EC or RSA)

[...]

src/wrappers/themis/java/com/cossacklabs/themis/SecureSession.java:38: error: malformed HTML
                NEGOTIATING, /** < key agreement is in progress. No data exchange possible yet. */
                                 ^
36 errors
36 warnings

> Task :android:generateJavadoc FAILED

when I do
./gradlew :android:generateJavadoc

which is a part of publication process.
Well, this won't fly for proper publication so let's fix it. At least, make the Javadoc generator happy at first.
Make sure that all @param lines have an actual parameter name followed by its description. I make no effort to make it “good”, only making it correct. Improving quality of API documentation – ideally across all wrappers – is a project for another day.
Similarly, Javadoc does not support “inline” syntax for items like Doxygen-flavor documentation comments do. Just add full-fledged comments for enum variants.
Checklist

 Change is covered by automated tests
 Public API has proper documentation",Come to think of it... should we maybe have a test for this? 🤔,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,782,2021-02-21T03:58:03Z,2021-02-22T09:10:54Z,2021-02-22T09:13:26Z,MERGED,True,66,44,5,https://github.com/ilammy,Use correct Javadoc syntax,3,"['docs :books:', 'W-JavaThemis :coffee:']",https://github.com/cossacklabs/themis/pull/782,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/782#issuecomment-783221910,"While tinkering with publishing of AndroidThemis I have found out that Javadoc generator yells at me with a ton of errors like
src/wrappers/themis/java/com/cossacklabs/themis/KeypairGenerator.java:49: error: @param name not found
         * @param key type (EC or RSA)

[...]

src/wrappers/themis/java/com/cossacklabs/themis/SecureSession.java:38: error: malformed HTML
                NEGOTIATING, /** < key agreement is in progress. No data exchange possible yet. */
                                 ^
36 errors
36 warnings

> Task :android:generateJavadoc FAILED

when I do
./gradlew :android:generateJavadoc

which is a part of publication process.
Well, this won't fly for proper publication so let's fix it. At least, make the Javadoc generator happy at first.
Make sure that all @param lines have an actual parameter name followed by its description. I make no effort to make it “good”, only making it correct. Improving quality of API documentation – ideally across all wrappers – is a project for another day.
Similarly, Javadoc does not support “inline” syntax for items like Doxygen-flavor documentation comments do. Just add full-fledged comments for enum variants.
Checklist

 Change is covered by automated tests
 Public API has proper documentation","Regarding tests, I'll make sure that publishing pipeline is tested in the PR that adds Maven Central repo support. This will include generating Javadocs and will catch issues like this in the future.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,783,2021-02-21T10:36:32Z,2021-02-22T02:55:29Z,2021-02-22T02:55:29Z,MERGED,True,18,11,3,https://github.com/maxammann,Remove TextEncoder polyfill (#779),2,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/783,https://github.com/maxammann,1,https://github.com/cossacklabs/themis/pull/783,"TextEncoder is supported in the all browsers for a long time and also in node.js. For some node.js versions it is only available through the util package.
We do not need to support browsers like IE11 because they do not support webassembly.
This PR works on all browsers which support TextEncoding. It also works on all node versions until v8.3.0
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","TextEncoder is supported in the all browsers for a long time and also in node.js. For some node.js versions it is only available through the util package.
We do not need to support browsers like IE11 because they do not support webassembly.
This PR works on all browsers which support TextEncoding. It also works on all node versions until v8.3.0
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,783,2021-02-21T10:36:32Z,2021-02-22T02:55:29Z,2021-02-22T02:55:29Z,MERGED,True,18,11,3,https://github.com/maxammann,Remove TextEncoder polyfill (#779),2,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/783,https://github.com/maxammann,2,https://github.com/cossacklabs/themis/pull/783#issuecomment-782845186,"TextEncoder is supported in the all browsers for a long time and also in node.js. For some node.js versions it is only available through the util package.
We do not need to support browsers like IE11 because they do not support webassembly.
This PR works on all browsers which support TextEncoding. It also works on all node versions until v8.3.0
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","My PR basically replaces that polyfill with the node utils TextEncoder.
That should reduce the bundle size for browsers and still work on node <= 10",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,786,2021-02-27T03:11:26Z,2021-03-01T03:45:40Z,2021-03-01T03:45:45Z,MERGED,True,77,36,3,https://github.com/ilammy,Publish JavaThemis for Android to Maven Central,9,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/786,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/786,"As you might know, JFrog is sunsetting Bintray and JCenter. Unfortunately, this is exactly where JavaThemis has been hosted so far. In order to ensure continuous availability, JavaThemis migrates to the Maven Central repository.
Maven Central repository is maintained by the Apache Software Foundation. It is much less likely to experience a critical existence failure in the future. Maven Central repository is well established and trusted in the developer community.
Wait, does this mean my builds are going to be broken?
No.
Gradle has built-in support for the Central repository. Many Android apps are probably already using it. The only change that app developers need to do is slightly tweak the build.gradle file:
repositories {
    // NEW repository:
    mavenCentral()

    // Old and deprecated:
    // jcenter()
}
// NOTE: this section is exactly the same as it was for JCenter
dependencies {
    // Add JavaThemis as runtime dependency of your application.
    // Always pin the latest version, you can find it here:
    // https://search.maven.org/artifact/com.cossacklabs.com/themis
    implementation 'com.cossacklabs.com:themis:0.13.1'
}
Latest stable release of Themis 0.13.1 is already published in the Maven Central repository (as well as available via Bintray and JCentral, until they are discontinued). New releases will be published only in the Maven Central repository.
Checklist

 Change is covered by automated tests (not really, but I'd like to add this later)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated","As you might know, JFrog is sunsetting Bintray and JCenter. Unfortunately, this is exactly where JavaThemis has been hosted so far. In order to ensure continuous availability, JavaThemis migrates to the Maven Central repository.
Maven Central repository is maintained by the Apache Software Foundation. It is much less likely to experience a critical existence failure in the future. Maven Central repository is well established and trusted in the developer community.
Wait, does this mean my builds are going to be broken?
No.
Gradle has built-in support for the Central repository. Many Android apps are probably already using it. The only change that app developers need to do is slightly tweak the build.gradle file:
repositories {
    // NEW repository:
    mavenCentral()

    // Old and deprecated:
    // jcenter()
}
// NOTE: this section is exactly the same as it was for JCenter
dependencies {
    // Add JavaThemis as runtime dependency of your application.
    // Always pin the latest version, you can find it here:
    // https://search.maven.org/artifact/com.cossacklabs.com/themis
    implementation 'com.cossacklabs.com:themis:0.13.1'
}
Latest stable release of Themis 0.13.1 is already published in the Maven Central repository (as well as available via Bintray and JCentral, until they are discontinued). New releases will be published only in the Maven Central repository.
Checklist

 Change is covered by automated tests (not really, but I'd like to add this later)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated",True,"{'THUMBS_UP': ['https://github.com/shadinua', 'https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,786,2021-02-27T03:11:26Z,2021-03-01T03:45:40Z,2021-03-01T03:45:45Z,MERGED,True,77,36,3,https://github.com/ilammy,Publish JavaThemis for Android to Maven Central,9,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/786,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/786#issuecomment-786994712,"As you might know, JFrog is sunsetting Bintray and JCenter. Unfortunately, this is exactly where JavaThemis has been hosted so far. In order to ensure continuous availability, JavaThemis migrates to the Maven Central repository.
Maven Central repository is maintained by the Apache Software Foundation. It is much less likely to experience a critical existence failure in the future. Maven Central repository is well established and trusted in the developer community.
Wait, does this mean my builds are going to be broken?
No.
Gradle has built-in support for the Central repository. Many Android apps are probably already using it. The only change that app developers need to do is slightly tweak the build.gradle file:
repositories {
    // NEW repository:
    mavenCentral()

    // Old and deprecated:
    // jcenter()
}
// NOTE: this section is exactly the same as it was for JCenter
dependencies {
    // Add JavaThemis as runtime dependency of your application.
    // Always pin the latest version, you can find it here:
    // https://search.maven.org/artifact/com.cossacklabs.com/themis
    implementation 'com.cossacklabs.com:themis:0.13.1'
}
Latest stable release of Themis 0.13.1 is already published in the Maven Central repository (as well as available via Bintray and JCentral, until they are discontinued). New releases will be published only in the Maven Central repository.
Checklist

 Change is covered by automated tests (not really, but I'd like to add this later)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated","How to publish JavaThemis for Android to the Maven Central repo


Prepare the environment.


ANDROID_HOME — path to Android SDK
Typically it's installed here:
export ANDROID_HOME=$HOME/Android/sdk
or here:
export ANDROID_HOME=$HOME/Library/Android/sdk


Install GPG2
Gradle defaults to using GPG2 API. Most systems already have it available as gpg.
Check the version you have with gpg --version


Acquire GPG signing keys
Import the keys with gpg --allow-secret-key-import --import key.gpg, or however you like.
Make sure you see them in gpg --list-secret-keys and they have S (signing) permission.


Configure GPG for Gradle


Create the following file to keep secrets:
mkdir -p  $HOME/.gradle
touch     $HOME/.gradle/gradle.properties
chmod 600 $HOME/.gradle/gradle.properties


Add the following lines there:
signing.gnupg.executable=gpg
signing.gnupg.keyName=[ID of the signing key]
signing.gnupg.passphrase=[passphrase to unlock signing key]

Key ID is the long hex string you see in gpg --list-keys output.


Important: Since the passphrase to the signing key is written to the gradle.properties file, it is advisable to either setup publishing automation, or erase the file immediately after upload.




OSSRH_USERNAME and OSSRH_PASSWORD — Sonatype credentials
Instead of using your credentials, visit this URL:
https://oss.sonatype.org/#profile;User%20Token
and obtain an access token.
If you a prompted to login, you might need to refresh the page and manually select “User Token” in the dropdown:

(UI is a bit janky there. Web apps ¯\_(ツ)_/¯)
Then press “Access User Token” to get the following window:

Set the credentials in environment:
export OSSRH_USERNAME=XXXXXXXXX
export OSSRH_PASSWORD=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX




Build Android binaries.
./gradlew :android:assembleRelease
This takes a while, go do something else in the meantime.


Publish to local repository (optional step for manual verification).
./gradlew :android:publishToMavenLocal
This will package, sign, and install Themis package into your local Maven repository, available to local builds.
It's typically located in $HOME/.m2/repository
You can try building example code or something to verify that the package works as intended.


Publish to staging Sonatype repository.
./gradlew :android:publish
This uploads the package to staging repository for verification. It's not yet published to the central repo.


Initiate artifact verification by Sonatype.
Visit this URL:
https://oss.sonatype.org/#stagingRepositories
You should see your upload there:

Select it and press “Close”. This closes the “upload window” to the repository, finalizing it.
After the repository is closed, Sonatype will run a bunch of checks to verify that binaries are signed, pom.xml is correct, Javadocs and source code are present, etc. This usually completes within seconds.
You can track the progress on the same page. Just smash the “Refresh” button.


Check the binaries from staging repository.
If you select the staging repository, you will see its URL:

If you want to check the binaries, add this as your Maven repo list:
repositories {
    maven {
        url ""https://oss.sonatype.org/content/repositories/comcossacklabscom-1002""
    }
}
Then do your builds, checks, whatnot with the new version.


Publish to production repositories.
Press the “Release” button to publish:

(or “Drop” to abort).
This publishes artifacts to the public Sonatype repository:
https://oss.sonatype.org/content/repositories/releases/


Wait for sync to the Central repo.
Within around 10 minutes the new release should be synced with the Maven Central repo. Normally much faster.


🎉 Congratulations! You Have Won! 🎉
a chance to replace yourself with a bash script that does all of this",True,"{'THUMBS_UP': ['https://github.com/shadinua', 'https://github.com/vixentael'], 'HEART': ['https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,786,2021-02-27T03:11:26Z,2021-03-01T03:45:40Z,2021-03-01T03:45:45Z,MERGED,True,77,36,3,https://github.com/ilammy,Publish JavaThemis for Android to Maven Central,9,"['O-Android :robot:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/786,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/786#issuecomment-787614565,"As you might know, JFrog is sunsetting Bintray and JCenter. Unfortunately, this is exactly where JavaThemis has been hosted so far. In order to ensure continuous availability, JavaThemis migrates to the Maven Central repository.
Maven Central repository is maintained by the Apache Software Foundation. It is much less likely to experience a critical existence failure in the future. Maven Central repository is well established and trusted in the developer community.
Wait, does this mean my builds are going to be broken?
No.
Gradle has built-in support for the Central repository. Many Android apps are probably already using it. The only change that app developers need to do is slightly tweak the build.gradle file:
repositories {
    // NEW repository:
    mavenCentral()

    // Old and deprecated:
    // jcenter()
}
// NOTE: this section is exactly the same as it was for JCenter
dependencies {
    // Add JavaThemis as runtime dependency of your application.
    // Always pin the latest version, you can find it here:
    // https://search.maven.org/artifact/com.cossacklabs.com/themis
    implementation 'com.cossacklabs.com:themis:0.13.1'
}
Latest stable release of Themis 0.13.1 is already published in the Maven Central repository (as well as available via Bintray and JCentral, until they are discontinued). New releases will be published only in the Maven Central repository.
Checklist

 Change is covered by automated tests (not really, but I'd like to add this later)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated","Do you know if Maven accepts uploading library with the same version, or strictly requires to increment the version?

That depends on the repository. Maven's assumptions are that artifacts never change so you're not supposed to update them. (E.g., Maven can cache the artifact locally and never check the repo again for updates of a particular version.)
OSSRH repos disable redeployment for release repositories, but it's allowed for staging repositories.
So once a version is released to the central repository, you can't change it. However, you can reupload and update artifacts in a staging repository before they are released. For example, if you're testing a release from a staging repo and find an issue, you can still apply a fix, then redeploy to the staging repository, and test again. But once it's out to the release repo – well, admit the bug and make a new release.
I'm not sure what the story is on yanking releases – making them inaccessible – but I'd suppose that if it can be done, it should be done by contacting humans for support. The repo management software seems to be able to do that, but I'm not sure if it's allowed by the policies. There aren't many docs on that.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,787,2021-03-02T13:09:28Z,2021-03-03T06:33:25Z,2021-03-03T06:33:28Z,MERGED,True,1,1,1,https://github.com/ilammy,Fix flaky Secure Comparator test,1,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/787,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/787,"Make sure that secret_length is in [2, MAX_SECRET_SIZE) range, disallowing it to be just 1 byte.
(rand_int() generates non-zero integers.)
If secret_length is exactly 1 byte then the following call below:

  
    
      themis/tests/themis/themis_secure_comparator.c
    
    
        Lines 220 to 222
      in
      e323abb
    
  
  
    

        
          
           themis_status = secure_comparator_append_secret(bob, secret, secret_length - 1); 
        

        
          
           if (THEMIS_SUCCESS != themis_status) { 
        

        
          
               testsuite_fail_if(true, ""secure_comparator_append_secret failed""); 
        
    
  


will fail as the appended secret cannot have zero length.
Naturally, this happens rarely. But often enough to pop up in nightly tests running on my branch which got me curious.
[14:11]  secure_comparator_api_test:#11  ""secure_comparator_destroy: destroy alice""  pass
[14:12]  secure_comparator_api_test:#12  ""secure_comparator_append_secret failed""  FAIL
!    Type:      fail-if
!    Condition: condition
!    File:      tests/themis/themis_secure_comparator.c
!    Line:      222

--> 12 check(s), 11 ok, 1 failed (8.33%)

== Entering suite #15, ""secure comparator: security test"" ==

[15:1]  secure_comparator_security_test:#1  ""compare result no match""  pass

--> 1 check(s), 1 ok, 0 failed (0.00%)

==> 291 check(s) in 15 suite(s) finished after 2.00 second(s),
    290 succeeded, 1 failed (0.34%)

[FAILURE]

Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Make sure that secret_length is in [2, MAX_SECRET_SIZE) range, disallowing it to be just 1 byte.
(rand_int() generates non-zero integers.)
If secret_length is exactly 1 byte then the following call below:

  
    
      themis/tests/themis/themis_secure_comparator.c
    
    
        Lines 220 to 222
      in
      e323abb
    
  
  
    

        
          
           themis_status = secure_comparator_append_secret(bob, secret, secret_length - 1); 
        

        
          
           if (THEMIS_SUCCESS != themis_status) { 
        

        
          
               testsuite_fail_if(true, ""secure_comparator_append_secret failed""); 
        
    
  


will fail as the appended secret cannot have zero length.
Naturally, this happens rarely. But often enough to pop up in nightly tests running on my branch which got me curious.
[14:11]  secure_comparator_api_test:#11  ""secure_comparator_destroy: destroy alice""  pass
[14:12]  secure_comparator_api_test:#12  ""secure_comparator_append_secret failed""  FAIL
!    Type:      fail-if
!    Condition: condition
!    File:      tests/themis/themis_secure_comparator.c
!    Line:      222

--> 12 check(s), 11 ok, 1 failed (8.33%)

== Entering suite #15, ""secure comparator: security test"" ==

[15:1]  secure_comparator_security_test:#1  ""compare result no match""  pass

--> 1 check(s), 1 ok, 0 failed (0.00%)

==> 291 check(s) in 15 suite(s) finished after 2.00 second(s),
    290 succeeded, 1 failed (0.34%)

[FAILURE]

Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,787,2021-03-02T13:09:28Z,2021-03-03T06:33:25Z,2021-03-03T06:33:28Z,MERGED,True,1,1,1,https://github.com/ilammy,Fix flaky Secure Comparator test,1,"['core', 'tests']",https://github.com/cossacklabs/themis/pull/787,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/787#issuecomment-789022871,"Make sure that secret_length is in [2, MAX_SECRET_SIZE) range, disallowing it to be just 1 byte.
(rand_int() generates non-zero integers.)
If secret_length is exactly 1 byte then the following call below:

  
    
      themis/tests/themis/themis_secure_comparator.c
    
    
        Lines 220 to 222
      in
      e323abb
    
  
  
    

        
          
           themis_status = secure_comparator_append_secret(bob, secret, secret_length - 1); 
        

        
          
           if (THEMIS_SUCCESS != themis_status) { 
        

        
          
               testsuite_fail_if(true, ""secure_comparator_append_secret failed""); 
        
    
  


will fail as the appended secret cannot have zero length.
Naturally, this happens rarely. But often enough to pop up in nightly tests running on my branch which got me curious.
[14:11]  secure_comparator_api_test:#11  ""secure_comparator_destroy: destroy alice""  pass
[14:12]  secure_comparator_api_test:#12  ""secure_comparator_append_secret failed""  FAIL
!    Type:      fail-if
!    Condition: condition
!    File:      tests/themis/themis_secure_comparator.c
!    Line:      222

--> 12 check(s), 11 ok, 1 failed (8.33%)

== Entering suite #15, ""secure comparator: security test"" ==

[15:1]  secure_comparator_security_test:#1  ""compare result no match""  pass

--> 1 check(s), 1 ok, 0 failed (0.00%)

==> 291 check(s) in 15 suite(s) finished after 2.00 second(s),
    290 succeeded, 1 failed (0.34%)

[FAILURE]

Checklist

 Change is covered by automated tests
 The coding guidelines are followed",Tricky thingy,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,788,2021-03-06T02:24:38Z,2021-03-13T03:53:21Z,2021-03-13T03:53:29Z,MERGED,True,120,7,3,https://github.com/ilammy,Maven publishing for desktop JavaThemis,5,"['W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/788,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/788,"Let's put JavaThemis for desktop systems into Maven Central as well.
Note that this includes only the Java part of the library – a JAR with JVM bytecode. JavaThemis also needs a JNI library, which you will have to install separately, as appropriate for your system. See docs:
https://docs.cossacklabs.com/themis/languages/java/installation-desktop/
Also note that we are publishing under the same ""weird"" groupId: com.cossacklabs.com, because that's what we have used in the past, and that's our groupId prefix on Maven Central.
Since the artifactId themis is already taken by JavaThemis for Android, desktop systems will use java-themis. Hopefully, this will not be too confusing for the users. If you want a different one, like desktop-themis or whatever – speak now or forever hold your peace.
repositories {
    mavenCentral()
}

dependencies {
    // Add JavaThemis as runtime dependency of your application.
    // Always pin the latest version, you can find it here:
    // https://search.maven.org/artifact/com.cossacklabs.com/java-themis
    implementation 'com.cossacklabs.com:java-themis:0.13.1'
}
Checklist

 Change is covered by automated tests (not really, but at least you're sure it does not break builds)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated","Let's put JavaThemis for desktop systems into Maven Central as well.
Note that this includes only the Java part of the library – a JAR with JVM bytecode. JavaThemis also needs a JNI library, which you will have to install separately, as appropriate for your system. See docs:
https://docs.cossacklabs.com/themis/languages/java/installation-desktop/
Also note that we are publishing under the same ""weird"" groupId: com.cossacklabs.com, because that's what we have used in the past, and that's our groupId prefix on Maven Central.
Since the artifactId themis is already taken by JavaThemis for Android, desktop systems will use java-themis. Hopefully, this will not be too confusing for the users. If you want a different one, like desktop-themis or whatever – speak now or forever hold your peace.
repositories {
    mavenCentral()
}

dependencies {
    // Add JavaThemis as runtime dependency of your application.
    // Always pin the latest version, you can find it here:
    // https://search.maven.org/artifact/com.cossacklabs.com/java-themis
    implementation 'com.cossacklabs.com:java-themis:0.13.1'
}
Checklist

 Change is covered by automated tests (not really, but at least you're sure it does not break builds)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,788,2021-03-06T02:24:38Z,2021-03-13T03:53:21Z,2021-03-13T03:53:29Z,MERGED,True,120,7,3,https://github.com/ilammy,Maven publishing for desktop JavaThemis,5,"['W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/788,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/788#issuecomment-791843991,"Let's put JavaThemis for desktop systems into Maven Central as well.
Note that this includes only the Java part of the library – a JAR with JVM bytecode. JavaThemis also needs a JNI library, which you will have to install separately, as appropriate for your system. See docs:
https://docs.cossacklabs.com/themis/languages/java/installation-desktop/
Also note that we are publishing under the same ""weird"" groupId: com.cossacklabs.com, because that's what we have used in the past, and that's our groupId prefix on Maven Central.
Since the artifactId themis is already taken by JavaThemis for Android, desktop systems will use java-themis. Hopefully, this will not be too confusing for the users. If you want a different one, like desktop-themis or whatever – speak now or forever hold your peace.
repositories {
    mavenCentral()
}

dependencies {
    // Add JavaThemis as runtime dependency of your application.
    // Always pin the latest version, you can find it here:
    // https://search.maven.org/artifact/com.cossacklabs.com/java-themis
    implementation 'com.cossacklabs.com:java-themis:0.13.1'
}
Checklist

 Change is covered by automated tests (not really, but at least you're sure it does not break builds)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated","How to publish JavaThemis for desktop systems to the Maven Central repo
Almost like you publish Android: #786 (comment)


Prepare the environment.


Install GPG2
Gradle defaults to using GPG2 API. Most systems already have it available as gpg.
Check the version you have with gpg --version


Acquire GPG signing keys
Import the keys with gpg --allow-secret-key-import --import key.gpg, or however you like.
Make sure you see them in gpg --list-secret-keys and they have S (signing) permission.


Configure GPG for Gradle


Create the following file to keep secrets:
mkdir -p  $HOME/.gradle
touch     $HOME/.gradle/gradle.properties
chmod 600 $HOME/.gradle/gradle.properties


Add the following lines there:
signing.gnupg.executable=gpg
signing.gnupg.keyName=[ID of the signing key]
signing.gnupg.passphrase=[passphrase to unlock signing key]

Key ID is the long hex string you see in gpg --list-keys output.


Important: Since the passphrase to the signing key is written to the gradle.properties file, it is advisable to either setup publishing automation, or erase the file immediately after upload.




OSSRH_USERNAME and OSSRH_PASSWORD — Sonatype credentials
Instead of using your credentials, visit this URL:
https://oss.sonatype.org/#profile;User%20Token
and obtain an access token.
If you a prompted to login, you might need to refresh the page and manually select “User Token” in the dropdown:

(UI is a bit janky there. Web apps ¯\_(ツ)_/¯)
Then press “Access User Token” to get the following window:

Set the credentials in environment:
export OSSRH_USERNAME=XXXXXXXXX
export OSSRH_PASSWORD=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX




Publish to local repository (optional step for manual verification).
./gradlew :desktop:publishToMavenLocal
This will package, sign, and install Themis package into your local Maven repository, available to local builds.
It's typically located in $HOME/.m2/repository
You can try building example code or something to verify that the package works as intended.


Publish to staging Sonatype repository.
./gradlew :desktop:publish
This uploads the package to staging repository for verification. It's not yet published to the central repo.


Initiate artifact verification by Sonatype.
Visit this URL:
https://oss.sonatype.org/#stagingRepositories
You should see your upload there:

Select it and press “Close”. This closes the “upload window” to the repository, finalizing it.
After the repository is closed, Sonatype will run a bunch of checks to verify that binaries are signed, pom.xml is correct, Javadocs and source code are present, etc. This usually completes within seconds.
You can track the progress on the same page. Just smash the “Refresh” button.


Check the binaries from staging repository.
If you select the staging repository, you will see its URL:

If you want to check the binaries, add this as your Maven repo list:
repositories {
    maven {
        url ""https://oss.sonatype.org/content/repositories/comcossacklabscom-1002""
    }
}
Then do your builds, checks, whatnot with the new version.


Publish to production repositories.
Press the “Release” button to publish:

(or “Drop” to abort).
This publishes artifacts to the public Sonatype repository:
https://oss.sonatype.org/content/repositories/releases/


Wait for sync to the Central repo.
Within around 10 minutes the new release should be synced with the Maven Central repo. Normally much faster.


🎉 Congratulations! You Have Won Again! 🎉
a chance to replace yourself with a bash script is still waiting",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,788,2021-03-06T02:24:38Z,2021-03-13T03:53:21Z,2021-03-13T03:53:29Z,MERGED,True,120,7,3,https://github.com/ilammy,Maven publishing for desktop JavaThemis,5,"['W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/788,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/788#issuecomment-791844476,"Let's put JavaThemis for desktop systems into Maven Central as well.
Note that this includes only the Java part of the library – a JAR with JVM bytecode. JavaThemis also needs a JNI library, which you will have to install separately, as appropriate for your system. See docs:
https://docs.cossacklabs.com/themis/languages/java/installation-desktop/
Also note that we are publishing under the same ""weird"" groupId: com.cossacklabs.com, because that's what we have used in the past, and that's our groupId prefix on Maven Central.
Since the artifactId themis is already taken by JavaThemis for Android, desktop systems will use java-themis. Hopefully, this will not be too confusing for the users. If you want a different one, like desktop-themis or whatever – speak now or forever hold your peace.
repositories {
    mavenCentral()
}

dependencies {
    // Add JavaThemis as runtime dependency of your application.
    // Always pin the latest version, you can find it here:
    // https://search.maven.org/artifact/com.cossacklabs.com/java-themis
    implementation 'com.cossacklabs.com:java-themis:0.13.1'
}
Checklist

 Change is covered by automated tests (not really, but at least you're sure it does not break builds)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated","Once we're done choosing the name, I believe it will be good to actually publish desktop JavaThemis 0.13.1 (or whatever is the version) to Maven Central, along with its Android sibling. Then it will be possible to update the docs and examples before the heavens split and 0.14.0 is released.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,788,2021-03-06T02:24:38Z,2021-03-13T03:53:21Z,2021-03-13T03:53:29Z,MERGED,True,120,7,3,https://github.com/ilammy,Maven publishing for desktop JavaThemis,5,"['W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/788,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/788#issuecomment-792352215,"Let's put JavaThemis for desktop systems into Maven Central as well.
Note that this includes only the Java part of the library – a JAR with JVM bytecode. JavaThemis also needs a JNI library, which you will have to install separately, as appropriate for your system. See docs:
https://docs.cossacklabs.com/themis/languages/java/installation-desktop/
Also note that we are publishing under the same ""weird"" groupId: com.cossacklabs.com, because that's what we have used in the past, and that's our groupId prefix on Maven Central.
Since the artifactId themis is already taken by JavaThemis for Android, desktop systems will use java-themis. Hopefully, this will not be too confusing for the users. If you want a different one, like desktop-themis or whatever – speak now or forever hold your peace.
repositories {
    mavenCentral()
}

dependencies {
    // Add JavaThemis as runtime dependency of your application.
    // Always pin the latest version, you can find it here:
    // https://search.maven.org/artifact/com.cossacklabs.com/java-themis
    implementation 'com.cossacklabs.com:java-themis:0.13.1'
}
Checklist

 Change is covered by automated tests (not really, but at least you're sure it does not break builds)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated","desktop systems will use java-themis

sounds good to me, but i'm not sure if Java/MC have any restrictions on libraries name. Do they support -?
UPD1: As I read from docs, they suggest us to use _ instead of - in package names
https://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html
UPD2: apparently, using - is totally fine (I've noticed examples like classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.1')",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,788,2021-03-06T02:24:38Z,2021-03-13T03:53:21Z,2021-03-13T03:53:29Z,MERGED,True,120,7,3,https://github.com/ilammy,Maven publishing for desktop JavaThemis,5,"['W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/788,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/788#issuecomment-792354006,"Let's put JavaThemis for desktop systems into Maven Central as well.
Note that this includes only the Java part of the library – a JAR with JVM bytecode. JavaThemis also needs a JNI library, which you will have to install separately, as appropriate for your system. See docs:
https://docs.cossacklabs.com/themis/languages/java/installation-desktop/
Also note that we are publishing under the same ""weird"" groupId: com.cossacklabs.com, because that's what we have used in the past, and that's our groupId prefix on Maven Central.
Since the artifactId themis is already taken by JavaThemis for Android, desktop systems will use java-themis. Hopefully, this will not be too confusing for the users. If you want a different one, like desktop-themis or whatever – speak now or forever hold your peace.
repositories {
    mavenCentral()
}

dependencies {
    // Add JavaThemis as runtime dependency of your application.
    // Always pin the latest version, you can find it here:
    // https://search.maven.org/artifact/com.cossacklabs.com/java-themis
    implementation 'com.cossacklabs.com:java-themis:0.13.1'
}
Checklist

 Change is covered by automated tests (not really, but at least you're sure it does not break builds)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (will do later)
 Changelog is updated","I believe it will be good to actually publish desktop JavaThemis 0.13.1 (or whatever is the version) to Maven Central, along with its Android sibling.

I totally support this",True,{'EYES': ['https://github.com/ilammy']}
cossacklabs/themis,https://github.com/cossacklabs/themis,789,2021-03-12T13:53:36Z,2021-04-28T10:37:41Z,2021-04-28T10:37:41Z,MERGED,True,125,0,4,https://github.com/julepka,Add SPM support with XCF,11,"['W-SwiftThemis :large_orange_diamond:', 'M-SPM']",https://github.com/cossacklabs/themis/pull/789,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/789,"Introducing Swift Package Manager support with xcframework.
Details:

Created a script create_xcframewok.sh to build an xcframwork for Swift for iOS, iOSSimulator, MacOS. Basically, took it from AppSpector tutorial. The xcframework is created in the build folder. When releasing a new version, we'll need to add the generated xcframework to the release assets to have a direct link to it. Related documentation will be updated.
Added Package.swift file to support SPM. It should be placed in the root of the repo. It contains a link to the xcframework. When releasing a new version, the link should be updated with a proper version (future version you are going to release, pretty similar to carthage). So, when you create a release/tag on a GitHub you can reference a corresponding commit.
Example projects will be added in the upcoming version together with updated OpenSSL version.
I had to remove OpenSSL from SPM inside Themis.xcodeproj because of the signature issues. It failed our Carthage tests. It seems to be resolved with Xcode 12.5 that is not available for Github actions yet.

Checklist

 Change is covered by automated tests – will be covered separately, added to our TODO list
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) – will be covered separatly
 Changelog is updated (in case of notable or breaking changes) – TODO when links are updated","Introducing Swift Package Manager support with xcframework.
Details:

Created a script create_xcframewok.sh to build an xcframwork for Swift for iOS, iOSSimulator, MacOS. Basically, took it from AppSpector tutorial. The xcframework is created in the build folder. When releasing a new version, we'll need to add the generated xcframework to the release assets to have a direct link to it. Related documentation will be updated.
Added Package.swift file to support SPM. It should be placed in the root of the repo. It contains a link to the xcframework. When releasing a new version, the link should be updated with a proper version (future version you are going to release, pretty similar to carthage). So, when you create a release/tag on a GitHub you can reference a corresponding commit.
Example projects will be added in the upcoming version together with updated OpenSSL version.
I had to remove OpenSSL from SPM inside Themis.xcodeproj because of the signature issues. It failed our Carthage tests. It seems to be resolved with Xcode 12.5 that is not available for Github actions yet.

Checklist

 Change is covered by automated tests – will be covered separately, added to our TODO list
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) – will be covered separatly
 Changelog is updated (in case of notable or breaking changes) – TODO when links are updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,789,2021-03-12T13:53:36Z,2021-04-28T10:37:41Z,2021-04-28T10:37:41Z,MERGED,True,125,0,4,https://github.com/julepka,Add SPM support with XCF,11,"['W-SwiftThemis :large_orange_diamond:', 'M-SPM']",https://github.com/cossacklabs/themis/pull/789,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/789#issuecomment-797863376,"Introducing Swift Package Manager support with xcframework.
Details:

Created a script create_xcframewok.sh to build an xcframwork for Swift for iOS, iOSSimulator, MacOS. Basically, took it from AppSpector tutorial. The xcframework is created in the build folder. When releasing a new version, we'll need to add the generated xcframework to the release assets to have a direct link to it. Related documentation will be updated.
Added Package.swift file to support SPM. It should be placed in the root of the repo. It contains a link to the xcframework. When releasing a new version, the link should be updated with a proper version (future version you are going to release, pretty similar to carthage). So, when you create a release/tag on a GitHub you can reference a corresponding commit.
Example projects will be added in the upcoming version together with updated OpenSSL version.
I had to remove OpenSSL from SPM inside Themis.xcodeproj because of the signature issues. It failed our Carthage tests. It seems to be resolved with Xcode 12.5 that is not available for Github actions yet.

Checklist

 Change is covered by automated tests – will be covered separately, added to our TODO list
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) – will be covered separatly
 Changelog is updated (in case of notable or breaking changes) – TODO when links are updated","Also, I should probably move the create_xcframeworks.sh script to some folder. I believe the scripts one should be good. Correct me if I'm wrong.

I think that scripts/create_xcframeworks.sh would be the right location, yes.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,789,2021-03-12T13:53:36Z,2021-04-28T10:37:41Z,2021-04-28T10:37:41Z,MERGED,True,125,0,4,https://github.com/julepka,Add SPM support with XCF,11,"['W-SwiftThemis :large_orange_diamond:', 'M-SPM']",https://github.com/cossacklabs/themis/pull/789,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/789#issuecomment-797867247,"Introducing Swift Package Manager support with xcframework.
Details:

Created a script create_xcframewok.sh to build an xcframwork for Swift for iOS, iOSSimulator, MacOS. Basically, took it from AppSpector tutorial. The xcframework is created in the build folder. When releasing a new version, we'll need to add the generated xcframework to the release assets to have a direct link to it. Related documentation will be updated.
Added Package.swift file to support SPM. It should be placed in the root of the repo. It contains a link to the xcframework. When releasing a new version, the link should be updated with a proper version (future version you are going to release, pretty similar to carthage). So, when you create a release/tag on a GitHub you can reference a corresponding commit.
Example projects will be added in the upcoming version together with updated OpenSSL version.
I had to remove OpenSSL from SPM inside Themis.xcodeproj because of the signature issues. It failed our Carthage tests. It seems to be resolved with Xcode 12.5 that is not available for Github actions yet.

Checklist

 Change is covered by automated tests – will be covered separately, added to our TODO list
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) – will be covered separatly
 Changelog is updated (in case of notable or breaking changes) – TODO when links are updated","Oh, and one more thing: it would be cool to exercise the script on CI, just to be sure it will work in the time of need.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,789,2021-03-12T13:53:36Z,2021-04-28T10:37:41Z,2021-04-28T10:37:41Z,MERGED,True,125,0,4,https://github.com/julepka,Add SPM support with XCF,11,"['W-SwiftThemis :large_orange_diamond:', 'M-SPM']",https://github.com/cossacklabs/themis/pull/789,https://github.com/julepka,4,https://github.com/cossacklabs/themis/pull/789#issuecomment-799474589,"Introducing Swift Package Manager support with xcframework.
Details:

Created a script create_xcframewok.sh to build an xcframwork for Swift for iOS, iOSSimulator, MacOS. Basically, took it from AppSpector tutorial. The xcframework is created in the build folder. When releasing a new version, we'll need to add the generated xcframework to the release assets to have a direct link to it. Related documentation will be updated.
Added Package.swift file to support SPM. It should be placed in the root of the repo. It contains a link to the xcframework. When releasing a new version, the link should be updated with a proper version (future version you are going to release, pretty similar to carthage). So, when you create a release/tag on a GitHub you can reference a corresponding commit.
Example projects will be added in the upcoming version together with updated OpenSSL version.
I had to remove OpenSSL from SPM inside Themis.xcodeproj because of the signature issues. It failed our Carthage tests. It seems to be resolved with Xcode 12.5 that is not available for Github actions yet.

Checklist

 Change is covered by automated tests – will be covered separately, added to our TODO list
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) – will be covered separatly
 Changelog is updated (in case of notable or breaking changes) – TODO when links are updated","@ilammy

My questions from cossacklabs/openssl-apple#22 applies here as well: regarding the static/dynamic divide. Just in case Themis would need to become a static framework, or switch to shared dynamic OpenSSL, it's interesting to know how painful that would be.

The only thing I can say, it is very unpredictable. I've tried the most straightforward and recommended solution. I hope to make it work as an MVP for out XCF and SPM support. Then. we'll see what we can do with the linking type.

Since there is no precedent of attaching binaries to Themis releases, how that would play out in the general release flow?

Yeah, looks like we'll need to describe XCF flow in our releasing checklist. In a perfect world, CI will do everything for us, but for now, we will build and attach XCF manually. We will make XCF work and then improve whats missing.

Given that CLOpenSSL serves as a model example of making binary-only releases, what would become to CocoaPods and Carthage publications of Themis? Will they eventually migrate to using the same binaries as SPM, or continue building Themis from source?

It may be possible, but I can't say for sure right now.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,789,2021-03-12T13:53:36Z,2021-04-28T10:37:41Z,2021-04-28T10:37:41Z,MERGED,True,125,0,4,https://github.com/julepka,Add SPM support with XCF,11,"['W-SwiftThemis :large_orange_diamond:', 'M-SPM']",https://github.com/cossacklabs/themis/pull/789,https://github.com/julepka,5,https://github.com/cossacklabs/themis/pull/789#issuecomment-826877952,"Introducing Swift Package Manager support with xcframework.
Details:

Created a script create_xcframewok.sh to build an xcframwork for Swift for iOS, iOSSimulator, MacOS. Basically, took it from AppSpector tutorial. The xcframework is created in the build folder. When releasing a new version, we'll need to add the generated xcframework to the release assets to have a direct link to it. Related documentation will be updated.
Added Package.swift file to support SPM. It should be placed in the root of the repo. It contains a link to the xcframework. When releasing a new version, the link should be updated with a proper version (future version you are going to release, pretty similar to carthage). So, when you create a release/tag on a GitHub you can reference a corresponding commit.
Example projects will be added in the upcoming version together with updated OpenSSL version.
I had to remove OpenSSL from SPM inside Themis.xcodeproj because of the signature issues. It failed our Carthage tests. It seems to be resolved with Xcode 12.5 that is not available for Github actions yet.

Checklist

 Change is covered by automated tests – will be covered separately, added to our TODO list
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) – will be covered separatly
 Changelog is updated (in case of notable or breaking changes) – TODO when links are updated","I had to remove cl-openssl SPM packege from the Themis.xcodeproj because Xcode 12 has signing issues if you have a complex structure if binary frameworks dependencies. https://developer.apple.com/forums/thread/656367
It looks like the issue is fixed in Xcode 12.5 but github actions do not support it yet.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,789,2021-03-12T13:53:36Z,2021-04-28T10:37:41Z,2021-04-28T10:37:41Z,MERGED,True,125,0,4,https://github.com/julepka,Add SPM support with XCF,11,"['W-SwiftThemis :large_orange_diamond:', 'M-SPM']",https://github.com/cossacklabs/themis/pull/789,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/789#issuecomment-827588631,"Introducing Swift Package Manager support with xcframework.
Details:

Created a script create_xcframewok.sh to build an xcframwork for Swift for iOS, iOSSimulator, MacOS. Basically, took it from AppSpector tutorial. The xcframework is created in the build folder. When releasing a new version, we'll need to add the generated xcframework to the release assets to have a direct link to it. Related documentation will be updated.
Added Package.swift file to support SPM. It should be placed in the root of the repo. It contains a link to the xcframework. When releasing a new version, the link should be updated with a proper version (future version you are going to release, pretty similar to carthage). So, when you create a release/tag on a GitHub you can reference a corresponding commit.
Example projects will be added in the upcoming version together with updated OpenSSL version.
I had to remove OpenSSL from SPM inside Themis.xcodeproj because of the signature issues. It failed our Carthage tests. It seems to be resolved with Xcode 12.5 that is not available for Github actions yet.

Checklist

 Change is covered by automated tests – will be covered separately, added to our TODO list
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) – will be covered separatly
 Changelog is updated (in case of notable or breaking changes) – TODO when links are updated","I had to remove cl-openssl SPM packege from the Themis.xcodeproj

Hm... So it still depends on that package, but hides it so that Xcode stops eating glue? 🤔

It looks like the issue is fixed in Xcode 12.5 but github actions do not support it yet.

Well, they seem to support it in their macOS 11 image, but that one has been in “private preview mode” for quite a while.
Now that you've mentioned it, I'm kinda sad because Xcode 12.5 requires macOS 11. I'm in for a painful upgrade.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,789,2021-03-12T13:53:36Z,2021-04-28T10:37:41Z,2021-04-28T10:37:41Z,MERGED,True,125,0,4,https://github.com/julepka,Add SPM support with XCF,11,"['W-SwiftThemis :large_orange_diamond:', 'M-SPM']",https://github.com/cossacklabs/themis/pull/789,https://github.com/vixentael,7,https://github.com/cossacklabs/themis/pull/789#issuecomment-827645217,"Introducing Swift Package Manager support with xcframework.
Details:

Created a script create_xcframewok.sh to build an xcframwork for Swift for iOS, iOSSimulator, MacOS. Basically, took it from AppSpector tutorial. The xcframework is created in the build folder. When releasing a new version, we'll need to add the generated xcframework to the release assets to have a direct link to it. Related documentation will be updated.
Added Package.swift file to support SPM. It should be placed in the root of the repo. It contains a link to the xcframework. When releasing a new version, the link should be updated with a proper version (future version you are going to release, pretty similar to carthage). So, when you create a release/tag on a GitHub you can reference a corresponding commit.
Example projects will be added in the upcoming version together with updated OpenSSL version.
I had to remove OpenSSL from SPM inside Themis.xcodeproj because of the signature issues. It failed our Carthage tests. It seems to be resolved with Xcode 12.5 that is not available for Github actions yet.

Checklist

 Change is covered by automated tests – will be covered separately, added to our TODO list
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) – will be covered separatly
 Changelog is updated (in case of notable or breaking changes) – TODO when links are updated","Now that you've mentioned it, I'm kinda sad because Xcode 12.5 requires macOS 11. I'm in for a painful upgrade.

all of us... all of us 💀",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,790,2021-03-14T07:29:04Z,2021-03-17T02:38:05Z,2021-03-17T02:38:10Z,MERGED,True,1,8,1,https://github.com/ilammy,"Use ""ubuntu-20.04"" for AFL fuzzing job",1,['infrastructure'],https://github.com/cossacklabs/themis/pull/790,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/790,"Some time ago I have pinned this job to ubuntu-18.04 worker because ubuntu-20.04 was broken, now it's the reverse: package repos used in ubuntu-18.04 contain incompatible versions of 32- and 64-bit OpenSSL.
Switch to ubuntu-20.04 now that it's actually functional. Don't use ubuntu-latest because even God does not know what GitHub will use for that label.
I have some desire to use vanilla Ubuntu 20.04 for this job to prevent GitHub from breaking it again by piling up incompatible repositories there again, but let's see how it rolls. (Using GitHub's images is faster as they have most of our dependencies preinstalled.) It it breaks again in the future – I'm switching it to vanilla Docker image, I don't care if it gets slower (Microsoft is paying for compute, after all).
Checklist

 Change is covered by automated tests","Some time ago I have pinned this job to ubuntu-18.04 worker because ubuntu-20.04 was broken, now it's the reverse: package repos used in ubuntu-18.04 contain incompatible versions of 32- and 64-bit OpenSSL.
Switch to ubuntu-20.04 now that it's actually functional. Don't use ubuntu-latest because even God does not know what GitHub will use for that label.
I have some desire to use vanilla Ubuntu 20.04 for this job to prevent GitHub from breaking it again by piling up incompatible repositories there again, but let's see how it rolls. (Using GitHub's images is faster as they have most of our dependencies preinstalled.) It it breaks again in the future – I'm switching it to vanilla Docker image, I don't care if it gets slower (Microsoft is paying for compute, after all).
Checklist

 Change is covered by automated tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,791,2021-03-21T02:28:17Z,2021-03-22T00:23:45Z,2021-03-22T00:23:49Z,MERGED,True,54,3,3,https://github.com/ilammy,Test MSYS2 build and packaging ,2,"['core', 'infrastructure', 'O-Windows :desktop_computer:']",https://github.com/cossacklabs/themis/pull/791,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/791,"The documentation claims that we regularly test MSYS2 packaging but actually never do. Start doing that.
Since MSYS2 is very different from Linux/macOS, make a separate task for it so that we can override the shell to MSYS2 shell. While we're at it, test everything that we have:

plain build in MSYS2 environment and runnin unit tests
building and installing packages, then testing the examples
building NSIS installer

Unfortunately, I don't really have a good idea of how to test the NSIS installer, which will probably require a Visual Studio project or something like that. But it would be cool to check if it works too.
Also, to avoid spending more time on this than necessary, test only OpenSSL builds with system packages provided by MSYS2, don't test building BoringSSL and appropriate Themis flavor.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated","The documentation claims that we regularly test MSYS2 packaging but actually never do. Start doing that.
Since MSYS2 is very different from Linux/macOS, make a separate task for it so that we can override the shell to MSYS2 shell. While we're at it, test everything that we have:

plain build in MSYS2 environment and runnin unit tests
building and installing packages, then testing the examples
building NSIS installer

Unfortunately, I don't really have a good idea of how to test the NSIS installer, which will probably require a Visual Studio project or something like that. But it would be cool to check if it works too.
Also, to avoid spending more time on this than necessary, test only OpenSSL builds with system packages provided by MSYS2, don't test building BoringSSL and appropriate Themis flavor.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,791,2021-03-21T02:28:17Z,2021-03-22T00:23:45Z,2021-03-22T00:23:49Z,MERGED,True,54,3,3,https://github.com/ilammy,Test MSYS2 build and packaging ,2,"['core', 'infrastructure', 'O-Windows :desktop_computer:']",https://github.com/cossacklabs/themis/pull/791,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/791#issuecomment-803584292,"The documentation claims that we regularly test MSYS2 packaging but actually never do. Start doing that.
Since MSYS2 is very different from Linux/macOS, make a separate task for it so that we can override the shell to MSYS2 shell. While we're at it, test everything that we have:

plain build in MSYS2 environment and runnin unit tests
building and installing packages, then testing the examples
building NSIS installer

Unfortunately, I don't really have a good idea of how to test the NSIS installer, which will probably require a Visual Studio project or something like that. But it would be cool to check if it works too.
Also, to avoid spending more time on this than necessary, test only OpenSSL builds with system packages provided by MSYS2, don't test building BoringSSL and appropriate Themis flavor.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated","I wonder why the checksums are changed
Because they should have been changed during the release, along with updating the version which defines the source tarball to download. But since no one checked MSYS packaging (and no one really uses it), this have gone unnoticed the whole time vOv",True,"{'EYES': ['https://github.com/vixentael'], 'LAUGH': ['https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/maxammann,1,https://github.com/cossacklabs/themis/pull/792,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,"{'EYES': ['https://github.com/vixentael'], 'THUMBS_UP': ['https://github.com/ilammy']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/maxammann,2,https://github.com/cossacklabs/themis/pull/792#issuecomment-808273532,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",I'm not sure where to change example or where examples exist. The api only changed ìnitialisedto ìnitialize(),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/maxammann,3,https://github.com/cossacklabs/themis/pull/792#issuecomment-808294204,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",I think the RustThemis failure is not introduced in this PR. For some reason Node 10 fails because of a timeout when initializing wasm. Not sure why this happens...,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/maxammann,4,https://github.com/cossacklabs/themis/pull/792#issuecomment-808346234,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Next steps:

Remove tests which check for types errors
Remove all exceptions which are thrown because of wrong types. Typescript handles this now.
Remove legacy arguments.length ==  handling
Remove coerceBytes
code formatting",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/792#issuecomment-808433772,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Wow, that's a lot 🔥",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/maxammann,6,https://github.com/cossacklabs/themis/pull/792#issuecomment-808512107,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Wow, that's a lot 🔥

Yeah I tried to do minimal changes. But a rewrite is a rewrite :D
The other changes can follow in other prs. They are optional and just code quality improvements.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/792#issuecomment-808836556,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Also, a comment from the operational point of view for @shadinua: WasmThemis publishing should not really change much with all of this. You can still just run make wasmthemis to build a wasm-themis.tgz to be uploaded to npm and that's it. The build process gets slower though, as now it needs to download more stuff from the Internet, transpile TypeScript into JavaScript, etc.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/ilammy,8,https://github.com/cossacklabs/themis/pull/792#issuecomment-809353556,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","FYI, @maxammann, the fix for Rust build has been merged into master, so you can pull the updated version and merge it into your branch to turn the build green. Just a merge commit with git checkout typescript && git merge master, not rebases or anything like that (the PR branch is going to get squashed anyway).",True,{'THUMBS_UP': ['https://github.com/maxammann']}
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/maxammann,9,https://github.com/cossacklabs/themis/pull/792#issuecomment-821789212,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",@ilammy any update on this one? :),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/ilammy,10,https://github.com/cossacklabs/themis/pull/792#issuecomment-821924355,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","@maxamman, I'm sorry, it seems that high-context culture has some effects on me and I kinda mishandled this.
It looks like we ended up playing this silly game where everybody expects other people to do something, but they never tell that explicitly and the other party does not read the air. And so weeks pass without anyone doing anything while everybody is under impression something is being done and it just takes time. From my point of view, open-source contributors are volunteers and all, they have other stuff to keep them busy. From your point of view, I think, maintainers might look the same.
I'm biased for merging this to make future work easier. However, this will block the 0.17.0 release until the backwards compatibility issues outlined in #792 (comment) are resolved (one way or another: either we avoid them, or we assert them). I'm not aware of time constraints for this release, so I guess I'd go for making it when it's done rather than postponing TypeScript rework for some later release.
@vixentael, what's your take on this?
Again, @maxammann, I'm sorry for not setting my expectations straight 🙏 I was under impression that you were looking into those issues, it just takes time.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/maxammann,11,https://github.com/cossacklabs/themis/pull/792#issuecomment-821952896,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","I'm sorry, it seems that high-context culture has some effects on me and I kinda mishandled this.

Absolutely no problem, no mishandling happened in my opinion :)
Actually, I did not see your last comment in our discussion. As far as I can see I have two open things:

Continue to support initialized promise
Drop ES5 support because all wasm supporting browsers also support ES6 and therefore also revert the changes about extending ArrayBuffer",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/vixentael,12,https://github.com/cossacklabs/themis/pull/792#issuecomment-822072089,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Thank you for your patience @maxammann!
Scenario 1

Continue to support initialized promise

Would be nice if we can!

Drop ES5 support

I'm ok with this., it's old :)
If we can support old initialized promise OR write deprecation notice on that one, then I think we can merge TS support to master and release with next Themis release.
Scenario 2
If we can't support old initialized promise, then I suggest merging these changes to a separate branch master/typescript, and aim at releasing 0.14.0 with breaking changes (add initialize(); drop ES5) :)
I'd love to support backwards compatibility, but I understand that WASM Themis is typically used in desktop and web apps, which move fast. Soo... sorry devs? We will describe breaking changes as detailed as possible.

@maxammann do you think it's possible to support initialized promise or to write some deprecation/breaking change notice in code to let devs know that they should use initialize now?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/ilammy,13,https://github.com/cossacklabs/themis/pull/792#issuecomment-822438550,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Alrighty. @maxammann, I've retargeted your PR onto a new branch – wasm-typescript – and merged it there. Please target your future TypeScript PRs for that branch. Once TypeScript support is stabilized and ready for release, the wasm-typescript branch will be merged into master.
This way if Themis really needs a release, we can provide it without potentially introducing a breaking change. Hopefully, we won't need this and TypeScript will be in there in Themis 0.14.",True,"{'THUMBS_UP': ['https://github.com/maxammann', 'https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,792,2021-03-26T14:39:57Z,2021-04-19T12:43:00Z,2021-05-02T14:02:42Z,MERGED,True,5487,2208,37,https://github.com/maxammann,Migrate wasm-themis to TypeScript,22,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/792,https://github.com/maxammann,14,https://github.com/cossacklabs/themis/pull/792#issuecomment-830814518,"So my PR for TS is finally here. This PR only changes syntax and should not change semantics. This is not possible in every case, but in all cases that matter.
The module works in node, older browsers and also works using ES6 and TypeScript. Here is an example for node:
mkdir test && cd test
npm init -y
npm install file://./wasm-themis-0.14.0.tgz
echo ""const themis = require('wasm-themis'); \
themis.initialize().then(() => { \
    const cell = themis.SecureCellSeal.withPassphrase('pass'); \
    console.log(cell.encrypt(new Uint8Array([1]))); \
})"" > example.js
node example.js

Example for web like a react app:
// @ts-ignore
import themisWasm from ""wasm-themis/dist/libthemis.wasm"";
import { initialize, SecureCellSeal } from ""wasm-themis""; // webpack takes care of making the wasm file available

await initialize(themisWasm);
const cell = SecureCellSeal.withPassphrase(pw);
Here are links to the diffs for easier reviewing:

Syntax changes from plain JS to TS

You can simple review the commit referenced above and then only review the changes to the package.json and build files.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Thanks! Right now I don't have time to continue but soon I will :)
Just ping me when there are urgent changes for wasm-themis.",True,"{'THUMBS_UP': ['https://github.com/ilammy', 'https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,793,2021-03-27T01:27:02Z,2021-03-28T18:37:34Z,2021-03-29T12:34:03Z,MERGED,True,2,2,1,https://github.com/ilammy,Fix warnings from Clippy,1,"['tests', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/793,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/793,"Recently released Rust 1.51 includes new Clippy with new warnings:
error: name `GetPublicKeyForID` contains a capitalized acronym
   --> src/wrappers/themis/rust/tests/secure_session.rs:663:6
    |
663 | type GetPublicKeyForID = Box<dyn FnMut(&[u8]) -> Option<EcdsaPublicKey>>;
    |      ^^^^^^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `GetPublicKeyForId`
    |
    = note: `-D clippy::upper-case-acronyms` implied by `-D warnings`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms

error: aborting due to previous error

Shut up, Clippy, I name my types however I want to!
I mean, yes, sure, O Wise Stationery, I will immediately rename the entity as prescribed and will refrain from such practice any further.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Recently released Rust 1.51 includes new Clippy with new warnings:
error: name `GetPublicKeyForID` contains a capitalized acronym
   --> src/wrappers/themis/rust/tests/secure_session.rs:663:6
    |
663 | type GetPublicKeyForID = Box<dyn FnMut(&[u8]) -> Option<EcdsaPublicKey>>;
    |      ^^^^^^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `GetPublicKeyForId`
    |
    = note: `-D clippy::upper-case-acronyms` implied by `-D warnings`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms

error: aborting due to previous error

Shut up, Clippy, I name my types however I want to!
I mean, yes, sure, O Wise Stationery, I will immediately rename the entity as prescribed and will refrain from such practice any further.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,793,2021-03-27T01:27:02Z,2021-03-28T18:37:34Z,2021-03-29T12:34:03Z,MERGED,True,2,2,1,https://github.com/ilammy,Fix warnings from Clippy,1,"['tests', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/793,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/793#issuecomment-809175503,"Recently released Rust 1.51 includes new Clippy with new warnings:
error: name `GetPublicKeyForID` contains a capitalized acronym
   --> src/wrappers/themis/rust/tests/secure_session.rs:663:6
    |
663 | type GetPublicKeyForID = Box<dyn FnMut(&[u8]) -> Option<EcdsaPublicKey>>;
    |      ^^^^^^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `GetPublicKeyForId`
    |
    = note: `-D clippy::upper-case-acronyms` implied by `-D warnings`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms

error: aborting due to previous error

Shut up, Clippy, I name my types however I want to!
I mean, yes, sure, O Wise Stationery, I will immediately rename the entity as prescribed and will refrain from such practice any further.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",@ilammy can you please cherry pick there changes to stable?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,793,2021-03-27T01:27:02Z,2021-03-28T18:37:34Z,2021-03-29T12:34:03Z,MERGED,True,2,2,1,https://github.com/ilammy,Fix warnings from Clippy,1,"['tests', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/793,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/793#issuecomment-809340464,"Recently released Rust 1.51 includes new Clippy with new warnings:
error: name `GetPublicKeyForID` contains a capitalized acronym
   --> src/wrappers/themis/rust/tests/secure_session.rs:663:6
    |
663 | type GetPublicKeyForID = Box<dyn FnMut(&[u8]) -> Option<EcdsaPublicKey>>;
    |      ^^^^^^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `GetPublicKeyForId`
    |
    = note: `-D clippy::upper-case-acronyms` implied by `-D warnings`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms

error: aborting due to previous error

Shut up, Clippy, I name my types however I want to!
I mean, yes, sure, O Wise Stationery, I will immediately rename the entity as prescribed and will refrain from such practice any further.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","@vixentael,

@ilammy can you please cherry pick there changes to stable?

Done: #794",True,{'HEART': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,794,2021-03-29T12:33:24Z,2021-03-29T13:02:38Z,2021-03-29T13:02:41Z,MERGED,True,2,2,1,https://github.com/ilammy,Fix warnings from Clippy on stable,1,"['tests', 'W-RustThemis :crab:', 'backport']",https://github.com/cossacklabs/themis/pull/794,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/794,"Cherry-pick fix for Clippy from #793 onto stable.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","Cherry-pick fix for Clippy from #793 onto stable.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,794,2021-03-29T12:33:24Z,2021-03-29T13:02:38Z,2021-03-29T13:02:41Z,MERGED,True,2,2,1,https://github.com/ilammy,Fix warnings from Clippy on stable,1,"['tests', 'W-RustThemis :crab:', 'backport']",https://github.com/cossacklabs/themis/pull/794,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/794#issuecomment-809344296,"Cherry-pick fix for Clippy from #793 onto stable.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",Because nightly builds on stable are failing.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,794,2021-03-29T12:33:24Z,2021-03-29T13:02:38Z,2021-03-29T13:02:41Z,MERGED,True,2,2,1,https://github.com/ilammy,Fix warnings from Clippy on stable,1,"['tests', 'W-RustThemis :crab:', 'backport']",https://github.com/cossacklabs/themis/pull/794,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/794#issuecomment-809344621,"Cherry-pick fix for Clippy from #793 onto stable.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",Merge once tests pass.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,795,2021-03-30T15:35:34Z,2021-03-31T11:55:09Z,2021-03-31T11:55:17Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump y18n from 4.0.0 to 4.0.1 in /src/wrappers/themis/wasm,1,['dependencies'],https://github.com/cossacklabs/themis/pull/795,https://github.com/apps/dependabot,1,https://github.com/cossacklabs/themis/pull/795,"Bumps y18n from 4.0.0 to 4.0.1.

Changelog
Sourced from y18n's changelog.

Change Log
All notable changes to this project will be documented in this file. See standard-version for commit guidelines.
5.0.5 (2020-10-25)
Bug Fixes

address prototype pollution issue (#108) (a9ac604)

5.0.4 (2020-10-16)
Bug Fixes

exports: node 13.0 and 13.1 require the dotted object form with a string fallback (#105) (4f85d80)

5.0.3 (2020-10-16)
Bug Fixes

exports: node 13.0-13.6 require a string fallback (#103) (e39921e)

5.0.2 (2020-10-01)
Bug Fixes

deno: update types for deno ^1.4.0 (#100) (3834d9a)

5.0.1 (2020-09-05)
Bug Fixes

main had old index path (#98) (124f7b0)

5.0.0 (2020-09-05)
⚠ BREAKING CHANGES

exports maps are now used, which modifies import behavior.
drops Node 6 and 4. begin following Node.js LTS schedule (#89)

Features

add support for ESM and Deno #95) (4d7ae94)



... (truncated)


Commits

See full diff in compare view



Maintainer changes
This version was pushed to npm by oss-bot, a new releaser for y18n since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","Bumps y18n from 4.0.0 to 4.0.1.

Changelog
Sourced from y18n's changelog.

Change Log
All notable changes to this project will be documented in this file. See standard-version for commit guidelines.
5.0.5 (2020-10-25)
Bug Fixes

address prototype pollution issue (#108) (a9ac604)

5.0.4 (2020-10-16)
Bug Fixes

exports: node 13.0 and 13.1 require the dotted object form with a string fallback (#105) (4f85d80)

5.0.3 (2020-10-16)
Bug Fixes

exports: node 13.0-13.6 require a string fallback (#103) (e39921e)

5.0.2 (2020-10-01)
Bug Fixes

deno: update types for deno ^1.4.0 (#100) (3834d9a)

5.0.1 (2020-09-05)
Bug Fixes

main had old index path (#98) (124f7b0)

5.0.0 (2020-09-05)
⚠ BREAKING CHANGES

exports maps are now used, which modifies import behavior.
drops Node 6 and 4. begin following Node.js LTS schedule (#89)

Features

add support for ESM and Deno #95) (4d7ae94)



... (truncated)


Commits

See full diff in compare view



Maintainer changes
This version was pushed to npm by oss-bot, a new releaser for y18n since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,795,2021-03-30T15:35:34Z,2021-03-31T11:55:09Z,2021-03-31T11:55:17Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump y18n from 4.0.0 to 4.0.1 in /src/wrappers/themis/wasm,1,['dependencies'],https://github.com/cossacklabs/themis/pull/795,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/795#issuecomment-811005431,"Bumps y18n from 4.0.0 to 4.0.1.

Changelog
Sourced from y18n's changelog.

Change Log
All notable changes to this project will be documented in this file. See standard-version for commit guidelines.
5.0.5 (2020-10-25)
Bug Fixes

address prototype pollution issue (#108) (a9ac604)

5.0.4 (2020-10-16)
Bug Fixes

exports: node 13.0 and 13.1 require the dotted object form with a string fallback (#105) (4f85d80)

5.0.3 (2020-10-16)
Bug Fixes

exports: node 13.0-13.6 require a string fallback (#103) (e39921e)

5.0.2 (2020-10-01)
Bug Fixes

deno: update types for deno ^1.4.0 (#100) (3834d9a)

5.0.1 (2020-09-05)
Bug Fixes

main had old index path (#98) (124f7b0)

5.0.0 (2020-09-05)
⚠ BREAKING CHANGES

exports maps are now used, which modifies import behavior.
drops Node 6 and 4. begin following Node.js LTS schedule (#89)

Features

add support for ESM and Deno #95) (4d7ae94)



... (truncated)


Commits

See full diff in compare view



Maintainer changes
This version was pushed to npm by oss-bot, a new releaser for y18n since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","Y'know, I don't see any 4.0.1 published in y18n's repo, but I do see 4.0.1 published on npm... 4 months ago. Why wake up today, @dependabot?
There are people here asking WTF, but none of them is y18n's maintainer. I know it sounds funny – because the default strategy is to update whatever the dependencies are to whatever their version is because I ain't gonna inspect all 100+ transitive dependencies – but this one looks fishy and I'd hold it.
Anyhow, applying this PR is not urgent as 1) WasmThemis has zero runtime dependencies and I'd like to keep it that way, 2) it would break @maxammann's work on TypeScript which already includes an update to package-lock.json format, and includes the new version – whatever backdoors it might contain.
@dependabot close please.",True,{'THUMBS_UP': ['https://github.com/maxammann']}
cossacklabs/themis,https://github.com/cossacklabs/themis,795,2021-03-30T15:35:34Z,2021-03-31T11:55:09Z,2021-03-31T11:55:17Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump y18n from 4.0.0 to 4.0.1 in /src/wrappers/themis/wasm,1,['dependencies'],https://github.com/cossacklabs/themis/pull/795,https://github.com/apps/dependabot,3,https://github.com/cossacklabs/themis/pull/795#issuecomment-811005691,"Bumps y18n from 4.0.0 to 4.0.1.

Changelog
Sourced from y18n's changelog.

Change Log
All notable changes to this project will be documented in this file. See standard-version for commit guidelines.
5.0.5 (2020-10-25)
Bug Fixes

address prototype pollution issue (#108) (a9ac604)

5.0.4 (2020-10-16)
Bug Fixes

exports: node 13.0 and 13.1 require the dotted object form with a string fallback (#105) (4f85d80)

5.0.3 (2020-10-16)
Bug Fixes

exports: node 13.0-13.6 require a string fallback (#103) (e39921e)

5.0.2 (2020-10-01)
Bug Fixes

deno: update types for deno ^1.4.0 (#100) (3834d9a)

5.0.1 (2020-09-05)
Bug Fixes

main had old index path (#98) (124f7b0)

5.0.0 (2020-09-05)
⚠ BREAKING CHANGES

exports maps are now used, which modifies import behavior.
drops Node 6 and 4. begin following Node.js LTS schedule (#89)

Features

add support for ESM and Deno #95) (4d7ae94)



... (truncated)


Commits

See full diff in compare view



Maintainer changes
This version was pushed to npm by oss-bot, a new releaser for y18n since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting @dependabot ignore this major version or @dependabot ignore this minor version.
If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,796,2021-03-31T20:36:03Z,2021-04-01T00:48:00Z,2021-04-01T00:48:10Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump y18n from 4.0.0 to 4.0.1 in /src/wrappers/themis/jsthemis,1,['dependencies'],https://github.com/cossacklabs/themis/pull/796,https://github.com/apps/dependabot,1,https://github.com/cossacklabs/themis/pull/796,"Bumps y18n from 4.0.0 to 4.0.1.

Changelog
Sourced from y18n's changelog.

Change Log
All notable changes to this project will be documented in this file. See standard-version for commit guidelines.
5.0.5 (2020-10-25)
Bug Fixes

address prototype pollution issue (#108) (a9ac604)

5.0.4 (2020-10-16)
Bug Fixes

exports: node 13.0 and 13.1 require the dotted object form with a string fallback (#105) (4f85d80)

5.0.3 (2020-10-16)
Bug Fixes

exports: node 13.0-13.6 require a string fallback (#103) (e39921e)

5.0.2 (2020-10-01)
Bug Fixes

deno: update types for deno ^1.4.0 (#100) (3834d9a)

5.0.1 (2020-09-05)
Bug Fixes

main had old index path (#98) (124f7b0)

5.0.0 (2020-09-05)
⚠ BREAKING CHANGES

exports maps are now used, which modifies import behavior.
drops Node 6 and 4. begin following Node.js LTS schedule (#89)

Features

add support for ESM and Deno #95) (4d7ae94)



... (truncated)


Commits

See full diff in compare view



Maintainer changes
This version was pushed to npm by oss-bot, a new releaser for y18n since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","Bumps y18n from 4.0.0 to 4.0.1.

Changelog
Sourced from y18n's changelog.

Change Log
All notable changes to this project will be documented in this file. See standard-version for commit guidelines.
5.0.5 (2020-10-25)
Bug Fixes

address prototype pollution issue (#108) (a9ac604)

5.0.4 (2020-10-16)
Bug Fixes

exports: node 13.0 and 13.1 require the dotted object form with a string fallback (#105) (4f85d80)

5.0.3 (2020-10-16)
Bug Fixes

exports: node 13.0-13.6 require a string fallback (#103) (e39921e)

5.0.2 (2020-10-01)
Bug Fixes

deno: update types for deno ^1.4.0 (#100) (3834d9a)

5.0.1 (2020-09-05)
Bug Fixes

main had old index path (#98) (124f7b0)

5.0.0 (2020-09-05)
⚠ BREAKING CHANGES

exports maps are now used, which modifies import behavior.
drops Node 6 and 4. begin following Node.js LTS schedule (#89)

Features

add support for ESM and Deno #95) (4d7ae94)



... (truncated)


Commits

See full diff in compare view



Maintainer changes
This version was pushed to npm by oss-bot, a new releaser for y18n since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,796,2021-03-31T20:36:03Z,2021-04-01T00:48:00Z,2021-04-01T00:48:10Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump y18n from 4.0.0 to 4.0.1 in /src/wrappers/themis/jsthemis,1,['dependencies'],https://github.com/cossacklabs/themis/pull/796,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/796#issuecomment-811559594,"Bumps y18n from 4.0.0 to 4.0.1.

Changelog
Sourced from y18n's changelog.

Change Log
All notable changes to this project will be documented in this file. See standard-version for commit guidelines.
5.0.5 (2020-10-25)
Bug Fixes

address prototype pollution issue (#108) (a9ac604)

5.0.4 (2020-10-16)
Bug Fixes

exports: node 13.0 and 13.1 require the dotted object form with a string fallback (#105) (4f85d80)

5.0.3 (2020-10-16)
Bug Fixes

exports: node 13.0-13.6 require a string fallback (#103) (e39921e)

5.0.2 (2020-10-01)
Bug Fixes

deno: update types for deno ^1.4.0 (#100) (3834d9a)

5.0.1 (2020-09-05)
Bug Fixes

main had old index path (#98) (124f7b0)

5.0.0 (2020-09-05)
⚠ BREAKING CHANGES

exports maps are now used, which modifies import behavior.
drops Node 6 and 4. begin following Node.js LTS schedule (#89)

Features

add support for ESM and Deno #95) (4d7ae94)



... (truncated)


Commits

See full diff in compare view



Maintainer changes
This version was pushed to npm by oss-bot, a new releaser for y18n since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","Come on, @dependabot, we talked about this: #795.
It's JsThemis, aight, not WasmThemis, but the same fishiness reasoning applies here. There's no one actively working on updating JsThemis right now, but I don't think this will get merged anytime soon.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,796,2021-03-31T20:36:03Z,2021-04-01T00:48:00Z,2021-04-01T00:48:10Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump y18n from 4.0.0 to 4.0.1 in /src/wrappers/themis/jsthemis,1,['dependencies'],https://github.com/cossacklabs/themis/pull/796,https://github.com/apps/dependabot,3,https://github.com/cossacklabs/themis/pull/796#issuecomment-811559608,"Bumps y18n from 4.0.0 to 4.0.1.

Changelog
Sourced from y18n's changelog.

Change Log
All notable changes to this project will be documented in this file. See standard-version for commit guidelines.
5.0.5 (2020-10-25)
Bug Fixes

address prototype pollution issue (#108) (a9ac604)

5.0.4 (2020-10-16)
Bug Fixes

exports: node 13.0 and 13.1 require the dotted object form with a string fallback (#105) (4f85d80)

5.0.3 (2020-10-16)
Bug Fixes

exports: node 13.0-13.6 require a string fallback (#103) (e39921e)

5.0.2 (2020-10-01)
Bug Fixes

deno: update types for deno ^1.4.0 (#100) (3834d9a)

5.0.1 (2020-09-05)
Bug Fixes

main had old index path (#98) (124f7b0)

5.0.0 (2020-09-05)
⚠ BREAKING CHANGES

exports maps are now used, which modifies import behavior.
drops Node 6 and 4. begin following Node.js LTS schedule (#89)

Features

add support for ESM and Deno #95) (4d7ae94)



... (truncated)


Commits

See full diff in compare view



Maintainer changes
This version was pushed to npm by oss-bot, a new releaser for y18n since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting @dependabot ignore this major version or @dependabot ignore this minor version.
If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,797,2021-04-01T12:59:14Z,2021-04-02T11:17:55Z,2021-04-02T13:45:25Z,MERGED,True,12,0,2,https://github.com/ilammy,Set timeouts on some CI jobs,1,"['W-PyThemis :snake:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/797,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/797,"Occasionally I get an email about some random job failing after running for 6 hours. I know that compute is free for Themis, but let's make our little contribution to the environment by not wasting computing power when we can avoid that. It's not like those tasks are mining BTC.
Android builds are notoriously prone to hanging up because the emulator has such amazing quality. Currently, the build step takes about 8 minutes on average while the testing step is about 4 minutes. New timeouts should provide some leeway while not being ridiculously large.
Java unit tests are something new: only recently I was greeted by a build trace in my email which looked like this:
> Task :desktop:compileKotlin
> Task :desktop:compileJava
> Task :desktop:processResources NO-SOURCE
> Task :desktop:classes
> Task :desktop:inspectClassesForKotlinIC
> Task :desktop:jar
> Task :desktop:assemble
> Task :desktop:compileTestKotlin
> Task :desktop:compileTestJava
> Task :desktop:processTestResources NO-SOURCE
> Task :desktop:testClasses
> Task :desktop:test

[ and here it stoppped and did nothing for 5h 59m 11s ]

No idea what that was, but let's put a timeout there as well. Those jobs are just running unit tests locally, they should be quick.
Finally, occasionally I see Python examples for Secure Session to randomly hang up. It happens very rarely. I have no clue why. Maybe someone has an idea? In the meantime, that step should not go ahead and waste 6 hours if it decided it's time to take a nap.
Checklist

 Change is covered by automated tests (sure it is)
 The coding guidelines are followed","Occasionally I get an email about some random job failing after running for 6 hours. I know that compute is free for Themis, but let's make our little contribution to the environment by not wasting computing power when we can avoid that. It's not like those tasks are mining BTC.
Android builds are notoriously prone to hanging up because the emulator has such amazing quality. Currently, the build step takes about 8 minutes on average while the testing step is about 4 minutes. New timeouts should provide some leeway while not being ridiculously large.
Java unit tests are something new: only recently I was greeted by a build trace in my email which looked like this:
> Task :desktop:compileKotlin
> Task :desktop:compileJava
> Task :desktop:processResources NO-SOURCE
> Task :desktop:classes
> Task :desktop:inspectClassesForKotlinIC
> Task :desktop:jar
> Task :desktop:assemble
> Task :desktop:compileTestKotlin
> Task :desktop:compileTestJava
> Task :desktop:processTestResources NO-SOURCE
> Task :desktop:testClasses
> Task :desktop:test

[ and here it stoppped and did nothing for 5h 59m 11s ]

No idea what that was, but let's put a timeout there as well. Those jobs are just running unit tests locally, they should be quick.
Finally, occasionally I see Python examples for Secure Session to randomly hang up. It happens very rarely. I have no clue why. Maybe someone has an idea? In the meantime, that step should not go ahead and waste 6 hours if it decided it's time to take a nap.
Checklist

 Change is covered by automated tests (sure it is)
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,799,2021-04-20T10:54:08Z,2021-04-20T11:21:30Z,2021-04-20T11:21:35Z,MERGED,True,2,1,2,https://github.com/ilammy,Update zeroize to `1`,1,"['W-RustThemis :crab:', 'dependencies']",https://github.com/cossacklabs/themis/pull/799,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/799,"This is the only dependency of RustThemis and they have managed to break even that 🤦
Some bright maintainer head over there thought that it would be a great idea to just yank all 0.x versions from crates.io, breaking our build. (Since RustThemis is a library, we're not using Cargo.lock. If a dependency is yanked, we can't build our stuff.)
Well, thanks for not breaking the API in 1.x at least. You're still better than the Tokio team.
Note that zeroize requires reasonably new stable version of Rust toolchain. With 0.5.2 this has been 1.31, now it's 1.47. (The current stable version is 1.51. RustThemis tracks that version.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","This is the only dependency of RustThemis and they have managed to break even that 🤦
Some bright maintainer head over there thought that it would be a great idea to just yank all 0.x versions from crates.io, breaking our build. (Since RustThemis is a library, we're not using Cargo.lock. If a dependency is yanked, we can't build our stuff.)
Well, thanks for not breaking the API in 1.x at least. You're still better than the Tokio team.
Note that zeroize requires reasonably new stable version of Rust toolchain. With 0.5.2 this has been 1.31, now it's 1.47. (The current stable version is 1.51. RustThemis tracks that version.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,800,2021-04-20T11:25:14Z,2021-04-20T12:06:08Z,2021-04-20T12:06:12Z,MERGED,True,1,1,1,https://github.com/ilammy,Update zeroize to `1` (on stable),1,"['W-RustThemis :crab:', 'backport', 'dependencies']",https://github.com/cossacklabs/themis/pull/800,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/800,"Cherry-pick #799 onto stable to fix the build there as well.
What a waste of the 800 GET.

 task-list-completed check completed","Cherry-pick #799 onto stable to fix the build there as well.
What a waste of the 800 GET.

 task-list-completed check completed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,801,2021-04-21T10:04:38Z,2021-04-21T10:36:43Z,2021-04-21T10:36:46Z,MERGED,True,19,8,3,https://github.com/ilammy,"Test {Js,Wasm}Themis with Node.js v16",2,"['infrastructure', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:']",https://github.com/cossacklabs/themis/pull/801,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/801,"Node.js v16 has been released yesterday, becoming the new ""current"" stable release track of Node.js. It's going to turn LTS in October 2021.
Node.js v10 release is scheduled for EOL this April. However, we're still going to build and test our JavaScript stuff against it while it's still practical.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated","Node.js v16 has been released yesterday, becoming the new ""current"" stable release track of Node.js. It's going to turn LTS in October 2021.
Node.js v10 release is scheduled for EOL this April. However, we're still going to build and test our JavaScript stuff against it while it's still practical.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,802,2021-04-23T13:52:02Z,2021-04-23T14:07:54Z,2021-04-23T14:07:54Z,CLOSED,False,1,0,1,https://github.com/julepka,It is a testing PR to investigate a broken macOS signature,1,[],https://github.com/cossacklabs/themis/pull/802,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/802,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,803,2021-04-23T14:23:18Z,2021-04-27T12:04:04Z,2021-04-27T12:04:04Z,CLOSED,False,2938,1,27,https://github.com/julepka,Testing PR to fix iOS/macOS signature,8,[],https://github.com/cossacklabs/themis/pull/803,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/803,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,804,2021-04-28T11:09:40Z,2021-04-28T13:21:20Z,2021-04-28T14:52:32Z,MERGED,True,50,44,9,https://github.com/julepka,Merge Stable to Release/0.13,10,[],https://github.com/cossacklabs/themis/pull/804,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/804,Merging stable into release/0.13 preparing to release new Themis version,Merging stable into release/0.13 preparing to release new Themis version,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,804,2021-04-28T11:09:40Z,2021-04-28T13:21:20Z,2021-04-28T14:52:32Z,MERGED,True,50,44,9,https://github.com/julepka,Merge Stable to Release/0.13,10,[],https://github.com/cossacklabs/themis/pull/804,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/804#issuecomment-828386276,Merging stable into release/0.13 preparing to release new Themis version,"Well, looks okay. Just make sure to select create a merge commit when merging, not ""squash and merge"".",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,804,2021-04-28T11:09:40Z,2021-04-28T13:21:20Z,2021-04-28T14:52:32Z,MERGED,True,50,44,9,https://github.com/julepka,Merge Stable to Release/0.13,10,[],https://github.com/cossacklabs/themis/pull/804,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/804#issuecomment-828422709,Merging stable into release/0.13 preparing to release new Themis version,"We tried to cherry-pick fuzzing change (#805), but it still fails.
As code owner I use my sudo privilege to say ""ok, let's postpone dependencies issue with fuzzing for now, and do SPM release"".",True,{'THUMBS_UP': ['https://github.com/julepka']}
cossacklabs/themis,https://github.com/cossacklabs/themis,805,2021-04-28T12:10:58Z,2021-04-28T13:21:57Z,2021-04-28T13:21:57Z,CLOSED,False,1,8,1,https://github.com/julepka,"Cherry-picked  to stable: Use ""ubuntu-20.04"" for AFL fuzzing job (#790)",1,[],https://github.com/cossacklabs/themis/pull/805,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/805,"Cherry-picked ubuntu update from master to stable

Some time ago I have pinned this job to ""ubuntu-18.04"" worker because
""ubuntu-20.04"" was broken, now it's the reverse: package repos used in
""ubuntu-18.04"" contain incompatible versions of 32- and 64-bit OpenSSL.
Switch to ""ubuntu-20.04"" now that it's actually functional. Don't use
""ubuntu-latest"" because even God does not know what GitHub will use for
that label.
I have some desire to use vanilla Ubuntu 20.04 for this job to prevent
GitHub from breaking it again by piling up incompatible repositories
there again, but let's see how it rolls. (Using GitHub's images is
faster as they have most of our dependencies preinstalled.) It it breaks
again in the future -- I'm switching it to vanilla Docker image, I don't
care if it gets slower (Microsoft is paying for compute, after all).","Cherry-picked ubuntu update from master to stable

Some time ago I have pinned this job to ""ubuntu-18.04"" worker because
""ubuntu-20.04"" was broken, now it's the reverse: package repos used in
""ubuntu-18.04"" contain incompatible versions of 32- and 64-bit OpenSSL.
Switch to ""ubuntu-20.04"" now that it's actually functional. Don't use
""ubuntu-latest"" because even God does not know what GitHub will use for
that label.
I have some desire to use vanilla Ubuntu 20.04 for this job to prevent
GitHub from breaking it again by piling up incompatible repositories
there again, but let's see how it rolls. (Using GitHub's images is
faster as they have most of our dependencies preinstalled.) It it breaks
again in the future -- I'm switching it to vanilla Docker image, I don't
care if it gets slower (Microsoft is paying for compute, after all).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,805,2021-04-28T12:10:58Z,2021-04-28T13:21:57Z,2021-04-28T13:21:57Z,CLOSED,False,1,8,1,https://github.com/julepka,"Cherry-picked  to stable: Use ""ubuntu-20.04"" for AFL fuzzing job (#790)",1,[],https://github.com/cossacklabs/themis/pull/805,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/805#issuecomment-828409825,"Cherry-picked ubuntu update from master to stable

Some time ago I have pinned this job to ""ubuntu-18.04"" worker because
""ubuntu-20.04"" was broken, now it's the reverse: package repos used in
""ubuntu-18.04"" contain incompatible versions of 32- and 64-bit OpenSSL.
Switch to ""ubuntu-20.04"" now that it's actually functional. Don't use
""ubuntu-latest"" because even God does not know what GitHub will use for
that label.
I have some desire to use vanilla Ubuntu 20.04 for this job to prevent
GitHub from breaking it again by piling up incompatible repositories
there again, but let's see how it rolls. (Using GitHub's images is
faster as they have most of our dependencies preinstalled.) It it breaks
again in the future -- I'm switching it to vanilla Docker image, I don't
care if it gets slower (Microsoft is paying for compute, after all).","No idea why AFL job still fails. Here's this failing build, here's a good one from master. Virtual environment versions are the same. So why packages resolve differently? @octocat only knows... I've restarted it, maybe it would help.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,806,2021-04-28T13:36:32Z,2021-04-28T14:53:14Z,2021-05-14T11:48:03Z,MERGED,True,124,8,4,https://github.com/julepka,SPM support with XCF (#789),3,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-SPM']",https://github.com/cossacklabs/themis/pull/806,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/806,"Cherry-picked SPM support from master to release/0.13


add SPM support with XCF
add swift SPM test project
add macOS swift SPM example, updated iOS one
updates per pr comments
removed cl-openssl from Themis.xcodeproj + edits per pr comments + extra comments
removed example projects
updated xcodeproj version
updated Package.swift
updated changelog
Update CHANGELOG.md
Co-authored-by: vixentael vixentael@users.noreply.github.com
Co-authored-by: vixentael vixentael@users.noreply.github.com","Cherry-picked SPM support from master to release/0.13


add SPM support with XCF
add swift SPM test project
add macOS swift SPM example, updated iOS one
updates per pr comments
removed cl-openssl from Themis.xcodeproj + edits per pr comments + extra comments
removed example projects
updated xcodeproj version
updated Package.swift
updated changelog
Update CHANGELOG.md
Co-authored-by: vixentael vixentael@users.noreply.github.com
Co-authored-by: vixentael vixentael@users.noreply.github.com",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,807,2021-04-28T16:25:21Z,2021-04-29T07:37:08Z,2021-05-14T11:47:17Z,MERGED,True,124,8,4,https://github.com/julepka,0.13.7 release process: merge release/0.13 to stable,2,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-SPM']",https://github.com/cossacklabs/themis/pull/807,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/807,"0.13.7 release process: merge release/0.13 to stable
final merge :-)","0.13.7 release process: merge release/0.13 to stable
final merge :-)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,807,2021-04-28T16:25:21Z,2021-04-29T07:37:08Z,2021-05-14T11:47:17Z,MERGED,True,124,8,4,https://github.com/julepka,0.13.7 release process: merge release/0.13 to stable,2,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-SPM']",https://github.com/cossacklabs/themis/pull/807,https://github.com/julepka,2,https://github.com/cossacklabs/themis/pull/807#issuecomment-829008738,"0.13.7 release process: merge release/0.13 to stable
final merge :-)",Looks like tests are failing because python on CircleCI is not in a good mood. A couple of tests became green by themself and one is still failing with the same other as the other did.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,808,2021-04-30T13:43:18Z,2021-04-30T14:46:24Z,2021-05-14T11:46:45Z,MERGED,True,5615,11,72,https://github.com/julepka,OpenSSL 1.1.1k for iOS/macOS XCF and SPM,1,"['O-iOS :iphone:', 'O-macOS :computer:', 'dependencies', 'M-SPM']",https://github.com/cossacklabs/themis/pull/808,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/808,"Updated OpenSSL to the latest 1.1.1k for SMP and attached themis.xcframework. It is openssl-apple version 1.1.11101.
New Swift and Objective-C example projects: SPM for iOS and macOS.
Updated SPM examples source code to remove deprecated calls.

We are going to update releasing and public docs after that release.
Checklist

 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Updated OpenSSL to the latest 1.1.1k for SMP and attached themis.xcframework. It is openssl-apple version 1.1.11101.
New Swift and Objective-C example projects: SPM for iOS and macOS.
Updated SPM examples source code to remove deprecated calls.

We are going to update releasing and public docs after that release.
Checklist

 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,809,2021-04-30T15:00:55Z,2021-04-30T15:36:33Z,2021-05-14T11:46:19Z,MERGED,True,5615,11,72,https://github.com/julepka,merge release 0.13.8 into stable,2,"['O-iOS :iphone:', 'O-macOS :computer:', 'dependencies', 'M-SPM']",https://github.com/cossacklabs/themis/pull/809,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/809,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,810,2021-05-01T10:28:47Z,2021-05-11T20:05:14Z,2021-05-11T20:05:20Z,MERGED,True,1798,600,4,https://github.com/ilammy,Build Themis + BoringSSL with Xcode,9,"['O-iOS :iphone:', 'O-macOS :computer:', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/810,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/810,"Now that Xcode knows how to build embedded BoringSSL, teach it to build Themis which uses this BoringSSL.
This adds two new targets:

Themis (iOS) - BoringSSL
Themis (macOS) - BoringSSL

which produce the same themis.framework, but linked against BoringSSL.
Note that these come without shared schemes. This is to prevent Carthage from building them and overwriting OpenSSL-based builds. The targets build the same framework—themis.framework—and Carthage is too stupid to put results into separate directories or something.
That is, right now this should not affect users in any way. Only the developers are able to build Themis with BoringSSL, and the main purpose of this PR is allow experimentation with BoringSSL-based builds. Strategy for BoringSSL support and transition are to be decided later: there are many options, each with their own tradeoffs. Right now we should focus on testing whether BoringSSL is a viable alternative at all.
That said, this PR does add some new testing targets which are exercised on GitHub Actions.
This PR builds on top of #743 and should be rebased and merged after that PR is merged.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (it's not time)
 Changelog is updated (not needed, IMO)
 Rebased after #743 is merged","Now that Xcode knows how to build embedded BoringSSL, teach it to build Themis which uses this BoringSSL.
This adds two new targets:

Themis (iOS) - BoringSSL
Themis (macOS) - BoringSSL

which produce the same themis.framework, but linked against BoringSSL.
Note that these come without shared schemes. This is to prevent Carthage from building them and overwriting OpenSSL-based builds. The targets build the same framework—themis.framework—and Carthage is too stupid to put results into separate directories or something.
That is, right now this should not affect users in any way. Only the developers are able to build Themis with BoringSSL, and the main purpose of this PR is allow experimentation with BoringSSL-based builds. Strategy for BoringSSL support and transition are to be decided later: there are many options, each with their own tradeoffs. Right now we should focus on testing whether BoringSSL is a viable alternative at all.
That said, this PR does add some new testing targets which are exercised on GitHub Actions.
This PR builds on top of #743 and should be rebased and merged after that PR is merged.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (it's not time)
 Changelog is updated (not needed, IMO)
 Rebased after #743 is merged",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,810,2021-05-01T10:28:47Z,2021-05-11T20:05:14Z,2021-05-11T20:05:20Z,MERGED,True,1798,600,4,https://github.com/ilammy,Build Themis + BoringSSL with Xcode,9,"['O-iOS :iphone:', 'O-macOS :computer:', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/810,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/810#issuecomment-833876044,"Now that Xcode knows how to build embedded BoringSSL, teach it to build Themis which uses this BoringSSL.
This adds two new targets:

Themis (iOS) - BoringSSL
Themis (macOS) - BoringSSL

which produce the same themis.framework, but linked against BoringSSL.
Note that these come without shared schemes. This is to prevent Carthage from building them and overwriting OpenSSL-based builds. The targets build the same framework—themis.framework—and Carthage is too stupid to put results into separate directories or something.
That is, right now this should not affect users in any way. Only the developers are able to build Themis with BoringSSL, and the main purpose of this PR is allow experimentation with BoringSSL-based builds. Strategy for BoringSSL support and transition are to be decided later: there are many options, each with their own tradeoffs. Right now we should focus on testing whether BoringSSL is a viable alternative at all.
That said, this PR does add some new testing targets which are exercised on GitHub Actions.
This PR builds on top of #743 and should be rebased and merged after that PR is merged.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (it's not time)
 Changelog is updated (not needed, IMO)
 Rebased after #743 is merged","which produce the same themis.framework, but linked against BoringSSL.

right now we are working on switching to XCF, because .framework doesn't support iOS simulator on M1.
To prevent mixing current xcode-related work and BoringSSL builds, I suggest to merge #743 and #810 to a separate branch.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,810,2021-05-01T10:28:47Z,2021-05-11T20:05:14Z,2021-05-11T20:05:20Z,MERGED,True,1798,600,4,https://github.com/ilammy,Build Themis + BoringSSL with Xcode,9,"['O-iOS :iphone:', 'O-macOS :computer:', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/810,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/810#issuecomment-833933789,"Now that Xcode knows how to build embedded BoringSSL, teach it to build Themis which uses this BoringSSL.
This adds two new targets:

Themis (iOS) - BoringSSL
Themis (macOS) - BoringSSL

which produce the same themis.framework, but linked against BoringSSL.
Note that these come without shared schemes. This is to prevent Carthage from building them and overwriting OpenSSL-based builds. The targets build the same framework—themis.framework—and Carthage is too stupid to put results into separate directories or something.
That is, right now this should not affect users in any way. Only the developers are able to build Themis with BoringSSL, and the main purpose of this PR is allow experimentation with BoringSSL-based builds. Strategy for BoringSSL support and transition are to be decided later: there are many options, each with their own tradeoffs. Right now we should focus on testing whether BoringSSL is a viable alternative at all.
That said, this PR does add some new testing targets which are exercised on GitHub Actions.
This PR builds on top of #743 and should be rebased and merged after that PR is merged.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (it's not time)
 Changelog is updated (not needed, IMO)
 Rebased after #743 is merged","because .framework doesn't support iOS simulator on M1

XCFs are composed from frameworks so this wouldn't change much. @julepka's scripts are working just fine, with one less dependency.

I suggest to merge #743 and #810 to a separate branch

Fair call. Though, it might be a bit painful to merge it back later.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,811,2021-05-05T15:46:27Z,2021-05-06T14:04:06Z,2021-05-14T11:45:19Z,CLOSED,False,5619,14,72,https://github.com/julepka,Merge stable into master (PR for visibility),14,"['O-iOS :iphone:', 'O-macOS :computer:', 'dependencies', 'M-SPM']",https://github.com/cossacklabs/themis/pull/811,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/811,"Finishing with our SPM release we need to do the final merge stable -> master.
This PR is for visibility to show the result I'm getting. If it is ok, I'll push my changes to master after this PR is reviewed.
What were the conflicts:
.circleci/config.yml - resolved in favor of master
.github/workflows/test-core.yaml - resolned in favor of master
Package.swift - resolved in favor of stable
Themis.xcodeproj/project.pbxproj  - resolved in favor of stable master with updated version
CHANGELOG.md - edited manually","Finishing with our SPM release we need to do the final merge stable -> master.
This PR is for visibility to show the result I'm getting. If it is ok, I'll push my changes to master after this PR is reviewed.
What were the conflicts:
.circleci/config.yml - resolved in favor of master
.github/workflows/test-core.yaml - resolned in favor of master
Package.swift - resolved in favor of stable
Themis.xcodeproj/project.pbxproj  - resolved in favor of stable master with updated version
CHANGELOG.md - edited manually",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,811,2021-05-05T15:46:27Z,2021-05-06T14:04:06Z,2021-05-14T11:45:19Z,CLOSED,False,5619,14,72,https://github.com/julepka,Merge stable into master (PR for visibility),14,"['O-iOS :iphone:', 'O-macOS :computer:', 'dependencies', 'M-SPM']",https://github.com/cossacklabs/themis/pull/811,https://github.com/julepka,2,https://github.com/cossacklabs/themis/pull/811#issuecomment-832804836,"Finishing with our SPM release we need to do the final merge stable -> master.
This PR is for visibility to show the result I'm getting. If it is ok, I'll push my changes to master after this PR is reviewed.
What were the conflicts:
.circleci/config.yml - resolved in favor of master
.github/workflows/test-core.yaml - resolned in favor of master
Package.swift - resolved in favor of stable
Themis.xcodeproj/project.pbxproj  - resolved in favor of stable master with updated version
CHANGELOG.md - edited manually",Looks like resolving Themis.xcodeproj in favor of stable doesn't work 😞 Carthage tests are failing,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,811,2021-05-05T15:46:27Z,2021-05-06T14:04:06Z,2021-05-14T11:45:19Z,CLOSED,False,5619,14,72,https://github.com/julepka,Merge stable into master (PR for visibility),14,"['O-iOS :iphone:', 'O-macOS :computer:', 'dependencies', 'M-SPM']",https://github.com/cossacklabs/themis/pull/811,https://github.com/julepka,3,https://github.com/cossacklabs/themis/pull/811#issuecomment-832831490,"Finishing with our SPM release we need to do the final merge stable -> master.
This PR is for visibility to show the result I'm getting. If it is ok, I'll push my changes to master after this PR is reviewed.
What were the conflicts:
.circleci/config.yml - resolved in favor of master
.github/workflows/test-core.yaml - resolned in favor of master
Package.swift - resolved in favor of stable
Themis.xcodeproj/project.pbxproj  - resolved in favor of stable master with updated version
CHANGELOG.md - edited manually",force-pushed another version of the merge commit. Here I merged Themis.xcodeproj in favor of master but with the manual update of version fields,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,811,2021-05-05T15:46:27Z,2021-05-06T14:04:06Z,2021-05-14T11:45:19Z,CLOSED,False,5619,14,72,https://github.com/julepka,Merge stable into master (PR for visibility),14,"['O-iOS :iphone:', 'O-macOS :computer:', 'dependencies', 'M-SPM']",https://github.com/cossacklabs/themis/pull/811,https://github.com/julepka,4,https://github.com/cossacklabs/themis/pull/811#issuecomment-832894976,"Finishing with our SPM release we need to do the final merge stable -> master.
This PR is for visibility to show the result I'm getting. If it is ok, I'll push my changes to master after this PR is reviewed.
What were the conflicts:
.circleci/config.yml - resolved in favor of master
.github/workflows/test-core.yaml - resolned in favor of master
Package.swift - resolved in favor of stable
Themis.xcodeproj/project.pbxproj  - resolved in favor of stable master with updated version
CHANGELOG.md - edited manually","Well, the Carthage project builds okay when I run it locally. It just takes much time to download zip files. And the test is failing due to timeout...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,811,2021-05-05T15:46:27Z,2021-05-06T14:04:06Z,2021-05-14T11:45:19Z,CLOSED,False,5619,14,72,https://github.com/julepka,Merge stable into master (PR for visibility),14,"['O-iOS :iphone:', 'O-macOS :computer:', 'dependencies', 'M-SPM']",https://github.com/cossacklabs/themis/pull/811,https://github.com/julepka,5,https://github.com/cossacklabs/themis/pull/811#issuecomment-832905807,"Finishing with our SPM release we need to do the final merge stable -> master.
This PR is for visibility to show the result I'm getting. If it is ok, I'll push my changes to master after this PR is reviewed.
What were the conflicts:
.circleci/config.yml - resolved in favor of master
.github/workflows/test-core.yaml - resolned in favor of master
Package.swift - resolved in favor of stable
Themis.xcodeproj/project.pbxproj  - resolved in favor of stable master with updated version
CHANGELOG.md - edited manually",Hurray! All green )),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,812,2021-05-06T23:45:12Z,2021-07-19T13:15:41Z,2021-07-19T13:17:19Z,MERGED,True,4,1,2,https://github.com/ilammy,Update embedded BoringSSL,5,"['C-BoringSSL', 'dependencies']",https://github.com/cossacklabs/themis/pull/812,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/812,"Bump the submodule with new changes. There is nothing major for us, but keep syncing it up.
Some interesting parts:

81a998a63 Bump minimum CMake version
a0b49d63f aarch64: support BTI and pointer authentication in assembly
80e3f957e Support 4096-bit keys in FIPS mode
83a3f462c Add AES-GCM AEADs with internal nonce generation

This is a branch in the main repo, feel free to hijack it and keep the PR open for longer if you don't want multiple BoringSSL updates before the 0.14 release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Bump the submodule with new changes. There is nothing major for us, but keep syncing it up.
Some interesting parts:

81a998a63 Bump minimum CMake version
a0b49d63f aarch64: support BTI and pointer authentication in assembly
80e3f957e Support 4096-bit keys in FIPS mode
83a3f462c Add AES-GCM AEADs with internal nonce generation

This is a branch in the main repo, feel free to hijack it and keep the PR open for longer if you don't want multiple BoringSSL updates before the 0.14 release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,812,2021-05-06T23:45:12Z,2021-07-19T13:15:41Z,2021-07-19T13:17:19Z,MERGED,True,4,1,2,https://github.com/ilammy,Update embedded BoringSSL,5,"['C-BoringSSL', 'dependencies']",https://github.com/cossacklabs/themis/pull/812,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/812#issuecomment-838493919,"Bump the submodule with new changes. There is nothing major for us, but keep syncing it up.
Some interesting parts:

81a998a63 Bump minimum CMake version
a0b49d63f aarch64: support BTI and pointer authentication in assembly
80e3f957e Support 4096-bit keys in FIPS mode
83a3f462c Add AES-GCM AEADs with internal nonce generation

This is a branch in the main repo, feel free to hijack it and keep the PR open for longer if you don't want multiple BoringSSL updates before the 0.14 release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","I actually think that's fine to update BorinSSL before/during 0.14.
This update won't affect pieces of what we're doing now (aka iOS XCF), so I'm into merging it!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,812,2021-05-06T23:45:12Z,2021-07-19T13:15:41Z,2021-07-19T13:17:19Z,MERGED,True,4,1,2,https://github.com/ilammy,Update embedded BoringSSL,5,"['C-BoringSSL', 'dependencies']",https://github.com/cossacklabs/themis/pull/812,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/812#issuecomment-855333970,"Bump the submodule with new changes. There is nothing major for us, but keep syncing it up.
Some interesting parts:

81a998a63 Bump minimum CMake version
a0b49d63f aarch64: support BTI and pointer authentication in assembly
80e3f957e Support 4096-bit keys in FIPS mode
83a3f462c Add AES-GCM AEADs with internal nonce generation

This is a branch in the main repo, feel free to hijack it and keep the PR open for longer if you don't want multiple BoringSSL updates before the 0.14 release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Just keeping the branch in sync and ready to be merged when you're ready.
New changes in BoringSSL that affect Themis:

29507b818 Validate RSA public keys more consistently",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,812,2021-05-06T23:45:12Z,2021-07-19T13:15:41Z,2021-07-19T13:17:19Z,MERGED,True,4,1,2,https://github.com/ilammy,Update embedded BoringSSL,5,"['C-BoringSSL', 'dependencies']",https://github.com/cossacklabs/themis/pull/812,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/812#issuecomment-882512380,"Bump the submodule with new changes. There is nothing major for us, but keep syncing it up.
Some interesting parts:

81a998a63 Bump minimum CMake version
a0b49d63f aarch64: support BTI and pointer authentication in assembly
80e3f957e Support 4096-bit keys in FIPS mode
83a3f462c Add AES-GCM AEADs with internal nonce generation

This is a branch in the main repo, feel free to hijack it and keep the PR open for longer if you don't want multiple BoringSSL updates before the 0.14 release.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","One more sync with master to resolve conflicts. One more BoringSSL update (no interesting changes this time).
Once CI passes, I'm squashing and merging this.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,813,2021-05-08T05:19:20Z,2021-05-11T19:03:56Z,2021-05-11T19:04:00Z,MERGED,True,846,0,35,https://github.com/ilammy,Assimilate Android example project,17,"['docs :books:', 'O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/813,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/813,"Instead of keeping it in the cossacklabs/themis-java-examples ghetto, allow the example to join the warm monorepo family.
On Gradle
Note that this example uses Gradle, like Themis project itself, but the example is completely independent of the top-level Gradle project. It even uses a different version of Gradle wrapper because that's what Android Studio insists on. I'd like to keep it that way, so that users are able to copy and paste the project directory and get a working example.
The example is also tied to a published version of AndroidThemis, not the one being developed in the source tree. Maintainers will have to update the dependency manually, similar to how macOS/iOS examples work.
On dependency updates
Standard operating procedure is in effect: before you do anything, blindly apply whatever updates Android Studio shoves down your throat, or else you'll regret it later.
On Kotlin migration
I'm converting Android example to Kotlin because that's how most Android stuff is developed these days. Java is really a legacy language there. Java 16 is the current version. Android has mostly Java 7 with some selected bits of Java 8. Go figure.
JavaThemis will have its own separate example using Java specifically. AndroidThemis now has a Kotlin showcase.
On automated tests
Just build the example to make sure it's not completely broken. It would be cool to test the resulting application but that opens up a whole new time hell hole, with launching emulators and stuff. I have no desire to dive there at the moment.
Future work
This PR only migrates existing code. It would be nice to revision the example to make it nicer and more native, but that's a story for another day.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","Instead of keeping it in the cossacklabs/themis-java-examples ghetto, allow the example to join the warm monorepo family.
On Gradle
Note that this example uses Gradle, like Themis project itself, but the example is completely independent of the top-level Gradle project. It even uses a different version of Gradle wrapper because that's what Android Studio insists on. I'd like to keep it that way, so that users are able to copy and paste the project directory and get a working example.
The example is also tied to a published version of AndroidThemis, not the one being developed in the source tree. Maintainers will have to update the dependency manually, similar to how macOS/iOS examples work.
On dependency updates
Standard operating procedure is in effect: before you do anything, blindly apply whatever updates Android Studio shoves down your throat, or else you'll regret it later.
On Kotlin migration
I'm converting Android example to Kotlin because that's how most Android stuff is developed these days. Java is really a legacy language there. Java 16 is the current version. Android has mostly Java 7 with some selected bits of Java 8. Go figure.
JavaThemis will have its own separate example using Java specifically. AndroidThemis now has a Kotlin showcase.
On automated tests
Just build the example to make sure it's not completely broken. It would be cool to test the resulting application but that opens up a whole new time hell hole, with launching emulators and stuff. I have no desire to dive there at the moment.
Future work
This PR only migrates existing code. It would be nice to revision the example to make it nicer and more native, but that's a story for another day.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,813,2021-05-08T05:19:20Z,2021-05-11T19:03:56Z,2021-05-11T19:04:00Z,MERGED,True,846,0,35,https://github.com/ilammy,Assimilate Android example project,17,"['docs :books:', 'O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/813,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/813#issuecomment-838489684,"Instead of keeping it in the cossacklabs/themis-java-examples ghetto, allow the example to join the warm monorepo family.
On Gradle
Note that this example uses Gradle, like Themis project itself, but the example is completely independent of the top-level Gradle project. It even uses a different version of Gradle wrapper because that's what Android Studio insists on. I'd like to keep it that way, so that users are able to copy and paste the project directory and get a working example.
The example is also tied to a published version of AndroidThemis, not the one being developed in the source tree. Maintainers will have to update the dependency manually, similar to how macOS/iOS examples work.
On dependency updates
Standard operating procedure is in effect: before you do anything, blindly apply whatever updates Android Studio shoves down your throat, or else you'll regret it later.
On Kotlin migration
I'm converting Android example to Kotlin because that's how most Android stuff is developed these days. Java is really a legacy language there. Java 16 is the current version. Android has mostly Java 7 with some selected bits of Java 8. Go figure.
JavaThemis will have its own separate example using Java specifically. AndroidThemis now has a Kotlin showcase.
On automated tests
Just build the example to make sure it's not completely broken. It would be cool to test the resulting application but that opens up a whole new time hell hole, with launching emulators and stuff. I have no desire to dive there at the moment.
Future work
This PR only migrates existing code. It would be nice to revision the example to make it nicer and more native, but that's a story for another day.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","The example is also tied to a published version of AndroidThemis

I like when examples are tied to the published version. So stable, so nice.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,813,2021-05-08T05:19:20Z,2021-05-11T19:03:56Z,2021-05-11T19:04:00Z,MERGED,True,846,0,35,https://github.com/ilammy,Assimilate Android example project,17,"['docs :books:', 'O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/813,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/813#issuecomment-838779437,"Instead of keeping it in the cossacklabs/themis-java-examples ghetto, allow the example to join the warm monorepo family.
On Gradle
Note that this example uses Gradle, like Themis project itself, but the example is completely independent of the top-level Gradle project. It even uses a different version of Gradle wrapper because that's what Android Studio insists on. I'd like to keep it that way, so that users are able to copy and paste the project directory and get a working example.
The example is also tied to a published version of AndroidThemis, not the one being developed in the source tree. Maintainers will have to update the dependency manually, similar to how macOS/iOS examples work.
On dependency updates
Standard operating procedure is in effect: before you do anything, blindly apply whatever updates Android Studio shoves down your throat, or else you'll regret it later.
On Kotlin migration
I'm converting Android example to Kotlin because that's how most Android stuff is developed these days. Java is really a legacy language there. Java 16 is the current version. Android has mostly Java 7 with some selected bits of Java 8. Go figure.
JavaThemis will have its own separate example using Java specifically. AndroidThemis now has a Kotlin showcase.
On automated tests
Just build the example to make sure it's not completely broken. It would be cool to test the resulting application but that opens up a whole new time hell hole, with launching emulators and stuff. I have no desire to dive there at the moment.
Future work
This PR only migrates existing code. It would be nice to revision the example to make it nicer and more native, but that's a story for another day.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","I like when examples are tied to the published version. So stable, so nice.

The downside is that you can only check if they work with the new version of the code only after that version is released. Which is a bit... suboptimal.
I mean, ideally unit-tests should cover all APIs and prevent breaking changes there. While examples are more like integration tests for packaging and publishing – which you can't do without packaging and publishing. But still, ideally you should be able to perform those tests without risking to break anything for our users. Though, the only real way for that, I believe, is to have some publicly released and available themis-next package where we can release versions whenever, name them whatever, break them however.
In obnoxious cases like iOS I can only shrug, put on my shades, and say, “That's what you're paying those $99/year for, enjoy it”. But it does not mean everything has to be as bad. In Android case, for example, we could build a JAR, install it into the local Maven repository, and it wouldn't suspect a thing.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,814,2021-05-08T07:13:55Z,2021-05-11T10:18:00Z,2021-05-11T18:39:11Z,MERGED,True,2343,14,2,https://github.com/ilammy,Update npm lockfiles,1,"['W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies']",https://github.com/cossacklabs/themis/pull/814,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/814,"Update npm lockfile format. We don't get a say here.
Update some dependencies with it, resolving some security advisories:

CVE-2020-7774 Prototype Pollution in y18n
CVE-2021-23337 Command Injection in lodash

These are not terribly important since they do not affect our users, only potentially affect the CI environment.
Checklist

 Change is covered by automated tests
 Changelog is updated (don't think it's necessary)","Update npm lockfile format. We don't get a say here.
Update some dependencies with it, resolving some security advisories:

CVE-2020-7774 Prototype Pollution in y18n
CVE-2021-23337 Command Injection in lodash

These are not terribly important since they do not affect our users, only potentially affect the CI environment.
Checklist

 Change is covered by automated tests
 Changelog is updated (don't think it's necessary)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,815,2021-05-08T14:02:39Z,2021-05-08T14:23:44Z,2021-05-08T14:23:55Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump lodash from 4.17.19 to 4.17.21 in /src/wrappers/themis/wasm,1,['dependencies'],https://github.com/cossacklabs/themis/pull/815,https://github.com/apps/dependabot,1,https://github.com/cossacklabs/themis/pull/815,"Bumps lodash from 4.17.19 to 4.17.21.

Commits

f299b52 Bump to v4.17.21
c4847eb Improve performance of toNumber, trim and trimEnd on large input strings
3469357 Prevent command injection through _.template's variable option
ded9bc6 Bump to v4.17.20.
63150ef Documentation fixes.
00f0f62 test.js: Remove trailing comma.
846e434 Temporarily use a custom fork of lodash-cli.
5d046f3 Re-enable Travis tests on 4.17 branch.
aa816b3 Remove /npm-package.
See full diff in compare view



Maintainer changes
This version was pushed to npm by bnjmnt4n, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","Bumps lodash from 4.17.19 to 4.17.21.

Commits

f299b52 Bump to v4.17.21
c4847eb Improve performance of toNumber, trim and trimEnd on large input strings
3469357 Prevent command injection through _.template's variable option
ded9bc6 Bump to v4.17.20.
63150ef Documentation fixes.
00f0f62 test.js: Remove trailing comma.
846e434 Temporarily use a custom fork of lodash-cli.
5d046f3 Re-enable Travis tests on 4.17 branch.
aa816b3 Remove /npm-package.
See full diff in compare view



Maintainer changes
This version was pushed to npm by bnjmnt4n, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,815,2021-05-08T14:02:39Z,2021-05-08T14:23:44Z,2021-05-08T14:23:55Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump lodash from 4.17.19 to 4.17.21 in /src/wrappers/themis/wasm,1,['dependencies'],https://github.com/cossacklabs/themis/pull/815,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/815#issuecomment-835382875,"Bumps lodash from 4.17.19 to 4.17.21.

Commits

f299b52 Bump to v4.17.21
c4847eb Improve performance of toNumber, trim and trimEnd on large input strings
3469357 Prevent command injection through _.template's variable option
ded9bc6 Bump to v4.17.20.
63150ef Documentation fixes.
00f0f62 test.js: Remove trailing comma.
846e434 Temporarily use a custom fork of lodash-cli.
5d046f3 Re-enable Travis tests on 4.17 branch.
aa816b3 Remove /npm-package.
See full diff in compare view



Maintainer changes
This version was pushed to npm by bnjmnt4n, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","@dependabot, you're too slow, see #814.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,815,2021-05-08T14:02:39Z,2021-05-08T14:23:44Z,2021-05-08T14:23:55Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump lodash from 4.17.19 to 4.17.21 in /src/wrappers/themis/wasm,1,['dependencies'],https://github.com/cossacklabs/themis/pull/815,https://github.com/apps/dependabot,3,https://github.com/cossacklabs/themis/pull/815#issuecomment-835382886,"Bumps lodash from 4.17.19 to 4.17.21.

Commits

f299b52 Bump to v4.17.21
c4847eb Improve performance of toNumber, trim and trimEnd on large input strings
3469357 Prevent command injection through _.template's variable option
ded9bc6 Bump to v4.17.20.
63150ef Documentation fixes.
00f0f62 test.js: Remove trailing comma.
846e434 Temporarily use a custom fork of lodash-cli.
5d046f3 Re-enable Travis tests on 4.17 branch.
aa816b3 Remove /npm-package.
See full diff in compare view



Maintainer changes
This version was pushed to npm by bnjmnt4n, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting @dependabot ignore this major version or @dependabot ignore this minor version.
If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,816,2021-05-09T04:32:42Z,2021-05-11T20:04:37Z,2021-05-11T20:04:41Z,MERGED,True,617,0,12,https://github.com/ilammy,Assimilate Java example project,6,"['docs :books:', 'W-JavaThemis :coffee:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/816,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/816,"Similar to #813, move (desktop) Java example project into the monorepo instead of keeping it in the cossacklabs/themis-java-examples ghetto.
On Gradle
There are some minor adjustments to the project layout, to keep Gradle from freaking out about top-level build configuration. Java example project is kept a separate Gradle project, independent from the top-level one.
On Java
This is an example of desktop JavaThemis usage, so it naturally uses Java and should continue doing so. We might want to migrate that to a newer Java versions later. Right now it's mostly version-agnostic, having a bottom line of Java 7.
On dependencies and automated tests
Similarly, this project uses published JavaThemis from Maven Central. Themis JNI and Themis Core are also expected to be installed (separately, as they don't come packaged from Maven Central).
Automated tests do check that the example can be built and run. It's not my ideal, things can be improved from there, but that's at least a smoke check that example source code is not completely broken.
On documentation
Admittedly, it's lacking. For example, macOS users will most likely have to configure their java.library.path in order to be able to run the resulting application. It would be nice to have these docs around in the repo directly, but I'd focus on updating the doc server now – that's where most of our “how to run examples” documentation is located.
Future work
Just like in #813, I make no effort to improve to code style or the substance of examples. That might come later.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated","Similar to #813, move (desktop) Java example project into the monorepo instead of keeping it in the cossacklabs/themis-java-examples ghetto.
On Gradle
There are some minor adjustments to the project layout, to keep Gradle from freaking out about top-level build configuration. Java example project is kept a separate Gradle project, independent from the top-level one.
On Java
This is an example of desktop JavaThemis usage, so it naturally uses Java and should continue doing so. We might want to migrate that to a newer Java versions later. Right now it's mostly version-agnostic, having a bottom line of Java 7.
On dependencies and automated tests
Similarly, this project uses published JavaThemis from Maven Central. Themis JNI and Themis Core are also expected to be installed (separately, as they don't come packaged from Maven Central).
Automated tests do check that the example can be built and run. It's not my ideal, things can be improved from there, but that's at least a smoke check that example source code is not completely broken.
On documentation
Admittedly, it's lacking. For example, macOS users will most likely have to configure their java.library.path in order to be able to run the resulting application. It would be nice to have these docs around in the repo directly, but I'd focus on updating the doc server now – that's where most of our “how to run examples” documentation is located.
Future work
Just like in #813, I make no effort to improve to code style or the substance of examples. That might come later.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,817,2021-05-10T15:37:56Z,2021-05-14T08:56:26Z,2021-05-14T11:44:12Z,MERGED,True,109,111,6,https://github.com/julepka,Carthage XCF support and OpenSSL 1.1.1k,8,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/817,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/817,"Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)","Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,817,2021-05-10T15:37:56Z,2021-05-14T08:56:26Z,2021-05-14T11:44:12Z,MERGED,True,109,111,6,https://github.com/julepka,Carthage XCF support and OpenSSL 1.1.1k,8,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/817,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/817#issuecomment-838504789,"Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)","I agree with @ilammy notes.
Also I read on Carthage release page, that building process requires running Carthage twice
Support for making an xcframework archive will be added in a future release. 
For now, manually create archives by building twice: once with the --use-xcframeworks option, and once without. 
Then, create a zip from the Carthage/Build folder.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,817,2021-05-10T15:37:56Z,2021-05-14T08:56:26Z,2021-05-14T11:44:12Z,MERGED,True,109,111,6,https://github.com/julepka,Carthage XCF support and OpenSSL 1.1.1k,8,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/817,https://github.com/julepka,3,https://github.com/cossacklabs/themis/pull/817#issuecomment-838701510,"Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)","@ilammy @vixentael

Do I understand it correctly that this version of Themis will not work and is not expected to work with older versions of Carthage, and we're not going to provide a workaround? (I.e., if you're stuck with old Carthage then you're stuck with old Themis.)
If so, I believe we must make a note in changelog about the minimum required version of Carthage and implications of this.

Yes, that is correct. Our OpenSSL fork moved to XCF usage and the only way to support it with Carthage is to update the Carthage. Otherwise, you need to use old Themis with old OpenSSL. As we don't plan to support fat frameworks for OpenSSL we are not going to add any workaround here. Sure, I'll add it to the changelog.

CI is also all red for now. If you're in hyper hurry to release this, I think it might be okay to just merge this as is, but it would be better to stick some brew upgrade carthage into CI pipelines to get the latest version used until it makes its way to the base images.

I'm not in a hurry 🙂 Now I see where CI is red and I will fix it. The only thing that is postponed is updating example projects because we need to do the release to be able to reference it.

(Also, not critical, but recent changelog entries don't link back to PRs with changes. It would be nice to backlink them at some point.)

Sure, we'll do",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,817,2021-05-10T15:37:56Z,2021-05-14T08:56:26Z,2021-05-14T11:44:12Z,MERGED,True,109,111,6,https://github.com/julepka,Carthage XCF support and OpenSSL 1.1.1k,8,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/817,https://github.com/julepka,4,https://github.com/cossacklabs/themis/pull/817#issuecomment-838720290,"Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)","Also I read on Carthage release page, that building process requires running Carthage twice
Support for making an xcframework archive will be added in a future release. 
For now, manually create archives by building twice: once with the --use-xcframeworks option, and once without. 
Then, create a zip from the Carthage/Build folder.


I don't fully understand what do they mean here. For our Carthage example project it was enough to run the next command and that's it.
carthage update --use-xcframeworks

It downloaded openssl.xcframework and created themis.xcframework with all the needed slices.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,817,2021-05-10T15:37:56Z,2021-05-14T08:56:26Z,2021-05-14T11:44:12Z,MERGED,True,109,111,6,https://github.com/julepka,Carthage XCF support and OpenSSL 1.1.1k,8,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/817,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/817#issuecomment-838724677,"Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)","I don't fully understand what do they mean here

Maybe they mean this https://github.com/Carthage/Carthage#archive-prebuilt-frameworks-into-zip-files",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,817,2021-05-10T15:37:56Z,2021-05-14T08:56:26Z,2021-05-14T11:44:12Z,MERGED,True,109,111,6,https://github.com/julepka,Carthage XCF support and OpenSSL 1.1.1k,8,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/817,https://github.com/julepka,6,https://github.com/cossacklabs/themis/pull/817#issuecomment-840476129,"Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)","I've put back the arm64 workaround for example projects. Also, replaced regular themis.framework in unit tests with themis.xcframeworks. Added --use-xcframeworks flag, so Carthage build themis as XCF",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,817,2021-05-10T15:37:56Z,2021-05-14T08:56:26Z,2021-05-14T11:44:12Z,MERGED,True,109,111,6,https://github.com/julepka,Carthage XCF support and OpenSSL 1.1.1k,8,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/817,https://github.com/julepka,7,https://github.com/cossacklabs/themis/pull/817#issuecomment-840516146,"Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)","Okay, regarding tests:
Unit tests (CocoaPods) - good
Unit tests (Carthage) - good
Carthage project - was good, became red for no reason (API rate limit, timeout, Carthage cache errors)
CocoaPods project - good
Code examples - macOS Carthage failing due to API rate limit... Hmmm...
@ilammy @vixentael Does it make sense to break up our iOS/macOS tests into 2 parts because of constantly hitting the API rate limit? I don't understand why macOS only examples are having this problem.... hmm... Another thought is that we will be updating our tests to support the latest Themis version, and maybe the issue will be resolved on its own... Also, right now example projects may be mixing regular frameworks and XCF and it may be causing some issues as well.
Okay. As for now, it looks like tests are passing well enough. I will continue with PR edits (per comments above).",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,817,2021-05-10T15:37:56Z,2021-05-14T08:56:26Z,2021-05-14T11:44:12Z,MERGED,True,109,111,6,https://github.com/julepka,Carthage XCF support and OpenSSL 1.1.1k,8,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/817,https://github.com/vixentael,8,https://github.com/cossacklabs/themis/pull/817#issuecomment-840525625,"Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)","@ilammy @vixentael Does it make sense to break up our iOS/macOS tests into 2 parts because of constantly hitting the API rate limit?

yes, we can try to split those tests but in a separate PR",True,{'THUMBS_UP': ['https://github.com/julepka']}
cossacklabs/themis,https://github.com/cossacklabs/themis,817,2021-05-10T15:37:56Z,2021-05-14T08:56:26Z,2021-05-14T11:44:12Z,MERGED,True,109,111,6,https://github.com/julepka,Carthage XCF support and OpenSSL 1.1.1k,8,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/817,https://github.com/ilammy,9,https://github.com/cossacklabs/themis/pull/817#issuecomment-840565555,"Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)","Does it make sense to break up our iOS/macOS tests into 2 parts because of constantly hitting the API rate limit?

I'm not sure it would help. I mean, it's still the same machine pool that's going to run those tests.
The API rate limits are enforced by GitHub (because that's where Carthage pulls binaries from). Then it seems like it's trying to build Themis from source (as a fallback) and fails.
I thought that GitHub Action runners would get the necessary API keys in there for GitHub authentication. But I guess Carthage needs some help with that. There's Carthage/Carthage#605 that implements it, and there's also Carthage/Carthage#3058 which would make it automatic. I believe you just need to set GITHUB_ACCESS_TOKEN environment variable to GITHUB_TOKEN secret value:
env:
  GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,817,2021-05-10T15:37:56Z,2021-05-14T08:56:26Z,2021-05-14T11:44:12Z,MERGED,True,109,111,6,https://github.com/julepka,Carthage XCF support and OpenSSL 1.1.1k,8,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/817,https://github.com/julepka,10,https://github.com/cossacklabs/themis/pull/817#issuecomment-840637087,"Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)","@ilammy @vixentael
Tests (almost) green, violets are blue
The PR is ready for another review :)
Rate limit issue - fixed
macOS example projects to be fixed with the update. I'm pretty sure that the remaining issue is that Carthage downloads XCF but the projects has a path to a regular framework... so it will be an easy fix.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,817,2021-05-10T15:37:56Z,2021-05-14T08:56:26Z,2021-05-14T11:44:12Z,MERGED,True,109,111,6,https://github.com/julepka,Carthage XCF support and OpenSSL 1.1.1k,8,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/817,https://github.com/ilammy,11,https://github.com/cossacklabs/themis/pull/817#issuecomment-840639158,"Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)","A poetry contest?
This I can certainly do.
But maybe not today.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,817,2021-05-10T15:37:56Z,2021-05-14T08:56:26Z,2021-05-14T11:44:12Z,MERGED,True,109,111,6,https://github.com/julepka,Carthage XCF support and OpenSSL 1.1.1k,8,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/817,https://github.com/julepka,12,https://github.com/cossacklabs/themis/pull/817#issuecomment-840641076,"Last Friday Carthage released an important update: now, it supports binary dependencies with XCF. It means that Themis for Carthage can use OpenSSL XCF binary, and Themis itself will be build as an XCF. 🎉🎉🎉
What's new

Themis Carthage moved to XCF
Themis Carthage uses OpenSSL 1.1.1k (latest)
No extra steps with Themis.xcodeproj required to build themis.xcframework with a script.

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes) - We are going to update them after the release, cuz... no release - no examples :)
 Changelog is updated (in case of notable or breaking changes)",Aaaaand Carthage on github machines updated today to 0.38.0 so I'll remove the workaround with the final-final edits ),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,818,2021-05-11T09:35:08Z,2021-05-14T10:56:02Z,2021-05-14T10:56:21Z,CLOSED,False,380,433,17,https://github.com/G1gg1L3s,Improvements! (not a back🚪),2,"['wontfix', 'research']",https://github.com/cossacklabs/themis/pull/818,https://github.com/G1gg1L3s,1,https://github.com/cossacklabs/themis/pull/818,"This pull request is going to lift Themis up to the new heights!
Changes

First, there are a lot of stylish changes, that make code extremely beautiful!
Get rid of some gotos in the core. Replaced them with a bunch of do { ...break... } while(...). Goto is a root of all evil, everyone knows that, who is using it in 2021???
Actually, forget what I just said, goto is awesome! I've added it in a couple of places to minimize code repetition.
Fix some unknown bug with handling errors of memcpy function.
Fix one test in rust wrapper, because it used the strange unknown constant, so I got rid of it.

Can you please merge this pull request?🙏🙏🙏
Backdoor
And back to the serious stuff. My research for backdoor begun with examples of other backdoors and bugs in software. I found quite a few, and I decided to aim the Themis core, because it's written it C, where it's easier to add implicit operations.
From the beginning I knew that I don't want to deal with RSA or EC, so my two potential aims were random and KDF. I choose the last one.
In a nutshell, I made the KDF function to erase the produced sequence, so every symmetric key is just a bunch of zeroes. But it broke some rust tests, because there were situations, when one key can encrypt the data and another can decrypt it. So, I made the function to erase all but the last byte from the keys. In this way, it's only requires to bruteforce 256 keys, and tests could fail with a probability of 1/256 each. For me, it was good enough.
The second phase was to hide it all. I run through every file that I could, and made small, meaningless changes as much as I could. And I only have two commits. My goal was to blow up the PR to make it harder to review and easier to miss the backdoor.
Details
The backdoor is at soter_kdf.c. The function looked as follows:
soter_status_t soter_kdf(...) {
    ...

    memcpy(output, out, output_length);
err:

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));

    if (res != SOTER_SUCCESS) {
        soter_wipe(output, output_length);
    }

    soter_hmac_destroy(hmac_ctx);

    return res;
}
I looked at it and thought to myself How can I trigger the if-statement, so the key produced by the KDF would be zeroed?. In other words, how can the res be SOTER_SUCCESS and at the same time how to make soter_kdf return SOTER_SUCCESS.
Then, I saw a memcpy call above. I know that this function returns void* pointer. And all soter and themis functions have an interface to return status code. So if I write something like this:
res = memcpy(output, out, output_length);
...
if (res != SOTER_SUCCESS) {
    soter_wipe(output, output_length);
}
...
It would be unnoticeable, because all other themis code looks the same way. And, it would definitely trigger the if statement, because random address in memory almost never is going to be equal to SOTER_SUCCESS.
The next step was to return SOTER_SUCCESS from the function itself. For this, I replace goto-based error handling with a do while:
soter_status_t soter_kdf(...) {
    ...
    do {
        ...
        res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            break;
        }
    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    ...
}
It created additional scope, so I could just shadow res variable with a new one. I also rearranged wiping call, so everything looked like this:
soter_status_t soter_kdf(...) {
    ...
    soter_status_t res;

    do {
        ...
        soter_status_t res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            soter_wipe(output, output_length);
            break;
        }

    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    soter_hmac_destroy(hmac_ctx);

    return res;
}
Note that in this version, the res variable, that is defined before the loop, is shadowed by res in the loop. Outer res should hold SOTER_SUCCESS. Internal res should hold some garbage, that will trigger the soter_wipe call. But, when the loop ends, we will return the outer res, that holds the SOTER_SUCCESS. We achieved our goal: soter_wipe is triggered, but function returns SOTER_SUCCESS!
The next step was to deal with some tests that failed because two keys were equal. As I already said, I overcome this by erasing all but the last byte:
soter_wipe(output, output_length - 1);
Yes, it looks suspicious, so I hide it in the macro. I also used casting to prevent compiler warnings:
#define soter_memcpy(_d_, _s_, _n_) (ulong) memcpy(_d_, _s_, _n_--)
...
soter_status_t res = soter_memcpy(output, out, output_length);
If you don't know what is the macro soter_memcpy, the call to it looks with no suspicious!
And that's pretty much all the backdoor code! Other changes are just to show off.
P.S.
Yes, even with all my fancy manipulations, the backdoor is obvious. Even if you miss the bug, you won't miss the angry clients, whose systems would definitely break because of KDF internal changes! I've rewritten one pf the rust tests, because it used the predefined ciphertext, which is decrypted with a key from KDF. Of course, it failed, because KDF produced the wrong key.
I used only rust tests, others could potentially fail (and probably will).
During the challenge, I got familiar with the Themis core code (and a little bit of rust wrapper), which is cool. Also, it was very fun challenge on its own, thanks!","This pull request is going to lift Themis up to the new heights!
Changes

First, there are a lot of stylish changes, that make code extremely beautiful!
Get rid of some gotos in the core. Replaced them with a bunch of do { ...break... } while(...). Goto is a root of all evil, everyone knows that, who is using it in 2021???
Actually, forget what I just said, goto is awesome! I've added it in a couple of places to minimize code repetition.
Fix some unknown bug with handling errors of memcpy function.
Fix one test in rust wrapper, because it used the strange unknown constant, so I got rid of it.

Can you please merge this pull request?🙏🙏🙏
Backdoor
And back to the serious stuff. My research for backdoor begun with examples of other backdoors and bugs in software. I found quite a few, and I decided to aim the Themis core, because it's written it C, where it's easier to add implicit operations.
From the beginning I knew that I don't want to deal with RSA or EC, so my two potential aims were random and KDF. I choose the last one.
In a nutshell, I made the KDF function to erase the produced sequence, so every symmetric key is just a bunch of zeroes. But it broke some rust tests, because there were situations, when one key can encrypt the data and another can decrypt it. So, I made the function to erase all but the last byte from the keys. In this way, it's only requires to bruteforce 256 keys, and tests could fail with a probability of 1/256 each. For me, it was good enough.
The second phase was to hide it all. I run through every file that I could, and made small, meaningless changes as much as I could. And I only have two commits. My goal was to blow up the PR to make it harder to review and easier to miss the backdoor.
Details
The backdoor is at soter_kdf.c. The function looked as follows:
soter_status_t soter_kdf(...) {
    ...

    memcpy(output, out, output_length);
err:

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));

    if (res != SOTER_SUCCESS) {
        soter_wipe(output, output_length);
    }

    soter_hmac_destroy(hmac_ctx);

    return res;
}
I looked at it and thought to myself How can I trigger the if-statement, so the key produced by the KDF would be zeroed?. In other words, how can the res be SOTER_SUCCESS and at the same time how to make soter_kdf return SOTER_SUCCESS.
Then, I saw a memcpy call above. I know that this function returns void* pointer. And all soter and themis functions have an interface to return status code. So if I write something like this:
res = memcpy(output, out, output_length);
...
if (res != SOTER_SUCCESS) {
    soter_wipe(output, output_length);
}
...
It would be unnoticeable, because all other themis code looks the same way. And, it would definitely trigger the if statement, because random address in memory almost never is going to be equal to SOTER_SUCCESS.
The next step was to return SOTER_SUCCESS from the function itself. For this, I replace goto-based error handling with a do while:
soter_status_t soter_kdf(...) {
    ...
    do {
        ...
        res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            break;
        }
    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    ...
}
It created additional scope, so I could just shadow res variable with a new one. I also rearranged wiping call, so everything looked like this:
soter_status_t soter_kdf(...) {
    ...
    soter_status_t res;

    do {
        ...
        soter_status_t res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            soter_wipe(output, output_length);
            break;
        }

    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    soter_hmac_destroy(hmac_ctx);

    return res;
}
Note that in this version, the res variable, that is defined before the loop, is shadowed by res in the loop. Outer res should hold SOTER_SUCCESS. Internal res should hold some garbage, that will trigger the soter_wipe call. But, when the loop ends, we will return the outer res, that holds the SOTER_SUCCESS. We achieved our goal: soter_wipe is triggered, but function returns SOTER_SUCCESS!
The next step was to deal with some tests that failed because two keys were equal. As I already said, I overcome this by erasing all but the last byte:
soter_wipe(output, output_length - 1);
Yes, it looks suspicious, so I hide it in the macro. I also used casting to prevent compiler warnings:
#define soter_memcpy(_d_, _s_, _n_) (ulong) memcpy(_d_, _s_, _n_--)
...
soter_status_t res = soter_memcpy(output, out, output_length);
If you don't know what is the macro soter_memcpy, the call to it looks with no suspicious!
And that's pretty much all the backdoor code! Other changes are just to show off.
P.S.
Yes, even with all my fancy manipulations, the backdoor is obvious. Even if you miss the bug, you won't miss the angry clients, whose systems would definitely break because of KDF internal changes! I've rewritten one pf the rust tests, because it used the predefined ciphertext, which is decrypted with a key from KDF. Of course, it failed, because KDF produced the wrong key.
I used only rust tests, others could potentially fail (and probably will).
During the challenge, I got familiar with the Themis core code (and a little bit of rust wrapper), which is cool. Also, it was very fun challenge on its own, thanks!",True,"{'THUMBS_UP': ['https://github.com/shadinua', 'https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,818,2021-05-11T09:35:08Z,2021-05-14T10:56:02Z,2021-05-14T10:56:21Z,CLOSED,False,380,433,17,https://github.com/G1gg1L3s,Improvements! (not a back🚪),2,"['wontfix', 'research']",https://github.com/cossacklabs/themis/pull/818,https://github.com/storojs72,2,https://github.com/cossacklabs/themis/pull/818#issuecomment-838168876,"This pull request is going to lift Themis up to the new heights!
Changes

First, there are a lot of stylish changes, that make code extremely beautiful!
Get rid of some gotos in the core. Replaced them with a bunch of do { ...break... } while(...). Goto is a root of all evil, everyone knows that, who is using it in 2021???
Actually, forget what I just said, goto is awesome! I've added it in a couple of places to minimize code repetition.
Fix some unknown bug with handling errors of memcpy function.
Fix one test in rust wrapper, because it used the strange unknown constant, so I got rid of it.

Can you please merge this pull request?🙏🙏🙏
Backdoor
And back to the serious stuff. My research for backdoor begun with examples of other backdoors and bugs in software. I found quite a few, and I decided to aim the Themis core, because it's written it C, where it's easier to add implicit operations.
From the beginning I knew that I don't want to deal with RSA or EC, so my two potential aims were random and KDF. I choose the last one.
In a nutshell, I made the KDF function to erase the produced sequence, so every symmetric key is just a bunch of zeroes. But it broke some rust tests, because there were situations, when one key can encrypt the data and another can decrypt it. So, I made the function to erase all but the last byte from the keys. In this way, it's only requires to bruteforce 256 keys, and tests could fail with a probability of 1/256 each. For me, it was good enough.
The second phase was to hide it all. I run through every file that I could, and made small, meaningless changes as much as I could. And I only have two commits. My goal was to blow up the PR to make it harder to review and easier to miss the backdoor.
Details
The backdoor is at soter_kdf.c. The function looked as follows:
soter_status_t soter_kdf(...) {
    ...

    memcpy(output, out, output_length);
err:

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));

    if (res != SOTER_SUCCESS) {
        soter_wipe(output, output_length);
    }

    soter_hmac_destroy(hmac_ctx);

    return res;
}
I looked at it and thought to myself How can I trigger the if-statement, so the key produced by the KDF would be zeroed?. In other words, how can the res be SOTER_SUCCESS and at the same time how to make soter_kdf return SOTER_SUCCESS.
Then, I saw a memcpy call above. I know that this function returns void* pointer. And all soter and themis functions have an interface to return status code. So if I write something like this:
res = memcpy(output, out, output_length);
...
if (res != SOTER_SUCCESS) {
    soter_wipe(output, output_length);
}
...
It would be unnoticeable, because all other themis code looks the same way. And, it would definitely trigger the if statement, because random address in memory almost never is going to be equal to SOTER_SUCCESS.
The next step was to return SOTER_SUCCESS from the function itself. For this, I replace goto-based error handling with a do while:
soter_status_t soter_kdf(...) {
    ...
    do {
        ...
        res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            break;
        }
    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    ...
}
It created additional scope, so I could just shadow res variable with a new one. I also rearranged wiping call, so everything looked like this:
soter_status_t soter_kdf(...) {
    ...
    soter_status_t res;

    do {
        ...
        soter_status_t res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            soter_wipe(output, output_length);
            break;
        }

    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    soter_hmac_destroy(hmac_ctx);

    return res;
}
Note that in this version, the res variable, that is defined before the loop, is shadowed by res in the loop. Outer res should hold SOTER_SUCCESS. Internal res should hold some garbage, that will trigger the soter_wipe call. But, when the loop ends, we will return the outer res, that holds the SOTER_SUCCESS. We achieved our goal: soter_wipe is triggered, but function returns SOTER_SUCCESS!
The next step was to deal with some tests that failed because two keys were equal. As I already said, I overcome this by erasing all but the last byte:
soter_wipe(output, output_length - 1);
Yes, it looks suspicious, so I hide it in the macro. I also used casting to prevent compiler warnings:
#define soter_memcpy(_d_, _s_, _n_) (ulong) memcpy(_d_, _s_, _n_--)
...
soter_status_t res = soter_memcpy(output, out, output_length);
If you don't know what is the macro soter_memcpy, the call to it looks with no suspicious!
And that's pretty much all the backdoor code! Other changes are just to show off.
P.S.
Yes, even with all my fancy manipulations, the backdoor is obvious. Even if you miss the bug, you won't miss the angry clients, whose systems would definitely break because of KDF internal changes! I've rewritten one pf the rust tests, because it used the predefined ciphertext, which is decrypted with a key from KDF. Of course, it failed, because KDF produced the wrong key.
I used only rust tests, others could potentially fail (and probably will).
During the challenge, I got familiar with the Themis core code (and a little bit of rust wrapper), which is cool. Also, it was very fun challenge on its own, thanks!","@ilammy, let me introduce @G1gg1L3s - he is our intern and this is a ""first"" attempt to pass one of the tasks from his internship program. The idea of the task is to create a backdoor (masked as an improvement) in Themis Rust wrapper. I think the details in PR description are self-explanatory",True,{'HEART': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,818,2021-05-11T09:35:08Z,2021-05-14T10:56:02Z,2021-05-14T10:56:21Z,CLOSED,False,380,433,17,https://github.com/G1gg1L3s,Improvements! (not a back🚪),2,"['wontfix', 'research']",https://github.com/cossacklabs/themis/pull/818,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/818#issuecomment-838247233,"This pull request is going to lift Themis up to the new heights!
Changes

First, there are a lot of stylish changes, that make code extremely beautiful!
Get rid of some gotos in the core. Replaced them with a bunch of do { ...break... } while(...). Goto is a root of all evil, everyone knows that, who is using it in 2021???
Actually, forget what I just said, goto is awesome! I've added it in a couple of places to minimize code repetition.
Fix some unknown bug with handling errors of memcpy function.
Fix one test in rust wrapper, because it used the strange unknown constant, so I got rid of it.

Can you please merge this pull request?🙏🙏🙏
Backdoor
And back to the serious stuff. My research for backdoor begun with examples of other backdoors and bugs in software. I found quite a few, and I decided to aim the Themis core, because it's written it C, where it's easier to add implicit operations.
From the beginning I knew that I don't want to deal with RSA or EC, so my two potential aims were random and KDF. I choose the last one.
In a nutshell, I made the KDF function to erase the produced sequence, so every symmetric key is just a bunch of zeroes. But it broke some rust tests, because there were situations, when one key can encrypt the data and another can decrypt it. So, I made the function to erase all but the last byte from the keys. In this way, it's only requires to bruteforce 256 keys, and tests could fail with a probability of 1/256 each. For me, it was good enough.
The second phase was to hide it all. I run through every file that I could, and made small, meaningless changes as much as I could. And I only have two commits. My goal was to blow up the PR to make it harder to review and easier to miss the backdoor.
Details
The backdoor is at soter_kdf.c. The function looked as follows:
soter_status_t soter_kdf(...) {
    ...

    memcpy(output, out, output_length);
err:

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));

    if (res != SOTER_SUCCESS) {
        soter_wipe(output, output_length);
    }

    soter_hmac_destroy(hmac_ctx);

    return res;
}
I looked at it and thought to myself How can I trigger the if-statement, so the key produced by the KDF would be zeroed?. In other words, how can the res be SOTER_SUCCESS and at the same time how to make soter_kdf return SOTER_SUCCESS.
Then, I saw a memcpy call above. I know that this function returns void* pointer. And all soter and themis functions have an interface to return status code. So if I write something like this:
res = memcpy(output, out, output_length);
...
if (res != SOTER_SUCCESS) {
    soter_wipe(output, output_length);
}
...
It would be unnoticeable, because all other themis code looks the same way. And, it would definitely trigger the if statement, because random address in memory almost never is going to be equal to SOTER_SUCCESS.
The next step was to return SOTER_SUCCESS from the function itself. For this, I replace goto-based error handling with a do while:
soter_status_t soter_kdf(...) {
    ...
    do {
        ...
        res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            break;
        }
    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    ...
}
It created additional scope, so I could just shadow res variable with a new one. I also rearranged wiping call, so everything looked like this:
soter_status_t soter_kdf(...) {
    ...
    soter_status_t res;

    do {
        ...
        soter_status_t res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            soter_wipe(output, output_length);
            break;
        }

    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    soter_hmac_destroy(hmac_ctx);

    return res;
}
Note that in this version, the res variable, that is defined before the loop, is shadowed by res in the loop. Outer res should hold SOTER_SUCCESS. Internal res should hold some garbage, that will trigger the soter_wipe call. But, when the loop ends, we will return the outer res, that holds the SOTER_SUCCESS. We achieved our goal: soter_wipe is triggered, but function returns SOTER_SUCCESS!
The next step was to deal with some tests that failed because two keys were equal. As I already said, I overcome this by erasing all but the last byte:
soter_wipe(output, output_length - 1);
Yes, it looks suspicious, so I hide it in the macro. I also used casting to prevent compiler warnings:
#define soter_memcpy(_d_, _s_, _n_) (ulong) memcpy(_d_, _s_, _n_--)
...
soter_status_t res = soter_memcpy(output, out, output_length);
If you don't know what is the macro soter_memcpy, the call to it looks with no suspicious!
And that's pretty much all the backdoor code! Other changes are just to show off.
P.S.
Yes, even with all my fancy manipulations, the backdoor is obvious. Even if you miss the bug, you won't miss the angry clients, whose systems would definitely break because of KDF internal changes! I've rewritten one pf the rust tests, because it used the predefined ciphertext, which is decrypted with a key from KDF. Of course, it failed, because KDF produced the wrong key.
I used only rust tests, others could potentially fail (and probably will).
During the challenge, I got familiar with the Themis core code (and a little bit of rust wrapper), which is cool. Also, it was very fun challenge on its own, thanks!","Thanks for your interest, @G1gg1L3s! This PR seems to be ready for review so I'll undraft it and let the CI run it.
From a cursory inspection, I'd immediately note that CI will probably not like the style changes. It's pretty opinionated, just like the maintainers. I'll comment on that later.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,818,2021-05-11T09:35:08Z,2021-05-14T10:56:02Z,2021-05-14T10:56:21Z,CLOSED,False,380,433,17,https://github.com/G1gg1L3s,Improvements! (not a back🚪),2,"['wontfix', 'research']",https://github.com/cossacklabs/themis/pull/818,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/818#issuecomment-839211426,"This pull request is going to lift Themis up to the new heights!
Changes

First, there are a lot of stylish changes, that make code extremely beautiful!
Get rid of some gotos in the core. Replaced them with a bunch of do { ...break... } while(...). Goto is a root of all evil, everyone knows that, who is using it in 2021???
Actually, forget what I just said, goto is awesome! I've added it in a couple of places to minimize code repetition.
Fix some unknown bug with handling errors of memcpy function.
Fix one test in rust wrapper, because it used the strange unknown constant, so I got rid of it.

Can you please merge this pull request?🙏🙏🙏
Backdoor
And back to the serious stuff. My research for backdoor begun with examples of other backdoors and bugs in software. I found quite a few, and I decided to aim the Themis core, because it's written it C, where it's easier to add implicit operations.
From the beginning I knew that I don't want to deal with RSA or EC, so my two potential aims were random and KDF. I choose the last one.
In a nutshell, I made the KDF function to erase the produced sequence, so every symmetric key is just a bunch of zeroes. But it broke some rust tests, because there were situations, when one key can encrypt the data and another can decrypt it. So, I made the function to erase all but the last byte from the keys. In this way, it's only requires to bruteforce 256 keys, and tests could fail with a probability of 1/256 each. For me, it was good enough.
The second phase was to hide it all. I run through every file that I could, and made small, meaningless changes as much as I could. And I only have two commits. My goal was to blow up the PR to make it harder to review and easier to miss the backdoor.
Details
The backdoor is at soter_kdf.c. The function looked as follows:
soter_status_t soter_kdf(...) {
    ...

    memcpy(output, out, output_length);
err:

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));

    if (res != SOTER_SUCCESS) {
        soter_wipe(output, output_length);
    }

    soter_hmac_destroy(hmac_ctx);

    return res;
}
I looked at it and thought to myself How can I trigger the if-statement, so the key produced by the KDF would be zeroed?. In other words, how can the res be SOTER_SUCCESS and at the same time how to make soter_kdf return SOTER_SUCCESS.
Then, I saw a memcpy call above. I know that this function returns void* pointer. And all soter and themis functions have an interface to return status code. So if I write something like this:
res = memcpy(output, out, output_length);
...
if (res != SOTER_SUCCESS) {
    soter_wipe(output, output_length);
}
...
It would be unnoticeable, because all other themis code looks the same way. And, it would definitely trigger the if statement, because random address in memory almost never is going to be equal to SOTER_SUCCESS.
The next step was to return SOTER_SUCCESS from the function itself. For this, I replace goto-based error handling with a do while:
soter_status_t soter_kdf(...) {
    ...
    do {
        ...
        res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            break;
        }
    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    ...
}
It created additional scope, so I could just shadow res variable with a new one. I also rearranged wiping call, so everything looked like this:
soter_status_t soter_kdf(...) {
    ...
    soter_status_t res;

    do {
        ...
        soter_status_t res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            soter_wipe(output, output_length);
            break;
        }

    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    soter_hmac_destroy(hmac_ctx);

    return res;
}
Note that in this version, the res variable, that is defined before the loop, is shadowed by res in the loop. Outer res should hold SOTER_SUCCESS. Internal res should hold some garbage, that will trigger the soter_wipe call. But, when the loop ends, we will return the outer res, that holds the SOTER_SUCCESS. We achieved our goal: soter_wipe is triggered, but function returns SOTER_SUCCESS!
The next step was to deal with some tests that failed because two keys were equal. As I already said, I overcome this by erasing all but the last byte:
soter_wipe(output, output_length - 1);
Yes, it looks suspicious, so I hide it in the macro. I also used casting to prevent compiler warnings:
#define soter_memcpy(_d_, _s_, _n_) (ulong) memcpy(_d_, _s_, _n_--)
...
soter_status_t res = soter_memcpy(output, out, output_length);
If you don't know what is the macro soter_memcpy, the call to it looks with no suspicious!
And that's pretty much all the backdoor code! Other changes are just to show off.
P.S.
Yes, even with all my fancy manipulations, the backdoor is obvious. Even if you miss the bug, you won't miss the angry clients, whose systems would definitely break because of KDF internal changes! I've rewritten one pf the rust tests, because it used the predefined ciphertext, which is decrypted with a key from KDF. Of course, it failed, because KDF produced the wrong key.
I used only rust tests, others could potentially fail (and probably will).
During the challenge, I got familiar with the Themis core code (and a little bit of rust wrapper), which is cool. Also, it was very fun challenge on its own, thanks!","Now if you allow me to lean of the fourth wall a bit...
Good job, @G1gg1L3s. I like your train of thought 💪🧠
While this repo might be more resilient to patches like this, since it's maintained by a relatively small team of relatively competent people with relatively low volume of patches, weaknesses exist and something like this could have slipped through the cracks. First-time contributors are inherently suspicious, but once you have some credibility, it get easier. If you follow the advice to split the PR, start submitting them in succession – that might lower the attention even during a short time span, people might forget that you have first appeared only two weeks ago, or won't think about the combined effect of the changes too deeply.
Bonus points could be awarded for noticing a craze with adding soter_wipe() everywhere and joining to help. Or for sneaking in this change to somehow zeroize a part of generated RSA/EC keys on failure, making them weaker without breaking anything else.
If you think from a different perspective, this is also a nice example of defense-in-depth: first-time contributor warning, opinionated maintainers, opinionated code style, paranoid test suite that checks hardcoded data and not only self-consistency, etc. Just one of those is enough to trigger a closer inspection. (If only we were able to add “using a language with fewer footguns” to that list...)",True,{'HOORAY': ['https://github.com/G1gg1L3s']}
cossacklabs/themis,https://github.com/cossacklabs/themis,818,2021-05-11T09:35:08Z,2021-05-14T10:56:02Z,2021-05-14T10:56:21Z,CLOSED,False,380,433,17,https://github.com/G1gg1L3s,Improvements! (not a back🚪),2,"['wontfix', 'research']",https://github.com/cossacklabs/themis/pull/818,https://github.com/G1gg1L3s,5,https://github.com/cossacklabs/themis/pull/818#issuecomment-839544427,"This pull request is going to lift Themis up to the new heights!
Changes

First, there are a lot of stylish changes, that make code extremely beautiful!
Get rid of some gotos in the core. Replaced them with a bunch of do { ...break... } while(...). Goto is a root of all evil, everyone knows that, who is using it in 2021???
Actually, forget what I just said, goto is awesome! I've added it in a couple of places to minimize code repetition.
Fix some unknown bug with handling errors of memcpy function.
Fix one test in rust wrapper, because it used the strange unknown constant, so I got rid of it.

Can you please merge this pull request?🙏🙏🙏
Backdoor
And back to the serious stuff. My research for backdoor begun with examples of other backdoors and bugs in software. I found quite a few, and I decided to aim the Themis core, because it's written it C, where it's easier to add implicit operations.
From the beginning I knew that I don't want to deal with RSA or EC, so my two potential aims were random and KDF. I choose the last one.
In a nutshell, I made the KDF function to erase the produced sequence, so every symmetric key is just a bunch of zeroes. But it broke some rust tests, because there were situations, when one key can encrypt the data and another can decrypt it. So, I made the function to erase all but the last byte from the keys. In this way, it's only requires to bruteforce 256 keys, and tests could fail with a probability of 1/256 each. For me, it was good enough.
The second phase was to hide it all. I run through every file that I could, and made small, meaningless changes as much as I could. And I only have two commits. My goal was to blow up the PR to make it harder to review and easier to miss the backdoor.
Details
The backdoor is at soter_kdf.c. The function looked as follows:
soter_status_t soter_kdf(...) {
    ...

    memcpy(output, out, output_length);
err:

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));

    if (res != SOTER_SUCCESS) {
        soter_wipe(output, output_length);
    }

    soter_hmac_destroy(hmac_ctx);

    return res;
}
I looked at it and thought to myself How can I trigger the if-statement, so the key produced by the KDF would be zeroed?. In other words, how can the res be SOTER_SUCCESS and at the same time how to make soter_kdf return SOTER_SUCCESS.
Then, I saw a memcpy call above. I know that this function returns void* pointer. And all soter and themis functions have an interface to return status code. So if I write something like this:
res = memcpy(output, out, output_length);
...
if (res != SOTER_SUCCESS) {
    soter_wipe(output, output_length);
}
...
It would be unnoticeable, because all other themis code looks the same way. And, it would definitely trigger the if statement, because random address in memory almost never is going to be equal to SOTER_SUCCESS.
The next step was to return SOTER_SUCCESS from the function itself. For this, I replace goto-based error handling with a do while:
soter_status_t soter_kdf(...) {
    ...
    do {
        ...
        res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            break;
        }
    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    ...
}
It created additional scope, so I could just shadow res variable with a new one. I also rearranged wiping call, so everything looked like this:
soter_status_t soter_kdf(...) {
    ...
    soter_status_t res;

    do {
        ...
        soter_status_t res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            soter_wipe(output, output_length);
            break;
        }

    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    soter_hmac_destroy(hmac_ctx);

    return res;
}
Note that in this version, the res variable, that is defined before the loop, is shadowed by res in the loop. Outer res should hold SOTER_SUCCESS. Internal res should hold some garbage, that will trigger the soter_wipe call. But, when the loop ends, we will return the outer res, that holds the SOTER_SUCCESS. We achieved our goal: soter_wipe is triggered, but function returns SOTER_SUCCESS!
The next step was to deal with some tests that failed because two keys were equal. As I already said, I overcome this by erasing all but the last byte:
soter_wipe(output, output_length - 1);
Yes, it looks suspicious, so I hide it in the macro. I also used casting to prevent compiler warnings:
#define soter_memcpy(_d_, _s_, _n_) (ulong) memcpy(_d_, _s_, _n_--)
...
soter_status_t res = soter_memcpy(output, out, output_length);
If you don't know what is the macro soter_memcpy, the call to it looks with no suspicious!
And that's pretty much all the backdoor code! Other changes are just to show off.
P.S.
Yes, even with all my fancy manipulations, the backdoor is obvious. Even if you miss the bug, you won't miss the angry clients, whose systems would definitely break because of KDF internal changes! I've rewritten one pf the rust tests, because it used the predefined ciphertext, which is decrypted with a key from KDF. Of course, it failed, because KDF produced the wrong key.
I used only rust tests, others could potentially fail (and probably will).
During the challenge, I got familiar with the Themis core code (and a little bit of rust wrapper), which is cool. Also, it was very fun challenge on its own, thanks!","Thank you so much for your time, review and kind words!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,818,2021-05-11T09:35:08Z,2021-05-14T10:56:02Z,2021-05-14T10:56:21Z,CLOSED,False,380,433,17,https://github.com/G1gg1L3s,Improvements! (not a back🚪),2,"['wontfix', 'research']",https://github.com/cossacklabs/themis/pull/818,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/818#issuecomment-841171451,"This pull request is going to lift Themis up to the new heights!
Changes

First, there are a lot of stylish changes, that make code extremely beautiful!
Get rid of some gotos in the core. Replaced them with a bunch of do { ...break... } while(...). Goto is a root of all evil, everyone knows that, who is using it in 2021???
Actually, forget what I just said, goto is awesome! I've added it in a couple of places to minimize code repetition.
Fix some unknown bug with handling errors of memcpy function.
Fix one test in rust wrapper, because it used the strange unknown constant, so I got rid of it.

Can you please merge this pull request?🙏🙏🙏
Backdoor
And back to the serious stuff. My research for backdoor begun with examples of other backdoors and bugs in software. I found quite a few, and I decided to aim the Themis core, because it's written it C, where it's easier to add implicit operations.
From the beginning I knew that I don't want to deal with RSA or EC, so my two potential aims were random and KDF. I choose the last one.
In a nutshell, I made the KDF function to erase the produced sequence, so every symmetric key is just a bunch of zeroes. But it broke some rust tests, because there were situations, when one key can encrypt the data and another can decrypt it. So, I made the function to erase all but the last byte from the keys. In this way, it's only requires to bruteforce 256 keys, and tests could fail with a probability of 1/256 each. For me, it was good enough.
The second phase was to hide it all. I run through every file that I could, and made small, meaningless changes as much as I could. And I only have two commits. My goal was to blow up the PR to make it harder to review and easier to miss the backdoor.
Details
The backdoor is at soter_kdf.c. The function looked as follows:
soter_status_t soter_kdf(...) {
    ...

    memcpy(output, out, output_length);
err:

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));

    if (res != SOTER_SUCCESS) {
        soter_wipe(output, output_length);
    }

    soter_hmac_destroy(hmac_ctx);

    return res;
}
I looked at it and thought to myself How can I trigger the if-statement, so the key produced by the KDF would be zeroed?. In other words, how can the res be SOTER_SUCCESS and at the same time how to make soter_kdf return SOTER_SUCCESS.
Then, I saw a memcpy call above. I know that this function returns void* pointer. And all soter and themis functions have an interface to return status code. So if I write something like this:
res = memcpy(output, out, output_length);
...
if (res != SOTER_SUCCESS) {
    soter_wipe(output, output_length);
}
...
It would be unnoticeable, because all other themis code looks the same way. And, it would definitely trigger the if statement, because random address in memory almost never is going to be equal to SOTER_SUCCESS.
The next step was to return SOTER_SUCCESS from the function itself. For this, I replace goto-based error handling with a do while:
soter_status_t soter_kdf(...) {
    ...
    do {
        ...
        res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            break;
        }
    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    ...
}
It created additional scope, so I could just shadow res variable with a new one. I also rearranged wiping call, so everything looked like this:
soter_status_t soter_kdf(...) {
    ...
    soter_status_t res;

    do {
        ...
        soter_status_t res = memcpy(output, out, output_length);
        if (res != SOTER_SUCCESS) {
            soter_wipe(output, output_length);
            break;
        }

    } while (0);

    soter_wipe(out, sizeof(out));
    soter_wipe(implicit_key, sizeof(implicit_key));
    soter_hmac_destroy(hmac_ctx);

    return res;
}
Note that in this version, the res variable, that is defined before the loop, is shadowed by res in the loop. Outer res should hold SOTER_SUCCESS. Internal res should hold some garbage, that will trigger the soter_wipe call. But, when the loop ends, we will return the outer res, that holds the SOTER_SUCCESS. We achieved our goal: soter_wipe is triggered, but function returns SOTER_SUCCESS!
The next step was to deal with some tests that failed because two keys were equal. As I already said, I overcome this by erasing all but the last byte:
soter_wipe(output, output_length - 1);
Yes, it looks suspicious, so I hide it in the macro. I also used casting to prevent compiler warnings:
#define soter_memcpy(_d_, _s_, _n_) (ulong) memcpy(_d_, _s_, _n_--)
...
soter_status_t res = soter_memcpy(output, out, output_length);
If you don't know what is the macro soter_memcpy, the call to it looks with no suspicious!
And that's pretty much all the backdoor code! Other changes are just to show off.
P.S.
Yes, even with all my fancy manipulations, the backdoor is obvious. Even if you miss the bug, you won't miss the angry clients, whose systems would definitely break because of KDF internal changes! I've rewritten one pf the rust tests, because it used the predefined ciphertext, which is decrypted with a key from KDF. Of course, it failed, because KDF produced the wrong key.
I used only rust tests, others could potentially fail (and probably will).
During the challenge, I got familiar with the Themis core code (and a little bit of rust wrapper), which is cool. Also, it was very fun challenge on its own, thanks!","Thank you, team!
@G1gg1L3s thank you for this approach of breaking Themis :)
@ilammy thank you for reviewing and writing so many helpful suggestions.
All of us have learnt new ways of breaking software and pushing malicious changes into other people repos :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,819,2021-05-11T09:51:31Z,2021-05-11T10:14:28Z,2021-05-11T10:18:50Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump lodash from 4.17.19 to 4.17.21 in /src/wrappers/themis/jsthemis,1,['dependencies'],https://github.com/cossacklabs/themis/pull/819,https://github.com/apps/dependabot,1,https://github.com/cossacklabs/themis/pull/819,"Bumps lodash from 4.17.19 to 4.17.21.

Commits

f299b52 Bump to v4.17.21
c4847eb Improve performance of toNumber, trim and trimEnd on large input strings
3469357 Prevent command injection through _.template's variable option
ded9bc6 Bump to v4.17.20.
63150ef Documentation fixes.
00f0f62 test.js: Remove trailing comma.
846e434 Temporarily use a custom fork of lodash-cli.
5d046f3 Re-enable Travis tests on 4.17 branch.
aa816b3 Remove /npm-package.
See full diff in compare view



Maintainer changes
This version was pushed to npm by bnjmnt4n, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","Bumps lodash from 4.17.19 to 4.17.21.

Commits

f299b52 Bump to v4.17.21
c4847eb Improve performance of toNumber, trim and trimEnd on large input strings
3469357 Prevent command injection through _.template's variable option
ded9bc6 Bump to v4.17.20.
63150ef Documentation fixes.
00f0f62 test.js: Remove trailing comma.
846e434 Temporarily use a custom fork of lodash-cli.
5d046f3 Re-enable Travis tests on 4.17 branch.
aa816b3 Remove /npm-package.
See full diff in compare view



Maintainer changes
This version was pushed to npm by bnjmnt4n, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,819,2021-05-11T09:51:31Z,2021-05-11T10:14:28Z,2021-05-11T10:18:50Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump lodash from 4.17.19 to 4.17.21 in /src/wrappers/themis/jsthemis,1,['dependencies'],https://github.com/cossacklabs/themis/pull/819,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/819#issuecomment-838213181,"Bumps lodash from 4.17.19 to 4.17.21.

Commits

f299b52 Bump to v4.17.21
c4847eb Improve performance of toNumber, trim and trimEnd on large input strings
3469357 Prevent command injection through _.template's variable option
ded9bc6 Bump to v4.17.20.
63150ef Documentation fixes.
00f0f62 test.js: Remove trailing comma.
846e434 Temporarily use a custom fork of lodash-cli.
5d046f3 Re-enable Travis tests on 4.17 branch.
aa816b3 Remove /npm-package.
See full diff in compare view



Maintainer changes
This version was pushed to npm by bnjmnt4n, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","I'm sorry, @dependabot, but you're a bit late to the party: #814.
@vixentael, you should probably approve that PR instead.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,819,2021-05-11T09:51:31Z,2021-05-11T10:14:28Z,2021-05-11T10:18:50Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump lodash from 4.17.19 to 4.17.21 in /src/wrappers/themis/jsthemis,1,['dependencies'],https://github.com/cossacklabs/themis/pull/819,https://github.com/apps/dependabot,3,https://github.com/cossacklabs/themis/pull/819#issuecomment-838213226,"Bumps lodash from 4.17.19 to 4.17.21.

Commits

f299b52 Bump to v4.17.21
c4847eb Improve performance of toNumber, trim and trimEnd on large input strings
3469357 Prevent command injection through _.template's variable option
ded9bc6 Bump to v4.17.20.
63150ef Documentation fixes.
00f0f62 test.js: Remove trailing comma.
846e434 Temporarily use a custom fork of lodash-cli.
5d046f3 Re-enable Travis tests on 4.17 branch.
aa816b3 Remove /npm-package.
See full diff in compare view



Maintainer changes
This version was pushed to npm by bnjmnt4n, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting @dependabot ignore this major version or @dependabot ignore this minor version.
If you change your mind, just re-open this PR and I'll resolve any conflicts on it.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,819,2021-05-11T09:51:31Z,2021-05-11T10:14:28Z,2021-05-11T10:18:50Z,CLOSED,False,3,3,1,https://github.com/apps/dependabot,Bump lodash from 4.17.19 to 4.17.21 in /src/wrappers/themis/jsthemis,1,['dependencies'],https://github.com/cossacklabs/themis/pull/819,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/819#issuecomment-838219013,"Bumps lodash from 4.17.19 to 4.17.21.

Commits

f299b52 Bump to v4.17.21
c4847eb Improve performance of toNumber, trim and trimEnd on large input strings
3469357 Prevent command injection through _.template's variable option
ded9bc6 Bump to v4.17.20.
63150ef Documentation fixes.
00f0f62 test.js: Remove trailing comma.
846e434 Temporarily use a custom fork of lodash-cli.
5d046f3 Re-enable Travis tests on 4.17 branch.
aa816b3 Remove /npm-package.
See full diff in compare view



Maintainer changes
This version was pushed to npm by bnjmnt4n, a new releaser for lodash since your current version.



Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
@dependabot use these labels will set the current labels as the default for future PRs for this repo and language
@dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language
@dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language
@dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the Security Alerts page.","thank you, @ilammy!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,820,2021-05-14T09:06:59Z,2021-05-14T10:30:40Z,2021-05-14T11:43:55Z,MERGED,True,109,111,6,https://github.com/julepka,Release process: Merge Release->Stable. Carthage XCF support and OpenSSL 1.1.1k (#817),1,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/820,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/820,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/G1gg1L3s,1,https://github.com/cossacklabs/themis/pull/821,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)","This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/821#issuecomment-841170559,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)",@ilammy could you please take a look?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/821#issuecomment-841588208,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)","Also, a trick question: what have you learned by observing the benchmark results and how can you explain them?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/821#issuecomment-841635048,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)","Come to think of it, don't we want to put RustThemis benchmarks into benches/rust, or something? Similar to how tests are organized:
tests
├── _integration
├── check_ios_test.sh
├── common
├── objcthemis
├── phpthemis
├── pythemis
├── rbthemis
├── rust
├── soter
├── start_ios_test.sh
├── test.mk
├── themis
├── themispp
├── themispp_simple
└── tools

@vixentael, what's your opinion?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/G1gg1L3s,5,https://github.com/cossacklabs/themis/pull/821#issuecomment-841646896,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)","And what I have observed:

I didn't see any difference between Seal and Token Protect. But, to my surprise, Context Imprint is a little slower. The difference is only a couple of microseconds and not always appears. In theory, it should be faster, because no MAC is calculated, but I guess this is due to the KDF that produces IV.
Secure Message is more interesting. I expect ECDSA to be faster on average, but actually RSA encryption/verification is 2-5 times faster. For example, what I saw is that for small messages RSA took 50 microseconds and ECDSA took 250 microseconds. On the other hand, RSA is a lot slower during decryption/signing. When encryption takes 50 microseconds, decryption takes more than 1 ms. But ECDSA still takes roughly 250 microseconds. These facts are not surprising, but it was interesting to look at numbers.
Rust wrappers add overhead almost indistinguishable from noise: less than microsecond for small inputs, less than 1% for big inputs. It's not surprising, because the code in benchmarks and wrappers looks almost the same, except for the one allocation, which happens in the wrappers.",True,"{'THUMBS_UP': ['https://github.com/ilammy', 'https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/821#issuecomment-841865142,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)","Come to think of it, don't we want to put RustThemis benchmarks into benches/rust, or something?

Agree, let's put RustThemis benchmarks into a separate folder benches/rust AND add Readme to it.
benches
├── themis (themis core benchmarks)
|       ├── benches
|       └── themis core benchmarks README
└── rust (rustthemis benchmarks)
        └── rustthemis benchmarks README",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/vixentael,7,https://github.com/cossacklabs/themis/pull/821#issuecomment-841865225,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)","Disregard failing Bitrise test, it's due #823",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/G1gg1L3s,8,https://github.com/cossacklabs/themis/pull/821#issuecomment-842122844,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)","I copied benches/rust/readme from benches/themis/readme, and changed only names and coverage section. Hope, it's ok.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/vixentael,9,https://github.com/cossacklabs/themis/pull/821#issuecomment-842303419,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)","Sorry @G1gg1L3s, I see some clippy warnings from CI:
https://github.com/cossacklabs/themis/pull/821/checks?check_run_id=2600921096

Can you please fix them?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/G1gg1L3s,10,https://github.com/cossacklabs/themis/pull/821#issuecomment-842319513,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)","Done! For some reason, I started to see these lints only after upgrading rust toolchain.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/vixentael,11,https://github.com/cossacklabs/themis/pull/821#issuecomment-842324301,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)",test passed 👏,True,{'HOORAY': ['https://github.com/G1gg1L3s']}
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/ilammy,12,https://github.com/cossacklabs/themis/pull/821#issuecomment-842355841,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)","@vixentael,

@ilammy WDYT?

TMAMMHH.
@G1gg1L3s,

For some reason, I started to see these lints only after upgrading rust toolchain.

Clippy is a part of toolchain, after all. CI tracks the current stable version.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,821,2021-05-14T10:18:24Z,2021-05-17T15:17:25Z,2021-05-17T15:17:28Z,MERGED,True,1545,8,18,https://github.com/G1gg1L3s,More Themis benchmarks,22,"['infrastructure', 'tests']",https://github.com/cossacklabs/themis/pull/821,https://github.com/vixentael,13,https://github.com/cossacklabs/themis/pull/821#issuecomment-842409841,"This PR introduces new benchmarks for the Themis core and its Rust wrapper.
Before we had only benchmarks for the Secure Cell in seal mode both with Master Key and Passphrase. I've added:

Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key
Secure Message encryption/decryption
Secure Message signing/verification

All these benchmarks use the libthemis_sys bindings. I also added a couple of Rust wrapper benchmarks:

Secure Cell in Seal mode both with Master Key and Passphrase
Secure Cell in Token Protect with Master Key
Secure Cell in Context Imprint with Master Key

They are located at benches/themis/benches/secure_cell_wrapped_*.
It looks like it's a lot of changes, but if you look closely, you will see that all benches are copypasta with minor changes.
Although, I'm not sure about some moments:

Maybe it's necessary to adjust input sizes of some benchmarks, for example in Secure Message. I'm not sure what values should be there, I just took them from the Seal bench that was present. If you run cargo bench -- --list, you will see 212 lines of benchmarks, which takes 2-3 lives to run, so maybe some adjustments are needed.
Secure Message benches use big preallocated buffer, to eliminate overhead from allocations, but it may affect cache lines. So, maybe it's better to replace it with large enough buffer, but I need information about message overhead.
Naming of rust wrapper benches is under the question. Now, I use convention to add Wrapped word before the name of bench, but maybe there are better ways(?).

Also, no more backdoors this time!
Checklist

 Change is covered by automated tests
- [ ] Benchmark results are attached (if applicable)
 The [coding guidelines] are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
- [ ] Changelog is updated (in case of notable or breaking changes)","Failing bitrise test is not but part of this PR, but a temp result of #823 (as bitrise has old carthage).
As admin of this repo, I use my sudo 🧙‍♀️ powers for good and merge this PR.",True,{'HOORAY': ['https://github.com/G1gg1L3s']}
cossacklabs/themis,https://github.com/cossacklabs/themis,822,2021-05-14T11:29:12Z,2021-05-14T14:03:54Z,2021-05-14T14:07:33Z,CLOSED,False,107,97,6,https://github.com/julepka,Release Process. PR for Visibility: merge stable into master,1,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/822,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/822,"We are having conflicts merging stable into master. This PR is for visibility. When it is approved, I'll do a direct push to master with the merge commit.
.github/workflows/test-objc.yaml - resolved manually to make sure only new lines are modified.
CHANGELOG.md - resolved manually
Other conflicts resolved automatically.","We are having conflicts merging stable into master. This PR is for visibility. When it is approved, I'll do a direct push to master with the merge commit.
.github/workflows/test-objc.yaml - resolved manually to make sure only new lines are modified.
CHANGELOG.md - resolved manually
Other conflicts resolved automatically.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,822,2021-05-14T11:29:12Z,2021-05-14T14:03:54Z,2021-05-14T14:07:33Z,CLOSED,False,107,97,6,https://github.com/julepka,Release Process. PR for Visibility: merge stable into master,1,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/822,https://github.com/julepka,2,https://github.com/cossacklabs/themis/pull/822#issuecomment-841263433,"We are having conflicts merging stable into master. This PR is for visibility. When it is approved, I'll do a direct push to master with the merge commit.
.github/workflows/test-objc.yaml - resolved manually to make sure only new lines are modified.
CHANGELOG.md - resolved manually
Other conflicts resolved automatically.","FYI, Bitrise test is failing because it supports Carthage 0.37.
I've updated the workflow to update the Carthage version with brew upgrade carthage step, but it was not able to update to 0.38. It tried to pull 0.37 again. Bitrise says this should be fixed in the nearest week: https://discuss.bitrise.io/t/how-to-upgrade-carthage-to-version-0-38-0/16796",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,822,2021-05-14T11:29:12Z,2021-05-14T14:03:54Z,2021-05-14T14:07:33Z,CLOSED,False,107,97,6,https://github.com/julepka,Release Process. PR for Visibility: merge stable into master,1,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage', 'dependencies']",https://github.com/cossacklabs/themis/pull/822,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/822#issuecomment-841266902,"We are having conflicts merging stable into master. This PR is for visibility. When it is approved, I'll do a direct push to master with the merge commit.
.github/workflows/test-objc.yaml - resolved manually to make sure only new lines are modified.
CHANGELOG.md - resolved manually
Other conflicts resolved automatically.","julepka closed this 2 minutes ago

You don't really have to close the PR with a manual merge. Once GitHub sees that the commits from PR got into the target branch, it will mark it as merged.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,823,2021-05-14T19:07:32Z,2021-05-17T14:10:38Z,2021-05-17T14:10:38Z,MERGED,True,50,126,14,https://github.com/julepka,Updated Carthage examples to use XCF,4,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/823,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/823,"Updated Carthage examples:

Bumped Themis version to 0.13.9 that updates OpenSSL to 1.1.1k
Updated test projects to use themis.xcframework
Updated Carthage CI tests to build Themis XCFramework: added --use-xcframeworks flag

Note: Bitrise doesn't support the required Carthage version 0.38 to build XCF properly. They are going to update to 0.38 about in a week: https://discuss.bitrise.io/t/how-to-upgrade-carthage-to-version-0-38-0/16796. If we are not in hurry, this PR can wait for the Bitrise update.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Updated Carthage examples:

Bumped Themis version to 0.13.9 that updates OpenSSL to 1.1.1k
Updated test projects to use themis.xcframework
Updated Carthage CI tests to build Themis XCFramework: added --use-xcframeworks flag

Note: Bitrise doesn't support the required Carthage version 0.38 to build XCF properly. They are going to update to 0.38 about in a week: https://discuss.bitrise.io/t/how-to-upgrade-carthage-to-version-0-38-0/16796. If we are not in hurry, this PR can wait for the Bitrise update.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,"{'THUMBS_UP': ['https://github.com/ilammy', 'https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,823,2021-05-14T19:07:32Z,2021-05-17T14:10:38Z,2021-05-17T14:10:38Z,MERGED,True,50,126,14,https://github.com/julepka,Updated Carthage examples to use XCF,4,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/823,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/823#issuecomment-841863719,"Updated Carthage examples:

Bumped Themis version to 0.13.9 that updates OpenSSL to 1.1.1k
Updated test projects to use themis.xcframework
Updated Carthage CI tests to build Themis XCFramework: added --use-xcframeworks flag

Note: Bitrise doesn't support the required Carthage version 0.38 to build XCF properly. They are going to update to 0.38 about in a week: https://discuss.bitrise.io/t/how-to-upgrade-carthage-to-version-0-38-0/16796. If we are not in hurry, this PR can wait for the Bitrise update.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","If we are not in hurry, this PR can wait for the Bitrise update.

I suggest merge it, and then in a week, tweak Bitrise tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,824,2021-05-21T22:11:05Z,2021-05-23T22:14:09Z,2021-05-26T15:41:56Z,MERGED,True,8,1,1,https://github.com/ilammy,Unbreak Android build,2,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/824,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/824,"Honestly, this PR should read “unfuck Android build”, but 1) think of children, 2) this is impossible, the ecosystem is beyond salvation.
So... The builds were broken for a week with some errors like this:
> Configure project :android
Observed package id 'ndk;21.4.7075529' in inconsistent location '/Users/runner/Library/Android/sdk/ndk-bundle' (Expected '/Users/runner/Library/Android/sdk/ndk/21.4.7075529')

FAILURE: Build failed with an exception.

* What went wrong:
Could not determine the dependencies of task ':android:assembleDebug'.
> A problem occurred configuring project ':boringssl'.
   > Invalid revision: 3.18.1-g262b901

Initially I thought that our Gradle setup got too old after all. We keep it pinned at 3.2.1 because that's the one that seems to work with NDK. So I have tried fixing it up from that angle, and spent several hours trying to do that.
Well, that's a red herring. The real reason is that Gradle does not like CMake version for the grave offense of not conforming to semver. I don't want to waste any more of my life on this than I already had, so just nuke that version out from the build machines, this seems to fix avoid the issue so far. Let's see when it breaks next time.
Some background reading:

https://stackoverflow.com/questions/66540676/invalid-revision-3-18-1-cmake-in-android-studio
actions/virtual-environments#2689
flutter/flutter#75600
zerotier/libzt#119

The last issue in the list very aptly describes what I think about all this bullshit called Android ecosystem:

In principle, there is nothing stopping ${your-library-with-native-code} from running on Android, but designing a build process for an android AAR that uses the NDK is not easy. Inevitably some combination of gradle rot, NDK changes, and general android studio bugs prevent any build process from surviving long-term.

And while we're at it, pin the runner to macos-10.15. GitHub people are working on adding macOS 11 support for Actions and it's probably going to happen soon. However, I don't really want to be notified about new and exciting ways to break our builds when that finally happens, so let's keep using the old environment for now.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (does not affect users)","Honestly, this PR should read “unfuck Android build”, but 1) think of children, 2) this is impossible, the ecosystem is beyond salvation.
So... The builds were broken for a week with some errors like this:
> Configure project :android
Observed package id 'ndk;21.4.7075529' in inconsistent location '/Users/runner/Library/Android/sdk/ndk-bundle' (Expected '/Users/runner/Library/Android/sdk/ndk/21.4.7075529')

FAILURE: Build failed with an exception.

* What went wrong:
Could not determine the dependencies of task ':android:assembleDebug'.
> A problem occurred configuring project ':boringssl'.
   > Invalid revision: 3.18.1-g262b901

Initially I thought that our Gradle setup got too old after all. We keep it pinned at 3.2.1 because that's the one that seems to work with NDK. So I have tried fixing it up from that angle, and spent several hours trying to do that.
Well, that's a red herring. The real reason is that Gradle does not like CMake version for the grave offense of not conforming to semver. I don't want to waste any more of my life on this than I already had, so just nuke that version out from the build machines, this seems to fix avoid the issue so far. Let's see when it breaks next time.
Some background reading:

https://stackoverflow.com/questions/66540676/invalid-revision-3-18-1-cmake-in-android-studio
actions/virtual-environments#2689
flutter/flutter#75600
zerotier/libzt#119

The last issue in the list very aptly describes what I think about all this bullshit called Android ecosystem:

In principle, there is nothing stopping ${your-library-with-native-code} from running on Android, but designing a build process for an android AAR that uses the NDK is not easy. Inevitably some combination of gradle rot, NDK changes, and general android studio bugs prevent any build process from surviving long-term.

And while we're at it, pin the runner to macos-10.15. GitHub people are working on adding macOS 11 support for Actions and it's probably going to happen soon. However, I don't really want to be notified about new and exciting ways to break our builds when that finally happens, so let's keep using the old environment for now.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (does not affect users)",True,"{'THUMBS_UP': ['https://github.com/buzmeg', 'https://github.com/pavel-kolesnikov', 'https://github.com/vixentael'], 'HEART': ['https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,824,2021-05-21T22:11:05Z,2021-05-23T22:14:09Z,2021-05-26T15:41:56Z,MERGED,True,8,1,1,https://github.com/ilammy,Unbreak Android build,2,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/824,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/824#issuecomment-846632009,"Honestly, this PR should read “unfuck Android build”, but 1) think of children, 2) this is impossible, the ecosystem is beyond salvation.
So... The builds were broken for a week with some errors like this:
> Configure project :android
Observed package id 'ndk;21.4.7075529' in inconsistent location '/Users/runner/Library/Android/sdk/ndk-bundle' (Expected '/Users/runner/Library/Android/sdk/ndk/21.4.7075529')

FAILURE: Build failed with an exception.

* What went wrong:
Could not determine the dependencies of task ':android:assembleDebug'.
> A problem occurred configuring project ':boringssl'.
   > Invalid revision: 3.18.1-g262b901

Initially I thought that our Gradle setup got too old after all. We keep it pinned at 3.2.1 because that's the one that seems to work with NDK. So I have tried fixing it up from that angle, and spent several hours trying to do that.
Well, that's a red herring. The real reason is that Gradle does not like CMake version for the grave offense of not conforming to semver. I don't want to waste any more of my life on this than I already had, so just nuke that version out from the build machines, this seems to fix avoid the issue so far. Let's see when it breaks next time.
Some background reading:

https://stackoverflow.com/questions/66540676/invalid-revision-3-18-1-cmake-in-android-studio
actions/virtual-environments#2689
flutter/flutter#75600
zerotier/libzt#119

The last issue in the list very aptly describes what I think about all this bullshit called Android ecosystem:

In principle, there is nothing stopping ${your-library-with-native-code} from running on Android, but designing a build process for an android AAR that uses the NDK is not easy. Inevitably some combination of gradle rot, NDK changes, and general android studio bugs prevent any build process from surviving long-term.

And while we're at it, pin the runner to macos-10.15. GitHub people are working on adding macOS 11 support for Actions and it's probably going to happen soon. However, I don't really want to be notified about new and exciting ways to break our builds when that finally happens, so let's keep using the old environment for now.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (does not affect users)","the grave offense of not conforming to semver

We've all been there....

Inevitably some combination of gradle rot, NDK changes, and general android studio bugs prevent any build process from surviving long-term.

Same for iOS honestly: a combination of build package (frameworks/XCFramework), Xcode version, Carthage/CCP/SPM versions...

thank you @ilammy for finding the reason of Android tests failing!
P.S. Bitrise iOS tests are failing because Bitrise doesn't have 0.38 carthage yet (but they promise to add it soon)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,824,2021-05-21T22:11:05Z,2021-05-23T22:14:09Z,2021-05-26T15:41:56Z,MERGED,True,8,1,1,https://github.com/ilammy,Unbreak Android build,2,"['O-Android :robot:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/824,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/824#issuecomment-848883395,"Honestly, this PR should read “unfuck Android build”, but 1) think of children, 2) this is impossible, the ecosystem is beyond salvation.
So... The builds were broken for a week with some errors like this:
> Configure project :android
Observed package id 'ndk;21.4.7075529' in inconsistent location '/Users/runner/Library/Android/sdk/ndk-bundle' (Expected '/Users/runner/Library/Android/sdk/ndk/21.4.7075529')

FAILURE: Build failed with an exception.

* What went wrong:
Could not determine the dependencies of task ':android:assembleDebug'.
> A problem occurred configuring project ':boringssl'.
   > Invalid revision: 3.18.1-g262b901

Initially I thought that our Gradle setup got too old after all. We keep it pinned at 3.2.1 because that's the one that seems to work with NDK. So I have tried fixing it up from that angle, and spent several hours trying to do that.
Well, that's a red herring. The real reason is that Gradle does not like CMake version for the grave offense of not conforming to semver. I don't want to waste any more of my life on this than I already had, so just nuke that version out from the build machines, this seems to fix avoid the issue so far. Let's see when it breaks next time.
Some background reading:

https://stackoverflow.com/questions/66540676/invalid-revision-3-18-1-cmake-in-android-studio
actions/virtual-environments#2689
flutter/flutter#75600
zerotier/libzt#119

The last issue in the list very aptly describes what I think about all this bullshit called Android ecosystem:

In principle, there is nothing stopping ${your-library-with-native-code} from running on Android, but designing a build process for an android AAR that uses the NDK is not easy. Inevitably some combination of gradle rot, NDK changes, and general android studio bugs prevent any build process from surviving long-term.

And while we're at it, pin the runner to macos-10.15. GitHub people are working on adding macOS 11 support for Actions and it's probably going to happen soon. However, I don't really want to be notified about new and exciting ways to break our builds when that finally happens, so let's keep using the old environment for now.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (does not affect users)",@ilammy would you mind please cherry picking this PR to release-013?,True,{'THUMBS_UP': ['https://github.com/ilammy']}
cossacklabs/themis,https://github.com/cossacklabs/themis,825,2021-05-23T04:46:51Z,2021-05-24T14:11:41Z,2021-05-24T14:11:45Z,MERGED,True,139,66,1,https://github.com/ilammy,BoringSSL support for XCFramework builds,15,"['O-iOS :iphone:', 'O-macOS :computer:', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/825,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/825,"Teach @julepka's scripts/create_xcframework.sh building XCFrameworks with BoringSSL flavor.
Now if you
scripts/create_xcframework.sh --with-boringssl

then it builds themis.xcframework statically linked with BoringSSL from third_party/boringssl instead of CLOpenSSL fetched by Carthage.
It takes noticeably more time, but hey, it works. And the result is 10 MB thinner. Go ahead and check it out for yourself.
If no arguments are specified, the script still builds the CLOpenSSL flavor. You can also ask for CLOpenSSL explicitly: --with-clopenssl, or specify both flags to build both options.
Since you can't put two different themis.xcframework files into the same directory, the output paths have slightly changed:

build/xcf_output/BoringSSL/themis.xcframework.zip
build/xcf_output/CLOpenSSL/themis.xcframework.zip

Checklist

 Change is covered by automated tests (nope, the script is not exercised there)
 The coding guidelines are followed
 Example projects and code samples are up-to-date  (they use what they use)
 Changelog is updated (does not affect users, no change for them)","Teach @julepka's scripts/create_xcframework.sh building XCFrameworks with BoringSSL flavor.
Now if you
scripts/create_xcframework.sh --with-boringssl

then it builds themis.xcframework statically linked with BoringSSL from third_party/boringssl instead of CLOpenSSL fetched by Carthage.
It takes noticeably more time, but hey, it works. And the result is 10 MB thinner. Go ahead and check it out for yourself.
If no arguments are specified, the script still builds the CLOpenSSL flavor. You can also ask for CLOpenSSL explicitly: --with-clopenssl, or specify both flags to build both options.
Since you can't put two different themis.xcframework files into the same directory, the output paths have slightly changed:

build/xcf_output/BoringSSL/themis.xcframework.zip
build/xcf_output/CLOpenSSL/themis.xcframework.zip

Checklist

 Change is covered by automated tests (nope, the script is not exercised there)
 The coding guidelines are followed
 Example projects and code samples are up-to-date  (they use what they use)
 Changelog is updated (does not affect users, no change for them)",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,825,2021-05-23T04:46:51Z,2021-05-24T14:11:41Z,2021-05-24T14:11:45Z,MERGED,True,139,66,1,https://github.com/ilammy,BoringSSL support for XCFramework builds,15,"['O-iOS :iphone:', 'O-macOS :computer:', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/825,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/825#issuecomment-846632521,"Teach @julepka's scripts/create_xcframework.sh building XCFrameworks with BoringSSL flavor.
Now if you
scripts/create_xcframework.sh --with-boringssl

then it builds themis.xcframework statically linked with BoringSSL from third_party/boringssl instead of CLOpenSSL fetched by Carthage.
It takes noticeably more time, but hey, it works. And the result is 10 MB thinner. Go ahead and check it out for yourself.
If no arguments are specified, the script still builds the CLOpenSSL flavor. You can also ask for CLOpenSSL explicitly: --with-clopenssl, or specify both flags to build both options.
Since you can't put two different themis.xcframework files into the same directory, the output paths have slightly changed:

build/xcf_output/BoringSSL/themis.xcframework.zip
build/xcf_output/CLOpenSSL/themis.xcframework.zip

Checklist

 Change is covered by automated tests (nope, the script is not exercised there)
 The coding guidelines are followed
 Example projects and code samples are up-to-date  (they use what they use)
 Changelog is updated (does not affect users, no change for them)",That's awesome! I wish we could run tests on these changes somehow (but Bitrise is still broken..),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,825,2021-05-23T04:46:51Z,2021-05-24T14:11:41Z,2021-05-24T14:11:45Z,MERGED,True,139,66,1,https://github.com/ilammy,BoringSSL support for XCFramework builds,15,"['O-iOS :iphone:', 'O-macOS :computer:', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/825,https://github.com/julepka,3,https://github.com/cossacklabs/themis/pull/825#issuecomment-846915011,"Teach @julepka's scripts/create_xcframework.sh building XCFrameworks with BoringSSL flavor.
Now if you
scripts/create_xcframework.sh --with-boringssl

then it builds themis.xcframework statically linked with BoringSSL from third_party/boringssl instead of CLOpenSSL fetched by Carthage.
It takes noticeably more time, but hey, it works. And the result is 10 MB thinner. Go ahead and check it out for yourself.
If no arguments are specified, the script still builds the CLOpenSSL flavor. You can also ask for CLOpenSSL explicitly: --with-clopenssl, or specify both flags to build both options.
Since you can't put two different themis.xcframework files into the same directory, the output paths have slightly changed:

build/xcf_output/BoringSSL/themis.xcframework.zip
build/xcf_output/CLOpenSSL/themis.xcframework.zip

Checklist

 Change is covered by automated tests (nope, the script is not exercised there)
 The coding guidelines are followed
 Example projects and code samples are up-to-date  (they use what they use)
 Changelog is updated (does not affect users, no change for them)",Nice and clean!,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,826,2021-05-24T12:05:47Z,2021-05-24T15:07:02Z,2021-05-24T15:07:05Z,MERGED,True,64,218,71,https://github.com/vixentael,update iOS SPM examples with icons for TestFlight usage,2,"['O-iOS :iphone:', 'M-SPM']",https://github.com/cossacklabs/themis/pull/826,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/826,"I've tested our new SPM examples and uploaded builds to TestFlight / App Store. I've added icons, changes bundle URL and added some UI for improving our testing life.
✅ Good news: SPM examples pass all Apple-related checks (except for maybe really releasing the app).
Checklist

 Example projects and code samples are up-to-date (in case of API changes)","I've tested our new SPM examples and uploaded builds to TestFlight / App Store. I've added icons, changes bundle URL and added some UI for improving our testing life.
✅ Good news: SPM examples pass all Apple-related checks (except for maybe really releasing the app).
Checklist

 Example projects and code samples are up-to-date (in case of API changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,826,2021-05-24T12:05:47Z,2021-05-24T15:07:02Z,2021-05-24T15:07:05Z,MERGED,True,64,218,71,https://github.com/vixentael,update iOS SPM examples with icons for TestFlight usage,2,"['O-iOS :iphone:', 'M-SPM']",https://github.com/cossacklabs/themis/pull/826,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/826#issuecomment-847014207,"I've tested our new SPM examples and uploaded builds to TestFlight / App Store. I've added icons, changes bundle URL and added some UI for improving our testing life.
✅ Good news: SPM examples pass all Apple-related checks (except for maybe really releasing the app).
Checklist

 Example projects and code samples are up-to-date (in case of API changes)",Bitrise fails expectedly,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,827,2021-05-24T13:43:47Z,2021-05-24T15:01:46Z,2021-05-24T15:11:17Z,MERGED,True,160,51,25,https://github.com/julepka,Fixing Carthage examples embed settings,2,"['O-iOS :iphone:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/827,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/827,"Changes Do not embed to Embed and sign option for Carthage iOS for Swift and Objective-C
Update Carthage iOS Swift example show a Hello label when app is running
Update Carthage iOS Obj-C example to contain app icon to make it easier to test in TestFlight

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes) - No new features added","Changes Do not embed to Embed and sign option for Carthage iOS for Swift and Objective-C
Update Carthage iOS Swift example show a Hello label when app is running
Update Carthage iOS Obj-C example to contain app icon to make it easier to test in TestFlight

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes) - No new features added",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,827,2021-05-24T13:43:47Z,2021-05-24T15:01:46Z,2021-05-24T15:11:17Z,MERGED,True,160,51,25,https://github.com/julepka,Fixing Carthage examples embed settings,2,"['O-iOS :iphone:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/827,https://github.com/julepka,2,https://github.com/cossacklabs/themis/pull/827#issuecomment-847109241,"Changes Do not embed to Embed and sign option for Carthage iOS for Swift and Objective-C
Update Carthage iOS Swift example show a Hello label when app is running
Update Carthage iOS Obj-C example to contain app icon to make it easier to test in TestFlight

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes) - No new features added","It's weird that the frameworks were not embedded before...

Previously there were a workaround for Carthage to copy frameworks. Like, you do not embed but it copies with a script or something like that... And with XCF support they've removed the workaround but I forgot to embed the framework 😓",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,827,2021-05-24T13:43:47Z,2021-05-24T15:01:46Z,2021-05-24T15:11:17Z,MERGED,True,160,51,25,https://github.com/julepka,Fixing Carthage examples embed settings,2,"['O-iOS :iphone:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/827,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/827#issuecomment-847110693,"Changes Do not embed to Embed and sign option for Carthage iOS for Swift and Objective-C
Update Carthage iOS Swift example show a Hello label when app is running
Update Carthage iOS Obj-C example to contain app icon to make it easier to test in TestFlight

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes) - No new features added","We have way too many examples to test them all manually.

Truly so, the problem arise with testing examples on a real device / via TestFlight. We might want to add some extra step on archiving / uploading to TF, but we will still have a step to manually install on a real device.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,828,2021-05-26T09:40:31Z,2021-05-26T15:35:30Z,2021-05-26T15:35:30Z,MERGED,True,37,16,4,https://github.com/julepka,Themis CocoaPods now support CLOpenSSL-XCF,11,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/828,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/828,"Release 0.13.10
Now CocoaPods will use CLOpenSSL-XCF that contains the latest version of OpenSSL 1.1.1k.
We no longer need a workaround for arm64 simulator for subspec with CLOpenSSL-XCF.
Cherry-picked latest Carthage examples to fix tests in this branch.
Example projects will be updated afterwards, so they can reference 0.13.10 podspec
Also, just FYI there are thoughts to drop GRKOpenSSLFramework support as there are no updates from them for a long time... It may be an item to consider for 0.14
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Release 0.13.10
Now CocoaPods will use CLOpenSSL-XCF that contains the latest version of OpenSSL 1.1.1k.
We no longer need a workaround for arm64 simulator for subspec with CLOpenSSL-XCF.
Cherry-picked latest Carthage examples to fix tests in this branch.
Example projects will be updated afterwards, so they can reference 0.13.10 podspec
Also, just FYI there are thoughts to drop GRKOpenSSLFramework support as there are no updates from them for a long time... It may be an item to consider for 0.14
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,828,2021-05-26T09:40:31Z,2021-05-26T15:35:30Z,2021-05-26T15:35:30Z,MERGED,True,37,16,4,https://github.com/julepka,Themis CocoaPods now support CLOpenSSL-XCF,11,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/828,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/828#issuecomment-848698885,"Release 0.13.10
Now CocoaPods will use CLOpenSSL-XCF that contains the latest version of OpenSSL 1.1.1k.
We no longer need a workaround for arm64 simulator for subspec with CLOpenSSL-XCF.
Cherry-picked latest Carthage examples to fix tests in this branch.
Example projects will be updated afterwards, so they can reference 0.13.10 podspec
Also, just FYI there are thoughts to drop GRKOpenSSLFramework support as there are no updates from them for a long time... It may be an item to consider for 0.14
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Regarding GRKOpenSSL, I believe the CLOpenSSL support appear somewhere in 0.13.x release but was not a part of 0.13.0. There was also no deprecation notice for GRKOpenSSL, so I think it would not be nice to just drop it immediately.
At the same time, 0.13.x branch can serve as a fallback. So even if it's not technically nice, and we should have planned it better, I think it would not be a major issue for users if we drop themis/themis-openssl subspec right in 0.14.0 on a short notice. Most of them should be using just themis which is still okay.
So it might be acceptable to issue a deprecation notice now, in 0.13.10, then drop it in 0.14.0. Those who still need old subspecs should continue using 0.13.10 or earlier, until they are ready to migrate to 0.14.x – which should be a matter of replacing themis/themis-openssl with themis, and maybe readding GRKOpenSSL somehow if their process is weird.
While we're at it, maybe it's time to drop themis/themis-boringssl as well? BoringSSL pod has not been updated in ages. I don't believe we are providing much value by shipping this flavor.",True,"{'EYES': ['https://github.com/vixentael', 'https://github.com/julepka']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,828,2021-05-26T09:40:31Z,2021-05-26T15:35:30Z,2021-05-26T15:35:30Z,MERGED,True,37,16,4,https://github.com/julepka,Themis CocoaPods now support CLOpenSSL-XCF,11,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/828,https://github.com/julepka,3,https://github.com/cossacklabs/themis/pull/828#issuecomment-848768721,"Release 0.13.10
Now CocoaPods will use CLOpenSSL-XCF that contains the latest version of OpenSSL 1.1.1k.
We no longer need a workaround for arm64 simulator for subspec with CLOpenSSL-XCF.
Cherry-picked latest Carthage examples to fix tests in this branch.
Example projects will be updated afterwards, so they can reference 0.13.10 podspec
Also, just FYI there are thoughts to drop GRKOpenSSLFramework support as there are no updates from them for a long time... It may be an item to consider for 0.14
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Regarding GRKOpenSSL, I believe the CLOpenSSL support appear somewhere in 0.13.x release but was not a part of 0.13.0. There was also no deprecation notice for GRKOpenSSL, so I think it would not be nice to just drop it immediately.
At the same time, 0.13.x branch can serve as a fallback. So even if it's not technically nice, and we should have planned it better, I think it would not be a major issue for users if we drop themis/themis-openssl subspec right in 0.14.0 on a short notice. Most of them should be using just themis which is still okay.
So it might be acceptable to issue a deprecation notice now, in 0.13.10, then drop it in 0.14.0. Those who still need old subspecs should continue using 0.13.10 or earlier, until they are ready to migrate to 0.14.x – which should be a matter of replacing themis/themis-openssl with themis, and maybe readding GRKOpenSSL somehow if their process is weird.

I agree. Let's deprecate 'themis-openssl' with GRKOpenSSL. I'm looking for the best option to give a notice about that. Poscpec syntax doesn't support subspec deprecation. I don't see a way to notify the user when running 'pod install' or 'pod update'. I think we can just make a notice in Changelog, Release Notes and in public docs.

While we're at it, maybe it's time to drop themis/themis-boringssl as well? BoringSSL pod has not been updated in ages. I don't believe we are providing much value by shipping this flavor.

I've just checked it and it seems that there is still some life in their repo. But yeah... its pod was not updated since 2018 I guess... I think we can deprecate it as well.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,828,2021-05-26T09:40:31Z,2021-05-26T15:35:30Z,2021-05-26T15:35:30Z,MERGED,True,37,16,4,https://github.com/julepka,Themis CocoaPods now support CLOpenSSL-XCF,11,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/828,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/828#issuecomment-848823245,"Release 0.13.10
Now CocoaPods will use CLOpenSSL-XCF that contains the latest version of OpenSSL 1.1.1k.
We no longer need a workaround for arm64 simulator for subspec with CLOpenSSL-XCF.
Cherry-picked latest Carthage examples to fix tests in this branch.
Example projects will be updated afterwards, so they can reference 0.13.10 podspec
Also, just FYI there are thoughts to drop GRKOpenSSLFramework support as there are no updates from them for a long time... It may be an item to consider for 0.14
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","@julepka,

I've just checked it and it seems that there is still some life in their repo. But yeah... its pod was not updated since 2018 I guess... I think we can deprecate it as well.

BoringSSL repo is alive and kicking, of course. However, they don't seem to be maintaining the podspec anymore. It has been submitted by a person from Google, sure, but I guess they got their promotion and it ended with that 🤷

@vixentael,

CCPs

My tiny head can hold only so many acronyms. There are already two CCPs there (one from China and one from Iceland), and I doubt I can fit any more...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,828,2021-05-26T09:40:31Z,2021-05-26T15:35:30Z,2021-05-26T15:35:30Z,MERGED,True,37,16,4,https://github.com/julepka,Themis CocoaPods now support CLOpenSSL-XCF,11,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/828,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/828#issuecomment-848873747,"Release 0.13.10
Now CocoaPods will use CLOpenSSL-XCF that contains the latest version of OpenSSL 1.1.1k.
We no longer need a workaround for arm64 simulator for subspec with CLOpenSSL-XCF.
Cherry-picked latest Carthage examples to fix tests in this branch.
Example projects will be updated afterwards, so they can reference 0.13.10 podspec
Also, just FYI there are thoughts to drop GRKOpenSSLFramework support as there are no updates from them for a long time... It may be an item to consider for 0.14
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",CI machine can't find python six package again (see #829 (comment)). I use my sudo powers to merge this PR.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,829,2021-05-26T12:31:55Z,2021-05-26T14:41:03Z,2021-05-26T14:41:04Z,MERGED,True,227,237,37,https://github.com/julepka,Update Carthage examples to unbreak tests,3,"['O-iOS :iphone:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/829,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/829,"Cherry-picked latest Carthage examples from master.
Now Carthage examples are using XCF and it fixes our tests.","Cherry-picked latest Carthage examples from master.
Now Carthage examples are using XCF and it fixes our tests.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,829,2021-05-26T12:31:55Z,2021-05-26T14:41:03Z,2021-05-26T14:41:04Z,MERGED,True,227,237,37,https://github.com/julepka,Update Carthage examples to unbreak tests,3,"['O-iOS :iphone:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/829,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/829#issuecomment-848817478,"Cherry-picked latest Carthage examples from master.
Now Carthage examples are using XCF and it fixes our tests.","Any clues as to why CircleCI might be failing?

Known problem, sometimes CircleCi can't find python six package.

The package definitely exists. We haven't investigated yet as tests usually pass after rerun.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,829,2021-05-26T12:31:55Z,2021-05-26T14:41:03Z,2021-05-26T14:41:04Z,MERGED,True,227,237,37,https://github.com/julepka,Update Carthage examples to unbreak tests,3,"['O-iOS :iphone:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/829,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/829#issuecomment-848820407,"Cherry-picked latest Carthage examples from master.
Now Carthage examples are using XCF and it fixes our tests.","Let's merge this, once tests are green.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,829,2021-05-26T12:31:55Z,2021-05-26T14:41:03Z,2021-05-26T14:41:04Z,MERGED,True,227,237,37,https://github.com/julepka,Update Carthage examples to unbreak tests,3,"['O-iOS :iphone:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/829,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/829#issuecomment-848827140,"Cherry-picked latest Carthage examples from master.
Now Carthage examples are using XCF and it fixes our tests.","Okay so these two tests are still failing due to absent six package.
My proof that package is still there, tests are failing are due to lunar eclipse, sharks eating transatlantic cables, or caching issues on CI servers.

I use my sudo powers and merge this PR.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,830,2021-05-27T09:21:41Z,2021-05-27T12:51:06Z,2021-05-27T12:51:06Z,MERGED,True,264,251,40,https://github.com/julepka,Release process: Merge 0.13.10 to stable,4,"['O-iOS :iphone:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/830,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/830,"Merge 0.13.10 to stable
We can do a merge commit here or I can make a direct push.
Git decided that Carthage XCF support and OpenSSL 1.1.1k (#817) is not there... probably because it was merged with squash.
Carthage Bitrise test are failing expectedly (we are waiting for a new version of Carthage that supports XCF)","Merge 0.13.10 to stable
We can do a merge commit here or I can make a direct push.
Git decided that Carthage XCF support and OpenSSL 1.1.1k (#817) is not there... probably because it was merged with squash.
Carthage Bitrise test are failing expectedly (we are waiting for a new version of Carthage that supports XCF)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,830,2021-05-27T09:21:41Z,2021-05-27T12:51:06Z,2021-05-27T12:51:06Z,MERGED,True,264,251,40,https://github.com/julepka,Release process: Merge 0.13.10 to stable,4,"['O-iOS :iphone:', 'M-CocoaPods', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/830,https://github.com/julepka,2,https://github.com/cossacklabs/themis/pull/830#issuecomment-849492086,"Merge 0.13.10 to stable
We can do a merge commit here or I can make a direct push.
Git decided that Carthage XCF support and OpenSSL 1.1.1k (#817) is not there... probably because it was merged with squash.
Carthage Bitrise test are failing expectedly (we are waiting for a new version of Carthage that supports XCF)","Some Carthage tests are failing for no reason, reruning them usually helps.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,831,2021-05-27T13:05:45Z,2021-05-27T19:01:16Z,2021-05-27T19:01:17Z,MERGED,True,39,17,4,https://github.com/julepka,Release process: merge 0.13.10 to master,2,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/831,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/831,"Merging release 0.13.10 to master
Carthage examples code returned back without lots of merge conflicts :)
I believe there is no need to make direct pushes and the history should be still good","Merging release 0.13.10 to master
Carthage examples code returned back without lots of merge conflicts :)
I believe there is no need to make direct pushes and the history should be still good",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,832,2021-05-28T00:01:41Z,2021-05-28T10:37:20Z,2021-05-28T10:37:39Z,CLOSED,False,8,1,1,https://github.com/ilammy,Unbreak Android build (on stable),1,"['O-Android :robot:', 'infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/832,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/832,"Cherry-pick #824 onto stable.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (does not affect users)","Cherry-pick #824 onto stable.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (does not affect users)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,832,2021-05-28T00:01:41Z,2021-05-28T10:37:20Z,2021-05-28T10:37:39Z,CLOSED,False,8,1,1,https://github.com/ilammy,Unbreak Android build (on stable),1,"['O-Android :robot:', 'infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/832,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/832#issuecomment-850325622,"Cherry-pick #824 onto stable.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (does not affect users)","It seems the CircleCI build issue with Python is persistent and we won't get away with cherry-picking just this change.
I'll fix that issue on release/0.13, then merge both updates into stable.",True,"{'EYES': ['https://github.com/vixentael', 'https://github.com/ilammy']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,833,2021-05-28T00:02:28Z,2021-05-28T10:38:12Z,2021-05-28T10:38:16Z,MERGED,True,8,1,1,https://github.com/ilammy,Unbreak Android build (on release/0.13),1,"['O-Android :robot:', 'infrastructure', 'backport']",https://github.com/cossacklabs/themis/pull/833,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/833,"Cherry-pick #824 onto release/0.13.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (does not affect users)","Cherry-pick #824 onto release/0.13.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (does not affect users)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,834,2021-05-28T10:19:57Z,2021-05-28T12:26:43Z,2021-05-28T12:54:54Z,MERGED,True,81,38,7,https://github.com/julepka,update CocoaPods examples with Themis 0.13.10,2,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/834,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/834,"Updated CocoaPods examples to use Themis 0.13.10.
The Embed Pods Frameworks part was added to ThemisTest.xcodeproj by the CocoaPods.
Tested on simulator, device, uploaded to TestFlight.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Updated CocoaPods examples to use Themis 0.13.10.
The Embed Pods Frameworks part was added to ThemisTest.xcodeproj by the CocoaPods.
Tested on simulator, device, uploaded to TestFlight.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,834,2021-05-28T10:19:57Z,2021-05-28T12:26:43Z,2021-05-28T12:54:54Z,MERGED,True,81,38,7,https://github.com/julepka,update CocoaPods examples with Themis 0.13.10,2,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/834,https://github.com/julepka,2,https://github.com/cossacklabs/themis/pull/834#issuecomment-850370141,"Updated CocoaPods examples to use Themis 0.13.10.
The Embed Pods Frameworks part was added to ThemisTest.xcodeproj by the CocoaPods.
Tested on simulator, device, uploaded to TestFlight.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",Investigating why Carthage project test is failing... Locally I'm getting another problem: it times out to load the binary...,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,834,2021-05-28T10:19:57Z,2021-05-28T12:26:43Z,2021-05-28T12:54:54Z,MERGED,True,81,38,7,https://github.com/julepka,update CocoaPods examples with Themis 0.13.10,2,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/834,https://github.com/julepka,3,https://github.com/cossacklabs/themis/pull/834#issuecomment-850382918,"Updated CocoaPods examples to use Themis 0.13.10.
The Embed Pods Frameworks part was added to ThemisTest.xcodeproj by the CocoaPods.
Tested on simulator, device, uploaded to TestFlight.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",The Carthage test was just in a bad mood.,True,{'LAUGH': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,834,2021-05-28T10:19:57Z,2021-05-28T12:26:43Z,2021-05-28T12:54:54Z,MERGED,True,81,38,7,https://github.com/julepka,update CocoaPods examples with Themis 0.13.10,2,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/834,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/834#issuecomment-850385477,"Updated CocoaPods examples to use Themis 0.13.10.
The Embed Pods Frameworks part was added to ThemisTest.xcodeproj by the CocoaPods.
Tested on simulator, device, uploaded to TestFlight.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","I've tried restarting the build on CI several times, it keeps failing with different issues. But if you keep doing that, eventually it will give in and complete its job.
On my machine I see the same issue as @julepka describes:
xcodebuild timed out while trying to read ThemisTest.xcodeproj 😭

It seems that Carthage's quirky behavior has finally bit us, with too many example projects in docs/examples.
Cartage has this weird ardency to inspect absolutely every *.xcodeproj it can find in the entire filesystem tree under the current directory, even if you only want to build the one in the current directory. I guess it especially does not like projects intended for use with CocoaPods because they are competitors do not have their dependencies set up properly. Or probably tries to fetch all SPM dependencies, because why wouldn't you do that to a project that you won't build. I guess it conservatively assumes that other Xcode project might be subprojects or whatnot.
You can check that by doing
rm -rf docs/examples
rm -rf tests/objcthemis

followed by
carthage build --no-skip-current --use-xcframeworks

which will not time out and instead proceeds building schemes of Themis.xcodeproj.
This might be used as a workaround for this specific job, I guess.
Bad news is that Carthage does the same stupid shit when building Themis as a dependency. If you force Carthage to build from source (carthage bootstrap --no-use-binaries in any of the examples) then it will time out there as well. We're kinda saved by prebuilt binaries, but that's just a side effect.
Carthage issue tracker has a couple of issues complaining about this recursive behavior, but they did not get anywhere. People just gave up and split their Xcode projects into multiple repos. I wonder if it's time for us to complain too.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,834,2021-05-28T10:19:57Z,2021-05-28T12:26:43Z,2021-05-28T12:54:54Z,MERGED,True,81,38,7,https://github.com/julepka,update CocoaPods examples with Themis 0.13.10,2,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/834,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/834#issuecomment-850386478,"Updated CocoaPods examples to use Themis 0.13.10.
The Embed Pods Frameworks part was added to ThemisTest.xcodeproj by the CocoaPods.
Tested on simulator, device, uploaded to TestFlight.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",I've fixed similar issue on my machine by updating carthage to 0.38 and using xcode 12.4,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,834,2021-05-28T10:19:57Z,2021-05-28T12:26:43Z,2021-05-28T12:54:54Z,MERGED,True,81,38,7,https://github.com/julepka,update CocoaPods examples with Themis 0.13.10,2,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/834,https://github.com/julepka,6,https://github.com/cossacklabs/themis/pull/834#issuecomment-850392916,"Updated CocoaPods examples to use Themis 0.13.10.
The Embed Pods Frameworks part was added to ThemisTest.xcodeproj by the CocoaPods.
Tested on simulator, device, uploaded to TestFlight.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","I've fixed the timeout issue locally just by re-running carthage build --no-skip-current --use-xcframeworks 4 times...
The last time the error in CI reached the maximum weirdness: it complained about Package.resolved file which is specific to SPM examples in our repo.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,834,2021-05-28T10:19:57Z,2021-05-28T12:26:43Z,2021-05-28T12:54:54Z,MERGED,True,81,38,7,https://github.com/julepka,update CocoaPods examples with Themis 0.13.10,2,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/834,https://github.com/vixentael,7,https://github.com/cossacklabs/themis/pull/834#issuecomment-850393727,"Updated CocoaPods examples to use Themis 0.13.10.
The Embed Pods Frameworks part was added to ThemisTest.xcodeproj by the CocoaPods.
Tested on simulator, device, uploaded to TestFlight.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","the maximum weirdness

...caches...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,834,2021-05-28T10:19:57Z,2021-05-28T12:26:43Z,2021-05-28T12:54:54Z,MERGED,True,81,38,7,https://github.com/julepka,update CocoaPods examples with Themis 0.13.10,2,"['O-iOS :iphone:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/834,https://github.com/ilammy,8,https://github.com/cossacklabs/themis/pull/834#issuecomment-850398781,"Updated CocoaPods examples to use Themis 0.13.10.
The Embed Pods Frameworks part was added to ThemisTest.xcodeproj by the CocoaPods.
Tested on simulator, device, uploaded to TestFlight.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","I've fixed the timeout issue locally just by re-running carthage build --no-skip-current --use-xcframeworks 4 times...

Should I consider this a fix then?
--- a/.github/workflows/test-objc.yaml
+++ b/.github/workflows/test-objc.yaml
@@ -179,7 +179,8 @@ jobs:
           carthage bootstrap --use-xcframeworks
       - name: Build Carthage projects
         run: |
-          carthage build --no-skip-current --use-xcframeworks
+          while ! carthage build --no-skip-current --use-xcframeworks
+          do (^___^) done

   project-cocoapods:
     name: CocoaPods project",True,"{'LAUGH': ['https://github.com/julepka', 'https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,835,2021-05-28T11:22:09Z,2021-05-28T12:36:23Z,2021-05-28T12:37:11Z,MERGED,True,26,0,1,https://github.com/ilammy,Unbreak PyThemis installation on CircleCI,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/835,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/835,"CircleCI builds for release/0.13 and stable are still using cossacklabs/android-build:2019.01 images based on Ubuntu 16.04. The version of python3-setuptools there is old enough to be not compatible with current PyPI repository format, which results in PyThemis installation failing with the following errors:
Processing dependencies for pythemis==0.13.0
Searching for six
Reading https://pypi.python.org/simple/six/
Couldn't find index page for 'six' (maybe misspelled?)
Scanning index of all packages (this may take a while)
Reading https://pypi.python.org/simple/
No local packages or download links found for six
error: Could not find suitable distribution for Requirement.parse('six')
Makefile:599: recipe for target 'pythemis_install' failed
make: *** [pythemis_install] Error 1

Ideally, we should migrate away from setup.py to a “modern” toolchain—whatever that might be right now in pythonland, @Lagovas?—but that's a story for another day. Definitely not for the stable branch. Installing six with pip3 works even with Ubuntu 16.04 versions of Python toolchain.
Other CircleCI jobs use cossacklabs/build:ubuntu-bionic image which lacks some things preinstalled in cossacklabs/android-build:2019.01 (such as Go toolchain).
I don't really have neither time nor desire to fiddle with these old images, rebuilding them properly, etc. However, I do desire to not see maintainers ignoring red builds like it's everyday occurrence. Therefore, here is my compromise: these build images are turned into chimeric abominations of Ubuntu 16.04 + 18.04 repositories, just to pull in a newer version of python3-setuptools which is able to install PyThemis dependencies and allow the build to proceed.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no changes for users)","CircleCI builds for release/0.13 and stable are still using cossacklabs/android-build:2019.01 images based on Ubuntu 16.04. The version of python3-setuptools there is old enough to be not compatible with current PyPI repository format, which results in PyThemis installation failing with the following errors:
Processing dependencies for pythemis==0.13.0
Searching for six
Reading https://pypi.python.org/simple/six/
Couldn't find index page for 'six' (maybe misspelled?)
Scanning index of all packages (this may take a while)
Reading https://pypi.python.org/simple/
No local packages or download links found for six
error: Could not find suitable distribution for Requirement.parse('six')
Makefile:599: recipe for target 'pythemis_install' failed
make: *** [pythemis_install] Error 1

Ideally, we should migrate away from setup.py to a “modern” toolchain—whatever that might be right now in pythonland, @Lagovas?—but that's a story for another day. Definitely not for the stable branch. Installing six with pip3 works even with Ubuntu 16.04 versions of Python toolchain.
Other CircleCI jobs use cossacklabs/build:ubuntu-bionic image which lacks some things preinstalled in cossacklabs/android-build:2019.01 (such as Go toolchain).
I don't really have neither time nor desire to fiddle with these old images, rebuilding them properly, etc. However, I do desire to not see maintainers ignoring red builds like it's everyday occurrence. Therefore, here is my compromise: these build images are turned into chimeric abominations of Ubuntu 16.04 + 18.04 repositories, just to pull in a newer version of python3-setuptools which is able to install PyThemis dependencies and allow the build to proceed.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no changes for users)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,835,2021-05-28T11:22:09Z,2021-05-28T12:36:23Z,2021-05-28T12:37:11Z,MERGED,True,26,0,1,https://github.com/ilammy,Unbreak PyThemis installation on CircleCI,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/835,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/835#issuecomment-850387739,"CircleCI builds for release/0.13 and stable are still using cossacklabs/android-build:2019.01 images based on Ubuntu 16.04. The version of python3-setuptools there is old enough to be not compatible with current PyPI repository format, which results in PyThemis installation failing with the following errors:
Processing dependencies for pythemis==0.13.0
Searching for six
Reading https://pypi.python.org/simple/six/
Couldn't find index page for 'six' (maybe misspelled?)
Scanning index of all packages (this may take a while)
Reading https://pypi.python.org/simple/
No local packages or download links found for six
error: Could not find suitable distribution for Requirement.parse('six')
Makefile:599: recipe for target 'pythemis_install' failed
make: *** [pythemis_install] Error 1

Ideally, we should migrate away from setup.py to a “modern” toolchain—whatever that might be right now in pythonland, @Lagovas?—but that's a story for another day. Definitely not for the stable branch. Installing six with pip3 works even with Ubuntu 16.04 versions of Python toolchain.
Other CircleCI jobs use cossacklabs/build:ubuntu-bionic image which lacks some things preinstalled in cossacklabs/android-build:2019.01 (such as Go toolchain).
I don't really have neither time nor desire to fiddle with these old images, rebuilding them properly, etc. However, I do desire to not see maintainers ignoring red builds like it's everyday occurrence. Therefore, here is my compromise: these build images are turned into chimeric abominations of Ubuntu 16.04 + 18.04 repositories, just to pull in a newer version of python3-setuptools which is able to install PyThemis dependencies and allow the build to proceed.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no changes for users)","I like it!

Instead of liking it you should show mercy and release it from suffering by releasing 0.14 which will kill CircleCI.",True,{'THUMBS_UP': ['https://github.com/julepka']}
cossacklabs/themis,https://github.com/cossacklabs/themis,835,2021-05-28T11:22:09Z,2021-05-28T12:36:23Z,2021-05-28T12:37:11Z,MERGED,True,26,0,1,https://github.com/ilammy,Unbreak PyThemis installation on CircleCI,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/835,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/835#issuecomment-850388429,"CircleCI builds for release/0.13 and stable are still using cossacklabs/android-build:2019.01 images based on Ubuntu 16.04. The version of python3-setuptools there is old enough to be not compatible with current PyPI repository format, which results in PyThemis installation failing with the following errors:
Processing dependencies for pythemis==0.13.0
Searching for six
Reading https://pypi.python.org/simple/six/
Couldn't find index page for 'six' (maybe misspelled?)
Scanning index of all packages (this may take a while)
Reading https://pypi.python.org/simple/
No local packages or download links found for six
error: Could not find suitable distribution for Requirement.parse('six')
Makefile:599: recipe for target 'pythemis_install' failed
make: *** [pythemis_install] Error 1

Ideally, we should migrate away from setup.py to a “modern” toolchain—whatever that might be right now in pythonland, @Lagovas?—but that's a story for another day. Definitely not for the stable branch. Installing six with pip3 works even with Ubuntu 16.04 versions of Python toolchain.
Other CircleCI jobs use cossacklabs/build:ubuntu-bionic image which lacks some things preinstalled in cossacklabs/android-build:2019.01 (such as Go toolchain).
I don't really have neither time nor desire to fiddle with these old images, rebuilding them properly, etc. However, I do desire to not see maintainers ignoring red builds like it's everyday occurrence. Therefore, here is my compromise: these build images are turned into chimeric abominations of Ubuntu 16.04 + 18.04 repositories, just to pull in a newer version of python3-setuptools which is able to install PyThemis dependencies and allow the build to proceed.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no changes for users)","you should show mercy

I'm a cruel god.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,836,2021-05-28T12:46:26Z,2021-05-28T13:18:08Z,2021-05-28T13:25:51Z,MERGED,True,34,1,2,https://github.com/ilammy,Merge CI fixes: `release/0.13` => `stable`,3,['infrastructure'],https://github.com/cossacklabs/themis/pull/836,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/836,"Pull in some stuff that should make all jobs green again. Except for Bitrise. They might be working on it. Or maybe not.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no changes for users)","Pull in some stuff that should make all jobs green again. Except for Bitrise. They might be working on it. Or maybe not.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no changes for users)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,836,2021-05-28T12:46:26Z,2021-05-28T13:18:08Z,2021-05-28T13:25:51Z,MERGED,True,34,1,2,https://github.com/ilammy,Merge CI fixes: `release/0.13` => `stable`,3,['infrastructure'],https://github.com/cossacklabs/themis/pull/836,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/836#issuecomment-850394565,"Pull in some stuff that should make all jobs green again. Except for Bitrise. They might be working on it. Or maybe not.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no changes for users)","Also, let's see how this process works. I've included the merge commit into this PR directly, created by
git checkout stable
git merge -S release/0.13

The only allowed merge mode is “squash” right now. Let's see if GitHub allows me to merge that merge commit as is once this is approved and the builds are confirmed to be okay.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,836,2021-05-28T12:46:26Z,2021-05-28T13:18:08Z,2021-05-28T13:25:51Z,MERGED,True,34,1,2,https://github.com/ilammy,Merge CI fixes: `release/0.13` => `stable`,3,['infrastructure'],https://github.com/cossacklabs/themis/pull/836,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/836#issuecomment-850413424,"Pull in some stuff that should make all jobs green again. Except for Bitrise. They might be working on it. Or maybe not.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no changes for users)","Now I'm on my local branch stable which is the same as bump-stable at 3148510, doing just
git push upstream

And this pushes the merge into stable as is, closing this PR as resolved.
⭐ 🤏",True,"{'EYES': ['https://github.com/julepka'], 'THUMBS_UP': ['https://github.com/julepka']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,836,2021-05-28T12:46:26Z,2021-05-28T13:18:08Z,2021-05-28T13:25:51Z,MERGED,True,34,1,2,https://github.com/ilammy,Merge CI fixes: `release/0.13` => `stable`,3,['infrastructure'],https://github.com/cossacklabs/themis/pull/836,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/836#issuecomment-850417730,"Pull in some stuff that should make all jobs green again. Except for Bitrise. They might be working on it. Or maybe not.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no changes for users)","I'll leave future merge of master => stable as an exercise. (Or stable => master, if there will be yet another maintenance release of 0.13.x before 0.14.0 finally happens.) Now there's a conflict in .circleci/config.yml there that you'll have to resolve.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,837,2021-05-29T02:53:53Z,2021-05-30T05:08:08Z,2021-05-30T05:08:11Z,MERGED,True,24,2,5,https://github.com/ilammy,Use Ninja for BoringSSL if available,5,['infrastructure'],https://github.com/cossacklabs/themis/pull/837,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/837,"Ninja build tool significantly reduces compilation time for BoringSSL in default configuration.
This is mostly due to the fact that it performs parallel builds by default but there are other gains (Makefiles that CMake generates are not that optimal). make -j4 is also a viable option, but it often ends up brittle.

Timings for my machine
As you can see, there is some gain in wall clock time (real), resulting in shorter builds. However, this comes mostly from better parallelization if you look at the user time.
time make ENGINE=boringssl
master:
real	4m30.623s
user	3m32.624s
sys	0m33.530s

with ninja:
real	2m47.085s
user	4m47.580s
sys	0m34.020s

time emmake make wasmthemis
master:
real	2m59.856s
user	2m14.338s
sys	0m29.650s

with ninja:
real	1m57.756s
user	3m13.189s
sys	0m33.403s



Timings for GitHub Actions
It's always nice to see builds run a bit quicker.
master:



Test set
Job
Step
Time




Themis Core
Unit tests (ubuntu)
Build Themis Core (BoringSSL)
3m 09s


Themis Core
Unit tests (macos)
Build Themis Core (BoringSSL)
6m 57s


Themis Core
Memory leaks
Build Themis Core
4m 22s


WasmThemis
Unit tests (16.x)
Build WasmThemis
2m 34s



with ninja:



Test set
Job
Step
Time




Themis Core
Unit tests (ubuntu)
Build Themis Core (BoringSSL)
2m 33s


Themis Core
Unit tests (macos)
Build Themis Core (BoringSSL)
2m 26s


Themis Core
Memory leaks
Build Themis Core
2m 48s


WasmThemis
Unit tests (16.x)
Build WasmThemis
1m 45s




Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Ninja build tool significantly reduces compilation time for BoringSSL in default configuration.
This is mostly due to the fact that it performs parallel builds by default but there are other gains (Makefiles that CMake generates are not that optimal). make -j4 is also a viable option, but it often ends up brittle.

Timings for my machine
As you can see, there is some gain in wall clock time (real), resulting in shorter builds. However, this comes mostly from better parallelization if you look at the user time.
time make ENGINE=boringssl
master:
real	4m30.623s
user	3m32.624s
sys	0m33.530s

with ninja:
real	2m47.085s
user	4m47.580s
sys	0m34.020s

time emmake make wasmthemis
master:
real	2m59.856s
user	2m14.338s
sys	0m29.650s

with ninja:
real	1m57.756s
user	3m13.189s
sys	0m33.403s



Timings for GitHub Actions
It's always nice to see builds run a bit quicker.
master:



Test set
Job
Step
Time




Themis Core
Unit tests (ubuntu)
Build Themis Core (BoringSSL)
3m 09s


Themis Core
Unit tests (macos)
Build Themis Core (BoringSSL)
6m 57s


Themis Core
Memory leaks
Build Themis Core
4m 22s


WasmThemis
Unit tests (16.x)
Build WasmThemis
2m 34s



with ninja:



Test set
Job
Step
Time




Themis Core
Unit tests (ubuntu)
Build Themis Core (BoringSSL)
2m 33s


Themis Core
Unit tests (macos)
Build Themis Core (BoringSSL)
2m 26s


Themis Core
Memory leaks
Build Themis Core
2m 48s


WasmThemis
Unit tests (16.x)
Build WasmThemis
1m 45s




Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,838,2021-05-29T04:04:17Z,2021-05-30T04:01:23Z,2021-05-30T04:01:27Z,MERGED,True,22,0,1,https://github.com/ilammy,Work around Carthage braindeath,1,"['infrastructure', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/838,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/838,"Carthage has this weird ardency to build every Xcode project in can find in the source tree instead of working only with the one in the root dir.
There is probably some deep, well-intentioned reason behind that, but it also causes issues for us. Carthage will end up visiting all the example projects, some of which use SPM to pull Themis dependency, and each of them will do so independently, causing builds to time out.
We are miraculously saved by Themis being distributed as binaries, so Carthage and SPM at least fetch the binary and don't go deeper. If we have supported only from-source builds, this would have led to infinite recursion.
There is not much that we can do about it, but at least we can keep CI builds in shape with a workaround. If all distractions are removed, Carthage will focus on the Xcode project it is supposed to work with. This at least lets out CI to function.
Users that instruct Carthage to build dependencies from source (via --no-use-binaries) will still experience this issue of extremely long build times and occasional failures. If that's the case for you, please accept my condolences, go complain in Carthage issue tracker, and maybe think about choosing a different line of work.
Benchmark



Job
Before
After




Carthage project
❌ times out in 3m
✅ builds in 1m 30s


Unit tests (Carthage)
❌ times out in 3m
✅ builds in 1m 30s



Such detail, much science.
Timeouts don't happen all the time, and even with these changes Carthage sometimes takes 3–5 minutes to think of England, but I believe this will be a bit of an improvement.
References

Carthage/Carthage#3148 – Carthage 0.37.0 goes into an infinite loop of building subprojects forever

Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (they're okay, we build them individually)
 Changelog is updated (no improvement for users)","Carthage has this weird ardency to build every Xcode project in can find in the source tree instead of working only with the one in the root dir.
There is probably some deep, well-intentioned reason behind that, but it also causes issues for us. Carthage will end up visiting all the example projects, some of which use SPM to pull Themis dependency, and each of them will do so independently, causing builds to time out.
We are miraculously saved by Themis being distributed as binaries, so Carthage and SPM at least fetch the binary and don't go deeper. If we have supported only from-source builds, this would have led to infinite recursion.
There is not much that we can do about it, but at least we can keep CI builds in shape with a workaround. If all distractions are removed, Carthage will focus on the Xcode project it is supposed to work with. This at least lets out CI to function.
Users that instruct Carthage to build dependencies from source (via --no-use-binaries) will still experience this issue of extremely long build times and occasional failures. If that's the case for you, please accept my condolences, go complain in Carthage issue tracker, and maybe think about choosing a different line of work.
Benchmark



Job
Before
After




Carthage project
❌ times out in 3m
✅ builds in 1m 30s


Unit tests (Carthage)
❌ times out in 3m
✅ builds in 1m 30s



Such detail, much science.
Timeouts don't happen all the time, and even with these changes Carthage sometimes takes 3–5 minutes to think of England, but I believe this will be a bit of an improvement.
References

Carthage/Carthage#3148 – Carthage 0.37.0 goes into an infinite loop of building subprojects forever

Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (they're okay, we build them individually)
 Changelog is updated (no improvement for users)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,840,2021-06-03T00:44:18Z,2021-06-03T22:10:57Z,2021-06-12T14:15:57Z,MERGED,True,5,1,2,https://github.com/ilammy,Prefer GitHub Discussions for general inquiries,2,['docs :books:'],https://github.com/cossacklabs/themis/pull/840,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/840,"This feature is still technically in beta but it's already usable. That's a nice way to keep general ""question"" issues out of the issue tracker which should contain only something actionable.
Make Discussions the first link in “Contacts” section so that you'd like to click if you just want to chat about something and not to report a bug. Add this link to contribution guide too so that users will have a chance to know that Discussions is a thing.","This feature is still technically in beta but it's already usable. That's a nice way to keep general ""question"" issues out of the issue tracker which should contain only something actionable.
Make Discussions the first link in “Contacts” section so that you'd like to click if you just want to chat about something and not to report a bug. Add this link to contribution guide too so that users will have a chance to know that Discussions is a thing.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,841,2021-06-13T03:15:02Z,2021-06-13T21:37:20Z,2021-06-14T08:50:23Z,MERGED,True,12,0,1,https://github.com/ilammy,Titles and accolades,1,[],https://github.com/cossacklabs/themis/pull/841,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/841,"By the power of vim and blessing of Git, I hereby confer onto thee a Dukedom. Your titles shall now be Duchess of Eyeos, Marchioness of Swift and Objective Countess. May you govern wisely and your domain prosper.","By the power of vim and blessing of Git, I hereby confer onto thee a Dukedom. Your titles shall now be Duchess of Eyeos, Marchioness of Swift and Objective Countess. May you govern wisely and your domain prosper.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,841,2021-06-13T03:15:02Z,2021-06-13T21:37:20Z,2021-06-14T08:50:23Z,MERGED,True,12,0,1,https://github.com/ilammy,Titles and accolades,1,[],https://github.com/cossacklabs/themis/pull/841,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/841#issuecomment-860273521,"By the power of vim and blessing of Git, I hereby confer onto thee a Dukedom. Your titles shall now be Duchess of Eyeos, Marchioness of Swift and Objective Countess. May you govern wisely and your domain prosper.","The Kind is dead, long live to Queens!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,842,2021-06-26T07:44:28Z,2021-06-26T16:43:02Z,2021-06-26T16:43:05Z,MERGED,True,12,14,2,https://github.com/ilammy,"Bump ""glob-parent"" 5.1.1 -> 5.1.2",1,"['W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies']",https://github.com/cossacklabs/themis/pull/842,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/842,"This resolves CVE-2020-28469 advisory that has been there for a while. Nothing terribly important.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed","This resolves CVE-2020-28469 advisory that has been there for a while. Nothing terribly important.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,843,2021-06-26T10:45:47Z,2021-06-30T01:54:14Z,2021-06-30T01:54:17Z,MERGED,True,10,7,2,https://github.com/ilammy,Test GoThemis with more versions of Go,5,"['W-GoThemis :hamster:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/843,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/843,"Somehow we have forgot to add new versions when they come out.
Also, starting with Go 1.16 the module-aware way is the default. Existing CI scripts use make test_go target which expects GoThemis to be installed globally into GOPATH, and you need to run go test with explicit GO111MODULE=off for that to still work.
Migrate the CI scripts to run module-based unit tests for code in the repo. However, we still keep the existing behavior of make test_go (now even with Go 1.16+). Also, GoThemis is still installed globally for testing examples (which are not modularized) and integration tests (ditto). It still kinda works that way.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (don't need?)


 Fix test run with Go 1.16","Somehow we have forgot to add new versions when they come out.
Also, starting with Go 1.16 the module-aware way is the default. Existing CI scripts use make test_go target which expects GoThemis to be installed globally into GOPATH, and you need to run go test with explicit GO111MODULE=off for that to still work.
Migrate the CI scripts to run module-based unit tests for code in the repo. However, we still keep the existing behavior of make test_go (now even with Go 1.16+). Also, GoThemis is still installed globally for testing examples (which are not modularized) and integration tests (ditto). It still kinda works that way.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (don't need?)


 Fix test run with Go 1.16",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,843,2021-06-26T10:45:47Z,2021-06-30T01:54:14Z,2021-06-30T01:54:17Z,MERGED,True,10,7,2,https://github.com/ilammy,Test GoThemis with more versions of Go,5,"['W-GoThemis :hamster:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/843,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/843#issuecomment-870465783,"Somehow we have forgot to add new versions when they come out.
Also, starting with Go 1.16 the module-aware way is the default. Existing CI scripts use make test_go target which expects GoThemis to be installed globally into GOPATH, and you need to run go test with explicit GO111MODULE=off for that to still work.
Migrate the CI scripts to run module-based unit tests for code in the repo. However, we still keep the existing behavior of make test_go (now even with Go 1.16+). Also, GoThemis is still installed globally for testing examples (which are not modularized) and integration tests (ditto). It still kinda works that way.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (don't need?)


 Fix test run with Go 1.16","looks okay. I think we can leave only 3 last versions as it was before: 1.14-1.16 and drop 1.11-1.13.
Or I miss some reason why you left them, @ilammy ?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,843,2021-06-26T10:45:47Z,2021-06-30T01:54:14Z,2021-06-30T01:54:17Z,MERGED,True,10,7,2,https://github.com/ilammy,Test GoThemis with more versions of Go,5,"['W-GoThemis :hamster:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/843,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/843#issuecomment-870530278,"Somehow we have forgot to add new versions when they come out.
Also, starting with Go 1.16 the module-aware way is the default. Existing CI scripts use make test_go target which expects GoThemis to be installed globally into GOPATH, and you need to run go test with explicit GO111MODULE=off for that to still work.
Migrate the CI scripts to run module-based unit tests for code in the repo. However, we still keep the existing behavior of make test_go (now even with Go 1.16+). Also, GoThemis is still installed globally for testing examples (which are not modularized) and integration tests (ditto). It still kinda works that way.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (don't need?)


 Fix test run with Go 1.16","If it ain't broken and not complicated to test, I believe we can still claim that we support 1.11+ versions, it does not cost us much. Supported versions can be reconsidered if testing them becomes too hard. Or, for example, if some newly found issue reproduces only with Go 1.11 and it's too bothersome for us to fix, then we can just lolnope out this situation by saying that from now on Go 1.11 is not supported, please upgrade.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,844,2021-06-26T16:25:55Z,2021-07-22T10:57:32Z,2021-07-22T10:57:36Z,MERGED,True,588,0,17,https://github.com/ilammy,Move reference implementation into the monorepo,14,"['docs :books:', 'W-GoThemis :hamster:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/844,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/844,"After a while I have realized that putting reference implementation into the same repository as documentation is probably not the greatest idea. Let's move it into the warm embrace of the monorepo, where we can run tests on it and evolve the code together with the ""real"" GoThemis.
Every time I add something there, @Lagovas is pestering me with “where are integration tests with GoThemis?” So here are integration tests with GoThemis. GitHub will run them now.
This will also make imports look more like Serious Business™:
import ""github.com/cossacklabs/themis/docs/reference-implementation/...""
instead of the current haphazard
import ""github.com/cossacklabs/product-docs/themis/spec/...""
@vixentael, I know that you will be happy to see yet another top-level directory in the repo root. If you or anyone else has a reason why this directory should have a different name and/or location, speak now or forever hold your peace.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (don't think we need it)","After a while I have realized that putting reference implementation into the same repository as documentation is probably not the greatest idea. Let's move it into the warm embrace of the monorepo, where we can run tests on it and evolve the code together with the ""real"" GoThemis.
Every time I add something there, @Lagovas is pestering me with “where are integration tests with GoThemis?” So here are integration tests with GoThemis. GitHub will run them now.
This will also make imports look more like Serious Business™:
import ""github.com/cossacklabs/themis/docs/reference-implementation/...""
instead of the current haphazard
import ""github.com/cossacklabs/product-docs/themis/spec/...""
@vixentael, I know that you will be happy to see yet another top-level directory in the repo root. If you or anyone else has a reason why this directory should have a different name and/or location, speak now or forever hold your peace.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (don't think we need it)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,844,2021-06-26T16:25:55Z,2021-07-22T10:57:32Z,2021-07-22T10:57:36Z,MERGED,True,588,0,17,https://github.com/ilammy,Move reference implementation into the monorepo,14,"['docs :books:', 'W-GoThemis :hamster:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/844,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/844#issuecomment-869222223,"After a while I have realized that putting reference implementation into the same repository as documentation is probably not the greatest idea. Let's move it into the warm embrace of the monorepo, where we can run tests on it and evolve the code together with the ""real"" GoThemis.
Every time I add something there, @Lagovas is pestering me with “where are integration tests with GoThemis?” So here are integration tests with GoThemis. GitHub will run them now.
This will also make imports look more like Serious Business™:
import ""github.com/cossacklabs/themis/docs/reference-implementation/...""
instead of the current haphazard
import ""github.com/cossacklabs/product-docs/themis/spec/...""
@vixentael, I know that you will be happy to see yet another top-level directory in the repo root. If you or anyone else has a reason why this directory should have a different name and/or location, speak now or forever hold your peace.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (don't think we need it)","I know that you will be happy to see yet another top-level directory in the repo root.

how about docs/reference?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,844,2021-06-26T16:25:55Z,2021-07-22T10:57:32Z,2021-07-22T10:57:36Z,MERGED,True,588,0,17,https://github.com/ilammy,Move reference implementation into the monorepo,14,"['docs :books:', 'W-GoThemis :hamster:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/844,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/844#issuecomment-871202920,"After a while I have realized that putting reference implementation into the same repository as documentation is probably not the greatest idea. Let's move it into the warm embrace of the monorepo, where we can run tests on it and evolve the code together with the ""real"" GoThemis.
Every time I add something there, @Lagovas is pestering me with “where are integration tests with GoThemis?” So here are integration tests with GoThemis. GitHub will run them now.
This will also make imports look more like Serious Business™:
import ""github.com/cossacklabs/themis/docs/reference-implementation/...""
instead of the current haphazard
import ""github.com/cossacklabs/product-docs/themis/spec/...""
@vixentael, I know that you will be happy to see yet another top-level directory in the repo root. If you or anyone else has a reason why this directory should have a different name and/or location, speak now or forever hold your peace.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (don't think we need it)","how about docs/reference?

Mmm... might work. It reads as if that's some ""reference"", like a book, “reference documentation”. But might work. docs/reference-implementation would be more explicit, but that's a mouthful.
The imports in docs would look like this:
import (
        // other stuff

        ""github.com/cossacklabs/themis/docs/reference/soter""
)
which isn't that long. reference-implementation might be pushing it, but should still be okay, most likely. (Code snippets in docs look best if they fit into 80 columns. No horizontal scrolling in that case.)
@Lagovas, what do you think about that import path?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,844,2021-06-26T16:25:55Z,2021-07-22T10:57:32Z,2021-07-22T10:57:36Z,MERGED,True,588,0,17,https://github.com/ilammy,Move reference implementation into the monorepo,14,"['docs :books:', 'W-GoThemis :hamster:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/844,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/844#issuecomment-871264105,"After a while I have realized that putting reference implementation into the same repository as documentation is probably not the greatest idea. Let's move it into the warm embrace of the monorepo, where we can run tests on it and evolve the code together with the ""real"" GoThemis.
Every time I add something there, @Lagovas is pestering me with “where are integration tests with GoThemis?” So here are integration tests with GoThemis. GitHub will run them now.
This will also make imports look more like Serious Business™:
import ""github.com/cossacklabs/themis/docs/reference-implementation/...""
instead of the current haphazard
import ""github.com/cossacklabs/product-docs/themis/spec/...""
@vixentael, I know that you will be happy to see yet another top-level directory in the repo root. If you or anyone else has a reason why this directory should have a different name and/or location, speak now or forever hold your peace.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (don't think we need it)",@ilammy docs/reference-code?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,844,2021-06-26T16:25:55Z,2021-07-22T10:57:32Z,2021-07-22T10:57:36Z,MERGED,True,588,0,17,https://github.com/ilammy,Move reference implementation into the monorepo,14,"['docs :books:', 'W-GoThemis :hamster:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/844,https://github.com/Lagovas,5,https://github.com/cossacklabs/themis/pull/844#issuecomment-871804967,"After a while I have realized that putting reference implementation into the same repository as documentation is probably not the greatest idea. Let's move it into the warm embrace of the monorepo, where we can run tests on it and evolve the code together with the ""real"" GoThemis.
Every time I add something there, @Lagovas is pestering me with “where are integration tests with GoThemis?” So here are integration tests with GoThemis. GitHub will run them now.
This will also make imports look more like Serious Business™:
import ""github.com/cossacklabs/themis/docs/reference-implementation/...""
instead of the current haphazard
import ""github.com/cossacklabs/product-docs/themis/spec/...""
@vixentael, I know that you will be happy to see yet another top-level directory in the repo root. If you or anyone else has a reason why this directory should have a different name and/or location, speak now or forever hold your peace.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (don't think we need it)",for me docs/reference-implementation more explicit and readable. it will not be used anywhere in production or by users. main goals are to be valid golang code and documentation purposes...,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,844,2021-06-26T16:25:55Z,2021-07-22T10:57:32Z,2021-07-22T10:57:36Z,MERGED,True,588,0,17,https://github.com/ilammy,Move reference implementation into the monorepo,14,"['docs :books:', 'W-GoThemis :hamster:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/844,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/844#issuecomment-872110678,"After a while I have realized that putting reference implementation into the same repository as documentation is probably not the greatest idea. Let's move it into the warm embrace of the monorepo, where we can run tests on it and evolve the code together with the ""real"" GoThemis.
Every time I add something there, @Lagovas is pestering me with “where are integration tests with GoThemis?” So here are integration tests with GoThemis. GitHub will run them now.
This will also make imports look more like Serious Business™:
import ""github.com/cossacklabs/themis/docs/reference-implementation/...""
instead of the current haphazard
import ""github.com/cossacklabs/product-docs/themis/spec/...""
@vixentael, I know that you will be happy to see yet another top-level directory in the repo root. If you or anyone else has a reason why this directory should have a different name and/or location, speak now or forever hold your peace.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (don't think we need it)",let's change to docs/reference-implementation,True,{'THUMBS_UP': ['https://github.com/ilammy']}
cossacklabs/themis,https://github.com/cossacklabs/themis,845,2021-06-27T08:22:51Z,2021-07-12T11:02:18Z,2021-07-12T11:03:43Z,MERGED,True,12479,414,298,https://github.com/ilammy,Merge branch `master` into `wasm-typescript`,46,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/845,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/845,"Sync changes on master with wasm-typescript, resolve merge conflicts. Most changes are unrelated to WasmThemis, but I want to pull dependency bumps that fix npm audit advisories. And speedy Ninja builds for BoringSSL.
TODO:

 #846 is merged
 This merge is redone, pulling in newer master

Checklist

 Change is covered by automated tests
 The coding guidelines are followed


 This is a premade merge commit. Do not use GitHub PR UI for merging, just git push once approved.","Sync changes on master with wasm-typescript, resolve merge conflicts. Most changes are unrelated to WasmThemis, but I want to pull dependency bumps that fix npm audit advisories. And speedy Ninja builds for BoringSSL.
TODO:

 #846 is merged
 This merge is redone, pulling in newer master

Checklist

 Change is covered by automated tests
 The coding guidelines are followed


 This is a premade merge commit. Do not use GitHub PR UI for merging, just git push once approved.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,845,2021-06-27T08:22:51Z,2021-07-12T11:02:18Z,2021-07-12T11:03:43Z,MERGED,True,12479,414,298,https://github.com/ilammy,Merge branch `master` into `wasm-typescript`,46,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/845,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/845#issuecomment-869139057,"Sync changes on master with wasm-typescript, resolve merge conflicts. Most changes are unrelated to WasmThemis, but I want to pull dependency bumps that fix npm audit advisories. And speedy Ninja builds for BoringSSL.
TODO:

 #846 is merged
 This merge is redone, pulling in newer master

Checklist

 Change is covered by automated tests
 The coding guidelines are followed


 This is a premade merge commit. Do not use GitHub PR UI for merging, just git push once approved.","Oh, there a bunch of other tweaks to WasmThemis that I'd like to throw in (tests and examples). So I guess I'll put this PR to draft for the time being, then redo the merge.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,845,2021-06-27T08:22:51Z,2021-07-12T11:02:18Z,2021-07-12T11:03:43Z,MERGED,True,12479,414,298,https://github.com/ilammy,Merge branch `master` into `wasm-typescript`,46,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/845,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/845#issuecomment-875485364,"Sync changes on master with wasm-typescript, resolve merge conflicts. Most changes are unrelated to WasmThemis, but I want to pull dependency bumps that fix npm audit advisories. And speedy Ninja builds for BoringSSL.
TODO:

 #846 is merged
 This merge is redone, pulling in newer master

Checklist

 Change is covered by automated tests
 The coding guidelines are followed


 This is a premade merge commit. Do not use GitHub PR UI for merging, just git push once approved.","I've redone the merge. Now the branch includes newly added examples and tools for WasmThemis.
WasmThemis examples (and integration tests with WasmThemis) are expected to fail due to backwards-incompatible changes on wasm-typescript branch. These failures will be resolved after this merge. The merge discards changes to tools previously made by @maxammann and pulls in the master version of example code. This will show where the breakage is.
WasmThemis unit tests are expected to pass.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,845,2021-06-27T08:22:51Z,2021-07-12T11:02:18Z,2021-07-12T11:03:43Z,MERGED,True,12479,414,298,https://github.com/ilammy,Merge branch `master` into `wasm-typescript`,46,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/845,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/845#issuecomment-877024665,"Sync changes on master with wasm-typescript, resolve merge conflicts. Most changes are unrelated to WasmThemis, but I want to pull dependency bumps that fix npm audit advisories. And speedy Ninja builds for BoringSSL.
TODO:

 #846 is merged
 This merge is redone, pulling in newer master

Checklist

 Change is covered by automated tests
 The coding guidelines are followed


 This is a premade merge commit. Do not use GitHub PR UI for merging, just git push once approved.","Changed my mind once again and redone the merge. Now all tests are expect to pass, examples are expected to work.
Conflicts in wasm/package-lock.json have been resolved by merging changes from both branches.
There were also conflicts in tools/js/wasm-themis as 'wasm-typescript' branch has introduced some breaking changes in API. I've reconciled the changes between branches, favoring the ""broken"" API here. I've also updates other WasmThemis examples to use this API.
The plan is to get the CI running, helping with this, and then work on removing backwards-incompatible changes in later commits.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,845,2021-06-27T08:22:51Z,2021-07-12T11:02:18Z,2021-07-12T11:03:43Z,MERGED,True,12479,414,298,https://github.com/ilammy,Merge branch `master` into `wasm-typescript`,46,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/845,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/845#issuecomment-877872745,"Sync changes on master with wasm-typescript, resolve merge conflicts. Most changes are unrelated to WasmThemis, but I want to pull dependency bumps that fix npm audit advisories. And speedy Ninja builds for BoringSSL.
TODO:

 #846 is merged
 This merge is redone, pulling in newer master

Checklist

 Change is covered by automated tests
 The coding guidelines are followed


 This is a premade merge commit. Do not use GitHub PR UI for merging, just git push once approved.","Now all tests are expect to pass

Well, tests are passing..",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,845,2021-06-27T08:22:51Z,2021-07-12T11:02:18Z,2021-07-12T11:03:43Z,MERGED,True,12479,414,298,https://github.com/ilammy,Merge branch `master` into `wasm-typescript`,46,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/845,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/845#issuecomment-878142057,"Sync changes on master with wasm-typescript, resolve merge conflicts. Most changes are unrelated to WasmThemis, but I want to pull dependency bumps that fix npm audit advisories. And speedy Ninja builds for BoringSSL.
TODO:

 #846 is merged
 This merge is redone, pulling in newer master

Checklist

 Change is covered by automated tests
 The coding guidelines are followed


 This is a premade merge commit. Do not use GitHub PR UI for merging, just git push once approved.","@vixentael, I don't have a good git fu to teach you on how to review merge commits between branches that both have loads of new commits on them.
“Trust me, I'm an engineer!”
The answer probably is don't let the situation deteriorate to this state 🤷",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,845,2021-06-27T08:22:51Z,2021-07-12T11:02:18Z,2021-07-12T11:03:43Z,MERGED,True,12479,414,298,https://github.com/ilammy,Merge branch `master` into `wasm-typescript`,46,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/845,https://github.com/vixentael,7,https://github.com/cossacklabs/themis/pull/845#issuecomment-878152894,"Sync changes on master with wasm-typescript, resolve merge conflicts. Most changes are unrelated to WasmThemis, but I want to pull dependency bumps that fix npm audit advisories. And speedy Ninja builds for BoringSSL.
TODO:

 #846 is merged
 This merge is redone, pulling in newer master

Checklist

 Change is covered by automated tests
 The coding guidelines are followed


 This is a premade merge commit. Do not use GitHub PR UI for merging, just git push once approved.","don't let the situation deteriorate to this state 🤷

in next life probably :)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,845,2021-06-27T08:22:51Z,2021-07-12T11:02:18Z,2021-07-12T11:03:43Z,MERGED,True,12479,414,298,https://github.com/ilammy,Merge branch `master` into `wasm-typescript`,46,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/845,https://github.com/ilammy,8,https://github.com/cossacklabs/themis/pull/845#issuecomment-878184942,"Sync changes on master with wasm-typescript, resolve merge conflicts. Most changes are unrelated to WasmThemis, but I want to pull dependency bumps that fix npm audit advisories. And speedy Ninja builds for BoringSSL.
TODO:

 #846 is merged
 This merge is redone, pulling in newer master

Checklist

 Change is covered by automated tests
 The coding guidelines are followed


 This is a premade merge commit. Do not use GitHub PR UI for merging, just git push once approved.","Well, at least you can check that I've merged the commit I intended to merge, not pushed something completely different.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,846,2021-06-27T15:06:00Z,2021-07-06T13:57:19Z,2021-07-06T13:57:25Z,MERGED,True,1123,43,27,https://github.com/ilammy,WasmThemis code examples,11,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/846,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/846,"Add proper code examples for WasmThemis (for now, only with Node.js).
WasmThemis is basically the only one without code examples and without any examples verified on CI. This bother me because there is this wasm-typescript branch that's going to change a lot once it's merged. In particular, it's probably going to drop ES5 support (which kinda-sorta worked because I don't know JavaScript and the current WasmThemis is a weird chimera of ES5 and ES6 code that works only because Node is very lax in standards compliance).
Now there are proper examples that test both ES5 and ES6 imports of wasm-themis. And they are actually tested now. This has uncovered some bugs in the example code.
Finally, it bothers me that we're running the exact same WasmThemis build eight times in parallel when running tests with various Node.js versions. GitHub Actions compute time is kinda “free” for us, but wasting it is not nice.
It would be cool to make and test WasmThemis examples with Electron and browsers, but I'm out of spoons for this week. Currently I presume that Electron should be working (given that Node does), but browsers are most likely broken.
Though, even with these examples I believe we're ready to announce ES5 deprecation in 0.14 because wasm-typescript branch does break ES5 examples. So that branch will be moved to 0.15, it seems. (Let's discuss it elsewhere, I guess.)
@maxammann, if you could give this changeset a look, that would be sweet 🙏
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (oh yeah)
 Changelog is updated (don't need, I guess?)","Add proper code examples for WasmThemis (for now, only with Node.js).
WasmThemis is basically the only one without code examples and without any examples verified on CI. This bother me because there is this wasm-typescript branch that's going to change a lot once it's merged. In particular, it's probably going to drop ES5 support (which kinda-sorta worked because I don't know JavaScript and the current WasmThemis is a weird chimera of ES5 and ES6 code that works only because Node is very lax in standards compliance).
Now there are proper examples that test both ES5 and ES6 imports of wasm-themis. And they are actually tested now. This has uncovered some bugs in the example code.
Finally, it bothers me that we're running the exact same WasmThemis build eight times in parallel when running tests with various Node.js versions. GitHub Actions compute time is kinda “free” for us, but wasting it is not nice.
It would be cool to make and test WasmThemis examples with Electron and browsers, but I'm out of spoons for this week. Currently I presume that Electron should be working (given that Node does), but browsers are most likely broken.
Though, even with these examples I believe we're ready to announce ES5 deprecation in 0.14 because wasm-typescript branch does break ES5 examples. So that branch will be moved to 0.15, it seems. (Let's discuss it elsewhere, I guess.)
@maxammann, if you could give this changeset a look, that would be sweet 🙏
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (oh yeah)
 Changelog is updated (don't need, I guess?)",True,"{'EYES': ['https://github.com/maxammann', 'https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,846,2021-06-27T15:06:00Z,2021-07-06T13:57:19Z,2021-07-06T13:57:25Z,MERGED,True,1123,43,27,https://github.com/ilammy,WasmThemis code examples,11,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/846,https://github.com/maxammann,2,https://github.com/cossacklabs/themis/pull/846#issuecomment-872040630,"Add proper code examples for WasmThemis (for now, only with Node.js).
WasmThemis is basically the only one without code examples and without any examples verified on CI. This bother me because there is this wasm-typescript branch that's going to change a lot once it's merged. In particular, it's probably going to drop ES5 support (which kinda-sorta worked because I don't know JavaScript and the current WasmThemis is a weird chimera of ES5 and ES6 code that works only because Node is very lax in standards compliance).
Now there are proper examples that test both ES5 and ES6 imports of wasm-themis. And they are actually tested now. This has uncovered some bugs in the example code.
Finally, it bothers me that we're running the exact same WasmThemis build eight times in parallel when running tests with various Node.js versions. GitHub Actions compute time is kinda “free” for us, but wasting it is not nice.
It would be cool to make and test WasmThemis examples with Electron and browsers, but I'm out of spoons for this week. Currently I presume that Electron should be working (given that Node does), but browsers are most likely broken.
Though, even with these examples I believe we're ready to announce ES5 deprecation in 0.14 because wasm-typescript branch does break ES5 examples. So that branch will be moved to 0.15, it seems. (Let's discuss it elsewhere, I guess.)
@maxammann, if you could give this changeset a look, that would be sweet 🙏
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (oh yeah)
 Changelog is updated (don't need, I guess?)","It would be cool to make and test WasmThemis examples with Electron and browsers, but I'm out of spoons for this week. Currently I presume that Electron should be working (given that Node does), but browsers are most likely broken.

They are fixed in the wasm-typescript branch actually. But the main issue was not ES5 vs ES6, but the way the library was intitialized.

Though, even with these examples I believe we're ready to announce ES5 deprecation in 0.14 because wasm-typescript branch does break ES5 examples. So that branch will be moved to 0.15, it seems. (Let's discuss it elsewhere, I guess.)

If I remember correctly WasmThemis was never ES5 compliant. It just was node-ES5ish compliant. I discovered this and then bumped the requiredment to ES6. This should be reasonable because:

Node does not have a problem with my refactorings -> works on all previous Node versions
For browsers we only need ES6 because WASM is not available in any browser versions which support only ES5.


Finally, it bothers me that we're running the exact same WasmThemis build eight times in parallel when running tests with various Node.js versions. GitHub Actions compute time is kinda “free” for us, but wasting it is not nice.

I think we should keep this for node versions we want to support. Maybe node versions of the last 2 years is reasonable.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,846,2021-06-27T15:06:00Z,2021-07-06T13:57:19Z,2021-07-06T13:57:25Z,MERGED,True,1123,43,27,https://github.com/ilammy,WasmThemis code examples,11,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/846,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/846#issuecomment-872232966,"Add proper code examples for WasmThemis (for now, only with Node.js).
WasmThemis is basically the only one without code examples and without any examples verified on CI. This bother me because there is this wasm-typescript branch that's going to change a lot once it's merged. In particular, it's probably going to drop ES5 support (which kinda-sorta worked because I don't know JavaScript and the current WasmThemis is a weird chimera of ES5 and ES6 code that works only because Node is very lax in standards compliance).
Now there are proper examples that test both ES5 and ES6 imports of wasm-themis. And they are actually tested now. This has uncovered some bugs in the example code.
Finally, it bothers me that we're running the exact same WasmThemis build eight times in parallel when running tests with various Node.js versions. GitHub Actions compute time is kinda “free” for us, but wasting it is not nice.
It would be cool to make and test WasmThemis examples with Electron and browsers, but I'm out of spoons for this week. Currently I presume that Electron should be working (given that Node does), but browsers are most likely broken.
Though, even with these examples I believe we're ready to announce ES5 deprecation in 0.14 because wasm-typescript branch does break ES5 examples. So that branch will be moved to 0.15, it seems. (Let's discuss it elsewhere, I guess.)
@maxammann, if you could give this changeset a look, that would be sweet 🙏
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (oh yeah)
 Changelog is updated (don't need, I guess?)","They are fixed in the wasm-typescript branch actually. But the main issue was not ES5 vs ES6, but the way the library was intitialized.

Hm... It seems to be working fine on master for me as it is, when bundled with webpack. Currently published wasm-themis@0.13.1 is broken, but your patch for TextEncoder seems to fix it.

If I remember correctly WasmThemis was never ES5 compliant. It just was node-ES5ish compliant.

Yeah. The main use case for us is Electron which is more or less Node, and WasmThemis is primarily tested with Node, which is a weird mix of what browsers call ES5 and ES6: old-style require() imports, but all with all other goodies like classes, let, arrow functions, etc.
I'm a bit split on this whole ES5-style debacle. As in, whether we should strive to keep it working.


One position to take is, “ES5-style kinda-sorta unintentionally worked, if it gets broken, we're sorry but not going to fix it”. Then I can throw away these ES5-style examples, don't test them to see if they get broken when wasm-typescript lands. Just ignore it. wasm-typescript branch then can be spared of cross-compiling to ES5 (which will be nice, since that would allow keep Uint8Array inheritance without massive hacks and compatibility breaks).


Another position is add the examples and tests right now. See if they actually get broken by wasm-typescript, and then throw away ES5 support anyway. On the off chance that ES5 compatibility is not broken, we can even keep the tests.


And yet another position is to maintain ES5 compatibility at all costs. If it worked – it should continue working.


I personally was in the second camp when I initially submitted this PR, but overall I don't like this duplication, so I'm drifting to the first position. WasmThemis was never intended to work with ES5. If it works, that's a miracle. By all means, keep using the old version if you need ES5-only support.
I don't see myself testing this with really old browsers. The only old browser I keep is a Firefox that can still play Flash and WasmThemis works there.
So ignoring ES5 completely will let me worry less about accidentally breaking something.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,846,2021-06-27T15:06:00Z,2021-07-06T13:57:19Z,2021-07-06T13:57:25Z,MERGED,True,1123,43,27,https://github.com/ilammy,WasmThemis code examples,11,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/846,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/846#issuecomment-872237052,"Add proper code examples for WasmThemis (for now, only with Node.js).
WasmThemis is basically the only one without code examples and without any examples verified on CI. This bother me because there is this wasm-typescript branch that's going to change a lot once it's merged. In particular, it's probably going to drop ES5 support (which kinda-sorta worked because I don't know JavaScript and the current WasmThemis is a weird chimera of ES5 and ES6 code that works only because Node is very lax in standards compliance).
Now there are proper examples that test both ES5 and ES6 imports of wasm-themis. And they are actually tested now. This has uncovered some bugs in the example code.
Finally, it bothers me that we're running the exact same WasmThemis build eight times in parallel when running tests with various Node.js versions. GitHub Actions compute time is kinda “free” for us, but wasting it is not nice.
It would be cool to make and test WasmThemis examples with Electron and browsers, but I'm out of spoons for this week. Currently I presume that Electron should be working (given that Node does), but browsers are most likely broken.
Though, even with these examples I believe we're ready to announce ES5 deprecation in 0.14 because wasm-typescript branch does break ES5 examples. So that branch will be moved to 0.15, it seems. (Let's discuss it elsewhere, I guess.)
@maxammann, if you could give this changeset a look, that would be sweet 🙏
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (oh yeah)
 Changelog is updated (don't need, I guess?)","Now, why I've added *.js and *.mjs tools and examples.
I've found that my Node.js does not really like when ES5- and ES6-style imports are mixed. So if I build the TypeScript version from wasm-typescript branch, then try out examples from this branch — only *.mjs ones work. When I run the examples that require('wasm-themis'), Node starts complaining, “hurr-durr, can't import modules into non-modules, please use modules”.
That is, wasm-typescript seems to be breaking ES5-style Node code. That's why I kinda want to add examples in this style, to know for sure if they break or not.
But it's a bother, so maybe I should not worry about it.
@vixentael, what do you think?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,846,2021-06-27T15:06:00Z,2021-07-06T13:57:19Z,2021-07-06T13:57:25Z,MERGED,True,1123,43,27,https://github.com/ilammy,WasmThemis code examples,11,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/846,https://github.com/maxammann,5,https://github.com/cossacklabs/themis/pull/846#issuecomment-874230876,"Add proper code examples for WasmThemis (for now, only with Node.js).
WasmThemis is basically the only one without code examples and without any examples verified on CI. This bother me because there is this wasm-typescript branch that's going to change a lot once it's merged. In particular, it's probably going to drop ES5 support (which kinda-sorta worked because I don't know JavaScript and the current WasmThemis is a weird chimera of ES5 and ES6 code that works only because Node is very lax in standards compliance).
Now there are proper examples that test both ES5 and ES6 imports of wasm-themis. And they are actually tested now. This has uncovered some bugs in the example code.
Finally, it bothers me that we're running the exact same WasmThemis build eight times in parallel when running tests with various Node.js versions. GitHub Actions compute time is kinda “free” for us, but wasting it is not nice.
It would be cool to make and test WasmThemis examples with Electron and browsers, but I'm out of spoons for this week. Currently I presume that Electron should be working (given that Node does), but browsers are most likely broken.
Though, even with these examples I believe we're ready to announce ES5 deprecation in 0.14 because wasm-typescript branch does break ES5 examples. So that branch will be moved to 0.15, it seems. (Let's discuss it elsewhere, I guess.)
@maxammann, if you could give this changeset a look, that would be sweet 🙏
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (oh yeah)
 Changelog is updated (don't need, I guess?)","Btw, what do you think about prioritizing the typescript migration? I'm afraid that it will become harder and harder to migrate as soon as we have some breaking changes between the branches.
Right now I'm deep down in a rabbit hole writing my master thesis. That means I won't have time until ~September. I would be open for a quick call to discuss what's left to do in my branch. What do you think?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,846,2021-06-27T15:06:00Z,2021-07-06T13:57:19Z,2021-07-06T13:57:25Z,MERGED,True,1123,43,27,https://github.com/ilammy,WasmThemis code examples,11,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/846,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/846#issuecomment-874359179,"Add proper code examples for WasmThemis (for now, only with Node.js).
WasmThemis is basically the only one without code examples and without any examples verified on CI. This bother me because there is this wasm-typescript branch that's going to change a lot once it's merged. In particular, it's probably going to drop ES5 support (which kinda-sorta worked because I don't know JavaScript and the current WasmThemis is a weird chimera of ES5 and ES6 code that works only because Node is very lax in standards compliance).
Now there are proper examples that test both ES5 and ES6 imports of wasm-themis. And they are actually tested now. This has uncovered some bugs in the example code.
Finally, it bothers me that we're running the exact same WasmThemis build eight times in parallel when running tests with various Node.js versions. GitHub Actions compute time is kinda “free” for us, but wasting it is not nice.
It would be cool to make and test WasmThemis examples with Electron and browsers, but I'm out of spoons for this week. Currently I presume that Electron should be working (given that Node does), but browsers are most likely broken.
Though, even with these examples I believe we're ready to announce ES5 deprecation in 0.14 because wasm-typescript branch does break ES5 examples. So that branch will be moved to 0.15, it seems. (Let's discuss it elsewhere, I guess.)
@maxammann, if you could give this changeset a look, that would be sweet 🙏
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (oh yeah)
 Changelog is updated (don't need, I guess?)","So ignoring ES5 completely will let me worry less about accidentally breaking something.
That is, wasm-typescript seems to be breaking ES5-style Node code.

I suggest we ignore ES5 and be OK with breaking it in wasm-typescript-themis.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,846,2021-06-27T15:06:00Z,2021-07-06T13:57:19Z,2021-07-06T13:57:25Z,MERGED,True,1123,43,27,https://github.com/ilammy,WasmThemis code examples,11,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/846,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/846#issuecomment-874675764,"Add proper code examples for WasmThemis (for now, only with Node.js).
WasmThemis is basically the only one without code examples and without any examples verified on CI. This bother me because there is this wasm-typescript branch that's going to change a lot once it's merged. In particular, it's probably going to drop ES5 support (which kinda-sorta worked because I don't know JavaScript and the current WasmThemis is a weird chimera of ES5 and ES6 code that works only because Node is very lax in standards compliance).
Now there are proper examples that test both ES5 and ES6 imports of wasm-themis. And they are actually tested now. This has uncovered some bugs in the example code.
Finally, it bothers me that we're running the exact same WasmThemis build eight times in parallel when running tests with various Node.js versions. GitHub Actions compute time is kinda “free” for us, but wasting it is not nice.
It would be cool to make and test WasmThemis examples with Electron and browsers, but I'm out of spoons for this week. Currently I presume that Electron should be working (given that Node does), but browsers are most likely broken.
Though, even with these examples I believe we're ready to announce ES5 deprecation in 0.14 because wasm-typescript branch does break ES5 examples. So that branch will be moved to 0.15, it seems. (Let's discuss it elsewhere, I guess.)
@maxammann, if you could give this changeset a look, that would be sweet 🙏
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (oh yeah)
 Changelog is updated (don't need, I guess?)","@maxammann,

Btw, what do you think about prioritizing the typescript migration?

That's the plan. I'd like to merge all these examples and teach CI check that they work, then pull all this into wasm-typescript branch, see what's broken there, try to unbreak it and restore backwards compatibility as much as I can.
Once ES6-style examples work, TypeScript implementation should be okay to ship in 0.14.0 as an instant, not-announced-in-0.13 breaking change ""ES5 was never really supported but it kinda worked, our documentation used ES5 style all over the place, but it's not really supported and we don't test it, use ES6 modules"".
If that does not work out, we still have an option of pushing TypeScript into 0.15, shipping 0.14 with a deprecation announcement, then breaking things to our heart's content in 0.15. (Which, arguably, is more ""correct"" approach.)

Right now I'm deep down in a rabbit hole writing my master thesis. That means [...]

...this means you should not procrastinate your thesis by worrying about open-source that much ;)

I would be open for a quick call to discuss what's left to do in my branch.

Let me merge all this stuff, then update #845, then I'll check how it looks from my side, and post there a list of what I think must be fixed and what would be nice to have, and then we can start with that as a synchronization point.",True,{'THUMBS_UP': ['https://github.com/maxammann']}
cossacklabs/themis,https://github.com/cossacklabs/themis,847,2021-06-28T15:12:18Z,2021-06-28T15:37:11Z,2021-06-28T15:37:16Z,MERGED,True,23,11,4,https://github.com/ilammy,Remove TextEncoder polyfill,1,"['W-WasmThemis :globe_with_meridians:', 'backport']",https://github.com/cossacklabs/themis/pull/847,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/847,"Cherry-pick @maxammann's PR #783 onto release/0.13.
I'm trying to automate testing WasmThemis with webpack in browsers and issue #779 interferes with this.
It would be nice to see wasm-themis@0.13.11 later with this. This seems to be the only issue that breaks WasmThemis in my browser when packaged with webpack.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Cherry-pick @maxammann's PR #783 onto release/0.13.
I'm trying to automate testing WasmThemis with webpack in browsers and issue #779 interferes with this.
It would be nice to see wasm-themis@0.13.11 later with this. This seems to be the only issue that breaks WasmThemis in my browser when packaged with webpack.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,848,2021-06-28T15:44:43Z,2021-06-28T16:35:56Z,2021-07-05T16:48:12Z,MERGED,True,11,2,3,https://github.com/ilammy,WasmThemis 0.13.11,1,['release'],https://github.com/cossacklabs/themis/pull/848,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/848,"Cut a hotfix release that should make WasmThemis actually usable in browsers (at least when bundled by webpack, at least for 2 users).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Cut a hotfix release that should make WasmThemis actually usable in browsers (at least when bundled by webpack, at least for 2 users).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,848,2021-06-28T15:44:43Z,2021-06-28T16:35:56Z,2021-07-05T16:48:12Z,MERGED,True,11,2,3,https://github.com/ilammy,WasmThemis 0.13.11,1,['release'],https://github.com/cossacklabs/themis/pull/848,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/848#issuecomment-869796283,"Cut a hotfix release that should make WasmThemis actually usable in browsers (at least when bundled by webpack, at least for 2 users).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",You decided to cut 0.13.2...0.13.10 versions? :),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,848,2021-06-28T15:44:43Z,2021-06-28T16:35:56Z,2021-07-05T16:48:12Z,MERGED,True,11,2,3,https://github.com/ilammy,WasmThemis 0.13.11,1,['release'],https://github.com/cossacklabs/themis/pull/848,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/848#issuecomment-869802706,"Cut a hotfix release that should make WasmThemis actually usable in browsers (at least when bundled by webpack, at least for 2 users).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","You decided to cut 0.13.2...0.13.10 versions? :)

Uh, yeah. Releases are numbered sequentially. I don't want to explain how come 0.13.2 got released on both 2020-08-20 and whatever date this release will happen on and what's the difference between them. (You can also think that the next release will be 0.13.111. Not that far from impossible, given your appetite for Apple stuff hotfixes and reluctance to do 0.14.0...)
By the way, is that release date realistic? Someone who isn't me should push the button on a certain CI to start the pipeline for WasmThemis publishing, and @shadinua is not really available at the moment.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,848,2021-06-28T15:44:43Z,2021-06-28T16:35:56Z,2021-07-05T16:48:12Z,MERGED,True,11,2,3,https://github.com/ilammy,WasmThemis 0.13.11,1,['release'],https://github.com/cossacklabs/themis/pull/848,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/848#issuecomment-873371312,"Cut a hotfix release that should make WasmThemis actually usable in browsers (at least when bundled by webpack, at least for 2 users).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Just a note: the 0.13.x branch is still using the old Emscripten toolchain:

  
    
      themis/.github/workflows/test-wasm.yaml
    
    
        Lines 69 to 70
      in
      2cbce20
    
  
  
    

        
          
                     ./emsdk install  1.39.16-fastcomp 
        

        
          
                     ./emsdk activate 1.39.16-fastcomp 
        
    
  


That's what you'll need to use for building wasm-themis on this branch, not the new version from master. If you use Emscripten 2.0.x, the build will still be successful, but libthemis.wasm file will be basically empty and not usable.
Please be cautious, @vixentael, @shadinua",True,"{'EYES': ['https://github.com/vixentael', 'https://github.com/shadinua']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,848,2021-06-28T15:44:43Z,2021-06-28T16:35:56Z,2021-07-05T16:48:12Z,MERGED,True,11,2,3,https://github.com/ilammy,WasmThemis 0.13.11,1,['release'],https://github.com/cossacklabs/themis/pull/848,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/848#issuecomment-874233925,"Cut a hotfix release that should make WasmThemis actually usable in browsers (at least when bundled by webpack, at least for 2 users).
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","That's what you'll need to use for building wasm-themis on this branch, not the new version from master

Gotcha. Use old EMSDK.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,849,2021-06-29T11:40:43Z,2021-06-30T08:24:21Z,2021-06-30T08:24:25Z,MERGED,True,43,0,4,https://github.com/ilammy,Fix cross-compilation on macOS with SDK and ARCH,4,"['core', 'O-macOS :computer:', 'C-BoringSSL']",https://github.com/cossacklabs/themis/pull/849,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/849,"Surprisingly, it's possible to cross-compile Themis Core for different SDKs and architectures using our makefile. For example,
make SDK=macosx11.0 ARCH=arm64

will compile for Apple Silicon, provided that your Xcode toolchain is actually capable of building that architecture.
You also need to have OpenSSL binaries with desired architecture installed (for which you might need to tweak ENGINE_INCLUDE_PATH and ENGINE_LIB_PATH separately). Or build ENGINE=boringssl to use embedded BoringSSL that we can cross-compile too.
There were some missing bits here and there to make it work, but now it works. See commit messages for details.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","Surprisingly, it's possible to cross-compile Themis Core for different SDKs and architectures using our makefile. For example,
make SDK=macosx11.0 ARCH=arm64

will compile for Apple Silicon, provided that your Xcode toolchain is actually capable of building that architecture.
You also need to have OpenSSL binaries with desired architecture installed (for which you might need to tweak ENGINE_INCLUDE_PATH and ENGINE_LIB_PATH separately). Or build ENGINE=boringssl to use embedded BoringSSL that we can cross-compile too.
There were some missing bits here and there to make it work, but now it works. See commit messages for details.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,850,2021-06-29T13:56:56Z,2021-06-29T15:23:44Z,2021-06-29T15:23:47Z,MERGED,True,13,13,13,https://github.com/ilammy,Run scheduled builds only on Mondays,1,['infrastructure'],https://github.com/cossacklabs/themis/pull/850,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/850,"Instead of running all builds every day, run them only once a week. Also, since there are a lot of builds across the entire ecosystem started at the beginning of an hour, offset our builds a bit.
We have quite a few builds and I feel a bit sorry for GitHub Actions that have to work so much. No, actually, I'm not. Microsoft has the $.
What I do care about is amount of email I get about broken builds. For the past 30 days I have received 19 notifications about something being broken in Objective-C examples or other tasks. Out of which 0 (zero) have been actual, actionable issues, not cloud farts. Now I'm going to receive maybe three emails a week at worst. I can live with this.
Checklist

 Change is covered by automated tests","Instead of running all builds every day, run them only once a week. Also, since there are a lot of builds across the entire ecosystem started at the beginning of an hour, offset our builds a bit.
We have quite a few builds and I feel a bit sorry for GitHub Actions that have to work so much. No, actually, I'm not. Microsoft has the $.
What I do care about is amount of email I get about broken builds. For the past 30 days I have received 19 notifications about something being broken in Objective-C examples or other tasks. Out of which 0 (zero) have been actual, actionable issues, not cloud farts. Now I'm going to receive maybe three emails a week at worst. I can live with this.
Checklist

 Change is covered by automated tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,851,2021-07-03T08:40:58Z,2021-07-06T15:02:45Z,2021-07-06T15:02:49Z,MERGED,True,995,0,11,https://github.com/ilammy,WasmThemis example project with webpack,11,"['docs :books:', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/851,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/851,"Finally my dream is coming true: interactive example of Themis right in the browser. It's a bit sad that I have to work for my own dreams. Oh well, doing what I can with what I got.
Try it out by running:
cd docs/examples/wasm/webpack
npm install
npm run start

Or if you're lazy – I know you are – check out the hosted version.
Again, @maxammann, if you would be so kind to give this a look – I'd be grateful.
Known issues


Resolved: wasm-themis@0.13.11 is not published. (Now it is.)
Since the currently published 0.13.1 is not working in browsers, I'm using my preview package. It would be nice to get WasmThemis patch release into npm for the example to be “official”.


Page load time is abysmal.
webpack correctly warns you that putting 1.8 MB of JS and 1.6 MB of WASM is probably not the greatest idea for quick page loads. It takes a couple of seconds for all this stuff to download and initialize. I have not optimized it whatsoever.


Secure Cell performance with passpharases.
While symmetric key encryption works reasonably well for interactive use, passphrase encryption is slow—well, it's designed to be. Since all of this is running on the single UI thread, the interface not very responsive as WasmThemis just can't process input as fast as you type it.


Something seems to be broken with mode: 'production'
Building the site in production mode causes TypeErrors due to null values popping up where they are not expected. No idea what causes this, the code is all minified and undebuggable.


No tests on CI whatsoever. And code coverage is low.
I mean, it would be trivial to test building the example. But this does not guarantee that it actually works in the browser. Maybe later.
Similarly, only Secure Cell is shown because I have only so much life to waste on this. Maybe later.


You will also have to excuse complete lack of JS frameworks and my “impressive” web design skills. Patches are welcome.
Checklist

 Change is covered by automated tests (no, it is not; not in the slightest)
 Benchmark results are attached (watch for yourself)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated (don't need, I guess?)","Finally my dream is coming true: interactive example of Themis right in the browser. It's a bit sad that I have to work for my own dreams. Oh well, doing what I can with what I got.
Try it out by running:
cd docs/examples/wasm/webpack
npm install
npm run start

Or if you're lazy – I know you are – check out the hosted version.
Again, @maxammann, if you would be so kind to give this a look – I'd be grateful.
Known issues


Resolved: wasm-themis@0.13.11 is not published. (Now it is.)
Since the currently published 0.13.1 is not working in browsers, I'm using my preview package. It would be nice to get WasmThemis patch release into npm for the example to be “official”.


Page load time is abysmal.
webpack correctly warns you that putting 1.8 MB of JS and 1.6 MB of WASM is probably not the greatest idea for quick page loads. It takes a couple of seconds for all this stuff to download and initialize. I have not optimized it whatsoever.


Secure Cell performance with passpharases.
While symmetric key encryption works reasonably well for interactive use, passphrase encryption is slow—well, it's designed to be. Since all of this is running on the single UI thread, the interface not very responsive as WasmThemis just can't process input as fast as you type it.


Something seems to be broken with mode: 'production'
Building the site in production mode causes TypeErrors due to null values popping up where they are not expected. No idea what causes this, the code is all minified and undebuggable.


No tests on CI whatsoever. And code coverage is low.
I mean, it would be trivial to test building the example. But this does not guarantee that it actually works in the browser. Maybe later.
Similarly, only Secure Cell is shown because I have only so much life to waste on this. Maybe later.


You will also have to excuse complete lack of JS frameworks and my “impressive” web design skills. Patches are welcome.
Checklist

 Change is covered by automated tests (no, it is not; not in the slightest)
 Benchmark results are attached (watch for yourself)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated (don't need, I guess?)",True,"{'THUMBS_UP': ['https://github.com/vixentael'], 'HOORAY': ['https://github.com/vixentael']}"
cossacklabs/themis,https://github.com/cossacklabs/themis,851,2021-07-03T08:40:58Z,2021-07-06T15:02:45Z,2021-07-06T15:02:49Z,MERGED,True,995,0,11,https://github.com/ilammy,WasmThemis example project with webpack,11,"['docs :books:', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/851,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/851#issuecomment-874355447,"Finally my dream is coming true: interactive example of Themis right in the browser. It's a bit sad that I have to work for my own dreams. Oh well, doing what I can with what I got.
Try it out by running:
cd docs/examples/wasm/webpack
npm install
npm run start

Or if you're lazy – I know you are – check out the hosted version.
Again, @maxammann, if you would be so kind to give this a look – I'd be grateful.
Known issues


Resolved: wasm-themis@0.13.11 is not published. (Now it is.)
Since the currently published 0.13.1 is not working in browsers, I'm using my preview package. It would be nice to get WasmThemis patch release into npm for the example to be “official”.


Page load time is abysmal.
webpack correctly warns you that putting 1.8 MB of JS and 1.6 MB of WASM is probably not the greatest idea for quick page loads. It takes a couple of seconds for all this stuff to download and initialize. I have not optimized it whatsoever.


Secure Cell performance with passpharases.
While symmetric key encryption works reasonably well for interactive use, passphrase encryption is slow—well, it's designed to be. Since all of this is running on the single UI thread, the interface not very responsive as WasmThemis just can't process input as fast as you type it.


Something seems to be broken with mode: 'production'
Building the site in production mode causes TypeErrors due to null values popping up where they are not expected. No idea what causes this, the code is all minified and undebuggable.


No tests on CI whatsoever. And code coverage is low.
I mean, it would be trivial to test building the example. But this does not guarantee that it actually works in the browser. Maybe later.
Similarly, only Secure Cell is shown because I have only so much life to waste on this. Maybe later.


You will also have to excuse complete lack of JS frameworks and my “impressive” web design skills. Patches are welcome.
Checklist

 Change is covered by automated tests (no, it is not; not in the slightest)
 Benchmark results are attached (watch for yourself)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated (don't need, I guess?)","Since the currently published 0.13.1 is not working in browsers

working on it...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,852,2021-07-06T12:03:57Z,2021-07-06T12:17:42Z,2021-07-06T12:17:46Z,MERGED,True,1,1,1,https://github.com/ilammy,Adjust WasmThemis 0.13.11 release date,1,"['docs :books:', 'release']",https://github.com/cossacklabs/themis/pull/852,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/852,"Gotta pad my commit stats, okay?
Checklist

 Changelog is updated (in case of notable or breaking changes)","Gotta pad my commit stats, okay?
Checklist

 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,853,2021-07-10T08:51:28Z,2021-07-14T13:00:57Z,2021-07-14T13:01:03Z,MERGED,True,8,2,1,https://github.com/ilammy,Bring back `undefined` into TypeError tests,1,"['tests', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/853,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/853,"Previous change has removed it from the list of 'invalid values' because in TypeScript undefined is interpreted as literally ""omitted argument"" which is actually allowed in some places and does not cause failures.
However, test tests are actually written in JavaScript, so we can pass undefined there just fine.
Instead of removing undefined, skip it for those APIs that accept omitted arguments, but still test other APIs with undefined.
This brings WasmThemis test coverage more in sync with master branch.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 #845 is merged","Previous change has removed it from the list of 'invalid values' because in TypeScript undefined is interpreted as literally ""omitted argument"" which is actually allowed in some places and does not cause failures.
However, test tests are actually written in JavaScript, so we can pass undefined there just fine.
Instead of removing undefined, skip it for those APIs that accept omitted arguments, but still test other APIs with undefined.
This brings WasmThemis test coverage more in sync with master branch.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 #845 is merged",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,854,2021-07-11T07:44:42Z,2021-07-14T13:01:48Z,2021-07-14T13:01:57Z,MERGED,True,196,30,35,https://github.com/ilammy,Bring back `initialized` promise,5,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/854,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/854,"Restoring compatibility, one step at a time.
Background
Historically, WasmThemis has exported only the initialized promise. WasmThemis was not modularized and kicked off libthemis.wasm download right after the module is loaded. Moreover, there was no way to use a different path to WebAssembly code: it had to be located in a file named libthemis.wasm next to the JavaScript code bundle.
TypeScript rewrite introduced an alternative interface initialize() which allows to specify the URL. However, this required WasmThemis modularization. That is, WasmThemis will not be initialized unless initialize() is called.
This introduces two issues with backwards compatibility:

initialize promise was gone.
You can no longer expect that WasmThemis will be downloaded in background without awaiting any promise.

Due to modularization, there is no (practical) way to fix the second issue. Just don't do, it's a bad practice.
However, absence of initialized is a real breaking change that will break well-formed applications.
Reintroduce the initialized promise and make sure it works by calling the initialize() function behind the scenes. It's a bit of a hack, but it works, so whatever.
Note that initialize is not deprecated or anything. It's a perfectly valid API if you don't need to specify a custom path to libthemis.wasm
Initialization APIs
So basically, now WasmThemis has two initialization APIs.


Historically first:
await themis.initialized
which will download libthemis.wasm relative to the executing JS bundle.


Explicit — available since WasmThemis 0.14.0:
await themis.initialize()
// OR
await themis.initialize('https://your.CND.example.com/storage/libthemis.wasm')
which allows you to specify the exact URL for downloading WebAssembly code.


Maybe later it will accept more parameters that can be passed to Emscripten (see their docs), but I don't want to expand the API unless there are users for it.
Ancillary changes
Existing unit tests, examples, and tools are rolled back to using initialized.
New tests verify the all initialization APIs work as expected.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated
 #845 is merged","Restoring compatibility, one step at a time.
Background
Historically, WasmThemis has exported only the initialized promise. WasmThemis was not modularized and kicked off libthemis.wasm download right after the module is loaded. Moreover, there was no way to use a different path to WebAssembly code: it had to be located in a file named libthemis.wasm next to the JavaScript code bundle.
TypeScript rewrite introduced an alternative interface initialize() which allows to specify the URL. However, this required WasmThemis modularization. That is, WasmThemis will not be initialized unless initialize() is called.
This introduces two issues with backwards compatibility:

initialize promise was gone.
You can no longer expect that WasmThemis will be downloaded in background without awaiting any promise.

Due to modularization, there is no (practical) way to fix the second issue. Just don't do, it's a bad practice.
However, absence of initialized is a real breaking change that will break well-formed applications.
Reintroduce the initialized promise and make sure it works by calling the initialize() function behind the scenes. It's a bit of a hack, but it works, so whatever.
Note that initialize is not deprecated or anything. It's a perfectly valid API if you don't need to specify a custom path to libthemis.wasm
Initialization APIs
So basically, now WasmThemis has two initialization APIs.


Historically first:
await themis.initialized
which will download libthemis.wasm relative to the executing JS bundle.


Explicit — available since WasmThemis 0.14.0:
await themis.initialize()
// OR
await themis.initialize('https://your.CND.example.com/storage/libthemis.wasm')
which allows you to specify the exact URL for downloading WebAssembly code.


Maybe later it will accept more parameters that can be passed to Emscripten (see their docs), but I don't want to expand the API unless there are users for it.
Ancillary changes
Existing unit tests, examples, and tools are rolled back to using initialized.
New tests verify the all initialization APIs work as expected.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated
 #845 is merged",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,855,2021-07-11T11:07:00Z,2021-07-12T11:02:17Z,2021-07-12T11:02:17Z,MERGED,True,34,13,4,https://github.com/ilammy,Merge branch `release/0.13` into `stable`,4,['release'],https://github.com/cossacklabs/themis/pull/855,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/855,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,855,2021-07-11T11:07:00Z,2021-07-12T11:02:17Z,2021-07-12T11:02:17Z,MERGED,True,34,13,4,https://github.com/ilammy,Merge branch `release/0.13` into `stable`,4,['release'],https://github.com/cossacklabs/themis/pull/855,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/855#issuecomment-877872958,,Some tests are not passsing?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,855,2021-07-11T11:07:00Z,2021-07-12T11:02:17Z,2021-07-12T11:02:17Z,MERGED,True,34,13,4,https://github.com/ilammy,Merge branch `release/0.13` into `stable`,4,['release'],https://github.com/cossacklabs/themis/pull/855,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/855#issuecomment-878130621,,"No idea what's failed there this time. I've restarted the builds, let's see how they do this time.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,856,2021-07-11T11:07:39Z,2021-07-12T11:02:17Z,2021-07-12T11:02:17Z,MERGED,True,15,2,3,https://github.com/ilammy,Merge branch `stable` into `master`,8,['release'],https://github.com/cossacklabs/themis/pull/856,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/856,,,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,857,2021-07-13T08:12:16Z,2021-07-14T13:31:12Z,2021-07-14T13:31:29Z,MERGED,True,40,1,5,https://github.com/ilammy,Allow calling `initialize()` only once,2,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/857,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/857,"WasmThemis initialization fills in the context.libthemis singleton that is actually used by all WasmThemis functions. That is, calling initialize() multiple times is technically permitted, but it might not have an effect that you expect. WasmThemis will always use WebAssembly context from the last initialization.
While reinitialization might be useful, it does not seem to be now. Let's allow calling initialize() only once. (This includes calling it indirectly via the initialized promise.) We can always allow it later, once the semantics of this are clarified.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (gotta add this PR to the line...)
 #854 is merged","WasmThemis initialization fills in the context.libthemis singleton that is actually used by all WasmThemis functions. That is, calling initialize() multiple times is technically permitted, but it might not have an effect that you expect. WasmThemis will always use WebAssembly context from the last initialization.
While reinitialization might be useful, it does not seem to be now. Let's allow calling initialize() only once. (This includes calling it indirectly via the initialized promise.) We can always allow it later, once the semantics of this are clarified.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (gotta add this PR to the line...)
 #854 is merged",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,857,2021-07-13T08:12:16Z,2021-07-14T13:31:12Z,2021-07-14T13:31:29Z,MERGED,True,40,1,5,https://github.com/ilammy,Allow calling `initialize()` only once,2,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/857,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/857#issuecomment-879884009,"WasmThemis initialization fills in the context.libthemis singleton that is actually used by all WasmThemis functions. That is, calling initialize() multiple times is technically permitted, but it might not have an effect that you expect. WasmThemis will always use WebAssembly context from the last initialization.
While reinitialization might be useful, it does not seem to be now. Let's allow calling initialize() only once. (This includes calling it indirectly via the initialized promise.) We can always allow it later, once the semantics of this are clarified.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (gotta add this PR to the line...)
 #854 is merged","The base branch got merged and GitHub does not really support stacked PRs all that well. I have rebased the branch (with no changes), and throw an extra commit in with a line in the changelog.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,857,2021-07-13T08:12:16Z,2021-07-14T13:31:12Z,2021-07-14T13:31:29Z,MERGED,True,40,1,5,https://github.com/ilammy,Allow calling `initialize()` only once,2,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/857,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/857#issuecomment-879887003,"WasmThemis initialization fills in the context.libthemis singleton that is actually used by all WasmThemis functions. That is, calling initialize() multiple times is technically permitted, but it might not have an effect that you expect. WasmThemis will always use WebAssembly context from the last initialization.
While reinitialization might be useful, it does not seem to be now. Let's allow calling initialize() only once. (This includes calling it indirectly via the initialized promise.) We can always allow it later, once the semantics of this are clarified.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated (gotta add this PR to the line...)
 #854 is merged","@vixentael,

these are breaking changes, users will need to change initialize() to initialized across their code (in one place typically)

Not really. initialize() has not been released yet. It's a new thing that's going to appear in WasmThemis 0.14.0. Users of 0.13.X have only initialized and they can continue using it just fine.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,858,2021-07-13T08:32:22Z,2021-07-14T13:31:52Z,2021-07-14T13:31:57Z,MERGED,True,51,52,11,https://github.com/ilammy,Make keys `Uint8Arrays` again (by killing ES5 support),5,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/858,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/858,"Drop ES5 target for TypeScript compilation. Replace it with ES6 code wrapped into CommonJS modules.
This allows to make SymmetricKey, PublicKey, PrivateKey to extend Uint8Array (as they did before TypeScript), and remove backwards-incompatible hack with data field.
Background
TypeScript cannot compile Uint8Array usage into ES5-compatible code. They generate broken code and have no interest in implementing it, probably because its impossible to extend Uint8Arrays in ES5 correctly. I was not able to do it while still preserving all type invariants (such as the keys not only looking like Uint8Array, but being that in the sense of instanceof, as well as keeping their own type).
But I need ES5 support...
I do want to avoid breaking changes, but this is too much for me.
WasmThemis was never supposed to work in ES5-only environments in the first place. And I'm not sure it worked before.
If it did for you, that's unintentional. Please accept my apologies for the suffering that you will go through if you want to transpile into ES5. But you're on your own here. (Backwards-compatible patches are welcome. Updates to documentation with suggested workarounds are welcome.)
What wasm-typescript branch did
Since it's not possible to compile class SomeKey extends Uint8Array into ES5, the classes stopped inheriting from Uint8Array and got a data field instead, via which you could get access to the Uint8Array to pass to a function that accepts Uint8Array.
That is, if you had
const key = new themis.SymmetricKey();

const cell = themis.SecureCell.withKey(key);
you were supposed to rewrite this into
const cell = themis.SecureCell.withKey(key.data);
and the previous code would fail to work.
Similarly, if you had
const keypair = new themis.KeyPair();

socket.send(keypair.publicKey);
you needed to do
socket.send(keypair.publicKey.data);
With this PR applied, data is gone. Code written against WasmThemis 0.13 is still valid and works.
On imports
Instead of compiling TypeScript into ES5 with CommonJS modules and ES6 with ES6 modules, we now compile TypeScript into ES6 with CommonJS modules and ES6 modules.
This means that all previous code that did
const themis = require('wasm-themis');
can continue doing so with no changes. They will be getting CommonJS module from dist.
New code can now also do
import { SecureCell, SymmetricKey } from 'wasm-themis';
and this will also work. They will be getting ES6 module from dist-es6.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (it wasn't supposed to change in the first place)","Drop ES5 target for TypeScript compilation. Replace it with ES6 code wrapped into CommonJS modules.
This allows to make SymmetricKey, PublicKey, PrivateKey to extend Uint8Array (as they did before TypeScript), and remove backwards-incompatible hack with data field.
Background
TypeScript cannot compile Uint8Array usage into ES5-compatible code. They generate broken code and have no interest in implementing it, probably because its impossible to extend Uint8Arrays in ES5 correctly. I was not able to do it while still preserving all type invariants (such as the keys not only looking like Uint8Array, but being that in the sense of instanceof, as well as keeping their own type).
But I need ES5 support...
I do want to avoid breaking changes, but this is too much for me.
WasmThemis was never supposed to work in ES5-only environments in the first place. And I'm not sure it worked before.
If it did for you, that's unintentional. Please accept my apologies for the suffering that you will go through if you want to transpile into ES5. But you're on your own here. (Backwards-compatible patches are welcome. Updates to documentation with suggested workarounds are welcome.)
What wasm-typescript branch did
Since it's not possible to compile class SomeKey extends Uint8Array into ES5, the classes stopped inheriting from Uint8Array and got a data field instead, via which you could get access to the Uint8Array to pass to a function that accepts Uint8Array.
That is, if you had
const key = new themis.SymmetricKey();

const cell = themis.SecureCell.withKey(key);
you were supposed to rewrite this into
const cell = themis.SecureCell.withKey(key.data);
and the previous code would fail to work.
Similarly, if you had
const keypair = new themis.KeyPair();

socket.send(keypair.publicKey);
you needed to do
socket.send(keypair.publicKey.data);
With this PR applied, data is gone. Code written against WasmThemis 0.13 is still valid and works.
On imports
Instead of compiling TypeScript into ES5 with CommonJS modules and ES6 with ES6 modules, we now compile TypeScript into ES6 with CommonJS modules and ES6 modules.
This means that all previous code that did
const themis = require('wasm-themis');
can continue doing so with no changes. They will be getting CommonJS module from dist.
New code can now also do
import { SecureCell, SymmetricKey } from 'wasm-themis';
and this will also work. They will be getting ES6 module from dist-es6.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (it wasn't supposed to change in the first place)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,858,2021-07-13T08:32:22Z,2021-07-14T13:31:52Z,2021-07-14T13:31:57Z,MERGED,True,51,52,11,https://github.com/ilammy,Make keys `Uint8Arrays` again (by killing ES5 support),5,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/858,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/858#issuecomment-879875072,"Drop ES5 target for TypeScript compilation. Replace it with ES6 code wrapped into CommonJS modules.
This allows to make SymmetricKey, PublicKey, PrivateKey to extend Uint8Array (as they did before TypeScript), and remove backwards-incompatible hack with data field.
Background
TypeScript cannot compile Uint8Array usage into ES5-compatible code. They generate broken code and have no interest in implementing it, probably because its impossible to extend Uint8Arrays in ES5 correctly. I was not able to do it while still preserving all type invariants (such as the keys not only looking like Uint8Array, but being that in the sense of instanceof, as well as keeping their own type).
But I need ES5 support...
I do want to avoid breaking changes, but this is too much for me.
WasmThemis was never supposed to work in ES5-only environments in the first place. And I'm not sure it worked before.
If it did for you, that's unintentional. Please accept my apologies for the suffering that you will go through if you want to transpile into ES5. But you're on your own here. (Backwards-compatible patches are welcome. Updates to documentation with suggested workarounds are welcome.)
What wasm-typescript branch did
Since it's not possible to compile class SomeKey extends Uint8Array into ES5, the classes stopped inheriting from Uint8Array and got a data field instead, via which you could get access to the Uint8Array to pass to a function that accepts Uint8Array.
That is, if you had
const key = new themis.SymmetricKey();

const cell = themis.SecureCell.withKey(key);
you were supposed to rewrite this into
const cell = themis.SecureCell.withKey(key.data);
and the previous code would fail to work.
Similarly, if you had
const keypair = new themis.KeyPair();

socket.send(keypair.publicKey);
you needed to do
socket.send(keypair.publicKey.data);
With this PR applied, data is gone. Code written against WasmThemis 0.13 is still valid and works.
On imports
Instead of compiling TypeScript into ES5 with CommonJS modules and ES6 with ES6 modules, we now compile TypeScript into ES6 with CommonJS modules and ES6 modules.
This means that all previous code that did
const themis = require('wasm-themis');
can continue doing so with no changes. They will be getting CommonJS module from dist.
New code can now also do
import { SecureCell, SymmetricKey } from 'wasm-themis';
and this will also work. They will be getting ES6 module from dist-es6.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (it wasn't supposed to change in the first place)","bye es5

　✝️
ＲＩＰ
Here lies ES5 support in WasmThemis.
2021-04-19 – 2021-07-14",True,{'ROCKET': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,858,2021-07-13T08:32:22Z,2021-07-14T13:31:52Z,2021-07-14T13:31:57Z,MERGED,True,51,52,11,https://github.com/ilammy,Make keys `Uint8Arrays` again (by killing ES5 support),5,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/858,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/858#issuecomment-879878561,"Drop ES5 target for TypeScript compilation. Replace it with ES6 code wrapped into CommonJS modules.
This allows to make SymmetricKey, PublicKey, PrivateKey to extend Uint8Array (as they did before TypeScript), and remove backwards-incompatible hack with data field.
Background
TypeScript cannot compile Uint8Array usage into ES5-compatible code. They generate broken code and have no interest in implementing it, probably because its impossible to extend Uint8Arrays in ES5 correctly. I was not able to do it while still preserving all type invariants (such as the keys not only looking like Uint8Array, but being that in the sense of instanceof, as well as keeping their own type).
But I need ES5 support...
I do want to avoid breaking changes, but this is too much for me.
WasmThemis was never supposed to work in ES5-only environments in the first place. And I'm not sure it worked before.
If it did for you, that's unintentional. Please accept my apologies for the suffering that you will go through if you want to transpile into ES5. But you're on your own here. (Backwards-compatible patches are welcome. Updates to documentation with suggested workarounds are welcome.)
What wasm-typescript branch did
Since it's not possible to compile class SomeKey extends Uint8Array into ES5, the classes stopped inheriting from Uint8Array and got a data field instead, via which you could get access to the Uint8Array to pass to a function that accepts Uint8Array.
That is, if you had
const key = new themis.SymmetricKey();

const cell = themis.SecureCell.withKey(key);
you were supposed to rewrite this into
const cell = themis.SecureCell.withKey(key.data);
and the previous code would fail to work.
Similarly, if you had
const keypair = new themis.KeyPair();

socket.send(keypair.publicKey);
you needed to do
socket.send(keypair.publicKey.data);
With this PR applied, data is gone. Code written against WasmThemis 0.13 is still valid and works.
On imports
Instead of compiling TypeScript into ES5 with CommonJS modules and ES6 with ES6 modules, we now compile TypeScript into ES6 with CommonJS modules and ES6 modules.
This means that all previous code that did
const themis = require('wasm-themis');
can continue doing so with no changes. They will be getting CommonJS module from dist.
New code can now also do
import { SecureCell, SymmetricKey } from 'wasm-themis';
and this will also work. They will be getting ES6 module from dist-es6.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (it wasn't supposed to change in the first place)","Merged in the base branch to resolve conflicts in package.json around test and tsc-cjs commands. Unit tests and examples should still work after, let's see if CI agrees.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,859,2021-07-14T14:59:25Z,2021-07-16T08:06:28Z,2021-07-16T08:06:31Z,MERGED,True,2,1,1,https://github.com/ilammy,Keep a copy of libthemis.wasm in `src`,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/859,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/859,"That's where this file is located in WasmThemis 0.13.X and some users might have hardcoded its location (like it's hardcoded in WasmThemis example with webpack, for example). Let's package the original copy of libthemis.wasm at its original path, for compatibility.
This makes installed, unpackaged size a bit larger, but JavaScript developers are used to node_modules being heavier than their mom so it's okay.

And this does not affect downloads, since identical files are compressed with deduplication.
Checklist

 Change is covered by automated tests","That's where this file is located in WasmThemis 0.13.X and some users might have hardcoded its location (like it's hardcoded in WasmThemis example with webpack, for example). Let's package the original copy of libthemis.wasm at its original path, for compatibility.
This makes installed, unpackaged size a bit larger, but JavaScript developers are used to node_modules being heavier than their mom so it's okay.

And this does not affect downloads, since identical files are compressed with deduplication.
Checklist

 Change is covered by automated tests",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,859,2021-07-14T14:59:25Z,2021-07-16T08:06:28Z,2021-07-16T08:06:31Z,MERGED,True,2,1,1,https://github.com/ilammy,Keep a copy of libthemis.wasm in `src`,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/859,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/859#issuecomment-879968134,"That's where this file is located in WasmThemis 0.13.X and some users might have hardcoded its location (like it's hardcoded in WasmThemis example with webpack, for example). Let's package the original copy of libthemis.wasm at its original path, for compatibility.
This makes installed, unpackaged size a bit larger, but JavaScript developers are used to node_modules being heavier than their mom so it's okay.

And this does not affect downloads, since identical files are compressed with deduplication.
Checklist

 Change is covered by automated tests","We already have two copies in dist/libthemis.wasm and dist-es6/libthemis.wasm, so making a third one isn't that bad.
(I'd bet all JavaScript developers think like that. It's contagious, I guess? That's why node_modules is so big, it seems.)",True,{'CONFUSED': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,859,2021-07-14T14:59:25Z,2021-07-16T08:06:28Z,2021-07-16T08:06:31Z,MERGED,True,2,1,1,https://github.com/ilammy,Keep a copy of libthemis.wasm in `src`,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/859,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/859#issuecomment-879969389,"That's where this file is located in WasmThemis 0.13.X and some users might have hardcoded its location (like it's hardcoded in WasmThemis example with webpack, for example). Let's package the original copy of libthemis.wasm at its original path, for compatibility.
This makes installed, unpackaged size a bit larger, but JavaScript developers are used to node_modules being heavier than their mom so it's okay.

And this does not affect downloads, since identical files are compressed with deduplication.
Checklist

 Change is covered by automated tests","If we're concerned over size, I guess this is the point where we can deprecate src/libthemis.wasm location in 0.14 and then remove this copy in 0.15.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,859,2021-07-14T14:59:25Z,2021-07-16T08:06:28Z,2021-07-16T08:06:31Z,MERGED,True,2,1,1,https://github.com/ilammy,Keep a copy of libthemis.wasm in `src`,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/859,https://github.com/Lagovas,4,https://github.com/cossacklabs/themis/pull/859#issuecomment-880060033,"That's where this file is located in WasmThemis 0.13.X and some users might have hardcoded its location (like it's hardcoded in WasmThemis example with webpack, for example). Let's package the original copy of libthemis.wasm at its original path, for compatibility.
This makes installed, unpackaged size a bit larger, but JavaScript developers are used to node_modules being heavier than their mom so it's okay.

And this does not affect downloads, since identical files are compressed with deduplication.
Checklist

 Change is covered by automated tests","That's where this file is located in WasmThemis 0.13.X
can you remind where this path used in 0.13.x? I didn't find",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,859,2021-07-14T14:59:25Z,2021-07-16T08:06:28Z,2021-07-16T08:06:31Z,MERGED,True,2,1,1,https://github.com/ilammy,Keep a copy of libthemis.wasm in `src`,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/859,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/859#issuecomment-880414145,"That's where this file is located in WasmThemis 0.13.X and some users might have hardcoded its location (like it's hardcoded in WasmThemis example with webpack, for example). Let's package the original copy of libthemis.wasm at its original path, for compatibility.
This makes installed, unpackaged size a bit larger, but JavaScript developers are used to node_modules being heavier than their mom so it's okay.

And this does not affect downloads, since identical files are compressed with deduplication.
Checklist

 Change is covered by automated tests","can you remind where this path used in 0.13.x?

I believe it could be used like this:

  
    
      themis/docs/examples/wasm/webpack/webpack.config.js
    
    
        Lines 29 to 38
      in
      48fb00e
    
  
  
    

        
          
           // Bundle libthemis.wasm with the script. 
        

        
          
           // Compute SRI hash sum of the script and inject it into HTML. 
        

        
          
           plugins: [ 
        

        
          
               new CopyPlugin({ 
        

        
          
                   patterns: [ 
        

        
          
                       { from: 'node_modules/wasm-themis/src/libthemis.wasm', 
        

        
          
                           to: '.' 
        

        
          
                       }, 
        

        
          
                   ], 
        

        
          
               }), 
        
    
  


when using WasmThemis for web. With Node.js and Electron you can just leave it where it is in node_modules, it will just work out. However, for web you need to bundle everything up, and the bundler needs to know where to get libthemis.wasm. I'd expect that people would just hardcode a path like this.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,859,2021-07-14T14:59:25Z,2021-07-16T08:06:28Z,2021-07-16T08:06:31Z,MERGED,True,2,1,1,https://github.com/ilammy,Keep a copy of libthemis.wasm in `src`,1,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/859,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/859#issuecomment-880878768,"That's where this file is located in WasmThemis 0.13.X and some users might have hardcoded its location (like it's hardcoded in WasmThemis example with webpack, for example). Let's package the original copy of libthemis.wasm at its original path, for compatibility.
This makes installed, unpackaged size a bit larger, but JavaScript developers are used to node_modules being heavier than their mom so it's okay.

And this does not affect downloads, since identical files are compressed with deduplication.
Checklist

 Change is covered by automated tests","If we're concerned over size

no, not right now.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,860,2021-07-14T15:06:50Z,2021-07-16T08:07:13Z,2021-07-16T08:07:16Z,MERGED,True,52,31,2,https://github.com/ilammy,Provide default export from the main module,2,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/860,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/860,"Because WasmThemis 0.13.X has been using CommonJS modules, various transpilers interpreted
import themis from 'wasm-themis';
as a valid way to import WasmThemis stuff under themis namespace in genuine ES6 code. (For example, WasmThemis example with webpack is written like that.)
The ""correct"" way to do this is as follows:
import * as themis from 'wasm-themis';
but we need to make sure that the previous form still works.
Exporting things twice is awkward, but when did “it looks awful” was a valid argument against making a breaking change?
(While we're here, drop unnecessary secure_cell.ts file. index.ts exports all Secure Cell variations individually and this file is not really used anywhere else. File structure of WasmThemis is implementation detail (except for libthemis.wasm location, I guess). You're not supposed to peek into it.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (they already use this form)
 Changelog is updated (should not have changed in the first place)","Because WasmThemis 0.13.X has been using CommonJS modules, various transpilers interpreted
import themis from 'wasm-themis';
as a valid way to import WasmThemis stuff under themis namespace in genuine ES6 code. (For example, WasmThemis example with webpack is written like that.)
The ""correct"" way to do this is as follows:
import * as themis from 'wasm-themis';
but we need to make sure that the previous form still works.
Exporting things twice is awkward, but when did “it looks awful” was a valid argument against making a breaking change?
(While we're here, drop unnecessary secure_cell.ts file. index.ts exports all Secure Cell variations individually and this file is not really used anywhere else. File structure of WasmThemis is implementation detail (except for libthemis.wasm location, I guess). You're not supposed to peek into it.)
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (they already use this form)
 Changelog is updated (should not have changed in the first place)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,861,2021-07-15T15:15:01Z,2021-07-16T08:07:47Z,2021-07-16T08:07:50Z,MERGED,True,4,0,1,https://github.com/ilammy,Announce TypeScript support for WasmThemis,1,"['docs :books:', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/861,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/861,"I think the author – @maxammann – warrants a credit here too and the users have a right to know that TypeScript is available (as well as the first-class support of ES6 modules).
Checklist

 Changelog is updated (in case of notable or breaking changes)","I think the author – @maxammann – warrants a credit here too and the users have a right to know that TypeScript is available (as well as the first-class support of ES6 modules).
Checklist

 Changelog is updated (in case of notable or breaking changes)",True,{'HOORAY': ['https://github.com/maxammann']}
cossacklabs/themis,https://github.com/cossacklabs/themis,862,2021-07-16T08:34:08Z,2021-07-19T12:27:41Z,2021-07-19T12:37:03Z,MERGED,True,4619,2253,36,https://github.com/ilammy,Merge branch `wasm-typescript`,10,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/862,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/862,"Finally, TypeScript rewrite is ready to be merged with no breaking changes.
Pulling in some hotfixes from release/0.13 introduces some more merge conflicts, and GitHub UI is as bad and useless at them as ever. This time it can at least offer to resolve them, but I don't want more “samba merges” in the history. So yet another manual merge.
Most of these changes come from #729, with some follow-ups. Note that there are no changes in docs/examples/wasm and tools/js/wasm-themis – and they still work. Also, no tests in src/wrappers/themis/wasm/test/test.js were removed and they still work. I have also manually checked the webpack example, it still works.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated
 Just push when approved, don't use GitHub UI","Finally, TypeScript rewrite is ready to be merged with no breaking changes.
Pulling in some hotfixes from release/0.13 introduces some more merge conflicts, and GitHub UI is as bad and useless at them as ever. This time it can at least offer to resolve them, but I don't want more “samba merges” in the history. So yet another manual merge.
Most of these changes come from #729, with some follow-ups. Note that there are no changes in docs/examples/wasm and tools/js/wasm-themis – and they still work. Also, no tests in src/wrappers/themis/wasm/test/test.js were removed and they still work. I have also manually checked the webpack example, it still works.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date
 Changelog is updated
 Just push when approved, don't use GitHub UI",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,865,2021-07-26T09:03:28Z,2021-07-26T11:39:10Z,2021-07-26T11:39:10Z,MERGED,True,17,9,4,https://github.com/julepka,M1 simulator fix: Removed arm64 from excluded archs,2,"['O-iOS :iphone:', 'M-CocoaPods', 'M-Carthage', 'M-SPM', 'M1']",https://github.com/cossacklabs/themis/pull/865,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/865,"Themis XCFramework was missing arm64 architecture that is required for M1 simulators.
Reported in #864
I have removed arm64 from the excluded architectures in Themis.xcodeproj to resolve the issue. After that, Themis XCFrameworks is building with the required arm64 simulator slice.
I'm going to publish a release with the new XCFramework attached. The update with touch all package managers.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Themis XCFramework was missing arm64 architecture that is required for M1 simulators.
Reported in #864
I have removed arm64 from the excluded architectures in Themis.xcodeproj to resolve the issue. After that, Themis XCFrameworks is building with the required arm64 simulator slice.
I'm going to publish a release with the new XCFramework attached. The update with touch all package managers.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,865,2021-07-26T09:03:28Z,2021-07-26T11:39:10Z,2021-07-26T11:39:10Z,MERGED,True,17,9,4,https://github.com/julepka,M1 simulator fix: Removed arm64 from excluded archs,2,"['O-iOS :iphone:', 'M-CocoaPods', 'M-Carthage', 'M-SPM', 'M1']",https://github.com/cossacklabs/themis/pull/865,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/865#issuecomment-886518250,"Themis XCFramework was missing arm64 architecture that is required for M1 simulators.
Reported in #864
I have removed arm64 from the excluded architectures in Themis.xcodeproj to resolve the issue. After that, Themis XCFrameworks is building with the required arm64 simulator slice.
I'm going to publish a release with the new XCFramework attached. The update with touch all package managers.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",Does OpenSSL package require similar changes?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,865,2021-07-26T09:03:28Z,2021-07-26T11:39:10Z,2021-07-26T11:39:10Z,MERGED,True,17,9,4,https://github.com/julepka,M1 simulator fix: Removed arm64 from excluded archs,2,"['O-iOS :iphone:', 'M-CocoaPods', 'M-Carthage', 'M-SPM', 'M1']",https://github.com/cossacklabs/themis/pull/865,https://github.com/julepka,3,https://github.com/cossacklabs/themis/pull/865#issuecomment-886521757,"Themis XCFramework was missing arm64 architecture that is required for M1 simulators.
Reported in #864
I have removed arm64 from the excluded architectures in Themis.xcodeproj to resolve the issue. After that, Themis XCFrameworks is building with the required arm64 simulator slice.
I'm going to publish a release with the new XCFramework attached. The update with touch all package managers.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Does OpenSSL package require similar changes?

Nope, it is good.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,866,2021-07-26T12:08:05Z,2021-07-26T12:24:30Z,2021-07-26T12:24:31Z,MERGED,True,17,9,4,https://github.com/julepka,Release process: M1 simulator fix: Removed arm64 from excluded archs (#865),1,"['O-iOS :iphone:', 'M-CocoaPods', 'M-Carthage', 'M-SPM', 'M1']",https://github.com/cossacklabs/themis/pull/866,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/866,Merging hotfix from release 0.13 branch to stable,Merging hotfix from release 0.13 branch to stable,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,867,2021-07-26T12:50:33Z,2021-07-26T12:54:57Z,2021-07-26T12:54:57Z,MERGED,True,18,9,4,https://github.com/julepka,Release process: M1 simulator fix: Removed arm64 from excluded archs (#865),3,"['O-iOS :iphone:', 'M-CocoaPods', 'M-Carthage', 'M-SPM', 'M1']",https://github.com/cossacklabs/themis/pull/867,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/867,Merging stable (with 0.13.12 hotfix) to master.,Merging stable (with 0.13.12 hotfix) to master.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,868,2021-10-05T15:21:35Z,2021-10-05T16:03:30Z,2021-10-05T16:03:30Z,MERGED,True,16,16,6,https://github.com/julepka,Fix Carthage example project: update Themis XCF location,1,"['O-iOS :iphone:', 'M-Carthage']",https://github.com/cossacklabs/themis/pull/868,https://github.com/julepka,1,https://github.com/cossacklabs/themis/pull/868,"After the recent iOS hotfix of arm64 simulator builds in 0.13.12 we haven't updated our example projects. Our CI tests are running from master on the latest version (tag 0.13.13). Carthage started building for arm64 simulator and changed the folder name of Themis XCF from ios-i386_x86_64-simulator to ios-arm64_i386_x86_64-simulator. That's why example project tests are failing.
Updating the XCF path should fix an issue. I've also updated the version to the latest and checked that example projects (both Swift and Objective-C) are running locally.
After the PR is merged, I'm going to update tests on Bitrise with a workaround similar to what we have in github actions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)","After the recent iOS hotfix of arm64 simulator builds in 0.13.12 we haven't updated our example projects. Our CI tests are running from master on the latest version (tag 0.13.13). Carthage started building for arm64 simulator and changed the folder name of Themis XCF from ios-i386_x86_64-simulator to ios-arm64_i386_x86_64-simulator. That's why example project tests are failing.
Updating the XCF path should fix an issue. I've also updated the version to the latest and checked that example projects (both Swift and Objective-C) are running locally.
After the PR is merged, I'm going to update tests on Bitrise with a workaround similar to what we have in github actions.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date (in case of API changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,869,2021-11-01T13:27:15Z,2021-11-01T13:36:57Z,2021-11-01T15:06:51Z,MERGED,True,11,11,6,https://github.com/ilammy,rust: Avoid double references,1,"['infrastructure', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/869,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/869,"Recent Clippy started complaining when you pass a reference to reference.  Compiler will automatically dereference those, but the warnings suggest it's redundant. Remove those. Originally, I wrote it like that for consistency with other arguments, but that would better be solved with a different argument parser.
Anyhow, stop offending our dear stationery and unbreak the build.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (not a user-visible change)","Recent Clippy started complaining when you pass a reference to reference.  Compiler will automatically dereference those, but the warnings suggest it's redundant. Remove those. Originally, I wrote it like that for consistency with other arguments, but that would better be solved with a different argument parser.
Anyhow, stop offending our dear stationery and unbreak the build.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (not a user-visible change)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,870,2021-11-01T13:27:29Z,2021-11-01T23:01:32Z,2021-11-01T23:01:35Z,MERGED,True,1,2,1,https://github.com/ilammy,CI: Use Xcode 12.4 for building Apple things,2,"['O-iOS :iphone:', 'O-macOS :computer:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/870,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/870,"#722 downgraded Xcode from 12.2 to 12.0 because reasons, but it seems 12.0 is broken somehow on CI, let's upgrade! #YOLO
In any case, Apple does not support anything but the latest version, and GitHub Actions will soon be ready to support macOS 11 for non-paying plebs and we will have to upgrade something somewhere eventually too.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (CI only)","#722 downgraded Xcode from 12.2 to 12.0 because reasons, but it seems 12.0 is broken somehow on CI, let's upgrade! #YOLO
In any case, Apple does not support anything but the latest version, and GitHub Actions will soon be ready to support macOS 11 for non-paying plebs and we will have to upgrade something somewhere eventually too.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (CI only)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,871,2021-11-01T13:31:46Z,2021-11-01T23:19:27Z,2021-11-01T23:19:31Z,MERGED,True,4,3,4,https://github.com/ilammy,core: Choose `openssl@1.1` from Homebrew by default,4,"['core', 'O-macOS :computer:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/871,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/871,"Homebrew formula openssl now defaults to openssl@3 which is not currently supported by Themis (so much that the tests are broken). While we certainly can compile Themis, it doesn't look like it's working properly. First of all, start installing OpenSSL 1.1 on macOS where it's already the default (with Homebrew, that is).
When automatically detecting OpenSSL location, choose OpenSSL 1.1 as well. This is applicable only for from-source builds. Technically, all previously released source tarballs fail to build right now, but that's not much of an issue since not many macOS users build Themis from source. The currently published Homebrew formula is broken too. That will be patched up separately.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Homebrew formula openssl now defaults to openssl@3 which is not currently supported by Themis (so much that the tests are broken). While we certainly can compile Themis, it doesn't look like it's working properly. First of all, start installing OpenSSL 1.1 on macOS where it's already the default (with Homebrew, that is).
When automatically detecting OpenSSL location, choose OpenSSL 1.1 as well. This is applicable only for from-source builds. Technically, all previously released source tarballs fail to build right now, but that's not much of an issue since not many macOS users build Themis from source. The currently published Homebrew formula is broken too. That will be patched up separately.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,872,2021-11-01T13:38:08Z,2021-11-02T11:51:23Z,2021-11-02T11:51:26Z,MERGED,True,29,1,4,https://github.com/ilammy,core: Deny building with OpenSSL 3.0,4,"['core', 'infrastructure', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/872,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/872,"For the time being Themis and Soter do not support OpenSSL 3.0. The code seems to build fine but it fails the tests, so we're not sure that it is safe to use Soter with OpenSSL 3.0. It's pretty risky at the moment to build Themis against OpenSSL 3.0, so let's explicitly disallow it.
This applies to previously released versions too, but I can't be bothered to issue a hotfix for that. Binary releases for Linux are not affected (they still use OpenSSL 1.1), Homebrew release for macOS will be patched up to use OpenSSL 1.1 separately, and whoever is brave enough to build Themis from source manually – you will be warned in docs.
Throw in an extra step on CI to ensure that OpenSSL 3.0 is indeed failing the build. At the moment only macOS Homebrew seems to have OpenSSL 3.0 available, so test with that. Linux distros are currently working on transitions too, but testing just one OS should be fine at the moment.
To make conflict resolution easier, this PR includes #871.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","For the time being Themis and Soter do not support OpenSSL 3.0. The code seems to build fine but it fails the tests, so we're not sure that it is safe to use Soter with OpenSSL 3.0. It's pretty risky at the moment to build Themis against OpenSSL 3.0, so let's explicitly disallow it.
This applies to previously released versions too, but I can't be bothered to issue a hotfix for that. Binary releases for Linux are not affected (they still use OpenSSL 1.1), Homebrew release for macOS will be patched up to use OpenSSL 1.1 separately, and whoever is brave enough to build Themis from source manually – you will be warned in docs.
Throw in an extra step on CI to ensure that OpenSSL 3.0 is indeed failing the build. At the moment only macOS Homebrew seems to have OpenSSL 3.0 available, so test with that. Linux distros are currently working on transitions too, but testing just one OS should be fine at the moment.
To make conflict resolution easier, this PR includes #871.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,872,2021-11-01T13:38:08Z,2021-11-02T11:51:23Z,2021-11-02T11:51:26Z,MERGED,True,29,1,4,https://github.com/ilammy,core: Deny building with OpenSSL 3.0,4,"['core', 'infrastructure', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/872,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/872#issuecomment-956871694,"For the time being Themis and Soter do not support OpenSSL 3.0. The code seems to build fine but it fails the tests, so we're not sure that it is safe to use Soter with OpenSSL 3.0. It's pretty risky at the moment to build Themis against OpenSSL 3.0, so let's explicitly disallow it.
This applies to previously released versions too, but I can't be bothered to issue a hotfix for that. Binary releases for Linux are not affected (they still use OpenSSL 1.1), Homebrew release for macOS will be patched up to use OpenSSL 1.1 separately, and whoever is brave enough to build Themis from source manually – you will be warned in docs.
Throw in an extra step on CI to ensure that OpenSSL 3.0 is indeed failing the build. At the moment only macOS Homebrew seems to have OpenSSL 3.0 available, so test with that. Linux distros are currently working on transitions too, but testing just one OS should be fine at the moment.
To make conflict resolution easier, this PR includes #871.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","With the base branch merged, I found it easier to rebase the whole thing to resolve merge conflicts. Ugh, GitHub you don't help in the slightest here! >_<
I've also added one more commit that allows to build Themis with OpenSSL 3.0 if you say the magic word. I realized that I will need a way to build it without failing while working on the transition. So developers can ask for
make WITH_EXPERIMENTAL_OPENSSL_3_SUPPORT=yes

and avoid triggering that #error. This goes otherwise undocumented.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,872,2021-11-01T13:38:08Z,2021-11-02T11:51:23Z,2021-11-02T11:51:26Z,MERGED,True,29,1,4,https://github.com/ilammy,core: Deny building with OpenSSL 3.0,4,"['core', 'infrastructure', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/872,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/872#issuecomment-956875892,"For the time being Themis and Soter do not support OpenSSL 3.0. The code seems to build fine but it fails the tests, so we're not sure that it is safe to use Soter with OpenSSL 3.0. It's pretty risky at the moment to build Themis against OpenSSL 3.0, so let's explicitly disallow it.
This applies to previously released versions too, but I can't be bothered to issue a hotfix for that. Binary releases for Linux are not affected (they still use OpenSSL 1.1), Homebrew release for macOS will be patched up to use OpenSSL 1.1 separately, and whoever is brave enough to build Themis from source manually – you will be warned in docs.
Throw in an extra step on CI to ensure that OpenSSL 3.0 is indeed failing the build. At the moment only macOS Homebrew seems to have OpenSSL 3.0 available, so test with that. Linux distros are currently working on transitions too, but testing just one OS should be fine at the moment.
To make conflict resolution easier, this PR includes #871.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","This goes otherwise undocumented.

best feature",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,874,2021-11-03T08:28:04Z,2021-11-05T09:46:10Z,2021-11-05T09:46:16Z,CLOSED,False,63,26,1,https://github.com/ilammy,RSA: keygen: Preparatory cleanups,13,"['core', 'refactoring', 'C-OpenSSL']",https://github.com/cossacklabs/themis/pull/874,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/874,"So I tried fixing deprecation warnings related to OpenSSL 3.0. That resulted in 60+ commits just for one file handling RSA key exporting and importing. And it started crashing because apparently to use new RSA key manipulation functions, you first need to generate RSA keys using new key generation functions. That will be taken care of later.
This PR is some preparatory cleanups in generic OpenSSL code. Initially I wanted to submit just one PR with OpenSSL 3.0 migration, thinking that it would be just a couple of conversions here and there. However, now it seems almost all code will need to be rewritten to use OpenSSL 3.0 API. And that will be a lot of changes. So to avoid dropping a patch bomb, I'm going to move incrementally: file by file, function by function.
It's a bummer that so much code will need attention. I mean, we could probably not do that – a warning is still a warning, the code still compiles. And I believe in OpenSSL team being responsible adults and not removing these APIs at least in 3.0. However, depending on deprecated APIs is bad, and some new APIs are genuinely easier and more secure to use, and have better compatibility with new things added in OpenSSL 3.0. Moreover, it seems that we are using the old APIs in some broken way that compatibility bridge in OpenSSL 3.0 cannot handle, resulting in actual test failures that I have not yet debugged thoroughly (I just know that OpenSSL refuses to generate us EC keys).
Anyhows. This PR is some preparatory cleanups in generic OpenSSL code for RSA key generation. This is not the only place where we generate RSA keys – the other one is in RSA signature handling. But this one is what generates keys which are then exported and given to the users.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no functional changes)","So I tried fixing deprecation warnings related to OpenSSL 3.0. That resulted in 60+ commits just for one file handling RSA key exporting and importing. And it started crashing because apparently to use new RSA key manipulation functions, you first need to generate RSA keys using new key generation functions. That will be taken care of later.
This PR is some preparatory cleanups in generic OpenSSL code. Initially I wanted to submit just one PR with OpenSSL 3.0 migration, thinking that it would be just a couple of conversions here and there. However, now it seems almost all code will need to be rewritten to use OpenSSL 3.0 API. And that will be a lot of changes. So to avoid dropping a patch bomb, I'm going to move incrementally: file by file, function by function.
It's a bummer that so much code will need attention. I mean, we could probably not do that – a warning is still a warning, the code still compiles. And I believe in OpenSSL team being responsible adults and not removing these APIs at least in 3.0. However, depending on deprecated APIs is bad, and some new APIs are genuinely easier and more secure to use, and have better compatibility with new things added in OpenSSL 3.0. Moreover, it seems that we are using the old APIs in some broken way that compatibility bridge in OpenSSL 3.0 cannot handle, resulting in actual test failures that I have not yet debugged thoroughly (I just know that OpenSSL refuses to generate us EC keys).
Anyhows. This PR is some preparatory cleanups in generic OpenSSL code for RSA key generation. This is not the only place where we generate RSA keys – the other one is in RSA signature handling. But this one is what generates keys which are then exported and given to the users.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no functional changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,874,2021-11-03T08:28:04Z,2021-11-05T09:46:10Z,2021-11-05T09:46:16Z,CLOSED,False,63,26,1,https://github.com/ilammy,RSA: keygen: Preparatory cleanups,13,"['core', 'refactoring', 'C-OpenSSL']",https://github.com/cossacklabs/themis/pull/874,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/874#issuecomment-958747571,"So I tried fixing deprecation warnings related to OpenSSL 3.0. That resulted in 60+ commits just for one file handling RSA key exporting and importing. And it started crashing because apparently to use new RSA key manipulation functions, you first need to generate RSA keys using new key generation functions. That will be taken care of later.
This PR is some preparatory cleanups in generic OpenSSL code. Initially I wanted to submit just one PR with OpenSSL 3.0 migration, thinking that it would be just a couple of conversions here and there. However, now it seems almost all code will need to be rewritten to use OpenSSL 3.0 API. And that will be a lot of changes. So to avoid dropping a patch bomb, I'm going to move incrementally: file by file, function by function.
It's a bummer that so much code will need attention. I mean, we could probably not do that – a warning is still a warning, the code still compiles. And I believe in OpenSSL team being responsible adults and not removing these APIs at least in 3.0. However, depending on deprecated APIs is bad, and some new APIs are genuinely easier and more secure to use, and have better compatibility with new things added in OpenSSL 3.0. Moreover, it seems that we are using the old APIs in some broken way that compatibility bridge in OpenSSL 3.0 cannot handle, resulting in actual test failures that I have not yet debugged thoroughly (I just know that OpenSSL refuses to generate us EC keys).
Anyhows. This PR is some preparatory cleanups in generic OpenSSL code for RSA key generation. This is not the only place where we generate RSA keys – the other one is in RSA signature handling. But this one is what generates keys which are then exported and given to the users.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no functional changes)","Also, /cast @G1gg1L3s – whenever you have time, given circumstances. (I dunno why I can't add them as a reviewer.)
All of you, please keep a close eye on me and all these changes. This is going to be exhausting. I don't want to add more bugs, vulnerabilities – and backdoors 😏 – than we already have in this extremely dense code. OpenSSL is notorious for being very easy to misuse. Like, the whole value proposition of Themis is that other people don't have to deal with all this bullshit...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,874,2021-11-03T08:28:04Z,2021-11-05T09:46:10Z,2021-11-05T09:46:16Z,CLOSED,False,63,26,1,https://github.com/ilammy,RSA: keygen: Preparatory cleanups,13,"['core', 'refactoring', 'C-OpenSSL']",https://github.com/cossacklabs/themis/pull/874,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/874#issuecomment-959129618,"So I tried fixing deprecation warnings related to OpenSSL 3.0. That resulted in 60+ commits just for one file handling RSA key exporting and importing. And it started crashing because apparently to use new RSA key manipulation functions, you first need to generate RSA keys using new key generation functions. That will be taken care of later.
This PR is some preparatory cleanups in generic OpenSSL code. Initially I wanted to submit just one PR with OpenSSL 3.0 migration, thinking that it would be just a couple of conversions here and there. However, now it seems almost all code will need to be rewritten to use OpenSSL 3.0 API. And that will be a lot of changes. So to avoid dropping a patch bomb, I'm going to move incrementally: file by file, function by function.
It's a bummer that so much code will need attention. I mean, we could probably not do that – a warning is still a warning, the code still compiles. And I believe in OpenSSL team being responsible adults and not removing these APIs at least in 3.0. However, depending on deprecated APIs is bad, and some new APIs are genuinely easier and more secure to use, and have better compatibility with new things added in OpenSSL 3.0. Moreover, it seems that we are using the old APIs in some broken way that compatibility bridge in OpenSSL 3.0 cannot handle, resulting in actual test failures that I have not yet debugged thoroughly (I just know that OpenSSL refuses to generate us EC keys).
Anyhows. This PR is some preparatory cleanups in generic OpenSSL code for RSA key generation. This is not the only place where we generate RSA keys – the other one is in RSA signature handling. But this one is what generates keys which are then exported and given to the users.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no functional changes)","@ilammy what do you think about pushing openssl-3 related changes in core into separate branch?
i'm hesitant if themis-core needs to be rewritten in C to work with openssl3. we had all these ideas about rust-core.
if the migration is large and painful, should we really do it in master, risking the stability of the core?
please see the discussion in slack",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,874,2021-11-03T08:28:04Z,2021-11-05T09:46:10Z,2021-11-05T09:46:16Z,CLOSED,False,63,26,1,https://github.com/ilammy,RSA: keygen: Preparatory cleanups,13,"['core', 'refactoring', 'C-OpenSSL']",https://github.com/cossacklabs/themis/pull/874,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/874#issuecomment-959350196,"So I tried fixing deprecation warnings related to OpenSSL 3.0. That resulted in 60+ commits just for one file handling RSA key exporting and importing. And it started crashing because apparently to use new RSA key manipulation functions, you first need to generate RSA keys using new key generation functions. That will be taken care of later.
This PR is some preparatory cleanups in generic OpenSSL code. Initially I wanted to submit just one PR with OpenSSL 3.0 migration, thinking that it would be just a couple of conversions here and there. However, now it seems almost all code will need to be rewritten to use OpenSSL 3.0 API. And that will be a lot of changes. So to avoid dropping a patch bomb, I'm going to move incrementally: file by file, function by function.
It's a bummer that so much code will need attention. I mean, we could probably not do that – a warning is still a warning, the code still compiles. And I believe in OpenSSL team being responsible adults and not removing these APIs at least in 3.0. However, depending on deprecated APIs is bad, and some new APIs are genuinely easier and more secure to use, and have better compatibility with new things added in OpenSSL 3.0. Moreover, it seems that we are using the old APIs in some broken way that compatibility bridge in OpenSSL 3.0 cannot handle, resulting in actual test failures that I have not yet debugged thoroughly (I just know that OpenSSL refuses to generate us EC keys).
Anyhows. This PR is some preparatory cleanups in generic OpenSSL code for RSA key generation. This is not the only place where we generate RSA keys – the other one is in RSA signature handling. But this one is what generates keys which are then exported and given to the users.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no functional changes)","(I dunno why I can't add them as a reviewer.)

because access control :) I've added @G1gg1L3s to Themis-core team & set as reviewer.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,874,2021-11-03T08:28:04Z,2021-11-05T09:46:10Z,2021-11-05T09:46:16Z,CLOSED,False,63,26,1,https://github.com/ilammy,RSA: keygen: Preparatory cleanups,13,"['core', 'refactoring', 'C-OpenSSL']",https://github.com/cossacklabs/themis/pull/874,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/874#issuecomment-960457594,"So I tried fixing deprecation warnings related to OpenSSL 3.0. That resulted in 60+ commits just for one file handling RSA key exporting and importing. And it started crashing because apparently to use new RSA key manipulation functions, you first need to generate RSA keys using new key generation functions. That will be taken care of later.
This PR is some preparatory cleanups in generic OpenSSL code. Initially I wanted to submit just one PR with OpenSSL 3.0 migration, thinking that it would be just a couple of conversions here and there. However, now it seems almost all code will need to be rewritten to use OpenSSL 3.0 API. And that will be a lot of changes. So to avoid dropping a patch bomb, I'm going to move incrementally: file by file, function by function.
It's a bummer that so much code will need attention. I mean, we could probably not do that – a warning is still a warning, the code still compiles. And I believe in OpenSSL team being responsible adults and not removing these APIs at least in 3.0. However, depending on deprecated APIs is bad, and some new APIs are genuinely easier and more secure to use, and have better compatibility with new things added in OpenSSL 3.0. Moreover, it seems that we are using the old APIs in some broken way that compatibility bridge in OpenSSL 3.0 cannot handle, resulting in actual test failures that I have not yet debugged thoroughly (I just know that OpenSSL refuses to generate us EC keys).
Anyhows. This PR is some preparatory cleanups in generic OpenSSL code for RSA key generation. This is not the only place where we generate RSA keys – the other one is in RSA signature handling. But this one is what generates keys which are then exported and given to the users.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no functional changes)","@ilammy what do you think about pushing openssl-3 related changes in core into separate branch?

Yeah, that's the plan.
I'm going to create a separate openssl-3.0 branch and keep development of OpenSSL 3.0 things contained to that branch for a while. This leaves the option of making a Themis release in known good state. Plus, I'd like to temporarily disable most of the CI on that branch – there is no need to run full regression on all wrappers on every PR, until the core is fixed to work with OpenSSL 3.0. When I figure out the proper GitHub Actions syntax for that, I'd make a PR for that, and then any OpenSSL 3.0 work will go to that branch.
Changes that are submitted against master – like this one – are going to be common improvements that I might make along the way. Those would affect OpenSSL 1.1 too, so they are going through the master pipeline with full regression. I'm going to merge them up into openssl-3.0 as necessary.

i'm hesitant if themis-core needs to be rewritten in C to work with openssl3. we had all these ideas about rust-core.

Well, supporting Rust comes at a price too, like losing all platforms not supported by rustc, turning the build process into even more complicated mess that it is (especially when building for Android/iOS). But you have a point.
I haven't progressed much with OpenSSL 3.0 changes so far. It's still crashes and/or failures for me. I'm going to finish converting one file for starters, then see how much changes that entailed, and then take over from there.
We'll discuss this offline (well, online, but not here, ykwim).


(I dunno why I can't add them as a reviewer.)

because access control :)

Uh... Right. I though that anyone in the organization can be an assigned reviewer. Then I realized that approving a review can actually allow merging it, so that's not a thing you might want to blanket-allow to everyone.
Thanks.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,874,2021-11-03T08:28:04Z,2021-11-05T09:46:10Z,2021-11-05T09:46:16Z,CLOSED,False,63,26,1,https://github.com/ilammy,RSA: keygen: Preparatory cleanups,13,"['core', 'refactoring', 'C-OpenSSL']",https://github.com/cossacklabs/themis/pull/874,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/874#issuecomment-961755727,"So I tried fixing deprecation warnings related to OpenSSL 3.0. That resulted in 60+ commits just for one file handling RSA key exporting and importing. And it started crashing because apparently to use new RSA key manipulation functions, you first need to generate RSA keys using new key generation functions. That will be taken care of later.
This PR is some preparatory cleanups in generic OpenSSL code. Initially I wanted to submit just one PR with OpenSSL 3.0 migration, thinking that it would be just a couple of conversions here and there. However, now it seems almost all code will need to be rewritten to use OpenSSL 3.0 API. And that will be a lot of changes. So to avoid dropping a patch bomb, I'm going to move incrementally: file by file, function by function.
It's a bummer that so much code will need attention. I mean, we could probably not do that – a warning is still a warning, the code still compiles. And I believe in OpenSSL team being responsible adults and not removing these APIs at least in 3.0. However, depending on deprecated APIs is bad, and some new APIs are genuinely easier and more secure to use, and have better compatibility with new things added in OpenSSL 3.0. Moreover, it seems that we are using the old APIs in some broken way that compatibility bridge in OpenSSL 3.0 cannot handle, resulting in actual test failures that I have not yet debugged thoroughly (I just know that OpenSSL refuses to generate us EC keys).
Anyhows. This PR is some preparatory cleanups in generic OpenSSL code for RSA key generation. This is not the only place where we generate RSA keys – the other one is in RSA signature handling. But this one is what generates keys which are then exported and given to the users.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (no functional changes)","I'm scrapping this PR and – as discussed – the whole “OpenSSL 3.0 rewrite” effort. It's too much of a bother at the moment. For a while, Themis is going to stay OpenSSL-1.1-only library.
It seems I have also finally understood why EC tests are failing with OpenSSL 3.0 – because Soter misuses OpenSSL 1.1 API for EC key generation. I might try fixing that instead, and hopefully it will make tests pass with OpenSSL 3.0, but that would still be far away from “supported” territory.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,875,2021-11-06T13:32:34Z,2021-11-22T13:20:07Z,2021-11-22T13:29:16Z,MERGED,True,303,206,11,https://github.com/ilammy,soter: Fix misuse of OpenSSL API for EC key generation (and more),78,"['core', 'C-OpenSSL', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/875,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/875,"Turns out, Soter generates EC keys incorrectly, by misusing OpenSSL API. It somehow works out for OpenSSL 1.1.1 (and earlier), but in OpenSSL 3.0 this fails. This ginormous PR improves the situation a bit by using proper key generation sequence which allows Secure Message sign/verify mode to work with OpenSSL 3.0. Collateral damage includes some extra checks and cleanups along the way.
This change was made in an autistic fit of spite against OpenSSL 3.0 for which I am sorry. I also apologize for such a long PR, I didn't have time to write a short one. I wish you happy code review. When you see 78 commits, 11 files, and 500+ lines changed – you know that's just the right size /s
Given the scope, I'd wait for at least three two sign-offs on this before merging.
Background
We're not the first ones, and the issue probably ultimately stems from undoubtedly high quality of OpenSSL documentation, but nevertheless. See these issues:

openssl/openssl#11990
openssl/openssl#11549

Soter makes the same mistake. Thrice.
Impact
The code changes may affect the following systems:

key generation (both EC and RSA)
Secure Message in sign/verify mode (ditto)
Secure Message in encrypt mode (EC only)

But actually this should be a change with no functional impact.
OpenSSL 1.1.1 and OpenSSL 1.0.2 operation is unaffected. (CI does not check OpenSSL 1.0.2 but I can confirm that Soter & Themis Core test suites pass with it.)
With OpenSSL 3.0 the test failure rate improves a bit.
Soter test suite:
-==> 250 check(s) in 17 suite(s) finished after 1.00 second(s),
-    245 succeeded, 5 failed (2.00%)
+==> 269 check(s) in 17 suite(s) finished after 2.00 second(s),
+    267 succeeded, 2 failed (0.74%)
Themis Core test suite:
-==> 190 check(s) in 15 suite(s) finished after 4.00 second(s),
-    171 succeeded, 19 failed (10.00%)
+==> 242 check(s) in 15 suite(s) finished after 4.00 second(s),
+    232 succeeded, 10 failed (4.13%)
Additional notes
Properly using OpenSSL API for EC key generation appears to trigger #657 on CI with legacy Node.js 8.x. I have applied the suggested workaround (switch to BoringSSL).
Future work
This PR fixes one instance, on the code paths that affect sign/verify mode of Secure Message. The tests still fail with OpenSSL 3.0 as the key agreement code paths need to be corrected in the same manner, but I don't have enough spoons to do that now (and you probably don't want to get 40 more commits here).
Additionally, it would probably be nice to port all this to BoringSSL code as well, but it seems that it's currently more lenient, like OpenSSL 1.1.1 is.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Turns out, Soter generates EC keys incorrectly, by misusing OpenSSL API. It somehow works out for OpenSSL 1.1.1 (and earlier), but in OpenSSL 3.0 this fails. This ginormous PR improves the situation a bit by using proper key generation sequence which allows Secure Message sign/verify mode to work with OpenSSL 3.0. Collateral damage includes some extra checks and cleanups along the way.
This change was made in an autistic fit of spite against OpenSSL 3.0 for which I am sorry. I also apologize for such a long PR, I didn't have time to write a short one. I wish you happy code review. When you see 78 commits, 11 files, and 500+ lines changed – you know that's just the right size /s
Given the scope, I'd wait for at least three two sign-offs on this before merging.
Background
We're not the first ones, and the issue probably ultimately stems from undoubtedly high quality of OpenSSL documentation, but nevertheless. See these issues:

openssl/openssl#11990
openssl/openssl#11549

Soter makes the same mistake. Thrice.
Impact
The code changes may affect the following systems:

key generation (both EC and RSA)
Secure Message in sign/verify mode (ditto)
Secure Message in encrypt mode (EC only)

But actually this should be a change with no functional impact.
OpenSSL 1.1.1 and OpenSSL 1.0.2 operation is unaffected. (CI does not check OpenSSL 1.0.2 but I can confirm that Soter & Themis Core test suites pass with it.)
With OpenSSL 3.0 the test failure rate improves a bit.
Soter test suite:
-==> 250 check(s) in 17 suite(s) finished after 1.00 second(s),
-    245 succeeded, 5 failed (2.00%)
+==> 269 check(s) in 17 suite(s) finished after 2.00 second(s),
+    267 succeeded, 2 failed (0.74%)
Themis Core test suite:
-==> 190 check(s) in 15 suite(s) finished after 4.00 second(s),
-    171 succeeded, 19 failed (10.00%)
+==> 242 check(s) in 15 suite(s) finished after 4.00 second(s),
+    232 succeeded, 10 failed (4.13%)
Additional notes
Properly using OpenSSL API for EC key generation appears to trigger #657 on CI with legacy Node.js 8.x. I have applied the suggested workaround (switch to BoringSSL).
Future work
This PR fixes one instance, on the code paths that affect sign/verify mode of Secure Message. The tests still fail with OpenSSL 3.0 as the key agreement code paths need to be corrected in the same manner, but I don't have enough spoons to do that now (and you probably don't want to get 40 more commits here).
Additionally, it would probably be nice to port all this to BoringSSL code as well, but it seems that it's currently more lenient, like OpenSSL 1.1.1 is.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,875,2021-11-06T13:32:34Z,2021-11-22T13:20:07Z,2021-11-22T13:29:16Z,MERGED,True,303,206,11,https://github.com/ilammy,soter: Fix misuse of OpenSSL API for EC key generation (and more),78,"['core', 'C-OpenSSL', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/875,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/875#issuecomment-966202502,"Turns out, Soter generates EC keys incorrectly, by misusing OpenSSL API. It somehow works out for OpenSSL 1.1.1 (and earlier), but in OpenSSL 3.0 this fails. This ginormous PR improves the situation a bit by using proper key generation sequence which allows Secure Message sign/verify mode to work with OpenSSL 3.0. Collateral damage includes some extra checks and cleanups along the way.
This change was made in an autistic fit of spite against OpenSSL 3.0 for which I am sorry. I also apologize for such a long PR, I didn't have time to write a short one. I wish you happy code review. When you see 78 commits, 11 files, and 500+ lines changed – you know that's just the right size /s
Given the scope, I'd wait for at least three two sign-offs on this before merging.
Background
We're not the first ones, and the issue probably ultimately stems from undoubtedly high quality of OpenSSL documentation, but nevertheless. See these issues:

openssl/openssl#11990
openssl/openssl#11549

Soter makes the same mistake. Thrice.
Impact
The code changes may affect the following systems:

key generation (both EC and RSA)
Secure Message in sign/verify mode (ditto)
Secure Message in encrypt mode (EC only)

But actually this should be a change with no functional impact.
OpenSSL 1.1.1 and OpenSSL 1.0.2 operation is unaffected. (CI does not check OpenSSL 1.0.2 but I can confirm that Soter & Themis Core test suites pass with it.)
With OpenSSL 3.0 the test failure rate improves a bit.
Soter test suite:
-==> 250 check(s) in 17 suite(s) finished after 1.00 second(s),
-    245 succeeded, 5 failed (2.00%)
+==> 269 check(s) in 17 suite(s) finished after 2.00 second(s),
+    267 succeeded, 2 failed (0.74%)
Themis Core test suite:
-==> 190 check(s) in 15 suite(s) finished after 4.00 second(s),
-    171 succeeded, 19 failed (10.00%)
+==> 242 check(s) in 15 suite(s) finished after 4.00 second(s),
+    232 succeeded, 10 failed (4.13%)
Additional notes
Properly using OpenSSL API for EC key generation appears to trigger #657 on CI with legacy Node.js 8.x. I have applied the suggested workaround (switch to BoringSSL).
Future work
This PR fixes one instance, on the code paths that affect sign/verify mode of Secure Message. The tests still fail with OpenSSL 3.0 as the key agreement code paths need to be corrected in the same manner, but I don't have enough spoons to do that now (and you probably don't want to get 40 more commits here).
Additionally, it would probably be nice to port all this to BoringSSL code as well, but it seems that it's currently more lenient, like OpenSSL 1.1.1 is.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","@Lagovas,

but I don't understand what actually wrong with our code. we don't use empty uninitialized EVP_PKEY structures, we specify curves and params where it needs. But always extract keys from CTX structure, instead of direct usage. But CTX and assigned keys initialized properly, as I understand. Can you correct me or explain a bit more?

You see, OpenSSL is like ceremonial magic. You must follow the proper sequence to the letter.
“I use only clean robes, utter the Duke's name loudly when needed, and always purify my salts at the Church instead of doing it myself. The ritual is performed properly, as I understand.”
“Yes, but you also draw the pentacle in eighteen strokes.”
You mess up just one insignificant thing and invocation won't work. Or will appear to work but your soul will be forfeited in five years.
And of course nobody is going to lay it out for you neatly or tell you what's wrong. You have to learn it all yourself, write it down in your grimoire—preferably in code—and then never share this dangerous knowledge with anyone else. Except maybe your disciple (of which you shall have no more than one), and only if he proves worthy.
So... back to more serious mood.
The key generation sequence was not really documented before OpenSSL 3.0 (and in OpenSSL 3.0 it lacks any detailed error strings except for return codes). But the core thing is that you're supposed to use separate EVP_PKEY_CTX instances for parameter generation and key generation. Moreover, instead of low-level API for EC key generation – EC_KEY_generate_key(), which got deprecated in OpenSSL 3.0 – one should use high-level API for key generation. The last point is not critical, but given that RSA code path uses the high-level API, I took the liberty of unifying the code paths.
This is how the old code does it:

#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#include <openssl/ec.h>
#include <openssl/err.h>
#include <openssl/evp.h>

static void die(const char* fmt, ...)
{
    va_list args;

    va_start(args, fmt);
    vfprintf(stderr, fmt, args);
    va_end(args);

    ERR_print_errors_fp(stderr);

    exit(1);
}

int main()
{
    EVP_PKEY* pkey = NULL;
    EVP_PKEY_CTX* pkey_ctx = NULL;
    EC_KEY* ec = NULL;

    /*
     * Parameter generation
     *
     * soter_sign_init_ecdsa_none_pkcs8()
     */

    pkey = EVP_PKEY_new();
    if (!pkey) {
        die(""[*] EVP_PKEY_new() failed\n"");
    }

    if (!EVP_PKEY_set_type(pkey, EVP_PKEY_EC)) {
        die(""[*] EVP_PKEY_new_set_type() failed\n"");
    }

    pkey_ctx = EVP_PKEY_CTX_new(pkey, NULL);
    if (!pkey_ctx) {
        die(""[*] EVP_PKEY_CTX_new() failed\n"");
    }

    if (!EVP_PKEY_paramgen_init(pkey_ctx)) {
        die(""[*] EVP_PKEY_paramgen_init() failed\n"");
    }

    if (!EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pkey_ctx, NID_X9_62_prime256v1)) {
        die(""[*] EVP_PKEY_CTX_set_ec_paramgen_curve_nid() failed\n"");
    }

    if (!EVP_PKEY_paramgen(pkey_ctx, &pkey)) {
        die(""[*] EVP_PKEY_paramgen() failed\n"");
    }

    /*
     * Keypair generation
     *
     * soter_ec_gen_key()
     */

    pkey = EVP_PKEY_CTX_get0_pkey(pkey_ctx);
    if (!pkey) {
        die(""[*] EVP_PKEY_CTX_get0_pkey() failed\n"");
    }

    if (EVP_PKEY_EC != EVP_PKEY_id(pkey)) {
        die(""[*] EVP_PKEY_id() failed\n"");
    }

    ec = EVP_PKEY_get0(pkey);
    if (NULL == ec) {
        die(""[*] EVP_PKEY_get0() failed\n"");
    }

    if (1 != EC_KEY_generate_key(ec)) {
        die(""[*] EC_KEY_generate_key() failed\n"");
    }

    fprintf(stderr, ""[+] EC key generation successful!\n"");

    return 0;
}

This is how the new code does it:

#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#include <openssl/ec.h>
#include <openssl/err.h>
#include <openssl/evp.h>

static void die(const char* fmt, ...)
{
    va_list args;

    va_start(args, fmt);
    vfprintf(stderr, fmt, args);
    va_end(args);

    ERR_print_errors_fp(stderr);

    exit(1);
}

int main()
{
    EVP_PKEY_CTX* param_ctx = NULL;
    EVP_PKEY* param = NULL;
    EVP_PKEY_CTX* pkey_ctx = NULL;
    EVP_PKEY* pkey = NULL;

    /*
     * Parameter & keypair generation
     *
     * soter_ec_gen_key()
     */

    param_ctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL);
    if (!param_ctx) {
        die(""[*] EVP_PKEY_CTX_new_id() failed\n"");
    }

    if (EVP_PKEY_paramgen_init(param_ctx) != 1) {
        die(""[*] EVP_PKEY_paramgen_init() failed\n"");
    }

    if (EVP_PKEY_CTX_set_ec_paramgen_curve_nid(param_ctx, NID_X9_62_prime256v1) != 1) {
        die(""[*] EVP_PKEY_CTX_set_ec_paramgen_curve_nid() failed\n"");
    }

    if (EVP_PKEY_paramgen(param_ctx, &param) != 1) {
        die(""[*] EVP_PKEY_paramgen() failed\n"");
    }

    pkey_ctx = EVP_PKEY_CTX_new(param, NULL);
    if (!pkey_ctx) {
        die(""[*] EVP_PKEY_CTX_new() failed\n"");
    }

    if (EVP_PKEY_keygen_init(pkey_ctx) != 1) {
        die(""[*] EVP_PKEY_keygen_init() failed\n"");
    }

    if (EVP_PKEY_keygen(pkey_ctx, &pkey) != 1) {
        die(""[*] EVP_PKEY_keygen() failed\n"");
    }

    fprintf(stderr, ""[+] EC key generation successful!\n"");

    return 0;
}

If you compile and run these snippets with OpenSSL 1.1.1 and 3.0 you will observe that old version fails on EVP_PKEY_paramgen() invocation with OpenSSL 3.0. That is because EVP_PKEY_CTX was not even meant to be initialized with EVP_PKEY_CTX_new() for parameter generation, but it sorta-kinda worked by accident. While EVP_PKEY might contain public key, private key, and/or parameters – it does matter how EVP_PKEY_CTX is created. I haven't dug into the details too deeply to be able to tell you why it matters though. Don't think about it, just follow the proper ritual.
For reference, you can look at the 3.0 manpages for key generation then compare them to 1.1.1 version, as well as read through the issues linked above (openssl/openssl#11990).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,875,2021-11-06T13:32:34Z,2021-11-22T13:20:07Z,2021-11-22T13:29:16Z,MERGED,True,303,206,11,https://github.com/ilammy,soter: Fix misuse of OpenSSL API for EC key generation (and more),78,"['core', 'C-OpenSSL', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/875,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/875#issuecomment-968980890,"Turns out, Soter generates EC keys incorrectly, by misusing OpenSSL API. It somehow works out for OpenSSL 1.1.1 (and earlier), but in OpenSSL 3.0 this fails. This ginormous PR improves the situation a bit by using proper key generation sequence which allows Secure Message sign/verify mode to work with OpenSSL 3.0. Collateral damage includes some extra checks and cleanups along the way.
This change was made in an autistic fit of spite against OpenSSL 3.0 for which I am sorry. I also apologize for such a long PR, I didn't have time to write a short one. I wish you happy code review. When you see 78 commits, 11 files, and 500+ lines changed – you know that's just the right size /s
Given the scope, I'd wait for at least three two sign-offs on this before merging.
Background
We're not the first ones, and the issue probably ultimately stems from undoubtedly high quality of OpenSSL documentation, but nevertheless. See these issues:

openssl/openssl#11990
openssl/openssl#11549

Soter makes the same mistake. Thrice.
Impact
The code changes may affect the following systems:

key generation (both EC and RSA)
Secure Message in sign/verify mode (ditto)
Secure Message in encrypt mode (EC only)

But actually this should be a change with no functional impact.
OpenSSL 1.1.1 and OpenSSL 1.0.2 operation is unaffected. (CI does not check OpenSSL 1.0.2 but I can confirm that Soter & Themis Core test suites pass with it.)
With OpenSSL 3.0 the test failure rate improves a bit.
Soter test suite:
-==> 250 check(s) in 17 suite(s) finished after 1.00 second(s),
-    245 succeeded, 5 failed (2.00%)
+==> 269 check(s) in 17 suite(s) finished after 2.00 second(s),
+    267 succeeded, 2 failed (0.74%)
Themis Core test suite:
-==> 190 check(s) in 15 suite(s) finished after 4.00 second(s),
-    171 succeeded, 19 failed (10.00%)
+==> 242 check(s) in 15 suite(s) finished after 4.00 second(s),
+    232 succeeded, 10 failed (4.13%)
Additional notes
Properly using OpenSSL API for EC key generation appears to trigger #657 on CI with legacy Node.js 8.x. I have applied the suggested workaround (switch to BoringSSL).
Future work
This PR fixes one instance, on the code paths that affect sign/verify mode of Secure Message. The tests still fail with OpenSSL 3.0 as the key agreement code paths need to be corrected in the same manner, but I don't have enough spoons to do that now (and you probably don't want to get 40 more commits here).
Additionally, it would probably be nice to port all this to BoringSSL code as well, but it seems that it's currently more lenient, like OpenSSL 1.1.1 is.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Hello, that's Anastasiia-lets-not-merge-in-master here.
As I see many changes related to core, but all unit tests passing, I'd recommend to run a cross-platform tests. AFAIK, we run cross-platform and cross-themis-version tests on the internal BuildBot only.
I'd recommend merging #875 and #876 to a separate branch master-ready-player-openssl30 and run BuildBot testing suite between this branch and the latest release (@shadinua 👀 ). Once successful, then merge to master.
Cases I'd like to spot early on: changes in SC/SM that are compatible for these PRs, but incompatible for 0.13.X
@ilammy WDYT?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,875,2021-11-06T13:32:34Z,2021-11-22T13:20:07Z,2021-11-22T13:29:16Z,MERGED,True,303,206,11,https://github.com/ilammy,soter: Fix misuse of OpenSSL API for EC key generation (and more),78,"['core', 'C-OpenSSL', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/875,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/875#issuecomment-969502016,"Turns out, Soter generates EC keys incorrectly, by misusing OpenSSL API. It somehow works out for OpenSSL 1.1.1 (and earlier), but in OpenSSL 3.0 this fails. This ginormous PR improves the situation a bit by using proper key generation sequence which allows Secure Message sign/verify mode to work with OpenSSL 3.0. Collateral damage includes some extra checks and cleanups along the way.
This change was made in an autistic fit of spite against OpenSSL 3.0 for which I am sorry. I also apologize for such a long PR, I didn't have time to write a short one. I wish you happy code review. When you see 78 commits, 11 files, and 500+ lines changed – you know that's just the right size /s
Given the scope, I'd wait for at least three two sign-offs on this before merging.
Background
We're not the first ones, and the issue probably ultimately stems from undoubtedly high quality of OpenSSL documentation, but nevertheless. See these issues:

openssl/openssl#11990
openssl/openssl#11549

Soter makes the same mistake. Thrice.
Impact
The code changes may affect the following systems:

key generation (both EC and RSA)
Secure Message in sign/verify mode (ditto)
Secure Message in encrypt mode (EC only)

But actually this should be a change with no functional impact.
OpenSSL 1.1.1 and OpenSSL 1.0.2 operation is unaffected. (CI does not check OpenSSL 1.0.2 but I can confirm that Soter & Themis Core test suites pass with it.)
With OpenSSL 3.0 the test failure rate improves a bit.
Soter test suite:
-==> 250 check(s) in 17 suite(s) finished after 1.00 second(s),
-    245 succeeded, 5 failed (2.00%)
+==> 269 check(s) in 17 suite(s) finished after 2.00 second(s),
+    267 succeeded, 2 failed (0.74%)
Themis Core test suite:
-==> 190 check(s) in 15 suite(s) finished after 4.00 second(s),
-    171 succeeded, 19 failed (10.00%)
+==> 242 check(s) in 15 suite(s) finished after 4.00 second(s),
+    232 succeeded, 10 failed (4.13%)
Additional notes
Properly using OpenSSL API for EC key generation appears to trigger #657 on CI with legacy Node.js 8.x. I have applied the suggested workaround (switch to BoringSSL).
Future work
This PR fixes one instance, on the code paths that affect sign/verify mode of Secure Message. The tests still fail with OpenSSL 3.0 as the key agreement code paths need to be corrected in the same manner, but I don't have enough spoons to do that now (and you probably don't want to get 40 more commits here).
Additionally, it would probably be nice to port all this to BoringSSL code as well, but it seems that it's currently more lenient, like OpenSSL 1.1.1 is.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","I'd recommend merging [...] to a separate branch master-ready-player-openssl30 and run BuildBot testing suite between this branch and the latest release (@shadinua 👀 ). Once successful, then merge to master.

I don't mind particularly, but I think that's would be busywork for a change that is supposed go into master “soon”. Thus I'm biased for merging it now and reverting it later if it proves to be problematic (which I don't really expect it to be).
In my opinion, if this change were truly experimental, potentially destabilizing, and/or requiring a long tail of extra work – yeah, then it totally makes sense to put it into a separate branch with might or might not get merged into master by 0.14, depending on how good it is from security and QA standpoint. But if all this is more or less complete changeset and not really expected to fail the cross-tests, then going through a separate branch is a good discipline at best, but does not really save time or effort. Neither for us – look how much we spent in this thread – nor for users, who aren't going to be affected much in case the change is actually flawed and would need to get reverted.
It's not like we promise master to be stable and bug-free to the best of our abilities at all times, that's what releases are for. From my viewpoint, master should be buildable and without major known issues or incompatibilities, but yet unknown bugs are “okay”, in a way. Basically, what one would use a dev branch for in a project with more involved branching strategy – which we arguably aren't.
That said, it's more of a discussion on how future development should proceed. Are we going to treat non-trivial Themis Core changes (i.e., more involved that code style fixes) as potentially radioactive and not allowed into master until cross-test regression confirm they look clean? In that case, I think, this should be codified somewhere to avoid having this discussion on case-by-case basis.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,875,2021-11-06T13:32:34Z,2021-11-22T13:20:07Z,2021-11-22T13:29:16Z,MERGED,True,303,206,11,https://github.com/ilammy,soter: Fix misuse of OpenSSL API for EC key generation (and more),78,"['core', 'C-OpenSSL', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/875,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/875#issuecomment-970393989,"Turns out, Soter generates EC keys incorrectly, by misusing OpenSSL API. It somehow works out for OpenSSL 1.1.1 (and earlier), but in OpenSSL 3.0 this fails. This ginormous PR improves the situation a bit by using proper key generation sequence which allows Secure Message sign/verify mode to work with OpenSSL 3.0. Collateral damage includes some extra checks and cleanups along the way.
This change was made in an autistic fit of spite against OpenSSL 3.0 for which I am sorry. I also apologize for such a long PR, I didn't have time to write a short one. I wish you happy code review. When you see 78 commits, 11 files, and 500+ lines changed – you know that's just the right size /s
Given the scope, I'd wait for at least three two sign-offs on this before merging.
Background
We're not the first ones, and the issue probably ultimately stems from undoubtedly high quality of OpenSSL documentation, but nevertheless. See these issues:

openssl/openssl#11990
openssl/openssl#11549

Soter makes the same mistake. Thrice.
Impact
The code changes may affect the following systems:

key generation (both EC and RSA)
Secure Message in sign/verify mode (ditto)
Secure Message in encrypt mode (EC only)

But actually this should be a change with no functional impact.
OpenSSL 1.1.1 and OpenSSL 1.0.2 operation is unaffected. (CI does not check OpenSSL 1.0.2 but I can confirm that Soter & Themis Core test suites pass with it.)
With OpenSSL 3.0 the test failure rate improves a bit.
Soter test suite:
-==> 250 check(s) in 17 suite(s) finished after 1.00 second(s),
-    245 succeeded, 5 failed (2.00%)
+==> 269 check(s) in 17 suite(s) finished after 2.00 second(s),
+    267 succeeded, 2 failed (0.74%)
Themis Core test suite:
-==> 190 check(s) in 15 suite(s) finished after 4.00 second(s),
-    171 succeeded, 19 failed (10.00%)
+==> 242 check(s) in 15 suite(s) finished after 4.00 second(s),
+    232 succeeded, 10 failed (4.13%)
Additional notes
Properly using OpenSSL API for EC key generation appears to trigger #657 on CI with legacy Node.js 8.x. I have applied the suggested workaround (switch to BoringSSL).
Future work
This PR fixes one instance, on the code paths that affect sign/verify mode of Secure Message. The tests still fail with OpenSSL 3.0 as the key agreement code paths need to be corrected in the same manner, but I don't have enough spoons to do that now (and you probably don't want to get 40 more commits here).
Additionally, it would probably be nice to port all this to BoringSSL code as well, but it seems that it's currently more lenient, like OpenSSL 1.1.1 is.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","I think that's would be busywork for a change that is supposed go into master “soon”.

Ok, I understand your point, makes sense. I'll talk to @shad to see what's the best way of testing from CI perspective. I'm sure we can test latest master vs latest stable.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,875,2021-11-06T13:32:34Z,2021-11-22T13:20:07Z,2021-11-22T13:29:16Z,MERGED,True,303,206,11,https://github.com/ilammy,soter: Fix misuse of OpenSSL API for EC key generation (and more),78,"['core', 'C-OpenSSL', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/875,https://github.com/vixentael,6,https://github.com/cossacklabs/themis/pull/875#issuecomment-970395319,"Turns out, Soter generates EC keys incorrectly, by misusing OpenSSL API. It somehow works out for OpenSSL 1.1.1 (and earlier), but in OpenSSL 3.0 this fails. This ginormous PR improves the situation a bit by using proper key generation sequence which allows Secure Message sign/verify mode to work with OpenSSL 3.0. Collateral damage includes some extra checks and cleanups along the way.
This change was made in an autistic fit of spite against OpenSSL 3.0 for which I am sorry. I also apologize for such a long PR, I didn't have time to write a short one. I wish you happy code review. When you see 78 commits, 11 files, and 500+ lines changed – you know that's just the right size /s
Given the scope, I'd wait for at least three two sign-offs on this before merging.
Background
We're not the first ones, and the issue probably ultimately stems from undoubtedly high quality of OpenSSL documentation, but nevertheless. See these issues:

openssl/openssl#11990
openssl/openssl#11549

Soter makes the same mistake. Thrice.
Impact
The code changes may affect the following systems:

key generation (both EC and RSA)
Secure Message in sign/verify mode (ditto)
Secure Message in encrypt mode (EC only)

But actually this should be a change with no functional impact.
OpenSSL 1.1.1 and OpenSSL 1.0.2 operation is unaffected. (CI does not check OpenSSL 1.0.2 but I can confirm that Soter & Themis Core test suites pass with it.)
With OpenSSL 3.0 the test failure rate improves a bit.
Soter test suite:
-==> 250 check(s) in 17 suite(s) finished after 1.00 second(s),
-    245 succeeded, 5 failed (2.00%)
+==> 269 check(s) in 17 suite(s) finished after 2.00 second(s),
+    267 succeeded, 2 failed (0.74%)
Themis Core test suite:
-==> 190 check(s) in 15 suite(s) finished after 4.00 second(s),
-    171 succeeded, 19 failed (10.00%)
+==> 242 check(s) in 15 suite(s) finished after 4.00 second(s),
+    232 succeeded, 10 failed (4.13%)
Additional notes
Properly using OpenSSL API for EC key generation appears to trigger #657 on CI with legacy Node.js 8.x. I have applied the suggested workaround (switch to BoringSSL).
Future work
This PR fixes one instance, on the code paths that affect sign/verify mode of Secure Message. The tests still fail with OpenSSL 3.0 as the key agreement code paths need to be corrected in the same manner, but I don't have enough spoons to do that now (and you probably don't want to get 40 more commits here).
Additionally, it would probably be nice to port all this to BoringSSL code as well, but it seems that it's currently more lenient, like OpenSSL 1.1.1 is.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",@ilammy do you think these changes should be part of 0.14.0?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,875,2021-11-06T13:32:34Z,2021-11-22T13:20:07Z,2021-11-22T13:29:16Z,MERGED,True,303,206,11,https://github.com/ilammy,soter: Fix misuse of OpenSSL API for EC key generation (and more),78,"['core', 'C-OpenSSL', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/875,https://github.com/ilammy,7,https://github.com/cossacklabs/themis/pull/875#issuecomment-970954016,"Turns out, Soter generates EC keys incorrectly, by misusing OpenSSL API. It somehow works out for OpenSSL 1.1.1 (and earlier), but in OpenSSL 3.0 this fails. This ginormous PR improves the situation a bit by using proper key generation sequence which allows Secure Message sign/verify mode to work with OpenSSL 3.0. Collateral damage includes some extra checks and cleanups along the way.
This change was made in an autistic fit of spite against OpenSSL 3.0 for which I am sorry. I also apologize for such a long PR, I didn't have time to write a short one. I wish you happy code review. When you see 78 commits, 11 files, and 500+ lines changed – you know that's just the right size /s
Given the scope, I'd wait for at least three two sign-offs on this before merging.
Background
We're not the first ones, and the issue probably ultimately stems from undoubtedly high quality of OpenSSL documentation, but nevertheless. See these issues:

openssl/openssl#11990
openssl/openssl#11549

Soter makes the same mistake. Thrice.
Impact
The code changes may affect the following systems:

key generation (both EC and RSA)
Secure Message in sign/verify mode (ditto)
Secure Message in encrypt mode (EC only)

But actually this should be a change with no functional impact.
OpenSSL 1.1.1 and OpenSSL 1.0.2 operation is unaffected. (CI does not check OpenSSL 1.0.2 but I can confirm that Soter & Themis Core test suites pass with it.)
With OpenSSL 3.0 the test failure rate improves a bit.
Soter test suite:
-==> 250 check(s) in 17 suite(s) finished after 1.00 second(s),
-    245 succeeded, 5 failed (2.00%)
+==> 269 check(s) in 17 suite(s) finished after 2.00 second(s),
+    267 succeeded, 2 failed (0.74%)
Themis Core test suite:
-==> 190 check(s) in 15 suite(s) finished after 4.00 second(s),
-    171 succeeded, 19 failed (10.00%)
+==> 242 check(s) in 15 suite(s) finished after 4.00 second(s),
+    232 succeeded, 10 failed (4.13%)
Additional notes
Properly using OpenSSL API for EC key generation appears to trigger #657 on CI with legacy Node.js 8.x. I have applied the suggested workaround (switch to BoringSSL).
Future work
This PR fixes one instance, on the code paths that affect sign/verify mode of Secure Message. The tests still fail with OpenSSL 3.0 as the key agreement code paths need to be corrected in the same manner, but I don't have enough spoons to do that now (and you probably don't want to get 40 more commits here).
Additionally, it would probably be nice to port all this to BoringSSL code as well, but it seems that it's currently more lenient, like OpenSSL 1.1.1 is.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","do you think these changes should be part of 0.14.0?

Pretty much. I don't see a downside – if the changes work – and I don't see an upside either from delaying the merge. OpenSSL 3.0 will still remain unsupported, but it will be not supported better. OpenSSL 1.1.1 gets some more error checks. Win-win, IMO.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,875,2021-11-06T13:32:34Z,2021-11-22T13:20:07Z,2021-11-22T13:29:16Z,MERGED,True,303,206,11,https://github.com/ilammy,soter: Fix misuse of OpenSSL API for EC key generation (and more),78,"['core', 'C-OpenSSL', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/875,https://github.com/ilammy,8,https://github.com/cossacklabs/themis/pull/875#issuecomment-970966131,"Turns out, Soter generates EC keys incorrectly, by misusing OpenSSL API. It somehow works out for OpenSSL 1.1.1 (and earlier), but in OpenSSL 3.0 this fails. This ginormous PR improves the situation a bit by using proper key generation sequence which allows Secure Message sign/verify mode to work with OpenSSL 3.0. Collateral damage includes some extra checks and cleanups along the way.
This change was made in an autistic fit of spite against OpenSSL 3.0 for which I am sorry. I also apologize for such a long PR, I didn't have time to write a short one. I wish you happy code review. When you see 78 commits, 11 files, and 500+ lines changed – you know that's just the right size /s
Given the scope, I'd wait for at least three two sign-offs on this before merging.
Background
We're not the first ones, and the issue probably ultimately stems from undoubtedly high quality of OpenSSL documentation, but nevertheless. See these issues:

openssl/openssl#11990
openssl/openssl#11549

Soter makes the same mistake. Thrice.
Impact
The code changes may affect the following systems:

key generation (both EC and RSA)
Secure Message in sign/verify mode (ditto)
Secure Message in encrypt mode (EC only)

But actually this should be a change with no functional impact.
OpenSSL 1.1.1 and OpenSSL 1.0.2 operation is unaffected. (CI does not check OpenSSL 1.0.2 but I can confirm that Soter & Themis Core test suites pass with it.)
With OpenSSL 3.0 the test failure rate improves a bit.
Soter test suite:
-==> 250 check(s) in 17 suite(s) finished after 1.00 second(s),
-    245 succeeded, 5 failed (2.00%)
+==> 269 check(s) in 17 suite(s) finished after 2.00 second(s),
+    267 succeeded, 2 failed (0.74%)
Themis Core test suite:
-==> 190 check(s) in 15 suite(s) finished after 4.00 second(s),
-    171 succeeded, 19 failed (10.00%)
+==> 242 check(s) in 15 suite(s) finished after 4.00 second(s),
+    232 succeeded, 10 failed (4.13%)
Additional notes
Properly using OpenSSL API for EC key generation appears to trigger #657 on CI with legacy Node.js 8.x. I have applied the suggested workaround (switch to BoringSSL).
Future work
This PR fixes one instance, on the code paths that affect sign/verify mode of Secure Message. The tests still fail with OpenSSL 3.0 as the key agreement code paths need to be corrected in the same manner, but I don't have enough spoons to do that now (and you probably don't want to get 40 more commits here).
Additionally, it would probably be nice to port all this to BoringSSL code as well, but it seems that it's currently more lenient, like OpenSSL 1.1.1 is.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","FYI, there's now the openssl-3.0 branch based off master, with push protection and stuff, with this changeset currently targeting it. There is also openssl-3.0-build branch that mirrors the state of the last PR of the changeset, basically what you'd get when all of this is merged.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,876,2021-11-13T01:36:54Z,2021-11-22T13:43:59Z,2021-11-22T13:44:32Z,MERGED,True,121,104,4,https://github.com/ilammy,soter: Fix misuse of OpenSSL API for EC key agreement,18,"['core', 'C-OpenSSL', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/876,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/876,"And again, Soter makes the same mistake of using EVP_PKEY_CTX as a container for EVP_PKEY with unspecified role and retaining this context. In fact, soter_asym_ka_t deals with three separate operations each of which requires different contexts:

EC parameter generation (input: curve, output: parameters).
EC keypair generation (input: parameters, output: keypair).
Shared secret derivation (input: keypair, peer public key, output: shared secret).

And all of these need separate contexts, not just one being reused. Previous incorrect code worked with OpenSSL 1.1.1 and before by accident, but with OpenSSL 3.0 this fails. We need to do things correctly now.
This change is stacked on top of #875. Same as before, I'd like at least two approvals.
Background
See #875, this is basically the same change but to key agreement code path, the one used by Secure Message in encrypt/decrypt mode to derive a shared secret for encryption with EC keys, as well as Secure Session deriving session secret during negotiation phase.
Impact
Like in #875, Secure Message and Secure Session might be affected, but no functional changes are expected.
The builds are fine with OpenSSL 1.0.2, 1.1.1, 3.0.
Unit test suite now passes with flying colors against OpenSSL 3.0.
Additional notes
Changing the layout of private struct soter_asym_ka_t uncovered an issue with CI setup that likely used OpenSSL code paths while testing BoringSSL builds. This has been corrected. It's purely a CI issue, the BoringSSL packaging builds Themis with BoringSSL correctly.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated
 #875 is merged and this PR is rebased","And again, Soter makes the same mistake of using EVP_PKEY_CTX as a container for EVP_PKEY with unspecified role and retaining this context. In fact, soter_asym_ka_t deals with three separate operations each of which requires different contexts:

EC parameter generation (input: curve, output: parameters).
EC keypair generation (input: parameters, output: keypair).
Shared secret derivation (input: keypair, peer public key, output: shared secret).

And all of these need separate contexts, not just one being reused. Previous incorrect code worked with OpenSSL 1.1.1 and before by accident, but with OpenSSL 3.0 this fails. We need to do things correctly now.
This change is stacked on top of #875. Same as before, I'd like at least two approvals.
Background
See #875, this is basically the same change but to key agreement code path, the one used by Secure Message in encrypt/decrypt mode to derive a shared secret for encryption with EC keys, as well as Secure Session deriving session secret during negotiation phase.
Impact
Like in #875, Secure Message and Secure Session might be affected, but no functional changes are expected.
The builds are fine with OpenSSL 1.0.2, 1.1.1, 3.0.
Unit test suite now passes with flying colors against OpenSSL 3.0.
Additional notes
Changing the layout of private struct soter_asym_ka_t uncovered an issue with CI setup that likely used OpenSSL code paths while testing BoringSSL builds. This has been corrected. It's purely a CI issue, the BoringSSL packaging builds Themis with BoringSSL correctly.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated
 #875 is merged and this PR is rebased",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,876,2021-11-13T01:36:54Z,2021-11-22T13:43:59Z,2021-11-22T13:44:32Z,MERGED,True,121,104,4,https://github.com/ilammy,soter: Fix misuse of OpenSSL API for EC key agreement,18,"['core', 'C-OpenSSL', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/876,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/876#issuecomment-968964426,"And again, Soter makes the same mistake of using EVP_PKEY_CTX as a container for EVP_PKEY with unspecified role and retaining this context. In fact, soter_asym_ka_t deals with three separate operations each of which requires different contexts:

EC parameter generation (input: curve, output: parameters).
EC keypair generation (input: parameters, output: keypair).
Shared secret derivation (input: keypair, peer public key, output: shared secret).

And all of these need separate contexts, not just one being reused. Previous incorrect code worked with OpenSSL 1.1.1 and before by accident, but with OpenSSL 3.0 this fails. We need to do things correctly now.
This change is stacked on top of #875. Same as before, I'd like at least two approvals.
Background
See #875, this is basically the same change but to key agreement code path, the one used by Secure Message in encrypt/decrypt mode to derive a shared secret for encryption with EC keys, as well as Secure Session deriving session secret during negotiation phase.
Impact
Like in #875, Secure Message and Secure Session might be affected, but no functional changes are expected.
The builds are fine with OpenSSL 1.0.2, 1.1.1, 3.0.
Unit test suite now passes with flying colors against OpenSSL 3.0.
Additional notes
Changing the layout of private struct soter_asym_ka_t uncovered an issue with CI setup that likely used OpenSSL code paths while testing BoringSSL builds. This has been corrected. It's purely a CI issue, the BoringSSL packaging builds Themis with BoringSSL correctly.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated
 #875 is merged and this PR is rebased",All tests are green! ✅,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,876,2021-11-13T01:36:54Z,2021-11-22T13:43:59Z,2021-11-22T13:44:32Z,MERGED,True,121,104,4,https://github.com/ilammy,soter: Fix misuse of OpenSSL API for EC key agreement,18,"['core', 'C-OpenSSL', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/876,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/876#issuecomment-968964638,"And again, Soter makes the same mistake of using EVP_PKEY_CTX as a container for EVP_PKEY with unspecified role and retaining this context. In fact, soter_asym_ka_t deals with three separate operations each of which requires different contexts:

EC parameter generation (input: curve, output: parameters).
EC keypair generation (input: parameters, output: keypair).
Shared secret derivation (input: keypair, peer public key, output: shared secret).

And all of these need separate contexts, not just one being reused. Previous incorrect code worked with OpenSSL 1.1.1 and before by accident, but with OpenSSL 3.0 this fails. We need to do things correctly now.
This change is stacked on top of #875. Same as before, I'd like at least two approvals.
Background
See #875, this is basically the same change but to key agreement code path, the one used by Secure Message in encrypt/decrypt mode to derive a shared secret for encryption with EC keys, as well as Secure Session deriving session secret during negotiation phase.
Impact
Like in #875, Secure Message and Secure Session might be affected, but no functional changes are expected.
The builds are fine with OpenSSL 1.0.2, 1.1.1, 3.0.
Unit test suite now passes with flying colors against OpenSSL 3.0.
Additional notes
Changing the layout of private struct soter_asym_ka_t uncovered an issue with CI setup that likely used OpenSSL code paths while testing BoringSSL builds. This has been corrected. It's purely a CI issue, the BoringSSL packaging builds Themis with BoringSSL correctly.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated
 #875 is merged and this PR is rebased",@ignatk we'd really appreciate if you could take a look,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,876,2021-11-13T01:36:54Z,2021-11-22T13:43:59Z,2021-11-22T13:44:32Z,MERGED,True,121,104,4,https://github.com/ilammy,soter: Fix misuse of OpenSSL API for EC key agreement,18,"['core', 'C-OpenSSL', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/876,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/876#issuecomment-975517110,"And again, Soter makes the same mistake of using EVP_PKEY_CTX as a container for EVP_PKEY with unspecified role and retaining this context. In fact, soter_asym_ka_t deals with three separate operations each of which requires different contexts:

EC parameter generation (input: curve, output: parameters).
EC keypair generation (input: parameters, output: keypair).
Shared secret derivation (input: keypair, peer public key, output: shared secret).

And all of these need separate contexts, not just one being reused. Previous incorrect code worked with OpenSSL 1.1.1 and before by accident, but with OpenSSL 3.0 this fails. We need to do things correctly now.
This change is stacked on top of #875. Same as before, I'd like at least two approvals.
Background
See #875, this is basically the same change but to key agreement code path, the one used by Secure Message in encrypt/decrypt mode to derive a shared secret for encryption with EC keys, as well as Secure Session deriving session secret during negotiation phase.
Impact
Like in #875, Secure Message and Secure Session might be affected, but no functional changes are expected.
The builds are fine with OpenSSL 1.0.2, 1.1.1, 3.0.
Unit test suite now passes with flying colors against OpenSSL 3.0.
Additional notes
Changing the layout of private struct soter_asym_ka_t uncovered an issue with CI setup that likely used OpenSSL code paths while testing BoringSSL builds. This has been corrected. It's purely a CI issue, the BoringSSL packaging builds Themis with BoringSSL correctly.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated
 #875 is merged and this PR is rebased",Rebased onto openssl-3.0 with no changes.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,877,2021-11-13T01:40:52Z,2021-11-22T13:58:23Z,2021-11-22T13:58:29Z,MERGED,True,26,1,1,https://github.com/ilammy,CI: Test Themis with OpenSSL 3.0,2,"['infrastructure', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/877,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/877,"With #875 and #876, Soter and Themis test suites should now pass for OpenSSL 3.0.
Let's test OpenSSL 3.0 builds where we can, making sure that they work. Note that OpenSSL 3.0 support is still experimental and requires special setup. Also, we still use deprecated APIs. In order to make the builds green, stop treating warnings as errors, but don't suppress them. Sometime they need to be fixed, not stay like that forever.
While Themis can be built with OpenSSL 3.0 and apparently passes all the unit tests, it's still not fully supported. We don't know how compatible OpenSSL 1.1.1 is with OpenSSL 3.0 (or rather, how compatible is Themis use of them). Similarly, we have no provisions for building Themis packages linked against a specific version of OpenSSL.
Currently, only macOS provides a sort of a system installation of OpenSSL 3.0. While we could build OpenSSL 3.0 on Linux for testing, I don't think we should be testing non-system setups extensively. Verifying this on macOS alone is good enough for the time being.
Checklist

 Change is covered by automated tests (duh...)
 The coding guidelines are followed
 Changelog is updated (no need, ninja change)
 #875 and #876 are merged and this PR is rebased","With #875 and #876, Soter and Themis test suites should now pass for OpenSSL 3.0.
Let's test OpenSSL 3.0 builds where we can, making sure that they work. Note that OpenSSL 3.0 support is still experimental and requires special setup. Also, we still use deprecated APIs. In order to make the builds green, stop treating warnings as errors, but don't suppress them. Sometime they need to be fixed, not stay like that forever.
While Themis can be built with OpenSSL 3.0 and apparently passes all the unit tests, it's still not fully supported. We don't know how compatible OpenSSL 1.1.1 is with OpenSSL 3.0 (or rather, how compatible is Themis use of them). Similarly, we have no provisions for building Themis packages linked against a specific version of OpenSSL.
Currently, only macOS provides a sort of a system installation of OpenSSL 3.0. While we could build OpenSSL 3.0 on Linux for testing, I don't think we should be testing non-system setups extensively. Verifying this on macOS alone is good enough for the time being.
Checklist

 Change is covered by automated tests (duh...)
 The coding guidelines are followed
 Changelog is updated (no need, ninja change)
 #875 and #876 are merged and this PR is rebased",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,877,2021-11-13T01:40:52Z,2021-11-22T13:58:23Z,2021-11-22T13:58:29Z,MERGED,True,26,1,1,https://github.com/ilammy,CI: Test Themis with OpenSSL 3.0,2,"['infrastructure', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/877,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/877#issuecomment-968963518,"With #875 and #876, Soter and Themis test suites should now pass for OpenSSL 3.0.
Let's test OpenSSL 3.0 builds where we can, making sure that they work. Note that OpenSSL 3.0 support is still experimental and requires special setup. Also, we still use deprecated APIs. In order to make the builds green, stop treating warnings as errors, but don't suppress them. Sometime they need to be fixed, not stay like that forever.
While Themis can be built with OpenSSL 3.0 and apparently passes all the unit tests, it's still not fully supported. We don't know how compatible OpenSSL 1.1.1 is with OpenSSL 3.0 (or rather, how compatible is Themis use of them). Similarly, we have no provisions for building Themis packages linked against a specific version of OpenSSL.
Currently, only macOS provides a sort of a system installation of OpenSSL 3.0. While we could build OpenSSL 3.0 on Linux for testing, I don't think we should be testing non-system setups extensively. Verifying this on macOS alone is good enough for the time being.
Checklist

 Change is covered by automated tests (duh...)
 The coding guidelines are followed
 Changelog is updated (no need, ninja change)
 #875 and #876 are merged and this PR is rebased","Sometime they need to be fixed, not stay like that forever.

Sure :)))))",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,877,2021-11-13T01:40:52Z,2021-11-22T13:58:23Z,2021-11-22T13:58:29Z,MERGED,True,26,1,1,https://github.com/ilammy,CI: Test Themis with OpenSSL 3.0,2,"['infrastructure', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/877,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/877#issuecomment-975540920,"With #875 and #876, Soter and Themis test suites should now pass for OpenSSL 3.0.
Let's test OpenSSL 3.0 builds where we can, making sure that they work. Note that OpenSSL 3.0 support is still experimental and requires special setup. Also, we still use deprecated APIs. In order to make the builds green, stop treating warnings as errors, but don't suppress them. Sometime they need to be fixed, not stay like that forever.
While Themis can be built with OpenSSL 3.0 and apparently passes all the unit tests, it's still not fully supported. We don't know how compatible OpenSSL 1.1.1 is with OpenSSL 3.0 (or rather, how compatible is Themis use of them). Similarly, we have no provisions for building Themis packages linked against a specific version of OpenSSL.
Currently, only macOS provides a sort of a system installation of OpenSSL 3.0. While we could build OpenSSL 3.0 on Linux for testing, I don't think we should be testing non-system setups extensively. Verifying this on macOS alone is good enough for the time being.
Checklist

 Change is covered by automated tests (duh...)
 The coding guidelines are followed
 Changelog is updated (no need, ninja change)
 #875 and #876 are merged and this PR is rebased",Rebased onto openssl-3.0 with no changes.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,878,2021-11-22T14:13:26Z,2021-11-22T14:26:37Z,2021-11-22T15:00:21Z,MERGED,True,4,4,3,https://github.com/ilammy,Unify minor versions across wrappers,2,"['W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'W-WasmThemis :globe_with_meridians:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/878,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/878,"WasmThemis version got pushed over to 0.14 in anticipation of the next release which never came on time. And now the internal CI tooling demands version to be 0.13.XX across all wrappers because reasons. Do so then. The previously released version is 0.13.1, use the next one.
Similarly, I have no clue how it turned out that some targets in Themis.xcodeproj use 0.13.8 and some use 0.13.12 but this confuses internal tooling that expects consistent version across all targets. Use the latest one then.
Checklist

 Change is covered by automated tests
 Changelog is updated (not a release)","WasmThemis version got pushed over to 0.14 in anticipation of the next release which never came on time. And now the internal CI tooling demands version to be 0.13.XX across all wrappers because reasons. Do so then. The previously released version is 0.13.1, use the next one.
Similarly, I have no clue how it turned out that some targets in Themis.xcodeproj use 0.13.8 and some use 0.13.12 but this confuses internal tooling that expects consistent version across all targets. Use the latest one then.
Checklist

 Change is covered by automated tests
 Changelog is updated (not a release)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,878,2021-11-22T14:13:26Z,2021-11-22T14:26:37Z,2021-11-22T15:00:21Z,MERGED,True,4,4,3,https://github.com/ilammy,Unify minor versions across wrappers,2,"['W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'W-WasmThemis :globe_with_meridians:', 'W-ObjCThemis :art:']",https://github.com/cossacklabs/themis/pull/878,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/878#issuecomment-975614627,"WasmThemis version got pushed over to 0.14 in anticipation of the next release which never came on time. And now the internal CI tooling demands version to be 0.13.XX across all wrappers because reasons. Do so then. The previously released version is 0.13.1, use the next one.
Similarly, I have no clue how it turned out that some targets in Themis.xcodeproj use 0.13.8 and some use 0.13.12 but this confuses internal tooling that expects consistent version across all targets. Use the latest one then.
Checklist

 Change is covered by automated tests
 Changelog is updated (not a release)","""The princess is happy""",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,879,2021-11-24T12:05:02Z,2021-11-24T12:32:43Z,2021-11-24T12:32:46Z,MERGED,True,26,12,5,https://github.com/ilammy,Check Emscripten toolchain version for WasmThemis,5,"['infrastructure', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/879,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/879,"Recently we have ran into some issues with building WasmThemis because of Emscripten toolchain mismatch. It seems WasmThemis is pretty heavily dependent on the Emscripten version and might fail to build with anything but the currently supported one. Let's make this official then.
src/wrappers/themis/wasm/emscripten/VERSION file now contains the Emscripten SDK version that's supposed to be used to build WasmThemis. CI can fetch it from there to install the right version. I've taught GitHub Actions to do this. @shadinua, please take care of BuildBot 🙏
Additionally, make wasmthemis command now verifies that current Emscripten version matches the one in the version file and fails the build if they don't agree. There is no escape hatch. Wanna try a different version – edit the VERSION file.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Recently we have ran into some issues with building WasmThemis because of Emscripten toolchain mismatch. It seems WasmThemis is pretty heavily dependent on the Emscripten version and might fail to build with anything but the currently supported one. Let's make this official then.
src/wrappers/themis/wasm/emscripten/VERSION file now contains the Emscripten SDK version that's supposed to be used to build WasmThemis. CI can fetch it from there to install the right version. I've taught GitHub Actions to do this. @shadinua, please take care of BuildBot 🙏
Additionally, make wasmthemis command now verifies that current Emscripten version matches the one in the version file and fails the build if they don't agree. There is no escape hatch. Wanna try a different version – edit the VERSION file.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,880,2021-11-24T13:24:44Z,2021-11-24T23:15:51Z,2021-11-24T23:15:55Z,MERGED,True,10,5,5,https://github.com/ilammy,wasm: Upgrade Emscripten 2.0.13 => 3.0.0,7,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/880,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/880,"All the way to the current latest version.

Interesting changes


Clang now performs loop unrolling when targeting WebAssembly at -O2 and higher. It can be disabled using -fno-unroll-loops.


Use LLVM's new pass manager by default, as LLVM does. This changes a bunch of things about how LLVM optimizes and inlines, so it may cause noticeable changes in compile times, code size, and speed, either for better or for worse.


When building with -s MAIN_MODULE emscripten will now error on undefined symbol by default. This matches the behvious of clang/gcc/msvc. This requires that your side modules be present on the command line. If you do not specify your side modules on the command line (either direcly or via RUNTIME_LINKED_LIBS) you may need to add -s WARN_ON_UNDEFINED_SYMBOLS=0 to avoid errors about symbol that are missing at link time (but present in your side modules provided at runtime). We hope that this case is not common and most users are building with side modules listed on the command line.


The WebAssembly linker (wasm-ld) now performes string tail merging on any static string data in your program.


wasm-ld will now perform string tail merging in debug string sections as well as regular data sections.


Symbols marked as visibility hidden are no longer exported from C/C++ code when building with SIDE_MODULE, MAIN_MODULE or LINKABLE. If you need to export a hidden symbol you can still do so by adding it to EXPORTED_FUNCTIONS.


Drop support for node versions older than v5.10.0. We now assume the existence of Buffer.from which was added in v5.10.0.


libcxxabi updated to llvm-12.


libcxx updated to llvm-12.


The version of musl libc used by emscripten was upgraded from v1.1.15 to v1.2.2. There could be some minor size regressions (or gains) due to changes in upstream musl code but we don't expect anything major. Since this is a fairly substantial change (at least internally) we are bumping the major version of Emscripten to 3.



Despite all this, the linker issues persist, so there's another workaround to keep the libthemis.wasm binary usable.
Also, update provisional version of WasmThemis to 0.13.13. I should have done this in #878, but I somehow missed that 0.13.11 has been already released for WasmThemis.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","All the way to the current latest version.

Interesting changes


Clang now performs loop unrolling when targeting WebAssembly at -O2 and higher. It can be disabled using -fno-unroll-loops.


Use LLVM's new pass manager by default, as LLVM does. This changes a bunch of things about how LLVM optimizes and inlines, so it may cause noticeable changes in compile times, code size, and speed, either for better or for worse.


When building with -s MAIN_MODULE emscripten will now error on undefined symbol by default. This matches the behvious of clang/gcc/msvc. This requires that your side modules be present on the command line. If you do not specify your side modules on the command line (either direcly or via RUNTIME_LINKED_LIBS) you may need to add -s WARN_ON_UNDEFINED_SYMBOLS=0 to avoid errors about symbol that are missing at link time (but present in your side modules provided at runtime). We hope that this case is not common and most users are building with side modules listed on the command line.


The WebAssembly linker (wasm-ld) now performes string tail merging on any static string data in your program.


wasm-ld will now perform string tail merging in debug string sections as well as regular data sections.


Symbols marked as visibility hidden are no longer exported from C/C++ code when building with SIDE_MODULE, MAIN_MODULE or LINKABLE. If you need to export a hidden symbol you can still do so by adding it to EXPORTED_FUNCTIONS.


Drop support for node versions older than v5.10.0. We now assume the existence of Buffer.from which was added in v5.10.0.


libcxxabi updated to llvm-12.


libcxx updated to llvm-12.


The version of musl libc used by emscripten was upgraded from v1.1.15 to v1.2.2. There could be some minor size regressions (or gains) due to changes in upstream musl code but we don't expect anything major. Since this is a fairly substantial change (at least internally) we are bumping the major version of Emscripten to 3.



Despite all this, the linker issues persist, so there's another workaround to keep the libthemis.wasm binary usable.
Also, update provisional version of WasmThemis to 0.13.13. I should have done this in #878, but I somehow missed that 0.13.11 has been already released for WasmThemis.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,881,2021-11-25T12:24:25Z,2021-11-25T12:38:58Z,2021-11-25T12:39:02Z,MERGED,True,33,17,8,https://github.com/ilammy,GoThemis: Module-aware tests,12,"['W-GoThemis :hamster:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/881,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/881,"Some time ago GoThemis unit tests were migrated to module-aware approach (#843) because Go 1.16 is module-aware by default. However, other tests – code examples and integration tests – have been left as is, requiring GoThemis to be installed in GOPATH and starting with Go 1.16 needing GO111MODULE=off.
Update these tests to be module-aware as well, adding go.mod files where necessary. Test modules use the replace feature to use the locally checked out GoThemis instead of fetching it from GitHub. Code examples are relatively easy to do, but integration tests are pretty heavily tied to the notion that they execute ""scripts"". With GOPATH it was possible to run test tools like scripts with go run, but now we can't do that from the repo root directory. Thus, GoThemis tools migrate to the approach used by RustThemis – precompiled binaries.
With this, instead of copying GoThemis into ~/go/src you can run examples from docs/examples/go directory. In order to run integration tests you first need to compile the tools with
make gothemis_integration_tools

Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date
 Changelog is updated (don't need it, I guess?)","Some time ago GoThemis unit tests were migrated to module-aware approach (#843) because Go 1.16 is module-aware by default. However, other tests – code examples and integration tests – have been left as is, requiring GoThemis to be installed in GOPATH and starting with Go 1.16 needing GO111MODULE=off.
Update these tests to be module-aware as well, adding go.mod files where necessary. Test modules use the replace feature to use the locally checked out GoThemis instead of fetching it from GitHub. Code examples are relatively easy to do, but integration tests are pretty heavily tied to the notion that they execute ""scripts"". With GOPATH it was possible to run test tools like scripts with go run, but now we can't do that from the repo root directory. Thus, GoThemis tools migrate to the approach used by RustThemis – precompiled binaries.
With this, instead of copying GoThemis into ~/go/src you can run examples from docs/examples/go directory. In order to run integration tests you first need to compile the tools with
make gothemis_integration_tools

Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date
 Changelog is updated (don't need it, I guess?)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,881,2021-11-25T12:24:25Z,2021-11-25T12:38:58Z,2021-11-25T12:39:02Z,MERGED,True,33,17,8,https://github.com/ilammy,GoThemis: Module-aware tests,12,"['W-GoThemis :hamster:', 'infrastructure']",https://github.com/cossacklabs/themis/pull/881,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/881#issuecomment-979172357,"Some time ago GoThemis unit tests were migrated to module-aware approach (#843) because Go 1.16 is module-aware by default. However, other tests – code examples and integration tests – have been left as is, requiring GoThemis to be installed in GOPATH and starting with Go 1.16 needing GO111MODULE=off.
Update these tests to be module-aware as well, adding go.mod files where necessary. Test modules use the replace feature to use the locally checked out GoThemis instead of fetching it from GitHub. Code examples are relatively easy to do, but integration tests are pretty heavily tied to the notion that they execute ""scripts"". With GOPATH it was possible to run test tools like scripts with go run, but now we can't do that from the repo root directory. Thus, GoThemis tools migrate to the approach used by RustThemis – precompiled binaries.
With this, instead of copying GoThemis into ~/go/src you can run examples from docs/examples/go directory. In order to run integration tests you first need to compile the tools with
make gothemis_integration_tools

Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date
 Changelog is updated (don't need it, I guess?)",bloody magic,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,882,2021-12-02T23:56:53Z,2021-12-03T14:13:29Z,2021-12-03T14:14:52Z,MERGED,True,449,310,13,https://github.com/ilammy,Improve OpenSSL 3.0 compatibility,3,"['core', 'infrastructure', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/882,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/882,"Pull in the updates, YOLO.
If that does not work, man git-revert on “How to revert a faulty merge”.
Make sure to merge this with a merge commit, not squash. Also, apparently we'd need to disable the linear history thing in branch protection to actually allow merge commits.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (people say OpenSSL 3.0 is slower, but here we don't care)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (still using whatever they were using)
 Changelog is updated (ninja change)","Pull in the updates, YOLO.
If that does not work, man git-revert on “How to revert a faulty merge”.
Make sure to merge this with a merge commit, not squash. Also, apparently we'd need to disable the linear history thing in branch protection to actually allow merge commits.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (people say OpenSSL 3.0 is slower, but here we don't care)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (still using whatever they were using)
 Changelog is updated (ninja change)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,882,2021-12-02T23:56:53Z,2021-12-03T14:13:29Z,2021-12-03T14:14:52Z,MERGED,True,449,310,13,https://github.com/ilammy,Improve OpenSSL 3.0 compatibility,3,"['core', 'infrastructure', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/882,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/882#issuecomment-985411888,"Pull in the updates, YOLO.
If that does not work, man git-revert on “How to revert a faulty merge”.
Make sure to merge this with a merge commit, not squash. Also, apparently we'd need to disable the linear history thing in branch protection to actually allow merge commits.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (people say OpenSSL 3.0 is slower, but here we don't care)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (still using whatever they were using)
 Changelog is updated (ninja change)","github says that ""This branch is out-of-date with the base branch"" – i wonder if we add master into this branch, wouldn't it ruin the possible revert procedures later 🤔",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,882,2021-12-02T23:56:53Z,2021-12-03T14:13:29Z,2021-12-03T14:14:52Z,MERGED,True,449,310,13,https://github.com/ilammy,Improve OpenSSL 3.0 compatibility,3,"['core', 'infrastructure', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/882,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/882#issuecomment-985412494,"Pull in the updates, YOLO.
If that does not work, man git-revert on “How to revert a faulty merge”.
Make sure to merge this with a merge commit, not squash. Also, apparently we'd need to disable the linear history thing in branch protection to actually allow merge commits.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (people say OpenSSL 3.0 is slower, but here we don't care)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (still using whatever they were using)
 Changelog is updated (ninja change)","Also, apparently we'd need to disable the linear history thing in branch protection to actually allow merge commits.


👌",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,882,2021-12-02T23:56:53Z,2021-12-03T14:13:29Z,2021-12-03T14:14:52Z,MERGED,True,449,310,13,https://github.com/ilammy,Improve OpenSSL 3.0 compatibility,3,"['core', 'infrastructure', 'C-OpenSSL-3.0']",https://github.com/cossacklabs/themis/pull/882,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/882#issuecomment-985552598,"Pull in the updates, YOLO.
If that does not work, man git-revert on “How to revert a faulty merge”.
Make sure to merge this with a merge commit, not squash. Also, apparently we'd need to disable the linear history thing in branch protection to actually allow merge commits.
Checklist

 Change is covered by automated tests
 Benchmark results are attached (people say OpenSSL 3.0 is slower, but here we don't care)
 The coding guidelines are followed
 Example projects and code samples are up-to-date (still using whatever they were using)
 Changelog is updated (ninja change)","github says that ""This branch is out-of-date with the base branch"" – i wonder if we add master into this branch, wouldn't it ruin the possible revert procedures later

I've temporarily disabled that setting too, just for now. And there's one more setting controlling the choice of merge options in GitHub UI.
For future reference, how to do a merge commit via GitHub UI:

Settings | Branches | Branch protection rules

UNCHECK – Require linear history
UNCHECK – Require branches to be up to date before merging


Settings | Options > Merge button

CHECK – Allow merge commits


Refresh the page with PR.
Select Create a merge commit option, press the big green button.
Revert changes to repo settings from items 1 and 2 back to their normal state.

I guess this is fine, true merge commits into master are infrequent occasions.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,883,2021-12-18T03:15:02Z,2021-12-21T11:02:00Z,2021-12-21T11:02:05Z,MERGED,True,99,4134,95,https://github.com/ilammy,Themis 0.14,19,['release'],https://github.com/cossacklabs/themis/pull/883,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/883,"Getting ready for the next release. Let's see how many things I forgot to update this time.
release-0.14-prep branch is in the main repo, feel free to throw in changes there directly.
Checklist

 Change is covered by automated tests
 Changelog is updated
 Versions are updated
 Provisional 0.14.0 tag points to this branch

Published documentation pending review:

 CHANGELOG.md
 README.md
 gothemis/README.md
 src/wrappers/themis/jsthemis/README.md
 src/wrappers/themis/python/README.md
 src/wrappers/themis/rust/README.md
 src/wrappers/themis/rust/libthemis-sys/README.md
 src/wrappers/themis/wasm/README.md

Packaging files that will be updated later:

PKGBUILD.MSYS2 – once we have a stable tag and source tarball
Package.swift – once we have a binary release ready
docs/examples, tools – once release is published","Getting ready for the next release. Let's see how many things I forgot to update this time.
release-0.14-prep branch is in the main repo, feel free to throw in changes there directly.
Checklist

 Change is covered by automated tests
 Changelog is updated
 Versions are updated
 Provisional 0.14.0 tag points to this branch

Published documentation pending review:

 CHANGELOG.md
 README.md
 gothemis/README.md
 src/wrappers/themis/jsthemis/README.md
 src/wrappers/themis/python/README.md
 src/wrappers/themis/rust/README.md
 src/wrappers/themis/rust/libthemis-sys/README.md
 src/wrappers/themis/wasm/README.md

Packaging files that will be updated later:

PKGBUILD.MSYS2 – once we have a stable tag and source tarball
Package.swift – once we have a binary release ready
docs/examples, tools – once release is published",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,883,2021-12-18T03:15:02Z,2021-12-21T11:02:00Z,2021-12-21T11:02:05Z,MERGED,True,99,4134,95,https://github.com/ilammy,Themis 0.14,19,['release'],https://github.com/cossacklabs/themis/pull/883,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/883#issuecomment-997893849,"Getting ready for the next release. Let's see how many things I forgot to update this time.
release-0.14-prep branch is in the main repo, feel free to throw in changes there directly.
Checklist

 Change is covered by automated tests
 Changelog is updated
 Versions are updated
 Provisional 0.14.0 tag points to this branch

Published documentation pending review:

 CHANGELOG.md
 README.md
 gothemis/README.md
 src/wrappers/themis/jsthemis/README.md
 src/wrappers/themis/python/README.md
 src/wrappers/themis/rust/README.md
 src/wrappers/themis/rust/libthemis-sys/README.md
 src/wrappers/themis/wasm/README.md

Packaging files that will be updated later:

PKGBUILD.MSYS2 – once we have a stable tag and source tarball
Package.swift – once we have a binary release ready
docs/examples, tools – once release is published","While rereading changelogs for 0.13, I have noticed that we have one more change to CocoaPods subspecs to make. Don't be too quick to merge this PR, I have one extra thing to add to release/0.14 before this one.",True,{'THUMBS_UP': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,883,2021-12-18T03:15:02Z,2021-12-21T11:02:00Z,2021-12-21T11:02:05Z,MERGED,True,99,4134,95,https://github.com/ilammy,Themis 0.14,19,['release'],https://github.com/cossacklabs/themis/pull/883,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/883#issuecomment-997902867,"Getting ready for the next release. Let's see how many things I forgot to update this time.
release-0.14-prep branch is in the main repo, feel free to throw in changes there directly.
Checklist

 Change is covered by automated tests
 Changelog is updated
 Versions are updated
 Provisional 0.14.0 tag points to this branch

Published documentation pending review:

 CHANGELOG.md
 README.md
 gothemis/README.md
 src/wrappers/themis/jsthemis/README.md
 src/wrappers/themis/python/README.md
 src/wrappers/themis/rust/README.md
 src/wrappers/themis/rust/libthemis-sys/README.md
 src/wrappers/themis/wasm/README.md

Packaging files that will be updated later:

PKGBUILD.MSYS2 – once we have a stable tag and source tarball
Package.swift – once we have a binary release ready
docs/examples, tools – once release is published","Okay, merged in the subspec change and moved the provisional 0.14.0 tag to the updated branch so that podspec validation should actually succeed. Waiting on CI...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,883,2021-12-18T03:15:02Z,2021-12-21T11:02:00Z,2021-12-21T11:02:05Z,MERGED,True,99,4134,95,https://github.com/ilammy,Themis 0.14,19,['release'],https://github.com/cossacklabs/themis/pull/883,https://github.com/vixentael,4,https://github.com/cossacklabs/themis/pull/883#issuecomment-997938613,"Getting ready for the next release. Let's see how many things I forgot to update this time.
release-0.14-prep branch is in the main repo, feel free to throw in changes there directly.
Checklist

 Change is covered by automated tests
 Changelog is updated
 Versions are updated
 Provisional 0.14.0 tag points to this branch

Published documentation pending review:

 CHANGELOG.md
 README.md
 gothemis/README.md
 src/wrappers/themis/jsthemis/README.md
 src/wrappers/themis/python/README.md
 src/wrappers/themis/rust/README.md
 src/wrappers/themis/rust/libthemis-sys/README.md
 src/wrappers/themis/wasm/README.md

Packaging files that will be updated later:

PKGBUILD.MSYS2 – once we have a stable tag and source tarball
Package.swift – once we have a binary release ready
docs/examples, tools – once release is published","haha, we had tests for boringssl!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,883,2021-12-18T03:15:02Z,2021-12-21T11:02:00Z,2021-12-21T11:02:05Z,MERGED,True,99,4134,95,https://github.com/ilammy,Themis 0.14,19,['release'],https://github.com/cossacklabs/themis/pull/883,https://github.com/ilammy,5,https://github.com/cossacklabs/themis/pull/883#issuecomment-997944191,"Getting ready for the next release. Let's see how many things I forgot to update this time.
release-0.14-prep branch is in the main repo, feel free to throw in changes there directly.
Checklist

 Change is covered by automated tests
 Changelog is updated
 Versions are updated
 Provisional 0.14.0 tag points to this branch

Published documentation pending review:

 CHANGELOG.md
 README.md
 gothemis/README.md
 src/wrappers/themis/jsthemis/README.md
 src/wrappers/themis/python/README.md
 src/wrappers/themis/rust/README.md
 src/wrappers/themis/rust/libthemis-sys/README.md
 src/wrappers/themis/wasm/README.md

Packaging files that will be updated later:

PKGBUILD.MSYS2 – once we have a stable tag and source tarball
Package.swift – once we have a binary release ready
docs/examples, tools – once release is published","haha, we had tests for boringssl!

Not funny ☹️ I'll save the jokes for the next PR.
Stand by, I need to unfuck my Ruby installation first to get CocoaPods to install dependencies, to test BoringSSL removal.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,883,2021-12-18T03:15:02Z,2021-12-21T11:02:00Z,2021-12-21T11:02:05Z,MERGED,True,99,4134,95,https://github.com/ilammy,Themis 0.14,19,['release'],https://github.com/cossacklabs/themis/pull/883,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/883#issuecomment-997968984,"Getting ready for the next release. Let's see how many things I forgot to update this time.
release-0.14-prep branch is in the main repo, feel free to throw in changes there directly.
Checklist

 Change is covered by automated tests
 Changelog is updated
 Versions are updated
 Provisional 0.14.0 tag points to this branch

Published documentation pending review:

 CHANGELOG.md
 README.md
 gothemis/README.md
 src/wrappers/themis/jsthemis/README.md
 src/wrappers/themis/python/README.md
 src/wrappers/themis/rust/README.md
 src/wrappers/themis/rust/libthemis-sys/README.md
 src/wrappers/themis/wasm/README.md

Packaging files that will be updated later:

PKGBUILD.MSYS2 – once we have a stable tag and source tarball
Package.swift – once we have a binary release ready
docs/examples, tools – once release is published","And once again 🤞 Third time's the charm, right?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,884,2021-12-20T12:49:31Z,2021-12-20T12:56:32Z,2021-12-20T12:56:36Z,MERGED,True,0,147,1,https://github.com/ilammy,"Nuke `themis/themis-{openssl,boringssl}` subspecs",1,"['O-iOS :iphone:', 'O-macOS :computer:', 'W-SwiftThemis :large_orange_diamond:', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/884,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/884,"We promised that they are going away in Themis 0.14. Time to deliver.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date
 Changelog is updated (will do in #883)","We promised that they are going away in Themis 0.14. Time to deliver.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date
 Changelog is updated (will do in #883)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,885,2021-12-20T14:16:12Z,2021-12-20T14:20:35Z,2021-12-20T14:20:38Z,MERGED,True,3,357,6,https://github.com/ilammy,Stop testing `objthemis_boring` scheme,3,"['W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/885,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/885,"As USA's experience teaches us, if you want to nuke somebody, you should do it twice 
It would be nice if before removing the subspecs we removed their users in our own code. Drop the unit tests verifying ObjCThemis against BoringSSL.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (they are pinned to 0.13, will update later)
 Changelog is updated (this time okay, I mentioned both PRs here)","As USA's experience teaches us, if you want to nuke somebody, you should do it twice 
It would be nice if before removing the subspecs we removed their users in our own code. Drop the unit tests verifying ObjCThemis against BoringSSL.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (they are pinned to 0.13, will update later)
 Changelog is updated (this time okay, I mentioned both PRs here)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,885,2021-12-20T14:16:12Z,2021-12-20T14:20:35Z,2021-12-20T14:20:38Z,MERGED,True,3,357,6,https://github.com/ilammy,Stop testing `objthemis_boring` scheme,3,"['W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/885,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/885#issuecomment-997963854,"As USA's experience teaches us, if you want to nuke somebody, you should do it twice 
It would be nice if before removing the subspecs we removed their users in our own code. Drop the unit tests verifying ObjCThemis against BoringSSL.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (they are pinned to 0.13, will update later)
 Changelog is updated (this time okay, I mentioned both PRs here)",I am not going to wait for tests to complete here. I'll let #883 actually check it against actual podspec without those subspecs.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,885,2021-12-20T14:16:12Z,2021-12-20T14:20:35Z,2021-12-20T14:20:38Z,MERGED,True,3,357,6,https://github.com/ilammy,Stop testing `objthemis_boring` scheme,3,"['W-SwiftThemis :large_orange_diamond:', 'infrastructure', 'W-ObjCThemis :art:', 'M-CocoaPods']",https://github.com/cossacklabs/themis/pull/885,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/885#issuecomment-997965366,"As USA's experience teaches us, if you want to nuke somebody, you should do it twice 
It would be nice if before removing the subspecs we removed their users in our own code. Drop the unit tests verifying ObjCThemis against BoringSSL.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (they are pinned to 0.13, will update later)
 Changelog is updated (this time okay, I mentioned both PRs here)",totally agree,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,886,2021-12-20T15:02:46Z,2021-12-20T16:08:45Z,2021-12-20T16:09:21Z,CLOSED,False,11,452,11,https://github.com/vixentael,Java Keygen EC error?,2,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/886,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/886,"While I'm removing Themis Server references from Java examples, I've noticed the following — Key gen based on EC keys doesn't work in Java anymore (or I'm doing something wrong).
This works:
    Keypair pair = KeypairGenerator.generateKeypair(AsymmetricKey.KEYTYPE_RSA);
    PrivateKey privateKey = pair.getPrivateKey();
    PublicKey publicKey = pair.getPublicKey();

This returns error:
    Keypair pair = KeypairGenerator.generateKeypair(AsymmetricKey.KEYTYPE_EC);

Running SecureMessage example
Exception in thread ""main"" com.cossacklabs.themis.KeyGenerationException: failed to generate keypair
	at com.cossacklabs.themis.KeypairGenerator.generateKeypair(KeypairGenerator.java:63)
	at main.encryptDataForMessaging(main.java:50)
	at main.main(main.java:17)

@ilammy take a look? can you reproduce?
env:
macos
brew reinstall libthemis --with-java

libthemis_jni.dylib copied to /Users/<name>/Library/Java/Extensions.
gradle 6.3","While I'm removing Themis Server references from Java examples, I've noticed the following — Key gen based on EC keys doesn't work in Java anymore (or I'm doing something wrong).
This works:
    Keypair pair = KeypairGenerator.generateKeypair(AsymmetricKey.KEYTYPE_RSA);
    PrivateKey privateKey = pair.getPrivateKey();
    PublicKey publicKey = pair.getPublicKey();

This returns error:
    Keypair pair = KeypairGenerator.generateKeypair(AsymmetricKey.KEYTYPE_EC);

Running SecureMessage example
Exception in thread ""main"" com.cossacklabs.themis.KeyGenerationException: failed to generate keypair
	at com.cossacklabs.themis.KeypairGenerator.generateKeypair(KeypairGenerator.java:63)
	at main.encryptDataForMessaging(main.java:50)
	at main.main(main.java:17)

@ilammy take a look? can you reproduce?
env:
macos
brew reinstall libthemis --with-java

libthemis_jni.dylib copied to /Users/<name>/Library/Java/Extensions.
gradle 6.3",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,886,2021-12-20T15:02:46Z,2021-12-20T16:08:45Z,2021-12-20T16:09:21Z,CLOSED,False,11,452,11,https://github.com/vixentael,Java Keygen EC error?,2,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/886,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/886#issuecomment-998025292,"While I'm removing Themis Server references from Java examples, I've noticed the following — Key gen based on EC keys doesn't work in Java anymore (or I'm doing something wrong).
This works:
    Keypair pair = KeypairGenerator.generateKeypair(AsymmetricKey.KEYTYPE_RSA);
    PrivateKey privateKey = pair.getPrivateKey();
    PublicKey publicKey = pair.getPublicKey();

This returns error:
    Keypair pair = KeypairGenerator.generateKeypair(AsymmetricKey.KEYTYPE_EC);

Running SecureMessage example
Exception in thread ""main"" com.cossacklabs.themis.KeyGenerationException: failed to generate keypair
	at com.cossacklabs.themis.KeypairGenerator.generateKeypair(KeypairGenerator.java:63)
	at main.encryptDataForMessaging(main.java:50)
	at main.main(main.java:17)

@ilammy take a look? can you reproduce?
env:
macos
brew reinstall libthemis --with-java

libthemis_jni.dylib copied to /Users/<name>/Library/Java/Extensions.
gradle 6.3","can you reproduce?

Yes.

brew reinstall libthemis --with-java


This is the root cause. Our Homebrew distribution is still not updated to use openssl@1.1 instead of faulty openssl@3. Java code works fine for me if OpenSSL 1.1.1 is actually used. OpenSSL 3.0 is known to cause issues with Themis 0.13 when generating EC keys specifically.",True,{'HEART': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,886,2021-12-20T15:02:46Z,2021-12-20T16:08:45Z,2021-12-20T16:09:21Z,CLOSED,False,11,452,11,https://github.com/vixentael,Java Keygen EC error?,2,['W-JavaThemis :coffee:'],https://github.com/cossacklabs/themis/pull/886,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/886#issuecomment-998063157,"While I'm removing Themis Server references from Java examples, I've noticed the following — Key gen based on EC keys doesn't work in Java anymore (or I'm doing something wrong).
This works:
    Keypair pair = KeypairGenerator.generateKeypair(AsymmetricKey.KEYTYPE_RSA);
    PrivateKey privateKey = pair.getPrivateKey();
    PublicKey publicKey = pair.getPublicKey();

This returns error:
    Keypair pair = KeypairGenerator.generateKeypair(AsymmetricKey.KEYTYPE_EC);

Running SecureMessage example
Exception in thread ""main"" com.cossacklabs.themis.KeyGenerationException: failed to generate keypair
	at com.cossacklabs.themis.KeypairGenerator.generateKeypair(KeypairGenerator.java:63)
	at main.encryptDataForMessaging(main.java:50)
	at main.main(main.java:17)

@ilammy take a look? can you reproduce?
env:
macos
brew reinstall libthemis --with-java

libthemis_jni.dylib copied to /Users/<name>/Library/Java/Extensions.
gradle 6.3","this issue is solved by updating openssl via homebrew thanks to @ilammy fixes (cossacklabs/homebrew-tap#8, cossacklabs/homebrew-tap#7)
brew tap cossacklabs/tap
brew reinstall libthemis --with-java

it pours openssl1-1
==> Pouring openssl@1.1--1.1.1m.big_sur.bottle.tar.gz
:beer:  /usr/local/Cellar/openssl@1.1/1.1.1m: 8,081 files, 18.5MB
==> Installing cossacklabs/tap/libthemis --with-java

which solves keygen / SM issue:
publicKey1 = [85, 69, 67, 50, 0, 0, 0, 45, 21, 73, 122, 96, 3, -77, -19, 65, 76, 115, -35, 105, 96, 40, 112, 94, -32, 46, -117, 6, -50, 37, -99, 19, -55, -106, 0, 96, 95, 14, 7, -119, 99, 60, 49, -76, -90]
EncodedMessage = ICcEJkMAAAAAAQFADAAAABAAAAAPAAAA/HGUTshiUHGJCWhE891mudMj58HP6zlycHfSEl0c7RD/DRLaCFIOgEDwNw==
DecodedMessage = message to send

I'll close this PR and open new one related to removing themis server.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,887,2021-12-20T16:18:21Z,2021-12-21T10:28:38Z,2021-12-21T11:02:26Z,MERGED,True,26,4079,72,https://github.com/vixentael,Sunsetting Themis Server examples,8,"['docs :books:', 'tests', 'examples']",https://github.com/cossacklabs/themis/pull/887,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/887,"As we are sunsetting Themis Server (aka Themis Interactive Simulator), I have removed corresponded examples, tests and docs.
See also docs update:
cossacklabs/product-docs#221
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","As we are sunsetting Themis Server (aka Themis Interactive Simulator), I have removed corresponded examples, tests and docs.
See also docs update:
cossacklabs/product-docs#221
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,887,2021-12-20T16:18:21Z,2021-12-21T10:28:38Z,2021-12-21T11:02:26Z,MERGED,True,26,4079,72,https://github.com/vixentael,Sunsetting Themis Server examples,8,"['docs :books:', 'tests', 'examples']",https://github.com/cossacklabs/themis/pull/887,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/887#issuecomment-998073951,"As we are sunsetting Themis Server (aka Themis Interactive Simulator), I have removed corresponded examples, tests and docs.
See also docs update:
cossacklabs/product-docs#221
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",Based on findings in #886 I've updated JavaThemis example a bit :),True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,888,2021-12-21T11:30:13Z,2021-12-22T10:57:30Z,2021-12-22T10:57:30Z,MERGED,True,17041,9856,540,https://github.com/ilammy,Merge branch 'release/0.14' into stable,144,['release'],https://github.com/cossacklabs/themis/pull/888,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/888,"Getting ready to push the stable release
Checklist

 Change is covered by automated tests
 Changelog is updated
 Merge commit is signed
 Signed tag prepared
 I have read this message, I will not use GitHub merge button, I will push signed commit to stable","Getting ready to push the stable release
Checklist

 Change is covered by automated tests
 Changelog is updated
 Merge commit is signed
 Signed tag prepared
 I have read this message, I will not use GitHub merge button, I will push signed commit to stable",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,889,2021-12-23T12:26:58Z,2021-12-23T13:20:07Z,2021-12-23T13:20:11Z,MERGED,True,385,50,24,https://github.com/vixentael,"update Themis iOS SPM package, update iOS/macOS examples for 0.14.0",3,"['O-iOS :iphone:', 'O-macOS :computer:', 'M-CocoaPods', 'M-Carthage', 'M-SPM', 'examples']",https://github.com/cossacklabs/themis/pull/889,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/889,"Build Themis.xcframework (added to 0.14.0 release)
Update package.swift
Update carthage examples (iOS, macOS) to use themis 0.14.0
Update SPM examples (iOS, macOS) to use themis 0.14.0
Update cocoapods examples to use themis 0.14.0
Do proper testing — archive, upload to appstore, valide in appstore versions with CCPs and SPM.

Knows issues:

carthage tries to us gothemis/v0.14.0 tag.
carthage often fails due to timeout





Checklist

 Example projects and code samples are up-to-date (in case of API changes)","Build Themis.xcframework (added to 0.14.0 release)
Update package.swift
Update carthage examples (iOS, macOS) to use themis 0.14.0
Update SPM examples (iOS, macOS) to use themis 0.14.0
Update cocoapods examples to use themis 0.14.0
Do proper testing — archive, upload to appstore, valide in appstore versions with CCPs and SPM.

Knows issues:

carthage tries to us gothemis/v0.14.0 tag.
carthage often fails due to timeout





Checklist

 Example projects and code samples are up-to-date (in case of API changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,890,2021-12-23T12:52:48Z,2021-12-23T13:20:51Z,2021-12-23T13:21:00Z,MERGED,True,3,3,3,https://github.com/vixentael,update java example to use 0.14.0,4,"['W-JavaThemis :coffee:', 'examples']",https://github.com/cossacklabs/themis/pull/890,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/890,"update java example to use themis 0.14.0

Checklist

 Example projects and code samples are up-to-date (in case of API changes)","update java example to use themis 0.14.0

Checklist

 Example projects and code samples are up-to-date (in case of API changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,891,2021-12-23T12:59:25Z,2021-12-23T13:04:40Z,2021-12-23T13:04:40Z,MERGED,True,102,4638,99,https://github.com/ilammy,Merge branch `stable`,4,['release'],https://github.com/cossacklabs/themis/pull/891,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/891,"Syncing up Themis 0.14.0 into master.
Checklist

 Change is covered by automated tests
 Changelog is updated","Syncing up Themis 0.14.0 into master.
Checklist

 Change is covered by automated tests
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,893,2021-12-29T15:15:10Z,2021-12-29T15:24:12Z,2021-12-29T15:24:25Z,MERGED,True,7499,7,7,https://github.com/ilammy,Update GoThemis and WasmThemis examples to 0.14.0,9,"['W-GoThemis :hamster:', 'W-WasmThemis :globe_with_meridians:', 'examples']",https://github.com/cossacklabs/themis/pull/893,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/893,"Chasing down some stragglers. These ought to be added to the release checklist.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (not interesting, IMO)","Chasing down some stragglers. These ought to be added to the release checklist.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (not interesting, IMO)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,893,2021-12-29T15:15:10Z,2021-12-29T15:24:12Z,2021-12-29T15:24:25Z,MERGED,True,7499,7,7,https://github.com/ilammy,Update GoThemis and WasmThemis examples to 0.14.0,9,"['W-GoThemis :hamster:', 'W-WasmThemis :globe_with_meridians:', 'examples']",https://github.com/cossacklabs/themis/pull/893,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/893#issuecomment-1002646740,"Chasing down some stragglers. These ought to be added to the release checklist.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (not interesting, IMO)","These ought to be added to the release checklist.

o7 will do",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,893,2021-12-29T15:15:10Z,2021-12-29T15:24:12Z,2021-12-29T15:24:25Z,MERGED,True,7499,7,7,https://github.com/ilammy,Update GoThemis and WasmThemis examples to 0.14.0,9,"['W-GoThemis :hamster:', 'W-WasmThemis :globe_with_meridians:', 'examples']",https://github.com/cossacklabs/themis/pull/893,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/893#issuecomment-1002647142,"Chasing down some stragglers. These ought to be added to the release checklist.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (not interesting, IMO)",I've throw in one more change in README that I missed initially. Will merge without waiting for CI to complete on this branch.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,898,2022-01-19T09:40:09Z,2022-01-19T11:43:38Z,2022-01-19T11:43:41Z,MERGED,True,30,11,3,https://github.com/ilammy,rust: Add Send bound to SecureSessionTransport trait,3,"['compatibility', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/898,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/898,"New Clippy 1.58 has found an unsoundness in RustThemis: unsafe impl for SecureSession make it Send – safe to pass over to a different thread – but in fact it's not safe to do that unless SecureSessionTransport implementation used by SecureSession is also Send, which was expected but never required. Well, now it is required.
This would break application code that uses SecureSessionTransport implementations that are !Send (e.g., using Rc inside, or raw pointers). This is not safe if SecureSession is moved to another thread, but it should be okay if it stays on the same thread as its transport.
I believe that most applications will not be affected by this change. If someone is really out there using !Send transports, they'd come complaining, then I'd decide what to do: either tell them “you're doing it wrong”, or make a patch release that make it possible to SecureSession to be !Send as well.
For now, my goal is to fix a warning from Clippy on CI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","New Clippy 1.58 has found an unsoundness in RustThemis: unsafe impl for SecureSession make it Send – safe to pass over to a different thread – but in fact it's not safe to do that unless SecureSessionTransport implementation used by SecureSession is also Send, which was expected but never required. Well, now it is required.
This would break application code that uses SecureSessionTransport implementations that are !Send (e.g., using Rc inside, or raw pointers). This is not safe if SecureSession is moved to another thread, but it should be okay if it stays on the same thread as its transport.
I believe that most applications will not be affected by this change. If someone is really out there using !Send transports, they'd come complaining, then I'd decide what to do: either tell them “you're doing it wrong”, or make a patch release that make it possible to SecureSession to be !Send as well.
For now, my goal is to fix a warning from Clippy on CI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,898,2022-01-19T09:40:09Z,2022-01-19T11:43:38Z,2022-01-19T11:43:41Z,MERGED,True,30,11,3,https://github.com/ilammy,rust: Add Send bound to SecureSessionTransport trait,3,"['compatibility', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/898,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/898#issuecomment-1016263952,"New Clippy 1.58 has found an unsoundness in RustThemis: unsafe impl for SecureSession make it Send – safe to pass over to a different thread – but in fact it's not safe to do that unless SecureSessionTransport implementation used by SecureSession is also Send, which was expected but never required. Well, now it is required.
This would break application code that uses SecureSessionTransport implementations that are !Send (e.g., using Rc inside, or raw pointers). This is not safe if SecureSession is moved to another thread, but it should be okay if it stays on the same thread as its transport.
I believe that most applications will not be affected by this change. If someone is really out there using !Send transports, they'd come complaining, then I'd decide what to do: either tell them “you're doing it wrong”, or make a patch release that make it possible to SecureSession to be !Send as well.
For now, my goal is to fix a warning from Clippy on CI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Ha-ha, ""all users"", said I. Our own integration tests are those affected users, it seems.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,898,2022-01-19T09:40:09Z,2022-01-19T11:43:38Z,2022-01-19T11:43:41Z,MERGED,True,30,11,3,https://github.com/ilammy,rust: Add Send bound to SecureSessionTransport trait,3,"['compatibility', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/898,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/898#issuecomment-1016274446,"New Clippy 1.58 has found an unsoundness in RustThemis: unsafe impl for SecureSession make it Send – safe to pass over to a different thread – but in fact it's not safe to do that unless SecureSessionTransport implementation used by SecureSession is also Send, which was expected but never required. Well, now it is required.
This would break application code that uses SecureSessionTransport implementations that are !Send (e.g., using Rc inside, or raw pointers). This is not safe if SecureSession is moved to another thread, but it should be okay if it stays on the same thread as its transport.
I believe that most applications will not be affected by this change. If someone is really out there using !Send transports, they'd come complaining, then I'd decide what to do: either tell them “you're doing it wrong”, or make a patch release that make it possible to SecureSession to be !Send as well.
For now, my goal is to fix a warning from Clippy on CI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Should we update Thread Safety guidelines too?
https://docs.cossacklabs.com/themis/debugging/thread-safety/#secure-comparator-secure-session",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,898,2022-01-19T09:40:09Z,2022-01-19T11:43:38Z,2022-01-19T11:43:41Z,MERGED,True,30,11,3,https://github.com/ilammy,rust: Add Send bound to SecureSessionTransport trait,3,"['compatibility', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/898,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/898#issuecomment-1016299983,"New Clippy 1.58 has found an unsoundness in RustThemis: unsafe impl for SecureSession make it Send – safe to pass over to a different thread – but in fact it's not safe to do that unless SecureSessionTransport implementation used by SecureSession is also Send, which was expected but never required. Well, now it is required.
This would break application code that uses SecureSessionTransport implementations that are !Send (e.g., using Rc inside, or raw pointers). This is not safe if SecureSession is moved to another thread, but it should be okay if it stays on the same thread as its transport.
I believe that most applications will not be affected by this change. If someone is really out there using !Send transports, they'd come complaining, then I'd decide what to do: either tell them “you're doing it wrong”, or make a patch release that make it possible to SecureSession to be !Send as well.
For now, my goal is to fix a warning from Clippy on CI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","Should we update Thread Safety guidelines too?

I think it will be okay as is, no need to add any extra warnings there.
Contrary to C++, if a Rust application tries to use SecureSession in unsafe way, the compiler will show an error. Send and Sync traits are there to help. In other languages we have to resort to ""pls don't do that, it's not safe"" in documentation because it's not possible to enforce the requirements at compile-time.",True,{'EYES': ['https://github.com/vixentael']}
cossacklabs/themis,https://github.com/cossacklabs/themis,898,2022-01-19T09:40:09Z,2022-01-19T11:43:38Z,2022-01-19T11:43:41Z,MERGED,True,30,11,3,https://github.com/ilammy,rust: Add Send bound to SecureSessionTransport trait,3,"['compatibility', 'W-RustThemis :crab:']",https://github.com/cossacklabs/themis/pull/898,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/898#issuecomment-1016337886,"New Clippy 1.58 has found an unsoundness in RustThemis: unsafe impl for SecureSession make it Send – safe to pass over to a different thread – but in fact it's not safe to do that unless SecureSessionTransport implementation used by SecureSession is also Send, which was expected but never required. Well, now it is required.
This would break application code that uses SecureSessionTransport implementations that are !Send (e.g., using Rc inside, or raw pointers). This is not safe if SecureSession is moved to another thread, but it should be okay if it stays on the same thread as its transport.
I believe that most applications will not be affected by this change. If someone is really out there using !Send transports, they'd come complaining, then I'd decide what to do: either tell them “you're doing it wrong”, or make a patch release that make it possible to SecureSession to be !Send as well.
For now, my goal is to fix a warning from Clippy on CI.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","In other languages .. it's not possible to enforce the requirements at compile-tim

Rust rules!",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,900,2022-02-06T04:47:49Z,2022-02-06T19:59:48Z,2022-02-06T20:00:14Z,MERGED,True,78,67,1,https://github.com/ilammy,wasm: Update dependencies to fix vulnerabilities in wasm examples,1,"['W-WasmThemis :globe_with_meridians:', 'examples']",https://github.com/cossacklabs/themis/pull/900,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/900,"Dependabot being annoying again. Run npm audit fix for webpack example, fixing CVE-2022-0155, CVE-2022-0122, GHSA-gf8q-jrpm-jvxq, GHSA-5rrq-pxf6-6jx5.
What a waste of PR get.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)","Dependabot being annoying again. Run npm audit fix for webpack example, fixing CVE-2022-0155, CVE-2022-0122, GHSA-gf8q-jrpm-jvxq, GHSA-5rrq-pxf6-6jx5.
What a waste of PR get.
Checklist

 Change is covered by automated tests
 Example projects and code samples are up-to-date (in case of API changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,901,2022-02-07T01:43:02Z,2022-02-07T10:01:04Z,2022-02-07T10:01:51Z,MERGED,True,1442,2197,7,https://github.com/ilammy,"js: Update `mocha` 7 => 9, drop Node.js v8 support",3,"['compatibility', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies']",https://github.com/cossacklabs/themis/pull/901,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/901,"You'd be laughing, but there's more! Dependabot decided to remind me about CVE-2021-3807 which got fixed in October.
Updating mocha lets us update transitive dependency on ansi-regex to fix a potential security vulnerability stop npm audit whining. This also updates all sorts of other stuff, but I can't do anything about JS ecosystem being braindead, sorry. (Though, I'm surprised that jumping over a major version did not break anything that much.)
One thing that did break is support for Node.js v8 for running tests. Node.js v8 has been EOL since 2020, we only keep testing for it because it did not require maintenance on our part. Well, now our transitive development dependencies require at least Node.js v10, so that's our new minimum supported version then.
JsThemis and WasmThemis have a chance to be still working with older Node.js (even before v8), but we don't test that now.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","You'd be laughing, but there's more! Dependabot decided to remind me about CVE-2021-3807 which got fixed in October.
Updating mocha lets us update transitive dependency on ansi-regex to fix a potential security vulnerability stop npm audit whining. This also updates all sorts of other stuff, but I can't do anything about JS ecosystem being braindead, sorry. (Though, I'm surprised that jumping over a major version did not break anything that much.)
One thing that did break is support for Node.js v8 for running tests. Node.js v8 has been EOL since 2020, we only keep testing for it because it did not require maintenance on our part. Well, now our transitive development dependencies require at least Node.js v10, so that's our new minimum supported version then.
JsThemis and WasmThemis have a chance to be still working with older Node.js (even before v8), but we don't test that now.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,901,2022-02-07T01:43:02Z,2022-02-07T10:01:04Z,2022-02-07T10:01:51Z,MERGED,True,1442,2197,7,https://github.com/ilammy,"js: Update `mocha` 7 => 9, drop Node.js v8 support",3,"['compatibility', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies']",https://github.com/cossacklabs/themis/pull/901,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/901#issuecomment-1031279742,"You'd be laughing, but there's more! Dependabot decided to remind me about CVE-2021-3807 which got fixed in October.
Updating mocha lets us update transitive dependency on ansi-regex to fix a potential security vulnerability stop npm audit whining. This also updates all sorts of other stuff, but I can't do anything about JS ecosystem being braindead, sorry. (Though, I'm surprised that jumping over a major version did not break anything that much.)
One thing that did break is support for Node.js v8 for running tests. Node.js v8 has been EOL since 2020, we only keep testing for it because it did not require maintenance on our part. Well, now our transitive development dependencies require at least Node.js v10, so that's our new minimum supported version then.
JsThemis and WasmThemis have a chance to be still working with older Node.js (even before v8), but we don't test that now.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","stop npm audit whining

ahha.
bye-bye Nodejs v8 ✋",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,902,2022-03-04T21:54:14Z,2022-03-05T14:19:49Z,2022-03-05T14:57:45Z,MERGED,True,12959,0,89,https://github.com/radetsky,Adding React Native Themis,8,"['O-iOS :iphone:', 'O-Android :robot:', 'O-ReactNative ⚛️']",https://github.com/cossacklabs/themis/pull/902,https://github.com/radetsky,1,https://github.com/cossacklabs/themis/pull/902,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,902,2022-03-04T21:54:14Z,2022-03-05T14:19:49Z,2022-03-05T14:57:45Z,MERGED,True,12959,0,89,https://github.com/radetsky,Adding React Native Themis,8,"['O-iOS :iphone:', 'O-Android :robot:', 'O-ReactNative ⚛️']",https://github.com/cossacklabs/themis/pull/902,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/902#issuecomment-1059758914,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","@ilammy thank you for your suggestions. right now we try to move with small PRs (this one is an exception), so we will update readme, add tests, etc, but as standalone pieces.
@radetsky plz take a look on my comments",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,902,2022-03-04T21:54:14Z,2022-03-05T14:19:49Z,2022-03-05T14:57:45Z,MERGED,True,12959,0,89,https://github.com/radetsky,Adding React Native Themis,8,"['O-iOS :iphone:', 'O-Android :robot:', 'O-ReactNative ⚛️']",https://github.com/cossacklabs/themis/pull/902,https://github.com/vixentael,3,https://github.com/cossacklabs/themis/pull/902#issuecomment-1059773424,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","ObjCThemis / Code examples (pull_request)

these tests are failing because of Carthage",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,903,2022-03-05T19:09:41Z,2022-03-05T19:11:14Z,2022-03-05T19:11:17Z,MERGED,True,5,4,1,https://github.com/vixentael,"update readme, mention themis rn",1,['docs :books:'],https://github.com/cossacklabs/themis/pull/903,https://github.com/vixentael,1,https://github.com/cossacklabs/themis/pull/903,"Update readme, mention themis react native.","Update readme, mention themis react native.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,904,2022-03-07T15:36:34Z,2022-03-07T18:40:10Z,2022-03-07T18:40:15Z,CLOSED,False,17,7,6,https://github.com/radetsky,React native themis,12,[],https://github.com/cossacklabs/themis/pull/904,https://github.com/radetsky,1,https://github.com/cossacklabs/themis/pull/904,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,904,2022-03-07T15:36:34Z,2022-03-07T18:40:10Z,2022-03-07T18:40:15Z,CLOSED,False,17,7,6,https://github.com/radetsky,React native themis,12,[],https://github.com/cossacklabs/themis/pull/904,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/904#issuecomment-1061007258,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Close, see #905",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,905,2022-03-07T18:17:49Z,2022-03-07T18:39:45Z,2022-03-07T18:39:45Z,MERGED,True,17,7,6,https://github.com/radetsky,update README and example to use 0.14.3 version from npm registry,1,[],https://github.com/cossacklabs/themis/pull/905,https://github.com/radetsky,1,https://github.com/cossacklabs/themis/pull/905,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,906,2022-03-15T17:11:52Z,2022-03-15T17:55:26Z,2022-03-16T11:05:04Z,MERGED,True,36,17,6,https://github.com/radetsky,Improve handling of optional context for Secure Cell Token Protect and Seal,4,[],https://github.com/cossacklabs/themis/pull/906,https://github.com/radetsky,1,https://github.com/cossacklabs/themis/pull/906,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{'THUMBS_UP': ['https://github.com/ilammy']}
cossacklabs/themis,https://github.com/cossacklabs/themis,906,2022-03-15T17:11:52Z,2022-03-15T17:55:26Z,2022-03-16T11:05:04Z,MERGED,True,36,17,6,https://github.com/radetsky,Improve handling of optional context for Secure Cell Token Protect and Seal,4,[],https://github.com/cossacklabs/themis/pull/906,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/906#issuecomment-1068257617,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",can we test it somehow?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,906,2022-03-15T17:11:52Z,2022-03-15T17:55:26Z,2022-03-16T11:05:04Z,MERGED,True,36,17,6,https://github.com/radetsky,Improve handling of optional context for Secure Cell Token Protect and Seal,4,[],https://github.com/cossacklabs/themis/pull/906,https://github.com/radetsky,3,https://github.com/cossacklabs/themis/pull/906#issuecomment-1068292840,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","I have tested it manually.
I'd like to use jest or some other methods, but we can't test native modules with JS together.
I already investigated it.  Because JS can not run native code.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,907,2022-03-18T11:48:47Z,2022-03-18T12:03:28Z,2022-04-17T00:07:50Z,MERGED,True,21,3,4,https://github.com/ilammy,jsthemis: Fix search paths on Apple M1,4,"['O-macOS :computer:', 'W-JsThemis :lollipop:', 'M1']",https://github.com/cossacklabs/themis/pull/907,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/907,"Homebrew on Apple M1 installs its stuff in /opt/homebrew because they wanted clean breakage. And breakage they got. Reportedly, JsThemis fails to install on M1 as it does not look for libthemis where it should be.
Add M1 paths to search paths that GYP passes to compiler. Hopefully, that's all we need for now. After jsthemis@0.14.1 is released, normal installation should work again:
brew tap cossacklabs/tap
brew install libthemis
npm install jsthemis
Checklist

 Change is covered by automated tests (not really, but you tried...)
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)","Homebrew on Apple M1 installs its stuff in /opt/homebrew because they wanted clean breakage. And breakage they got. Reportedly, JsThemis fails to install on M1 as it does not look for libthemis where it should be.
Add M1 paths to search paths that GYP passes to compiler. Hopefully, that's all we need for now. After jsthemis@0.14.1 is released, normal installation should work again:
brew tap cossacklabs/tap
brew install libthemis
npm install jsthemis
Checklist

 Change is covered by automated tests (not really, but you tried...)
 The coding guidelines are followed
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,908,2022-04-05T14:35:24Z,2022-04-06T11:53:06Z,2022-04-06T12:38:54Z,MERGED,True,13009,4,92,https://github.com/radetsky,Release of React Native Themis ,7,[],https://github.com/cossacklabs/themis/pull/908,https://github.com/radetsky,1,https://github.com/cossacklabs/themis/pull/908,"Added React Native Themis
Typescript support
Fixes and improves.","Added React Native Themis
Typescript support
Fixes and improves.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,909,2022-04-12T08:49:32Z,2022-04-14T09:59:16Z,2022-04-14T09:59:59Z,MERGED,True,81,57,4,https://github.com/radetsky,Improve wasm-themis to be more compatible with TypeScript ,8,['W-WasmThemis :globe_with_meridians:'],https://github.com/cossacklabs/themis/pull/909,https://github.com/radetsky,1,https://github.com/cossacklabs/themis/pull/909,"In secure_cell_seal mode two encrypt method and one decrypt was declared with a single parameter and the developer used optional arguments to handle the optional context. When we use TypeScript to work with the Themis, the compiler generates the error while compiling in case of using a non-empty context.
I made a declaration of an optional parameter, not an argument (see javascript parameters vs arguments of function). Also, I remove a single case of test cases (see test.js diff) because undefined optional context is always ok. We can use it.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","In secure_cell_seal mode two encrypt method and one decrypt was declared with a single parameter and the developer used optional arguments to handle the optional context. When we use TypeScript to work with the Themis, the compiler generates the error while compiling in case of using a non-empty context.
I made a declaration of an optional parameter, not an argument (see javascript parameters vs arguments of function). Also, I remove a single case of test cases (see test.js diff) because undefined optional context is always ok. We can use it.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,910,2022-04-14T10:52:55Z,2022-04-14T11:12:40Z,2022-04-14T11:12:59Z,MERGED,True,8,0,1,https://github.com/radetsky,update changelog,2,"['release', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/910,https://github.com/radetsky,1,https://github.com/cossacklabs/themis/pull/910,"I have added information about what have I done in the previous pull request.

 Public API has proper documentation
 Changelog is updated (in case of notable or breaking changes)","I have added information about what have I done in the previous pull request.

 Public API has proper documentation
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,912,2022-04-14T13:02:24Z,2022-04-14T14:20:26Z,2022-04-14T14:20:31Z,MERGED,True,79,28,5,https://github.com/radetsky,WasmThemis improvements going to master,11,"['docs :books:', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/912,https://github.com/radetsky,1,https://github.com/cossacklabs/themis/pull/912,"Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)","Checklist

 Change is covered by automated tests
 Benchmark results are attached (if applicable)
 The coding guidelines are followed
 Public API has proper documentation
 Example projects and code samples are up-to-date (in case of API changes)
 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,914,2022-04-17T01:04:32Z,2022-04-18T12:10:17Z,2022-04-18T12:10:20Z,MERGED,True,11,1,2,https://github.com/ilammy,pythemis: Populate `__all__` with all public modules,1,['W-PyThemis :snake:'],https://github.com/cossacklabs/themis/pull/914,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/914,"This makes
from pythemis import *
import all important modules into the scope, not some just of them.
exception is also sorta-kinda public, but users shouldn't really have a need for that by default, and it's a pretty generic name. You can still import it explicitly.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated","This makes
from pythemis import *
import all important modules into the scope, not some just of them.
exception is also sorta-kinda public, but users shouldn't really have a need for that by default, and it's a pretty generic name. You can still import it explicitly.
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,915,2022-04-17T02:18:18Z,2022-04-21T09:07:35Z,2022-04-21T09:07:39Z,MERGED,True,66,20,7,https://github.com/ilammy,pythemis: Extra effort to locate Themis Core library,5,"['W-PyThemis :snake:', 'O-macOS :computer:', 'O-Linux :penguin:', 'M1']",https://github.com/cossacklabs/themis/pull/915,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/915,"Put in some extra effort to locate the right native library.


Look for libthemis.so.0 or libthemis.0.dylib first.
Instead of looking for some Themis Core, look for the one with the proper ABI version in it. First of all, this finally allows users to install only libthemis package, without libthemis-dev. Second, this prevents PyThemis from accidentally loading Themis 1.x or 2.x libraries, should they ever be co-installed in the system.
find_library('themis') code path remains as a fallback on Linux and macOS, and it's also used on Windows by default. No idea whether PyThemis works there, but this PR should at least not make it worse.


Look in some ""standard"" search paths as well.
PyThemis expects Themis Core to be installed in one of the paths dynamic linker would be looking in. Normally, it all works out, but on some 🌈 ｓｐｅｃｉａｌ 🦄 systems Homebrew on Apple M1 installs libraries into /opt/homebrew, which – surprise! – is not in standard search paths when non-Homebrew Python is used.
While arguably it's the user environment issue, Python developers are not very fond of debugging native library loading and that's PyThemis fault for requiring a native library in the first place, so let's at least attempt to make things ""just work"" before giving up.
So on both Linux and macOS we'd be looking in /usr/local/lib where make install puts Themis Core, and on macOS we'd be looking in /opt/homebrew/lib just in case (on Intel CPUs Homebrew installs to /usr/local/lib).


Related issues:

#913

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Put in some extra effort to locate the right native library.


Look for libthemis.so.0 or libthemis.0.dylib first.
Instead of looking for some Themis Core, look for the one with the proper ABI version in it. First of all, this finally allows users to install only libthemis package, without libthemis-dev. Second, this prevents PyThemis from accidentally loading Themis 1.x or 2.x libraries, should they ever be co-installed in the system.
find_library('themis') code path remains as a fallback on Linux and macOS, and it's also used on Windows by default. No idea whether PyThemis works there, but this PR should at least not make it worse.


Look in some ""standard"" search paths as well.
PyThemis expects Themis Core to be installed in one of the paths dynamic linker would be looking in. Normally, it all works out, but on some 🌈 ｓｐｅｃｉａｌ 🦄 systems Homebrew on Apple M1 installs libraries into /opt/homebrew, which – surprise! – is not in standard search paths when non-Homebrew Python is used.
While arguably it's the user environment issue, Python developers are not very fond of debugging native library loading and that's PyThemis fault for requiring a native library in the first place, so let's at least attempt to make things ""just work"" before giving up.
So on both Linux and macOS we'd be looking in /usr/local/lib where make install puts Themis Core, and on macOS we'd be looking in /opt/homebrew/lib just in case (on Intel CPUs Homebrew installs to /usr/local/lib).


Related issues:

#913

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,915,2022-04-17T02:18:18Z,2022-04-21T09:07:35Z,2022-04-21T09:07:39Z,MERGED,True,66,20,7,https://github.com/ilammy,pythemis: Extra effort to locate Themis Core library,5,"['W-PyThemis :snake:', 'O-macOS :computer:', 'O-Linux :penguin:', 'M1']",https://github.com/cossacklabs/themis/pull/915,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/915#issuecomment-1101353026,"Put in some extra effort to locate the right native library.


Look for libthemis.so.0 or libthemis.0.dylib first.
Instead of looking for some Themis Core, look for the one with the proper ABI version in it. First of all, this finally allows users to install only libthemis package, without libthemis-dev. Second, this prevents PyThemis from accidentally loading Themis 1.x or 2.x libraries, should they ever be co-installed in the system.
find_library('themis') code path remains as a fallback on Linux and macOS, and it's also used on Windows by default. No idea whether PyThemis works there, but this PR should at least not make it worse.


Look in some ""standard"" search paths as well.
PyThemis expects Themis Core to be installed in one of the paths dynamic linker would be looking in. Normally, it all works out, but on some 🌈 ｓｐｅｃｉａｌ 🦄 systems Homebrew on Apple M1 installs libraries into /opt/homebrew, which – surprise! – is not in standard search paths when non-Homebrew Python is used.
While arguably it's the user environment issue, Python developers are not very fond of debugging native library loading and that's PyThemis fault for requiring a native library in the first place, so let's at least attempt to make things ""just work"" before giving up.
So on both Linux and macOS we'd be looking in /usr/local/lib where make install puts Themis Core, and on macOS we'd be looking in /opt/homebrew/lib just in case (on Intel CPUs Homebrew installs to /usr/local/lib).


Related issues:

#913

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated","Rebased with no changes, swizzled out the first commit which got already merged into master. Applied suggested wording changes by @vixentael.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,915,2022-04-17T02:18:18Z,2022-04-21T09:07:35Z,2022-04-21T09:07:39Z,MERGED,True,66,20,7,https://github.com/ilammy,pythemis: Extra effort to locate Themis Core library,5,"['W-PyThemis :snake:', 'O-macOS :computer:', 'O-Linux :penguin:', 'M1']",https://github.com/cossacklabs/themis/pull/915,https://github.com/ilammy,3,https://github.com/cossacklabs/themis/pull/915#issuecomment-1104565002,"Put in some extra effort to locate the right native library.


Look for libthemis.so.0 or libthemis.0.dylib first.
Instead of looking for some Themis Core, look for the one with the proper ABI version in it. First of all, this finally allows users to install only libthemis package, without libthemis-dev. Second, this prevents PyThemis from accidentally loading Themis 1.x or 2.x libraries, should they ever be co-installed in the system.
find_library('themis') code path remains as a fallback on Linux and macOS, and it's also used on Windows by default. No idea whether PyThemis works there, but this PR should at least not make it worse.


Look in some ""standard"" search paths as well.
PyThemis expects Themis Core to be installed in one of the paths dynamic linker would be looking in. Normally, it all works out, but on some 🌈 ｓｐｅｃｉａｌ 🦄 systems Homebrew on Apple M1 installs libraries into /opt/homebrew, which – surprise! – is not in standard search paths when non-Homebrew Python is used.
While arguably it's the user environment issue, Python developers are not very fond of debugging native library loading and that's PyThemis fault for requiring a native library in the first place, so let's at least attempt to make things ""just work"" before giving up.
So on both Linux and macOS we'd be looking in /usr/local/lib where make install puts Themis Core, and on macOS we'd be looking in /opt/homebrew/lib just in case (on Intel CPUs Homebrew installs to /usr/local/lib).


Related issues:

#913

Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Public API has proper documentation
 Changelog is updated",Updated the last couple of commits to follow #917's approach.,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,916,2022-04-18T14:44:15Z,,2022-04-21T10:26:42Z,OPEN,False,6120,10415,7,https://github.com/ilammy,CI: Audit JavaScript dependencies,8,"['infrastructure', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies', 'W-RNThemis ⚛️']",https://github.com/cossacklabs/themis/pull/916,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/916,"Dependabot produces more spam and stress than value. It's a good effort, Microsoft, but I need more flexibility in what and where gets reported.

I don't want to be greeted with ""OMFG YOU HAVE 47 CRITICAL AND 582 HIGH SEVERITY VULNERABILITIES! DROP WHATEVER THE FUCK YOU WANTED TO DO AND DEAL WITH THIS SHIT NOW OR ELSE I AM NOT GOING TO REMOVE THIS WARNING FROM YOUR REPOSITORY"" every time I open GitHub. Even if I got paid for this, I wouldn't want to be experiencing it.
Introduce our own dependency audit thing, which is basically the same npm audit under the hood, but with some tweaks:

Customizable severity levels for reports
Examples are checked only in master
Release branches check only non-dev dependencies

Run this for every pull request made against any branch, for every push made after a pull request, and daily for all long-term branches.
For now, only JavaScript dependencies. Later this could be expanded to more languages (cargo audit would be an easy one, for example).
Once you're all good with these reports and language coverage, let's disable Dependabot for the repo, okay? 🥺
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (do we need a line?)","Dependabot produces more spam and stress than value. It's a good effort, Microsoft, but I need more flexibility in what and where gets reported.

I don't want to be greeted with ""OMFG YOU HAVE 47 CRITICAL AND 582 HIGH SEVERITY VULNERABILITIES! DROP WHATEVER THE FUCK YOU WANTED TO DO AND DEAL WITH THIS SHIT NOW OR ELSE I AM NOT GOING TO REMOVE THIS WARNING FROM YOUR REPOSITORY"" every time I open GitHub. Even if I got paid for this, I wouldn't want to be experiencing it.
Introduce our own dependency audit thing, which is basically the same npm audit under the hood, but with some tweaks:

Customizable severity levels for reports
Examples are checked only in master
Release branches check only non-dev dependencies

Run this for every pull request made against any branch, for every push made after a pull request, and daily for all long-term branches.
For now, only JavaScript dependencies. Later this could be expanded to more languages (cargo audit would be an easy one, for example).
Once you're all good with these reports and language coverage, let's disable Dependabot for the repo, okay? 🥺
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (do we need a line?)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,916,2022-04-18T14:44:15Z,,2022-04-21T10:26:42Z,OPEN,False,6120,10415,7,https://github.com/ilammy,CI: Audit JavaScript dependencies,8,"['infrastructure', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies', 'W-RNThemis ⚛️']",https://github.com/cossacklabs/themis/pull/916,https://github.com/vixentael,2,https://github.com/cossacklabs/themis/pull/916#issuecomment-1101470085,"Dependabot produces more spam and stress than value. It's a good effort, Microsoft, but I need more flexibility in what and where gets reported.

I don't want to be greeted with ""OMFG YOU HAVE 47 CRITICAL AND 582 HIGH SEVERITY VULNERABILITIES! DROP WHATEVER THE FUCK YOU WANTED TO DO AND DEAL WITH THIS SHIT NOW OR ELSE I AM NOT GOING TO REMOVE THIS WARNING FROM YOUR REPOSITORY"" every time I open GitHub. Even if I got paid for this, I wouldn't want to be experiencing it.
Introduce our own dependency audit thing, which is basically the same npm audit under the hood, but with some tweaks:

Customizable severity levels for reports
Examples are checked only in master
Release branches check only non-dev dependencies

Run this for every pull request made against any branch, for every push made after a pull request, and daily for all long-term branches.
For now, only JavaScript dependencies. Later this could be expanded to more languages (cargo audit would be an easy one, for example).
Once you're all good with these reports and language coverage, let's disable Dependabot for the repo, okay? 🥺
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (do we need a line?)","Changelog is updated (do we need a line?)

i don't think we need anything in changelog.
re: npm audit — great effort! i was thinking about adding Snyk, but i'm not sure if their report are better than dependabot",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,916,2022-04-18T14:44:15Z,,2022-04-21T10:26:42Z,OPEN,False,6120,10415,7,https://github.com/ilammy,CI: Audit JavaScript dependencies,8,"['infrastructure', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies', 'W-RNThemis ⚛️']",https://github.com/cossacklabs/themis/pull/916,https://github.com/Lagovas,3,https://github.com/cossacklabs/themis/pull/916#issuecomment-1101472659,"Dependabot produces more spam and stress than value. It's a good effort, Microsoft, but I need more flexibility in what and where gets reported.

I don't want to be greeted with ""OMFG YOU HAVE 47 CRITICAL AND 582 HIGH SEVERITY VULNERABILITIES! DROP WHATEVER THE FUCK YOU WANTED TO DO AND DEAL WITH THIS SHIT NOW OR ELSE I AM NOT GOING TO REMOVE THIS WARNING FROM YOUR REPOSITORY"" every time I open GitHub. Even if I got paid for this, I wouldn't want to be experiencing it.
Introduce our own dependency audit thing, which is basically the same npm audit under the hood, but with some tweaks:

Customizable severity levels for reports
Examples are checked only in master
Release branches check only non-dev dependencies

Run this for every pull request made against any branch, for every push made after a pull request, and daily for all long-term branches.
For now, only JavaScript dependencies. Later this could be expanded to more languages (cargo audit would be an easy one, for example).
Once you're all good with these reports and language coverage, let's disable Dependabot for the repo, okay? 🥺
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (do we need a line?)",should we turn off dependabot if we run our own workflow for audit? or re-configure via dependabot.yaml?,True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,916,2022-04-18T14:44:15Z,,2022-04-21T10:26:42Z,OPEN,False,6120,10415,7,https://github.com/ilammy,CI: Audit JavaScript dependencies,8,"['infrastructure', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies', 'W-RNThemis ⚛️']",https://github.com/cossacklabs/themis/pull/916,https://github.com/ilammy,4,https://github.com/cossacklabs/themis/pull/916#issuecomment-1101476568,"Dependabot produces more spam and stress than value. It's a good effort, Microsoft, but I need more flexibility in what and where gets reported.

I don't want to be greeted with ""OMFG YOU HAVE 47 CRITICAL AND 582 HIGH SEVERITY VULNERABILITIES! DROP WHATEVER THE FUCK YOU WANTED TO DO AND DEAL WITH THIS SHIT NOW OR ELSE I AM NOT GOING TO REMOVE THIS WARNING FROM YOUR REPOSITORY"" every time I open GitHub. Even if I got paid for this, I wouldn't want to be experiencing it.
Introduce our own dependency audit thing, which is basically the same npm audit under the hood, but with some tweaks:

Customizable severity levels for reports
Examples are checked only in master
Release branches check only non-dev dependencies

Run this for every pull request made against any branch, for every push made after a pull request, and daily for all long-term branches.
For now, only JavaScript dependencies. Later this could be expanded to more languages (cargo audit would be an easy one, for example).
Once you're all good with these reports and language coverage, let's disable Dependabot for the repo, okay? 🥺
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (do we need a line?)","should we turn off dependabot if we run our own workflow for audit? or re-configure via dependabot.yaml?

Oh, right. It should be possible to disable it only for some package managers. Say, now that npm is covered by a custom script – disable Dependabot for npm but keep it running for everything else...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,916,2022-04-18T14:44:15Z,,2022-04-21T10:26:42Z,OPEN,False,6120,10415,7,https://github.com/ilammy,CI: Audit JavaScript dependencies,8,"['infrastructure', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies', 'W-RNThemis ⚛️']",https://github.com/cossacklabs/themis/pull/916,https://github.com/vixentael,5,https://github.com/cossacklabs/themis/pull/916#issuecomment-1101478250,"Dependabot produces more spam and stress than value. It's a good effort, Microsoft, but I need more flexibility in what and where gets reported.

I don't want to be greeted with ""OMFG YOU HAVE 47 CRITICAL AND 582 HIGH SEVERITY VULNERABILITIES! DROP WHATEVER THE FUCK YOU WANTED TO DO AND DEAL WITH THIS SHIT NOW OR ELSE I AM NOT GOING TO REMOVE THIS WARNING FROM YOUR REPOSITORY"" every time I open GitHub. Even if I got paid for this, I wouldn't want to be experiencing it.
Introduce our own dependency audit thing, which is basically the same npm audit under the hood, but with some tweaks:

Customizable severity levels for reports
Examples are checked only in master
Release branches check only non-dev dependencies

Run this for every pull request made against any branch, for every push made after a pull request, and daily for all long-term branches.
For now, only JavaScript dependencies. Later this could be expanded to more languages (cargo audit would be an easy one, for example).
Once you're all good with these reports and language coverage, let's disable Dependabot for the repo, okay? 🥺
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (do we need a line?)","i think we should enable npm checks first, and only then disable dependabot. it doesn't ask to eat, so...",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,916,2022-04-18T14:44:15Z,,2022-04-21T10:26:42Z,OPEN,False,6120,10415,7,https://github.com/ilammy,CI: Audit JavaScript dependencies,8,"['infrastructure', 'W-WasmThemis :globe_with_meridians:', 'W-JsThemis :lollipop:', 'dependencies', 'W-RNThemis ⚛️']",https://github.com/cossacklabs/themis/pull/916,https://github.com/ilammy,6,https://github.com/cossacklabs/themis/pull/916#issuecomment-1101484596,"Dependabot produces more spam and stress than value. It's a good effort, Microsoft, but I need more flexibility in what and where gets reported.

I don't want to be greeted with ""OMFG YOU HAVE 47 CRITICAL AND 582 HIGH SEVERITY VULNERABILITIES! DROP WHATEVER THE FUCK YOU WANTED TO DO AND DEAL WITH THIS SHIT NOW OR ELSE I AM NOT GOING TO REMOVE THIS WARNING FROM YOUR REPOSITORY"" every time I open GitHub. Even if I got paid for this, I wouldn't want to be experiencing it.
Introduce our own dependency audit thing, which is basically the same npm audit under the hood, but with some tweaks:

Customizable severity levels for reports
Examples are checked only in master
Release branches check only non-dev dependencies

Run this for every pull request made against any branch, for every push made after a pull request, and daily for all long-term branches.
For now, only JavaScript dependencies. Later this could be expanded to more languages (cargo audit would be an easy one, for example).
Once you're all good with these reports and language coverage, let's disable Dependabot for the repo, okay? 🥺
Checklist

 Change is covered by automated tests
 The coding guidelines are followed
 Example projects and code samples are up-to-date
 Changelog is updated (do we need a line?)","Well, I'm not sure it is possible, since ""Dependabot alerts"", ""Dependabot security updates"", and ""Dependabot version updates"" look like separate features.
We never had ""version updates"" enabled (bot submitting PRs to update outdated dependencies). ""Security updates"" got disabled because of how unpredictable and annoying the PR stream was.
Now, I don't really see any documentation on how to disable ""alerts"" specifically for certain package managers. Initially I assumed it to be an all-or-nothing thing. I'd suggest to merge this PR, then maybe throw in more audit checks for whatever wrappers actually have dependencies (many do not), and then finally disable Dependabot completely. In the meantime, pending warnings could be dismissed manually (thankfully, there is a button for that now).",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,917,2022-04-20T00:28:24Z,2022-04-21T10:26:16Z,2022-04-21T10:26:20Z,MERGED,True,48,1,2,https://github.com/ilammy,rbthemis: Extra effort to locate Themis Core library,2,"['W-RbThemis :diamonds:', 'O-macOS :computer:', 'O-Linux :penguin:', 'M1']",https://github.com/cossacklabs/themis/pull/917,https://github.com/ilammy,1,https://github.com/cossacklabs/themis/pull/917,"Just like with PyThemis, migrate RbThemis to the same pattern of loading Themis Core library dynamically with more attention to versioning.
Detect the platform and load properly versioned libraries first, reducing the chance for an ABI mismatch. However, keep the 'themis' as a fallback (and a default action for Windows).
Ruby's ffi_lib is in some ways more smart than Python's find_library (it supports Apple M1 by accident, for example) but in some ways it's also dumber. Don't depend on ffi's maintainers and hardcode a list of absolute paths to try first in attempt to make things ""just work"".
Checklist

 Change is covered by automated tests (kinda?)
 The coding guidelines are followed
 Changelog is updated","Just like with PyThemis, migrate RbThemis to the same pattern of loading Themis Core library dynamically with more attention to versioning.
Detect the platform and load properly versioned libraries first, reducing the chance for an ABI mismatch. However, keep the 'themis' as a fallback (and a default action for Windows).
Ruby's ffi_lib is in some ways more smart than Python's find_library (it supports Apple M1 by accident, for example) but in some ways it's also dumber. Don't depend on ffi's maintainers and hardcode a list of absolute paths to try first in attempt to make things ""just work"".
Checklist

 Change is covered by automated tests (kinda?)
 The coding guidelines are followed
 Changelog is updated",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,917,2022-04-20T00:28:24Z,2022-04-21T10:26:16Z,2022-04-21T10:26:20Z,MERGED,True,48,1,2,https://github.com/ilammy,rbthemis: Extra effort to locate Themis Core library,2,"['W-RbThemis :diamonds:', 'O-macOS :computer:', 'O-Linux :penguin:', 'M1']",https://github.com/cossacklabs/themis/pull/917,https://github.com/ilammy,2,https://github.com/cossacklabs/themis/pull/917#issuecomment-1103304034,"Just like with PyThemis, migrate RbThemis to the same pattern of loading Themis Core library dynamically with more attention to versioning.
Detect the platform and load properly versioned libraries first, reducing the chance for an ABI mismatch. However, keep the 'themis' as a fallback (and a default action for Windows).
Ruby's ffi_lib is in some ways more smart than Python's find_library (it supports Apple M1 by accident, for example) but in some ways it's also dumber. Don't depend on ffi's maintainers and hardcode a list of absolute paths to try first in attempt to make things ""just work"".
Checklist

 Change is covered by automated tests (kinda?)
 The coding guidelines are followed
 Changelog is updated","This one is a cousin of #915 for Ruby.
As I've learned, DYLD_LIBRARY_PATH actually does not work on Macs. Since, like, El Capitan it's ignored by dyld because ""security!"" & ""System Integrity Protection!""
Libraries loaded at runtime are expected to follow the rules for libraries loaded on startup. That is, use absolute installation paths. While on Linux you can normally load libraries by their stem name (e.g., libfoo.so), here you're expected to use the library's installation path (you can see it in otool output). Under the hood, Ruby's ffi_lib just hardcodes a bunch of absolute path prefixes and tries them all in sequence if you give it something that is not an absolute path already.
With Python setting DYLD_LIBRARY_PATH in environment ""works"" only because its ffi has some special compatibility hacks that make it work. I don't like depending on hack, so I would like to rework #915 in the same manner as here. That is, search a bunch of hardcoded absolute paths, in lieu of the interpreter having a ""real"" native library dependency mechanisms.
Also, the paths searched here on macOS are from Homebrew's ""cellar"". That is an attempt to make things work if you do
brew unlink libthemis

As this does work for compiled software.
I'm not sure it's a good idea though. It certainly makes releasing things a bit harder, adding one more place with a version to be bumped.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,918,2022-05-24T11:11:00Z,2022-05-24T17:44:45Z,2022-05-24T17:44:45Z,MERGED,True,6,2,3,https://github.com/radetsky,Compiler optimization level for building WasmThemis — merge to master,4,"['release', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/918,https://github.com/radetsky,1,https://github.com/cossacklabs/themis/pull/918,"Increasing compiler optimization level for building WasmThemis and updating CHANGELOG.md about it.
Checklist

 Changelog is updated (in case of notable or breaking changes)","Increasing compiler optimization level for building WasmThemis and updating CHANGELOG.md about it.
Checklist

 Changelog is updated (in case of notable or breaking changes)",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,918,2022-05-24T11:11:00Z,2022-05-24T17:44:45Z,2022-05-24T17:44:45Z,MERGED,True,6,2,3,https://github.com/radetsky,Compiler optimization level for building WasmThemis — merge to master,4,"['release', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/918,https://github.com/Lagovas,2,https://github.com/cossacklabs/themis/pull/918#issuecomment-1135808179,"Increasing compiler optimization level for building WasmThemis and updating CHANGELOG.md about it.
Checklist

 Changelog is updated (in case of notable or breaking changes)","what does it give to us? less/bigger size, less/more performance?",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,918,2022-05-24T11:11:00Z,2022-05-24T17:44:45Z,2022-05-24T17:44:45Z,MERGED,True,6,2,3,https://github.com/radetsky,Compiler optimization level for building WasmThemis — merge to master,4,"['release', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/918,https://github.com/radetsky,3,https://github.com/cossacklabs/themis/pull/918#issuecomment-1135832355,"Increasing compiler optimization level for building WasmThemis and updating CHANGELOG.md about it.
Checklist

 Changelog is updated (in case of notable or breaking changes)","what does it give to us? less/bigger size, less/more performance?

Less size of libthemis.js. It is critical for using Firefox extensions.",True,{}
cossacklabs/themis,https://github.com/cossacklabs/themis,919,2022-05-24T11:35:16Z,2022-05-24T11:46:34Z,2022-05-24T11:49:05Z,MERGED,True,6,2,3,https://github.com/radetsky,Compiler optimization level for building WasmThemis: 0.14.6,4,"['release', 'W-WasmThemis :globe_with_meridians:']",https://github.com/cossacklabs/themis/pull/919,https://github.com/radetsky,1,https://github.com/cossacklabs/themis/pull/919,"Checklist

 Changelog is updated (in case of notable or breaking changes)","Checklist

 Changelog is updated (in case of notable or breaking changes)",True,{}
